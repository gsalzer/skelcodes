{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/*\r\nGame: CryptoPokemon\r\nDomain: CryptoPokemon.com\r\nDev: CryptoPokemon Team\r\n*/\r\n\r\nlibrary SafeMath {\r\n\r\n/**\r\n* @dev Multiplies two numbers, throws on overflow.\r\n*/\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nuint256 c = a * b;\r\nassert(c / a == b);\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Integer division of two numbers, truncating the quotient.\r\n*/\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\nuint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n*/\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nassert(b <= a);\r\nreturn a - b;\r\n}\r\n\r\n/**\r\n* @dev Adds two numbers, throws on overflow.\r\n*/\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nassert(c >= a);\r\nreturn c;\r\n}\r\n}\r\n\r\ncontract CryptoPokemon {\r\nusing SafeMath for uint256;\r\nmapping (address => bool) private admins;\r\nmapping (uint => uint256) public levels;\r\nmapping (uint => bool) private lock;\r\naddress contractCreator;\r\naddress devFeeAddress;\r\naddress tournamentPrizeAddress;\r\n\r\nfunction CryptoPokemon () public {\r\n\r\ncontractCreator = msg.sender;\r\ndevFeeAddress = 0xFb2D26b0caa4C331bd0e101460ec9dbE0A4783A4;\r\ntournamentPrizeAddress = 0xC6784e712229087fC91E0c77fcCb6b2F1fDE2Dc2;\r\nadmins[contractCreator] = true;\r\n}\r\n\r\nstruct Pokemon {\r\nstring pokemonName;\r\naddress ownerAddress;\r\nuint256 currentPrice;\r\n}\r\nPokemon[] pokemons;\r\n\r\n//modifiers\r\nmodifier onlyContractCreator() {\r\nrequire (msg.sender == contractCreator);\r\n_;\r\n}\r\nmodifier onlyAdmins() {\r\nrequire(admins[msg.sender]);\r\n_;\r\n}\r\n\r\n//Owners and admins\r\n\r\n/* Owner */\r\nfunction setOwner (address _owner) onlyContractCreator() public {\r\ncontractCreator = _owner;\r\n}\r\n\r\nfunction addAdmin (address _admin) onlyContractCreator() public {\r\nadmins[_admin] = true;\r\n}\r\n\r\nfunction removeAdmin (address _admin) onlyContractCreator() public {\r\ndelete admins[_admin];\r\n}\r\n\r\n// Adresses\r\nfunction setdevFeeAddress (address _devFeeAddress) onlyContractCreator() public {\r\ndevFeeAddress = _devFeeAddress;\r\n}\r\n\r\nfunction settournamentPrizeAddress (address _tournamentPrizeAddress) onlyContractCreator() public {\r\ntournamentPrizeAddress = _tournamentPrizeAddress;\r\n}\r\n\r\n\r\nbool isPaused;\r\n/*\r\nWhen countdowns and events happening, use the checker.\r\n*/\r\nfunction pauseGame() public onlyContractCreator {\r\nisPaused = true;\r\n}\r\nfunction unPauseGame() public onlyContractCreator {\r\nisPaused = false;\r\n}\r\nfunction GetGamestatus() public view returns(bool) {\r\nreturn(isPaused);\r\n}\r\n\r\nfunction addLock (uint _pokemonId) onlyContractCreator() public {\r\nlock[_pokemonId] = true;\r\n}\r\n\r\nfunction removeLock (uint _pokemonId) onlyContractCreator() public {\r\nlock[_pokemonId] = false;\r\n}\r\n\r\nfunction getPokemonLock(uint _pokemonId) public view returns(bool) {\r\nreturn(lock[_pokemonId]);\r\n}\r\n\r\n/*\r\nThis function allows users to purchase PokeMon.\r\nThe price is automatically multiplied by 1.5 after each purchase.\r\nUsers can purchase multiple PokeMon.\r\n*/\r\nfunction purchasePokemon(uint _pokemonId) public payable {\r\n\r\n// Check new price >= currentPrice & gameStatus\r\nrequire(msg.value >= pokemons[_pokemonId].currentPrice);\r\nrequire(pokemons[_pokemonId].ownerAddress != address(0));\r\nrequire(pokemons[_pokemonId].ownerAddress != msg.sender);\r\nrequire(lock[_pokemonId] == false);\r\nrequire(msg.sender != address(0));\r\nrequire(isPaused == false);\r\n\r\n// Calculate the excess\r\naddress newOwner = msg.sender;\r\nuint256 price = pokemons[_pokemonId].currentPrice;\r\nuint256 excess = msg.value.sub(price);\r\nuint256 realValue = pokemons[_pokemonId].currentPrice;\r\n\r\n// If excess>0 send back the amount\r\nif (excess > 0) {\r\nnewOwner.transfer(excess);\r\n}\r\n\r\n// Calculate the 10% value as tournment prize and dev fee\r\nuint256 cutFee = realValue.div(10);\r\n\r\n\r\n// Calculate the pokemon owner commission on this sale & transfer the commission to the owner.\r\nuint256 commissionOwner = realValue - cutFee; // => 90%\r\npokemons[_pokemonId].ownerAddress.transfer(commissionOwner);\r\n\r\n// Transfer the 5% commission to the developer & %5 to tournamentPrizeAddress\r\ndevFeeAddress.transfer(cutFee.div(2)); // => 10%\r\ntournamentPrizeAddress.transfer(cutFee.div(2));\r\n\r\n// Update the hero owner and set the new price\r\npokemons[_pokemonId].ownerAddress = msg.sender;\r\npokemons[_pokemonId].currentPrice = pokemons[_pokemonId].currentPrice.mul(3).div(2);\r\nlevels[_pokemonId] = levels[_pokemonId] + 1;\r\n}\r\n\r\n// This function will return all of the details of the pokemons\r\nfunction getPokemonDetails(uint _pokemonId) public view returns (\r\nstring pokemonName,\r\naddress ownerAddress,\r\nuint256 currentPrice\r\n) {\r\nPokemon storage _pokemon = pokemons[_pokemonId];\r\n\r\npokemonName = _pokemon.pokemonName;\r\nownerAddress = _pokemon.ownerAddress;\r\ncurrentPrice = _pokemon.currentPrice;\r\n}\r\n\r\n// This function will return only the price of a specific pokemon\r\nfunction getPokemonCurrentPrice(uint _pokemonId) public view returns(uint256) {\r\nreturn(pokemons[_pokemonId].currentPrice);\r\n}\r\n\r\n// This function will return only the owner address of a specific pokemon\r\nfunction getPokemonOwner(uint _pokemonId) public view returns(address) {\r\nreturn(pokemons[_pokemonId].ownerAddress);\r\n}\r\n\r\n// This function will return only the levels of pokemons\r\nfunction getPokemonLevel(uint _pokemonId) public view returns(uint256) {\r\nreturn(levels[_pokemonId]);\r\n}\r\n\r\n// delete function, used when bugs comeout\r\nfunction deletePokemon(uint _pokemonId) public onlyContractCreator() {\r\ndelete pokemons[_pokemonId];\r\ndelete pokemons[_pokemonId];\r\ndelete lock[_pokemonId];\r\n}\r\n\r\n// Set function, used when bugs comeout\r\nfunction setPokemon(uint _pokemonId, string _pokemonName, address _ownerAddress, uint256 _currentPrice, uint256 _levels) public onlyContractCreator() {\r\npokemons[_pokemonId].ownerAddress = _ownerAddress;\r\npokemons[_pokemonId].pokemonName = _pokemonName;\r\npokemons[_pokemonId].currentPrice = _currentPrice;\r\n\r\nlevels[_pokemonId] = _levels;\r\nlock[_pokemonId] = false;\r\n}\r\n\r\n// This function will be used to add a new hero by the contract creator\r\nfunction addPokemon(string pokemonName, address ownerAddress, uint256 currentPrice) public onlyAdmins {\r\npokemons.push(Pokemon(pokemonName,ownerAddress,currentPrice));\r\nlevels[pokemons.length - 1] = 0;\r\nlock[pokemons.length - 1] = false;\r\n}\r\n\r\nfunction totalSupply() public view returns (uint256 _totalSupply) {\r\nreturn pokemons.length;\r\n}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"GetGamestatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pokemonId\",\"type\":\"uint256\"}],\"name\":\"removeLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pokemonId\",\"type\":\"uint256\"}],\"name\":\"getPokemonCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pokemonId\",\"type\":\"uint256\"}],\"name\":\"addLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pokemonId\",\"type\":\"uint256\"},{\"name\":\"_pokemonName\",\"type\":\"string\"},{\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"name\":\"_currentPrice\",\"type\":\"uint256\"},{\"name\":\"_levels\",\"type\":\"uint256\"}],\"name\":\"setPokemon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pokemonId\",\"type\":\"uint256\"}],\"name\":\"getPokemonLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_devFeeAddress\",\"type\":\"address\"}],\"name\":\"setdevFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pokemonId\",\"type\":\"uint256\"}],\"name\":\"getPokemonOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pokemonId\",\"type\":\"uint256\"}],\"name\":\"deletePokemon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pokemonId\",\"type\":\"uint256\"}],\"name\":\"getPokemonLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levels\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pokemonId\",\"type\":\"uint256\"}],\"name\":\"purchasePokemon\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pokemonId\",\"type\":\"uint256\"}],\"name\":\"getPokemonDetails\",\"outputs\":[{\"name\":\"pokemonName\",\"type\":\"string\"},{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pokemonName\",\"type\":\"string\"},{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"name\":\"addPokemon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tournamentPrizeAddress\",\"type\":\"address\"}],\"name\":\"settournamentPrizeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unPauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CryptoPokemon","CompilerVersion":"v0.4.20-nightly.2018.1.6+commit.2548228b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ba1b580ba61b0ac028859f689f73ba6c6e774bcf1f156f3c55cc7e2dcbeccf7b"}]}