{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transferInternal(address to, uint256 value) internal returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n    function transferInternal(address _to, uint256 _value) internal returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowanceInternal(address owner, address spender) internal view returns (uint256);\r\n    function transferFromInternal(address from, address to, uint256 value) internal returns (bool);\r\n    function approveInternal(address spender, uint256 value) internal returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n    function transferFromInternal(address _from, address _to, uint256 _value) internal returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n    function approveInternal(address _spender, uint256 _value) internal returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n    function allowanceInternal(address _owner, address _spender) internal view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n    function increaseApprovalInternal(address _spender, uint _addedValue) internal returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n    function decreaseApprovalInternal(address _spender, uint _subtractedValue) internal returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/MintableToken.sol\r\n\r\n//import \"./StandardToken.sol\";\r\n//import \"../../ownership/Ownable.sol\";\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n    address public icoContractAddress;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the icoContract.\r\n    */\r\n    modifier onlyIcoContract() {\r\n        require(msg.sender == icoContractAddress);\r\n        _;\r\n    }\r\n  \r\n\r\n    /**\r\n    * @dev Function to mint tokens\r\n    * @param _to The address that will receive the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function mint(address _to, uint256 _amount) onlyIcoContract canMint external returns (bool) {\r\n        //return true;\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner canMint external returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n    function pause() onlyOwner whenNotPaused external {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n    function unpause() onlyOwner whenPaused external {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n// File: contracts/PausableToken.sol\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n    function transferInternal(address _to, uint256 _value) internal whenNotPaused returns (bool) {\r\n        return super.transferInternal(_to, _value);\r\n    }\r\n\r\n    function transferFromInternal(address _from, address _to, uint256 _value) internal whenNotPaused returns (bool) {\r\n        return super.transferFromInternal(_from, _to, _value);\r\n    }\r\n\r\n    function approveInternal(address _spender, uint256 _value) internal whenNotPaused returns (bool) {\r\n        return super.approveInternal(_spender, _value);\r\n    }\r\n\r\n    function increaseApprovalInternal(address _spender, uint _addedValue) internal whenNotPaused returns (bool success) {\r\n        return super.increaseApprovalInternal(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApprovalInternal(address _spender, uint _subtractedValue) internal whenNotPaused returns (bool success) {\r\n        return super.decreaseApprovalInternal(_spender, _subtractedValue);\r\n    }\r\n}\r\n\r\n// File: contracts/ReentrancyGuard.sol\r\n\r\n/**\r\n * @title Helps contracts guard agains reentrancy attacks.\r\n * @author Remco Bloemen <remco@2π.com>\r\n * @notice If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private reentrancy_lock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!reentrancy_lock);\r\n    reentrancy_lock = true;\r\n    _;\r\n    reentrancy_lock = false;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/IiinoCoin.sol\r\n\r\ncontract IiinoCoin is MintableToken, PausableToken, ReentrancyGuard {\r\n    event RewardMint(address indexed to, uint256 amount);\r\n    event RewardMintingAmt(uint256 _amountOfTokensMintedPreCycle);\r\n    event ResetReward();\r\n    event RedeemReward(address indexed to, uint256 value);\r\n\r\n    event CreatedEscrow(bytes32 _tradeHash);\r\n    event ReleasedEscrow(bytes32 _tradeHash);\r\n    event Dispute(bytes32 _tradeHash);\r\n    event CancelledBySeller(bytes32 _tradeHash);\r\n    event CancelledByBuyer(bytes32 _tradeHash);\r\n    event BuyerArbitratorSet(bytes32 _tradeHash);\r\n    event SellerArbitratorSet(bytes32 _tradeHash);\r\n    event DisputeResolved (bytes32 _tradeHash);\r\n    event IcoContractAddressSet (address _icoContractAddress);\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    // Mapping of rewards to beneficiaries of the reward\r\n    mapping(address => uint256) public reward;\r\n  \r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    uint256 public amountMintPerDuration; // amount to mint during one minting cycle\r\n    uint256 public durationBetweenRewardMints; // reward miniting cycle duration\r\n    uint256 public previousDistribution; //EPOCH time of the previous distribution\r\n    uint256 public totalRewardsDistributed; //Total amount of the rewards distributed\r\n    uint256 public totalRewardsRedeemed; //Total amount of the rewards redeemed\r\n    uint256 public minimumRewardWithdrawalLimit; //The minimum limit of rewards that can be withdrawn\r\n    uint256 public rewardAvailableCurrentDistribution; //The amount of rewards available for the current Distribution.\r\n\r\n    function IiinoCoin(\r\n        string _name, \r\n        string _symbol, \r\n        uint8 _decimals, \r\n        uint256 _amountMintPerDuration, \r\n        uint256 _durationBetweenRewardMints \r\n    ) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        amountMintPerDuration = _amountMintPerDuration;\r\n        durationBetweenRewardMints = _durationBetweenRewardMints;\r\n        previousDistribution = now; // To initialize the previous distribution to the time of the creation of the contract\r\n        totalRewardsDistributed = 0;\r\n        totalRewardsRedeemed = 0;\r\n        minimumRewardWithdrawalLimit = 10 ether; //Defaulted to 10 iiinos represented in iii\r\n        rewardAvailableCurrentDistribution = amountMintPerDuration;\r\n        icoContractAddress = msg.sender; \r\n    }\r\n    \r\n    /**\r\n    * @dev set the icoContractAddress in the token so that the ico Contract can mint the token\r\n    * @param _icoContractAddress array of address. The address to which the reward needs to be distributed\r\n    */\r\n    function setIcoContractAddress(\r\n        address _icoContractAddress\r\n    ) external nonReentrant onlyOwner whenNotPaused {\r\n        require (_icoContractAddress != address(0));\r\n        emit IcoContractAddressSet(_icoContractAddress);\r\n        icoContractAddress = _icoContractAddress;    \r\n    }\r\n\r\n    /**\r\n    * @dev distribute reward tokens to the list of addresses based on their proportion\r\n    * @param _rewardAdresses array of address. The address to which the reward needs to be distributed\r\n    */\r\n    function batchDistributeReward(\r\n        address[] _rewardAdresses,\r\n        uint256[] _amountOfReward, \r\n        uint256 _timestampOfDistribution\r\n    ) external nonReentrant onlyOwner whenNotPaused {\r\n        require(_timestampOfDistribution > previousDistribution.add(durationBetweenRewardMints)); //To only allow a distribution to happen 30 days (2592000 seconds) after the previous distribution\r\n        require(_timestampOfDistribution < now); // To only allow a distribution time in the past\r\n        require(_rewardAdresses.length == _amountOfReward.length); // To verify the length of the arrays are the same.\r\n        \r\n        uint256 rewardDistributed = 0;\r\n\r\n        for (uint j = 0; j < _rewardAdresses.length; j++) {\r\n            rewardMint(_rewardAdresses[j], _amountOfReward[j]);\r\n            rewardDistributed = rewardDistributed.add(_amountOfReward[j]);\r\n        }\r\n        require(rewardAvailableCurrentDistribution >= rewardDistributed);\r\n        totalRewardsDistributed = totalRewardsDistributed.add(rewardDistributed);\r\n        rewardAvailableCurrentDistribution = rewardAvailableCurrentDistribution.sub(rewardDistributed);\r\n    }\r\n    \r\n    /**\r\n    * @dev distribute reward tokens to a addresse based on the proportion\r\n    * @param _rewardAddress The address to which the reward needs to be distributed\r\n    */\r\n    function distributeReward(\r\n        address _rewardAddress, \r\n        uint256 _amountOfReward, \r\n        uint256 _timestampOfDistribution\r\n    ) external nonReentrant onlyOwner whenNotPaused {\r\n        \r\n        require(_timestampOfDistribution > previousDistribution);\r\n        require(_timestampOfDistribution < previousDistribution.add(durationBetweenRewardMints)); //To only allow a distribution to happen 30 days (2592000 seconds) after the previous distribution\r\n        require(_timestampOfDistribution < now); // To only allow a distribution time in the past\r\n        //reward[_rewardAddress] = reward[_rewardAddress].add(_amountOfReward);\r\n        rewardMint(_rewardAddress, _amountOfReward);\r\n        \r\n    }\r\n\r\n    /**\r\n    * @dev reset reward tokensfor the new duration\r\n    */\r\n    function resetReward() external nonReentrant onlyOwner whenNotPaused {\r\n        require(now > previousDistribution.add(durationBetweenRewardMints)); //To only allow a distribution to happen 30 days (2592000 seconds) after the previous distribution\r\n        previousDistribution = previousDistribution.add(durationBetweenRewardMints); // To set the new distribution period as the previous distribution timestamp\r\n        rewardAvailableCurrentDistribution = amountMintPerDuration;\r\n        emit ResetReward();\r\n    }\r\n\r\n    /**\r\n   * @dev Redeem Reward tokens from one rewards array to balances array\r\n   * @param _beneficiary address The address which contains the reward as well as the address to which the balance will be transferred\r\n   * @param _value uint256 the amount of tokens to be redeemed\r\n   */\r\n    function redeemReward(\r\n        address _beneficiary, \r\n        uint256 _value\r\n    ) external nonReentrant whenNotPaused{\r\n        //Need to consider what happens to rewards after the stopping of minting process\r\n        require(msg.sender == _beneficiary);\r\n        require(_value >= minimumRewardWithdrawalLimit);\r\n        require(reward[_beneficiary] >= _value);\r\n        reward[_beneficiary] = reward[_beneficiary].sub(_value);\r\n        balances[_beneficiary] = balances[_beneficiary].add(_value);\r\n        totalRewardsRedeemed = totalRewardsRedeemed.add(_value);\r\n        emit RedeemReward(_beneficiary, _value);\r\n    }\r\n\r\n    function rewardMint(\r\n        address _to, \r\n        uint256 _amount\r\n    ) onlyOwner canMint whenNotPaused internal returns (bool) {\r\n        require(_amount > 0);\r\n        require(_to != address(0));\r\n        require(rewardAvailableCurrentDistribution >= _amount);\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        reward[_to] = reward[_to].add(_amount);\r\n        totalRewardsDistributed = totalRewardsDistributed.add(_amount);\r\n        rewardAvailableCurrentDistribution = rewardAvailableCurrentDistribution.sub(_amount);\r\n        emit RewardMint(_to, _amount);\r\n        //Transfer(address(0), _to, _amount); //balance of the user will only be updated on claiming the coin\r\n        return true;\r\n    }\r\n    function userRewardAccountBalance(\r\n        address _address\r\n    ) whenNotPaused external view returns (uint256) {\r\n        require(_address != address(0));\r\n        return reward[_address];\r\n    }\r\n    function changeRewardMintingAmount(\r\n        uint256 _newRewardMintAmt\r\n    ) whenNotPaused nonReentrant onlyOwner external {\r\n        require(_newRewardMintAmt < amountMintPerDuration);\r\n        amountMintPerDuration = _newRewardMintAmt;\r\n        emit RewardMintingAmt(_newRewardMintAmt);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external nonReentrant returns (bool) {\r\n        return transferFromInternal(_from, _to, _value);\r\n    }\r\n    function approve(address _spender, uint256 _value) external nonReentrant returns (bool) {\r\n        return approveInternal(_spender, _value);\r\n    }\r\n    function allowance(address _owner, address _spender) external view returns (uint256) {\r\n        return allowanceInternal(_owner, _spender);\r\n    }\r\n    function increaseApproval(address _spender, uint _addedValue) external nonReentrant returns (bool) {\r\n        return increaseApprovalInternal(_spender, _addedValue);\r\n    }\r\n    function decreaseApproval(address _spender, uint _subtractedValue) external nonReentrant returns (bool) {\r\n        return decreaseApprovalInternal(_spender, _subtractedValue);\r\n    }\r\n    function transfer(address _to, uint256 _value) external nonReentrant returns (bool) {\r\n        return transferInternal(_to, _value);\r\n    } \r\n}\r\n\r\n// File: contracts/Crowdsale.sol\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n    using SafeMath for uint256;\r\n    IiinoCoin public token;\r\n    address public iiinoTokenAddress;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n    address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n    uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n    function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\r\n        //require(_startTime >= now);\r\n        require(_endTime >= _startTime);\r\n        require(_rate > 0);\r\n        require(_wallet != address(0));\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () external payable {\r\n        buyTokensInternal(msg.sender);\r\n    }\r\n\r\n    function buyTokensInternal(address beneficiary) internal {\r\n        require(beneficiary != address(0));\r\n        require(validPurchase());\r\n        require(msg.value >= (0.01 ether));\r\n\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = getTokenAmount(weiAmount);\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        token.mint(beneficiary, tokens);\r\n        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n        forwardFunds();\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return now > endTime;\r\n    }\r\n\r\n    function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\r\n        return weiAmount.mul(rate);\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal view returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/IiinoCoinCrowdsale.sol\r\n\r\ncontract IiinoCoinCrowdsale is Crowdsale, Pausable, ReentrancyGuard {\r\n    event ReferralAwarded(address indexed purchaser, address indexed referrer, uint256 iiinoPurchased, uint256 iiinoAwarded);\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    address devWallet;\r\n    uint256 noOfTokenAlocatedForDev;\r\n    uint256 public noOfTokenAlocatedForSeedRound;\r\n    uint256 public noOfTokenAlocatedForPresaleRound;\r\n    uint256 public totalNoOfTokenAlocated;\r\n    uint256 public noOfTokenAlocatedPerICOPhase; //The token allocation for each phase of the ICO\r\n    uint256 public noOfICOPhases; //No. of ICO phases\r\n    uint256 public seedRoundEndTime; // to be in seconds\r\n    uint256 public thresholdEtherLimitForSeedRound; //minimum amount of wei needed to participate\r\n    uint256 public moreTokenPerEtherForSeedRound; // the more amount of Iiinos given per ether during seed round\r\n    uint256 public moreTokenPerEtherForPresaleRound; //the more amount of Iiinos given per ether during presale round\r\n    \r\n    uint256 public referralTokensAvailable; //To hold the value of the referral token limit.\r\n    uint256 public referralPercent; //The percentage of referral to be awarded on each order with a referrer\r\n    uint256 public referralTokensAllocated; // To hold the total number of token allocated to referrals\r\n\r\n    uint256 public presaleEndTime; // to be in seconds\r\n    uint256 public issueRateDecDuringICO; //The number of iiino that needs to be decreased for every next phase of the ICO \r\n    //uint256 public percentToMintPerDuration; //The percentage of Genesis ICO that will be minted every minting cycle\r\n    //uint256 public durationBetweenRewardMints; //The length of a reward minting cycle\r\n    \r\n\r\n    function IiinoCoinCrowdsale(\r\n        uint256[] _params, // All the params that need to initialize the crowdsale as well as the iiino Token\r\n        address _wallet, \r\n        address _devTeamWallet,\r\n        address _iiinoTokenAddress\r\n    ) public Crowdsale(_params[0], _params[1], _params[4], _wallet) {\r\n        devWallet = _devTeamWallet;\r\n        issueRateDecDuringICO = _params[5];\r\n        seedRoundEndTime = _params[2];\r\n        presaleEndTime = _params[3];\r\n          \r\n        moreTokenPerEtherForSeedRound = _params[13];\r\n        moreTokenPerEtherForPresaleRound = _params[14];\r\n          \r\n        referralTokensAvailable = _params[15];\r\n        referralTokensAllocated = _params[15]; //Initially all the allocated tokens are available\r\n        referralPercent = _params[16];\r\n\r\n        noOfTokenAlocatedForDev = _params[6];\r\n        noOfTokenAlocatedForSeedRound = _params[7];\r\n        noOfTokenAlocatedForPresaleRound = _params[8];\r\n        totalNoOfTokenAlocated = _params[10];\r\n        noOfTokenAlocatedPerICOPhase = _params[9];\r\n        noOfICOPhases = _params[11];\r\n        thresholdEtherLimitForSeedRound = _params[12];\r\n\r\n        //Neeed to test the total allocation with the sum of all allocations.\r\n        //token.transferOwnership(msg.sender);\r\n\r\n        //token.mint(_devTeamWallet, noOfTokenAlocatedForDev);\r\n        //iiinoTokenAddress = _iiinoTokenAddress;\r\n        token = IiinoCoin(_iiinoTokenAddress);\r\n    }\r\n\r\n    function initialTransferToDevTeam() nonReentrant onlyOwner whenNotPaused external {\r\n        require(devWallet != address(0));\r\n        //To assign the initial dev tokens to the dev wallet\r\n        token.mint(devWallet, noOfTokenAlocatedForDev);\r\n        //Sets the devTeamWallet to 0x00, to restrict future transfers\r\n        devWallet = address(0);\r\n    }\r\n\r\n    /*\r\n    //Temp Function to retreive values\r\n    function tempGetDataToCheck (uint indx, uint256 weiAmt) public view returns (uint256) {\r\n      //string temp = \"thresholdEtherLimitForSeedRound =>\" + thresholdEtherLimitForSeedRound + \"Total Supply => \" + token.totalSupply() + \"noOfTokenAlocatedForSeedRound => \" + noOfTokenAlocatedForSeedRound + \"noOfTokenAlocatedForDev => \" + noOfTokenAlocatedForDev + \"rate => \" + rate;\r\n        if (indx == 0)\r\n          return issueRateDecDuringICO;\r\n        else if (indx == 1)\r\n          return seedRoundEndTime;\r\n        else if (indx == 2)\r\n          return presaleEndTime;\r\n        else if (indx == 3)\r\n          return moreTokenPerEtherForSeedRound;\r\n        else if (indx == 4)\r\n          return moreTokenPerEtherForPresaleRound;\r\n        else if (indx == 5)\r\n          return noOfTokenAlocatedForDev;\r\n        else if (indx == 6)\r\n          return noOfTokenAlocatedForSeedRound;\r\n        else if (indx == 61)\r\n          return noOfTokenAlocatedForPresaleRound;\r\n        else if (indx == 7)\r\n          return totalNoOfTokenAlocated;\r\n        else if (indx == 8)\r\n          return noOfTokenAlocatedPerICOPhase;\r\n        else if (indx == 9)\r\n          return noOfICOPhases;\r\n        else if (indx == 10)\r\n          return thresholdEtherLimitForSeedRound;\r\n        else if (indx == 11)\r\n          return 0;//percentToMintPerDuration;\r\n        else if (indx == 12)\r\n        {\r\n            uint currentRate;\r\n            uint256 icoMultiplier;\r\n            (currentRate, icoMultiplier) = getCurrentRateInternal();\r\n            return currentRate;//durationBetweenRewardMints;\r\n        }  \r\n        else if (indx == 13)\r\n          return token.totalSupply();\r\n        else if (indx == 14)\r\n          return getTokenAmount(weiAmt);\r\n        else if (indx == 15)\r\n          return now;\r\n        else if (indx == 16)\r\n          return startTime;\r\n        else if (indx == 17)\r\n          return endTime;\r\n        \r\n    }\r\n    */\r\n    function getTokenAmount (uint256 weiAmount) whenNotPaused internal view returns (uint256) {\r\n        uint currRate;\r\n        uint256 multiplierForICO;\r\n        uint256 amountOfIiino = 0;\r\n        uint256 referralsDistributed = referralTokensAllocated.sub(referralTokensAvailable);\r\n        uint256 _totalSupply = (token.totalSupply()).sub(referralsDistributed);\r\n        if (now <= seedRoundEndTime) {\r\n          \r\n            require(weiAmount >= thresholdEtherLimitForSeedRound);\r\n            require(_totalSupply < noOfTokenAlocatedForSeedRound.add(noOfTokenAlocatedForDev));\r\n            (currRate, multiplierForICO) = getCurrentRateInternal();\r\n            \r\n            amountOfIiino = weiAmount.mul(currRate);\r\n            \r\n            //Only if there is enough available amount of iiino in the phase will it allocate it, else it will just revert the transaction and return the ether \r\n            require (_totalSupply.add(amountOfIiino) <= noOfTokenAlocatedForSeedRound.add(noOfTokenAlocatedForDev));\r\n            return amountOfIiino;\r\n\r\n        } else if (now <= presaleEndTime) {\r\n            require(_totalSupply < noOfTokenAlocatedForSeedRound.add(noOfTokenAlocatedForPresaleRound).add(noOfTokenAlocatedForDev));\r\n            (currRate, multiplierForICO) = getCurrentRateInternal();\r\n            \r\n            amountOfIiino = weiAmount.mul(currRate);\r\n            //Only if there is enough available amount of iiino in the phase will it allocate it, else it will just revert the transaction and return the ether \r\n            require (_totalSupply.add(amountOfIiino) <= noOfTokenAlocatedForSeedRound.add(noOfTokenAlocatedForPresaleRound).add(noOfTokenAlocatedForDev));\r\n            return amountOfIiino;\r\n        } else {\r\n            \r\n           \r\n            require(_totalSupply < noOfTokenAlocatedForSeedRound.add(noOfTokenAlocatedForPresaleRound).add(noOfTokenAlocatedForDev));\r\n            require(now < endTime);\r\n            \r\n            (currRate,multiplierForICO) = getCurrentRateInternal();\r\n            //To check if the amount of tokens for the current ICO phase is exhausted\r\n            //uint256 a = 1;\r\n            //amountOfIiino = (weiAmount.mul(currRate)).div(a);\r\n            \r\n            amountOfIiino = weiAmount * currRate;\r\n            \r\n            require(_totalSupply.add(amountOfIiino) <= noOfTokenAlocatedForSeedRound.add(noOfTokenAlocatedForPresaleRound).add(noOfTokenAlocatedForDev).add(noOfTokenAlocatedPerICOPhase.mul(multiplierForICO.add(1))));\r\n            return amountOfIiino;\r\n          \r\n        }\r\n      \r\n    }\r\n\r\n  //function getCurrentRate returns the amount of iii for the amount of wei at the current point in time (now)\r\n    function getCurrentRateInternal() whenNotPaused internal view returns (uint,uint256) {\r\n        uint currRate;\r\n        uint256 multiplierForICO = 0; \r\n\r\n        if (now <= seedRoundEndTime) {\r\n            currRate = rate.add(moreTokenPerEtherForSeedRound);\r\n        } else if (now <= presaleEndTime) {\r\n            currRate = rate.add(moreTokenPerEtherForPresaleRound);\r\n        } else {\r\n            multiplierForICO = (now.sub(presaleEndTime)).div(30 days); //86400 seconds in a day\r\n            currRate = rate.sub((issueRateDecDuringICO.mul(multiplierForICO)));\r\n            require(multiplierForICO < noOfICOPhases);\r\n        }\r\n        return (currRate,multiplierForICO);\r\n    }\r\n    \r\n    function buyTokensWithReferrer(address referrer) nonReentrant whenNotPaused external payable {\r\n        address beneficiary = msg.sender;\r\n        require(referrer != address(0));\r\n        require(beneficiary != address(0));\r\n        require(validPurchase());\r\n        require(msg.value >= (0.01 ether));\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = getTokenAmount(weiAmount);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        token.mint(beneficiary, tokens);\r\n        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        //To send the referrer his percentage of tokens.\r\n        uint256 referrerTokens = tokens.mul(referralPercent).div(100);\r\n        if (referralTokensAvailable > 0) {\r\n            if (referrerTokens > referralTokensAvailable) {\r\n                referrerTokens = referralTokensAvailable;\r\n            }\r\n            \r\n            token.mint(referrer, referrerTokens);\r\n            referralTokensAvailable = referralTokensAvailable.sub(referrerTokens);\r\n            emit ReferralAwarded(msg.sender, referrer, tokens, referrerTokens);\r\n\r\n        }\r\n        \r\n        forwardFunds();\r\n\r\n    }\r\n\r\n    function getCurrentRate() whenNotPaused external view returns (uint,uint256) {\r\n        return getCurrentRateInternal ();\r\n    }\r\n\r\n    function buyTokens(address beneficiary) nonReentrant whenNotPaused external payable {\r\n        buyTokensInternal(beneficiary);\r\n    }\r\n\r\n    function forwardFunds() whenNotPaused internal {\r\n        super.forwardFunds();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalNoOfTokenAlocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noOfTokenAlocatedForPresaleRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralTokensAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralTokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issueRateDecDuringICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyTokensWithReferrer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedRoundEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noOfTokenAlocatedPerICOPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialTransferToDevTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noOfICOPhases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thresholdEtherLimitForSeedRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iiinoTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moreTokenPerEtherForPresaleRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noOfTokenAlocatedForSeedRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moreTokenPerEtherForSeedRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_params\",\"type\":\"uint256[]\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_devTeamWallet\",\"type\":\"address\"},{\"name\":\"_iiinoTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"iiinoPurchased\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"iiinoAwarded\",\"type\":\"uint256\"}],\"name\":\"ReferralAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"IiinoCoinCrowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000800000000000000000000000001b62ce4f5c110f0b262ae3fa6125871ebf17a51600000000000000000000000082a49ec551642eaebfb2c719dc4931ee9b15e7c500000000000000000000000048c71990d24f18a441b881e13983e4621fcd812f0000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000005ac74383000000000000000000000000000000000000000000000000000000005c3c5c03000000000000000000000000000000000000000000000000000000005ad07e03000000000000000000000000000000000000000000000000000000005ad9b88300000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000422ca8b0a00a425000000000000000000000000000000000000000000000000084595161401484a0000000000000000000000000000000000000000000000000c685fa11e01ec6f00000000000000000000000000000000000000000000000006286c2c0e93f77d54000000000000000000000000000000000000000000000052b7d2dcc80cd2e400000000000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000000000000000000c80000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000027b460e08d5469e0c00000000000000000000000000000000000000000000000000000000000000000003","Library":"","SwarmSource":"bzzr://9e299aeea5200ab9befec45161b7b913837c8d11f50c6a661dfe91899404071a"}]}