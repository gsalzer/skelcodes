{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    hasMintPermission\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n* @title OneledgerToken\r\n* @dev this is the oneledger token\r\n*/\r\ncontract OneledgerToken is MintableToken {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"Oneledger Token\";\r\n    string public symbol = \"OLT\";\r\n    uint8 public decimals = 18;\r\n    bool public active = false;\r\n    /**\r\n     * @dev restrict function to be callable when token is active\r\n     */\r\n    modifier activated() {\r\n        require(active == true);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev activate token transfers\r\n     */\r\n    function activate() public onlyOwner {\r\n        active = true;\r\n    }\r\n\r\n    /**\r\n     * @dev transfer    ERC20 standard transfer wrapped with `activated` modifier\r\n     */\r\n    function transfer(address to, uint256 value) public activated returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev transfer    ERC20 standard transferFrom wrapped with `activated` modifier\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public activated returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n}\r\n\r\ncontract ICO is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct WhiteListRecord {\r\n        uint256 offeredWei;\r\n        uint256 lastPurchasedTimestamp;\r\n    }\r\n\r\n    OneledgerToken public token;\r\n    address public wallet; // Address where funds are collected\r\n    uint256 public rate;   // How many token units a buyer gets per eth\r\n    mapping (address => WhiteListRecord) public whiteList;\r\n    uint256 public initialTime;\r\n    bool public saleClosed;\r\n    uint256 public weiCap;\r\n    uint256 public weiRaised;\r\n\r\n    uint256 public TOTAL_TOKEN_SUPPLY = 1000000000 * (10 ** 18);\r\n\r\n    event BuyTokens(uint256 weiAmount, uint256 rate, uint256 token, address beneficiary);\r\n    event UpdateRate(uint256 rate);\r\n\r\n    /**\r\n    * @dev constructor\r\n    */\r\n    constructor(address _wallet, uint256 _rate, uint256 _startDate, uint256 _weiCap) public {\r\n        require(_rate > 0);\r\n        require(_wallet != address(0));\r\n        require(_weiCap.mul(_rate) <= TOTAL_TOKEN_SUPPLY);\r\n\r\n        wallet = _wallet;\r\n        rate = _rate;\r\n        initialTime = _startDate;\r\n        saleClosed = false;\r\n        weiCap = _weiCap;\r\n        weiRaised = 0;\r\n\r\n        token = new OneledgerToken();\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function ***DO NOT OVERRIDE***\r\n     */\r\n    function() external payable {\r\n        buyTokens();\r\n    }\r\n\r\n    /**\r\n     * @dev update the rate\r\n     */\r\n    function updateRate(uint256 rate_) public onlyOwner {\r\n      require(now <= initialTime);\r\n      rate = rate_;\r\n      emit UpdateRate(rate);\r\n    }\r\n\r\n    /**\r\n     * @dev buy tokens\r\n     */\r\n    function buyTokens() public payable {\r\n        validatePurchase(msg.value);\r\n        uint256 tokenToBuy = msg.value.mul(rate);\r\n        whiteList[msg.sender].lastPurchasedTimestamp = now;\r\n        weiRaised = weiRaised.add(msg.value);\r\n        token.mint(msg.sender, tokenToBuy);\r\n        wallet.transfer(msg.value);\r\n        emit BuyTokens(msg.value, rate, tokenToBuy, msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev add to white list\r\n    * param addresses the list of address added to white list\r\n    * param weiPerContributor the wei can be transfer per contributor\r\n    * param capWei for the user in this list\r\n    */\r\n    function addToWhiteList(address[] addresses, uint256 weiPerContributor) public onlyOwner {\r\n        for (uint32 i = 0; i < addresses.length; i++) {\r\n            whiteList[addresses[i]] = WhiteListRecord(weiPerContributor, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev mint token to new address, either contract or a wallet\r\n     * param OneledgerTokenVesting vesting contract\r\n     * param uint256 total token number to mint\r\n    */\r\n    function mintToken(address target, uint256 tokenToMint) public onlyOwner {\r\n      token.mint(target, tokenToMint);\r\n    }\r\n\r\n    /**\r\n     * @dev close the ICO\r\n     */\r\n    function closeSale() public onlyOwner {\r\n        saleClosed = true;\r\n        token.mint(owner, TOTAL_TOKEN_SUPPLY.sub(token.totalSupply()));\r\n        token.finishMinting();\r\n        token.transferOwnership(owner);\r\n    }\r\n\r\n    function validatePurchase(uint256 weiPaid) internal view{\r\n        require(!saleClosed);\r\n        require(initialTime <= now);\r\n        require(whiteList[msg.sender].offeredWei > 0);\r\n        require(weiPaid <= weiCap.sub(weiRaised));\r\n        // can only purchase once every 24 hours\r\n        require(now.sub(whiteList[msg.sender].lastPurchasedTimestamp) > 24 hours);\r\n        uint256 elapsedTime = now.sub(initialTime);\r\n        // check day 1 buy limit\r\n        require(elapsedTime > 24 hours || msg.value <= whiteList[msg.sender].offeredWei);\r\n        // check day 2 buy limit\r\n        require(elapsedTime > 48 hours || msg.value <= whiteList[msg.sender].offeredWei.mul(2));\r\n    }\r\n}\r\ncontract OneledgerTokenVesting is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    event Released(uint256 amount);\r\n\r\n    // beneficiary of tokens after they are released\r\n    address public beneficiary;\r\n\r\n    uint256 public startFrom;\r\n    uint256 public period;\r\n    uint256 public tokensReleasedPerPeriod;\r\n\r\n    uint256 public elapsedPeriods;\r\n\r\n    OneledgerToken private token;\r\n\r\n    /**\r\n     * @dev Creates a vesting contract for OneledgerToken\r\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n     * @param _startFrom Datetime when the vesting will begin\r\n     * @param _period The preiod to release the token\r\n     * @param _tokensReleasedPerPeriod the token to release per period\r\n     */\r\n    constructor(\r\n        address _beneficiary,\r\n        uint256 _startFrom,\r\n        uint256 _period,\r\n        uint256 _tokensReleasedPerPeriod,\r\n        OneledgerToken _token\r\n    ) public {\r\n        require(_beneficiary != address(0));\r\n        require(_startFrom >= now);\r\n\r\n        beneficiary = _beneficiary;\r\n        startFrom = _startFrom;\r\n        period = _period;\r\n        tokensReleasedPerPeriod = _tokensReleasedPerPeriod;\r\n        elapsedPeriods = 0;\r\n        token = _token;\r\n    }\r\n\r\n    /**\r\n     *  @dev getToken this may be more convinience for user\r\n     *        to check if their vesting contract is binded with a right token\r\n     * return OneledgerToken\r\n     */\r\n     function getToken() public view returns(OneledgerToken) {\r\n       return token;\r\n     }\r\n\r\n    /**\r\n     * @dev release\r\n     * param _token Oneledgertoken that will be released to beneficiary\r\n     */\r\n    function release() public {\r\n        require(msg.sender == owner || msg.sender == beneficiary);\r\n        require(token.balanceOf(this) >= 0 && now >= startFrom);\r\n        uint256 elapsedTime = now.sub(startFrom);\r\n        uint256 periodsInCurrentRelease = elapsedTime.div(period).sub(elapsedPeriods);\r\n        uint256 tokensReadyToRelease = periodsInCurrentRelease.mul(tokensReleasedPerPeriod);\r\n        uint256 amountToTransfer = tokensReadyToRelease > token.balanceOf(this) ? token.balanceOf(this) : tokensReadyToRelease;\r\n        require(amountToTransfer > 0);\r\n        elapsedPeriods = elapsedPeriods.add(periodsInCurrentRelease);\r\n        token.transfer(beneficiary, amountToTransfer);\r\n        emit Released(amountToTransfer);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokensReleasedPerPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"elapsedPeriods\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_startFrom\",\"type\":\"uint256\"},{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_tokensReleasedPerPeriod\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"OneledgerTokenVesting","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001ae23ea6e9a0fb8de6a07c1fa02f9dcbfa3c3061000000000000000000000000000000000000000000000000000000005b1ecded000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000e3316eb0fb22a2b7e1ebede352e5b6ec04c30c3a","Library":"","SwarmSource":"bzzr://e3055736843a7a5cd051b917baa81adccf43559391ee643c565235b4f6b3417c"}]}