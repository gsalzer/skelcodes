{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\npragma experimental \"v0.5.0\";\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract SRNTPriceOracleBasic {\r\n  uint256 public SRNT_per_ETH;\r\n}\r\n\r\ncontract Escrow {\r\n  using SafeMath for uint256;\r\n\r\n  address public party_a;\r\n  address public party_b;\r\n  address constant serenity_wallet = 0x47c8F28e6056374aBA3DF0854306c2556B104601;\r\n  address constant burn_address = 0x0000000000000000000000000000000000000001;\r\n  ERC20Basic constant SRNT_token = ERC20Basic(0xBC7942054F77b82e8A71aCE170E4B00ebAe67eB6);\r\n  SRNTPriceOracleBasic constant SRNT_price_oracle = SRNTPriceOracleBasic(0xae5D95379487d047101C4912BddC6942090E5D17);\r\n\r\n  uint256 public withdrawal_party_a_gets;\r\n  uint256 public withdrawal_party_b_gets;\r\n  address public withdrawal_last_voter;\r\n\r\n  event Deposit(uint256 amount);\r\n  event WithdrawalRequest(address requester, uint256 party_a_gets, uint256 party_b_gets);\r\n  event Withdrawal(uint256 party_a_gets, uint256 party_b_gets);\r\n\r\n  constructor (address new_party_a, address new_party_b) public {\r\n    party_a = new_party_a;\r\n    party_b = new_party_b;\r\n  }\r\n\r\n  function () external payable {\r\n    // New deposit - take commission and issue an event\r\n    uint256 fee = msg.value.div(100);\r\n    uint256 srnt_balance = SRNT_token.balanceOf(address(this));\r\n    uint256 fee_paid_by_srnt = srnt_balance.div(SRNT_price_oracle.SRNT_per_ETH());\r\n    if (fee_paid_by_srnt < fee) {  // Burn all SRNT, deduct from fee\r\n      if (fee_paid_by_srnt > 0) {\r\n        fee = fee.sub(fee_paid_by_srnt);\r\n        SRNT_token.transfer(burn_address, srnt_balance);\r\n      }\r\n      serenity_wallet.transfer(fee);\r\n      emit Deposit(msg.value.sub(fee));\r\n    } else {  // There's more SRNT available than needed. Burn a part of it.\r\n      SRNT_token.transfer(burn_address, fee.mul(SRNT_price_oracle.SRNT_per_ETH()));\r\n      emit Deposit(msg.value);\r\n    }\r\n  }\r\n\r\n  function request_withdrawal(uint256 party_a_gets, uint256 party_b_gets) external {\r\n    require(msg.sender != withdrawal_last_voter);  // You can't vote twice\r\n    require((msg.sender == party_a) || (msg.sender == party_b) || (msg.sender == serenity_wallet));\r\n    require(party_a_gets.add(party_b_gets) <= address(this).balance);\r\n\r\n    withdrawal_last_voter = msg.sender;\r\n\r\n    emit WithdrawalRequest(msg.sender, party_a_gets, party_b_gets);\r\n\r\n    if ((withdrawal_party_a_gets == party_a_gets) && (withdrawal_party_b_gets == party_b_gets)) {  // We have consensus\r\n      delete withdrawal_party_a_gets;\r\n      delete withdrawal_party_b_gets;\r\n      delete withdrawal_last_voter;\r\n      if (party_a_gets > 0) {\r\n        party_a.transfer(party_a_gets);\r\n      }\r\n      if (party_b_gets > 0) {\r\n        party_b.transfer(party_b_gets);\r\n      }\r\n      emit Withdrawal(party_a_gets, party_b_gets);\r\n    } else {\r\n      withdrawal_party_a_gets = party_a_gets;\r\n      withdrawal_party_b_gets = party_b_gets;\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"party_b\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"party_a_gets\",\"type\":\"uint256\"},{\"name\":\"party_b_gets\",\"type\":\"uint256\"}],\"name\":\"request_withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawal_party_b_gets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"party_a\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawal_last_voter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawal_party_a_gets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"new_party_a\",\"type\":\"address\"},{\"name\":\"new_party_b\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"party_a_gets\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"party_b_gets\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"party_a_gets\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"party_b_gets\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"}]","ContractName":"Escrow","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002d36a756a3c9f4d9ecbb759c8e3861394f62b42b0000000000000000000000009a3771f3592ebb04b59db34121f016bb6386c1ef","Library":"","SwarmSource":"bzzr://fb77f980b38db6b6d192669a53139facd60c064cf410ce9fd4cbbfb9f86dcf53"}]}