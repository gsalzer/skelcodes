{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: contracts/Ownable.sol\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require((msg.sender == owner) || (tx.origin == owner));\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/Bonus.sol\r\n\r\ncontract Bonus is Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) public buyerBonus;\r\n    mapping(address => bool) hasBought;\r\n    address[] public buyerList;\r\n    \r\n    function _addBonus(address _beneficiary, uint256 _bonus) internal {\r\n        if(hasBought[_beneficiary]){\r\n            buyerBonus[_beneficiary] = buyerBonus[_beneficiary].add(_bonus);\r\n        } else {\r\n            hasBought[_beneficiary] = true;\r\n            buyerList.push(_beneficiary);\r\n            buyerBonus[_beneficiary] = _bonus;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20Basic.sol\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/CrowdSale.sol\r\n\r\ncontract Crowdsale is Bonus {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    ERC20 public token;\r\n\r\n    // Address where funds are collected\r\n    address public wallet;\r\n\r\n    // ICO exchange rate\r\n    uint256 public rate;\r\n\r\n    // ICO Time\r\n    uint256 public openingTimePeriodOne;\r\n    uint256 public closingTimePeriodOne;\r\n    uint256 public openingTimePeriodTwo;\r\n    uint256 public closingTimePeriodTwo;\r\n    uint256 public bonusDeliverTime;\r\n\r\n    // Diff bonus rate decided by time\r\n    uint256 public bonusRatePrivateSale;\r\n    uint256 public bonusRatePeriodOne;\r\n    uint256 public bonusRatePeriodTwo;\r\n\r\n    // Token decimal\r\n    uint256 decimals;\r\n    uint256 public tokenUnsold;\r\n    uint256 public bonusUnsold;\r\n    uint256 public constant minPurchaseAmount = 0.1 ether;\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event TokenBonus(address indexed purchaser, address indexed beneficiary, uint256 bonus);\r\n\r\n    modifier onlyWhileOpen {\r\n        require(block.timestamp <= closingTimePeriodTwo);\r\n        _;\r\n    }\r\n\r\n    constructor (uint256 _openingTimePeriodOne, uint256 _closingTimePeriodOne, uint256 _openingTimePeriodTwo, uint256 _closingTimePeriodTwo, uint256 _bonusDeliverTime,\r\n        uint256 _rate, uint256 _bonusRatePrivateSale, uint256 _bonusRatePeriodOne, uint256 _bonusRatePeriodTwo, \r\n        address _wallet, ERC20 _token, uint256 _decimals, uint256 _tokenUnsold, uint256 _bonusUnsold) public {\r\n        require(_wallet != address(0));\r\n        require(_token != address(0));\r\n        require(_openingTimePeriodOne >= block.timestamp);\r\n        require(_closingTimePeriodOne >= _openingTimePeriodOne);\r\n        require(_openingTimePeriodTwo >= _closingTimePeriodOne);\r\n        require(_closingTimePeriodTwo >= _openingTimePeriodTwo);\r\n\r\n        wallet = _wallet;\r\n        token = _token;\r\n        openingTimePeriodOne = _openingTimePeriodOne;\r\n        closingTimePeriodOne = _closingTimePeriodOne;\r\n        openingTimePeriodTwo = _openingTimePeriodTwo;\r\n        closingTimePeriodTwo = _closingTimePeriodTwo;\r\n        bonusDeliverTime = _bonusDeliverTime;\r\n        rate = _rate;\r\n        bonusRatePrivateSale = _bonusRatePrivateSale;\r\n        bonusRatePeriodOne = _bonusRatePeriodOne;\r\n        bonusRatePeriodTwo = _bonusRatePeriodTwo;\r\n        tokenUnsold = _tokenUnsold;\r\n        bonusUnsold = _bonusUnsold;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address _beneficiary) public payable {\r\n        uint256 weiAmount = msg.value;\r\n        _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n        // calculate token amount to be sent\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n        _processPurchase(_beneficiary, tokens);\r\n        emit TokenPurchase(\r\n            msg.sender,\r\n            _beneficiary,\r\n            weiAmount,\r\n            tokens\r\n        );\r\n\r\n        // calculate bonus amount to be sent\r\n        uint256 bonus = _getTokenBonus(weiAmount);\r\n        _addBonus(_beneficiary, bonus);\r\n        bonusUnsold = bonusUnsold.sub(bonus);\r\n        emit TokenBonus(\r\n            msg.sender,\r\n            _beneficiary,\r\n            bonus\r\n        );\r\n        _forwardFunds();\r\n    }\r\n\t\r\n    function isClosed() public view returns (bool) {\r\n        return block.timestamp > closingTimePeriodTwo;\r\n    }\r\n\r\n    function isOpened() public view returns (bool) {\r\n        return (block.timestamp < closingTimePeriodOne && block.timestamp > openingTimePeriodOne) || (block.timestamp < closingTimePeriodTwo && block.timestamp > openingTimePeriodTwo);\r\n    }\r\n\r\n    function privateCrowdsale(address _beneficiary, uint256 _ethAmount) external onlyOwner{\r\n        _preValidatePurchase(_beneficiary, _ethAmount);\r\n\r\n        // calculate token amount to be sent\r\n        uint256 tokens = _getTokenAmount(_ethAmount);\r\n        _processPurchase(_beneficiary, tokens);\r\n        emit TokenPurchase(\r\n            msg.sender,\r\n            _beneficiary,\r\n            _ethAmount,\r\n            tokens\r\n        );\r\n\r\n        // calculate bonus amount to be sent\r\n        uint256 bonus = _ethAmount.mul(10 ** uint256(decimals)).div(1 ether).mul(bonusRatePrivateSale);\r\n        _addBonus(_beneficiary, bonus);\r\n        bonusUnsold = bonusUnsold.sub(bonus);\r\n        emit TokenBonus(\r\n            msg.sender,\r\n            _beneficiary,\r\n            bonus\r\n        );\r\n    }\r\n    \r\n    function returnToken() external onlyOwner{\r\n        require(block.timestamp > closingTimePeriodTwo);\r\n        require(tokenUnsold > 0);\r\n        token.transfer(wallet,tokenUnsold);\r\n        tokenUnsold = tokenUnsold.sub(tokenUnsold);\r\n    }\r\n\r\n    /**\r\n     * WARNING: Make sure that user who owns bonus is still in whitelist!!!\r\n     */\r\n    function deliverBonus() public onlyOwner {\r\n        require(bonusDeliverTime <= block.timestamp);\r\n        for (uint i = 0; i<buyerList.length; i++){\r\n            uint256 amount = buyerBonus[buyerList[i]];\r\n            token.transfer(buyerList[i], amount);\r\n            buyerBonus[buyerList[i]] = 0;\r\n        }\r\n    }\r\n\r\n    function returnBonus() external onlyOwner{\r\n        require(block.timestamp > bonusDeliverTime);\r\n        require(bonusUnsold > 0);\r\n        token.transfer(wallet, bonusUnsold);\r\n        bonusUnsold = bonusUnsold.sub(bonusUnsold);\r\n    }\r\n\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view onlyWhileOpen\r\n    {\r\n        require(_beneficiary != address(0));\r\n        require(_weiAmount >= minPurchaseAmount);\r\n    }\r\n\r\n    function _validateMaxSellAmount(uint256 _tokenAmount) internal view onlyWhileOpen {\r\n        require(tokenUnsold >= _tokenAmount);\r\n    }\r\n\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        token.transfer(_beneficiary, _tokenAmount);\r\n        tokenUnsold = tokenUnsold.sub(_tokenAmount);\r\n    }\r\n\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        _validateMaxSellAmount(_tokenAmount);\r\n        _deliverTokens(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    function _getTokenAmount( uint256 _weiAmount) internal view returns (uint256) {\r\n        return _weiAmount.mul(10 ** uint256(decimals)).div(1 ether).mul(rate);\r\n    }\r\n\r\n    function _getTokenBonus(uint256 _weiAmount) internal view returns (uint256) {\r\n        uint256 bonusRate = 0;\r\n        if(block.timestamp > openingTimePeriodOne && block.timestamp < closingTimePeriodOne){\r\n            bonusRate = bonusRatePeriodOne;\r\n        } else if(block.timestamp > openingTimePeriodTwo && block.timestamp < closingTimePeriodTwo){\r\n            bonusRate = bonusRatePeriodTwo;\r\n        }\r\n        return _weiAmount.mul(10 ** uint256(decimals)).div(1 ether).mul(bonusRate);\r\n    }\r\n\r\n    function _forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n}\r\n\r\n// File: contracts/StandardToken.sol\r\n\r\ncontract StandardToken is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    uint256 totalSupply_;\r\n    bool public transferOpen = true;\r\n\r\n    modifier onlyWhileTransferOpen {\r\n        require(transferOpen);\r\n        _;\r\n    }\r\n\r\n    function setTransfer(bool _open) external onlyOwner{\r\n        transferOpen = _open;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public onlyWhileTransferOpen returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyWhileTransferOpen returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/Whitelist.sol\r\n\r\ncontract Whitelist is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    mapping(address => bool) public whitelist;\r\n    mapping(address => uint256) whitelistIndexMap;\r\n    address[] public whitelistArray;\r\n    uint256 public whitelistLength = 0;\r\n\r\n    modifier isWhitelisted(address _beneficiary) {\r\n        require(whitelist[_beneficiary]);\r\n        _;\r\n    }\r\n\r\n    function addToWhitelist(address _beneficiary) external onlyOwner {\r\n        whitelist[_beneficiary] = true;\r\n        if (whitelistIndexMap[_beneficiary] == 0){\r\n            if (whitelistArray.length <= whitelistLength){\r\n                whitelistArray.push(_beneficiary);\r\n            } else {\r\n                whitelistArray[whitelistLength] = _beneficiary;\r\n            }\r\n            whitelistLength = whitelistLength.add(1);\r\n            whitelistIndexMap[_beneficiary] = whitelistLength;\r\n        }\r\n    }\r\n\r\n    function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\r\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n            whitelist[_beneficiaries[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeFromWhitelist(address _beneficiary) external onlyOwner {\r\n        whitelist[_beneficiary] = false;\r\n        if (whitelistIndexMap[_beneficiary] > 0){\r\n            uint index = whitelistIndexMap[_beneficiary]-1;\r\n            whitelistArray[index] = whitelistArray[whitelistLength-1];\r\n            whitelistArray[whitelistLength-1] = 0;\r\n            whitelistIndexMap[_beneficiary] = 0;\r\n            whitelistLength = whitelistLength.sub(1);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/AFIToken.sol\r\n\r\ncontract AFIToken is StandardToken, Crowdsale, Whitelist {\r\n    using SafeMath for uint256;\r\n    string public constant name = \"AlchemyCoin\";\r\n    string public constant symbol = \"AFI\";\r\n    uint8 public constant decimals = 8;\r\n    uint256 constant INITIAL_SUPPLY = 125000000 * (10 ** uint256(decimals));\r\n    uint256 constant ICO_SUPPLY = 50000000 * (10 ** uint256(decimals));\r\n    uint256 constant ICO_BONUS = 12500000 * (10 ** uint256(decimals));\r\n    uint256 public minRevenueToDeliver = 0;\r\n    address public assignRevenueContract;\r\n    uint256 public snapshotBlockHeight;\r\n    mapping(address => uint256) public snapshotBalance;\r\n    // Custom Setting values ---------------------------------\r\n    uint256 constant _openingTimePeriodOne = 1531713600;\r\n    uint256 constant _closingTimePeriodOne = 1534132800;\r\n    uint256 constant _openingTimePeriodTwo = 1535342400;\r\n    uint256 constant _closingTimePeriodTwo = 1536552000;\r\n    uint256 constant _bonusDeliverTime = 1552276800;\r\n    address _wallet = 0x2Dc02F830072eB33A12Da0852053eAF896185910;\r\n    address _afiWallet = 0x991E2130f5bF113E2282A5F58E626467D2221599;\r\n    // -------------------------------------------------------\r\n    uint256 constant _rate = 1000;\r\n    uint256 constant _bonusRatePrivateSale = 250;\r\n    uint256 constant _bonusRatePeriodOne = 150;\r\n    uint256 constant _bonusRatePeriodTwo = 50;\r\n    \r\n\r\n    constructor() public \r\n    Crowdsale(_openingTimePeriodOne, _closingTimePeriodOne, _openingTimePeriodTwo, _closingTimePeriodTwo, _bonusDeliverTime,\r\n        _rate, _bonusRatePrivateSale, _bonusRatePeriodOne, _bonusRatePeriodTwo, \r\n        _wallet, this, decimals, ICO_SUPPLY, ICO_BONUS)\r\n    {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        emit Transfer(0x0, _afiWallet, INITIAL_SUPPLY - ICO_SUPPLY - ICO_BONUS);\r\n        emit Transfer(0x0, this, ICO_SUPPLY);\r\n        balances[_afiWallet] = INITIAL_SUPPLY - ICO_SUPPLY - ICO_BONUS;\r\n        \r\n        // add admin\r\n        whitelist[_afiWallet] = true;\r\n        whitelistArray.push(_afiWallet);\r\n        whitelistLength = whitelistLength.add(1);\r\n        whitelistIndexMap[_afiWallet] = whitelistLength;\r\n        \r\n        // add contract\r\n        whitelist[this] = true;\r\n        whitelistArray.push(this);\r\n        whitelistLength = whitelistLength.add(1);\r\n        whitelistIndexMap[this] = whitelistLength;\r\n        balances[this] = ICO_SUPPLY + ICO_BONUS;\r\n    }\r\n\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view isWhitelisted(_beneficiary){\r\n        super._preValidatePurchase(_beneficiary, _weiAmount);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public isWhitelisted(_to) isWhitelisted(msg.sender) returns (bool) {\r\n        super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public isWhitelisted(_to) isWhitelisted(_from)  returns (bool){\r\n        super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function setRevenueContract(address _contract) external onlyOwner{\r\n        assignRevenueContract = _contract;\r\n    }\r\n\r\n    function createBalanceSnapshot() external onlyOwner {\r\n        snapshotBlockHeight = block.number;\r\n        for(uint256 i = 0; i < whitelistLength; i++) {\r\n            snapshotBalance[whitelistArray[i]] = balances[whitelistArray[i]];\r\n        }\r\n    }\r\n\r\n    function setMinRevenue(uint256 _minRevenue) external onlyOwner {\r\n        minRevenueToDeliver = _minRevenue;\r\n    }\r\n\r\n    function assignRevenue(uint256 _totalRevenue) external onlyOwner{\r\n        address contractAddress = assignRevenueContract;\r\n\r\n        for (uint256 i = 0; i<whitelistLength; i++){\r\n            if(whitelistArray[i] == address(this)){\r\n                continue;\r\n            }\r\n            uint256 amount = _totalRevenue.mul(snapshotBalance[whitelistArray[i]]).div(INITIAL_SUPPLY);\r\n            if(amount > minRevenueToDeliver){\r\n                bool done = contractAddress.call(bytes4(keccak256(\"transferRevenue(address,uint256)\")),whitelistArray[i],amount);\r\n                require(done == true);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"privateCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusDeliverTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deliverBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minRevenueToDeliver\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalRevenue\",\"type\":\"uint256\"}],\"name\":\"assignRevenue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTimePeriodOne\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusRatePrivateSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusRatePeriodTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setRevenueContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTimePeriodOne\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusRatePeriodOne\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpened\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenUnsold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snapshotBlockHeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addManyToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"setTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusUnsold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyerBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPurchaseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"snapshotBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTimePeriodTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createBalanceSnapshot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minRevenue\",\"type\":\"uint256\"}],\"name\":\"setMinRevenue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assignRevenueContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTimePeriodTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"TokenBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"AFIToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://07003d53033ee861163c8608793900918a852649996f849cf5c796f4e51368d5"}]}