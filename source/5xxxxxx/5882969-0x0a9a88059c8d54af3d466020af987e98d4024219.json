{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n/**\r\n * Changes by https://www.docademic.com/\r\n */\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\t\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n/**\r\n * Changes by https://www.docademic.com/\r\n */\r\n\r\n/**\r\n * @title MultiOwnable\r\n * @dev The MultiOwnable contract has multiple owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract MultiOwnable {\r\n\t\r\n\taddress[] public owners;\r\n\tmapping(address => bool) public isOwner;\r\n\t\r\n\tevent OwnerAddition(address indexed owner);\r\n\tevent OwnerRemoval(address indexed owner);\r\n\t\r\n\t/**\r\n\t * @dev The MultiOwnable constructor sets the original `owner` of the contract to the sender\r\n\t * account.\r\n\t */\r\n\tfunction MultiOwnable() public {\r\n\t\tisOwner[msg.sender] = true;\r\n\t\towners.push(msg.sender);\r\n\t}\r\n\t\r\n\t/**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(isOwner[msg.sender]);\r\n\t\t_;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Throws if called by an owner.\r\n\t */\r\n\tmodifier ownerDoesNotExist(address _owner) {\r\n\t\trequire(!isOwner[_owner]);\r\n\t\t_;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier ownerExists(address _owner) {\r\n\t\trequire(isOwner[_owner]);\r\n\t\t_;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Throws if called with a null address.\r\n\t */\r\n\tmodifier notNull(address _address) {\r\n\t\trequire(_address != 0);\r\n\t\t_;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Allows to add a new owner. Transaction has to be sent by an owner.\r\n\t * @param _owner Address of new owner.\r\n\t */\r\n\tfunction addOwner(address _owner)\r\n\tpublic\r\n\tonlyOwner\r\n\townerDoesNotExist(_owner)\r\n\tnotNull(_owner)\r\n\t{\r\n\t\tisOwner[_owner] = true;\r\n\t\towners.push(_owner);\r\n\t\temit OwnerAddition(_owner);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n\t * @param _owner Address of owner.\r\n\t */\r\n\tfunction removeOwner(address _owner)\r\n\tpublic\r\n\tonlyOwner\r\n\townerExists(_owner)\r\n\t{\r\n\t\tisOwner[_owner] = false;\r\n\t\tfor (uint i = 0; i < owners.length - 1; i++)\r\n\t\t\tif (owners[i] == _owner) {\r\n\t\t\t\towners[i] = owners[owners.length - 1];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\towners.length -= 1;\r\n\t\temit OwnerRemoval(_owner);\r\n\t}\r\n\t\r\n}\r\n\r\ncontract DestroyableMultiOwner is MultiOwnable {\r\n\t/**\r\n\t * @notice Allows to destroy the contract and return the tokens to the owner.\r\n\t */\r\n\tfunction destroy() public onlyOwner {\r\n\t\tselfdestruct(owners[0]);\r\n\t}\r\n}\r\n\r\ninterface BrokerImp {\r\n\tfunction reward(address _beneficiary, uint256 _value) external returns (bool);\r\n}\r\n\r\ncontract BrokerInt is MultiOwnable, DestroyableMultiOwner {\r\n\tusing SafeMath for uint256;\r\n\t\r\n\tBrokerImp public brokerImp;\r\n\t\r\n\tevent BrokerImpChanged(address _previousBrokerImp, address _brokerImp);\r\n\tevent Reward(address _to, uint256 _value);\r\n\t\r\n\t/**\r\n\t * @dev Constructor.\r\n\t * @param _brokerImp the broker implementation address\r\n\t */\r\n\tfunction BrokerInt(address _brokerImp) public{\r\n\t\trequire(_brokerImp != address(0));\r\n\t\tbrokerImp = BrokerImp(_brokerImp);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Allows the owner make a reward.\r\n\t * @param _beneficiary the beneficiary address\r\n\t * @param _value the tokens reward in wei\r\n\t */\r\n\tfunction reward(address _beneficiary, uint256 _value) public onlyOwner {\r\n\t\trequire(brokerImp.reward(_beneficiary, _value));\r\n\t\temit Reward(_beneficiary, _value);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @dev Allows the owner to change the brokerImp.\r\n\t * @param _brokerImp The brokerImp address\r\n\t */\r\n\tfunction changeBrokerImp(address _brokerImp) public onlyOwner {\r\n\t\temit BrokerImpChanged(brokerImp, _brokerImp);\r\n\t\tbrokerImp = BrokerImp(_brokerImp);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"brokerImp\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_brokerImp\",\"type\":\"address\"}],\"name\":\"changeBrokerImp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_brokerImp\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_previousBrokerImp\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_brokerImp\",\"type\":\"address\"}],\"name\":\"BrokerImpChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"}]","ContractName":"BrokerInt","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004129c45b929cdb787deaae3d0e27ba5b5cd3e3ca","Library":"","SwarmSource":"bzzr://990655dd1f59023b90d25cf4a30c162c53462b5eaccc01deb3b3e7e681728900"}]}