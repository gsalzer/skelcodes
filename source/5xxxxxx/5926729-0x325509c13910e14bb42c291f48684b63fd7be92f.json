{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic is Ownable {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) onlyOwner public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n\r\ncontract StockusToken is BurnableToken {\r\n\r\n    string public constant name = \"Stockus Token\";\r\n    string public constant symbol = \"STT\";\r\n    uint32 public constant decimals = 2;\r\n    uint256 public INITIAL_SUPPLY = 15000000 * 100;\r\n    bool public isSale;\r\n\r\n    function StockusToken() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        Transfer(address(0), msg.sender, INITIAL_SUPPLY);\r\n        isSale = true;\r\n    }\r\n\r\n    modifier saleIsOn() {\r\n        require(isSale);\r\n        _;\r\n    }\r\n\r\n    function refund(address _from, uint256 _value) onlyOwner saleIsOn public returns(bool) {\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[owner] = balances[owner].add(_value);\r\n        Transfer(_from, owner, _value);\r\n        return true;\r\n    }\r\n\r\n    function stopSale() onlyOwner saleIsOn public returns(bool) {\r\n        isSale = false;\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\npragma solidity ^0.4.10;\r\n\r\ncontract Crowdsale is Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    address public multisig;\r\n    uint256 public rate;\r\n    uint256 public weiRaised;\r\n    uint256 public hardcap;\r\n    uint256 public softcap;\r\n    StockusToken public token; //Token contract\r\n    uint256 public saleSupply;\r\n    uint256 public bountySupply;\r\n    bool public saleStopped;\r\n    bool public sendToTeam;\r\n    uint256 public sendToTeamTime;\r\n    uint256 public endSaleTime;\r\n    mapping(address => uint256) public saleBalances;\r\n\r\n    uint256 public constant RESERVED_SUPPLY = 1500000 * 100;\r\n\r\n    function Crowdsale(address _multisig, StockusToken _token, uint256 _weiRaised, uint256 _saleSupply, uint256 _bountySupply) public {\r\n        multisig = _multisig;\r\n        weiRaised = _weiRaised;\r\n        hardcap = 700 ether;\r\n        softcap = 100 ether;\r\n        token = _token;\r\n        saleSupply = _saleSupply;\r\n        bountySupply = _bountySupply;\r\n        saleStopped = false;\r\n        sendToTeam = false;\r\n        endSaleTime = now + 4 weeks;\r\n    }\r\n\r\n    modifier isOverSoftcap() {\r\n        require(weiRaised >= softcap);\r\n        _;\r\n    }\r\n\r\n    modifier isUnderSoftcap() {\r\n        require(weiRaised <= softcap);\r\n        _;\r\n    }\r\n\r\n    modifier isSale() {\r\n        require(now < endSaleTime);\r\n        _;\r\n    }\r\n\r\n    modifier saleEnded() {\r\n        require(now >= endSaleTime);\r\n        _;\r\n    }\r\n\r\n    modifier saleNoStopped() {\r\n        require(saleStopped == false);\r\n        _;\r\n    }\r\n\r\n    function stopSale() onlyOwner saleEnded isOverSoftcap public returns(bool) {\r\n        if (saleSupply > 0) {\r\n            token.burn(saleSupply);\r\n            saleSupply = 0;\r\n        }\r\n        saleStopped = true;\r\n        sendToTeamTime = now + 12 weeks;\r\n        forwardFunds();\r\n        return token.stopSale();\r\n    }\r\n\r\n    function createTokens() isSale saleNoStopped payable public {\r\n        if (now < endSaleTime - 3 weeks) {\r\n            rate = 12000000000000;\r\n        } else if (now > endSaleTime - 3 weeks && now < endSaleTime - 2 weeks) {\r\n            rate = 14000000000000;\r\n        } else if (now > endSaleTime - 2 weeks && now < endSaleTime - 1 weeks) {\r\n            rate = 16000000000000;\r\n        } else {\r\n            rate = 18000000000000;\r\n        }\r\n        uint256 tokens = msg.value.div(rate);\r\n        require(saleSupply >= tokens);\r\n        saleSupply = saleSupply.sub(tokens);\r\n        saleBalances[msg.sender] = saleBalances[msg.sender].add(msg.value);\r\n        token.transfer(msg.sender, tokens);\r\n    }\r\n\r\n    function adminSendTokens(address _to, uint256 _value, uint256 _weiAmount) onlyOwner saleNoStopped public returns(bool) {\r\n        require(saleSupply >= _value);\r\n        saleSupply = saleSupply.sub(_value);\r\n        weiRaised = weiRaised.add(_weiAmount);\r\n        return token.transfer(_to, _value);\r\n    }\r\n\r\n    function adminRefundTokens(address _from, uint256 _value, uint256 _weiAmount) onlyOwner saleNoStopped public returns(bool) {\r\n        saleSupply = saleSupply.add(_value);\r\n        weiRaised = weiRaised.sub(_weiAmount);\r\n        return token.refund(_from, _value);\r\n    }\r\n\r\n    function bountySend(address _to, uint256 _value) onlyOwner saleNoStopped public returns(bool) {\r\n        require(bountySupply >= _value);\r\n        bountySupply = bountySupply.sub(_value);\r\n        return token.transfer(_to, _value);\r\n    }\r\n\r\n    function bountyRefund(address _from, uint256 _value) onlyOwner saleNoStopped public returns(bool) {\r\n        bountySupply = bountySupply.add(_value);\r\n        return token.refund(_from, _value);\r\n    }\r\n\r\n    function refund() saleEnded isUnderSoftcap public returns(bool) {\r\n        uint256 value = saleBalances[msg.sender];\r\n        saleBalances[msg.sender] = 0;\r\n        msg.sender.transfer(value);\r\n    }\r\n\r\n    function refundTeamTokens() onlyOwner public returns(bool) {\r\n        require(sendToTeam == false);\r\n        require(now >= sendToTeamTime);\r\n        sendToTeam = true;\r\n        return token.transfer(msg.sender, RESERVED_SUPPLY);\r\n    }\r\n\r\n    function forwardFunds() private {\r\n        multisig.transfer(this.balance);\r\n    }\r\n\r\n    function setMultisig(address _multisig) onlyOwner public {\r\n        multisig = _multisig;\r\n    }\r\n\r\n    function() external payable {\r\n        createTokens();\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.4.21;\r\n\r\ncontract Presale is Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    address public multisig;\r\n    uint256 public rate;\r\n    uint256 public weiRaised;\r\n    uint256 public tokensBurned;\r\n    StockusToken public token; //Token contract\r\n    Crowdsale public crowdsale; // Crowdsale contract\r\n    uint256 public saleSupply = 12000000 * 100;\r\n    uint256 public presaleSupply = 2000000 * 100;\r\n    uint256 public bountySupply = 1500000 * 100;\r\n    uint256 public tokensSoftcap = 500000 * 100;\r\n\r\n    function Presale(address _multisig) public {\r\n        multisig = _multisig;\r\n        token = new StockusToken();\r\n    }\r\n\r\n    modifier isOverSoftcap() {\r\n        require(tokensBurned >= tokensSoftcap);\r\n        _;\r\n    }\r\n\r\n    function startCrowdsale() onlyOwner isOverSoftcap public {\r\n        crowdsale = new Crowdsale(multisig, token, weiRaised, saleSupply, bountySupply);\r\n        token.transfer(address(crowdsale), token.balanceOf(this));\r\n        token.transferOwnership(address(crowdsale));\r\n        crowdsale.transferOwnership(owner);\r\n        forwardFunds();\r\n    }\r\n\r\n    function createTokens() payable public {\r\n        uint256 weiAmount = msg.value;\r\n        if (tokensBurned < tokensSoftcap) {\r\n            rate = 5000000000000;\r\n        } else {\r\n            rate = 7000000000000;\r\n        }\r\n        uint256 tokens = weiAmount.div(rate);\r\n        require(presaleSupply >= tokens);\r\n        tokensBurned = tokensBurned.add(tokens);\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        saleSupply = saleSupply.sub(tokens);\r\n        presaleSupply = presaleSupply.sub(tokens);\r\n        token.transfer(msg.sender, tokens);\r\n    }\r\n\r\n    function bountySend(address _to, uint256 _value) onlyOwner public returns(bool) {\r\n        require(bountySupply >= _value);\r\n        bountySupply = bountySupply.sub(_value);\r\n        return token.transfer(_to, _value);\r\n    }\r\n\r\n    function bountyRefund(address _from, uint256 _value) onlyOwner public returns(bool) {\r\n        bountySupply = bountySupply.add(_value);\r\n        return token.refund(_from, _value);\r\n    }\r\n\r\n    function forwardFunds() private {\r\n        multisig.transfer(this.balance);\r\n    }\r\n\r\n    function setMultisig(address _multisig) onlyOwner public {\r\n        multisig = _multisig;\r\n    }\r\n\r\n    function() external payable {\r\n        createTokens();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"bountyRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"bountySend\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoftcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"}],\"name\":\"setMultisig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Presale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c10c920c85b13719e33057b96d39d659d026cd5e","Library":"","SwarmSource":"bzzr://50a6a262730ec097621f4bb61ddb0b5f97cdb2c76eaa9fb8468bdf36a5419f7f"}]}