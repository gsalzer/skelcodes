{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/* CryptoCountries.io Cities */\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Managed {\r\n  event DeclareEmergency (string _reason);\r\n  event ResolveEmergency ();\r\n\r\n  address private addressOfOwner;\r\n  address[] private addressesOfAdmins;\r\n  bool private isInEmergency;\r\n\r\n  constructor () public {\r\n    addressOfOwner = msg.sender;\r\n    isInEmergency = false;\r\n  }\r\n\r\n  /* Modifiers */\r\n  modifier onlyOwner () {\r\n    require(addressOfOwner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmins () {\r\n    require(isAdmin(msg.sender));\r\n    _;\r\n  }\r\n\r\n  modifier notEmergency () {\r\n    require(!isInEmergency);\r\n    _;\r\n  }\r\n\r\n  /* Admin */\r\n  function transferOwnership (address _owner) onlyOwner() public {\r\n    clearAdmins();\r\n    addressOfOwner = _owner;\r\n  }\r\n\r\n  function addAdmin (address _admin) onlyOwner() public {\r\n    addressesOfAdmins.push(_admin);\r\n  }\r\n\r\n  function removeAdmin (address _admin) onlyOwner() public {\r\n    require(isAdmin(_admin));\r\n\r\n    uint256 length = addressesOfAdmins.length;\r\n    address swap = addressesOfAdmins[length - 1];\r\n    uint256 index = 0;\r\n\r\n    for (uint256 i = 0; i < length; i++) {\r\n      if (addressesOfAdmins[i] == _admin) {\r\n        index = i;\r\n      }\r\n    }\r\n\r\n    addressesOfAdmins[index] = swap;\r\n    delete addressesOfAdmins[length - 1];\r\n    addressesOfAdmins.length--;\r\n  }\r\n\r\n  function clearAdmins () onlyOwner() public {\r\n    require(addressesOfAdmins.length > 0);\r\n    addressesOfAdmins.length = 0;\r\n  }\r\n\r\n  /* Emergency protocol */\r\n  function declareEmergency (string _reason) onlyOwner() public {\r\n    require(!isInEmergency);\r\n    isInEmergency = true;\r\n    emit DeclareEmergency(_reason);\r\n  }\r\n\r\n  function resolveEmergency () onlyOwner() public {\r\n    require(isInEmergency);\r\n    isInEmergency = false;\r\n    emit ResolveEmergency();\r\n  }\r\n\r\n  /* Read */\r\n  function owner () public view returns (address _owner) {\r\n    return addressOfOwner;\r\n  }\r\n\r\n  function admins () public view returns (address[] _admins) {\r\n    return addressesOfAdmins;\r\n  }\r\n\r\n  function emergency () public view returns (bool _emergency) {\r\n    return isInEmergency;\r\n  }\r\n\r\n  function isAdmin (address _admin) public view returns (bool _isAdmin) {\r\n    if (_admin == addressOfOwner) {\r\n      return true;\r\n    }\r\n\r\n    for (uint256 i = 0; i < addressesOfAdmins.length; i++) {\r\n      if (addressesOfAdmins[i] == _admin) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\ninterface ICountryToken {\r\n  function ownerOf (uint256) external view returns (address);\r\n  function priceOf (uint256) external view returns (uint256);\r\n}\r\n\r\ncontract CityToken is Managed {\r\n  using SafeMath for uint256;\r\n\r\n  event List (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n  event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n  event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  ICountryToken private countryToken;\r\n  bool private erc721Enabled = false;\r\n\r\n  uint256[] private listedItems;\r\n  mapping (uint256 => address) private ownerOfItem;\r\n  mapping (uint256 => uint256) private priceOfItem;\r\n  mapping (uint256 => uint256) private countryOfItem;\r\n  mapping (uint256 => uint256[]) private itemsOfCountry;\r\n  mapping (uint256 => address) private approvedOfItem;\r\n\r\n  /* Constructor */\r\n  constructor () public {\r\n  }\r\n\r\n  /* Modifiers */\r\n  modifier hasCountryToken () {\r\n    require(countryToken != address(0));\r\n    _;\r\n  }\r\n\r\n  modifier onlyERC721() {\r\n    require(erc721Enabled);\r\n    _;\r\n  }\r\n\r\n  /* Initilization */\r\n  function setCountryToken (address _countryToken) onlyOwner() public {\r\n    countryToken = ICountryToken(_countryToken);\r\n  }\r\n\r\n  /* Withdraw */\r\n  /*\r\n    NOTICE: These functions withdraw the developer's cut which is left\r\n    in the contract by `buy`. User funds are immediately sent to the old\r\n    owner in `buy`, no user funds are left in the contract.\r\n  */\r\n  function withdrawAll () onlyOwner() public {\r\n    owner().transfer(address(this).balance);\r\n  }\r\n\r\n  function withdrawAmount (uint256 _amount) onlyOwner() public {\r\n    owner().transfer(_amount);\r\n  }\r\n\r\n  // Unlocks ERC721 behaviour, allowing for trading on third party platforms.\r\n  function enableERC721 () onlyOwner() public {\r\n    erc721Enabled = true;\r\n  }\r\n\r\n  /* Listing */\r\n  function listMultipleItems (uint256[] _itemIds, uint256[] _countryIds, uint256 _price, address _owner) onlyAdmins() notEmergency() hasCountryToken() external {\r\n    require(_itemIds.length == _countryIds.length);\r\n\r\n    for (uint256 i = 0; i < _itemIds.length; i++) {\r\n      listItem(_itemIds[i], _countryIds[i], _price, _owner);\r\n    }\r\n  }\r\n\r\n  function listItem (uint256 _itemId, uint256 _countryId, uint256 _price, address _owner) onlyAdmins() notEmergency() hasCountryToken() public {\r\n    require(countryToken != address(0));\r\n    require(_price > 0);\r\n    require(priceOf(_itemId) == 0);\r\n    require(ownerOf(_itemId) == address(0));\r\n    require(countryToken.ownerOf(_countryId) != address(0));\r\n    require(countryToken.priceOf(_countryId) > 0);\r\n\r\n    ownerOfItem[_itemId] = _owner;\r\n    priceOfItem[_itemId] = _price;\r\n    countryOfItem[_itemId] = _countryId;\r\n\r\n    listedItems.push(_itemId);\r\n    itemsOfCountry[_countryId].push(_itemId);\r\n\r\n    emit List(_itemId, _owner, _price);\r\n  }\r\n\r\n  /* Market */\r\n  function calculateNextPrice (uint256 _price) public pure returns (uint256 _nextPrice) {\r\n    return _price.mul(120).div(94);\r\n  }\r\n\r\n  function calculateDevCut (uint256 _price) public pure returns (uint256 _devCut) {\r\n    return _price.mul(3).div(100); // 3%\r\n  }\r\n\r\n  function calculateCountryCut (uint256 _price) public pure returns (uint256 _countryCut) {\r\n    return _price.mul(3).div(100); // 3%\r\n  }\r\n\r\n  function buy (uint256 _itemId) notEmergency() hasCountryToken() payable public {\r\n    require(priceOf(_itemId) > 0);\r\n    require(ownerOf(_itemId) != address(0));\r\n    require(msg.value >= priceOf(_itemId));\r\n    require(ownerOf(_itemId) != msg.sender);\r\n    require(msg.sender != address(0));\r\n    require(countryToken.ownerOf(countryOf(_itemId)) != address(0));\r\n\r\n    address oldOwner = ownerOf(_itemId);\r\n    address newOwner = msg.sender;\r\n    address countryOwner = countryToken.ownerOf(countryOf(_itemId));\r\n    uint256 price = priceOf(_itemId);\r\n    uint256 excess = msg.value.sub(price);\r\n\r\n    _transfer(oldOwner, newOwner, _itemId);\r\n    priceOfItem[_itemId] = nextPriceOf(_itemId);\r\n\r\n    emit Bought(_itemId, newOwner, price);\r\n    emit Sold(_itemId, oldOwner, price);\r\n\r\n    uint256 devCut = calculateDevCut(price);\r\n    uint256 countryCut = calculateCountryCut(price);\r\n    uint256 totalCut = devCut + countryCut;\r\n\r\n    countryOwner.transfer(countryCut);\r\n    oldOwner.transfer(price.sub(totalCut));\r\n\r\n    if (excess > 0) {\r\n      newOwner.transfer(excess);\r\n    }\r\n  }\r\n\r\n  /* Read */\r\n  function tokenExists (uint256 _itemId) public view returns (bool _exists) {\r\n    return priceOf(_itemId) > 0;\r\n  }\r\n\r\n  function countrySupply (uint256 _countryId) public view returns (uint256 _countrySupply) {\r\n    return itemsOfCountry[_countryId].length;\r\n  }\r\n\r\n  function priceOf (uint256 _itemId) public view returns (uint256 _price) {\r\n    return priceOfItem[_itemId];\r\n  }\r\n\r\n  function nextPriceOf (uint256 _itemId) public view returns (uint256 _nextPrice) {\r\n    return calculateNextPrice(priceOf(_itemId));\r\n  }\r\n\r\n  function countryOf (uint256 _itemId) public view returns (uint256 _countryId) {\r\n    return countryOfItem[_itemId];\r\n  }\r\n\r\n  function allOf (uint256 _itemId) external view returns (address _owner, uint256 _price, uint256 _nextPrice, uint256 _countryId) {\r\n    return (ownerOf(_itemId), priceOf(_itemId), nextPriceOf(_itemId), countryOf(_itemId));\r\n  }\r\n\r\n  function allItems (uint256 _from, uint256 _take) public view returns (uint256[] _items) {\r\n    if (totalSupply() == 0) {\r\n      return new uint256[](0);\r\n    }\r\n\r\n    uint256[] memory items = new uint256[](_take);\r\n\r\n    for (uint256 i = 0; i < _take; i++) {\r\n      items[i] = listedItems[_from + i];\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  function countryItems (uint256 _countryId, uint256 _from, uint256 _take) public view returns (uint256[] _items) {\r\n    if (countrySupply(_countryId) == 0) {\r\n      return new uint256[](0);\r\n    }\r\n\r\n    uint256[] memory items = new uint256[](_take);\r\n\r\n    for (uint256 i = 0; i < _take; i++) {\r\n      items[i] = itemsOfCountry[_countryId][_from + i];\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  function tokensOf (address _owner) public view returns (uint256[] _tokenIds) {\r\n    uint256[] memory items = new uint256[](balanceOf(_owner));\r\n\r\n    uint256 itemCounter = 0;\r\n    for (uint256 i = 0; i < listedItems.length; i++) {\r\n      if (ownerOf(listedItems[i]) == _owner) {\r\n        items[itemCounter] = listedItems[i];\r\n        itemCounter += 1;\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  /* ERC721 */\r\n  function implementsERC721 () public view returns (bool _implements) {\r\n    return erc721Enabled;\r\n  }\r\n\r\n  function balanceOf (address _owner) public view returns (uint256 _balance) {\r\n    uint256 counter = 0;\r\n\r\n    for (uint256 i = 0; i < listedItems.length; i++) {\r\n      if (ownerOf(listedItems[i]) == _owner) {\r\n        counter++;\r\n      }\r\n    }\r\n\r\n    return counter;\r\n  }\r\n\r\n  function ownerOf (uint256 _itemId) public view returns (address _owner) {\r\n    return ownerOfItem[_itemId];\r\n  }\r\n\r\n  function transfer(address _to, uint256 _itemId) onlyERC721() public {\r\n    require(msg.sender == ownerOf(_itemId));\r\n    _transfer(msg.sender, _to, _itemId);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _itemId) onlyERC721() public {\r\n    require(getApproved(_itemId) == msg.sender);\r\n    _transfer(_from, _to, _itemId);\r\n  }\r\n\r\n  function approve(address _to, uint256 _itemId) onlyERC721() public {\r\n    require(msg.sender != _to);\r\n    require(tokenExists(_itemId));\r\n    require(ownerOf(_itemId) == msg.sender);\r\n\r\n    if (_to == 0) {\r\n      if (approvedOfItem[_itemId] != 0) {\r\n        delete approvedOfItem[_itemId];\r\n        emit Approval(msg.sender, 0, _itemId);\r\n      }\r\n    } else {\r\n      approvedOfItem[_itemId] = _to;\r\n      emit Approval(msg.sender, _to, _itemId);\r\n    }\r\n  }\r\n\r\n  function getApproved (uint256 _itemId) public view returns (address _approved) {\r\n    require(tokenExists(_itemId));\r\n    return approvedOfItem[_itemId];\r\n  }\r\n\r\n  function name () public pure returns (string _name) {\r\n    return \"CryptoCountries.io Cities\";\r\n  }\r\n\r\n  function symbol () public pure returns (string _symbol) {\r\n    return \"CC2\";\r\n  }\r\n\r\n  function tokenURI (uint256 _itemId) public pure returns (string) {\r\n    return _concat(\"https://cryptocountries.io/api/metadata/city/\", _uintToString(_itemId));\r\n  }\r\n\r\n  function totalSupply () public view returns (uint256 _totalSupply) {\r\n    return listedItems.length;\r\n  }\r\n\r\n  function tokenByIndex (uint256 _index) public view returns (uint256 _itemId) {\r\n    require(_index < totalSupply());\r\n    return listedItems[_index];\r\n  }\r\n\r\n  function tokenOfOwnerByIndex (address _owner, uint256 _index) public view returns (uint256 _itemId) {\r\n    require(_index < balanceOf(_owner));\r\n\r\n    uint count = 0;\r\n    for (uint i = 0; i < listedItems.length; i++) {\r\n      uint itemId = listedItems[i];\r\n      if (ownerOf(itemId) == _owner) {\r\n        if (count == _index) { return itemId; }\r\n        count += 1;\r\n      }\r\n    }\r\n\r\n    assert(false);\r\n  }\r\n\r\n  /* Internal */\r\n  function _transfer(address _from, address _to, uint256 _itemId) internal {\r\n    require(tokenExists(_itemId));\r\n    require(ownerOf(_itemId) == _from);\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n\r\n    ownerOfItem[_itemId] = _to;\r\n    approvedOfItem[_itemId] = 0;\r\n\r\n    emit Transfer(_from, _to, _itemId);\r\n  }\r\n\r\n  function _uintToString (uint i) internal pure returns (string) {\r\n\t\tif (i == 0) return \"0\";\r\n\r\n\t\tuint j = i;\r\n\t\tuint len;\r\n\t\twhile (j != 0){\r\n\t\t\tlen++;\r\n\t\t\tj /= 10;\r\n\t\t}\r\n\r\n\t\tbytes memory bstr = new bytes(len);\r\n\r\n\t\tuint k = len - 1;\r\n\t\twhile (i != 0) {\r\n\t\t\tbstr[k--] = byte(48 + i % 10);\r\n\t\t\ti /= 10;\r\n\t\t}\r\n\r\n\t\treturn string(bstr);\r\n  }\r\n\r\n  function _concat(string _a, string _b) internal pure returns (string) {\r\n    bytes memory _ba = bytes(_a);\r\n    bytes memory _bb = bytes(_b);\r\n    string memory ab = new string(_ba.length + _bb.length);\r\n    bytes memory bab = bytes(ab);\r\n    uint k = 0;\r\n    for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\r\n    for (i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\r\n    return string(bab);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"name\":\"_exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"_approved\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"_implements\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearAdmins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resolveEmergency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"_isAdmin\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"allOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"name\":\"_countryId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_countryToken\",\"type\":\"address\"}],\"name\":\"setCountryToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateCountryCut\",\"outputs\":[{\"name\":\"_countryCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_take\",\"type\":\"uint256\"}],\"name\":\"countryItems\",\"outputs\":[{\"name\":\"_items\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"nextPriceOf\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateDevCut\",\"outputs\":[{\"name\":\"_devCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"}],\"name\":\"countrySupply\",\"outputs\":[{\"name\":\"_countrySupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableERC721\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_countryId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"listItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"declareEmergency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admins\",\"outputs\":[{\"name\":\"_admins\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergency\",\"outputs\":[{\"name\":\"_emergency\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_take\",\"type\":\"uint256\"}],\"name\":\"allItems\",\"outputs\":[{\"name\":\"_items\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateNextPrice\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"name\":\"_countryIds\",\"type\":\"uint256[]\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"listMultipleItems\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"countryOf\",\"outputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"List\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"DeclareEmergency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ResolveEmergency\",\"type\":\"event\"}]","ContractName":"CityToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dbb7c5f77cafc38fe8a52b4fdedc19d1906b2e63ac88af071819189f778d35a3"}]}