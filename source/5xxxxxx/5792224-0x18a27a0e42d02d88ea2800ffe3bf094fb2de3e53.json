{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n// File: contracts/ExchangeHandler.sol\r\n\r\n/// @title Interface for all exchange handler contracts\r\ninterface ExchangeHandler {\r\n\r\n    /// @dev Get the available amount left to fill for an order\r\n    /// @param orderAddresses Array of address values needed for this DEX order\r\n    /// @param orderValues Array of uint values needed for this DEX order\r\n    /// @param exchangeFee Value indicating the fee for this DEX order\r\n    /// @param v ECDSA signature parameter v\r\n    /// @param r ECDSA signature parameter r\r\n    /// @param s ECDSA signature parameter s\r\n    /// @return Available amount left to fill for this order\r\n    function getAvailableAmount(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256 exchangeFee,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256);\r\n\r\n    /// @dev Perform a buy order at the exchange\r\n    /// @param orderAddresses Array of address values needed for each DEX order\r\n    /// @param orderValues Array of uint values needed for each DEX order\r\n    /// @param exchangeFee Value indicating the fee for this DEX order\r\n    /// @param amountToFill Amount to fill in this order\r\n    /// @param v ECDSA signature parameter v\r\n    /// @param r ECDSA signature parameter r\r\n    /// @param s ECDSA signature parameter s\r\n    /// @return Amount filled in this order\r\n    function performBuy(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256 exchangeFee,\r\n        uint256 amountToFill,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable returns (uint256);\r\n\r\n    /// @dev Perform a sell order at the exchange\r\n    /// @param orderAddresses Array of address values needed for each DEX order\r\n    /// @param orderValues Array of uint values needed for each DEX order\r\n    /// @param exchangeFee Value indicating the fee for this DEX order\r\n    /// @param amountToFill Amount to fill in this order\r\n    /// @param v ECDSA signature parameter v\r\n    /// @param r ECDSA signature parameter r\r\n    /// @param s ECDSA signature parameter s\r\n    /// @return Amount filled in this order\r\n    function performSell(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256 exchangeFee,\r\n        uint256 amountToFill,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256);\r\n}\r\n\r\n// File: contracts/WETH9.sol\r\n\r\n// Copyright (C) 2015, 2016, 2017 Dapphub\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\ncontract WETH9 {\r\n    string public name     = \"Wrapped Ether\";\r\n    string public symbol   = \"WETH\";\r\n    uint8  public decimals = 18;\r\n\r\n    event  Approval(address indexed src, address indexed guy, uint wad);\r\n    event  Transfer(address indexed src, address indexed dst, uint wad);\r\n    event  Deposit(address indexed dst, uint wad);\r\n    event  Withdrawal(address indexed src, uint wad);\r\n\r\n    mapping (address => uint)                       public  balanceOf;\r\n    mapping (address => mapping (address => uint))  public  allowance;\r\n\r\n    function() public payable {\r\n        deposit();\r\n    }\r\n    function deposit() public payable {\r\n        balanceOf[msg.sender] += msg.value;\r\n        Deposit(msg.sender, msg.value);\r\n    }\r\n    function withdraw(uint wad) public {\r\n        require(balanceOf[msg.sender] >= wad);\r\n        balanceOf[msg.sender] -= wad;\r\n        msg.sender.transfer(wad);\r\n        Withdrawal(msg.sender, wad);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return this.balance;\r\n    }\r\n\r\n    function approve(address guy, uint wad) public returns (bool) {\r\n        allowance[msg.sender][guy] = wad;\r\n        Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(balanceOf[src] >= wad);\r\n\r\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\r\n            require(allowance[src][msg.sender] >= wad);\r\n            allowance[src][msg.sender] -= wad;\r\n        }\r\n\r\n        balanceOf[src] -= wad;\r\n        balanceOf[dst] += wad;\r\n\r\n        Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/AirSwapHandler.sol\r\n\r\n/**\r\n * @title AirSwap interface.\r\n */\r\ninterface AirSwapInterface {\r\n    /// @dev Mapping of order hash to bool (true = already filled).\r\n    function fills(\r\n        bytes32 hash\r\n    ) external view returns (bool);\r\n\r\n    /// @dev Fills an order by transferring tokens between (maker or escrow) and taker.\r\n    /// Maker is given tokenA to taker.\r\n    function fill(\r\n        address makerAddress,\r\n        uint makerAmount,\r\n        address makerToken,\r\n        address takerAddress,\r\n        uint takerAmount,\r\n        address takerToken,\r\n        uint256 expiration,\r\n        uint256 nonce,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable;\r\n}\r\n\r\n/**\r\n * @title AirSwap wrapper contract.\r\n * @dev Assumes makers and takers have approved this contract to access their balances.\r\n */\r\ncontract AirSwapHandler is ExchangeHandler, Ownable {\r\n    /// @dev AirSwap exhange address\r\n    AirSwapInterface public airSwap;\r\n    WETH9 public weth;\r\n    address public totle;\r\n\r\n    modifier onlyTotle() {\r\n        require(msg.sender == totle);\r\n        _;\r\n    }\r\n\r\n    /// @dev Constructor\r\n    function AirSwapHandler(\r\n        address _airSwap,\r\n        address _wethAddress,\r\n        address _totle\r\n    ) public {\r\n        require(_airSwap != address(0x0));\r\n        require(_wethAddress != address(0x0));\r\n        require(_totle != address(0x0));\r\n\r\n        airSwap = AirSwapInterface(_airSwap);\r\n        weth = WETH9(_wethAddress);\r\n        totle = _totle;\r\n    }\r\n\r\n    /// @dev Get the available amount left to fill for an order\r\n    /// @param orderValues Array of uint values needed for this DEX order\r\n    /// @return Available amount left to fill for this order\r\n    function getAvailableAmount(\r\n        address[8],\r\n        uint256[6] orderValues,\r\n        uint256,\r\n        uint8,\r\n        bytes32,\r\n        bytes32\r\n    ) external returns (uint256) {\r\n        // Just return a orderValues[0], as there's nothing else we can do here\r\n        return orderValues[0];\r\n    }\r\n\r\n    /// @dev Perform a buy order at the exchange\r\n    /// @param orderAddresses Array of address values needed for each DEX order\r\n    /// @param orderValues Array of uint values needed for each DEX order\r\n    /// @param amountToFill Amount to fill in this order\r\n    /// @param v ECDSA signature parameter v\r\n    /// @param r ECDSA signature parameter r\r\n    /// @param s ECDSA signature parameter s\r\n    /// @return Amount filled in this order\r\n    function performBuy(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256,\r\n        uint256 amountToFill,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n    external\r\n    onlyTotle\r\n    payable\r\n    returns (uint256) {\r\n        fillBuy(orderAddresses, orderValues, v, r, s);\r\n        return amountToFill;\r\n    }\r\n\r\n    /// @dev Perform a sell order at the exchange\r\n    /// @param orderAddresses Array of address values needed for each DEX order\r\n    /// @param orderValues Array of uint values needed for each DEX order\r\n    /// @param amountToFill Amount to fill in this order\r\n    /// @param v ECDSA signature parameter v\r\n    /// @param r ECDSA signature parameter r\r\n    /// @param s ECDSA signature parameter s\r\n    /// @return Amount filled in this order\r\n    function performSell(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256,\r\n        uint256 amountToFill,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n    external\r\n    onlyTotle\r\n    returns (uint256) {\r\n        return fillSell(orderAddresses, orderValues, v, r, s);\r\n    }\r\n\r\n    function setTotle(address _totle)\r\n    external\r\n    onlyOwner {\r\n        require(_totle != address(0));\r\n        totle = _totle;\r\n    }\r\n\r\n    /// @dev The contract is not designed to hold and/or manage tokens.\r\n    /// Withdraws token in the case of emergency. Only an owner is allowed to call this.\r\n    function withdrawToken(address _token, uint _amount)\r\n    external\r\n    onlyOwner\r\n    returns (bool) {\r\n        return ERC20(_token).transfer(owner, _amount);\r\n    }\r\n\r\n    /// @dev The contract is not designed to hold ETH.\r\n    /// Withdraws ETH in the case of emergency. Only an owner is allowed to call this.\r\n    function withdrawETH(uint _amount)\r\n    external\r\n    onlyOwner\r\n    returns (bool) {\r\n        owner.transfer(_amount);\r\n    }\r\n\r\n    function() public payable {\r\n    }\r\n\r\n    /** Validates order arguments for fill() and cancel() functions. */\r\n    function validateOrder(\r\n        address makerAddress,\r\n        uint makerAmount,\r\n        address makerToken,\r\n        address takerAddress,\r\n        uint takerAmount,\r\n        address takerToken,\r\n        uint256 expiration,\r\n        uint256 nonce)\r\n    public\r\n    view\r\n    returns (bool) {\r\n        // Hash arguments to identify the order.\r\n        bytes32 hashV = keccak256(makerAddress, makerAmount, makerToken,\r\n                                  takerAddress, takerAmount, takerToken,\r\n                                  expiration, nonce);\r\n        return airSwap.fills(hashV);\r\n    }\r\n\r\n    /// orderAddresses[0] == makerAddress\r\n    /// orderAddresses[1] == makerToken\r\n    /// orderAddresses[2] == takerAddress\r\n    /// orderAddresses[3] == takerToken\r\n    /// orderValues[0] = makerAmount\r\n    /// orderValues[1] = takerAmount\r\n    /// orderValues[2] = expiration\r\n    /// orderValues[3] = nonce\r\n    function fillBuy(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) private {\r\n        airSwap.fill.value(msg.value)(orderAddresses[0], orderValues[0], orderAddresses[1],\r\n                                      address(this), orderValues[1], orderAddresses[3],\r\n                                      orderValues[2], orderValues[3], v, r, s);\r\n\r\n        require(validateOrder(orderAddresses[0], orderValues[0], orderAddresses[1],\r\n                              address(this), orderValues[1], orderAddresses[3],\r\n                              orderValues[2], orderValues[3]));\r\n\r\n        require(ERC20(orderAddresses[1]).transfer(orderAddresses[2], orderValues[0]));\r\n    }\r\n\r\n    /// orderAddresses[0] == makerAddress\r\n    /// orderAddresses[1] == makerToken\r\n    /// orderAddresses[2] == takerAddress\r\n    /// orderAddresses[3] == takerToken\r\n    /// orderValues[0] = makerAmount\r\n    /// orderValues[1] = takerAmount\r\n    /// orderValues[2] = expiration\r\n    /// orderValues[3] = nonce\r\n    function fillSell(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) private\r\n    returns (uint)\r\n    {\r\n        assert(msg.sender == totle);\r\n\r\n        require(orderAddresses[1] == address(weth));\r\n\r\n        uint takerAmount = orderValues[1];\r\n\r\n        require(ERC20(orderAddresses[3]).approve(address(airSwap), takerAmount));\r\n\r\n        airSwap.fill(orderAddresses[0], orderValues[0], orderAddresses[1],\r\n                     address(this), takerAmount, orderAddresses[3],\r\n                     orderValues[2], orderValues[3], v, r, s);\r\n\r\n        require(validateOrder(orderAddresses[0], orderValues[0], orderAddresses[1],\r\n                              address(this), takerAmount, orderAddresses[3],\r\n                              orderValues[2], orderValues[3]));\r\n\r\n        weth.withdraw(orderValues[0]);\r\n        msg.sender.transfer(orderValues[0]);\r\n\r\n        return orderValues[0];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_totle\",\"type\":\"address\"}],\"name\":\"setTotle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airSwap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address[8]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"getAvailableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[8]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"amountToFill\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"performSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[8]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"amountToFill\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"performBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"makerAddress\",\"type\":\"address\"},{\"name\":\"makerAmount\",\"type\":\"uint256\"},{\"name\":\"makerToken\",\"type\":\"address\"},{\"name\":\"takerAddress\",\"type\":\"address\"},{\"name\":\"takerAmount\",\"type\":\"uint256\"},{\"name\":\"takerToken\",\"type\":\"address\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"validateOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_airSwap\",\"type\":\"address\"},{\"name\":\"_wethAddress\",\"type\":\"address\"},{\"name\":\"_totle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AirSwapHandler","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008fd3121013a07c57f0d69646e86e7a4880b467b7000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000d94c60e2793ad587400d86e4d6fd9c874f0f79ef","Library":"","SwarmSource":"bzzr://e3d8117a2a96f14686723d191730311c63b06868c6866b05d57f4f59bed07480"}]}