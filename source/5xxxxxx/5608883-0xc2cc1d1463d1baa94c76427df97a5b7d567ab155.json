{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n\r\n    }\r\n\r\n \r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a / b;\r\n        return c;\r\n\r\n    }\r\n\r\n \r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        assert(b <= a);\r\n        return a - b;\r\n\r\n    }\r\n\r\n \r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n\r\n    }\r\n\r\n}\r\n\r\n \r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n     */\r\n\r\n    function Ownable() public {\r\n\r\n        owner = msg.sender;\r\n\r\n    }\r\n\r\n \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(msg.sender == owner);\r\n        _;\r\n\r\n    }\r\n\r\n \r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n\r\n    }\r\n\r\n}\r\n\r\n \r\ncontract ERC20Basic {\r\n\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n\r\n        return totalSupply_;\r\n\r\n    }\r\n\r\n \r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n\r\n   function transfer(address _to, uint256 _value) public returns (bool) {\r\n\r\n        require(_to != address(0));\r\n\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n\r\n        return balances[_owner];\r\n\r\n    }\r\n\r\n}\r\n\r\n \r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n\r\n    function burn(uint256 _value) public {\r\n\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        address burner = msg.sender;\r\n\r\n        balances[burner] = balances[burner].sub(_value);\r\n\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n\r\n        emit Burn(burner, _value);\r\n\r\n    }\r\n\r\n}\r\n\r\n \r\n\r\ncontract ERC20 is ERC20Basic {\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n \r\n\r\nlibrary SafeERC20 {\r\n\r\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n\r\n        assert(token.transfer(to, value));\r\n\r\n    }\r\n\r\n \r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n\r\n        assert(token.transferFrom(from, to, value));\r\n\r\n    }\r\n\r\n \r\n\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n\r\n        assert(token.approve(spender, value));\r\n\r\n   }\r\n\r\n}\r\n\r\n \r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n \r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\r\n        require(_to != address(0));\r\n\r\n        require(_value <= balances[_from]);\r\n\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n\r\n   function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n\r\n        return allowed[_owner][_spender];\r\n\r\n    }\r\n\r\n \r\n}\r\n\r\n \r\ncontract WMCToken is StandardToken, BurnableToken, Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n \r\n\r\n    string constant public symbol = \"WMC\";\r\n    string constant public name = \"World Masonic Coin\";\r\n    uint8 constant public decimals = 18;\r\n    \r\n    uint public totalSoldTokens = 0;\r\n\r\n    uint public constant TOTAL_SUPPLY = 33000000 * (1 ether / 1 wei);\r\n\r\n    uint public constant DEVELOPER_supply = 1650000 * (1 ether / 1 wei);\r\n\r\n    uint public constant MARKETING_supply =  1650000 * (1 ether / 1 wei);\r\n\r\n    uint public constant PROVISIONING_supply =  3300000 * (1 ether / 1 wei);\r\n\r\n    uint constant PSMTime = 1529798401; // Sunday, June 24, 2018 12:00:01 AM\r\n\r\n    uint public constant PSM_PRICE = 29;  // per 1 Ether\r\n\r\n    uint constant PSTime = 1532476801; // Wednesday, July 25, 2018 12:00:01 AM\r\n\r\n    uint public constant PS_PRICE = 27;    // per 1 Ether\r\n\r\n    uint constant PINTime = 1535241601; //Sunday, August 26, 2018 12:00:01 AM\r\n\r\n    uint public constant PIN_PRICE = 25;    // per 1 Ether\r\n\r\n    uint constant ICOTime = 1574640001; // Monday, November 25, 2019 12:00:01 AM\r\n\r\n    uint public constant ICO_PRICE = 23;    // per 1 Ether\r\n\r\n    uint public constant TOTAL_TOKENs_SUPPLY = 26400000 * (1 ether / 1 wei); //TOTAL_SUPPLY – DEVELOPERS_supply – MARKETING_supply – PROVISIONING_supply;\r\n\r\n \r\n    address beneficiary = 0xef18F44049b0685AbaA63fe3Db43A0bE262453CE;\r\n    address developer = 0x311F0e3Ec7876679A2C4F4BaC6102fCB03536984;\r\n    address marketing = 0xba48AD5BBFA3C66743C269550e468479710084Dd;\r\n    address provisioning = 0xa1905B711D31B0646359Cd6393D7293dC0a5DFDf;\r\n\r\n bool public enableTransfers = true;\r\n \r\n    /**\r\n    * @dev Send intial amounts for marketing development and provisioning\r\n    */\r\n    \r\n    function WMCToken() public {\r\n\r\n    balances[provisioning] = balances[provisioning].add(PROVISIONING_supply);\r\n    balances[developer] = balances[developer].add(DEVELOPER_supply);\r\n    balances[marketing] = balances[marketing].add(MARKETING_supply);\r\n    \r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n\r\n        require(enableTransfers);\r\n        super.transfer(_to, _value);\r\n\r\n    }\r\n\r\n \r\n   function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n        require(enableTransfers);\r\n        return super.approve(_spender,_value);\r\n\r\n    }\r\n\r\n \r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\r\n        require(enableTransfers);\r\n        super.transferFrom(_from, _to, _value);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev fallback function\r\n    */\r\n    \r\n    function () public payable {\r\n\r\n        require(enableTransfers);\r\n        uint256 amount = msg.value * getPrice();\r\n        require(totalSoldTokens + amount <= TOTAL_TOKENs_SUPPLY);\r\n        require(msg.value >= ((1 ether / 1 wei) / 100)); // min amount 0,01 ether\r\n        uint256 amount_marketing = msg.value * 5 /100;\r\n        uint256 amount_development = msg.value * 5 /100 ;\r\n        uint256 amount_masonic_project = msg.value * 90 /100;\r\n        beneficiary.transfer(amount_masonic_project);\r\n        developer.transfer(amount_development);\r\n        marketing.transfer(amount_marketing);\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n        totalSoldTokens+= amount;\r\n        emit Transfer(this, msg.sender, amount);                         \r\n\r\n    }\r\n\r\n    /**\r\n    * @dev get price depending on time\r\n    */\r\n     function getPrice()constant public returns(uint)\r\n\r\n    {\r\n\r\n        if (now < PSMTime) return PSM_PRICE;\r\n        else if (now < PSTime) return PS_PRICE;\r\n        else if (now < PINTime) return PIN_PRICE;\r\n        else if (now < ICOTime) return ICO_PRICE;\r\n        else return ICO_PRICE; // fallback\r\n\r\n    }\r\n    \r\n    /**\r\n    * @dev stop transfers\r\n    */ \r\n    \r\n    function DisableTransfer() public onlyOwner\r\n    {\r\n        enableTransfers = false;\r\n    }\r\n    \r\n    /**\r\n    * @dev resume transfers\r\n    */    \r\n    \r\n    function EnableTransfer() public onlyOwner\r\n    {\r\n        enableTransfers = true;\r\n    }\r\n    \r\n    /**\r\n    * @dev update beneficiarry adress only by contract owner\r\n    */    \r\n    \r\n        function UpdateBeneficiary(address _beneficiary) public onlyOwner returns(bool)\r\n    {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_TOKENs_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEVELOPER_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PIN_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PSM_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enableTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"EnableTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKETING_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"DisableTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROVISIONING_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"UpdateBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PS_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"WMCToken","CompilerVersion":"v0.4.24-nightly.2018.5.11+commit.43803b1a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5927fc3f89d087ff21d21d0a75a9b8459e41c341c84f07c4b81864e03fa6a3ab"}]}