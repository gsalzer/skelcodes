{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// BOMBS!\r\n\r\ncontract Bombs {\r\n  struct Bomb {\r\n    address owner;\r\n    uint8 bumps;\r\n    \r\n    uint8 chance;\r\n    uint8 increase;\r\n    \r\n    uint256 price;\r\n    uint256 last_price;\r\n    uint256 base_price;\r\n    uint256 pot;\r\n    \r\n    uint256 last_pot;\r\n    address last_winner;\r\n    uint8 last_bumps;\r\n    address made_explode;\r\n  }\r\n  mapping (uint8 => Bomb) public bombs;\r\n  uint256 start_price = 1000000000000000;\r\n\r\n  address public ceoAddress;\r\n  modifier onlyCEO() { require(msg.sender == ceoAddress); _; }\r\n\r\n  function Bombs() public {\r\n    ceoAddress = msg.sender;\r\n    bombs[0] = Bomb(msg.sender, 0, 3, 110, start_price, 0, start_price, 0, 0, address(0), 0, address(0));\r\n    bombs[1] = Bomb(msg.sender, 0, 80, 111, start_price, 0, start_price, 0, 0, address(0), 0, address(0));\r\n    bombs[2] = Bomb(msg.sender, 0, 50, 122, start_price, 0, start_price, 0, 0, address(0), 0, address(0));\r\n    bombs[3] = Bomb(msg.sender, 0, 25, 133, start_price, 0, start_price, 0, 0, address(0), 0, address(0));\r\n  }\r\n  \r\n  function getBomb(uint8 _id) public view returns (\r\n    uint8 id,\r\n    address owner,\r\n    uint8 bumps,\r\n    uint8 chance,\r\n    uint8 increase,\r\n    uint256 price,\r\n    uint256 last_price,\r\n    uint256 base_price,\r\n    uint256 pot,\r\n    uint256 last_pot,\r\n    address last_winner,\r\n    uint8 last_bumps,\r\n    address made_explode\r\n  ) {\r\n    id = _id;\r\n    owner = bombs[_id].owner;\r\n    bumps = bombs[_id].bumps;\r\n    chance = bombs[_id].chance;\r\n    increase = bombs[_id].increase;\r\n    price = bombs[_id].price;\r\n    last_price = bombs[_id].last_price;\r\n    base_price = bombs[_id].base_price;\r\n    pot = bombs[_id].pot;\r\n    last_pot = bombs[_id].last_pot;\r\n    last_winner = bombs[_id].last_winner;\r\n    last_bumps = bombs[_id].last_bumps;\r\n    made_explode = bombs[_id].made_explode;\r\n  }\r\n\r\n  function getRandom(uint _max) public view returns (uint random){\r\n    random = uint(keccak256(block.blockhash(block.number-1),msg.gas,tx.gasprice,block.timestamp))%_max + 1;\r\n  }\r\n\r\n  function buy(uint8 _bomb) public payable {\r\n    require(msg.sender != address(0));\r\n    Bomb storage bomb = bombs[_bomb];\r\n    require(msg.value >= bomb.price);\r\n\r\n    uint256 excess = SafeMath.sub(msg.value, bomb.price);\r\n    uint256 diff = SafeMath.sub(bomb.price, bomb.last_price);\r\n    \r\n    uint _random = uint(keccak256(block.blockhash(block.number-1),msg.gas,tx.gasprice,block.timestamp))%bomb.chance + 1;\r\n    \r\n    if(_random == 1){\r\n      bomb.owner.transfer(SafeMath.add(bomb.last_price, SafeMath.add(bomb.pot, SafeMath.mul(SafeMath.div(diff, 100), 50))));\r\n      ceoAddress.transfer(SafeMath.mul(SafeMath.div(diff, 100), 50));\r\n\r\n      bomb.last_winner = bomb.owner;\r\n      bomb.last_pot = bomb.pot;\r\n      bomb.last_bumps = bomb.bumps;\r\n      bomb.made_explode = msg.sender;\r\n      \r\n      bomb.price = bomb.base_price;\r\n      bomb.owner = ceoAddress;\r\n      bomb.pot = 0;\r\n      bomb.bumps = 0;\r\n      \r\n    } else {\r\n      bomb.owner.transfer(SafeMath.mul(SafeMath.div(diff, 100), 20));\r\n      bomb.owner.transfer(bomb.last_price);\r\n      if(bomb.made_explode == address(0)){\r\n        ceoAddress.transfer(SafeMath.mul(SafeMath.div(diff, 100), 30)); \r\n      } else {\r\n        ceoAddress.transfer(SafeMath.mul(SafeMath.div(diff, 100), 25));\r\n        bomb.made_explode.transfer(SafeMath.mul(SafeMath.div(diff, 100), 5));\r\n      }\r\n      bomb.pot += SafeMath.mul(SafeMath.div(diff, 100), 50);\r\n      bomb.owner = msg.sender;\r\n    \r\n      bomb.last_price = bomb.price;\r\n      bomb.price = SafeMath.mul(SafeMath.div(bomb.price, 100), bomb.increase);\r\n      bomb.bumps += 1;\r\n\r\n      msg.sender.transfer(excess);\r\n    }\r\n  }\r\n  \r\n  function addBomb(uint8 __id, uint256 __price, uint8 __chance, uint8 __increase) public onlyCEO {\r\n    bombs[__id] = Bomb(msg.sender, 0, __chance, __increase, __price, 0, __price, 0, 0, address(0), 0, address(0));\r\n  }\r\n\r\n  function payout() public onlyCEO {\r\n    ceoAddress.transfer(this.balance);\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bomb\",\"type\":\"uint8\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"getBomb\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint8\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"bumps\",\"type\":\"uint8\"},{\"name\":\"chance\",\"type\":\"uint8\"},{\"name\":\"increase\",\"type\":\"uint8\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"last_price\",\"type\":\"uint256\"},{\"name\":\"base_price\",\"type\":\"uint256\"},{\"name\":\"pot\",\"type\":\"uint256\"},{\"name\":\"last_pot\",\"type\":\"uint256\"},{\"name\":\"last_winner\",\"type\":\"address\"},{\"name\":\"last_bumps\",\"type\":\"uint8\"},{\"name\":\"made_explode\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"bombs\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"bumps\",\"type\":\"uint8\"},{\"name\":\"chance\",\"type\":\"uint8\"},{\"name\":\"increase\",\"type\":\"uint8\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"last_price\",\"type\":\"uint256\"},{\"name\":\"base_price\",\"type\":\"uint256\"},{\"name\":\"pot\",\"type\":\"uint256\"},{\"name\":\"last_pot\",\"type\":\"uint256\"},{\"name\":\"last_winner\",\"type\":\"address\"},{\"name\":\"last_bumps\",\"type\":\"uint8\"},{\"name\":\"made_explode\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"__id\",\"type\":\"uint8\"},{\"name\":\"__price\",\"type\":\"uint256\"},{\"name\":\"__chance\",\"type\":\"uint8\"},{\"name\":\"__increase\",\"type\":\"uint8\"}],\"name\":\"addBomb\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"getRandom\",\"outputs\":[{\"name\":\"random\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Bombs","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://57749f46722386cc226dc2b41af13cc33b17f14d74f731ae57510313ef119853"}]}