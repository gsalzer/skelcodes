{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// similar to ShrimpFarmer, with three changes:\r\n// 1. one third of your sperm die when you sell your cells\r\n// 2. the ownership of the devfee can transfer through sacrificing sperm\r\n//  a. the new requirement will be how many remaining sperm you have after the sacrifice\r\n//  b. you cannot sacrifice sperm if you are the spermlord\r\n// 3. the \"free\" 500 sperm cost 0.001 eth (in line with the mining fee)\r\n\r\n// bots should have a harder time, and whales can compete for the devfee\r\n\r\ncontract EtherSpermBank {\r\n\r\n    uint256 public CELLS_TO_MAKE_1_SPERM = 86400;\r\n    uint256 public STARTING_SPERM = 500;\r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    bool public initialized = false;\r\n    address public spermlordAddress;\r\n    uint256 public spermlordReq = 500000; // starts at 500k sperm\r\n    mapping (address => uint256) public ballSperm;\r\n    mapping (address => uint256) public claimedCells;\r\n    mapping (address => uint256) public lastEvent;\r\n    mapping (address => address) public referrals;\r\n    uint256 public marketCells;\r\n\r\n    function EtherSpermBank() public {\r\n        spermlordAddress = msg.sender;\r\n    }\r\n\r\n    function makeSperm(address ref) public {\r\n        require(initialized);\r\n\r\n        if (referrals[msg.sender] == 0 && referrals[msg.sender] != msg.sender) {\r\n            referrals[msg.sender] = ref;\r\n        }\r\n\r\n        uint256 cellsUsed = getMyCells();\r\n        uint256 newSperm = SafeMath.div(cellsUsed, CELLS_TO_MAKE_1_SPERM);\r\n        ballSperm[msg.sender] = SafeMath.add(ballSperm[msg.sender], newSperm);\r\n        claimedCells[msg.sender] = 0;\r\n        lastEvent[msg.sender] = now;\r\n        \r\n        // send referral cells\r\n        claimedCells[referrals[msg.sender]] = SafeMath.add(claimedCells[referrals[msg.sender]], SafeMath.div(cellsUsed, 5)); // +20%\r\n        \r\n        // boost market to prevent sprem hoarding\r\n        marketCells = SafeMath.add(marketCells, SafeMath.div(cellsUsed, 10)); // +10%\r\n    }\r\n\r\n    function sellCells() public {\r\n        require(initialized);\r\n\r\n        uint256 cellCount = getMyCells();\r\n        uint256 cellValue = calculateCellSell(cellCount);\r\n        uint256 fee = devFee(cellValue);\r\n        \r\n        // one third of your sperm die :'(\r\n        ballSperm[msg.sender] = SafeMath.mul(SafeMath.div(ballSperm[msg.sender], 3), 2); // =66%\r\n        claimedCells[msg.sender] = 0;\r\n        lastEvent[msg.sender] = now;\r\n\r\n        // put them on the market\r\n        marketCells = SafeMath.add(marketCells, cellCount);\r\n\r\n        // ALL HAIL THE SPERMLORD!\r\n        spermlordAddress.transfer(fee);\r\n        msg.sender.transfer(SafeMath.sub(cellValue, fee));\r\n    }\r\n\r\n    function buyCells() public payable {\r\n        require(initialized);\r\n\r\n        uint256 cellsBought = calculateCellBuy(msg.value, SafeMath.sub(this.balance, msg.value));\r\n        cellsBought = SafeMath.sub(cellsBought, devFee(cellsBought));\r\n        claimedCells[msg.sender] = SafeMath.add(claimedCells[msg.sender], cellsBought);\r\n\r\n        // ALL HAIL THE SPERMLORD!\r\n        spermlordAddress.transfer(devFee(msg.value));\r\n    }\r\n\r\n    // magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt, uint256 rs, uint256 bs) public view returns(uint256) {\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n\r\n    function calculateCellSell(uint256 cells) public view returns(uint256) {\r\n        return calculateTrade(cells, marketCells, this.balance);\r\n    }\r\n\r\n    function calculateCellBuy(uint256 eth, uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth, contractBalance, marketCells);\r\n    }\r\n\r\n    function calculateCellBuySimple(uint256 eth) public view returns(uint256) {\r\n        return calculateCellBuy(eth, this.balance);\r\n    }\r\n\r\n    function devFee(uint256 amount) public view returns(uint256) {\r\n        return SafeMath.div(SafeMath.mul(amount, 4), 100); // 4%\r\n    }\r\n\r\n    function seedMarket(uint256 cells) public payable {\r\n        require(marketCells == 0);\r\n\r\n        initialized = true;\r\n        marketCells = cells;\r\n    }\r\n\r\n    function getFreeSperm() public payable {\r\n        require(initialized);\r\n        require(msg.value == 0.001 ether); // similar to mining fee, prevents bots\r\n        spermlordAddress.transfer(msg.value); // the spermlord gets the entry fee ;)\r\n\r\n        require(ballSperm[msg.sender] == 0);\r\n        lastEvent[msg.sender] = now;\r\n        ballSperm[msg.sender] = STARTING_SPERM;\r\n    }\r\n\r\n    function getBalance() public view returns(uint256) {\r\n        return this.balance;\r\n    }\r\n\r\n    function getMySperm() public view returns(uint256) {\r\n        return ballSperm[msg.sender];\r\n    }\r\n\r\n    function becomeSpermlord() public {\r\n        require(initialized);\r\n        require(msg.sender != spermlordAddress);\r\n        require(ballSperm[msg.sender] >= spermlordReq);\r\n\r\n        ballSperm[msg.sender] = SafeMath.sub(ballSperm[msg.sender], spermlordReq);\r\n        spermlordReq = ballSperm[msg.sender]; // the requirement now becomes the balance at that time\r\n        spermlordAddress = msg.sender;\r\n    }\r\n\r\n    function getSpermlordReq() public view returns(uint256) {\r\n        return spermlordReq;\r\n    }\r\n\r\n    function getMyCells() public view returns(uint256) {\r\n        return SafeMath.add(claimedCells[msg.sender], getCellsSinceLastEvent(msg.sender));\r\n    }\r\n\r\n    function getCellsSinceLastEvent(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed = min(CELLS_TO_MAKE_1_SPERM, SafeMath.sub(now, lastEvent[adr]));\r\n        return SafeMath.mul(secondsPassed, ballSperm[adr]);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"makeSperm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFreeSperm\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spermlordReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_SPERM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getCellsSinceLastEvent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cells\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cells\",\"type\":\"uint256\"}],\"name\":\"calculateCellSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastEvent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyCells\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ballSperm\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellCells\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedCells\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSpermlordReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateCellBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateCellBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyCells\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMySperm\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spermlordAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketCells\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"becomeSpermlord\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CELLS_TO_MAKE_1_SPERM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"EtherSpermBank","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b7ee407e16039fe653a5434e2294eb01fb5c999c33cea7a3556e760387bfa534"}]}