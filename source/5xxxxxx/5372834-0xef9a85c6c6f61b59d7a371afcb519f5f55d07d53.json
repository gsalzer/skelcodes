{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.17;\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address internal owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n/**\r\n * @title ArtToujourICO\r\n * @dev ArtToujourCrowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them ARTZ tokens based\r\n * on a ARTZ token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  bool public mintingFinished = false;\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    //totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(msg.sender, _to, _amount);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n  function burnTokens(uint256 _unsoldTokens) onlyOwner public returns (bool) {\r\n    totalSupply = SafeMath.sub(totalSupply, _unsoldTokens);\r\n  }\r\n}\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n  bool public paused = false;\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n/**\r\n * @title ArtToujour Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale is Ownable, Pausable {\r\n  using SafeMath for uint256;\r\n  /**\r\n   *  @MintableToken token - Token Object\r\n   *  @address wallet - Wallet Address\r\n   *  @uint8 rate - Tokens per Ether\r\n   *  @uint256 weiRaised - Total funds raised in Ethers\r\n  */\r\n  MintableToken internal token;\r\n  address internal wallet;\r\n  uint256 public rate;\r\n  uint256 internal weiRaised;\r\n  /**\r\n   *  @uint256 preSaleStartTime - Pre-Sale Start Time\r\n   *  @uint256 preSaleEndTime - Pre-Sale End Time\r\n   *  @uint256 preICOStartTime - Pre-ICO Start Time\r\n   *  @uint256 preICOEndTime - Pre-ICO End Time\r\n   *  @uint256 ICOstartTime - ICO Start Time\r\n   *  @uint256 ICOEndTime - ICO End Time\r\n  */\r\n  uint256 public preSaleStartTime;\r\n  uint256 public preSaleEndTime;\r\n  uint256 public preICOStartTime;\r\n  uint256 public preICOEndTime;\r\n  uint256 public ICOstartTime;\r\n  uint256 public ICOEndTime;\r\n  \r\n  /**\r\n   *  @uint preSaleBonus - Pre-Sale Start Time\r\n   *  @uint preICOBonus - Pre-Sale End Time\r\n   *  @uint firstWeekBonus - Pre-ICO Start Time\r\n   *  @uint secondWeekBonus - Pre-ICO End Time\r\n   *  @uint thirdWeekBonus - ICO Start Time\r\n  */\r\n  uint internal preSaleBonus;\r\n  uint internal preICOBonus;\r\n  uint internal firstWeekBonus;\r\n  uint internal secondWeekBonus;\r\n  uint internal thirdWeekBonus;\r\n  \r\n  /**\r\n   *  @uint256 weekOne - WeekOne Time \r\n   *  @uint256 weekTwo - WeekTwo Time \r\n   *  @uint256 weekThree - WeekThree Time \r\n  */\r\n  uint256 internal weekOne;\r\n  uint256 internal weekTwo;\r\n  uint256 internal weekThree;\r\n  /**\r\n   *  @uint256 totalSupply - Total supply of tokens \r\n   *  @uint256 publicSupply - Total public Supply \r\n   *  @uint256 reserveSupply - Total Reserve Supply \r\n   *  @uint256 bountySupply - Total Bounty Supply\r\n   *  @uint256 teamSupply - Total Team Supply divided by 4\r\n   *  @uint256 advisorSupply - Total Advisor Supply divided by 4\r\n   *  @uint256 founderSupply - Total Founder Supply divided by 4\r\n   *  @uint256 preSaleSupply - Total PreSale Supply from Public Supply \r\n   *  @uint256 preICOSupply - Total PreICO Supply from Public Supply\r\n   *  @uint256 icoSupply - Total ICO Supply from Public Supply\r\n  */\r\n  uint256 public totalSupply = SafeMath.mul(700000000, 1 ether);\r\n  uint256 internal publicSupply = SafeMath.mul(SafeMath.div(totalSupply,100),50);\r\n  uint256 internal reserveSupply = SafeMath.mul(SafeMath.div(totalSupply,100),14);\r\n  uint256 internal teamSupply = SafeMath.div(SafeMath.mul(SafeMath.div(totalSupply,100),13),4);\r\n  uint256 internal advisorSupply = SafeMath.div(SafeMath.mul(SafeMath.div(totalSupply,100),3),4);\r\n  uint256 internal bountySupply = SafeMath.mul(SafeMath.div(totalSupply,100),5);\r\n  uint256 internal founderSupply = SafeMath.div(SafeMath.mul(SafeMath.div(totalSupply,100),15),4);\r\n  uint256 internal preSaleSupply = SafeMath.mul(SafeMath.div(totalSupply,100),2);\r\n  uint256 internal preICOSupply = SafeMath.mul(SafeMath.div(totalSupply,100),13);\r\n  uint256 internal icoSupply = SafeMath.mul(SafeMath.div(totalSupply,100),35);\r\n  /**\r\n   *  @uint256 advisorTimeLock - Advisor Timelock \r\n   *  @uint256 founderTeamTimeLock - Founder and Team Timelock \r\n  */\r\n  uint256 internal advisorTimeLock;\r\n  uint256 internal founderTeamTimeLock;\r\n  /**\r\n   *  @bool checkUnsoldTokens - \r\n   *  @bool upgradePreICOSupply - Boolean variable updates when the PreSale tokens added to PreICO supply\r\n   *  @bool upgradeICOSupply - Boolean variable updates when the PreICO tokens added to ICO supply\r\n   *  @bool grantAdvisorSupply -  Boolean variable updates when Team tokens minted\r\n   *  @bool grantFounderTeamSupply - Boolean variable updates when Team and Founder tokens minted\r\n  */\r\n  bool internal checkUnsoldTokens;\r\n  bool internal upgradePreICOSupply;\r\n  bool internal upgradeICOSupply;\r\n  bool internal grantAdvisorSupply;\r\n  bool internal grantFounderTeamSupply;\r\n  /**\r\n   *  @uint vestedFounderTeamCheck - Variable count for vesting\r\n   *  @uint vestedAdvisorCheck - Variable count for vesting \r\n  */\r\n  uint vestedFounderTeamCheck;\r\n  uint vestedAdvisorCheck;\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value Wei's paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  /**\r\n   * function Crowdsale - Parameterized Constructor\r\n   * @param _startTime - StartTime of Crowdsale\r\n   * @param _endTime - EndTime of Crowdsale\r\n   * @param _rate - Tokens against Ether\r\n   * @param _wallet - MultiSignature Wallet Address\r\n   */\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) internal {\r\n    \r\n    require(_wallet != 0x0);\r\n    token = createTokenContract();\r\n    preSaleStartTime = _startTime;\r\n    preSaleEndTime = 1525352400;\r\n    preICOStartTime = preSaleEndTime;\r\n    preICOEndTime = 1528030800;\r\n    ICOstartTime = preICOEndTime;\r\n    ICOEndTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    preSaleBonus = SafeMath.div(SafeMath.mul(rate,40),100);\r\n    preICOBonus = SafeMath.div(SafeMath.mul(rate,30),100);\r\n    firstWeekBonus = SafeMath.div(SafeMath.mul(rate,20),100);\r\n    secondWeekBonus = SafeMath.div(SafeMath.mul(rate,15),100);\r\n    thirdWeekBonus = SafeMath.div(SafeMath.mul(rate,10),100);\r\n \r\n    weekOne = SafeMath.add(ICOstartTime, 7 days);\r\n    weekTwo = SafeMath.add(weekOne, 7 days);\r\n    weekThree = SafeMath.add(weekTwo, 7 days);\r\n    advisorTimeLock = SafeMath.add(ICOEndTime, 180 days);\r\n    founderTeamTimeLock = SafeMath.add(ICOEndTime, 180 days);\r\n    checkUnsoldTokens = false;\r\n    upgradeICOSupply = false;\r\n    upgradePreICOSupply = false;\r\n    grantAdvisorSupply = false;\r\n    grantFounderTeamSupply = false;\r\n    vestedFounderTeamCheck = 0;\r\n    vestedAdvisorCheck = 0;\r\n    \r\n  }\r\n  /**\r\n   * function createTokenContract - Mintable Token Created\r\n   */\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n  \r\n  /**\r\n   * function Fallback - Receives Ethers\r\n   */\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n  /**\r\n   * function preSaleTokens - Calculate Tokens in PreSale\r\n   */\r\n  function preSaleTokens(uint256 weiAmount, uint256 tokens) internal returns (uint256) {\r\n        \r\n    require(preSaleSupply > 0);\r\n    tokens = SafeMath.add(tokens, weiAmount.mul(preSaleBonus));\r\n    tokens = SafeMath.add(tokens, weiAmount.mul(rate));\r\n    require(preSaleSupply >= tokens);\r\n    preSaleSupply = preSaleSupply.sub(tokens);        \r\n    return tokens;\r\n  }\r\n  /**\r\n    * function preICOTokens - Calculate Tokens in PreICO\r\n    */\r\n  function preICOTokens(uint256 weiAmount, uint256 tokens) internal returns (uint256) {\r\n        \r\n    require(preICOSupply > 0);\r\n    if (!upgradePreICOSupply) {\r\n      preICOSupply = SafeMath.add(preICOSupply,preSaleSupply);\r\n      upgradePreICOSupply = true;\r\n    }\r\n    tokens = SafeMath.add(tokens, weiAmount.mul(preICOBonus));\r\n    tokens = SafeMath.add(tokens, weiAmount.mul(rate));\r\n    \r\n    require(preICOSupply >= tokens);\r\n    \r\n    preICOSupply = preICOSupply.sub(tokens);        \r\n    return tokens;\r\n  }\r\n  /**\r\n   * function icoTokens - Calculate Tokens in ICO\r\n   */\r\n  \r\n  function icoTokens(uint256 weiAmount, uint256 tokens, uint256 accessTime) internal returns (uint256) {\r\n        \r\n    require(icoSupply > 0);\r\n    if (!upgradeICOSupply) {\r\n      icoSupply = SafeMath.add(icoSupply,preICOSupply);\r\n      upgradeICOSupply = true;\r\n    }\r\n    \r\n    if (accessTime <= weekOne) {\r\n      tokens = SafeMath.add(tokens, weiAmount.mul(firstWeekBonus));\r\n    } else if (accessTime <= weekTwo) {\r\n      tokens = SafeMath.add(tokens, weiAmount.mul(secondWeekBonus));\r\n    } else if ( accessTime < weekThree ) {\r\n      tokens = SafeMath.add(tokens, weiAmount.mul(thirdWeekBonus));\r\n    }\r\n    \r\n    tokens = SafeMath.add(tokens, weiAmount.mul(rate));\r\n    icoSupply = icoSupply.sub(tokens);        \r\n    return tokens;\r\n  }\r\n  /**\r\n  * function buyTokens - Collect Ethers and transfer tokens\r\n  */\r\n  function buyTokens(address beneficiary) whenNotPaused public payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n    uint256 accessTime = now;\r\n    uint256 tokens = 0;\r\n    uint256 weiAmount = msg.value;\r\n    require((weiAmount >= (100000000000000000)) && (weiAmount <= (25000000000000000000)));\r\n    if ((accessTime >= preSaleStartTime) && (accessTime < preSaleEndTime)) {\r\n      tokens = preSaleTokens(weiAmount, tokens);\r\n    } else if ((accessTime >= preICOStartTime) && (accessTime < preICOEndTime)) {\r\n      tokens = preICOTokens(weiAmount, tokens);\r\n    } else if ((accessTime >= ICOstartTime) && (accessTime <= ICOEndTime)) { \r\n      tokens = icoTokens(weiAmount, tokens, accessTime);\r\n    } else {\r\n      revert();\r\n    }\r\n    \r\n    publicSupply = publicSupply.sub(tokens);\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    forwardFunds();\r\n  }\r\n  /**\r\n   * function forwardFunds - Transfer funds to wallet\r\n   */\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n  /**\r\n   * function validPurchase - Checks the purchase is valid or not\r\n   * @return true - Purchase is withPeriod and nonZero\r\n   */\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= preSaleStartTime && now <= ICOEndTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n  /**\r\n   * function hasEnded - Checks the ICO ends or not\r\n   * @return true - ICO Ends\r\n   */\r\n  \r\n  function hasEnded() public constant returns (bool) {\r\n    return now > ICOEndTime;\r\n  }\r\n  /**\r\n   * function unsoldToken - Function used to transfer all \r\n   *               unsold public tokens to reserve supply\r\n   */\r\n  function unsoldToken() onlyOwner public {\r\n    require(hasEnded());\r\n    require(!checkUnsoldTokens);\r\n    \r\n    checkUnsoldTokens = true;\r\n    reserveSupply = SafeMath.add(reserveSupply, publicSupply);\r\n    publicSupply = 0;\r\n  }\r\n  /** \r\n   * function getTokenAddress - Get Token Address \r\n   */\r\n  function getTokenAddress() onlyOwner public returns (address) {\r\n    return token;\r\n  }\r\n  /** \r\n   * function getPublicSupply - Get Public Address \r\n   */\r\n  function getPublicSupply() onlyOwner public returns (uint256) {\r\n    return publicSupply;\r\n  }\r\n}\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Extension of Crowdsale with a max amount of funds raised\r\n */\r\n \r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n  uint256 public cap;\r\n  function CappedCrowdsale(uint256 _cap) {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n}\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n  bool isFinalized = false;\r\n  event Finalized();\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n    finalization();\r\n    Finalized();\r\n    isFinalized = true;\r\n  }\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n}\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n  enum State { Active, Refunding, Closed }\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n  function RefundVault(address _wallet) {\r\n    require(_wallet != 0x0);\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n/**\r\n * @title RefundableCrowdsale\r\n * @dev Extension of Crowdsale contract that adds a funding goal, and\r\n * the possibility of users getting a refund if goal is not met.\r\n * Uses a RefundVault as the crowdsale's vault.\r\n */\r\ncontract RefundableCrowdsale is FinalizableCrowdsale {\r\n  using SafeMath for uint256;\r\n  // minimum amount of funds to be raised in weis\r\n  uint256 public goal;\r\n  bool private _goalReached = false;\r\n  // refund vault used to hold funds while crowdsale is running\r\n  RefundVault private vault;\r\n  function RefundableCrowdsale(uint256 _goal) {\r\n    require(_goal > 0);\r\n    vault = new RefundVault(wallet);\r\n    goal = _goal;\r\n  }\r\n  // We're overriding the fund forwarding from Crowdsale.\r\n  // In addition to sending the funds, we want to call\r\n  // the RefundVault deposit function\r\n  function forwardFunds() internal {\r\n    vault.deposit.value(msg.value)(msg.sender);\r\n  }\r\n  // if crowdsale is unsuccessful, investors can claim refunds here\r\n  function claimRefund() public {\r\n    require(isFinalized);\r\n    require(!goalReached());\r\n    vault.refund(msg.sender);\r\n  }\r\n  // vault finalization task, called when owner calls finalize()\r\n  function finalization() internal {\r\n    if (goalReached()) {\r\n      vault.close();\r\n    } else {\r\n      vault.enableRefunds();\r\n    }\r\n    super.finalization();\r\n  }\r\n  function goalReached() public constant returns (bool) {\r\n    if (weiRaised >= goal) {\r\n      _goalReached = true;\r\n      return true;\r\n    } else if (_goalReached) {\r\n      return true;\r\n    } \r\n    else {\r\n      return false;\r\n    }\r\n  }\r\n  function updateGoalCheck() onlyOwner public {\r\n    _goalReached = true;\r\n  }\r\n  function getVaultAddress() onlyOwner public returns (address) {\r\n    return vault;\r\n  }\r\n}\r\n/**\r\n * @title ArtToujourToken \r\n */\r\n \r\ncontract ArtToujourToken is MintableToken {\r\n  /**\r\n   *  @string name - Token Name\r\n   *  @string symbol - Token Symbol\r\n   *  @uint8 decimals - Token Decimals\r\n   *  @uint256 _totalSupply - Token Total Supply\r\n  */\r\n  string public constant name = \"ARISTON\";\r\n  string public constant symbol = \"ARTZ\";\r\n  uint8 public constant decimals = 18;\r\n  uint256 public constant _totalSupply = 700000000 * 1 ether;\r\n  \r\n/** Constructor ArtToujourToken */\r\n  function ArtToujourToken() {\r\n    totalSupply = _totalSupply;\r\n  }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract CrowdsaleFunctions is Crowdsale {\r\n /** \r\n  * function bountyFunds - Transfer bounty tokens via AirDrop\r\n  * @param beneficiary address where owner wants to transfer tokens\r\n  * @param tokens value of token\r\n  */\r\n  function bountyFunds(address[] beneficiary, uint256[] tokens) onlyOwner public {\r\n    for (uint256 i = 0; i < beneficiary.length; i++) {\r\n      tokens[i] = SafeMath.mul(tokens[i],1 ether); \r\n      require(bountySupply >= tokens[i]);\r\n      bountySupply = SafeMath.sub(bountySupply,tokens[i]);\r\n      token.mint(beneficiary[i], tokens[i]);\r\n    }\r\n  }\r\n  /** \r\n   * function reserveFunds - Transfer reserve tokens to wallet for future platform usage\r\n   */\r\n  function reserveFunds() onlyOwner public { \r\n    require(reserveSupply > 0);\r\n    token.mint(0x3501C88dCEAC658014d6C4406E0D39e11a7e0340, reserveSupply);\r\n    reserveSupply = 0;\r\n  }\r\n  /** \r\n  * function grantAdvisorToken - Transfer advisor tokens to advisor wallet \r\n  */\r\n  function grantAdvisorToken() onlyOwner public {\r\n    require(!grantAdvisorSupply);\r\n    require(now > advisorTimeLock);\r\n    require(advisorSupply > 0);\r\n    \r\n    if (vestedAdvisorCheck < 4) {\r\n      vestedAdvisorCheck++;\r\n      advisorTimeLock = SafeMath.add(advisorTimeLock, 90 days);\r\n      token.mint(0x819acdf6731B51Dd7E68D5DfB6f602BBD8E62871, advisorSupply);\r\n  \r\n      if (vestedAdvisorCheck == 4) {\r\n        advisorSupply = 0;\r\n      }\r\n    }\r\n  }\r\n  /** \r\n   * function grantFounderTeamToken - Transfer advisor tokens to Founder and Team wallets \r\n   */\r\n  function grantFounderTeamToken() onlyOwner public {\r\n    require(!grantFounderTeamSupply);\r\n    require(now > founderTeamTimeLock);\r\n    require(founderSupply > 0);\r\n    \r\n    if (vestedFounderTeamCheck < 4) {\r\n       vestedFounderTeamCheck++;\r\n       founderTeamTimeLock = SafeMath.add(founderTeamTimeLock, 180 days);\r\n       token.mint(0x996f2959cE684B2cA221b9f0Da41899662220953, founderSupply);\r\n       token.mint(0x3c61fD8BDFf22C3Aa309f52793288CfB8A271325, teamSupply);\r\n       if (vestedFounderTeamCheck == 4) {\r\n          grantFounderTeamSupply = true;\r\n          founderSupply = 0;\r\n          teamSupply = 0;\r\n       }\r\n    }\r\n  }\r\n/** \r\n *.function transferToken - Used to transfer tokens to investors who pays us other than Ethers\r\n * @param beneficiary - Address where owner wants to transfer tokens\r\n * @param tokens -  Number of tokens\r\n */\r\n  function transferToken(address beneficiary, uint256 tokens) onlyOwner public {\r\n    require(publicSupply > 0);\r\n    tokens = SafeMath.mul(tokens,1 ether);\r\n    require(publicSupply >= tokens);\r\n    publicSupply = SafeMath.sub(publicSupply,tokens);\r\n    token.mint(beneficiary, tokens);\r\n  }\r\n}\r\ncontract ArtToujourICO is Crowdsale, CappedCrowdsale, RefundableCrowdsale, CrowdsaleFunctions {\r\n  \r\n    /** Constructor ArtToujourICO */\r\n    function ArtToujourICO(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _goal, uint256 _cap, address _wallet) \r\n    CappedCrowdsale(_cap)\r\n    FinalizableCrowdsale()\r\n    RefundableCrowdsale(_goal)   \r\n    Crowdsale(_startTime,_endTime,_rate,_wallet) \r\n    {\r\n        require(_goal < _cap);\r\n    }\r\n    \r\n    /** ArtToujourToken Contract */\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return new ArtToujourToken();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"preSaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateGoalCheck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unsoldToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"grantAdvisorToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getVaultAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reserveFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getPublicSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"bountyFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOstartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"grantFounderTeamToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_goal\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ArtToujourICO","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005ac37ad0000000000000000000000000000000000000000000000000000000005b4b45500000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000010f0cf064dd592000000000000000000000000000000000000000000000000007f0e10af47c1c7000000000000000000000000000001101edf3b192b93ac903edfdbdbc859085e187b1","Library":"","SwarmSource":"bzzr://6a9b4c05d51ea73ea47889f7930affe7cc138c63782b79cd616f30a0c8c98f11"}]}