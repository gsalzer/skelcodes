{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract EthereumHole {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    event NewLeader(\r\n        uint _timestamp,\r\n        address _address,\r\n        uint _newPot,\r\n        uint _newDeadline\r\n    );\r\n\r\n\r\n    event Winner(\r\n        uint _timestamp,\r\n        address _address,\r\n        uint _earnings,\r\n        uint _deadline\r\n    );\r\n\r\n\r\n    // Initial countdown duration at the start of each round\r\n    uint public constant BASE_DURATION = 600000 minutes;\r\n\r\n    // Amount by which the countdown duration decreases per ether in the pot\r\n    uint public constant DURATION_DECREASE_PER_ETHER = 5 minutes;\r\n\r\n    // Minimum countdown duration\r\n    uint public constant MINIMUM_DURATION = 5 minutes;\r\n    \r\n     // Minimum fraction of the pot required by a bidder to become the new leader\r\n    uint public constant min_bid = 10000000000000 wei;\r\n\r\n    // Current value of the pot\r\n    uint public pot;\r\n\r\n    // Address of the current leader\r\n    address public leader;\r\n\r\n    // Time at which the current round expires\r\n    uint public deadline;\r\n    \r\n    // Is the game over?\r\n    bool public gameIsOver;\r\n\r\n    function EthereumHole() public payable {\r\n        require(msg.value > 0);\r\n        gameIsOver = false;\r\n        pot = msg.value;\r\n        leader = msg.sender;\r\n        deadline = computeDeadline();\r\n        NewLeader(now, leader, pot, deadline);\r\n    }\r\n\r\n    function computeDeadline() internal view returns (uint) {\r\n        uint _durationDecrease = DURATION_DECREASE_PER_ETHER.mul(pot.div(1 ether));\r\n        uint _duration;\r\n        if (MINIMUM_DURATION.add(_durationDecrease) > BASE_DURATION) {\r\n            _duration = MINIMUM_DURATION;\r\n        } else {\r\n            _duration = BASE_DURATION.sub(_durationDecrease);\r\n        }\r\n        return now.add(_duration);\r\n    }\r\n\r\n    modifier endGameIfNeeded {\r\n        if (now > deadline && !gameIsOver) {\r\n            Winner(now, leader, pot, deadline);\r\n            leader.transfer(pot);\r\n            gameIsOver = true;\r\n        }\r\n        _;\r\n    }\r\n\r\n    function bid() public payable endGameIfNeeded {\r\n        if (msg.value > 0 && !gameIsOver) {\r\n            pot = pot.add(msg.value);\r\n            if (msg.value >= min_bid) {\r\n                leader = msg.sender;\r\n                deadline = computeDeadline();\r\n                NewLeader(now, leader, pot, deadline);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"min_bid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameIsOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DURATION_DECREASE_PER_ETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newDeadline\",\"type\":\"uint256\"}],\"name\":\"NewLeader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_earnings\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"Winner\",\"type\":\"event\"}]","ContractName":"EthereumHole","CompilerVersion":"v0.4.20-nightly.2018.2.13+commit.27ef9794","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3ba401dc01e2ad798359425e67b8e8a42f98d93e418bb2eb005fc82f62db89db"}]}