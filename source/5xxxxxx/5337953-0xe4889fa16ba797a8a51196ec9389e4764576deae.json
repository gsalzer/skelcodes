{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n/// @title BlockchainCuties Presale\r\ncontract BlockchainCutiesPresale is Pausable\r\n{\r\n    struct Purchase\r\n    {\r\n        address owner;\r\n        uint32 cutieKind;\r\n        uint128 price;\r\n    }\r\n    Purchase[] public purchases;\r\n\r\n    struct Cutie\r\n    {\r\n        uint128 price;\r\n        uint128 leftCount;\r\n        uint128 priceMul;\r\n        uint128 priceAdd;\r\n    }\r\n\r\n    mapping (uint32 => Cutie) public cutie;\r\n\r\n    event Bid(uint256 indexed purchaseId);\r\n\r\n    function addCutie(uint32 id, uint128 price, uint128 count, uint128 priceMul, uint128 priceAdd) public onlyOwner\r\n    {\r\n        cutie[id] = Cutie(price, count, priceMul, priceAdd);\r\n    }\r\n\r\n    function isAvailable(uint32 cutieKind) public view returns (bool)\r\n    {\r\n        return cutie[cutieKind].leftCount > 0;\r\n    }\r\n\r\n    function getPrice(uint32 cutieKind) public view returns (uint256 price, uint256 left)\r\n    {\r\n        price = cutie[cutieKind].price;\r\n        left = cutie[cutieKind].leftCount;\r\n    }\r\n\r\n    function bid(uint32 cutieKind) public payable whenNotPaused\r\n    {\r\n        Cutie storage p = cutie[cutieKind];\r\n        require(isAvailable(cutieKind));\r\n        require(p.price <= msg.value);\r\n\r\n        uint256 length = purchases.push(Purchase(msg.sender, cutieKind, uint128(msg.value)));\r\n\r\n        emit Bid(length - 1);\r\n\r\n        p.leftCount--;\r\n        p.price = uint128(uint256(p.price)*p.priceMul / 1000000000000000000 + p.priceAdd);\r\n    }\r\n\r\n    function purchasesCount() public view returns (uint256)\r\n    {\r\n        return purchases.length;\r\n    }\r\n\r\n    function destroyContract() public onlyOwner {\r\n        require(address(this).balance == 0);\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n    address party1address;\r\n    address party2address;\r\n    address party3address;\r\n    address party4address;\r\n    address party5address;\r\n\r\n    /// @dev Setup project owners\r\n    function setParties(address _party1, address _party2, address _party3, address _party4, address _party5) public onlyOwner\r\n    {\r\n        require(_party1 != address(0));\r\n        require(_party2 != address(0));\r\n        require(_party3 != address(0));\r\n        require(_party4 != address(0));\r\n        require(_party5 != address(0));\r\n\r\n        party1address = _party1;\r\n        party2address = _party2;\r\n        party3address = _party3;\r\n        party4address = _party4;\r\n        party5address = _party5;\r\n    }\r\n\r\n    /// @dev Reject all Ether\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n    /// @dev The balance transfer to project owners\r\n    function withdrawEthFromBalance() external\r\n    {\r\n        require(\r\n            msg.sender == party1address ||\r\n            msg.sender == party2address ||\r\n            msg.sender == party3address ||\r\n            msg.sender == party4address ||\r\n            msg.sender == party5address ||\r\n            msg.sender == owner);\r\n\r\n        require(party1address != 0);\r\n        require(party2address != 0);\r\n        require(party3address != 0);\r\n        require(party4address != 0);\r\n        require(party5address != 0);\r\n\r\n        uint256 total = address(this).balance;\r\n\r\n        party1address.transfer(total*105/1000);\r\n        party2address.transfer(total*105/1000);\r\n        party3address.transfer(total*140/1000);\r\n        party4address.transfer(total*140/1000);\r\n        party5address.transfer(total*510/1000);\r\n    }    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_party1\",\"type\":\"address\"},{\"name\":\"_party2\",\"type\":\"address\"},{\"name\":\"_party3\",\"type\":\"address\"},{\"name\":\"_party4\",\"type\":\"address\"},{\"name\":\"_party5\",\"type\":\"address\"}],\"name\":\"setParties\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cutieKind\",\"type\":\"uint32\"}],\"name\":\"isAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint32\"},{\"name\":\"price\",\"type\":\"uint128\"},{\"name\":\"count\",\"type\":\"uint128\"},{\"name\":\"priceMul\",\"type\":\"uint128\"},{\"name\":\"priceAdd\",\"type\":\"uint128\"}],\"name\":\"addCutie\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchasesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cutieKind\",\"type\":\"uint32\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEthFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchases\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"cutieKind\",\"type\":\"uint32\"},{\"name\":\"price\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"cutie\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint128\"},{\"name\":\"leftCount\",\"type\":\"uint128\"},{\"name\":\"priceMul\",\"type\":\"uint128\"},{\"name\":\"priceAdd\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cutieKind\",\"type\":\"uint32\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"left\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaseId\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BlockchainCutiesPresale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0ce60700b77f2bd8c6ae98c94c94ddf04f93f091993844a664782362570c4ad8"}]}