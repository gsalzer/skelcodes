{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n \r\n/*\r\n * Safe Math Smart Contract. \r\n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n */\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * ERC223 Receiving token Fallback Contract\r\n */\r\n\r\ncontract ERC223ReceivingContract { \r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint256 _value, bytes _data);\r\n}\r\n\r\n/**\r\n * ERC223 standard interface\r\n */\r\n\r\ncontract ERC223Interface {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool success);\r\n    function transfer(address to, uint256 value, bytes data) public returns (bool success);\r\n\tfunction allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\n/**\r\n * Implementation of the ERC223 standard token.\r\n */\r\n \r\ncontract ERC223Token is ERC223Interface {\r\n     using SafeMath for uint256;\r\n\r\n     mapping(address => uint256) balances; // List of user balances\r\n\t mapping (address => mapping (address => uint256)) internal allowed;\r\n\t\r\n\t\r\n\t\r\n\t string public name = \"COOPAY COIN TEST\";\r\n     string public symbol = \"COOTEST\";\r\n     uint8 public decimals = 18;\r\n     uint256 public totalSupply = 265200000 * (10**18);\r\n\t\r\n\t\r\n\t function ERC223Token()\r\n     {\r\n       balances[msg.sender] = totalSupply;\r\n     }\r\n  \r\n  \r\n\t  // Function to access name of token .\r\n\t  function name() constant returns (string _name) {\r\n\t\t  return name;\r\n\t  }\r\n\t  // Function to access symbol of token .\r\n\t  function symbol() constant returns (string _symbol) {\r\n\t\t  return symbol;\r\n\t  }\r\n\t  // Function to access decimals of token .\r\n\t  function decimals() constant returns (uint8 _decimals) {\r\n\t\t  return decimals;\r\n\t  }\r\n\t  // Function to access total supply of tokens .\r\n\t  function totalSupply() constant returns (uint256 _totalSupply) {\r\n\t\t  return totalSupply;\r\n\t  }\r\n  \r\n\t\r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallback` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function transfer(address _to, uint256 _value, bytes _data) returns (bool success) {\r\n        \r\n\t\trequire(_value > 0);\r\n\t\trequire(_to != 0x0);\r\n\t\trequire(balances[msg.sender] > 0);\r\n\t\t\r\n        uint256 codeLength;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(codeLength>0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      This function works the same with the previous one\r\n     *      but doesn't contain `_data` param.\r\n     *      Added due to backwards compatibility reasons.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n\t\r\n\t    require(_value > 0);\r\n\t\trequire(_to != 0x0);\r\n\t\trequire(balances[msg.sender] > 0);\r\n\t\t\r\n        uint256 codeLength;\r\n        bytes memory empty;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(codeLength>0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, empty);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value, empty);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n     require(_to != address(0));\r\n     require(_value <= balances[_from]);\r\n     require(_value <= allowed[_from][msg.sender]);\r\n     bytes memory empty;\r\n     balances[_from] = balances[_from].sub(_value);\r\n     balances[_to] = balances[_to].add(_value);\r\n     allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n     emit Transfer(_from, _to, _value,empty);\r\n     return true;\r\n   }\r\n\r\n   function approve(address _spender, uint256 _value) public returns (bool) {\r\n     allowed[msg.sender][_spender] = _value;\r\n     emit Approval(msg.sender, _spender, _value);\r\n     return true;\r\n   }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n     return allowed[_owner][_spender];\r\n   }\r\n\r\n    \r\n    /**\r\n     * @dev Returns balance of the `_owner`.\r\n     *\r\n     * @param _owner   The address whose balance will be returned.\r\n     * @return balance Balance of the `_owner`.\r\n     */\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ERC223Token","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9e793ae4bb526e4beba3222b0d52222d12771d560c9ea9a68b63e2d385d209e4"}]}