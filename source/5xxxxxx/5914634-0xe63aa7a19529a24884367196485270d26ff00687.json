{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n\r\n    function safeMul(uint256 a, uint256 b) pure internal returns (uint256) {\r\n        uint256 c = a * b;\r\n        judgement(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) pure internal returns (uint256) {\r\n        judgement(b > 0);\r\n        uint256 c = a / b;\r\n        judgement(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) pure internal returns (uint256) {\r\n        judgement(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b) pure internal returns (uint256) {\r\n        uint256 c = a + b;\r\n        judgement(c>=a && c>=b);\r\n        return c;\r\n    }\r\n    function safeMulWithPresent(uint256 a , uint256 b) pure internal returns (uint256){\r\n        uint256 c = safeDiv(safeMul(a,b),100);\r\n        judgement(b == (c*100)/a);\r\n        return c;\r\n    }\r\n    function judgement(bool assertion) pure internal {\r\n        if (!assertion) {\r\n            revert();\r\n        }\r\n    }\r\n}\r\ncontract BBZZXUCAuth{\r\n    address public owner;\r\n    constructor () public{\r\n        owner = msg.sender;\r\n    }\r\n    event LogOwnerChanged (address msgSender );\r\n\r\n    ///@notice check if the msgSender is owner\r\n    modifier onlyOwner{\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }//TODO need double check the authority checking\r\n\r\n    function setOwner (address newOwner) public onlyOwner returns (bool){\r\n        if (owner == msg.sender){\r\n            owner = newOwner;\r\n            emit LogOwnerChanged(msg.sender);\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n}\r\ncontract BBZZXUCStop is BBZZXUCAuth{\r\n    bool internal stopped = false;\r\n\r\n    modifier stoppable {\r\n        assert (!stopped);\r\n        _;\r\n    }\r\n\r\n    function _status() view public returns (bool){\r\n        return stopped;\r\n    }\r\n    function stop() public onlyOwner{\r\n        stopped = true;\r\n    }\r\n    function start() public onlyOwner{\r\n        stopped = false;\r\n    }\r\n\r\n}\r\ncontract Token is SafeMath {//TODO need review the oo\r\n    /*\r\n\t\tStandard ERC20 token\r\n\t*/\r\n    uint256 public totalSupply;                                 /// total amount of tokens\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) view public returns (uint256 remaining);\r\n\r\n    function push(address _to,uint256 amount) public returns (bool);\r\n    /*\r\n\t\tfunction _transfer(address to ,uint256 amount) public returns (bool);\r\n\t*/\r\n    function burn(uint256 amount) public returns (bool);\r\n\r\n    function mint(uint256 amount) public;\r\n\r\n    function frozenCheck(address _from , address _to) view private returns (bool);\r\n\r\n    function freezeAccount(address target , bool freeze) public;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn    (address indexed _owner , uint256 _value);\r\n    event Minted  (uint256 amount);\r\n}\r\ncontract StandardToken is Token ,BBZZXUCStop{\r\n\r\n    function transfer(address _to, uint256 _value) stoppable public returns (bool ind) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        require(frozenCheck(msg.sender,_to));\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] = safeSub(balances[msg.sender] , _value);\r\n            balances[_to]  = safeAdd(balances[_to],_value);\r\n            emit Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) stoppable public returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        require(frozenCheck(_from,_to));\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to]  = safeAdd(balances[_to],_value);\r\n            balances[_from] = safeSub(balances[_from] , _value);\r\n            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\r\n            emit Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) stoppable public returns (bool success) {\r\n        require(frozenCheck(_spender,msg.sender));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    function burn(uint256 amount) stoppable onlyOwner public returns (bool){\r\n        if(balances[msg.sender] > amount ){\r\n            balances[msg.sender] = safeSub(balances[msg.sender],amount);\r\n            totalSupply = safeSub(totalSupply,amount);\r\n            emit Burn(msg.sender,amount);\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    function push(address _to , uint256 amount) onlyOwner public returns (bool){         ///only run once at initialize\r\n        balances[_to] = safeAdd(balances[_to] ,amount);\r\n        return true;\r\n    }\r\n    function mint(uint256 amount) onlyOwner public{\r\n        totalSupply = safeAdd(totalSupply, amount);\r\n        emit Minted(amount);\r\n    }\r\n    function frozenCheck(address _from , address _to) view private returns (bool){\r\n        require(!frozenAccount[_from]);\r\n        require(!frozenAccount[_to]);\r\n        return true;\r\n    }\r\n    function freezeAccount(address target , bool freeze) onlyOwner public{\r\n        frozenAccount[target] = freeze;\r\n    }\r\n\r\n    mapping (address => uint256)                      private  balances;\r\n    mapping (address => mapping (address => uint256)) private  allowed;\r\n    mapping (address => bool)                         private  frozenAccount;    //Save frozen account\r\n\r\n}\r\ncontract BBZZXUCToken is StandardToken{\r\n\r\n    string public name = \"BBZZXUC\";                                   /// Set the full name of this contract\r\n    uint256 public decimals = 18;                                 /// Set the decimal\r\n    string public symbol = \"BBZZXUC\";                                 /// Set the symbol of this contract\r\n\r\n    constructor() public {                    /// Should have sth in this\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function () stoppable public {\r\n        revert();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_status\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ind\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"LogOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"}]","ContractName":"BBZZXUCToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ccfd9411399656d9be96c646bb831cf62dc68df44ee3fa958049a5f10ecaa926"}]}