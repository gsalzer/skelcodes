{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() constant public returns (uint256 tokenSupply);\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n  \r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n// ------------------------------------\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n  \r\n  mapping(address => uint) public balances;\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  \r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n\r\n  function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n \r\n  function finishMinting() public onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n  \r\n}\r\n\r\n\r\ncontract LICERIOToken is MintableToken {\r\n\r\n\taddress private wallet;\r\n\t\r\n\tuint256 public tokenSupply = 0;\r\n\tuint256 public bountySupply = 0;\r\n\tuint256 public totalSold = 0; \r\n\t \r\n\tfunction LICERIOToken() {\r\n\t\twallet = msg.sender;\r\n\t\tbountySupply = 10000000 * decimals();\r\n\t\ttokenSupply = 100000000 * decimals();\r\n\t}\r\n\t\r\n\tfunction totalSupply () constant returns (uint256 tokenSupply) {\r\n\t\treturn tokenSupply;\r\n\t}\r\n\t\r\n\tfunction name () constant returns (string result) {\r\n\t\treturn \"LICERIO TOKEN\";\r\n\t}\r\n\t\r\n\tfunction symbol () constant returns (string result) {\r\n\t\treturn \"LCR\";\r\n\t}\r\n\t\r\n\tfunction decimals () constant returns (uint result) {\r\n\t\tuint dec = (10**18);\r\n\t\treturn dec;\r\n\t}\r\n\t\r\n\t\r\n\tfunction TokensForSale () public returns (uint) {\r\n\t\treturn 70000000 * decimals() - totalSold;\r\n\t}\r\n\t\r\n\tfunction availableBountyCount() public returns (uint) {\r\n\t    return bountySupply;\r\n\t}\r\n\t\r\n\tfunction addTokenSupply(uint256 _amount) returns (uint256)  {\r\n\t    totalSold = totalSold.add(_amount);\r\n\t    return totalSold;\r\n\t}\r\n\t\r\n\tfunction subBountySupply(uint256 _amount) returns (uint256)  {\r\n\t    return bountySupply = bountySupply.sub(_amount);\r\n\t}\r\n\r\n}\r\n\r\ncontract ExchangeRate is Ownable {\r\n\r\n  event RateUpdated(uint timestamp, bytes32 symbol, uint rate);\r\n\r\n  mapping(bytes32 => uint) public rates;\r\n\r\n  function updateRate(string _symbol, uint _rate) public onlyOwner {\r\n    rates[keccak256(_symbol)] = _rate;\r\n    RateUpdated(now, keccak256(_symbol), _rate);\r\n  }\r\n\r\n  \r\n  function updateRates(uint[] data) public onlyOwner {\r\n    if (data.length % 2 > 0)\r\n      revert();\r\n    uint i = 0;\r\n    while (i < data.length / 2) {\r\n      bytes32 symbol = bytes32(data[i * 2]);\r\n      uint rate = data[i * 2 + 1];\r\n      rates[symbol] = rate;\r\n      RateUpdated(now, symbol, rate);\r\n      i++;\r\n    }\r\n  }\r\n\r\n  function getRate(string _symbol) public constant returns(uint) {\r\n    return rates[keccak256(_symbol)];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract TokenSale is Ownable {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    event TokenSold(address recipient, uint ether_amount, uint pay_amount, uint exchangerate);\r\n\tevent AuthorizedCreate(address recipient, uint pay_amount);\r\n\r\n    LICERIOToken public token = new LICERIOToken();\r\n    \r\n\tExchangeRate public exchangeRate;\r\n\t\r\n\taddress public multisigVault;\r\n    \r\n    mapping(address => uint) public balances;\r\n\r\n\tenum State { PREICO, ICO_FIRST, ICO_SECOND, STOPPED, CLOSED }\r\n\r\n\tState public currentState = State.STOPPED;\r\n\t\r\n    modifier salesRunning(){\r\n        require(currentState == State.PREICO \r\n\t\t\t|| currentState == State.ICO_FIRST\r\n\t\t\t|| currentState == State.ICO_SECOND);\r\n\t\t\t_;\r\n    }\r\n\t\r\n\tmodifier minAmount(){\r\n        require(msg.value >= 0.01 ether);\r\n        _;\r\n    }\r\n\t\r\n\t\r\n\tmodifier isSalesClose() {\r\n\t\trequire(currentState == State.CLOSED);\r\n\t\t_;\r\n\t}\r\n\t\r\n\t\r\n\tfunction setState(State _newState) public onlyOwner {\r\n\t\t\r\n\t\trequire(currentState != State.CLOSED);\r\n\t\tcurrentState = _newState;\r\n\t\t\t\t\r\n\t}\r\n\r\n\r\n\tfunction SendLCRTokens(address _address, uint256 _amount) public salesRunning onlyOwner returns (uint256) {\r\n\t\t\r\n\t    token.mint(_address, _amount);\r\n\t\treturn token.addTokenSupply(_amount);\r\n\r\n\t}\r\n\t\r\n\tfunction buyLCRTokens() public salesRunning minAmount payable {\r\n       \r\n          uint rate = exchangeRate.getRate(\"ETH\");\r\n    \t  uint tokens = rate.mul(msg.value).div(1 ether);\r\n\t\r\n          token.mint(msg.sender, tokens);\r\n\t\t  token.addTokenSupply(tokens);\r\n\t\t  \r\n          balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n\r\n          owner.transfer(msg.value);\r\n\r\n    }\r\n\t\r\n\r\n    function() external payable {\r\n      buyLCRTokens();\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SendLCRTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newState\",\"type\":\"uint8\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyLCRTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ether_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pay_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exchangerate\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_amount\",\"type\":\"uint256\"}],\"name\":\"AuthorizedCreate\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7559f0c76f7c8326746c1e2788ef66125080da4d103ed7a9bd2d66ecad753562"}]}