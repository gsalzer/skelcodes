{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to relinquish control of the contract.\r\n    */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n  * @title StockPortfolio\r\n  * @author aflesher\r\n  * @dev StockPortfolio is smart contract for keeping a record\r\n  * @dev stock purchases. Trades can more or less be validated\r\n  * @dev using the trade timestamp and comparing the data to\r\n  * @dev historical values.\r\n  */\r\ncontract StockPortfolio is Ownable {\r\n\r\n    struct Position {\r\n        uint32 quantity;\r\n        uint32 avgPrice;\r\n    }\r\n\r\n    mapping (bytes12 => Position) positions;\r\n    bytes12[] private holdings;\r\n    bytes6[] private markets;\r\n\r\n    event Bought(bytes6 market, bytes6 symbol, uint32 quantity, uint32 price, uint256 timestamp);\r\n    event Sold(bytes6 market, bytes6 symbol, uint32 quantity, uint32 price, int64 profits, uint256 timestamp);\r\n    event ForwardSplit(bytes6 market, bytes6 symbol, uint8 multiple, uint256 timestamp);\r\n    event ReverseSplit(bytes6 market, bytes6 symbol, uint8 divisor, uint256 timestamp);\r\n\r\n    // Profits have to be separated because of different curriences so\r\n    // separate them by market. Market profit to currency can be worked\r\n    // out by client\r\n    mapping (bytes6 => int) public profits;\r\n\r\n    constructor () public {\r\n        markets.push(0x6e7973650000); //nyse 0\r\n        markets.push(0x6e6173646171); //nasdaq 1\r\n        markets.push(0x747378000000); //tsx 2\r\n        markets.push(0x747378760000); //tsxv 3\r\n        markets.push(0x6f7463000000); //otc 4\r\n        markets.push(0x637365000000); //cse 5\r\n    }\r\n\r\n    function () public payable {}\r\n\r\n    /**\r\n     * @dev Adds to or creates new position\r\n     * @param _marketIndex The index of the market\r\n     * @param _symbol A stock symbol\r\n     * @param _quantity Quantity of shares to buy\r\n     * @param _price Price per share * 100 ($10.24 = 1024)\r\n     */\r\n    function buy\r\n    (\r\n        uint8 _marketIndex,\r\n        bytes6 _symbol,\r\n        uint32 _quantity,\r\n        uint32 _price\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        _buy(_marketIndex, _symbol, _quantity, _price);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds to or creates a series of positions\r\n     * @param _marketIndexes The indexes of the markets\r\n     * @param _symbols Stock symbols\r\n     * @param _quantities Quantities of shares to buy\r\n     * @param _prices Prices per share * 100 ($10.24 = 1024)\r\n     */\r\n    function bulkBuy\r\n    (\r\n        uint8[] _marketIndexes,\r\n        bytes6[] _symbols,\r\n        uint32[] _quantities,\r\n        uint32[] _prices\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint i = 0; i < _symbols.length; i++) {\r\n            _buy(_marketIndexes[i], _symbols[i], _quantities[i], _prices[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tracks a stock split\r\n     * @param _marketIndex The index of the market\r\n     * @param _symbol A stock symbol\r\n     * @param _multiple Number of new shares per share created\r\n     */\r\n    function split\r\n    (\r\n        uint8 _marketIndex,\r\n        bytes6 _symbol,\r\n        uint8 _multiple\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        bytes6 market = markets[_marketIndex];\r\n        bytes12 stockKey = getStockKey(market, _symbol);\r\n        Position storage position = positions[stockKey];\r\n        require(position.quantity > 0);\r\n        uint32 quantity = (_multiple * position.quantity) - position.quantity;\r\n        position.avgPrice = (position.quantity * position.avgPrice) / (position.quantity + quantity);\r\n        position.quantity += quantity;\r\n\r\n        emit ForwardSplit(market, _symbol, _multiple, now);\r\n    }\r\n\r\n    /**\r\n     * @dev Tracks a reverse stock split\r\n     * @param _marketIndex The index of the market\r\n     * @param _symbol A stock symbol\r\n     * @param _divisor Number of existing shares that will equal 1 new share\r\n     * @param _price The current stock price. Remainder shares will sold at this price\r\n     */\r\n    function reverseSplit\r\n    (\r\n        uint8 _marketIndex,\r\n        bytes6 _symbol,\r\n        uint8 _divisor,\r\n        uint32 _price\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        bytes6 market = markets[_marketIndex];\r\n        bytes12 stockKey = getStockKey(market, _symbol);\r\n        Position storage position = positions[stockKey];\r\n        require(position.quantity > 0);\r\n        uint32 quantity = position.quantity / _divisor;\r\n        uint32 extraQuantity = position.quantity - (quantity * _divisor);\r\n        if (extraQuantity > 0) {\r\n            _sell(_marketIndex, _symbol, extraQuantity, _price);\r\n        }\r\n        position.avgPrice = position.avgPrice * _divisor;\r\n        position.quantity = quantity;\r\n\r\n        emit ReverseSplit(market, _symbol, _divisor, now);\r\n    }\r\n\r\n    /**\r\n     * @dev Sells a position, adds a new trade and adds profits/lossses\r\n     * @param _symbol Stock symbol\r\n     * @param _quantity Quantity of shares to sale\r\n     * @param _price Price per share * 100 ($10.24 = 1024)\r\n     */\r\n    function sell\r\n    (\r\n        uint8 _marketIndex,\r\n        bytes6 _symbol,\r\n        uint32 _quantity,\r\n        uint32 _price\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        _sell(_marketIndex, _symbol, _quantity, _price);\r\n    }\r\n\r\n    /**\r\n     * @dev Sells positions, adds a new trades and adds profits/lossses\r\n     * @param _symbols Stock symbols\r\n     * @param _quantities Quantities of shares to sale\r\n     * @param _prices Prices per share * 100 ($10.24 = 1024)\r\n     */\r\n    function bulkSell\r\n    (\r\n        uint8[] _marketIndexes,\r\n        bytes6[] _symbols,\r\n        uint32[] _quantities,\r\n        uint32[] _prices\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint i = 0; i < _symbols.length; i++) {\r\n            _sell(_marketIndexes[i], _symbols[i], _quantities[i], _prices[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get the number of markets\r\n     * @return uint\r\n     */\r\n    function getMarketsCount() public view returns(uint) {\r\n        return markets.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Get a market at a given index\r\n     * @param _index The market index\r\n     * @return bytes6 market name\r\n     */\r\n    function getMarket(uint _index) public view returns(bytes6) {\r\n        return markets[_index];\r\n    }\r\n\r\n    /**\r\n     * @dev Get profits\r\n     * @param _market The market name\r\n     * @return int\r\n     */\r\n    function getProfits(bytes6 _market) public view returns(int) {\r\n        return profits[_market];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets a position\r\n     * @param _stockKey The stock key\r\n     * @return quantity Quantity of shares held\r\n     * @return avgPrice Average price paid for shares\r\n     */\r\n    function getPosition\r\n    (\r\n        bytes12 _stockKey\r\n    )\r\n        public\r\n        view\r\n        returns\r\n        (\r\n            uint32 quantity,\r\n            uint32 avgPrice\r\n        )\r\n    {\r\n        Position storage position = positions[_stockKey];\r\n        quantity = position.quantity;\r\n        avgPrice = position.avgPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets a postion at the given index\r\n     * @param _index The index of the holding\r\n     * @return market Market name\r\n     * @return stock Stock name\r\n     * @return quantity Quantity of shares held\r\n     * @return avgPrice Average price paid for shares\r\n     */  \r\n    function getPositionFromHolding\r\n    (\r\n        uint _index\r\n    )\r\n        public\r\n        view\r\n        returns\r\n        (\r\n            bytes6 market, \r\n            bytes6 symbol,\r\n            uint32 quantity,\r\n            uint32 avgPrice\r\n        )\r\n    {\r\n        bytes12 stockKey = holdings[_index];\r\n        (market, symbol) = recoverStockKey(stockKey);\r\n        Position storage position = positions[stockKey];\r\n        quantity = position.quantity;\r\n        avgPrice = position.avgPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the number of stocks being held\r\n     * @return uint\r\n     */\r\n    function getHoldingsCount() public view returns(uint) {\r\n        return holdings.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the stock key at the given index\r\n     * @return bytes32 The unique stock key\r\n     */\r\n    function getHolding(uint _index) public view returns(bytes12) {\r\n        return holdings[_index];\r\n    }\r\n\r\n    /**\r\n     * @dev Generates a unique key for a stock by combining the market and symbol\r\n     * @param _market Stock market\r\n     * @param _symbol Stock symbol\r\n     * @return key The key\r\n     */\r\n    function getStockKey(bytes6 _market, bytes6 _symbol) public pure returns(bytes12 key) {\r\n        bytes memory combined = new bytes(12);\r\n        for (uint i = 0; i < 6; i++) {\r\n            combined[i] = _market[i];\r\n        }\r\n        for (uint j = 0; j < 6; j++) {\r\n            combined[j + 6] = _symbol[j];\r\n        }\r\n        assembly {\r\n            key := mload(add(combined, 32))\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Splits a unique key for a stock and returns the market and symbol\r\n     * @param _key Unique stock key\r\n     * @return market Stock market\r\n     * @return symbol Stock symbol\r\n     */\r\n    function recoverStockKey(bytes12 _key) public pure returns(bytes6 market, bytes6 symbol) {\r\n        bytes memory _market = new bytes(6);\r\n        bytes memory _symbol = new bytes(6);\r\n        for (uint i = 0; i < 6; i++) {\r\n            _market[i] = _key[i];\r\n        }\r\n        for (uint j = 0; j < 6; j++) {\r\n            _symbol[j] = _key[j + 6];\r\n        }\r\n        assembly {\r\n            market := mload(add(_market, 32))\r\n            symbol := mload(add(_symbol, 32))\r\n        }\r\n    }\r\n\r\n    function addMarket(bytes6 _market) public onlyOwner {\r\n        markets.push(_market);\r\n    }\r\n\r\n    function _addHolding(bytes12 _stockKey) private {\r\n        holdings.push(_stockKey);\r\n    }\r\n\r\n    function _removeHolding(bytes12 _stockKey) private {\r\n        if (holdings.length == 0) {\r\n            return;\r\n        }\r\n        bool found = false;\r\n        for (uint i = 0; i < holdings.length; i++) {\r\n            if (found) {\r\n                holdings[i - 1] = holdings[i];\r\n            }\r\n\r\n            if (holdings[i] == _stockKey) {\r\n                found = true;\r\n            }\r\n        }\r\n        if (found) {\r\n            delete holdings[holdings.length - 1];\r\n            holdings.length--;\r\n        }\r\n    }\r\n\r\n    function _sell\r\n    (\r\n        uint8 _marketIndex,\r\n        bytes6 _symbol,\r\n        uint32 _quantity,\r\n        uint32 _price\r\n    )\r\n        private\r\n    {\r\n        bytes6 market = markets[_marketIndex];\r\n        bytes12 stockKey = getStockKey(market, _symbol);\r\n        Position storage position = positions[stockKey];\r\n        require(position.quantity >= _quantity);\r\n        int64 profit = int64(_quantity * _price) - int64(_quantity * position.avgPrice);\r\n        position.quantity -= _quantity;\r\n        if (position.quantity <= 0) {\r\n            _removeHolding(stockKey);\r\n            delete positions[stockKey];\r\n        }\r\n        profits[market] += profit;\r\n        emit Sold(market, _symbol, _quantity, _price, profit, now);\r\n    }\r\n\r\n    function _buy\r\n    (\r\n        uint8 _marketIndex,\r\n        bytes6 _symbol,\r\n        uint32 _quantity,\r\n        uint32 _price\r\n    )\r\n        private\r\n    {\r\n        bytes6 market = markets[_marketIndex];\r\n        bytes12 stockKey = getStockKey(market, _symbol);\r\n        Position storage position = positions[stockKey];\r\n        if (position.quantity == 0) {\r\n            _addHolding(stockKey);\r\n        }\r\n        position.avgPrice = ((position.quantity * position.avgPrice) + (_quantity * _price)) /\r\n            (position.quantity + _quantity);\r\n        position.quantity += _quantity;\r\n\r\n        emit Bought(market, _symbol, _quantity, _price, now);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_marketIndex\",\"type\":\"uint8\"},{\"name\":\"_symbol\",\"type\":\"bytes6\"},{\"name\":\"_divisor\",\"type\":\"uint8\"},{\"name\":\"_price\",\"type\":\"uint32\"}],\"name\":\"reverseSplit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPositionFromHolding\",\"outputs\":[{\"name\":\"market\",\"type\":\"bytes6\"},{\"name\":\"symbol\",\"type\":\"bytes6\"},{\"name\":\"quantity\",\"type\":\"uint32\"},{\"name\":\"avgPrice\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMarketsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_market\",\"type\":\"bytes6\"}],\"name\":\"getProfits\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_market\",\"type\":\"bytes6\"}],\"name\":\"addMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketIndex\",\"type\":\"uint8\"},{\"name\":\"_symbol\",\"type\":\"bytes6\"},{\"name\":\"_quantity\",\"type\":\"uint32\"},{\"name\":\"_price\",\"type\":\"uint32\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_market\",\"type\":\"bytes6\"},{\"name\":\"_symbol\",\"type\":\"bytes6\"}],\"name\":\"getStockKey\",\"outputs\":[{\"name\":\"key\",\"type\":\"bytes12\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketIndexes\",\"type\":\"uint8[]\"},{\"name\":\"_symbols\",\"type\":\"bytes6[]\"},{\"name\":\"_quantities\",\"type\":\"uint32[]\"},{\"name\":\"_prices\",\"type\":\"uint32[]\"}],\"name\":\"bulkBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stockKey\",\"type\":\"bytes12\"}],\"name\":\"getPosition\",\"outputs\":[{\"name\":\"quantity\",\"type\":\"uint32\"},{\"name\":\"avgPrice\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes6\"}],\"name\":\"profits\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHoldingsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getHolding\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes12\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketIndex\",\"type\":\"uint8\"},{\"name\":\"_symbol\",\"type\":\"bytes6\"},{\"name\":\"_multiple\",\"type\":\"uint8\"}],\"name\":\"split\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketIndexes\",\"type\":\"uint8[]\"},{\"name\":\"_symbols\",\"type\":\"bytes6[]\"},{\"name\":\"_quantities\",\"type\":\"uint32[]\"},{\"name\":\"_prices\",\"type\":\"uint32[]\"}],\"name\":\"bulkSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketIndex\",\"type\":\"uint8\"},{\"name\":\"_symbol\",\"type\":\"bytes6\"},{\"name\":\"_quantity\",\"type\":\"uint32\"},{\"name\":\"_price\",\"type\":\"uint32\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes12\"}],\"name\":\"recoverStockKey\",\"outputs\":[{\"name\":\"market\",\"type\":\"bytes6\"},{\"name\":\"symbol\",\"type\":\"bytes6\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes6\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"market\",\"type\":\"bytes6\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"bytes6\"},{\"indexed\":false,\"name\":\"quantity\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"market\",\"type\":\"bytes6\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"bytes6\"},{\"indexed\":false,\"name\":\"quantity\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"profits\",\"type\":\"int64\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"market\",\"type\":\"bytes6\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"bytes6\"},{\"indexed\":false,\"name\":\"multiple\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ForwardSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"market\",\"type\":\"bytes6\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"bytes6\"},{\"indexed\":false,\"name\":\"divisor\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReverseSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"StockPortfolio","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5294638a4712d3813a55e41bd1229b9043525250ecaf3d66c86c495be523b013"}]}