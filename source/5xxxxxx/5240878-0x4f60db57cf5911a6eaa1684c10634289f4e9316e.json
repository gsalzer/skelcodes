{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if(a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() { require(msg.sender == owner); _; }\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n        OwnershipTransferred(owner, newOwner);\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    bool public paused = false;\r\n\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    modifier whenNotPaused() { require(!paused); _; }\r\n    modifier whenPaused() { require(paused); _; }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function balanceOf(address who) public view returns(uint256);\r\n    function transfer(address to, uint256 value) public returns(bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns(bool);\r\n    function allowance(address owner, address spender) public view returns(uint256);\r\n    function approve(address spender, uint256 value) public returns(bool);\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function StandardToken(string _name, string _symbol, uint8 _decimals) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\r\n        require(_to.length == _value.length);\r\n\r\n        for(uint i = 0; i < _to.length; i++) {\r\n            transfer(_to[i], _value[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns(uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n\r\n        if(_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() { require(!mintingFinished); _; }\r\n    modifier notMint() { require(mintingFinished); _; }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function finishMinting() onlyOwner canMint public returns(bool) {\r\n        mintingFinished = true;\r\n\r\n        MintFinished();\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract CappedToken is MintableToken {\r\n    uint256 public cap;\r\n\r\n    function CappedToken(uint256 _cap) public {\r\n        require(_cap > 0);\r\n        cap = _cap;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\r\n        require(totalSupply.add(_amount) <= cap);\r\n\r\n        return super.mint(_to, _amount);\r\n    }\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        address burner = msg.sender;\r\n\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\n/*\r\n\r\nICO Gap\r\n\r\n    - Crowdsale goes in 4 steps:\r\n    - 1st step PreSale 0: the administrator can issue tokens; purchase and sale are closed; Max. tokens 5 000 000\r\n    - 2nd step PreSale 1: the administrator can not issue tokens; the sale is open; purchase is closed; Max. tokens 5 000 000 + 10 000 000\r\n    - The third step of PreSale 2: the administrator can not issue tokens; the sale is open; purchase is closed; Max. tokens 5 000 000 + 10 000 000 + 15 000 000\r\n    - 4th step ICO: administrator can not issue tokens; the sale is open; the purchase is open; Max. tokens 5 000 000 + 10 000 000 + 15 000 000 + 30 000 000\r\n\r\n    Addition:\r\n    - Total emissions are limited: 100,000,000 tokens\r\n    - at each step it is possible to change the price of the token\r\n    - the steps are not limited in time and the step change is made by the nextStep administrator\r\n    - funds are accumulated on a contract basis\r\n    - at any time closeCrowdsale can be called: the funds and management of the token are transferred to the beneficiary; the release of + 65% of tokens to the beneficiary; minting closes\r\n    - at any time, refundCrowdsale can be called: funds remain on the contract; withdraw becomes unavailable; there is an opportunity to get refund \r\n    - transfer of tokens before closeCrowdsale is unavailable\r\n    - you can buy no more than 500 000 tokens for 1 purse.\r\n*/\r\n\r\ncontract Token is CappedToken, BurnableToken {\r\n    function Token() CappedToken(100000000 * 1 ether) StandardToken(\"GAP Token\", \"GAP\", 18) public {\r\n        \r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) notMint public returns(bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n    \r\n    function multiTransfer(address[] _to, uint256[] _value) notMint public returns(bool) {\r\n        return super.multiTransfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) notMint public returns(bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function burnOwner(address _from, uint256 _value) onlyOwner canMint public {\r\n        require(_value <= balances[_from]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n\r\n        Burn(_from, _value);\r\n    }\r\n}\r\n\r\ncontract Crowdsale is Pausable {\r\n    using SafeMath for uint;\r\n\r\n    struct Step {\r\n        uint priceTokenWei;\r\n        uint tokensForSale;\r\n        uint tokensSold;\r\n        uint collectedWei;\r\n\r\n        bool purchase;\r\n        bool issue;\r\n        bool sale;\r\n    }\r\n\r\n    Token public token;\r\n    address public beneficiary = 0x4B97b2938844A775538eF0b75F08648C4BD6fFFA;\r\n\r\n    Step[] public steps;\r\n    uint8 public currentStep = 0;\r\n\r\n    bool public crowdsaleClosed = false;\r\n    bool public crowdsaleRefund = false;\r\n    uint public refundedWei;\r\n\r\n    mapping(address => uint256) public canSell;\r\n    mapping(address => uint256) public purchaseBalances; \r\n\r\n    event Purchase(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\r\n    event Sell(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\r\n    event Issue(address indexed holder, uint256 tokenAmount);\r\n    event Refund(address indexed holder, uint256 etherAmount);\r\n    event NextStep(uint8 step);\r\n    event CrowdsaleClose();\r\n    event CrowdsaleRefund();\r\n\r\n    function Crowdsale() public {\r\n        token = new Token();\r\n\r\n        steps.push(Step(1 ether / 1000, 5000000 * 1 ether, 0, 0, false, true, false));\r\n        steps.push(Step(1 ether / 1000, 10000000 * 1 ether, 0, 0, true, false, false));\r\n        steps.push(Step(1 ether / 500, 15000000 * 1 ether, 0, 0, true, false, false));\r\n        steps.push(Step(1 ether / 100, 30000000 * 1 ether, 0, 0, true, false, true));\r\n    }\r\n\r\n    function() payable public {\r\n        purchase();\r\n    }\r\n\r\n    function setTokenRate(uint _value) onlyOwner whenPaused public {\r\n        require(!crowdsaleClosed);\r\n        steps[currentStep].priceTokenWei = 1 ether / _value;\r\n    }\r\n    \r\n    function purchase() whenNotPaused payable public {\r\n        require(!crowdsaleClosed);\r\n        require(msg.value >= 0.001 ether);\r\n\r\n        Step memory step = steps[currentStep];\r\n\r\n        require(step.purchase);\r\n        require(step.tokensSold < step.tokensForSale);\r\n        require(token.balanceOf(msg.sender) < 500000 ether);\r\n\r\n        uint sum = msg.value;\r\n        uint amount = sum.mul(1 ether).div(step.priceTokenWei);\r\n        uint retSum = 0;\r\n        uint retAmount;\r\n        \r\n        if(step.tokensSold.add(amount) > step.tokensForSale) {\r\n            retAmount = step.tokensSold.add(amount).sub(step.tokensForSale);\r\n            retSum = retAmount.mul(step.priceTokenWei).div(1 ether);\r\n\r\n            amount = amount.sub(retAmount);\r\n            sum = sum.sub(retSum);\r\n        }\r\n\r\n        if(token.balanceOf(msg.sender).add(amount) > 500000 ether) {\r\n            retAmount = token.balanceOf(msg.sender).add(amount).sub(500000 ether);\r\n            retSum = retAmount.mul(step.priceTokenWei).div(1 ether);\r\n\r\n            amount = amount.sub(retAmount);\r\n            sum = sum.sub(retSum);\r\n        }\r\n\r\n        steps[currentStep].tokensSold = step.tokensSold.add(amount);\r\n        steps[currentStep].collectedWei = step.collectedWei.add(sum);\r\n        purchaseBalances[msg.sender] = purchaseBalances[msg.sender].add(sum);\r\n\r\n        token.mint(msg.sender, amount);\r\n\r\n        if(retSum > 0) {\r\n            msg.sender.transfer(retSum);\r\n        }\r\n\r\n        Purchase(msg.sender, amount, sum);\r\n    }\r\n\r\n    function issue(address _to, uint256 _value) onlyOwner whenNotPaused public {\r\n        require(!crowdsaleClosed);\r\n\r\n        Step memory step = steps[currentStep];\r\n        \r\n        require(step.issue);\r\n        require(step.tokensSold.add(_value) <= step.tokensForSale);\r\n\r\n        steps[currentStep].tokensSold = step.tokensSold.add(_value);\r\n        canSell[_to] = canSell[_to].add(_value).div(100).mul(20);\r\n\r\n        token.mint(_to, _value);\r\n\r\n        Issue(_to, _value);\r\n    }\r\n\r\n    function sell(uint256 _value) whenNotPaused public {\r\n        require(!crowdsaleClosed);\r\n\r\n        require(canSell[msg.sender] >= _value);\r\n        require(token.balanceOf(msg.sender) >= _value);\r\n\r\n        Step memory step = steps[currentStep];\r\n        \r\n        require(step.sale);\r\n\r\n        canSell[msg.sender] = canSell[msg.sender].sub(_value);\r\n        token.burnOwner(msg.sender, _value);\r\n\r\n        uint sum = _value.mul(step.priceTokenWei).div(1 ether);\r\n\r\n        msg.sender.transfer(sum);\r\n\r\n        Sell(msg.sender, _value, sum);\r\n    }\r\n    \r\n    function refund() public {\r\n        require(crowdsaleRefund);\r\n        require(purchaseBalances[msg.sender] > 0);\r\n\r\n        uint sum = purchaseBalances[msg.sender];\r\n\r\n        purchaseBalances[msg.sender] = 0;\r\n        refundedWei = refundedWei.add(sum);\r\n\r\n        msg.sender.transfer(sum);\r\n        \r\n        Refund(msg.sender, sum);\r\n    }\r\n\r\n    function nextStep() onlyOwner public {\r\n        require(!crowdsaleClosed);\r\n        require(steps.length - 1 > currentStep);\r\n        \r\n        currentStep += 1;\r\n\r\n        NextStep(currentStep);\r\n    }\r\n\r\n    function closeCrowdsale() onlyOwner public {\r\n        require(!crowdsaleClosed);\r\n        \r\n        beneficiary.transfer(this.balance);\r\n        token.mint(beneficiary, token.totalSupply().div(100).mul(65));\r\n        token.finishMinting();\r\n        token.transferOwnership(beneficiary);\r\n\r\n        crowdsaleClosed = true;\r\n\r\n        CrowdsaleClose();\r\n    }\r\n\r\n    function refundCrowdsale() onlyOwner public {\r\n        require(!crowdsaleClosed);\r\n\r\n        crowdsaleRefund = true;\r\n        crowdsaleClosed = true;\r\n\r\n        CrowdsaleRefund();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://863bb0d0064da61f6895a42e0cc7255bf78bbf2783f9fc3aed3c19da4a3ac58b"}]}