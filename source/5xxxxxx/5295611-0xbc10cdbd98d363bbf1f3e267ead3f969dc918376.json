{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\n\r\n\r\ncontract ERC223Interface {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) constant returns (uint);\r\n    function transfer(address to, uint value);\r\n    function transfer(address to, uint value, bytes data);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n}\r\n\r\n\r\n /**\r\n * @title Contract that will work with ERC223 tokens.\r\n */\r\n \r\ncontract ERC223ReceivingContract { \r\n/**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data);\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract ERC223Token is ERC223Interface {\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint) balances; // List of user balances.\r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallback` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function transfer(address _to, uint _value, bytes _data) {\r\n        // Standard function transfer similar to ERC20 transfer with no _data .\r\n        // Added due to backwards compatibility reasons .\r\n        uint codeLength;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(codeLength>0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n        Transfer(msg.sender, _to, _value, _data);\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      This function works the same with the previous one\r\n     *      but doesn't contain `_data` param.\r\n     *      Added due to backwards compatibility reasons.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     */\r\n    function transfer(address _to, uint _value) {\r\n        uint codeLength;\r\n        bytes memory empty;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(codeLength>0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, empty);\r\n        }\r\n        Transfer(msg.sender, _to, _value, empty);\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Returns balance of the `_owner`.\r\n     *\r\n     * @param _owner   The address whose balance will be returned.\r\n     * @return balance Balance of the `_owner`.\r\n     */\r\n    function balanceOf(address _owner) constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\ncontract PajCoin223 is ERC223Token {\r\n\r\n    string public constant name = \"PajCoin\";\r\n    bytes32 public constant symbol = \"PJC\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    function PajCoin223() public {\r\n        bytes memory empty;\r\n        totalSupply = 150000000e18;\r\n        balances[msg.sender] = totalSupply;\r\n        Transfer(0x0, msg.sender, totalSupply, empty);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Exchanger is ERC223ReceivingContract, Ownable {\r\n\r\n    uint public rate = 30*1000000000;\r\n    uint public fee = 100000*3e9;\r\n\r\n    PajCoin223 public token = PajCoin223(0x1a85180ce3012e7715b913dd585afdf1a10f3025);\r\n\r\n    // event DataEvent(string comment);\r\n    event DataEvent(uint value, string comment);\r\n    // event DataEvent(bytes32 value, string comment);\r\n    // event DataEvent(bool value, string comment);\r\n    // event DataEvent(address addr, string comment);\r\n\r\n    // структ с юзером и суммой, которую он переслал\r\n    struct Deal {\r\n        address user;\r\n        uint money;\r\n    }\r\n    // очередь \"забронированных\" переводов на покупку токенов\r\n    mapping(uint => Deal) ethSended;\r\n    mapping(uint => Deal) coinSended;\r\n\r\n    // Счетчик людей, \"забронировавших\" токены.\r\n    // \"Бронирование\" значит, что человек прислал деньги на покупку, но курс еще\r\n    // не установлен. Соответственно, перевод средств добавляется в очередь и при\r\n    // следующем обновлении курса будет обработан\r\n    uint ethSendedNumber = 0;\r\n    uint coinSendedNumber = 0;\r\n\r\n    modifier allDealsArePaid {\r\n        require(ethSendedNumber == 0);\r\n        require(coinSendedNumber == 0);\r\n        _;\r\n    }\r\n\r\n    event LogPriceUpdated(uint price);\r\n\r\n    function Exchanger() public payable {\r\n        updater = msg.sender;\r\n    }\r\n\r\n    function needUpdate() public view returns (bool) {\r\n        return ethSendedNumber + coinSendedNumber > 0;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev We use a single lock for the whole contract.\r\n     */\r\n    bool private reentrancy_lock = false;\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * @notice If you mark a function `nonReentrant`, you should also\r\n     * mark it `external`. Calling one nonReentrant function from\r\n     * another is not supported. Instead, you can implement a\r\n     * `private` function doing the actual work, and a `external`\r\n     * wrapper marked as `nonReentrant`.\r\n     */\r\n    modifier nonReentrant() {\r\n        require(!reentrancy_lock);\r\n        reentrancy_lock = true;\r\n        _;\r\n        reentrancy_lock = false;\r\n    }\r\n\r\n    /**\r\n     * @dev An account that commands to change a rate\r\n     */\r\n    address updater;\r\n\r\n    modifier onlyUpdater() {\r\n        require(msg.sender == updater);\r\n        _;\r\n    }\r\n\r\n    function setUpdater(address _updater) public onlyOwner() {\r\n        updater = _updater;\r\n    }\r\n\r\n    function setFee(uint _fee) public onlyOwner() {\r\n        fee = _fee;\r\n    }\r\n\r\n    function setToken(address addr) public onlyOwner {\r\n        token = PajCoin223(addr);\r\n    }\r\n\r\n    function getEth(uint amount) public onlyOwner allDealsArePaid {\r\n        owner.transfer(amount);\r\n    }\r\n\r\n    function getTokens(uint amount) public onlyOwner allDealsArePaid {\r\n        token.transfer(owner, amount);\r\n    }\r\n\r\n    function() public payable {\r\n        if (msg.sender != owner) {\r\n            require(fee <= msg.value);\r\n            DataEvent(msg.value, \"Someone sent ether: amount\");\r\n            ethSended[ethSendedNumber++] = Deal({user: msg.sender, money: msg.value});\r\n        }\r\n    }\r\n\r\n    function tokenFallback(address _from, uint _value, bytes _data) {\r\n        // DataEvent(msg.sender, \"from\");\r\n\r\n        require(msg.sender == address(token));\r\n        if (_from != owner) {\r\n            require(fee <= _value * 1e9 / rate);\r\n            DataEvent(_value, \"Someone sent coin: amount\");\r\n            coinSended[coinSendedNumber++] = Deal({user: _from, money: _value});\r\n        }\r\n    }\r\n\r\n    function updateRate(uint _rate) public onlyUpdater nonReentrant{\r\n\r\n        rate = _rate;\r\n        LogPriceUpdated(rate);\r\n\r\n        uint personalFee = fee / (ethSendedNumber + coinSendedNumber);\r\n        DataEvent(personalFee, \"Personal fee\");\r\n\r\n        proceedEtherDeals(personalFee);\r\n        proceedTokenDeals(personalFee);\r\n\r\n    }\r\n\r\n    function proceedEtherDeals(uint personalFee) internal {\r\n        for (uint8 i = 0; i < ethSendedNumber; i++) {\r\n            address user = ethSended[i].user;\r\n            DataEvent(ethSended[i].money, \"Someone sent ether: amount\");\r\n            DataEvent(personalFee, \"Fee: amount\");\r\n            uint money = ethSended[i].money - personalFee;\r\n\r\n            DataEvent(money, \"Discounted amount: amount\");\r\n            uint value = money * rate / 1e9;\r\n            DataEvent(value, \"Ether to tokens: amount\");\r\n            if (money < 0) {\r\n                // Скинуто эфира меньше, чем комиссия\r\n            } else if (token.balanceOf(this) < value) {\r\n                DataEvent(token.balanceOf(this), \"Not enough tokens: owner balance\");\r\n                // Вернуть деньги, если токенов не осталось\r\n                user.transfer(money);\r\n            } else {\r\n                token.transfer(user, value);\r\n                DataEvent(value, \"Tokens were sent to customer: amount\");\r\n            }\r\n        }\r\n        ethSendedNumber = 0;\r\n    }\r\n\r\n    function proceedTokenDeals(uint personalFee) internal {\r\n        for (uint8 j = 0; j < coinSendedNumber; j++) {\r\n            address user = coinSended[j].user;\r\n            uint coin = coinSended[j].money;\r\n\r\n            DataEvent(coin, \"Someone sent tokens: amount\");\r\n            DataEvent(coin * 1e9 / rate, \"Tokens to ether: amount\");\r\n            uint value = coin * 1e9 / rate - personalFee;\r\n            DataEvent(personalFee, \"Fee: amount\");\r\n            DataEvent(value, \"Tokens to discounted ether: amount\");\r\n\r\n            if (value < 0) {\r\n                // Скинуто токенов меньше, чем комиссия\r\n            } else if (this.balance < value) {\r\n                // Вернуть токены, если денег не осталось\r\n                DataEvent(this.balance, \"Not enough ether: contract balance\");\r\n\r\n                token.transfer(user, coin);\r\n            } else {\r\n                user.transfer(value);\r\n                DataEvent(value, \"Ether was sent to customer: amount\");\r\n            }\r\n        }\r\n        coinSendedNumber = 0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"needUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_updater\",\"type\":\"address\"}],\"name\":\"setUpdater\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"DataEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"LogPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Exchanger","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://09394336403c20c4507561fcc4f844229b7821dfc4ba8d21844b752dc05a6009"}]}