{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\ncontract AbstractRegistration {\r\n    //get registration contract\r\n    function getRegistration() public view returns(string, address, string, string, uint, string, string, address[5], uint[5]);\r\n}\r\n\r\ncontract BaseRegistration is AbstractRegistration{\r\n    address public owner;//address copyright Owner\r\n    string public songTitle; //title of song\r\n    string public hash; // has of song\r\n    string public digitalSignature; // Owner sign his work\r\n    string public professionalName; // name of artist;\r\n    string public duration; //duration of song\r\n    string dateOfPublish; //format MM/dd/yyyy\r\n    uint rtype;\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function BaseRegistration() public{\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    //get copyrightOwnerName\r\n    /*****\r\n        * @return address            The address of song owner\r\n        */\r\n    function getOwnerAddress() external constant returns (address){\r\n        return owner;\r\n    }\r\n    \r\n    //change owner of song registration\r\n    /****\r\n     * @param _owner                address                 The address of new owner\r\n     */\r\n    function changeOwnerAddress(address _owner) onlyOwner internal {\r\n        require(_owner != 0x0);\r\n        require(owner != _owner);\r\n        owner = _owner;\r\n    }\r\n    \r\n    /*****\r\n        * @return param1                address             The address of the song owner\r\n        * @return param2                string              The hash of song\r\n        * @return param3                string              The digital signatures\r\n        * @return param4                uint                The type of registration: 1 is song registration, 2 is work registration\r\n        * @return param5                string              The name of artist\r\n        * @return param6                address[5]          Array address of royalty partners\r\n        * @return param7                uint[5]             Array percent of royalty partners\r\n        */\r\n    function getRegistration() public view returns(string, address, string, string, uint, string, string, address[5], uint[5]){}\r\n}\r\n\r\ncontract SongRecordingRegistration is BaseRegistration{\r\n    uint constant MAX_ROYALTY = 5;\r\n    \r\n    uint totalPercent = 0; //total percent of song \r\n    uint countRoyaltyPartner; // current number of royalty partners\r\n    address addressDispute; // address dispute\r\n    address addrMultiSign; //address of multi signatures\r\n    \r\n    /*****\r\n        * @param percent                uint                Percent of royalty partners\r\n        * @param confirmed              bool                royalty partners confirmed or not confirmed\r\n        * @param exists                 bool                royalty partner already exists\r\n        */\r\n    struct RoyaltyPartner{\r\n        uint percent;\r\n        bool confirmed;\r\n        bool exists;\r\n    }\r\n    \r\n    mapping(uint => address) royaltyIndex; // index of royalty partner in array\r\n    mapping(address => RoyaltyPartner) royaltyPartners;\r\n    \r\n    //contructor MusicRegistration and upto 5 Royalty partners\r\n    /*****\r\n        * @param _hash                      string              The hash of song\r\n        * @param _digital                   string              The digital signatures\r\n        * @param _addrDispute               address             The address dispute\r\n        * @param _dateOfPublish             string              Date publish song registration\r\n        * @param _addrMultiSign             address             The address of multi signatures\r\n        * @param _professionalName          string              The name of artist\r\n        * @param _arrRoyaltyPercent         uint                Array of royalty partners percent\r\n        * @param _arrRoyaltyAddress         address             Array of royalty partners address\r\n        */\r\n    function  SongRecordingRegistration(\r\n        string _songTitle,\r\n        string _hash,\r\n        string _digital,\r\n        address _addrDispute,\r\n        string _dateOfPublish,\r\n        address _addrMultiSign,\r\n        string _professionalName,\r\n        string _duration,\r\n        uint[] _arrRoyaltyPercent,\r\n        address[] _arrRoyaltyAddress) public{\r\n        songTitle = _songTitle;\r\n        hash = _hash;\r\n        rtype = 1;\r\n        digitalSignature = _digital;\r\n        dateOfPublish = _dateOfPublish;\r\n        addrMultiSign = _addrMultiSign;\r\n        professionalName = _professionalName;\r\n        duration = _duration;\r\n        checkingDispute(_addrDispute, address(this));\r\n        assert(_arrRoyaltyAddress.length == _arrRoyaltyPercent.length);\r\n        assert(_arrRoyaltyPercent.length <= uint(MAX_ROYALTY));\r\n        for (uint i = 0; i < _arrRoyaltyAddress.length; i++){\r\n            require(_arrRoyaltyAddress[i] != owner);\r\n            require(totalPercent <= 100);\r\n            royaltyIndex[i] = _arrRoyaltyAddress[i];\r\n            royaltyPartners[_arrRoyaltyAddress[i]] = RoyaltyPartner(_arrRoyaltyPercent[i], false, true);\r\n            totalPercent += _arrRoyaltyPercent[i];\r\n            countRoyaltyPartner++;\r\n        }\r\n    }\r\n    \r\n    // get song registration\r\n    /*****\r\n        * @return param1                address             The address of the song owner\r\n        * @return param2                string              The hash of song\r\n        * @return param3                string              The digital signatures\r\n        * @return param4                uint                The type of registration: 1 is song registration, 2 is work registration\r\n        * @return param5                string              The name of artist\r\n        * @return param6                address[5]          Array address of royalty partners\r\n        * @return param7                uint[5]             Array percent of royalty partners\r\n        */\r\n    function getRegistration() public view returns(string _songTitle, address _owner, string _hash, string _digital, uint _type, string _professionalName, string _duration, address[5] _arrRoyaltyAddress, uint[5] _arrRoyaltyPercent){\r\n        _owner = owner;\r\n        _songTitle = songTitle;\r\n        _hash = hash;\r\n        _digital = digitalSignature;\r\n        _type = rtype;\r\n        _duration = duration;\r\n        _professionalName = professionalName;\r\n        for (uint i=0; i<5; i++){\r\n            _arrRoyaltyAddress[i] = royaltyIndex[i];\r\n            _arrRoyaltyPercent[i] = royaltyPartners[_arrRoyaltyAddress[i]].percent;\r\n        }\r\n        return (_songTitle, _owner, _hash, _digital, _type, _professionalName, _duration, _arrRoyaltyAddress, _arrRoyaltyPercent);\r\n    }\r\n    \r\n    //get percent of royalty partner\r\n    /*****\r\n     *@param _toRoyaltyPartner              address         The address of royalty partners \r\n     *@return param1                        uint            Percent of royalty partners\r\n     */\r\n    function getRoyaltyPercent(address _toRoyaltyPartner) public constant returns(uint) {\r\n        return royaltyPartners[_toRoyaltyPartner].percent;\r\n    }\r\n    \r\n    //check royalty partner exists\r\n    /*****\r\n     *@param _toRoyaltyPartner              address         The address of royalty partners \r\n     *@return param1                        bool            Royalty partners exists\r\n     */\r\n    function getRoyaltyExists(address _toRoyaltyPartner) public constant returns(bool){\r\n        return royaltyPartners[_toRoyaltyPartner].exists;\r\n    }\r\n    \r\n    //get total percent of song\r\n    /*****\r\n     *@return param1                        uint            Total percent of royalty partners\r\n     */\r\n    function getTotalPercent() external constant returns(uint){\r\n        return totalPercent;\r\n    }\r\n    \r\n    // get royalty partner\r\n    /***** \r\n     *@return param1                        address[5]              Array of royalty partners address\r\n     *@return param2                        uint[5]                 Array of royalty partner percent\r\n     */\r\n    function getRoyaltyPartners() public constant returns(address[5] _arrRoyaltyAddress, uint[5] _arrRoyaltyPercent){\r\n        for (uint i = 0; i < MAX_ROYALTY; i++){\r\n            _arrRoyaltyAddress[i] = royaltyIndex[i];\r\n            _arrRoyaltyPercent[i] = royaltyPartners[royaltyIndex[i]].percent;\r\n        }\r\n        return (_arrRoyaltyAddress, _arrRoyaltyPercent);\r\n    }\r\n    \r\n    //change percent of royalty partners\r\n    /*****\r\n     *@param _toRoyaltyPartner              address         The address of royalty partners\r\n     *@param _percent                       uint            The new percent of royalty partners\r\n     *@param _exists                        bool            Set royalty partners exists\r\n     */\r\n    function changeRoyaltyPercent(\r\n        address _toRoyaltyPartner, \r\n        uint _percent,\r\n        bool _exists) public{\r\n        require(msg.sender == addrMultiSign); // check sender call from address of multi sign\r\n        if(!_exists){\r\n            royaltyPartners[_toRoyaltyPartner] = RoyaltyPartner(_percent, false, true);\r\n            royaltyIndex[countRoyaltyPartner] = _toRoyaltyPartner;\r\n            totalPercent += _percent;\r\n            countRoyaltyPartner++;\r\n        }else{\r\n            totalPercent = totalPercent - getRoyaltyPercent(_toRoyaltyPartner) + _percent;\r\n            royaltyPartners[_toRoyaltyPartner].percent = _percent;\r\n        }\r\n    }\r\n    \r\n    //checking dispute if exists\r\n    /*****\r\n     *@param _addrDispute               address             The address of dispute\r\n     *@param _addrCurrent               address             The address of current\r\n     */\r\n    function checkingDispute(address _addrDispute, address _addrCurrent) public {\r\n        if(_addrDispute != address(0)){\r\n            addressDispute = _addrDispute;\r\n            SongRecordingRegistration musicReg = SongRecordingRegistration(_addrDispute);\r\n            assert(musicReg.getDispute() == address(0));\r\n            musicReg.setDispute(_addrCurrent);\r\n        }\r\n    }\r\n    \r\n    //set dispute of contract address\r\n    /*****\r\n     *@param _addrDispute              address         The address of dispute\r\n     */\r\n    function setDispute(address _addrDispute) public{\r\n        addressDispute = _addrDispute;\r\n    }\r\n    \r\n    //get dispute of contract address\r\n    /***** \r\n     *@return param1                    address            Address of dispute\r\n     */\r\n    function getDispute() public constant returns(address){\r\n        return addressDispute;\r\n    }\r\n}\r\n\r\ncontract WorkRegistration is BaseRegistration{\r\n    bool isTempRegistration = false; // work release\r\n    \r\n    /*****\r\n     *@param _hash                      string              The hash of work registration\r\n     *@param _digital                   string              The digital of signatures\r\n     *@param _dateOfPublish             string              Date publish work registration\r\n     *@param _isTempRegistration        bool                Work registration release or not\r\n     */\r\n    function WorkRegistration(\r\n        string _songTitle,\r\n        string _hash,\r\n        string _digital,\r\n        string _dateOfPublish,\r\n        bool _isTempRegistration) public{\r\n        songTitle = _songTitle;\r\n        hash = _hash;\r\n        rtype = 2;\r\n        digitalSignature = _digital;\r\n        isTempRegistration = _isTempRegistration;\r\n        dateOfPublish = _dateOfPublish;\r\n    }\r\n    \r\n    //get work registration\r\n    /*****\r\n        * @return param1                address             The address of the song owner\r\n        * @return param2                string              The hash of song\r\n        * @return param3                string              The digital signatures\r\n        * @return param4                uint                The type of registration: 1 is song registration, 2 is work registration\r\n        * @return param5                address[5]          Array address of royalty partners\r\n        * @return param6                uint[5]             Array percent of royalty partners\r\n        */\r\n    function getRegistration() public view returns(string _songTitle, address _owner, string _hash, string _digital, uint _type, string _professionalName, string, address[5], uint[5]){\r\n        _owner = owner;\r\n        _songTitle = songTitle;\r\n        _hash = hash;\r\n        _digital = digitalSignature;\r\n        _type = rtype;\r\n        _professionalName = \"\";\r\n    }\r\n    \r\n    //get composer\r\n    /*****\r\n     *@return _hash                     string              The hash of work registration\r\n     *@return _digital                  string              The digital of signatures\r\n     *@return _isTempRegistration       bool                Work registration release or not\r\n     */\r\n    function getComposer() external constant returns(\r\n        string _hash,\r\n        string _digital,\r\n        bool _isTempRegistration){\r\n        _hash = hash;\r\n        _digital = digitalSignature;\r\n        _isTempRegistration = isTempRegistration;\r\n    }\r\n    \r\n    //set temp registration\r\n    /*****\r\n     *@param _isTempRegistration            bool            Work registration release or not\r\n     */\r\n    function setTempRegistration(bool _isTempRegistration) onlyOwner public{\r\n        isTempRegistration = _isTempRegistration;\r\n    }\r\n}\r\n\r\ncontract Licensing {\r\n    //3 kind of licens status\r\n    enum licensedState { Pending, Expired , Licensed }\r\n    \r\n    // Default Expired date will be 30 days\r\n    //unit is second\r\n    uint constant ExpiryTime = 30*24*60*60; \r\n    \r\n    address  token; // address of buyer\r\n    address  buyAddress; // address of buyer\r\n    address  songAddress; // song contract address\r\n    string  territority;\r\n    string  right; // kind of right license\r\n    uint  period; // time of license. Unit is months\r\n    uint256 dateIssue; // start time will be the time we create contract.\r\n    bool  isCompleted; // licensing completed or not\r\n    uint price; // price of licensing\r\n    string hashOfLicense; //hash of licensing\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == buyAddress);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwnerOfSong(){\r\n        SongRecordingRegistration musicContract = SongRecordingRegistration(songAddress);\r\n        require(msg.sender == musicContract.getOwnerAddress());\r\n        _;\r\n    }\r\n    \r\n    /*****\r\n     *@param _token                         address                 The address of token\r\n     *@param addressOfSong                  address                 The address of song\r\n     *@param territorityOfLicense           string                  The territority of license\r\n     *@param rightOfLicense                 string                  The right of license\r\n     *@param periodOfLicense                uint                    The period of license\r\n     */\r\n    function Licensing(\r\n        address _token,\r\n        address addressOfSong, \r\n        string territorityOfLicense, \r\n        string rightOfLicense, \r\n        uint periodOfLicense,\r\n        string _hashOfLicense) public{\r\n        buyAddress = msg.sender;\r\n        songAddress = addressOfSong;\r\n        territority = territorityOfLicense;\r\n        right = rightOfLicense;\r\n        period = periodOfLicense;\r\n        hashOfLicense = _hashOfLicense;\r\n        isCompleted = false;\r\n        dateIssue = block.timestamp;\r\n        token = _token;\r\n    }\r\n\r\n    //get status of license - this is private function\r\n    /*****\r\n        * @return param1                licensedState             The state of license\r\n        */\r\n    function getStatus() constant private returns (licensedState){\r\n        if(isCompleted == true){\r\n            return licensedState.Licensed;\r\n        }else {\r\n            if(block.timestamp >  (dateIssue + ExpiryTime)){\r\n                return licensedState.Expired;\r\n            }else{\r\n                return licensedState.Pending;\r\n            }\r\n        }\r\n    }\r\n    \r\n    //get current license status, before\r\n    /*****\r\n        * @return param1                string             The state string of license\r\n        */\r\n    function getContractStatus() constant public returns (string){\r\n        licensedState currentState = getStatus();\r\n        if(currentState == licensedState.Pending){\r\n            return \"Pending\";\r\n        }else if(currentState == licensedState.Expired){\r\n            return \"Expired\";\r\n        }else {\r\n            return \"Licensed\";\r\n        }\r\n    }\r\n    \r\n    //Copyright Owner will update price of license when someone issue it,\r\n    // it must be completed in 30 days from issue date\r\n    /*****\r\n     *@param priceOfLicense             uint                The new price of license \r\n     */\r\n    function updatePrice(uint priceOfLicense) onlyOwnerOfSong public{\r\n        \r\n        //find song with address\r\n        assert(!isCompleted);\r\n        //validate song address by checking publishPerson\r\n        assert (priceOfLicense > 0);\r\n        assert (block.timestamp <  (dateIssue + ExpiryTime));\r\n        \r\n        //update license price\r\n        price = priceOfLicense;\r\n    }\r\n    \r\n    //get current contract address\r\n    /*****\r\n        * @return param1                address             The address of the contract\r\n        */\r\n    function getContractAddress() external constant returns (address){\r\n        return this;\r\n    }\r\n    \r\n    //get owner of address\r\n    /*****\r\n        * @return param1                address             The address of the owner\r\n        */\r\n    function getOwnerAddress() external constant returns(address){\r\n        return(buyAddress);\r\n    }\r\n    \r\n    //set update completed\r\n    /*****\r\n     *@param _isCompleted               bool                Set state of license to completed\r\n     */\r\n    function upgradeCompleted(bool _isCompleted) public{\r\n        require(_isCompleted);\r\n        require(price >0);\r\n        require(msg.sender == token);\r\n        isCompleted = _isCompleted;\r\n    }\r\n    \r\n    //check price of license\r\n    /*****\r\n     *@param _price                 uint256                 The price want to check \r\n     *@return param1                bool                    return true if _price > price of license\r\n     */\r\n    function checkPrice(uint256 _price) public constant returns(bool){\r\n        require(msg.sender == token);\r\n        return (_price >= price) ? true : false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"songTitle\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"professionalName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toRoyaltyPartner\",\"type\":\"address\"},{\"name\":\"_percent\",\"type\":\"uint256\"},{\"name\":\"_exists\",\"type\":\"bool\"}],\"name\":\"changeRoyaltyPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRegistration\",\"outputs\":[{\"name\":\"_songTitle\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_hash\",\"type\":\"string\"},{\"name\":\"_digital\",\"type\":\"string\"},{\"name\":\"_type\",\"type\":\"uint256\"},{\"name\":\"_professionalName\",\"type\":\"string\"},{\"name\":\"_duration\",\"type\":\"string\"},{\"name\":\"_arrRoyaltyAddress\",\"type\":\"address[5]\"},{\"name\":\"_arrRoyaltyPercent\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDispute\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"digitalSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_toRoyaltyPartner\",\"type\":\"address\"}],\"name\":\"getRoyaltyPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_toRoyaltyPartner\",\"type\":\"address\"}],\"name\":\"getRoyaltyExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrDispute\",\"type\":\"address\"}],\"name\":\"setDispute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrDispute\",\"type\":\"address\"},{\"name\":\"_addrCurrent\",\"type\":\"address\"}],\"name\":\"checkingDispute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRoyaltyPartners\",\"outputs\":[{\"name\":\"_arrRoyaltyAddress\",\"type\":\"address[5]\"},{\"name\":\"_arrRoyaltyPercent\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_songTitle\",\"type\":\"string\"},{\"name\":\"_hash\",\"type\":\"string\"},{\"name\":\"_digital\",\"type\":\"string\"},{\"name\":\"_addrDispute\",\"type\":\"address\"},{\"name\":\"_dateOfPublish\",\"type\":\"string\"},{\"name\":\"_addrMultiSign\",\"type\":\"address\"},{\"name\":\"_professionalName\",\"type\":\"string\"},{\"name\":\"_duration\",\"type\":\"string\"},{\"name\":\"_arrRoyaltyPercent\",\"type\":\"uint256[]\"},{\"name\":\"_arrRoyaltyAddress\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"SongRecordingRegistration","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000af7f69d98b6d81e281afe696bff737561572fcb200000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000022e58d83e8a880e4b887e8afad20287169c4816e2079c3a16e2077c3a06e2079c79429000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d614e74567a7664466f733758444a4a70676535664a647953746d4c5036597a6a645270774b79754638644367000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008430783363393331663965313233666233346432303038393639653830326365383631653966613066326465353437303238643438376434333235623062393038303036303164613465323230616466663663343961393132626161323736646539343633363630353832316561343534633965373739333034316538613233353031316300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a323031382d30322d3232000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017e98293e4b8bde5909b20285465726573612054656e6729000000000000000000000000000000000000000000000000000000000000000000000000000000000530333a323500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://e55b66b9f1f3620d0415101415d179b5872d18c8090e4de5e2667127f74c5826"}]}