{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n\r\n  function add(uint a, uint b)\r\n    internal\r\n    pure\r\n    returns (uint c)\r\n  {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n\r\n  function sub(uint a, uint b)\r\n    internal\r\n    pure\r\n    returns (uint c)\r\n  {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n\r\n  function mul(uint a, uint b)\r\n    internal\r\n    pure\r\n    returns (uint c)\r\n  {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n\r\n  function div(uint a, uint b)\r\n    internal\r\n    pure\r\n    returns (uint c)\r\n  {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ERC20Interface {\r\n\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n  function totalSupply() public constant returns (uint);\r\n  function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract Owned {\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function Owned()\r\n    public\r\n  {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner)\r\n    public\r\n    onlyOwner\r\n  {\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership()\r\n    public\r\n  {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n\r\n}\r\n\r\ncontract PopulStayToken is ERC20Interface, Owned {\r\n\r\n  using SafeMath for uint;\r\n\r\n  string public symbol;\r\n  string public  name;\r\n  uint8 public decimals;\r\n  uint public _totalSupply;\r\n\r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping(address => uint)) allowed;\r\n\r\n  function PopulStayToken()\r\n    public\r\n  {\r\n    symbol = \"PPS\";\r\n    name = \"PopulStay Token\";\r\n    decimals = 0;\r\n    _totalSupply = 5000000000;\r\n    balances[owner] = _totalSupply;\r\n    emit Transfer(address(0), owner, _totalSupply);\r\n  }\r\n\r\n  function totalSupply()\r\n    public\r\n    constant\r\n    returns (uint)\r\n  {\r\n    return _totalSupply  - balances[address(0)];\r\n  }\r\n\r\n  function balanceOf(address tokenOwner)\r\n    public\r\n    constant\r\n    returns (uint balance)\r\n  {\r\n    return balances[tokenOwner];\r\n  }\r\n\r\n\r\n  function transfer(address to, uint tokens)\r\n    public\r\n    returns (bool success)\r\n  {\r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(msg.sender, to, tokens);\r\n    return true;\r\n  }\r\n\r\n\r\n\r\n  function approve(address spender, uint tokens)\r\n    public\r\n    returns (bool success)\r\n  {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint tokens)\r\n    public\r\n    returns (bool success)\r\n  {\r\n    balances[from] = balances[from].sub(tokens);\r\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(from, to, tokens);\r\n    return true;\r\n  }\r\n\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Returns the amount of tokens approved by the owner that can be\r\n  // transferred to the spender's account\r\n  // ------------------------------------------------------------------------\r\n  function allowance(address tokenOwner, address spender)\r\n    public\r\n    constant\r\n    returns (uint remaining)\r\n  {\r\n    return allowed[tokenOwner][spender];\r\n  }\r\n\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n  // from the token owner's account. The `spender` contract function\r\n  // `receiveApproval(...)` is then executed\r\n  // ------------------------------------------------------------------------\r\n  //\"0x1439818dd11823c45fff01af0cd6c50934e27ac0\",180,\"0x14723a09acff6d2a60dcdf7aa4aff308fddc160c\",\"0x7465737400000000000000000000000000000000000000000000000000000000\",20,22,2\r\n  function approveAndCall(address spender, uint tokens, address _owneraddress, bytes32 _houseinfo, uint _from, uint _to ,uint _days)\r\n     public\r\n    returns (address _preorder)\r\n  {\r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    return HouseInfoListing(spender).preOrder(msg.sender,_owneraddress, _houseinfo, _from, _to,_days);\r\n  }\r\n\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Don't accept ETH\r\n  // ------------------------------------------------------------------------\r\n  function ()\r\n    public\r\n    payable\r\n  {\r\n    revert();\r\n  }\r\n\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Owner can transfer out any accidentally sent ERC20 tokens\r\n  // ------------------------------------------------------------------------\r\n  function transferAnyERC20Token(address tokenAddress, uint tokens)\r\n    public\r\n    onlyOwner\r\n    returns (bool success)\r\n  {\r\n    return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n  }\r\n\r\n}\r\n\r\ncontract HouseInfoListing{\r\n   address public tokenAddress;//tokenAddress used to pay \r\n   \r\n   bytes32[] private districtcode;//district code\r\n   address private contractowner;\r\n   \r\n   address public preOrderaddressfortest;\r\n   uint public transferPriceForTest;\r\n   \r\n   \r\n   function HouseInfoListing(address _tokenAddress)\r\n   payable\r\n   public{\r\n       tokenAddress   = _tokenAddress;\r\n       contractowner  = msg.sender; \r\n   }\r\n   \r\n   \r\n function setDistrictCode(bytes32 _districtcode) \r\n   public \r\n   returns(bool success)\r\n  {\r\n    if(msg.sender!= contractowner)\r\n    return false;\r\n    districtcode.push(_districtcode);\r\n    return true;\r\n  }\r\n   \r\n   function getDistrictCode() \r\n   public \r\n   view\r\n   returns(bytes32[] _districtcode)\r\n  {\r\n    return districtcode;\r\n  }\r\n   \r\n    \r\n    \r\n  struct HouseInfo {\r\n    string  roominfo;\r\n    uint    price;\r\n    uint    contractdatetime;\r\n    uint    state;//0 close , 1 open\r\n    address owner;\r\n  \r\n  }\r\n  \r\n  mapping ( address => bytes32[] ) private hostRoomList;//every house info has one uuid,find house info by host address\r\n                                                      \r\n  \r\n  \r\n  mapping ( bytes32 => HouseInfo ) private houseInfo;   //describ the house information\r\n  mapping ( bytes32 => bytes32[] ) private uuids;       //every house info has one uuid,find house info by districtcode\r\n                                                        //should add find house info by city street \r\n                                                        \r\n                                                        \r\n  //通过房屋信息uuid确定预定合约信息                                                        \r\n  mapping ( bytes32 => address[] ) private PreOrders;   \r\n                                                        //find preorders lists by house info uuid \r\n                                                        //find preOrder or order infomation from this connection \r\n  //通过房客address找到合约信息\r\n  mapping (address => address[]) private GuestOrders;   //find guest orders by guest address\r\n  \r\n  //通过房东address找到合约信息\r\n  mapping (address => address[]) private HouseOwnerOrders;//find house owner orders by house owner address\r\n  \r\n  \r\n  \r\n  function preOrder( address _guestaddress,address _hostaddress, bytes32 _houseinfo, uint _from, uint _to, uint _days)\r\n  payable\r\n  public\r\n  returns (address _contractaddress)\r\n  {\r\n      uint transferPrice = _days * houseInfo[_houseinfo].price;\r\n      transferPriceForTest = transferPrice;\r\n      PreOrder preorder = new PreOrder( tokenAddress , _hostaddress , _guestaddress , _houseinfo , _from , _to , _days , 0 ,transferPrice );\r\n      preOrderaddressfortest =preorder;\r\n         if(Token(tokenAddress).transferFrom(_guestaddress,preorder,transferPrice))//transfer token to contract address\r\n         {\r\n             \r\n            PreOrders[_houseinfo].push(preorder); \r\n            GuestOrders[_guestaddress].push(preorder);\r\n            HouseOwnerOrders[_hostaddress].push(preorder);\r\n            return address(preorder);\r\n             \r\n         }\r\n         else\r\n         {\r\n             //transfer token failure\r\n             return ;\r\n         }\r\n      \r\n      \r\n      return ;\r\n      \r\n  }\r\n  //\"test\",9,\"roominfo\",\"test\",\"0x3333322d30303332000000000000000000000000000000000000000000000000\"\r\n   function setHouseInfo(bytes32 _uuid,uint _price,string _roominfo,bytes32 _districtcode) \r\n   public \r\n   returns(bool success)\r\n  {\r\n    houseInfo[_uuid] = HouseInfo(\r\n      {\r\n        roominfo: _roominfo,\r\n        price   : _price,\r\n        contractdatetime:block.timestamp,\r\n        owner   : msg.sender,\r\n        state   : 1\r\n      });\r\n              \r\n    uuids[_districtcode].push(_uuid);\r\n    hostRoomList[msg.sender].push(_uuid);\r\n    return true;\r\n  }\r\n  \r\n  function getHostRoomLists(address _hostaddress)\r\n    view\r\n    public\r\n    returns(bytes32[] _hostRoomList)\r\n  {\r\n    return hostRoomList[_hostaddress];\r\n  }\r\n    \r\n    \r\n  function getGuestOrders(address _guestaddress)\r\n  view\r\n  public\r\n  returns (address[] _guestOrders)\r\n  {\r\n      return GuestOrders[_guestaddress];\r\n  }\r\n  \r\n  function getHostOrders(address _hostaddress)\r\n  view\r\n  public\r\n  returns (address[] _hostOrders)\r\n  {\r\n      return HouseOwnerOrders[_hostaddress];\r\n  }\r\n  \r\n  function getPreorders(bytes32 _houseinfo)\r\n  view\r\n  public\r\n  returns (address[] _preorders)\r\n  {\r\n      return PreOrders[_houseinfo];\r\n  }\r\n  \r\n  \r\n  \r\n  function getUUIDS(bytes32 _districtcode)\r\n    view\r\n    public\r\n    returns(bytes32[] _uuid)\r\n  {\r\n    return uuids[_districtcode];\r\n  }\r\n    \r\n  function getHouseInfo(bytes32 _uuid)\r\n    view\r\n    public\r\n    returns (uint _price, uint _contractdatetime, address _owner,uint _state,string _roominfo)\r\n  {\r\n    //check the contract list, the most important thing is that if state is 0, that means this house had been rented.\r\n    return (\r\n      houseInfo[_uuid].price,\r\n      houseInfo[_uuid].contractdatetime,\r\n      houseInfo[_uuid].owner,\r\n      houseInfo[_uuid].state,\r\n      houseInfo[_uuid].roominfo\r\n    );\r\n  }\r\n \r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract PreOrder{\r\n    address public tokenAddress;\r\n    address public owneraddress;\r\n    address public guestaddress;\r\n    bytes32 public houseinfo;\r\n    uint public from;\r\n    uint public to;\r\n    uint public rentDays;\r\n    uint public status;//0:preorder 1: success  -1: cancel\r\n    uint public price;\r\n    \r\n    \r\n    function PreOrder (\r\n                        address _tokenAddress, \r\n                        address _owneraddress,\r\n                        address _guestaddress,\r\n                        bytes32 _houseinfo,\r\n                        uint _from,\r\n                        uint _to,\r\n                        uint _days,\r\n                        uint _status,\r\n                        uint _price\r\n                    ) \r\n    payable public{\r\n        tokenAddress = _tokenAddress;\r\n        owneraddress = _owneraddress;\r\n        guestaddress = _guestaddress;\r\n        houseinfo    = _houseinfo;\r\n        from         = _from;\r\n        to           = _to;\r\n        rentDays     = _days;\r\n        status       = _status;\r\n        price        = _price;\r\n        \r\n    }\r\n    \r\n    function getPreorderInfo()\r\n    view\r\n    public\r\n    returns (\r\n                address _tokenAddress, \r\n                address _owneraddress,\r\n                address _guestaddress,\r\n                bytes32 _houseinfo,\r\n                uint _from,\r\n                uint _to,\r\n                uint _days,\r\n                uint _status,\r\n                uint _price\r\n            ) \r\n    {\r\n    //check the contract list, the most important thing is that if state is 0, that means this house had been rented.\r\n    return (\r\n        tokenAddress ,\r\n        owneraddress ,\r\n        guestaddress ,\r\n        houseinfo    ,\r\n        from         ,\r\n        to           ,\r\n        rentDays     ,\r\n        status       ,\r\n        price        \r\n    );\r\n    }\r\n    \r\n    \r\n    \r\n    function confirmOrder()\r\n    payable\r\n    public\r\n    returns(bool success)\r\n    {\r\n       if( msg.sender == guestaddress && status == 0)   \r\n       {\r\n            if(Token(tokenAddress).transfer(owneraddress,price))//transfer token to contract address\r\n         {\r\n             \r\n            status = 1;\r\n            return true;\r\n             \r\n         }\r\n         else\r\n         {\r\n             //transfer token failure\r\n             return false;\r\n         }\r\n           \r\n       }\r\n      //1 transfer token from contract address to guest address\r\n      //2 if step 1 successfully finished, update info of preOrder contract\r\n      //3 if step 1 successfully finished, remove order info from PreOrders lists\r\n      return true;\r\n   }\r\n    \r\n    bool private houseOwnerAgreeToCancel = false;\r\n    bool private guestAgreeToCancel      = false;\r\n//     function cancelOrder()\r\n//     public\r\n//     returns(bool success)\r\n//     {\r\n//       //both of house owner and guest should be agreed to cancel this contract then the Token in this contract can send back\r\n\r\n//       //1 transfer token from contract address to guest address\r\n//       //2 if step 1 successfully finished, update info of preOrder contract\r\n//       return true;\r\n//   }\r\n    \r\n    \r\n}\r\n\r\n\r\n\r\ncontract Token {\r\n\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n  function totalSupply() public constant returns (uint);\r\n  function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"_owneraddress\",\"type\":\"address\"},{\"name\":\"_houseinfo\",\"type\":\"bytes32\"},{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"},{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"_preorder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PopulStayToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bd44bd11ad55d02a47d4a0f1a1f14266b06a9dc52f83cfe30d9984b45f53164c"}]}