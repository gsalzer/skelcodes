{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * ether King contract\r\n **/\r\ncontract etherKing{\r\n    \r\n    \r\n    //contract owner\r\n    address private owner;\r\n    \r\n    uint256 private battleCount = 1;\r\n    \r\n    uint256 private price;\r\n    \r\n    address[] private countryOwners = new address[](6);\r\n    \r\n    uint256 private win = 6;\r\n    \r\n    \r\n    //history\r\n    uint256 private historyCount;\r\n    \r\n    mapping(uint256 => address) private winAddressHistory;\r\n    \r\n    mapping(uint256 => uint8) private winItemIdHistory;\r\n    \r\n    \r\n    \r\n    function etherKing(uint256 _price) public {\r\n        price = _price;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    \r\n    event BuyCountry(address indexed to, uint256 indexed countryId, uint256 indexed price);\r\n    \r\n    event Win(address indexed win, uint256 indexed reward, uint256 indexed winNum);\r\n    \r\n    \r\n    modifier onlyOwner(){\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n    \r\n    \r\n    \r\n    function withdrawAll () onlyOwner() public {\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n\r\n    function withdrawAmount (uint256 _amount) onlyOwner() public {\r\n        msg.sender.transfer(_amount);\r\n    }\r\n    \r\n    \r\n    \r\n    function battleCountOf() public view returns(uint256){\r\n        return battleCount;\r\n    }\r\n    \r\n    \r\n    function countryLengthOf()public view returns(uint256){\r\n        return countryOwners.length;\r\n    }\r\n    \r\n    \r\n    function winAddressOf() public view returns(address _address, uint256 winNum){\r\n        if(win >= 6){\r\n            winNum = win;\r\n            _address = address(0);\r\n        } else {\r\n            winNum = win;\r\n            _address = countryOwners[winNum];\r\n        }\r\n    }\r\n    \r\n    function countryOwnersOf() public view returns(address[]){\r\n        return countryOwners;\r\n    }\r\n    \r\n    \r\n    \r\n    function ownerOfCountryCount(address _owner) public view returns(uint256){\r\n        require(_owner != address(0));\r\n        uint256 count = 0;\r\n        for(uint256 i = 0; i < countryOwners.length; i++){\r\n            if(countryOwners[i] == _owner){\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n    \r\n\r\n    \r\n    function isBuyFull() public view returns(bool){\r\n        for(uint256 i = 0; i < countryOwners.length; i++){\r\n            if(countryOwners[i] == address(0)){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    \r\n    \r\n    function buyCountry(uint256 countryId) public payable{\r\n        require(msg.value >= price);\r\n        require(countryId < countryOwners.length);\r\n        require(countryOwners[countryId] == address(0));\r\n        require(!isContract(msg.sender));\r\n        require(msg.sender != address(0));\r\n        \r\n        countryOwners[countryId] = msg.sender;\r\n        \r\n        BuyCountry(msg.sender, countryId, msg.value);\r\n    }\r\n    \r\n    \r\n    function calculateWin() onlyOwner public {\r\n        require(isBuyFull());\r\n        \r\n        win = getRandom(uint128(battleCount), countryOwners.length);\r\n        \r\n        address winAddress = countryOwners[win];\r\n        \r\n        uint256 reward = 1 ether;\r\n        \r\n        if(reward > this.balance)\r\n        {\r\n            reward = this.balance;\r\n        }\r\n        \r\n        winAddress.transfer(reward);\r\n        \r\n        Win(winAddress, reward, win);\r\n        \r\n        //add History\r\n        addHistory(battleCount, winAddress, uint8(win));\r\n    }\r\n    \r\n        \r\n    function reset() onlyOwner public {\r\n        require(win < 6);\r\n        \r\n        win = 6;\r\n        \r\n        battleCount++;\r\n        \r\n        for(uint256 i = 0; i < countryOwners.length; i++){\r\n            delete countryOwners[i];\r\n        }\r\n    }\r\n    \r\n    \r\n    function getRandom(uint128 count, uint256 limit) private view returns(uint256){\r\n        uint lastblocknumberused = block.number - 1 ;\r\n    \tbytes32 lastblockhashused = block.blockhash(lastblocknumberused);\r\n    \tuint128 lastblockhashused_uint = uint128(lastblockhashused) + count;\r\n    \tuint256 hashymchasherton = sha(lastblockhashused_uint, lastblockhashused);\r\n    \t\r\n    \treturn hashymchasherton % limit;\r\n    }\r\n    \r\n\r\n    function sha(uint128 wager, bytes32 _lastblockhashused) private view returns(uint256)\r\n    { \r\n        return uint256(keccak256(block.difficulty, block.coinbase, now, _lastblockhashused, wager));  \r\n    }\r\n\r\n    \r\n    /* Util */\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) } // solium-disable-line\r\n        return size > 0;\r\n    }\r\n   \r\n    \r\n    \r\n    function historyCountOf() public view returns (uint256){\r\n        return historyCount;\r\n    }\r\n    \r\n    \r\n    function addressHistoryOf(uint256 _battleId) public view returns(address) {\r\n        address _address = winAddressHistory[_battleId];\r\n        return _address;\r\n    }\r\n    \r\n    \r\n    function itemHistoryOf(uint256 _battleId) public view returns(uint8){\r\n        uint8 _item = winItemIdHistory[_battleId];\r\n        return _item;\r\n    }\r\n    \r\n    \r\n    \r\n    function getHistory(uint256 minBattleId, uint256 maxBattleId) public view returns(address[] _addressArray, uint8[] _itemArray, uint256 _minBattleId){\r\n        require(minBattleId > 0);\r\n        require(maxBattleId <= historyCount);\r\n        \r\n        uint256 length = (maxBattleId - minBattleId) + 1;\r\n        _addressArray = new address[](length);\r\n        _itemArray = new uint8[](length);\r\n        _minBattleId = minBattleId;\r\n        \r\n        for(uint256 i = 0; i < length; i++){\r\n            _addressArray[i] = addressHistoryOf(minBattleId + i);\r\n            _itemArray[i] = itemHistoryOf(minBattleId + i);\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function addHistory(uint256 _battleId, address _win, uint8 _itemId) private {\r\n        require(addressHistoryOf(_battleId) == address(0));\r\n        \r\n        winAddressHistory[_battleId] = _win;\r\n        winItemIdHistory[_battleId] = _itemId;\r\n        historyCount++;\r\n    }\r\n    \r\n    \r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBuyFull\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"countryId\",\"type\":\"uint256\"}],\"name\":\"buyCountry\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"battleCountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"historyCountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"minBattleId\",\"type\":\"uint256\"},{\"name\":\"maxBattleId\",\"type\":\"uint256\"}],\"name\":\"getHistory\",\"outputs\":[{\"name\":\"_addressArray\",\"type\":\"address[]\"},{\"name\":\"_itemArray\",\"type\":\"uint8[]\"},{\"name\":\"_minBattleId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_battleId\",\"type\":\"uint256\"}],\"name\":\"addressHistoryOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"calculateWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ownerOfCountryCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_battleId\",\"type\":\"uint256\"}],\"name\":\"itemHistoryOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winAddressOf\",\"outputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"winNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countryOwnersOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countryLengthOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"countryId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BuyCountry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"win\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"winNum\",\"type\":\"uint256\"}],\"name\":\"Win\",\"type\":\"event\"}]","ContractName":"etherKing","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000002c68af0bb140000","Library":"","SwarmSource":"bzzr://04e0efed218c0de53949d4791a48ea888c743bbfcc030c87e27ae182d5fc028f"}]}