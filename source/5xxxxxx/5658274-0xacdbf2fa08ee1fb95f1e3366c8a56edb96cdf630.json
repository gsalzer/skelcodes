{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n// If your investment is less than 300 ETHs. Send ETH here, this contract will\r\n// transfer VNETs to you automatically. And I just make a small profit.\r\n//\r\n// And you can get more details via etherscan.io - \"Read Contract\"\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Rescue compatible ERC20Basic Token\r\n     *\r\n     * @param _token ERC20Basic The address of the token contract\r\n     */\r\n    function rescueTokens(ERC20Basic _token) external onlyOwner {\r\n        uint256 balance = _token.balanceOf(this);\r\n        assert(_token.transfer(owner, balance));\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw Ether\r\n     */\r\n    function withdrawEther() external onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Sell Tokens\r\n */\r\ncontract SellTokens is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    ERC20Basic public token;\r\n\r\n    uint256 decimalDiff;\r\n    uint256 public rate;\r\n    string public description;\r\n    string public telegram;\r\n\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor(ERC20Basic _token, uint256 _tokenDecimals, uint256 _rate, string _description, string _telegram) public {\r\n        uint256 etherDecimals = 18;\r\n\r\n        token = _token;\r\n        decimalDiff = etherDecimals.sub(_tokenDecimals);\r\n        rate = _rate;\r\n        description = _description;\r\n        telegram = _telegram;\r\n    }\r\n\r\n    /**\r\n     * @dev receive ETH and send tokens\r\n     */\r\n    function () public payable {\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokenAmount = weiAmount.mul(rate).div(10 ** decimalDiff);\r\n        \r\n        require(tokenAmount > 0);\r\n        \r\n        assert(token.transfer(msg.sender, tokenAmount));\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Set Rate\r\n     * \r\n     * @param _rate uint256\r\n     */\r\n    function setRate(uint256 _rate) external onlyOwner returns (bool) {\r\n        rate = _rate;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set Description\r\n     * \r\n     * @param _description string\r\n     */\r\n    function setDescription(string _description) external onlyOwner returns (bool) {\r\n        description = _description;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set Telegram\r\n     * \r\n     * @param _telegram string\r\n     */\r\n    function setTelegram(string _telegram) external onlyOwner returns (bool) {\r\n        telegram = _telegram;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"telegram\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"setDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_telegram\",\"type\":\"string\"}],\"name\":\"setTelegram\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenDecimals\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_telegram\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SellTokens","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003f13a8039d33fbf19467183e3b4249e7a4c212f50000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000002e63000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000008c496620796f757220696e766573746d656e74206973206c657373207468616e2033303020455448732e2053656e642045544820686572652c207468697320636f6e74726163742077696c6c207472616e7366657220564e45547320746f20796f75206175746f6d61746963616c6c792e2049206a757374206d616b65206120736d616c6c2070726f6669742e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001968747470733a2f2f742e6d652f4361726c736f6e54796c657200000000000000","Library":"","SwarmSource":"bzzr://833717327b0a49a4f1aeb7282dae99b8f36572f6bb74dfea08da529da7a13ca2"}]}