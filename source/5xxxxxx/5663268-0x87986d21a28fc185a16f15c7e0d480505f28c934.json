{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: contracts/interfaces/ContractManagerInterface.sol\r\n\r\n/**\r\n * @title Contract Manager Interface\r\n * @author Bram Hoven\r\n * @notice Interface for communicating with the contract manager\r\n */\r\ninterface ContractManagerInterface {\r\n  /**\r\n   * @notice Triggered when contract is added\r\n   * @param _address Address of the new contract\r\n   * @param _contractName Name of the new contract\r\n   */\r\n  event ContractAdded(address indexed _address, string _contractName);\r\n\r\n  /**\r\n   * @notice Triggered when contract is removed\r\n   * @param _contractName Name of the contract that is removed\r\n   */\r\n  event ContractRemoved(string _contractName);\r\n\r\n  /**\r\n   * @notice Triggered when contract is updated\r\n   * @param _oldAddress Address where the contract used to be\r\n   * @param _newAddress Address where the new contract is deployed\r\n   * @param _contractName Name of the contract that has been updated\r\n   */\r\n  event ContractUpdated(address indexed _oldAddress, address indexed _newAddress, string _contractName);\r\n\r\n  /**\r\n   * @notice Triggered when authorization status changed\r\n   * @param _address Address who will gain or lose authorization to _contractName\r\n   * @param _authorized Boolean whether or not the address is authorized\r\n   * @param _contractName Name of the contract\r\n   */\r\n  event AuthorizationChanged(address indexed _address, bool _authorized, string _contractName);\r\n\r\n  /**\r\n   * @notice Check whether the accessor is authorized to access that contract\r\n   * @param _contractName Name of the contract that is being accessed\r\n   * @param _accessor Address who wants to access that contract\r\n   */\r\n  function authorize(string _contractName, address _accessor) external view returns (bool);\r\n\r\n  /**\r\n   * @notice Add a new contract to the manager\r\n   * @param _contractName Name of the new contract\r\n   * @param _address Address of the new contract\r\n   */\r\n  function addContract(string _contractName, address _address) external;\r\n\r\n  /**\r\n   * @notice Get a contract by its name\r\n   * @param _contractName Name of the contract\r\n   */\r\n  function getContract(string _contractName) external view returns (address _contractAddress);\r\n\r\n  /**\r\n   * @notice Remove an existing contract\r\n   * @param _contractName Name of the contract that will be removed\r\n   */\r\n  function removeContract(string _contractName) external;\r\n\r\n  /**\r\n   * @notice Update an existing contract (changing the address)\r\n   * @param _contractName Name of the existing contract\r\n   * @param _newAddress Address where the new contract is deployed\r\n   */\r\n  function updateContract(string _contractName, address _newAddress) external;\r\n\r\n  /**\r\n   * @notice Change whether an address is authorized to use a specific contract or not\r\n   * @param _contractName Name of the contract to which the accessor will gain authorization or not\r\n   * @param _authorizedAddress Address which will have its authorisation status changed\r\n   * @param _authorized Boolean whether the address will have access or not\r\n   */\r\n  function setAuthorizedContract(string _contractName, address _authorizedAddress, bool _authorized) external;\r\n}\r\n\r\n// File: contracts/ContractManager.sol\r\n\r\n/**\r\n * @title Contract Manager\r\n * @author Bram Hoven\r\n * @notice Contract whom manages every other contract connected to this project and the authorization\r\n */\r\ncontract ContractManager is ContractManagerInterface {\r\n  // Mapping of all contracts and their name\r\n  mapping(string => address) private contracts;\r\n  // Mapping of all contracts and who has access to them\r\n  mapping(string => mapping(address => bool)) private authorization;\r\n\r\n  /**\r\n   * @notice Triggered when contract is added\r\n   * @param _address Address of the new contract\r\n   * @param _contractName Name of the new contract\r\n   */\r\n  event ContractAdded(address indexed _address, string _contractName);\r\n\r\n  /**\r\n   * @notice Triggered when contract is removed\r\n   * @param _contractName Name of the contract that is removed\r\n   */\r\n  event ContractRemoved(string _contractName);\r\n\r\n  /**\r\n   * @notice Triggered when contract is updated\r\n   * @param _oldAddress Address where the contract used to be\r\n   * @param _newAddress Address where the new contract is deployed\r\n   * @param _contractName Name of the contract that has been updated\r\n   */\r\n  event ContractUpdated(address indexed _oldAddress, address indexed _newAddress, string _contractName);\r\n\r\n  /**\r\n   * @notice Triggered when authorization status changed\r\n   * @param _address Address who will gain or lose authorization to _contractName\r\n   * @param _authorized Boolean whether or not the address is authorized\r\n   * @param _contractName Name of the contract\r\n   */\r\n  event AuthorizationChanged(address indexed _address, bool _authorized, string _contractName);\r\n\r\n  /**\r\n   * @dev Throws when sender does not match contract name\r\n   * @param _contractName Name of the contract the sender is checked against\r\n   */\r\n  modifier onlyRegisteredContract(string _contractName) {\r\n    require(contracts[_contractName] == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws when sender is not owner of contract manager\r\n   * @param _contractName Name of the contract to check the _accessor against\r\n   * @param _accessor Address that wants to access this specific contract\r\n   */\r\n  modifier onlyContractOwner(string _contractName, address _accessor) {\r\n    require(contracts[_contractName] == msg.sender || contracts[_contractName] == address(this));\r\n    require(_accessor != address(0));\r\n    require(authorization[_contractName][_accessor] == true);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Constructor for creating the contract manager\r\n   */\r\n  constructor() public {\r\n    contracts[\"ContractManager\"] = address(this);\r\n    authorization[\"ContractManager\"][msg.sender] = true;\r\n  }\r\n\r\n  /**\r\n   * @notice Check whether the accessor is authorized to access that contract\r\n   * @param _contractName Name of the contract that is being accessed\r\n   * @param _accessor Address who wants to access that contract\r\n   */\r\n  function authorize(string _contractName, address _accessor) external onlyContractOwner(_contractName, _accessor) view returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Add a new contract to the manager\r\n   * @param _contractName Name of the new contract\r\n   * @param _address Address of the new contract\r\n   */\r\n  function addContract(string _contractName, address _address) external  onlyContractOwner(\"ContractManager\", msg.sender) {\r\n    bytes memory contractNameBytes = bytes(_contractName);\r\n\r\n    require(contractNameBytes.length != 0);\r\n    require(contracts[_contractName] == address(0));\r\n    require(_address != address(0));\r\n\r\n    contracts[_contractName] = _address;\r\n\r\n    emit ContractAdded(_address, _contractName);\r\n  }\r\n\r\n  /**\r\n   * @notice Get a contract by its name\r\n   * @param _contractName Name of the contract\r\n   */\r\n  function getContract(string _contractName) external view returns (address _contractAddress) {\r\n    require(contracts[_contractName] != address(0));\r\n\r\n    _contractAddress = contracts[_contractName];\r\n\r\n    return _contractAddress;\r\n  }\r\n\r\n  /**\r\n   * @notice Remove an existing contract\r\n   * @param _contractName Name of the contract that will be removed\r\n   */\r\n  function removeContract(string _contractName) external onlyContractOwner(\"ContractManager\", msg.sender) {\r\n    bytes memory contractNameBytes = bytes(_contractName);\r\n\r\n    require(contractNameBytes.length != 0);\r\n    // Should not be able to remove this contract\r\n    require(keccak256(_contractName) != keccak256(\"ContractManager\"));\r\n    require(contracts[_contractName] != address(0));\r\n    \r\n    delete contracts[_contractName];\r\n\r\n    emit ContractRemoved(_contractName);\r\n  }\r\n\r\n  /**\r\n   * @notice Update an existing contract (changing the address)\r\n   * @param _contractName Name of the existing contract\r\n   * @param _newAddress Address where the new contract is deployed\r\n   */\r\n  function updateContract(string _contractName, address _newAddress) external onlyContractOwner(\"ContractManager\", msg.sender) {\r\n    bytes memory contractNameBytes = bytes(_contractName);\r\n\r\n    require(contractNameBytes.length != 0);\r\n    require(contracts[_contractName] != address(0));\r\n    require(_newAddress != address(0));\r\n\r\n    address oldAddress = contracts[_contractName];\r\n    contracts[_contractName] = _newAddress;\r\n\r\n    emit ContractUpdated(oldAddress, _newAddress, _contractName);\r\n  }\r\n\r\n  /**\r\n   * @notice Change whether an address is authorized to use a specific contract or not\r\n   * @param _contractName Name of the contract to which the accessor will gain authorization or not\r\n   * @param _authorizedAddress Address which will have its authorisation status changed\r\n   * @param _authorized Boolean whether the address will have access or not\r\n   */\r\n  function setAuthorizedContract(string _contractName, address _authorizedAddress, bool _authorized) external onlyContractOwner(\"ContractManager\", msg.sender) {\r\n    bytes memory contractNameBytes = bytes(_contractName);\r\n\r\n    require(contractNameBytes.length != 0);\r\n    require(_authorizedAddress != address(0));\r\n    require(authorization[_contractName][_authorizedAddress] != _authorized);\r\n    \r\n    authorization[_contractName][_authorizedAddress] = _authorized;\r\n\r\n    emit AuthorizationChanged(_authorizedAddress, _authorized, _contractName);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_contractName\",\"type\":\"string\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractName\",\"type\":\"string\"},{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contractName\",\"type\":\"string\"},{\"name\":\"_accessor\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractName\",\"type\":\"string\"}],\"name\":\"removeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractName\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractName\",\"type\":\"string\"},{\"name\":\"_authorizedAddress\",\"type\":\"address\"},{\"name\":\"_authorized\",\"type\":\"bool\"}],\"name\":\"setAuthorizedContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_contractName\",\"type\":\"string\"}],\"name\":\"ContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_contractName\",\"type\":\"string\"}],\"name\":\"ContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_contractName\",\"type\":\"string\"}],\"name\":\"ContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_authorized\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_contractName\",\"type\":\"string\"}],\"name\":\"AuthorizationChanged\",\"type\":\"event\"}]","ContractName":"ContractManager","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4f804bab46417ae424aad3411ab2717cadac153377f29e84da6d1f3a4611f3ef"}]}