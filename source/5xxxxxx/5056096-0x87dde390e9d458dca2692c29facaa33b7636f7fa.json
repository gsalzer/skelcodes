{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ninterface ERC223ReceivingContract { \r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC223Token is owned {\r\n    using SafeMath for uint256;\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n\r\n    mapping(address => uint) balances; // List of user balances.\r\n    \r\n    string _name;\r\n    string _symbol;\r\n    uint8 public constant DECIMALS = 6;\r\n    // 6 decimals is the strongly suggested default, avoid changing it\r\n    uint256 _totalSupply;\r\n    address team_addr;\r\n    uint256 team_keep_amount;\r\n    uint256 _saledTotal = 0;\r\n    uint256 _amounToSale = 0;\r\n    uint _buyPrice = 10;\r\n    uint256 _totalEther = 0;\r\n\r\n    // Team钱包        300000000 个\r\n    address addrTeam = 0xe926f9dbEB503c5b273ba496Af48E8f7d6995C64;\r\n\r\n        // Funder钱包      900000000 个\r\n    address addrFounder = 0x6AfD59bAa83d6e0F48cdcb791ABB88d43348c0b7;\r\n\r\n        // Operation钱包   800000000 个\r\n    address addrOper = 0x062fCa3A0f33087425837b0f88CfC0d1EE528EFb;\r\n\r\n        // Lynch钱包       400000000 个\r\n    address addrLynch = 0x6395075e827D7af7028Dd058C5B432EC624b0c53;\r\n\r\n        // Pool钱包        400000000 个\r\n    address addrPool = 0xaA008ba2A493849a2004Ea13E24C8adcBeE63EE6;\r\n\r\n\r\n    function ERC223Token(\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public \r\n    {\r\n        _totalSupply = 4000000000 * 10 ** uint256(DECIMALS);  // 实际供应总量\r\n        balances[addrTeam] = 300000000 * 10 ** uint256(DECIMALS);\r\n        balances[addrFounder] = 900000000 * 10 ** uint256(DECIMALS);\r\n        balances[addrOper] = 800000000 * 10 ** uint256(DECIMALS);\r\n        balances[addrLynch] = 400000000 * 10 ** uint256(DECIMALS);\r\n        balances[addrPool] = 400000000 * 10 ** uint256(DECIMALS);\r\n\r\n        _amounToSale = 1200000000 * 10 ** uint256(DECIMALS);\r\n        _saledTotal = 0;\r\n\r\n        _name = tokenName;                                       // 设置Token名字\r\n        _symbol = tokenSymbol;                                   // 设置Token符号\r\n    }\r\n\r\n    function name() public constant returns (string) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public constant returns (string) {\r\n        return _symbol;\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function buyPrice() public constant returns (uint256) {\r\n        return _buyPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      Invokes the `tokenFallback` function if the recipient is a contract.\r\n     *      The token transfer fails if the recipient is a contract\r\n     *      but does not implement the `tokenFallback` function\r\n     *      or the fallback function to receive funds.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool ok) {\r\n        // Standard function transfer similar to ERC20 transfer with no _data .\r\n        // Added due to backwards compatibility reasons .\r\n        uint codeLength;\r\n        require (_to != 0x0);\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n        require(balances[msg.sender]>=_value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if (codeLength>0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n        Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer the specified amount of tokens to the specified address.\r\n     *      This function works the same with the previous one\r\n     *      but doesn't contain `_data` param.\r\n     *      Added due to backwards compatibility reasons.\r\n     *\r\n     * @param _to    Receiver address.\r\n     * @param _value Amount of tokens that will be transferred.\r\n     */\r\n    function transfer(address _to, uint _value) public returns(bool ok) {\r\n        uint codeLength;\r\n        bytes memory empty;\r\n        require (_to != 0x0);\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n        require(balances[msg.sender]>=_value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if (codeLength>0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, empty);\r\n        }\r\n        Transfer(msg.sender, _to, _value, empty);\r\n        return true;\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Returns balance of the `_owner`.\r\n     *\r\n     * @param _owner   The address whose balance will be returned.\r\n     * @return balance Balance of the `_owner`.\r\n     */\r\n    function balanceOf(address _owner) public constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function setPrices(uint256 newBuyPrice) onlyOwner public {\r\n        _buyPrice = newBuyPrice;\r\n    }\r\n\r\n    function transTo(address _from, address _to, uint256 _amount) onlyOwner public returns(bool ok) {\r\n        require(balances[_from]>=_amount);\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        return true;   \r\n    }\r\n\r\n    /// @notice Buy tokens from contract by sending ether\r\n    function buyCoin() payable public returns (bool ok) {\r\n        uint amount = ((msg.value * _buyPrice) * 10 ** uint256(DECIMALS))/1000000000000000000;               // calculates the amount\r\n        require ((_amounToSale - _saledTotal)>=amount);\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n        _saledTotal = _saledTotal.add(amount);\r\n        _totalEther += msg.value;\r\n        return true;\r\n    }\r\n\r\n    function dispatchTo(address target, uint256 amount) onlyOwner public returns (bool ok) {\r\n        require ((_amounToSale - _saledTotal)>=amount);\r\n        balances[target] = balances[target].add(amount);\r\n        _saledTotal = _saledTotal.add(amount);\r\n        return true;\r\n    }\r\n\r\n    function withdrawTo(address _target, uint256 _value) onlyOwner public returns (bool ok) {\r\n        require(_totalEther <= _value);\r\n        _totalEther -= _value;\r\n        _target.transfer(_value);\r\n        return true;\r\n    }\r\n    \r\n    function () payable public {\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"dispatchTo\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyCoin\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transTo\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ERC223Token","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000e54657374416c706861546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065441544b31310000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://7547e3744e6cde9a9dcbe63535d57f7b94d3292e2bef0fd6c0647abc08ea35d1"}]}