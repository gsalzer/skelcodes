{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract TokenInfo {\r\n    // Base prices in wei, going off from an Ether value of $500\r\n    uint256 public constant PRIVATESALE_BASE_PRICE_IN_WEI = 200000000000000;\r\n    uint256 public constant PRESALE_BASE_PRICE_IN_WEI = 600000000000000;\r\n    uint256 public constant ICO_BASE_PRICE_IN_WEI = 800000000000000;\r\n    uint256 public constant FIRSTSALE_BASE_PRICE_IN_WEI = 200000000000000;\r\n\r\n    // First sale minimum and maximum contribution, going off from an Ether value of $500\r\n    uint256 public constant MIN_PURCHASE_OTHERSALES = 80000000000000000;\r\n    uint256 public constant MIN_PURCHASE = 1000000000000000000;\r\n    uint256 public constant MAX_PURCHASE = 1000000000000000000000;\r\n\r\n    // Bonus percentages for each respective sale level\r\n\r\n    uint256 public constant PRESALE_PERCENTAGE_1 = 10;\r\n    uint256 public constant PRESALE_PERCENTAGE_2 = 15;\r\n    uint256 public constant PRESALE_PERCENTAGE_3 = 20;\r\n    uint256 public constant PRESALE_PERCENTAGE_4 = 25;\r\n    uint256 public constant PRESALE_PERCENTAGE_5 = 35;\r\n\r\n    uint256 public constant ICO_PERCENTAGE_1 = 5;\r\n    uint256 public constant ICO_PERCENTAGE_2 = 10;\r\n    uint256 public constant ICO_PERCENTAGE_3 = 15;\r\n    uint256 public constant ICO_PERCENTAGE_4 = 20;\r\n    uint256 public constant ICO_PERCENTAGE_5 = 25;\r\n\r\n    // Bonus levels in wei for each respective level\r\n\r\n    uint256 public constant PRESALE_LEVEL_1 = 5000000000000000000;\r\n    uint256 public constant PRESALE_LEVEL_2 = 10000000000000000000;\r\n    uint256 public constant PRESALE_LEVEL_3 = 15000000000000000000;\r\n    uint256 public constant PRESALE_LEVEL_4 = 20000000000000000000;\r\n    uint256 public constant PRESALE_LEVEL_5 = 25000000000000000000;\r\n\r\n    uint256 public constant ICO_LEVEL_1 = 6666666666666666666;\r\n    uint256 public constant ICO_LEVEL_2 = 13333333333333333333;\r\n    uint256 public constant ICO_LEVEL_3 = 20000000000000000000;\r\n    uint256 public constant ICO_LEVEL_4 = 26666666666666666666;\r\n    uint256 public constant ICO_LEVEL_5 = 33333333333333333333;\r\n\r\n    // Caps for the respective sales, the amount of tokens allocated to the team and the total cap\r\n    uint256 public constant PRIVATESALE_TOKENCAP = 18750000;\r\n    uint256 public constant PRESALE_TOKENCAP = 18750000;\r\n    uint256 public constant ICO_TOKENCAP = 22500000;\r\n    uint256 public constant FIRSTSALE_TOKENCAP = 5000000;\r\n    uint256 public constant LEDTEAM_TOKENS = 35000000;\r\n    uint256 public constant TOTAL_TOKENCAP = 100000000;\r\n\r\n    uint256 public constant DECIMALS_MULTIPLIER = 1 ether;\r\n\r\n    address public constant LED_MULTISIG = 0x865e785f98b621c5fdde70821ca7cea9eeb77ef4;\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  constructor() public {}\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    emit Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    emit Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract ApproveAndCallReceiver {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\r\n}\r\n\r\n/**\r\n * @title Controllable\r\n * @dev The Controllable contract has an controller address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Controllable {\r\n  address public controller;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n   */\r\n  constructor() public {\r\n    controller = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyController() {\r\n    require(msg.sender == controller);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newController The address to transfer ownership to.\r\n   */\r\n  function transferControl(address newController) public onlyController {\r\n    if (newController != address(0)) {\r\n      controller = newController;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/// @dev The token controller contract must implement these functions\r\ncontract ControllerInterface {\r\n\r\n    function proxyPayment(address _owner) public payable returns(bool);\r\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\r\n    function onApprove(address _owner, address _spender, uint _amount) public returns(bool);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n\r\n  uint256 public totalSupply;\r\n\r\n  function balanceOf(address _owner) public constant returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool);\r\n  function approve(address _spender, uint256 _amount) public returns (bool);\r\n  function allowance(address _owner, address _spender) public constant returns (uint256);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\ncontract Crowdsale is Pausable, TokenInfo {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  LedTokenInterface public ledToken;\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  uint256 public totalWeiRaised;\r\n  uint256 public tokensMinted;\r\n  uint256 public totalSupply;\r\n  uint256 public contributors;\r\n  uint256 public surplusTokens;\r\n\r\n  bool public finalized;\r\n\r\n  bool public ledTokensAllocated;\r\n  address public ledMultiSig = LED_MULTISIG;\r\n\r\n  //uint256 public tokenCap = FIRSTSALE_TOKENCAP;\r\n  //uint256 public cap = tokenCap * DECIMALS_MULTIPLIER;\r\n  //uint256 public weiCap = tokenCap * FIRSTSALE_BASE_PRICE_IN_WEI;\r\n\r\n  bool public started = false;\r\n\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event NewClonedToken(address indexed _cloneToken);\r\n  event OnTransfer(address _from, address _to, uint _amount);\r\n  event OnApprove(address _owner, address _spender, uint _amount);\r\n  event LogInt(string _name, uint256 _value);\r\n  event Finalized();\r\n\r\n  // constructor(address _tokenAddress, uint256 _startTime, uint256 _endTime) public {\r\n    \r\n\r\n  //   startTime = _startTime;\r\n  //   endTime = _endTime;\r\n  //   ledToken = LedTokenInterface(_tokenAddress);\r\n\r\n  //   assert(_tokenAddress != 0x0);\r\n  //   assert(_startTime > 0);\r\n  //   assert(_endTime > _startTime);\r\n  // }\r\n\r\n  /**\r\n   * Low level token purchase function\r\n   * @param _beneficiary will receive the tokens.\r\n   */\r\n  /*function buyTokens(address _beneficiary) public payable whenNotPaused whenNotFinalized {\r\n    require(_beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n    require(weiAmount >= MIN_PURCHASE && weiAmount <= MAX_PURCHASE);\r\n    uint256 priceInWei = FIRSTSALE_BASE_PRICE_IN_WEI;\r\n    totalWeiRaised = totalWeiRaised.add(weiAmount);\r\n\r\n    uint256 tokens = weiAmount.mul(DECIMALS_MULTIPLIER).div(priceInWei);\r\n    tokensMinted = tokensMinted.add(tokens);\r\n    require(tokensMinted < cap);\r\n\r\n    contributors = contributors.add(1);\r\n\r\n    ledToken.mint(_beneficiary, tokens);\r\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n    forwardFunds();\r\n  }*/\r\n\r\n\r\n  /**\r\n  * Forwards funds to the tokensale wallet\r\n  */\r\n  function forwardFunds() internal {\r\n    ledMultiSig.transfer(msg.value);\r\n  }\r\n\r\n\r\n  /**\r\n  * Validates the purchase (period, minimum amount, within cap)\r\n  * @return {bool} valid\r\n  */\r\n  function validPurchase() internal constant returns (bool) {\r\n    uint256 current = now;\r\n    bool presaleStarted = (current >= startTime || started);\r\n    bool presaleNotEnded = current <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return nonZeroPurchase && presaleStarted && presaleNotEnded;\r\n  }\r\n\r\n  /**\r\n  * Returns the total Led token supply\r\n  * @return totalSupply {uint256} Led Token Total Supply\r\n  */\r\n  function totalSupply() public constant returns (uint256) {\r\n    return ledToken.totalSupply();\r\n  }\r\n\r\n  /**\r\n  * Returns token holder Led Token balance\r\n  * @param _owner {address} Token holder address\r\n  * @return balance {uint256} Corresponding token holder balance\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256) {\r\n    return ledToken.balanceOf(_owner);\r\n  }\r\n\r\n  /**\r\n  * Change the Led Token controller\r\n  * @param _newController {address} New Led Token controller\r\n  */\r\n  function changeController(address _newController) public onlyOwner {\r\n    require(isContract(_newController));\r\n    ledToken.transferControl(_newController);\r\n  }\r\n\r\n  function enableMasterTransfers() public onlyOwner {\r\n    ledToken.enableMasterTransfers(true);\r\n  }\r\n\r\n  function lockMasterTransfers() public onlyOwner {\r\n    ledToken.enableMasterTransfers(false);\r\n  }\r\n\r\n  function forceStart() public onlyOwner {\r\n    started = true;\r\n  }\r\n\r\n  /*function finalize() public onlyOwner {\r\n    require(paused);\r\n    require(!finalized);\r\n    surplusTokens = cap - tokensMinted;\r\n    ledToken.mint(ledMultiSig, surplusTokens);\r\n    ledToken.transferControl(owner);\r\n\r\n    emit Finalized();\r\n\r\n    finalized = true;\r\n  }*/\r\n\r\n  function isContract(address _addr) constant internal returns(bool) {\r\n    uint size;\r\n    if (_addr == 0)\r\n      return false;\r\n    assembly {\r\n        size := extcodesize(_addr)\r\n    }\r\n    return size>0;\r\n  }\r\n\r\n  modifier whenNotFinalized() {\r\n    require(!finalized);\r\n    _;\r\n  }\r\n\r\n}\r\n/**\r\n * @title FirstSale\r\n * FirstSale allows investors to make token purchases and assigns them tokens based\r\n\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet as they arrive.\r\n */\r\ncontract FirstSale is Crowdsale {\r\n\r\n  uint256 public tokenCap = FIRSTSALE_TOKENCAP;\r\n  uint256 public cap = tokenCap * DECIMALS_MULTIPLIER;\r\n  uint256 public weiCap = tokenCap * FIRSTSALE_BASE_PRICE_IN_WEI;\r\n\r\n  constructor(address _tokenAddress, uint256 _startTime, uint256 _endTime) public {\r\n    \r\n\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    ledToken = LedTokenInterface(_tokenAddress);\r\n\r\n    assert(_tokenAddress != 0x0);\r\n    assert(_startTime > 0);\r\n    assert(_endTime > _startTime);\r\n  }\r\n\r\n    /**\r\n   * High level token purchase function\r\n   */\r\n  function() public payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * Low level token purchase function\r\n   * @param _beneficiary will receive the tokens.\r\n   */\r\n  function buyTokens(address _beneficiary) public payable whenNotPaused whenNotFinalized {\r\n    require(_beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n    require(weiAmount >= MIN_PURCHASE && weiAmount <= MAX_PURCHASE);\r\n    uint256 priceInWei = FIRSTSALE_BASE_PRICE_IN_WEI;\r\n    totalWeiRaised = totalWeiRaised.add(weiAmount);\r\n\r\n    uint256 tokens = weiAmount.mul(DECIMALS_MULTIPLIER).div(priceInWei);\r\n    tokensMinted = tokensMinted.add(tokens);\r\n    require(tokensMinted < cap);\r\n\r\n    contributors = contributors.add(1);\r\n\r\n    ledToken.mint(_beneficiary, tokens);\r\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n  function getInfo() public view returns(uint256, uint256, string, bool,  uint256, uint256, uint256, \r\n  bool, uint256, uint256){\r\n    uint256 decimals = 18;\r\n    string memory symbol = \"LED\";\r\n    bool transfersEnabled = ledToken.transfersEnabled();\r\n    return (\r\n      TOTAL_TOKENCAP, // Tokencap with the decimal point in place. should be 100.000.000\r\n      decimals, // Decimals\r\n      symbol,\r\n      transfersEnabled,\r\n      contributors,\r\n      totalWeiRaised,\r\n      tokenCap, // Tokencap for the first sale with the decimal point in place.\r\n      started,\r\n      startTime, // Start time and end time in Unix timestamp format with a length of 10 numbers.\r\n      endTime\r\n    );\r\n  }\r\n\r\n  function finalize() public onlyOwner {\r\n    require(paused);\r\n    require(!finalized);\r\n    surplusTokens = cap - tokensMinted;\r\n    ledToken.mint(ledMultiSig, surplusTokens);\r\n    ledToken.transferControl(owner);\r\n\r\n    emit Finalized();\r\n\r\n    finalized = true;\r\n  }\r\n\r\n}\r\n\r\ncontract LedToken is Controllable {\r\n\r\n  using SafeMath for uint256;\r\n  LedTokenInterface public parentToken;\r\n  TokenFactoryInterface public tokenFactory;\r\n\r\n  string public name;\r\n  string public symbol;\r\n  string public version;\r\n  uint8 public decimals;\r\n\r\n  uint256 public parentSnapShotBlock;\r\n  uint256 public creationBlock;\r\n  bool public transfersEnabled;\r\n\r\n  bool public masterTransfersEnabled;\r\n  address public masterWallet = 0x865e785f98b621c5fdde70821ca7cea9eeb77ef4;\r\n\r\n\r\n  struct Checkpoint {\r\n    uint128 fromBlock;\r\n    uint128 value;\r\n  }\r\n\r\n  Checkpoint[] totalSupplyHistory;\r\n  mapping(address => Checkpoint[]) balances;\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  bool public mintingFinished = false;\r\n  bool public presaleBalancesLocked = false;\r\n\r\n  uint256 public totalSupplyAtCheckpoint;\r\n\r\n  event MintFinished();\r\n  event NewCloneToken(address indexed cloneToken);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n\r\n\r\n  constructor(\r\n    address _tokenFactory,\r\n    address _parentToken,\r\n    uint256 _parentSnapShotBlock,\r\n    string _tokenName,\r\n    string _tokenSymbol\r\n    ) public {\r\n      tokenFactory = TokenFactoryInterface(_tokenFactory);\r\n      parentToken = LedTokenInterface(_parentToken);\r\n      parentSnapShotBlock = _parentSnapShotBlock;\r\n      name = _tokenName;\r\n      symbol = _tokenSymbol;\r\n      decimals = 18;\r\n      transfersEnabled = false;\r\n      masterTransfersEnabled = false;\r\n      creationBlock = block.number;\r\n      version = '0.1';\r\n  }\r\n\r\n\r\n  /**\r\n  * Returns the total Led token supply at the current block\r\n  * @return total supply {uint256}\r\n  */\r\n  function totalSupply() public constant returns (uint256) {\r\n    return totalSupplyAt(block.number);\r\n  }\r\n\r\n  /**\r\n  * Returns the total Led token supply at the given block number\r\n  * @param _blockNumber {uint256}\r\n  * @return total supply {uint256}\r\n  */\r\n  function totalSupplyAt(uint256 _blockNumber) public constant returns(uint256) {\r\n    // These next few lines are used when the totalSupply of the token is\r\n    //  requested before a check point was ever created for this token, it\r\n    //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n    //  genesis block for this token as that contains totalSupply of this\r\n    //  token at this block number.\r\n    if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n        if (address(parentToken) != 0x0) {\r\n            return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n        } else {\r\n            return 0;\r\n        }\r\n\r\n    // This will return the expected totalSupply during normal situations\r\n    } else {\r\n        return getValueAt(totalSupplyHistory, _blockNumber);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Returns the token holder balance at the current block\r\n  * @param _owner {address}\r\n  * @return balance {uint256}\r\n   */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balanceOfAt(_owner, block.number);\r\n  }\r\n\r\n  /**\r\n  * Returns the token holder balance the the given block number\r\n  * @param _owner {address}\r\n  * @param _blockNumber {uint256}\r\n  * @return balance {uint256}\r\n  */\r\n  function balanceOfAt(address _owner, uint256 _blockNumber) public constant returns (uint256) {\r\n    // These next few lines are used when the balance of the token is\r\n    //  requested before a check point was ever created for this token, it\r\n    //  requires that the `parentToken.balanceOfAt` be queried at the\r\n    //  genesis block for that token as this contains initial balance of\r\n    //  this token\r\n    if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n        if (address(parentToken) != 0x0) {\r\n            return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n        } else {\r\n            // Has no parent\r\n            return 0;\r\n        }\r\n\r\n    // This will return the expected balance during normal situations\r\n    } else {\r\n        return getValueAt(balances[_owner], _blockNumber);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Standard ERC20 transfer tokens function\r\n  * @param _to {address}\r\n  * @param _amount {uint}\r\n  * @return success {bool}\r\n  */\r\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n    return doTransfer(msg.sender, _to, _amount);\r\n  }\r\n\r\n  /**\r\n  * Standard ERC20 transferFrom function\r\n  * @param _from {address}\r\n  * @param _to {address}\r\n  * @param _amount {uint256}\r\n  * @return success {bool}\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n    require(allowed[_from][msg.sender] >= _amount);\r\n    allowed[_from][msg.sender] -= _amount;\r\n    return doTransfer(_from, _to, _amount);\r\n  }\r\n\r\n  /**\r\n  * Standard ERC20 approve function\r\n  * @param _spender {address}\r\n  * @param _amount {uint256}\r\n  * @return success {bool}\r\n  */\r\n  function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n    require(transfersEnabled);\r\n\r\n    //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _amount;\r\n    emit Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * Standard ERC20 approve function\r\n  * @param _spender {address}\r\n  * @param _amount {uint256}\r\n  * @return success {bool}\r\n  */\r\n  function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\r\n    approve(_spender, _amount);\r\n\r\n    ApproveAndCallReceiver(_spender).receiveApproval(\r\n        msg.sender,\r\n        _amount,\r\n        this,\r\n        _extraData\r\n    );\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * Standard ERC20 allowance function\r\n  * @param _owner {address}\r\n  * @param _spender {address}\r\n  * @return remaining {uint256}\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n  * Internal Transfer function - Updates the checkpoint ledger\r\n  * @param _from {address}\r\n  * @param _to {address}\r\n  * @param _amount {uint256}\r\n  * @return success {bool}\r\n  */\r\n  function doTransfer(address _from, address _to, uint256 _amount) internal returns(bool) {\r\n\r\n    if (msg.sender != masterWallet) {\r\n      require(transfersEnabled);\r\n    } else {\r\n      require(masterTransfersEnabled);\r\n    }\r\n\r\n    require(_amount > 0);\r\n    require(parentSnapShotBlock < block.number);\r\n    require((_to != address(0)) && (_to != address(this)));\r\n\r\n    // If the amount being transfered is more than the balance of the\r\n    // account the transfer returns false\r\n    uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\r\n    require(previousBalanceFrom >= _amount);\r\n\r\n    // First update the balance array with the new value for the address\r\n    //  sending the tokens\r\n    updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n\r\n    // Then update the balance array with the new value for the address\r\n    //  receiving the tokens\r\n    uint256 previousBalanceTo = balanceOfAt(_to, block.number);\r\n    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n    updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n\r\n    // An event to make the transfer easy to find on the blockchain\r\n    emit Transfer(_from, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n  * Token creation functions - can only be called by the tokensale controller during the tokensale period\r\n  * @param _owner {address}\r\n  * @param _amount {uint256}\r\n  * @return success {bool}\r\n  */\r\n  function mint(address _owner, uint256 _amount) public onlyController canMint returns (bool) {\r\n    uint256 curTotalSupply = totalSupply();\r\n    uint256 previousBalanceTo = balanceOf(_owner);\r\n\r\n    require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n\r\n    updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n    updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n    emit Transfer(0, _owner, _amount);\r\n    return true;\r\n  }\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * Import presale balances before the start of the token sale. After importing\r\n   * balances, lockPresaleBalances() has to be called to prevent further modification\r\n   * of presale balances.\r\n   * @param _addresses {address[]} Array of presale addresses\r\n   * @param _balances {uint256[]} Array of balances corresponding to presale addresses.\r\n   * @return success {bool}\r\n   */\r\n  function importPresaleBalances(address[] _addresses, uint256[] _balances) public onlyController returns (bool) {\r\n    require(presaleBalancesLocked == false);\r\n\r\n    for (uint256 i = 0; i < _addresses.length; i++) {\r\n      totalSupplyAtCheckpoint += _balances[i];\r\n      updateValueAtNow(balances[_addresses[i]], _balances[i]);\r\n      updateValueAtNow(totalSupplyHistory, totalSupplyAtCheckpoint);\r\n      emit Transfer(0, _addresses[i], _balances[i]);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Lock presale balances after successful presale balance import\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function lockPresaleBalances() public onlyController returns (bool) {\r\n    presaleBalancesLocked = true;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Lock the minting of Led Tokens - to be called after the presale\r\n   * @return {bool} success\r\n  */\r\n  function finishMinting() public onlyController returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Enable or block transfers - to be called in case of emergency\r\n   * @param _value {bool}\r\n  */\r\n  function enableTransfers(bool _value) public onlyController {\r\n    transfersEnabled = _value;\r\n  }\r\n\r\n  /**\r\n   * Enable or block transfers - to be called in case of emergency\r\n   * @param _value {bool}\r\n  */\r\n  function enableMasterTransfers(bool _value) public onlyController {\r\n    masterTransfersEnabled = _value;\r\n  }\r\n\r\n  /**\r\n   * Internal balance method - gets a certain checkpoint value a a certain _block\r\n   * @param _checkpoints {Checkpoint[]} List of checkpoints - supply history or balance history\r\n   * @return value {uint256} Value of _checkpoints at _block\r\n  */\r\n  function getValueAt(Checkpoint[] storage _checkpoints, uint256 _block) constant internal returns (uint256) {\r\n\r\n      if (_checkpoints.length == 0)\r\n        return 0;\r\n      // Shortcut for the actual value\r\n      if (_block >= _checkpoints[_checkpoints.length-1].fromBlock)\r\n        return _checkpoints[_checkpoints.length-1].value;\r\n      if (_block < _checkpoints[0].fromBlock)\r\n        return 0;\r\n\r\n      // Binary search of the value in the array\r\n      uint256 min = 0;\r\n      uint256 max = _checkpoints.length-1;\r\n      while (max > min) {\r\n          uint256 mid = (max + min + 1) / 2;\r\n          if (_checkpoints[mid].fromBlock<=_block) {\r\n              min = mid;\r\n          } else {\r\n              max = mid-1;\r\n          }\r\n      }\r\n      return _checkpoints[min].value;\r\n  }\r\n\r\n\r\n  /**\r\n  * Internal update method - updates the checkpoint ledger at the current block\r\n  * @param _checkpoints {Checkpoint[]}  List of checkpoints - supply history or balance history\r\n  * @return value {uint256} Value to add to the checkpoints ledger\r\n   */\r\n  function updateValueAtNow(Checkpoint[] storage _checkpoints, uint256 _value) internal {\r\n      if ((_checkpoints.length == 0) || (_checkpoints[_checkpoints.length-1].fromBlock < block.number)) {\r\n              Checkpoint storage newCheckPoint = _checkpoints[_checkpoints.length++];\r\n              newCheckPoint.fromBlock = uint128(block.number);\r\n              newCheckPoint.value = uint128(_value);\r\n          } else {\r\n              Checkpoint storage oldCheckPoint = _checkpoints[_checkpoints.length-1];\r\n              oldCheckPoint.value = uint128(_value);\r\n          }\r\n  }\r\n\r\n\r\n  function min(uint256 a, uint256 b) internal pure returns (uint) {\r\n      return a < b ? a : b;\r\n  }\r\n\r\n  /**\r\n  * Clones Led Token at the given snapshot block\r\n  * @param _snapshotBlock {uint256}\r\n  * @param _name {string} - The cloned token name\r\n  * @param _symbol {string} - The cloned token symbol\r\n  * @return clonedTokenAddress {address}\r\n   */\r\n  function createCloneToken(uint256 _snapshotBlock, string _name, string _symbol) public returns(address) {\r\n\r\n      if (_snapshotBlock == 0) {\r\n        _snapshotBlock = block.number;\r\n      }\r\n\r\n      if (_snapshotBlock > block.number) {\r\n        _snapshotBlock = block.number;\r\n      }\r\n\r\n      LedToken cloneToken = tokenFactory.createCloneToken(\r\n          this,\r\n          _snapshotBlock,\r\n          _name,\r\n          _symbol\r\n        );\r\n\r\n\r\n      cloneToken.transferControl(msg.sender);\r\n\r\n      // An event to make the token easy to find on the blockchain\r\n      emit NewCloneToken(address(cloneToken));\r\n      return address(cloneToken);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title LedToken (LED)\r\n * Standard Mintable ERC20 Token\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract LedTokenInterface is Controllable {\r\n\r\n  bool public transfersEnabled;\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  event ClaimedTokens(address indexed _token, address indexed _owner, uint _amount);\r\n  event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  function totalSupply() public constant returns (uint);\r\n  function totalSupplyAt(uint _blockNumber) public constant returns(uint);\r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n  function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint);\r\n  function transfer(address _to, uint256 _amount) public returns (bool success);\r\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\r\n  function approve(address _spender, uint256 _amount) public returns (bool success);\r\n  function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool success);\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n  function mint(address _owner, uint _amount) public returns (bool);\r\n  function importPresaleBalances(address[] _addresses, uint256[] _balances, address _presaleAddress) public returns (bool);\r\n  function lockPresaleBalances() public returns (bool);\r\n  function finishMinting() public returns (bool);\r\n  function enableTransfers(bool _value) public;\r\n  function enableMasterTransfers(bool _value) public;\r\n  function createCloneToken(uint _snapshotBlock, string _cloneTokenName, string _cloneTokenSymbol) public returns (address);\r\n\r\n}\r\n\r\n/**\r\n * @title Presale\r\n * Presale allows investors to make token purchases and assigns them tokens based\r\n\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet as they arrive.\r\n */\r\ncontract Presale is Crowdsale {\r\n\r\n  uint256 public tokenCap = PRESALE_TOKENCAP;\r\n  uint256 public cap = tokenCap * DECIMALS_MULTIPLIER;\r\n  uint256 public weiCap = tokenCap * PRESALE_BASE_PRICE_IN_WEI;\r\n\r\n  constructor(address _tokenAddress, uint256 _startTime, uint256 _endTime) public {\r\n    \r\n\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    ledToken = LedTokenInterface(_tokenAddress);\r\n\r\n    assert(_tokenAddress != 0x0);\r\n    assert(_startTime > 0);\r\n    assert(_endTime > _startTime);\r\n  }\r\n\r\n    /**\r\n   * High level token purchase function\r\n   */\r\n  function() public payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * Low level token purchase function\r\n   * @param _beneficiary will receive the tokens.\r\n   */\r\n  function buyTokens(address _beneficiary) public payable whenNotPaused whenNotFinalized {\r\n    require(_beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n    require(weiAmount >= MIN_PURCHASE_OTHERSALES && weiAmount <= MAX_PURCHASE);\r\n    uint256 priceInWei = PRESALE_BASE_PRICE_IN_WEI;\r\n    \r\n    totalWeiRaised = totalWeiRaised.add(weiAmount);\r\n\r\n    uint256 bonusPercentage = determineBonus(weiAmount);\r\n    uint256 bonusTokens;\r\n\r\n    uint256 initialTokens = weiAmount.mul(DECIMALS_MULTIPLIER).div(priceInWei);\r\n    if(bonusPercentage>0){\r\n      uint256 initialDivided = initialTokens.div(100);\r\n      bonusTokens = initialDivided.mul(bonusPercentage);\r\n    } else {\r\n      bonusTokens = 0;\r\n    }\r\n    uint256 tokens = initialTokens.add(bonusTokens);\r\n    tokensMinted = tokensMinted.add(tokens);\r\n    require(tokensMinted < cap);\r\n\r\n    contributors = contributors.add(1);\r\n\r\n    ledToken.mint(_beneficiary, tokens);\r\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n  function determineBonus(uint256 _wei) public view returns (uint256) {\r\n    if(_wei > PRESALE_LEVEL_1) {\r\n      if(_wei > PRESALE_LEVEL_2) {\r\n        if(_wei > PRESALE_LEVEL_3) {\r\n          if(_wei > PRESALE_LEVEL_4) {\r\n            if(_wei > PRESALE_LEVEL_5) {\r\n              return PRESALE_PERCENTAGE_5;\r\n            } else {\r\n              return PRESALE_PERCENTAGE_4;\r\n            }\r\n          } else {\r\n            return PRESALE_PERCENTAGE_3;\r\n          }\r\n        } else {\r\n          return PRESALE_PERCENTAGE_2;\r\n        }\r\n      } else {\r\n        return PRESALE_PERCENTAGE_1;\r\n      }\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function finalize() public onlyOwner {\r\n    require(paused);\r\n    require(!finalized);\r\n    surplusTokens = cap - tokensMinted;\r\n    ledToken.mint(ledMultiSig, surplusTokens);\r\n    ledToken.transferControl(owner);\r\n\r\n    emit Finalized();\r\n\r\n    finalized = true;\r\n  }\r\n\r\n  function getInfo() public view returns(uint256, uint256, string, bool,  uint256, uint256, uint256, \r\n  bool, uint256, uint256){\r\n    uint256 decimals = 18;\r\n    string memory symbol = \"LED\";\r\n    bool transfersEnabled = ledToken.transfersEnabled();\r\n    return (\r\n      TOTAL_TOKENCAP, // Tokencap with the decimal point in place. should be 100.000.000\r\n      decimals, // Decimals\r\n      symbol,\r\n      transfersEnabled,\r\n      contributors,\r\n      totalWeiRaised,\r\n      tokenCap, // Tokencap for the first sale with the decimal point in place.\r\n      started,\r\n      startTime, // Start time and end time in Unix timestamp format with a length of 10 numbers.\r\n      endTime\r\n    );\r\n  }\r\n  \r\n  function getInfoLevels() public view returns(uint256, uint256, uint256, uint256, uint256, uint256, \r\n  uint256, uint256, uint256, uint256){\r\n    return (\r\n      PRESALE_LEVEL_1, // Amount of ether needed per bonus level\r\n      PRESALE_LEVEL_2,\r\n      PRESALE_LEVEL_3,\r\n      PRESALE_LEVEL_4,\r\n      PRESALE_LEVEL_5,\r\n      PRESALE_PERCENTAGE_1, // Bonus percentage per bonus level\r\n      PRESALE_PERCENTAGE_2,\r\n      PRESALE_PERCENTAGE_3,\r\n      PRESALE_PERCENTAGE_4,\r\n      PRESALE_PERCENTAGE_5\r\n    );\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title PrivateSale\r\n * PrivateSale allows investors to make token purchases and assigns them tokens based\r\n\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet as they arrive.\r\n */\r\ncontract PrivateSale is Crowdsale {\r\n\r\n  uint256 public tokenCap = PRIVATESALE_TOKENCAP;\r\n  uint256 public cap = tokenCap * DECIMALS_MULTIPLIER;\r\n  uint256 public weiCap = tokenCap * PRIVATESALE_BASE_PRICE_IN_WEI;\r\n\r\n  constructor(address _tokenAddress, uint256 _startTime, uint256 _endTime) public {\r\n    \r\n\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    ledToken = LedTokenInterface(_tokenAddress);\r\n\r\n    assert(_tokenAddress != 0x0);\r\n    assert(_startTime > 0);\r\n    assert(_endTime > _startTime);\r\n  }\r\n\r\n    /**\r\n   * High level token purchase function\r\n   */\r\n  function() public payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * Low level token purchase function\r\n   * @param _beneficiary will receive the tokens.\r\n   */\r\n  function buyTokens(address _beneficiary) public payable whenNotPaused whenNotFinalized {\r\n    require(_beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n\r\n    uint256 weiAmount = msg.value;\r\n    require(weiAmount >= MIN_PURCHASE_OTHERSALES && weiAmount <= MAX_PURCHASE);\r\n    uint256 priceInWei = PRIVATESALE_BASE_PRICE_IN_WEI;\r\n    totalWeiRaised = totalWeiRaised.add(weiAmount);\r\n\r\n    uint256 tokens = weiAmount.mul(DECIMALS_MULTIPLIER).div(priceInWei);\r\n    tokensMinted = tokensMinted.add(tokens);\r\n    require(tokensMinted < cap);\r\n\r\n    contributors = contributors.add(1);\r\n\r\n    ledToken.mint(_beneficiary, tokens);\r\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n  function finalize() public onlyOwner {\r\n    require(paused);\r\n    require(!finalized);\r\n    surplusTokens = cap - tokensMinted;\r\n    ledToken.mint(ledMultiSig, surplusTokens);\r\n    ledToken.transferControl(owner);\r\n\r\n    emit Finalized();\r\n\r\n    finalized = true;\r\n  }\r\n\r\n  function getInfo() public view returns(uint256, uint256, string, bool,  uint256, uint256, uint256, \r\n  bool, uint256, uint256){\r\n    uint256 decimals = 18;\r\n    string memory symbol = \"LED\";\r\n    bool transfersEnabled = ledToken.transfersEnabled();\r\n    return (\r\n      TOTAL_TOKENCAP, // Tokencap with the decimal point in place. should be 100.000.000\r\n      decimals, // Decimals\r\n      symbol,\r\n      transfersEnabled,\r\n      contributors,\r\n      totalWeiRaised,\r\n      tokenCap, // Tokencap for the first sale with the decimal point in place.\r\n      started,\r\n      startTime, // Start time and end time in Unix timestamp format with a length of 10 numbers.\r\n      endTime\r\n    );\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract TokenFactory {\r\n\r\n    function createCloneToken(\r\n        address _parentToken,\r\n        uint _snapshotBlock,\r\n        string _tokenName,\r\n        string _tokenSymbol\r\n        ) public returns (LedToken) {\r\n\r\n        LedToken newToken = new LedToken(\r\n            this,\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _tokenSymbol\r\n        );\r\n\r\n        newToken.transferControl(msg.sender);\r\n        return newToken;\r\n    }\r\n}\r\n\r\ncontract TokenFactoryInterface {\r\n\r\n    function createCloneToken(\r\n        address _parentToken,\r\n        uint _snapshotBlock,\r\n        string _tokenName,\r\n        string _tokenSymbol\r\n      ) public returns (LedToken newToken);\r\n}\r\n\r\n/**\r\n * @title Tokensale\r\n * Tokensale allows investors to make token purchases and assigns them tokens based\r\n\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet as they arrive.\r\n */\r\ncontract TokenSale is Crowdsale {\r\n\r\n  uint256 public tokenCap = ICO_TOKENCAP;\r\n  uint256 public cap = tokenCap * DECIMALS_MULTIPLIER;\r\n  uint256 public weiCap = tokenCap * ICO_BASE_PRICE_IN_WEI;\r\n\r\n  uint256 public allocatedTokens;\r\n\r\n  constructor(address _tokenAddress, uint256 _startTime, uint256 _endTime) public {\r\n    \r\n\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    ledToken = LedTokenInterface(_tokenAddress);\r\n\r\n    assert(_tokenAddress != 0x0);\r\n    assert(_startTime > 0);\r\n    assert(_endTime > _startTime);\r\n  }\r\n\r\n    /**\r\n   * High level token purchase function\r\n   */\r\n  function() public payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * Low level token purchase function\r\n   * @param _beneficiary will receive the tokens.\r\n   */\r\n  function buyTokens(address _beneficiary) public payable whenNotPaused whenNotFinalized {\r\n    require(_beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n    require(weiAmount >= MIN_PURCHASE_OTHERSALES && weiAmount <= MAX_PURCHASE);\r\n    uint256 priceInWei = ICO_BASE_PRICE_IN_WEI;\r\n    totalWeiRaised = totalWeiRaised.add(weiAmount);\r\n\r\n    uint256 bonusPercentage = determineBonus(weiAmount);\r\n    uint256 bonusTokens;\r\n\r\n    uint256 initialTokens = weiAmount.mul(DECIMALS_MULTIPLIER).div(priceInWei);\r\n    if(bonusPercentage>0){\r\n      uint256 initialDivided = initialTokens.div(100);\r\n      bonusTokens = initialDivided.mul(bonusPercentage);\r\n    } else {\r\n      bonusTokens = 0;\r\n    }\r\n    uint256 tokens = initialTokens.add(bonusTokens);\r\n    tokensMinted = tokensMinted.add(tokens);\r\n    require(tokensMinted < cap);\r\n\r\n    contributors = contributors.add(1);\r\n\r\n    ledToken.mint(_beneficiary, tokens);\r\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n  function determineBonus(uint256 _wei) public view returns (uint256) {\r\n    if(_wei > ICO_LEVEL_1) {\r\n      if(_wei > ICO_LEVEL_2) {\r\n        if(_wei > ICO_LEVEL_3) {\r\n          if(_wei > ICO_LEVEL_4) {\r\n            if(_wei > ICO_LEVEL_5) {\r\n              return ICO_PERCENTAGE_5;\r\n            } else {\r\n              return ICO_PERCENTAGE_4;\r\n            }\r\n          } else {\r\n            return ICO_PERCENTAGE_3;\r\n          }\r\n        } else {\r\n          return ICO_PERCENTAGE_2;\r\n        }\r\n      } else {\r\n        return ICO_PERCENTAGE_1;\r\n      }\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function allocateLedTokens() public onlyOwner whenNotFinalized {\r\n    require(!ledTokensAllocated);\r\n    allocatedTokens = LEDTEAM_TOKENS.mul(DECIMALS_MULTIPLIER);\r\n    ledToken.mint(ledMultiSig, allocatedTokens);\r\n    ledTokensAllocated = true;\r\n  }\r\n\r\n  function finalize() public onlyOwner {\r\n    require(paused);\r\n    require(ledTokensAllocated);\r\n\r\n    surplusTokens = cap - tokensMinted;\r\n    ledToken.mint(ledMultiSig, surplusTokens);\r\n\r\n    ledToken.finishMinting();\r\n    ledToken.enableTransfers(true);\r\n    emit Finalized();\r\n\r\n    finalized = true;\r\n  }\r\n\r\n  function getInfo() public view returns(uint256, uint256, string, bool,  uint256, uint256, uint256, \r\n  bool, uint256, uint256){\r\n    uint256 decimals = 18;\r\n    string memory symbol = \"LED\";\r\n    bool transfersEnabled = ledToken.transfersEnabled();\r\n    return (\r\n      TOTAL_TOKENCAP, // Tokencap with the decimal point in place. should be 100.000.000\r\n      decimals, // Decimals\r\n      symbol,\r\n      transfersEnabled,\r\n      contributors,\r\n      totalWeiRaised,\r\n      tokenCap, // Tokencap for the first sale with the decimal point in place.\r\n      started,\r\n      startTime, // Start time and end time in Unix timestamp format with a length of 10 numbers.\r\n      endTime\r\n    );\r\n  }\r\n  \r\n  function getInfoLevels() public view returns(uint256, uint256, uint256, uint256, uint256, uint256, \r\n  uint256, uint256, uint256, uint256){\r\n    return (\r\n      ICO_LEVEL_1, // Amount of ether needed per bonus level\r\n      ICO_LEVEL_2,\r\n      ICO_LEVEL_3,\r\n      ICO_LEVEL_4,\r\n      ICO_LEVEL_5,\r\n      ICO_PERCENTAGE_1, // Bonus percentage per bonus level\r\n      ICO_PERCENTAGE_2,\r\n      ICO_PERCENTAGE_3,\r\n      ICO_PERCENTAGE_4,\r\n      ICO_PERCENTAGE_5\r\n    );\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"importPresaleBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleBalancesLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockPresaleBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"transferControl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyAtCheckpoint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_snapshotBlock\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"createCloneToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"enableMasterTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterTransfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentSnapShotBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"name\":\"_parentToken\",\"type\":\"address\"},{\"name\":\"_parentSnapShotBlock\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cloneToken\",\"type\":\"address\"}],\"name\":\"NewCloneToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"LedToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000043aa88b0ad3cebf56a9b1936490bd72086e70b7b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000094c454420546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034c45440000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://2b0bf3ec435cc5002fdc6ecd2d837f02736ea387beb3972f482736651c5a2440"}]}