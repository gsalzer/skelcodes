{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary Utils {\r\n\r\n    uint  constant PRECISION = (10**18);\r\n    uint  constant MAX_DECIMALS = 18;\r\n\r\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n        if( dstDecimals >= srcDecimals ) {\r\n            require((dstDecimals-srcDecimals) <= MAX_DECIMALS);\r\n            return (srcQty * rate * (10**(dstDecimals-srcDecimals))) / PRECISION;\r\n        } else {\r\n            require((srcDecimals-dstDecimals) <= MAX_DECIMALS);\r\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals-dstDecimals)));\r\n        }\r\n    }\r\n\r\n    // function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n    //     if( srcDecimals >= dstDecimals ) {\r\n    //         require((srcDecimals-dstDecimals) <= MAX_DECIMALS);\r\n    //         return (PRECISION * dstQty * (10**(srcDecimals - dstDecimals))) / rate;\r\n    //     } else {\r\n    //         require((dstDecimals-srcDecimals) <= MAX_DECIMALS);\r\n    //         return (PRECISION * dstQty) / (rate * (10**(dstDecimals - srcDecimals)));\r\n    //     }\r\n    // }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract ERC20Extended is ERC20 {\r\n    uint256 public decimals;\r\n    string public name;\r\n    string public symbol;\r\n\r\n}\r\n\r\ncontract ComponentInterface {\r\n    string public name;\r\n    string public description;\r\n    string public category;\r\n    string public version;\r\n}\r\n\r\ncontract ExchangeInterface is ComponentInterface {\r\n    /*\r\n     * @dev Checks if a trading pair is available\r\n     * For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\r\n     * @param address _sourceAddress The token to sell for the destAddress.\r\n     * @param address _destAddress The token to buy with the source token.\r\n     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\r\n     * @return boolean whether or not the trading pair is supported by this exchange provider\r\n     */\r\n    function supportsTradingPair(address _srcAddress, address _destAddress, bytes32 _exchangeId)\r\n        external view returns(bool supported);\r\n\r\n    /*\r\n     * @dev Buy a single token with ETH.\r\n     * @param ERC20Extended _token The token to buy, should be an ERC20Extended address.\r\n     * @param uint _amount Amount of ETH used to buy this token. Make sure the value sent to this function is the same as the _amount.\r\n     * @param uint _minimumRate The minimum amount of tokens to receive for 1 ETH.\r\n     * @param address _depositAddress The address to send the bought tokens to.\r\n     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\r\n     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here.\r\n     * @return boolean whether or not the trade succeeded.\r\n     */\r\n    function buyToken\r\n        (\r\n        ERC20Extended _token, uint _amount, uint _minimumRate,\r\n        address _depositAddress, bytes32 _exchangeId, address _partnerId\r\n        ) external payable returns(bool success);\r\n\r\n    /*\r\n     * @dev Sell a single token for ETH. Make sure the token is approved beforehand.\r\n     * @param ERC20Extended _token The token to sell, should be an ERC20Extended address.\r\n     * @param uint _amount Amount of tokens to sell.\r\n     * @param uint _minimumRate The minimum amount of ETH to receive for 1 ERC20Extended token.\r\n     * @param address _depositAddress The address to send the bought tokens to.\r\n     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\r\n     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here\r\n     * @return boolean boolean whether or not the trade succeeded.\r\n     */\r\n    function sellToken\r\n        (\r\n        ERC20Extended _token, uint _amount, uint _minimumRate,\r\n        address _depositAddress, bytes32 _exchangeId, address _partnerId\r\n        ) external returns(bool success);\r\n}\r\n\r\ncontract KyberNetworkInterface {\r\n\r\n    function getExpectedRate(ERC20Extended src, ERC20Extended dest, uint srcQty)\r\n        external view returns (uint expectedRate, uint slippageRate);\r\n\r\n    function trade(\r\n        ERC20Extended source,\r\n        uint srcAmount,\r\n        ERC20Extended dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId)\r\n        external payable returns(uint);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract OlympusExchangeAdapterInterface is Ownable {\r\n\r\n    function supportsTradingPair(address _srcAddress, address _destAddress)\r\n        external view returns(bool supported);\r\n\r\n    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount)\r\n        external view returns(uint expectedRate, uint slippageRate);\r\n\r\n    function sellToken\r\n        (\r\n        ERC20Extended _token, uint _amount, uint _minimumRate,\r\n        address _depositAddress\r\n        ) external returns(bool success);\r\n\r\n    function buyToken\r\n        (\r\n        ERC20Extended _token, uint _amount, uint _minimumRate,\r\n        address _depositAddress\r\n        ) external payable returns(bool success);\r\n\r\n    function enable() external returns(bool);\r\n    function disable() external returns(bool);\r\n    function isEnabled() external view returns (bool success);\r\n\r\n    function setExchangeDetails(bytes32 _id, bytes32 _name) external returns(bool success);\r\n    function getExchangeDetails() external view returns(bytes32 _name, bool _enabled);\r\n\r\n}\r\n\r\ncontract ERC20NoReturn {\r\n    uint256 public decimals;\r\n    string public name;\r\n    string public symbol;\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public;\r\n    function approve(address spender, uint tokens) public;\r\n    function transferFrom(address from, address to, uint tokens) public;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract KyberNetworkAdapter is OlympusExchangeAdapterInterface{\r\n    using SafeMath for uint256;\r\n\r\n    KyberNetworkInterface public kyber;\r\n    address public exchangeAdapterManager;\r\n    bytes32 public exchangeId;\r\n    bytes32 public name;\r\n    ERC20Extended public constant ETH_TOKEN_ADDRESS = ERC20Extended(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    address public walletId = 0x09227deaeE08a5Ba9D6Eb057F922aDfAd191c36c;\r\n\r\n    bool public adapterEnabled;\r\n\r\n    modifier onlyExchangeAdapterManager() {\r\n        require(msg.sender == address(exchangeAdapterManager));\r\n        _;\r\n    }\r\n\r\n    constructor (KyberNetworkInterface _kyber, address _exchangeAdapterManager) public {\r\n        require(address(_kyber) != 0x0);\r\n        kyber = _kyber;\r\n        exchangeAdapterManager = _exchangeAdapterManager;\r\n        adapterEnabled = true;\r\n    }\r\n\r\n    function setExchangeAdapterManager(address _exchangeAdapterManager) external onlyOwner{\r\n        exchangeAdapterManager = _exchangeAdapterManager;\r\n    }\r\n\r\n    function setExchangeDetails(bytes32 _id, bytes32 _name)\r\n    external onlyExchangeAdapterManager returns(bool)\r\n    {\r\n        exchangeId = _id;\r\n        name = _name;\r\n        return true;\r\n    }\r\n\r\n    function getExchangeDetails()\r\n    external view returns(bytes32 _name, bool _enabled)\r\n    {\r\n        return (name, adapterEnabled);\r\n    }\r\n\r\n    function getExpectAmount(uint eth, uint destDecimals, uint rate) internal pure returns(uint){\r\n        return Utils.calcDstQty(eth, 18, destDecimals, rate);\r\n    }\r\n\r\n    function configAdapter(KyberNetworkInterface _kyber, address _walletId) external onlyOwner returns(bool success) {\r\n        if(address(_kyber) != 0x0){\r\n            kyber = _kyber;\r\n        }\r\n        if(_walletId != 0x0){\r\n            walletId = _walletId;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function supportsTradingPair(address _srcAddress, address _destAddress) external view returns(bool supported){\r\n        // Get price for selling one\r\n        uint amount = ERC20Extended(_srcAddress) == ETH_TOKEN_ADDRESS ? 10**18 : 10**ERC20Extended(_srcAddress).decimals();\r\n        uint price;\r\n        (price,) = this.getPrice(ERC20Extended(_srcAddress), ERC20Extended(_destAddress), amount);\r\n        return price > 0;\r\n    }\r\n\r\n    function enable() external onlyOwner returns(bool){\r\n        adapterEnabled = true;\r\n        return true;\r\n    }\r\n\r\n    function disable() external onlyOwner returns(bool){\r\n        adapterEnabled = false;\r\n        return true;\r\n    }\r\n\r\n    function isEnabled() external view returns (bool success) {\r\n        return adapterEnabled;\r\n    }\r\n\r\n    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount) external view returns(uint, uint){\r\n        return kyber.getExpectedRate(_sourceAddress, _destAddress, _amount);\r\n    }\r\n\r\n    function buyToken(ERC20Extended _token, uint _amount, uint _minimumRate, address _depositAddress)\r\n    external payable returns(bool) {\r\n        if (address(this).balance < _amount) {\r\n            return false;\r\n        }\r\n        require(msg.value == _amount);\r\n        uint slippageRate;\r\n\r\n        (, slippageRate) = kyber.getExpectedRate(ETH_TOKEN_ADDRESS, _token, _amount);\r\n        if(slippageRate < _minimumRate){\r\n            return false;\r\n        }\r\n\r\n        uint beforeTokenBalance = _token.balanceOf(_depositAddress);\r\n        slippageRate = _minimumRate;\r\n        kyber.trade.value(msg.value)(\r\n            ETH_TOKEN_ADDRESS,\r\n            _amount,\r\n            _token,\r\n            _depositAddress,\r\n            2**256 - 1,\r\n            slippageRate,\r\n            walletId);\r\n\r\n        require(_token.balanceOf(_depositAddress) > beforeTokenBalance);\r\n\r\n        return true;\r\n    }\r\n    function sellToken(ERC20Extended _token, uint _amount, uint _minimumRate, address _depositAddress)\r\n    external returns(bool success)\r\n    {\r\n        ERC20NoReturn(_token).approve(address(kyber), 0);\r\n        ERC20NoReturn(_token).approve(address(kyber), _amount);\r\n        uint slippageRate;\r\n        (,slippageRate) = kyber.getExpectedRate(_token, ETH_TOKEN_ADDRESS, _amount);\r\n\r\n        if(slippageRate < _minimumRate){\r\n            return false;\r\n        }\r\n        slippageRate = _minimumRate;\r\n\r\n        // uint beforeTokenBalance = _token.balanceOf(this);\r\n        kyber.trade(\r\n            _token,\r\n            _amount,\r\n            ETH_TOKEN_ADDRESS,\r\n            _depositAddress,\r\n            2**256 - 1,\r\n            slippageRate,\r\n            walletId);\r\n\r\n        // require(_token.balanceOf(this) < beforeTokenBalance);\r\n        // require((beforeTokenBalance - _token.balanceOf(this)) == _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdraw(uint amount) external onlyOwner {\r\n\r\n        require(amount <= address(this).balance);\r\n\r\n        uint sendAmount = amount;\r\n        if (amount == 0){\r\n            sendAmount = address(this).balance;\r\n        }\r\n        msg.sender.transfer(sendAmount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_TOKEN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeAdapterManager\",\"type\":\"address\"}],\"name\":\"setExchangeAdapterManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adapterEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_srcAddress\",\"type\":\"address\"},{\"name\":\"_destAddress\",\"type\":\"address\"}],\"name\":\"supportsTradingPair\",\"outputs\":[{\"name\":\"supported\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExchangeDetails\",\"outputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_enabled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnabled\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minimumRate\",\"type\":\"uint256\"},{\"name\":\"_depositAddress\",\"type\":\"address\"}],\"name\":\"buyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyber\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sourceAddress\",\"type\":\"address\"},{\"name\":\"_destAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeAdapterManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minimumRate\",\"type\":\"uint256\"},{\"name\":\"_depositAddress\",\"type\":\"address\"}],\"name\":\"sellToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"setExchangeDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kyber\",\"type\":\"address\"},{\"name\":\"_walletId\",\"type\":\"address\"}],\"name\":\"configAdapter\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kyber\",\"type\":\"address\"},{\"name\":\"_exchangeAdapterManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"KyberNetworkAdapter","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b7550000000000000000000000005a54a48e453fcf0c6bdfecd992640e5c09ef1d39","Library":"","SwarmSource":"bzzr://fa26a29249052577bc40384369d9af3ac94ab73925ec1c857eefae426ce26b00"}]}