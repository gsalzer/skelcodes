{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n \r\n/*\r\n- LifetimeLottery\r\n \r\n    - 0.005 ETH buy in, 0.002 of that goes to jackpot pool\r\n    - 2% chance of winning jackpot\r\n \r\n    - When you send 0.005 ETH to the contract, it adds your address to the lottery list. After that, the following results are possible:\r\n        - Your address is the winner and you receive 0.003 ETH. The contract hits the jackpot and you receive the whole jackpot too.\r\n        - Your address is the winner and you receive 0.003 ETH. The jackpot increases by 0.002 ETH.\r\n        - Any other address from the list is the winner and receives 0.003 ETH. The contract hits the jackpot and sends it to the winning address too.\r\n        - Any other address from the list is the winner and receives 0.003 ETH. The jackpot increases by 0.002 ETH\r\n*/\r\n \r\ncontract LifetimeLottery {\r\n   \r\n    uint internal constant MIN_SEND_VAL = 5000000000000000; //minimum amount (in wei) for getting registered on list (0.005 ETH)\r\n    uint internal constant JACKPOT_INC = 2000000000000000; //amount (in wei) which is added to the jackpot (0.002 ETH)\r\n    uint internal constant JACKPOT_CHANCE = 2; //the chance to hit the jackpot in percent\r\n   \r\n    uint internal nonce;\r\n    uint internal random; //number which picks the winner from lotteryList\r\n    uint internal jackpot; //current jackpot\r\n    uint internal jackpotNumber; //number, which is used to decide if the jackpot hits\r\n   \r\n    address[] internal lotteryList; //all registered addresses\r\n    address internal lastWinner;\r\n    address internal lastJackpotWinner;\r\n   \r\n    mapping(address => bool) addressMapping; //for checking quickly, if already registered\r\n    event LotteryLog(address adrs, string message);\r\n   \r\n    function LifetimeLottery() public {\r\n        nonce = (uint(msg.sender) + block.timestamp) % 100;\r\n    }\r\n     \r\n    function () public payable {\r\n        LotteryLog(msg.sender, \"Received new funds...\");\r\n        if(msg.value >= MIN_SEND_VAL) {\r\n            if(addressMapping[msg.sender] == false) { //--> cheaper access through map instead of a loop\r\n                addressMapping[msg.sender] = true;\r\n                lotteryList.push(msg.sender);\r\n                nonce++;\r\n                random = uint(keccak256(block.timestamp + block.number + uint(msg.sender) + nonce)) % lotteryList.length;\r\n                lastWinner = lotteryList[random];\r\n                jackpotNumber = uint(keccak256(block.timestamp + block.number + random)) % 100;\r\n                if(jackpotNumber < JACKPOT_CHANCE) {\r\n                    lastJackpotWinner = lastWinner;\r\n                    lastJackpotWinner.transfer(msg.value + jackpot);\r\n                    jackpot = 0;\r\n                    LotteryLog(lastJackpotWinner, \"Jackpot is hit!\");\r\n                } else {\r\n                    jackpot += JACKPOT_INC;\r\n                    lastWinner.transfer(msg.value - JACKPOT_INC);\r\n                    LotteryLog(lastWinner, \"We have a Winner!\");\r\n                }\r\n            } else {\r\n                msg.sender.transfer(msg.value);\r\n                LotteryLog(msg.sender, \"Failed: already joined! Sending back received ether...\");\r\n            }\r\n        } else {\r\n            msg.sender.transfer(msg.value);\r\n            LotteryLog(msg.sender, \"Failed: not enough Ether sent! Sending back received ether...\");\r\n        }\r\n    }\r\n   \r\n    function amountOfRegisters() public constant returns(uint) {\r\n        return lotteryList.length;\r\n    }\r\n   \r\n    function currentJackpotInWei() public constant returns(uint) {\r\n        return jackpot;\r\n    }\r\n   \r\n    function ourLastWinner() public constant returns(address) {\r\n        return lastWinner;\r\n    }\r\n   \r\n    function ourLastJackpotWinner() public constant returns(address) {\r\n        return lastJackpotWinner;\r\n    }\r\n   \r\n \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ourLastJackpotWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentJackpotInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfRegisters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ourLastWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"adrs\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"LotteryLog\",\"type\":\"event\"}]","ContractName":"LifetimeLottery","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2d7eff0168ee0a67fb130bf95beb18e9713158b27ccd6a21e74a151e02b54928"}]}