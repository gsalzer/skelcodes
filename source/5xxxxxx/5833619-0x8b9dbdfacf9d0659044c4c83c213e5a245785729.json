{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts/common/Ownable.sol\r\n\r\n\r\n/**\r\n * Ownable contract from Open zepplin\r\n * https://github.com/OpenZeppelin/openzeppelin-solidity/\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/common/ReentrancyGuard.sol\r\n\r\n/**\r\n * Reentrancy guard from open Zepplin :\r\n * https://github.com/OpenZeppelin/openzeppelin-solidity/\r\n *\r\n * @title Helps contracts guard agains reentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>\r\n * @notice If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private reentrancyLock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!reentrancyLock);\r\n    reentrancyLock = true;\r\n    _;\r\n    reentrancyLock = false;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/common/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/ERC20Interface.sol\r\n\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n//TODO : Flattener does not like aliased imports. Not needed in actual codebase.\r\n\r\ninterface IERC20Token {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n// File: contracts/interfaces/IBancorNetwork.sol\r\n\r\ncontract IBancorNetwork {\r\n    function convert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn) public payable returns (uint256);\r\n    function convertFor(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _for) public payable returns (uint256);\r\n    function convertForPrioritized2(\r\n        IERC20Token[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        address _for,\r\n        uint256 _block,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s)\r\n        public payable returns (uint256);\r\n\r\n    // deprecated, backward compatibility\r\n    function convertForPrioritized(\r\n        IERC20Token[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        address _for,\r\n        uint256 _block,\r\n        uint256 _nonce,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s)\r\n        public payable returns (uint256);\r\n}\r\n\r\n/*\r\n   Bancor Contract Registry interface\r\n*/\r\ncontract IContractRegistry {\r\n    function getAddress(bytes32 _contractName) public view returns (address);\r\n}\r\n\r\n// File: contracts/TokenPaymentBancor.sol\r\n\r\n/*\r\n * @title Token Payment using Bancor API v0.1\r\n * @author Haresh G\r\n * @dev This contract is used to convert ETH to an ERC20 token on the Bancor network.\r\n * @notice It does not support ERC20 to ERC20 transfer.\r\n */\r\n\r\ncontract IndTokenPayment is Ownable, ReentrancyGuard {  \r\n    using SafeMath for uint256;\r\n    IERC20Token[] public path;    \r\n    address public destinationWallet;       \r\n    //Minimum tokens per 1 ETH to convert\r\n    uint256 public minConversionRate;\r\n    IContractRegistry public bancorRegistry;\r\n    bytes32 public constant BANCOR_NETWORK = \"BancorNetwork\";\r\n    \r\n    event conversionSucceded(address from,uint256 fromTokenVal,address dest,uint256 minReturn,uint256 destTokenVal);    \r\n    event conversionMin(uint256 min);\r\n    \r\n    constructor(IERC20Token[] _path,\r\n                address destWalletAddr,\r\n                address bancorRegistryAddr,\r\n                uint256 minConvRate){\r\n        path = _path;\r\n        bancorRegistry = IContractRegistry(bancorRegistryAddr);\r\n        destinationWallet = destWalletAddr;         \r\n        minConversionRate = minConvRate;\r\n    }\r\n\r\n    function setConversionPath(IERC20Token[] _path) public onlyOwner {\r\n        path = _path;\r\n    }\r\n    \r\n    function setBancorRegistry(address bancorRegistryAddr) public onlyOwner {\r\n        bancorRegistry = IContractRegistry(bancorRegistryAddr);\r\n    }\r\n\r\n    function setMinConversionRate(uint256 minConvRate) public onlyOwner {\r\n        minConversionRate = minConvRate;\r\n    }    \r\n\r\n    function setDestinationWallet(address destWalletAddr) public onlyOwner {\r\n        destinationWallet = destWalletAddr;\r\n    }    \r\n    \r\n    function convertToInd() internal nonReentrant {\r\n        assert(bancorRegistry.getAddress(BANCOR_NETWORK) != address(0));\r\n        IBancorNetwork bancorNetwork = IBancorNetwork(bancorRegistry.getAddress(BANCOR_NETWORK));   \r\n        uint256 minReturn = minConversionRate.mul(msg.value);\r\n        uint256 convTokens =  bancorNetwork.convertFor.value(msg.value)(path,msg.value,minReturn,destinationWallet);        \r\n        assert(convTokens > 0);\r\n        emit conversionSucceded(msg.sender,msg.value,destinationWallet,minReturn,convTokens);                                                                    \r\n    }\r\n\r\n    //If accidentally tokens are transferred to this\r\n    //contract. They can be withdrawn by the followin interface.\r\n    function withdrawToken(IERC20Token anyToken) public onlyOwner nonReentrant returns(bool){\r\n        if( anyToken != address(0x0) ) {\r\n            assert(anyToken.transfer(destinationWallet, anyToken.balanceOf(this)));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //ETH cannot get locked in this contract. If it does, this can be used to withdraw\r\n    //the locked ether.\r\n    function withdrawEther() public onlyOwner nonReentrant returns(bool){\r\n        if(address(this).balance > 0){\r\n            destinationWallet.transfer(address(this).balance);\r\n        }        \r\n        return true;\r\n    }\r\n \r\n    function () public payable {\r\n        //Bancor contract can send the transfer back in case of error, which goes back into this\r\n        //function ,convertToInd is non-reentrant.\r\n        convertToInd();\r\n    }\r\n\r\n    /*\r\n    * Helper function\r\n    *\r\n    */\r\n\r\n    function getBancorContractAddress() public view returns(address) {\r\n        return bancorRegistry.getAddress(BANCOR_NETWORK);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"bancorRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destWalletAddr\",\"type\":\"address\"}],\"name\":\"setDestinationWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"destinationWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBancorContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setConversionPath\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minConversionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"anyToken\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_NETWORK\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minConvRate\",\"type\":\"uint256\"}],\"name\":\"setMinConversionRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"path\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bancorRegistryAddr\",\"type\":\"address\"}],\"name\":\"setBancorRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"destWalletAddr\",\"type\":\"address\"},{\"name\":\"bancorRegistryAddr\",\"type\":\"address\"},{\"name\":\"minConvRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fromTokenVal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"minReturn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"destTokenVal\",\"type\":\"uint256\"}],\"name\":\"conversionSucceded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"conversionMin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"IndTokenPayment","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000c87e2242a7fc5328bf1f32016f43496c10bbc4d4000000000000000000000000d1997064f0fef8748c1de9b5ba53468c548738b30000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000000005000000000000000000000000c0829421c1d260bd3cb3e0f06cfe2d52db2ce3150000000000000000000000001f573d6fb3f13d689ff844b4ce37794d79a7ff1c0000000000000000000000001f573d6fb3f13d689ff844b4ce37794d79a7ff1c00000000000000000000000032423158e8fbd2839e085626f8a98d86b2766de8000000000000000000000000f8e386eda857484f5a12e4b5daa9984e06e73705","Library":"","SwarmSource":"bzzr://1dceb61ddb8e2790f08bda0ebb500b5c92275daf7a7fbab28e468a10aef00591"}]}