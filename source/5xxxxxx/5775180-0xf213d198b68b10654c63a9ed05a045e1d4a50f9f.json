{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    // Required methods\r\n    function implementsERC721() public pure returns (bool);\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    // function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract FootballerAccessControl{\r\n\r\n  ///@dev Emited when contract is upgraded\r\n  event ContractUpgrade(address newContract);\r\n  //The address of manager (the account or contracts) that can execute action within the role.\r\n  address public managerAddress;\r\n\r\n  ///@dev keeps track whether the contract is paused.\r\n  bool public paused = false;\r\n\r\n  function FootballerAccessControl() public {\r\n    managerAddress = msg.sender;\r\n  }\r\n\r\n  /// @dev Access modifier for manager-only functionality\r\n  modifier onlyManager() {\r\n    require(msg.sender == managerAddress);\r\n    _;\r\n  }\r\n\r\n  ///@dev assigns a new address to act as the Manager.Only available to the current Manager.\r\n  function setManager(address _newManager) external onlyManager {\r\n    require(_newManager != address(0));\r\n    managerAddress = _newManager;\r\n  }\r\n\r\n  /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n  /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /// @dev Modifier to allow actions only when the contract IS paused\r\n  modifier whenPaused {\r\n      require(paused);\r\n      _;\r\n  }\r\n\r\n  /// @dev Called by manager to pause the contract. Used only when\r\n  ///  a bug or exploit is detected and we need to limit damage.\r\n  function pause() external onlyManager whenNotPaused {\r\n    paused = true;\r\n  }\r\n\r\n  /// @dev Unpauses the smart contract. Can only be called by the manager,\r\n  /// since one reason we may pause the contract is when manager accounts are compromised.\r\n  /// @notice This is public rather than external so it can be called by derived contracts.\r\n  function unpause() public onlyManager {\r\n    // can't unpause if contract was upgraded\r\n    paused = false;\r\n  }\r\n\r\n}\r\n\r\ncontract FootballerBase is FootballerAccessControl {\r\n  using SafeMath for uint256;\r\n  /*** events ***/\r\n  event Create(address owner, uint footballerId);\r\n  event Transfer(address _from, address _to, uint256 tokenId);\r\n\r\n  uint private randNonce = 0;\r\n\r\n  //球员/球星 属性\r\n  struct footballer {\r\n    uint price; //球员-价格 ， 球星-一口价 单位wei\r\n    //球员的战斗属性\r\n    uint defend; //防御\r\n    uint attack; //进攻\r\n    uint quality; //素质\r\n  }\r\n\r\n  //存球星和球员\r\n  footballer[] public footballers;\r\n  //将球员的id和球员的拥有者对应起来\r\n  mapping (uint256 => address) public footballerToOwner;\r\n\r\n  //记录拥有者有多少球员，在balanceOf（）内部使用来解决所有权计数\r\n  mapping (address => uint256) public ownershipTokenCount;\r\n\r\n  //从footballID 到 已批准调用transferFrom（）的地址的映射\r\n  //每个球员只能有一个批准的地址。零值表示没有批准\r\n  mapping (uint256 => address) public footballerToApproved;\r\n\r\n  // 将特定球员的所有权 赋给 某个地址\r\n  function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n    footballerToApproved[_tokenId] = address(0);\r\n    ownershipTokenCount[_to] = ownershipTokenCount[_to].add(1);\r\n    footballerToOwner[_tokenId] = _to;\r\n    ownershipTokenCount[_from] = ownershipTokenCount[_from].sub(1);\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  //管理员用于投放球星,和createStar函数一起使用，才能将球星完整信息保存起来\r\n  function _createFootballerStar(uint _price,uint _defend,uint _attack, uint _quality) internal onlyManager returns(uint) {\r\n      footballer memory _player = footballer({\r\n        price:_price,\r\n        defend:_defend,\r\n        attack:_attack,\r\n        quality:_quality\r\n      });\r\n      uint newFootballerId = footballers.push(_player) - 1;\r\n      footballerToOwner[newFootballerId] = managerAddress;\r\n      ownershipTokenCount[managerAddress] = ownershipTokenCount[managerAddress].add(1);\r\n      //记录这个球星可以进行交易\r\n      footballerToApproved[newFootballerId] = managerAddress;\r\n      require(newFootballerId == uint256(uint32(newFootballerId)));\r\n      emit Create(managerAddress, newFootballerId);\r\n      return newFootballerId;\r\n    }\r\n\r\n\r\n    //用于当用户买卡包时，随机生成球员\r\n    function createFootballer () internal returns (uint) {\r\n        footballer memory _player = footballer({\r\n          price: 0,\r\n          defend: _randMod(20,80),\r\n          attack: _randMod(20,80),\r\n          quality: _randMod(20,80)\r\n        });\r\n        uint newFootballerId = footballers.push(_player) - 1;\r\n      //  require(newFootballerId == uint256(uint32(newFootballerId)));\r\n        footballerToOwner[newFootballerId] = msg.sender;\r\n        ownershipTokenCount[msg.sender] =ownershipTokenCount[msg.sender].add(1);\r\n        emit Create(msg.sender, newFootballerId);\r\n        return newFootballerId;\r\n    }\r\n\r\n  // 生成一个从 _min 到 _max 范围内的随机数（不包括 _max）\r\n  function _randMod(uint _min, uint _max) private returns(uint) {\r\n      randNonce++;\r\n      uint modulus = _max - _min;\r\n      return uint(keccak256(now, msg.sender, randNonce)) % modulus + _min;\r\n  }\r\n\r\n}\r\n\r\ncontract FootballerOwnership is FootballerBase, ERC721 {\r\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n  string public constant name = \"CyptoWorldCup\";\r\n  string public constant symbol = \"CWC\";\r\n\r\n\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  //判断一个给定的地址是不是现在某个球员的拥有者\r\n  function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n    return footballerToOwner[_tokenId] == _claimant;\r\n  }\r\n\r\n  //判断一个给定的地址现在对于某个球员 是不是有 transferApproval\r\n  function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n    return footballerToApproved[_tokenId] == _claimant;\r\n  }\r\n\r\n  //给某地址的用户 对 球员有transfer的权利\r\n  function _approve(uint256 _tokenId, address _approved) internal {\r\n      footballerToApproved[_tokenId] = _approved;\r\n  }\r\n\r\n  //返回 owner 拥有的球员数\r\n  function balanceOf(address _owner) public view returns (uint256 count) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  //转移 球员 给 另一个地址\r\n  function transfer(address _to, uint256 _tokenId) public whenNotPaused {\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n    //只能send自己的球员\r\n    require(_owns(msg.sender, _tokenId));\r\n    //重新分配所有权，清除待批准 approvals ，发出转移事件\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  //授予另一个地址通过transferFrom（）转移特定球员的权利。\r\n  function approve(address _to, uint256 _tokenId) external whenNotPaused {\r\n    //只有球员的拥有者才有资格决定要把这个权利给谁\r\n    require(_owns(msg.sender, _tokenId));\r\n    _approve(_tokenId, _to);\r\n    emit Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  //转让由另一个地址所拥有的球员，该地址之前已经获得所有者的转让批准\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) external whenNotPaused {\r\n    require(_to != address(0));\r\n    //不允许转让本合同以防止意外滥用。\r\n    // 合约不应该拥有任何球员（除非 在创建球星之后并且在拍卖之前 非常短）。\r\n    require(_to != address(this));\r\n    require(_approvedFor(msg.sender, _tokenId));\r\n    require(_owns(_from, _tokenId));\r\n    //该函数定义在FootballerBase\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  //返回现在一共有多少（球员+球星）\r\n  function totalSupply() public view returns (uint) {\r\n    return footballers.length;\r\n  }\r\n\r\n  //返回该特定球员的拥有者的地址\r\n  function ownerOf(uint256 _tokenId) external view returns (address owner) {\r\n    owner = footballerToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  //返回该地址的用户拥有的球员的id\r\n  function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if(tokenCount == 0) {\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalpalyers = totalSupply();\r\n      uint256 resultIndex = 0;\r\n      uint256 footballerId;\r\n      for (footballerId = 0; footballerId < totalpalyers; footballerId++) {\r\n        if(footballerToOwner[footballerId] == _owner) {\r\n          result[resultIndex] = footballerId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n}\r\n\r\ncontract FootballerAction is FootballerOwnership {\r\n  //创建球星\r\n  function createFootballerStar(uint _price,uint _defend,uint _attack, uint _quality) public returns(uint) {\r\n      return _createFootballerStar(_price,_defend,_attack,_quality);\r\n  }\r\n\r\n  //抽卡包得球星\r\n  function CardFootballers() public payable returns (uint) {\r\n      uint price = 4000000000000 wei; //0.04 eth\r\n      require(msg.value >= price);\r\n      uint ballerCount = 14;\r\n      uint newFootballerId = 0;\r\n      for (uint i = 0; i < ballerCount; i++) {\r\n         newFootballerId = createFootballer();\r\n      }\r\n      managerAddress.transfer(msg.value);\r\n      return price;\r\n  }\r\n\r\n  function buyStar(uint footballerId,uint price) public payable  {\r\n    require(msg.value >= price);\r\n    //将球星的拥有权 交给 购买的用户\r\n    address holder = footballerToApproved[footballerId];\r\n    require(holder != address(0));\r\n    _transfer(holder,msg.sender,footballerId);\r\n    //给卖家转钱\r\n    holder.transfer(msg.value);\r\n  }\r\n\r\n  //用户出售自己拥有的球员或球星\r\n  function sell(uint footballerId,uint price) public returns(uint) {\r\n    require(footballerToOwner[footballerId] == msg.sender);\r\n    require(footballerToApproved[footballerId] == address(0));\r\n    footballerToApproved[footballerId] = msg.sender;\r\n    footballers[footballerId].price = price;\r\n  }\r\n\r\n  //显示球队\r\n  function getTeamBallers(address actor) public view returns (uint[]) {\r\n    uint len = footballers.length;\r\n    uint count=0;\r\n    for(uint i = 0; i < len; i++) {\r\n        if(_owns(actor, i)){\r\n          if(footballerToApproved[i] == address(0)){\r\n            count++;\r\n          }\r\n       }\r\n    }\r\n    uint[] memory res = new uint256[](count);\r\n    uint index = 0;\r\n    for(i = 0; i < len; i++) {\r\n      if(_owns(actor, i)){\r\n          if(footballerToApproved[i] == address(0)){\r\n            res[index] = i;\r\n            index++;\r\n          }\r\n        }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  //显示出售的球星+球员\r\n  function getSellBallers() public view returns (uint[]) {\r\n    uint len = footballers.length;\r\n    uint count = 0;\r\n    for(uint i = 0; i < len; i++) {\r\n        if(footballerToApproved[i] != address(0)){\r\n          count++;\r\n        }\r\n    }\r\n    uint[] memory res = new uint256[](count);\r\n    uint index = 0;\r\n    for( i = 0; i < len; i++) {\r\n        if(footballerToApproved[i] != address(0)){\r\n          res[index] = i;\r\n          index++;\r\n        }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  //获得球员+球星的总数量\r\n  function getAllBaller() public view returns (uint) {\r\n    uint len = totalSupply();\r\n    return len;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"footballerToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CardFootballers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"getTeamBallers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSellBallers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"footballers\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"defend\",\"type\":\"uint256\"},{\"name\":\"attack\",\"type\":\"uint256\"},{\"name\":\"quality\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_defend\",\"type\":\"uint256\"},{\"name\":\"_attack\",\"type\":\"uint256\"},{\"name\":\"_quality\",\"type\":\"uint256\"}],\"name\":\"createFootballerStar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownershipTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"footballerId\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllBaller\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"footballerToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"footballerId\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"buyStar\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"footballerId\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]","ContractName":"FootballerAction","CompilerVersion":"v0.4.25-nightly.2018.6.8+commit.81c5a6e4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://40d2679e4fed922e0b77944ce2477dad6010d91e246a0705578f8516d8a84b75"}]}