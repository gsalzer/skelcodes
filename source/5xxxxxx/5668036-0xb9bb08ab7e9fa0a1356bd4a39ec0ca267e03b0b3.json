{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  \r\n  constructor(){ \r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n  //transfer owner to another address\r\n  function transferOwnership(address _newOwner) onlyOwner {\r\n    if (_newOwner != address(0)) {\r\n      owner = _newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b > 0);\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      revert();\r\n    }\r\n  }\r\n}\r\n\r\ncontract Token {\r\n\r\n  uint256 public totalSupply;\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n  function approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract StandardToken is Token ,SafeMath{\r\n\r\n   /**\r\n   *\r\n   * Fix for the ERC20 short address attack\r\n   *\r\n   * http://vessenes.com/the-erc20-short-address-attack-explained/\r\n   */\r\n  modifier onlyPayloadSize(uint size) {   \r\n     if(msg.data.length != size + 4) {\r\n       revert();\r\n     }\r\n     _;\r\n  }\r\n\r\n  //transfer lock flag\r\n  bool transferLock = true;\r\n  //transfer modifier\r\n  modifier canTransfer() {\r\n    if (transferLock) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n  \r\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) canTransfer returns (bool success) {\r\n    \r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) canTransfer returns (bool success) {\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n    allowed[_from][msg.sender] = safeSub(_allowance, _value);\r\n    balances[_from] = safeSub(balances[_from], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n      return balances[_owner];\r\n  }\r\n\r\n   function approve(address _spender, uint256 _value) canTransfer returns (bool success) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\ncontract PAIStandardToken is StandardToken,Ownable{\r\n\r\n  /* Public variables of the token */\r\n\r\n  string public name;                   // name: eg pchain\r\n  uint256 public decimals;              //How many decimals to show.\r\n  string public symbol;                 //An identifier: eg PAI\r\n  address public wallet;                //ETH wallet address\r\n  uint public start;                    //crowd sale start time\r\n  uint public end;                      //Crowd sale first phase end time\r\n  uint public deadline;                 // Crowd sale deadline time\r\n\r\n\r\n  uint256 public teamShare = 25;        //Team share\r\n  uint256 public foundationShare = 25;  //Foundation share\r\n  uint256 public posShare = 15;         //POS share\r\n  uint256 public saleShare = 35;     //Private share\r\n  \r\n  \r\n  address internal saleAddr;                                 //private sale wallet address\r\n  uint256 public crowdETHTotal = 0;                 //The ETH amount of current crowdsale\r\n  mapping (address => uint256) public crowdETHs;    //record user's balance of crowdsale\r\n  uint256 public crowdPrice = 10000;                //crowdsale price 1(ETH):10000(PAI)\r\n  uint256 public crowdTarget = 5000 ether;          //The total ETH of crowdsale\r\n  bool public reflectSwitch = false;                // Whether to allow user to reflect PAI\r\n  bool public blacklistSwitch = true;               // Whether to allow owner to set blacklist\r\n  mapping(address => string) public reflects;       // reflect token to PAI address\r\n  \r\n\r\n  event PurchaseSuccess(address indexed _addr, uint256 _weiAmount,uint256 _crowdsaleEth,uint256 _balance);\r\n  event EthSweepSuccess(address indexed _addr, uint256 _value);\r\n  event SetReflectSwitchEvent(bool _b);\r\n  event ReflectEvent(address indexed _addr,string _paiAddr);\r\n  event BlacklistEvent(address indexed _addr,uint256 _b);\r\n  event SetTransferLockEvent(bool _b);\r\n  event CloseBlacklistSwitchEvent(bool _b);\r\n\r\n  constructor(\r\n      address _wallet,\r\n      uint _s,\r\n      uint _e,\r\n      uint _d,\r\n      address _teamAddr,\r\n      address _fundationAddr,\r\n      address _saleAddr,\r\n      address _posAddr\r\n      ) {\r\n      totalSupply = 2100000000000000000000000000;       // Update total supply\r\n      name = \"PCHAIN\";                  // Set the name for display purposes\r\n      decimals = 18;           // Amount of decimals for display purposes\r\n      symbol = \"PAI\";              // Set the symbol for display purposes\r\n      wallet = _wallet;                   // Set ETH wallet address\r\n      start = _s;                         // Set start time for crowsale\r\n      end = _e;                           // Set Crowd sale first phase end time\r\n      deadline = _d;                      // Set Crowd sale deadline time\r\n      saleAddr = _saleAddr; // Set sale account address\r\n\r\n      balances[_teamAddr] = safeMul(safeDiv(totalSupply,100),teamShare); //Team balance\r\n      balances[_fundationAddr] = safeMul(safeDiv(totalSupply,100),foundationShare); //Foundation balance\r\n      balances[_posAddr] = safeMul(safeDiv(totalSupply,100),posShare); //POS balance\r\n      balances[_saleAddr] = safeMul(safeDiv(totalSupply,100),saleShare) ; //Sale balance  \r\n      Transfer(address(0), _teamAddr,  balances[_teamAddr]);\r\n      Transfer(address(0), _fundationAddr,  balances[_fundationAddr]);\r\n      Transfer(address(0), _posAddr,  balances[_posAddr]);\r\n      Transfer(address(0), _saleAddr,  balances[_saleAddr]);\r\n  }\r\n  //set transfer lock\r\n  function setTransferLock(bool _lock) onlyOwner{\r\n      transferLock = _lock;\r\n      SetTransferLockEvent(_lock);\r\n  }\r\n  //Permanently turn off the blacklist switch \r\n  function closeBlacklistSwitch() onlyOwner{\r\n    blacklistSwitch = false;\r\n    CloseBlacklistSwitchEvent(false);\r\n  }\r\n  //set blacklist\r\n  function setBlacklist(address _addr) onlyOwner{\r\n      require(blacklistSwitch);\r\n      uint256 tokenAmount = balances[_addr];             //calculate user token amount\r\n      balances[_addr] = 0;//clear userâ€˜s PAI balance\r\n      balances[saleAddr] = safeAdd(balances[saleAddr],tokenAmount);  //add PAI tokenAmount to Sale\r\n      Transfer(_addr, saleAddr, tokenAmount);\r\n      BlacklistEvent(_addr,tokenAmount);\r\n  } \r\n\r\n  //set reflect switch\r\n  function setReflectSwitch(bool _s) onlyOwner{\r\n      reflectSwitch = _s;\r\n      SetReflectSwitchEvent(_s);\r\n  }\r\n  function reflect(string _paiAddress){\r\n      require(reflectSwitch);\r\n      reflects[msg.sender] = _paiAddress;\r\n      ReflectEvent(msg.sender,_paiAddress);\r\n  }\r\n\r\n  function purchase() payable{\r\n      require(block.timestamp <= deadline);                                 //the timestamp must be less than the deadline time\r\n      require(tx.gasprice <= 60000000000);\r\n      require(block.timestamp >= start);                                //the timestamp must be greater than the start time\r\n      uint256 weiAmount = msg.value;                                    // The amount purchased by the current user\r\n      require(weiAmount >= 0.1 ether);\r\n      crowdETHTotal = safeAdd(crowdETHTotal,weiAmount);                 // Calculate the total amount purchased by all users\r\n      require(crowdETHTotal <= crowdTarget);                            // The total amount is less than or equal to the target amount\r\n      uint256 userETHTotal = safeAdd(crowdETHs[msg.sender],weiAmount);  // Calculate the total amount purchased by the current user\r\n      if(block.timestamp <= end){                                       // whether the current timestamp is in the first phase\r\n        require(userETHTotal <= 0.4 ether);                             // whether the total amount purchased by the current user is less than 0.4ETH\r\n      }else{\r\n        require(userETHTotal <= 10 ether);                              // whether the total amount purchased by the current user is less than 10ETH\r\n      }      \r\n      \r\n      crowdETHs[msg.sender] = userETHTotal;                             // Record the total amount purchased by the current user\r\n\r\n      uint256 tokenAmount = safeMul(weiAmount,crowdPrice);             //calculate user token amount\r\n      balances[msg.sender] = safeAdd(tokenAmount,balances[msg.sender]);//recharge userâ€˜s PAI balance\r\n      balances[saleAddr] = safeSub(balances[saleAddr],tokenAmount);  //sub PAI tokenAmount from  Sale\r\n      wallet.transfer(weiAmount);\r\n      Transfer(saleAddr, msg.sender, tokenAmount);\r\n      PurchaseSuccess(msg.sender,weiAmount,crowdETHs[msg.sender],tokenAmount); \r\n  }\r\n\r\n  function () payable{\r\n      purchase();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdETHTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"crowdETHs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reflects\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeBlacklistSwitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_s\",\"type\":\"bool\"}],\"name\":\"setReflectSwitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"posShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"setTransferLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paiAddress\",\"type\":\"string\"}],\"name\":\"reflect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reflectSwitch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blacklistSwitch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_s\",\"type\":\"uint256\"},{\"name\":\"_e\",\"type\":\"uint256\"},{\"name\":\"_d\",\"type\":\"uint256\"},{\"name\":\"_teamAddr\",\"type\":\"address\"},{\"name\":\"_fundationAddr\",\"type\":\"address\"},{\"name\":\"_saleAddr\",\"type\":\"address\"},{\"name\":\"_posAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_crowdsaleEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"PurchaseSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"EthSweepSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_b\",\"type\":\"bool\"}],\"name\":\"SetReflectSwitchEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_paiAddr\",\"type\":\"string\"}],\"name\":\"ReflectEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_b\",\"type\":\"uint256\"}],\"name\":\"BlacklistEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_b\",\"type\":\"bool\"}],\"name\":\"SetTransferLockEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_b\",\"type\":\"bool\"}],\"name\":\"CloseBlacklistSwitchEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PAIStandardToken","CompilerVersion":"v0.4.25-nightly.2018.6.8+commit.81c5a6e4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000001091506ce9f1977a660c5ad4915cbd89e4e1a49000000000000000000000000000000000000000000000000000000005b0bd320000000000000000000000000000000000000000000000000000000005b0bef40000000000000000000000000000000000000000000000000000000005b0c7be0000000000000000000000000aedd98f86ca23656832ef2ab09b99655754a635400000000000000000000000034c3278b6d00b1fd6fe676e6756a12f4e15f9c990000000000000000000000007429f3eca2dca9f12fe0728c2f1ac198dbb64f850000000000000000000000008aac88533bafe1c765d81fd145c9d6b138aa38ab","Library":"","SwarmSource":"bzzr://6c6483db81383e0885a8976c5b5d16972b432717f06214ed0e481eb6a917802e"}]}