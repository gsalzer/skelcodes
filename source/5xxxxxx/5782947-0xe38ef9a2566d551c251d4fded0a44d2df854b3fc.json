{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\npragma experimental \"v0.5.0\";\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary Math {\r\n\r\n  struct Fraction {\r\n    uint256 numerator;\r\n    uint256 denominator;\r\n  }\r\n\r\n  function isPositive(Fraction memory fraction) internal pure returns (bool) {\r\n    return fraction.numerator > 0 && fraction.denominator > 0;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 r) {\r\n    r = a * b;\r\n    require((a == 0) || (r / a == b));\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256 r) {\r\n    r = a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256 r) {\r\n    require((r = a - b) <= a);\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 r) {\r\n    require((r = a + b) >= a);\r\n  }\r\n\r\n  function min(uint256 x, uint256 y) internal pure returns (uint256 r) {\r\n    return x <= y ? x : y;\r\n  }\r\n\r\n  function max(uint256 x, uint256 y) internal pure returns (uint256 r) {\r\n    return x >= y ? x : y;\r\n  }\r\n\r\n  function mulDiv(uint256 value, uint256 m, uint256 d) internal pure returns (uint256 r) {\r\n    r = value * m;\r\n    if (r / value == m) {\r\n      r /= d;\r\n    } else {\r\n      r = mul(value / d, m);\r\n    }\r\n  }\r\n\r\n  function mulDivCeil(uint256 value, uint256 m, uint256 d) internal pure returns (uint256 r) {\r\n    r = value * m;\r\n    if (r / value == m) {\r\n      if (r % d == 0) {\r\n        r /= d;\r\n      } else {\r\n        r = (r / d) + 1;\r\n      }\r\n    } else {\r\n      r = mul(value / d, m);\r\n      if (value % d != 0) {\r\n        r += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  function mul(uint256 x, Fraction memory f) internal pure returns (uint256) {\r\n    return mulDiv(x, f.numerator, f.denominator);\r\n  }\r\n\r\n  function mulCeil(uint256 x, Fraction memory f) internal pure returns (uint256) {\r\n    return mulDivCeil(x, f.numerator, f.denominator);\r\n  }\r\n\r\n  function div(uint256 x, Fraction memory f) internal pure returns (uint256) {\r\n    return mulDiv(x, f.denominator, f.numerator);\r\n  }\r\n\r\n  function divCeil(uint256 x, Fraction memory f) internal pure returns (uint256) {\r\n    return mulDivCeil(x, f.denominator, f.numerator);\r\n  }\r\n\r\n  function mul(Fraction memory x, Fraction memory y) internal pure returns (Math.Fraction) {\r\n    return Math.Fraction({\r\n      numerator: mul(x.numerator, y.numerator),\r\n      denominator: mul(x.denominator, y.denominator)\r\n    });\r\n  }\r\n}\r\n\r\ncontract FsTKColdWallet {\r\n  using Math for uint256;\r\n\r\n  event ConfirmationNeeded(address indexed initiator, bytes32 indexed operation, address indexed to, uint256 value, bytes data);\r\n  event Confirmation(address indexed authority, bytes32 indexed operation);\r\n  event Revoke(address indexed authority, bytes32 indexed operation);\r\n\r\n  event AuthorityChanged(address indexed oldAuthority, address indexed newAuthority);\r\n  event AuthorityAdded(address authority);\r\n  event AuthorityRemoved(address authority);\r\n\r\n  event RequirementChanged(uint256 required);\r\n  event DayLimitChanged(uint256 dayLimit);\r\n  event SpentTodayReset(uint256 spentToday);\r\n\r\n  event Deposit(address indexed from, uint256 value);\r\n  event SingleTransaction(address indexed authority, address indexed to, uint256 value, bytes data, address created);\r\n  event MultiTransaction(address indexed authority, bytes32 indexed operation, address indexed to, uint256 value, bytes data, address created);\r\n\r\n  struct TransactionInfo {\r\n    address to;\r\n    uint256 value;\r\n    bytes data;\r\n  }\r\n\r\n  struct PendingTransactionState {\r\n    TransactionInfo info;\r\n    uint256 confirmNeeded;\r\n    uint256 confirmBitmap;\r\n    uint256 index;\r\n  }\r\n\r\n  modifier onlyAuthority {\r\n    require(isAuthority(msg.sender));\r\n    _;\r\n  }\r\n\r\n  modifier confirmAndRun(bytes32 operation) {\r\n    if (confirmAndCheck(operation)) {\r\n      _;\r\n    }\r\n  }\r\n\r\n  uint256 constant MAX_AUTHORITIES = 250;\r\n\r\n  uint256 public requiredAuthorities;\r\n  uint256 public numAuthorities;\r\n\r\n  uint256 public dailyLimit;\r\n  uint256 public spentToday;\r\n  uint256 public lastDay;\r\n\r\n  address[256] public authorities;\r\n  mapping(address => uint256) public authorityIndex;\r\n  mapping(bytes32 => PendingTransactionState) public pendingTransaction;\r\n  bytes32[] public pendingOperation;\r\n\r\n  constructor(address[] _authorities, uint256 required, uint256 _daylimit) public {\r\n    require(\r\n      required > 0 &&\r\n      authorities.length >= required\r\n    );\r\n\r\n    numAuthorities = _authorities.length;\r\n    for (uint256 i = 0; i < _authorities.length; i += 1) {\r\n      authorities[1 + i] = _authorities[i];\r\n      authorityIndex[_authorities[i]] = 1 + i;\r\n    }\r\n\r\n    requiredAuthorities = required;\r\n\r\n    dailyLimit = _daylimit;\r\n    lastDay = today();\r\n  }\r\n\r\n  function() external payable {\r\n    if (msg.value > 0) {\r\n      emit Deposit(msg.sender, msg.value);\r\n    }\r\n  }\r\n\r\n  function getAuthority(uint256 index) public view returns (address) {\r\n    return authorities[index + 1];\r\n  }\r\n\r\n  function getAuthorityIndex(address authority) public view returns (uint256 index) {\r\n    index = authorityIndex[authority];\r\n    require(index > 0);\r\n  }\r\n\r\n  function isAuthority(address authority) public view returns (bool) {\r\n    return authorityIndex[authority] > 0;\r\n  }\r\n\r\n  function hasConfirmed(bytes32 operation, address _address) public view returns (bool) {\r\n    return (pendingTransaction[operation].confirmBitmap & (1 << getAuthorityIndex(_address))) != 0;\r\n  }\r\n\r\n  function changeAuthority(address from, address to) public confirmAndRun(keccak256(msg.data)) {\r\n    require(!isAuthority(to));\r\n\r\n    uint256 index = getAuthorityIndex(from);\r\n    authorities[index] = to;\r\n    authorityIndex[to] = index;\r\n    delete authorityIndex[from];\r\n    clearPending();\r\n\r\n    emit AuthorityChanged(from, to);\r\n  }\r\n\r\n  function addAuthority(address authority) public confirmAndRun(keccak256(msg.data)) {\r\n    require(!isAuthority(authority));\r\n    if (numAuthorities >= MAX_AUTHORITIES) {\r\n      reOrganizeAuthorities();\r\n    }\r\n    require(numAuthorities < MAX_AUTHORITIES);\r\n\r\n    numAuthorities += 1;\r\n    authorities[numAuthorities] = authority;\r\n    authorityIndex[authority] = numAuthorities;\r\n    clearPending();\r\n\r\n    emit AuthorityAdded(authority);\r\n  }\r\n\r\n  function removeAuthority(address authority) public confirmAndRun(keccak256(msg.data)) {\r\n    require(numAuthorities > requiredAuthorities);\r\n\r\n    uint256 index = getAuthorityIndex(authority);\r\n    delete authorities[index];\r\n    delete authorityIndex[authority];\r\n    clearPending();\r\n    reOrganizeAuthorities();\r\n\r\n    emit AuthorityRemoved(authority);\r\n  }\r\n\r\n  function setRequirement(uint256 required) public confirmAndRun(keccak256(msg.data)) {\r\n    require(numAuthorities >= requiredAuthorities);\r\n    clearPending();\r\n\r\n    emit RequirementChanged(requiredAuthorities = required);\r\n  }\r\n\r\n  function setDailyLimit(uint256 _dailyLimit) public confirmAndRun(keccak256(msg.data)) {\r\n    clearPending();\r\n\r\n    emit DayLimitChanged(dailyLimit = _dailyLimit);\r\n  }\r\n\r\n  function resetSpentToday() public confirmAndRun(keccak256(msg.data)) {\r\n    clearPending();\r\n\r\n    emit SpentTodayReset(spentToday);\r\n    delete spentToday;\r\n  }\r\n\r\n  function propose(\r\n    address to,\r\n    uint256 value,\r\n    bytes data\r\n  )\r\n    public\r\n    onlyAuthority\r\n    returns (bytes32 operation)\r\n  {\r\n    if ((data.length == 0 && checkAndUpdateLimit(value)) || requiredAuthorities == 1) {\r\n      emit SingleTransaction(msg.sender, to, value, data, execute0(to, value, data));\r\n    } else {\r\n      operation = keccak256(abi.encodePacked(msg.data, pendingOperation.length));\r\n      PendingTransactionState storage status = pendingTransaction[operation];\r\n      if (status.info.to == 0 && status.info.value == 0 && status.info.data.length == 0) {\r\n        status.info = TransactionInfo({\r\n          to: to,\r\n          value: value,\r\n          data: data\r\n        });\r\n      }\r\n\r\n      if (!confirm(operation)) {\r\n        emit ConfirmationNeeded(msg.sender, operation, to, value, data);\r\n      }\r\n    }\r\n  }\r\n\r\n  function revoke(bytes32 operation) public {\r\n    uint256 confirmFlag = 1 << getAuthorityIndex(msg.sender);\r\n    PendingTransactionState storage state = pendingTransaction[operation];\r\n    if (state.confirmBitmap & confirmFlag > 0) {\r\n      state.confirmNeeded += 1;\r\n      state.confirmBitmap &= ~confirmFlag;\r\n      emit Revoke(msg.sender, operation);\r\n    }\r\n  }\r\n\r\n  function confirm(bytes32 operation) public confirmAndRun(operation) returns (bool) {\r\n     PendingTransactionState storage status = pendingTransaction[operation];\r\n    if (status.info.to != 0 || status.info.value != 0 || status.info.data.length != 0) {\r\n      emit MultiTransaction(\r\n        msg.sender,\r\n        operation,\r\n        status.info.to,\r\n        status.info.value,\r\n        status.info.data,\r\n        execute0(status.info.to, status.info.value, status.info.data)\r\n      );\r\n      delete pendingTransaction[operation].info;\r\n\r\n      return true;\r\n    }\r\n  }\r\n\r\n  function execute0(\r\n    address to,\r\n    uint256 value,\r\n    bytes data\r\n  )\r\n    private\r\n    returns (address created)\r\n  {\r\n    if (to == 0) {\r\n      created = create0(value, data);\r\n    } else {\r\n      require(to.call.value(value)(data));\r\n    }\r\n  }\r\n\r\n  function create0(uint256 value, bytes code) internal returns (address _address) {\r\n    assembly {\r\n      _address := create(value, add(code, 0x20), mload(code))\r\n      if iszero(extcodesize(_address)) {\r\n        revert(0, 0)\r\n      }\r\n    }\r\n  }\r\n\r\n  function confirmAndCheck(bytes32 operation) private returns (bool) {\r\n    PendingTransactionState storage pending = pendingTransaction[operation];\r\n    if (pending.confirmNeeded == 0) {\r\n      pending.confirmNeeded = requiredAuthorities;\r\n      delete pending.confirmBitmap;\r\n      pending.index = pendingOperation.length;\r\n      pendingOperation.push(operation);\r\n    }\r\n\r\n    uint256 confirmFlag = 1 << getAuthorityIndex(msg.sender);\r\n\r\n    if (pending.confirmBitmap & confirmFlag == 0) {\r\n      emit Confirmation(msg.sender, operation);\r\n      if (pending.confirmNeeded <= 1) {\r\n        delete pendingOperation[pending.index];\r\n        delete pending.confirmNeeded;\r\n        delete pending.confirmBitmap;\r\n        delete pending.index;\r\n        return true;\r\n      } else {\r\n        pending.confirmNeeded -= 1;\r\n        pending.confirmBitmap |= confirmFlag;\r\n      }\r\n    }\r\n  }\r\n\r\n  function checkAndUpdateLimit(uint256 value) private returns (bool) {\r\n    if (today() > lastDay) {\r\n      spentToday = 0;\r\n      lastDay = today();\r\n    }\r\n\r\n    uint256 _spentToday = spentToday.add(value);\r\n    if (_spentToday <= dailyLimit) {\r\n      spentToday = _spentToday;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function today() private view returns (uint256) {\r\n    return block.timestamp / 1 days;\r\n  }\r\n\r\n  function reOrganizeAuthorities() private {\r\n    uint256 free = 1;\r\n    while (free < numAuthorities) {\r\n      while (free < numAuthorities && authorities[free] != 0) {\r\n        free += 1;\r\n      }\r\n      while (numAuthorities > 1 && authorities[numAuthorities] == 0) {\r\n        numAuthorities -= 1;\r\n      }\r\n      if (free < numAuthorities && authorities[numAuthorities] != 0 && authorities[free] == 0) {\r\n        authorities[free] = authorities[numAuthorities];\r\n        authorityIndex[authorities[free]] = free;\r\n        delete authorities[numAuthorities];\r\n      }\r\n    }\r\n  }\r\n\r\n  function clearPending() private {\r\n    for (uint256 i = 0; i < pendingOperation.length; i += 1) {\r\n      delete pendingTransaction[pendingOperation[i]];\r\n    }\r\n    delete pendingOperation;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingTransaction\",\"outputs\":[{\"components\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"info\",\"type\":\"tuple\"},{\"name\":\"confirmNeeded\",\"type\":\"uint256\"},{\"name\":\"confirmBitmap\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"isAuthority\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"addAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numAuthorities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorities\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingOperation\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetSpentToday\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"confirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"setRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"propose\",\"outputs\":[{\"name\":\"operation\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"changeAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorityIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dailyLimit\",\"type\":\"uint256\"}],\"name\":\"setDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredAuthorities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"operation\",\"type\":\"bytes32\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"removeAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spentToday\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"getAuthorityIndex\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAuthority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_authorities\",\"type\":\"address[]\"},{\"name\":\"required\",\"type\":\"uint256\"},{\"name\":\"_daylimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ConfirmationNeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAuthority\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"AuthorityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dayLimit\",\"type\":\"uint256\"}],\"name\":\"DayLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spentToday\",\"type\":\"uint256\"}],\"name\":\"SpentTodayReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"created\",\"type\":\"address\"}],\"name\":\"SingleTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operation\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"created\",\"type\":\"address\"}],\"name\":\"MultiTransaction\",\"type\":\"event\"}]","ContractName":"FsTKColdWallet","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"330000000","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000948774faf31af0807502e62df0bb3ec81c8acce7000000000000000000000000948744666663989b27c28e81cba27a4b7938b7a9","Library":"","SwarmSource":""}]}