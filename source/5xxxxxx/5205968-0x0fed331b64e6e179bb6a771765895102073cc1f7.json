{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Finalizable\r\n * @dev Base contract to finalize some features\r\n */\r\ncontract Finalizable is Ownable {\r\n    event Finish();\r\n\r\n    bool public finalized = false;\r\n\r\n    function finalize() public onlyOwner {\r\n        finalized = true;\r\n    }\r\n\r\n    modifier notFinalized() {\r\n        require(!finalized);\r\n        _;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Part of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract IToken {\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n}\r\n\r\n/**\r\n * @title Token Receivable\r\n * @dev Support transfer of ERC20 tokens out of this contract's address\r\n * @dev Even if we don't intend for people to send them here, somebody will\r\n */\r\ncontract TokenReceivable is Ownable {\r\n    event logTokenTransfer(address token, address to, uint256 amount);\r\n\r\n    function claimTokens(address _token, address _to) public onlyOwner returns (bool) {\r\n        IToken token = IToken(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        if (token.transfer(_to, balance)) {\r\n            logTokenTransfer(_token, _to, balance);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract EventDefinitions {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Mint(address indexed to, uint256 amount);\r\n    event Burn(address indexed burner, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract Token is Finalizable, TokenReceivable, EventDefinitions {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"FairWin Token\";\r\n    uint8 public decimals = 8;\r\n    string public symbol = \"FWIN\";\r\n\r\n    Controller controller;\r\n\r\n    // message of the day\r\n    string public motd;\r\n\r\n    function setController(address _controller) public onlyOwner notFinalized {\r\n        controller = Controller(_controller);\r\n    }\r\n\r\n    modifier onlyController() {\r\n        require(msg.sender == address(controller));\r\n        _;\r\n    }\r\n\r\n    modifier onlyPayloadSize(uint256 numwords) {\r\n        assert(msg.data.length >= numwords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return controller.balanceOf(_owner);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return controller.totalSupply();\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public\r\n    onlyPayloadSize(2)\r\n    returns (bool success) {\r\n        success = controller.transfer(msg.sender, _to, _value);\r\n        if (success) {\r\n            Transfer(msg.sender, _to, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public\r\n    onlyPayloadSize(3)\r\n    returns (bool success) {\r\n        success = controller.transferFrom(msg.sender, _from, _to, _value);\r\n        if (success) {\r\n            Transfer(_from, _to, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n    onlyPayloadSize(2)\r\n    returns (bool success) {\r\n        //promote safe user behavior\r\n        require(controller.allowance(msg.sender, _spender) == 0);\r\n\r\n        success = controller.approve(msg.sender, _spender, _value);\r\n        if (success) {\r\n            Approval(msg.sender, _spender, _value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public\r\n    onlyPayloadSize(2)\r\n    returns (bool success) {\r\n        success = controller.increaseApproval(msg.sender, _spender, _addedValue);\r\n        if (success) {\r\n            uint256 newValue = controller.allowance(msg.sender, _spender);\r\n            Approval(msg.sender, _spender, newValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public\r\n    onlyPayloadSize(2)\r\n    returns (bool success) {\r\n        success = controller.decreaseApproval(msg.sender, _spender, _subtractedValue);\r\n        if (success) {\r\n            uint newValue = controller.allowance(msg.sender, _spender);\r\n            Approval(msg.sender, _spender, newValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return controller.allowance(_owner, _spender);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _amount The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _amount) public\r\n    onlyPayloadSize(1)\r\n    {\r\n        bool success = controller.burn(msg.sender, _amount);\r\n        if (success) {\r\n            Burn(msg.sender, _amount);\r\n        }\r\n    }\r\n\r\n    function controllerTransfer(address _from, address _to, uint256 _value) public onlyController {\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function controllerApprove(address _owner, address _spender, uint256 _value) public onlyController {\r\n        Approval(_owner, _spender, _value);\r\n    }\r\n\r\n    function controllerBurn(address _burner, uint256 _value) public onlyController {\r\n        Burn(_burner, _value);\r\n    }\r\n\r\n    function controllerMint(address _to, uint256 _value) public onlyController {\r\n        Mint(_to, _value);\r\n    }\r\n\r\n    event Motd(string message);\r\n\r\n    function setMotd(string _motd) public onlyOwner {\r\n        motd = _motd;\r\n        Motd(_motd);\r\n    }\r\n}\r\n\r\ncontract Controller is Finalizable {\r\n\r\n    Ledger public ledger;\r\n    Token public token;\r\n\r\n    function setToken(address _token) public onlyOwner {\r\n        token = Token(_token);\r\n    }\r\n\r\n    function setLedger(address _ledger) public onlyOwner {\r\n        ledger = Ledger(_ledger);\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == address(token));\r\n        _;\r\n    }\r\n\r\n    modifier onlyLedger() {\r\n        require(msg.sender == address(ledger));\r\n        _;\r\n    }\r\n\r\n    function totalSupply() public onlyToken view returns (uint256) {\r\n        return ledger.totalSupply();\r\n    }\r\n\r\n    function balanceOf(address _a) public onlyToken view returns (uint256) {\r\n        return ledger.balanceOf(_a);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public onlyToken view returns (uint256) {\r\n        return ledger.allowance(_owner, _spender);\r\n    }\r\n\r\n    function transfer(address _from, address _to, uint256 _value) public\r\n    onlyToken\r\n    returns (bool) {\r\n        return ledger.transfer(_from, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _spender, address _from, address _to, uint256 _value) public\r\n    onlyToken\r\n    returns (bool) {\r\n        return ledger.transferFrom(_spender, _from, _to, _value);\r\n    }\r\n\r\n    function burn(address _owner, uint256 _amount) public\r\n    onlyToken\r\n    returns (bool) {\r\n        return ledger.burn(_owner, _amount);\r\n    }\r\n\r\n    function approve(address _owner, address _spender, uint256 _value) public\r\n    onlyToken\r\n    returns (bool) {\r\n        return ledger.approve(_owner, _spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _owner, address _spender, uint256 _addedValue) public\r\n    onlyToken\r\n    returns (bool) {\r\n        return ledger.increaseApproval(_owner, _spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _owner, address _spender, uint256 _subtractedValue) public\r\n    onlyToken\r\n    returns (bool) {\r\n        return ledger.decreaseApproval(_owner, _spender, _subtractedValue);\r\n    }\r\n}\r\n\r\ncontract Ledger is Finalizable {\r\n    using SafeMath for uint256;\r\n\r\n    address public controller;\r\n    mapping(address => uint256) internal balances;\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n    uint256 totalSupply_;\r\n    bool public mintingFinished = false;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    function setController(address _controller) public onlyOwner notFinalized {\r\n        controller = _controller;\r\n    }\r\n\r\n    modifier onlyController() {\r\n        require(msg.sender == controller);\r\n        _;\r\n    }\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    function finishMinting() public onlyOwner canMint {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _from msg.sender from controller.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _from, address _to, uint256 _value) public onlyController returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _spender, address _from, address _to, uint256 _value) public onlyController returns (bool) {\r\n        uint256 allow = allowed[_from][_spender];\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allow);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][_spender] = allow.sub(_value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _owner, address _spender, uint256 _value) public onlyController returns (bool) {\r\n        //require user to set to zero before resetting to nonzero\r\n        if ((_value != 0) && (allowed[_owner][_spender] != 0)) {\r\n            return false;\r\n        }\r\n\r\n        allowed[_owner][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _owner, address _spender, uint256 _addedValue) public onlyController returns (bool) {\r\n        allowed[_owner][_spender] = allowed[_owner][_spender].add(_addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _owner, address _spender, uint256 _subtractedValue) public onlyController returns (bool) {\r\n        uint256 oldValue = allowed[_owner][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[_owner][_spender] = 0;\r\n        } else {\r\n            allowed[_owner][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _amount The amount of token to be burned.\r\n     */\r\n    function burn(address _burner, uint256 _amount) public onlyController returns (bool) {\r\n        require(balances[_burner] >= _amount);\r\n        // no need to require _amount <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        balances[_burner] = balances[_burner].sub(_amount);\r\n        totalSupply_ = totalSupply_.sub(_amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) public canMint returns (bool) {\r\n        require(msg.sender == controller || msg.sender == owner);\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"motd\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"controllerMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_motd\",\"type\":\"string\"}],\"name\":\"setMotd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"controllerApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burner\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"controllerBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"controllerTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Motd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"logTokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ea2046b066a9fcd4d48cb56ba89538478a2443ce898815325e7e4b51f96e7447"}]}