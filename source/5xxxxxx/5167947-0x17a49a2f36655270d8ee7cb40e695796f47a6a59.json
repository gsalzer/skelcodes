{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ninterface tokenRecipient {function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public supporter;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event SupporterTransferred(address indexed previousSupporter, address indexed newSupporter);\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n        supporter = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrSupporter {\r\n        require(msg.sender == owner || msg.sender == supporter);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function transferSupporter(address newSupporter) public onlyOwner {\r\n        require(newSupporter != address(0));\r\n        SupporterTransferred(supporter, newSupporter);\r\n        supporter = newSupporter;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract CryptoMarketShortCoin is Owned {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"CRYPTO MARKET SHORT COIN\";\r\n    string public symbol = \"CMSC\";\r\n    string public version = \"2.0\";\r\n    uint8 public decimals = 18;\r\n    uint256 public decimalsFactor = 10 ** 18;\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public marketCap;\r\n    uint256 public buyFactor = 12500;\r\n    uint256 public buyFactorPromotion = 15000;\r\n    uint8 public promotionsAvailable = 50;\r\n\r\n    bool public buyAllowed = true;\r\n\r\n    // This creates an array with all balances\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    // This notifies clients about the amount minted\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    // This generates a public event Approval\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function CryptoMarketShortCoin(uint256 initialMarketCap) {\r\n        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply\r\n        marketCap = initialMarketCap;\r\n        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)\r\n        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (bets, marketcap changes ...)\r\n        allowance[this][owner] = totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 _balance) {\r\n        // Return the balance for the specific address\r\n        return balanceOf[_owner];\r\n    }\r\n\r\n    function allowanceOf(address _address) public constant returns (uint256 _allowance) {\r\n        return allowance[_address][msg.sender];\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256 _totalSupply) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function circulatingSupply() public constant returns (uint256 _circulatingSupply) {\r\n        return totalSupply.sub(balanceOf[owner]);\r\n    }\r\n\r\n    /* Internal transfer, can only be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(balanceOf[_from] >= _value);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_to].add(_value) > balanceOf[_to]);\r\n        // Check for overflows\r\n        balanceOf[_from] -= _value;\r\n        // Subtract from the sender\r\n        balanceOf[_to] += _value;\r\n        // Add the same to the recipient\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Destroy tokens\r\n    *\r\n    * Remove `_value` tokens from the system irreversibly\r\n    *\r\n    * @param _value the amount of money to burn\r\n    */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;\r\n        // Subtract from the sender\r\n        totalSupply -= _value;\r\n        // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Destroy tokens from other account\r\n    *\r\n    * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n    *\r\n    * @param _from the address of the sender\r\n    * @param _value the amount of money to burn\r\n    */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);\r\n        // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        // Check allowance\r\n        balanceOf[_from] -= _value;\r\n        // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;\r\n        // Subtract from the sender's allowance\r\n        totalSupply -= _value;\r\n        // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Buy function to purchase tokens from ether\r\n     */\r\n    function () payable {\r\n        require(buyAllowed);\r\n        // calculates the amount\r\n        uint256 amount = calcAmount(msg.value);\r\n        // checks if it has enough to sell\r\n        require(balanceOf[this] >= amount);\r\n        if (promotionsAvailable > 0 && msg.value >= 100000000000000000) { // min 0.1 ETH\r\n            promotionsAvailable -= 1;\r\n        }\r\n        balanceOf[msg.sender] += amount;\r\n        // adds the amount to buyer's balance\r\n        balanceOf[this] -= amount;\r\n        // subtracts amount from seller's balance\r\n        Transfer(this, msg.sender, amount);\r\n        // execute an event reflecting the change\r\n    }\r\n\r\n    /**\r\n     * Calculates the buy in amount\r\n     * @param value The invested value (wei)\r\n     * @return amount The returned amount in CMSC wei\r\n     */\r\n    function calcAmount(uint256 value) private view returns (uint256 amount) {\r\n        if (promotionsAvailable > 0 && value >= 100000000000000000) { // min 0.1 ETH\r\n            amount = msg.value.mul(buyFactorPromotion);\r\n        }\r\n        else {\r\n            amount = msg.value.mul(buyFactor);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n        totalSupply = totalSupply += _amount;\r\n        balanceOf[_to] = balanceOf[_to] += _amount;\r\n        allowance[this][msg.sender] += _amount;\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Administrative functions\r\n\r\n    /**\r\n     * Function to update current market capitalization of all crypto currencies\r\n     * @param _newMarketCap The new market capitalization of all crypto currencies in USD\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function updateMarketCap(uint256 _newMarketCap) public onlyOwnerOrSupporter returns (bool){\r\n        uint256 newTokenCount = (balanceOf[this].mul((_newMarketCap.mul(decimalsFactor)).div(marketCap))).div(decimalsFactor);\r\n        // Market cap went UP\r\n        // burn marketCap change percentage from balanceOf[this]\r\n        if (_newMarketCap < marketCap) {\r\n            uint256 tokensToBurn = balanceOf[this].sub(newTokenCount);\r\n            burnFrom(this, tokensToBurn);\r\n        }\r\n        // Market cap went DOWN\r\n        // mint marketCap change percentage and add to balanceOf[this]\r\n        else if (_newMarketCap > marketCap) {\r\n            uint256 tokensToMint = newTokenCount.sub(balanceOf[this]);\r\n            mint(this, tokensToMint);\r\n        }\r\n        // no change, do nothing\r\n        marketCap = _newMarketCap;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * WD function\r\n     */\r\n    function wd(uint256 _amount) public onlyOwner {\r\n        require(this.balance >= _amount);\r\n        owner.transfer(_amount);\r\n    }\r\n\r\n    /**\r\n     * Function to enable/disable Smart Contract buy-in\r\n     * @param _buyAllowed New status for buyin allowance\r\n     */\r\n    function updateBuyStatus(bool _buyAllowed) public onlyOwner {\r\n        buyAllowed = _buyAllowed;\r\n    }\r\n\r\n    // Betting functions\r\n\r\n    struct Bet {\r\n        address bettor;\r\n        string coin;\r\n        uint256 betAmount;\r\n        uint256 initialMarketCap;\r\n        uint256 finalMarketCap;\r\n        uint256 timeStampCreation;\r\n        uint256 timeStampEvaluation;\r\n        uint8 status;\r\n        //  0 = NEW, 10 = FINISHED, 2x = FINISHED MANUALLY (x=reason), 9x = ERROR\r\n        string auth;\r\n    }\r\n\r\n    // Bet Mapping\r\n    mapping(uint256 => Bet) public betMapping;\r\n    uint256 public numBets = 0;\r\n    bool public bettingAllowed = true;\r\n    uint256 public betFeeMin = 0;                           // e.g. 10000000000000000000 wei = 10 CMSC\r\n    uint256 public betFeePerMil = 0;                        // e.g. 9 (9 %o)\r\n    uint256 public betMaxAmount = 10000000000000000000000;  // e.g. 10000000000000000000000 wei = 10000 CMSC\r\n    uint256 public betMinAmount = 1;                        // e.g. 1 (> 0)\r\n\r\n    event BetCreated(uint256 betId);\r\n    event BetFinalized(uint256 betId);\r\n    event BetFinalizeFailed(uint256 betId);\r\n    event BetUpdated(uint256 betId);\r\n\r\n    /**\r\n     * Create a new bet in the system\r\n     * @param _coin Coin to bet against\r\n     * @param _betAmount Amount of CMSC bet\r\n     * @param _initialMarketCap Initial Market Cap of the coin in the bet\r\n     * @param _timeStampCreation Timestamp of the bet creation (UNIX sec)\r\n     * @param _timeStampEvaluation Timestamp of the bet evaluation (UNIX in sec)\r\n     * @param _auth Auth token (to prevent users to add fake transactions)\r\n     * @return betId ID of bet\r\n     */\r\n    function createBet(\r\n        string _coin,\r\n        uint256 _betAmount,\r\n        uint256 _initialMarketCap,\r\n        uint256 _timeStampCreation,\r\n        uint256 _timeStampEvaluation,\r\n        string _auth) public returns (uint256 betId) {\r\n\r\n        // Betting rules must be obeyed\r\n        require(bettingAllowed == true);\r\n        require(_betAmount <= betMaxAmount);\r\n        require(_betAmount >= betMinAmount);\r\n        require(_initialMarketCap > 0);\r\n\r\n        // Calculate bet amount (incl fees)\r\n        uint256 fee = _betAmount.mul(betFeePerMil).div(1000);\r\n        if(fee < betFeeMin) {\r\n            fee = betFeeMin;\r\n        }\r\n\r\n        // Check if user has enough CMSC to bet\r\n        require(balanceOf[msg.sender] >= _betAmount.add(fee));\r\n\r\n        // Transfer bet amount to contract\r\n        _transfer(msg.sender, this, _betAmount.add(fee));\r\n\r\n        // Increase betId\r\n        numBets = numBets.add(1);\r\n        betId = numBets;\r\n        betMapping[betId].bettor = msg.sender;\r\n        betMapping[betId].coin = _coin;\r\n        betMapping[betId].betAmount = _betAmount;\r\n        betMapping[betId].initialMarketCap = _initialMarketCap;\r\n        betMapping[betId].finalMarketCap = 0;\r\n        betMapping[betId].timeStampCreation = _timeStampCreation;\r\n        betMapping[betId].timeStampEvaluation = _timeStampEvaluation;\r\n        betMapping[betId].status = 0;\r\n        betMapping[betId].auth = _auth;\r\n\r\n        BetCreated(betId);\r\n\r\n        return betId;\r\n    }\r\n\r\n    /**\r\n     * Returns the bet with betId\r\n     * @param betId The id of the bet to query\r\n     * @return The bet object\r\n     */\r\n    function getBet(uint256 betId) public constant returns(\r\n        address bettor,\r\n        string coin,\r\n        uint256 betAmount,\r\n        uint256 initialMarketCap,\r\n        uint256 finalMarketCap,\r\n        uint256 timeStampCreation,\r\n        uint256 timeStampEvaluation,\r\n        uint8 status,\r\n        string auth) {\r\n\r\n        Bet memory bet = betMapping[betId];\r\n\r\n        return (\r\n        bet.bettor,\r\n        bet.coin,\r\n        bet.betAmount,\r\n        bet.initialMarketCap,\r\n        bet.finalMarketCap,\r\n        bet.timeStampCreation,\r\n        bet.timeStampEvaluation,\r\n        bet.status,\r\n        bet.auth\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Finalize a bet and transfer the resulting amount to the better\r\n     * @param betId ID of bet to finalize\r\n     * @param newMarketCap The new market cap of the coin\r\n     */\r\n    function finalizeBet(uint256 betId, uint256 currentTimeStamp, uint256 newMarketCap) public onlyOwnerOrSupporter {\r\n        require(betId <= numBets && betMapping[betId].status < 10);\r\n        require(currentTimeStamp >= betMapping[betId].timeStampEvaluation);\r\n        require(newMarketCap > 0);\r\n        uint256 resultAmount = (betMapping[betId].betAmount.mul(((betMapping[betId].initialMarketCap.mul(decimalsFactor)).div(uint256(newMarketCap))))).div(decimalsFactor);\r\n        // allow only changes of max 300% to prevent fatal errors and hacks from invalid marketCap input\r\n        // these bets will be handled manually\r\n        if(resultAmount <= betMapping[betId].betAmount.div(3) || resultAmount >= betMapping[betId].betAmount.mul(3)) {\r\n            betMapping[betId].status = 99;\r\n            BetFinalizeFailed(betId);\r\n        }\r\n        else {\r\n            // Transfer result amount back to better\r\n            _transfer(this, betMapping[betId].bettor, resultAmount);\r\n            betMapping[betId].finalMarketCap = newMarketCap;\r\n            betMapping[betId].status = 10;\r\n            BetFinalized(betId);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Function to update a bet manually\r\n    * @param _status New bet status (cannot be 10)\r\n    * @param _finalMarketCap New final market cap\r\n    */\r\n    function updateBet(uint256 betId, uint8 _status, uint256 _finalMarketCap) public onlyOwnerOrSupporter {\r\n        // we do not allow update to status 10 (to make it transparent this was a manual update)\r\n        require(_status != 10);\r\n        betMapping[betId].status = _status;\r\n        betMapping[betId].finalMarketCap = _finalMarketCap;\r\n        BetUpdated(betId);\r\n    }\r\n\r\n    /**\r\n    * Update the betting underlying betting rules in the contract (fees etc.)\r\n    * @param _bettingAllowed new _bettingAllowed\r\n    * @param _betFeeMin new _betFeeMin\r\n    * @param _betFeePerMil New _betFeePerMil\r\n    */\r\n    function updateBetRules(bool _bettingAllowed, uint256 _betFeeMin, uint256 _betFeePerMil, uint256 _betMinAmount, uint256 _betMaxAmount) public onlyOwner {\r\n        bettingAllowed = _bettingAllowed;\r\n        betFeeMin = _betFeeMin;\r\n        betFeePerMil = _betFeePerMil;\r\n        betMinAmount = _betMinAmount;\r\n        betMaxAmount = _betMaxAmount;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"getBet\",\"outputs\":[{\"name\":\"bettor\",\"type\":\"address\"},{\"name\":\"coin\",\"type\":\"string\"},{\"name\":\"betAmount\",\"type\":\"uint256\"},{\"name\":\"initialMarketCap\",\"type\":\"uint256\"},{\"name\":\"finalMarketCap\",\"type\":\"uint256\"},{\"name\":\"timeStampCreation\",\"type\":\"uint256\"},{\"name\":\"timeStampEvaluation\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"auth\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betFeePerMil\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betMinAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"betId\",\"type\":\"uint256\"},{\"name\":\"_status\",\"type\":\"uint8\"},{\"name\":\"_finalMarketCap\",\"type\":\"uint256\"}],\"name\":\"updateBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bettingAllowed\",\"type\":\"bool\"},{\"name\":\"_betFeeMin\",\"type\":\"uint256\"},{\"name\":\"_betFeePerMil\",\"type\":\"uint256\"},{\"name\":\"_betMinAmount\",\"type\":\"uint256\"},{\"name\":\"_betMaxAmount\",\"type\":\"uint256\"}],\"name\":\"updateBetRules\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"betId\",\"type\":\"uint256\"},{\"name\":\"currentTimeStamp\",\"type\":\"uint256\"},{\"name\":\"newMarketCap\",\"type\":\"uint256\"}],\"name\":\"finalizeBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyAllowed\",\"type\":\"bool\"}],\"name\":\"updateBuyStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betFeeMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bettingAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"wd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betMapping\",\"outputs\":[{\"name\":\"bettor\",\"type\":\"address\"},{\"name\":\"coin\",\"type\":\"string\"},{\"name\":\"betAmount\",\"type\":\"uint256\"},{\"name\":\"initialMarketCap\",\"type\":\"uint256\"},{\"name\":\"finalMarketCap\",\"type\":\"uint256\"},{\"name\":\"timeStampCreation\",\"type\":\"uint256\"},{\"name\":\"timeStampEvaluation\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"auth\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"name\":\"_circulatingSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supporter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyFactorPromotion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMarketCap\",\"type\":\"uint256\"}],\"name\":\"updateMarketCap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promotionsAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"allowanceOf\",\"outputs\":[{\"name\":\"_allowance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betMaxAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSupporter\",\"type\":\"address\"}],\"name\":\"transferSupporter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coin\",\"type\":\"string\"},{\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"name\":\"_initialMarketCap\",\"type\":\"uint256\"},{\"name\":\"_timeStampCreation\",\"type\":\"uint256\"},{\"name\":\"_timeStampEvaluation\",\"type\":\"uint256\"},{\"name\":\"_auth\",\"type\":\"string\"}],\"name\":\"createBet\",\"outputs\":[{\"name\":\"betId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalsFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialMarketCap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetFinalizeFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"BetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousSupporter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newSupporter\",\"type\":\"address\"}],\"name\":\"SupporterTransferred\",\"type\":\"event\"}]","ContractName":"CryptoMarketShortCoin","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000006b2773ee0e","Library":"","SwarmSource":"bzzr://901fc3622ea596fbb8dda3dd503faf7bf7b962d01b421f3a4ea2aebabb47eb69"}]}