{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\n/* \r\nSHOW ME WHAT YOU GOT\r\n        ___          \r\n    . -^   `--,      \r\n   /# =========`-_   \r\n  /# (--====___====\\ \r\n /#   .- --.  . --.| \r\n/##   |  * ) (   * ),\r\n|##   \\    /\\ \\   / |\r\n|###   ---   \\ ---  |\r\n|####      ___)    #|\r\n|######           ##|\r\n \\##### ---------- / \r\n  \\####           (  \r\n   `\\###          |  \r\n     \\###         |  \r\n      \\##        |   \r\n       \\###.    .)   \r\n        `======/    \r\n\r\n*/\r\n// similar to the original shrimper , with these changes:\r\n// 0. already initialized\r\n// 1. the \"free\" 314 Morties cost 0.001 eth (in line with the mining fee)\r\n// 2. bots should have a harder time, and whales can compete for the devfee\r\n\r\n\r\ncontract RickAndMortyShrimper{\r\n    string public name = \"RickAndMortyShrimper\";\r\n\tstring public symbol = \"RickAndMortyS\";\r\n    //uint256 morties_PER_RickAndMorty_PER_SECOND=1;\r\n    uint256 public morties_TO_HATCH_1RickAndMorty=86400;//for final version should be seconds in a day\r\n    uint256 public STARTING_RickAndMorty=314;\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    bool public initialized=true;\r\n    address public ceoAddress;\r\n    mapping (address => uint256) public hatcheryRickAndMorty;\r\n    mapping (address => uint256) public claimedmorties;\r\n    mapping (address => uint256) public lastHatch;\r\n    mapping (address => address) public referrals;\r\n    uint256 public marketmorties = 1000000000;\r\n    uint256 public RnMmasterReq=100000;\r\n    \r\n    function RickAndMortyShrimper() public{\r\n        ceoAddress=msg.sender;\r\n    }\r\n    modifier onlyCEO(){\r\n\t\trequire(msg.sender == ceoAddress );\r\n\t\t_;\r\n\t}\r\n    function becomePickleRick() public{\r\n        require(initialized);\r\n        require(hatcheryRickAndMorty[msg.sender]>=RnMmasterReq);\r\n        hatcheryRickAndMorty[msg.sender]=SafeMath.sub(hatcheryRickAndMorty[msg.sender],RnMmasterReq);\r\n        RnMmasterReq=SafeMath.add(RnMmasterReq,100000);//+100k RickAndMortys each time\r\n        ceoAddress=msg.sender;\r\n    }\r\n    function hatchMorties(address ref) public{\r\n        require(initialized);\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 mortiesUsed=getMymorties();\r\n        uint256 newRickAndMorty=SafeMath.div(mortiesUsed,morties_TO_HATCH_1RickAndMorty);\r\n        hatcheryRickAndMorty[msg.sender]=SafeMath.add(hatcheryRickAndMorty[msg.sender],newRickAndMorty);\r\n        claimedmorties[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        \r\n        //send referral morties\r\n        claimedmorties[referrals[msg.sender]]=SafeMath.add(claimedmorties[referrals[msg.sender]],SafeMath.div(mortiesUsed,5));\r\n        \r\n        //boost market to nerf RickAndMorty hoarding\r\n        marketmorties=SafeMath.add(marketmorties,SafeMath.div(mortiesUsed,10));\r\n    }\r\n    function sellMorties() public{\r\n        require(initialized);\r\n        uint256 hasmorties=getMymorties();\r\n        uint256 eggValue=calculatemortiesell(hasmorties);\r\n        uint256 fee=devFee(eggValue);\r\n        claimedmorties[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        marketmorties=SafeMath.add(marketmorties,hasmorties);\r\n        ceoAddress.transfer(fee);\r\n    }\r\n    function buyMorties() public payable{\r\n        require(initialized);\r\n        uint256 mortiesBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));\r\n        mortiesBought=SafeMath.sub(mortiesBought,devFee(mortiesBought));\r\n        ceoAddress.transfer(devFee(msg.value));\r\n        claimedmorties[msg.sender]=SafeMath.add(claimedmorties[msg.sender],mortiesBought);\r\n    }\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    function calculatemortiesell(uint256 morties) public view returns(uint256){\r\n        return calculateTrade(morties,marketmorties,this.balance);\r\n    }\r\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth,contractBalance,marketmorties);\r\n    }\r\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateEggBuy(eth,this.balance);\r\n    }\r\n    function devFee(uint256 amount) public view returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,4),100);\r\n    }\r\n    function seedMarket(uint256 morties) public payable{\r\n        require(marketmorties==0);\r\n        initialized=true;\r\n        marketmorties=morties;\r\n    }\r\n    function getFreeRickAndMorty() public payable{\r\n        require(initialized);\r\n        require(msg.value==0.001 ether); //similar to mining fee, prevents bots\r\n        ceoAddress.transfer(msg.value); //RnMmaster gets this entrance fee\r\n        require(hatcheryRickAndMorty[msg.sender]==0);\r\n        lastHatch[msg.sender]=now;\r\n        hatcheryRickAndMorty[msg.sender]=STARTING_RickAndMorty;\r\n    }\r\n    function getBalance() public view returns(uint256){\r\n        return this.balance;\r\n    }\r\n    function getMyRickAndMorty() public view returns(uint256){\r\n        return hatcheryRickAndMorty[msg.sender];\r\n    }\r\n    function getRnMmasterReq() public view returns(uint256){\r\n        return RnMmasterReq;\r\n    }\r\n    function getMymorties() public view returns(uint256){\r\n        return SafeMath.add(claimedmorties[msg.sender],getmortiesSinceLastHatch(msg.sender));\r\n    }\r\n    function getmortiesSinceLastHatch(address adr) public view returns(uint256){\r\n        uint256 secondsPassed=min(morties_TO_HATCH_1RickAndMorty,SafeMath.sub(now,lastHatch[adr]));\r\n        return SafeMath.mul(secondsPassed,hatcheryRickAndMorty[adr]);\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n    function transferOwnership() onlyCEO public {\r\n\t\tuint256 etherBalance = this.balance;\r\n\t\tceoAddress.transfer(etherBalance);\r\n\t}\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getMymorties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"morties\",\"type\":\"uint256\"}],\"name\":\"calculatemortiesell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"becomePickleRick\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketmorties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RnMmasterReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"morties\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFreeRickAndMorty\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchMorties\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"morties_TO_HATCH_1RickAndMorty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_RickAndMorty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcheryRickAndMorty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRnMmasterReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyMorties\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getmortiesSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedmorties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellMorties\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyRickAndMorty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"RickAndMortyShrimper","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://862c0a9c22f2848a690a0f3ff7450f0e58d513491c9353b0e92ace1fb656725a"}]}