{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract SimpleTGE is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // start and end timestamps (both inclusive) when sale is open\r\n  uint256 public publicTGEStartBlockTimeStamp;\r\n\r\n  uint256 public publicTGEEndBlockTimeStamp;\r\n\r\n  // address where funds are collected\r\n  address public fundsWallet;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  // sale cap in wei\r\n  uint256 public totalCapInWei;\r\n\r\n  // individual cap in wei\r\n  uint256 public individualCapInWei;\r\n\r\n  // how long the TRS subscription is open after the TGE.\r\n  uint256 public TRSOffset = 5 days;\r\n\r\n  mapping (address => bool) public whitelist;\r\n\r\n  address[] public contributors;\r\n  struct Contribution {\r\n    bool hasVested;\r\n    uint256 weiContributed;\r\n  }\r\n\r\n  mapping (address => Contribution)  public contributions;\r\n\r\n  modifier whilePublicTGEIsActive() {\r\n    require(block.timestamp >= publicTGEStartBlockTimeStamp && block.timestamp <= publicTGEEndBlockTimeStamp);\r\n    _;\r\n  }\r\n\r\n  modifier isWhitelisted() {\r\n    require(whitelist[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  function blacklistAddresses(address[] addrs) external onlyOwner returns(bool) {\r\n    require(addrs.length <= 100);\r\n    for (uint i = 0; i < addrs.length; i++) {\r\n      require(addrs[i] != address(0));\r\n      whitelist[addrs[i]] = false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function whitelistAddresses(address[] addrs) external onlyOwner returns(bool) {\r\n    require(addrs.length <= 100);\r\n    for (uint i = 0; i < addrs.length; i++) {\r\n      require(addrs[i] != address(0));\r\n      whitelist[addrs[i]] = true;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the address specified by owner.\r\n   */\r\n  function reclaimEther(address _beneficiary) external onlyOwner {\r\n    _beneficiary.transfer(this.balance);\r\n  }\r\n\r\n  function SimpleTGE (\r\n    address _fundsWallet,\r\n    uint256 _publicTGEStartBlockTimeStamp,\r\n    uint256 _publicTGEEndBlockTimeStamp,\r\n    uint256 _individualCapInWei,\r\n    uint256 _totalCapInWei\r\n  ) public \r\n  {\r\n    require(_publicTGEStartBlockTimeStamp >= block.timestamp);\r\n    require(_publicTGEEndBlockTimeStamp > _publicTGEStartBlockTimeStamp);\r\n    require(_fundsWallet != address(0));\r\n    require(_individualCapInWei > 0);\r\n    require(_individualCapInWei <= _totalCapInWei);\r\n    require(_totalCapInWei > 0);\r\n\r\n    fundsWallet = _fundsWallet;\r\n    publicTGEStartBlockTimeStamp = _publicTGEStartBlockTimeStamp;\r\n    publicTGEEndBlockTimeStamp = _publicTGEEndBlockTimeStamp;\r\n    individualCapInWei = _individualCapInWei;\r\n    totalCapInWei = _totalCapInWei;\r\n  }\r\n\r\n  // allows changing the individual cap.\r\n  function changeIndividualCapInWei(uint256 _individualCapInWei) onlyOwner external returns(bool) {\r\n      require(_individualCapInWei > 0);\r\n      require(_individualCapInWei < totalCapInWei);\r\n      individualCapInWei = _individualCapInWei;\r\n      return true;\r\n  }\r\n\r\n  // low level token purchase function\r\n  function contribute(bool _vestingDecision) internal {\r\n    // validations\r\n    require(msg.sender != address(0));\r\n    require(msg.value != 0);\r\n    require(weiRaised.add(msg.value) <= totalCapInWei);\r\n    require(contributions[msg.sender].weiContributed.add(msg.value) <= individualCapInWei);\r\n    // if we have not received any WEI from this address until now, then we add this address to contributors list.\r\n    if (contributions[msg.sender].weiContributed == 0) {\r\n      contributors.push(msg.sender);\r\n    }\r\n    contributions[msg.sender].weiContributed = contributions[msg.sender].weiContributed.add(msg.value);\r\n    weiRaised = weiRaised.add(msg.value);\r\n    contributions[msg.sender].hasVested = _vestingDecision;\r\n    fundsWallet.transfer(msg.value);\r\n  }\r\n\r\n  function contributeAndVest() external whilePublicTGEIsActive isWhitelisted payable {\r\n    contribute(true);\r\n  }\r\n\r\n  function contributeWithoutVesting() public whilePublicTGEIsActive isWhitelisted payable {\r\n    contribute(false);\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    contributeWithoutVesting();\r\n  }\r\n\r\n  // Vesting logic\r\n  // The following cases are checked for _beneficiary's actions:\r\n  function vest(bool _vestingDecision) external isWhitelisted returns(bool) {\r\n    bool existingDecision = contributions[msg.sender].hasVested;\r\n    require(existingDecision != _vestingDecision);\r\n    require(block.timestamp >= publicTGEStartBlockTimeStamp);\r\n    require(contributions[msg.sender].weiContributed > 0);\r\n    // Ensure vesting cannot be done once TRS starts\r\n    if (block.timestamp > publicTGEEndBlockTimeStamp) {\r\n      require(block.timestamp.sub(publicTGEEndBlockTimeStamp) <= TRSOffset);\r\n    }\r\n    contributions[msg.sender].hasVested = _vestingDecision;\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"publicTGEStartBlockTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vestingDecision\",\"type\":\"bool\"}],\"name\":\"vest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"whitelistAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"hasVested\",\"type\":\"bool\"},{\"name\":\"weiContributed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"blacklistAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TRSOffset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicTGEEndBlockTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_individualCapInWei\",\"type\":\"uint256\"}],\"name\":\"changeIndividualCapInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contributeAndVest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCapInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"individualCapInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contributeWithoutVesting\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fundsWallet\",\"type\":\"address\"},{\"name\":\"_publicTGEStartBlockTimeStamp\",\"type\":\"uint256\"},{\"name\":\"_publicTGEEndBlockTimeStamp\",\"type\":\"uint256\"},{\"name\":\"_individualCapInWei\",\"type\":\"uint256\"},{\"name\":\"_totalCapInWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SimpleTGE","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e39549998782169d1e91587a0d2e8652541e9b18000000000000000000000000000000000000000000000000000000005a8a1381000000000000000000000000000000000000000000000000000000005a8e07ff00000000000000000000000000000000000000000000000006623f9014ae000000000000000000000000000000000000000000000000010f0cf064dd59200000","Library":"","SwarmSource":"bzzr://813795d4b24e4c73b786c8a19cdf848065c324fb464994f42ee2841b044e26db"}]}