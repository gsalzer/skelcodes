{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract AgentContract {\r\n\r\n    address __owner;\r\n    address target;\r\n    mapping(address => uint256) agent_to_piece_of_10000;\r\n    address [] agents;\r\n    event SendEther(address addr, uint256 amount);\r\n\r\n    function AgentContract(address tar_main,address tar1,address tar2,uint256 stake1,uint256 stake2) public {\r\n        __owner = msg.sender;\r\n        agent_to_piece_of_10000[tar1] = stake1;\r\n        agents.push(tar1);\r\n        agent_to_piece_of_10000[tar2] = stake2;\r\n        agents.push(tar2);\r\n        target = tar_main;\r\n    }\r\n    function getTarget() public constant returns (address){\r\n        assert (msg.sender == __owner);\r\n        return target;\r\n    }\r\n    function listAgents() public constant returns (address []){\r\n        assert (msg.sender == __owner);\r\n        return agents;\r\n    }\r\n    function returnBalanseToTarget() public payable {\r\n        assert (msg.sender == __owner);\r\n        if (!target.send(this.balance)){\r\n            __owner.send(this.balance);\r\n        }\r\n    }\r\n    function() payable public {\r\n        uint256 summa = msg.value;\r\n        assert(summa >= 10000);\r\n        uint256 summa_rest = msg.value;\r\n        for (uint i=0; i<agents.length; i++){\r\n            uint256 piece_to_send = agent_to_piece_of_10000[agents[i]];\r\n            uint256 value_to_send = (summa * piece_to_send) / 10000;\r\n            summa_rest = summa_rest - value_to_send;\r\n            if (!agents[i].send(value_to_send)){\r\n                summa_rest = summa_rest + value_to_send;\r\n            }\r\n            else{\r\n              SendEther(agents[i], value_to_send);\r\n            }\r\n        }\r\n        if (!target.send(summa_rest)){\r\n            if (!msg.sender.send(summa_rest)){\r\n                __owner.send(summa_rest);\r\n                SendEther(__owner, summa_rest);\r\n            }\r\n            else{\r\n              SendEther(msg.sender, summa_rest);\r\n            }\r\n        }\r\n        else{\r\n          SendEther(target, summa_rest);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"returnBalanseToTarget\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tar_main\",\"type\":\"address\"},{\"name\":\"tar1\",\"type\":\"address\"},{\"name\":\"tar2\",\"type\":\"address\"},{\"name\":\"stake1\",\"type\":\"uint256\"},{\"name\":\"stake2\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendEther\",\"type\":\"event\"}]","ContractName":"AgentContract","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ee0569a43487c29249a3c94469a27729f26ac6360000000000000000000000008233274178446d543134bc679a2a3f57526d9c6b000000000000000000000000dd59b54f130a2db8b34a4bf275558cc718ce53ff00000000000000000000000000000000000000000000000000000000000003b60000000000000000000000000000000000000000000000000000000000000032","Library":"","SwarmSource":"bzzr://5c52883709c5691ba7f421dac349436fe95c10f966552cdc06265f3af870e987"}]}