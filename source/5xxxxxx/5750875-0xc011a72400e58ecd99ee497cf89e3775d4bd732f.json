{"status":"1","message":"OK","result":[{"SourceCode":"/* \r\n * Havven Token Contract Proxy\r\n * ========================\r\n * \r\n * This contract points to an underlying target which implements its\r\n * actual functionality, while allowing that functionality to be upgraded.\r\n */\r\n\r\npragma solidity 0.4.24;\r\n\r\n/**\r\n * @title A contract with an owner.\r\n * @notice Contract ownership can be transferred by first nominating the new owner,\r\n * who must then accept the ownership, which prevents accidental incorrect ownership transfers.\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    /**\r\n     * @dev Owned Constructor\r\n     */\r\n    constructor(address _owner)\r\n        public\r\n    {\r\n        require(_owner != address(0));\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @notice Nominate a new owner of this contract.\r\n     * @dev Only the current owner may nominate a new owner.\r\n     */\r\n    function nominateNewOwner(address _owner)\r\n        external\r\n        onlyOwner\r\n    {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    /**\r\n     * @notice Accept the nomination to be owner.\r\n     */\r\n    function acceptOwnership()\r\n        external\r\n    {\r\n        require(msg.sender == nominatedOwner);\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner\r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\n// This contract should be treated like an abstract contract\r\ncontract Proxyable is Owned {\r\n    /* The proxy this contract exists behind. */\r\n    Proxy public proxy;\r\n\r\n    /* The caller of the proxy, passed through to this contract.\r\n     * Note that every function using this member must apply the onlyProxy or\r\n     * optionalProxy modifiers, otherwise their invocations can use stale values. */ \r\n    address messageSender; \r\n\r\n    constructor(address _proxy, address _owner)\r\n        Owned(_owner)\r\n        public\r\n    {\r\n        proxy = Proxy(_proxy);\r\n        emit ProxyUpdated(_proxy);\r\n    }\r\n\r\n    function setProxy(address _proxy)\r\n        external\r\n        onlyOwner\r\n    {\r\n        proxy = Proxy(_proxy);\r\n        emit ProxyUpdated(_proxy);\r\n    }\r\n\r\n    function setMessageSender(address sender)\r\n        external\r\n        onlyProxy\r\n    {\r\n        messageSender = sender;\r\n    }\r\n\r\n    modifier onlyProxy {\r\n        require(Proxy(msg.sender) == proxy);\r\n        _;\r\n    }\r\n\r\n    modifier optionalProxy\r\n    {\r\n        if (Proxy(msg.sender) != proxy) {\r\n            messageSender = msg.sender;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier optionalProxy_onlyOwner\r\n    {\r\n        if (Proxy(msg.sender) != proxy) {\r\n            messageSender = msg.sender;\r\n        }\r\n        require(messageSender == owner);\r\n        _;\r\n    }\r\n\r\n    event ProxyUpdated(address proxyAddress);\r\n}\r\n\r\ncontract Proxy is Owned {\r\n\r\n    Proxyable public target;\r\n    bool public useDELEGATECALL;\r\n\r\n    constructor(address _owner)\r\n        Owned(_owner)\r\n        public\r\n    {}\r\n\r\n    function setTarget(Proxyable _target)\r\n        external\r\n        onlyOwner\r\n    {\r\n        target = _target;\r\n        emit TargetUpdated(_target);\r\n    }\r\n\r\n    function setUseDELEGATECALL(bool value) \r\n        external\r\n        onlyOwner\r\n    {\r\n        useDELEGATECALL = value;\r\n    }\r\n\r\n    function _emit(bytes callData, uint numTopics,\r\n                   bytes32 topic1, bytes32 topic2,\r\n                   bytes32 topic3, bytes32 topic4)\r\n        external\r\n        onlyTarget\r\n    {\r\n        uint size = callData.length;\r\n        bytes memory _callData = callData;\r\n\r\n        assembly {\r\n            /* The first 32 bytes of callData contain its length (as specified by the abi). \r\n             * Length is assumed to be a uint256 and therefore maximum of 32 bytes\r\n             * in length. It is also leftpadded to be a multiple of 32 bytes.\r\n             * This means moving call_data across 32 bytes guarantees we correctly access\r\n             * the data itself. */\r\n            switch numTopics\r\n            case 0 {\r\n                log0(add(_callData, 32), size)\r\n            } \r\n            case 1 {\r\n                log1(add(_callData, 32), size, topic1)\r\n            }\r\n            case 2 {\r\n                log2(add(_callData, 32), size, topic1, topic2)\r\n            }\r\n            case 3 {\r\n                log3(add(_callData, 32), size, topic1, topic2, topic3)\r\n            }\r\n            case 4 {\r\n                log4(add(_callData, 32), size, topic1, topic2, topic3, topic4)\r\n            }\r\n        }\r\n    }\r\n\r\n    function()\r\n        external\r\n        payable\r\n    {\r\n        if (useDELEGATECALL) {\r\n            assembly {\r\n                /* Copy call data into free memory region. */\r\n                let free_ptr := mload(0x40)\r\n                calldatacopy(free_ptr, 0, calldatasize)\r\n\r\n                /* Forward all gas and call data to the target contract. */\r\n                let result := delegatecall(gas, sload(target_slot), free_ptr, calldatasize, 0, 0)\r\n                returndatacopy(free_ptr, 0, returndatasize)\r\n\r\n                /* Revert if the call failed, otherwise return the result. */\r\n                if iszero(result) { revert(free_ptr, returndatasize) }\r\n                return(free_ptr, returndatasize)\r\n            }\r\n        } else {\r\n            /* Here we are as above, but must send the messageSender explicitly \r\n             * since we are using CALL rather than DELEGATECALL. */\r\n            target.setMessageSender(msg.sender);\r\n            assembly {\r\n                let free_ptr := mload(0x40)\r\n                calldatacopy(free_ptr, 0, calldatasize)\r\n\r\n                /* We must explicitly forward ether to the underlying contract as well. */\r\n                let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\r\n                returndatacopy(free_ptr, 0, returndatasize)\r\n\r\n                if iszero(result) { revert(free_ptr, returndatasize) }\r\n                return(free_ptr, returndatasize)\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier onlyTarget {\r\n        require(Proxyable(msg.sender) == target);\r\n        _;\r\n    }\r\n\r\n    event TargetUpdated(Proxyable newTarget);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"callData\",\"type\":\"bytes\"},{\"name\":\"numTopics\",\"type\":\"uint256\"},{\"name\":\"topic1\",\"type\":\"bytes32\"},{\"name\":\"topic2\",\"type\":\"bytes32\"},{\"name\":\"topic3\",\"type\":\"bytes32\"},{\"name\":\"topic4\",\"type\":\"bytes32\"}],\"name\":\"_emit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"useDELEGATECALL\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setUseDELEGATECALL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newTarget\",\"type\":\"address\"}],\"name\":\"TargetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"Proxy","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b12a54406840a7ddfa9246efb3bf4724bf55f5f8","Library":"","SwarmSource":"bzzr://9e104efaf0a7b150d5357b3a38b0260a3741a240fef678863453d378cc0622b9"}]}