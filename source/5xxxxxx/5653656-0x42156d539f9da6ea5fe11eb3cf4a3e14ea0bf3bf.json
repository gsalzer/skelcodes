{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\ncontract ERC20Interface {\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n}\r\n\r\ncontract Halo3D {\r\n\r\n    function buy(address) public payable returns(uint256);\r\n    function transfer(address, uint256) public returns(bool);\r\n    function myTokens() public view returns(uint256);\r\n    function myDividends(bool) public view returns(uint256);\r\n    function reinvest() public;\r\n}\r\n\r\n/**\r\n * Definition of contract accepting Halo3D tokens\r\n * Games, casinos, anything can reuse this contract to support Halo3D tokens\r\n */\r\ncontract AcceptsHalo3D {\r\n    Halo3D public tokenContract;\r\n\r\n    function AcceptsHalo3D(address _tokenContract) public {\r\n        tokenContract = Halo3D(_tokenContract);\r\n    }\r\n\r\n    modifier onlyTokenContract {\r\n        require(msg.sender == address(tokenContract));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Standard ERC677 function that will handle incoming token transfers.\r\n    *\r\n    * @param _from  Token sender address.\r\n    * @param _value Amount of tokens.\r\n    * @param _data  Transaction metadata.\r\n    */\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\r\n}\r\n\r\ncontract Halo3DPotPotato is AcceptsHalo3D {\r\n    address public ceoAddress;\r\n    address public hotPotatoHolder;\r\n    address public lastHotPotatoHolder;\r\n    uint256 public lastBidTime;\r\n    uint256 public contestStartTime;\r\n    uint256 public lastPot;\r\n\r\n    Potato[] public potatoes;\r\n\r\n    uint256 public BASE_TIME_TO_COOK=30 minutes;//60 seconds;\r\n    uint256 public TIME_MULTIPLIER=5 minutes;//5 seconds;//time per index of potato\r\n    uint256 public TIME_TO_COOK=BASE_TIME_TO_COOK; //this changes\r\n    uint256 public NUM_POTATOES=12;\r\n    uint256 public START_PRICE=10 ether; // 10 TOKENS\r\n    uint256 public CONTEST_INTERVAL= 1 days;//4 minutes;//1 week\r\n\r\n    /*** DATATYPES ***/\r\n    struct Potato {\r\n        address owner;\r\n        uint256 price;\r\n    }\r\n\r\n    /*** CONSTRUCTOR ***/\r\n    function Halo3DPotPotato(address _baseContract)\r\n      AcceptsHalo3D(_baseContract)\r\n      public{\r\n        ceoAddress=msg.sender;\r\n        hotPotatoHolder=0;\r\n        contestStartTime=now;\r\n        for(uint i = 0; i<NUM_POTATOES; i++){\r\n            Potato memory newpotato=Potato({owner:address(this),price: START_PRICE});\r\n            potatoes.push(newpotato);\r\n        }\r\n    }\r\n    \r\n     /**\r\n     * Fallback function for the contract, protect investors\r\n     * NEED ALWAYS TO HAVE\r\n     */\r\n    function() payable public {\r\n      // Not accepting Ether directly\r\n      /* revert(); */\r\n    }\r\n\r\n    /*** PUBLIC FUNCTIONS ***/\r\n    /**\r\n    * Deposit Halo3D tokens to buy potato\r\n    *\r\n    * @dev Standard ERC677 function that will handle incoming token transfers.\r\n    * @param _from  Token sender address.\r\n    * @param _value Amount of tokens.\r\n    * @param _data  Transaction metadata.\r\n    */\r\n    function tokenFallback(address _from, uint256 _value, bytes _data)\r\n      external\r\n      onlyTokenContract\r\n      returns (bool) {\r\n        require(now > contestStartTime);\r\n        require(!_isContract(_from));\r\n        if(_endContestIfNeeded(_from, _value)){\r\n\r\n        }\r\n        else{\r\n            // Byte data to index how to transfer?\r\n            uint64 index = uint64(_data[0]);\r\n            Potato storage potato=potatoes[index];\r\n            require(_value >= potato.price);\r\n            //allow calling transfer() on these addresses without risking re-entrancy attacks\r\n            require(_from != potato.owner);\r\n            require(_from != ceoAddress);\r\n            uint256 sellingPrice=potato.price;\r\n            uint256 purchaseExcess = SafeMath.sub(_value, sellingPrice);\r\n            uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 76), 100));\r\n            uint256 devFee= uint256(SafeMath.div(SafeMath.mul(sellingPrice, 4), 100));\r\n            //20 percent remaining in the contract goes to the pot\r\n            //if the owner is the contract, this is the first purchase, and payment should go to the pot\r\n            reinvest();\r\n            if(potato.owner!=address(this)){\r\n                tokenContract.transfer(potato.owner, payment);\r\n            }\r\n            tokenContract.transfer(ceoAddress, devFee);\r\n            potato.price= SafeMath.div(SafeMath.mul(sellingPrice, 150), 76);\r\n            potato.owner=_from;//transfer ownership\r\n            hotPotatoHolder=_from;//becomes holder with potential to win the pot\r\n            lastBidTime=now;\r\n            TIME_TO_COOK=SafeMath.add(BASE_TIME_TO_COOK,SafeMath.mul(index,TIME_MULTIPLIER)); //pots have times to cook varying from 30-85 minutes\r\n\r\n            tokenContract.transfer(_from, purchaseExcess); //returns excess eth\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    // Reinvest Halo3D PotPotato dividends\r\n    // All the dividends this contract makes will be used to grow token fund for players\r\n    // of the Halo3D PotPotato Game\r\n    function reinvest() public {\r\n       if(tokenContract.myDividends(true) > 1) {\r\n         tokenContract.reinvest();\r\n       }\r\n       /*\r\n       uint balance = address(this).balance;\r\n       if (balance > 1) {\r\n         tokenContract.buy.value(balance).gas(1000000)(msg.sender);\r\n       } */ // Not possible because of contract protection\r\n    }\r\n\r\n    // Collect information about Halo3dPotPotato dividents amount\r\n    function getContractDividends() public view returns(uint256) {\r\n      return tokenContract.myDividends(true); // + this.balance;\r\n    }\r\n\r\n    // Get tokens balance of the Halo3D PotPotato\r\n    function getBalance() public view returns(uint256 value){\r\n        return tokenContract.myTokens();\r\n    }\r\n\r\n    function timePassed() public view returns(uint256 time){\r\n        if(lastBidTime==0){\r\n            return 0;\r\n        }\r\n        return SafeMath.sub(block.timestamp,lastBidTime);\r\n    }\r\n\r\n    function timeLeftToContestStart() public view returns(uint256 time){\r\n        if(block.timestamp>contestStartTime){\r\n            return 0;\r\n        }\r\n        return SafeMath.sub(contestStartTime,block.timestamp);\r\n    }\r\n\r\n    function timeLeftToCook() public view returns(uint256 time){\r\n        return SafeMath.sub(TIME_TO_COOK,timePassed());\r\n    }\r\n\r\n    function contestOver() public view returns(bool){\r\n        return timePassed()>=TIME_TO_COOK;\r\n    }\r\n\r\n    /*** PRIVATE FUNCTIONS ***/\r\n    // Check transaction coming from the contract or not\r\n    function _isContract(address _user) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(_user) }\r\n        return size > 0;\r\n    }\r\n\r\n    function _endContestIfNeeded(address _from, uint256 _value) private returns(bool){\r\n        if(timePassed()>=TIME_TO_COOK){\r\n            //contest over, refund anything paid\r\n            reinvest();\r\n            tokenContract.transfer(_from, _value);\r\n            lastPot=getBalance();\r\n            lastHotPotatoHolder=hotPotatoHolder;\r\n            tokenContract.transfer(hotPotatoHolder, tokenContract.myTokens());\r\n            hotPotatoHolder=0;\r\n            lastBidTime=0;\r\n            _resetPotatoes();\r\n            _setNewStartTime();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _resetPotatoes() private{\r\n        for(uint i = 0; i<NUM_POTATOES; i++){\r\n            Potato memory newpotato=Potato({owner:address(this),price: START_PRICE});\r\n            potatoes[i]=newpotato;\r\n        }\r\n    }\r\n\r\n    function _setNewStartTime() private{\r\n        uint256 start=contestStartTime;\r\n        while(start < now){\r\n            start=SafeMath.add(start,CONTEST_INTERVAL);\r\n        }\r\n        contestStartTime=start;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NUM_POTATOES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLeftToContestStart\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBidTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastHotPotatoHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTEST_INTERVAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hotPotatoHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contestStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLeftToCook\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_TO_COOK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timePassed\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contestOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_TIME_TO_COOK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"potatoes\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_baseContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Halo3DPotPotato","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000b3e515cb8b318120c5a126679eb945f2bb2ddea","Library":"","SwarmSource":"bzzr://4e5a1f1fb9319b938a1515c26c306a23596a41626bd4419a6287d09bd7b1c15b"}]}