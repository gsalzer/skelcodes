{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\ncontract GoTDragonFarm {\r\n    uint256 public EGGS_TO_HATCH_1DRAGON = 43200; // every 12 hours\r\n    \r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    \r\n    bool public initialized = false;\r\n    \r\n    address public ceoAddress;\r\n    \r\n    mapping (address => uint256) public hatchery;\r\n    mapping (address => uint256) public claimedEggs;\r\n    mapping (address => uint256) public lastHatch;\r\n    mapping (address => address) public referrals;\r\n    \r\n    uint256 public marketEggs;\r\n    \r\n    event Buy(address _from, uint256 _eggs);\r\n    event Sell(address _from, uint256 _eggs);\r\n    event Hatch(address _from, uint256 _eggs, uint256 _dragons);\r\n    \r\n    constructor() public {\r\n        ceoAddress=msg.sender;\r\n    }\r\n    \r\n    function hatchEggs(address ref) public {\r\n        require(initialized);\r\n        \r\n        if(referrals[msg.sender] == 0 && referrals[msg.sender] != msg.sender){\r\n            referrals[msg.sender] = ref;\r\n        }\r\n        \r\n        uint256 eggsUsed = getMyEggs();\r\n        \r\n        uint256 newDragons = SafeMath.div(eggsUsed, EGGS_TO_HATCH_1DRAGON);\r\n        hatchery[msg.sender] = SafeMath.add(hatchery[msg.sender], newDragons);\r\n        claimedEggs[msg.sender] = 0;\r\n        lastHatch[msg.sender] = now;\r\n        \r\n        //send referral eggs\r\n        claimedEggs[referrals[msg.sender]] = SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\r\n        \r\n        //boost market to nerf dragon hoarding\r\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\r\n        \r\n        emit Hatch(msg.sender, eggsUsed, newDragons);\r\n    }\r\n    \r\n    function sellEggs() public {\r\n        require(initialized);\r\n        \r\n        uint256 hasEggs = getMyEggs();\r\n        uint256 eggValue = calculateEggSell(hasEggs);\r\n        \r\n        uint256 fee = calculateDevFee(eggValue);\r\n        \r\n        claimedEggs[msg.sender] = 0;\r\n        lastHatch[msg.sender] = now;\r\n        marketEggs = SafeMath.add(marketEggs,hasEggs);\r\n        \r\n        ceoAddress.transfer(fee);\r\n        \r\n        msg.sender.transfer(SafeMath.sub(eggValue,fee));\r\n        \r\n        emit Sell(msg.sender, hasEggs);\r\n    }\r\n    \r\n    function buyEggs() public payable {\r\n        require(initialized);\r\n        \r\n        uint256 eggsBought = calculateEggBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));\r\n        eggsBought = SafeMath.sub(eggsBought, calculateDevFee(eggsBought));\r\n        \r\n        ceoAddress.transfer(calculateDevFee(msg.value));\r\n        \r\n        claimedEggs[msg.sender] = SafeMath.add(claimedEggs[msg.sender], eggsBought);\r\n        \r\n        emit Buy(msg.sender, eggsBought);\r\n    }\r\n    \r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    \r\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\r\n        return calculateTrade(eggs,marketEggs, address(this).balance);\r\n    }\r\n    \r\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth,contractBalance,marketEggs);\r\n    }\r\n    \r\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateEggBuy(eth, address(this).balance);\r\n    }\r\n    \r\n    function calculateDevFee(uint256 amount) public view returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,4),100);\r\n    }\r\n    \r\n    function seedMarket(uint256 eggs) public payable{\r\n        require(marketEggs == 0);\r\n        initialized = true;\r\n        marketEggs = eggs;\r\n    }\r\n    \r\n    function claimFreeDragon() public{\r\n        require(initialized);\r\n        require(hatchery[msg.sender] == 0);\r\n        lastHatch[msg.sender] = now;\r\n        hatchery[msg.sender] = 300;\r\n    }\r\n    \r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function getMyDragons() public view returns(uint256){\r\n        return hatchery[msg.sender];\r\n    }\r\n    \r\n    function getMyEggs() public view returns(uint256){\r\n        return SafeMath.add(claimedEggs[msg.sender], getEggsSinceLastHatch(msg.sender));\r\n    }\r\n    \r\n    function getEggsSinceLastHatch(address _address) public view returns(uint256){\r\n        uint256 secondsPassed = min(EGGS_TO_HATCH_1DRAGON, SafeMath.sub(now, lastHatch[_address]));\r\n        return SafeMath.mul(secondsPassed, hatchery[_address]);\r\n    }\r\n    \r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyDragons\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimFreeDragon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyEggs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatchery\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EGGS_TO_HATCH_1DRAGON\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateDevFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eggs\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eggs\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eggs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_dragons\",\"type\":\"uint256\"}],\"name\":\"Hatch\",\"type\":\"event\"}]","ContractName":"GoTDragonFarm","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5d45df6b23025b82fe8d1dba43db73aa778f6792001f15a732d83c60bb178a90"}]}