{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n\r\n    /// @dev `owner` is the only address that can call a function with this modifier\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n\r\n    /// @notice The Constructor assigns the message sender to be `owner`\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice `owner` can step down and assign some other address to this role\r\n    /// @param _newOwner The address of the new owner. 0x0 can be used to create\r\n    ///  an unowned neutral vault, however that cannot be undone\r\n    function changeOwner(address _newOwner) onlyOwner public returns(bool){\r\n        require (_newOwner != address(0));\r\n        \r\n        newOwner = _newOwner;\r\n        return true;\r\n    }\r\n\r\n    function acceptOwnership() public returns(bool) {\r\n        require(newOwner != address(0));\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require (_value <= allowed[_from][msg.sender]);\r\n    \r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract LifeBankerCoin is Owned, StandardToken{\r\n    string public constant name = \"LifeBanker Coin\";\r\n    string public constant symbol = \"LBC\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    address public lockAddress;\r\n    address public teamAddress;\r\n\r\n    constructor() public {\r\n        totalSupply = 10000000000000000000000000000; //10 billion\r\n    }\r\n\r\n    /*\r\n     * @dev Initialize token attribution,only allowed to call once\r\n     * @param _team address : TeamTokensHolder contract deployment address\r\n     * @param _lock address : TokenLock contract deployment address\r\n     * @param _sare address : The token storage address of the sales part\r\n     */\r\n    function initialization(address _team, address _lock, address _sale) onlyOwner public returns(bool) {\r\n        require(lockAddress == 0 && teamAddress == 0);\r\n        require(_team != 0 && _lock != 0);\r\n        require(_sale != 0);\r\n        teamAddress = _team;\r\n        lockAddress = _lock;\r\n    \r\n        balances[teamAddress] = totalSupply.mul(225).div(1000); //22.5% \r\n        balances[lockAddress] = totalSupply.mul(500).div(1000); //50.0% \r\n        balances[_sale]       = totalSupply.mul(275).div(1000); //27.5%\r\n        return true;\r\n    }\r\n}\r\n\r\n/* @title This contract locks the tokens of the team and early investors.\r\n * @notice The tokens are locked for a total of three years, unlocking one-sixth every six months.\r\n * Unlockable Amount(%)\r\n *    ^\r\n * 100|---------------------------- * * *\r\n *    |                           / :  \r\n *    |----------------------- *    :  \r\n *    |                      / :    :  \r\n *    |------------------ *    :    :  \r\n *    |                 / :    :    :  \r\n *  50|------------- *    :    :    :  \r\n *    |            / :    :    :    :  \r\n *    |-------- *    :    :    :    :  \r\n *    |       / :    :    :    :    :  \r\n *    |--- *    :    :    :    :    :  \r\n *    |  / :    :    :    :    :    :  \r\n *    +----*----*----*----*----*----*-->\r\n *    0   0.5   1   1.5   2   2.5   3   Time(year)\r\n *\r\n */\r\ncontract TeamTokensHolder is Owned{\r\n    using SafeMath for uint256;\r\n\r\n    LifeBankerCoin public LBC;\r\n    uint256 public startTime;\r\n    uint256 public duration = 6 * 30 * 24 * 3600; //six months\r\n\r\n    uint256 public total = 2250000000000000000000000000;  // 2.25 billion  22.5% \r\n    uint256 public amountPerRelease = total.div(6);       // 375 million\r\n    uint256 public collectedTokens;\r\n\r\n\r\n    event TokensWithdrawn(address indexed _holder, uint256 _amount);\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint256 _amount);\r\n\r\n\r\n    constructor(address _owner, address _lbc) public{\r\n        owner = _owner;\r\n        LBC = LifeBankerCoin(_lbc);\r\n        startTime = now;\r\n    }\r\n\r\n    /*\r\n     * @dev The Dev (Owner) will call this method to extract the tokens\r\n     */\r\n    function unLock() public onlyOwner returns(bool){\r\n        uint256 balance = LBC.balanceOf(address(this));\r\n\r\n        //  amountPerRelease * [(now - startTime) / duration]\r\n        uint256 canExtract = amountPerRelease.mul((getTime().sub(startTime)).div(duration));\r\n\r\n        uint256 amount = canExtract.sub(collectedTokens);\r\n\r\n        if (amount == 0){\r\n            revert();\r\n        } \r\n\r\n        if (amount > balance) {\r\n            amount = balance;\r\n        }\r\n\r\n        assert (LBC.transfer(owner, amount));\r\n        emit TokensWithdrawn(owner, amount);\r\n        collectedTokens = collectedTokens.add(amount);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /* Get the timestamp of the current block */\r\n    function getTime() view public returns(uint256){\r\n        return now;\r\n    }\r\n\r\n    /// Safe Function\r\n    /// @dev This method can be used by the controller to extract mistakenly\r\n    /// @param _token The address of the token contract that you want to recover\r\n    function claimTokens(address _token) public onlyOwner returns(bool){\r\n        require(_token != address(LBC));\r\n\r\n        ERC20 token = ERC20(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(owner, balance);\r\n        emit ClaimedTokens(_token, owner, balance);\r\n        return true;\r\n    }\r\n}\r\n\r\n/*\r\n * @title This contract locks 50% of the total, 30% for mining, \r\n *        10% for community promotion, and 10% for operation and maintenance.\r\n * @notice The tokens are locked for a total of five years, \r\n *        and the number of tokens that can be unlocked each year is halved. \r\n *        Each year's tokens are divided into 12 months equals to unlock.\r\n *        Percentage per year : 50%, 25%, 12.5%, 6.25% ,6.25% \r\n * Unlockable Amount(%)\r\n *    ^\r\n * 100|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n *    |_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _     *   :\r\n *    |_ _ _ _ _ _ _ _ _ _ _ _ _      *   :        : \r\n *    |                         *:        :        : \r\n *  75|_ _ _ _ _ _ _ _ _    *    :        :        : \r\n *    |                *:        :        :        : \r\n *    |             *   :        :        :        : \r\n *    |          *      :        :        :        : \r\n *  50|_ _ _ _ *        :        :        :        :   \r\n *    |       *:        :        :        :        : \r\n *    |      * :        :        :        :        : \r\n *    |     *  :        :        :        :        : \r\n *    |    *   :        :        :        :        : \r\n *    |   *    :        :        :        :        : \r\n *    |  *     :        :        :        :        : \r\n *    | *      :        :        :        :        : \r\n *    |*       :        :        :        :        : \r\n *    +--------*--------*--------*--------*--------*---> Time(year)\r\n *    0        1        2        3        4        5    \r\n */\r\ncontract TokenLock is Owned{\r\n    using SafeMath for uint256;\r\n\r\n    LifeBankerCoin public LBC;\r\n\r\n    uint256 public totalSupply = 10000000000000000000000000000;\r\n    uint256 public totalLocked = totalSupply.div(2); // 50% of totalSupply\r\n    uint256 public collectedTokens;\r\n    uint256 public startTime;\r\n\r\n    address public POSAddress       = 0x72CE608648c5b2E7FB5575F72De32B4F5dfCee18; //30% DPOS\r\n    address public CommunityAddress = 0x7fD2944a178f4dc0A50783De6Bad1857147774c0; //10% Community promotion\r\n    address public OperationAddress = 0x33Df6bace87AE59666DD1DE2FDEB383D164f1f36; //10% Operation and maintenance\r\n\r\n    uint256 _1stYear = totalLocked.mul(5000).div(10000);  // 50%\r\n    uint256 _2stYear = totalLocked.mul(2500).div(10000);  // 25%\r\n    uint256 _3stYear = totalLocked.mul(1250).div(10000);  // 12.5%\r\n    uint256 _4stYear = totalLocked.mul(625).div(10000);   // 6.25%\r\n    uint256 _5stYear = totalLocked.mul(625).div(10000);   // 6.25%\r\n\r\n    mapping (address => bool) whiteList;\r\n    \r\n\r\n    event TokensWithdrawn(uint256 _amount);\r\n    event LogMangeWhile(address indexed _dest, bool _allow);\r\n\r\n    modifier onlyWhite() { \r\n        require (whiteList[msg.sender] == true); \r\n        _; \r\n    }\r\n\r\n    /// @param _lbc address : LifeBankerCoin contract deployment address\r\n    constructor(address _lbc) public{\r\n        startTime = now;\r\n        LBC = LifeBankerCoin(_lbc);\r\n        whiteList[msg.sender] = true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Add or remove call permissions for an address\r\n     * @param _dest    address  : The address of the permission to be modified\r\n     * @param _allow   bool     : True means increase, False means remove\r\n     * @return success bool     : Successful operation returns True\r\n     */\r\n    function mangeWhileList(address _dest, bool _allow) onlyOwner public returns(bool success){\r\n        require(_dest != address(0));\r\n\r\n        whiteList[_dest] = _allow;\r\n        emit LogMangeWhile(_dest, _allow);\r\n        return true;\r\n    }\r\n\r\n    /* @dev Called by 'owner' to unlock the token.   */\r\n    function unlock() public onlyWhite returns(bool success){\r\n        uint256 canExtract = calculation();\r\n        uint256 _amount = canExtract.sub(collectedTokens); // canExtract - collectedTokens\r\n        distribute(_amount);\r\n        collectedTokens = collectedTokens.add(_amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * @dev Calculates the total number of tokens that can be unlocked based on time.\r\n     * @return uint256 : total number of unlockable\r\n     */\r\n    function calculation() view internal returns(uint256){\r\n        uint256 _month = getMonths();\r\n        uint256 _amount;\r\n\r\n        if (_month == 0){\r\n            revert();\r\n        }\r\n\r\n        if (_month <= 12 ){\r\n            _amount = _1stYear.mul(_month).div(12);\r\n\r\n        }else if(_month <= 24){\r\n            // _1stYear + [_2stYear * (moneth - 12) / 12]\r\n            _amount = _1stYear;\r\n            _amount = _amount.add(_2stYear.mul(_month.sub(12)).div(12));\r\n\r\n        }else if(_month <= 36){\r\n            // _1stYear + _2stYear + [_3stYear * (moneth - 24) / 12]\r\n            _amount = _1stYear + _2stYear;\r\n            _amount = _amount.add(_3stYear.mul(_month.sub(24)).div(12));\r\n\r\n        }else if(_month <= 48){\r\n            // _1stYear + _2stYear + _3stYear + [_4stYear * (moneth - 36) / 12]\r\n            _amount = _1stYear + _2stYear + _3stYear;\r\n            _amount = _amount.add(_4stYear.mul(_month.sub(36)).div(12));      \r\n\r\n        }else if(_month <= 60){\r\n            // _1stYear + _2stYear + _3stYear + _4stYear + [_5stYear * (moneth - 48) / 12]\r\n            _amount = _1stYear + _2stYear + _3stYear + _4stYear;\r\n            _amount = _amount.add(_5stYear.mul(_month.sub(48)).div(12)); \r\n\r\n        }else{\r\n            // more than 5years\r\n            _amount = LBC.balanceOf(this);\r\n        }\r\n        return _amount;\r\n    }\r\n\r\n    /* Get how many months have passed since the contract was deployed. */\r\n    function getMonths() view internal returns(uint256){\r\n        uint256 countMonth = (getTime().sub(startTime)).div(30 * 24 * 3600);\r\n        return countMonth; // begin 0\r\n    }\r\n\r\n    /*\r\n     * @dev Distribute unlockable tokens to three addresses, proportion 3:1:1\r\n     * @param _amount uint256 : Number of tokens that can be unlocked\r\n     */\r\n    function distribute(uint256 _amount) internal returns(bool){\r\n        require (_amount != 0);\r\n\r\n        uint256 perAmount = _amount.div(5);\r\n        \r\n        assert (LBC.transfer(POSAddress, perAmount.mul(3)));\r\n        assert (LBC.transfer(CommunityAddress, perAmount.mul(1)));\r\n        assert (LBC.transfer(OperationAddress, perAmount.mul(1)));\r\n\r\n        emit TokensWithdrawn(_amount);\r\n        return true;\r\n    }\r\n\r\n    /* Get the timestamp of the current block */\r\n    function getTime() view internal returns(uint256){\r\n        return now; //block.timestamp\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title The CandyLBC contract supports multiple transfers.\r\n * The source of the multi-transfer token is the contract address, \r\n * so you need to transfer the token to this contract address first.\r\n */\r\ncontract CandyLBC is Owned {\r\n    LifeBankerCoin public LBC;\r\n\r\n    /// @param _lbc address : LifeBankerCoin contract deployment address\r\n    constructor (address _lbc) public {\r\n        LBC = LifeBankerCoin(_lbc);\r\n    }\r\n\r\n    /*\r\n     * @dev Transfer to multiple addresses to a different number of tokens.\r\n     * @param _addresses addressp[] : recipient's address list\r\n     * @param _value     uint256[]  : a list of the number corresponding to each address\r\n     */\r\n    function mulPay(address[] _addresses, uint256[] _value) public onlyOwner returns(bool){\r\n        require(_addresses.length == _value.length);\r\n        for(uint256 i = 0; i < _addresses.length; i++){\r\n            LBC.transfer(_addresses[i], _value[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * @dev Transfer the same token number to multiple addresses\r\n     * @param _amount      uint256 : number of tokens\r\n     * @param _addresses uint256[] : recipient's address list\r\n     */\r\n    function mulTransfer(uint256 _amount, address[] _addresses) public onlyOwner returns(bool){\r\n        for(uint256 i = 0; i < _addresses.length; i++){\r\n            LBC.transfer(_addresses[i], _amount);\r\n        }\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"mulTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LBC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"mulPay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_lbc\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CandyLBC","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d30139c93068be69262449cd49f9c7928e263396","Library":"","SwarmSource":"bzzr://6de203a1930953565d219a9ac884d7ba7186d5bdd925cecfcbbc971b062b953e"}]}