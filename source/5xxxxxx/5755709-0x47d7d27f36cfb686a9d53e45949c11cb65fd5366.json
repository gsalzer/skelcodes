{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract KahnAirDrop2{\r\n    using SafeMath for uint256;\r\n\t\r\n    struct User{\r\n\t\taddress user_address;\r\n\t\tuint signup_time;\r\n\t\tuint256 reward_amount;\r\n\t\tbool blacklisted;\r\n\t\tuint paid_time;\r\n\t\tuint256 paid_token;\r\n\t\tbool status;\r\n\t}\r\n\t\r\n\t/* @dev Contract creator address */\r\n    address public owner;\r\n\t\r\n    /* @dev Assigned wallet where the remaining unclaim tokens to be return */\r\n    address public wallet;\r\n\t\r\n\t/* @dev bounty address  */\r\n\taddress[] public bountyaddress;\r\n\t\r\n\t/* @dev admin address  */\r\n\taddress[] public adminaddress;\r\n\t\r\n    /* @dev Total Signup count */\r\n    uint public userSignupCount = 0;\r\n\t\r\n    /* @dev Total tokens claimed */\r\n    uint256 public userClaimAmt = 0;\r\n\r\n    /* @dev The token being distribute */\r\n    ERC20 public token;\r\n\r\n    /* @dev To record the different reward amount for each bounty  */\r\n    mapping(address => User) public bounties;\r\n\t\r\n    /* @dev to include the bounty in the list */\r\n\tmapping(address => bool) public signups;\r\n\t\r\n    /* @dev Admin with permission to manage the signed up bounty */\r\n    mapping (address => bool) public admins;\r\n\t\r\n    /**\r\n    * @param _token Token smart contract address\r\n    * @param _wallet ETH address to reclaim unclaim tokens\r\n    */\r\n    function KahnAirDrop2(ERC20 _token, address _wallet) public {\r\n        require(_token != address(0));\r\n        token = _token;\r\n        admins[msg.sender] = true;\r\n        adminaddress.push(msg.sender) -1;\r\n        owner = msg.sender;\r\n        wallet = _wallet;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n       require(msg.sender == owner);\r\n       _;\r\n    }\r\n\t\r\n    modifier onlyAdmin {\r\n        require(admins[msg.sender]);\r\n        _;\r\n    }\r\n\r\n\t/*******************/\r\n\t/* Owner Function **/\r\n\t/*******************/\r\n    /* @dev Update Contract Configuration  */\r\n    function ownerUpdateToken(ERC20 _token, address _wallet) public onlyOwner{\r\n        token = _token;\r\n        wallet = _wallet;\r\n    }\r\n\r\n\t/*******************/\r\n\t/* Admin Function **/\r\n\t/*******************/\r\n    /* @dev Add admin to whitelist */\r\n\tfunction addAdminWhitelist(address[] _userlist) public onlyOwner onlyAdmin{\r\n\t\trequire(_userlist.length > 0);\r\n\t\tfor (uint256 i = 0; i < _userlist.length; i++) {\r\n\t\t\taddress baddr = _userlist[i];\r\n\t\t\tif(baddr != address(0)){\r\n\t\t\t\tif(!admins[baddr]){\r\n\t\t\t\t\tadmins[baddr] = true;\r\n\t\t\t\t\tadminaddress.push(baddr) -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n    /* @dev Remove admin from whitelist */\r\n\tfunction removeAdminWhitelist(address[] _userlist) public onlyAdmin{\r\n\t\trequire(_userlist.length > 0);\r\n\t\tfor (uint256 i = 0; i < _userlist.length; i++) {\r\n\t\t\taddress baddr = _userlist[i];\r\n\t\t\tif(baddr != address(0)){\r\n\t\t\t\tif(admins[baddr]){\r\n\t\t\t\t\tadmins[baddr] = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/* @dev Allow Admin to reclaim all unclaim tokens back to the specified wallet */\r\n\tfunction reClaimBalance() public onlyAdmin{\r\n\t\tuint256 taBal = token.balanceOf(this);\r\n\t\ttoken.transfer(wallet, taBal);\r\n\t}\r\n\t\r\n\tfunction adminUpdateWallet(address _wallet) public onlyAdmin{\r\n\t\trequire(_wallet != address(0));\r\n\t\twallet = _wallet;\r\n\t}\r\n\r\n\t/***************************/\r\n\t/* Admin & Staff Function **/\r\n\t/***************************/\r\n\t/* @dev Admin/Staffs Update Contract Configuration */\r\n\r\n    /* @dev Add user to whitelist */\r\n    function signupUserWhitelist(address[] _userlist, uint256[] _amount) public onlyAdmin{\r\n    \trequire(_userlist.length > 0);\r\n\t\trequire(_amount.length > 0);\r\n    \tfor (uint256 i = 0; i < _userlist.length; i++) {\r\n    \t\taddress baddr = _userlist[i];\r\n    \t\tuint256 bval = _amount[i];\r\n    \t\tif(baddr != address(0)){\r\n    \t\t\tif(bounties[baddr].user_address != baddr){\r\n\t\t\t\t\tbounties[baddr] = User(baddr,now,0,false,now,bval,true);\r\n\t\t\t\t\ttoken.transfer(baddr, bval);\r\n    \t\t\t}\r\n    \t\t}\r\n    \t}\r\n    }\r\n\t\r\n\t/* @dev Return list of bounty addresses */\r\n\tfunction getBountyAddress() view public onlyAdmin returns(address[]){\r\n\t\treturn bountyaddress;\r\n\t}\r\n\t\r\n\tfunction chkUserDetails(address _address) view public onlyAdmin returns(address,uint,uint256,bool,uint,uint256,bool){\r\n\t\trequire(_address != address(0));\r\n\t\treturn(bounties[_address].user_address, bounties[_address].signup_time, bounties[_address].reward_amount, bounties[_address].blacklisted, bounties[_address].paid_time, bounties[_address].paid_token, bounties[_address].status);\r\n\t}\r\n\t\r\n\tfunction () external payable {\r\n\t\trevert();\r\n\t}\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"userSignupCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"signups\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userlist\",\"type\":\"address[]\"}],\"name\":\"removeAdminWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"adminUpdateWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bountyaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userlist\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"signupUserWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userClaimAmt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBountyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"ownerUpdateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"chkUserDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userlist\",\"type\":\"address[]\"}],\"name\":\"addAdminWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reClaimBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bounties\",\"outputs\":[{\"name\":\"user_address\",\"type\":\"address\"},{\"name\":\"signup_time\",\"type\":\"uint256\"},{\"name\":\"reward_amount\",\"type\":\"uint256\"},{\"name\":\"blacklisted\",\"type\":\"bool\"},{\"name\":\"paid_time\",\"type\":\"uint256\"},{\"name\":\"paid_token\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"KahnAirDrop2","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f89d6765321a2b967aca57b87303904eea973fac0000000000000000000000007cb23e13238bb9d0164eee27b22bfdfc5a1753ce","Library":"","SwarmSource":"bzzr://1551ed38e5657acf092139e03699e8232346cc68c82ef656f364bea063fad426"}]}