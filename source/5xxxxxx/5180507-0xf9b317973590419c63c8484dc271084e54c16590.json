{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n//>> Reference to https://github.com/OpenZeppelin/zeppelin-solidity\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n//<< Reference to https://github.com/OpenZeppelin/zeppelin-solidity\r\n\r\n\r\n\r\n\r\ncontract Coin {\r\n    function sell(address _to, uint256 _value, string _note) public returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title MultiOwnable\r\n */\r\ncontract MultiOwnable {\r\n    address public root;\r\n    mapping (address => address) public owners; // owner => parent of owner\r\n    \r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function MultiOwnable() public {\r\n        root= msg.sender;\r\n        owners[root]= root;\r\n    }\r\n    \r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(owners[msg.sender] != 0);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev Adding new owners\r\n    */\r\n    function newOwner(address _owner) onlyOwner public returns (bool) {\r\n        require(_owner != 0);\r\n        owners[_owner]= msg.sender;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Deleting owners\r\n     */\r\n    function deleteOwner(address _owner) onlyOwner public returns (bool) {\r\n        require(owners[_owner] == msg.sender || (owners[_owner] != 0 && msg.sender == root));\r\n        owners[_owner]= 0;\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title KStarCoinSale\r\n * @author Tae Kim\r\n * @notice This contract is for crowdfunding of KStarCoin.\r\n */\r\ncontract KStarCoinSale is MultiOwnable {\r\n    using SafeMath for uint256;\r\n    \r\n    eICOLevel public level;\r\n    uint256 public rate;\r\n    uint256 public minWei;\r\n\r\n    function checkValidLevel(eICOLevel _level) public pure returns (bool) {\r\n        return (_level == eICOLevel.C_ICO_PRESALE || _level == eICOLevel.C_ICO_ONSALE || _level == eICOLevel.C_ICO_END);\r\n    }\r\n\r\n    modifier onSale() {\r\n        require(level != eICOLevel.C_ICO_END);\r\n        _;\r\n    }\r\n    \r\n    enum eICOLevel { C_ICO_PRESALE, C_ICO_ONSALE, C_ICO_END }\r\n    \r\n    Coin public coin;\r\n    address public wallet;\r\n\r\n    // Constructure\r\n    function KStarCoinSale(Coin _coin, address _wallet) public {\r\n        require(_coin != address(0));\r\n        require(_wallet != address(0));\r\n        \r\n        coin= _coin;\r\n        wallet= _wallet;\r\n\r\n        updateICOVars(  eICOLevel.C_ICO_PRESALE,\r\n                        3750,       // 3000 is default, +750 is pre-sale bonus\r\n                        1e5 szabo); // = 0.1 ether\r\n    }\r\n    \r\n    // Update variables related to crowdfunding\r\n    function updateICOVars(eICOLevel _level, uint _rate, uint _minWei) onlyOwner public returns (bool) {\r\n        require(checkValidLevel(_level));\r\n        require(_rate != 0);\r\n        require(_minWei >= 1 szabo);\r\n        \r\n        level= _level;\r\n        rate= _rate;\r\n        minWei= _minWei;\r\n        \r\n        ICOVarsChange(level, rate, minWei);\r\n        return true;\r\n    }\r\n    \r\n    function () external payable {\r\n        buyCoin(msg.sender);\r\n    }\r\n    \r\n    function buyCoin(address beneficiary) onSale public payable {\r\n        require(beneficiary != address(0));\r\n        require(msg.value >= minWei);\r\n\r\n        // calculate token amount to be created\r\n        uint256 coins= getCoinAmount(msg.value);\r\n        \r\n        // update state \r\n        coin.sell(beneficiary, coins, \"\");\r\n        \r\n        forwardFunds();\r\n    }\r\n\r\n    function getCoinAmount(uint256 weiAmount) internal view returns(uint256) {\r\n        return weiAmount.mul(rate);\r\n    }\r\n  \r\n    // send ether to the fund collection wallet\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n    \r\n    event ICOVarsChange(eICOLevel level, uint256 rate, uint256 minWei);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"checkValidLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint8\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_minWei\",\"type\":\"uint256\"}],\"name\":\"updateICOVars\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"level\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyCoin\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"deleteOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_coin\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minWei\",\"type\":\"uint256\"}],\"name\":\"ICOVarsChange\",\"type\":\"event\"}]","ContractName":"KStarCoinSale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000884b13c7323a4b1f8ba2b685e6263cb80395a25f0000000000000000000000004db566e381e51ad4f76bd89ac80cee9673df3531","Library":"","SwarmSource":"bzzr://b66161651c3349e25568a0f53241693305b5f0dc90867df3a6d0223d058b8acf"}]}