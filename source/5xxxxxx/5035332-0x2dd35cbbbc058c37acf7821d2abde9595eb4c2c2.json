{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/RetrieveTokenFeature.sol\r\n\r\ncontract RetrieveTokenFeature is Ownable {\r\n\r\n  function retrieveTokens(address to, address anotherToken) public onlyOwner {\r\n    ERC20 alienToken = ERC20(anotherToken);\r\n    alienToken.transfer(to, alienToken.balanceOf(this));\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/StagedCrowdsale.sol\r\n\r\ncontract StagedCrowdsale is RetrieveTokenFeature {\r\n\r\n  using SafeMath for uint;\r\n\r\n  struct Milestone {\r\n    uint period;\r\n    uint bonus;\r\n  }\r\n\r\n  uint public start;\r\n\r\n  uint public totalPeriod;\r\n\r\n  uint public invested;\r\n\r\n  uint public hardCap;\r\n\r\n  Milestone[] public milestones;\r\n\r\n  function milestonesCount() public constant returns(uint) {\r\n    return milestones.length;\r\n  }\r\n\r\n  function setStart(uint newStart) public onlyOwner {\r\n    start = newStart;\r\n  }\r\n\r\n  function setHardcap(uint newHardcap) public onlyOwner {\r\n    hardCap = newHardcap;\r\n  }\r\n\r\n  function addMilestone(uint period, uint bonus) public onlyOwner {\r\n    require(period > 0);\r\n    milestones.push(Milestone(period, bonus));\r\n    totalPeriod = totalPeriod.add(period);\r\n  }\r\n\r\n  function removeMilestone(uint8 number) public onlyOwner {\r\n    require(number < milestones.length);\r\n    Milestone storage milestone = milestones[number];\r\n    totalPeriod = totalPeriod.sub(milestone.period);\r\n\r\n    delete milestones[number];\r\n\r\n    for (uint i = number; i < milestones.length - 1; i++) {\r\n      milestones[i] = milestones[i+1];\r\n    }\r\n\r\n    milestones.length--;\r\n  }\r\n\r\n  function changeMilestone(uint8 number, uint period, uint bonus) public onlyOwner {\r\n    require(number < milestones.length);\r\n    Milestone storage milestone = milestones[number];\r\n\r\n    totalPeriod = totalPeriod.sub(milestone.period);\r\n\r\n    milestone.period = period;\r\n    milestone.bonus = bonus;\r\n\r\n    totalPeriod = totalPeriod.add(period);\r\n  }\r\n\r\n  function insertMilestone(uint8 numberAfter, uint period, uint bonus) public onlyOwner {\r\n    require(numberAfter < milestones.length);\r\n\r\n    totalPeriod = totalPeriod.add(period);\r\n\r\n    milestones.length++;\r\n\r\n    for (uint i = milestones.length - 2; i > numberAfter; i--) {\r\n      milestones[i + 1] = milestones[i];\r\n    }\r\n\r\n    milestones[numberAfter + 1] = Milestone(period, bonus);\r\n  }\r\n\r\n  function clearMilestones() public onlyOwner {\r\n    require(milestones.length > 0);\r\n    for (uint i = 0; i < milestones.length; i++) {\r\n      delete milestones[i];\r\n    }\r\n    milestones.length -= milestones.length;\r\n    totalPeriod = 0;\r\n  }\r\n\r\n  modifier saleIsOn() {\r\n    require(milestones.length > 0 && now >= start && now < lastSaleDate());\r\n    _;\r\n  }\r\n\r\n  modifier isUnderHardCap() {\r\n    require(invested <= hardCap);\r\n    _;\r\n  }\r\n\r\n  function lastSaleDate() public constant returns(uint) {\r\n    require(milestones.length > 0);\r\n    return start + totalPeriod * 1 days;\r\n  }\r\n\r\n  function currentMilestone() public saleIsOn constant returns(uint) {\r\n    uint previousDate = start;\r\n    for(uint i=0; i < milestones.length; i++) {\r\n      if(now >= previousDate && now < previousDate + milestones[i].period * 1 days) {\r\n        return i;\r\n      }\r\n      previousDate = previousDate.add(milestones[i].period * 1 days);\r\n    }\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/WalletProvider.sol\r\n\r\ncontract WalletProvider is Ownable {\r\n\r\n  address public wallet;\r\n\r\n  function setWallet(address newWallet) public onlyOwner {\r\n    wallet = newWallet;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/YayProtoToken.sol\r\n\r\ncontract YayProtoToken is MintableToken {\r\n\r\n  string public constant name = \"YayProto\";\r\n\r\n  string public constant symbol = \"YFN\";\r\n\r\n  uint32 public constant decimals = 18;\r\n\r\n  address public saleAgent;\r\n\r\n  modifier notLocked() {\r\n    require(mintingFinished || msg.sender == owner || msg.sender == saleAgent);\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwnerOrSaleAgent() {\r\n    require(msg.sender == owner || msg.sender == saleAgent);\r\n    _;\r\n  }\r\n\r\n  function setSaleAgent(address newSaleAgent) public {\r\n    require(msg.sender == owner || msg.sender == saleAgent);\r\n    saleAgent = newSaleAgent;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) onlyOwnerOrSaleAgent canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function finishMinting() onlyOwnerOrSaleAgent canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public notLocked returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public notLocked returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/CommonSale.sol\r\n\r\ncontract CommonSale is StagedCrowdsale, WalletProvider {\r\n\r\n  address public directMintAgent;\r\n\r\n  uint public percentRate = 100;\r\n\r\n  uint public minPrice;\r\n\r\n  uint public price;\r\n\r\n  YayProtoToken public token;\r\n\r\n  modifier onlyDirectMintAgentOrOwner() {\r\n    require(directMintAgent == msg.sender || owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier minPriceLimit() {\r\n    require(msg.value >= minPrice);\r\n    _;\r\n  }\r\n\r\n  function setDirectMintAgent(address newDirectMintAgent) public onlyOwner {\r\n    directMintAgent = newDirectMintAgent;\r\n  }\r\n\r\n  function setMinPrice(uint newMinPrice) public onlyOwner {\r\n    minPrice = newMinPrice;\r\n  }\r\n\r\n  function setPrice(uint newPrice) public onlyOwner {\r\n    price = newPrice;\r\n  }\r\n\r\n  function setToken(address newToken) public onlyOwner {\r\n    token = YayProtoToken(newToken);\r\n  }\r\n\r\n  function directMint(address to, uint investedWei) public onlyDirectMintAgentOrOwner saleIsOn {\r\n    mintTokens(to, investedWei);\r\n  }\r\n\r\n  function mintTokens(address to, uint weiInvested) internal {\r\n    uint milestoneIndex = currentMilestone();\r\n    Milestone storage milestone = milestones[milestoneIndex];\r\n    invested = invested.add(msg.value);\r\n    uint tokens = weiInvested.mul(price).div(1 ether);\r\n    uint bonusTokens = tokens.mul(milestone.bonus).div(percentRate);\r\n    uint tokensWithBonus = tokens.add(bonusTokens);\r\n    createAndTransferTokens(to, tokensWithBonus);\r\n  }\r\n\r\n  function createAndTransferTokens(address to, uint tokens) internal isUnderHardCap {\r\n    token.mint(this, tokens);\r\n    token.transfer(to, tokens);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Mainsale.sol\r\n\r\ncontract Mainsale is CommonSale {\r\n\r\n  address public marketingTokensWallet;\r\n\r\n  address public developersTokensWallet;\r\n\r\n  address public advisorsTokensWallet;\r\n\r\n  address public teamTokensWallet;\r\n\r\n  uint public marketingTokensPercent;\r\n\r\n  uint public developersTokensPercent;\r\n\r\n  uint public advisorsTokensPercent;\r\n\r\n  uint public teamTokensPercent;\r\n\r\n  function setMarketingTokensPercent(uint newMarketingTokensPercent) public onlyOwner {\r\n    marketingTokensPercent = newMarketingTokensPercent;\r\n  }\r\n\r\n  function setDevelopersTokensPercent(uint newDevelopersTokensPercent) public onlyOwner {\r\n    developersTokensPercent = newDevelopersTokensPercent;\r\n  }\r\n\r\n  function setAdvisorsTokensPercent(uint newAdvisorsTokensPercent) public onlyOwner {\r\n    advisorsTokensPercent = newAdvisorsTokensPercent;\r\n  }\r\n\r\n  function setTeamTokensPercent(uint newTeamTokensPercent) public onlyOwner {\r\n    teamTokensPercent = newTeamTokensPercent;\r\n  }\r\n\r\n  function setMarketingTokensWallet(address newMarketingTokensWallet) public onlyOwner {\r\n    marketingTokensWallet = newMarketingTokensWallet;\r\n  }\r\n\r\n  function setDevelopersTokensWallet(address newDevelopersTokensWallet) public onlyOwner {\r\n    developersTokensWallet = newDevelopersTokensWallet;\r\n  }\r\n\r\n  function setAdvisorsTokensWallet(address newAdvisorsTokensWallet) public onlyOwner {\r\n    advisorsTokensWallet = newAdvisorsTokensWallet;\r\n  }\r\n\r\n  function setTeamTokensWallet(address newTeamTokensWallet) public onlyOwner {\r\n    teamTokensWallet = newTeamTokensWallet;\r\n  }\r\n\r\n  function finish() public onlyOwner {\r\n    uint extendedTokensPercent = marketingTokensPercent.add(teamTokensPercent).add(developersTokensPercent).add(advisorsTokensPercent);\r\n    uint allTokens = token.totalSupply().mul(percentRate).div(percentRate.sub(extendedTokensPercent));\r\n    createAndTransferTokens(marketingTokensWallet,allTokens.mul(marketingTokensPercent).div(percentRate));\r\n    createAndTransferTokens(teamTokensWallet,allTokens.mul(teamTokensPercent).div(percentRate));\r\n    createAndTransferTokens(developersTokensWallet,allTokens.mul(developersTokensPercent).div(percentRate));\r\n    createAndTransferTokens(advisorsTokensWallet,allTokens.mul(advisorsTokensPercent).div(percentRate));\r\n    token.finishMinting();\r\n  }\r\n\r\n  function () external payable minPriceLimit {\r\n    wallet.transfer(msg.value);\r\n    mintTokens(msg.sender, msg.value);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/SoftcapFeature.sol\r\n\r\ncontract SoftcapFeature is WalletProvider {\r\n\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  bool public softcapAchieved;\r\n\r\n  bool public refundOn;\r\n\r\n  uint public softcap;\r\n\r\n  uint public invested;\r\n\r\n  function setSoftcap(uint newSoftcap) public onlyOwner {\r\n    softcap = newSoftcap;\r\n  }\r\n\r\n  function withdraw() public onlyOwner {\r\n    require(softcapAchieved);\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function updateBalance(address to, uint amount) internal {\r\n    balances[to] = balances[to].add(amount);\r\n    invested = invested.add(amount);\r\n    if (!softcapAchieved && invested >= softcap) {\r\n      softcapAchieved = true;\r\n    }\r\n  }\r\n\r\n  function updateRefundState() internal returns(bool) {\r\n    if (!softcapAchieved) {\r\n      refundOn = true;\r\n    }\r\n    return refundOn;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Presale.sol\r\n\r\ncontract Presale is SoftcapFeature, CommonSale {\r\n\r\n  Mainsale public mainsale;\r\n\r\n  function setMainsale(address newMainsale) public onlyOwner {\r\n    mainsale = Mainsale(newMainsale);\r\n  }\r\n\r\n  function finish() public onlyOwner {\r\n    token.setSaleAgent(mainsale);\r\n  }\r\n\r\n  function mintTokens(address to, uint weiInvested) internal {\r\n    super.mintTokens(to, weiInvested);\r\n    updateBalance(msg.sender, msg.value);\r\n  }\r\n\r\n  function () external payable minPriceLimit {\r\n    mintTokens(msg.sender, msg.value);\r\n  }\r\n\r\n  function refund() public {\r\n    require(refundOn && balances[msg.sender] > 0);\r\n    uint value = balances[msg.sender];\r\n    balances[msg.sender] = 0;\r\n    msg.sender.transfer(value);\r\n  }\r\n\r\n  function finishMinting() public onlyOwner {\r\n    if (updateRefundState()) {\r\n      token.finishMinting();\r\n    } else {\r\n      withdraw();\r\n      token.setSaleAgent(mainsale);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Configurator.sol\r\n\r\ncontract Configurator is Ownable {\r\n\r\n  YayProtoToken public token;\r\n\r\n  Presale public presale;\r\n\r\n  Mainsale public mainsale;\r\n\r\n  function deploy() public onlyOwner {\r\n\r\n    token = new YayProtoToken();\r\n    presale = new Presale();\r\n    mainsale = new Mainsale();\r\n\r\n    presale.setToken(token);\r\n    presale.setWallet(0x00c286bFbEfa2e7D060259822EDceA2E922a2B7C);\r\n    presale.setStart(1517356800);\r\n    presale.setMinPrice(100000000000000000);\r\n    presale.setPrice(7500000000000000000000);\r\n    presale.setSoftcap(3000000000000000000000);\r\n    presale.setHardcap(11250000000000000000000);\r\n    presale.addMilestone(7,60);\r\n    presale.addMilestone(7,50);\r\n    presale.addMilestone(7,40);\r\n    presale.addMilestone(7,30);\r\n    presale.addMilestone(7,25);\r\n    presale.addMilestone(7,20);\r\n    presale.setMainsale(mainsale);\r\n\r\n    mainsale.setToken(token);\r\n    mainsale.setPrice(7500000000000000000000);\r\n    mainsale.setWallet(0x009693f53723315219f681529fE6e05a91a28C41);\r\n    mainsale.setDevelopersTokensWallet(0x0097895f899559D067016a3d61e3742c0da533ED);\r\n    mainsale.setTeamTokensWallet(0x00137668FEda9d278A242C69aB520466A348C954);\r\n    mainsale.setMarketingTokensWallet(0x00A8a63f43ce630dbd3b96F1e040A730341bAa4D);\r\n    mainsale.setAdvisorsTokensWallet(0x00764817d154237115DdA4FAA76C7aaB5dE3cb25);\r\n    mainsale.setStart(1523750400);\r\n    mainsale.setMinPrice(100000000000000000);\r\n    mainsale.setHardcap(95000000000000000000000);\r\n    mainsale.setDevelopersTokensPercent(10);\r\n    mainsale.setTeamTokensPercent(10);\r\n    mainsale.setMarketingTokensPercent(5);\r\n    mainsale.setAdvisorsTokensPercent(10);\r\n    mainsale.addMilestone(7,15);\r\n    mainsale.addMilestone(7,10);\r\n    mainsale.addMilestone(7,7);\r\n    mainsale.addMilestone(7,4);\r\n    mainsale.addMilestone(7,0);\r\n\r\n    token.setSaleAgent(presale);\r\n\r\n    token.transferOwnership(owner);\r\n    presale.transferOwnership(owner);\r\n    mainsale.transferOwnership(owner);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSoftcap\",\"type\":\"uint256\"}],\"name\":\"setSoftcap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastSaleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"investedWei\",\"type\":\"uint256\"}],\"name\":\"directMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearMilestones\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"addMilestone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinPrice\",\"type\":\"uint256\"}],\"name\":\"setMinPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"anotherToken\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"directMintAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMainsale\",\"type\":\"address\"}],\"name\":\"setMainsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDirectMintAgent\",\"type\":\"address\"}],\"name\":\"setDirectMintAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcapAchieved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numberAfter\",\"type\":\"uint8\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"insertMilestone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"}],\"name\":\"removeMilestone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"milestonesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentMilestone\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"},{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"changeMilestone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHardcap\",\"type\":\"uint256\"}],\"name\":\"setHardcap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"milestones\",\"outputs\":[{\"name\":\"period\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStart\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Presale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3516a54cdfa6fddade8aa81eb90434b769d25c2bce5665ce1323677ebe1cff77"}]}