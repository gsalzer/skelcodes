{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/*\r\n    Owned contract interface\r\n*/\r\ncontract IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public view returns (address) {}\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\n/*\r\n    Contract Registry interface\r\n*/\r\ncontract IContractRegistry {\r\n    function getAddress(bytes32 _contractName) public view returns (address);\r\n}\r\n\r\n/*\r\n    Utilities & Common Modifiers\r\n*/\r\ncontract Utils {\r\n    /**\r\n        constructor\r\n    */\r\n    function Utils() public {\r\n    }\r\n\r\n    // verifies that an amount is greater than zero\r\n    modifier greaterThanZero(uint256 _amount) {\r\n        require(_amount > 0);\r\n        _;\r\n    }\r\n\r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n    // verifies that the address is different than this contract address\r\n    modifier notThis(address _address) {\r\n        require(_address != address(this));\r\n        _;\r\n    }\r\n\r\n    // Overflow protected math functions\r\n\r\n    /**\r\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\r\n\r\n        @param _x   value 1\r\n        @param _y   value 2\r\n\r\n        @return sum\r\n    */\r\n    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x + _y;\r\n        assert(z >= _x);\r\n        return z;\r\n    }\r\n\r\n    /**\r\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\r\n\r\n        @param _x   minuend\r\n        @param _y   subtrahend\r\n\r\n        @return difference\r\n    */\r\n    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        assert(_x >= _y);\r\n        return _x - _y;\r\n    }\r\n\r\n    /**\r\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\r\n\r\n        @param _x   factor 1\r\n        @param _y   factor 2\r\n\r\n        @return product\r\n    */\r\n    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x * _y;\r\n        assert(_x == 0 || z / _x == _y);\r\n        return z;\r\n    }\r\n}\r\n\r\n/*\r\n    Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    /**\r\n        @dev constructor\r\n    */\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev allows transferring the contract ownership\r\n        the new owner still needs to accept the transfer\r\n        can only be called by the contract owner\r\n\r\n        @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n        @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n/**\r\n    Contract Registry\r\n\r\n    The contract registry keeps contract addresses by name.\r\n    The owner can update contract addresses so that a contract name always points to the latest version\r\n    of the given contract.\r\n    Other contracts can query the registry to get updated addresses instead of depending on specific\r\n    addresses.\r\n\r\n    Note that contract names are limited to 32 bytes UTF8 strings to optimize gas costs\r\n*/\r\ncontract ContractRegistry is IContractRegistry, Owned, Utils {\r\n    struct RegistryItem {\r\n        address contractAddress;\r\n        uint256 nameIndex;\r\n        bool isSet;\r\n    }\r\n\r\n    mapping (bytes32 => RegistryItem) private items;    // name -> address mapping\r\n    bytes32[] public names;                             // list of all registered contract names\r\n\r\n    event AddressUpdate(bytes32 indexed _contractName, address _contractAddress);\r\n\r\n    /**\r\n        @dev constructor\r\n    */\r\n    function ContractRegistry() public {\r\n    }\r\n\r\n    /**\r\n        @dev returns the address associated with the given contract name\r\n\r\n        @param _contractName    contract name\r\n\r\n        @return contract address\r\n    */\r\n    function getAddress(bytes32 _contractName) public view returns (address) {\r\n        return items[_contractName].contractAddress;\r\n    }\r\n\r\n    /**\r\n        @dev registers a new address for the contract name in the registry\r\n\r\n       @param _contractName     contract name\r\n       @param _contractAddress  contract address\r\n    */\r\n    function registerAddress(bytes32 _contractName, address _contractAddress)\r\n        public\r\n        ownerOnly\r\n        validAddress(_contractAddress)\r\n    {\r\n        require(_contractName.length > 0); // validate input\r\n\r\n        // update the address in the registry\r\n        items[_contractName].contractAddress = _contractAddress;\r\n        \r\n        if (!items[_contractName].isSet) {\r\n            // mark the item as set\r\n            items[_contractName].isSet = true;\r\n            // add the contract name to the name list and update the item's index in the list\r\n            items[_contractName].nameIndex = names.push(_contractName) - 1;\r\n        }\r\n\r\n        // dispatch the address update event\r\n        emit AddressUpdate(_contractName, _contractAddress);\r\n    }\r\n\r\n    /**\r\n        @dev removes an existing contract address from the registry\r\n\r\n       @param _contractName contract name\r\n    */\r\n    function unregisterAddress(bytes32 _contractName) public ownerOnly {\r\n        require(_contractName.length > 0); // validate input\r\n\r\n        // remove the address from the registry\r\n        items[_contractName].contractAddress = address(0);\r\n\r\n        if (items[_contractName].isSet) {\r\n            // mark the item as empty\r\n            items[_contractName].isSet = false;\r\n            // move the last element to the deleted element's position\r\n            names[items[_contractName].nameIndex] = names[names.length - 1];\r\n            // remove the last element from the name list\r\n            names.length--;\r\n            // zero the deleted element's index\r\n            items[_contractName].nameIndex = 0;\r\n        }\r\n\r\n        // dispatch the address update event\r\n        emit AddressUpdate(_contractName, address(0));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_contractName\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractName\",\"type\":\"bytes32\"}],\"name\":\"unregisterAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"names\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractName\",\"type\":\"bytes32\"},{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"registerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"AddressUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"ContractRegistry","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d05023909ecb25920a1e1760052a8c283c064cb4c6907ebfc6d3d592917ae59b"}]}