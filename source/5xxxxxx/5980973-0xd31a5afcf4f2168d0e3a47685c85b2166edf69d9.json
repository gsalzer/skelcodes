{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// written by garry from Team Chibi Fighters\r\n// find us at https://chibifighters.io\r\n// chibifighters@gmail.com\r\n// version 1.0.0\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\ninterface ERC20Interface {\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n    function transfer(address to, uint tokens) external;\r\n    function balanceOf(address _owner) external view returns (uint256 _balance);\r\n}\r\n\r\ninterface ERC20InterfaceClassic {\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n}\r\n\r\ncontract DailyRewards is Owned {\r\n\r\n\tevent RewardClaimed(\r\n\t\taddress indexed buyer,\r\n\t\tuint256 day\r\n\t);\r\n\t\r\n\t// what day the player is on in his reward chain\r\n\tmapping (address => uint) private daysInRow;\r\n\r\n\t// timeout after which row is broken\r\n\tmapping (address => uint) private timeout;\r\n\t\r\n\t// how often the reward can be claimed, e.g. every 24h\r\n\tuint waitingTime = 24 hours;\r\n\t// window of claiming, if it expires day streak resets to day 1\r\n\tuint waitingTimeBuffer = 48 hours;\r\n\t\r\n\t\r\n\tconstructor() public {\r\n\t    // Explore Chibis and their universe\r\n\t    // Off chain battles, real Ether fights, true on chain ownership\r\n\t    // Leaderboards, tournaments, roleplay elements, we got it all\r\n\t}\r\n\t\r\n\t\r\n\tfunction requestReward() public returns (uint _days) {\r\n\t    require (msg.sender != address(0));\r\n\t    require (now > timeout[msg.sender]);\r\n\t    \r\n\t    // waited too long, reset\r\n\t    if (now > timeout[msg.sender] + waitingTimeBuffer) {\r\n\t        daysInRow[msg.sender] = 1;    \r\n\t    } else {\r\n\t        // no limit to being logged in, looking forward to the longest streak\r\n\t        daysInRow[msg.sender]++;\r\n\t    }\r\n\t    \r\n\t    timeout[msg.sender] = now + waitingTime;\r\n\t    \r\n\t    emit RewardClaimed(msg.sender, daysInRow[msg.sender]);\r\n\t    \r\n\t    return daysInRow[msg.sender];\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * @dev Query stats of next reward, checks for expired time, too\r\n\t **/\r\n\tfunction nextReward() public view returns (uint _day, uint _nextClaimTime, uint _nextClaimExpire) {\r\n\t    uint _dayCheck;\r\n\t    if (now > timeout[msg.sender] + waitingTimeBuffer) _dayCheck = 1; else _dayCheck = daysInRow[msg.sender] + 1;\r\n\t    \r\n\t    return (_dayCheck, timeout[msg.sender], timeout[msg.sender] + waitingTimeBuffer);\r\n\t}\r\n\t\r\n\t\r\n\tfunction queryWaitingTime() public view returns (uint _waitingTime) {\r\n\t    return waitingTime;\r\n\t}\r\n\t\r\n\tfunction queryWaitingTimeBuffer() public view returns (uint _waitingTimeBuffer) {\r\n\t    return waitingTimeBuffer;\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * @dev Sets the interval for daily rewards, e.g. 24h = 86400\r\n\t * @param newTime New interval time in seconds\r\n\t **/\r\n\tfunction setWaitingTime(uint newTime) public onlyOwner returns (uint _newWaitingTime) {\r\n\t    waitingTime = newTime;\r\n\t    return waitingTime;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * @dev Sets buffer for daily rewards. So user have time to claim it. e.g. 1h = 3600\r\n\t * @param newTime New buffer in seconds\r\n\t **/\r\n\tfunction setWaitingTimeBuffer(uint newTime) public onlyOwner returns (uint _newWaitingTimeBuffer) {\r\n\t    waitingTimeBuffer = newTime;\r\n\t    return waitingTimeBuffer;\r\n\t}\r\n\r\n\r\n    /**\r\n    * @dev Send Ether to owner\r\n    * @param _address Receiving address\r\n    * @param _amountWei Amount in WEI to send\r\n    **/\r\n    function weiToOwner(address _address, uint _amountWei) public onlyOwner returns (bool) {\r\n        require(_amountWei <= address(this).balance);\r\n        _address.transfer(_amountWei);\r\n        return true;\r\n    }\r\n\r\n    function ERC20ToOwner(address _to, uint256 _amount, ERC20Interface _tokenContract) public onlyOwner {\r\n        _tokenContract.transfer(_to, _amount);\r\n    }\r\n\r\n    function ERC20ClassicToOwner(address _to, uint256 _amount, ERC20InterfaceClassic _tokenContract) public onlyOwner {\r\n        _tokenContract.transfer(_to, _amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amountWei\",\"type\":\"uint256\"}],\"name\":\"weiToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"ERC20ClassicToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestReward\",\"outputs\":[{\"name\":\"_days\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextReward\",\"outputs\":[{\"name\":\"_day\",\"type\":\"uint256\"},{\"name\":\"_nextClaimTime\",\"type\":\"uint256\"},{\"name\":\"_nextClaimExpire\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"ERC20ToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setWaitingTimeBuffer\",\"outputs\":[{\"name\":\"_newWaitingTimeBuffer\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setWaitingTime\",\"outputs\":[{\"name\":\"_newWaitingTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"queryWaitingTimeBuffer\",\"outputs\":[{\"name\":\"_waitingTimeBuffer\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"queryWaitingTime\",\"outputs\":[{\"name\":\"_waitingTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DailyRewards","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://81abc0a122904f0a1cf24731ea26253414f4973919cab68e653d706d63a96ce3"}]}