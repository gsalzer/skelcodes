{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract ERC20Extended is ERC20 {\r\n    uint256 public decimals;\r\n    string public name;\r\n    string public symbol;\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract ComponentContainerInterface {\r\n    mapping (string => address) components;\r\n\r\n    event ComponentUpdated (string _name, address _componentAddress);\r\n\r\n    function setComponent(string _name, address _providerAddress) internal returns (bool success);\r\n    function getComponentByName(string name) public view returns (address);\r\n\r\n}\r\n\r\ncontract DerivativeInterface is ERC20Extended, Ownable, ComponentContainerInterface {\r\n\r\n    enum DerivativeStatus { New, Active, Paused, Closed }\r\n    enum DerivativeType { Index, Fund }\r\n\r\n    string public description;\r\n    string public category;\r\n    string public version;\r\n    DerivativeType public fundType;\r\n\r\n    address[] public tokens;\r\n    DerivativeStatus public status;\r\n\r\n    // invest, withdraw is done in transfer.\r\n    function invest() public payable returns(bool success);\r\n    function changeStatus(DerivativeStatus _status) public returns(bool);\r\n    function getPrice() public view returns(uint);\r\n\r\n    function initialize (address _componentList) internal;\r\n    function updateComponent(string _name) public returns (address);\r\n    function approveComponent(string _name) internal;\r\n}\r\n\r\ncontract ComponentContainer is ComponentContainerInterface {\r\n\r\n    function setComponent(string _name, address _componentAddress) internal returns (bool success) {\r\n        require(_componentAddress != address(0));\r\n        components[_name] = _componentAddress;\r\n        return true;\r\n    }\r\n\r\n    function getComponentByName(string _name) public view returns (address) {\r\n        return components[_name];\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract ComponentListInterface {\r\n    event ComponentUpdated (string _name, string _version, address _componentAddress);\r\n    function setComponent(string _name, address _componentAddress) public returns (bool);\r\n    function getComponent(string _name, string _version) public view returns (address);\r\n    function getLatestComponent(string _name) public view returns(address);\r\n}\r\n\r\ncontract ERC20NoReturn {\r\n    uint256 public decimals;\r\n    string public name;\r\n    string public symbol;\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public;\r\n    function approve(address spender, uint tokens) public;\r\n    function transferFrom(address from, address to, uint tokens) public;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract FeeChargerInterface {\r\n    // TODO: change this to mainnet MOT address before deployment.\r\n    // solhint-disable-next-line\r\n    ERC20Extended public MOT = ERC20Extended(0x263c618480DBe35C300D8d5EcDA19bbB986AcaeD);\r\n    // kovan MOT: 0x41Dee9F481a1d2AA74a3f1d0958C1dB6107c686A\r\n    function setMotAddress(address _motAddress) external returns (bool success);\r\n}\r\n\r\n// Abstract class that implements the common functions to all our derivatives\r\ncontract Derivative is DerivativeInterface, ComponentContainer, PausableToken {\r\n\r\n    ERC20Extended internal constant ETH = ERC20Extended(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    ComponentListInterface internal componentList;\r\n    string public constant MARKET = \"MarketProvider\";\r\n    string public constant EXCHANGE = \"ExchangeProvider\";\r\n    string public constant WITHDRAW = \"WithdrawProvider\";\r\n    string public constant RISK = \"RiskProvider\";\r\n    string public constant WHITELIST = \"WhitelistProvider\";\r\n    string public constant FEE = \"FeeProvider\";\r\n    string public constant REIMBURSABLE = \"Reimbursable\";\r\n    string public constant REBALANCE = \"RebalanceProvider\";\r\n\r\n    function initialize (address _componentList) internal {\r\n        require(_componentList != 0x0);\r\n        componentList = ComponentListInterface(_componentList);\r\n    }\r\n\r\n    function updateComponent(string _name) public onlyOwner returns (address) {\r\n        // still latest.\r\n        if (super.getComponentByName(_name) == componentList.getLatestComponent(_name)) {\r\n            return super.getComponentByName(_name);\r\n        }\r\n\r\n        // changed.\r\n        require(super.setComponent(_name, componentList.getLatestComponent(_name)));\r\n        // approve if it's not Marketplace.\r\n        if (keccak256(abi.encodePacked(_name)) != keccak256(abi.encodePacked(MARKET))) {\r\n            approveComponent(_name);\r\n        }\r\n\r\n        // return latest address.\r\n        return componentList.getLatestComponent(_name);\r\n    }\r\n\r\n\r\n\r\n    function approveComponent(string _name) internal {\r\n        address componentAddress = getComponentByName(_name);\r\n        ERC20NoReturn(FeeChargerInterface(componentAddress).MOT()).approve(componentAddress, 0);\r\n        ERC20NoReturn(FeeChargerInterface(componentAddress).MOT()).approve(componentAddress, 2 ** 256 - 1);\r\n    }\r\n\r\n    function () public payable {\r\n\r\n    }\r\n}\r\n\r\ncontract IndexInterface is DerivativeInterface {\r\n    uint[] public weights;\r\n    bool public supportRebalance;\r\n\r\n    // this should be called until it returns true.\r\n    function rebalance() public returns (bool success);\r\n    function getTokens() public view returns (address[] _tokens, uint[] _weights);\r\n}\r\n\r\ncontract ComponentInterface {\r\n    string public name;\r\n    string public description;\r\n    string public category;\r\n    string public version;\r\n}\r\n\r\ncontract ExchangeInterface is ComponentInterface {\r\n    /*\r\n     * @dev Checks if a trading pair is available\r\n     * For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\r\n     * @param address _sourceAddress The token to sell for the destAddress.\r\n     * @param address _destAddress The token to buy with the source token.\r\n     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\r\n     * @return boolean whether or not the trading pair is supported by this exchange provider\r\n     */\r\n    function supportsTradingPair(address _srcAddress, address _destAddress, bytes32 _exchangeId)\r\n        external view returns(bool supported);\r\n\r\n    /*\r\n     * @dev Buy a single token with ETH.\r\n     * @param ERC20Extended _token The token to buy, should be an ERC20Extended address.\r\n     * @param uint _amount Amount of ETH used to buy this token. Make sure the value sent to this function is the same as the _amount.\r\n     * @param uint _minimumRate The minimum amount of tokens to receive for 1 ETH.\r\n     * @param address _depositAddress The address to send the bought tokens to.\r\n     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\r\n     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here.\r\n     * @return boolean whether or not the trade succeeded.\r\n     */\r\n    function buyToken\r\n        (\r\n        ERC20Extended _token, uint _amount, uint _minimumRate,\r\n        address _depositAddress, bytes32 _exchangeId, address _partnerId\r\n        ) external payable returns(bool success);\r\n\r\n    /*\r\n     * @dev Sell a single token for ETH. Make sure the token is approved beforehand.\r\n     * @param ERC20Extended _token The token to sell, should be an ERC20Extended address.\r\n     * @param uint _amount Amount of tokens to sell.\r\n     * @param uint _minimumRate The minimum amount of ETH to receive for 1 ERC20Extended token.\r\n     * @param address _depositAddress The address to send the bought tokens to.\r\n     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\r\n     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here\r\n     * @return boolean boolean whether or not the trade succeeded.\r\n     */\r\n    function sellToken\r\n        (\r\n        ERC20Extended _token, uint _amount, uint _minimumRate,\r\n        address _depositAddress, bytes32 _exchangeId, address _partnerId\r\n        ) external returns(bool success);\r\n}\r\n\r\ncontract PriceProviderInterface is ComponentInterface {\r\n    /*\r\n     * @dev Returns the expected price for 1 of sourceAddress.\r\n     * For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\r\n     * @param address _sourceAddress The token to sell for the destAddress.\r\n     * @param address _destAddress The token to buy with the source token.\r\n     * @param uint _amount The amount of tokens which is wanted to buy.\r\n     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\r\n     * @return returns the expected and slippage rate for the specified conversion\r\n     */\r\n    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount, bytes32 _exchangeId)\r\n        external view returns(uint expectedRate, uint slippageRate);\r\n}\r\n\r\ncontract OlympusExchangeInterface is ExchangeInterface, PriceProviderInterface, Ownable {\r\n    /*\r\n     * @dev Buy multiple tokens at once with ETH.\r\n     * @param ERC20Extended[] _tokens The tokens to buy, should be an array of ERC20Extended addresses.\r\n     * @param uint[] _amounts Amount of ETH used to buy this token. Make sure the value sent to this function is the same as the sum of this array.\r\n     * @param uint[] _minimumRates The minimum amount of tokens to receive for 1 ETH.\r\n     * @param address _depositAddress The address to send the bought tokens to.\r\n     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\r\n     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here\r\n     * @return boolean boolean whether or not the trade succeeded.\r\n     */\r\n    function buyTokens\r\n        (\r\n        ERC20Extended[] _tokens, uint[] _amounts, uint[] _minimumRates,\r\n        address _depositAddress, bytes32 _exchangeId, address _partnerId\r\n        ) external payable returns(bool success);\r\n\r\n    /*\r\n     * @dev Sell multiple tokens at once with ETH, make sure all of the tokens are approved to be transferred beforehand with the Olympus Exchange address.\r\n     * @param ERC20Extended[] _tokens The tokens to sell, should be an array of ERC20Extended addresses.\r\n     * @param uint[] _amounts Amount of tokens to sell this token. Make sure the value sent to this function is the same as the sum of this array.\r\n     * @param uint[] _minimumRates The minimum amount of ETH to receive for 1 specified ERC20Extended token.\r\n     * @param address _depositAddress The address to send the bought tokens to.\r\n     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\r\n     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here\r\n     * @return boolean boolean whether or not the trade succeeded.\r\n     */\r\n    function sellTokens\r\n        (\r\n        ERC20Extended[] _tokens, uint[] _amounts, uint[] _minimumRates,\r\n        address _depositAddress, bytes32 _exchangeId, address _partnerId\r\n        ) external returns(bool success);\r\n}\r\n\r\ncontract RebalanceInterface is ComponentInterface {\r\n    // this should be called until it returns true.\r\n    function recalculateTokensToBuyAfterSale(uint _receivedETHFromSale, uint[] _amountsToBuy) external pure\r\n        returns(uint[] _recalculatedAmountsToBuy);\r\n    function rebalanceGetTokensToSellAndBuy() external returns\r\n        (address[] _tokensToSell, uint[] _amountsToSell, address[] _tokensToBuy, uint[] _amountsToBuy, address[] _tokensWithPriceIssues);\r\n}\r\n\r\ncontract WithdrawInterface is ComponentInterface {\r\n\r\n    function request(address _requester, uint amount) external returns(bool);\r\n    function withdraw(address _requester) external returns(uint eth, uint tokens);\r\n    function start() external;\r\n    function isInProgress() external view returns(bool);\r\n    function unlock() external;\r\n    function getUserRequests() external view returns(address[]);\r\n    function getTotalWithdrawAmount() external view returns(uint);\r\n\r\n    event WithdrawRequest(address _requester, uint amountOfToken);\r\n    event Withdrawed(address _requester,  uint amountOfToken , uint amountOfEther);\r\n}\r\n\r\ncontract WhitelistInterface is ComponentInterface {\r\n\r\n    // sender -> category -> user -> allowed\r\n    mapping (address => mapping(uint8 => mapping(address => bool))) public whitelist;\r\n    // sender -> category -> enabled\r\n    mapping (address => mapping(uint8 => bool)) public enabled;\r\n\r\n    function enable(uint8 _key) external;\r\n    function disable(uint8 _key) external;\r\n    function isAllowed(uint8 _key, address _account) external view returns(bool);\r\n    function setAllowed(address[] accounts, uint8 _key, bool allowed) external returns(bool);\r\n}\r\n\r\ncontract MarketplaceInterface is Ownable {\r\n\r\n    address[] public products;\r\n    mapping(address => address[]) public productMappings;\r\n\r\n    function getAllProducts() external view returns (address[] allProducts);\r\n    function registerProduct() external returns(bool success);\r\n    function getOwnProducts() external view returns (address[] addresses);\r\n\r\n    event Registered(address product, address owner);\r\n}\r\n\r\ncontract ChargeableInterface is ComponentInterface {\r\n\r\n    uint public DENOMINATOR;\r\n    function calculateFee(address _caller, uint _amount) external returns(uint totalFeeAmount);\r\n    function setFeePercentage(uint _fee) external returns (bool succes);\r\n    function getFeePercentage() external view returns (uint feePercentage);\r\n\r\n }\r\n\r\ncontract ReimbursableInterface is ComponentInterface {\r\n\r\n    // this should be called at the beginning of a function.\r\n    // such as rebalance and withdraw.\r\n    function startGasCalculation() external;\r\n    // this should be called at the last moment of the function.\r\n    function reimburse() external returns (uint);\r\n\r\n}\r\n\r\ncontract RiskControlInterface is ComponentInterface {\r\n    function hasRisk(address _sender, address _receiver, address _tokenAddress, uint _amount, uint _rate)\r\n        external returns(bool isRisky);\r\n}\r\n\r\ncontract OlympusIndex is IndexInterface, Derivative {\r\n    using SafeMath for uint256;\r\n\r\n    enum WhitelistKeys { Investment, Maintenance }\r\n\r\n    event ChangeStatus(DerivativeStatus status);\r\n    event Invested(address user, uint amount);\r\n    event Reimbursed(uint amount);\r\n    event  RiskEvent(address _sender, address _receiver, address _tokenAddress, uint _amount, uint _rate, bool risky);\r\n\r\n    uint public constant DENOMINATOR = 100000;\r\n    uint public constant INITIAL_VALUE =  10**18;\r\n    uint[] public weights;\r\n    uint public accumulatedFee = 0;\r\n    uint public maxTransfers = 10;\r\n\r\n    // If whitelist is disabled, that will become onlyOwner\r\n    modifier onlyOwnerOrWhitelisted(WhitelistKeys _key) {\r\n        WhitelistInterface whitelist = WhitelistInterface(getComponentByName(WHITELIST));\r\n        require(\r\n            msg.sender == owner ||\r\n            (whitelist.enabled(address(this), uint8(_key)) && whitelist.isAllowed(uint8(_key), msg.sender) )\r\n        );\r\n        _;\r\n    }\r\n\r\n    // If whitelist is disabled, anyone can do this\r\n    modifier whitelisted(WhitelistKeys _key) {\r\n        require(WhitelistInterface(getComponentByName(WHITELIST)).isAllowed(uint8(_key), msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier withoutRisk(address _sender, address _receiver, address _tokenAddress, uint _amount, uint _rate) {\r\n        require(!hasRisk(_sender, _receiver, _tokenAddress, _amount, _rate));\r\n        _;\r\n    }\r\n\r\n    modifier checkLength(address[] _tokens, uint[] _weights) {\r\n        require(_tokens.length == _weights.length);\r\n        _;\r\n    }\r\n\r\n    modifier checkWeights(uint[] _weights){\r\n        uint totalWeight;\r\n        for(uint i = 0; i < _weights.length; i++){\r\n            totalWeight += _weights[i];\r\n        }\r\n        require(totalWeight == 100);\r\n        _;\r\n    }\r\n\r\n    constructor (\r\n      string _name,\r\n      string _symbol,\r\n      string _description,\r\n      string _category,\r\n      uint _decimals,\r\n      address[] _tokens,\r\n      uint[] _weights)\r\n      checkLength(_tokens, _weights) checkWeights(_weights) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        totalSupply_ = 0;\r\n        decimals = _decimals;\r\n        description = _description;\r\n        category = _category;\r\n        version = \"1.0\";\r\n        fundType = DerivativeType.Index;\r\n        tokens = _tokens;\r\n        weights = _weights;\r\n        status = DerivativeStatus.New;\r\n    }\r\n\r\n    // ----------------------------- CONFIG -----------------------------\r\n    function initialize(address _componentList, uint _initialFundFee) onlyOwner external payable {\r\n        require(status == DerivativeStatus.New);\r\n        require(msg.value > 0); // Require some balance for internal opeations as reimbursable\r\n        require(_componentList != 0x0);\r\n\r\n        super.initialize(_componentList);\r\n\r\n        setComponent(MARKET, componentList.getLatestComponent(MARKET));\r\n        setComponent(EXCHANGE, componentList.getLatestComponent(EXCHANGE));\r\n        setComponent(REBALANCE, componentList.getLatestComponent(REBALANCE));\r\n        setComponent(RISK, componentList.getLatestComponent(RISK));\r\n        setComponent(WHITELIST, componentList.getLatestComponent(WHITELIST));\r\n        setComponent(FEE, componentList.getLatestComponent(FEE));\r\n        setComponent(REIMBURSABLE, componentList.getLatestComponent(REIMBURSABLE));\r\n        setComponent(WITHDRAW, componentList.getLatestComponent(WITHDRAW));\r\n\r\n        // approve component for charging fees.\r\n        approveComponents();\r\n\r\n        MarketplaceInterface(componentList.getLatestComponent(MARKET)).registerProduct();\r\n        ChargeableInterface(componentList.getLatestComponent(FEE)).setFeePercentage(_initialFundFee);\r\n\r\n        status = DerivativeStatus.Active;\r\n\r\n        emit ChangeStatus(status);\r\n\r\n        accumulatedFee += msg.value;\r\n    }\r\n\r\n    // Call after you have updated the MARKET provider, not required after initialize\r\n    function registerInNewMarketplace() external onlyOwner returns(bool) {\r\n        require(MarketplaceInterface(getComponentByName(MARKET)).registerProduct());\r\n        return true;\r\n    }\r\n\r\n    // Return tokens and weights\r\n    function getTokens() public view returns (address[] _tokens, uint[] _weights) {\r\n        return (tokens, weights);\r\n    }\r\n    // Return tokens and amounts\r\n    function getTokensAndAmounts() external view returns(address[], uint[]) {\r\n        uint[] memory _amounts = new uint[](tokens.length);\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            _amounts[i] = ERC20Extended(tokens[i]).balanceOf(address(this));\r\n        }\r\n        return (tokens, _amounts);\r\n    }\r\n\r\n    function changeStatus(DerivativeStatus _status) public onlyOwner returns(bool) {\r\n        require(_status != DerivativeStatus.New && status != DerivativeStatus.New && _status != DerivativeStatus.Closed);\r\n        require(status != DerivativeStatus.Closed && _status != DerivativeStatus.Closed);\r\n\r\n        status = _status;\r\n        emit ChangeStatus(status);\r\n        return true;\r\n    }\r\n\r\n    function close() public onlyOwner returns(bool success){\r\n        require(status != DerivativeStatus.New);\r\n        getETHFromTokens(DENOMINATOR); // 100% all the tokens\r\n        status = DerivativeStatus.Closed;\r\n        emit ChangeStatus(status);\r\n        return true;\r\n    }\r\n\r\n    // ----------------------------- DERIVATIVE -----------------------------\r\n\r\n    function invest() public payable\r\n     whenNotPaused\r\n     whitelisted(WhitelistKeys.Investment)\r\n     withoutRisk(msg.sender, address(this), ETH, msg.value, 1)\r\n     returns(bool) {\r\n        require(status == DerivativeStatus.Active, \"The Fund is not active\");\r\n        require(msg.value >= 10**15, \"Minimum value to invest is 0.001 ETH\");\r\n         // Current value is already added in the balance, reduce it\r\n        uint _sharePrice;\r\n\r\n        if(totalSupply_ > 0) {\r\n            _sharePrice = getPrice() - ( (msg.value * 10 ** decimals ) / totalSupply_);\r\n         } else {\r\n            _sharePrice = INITIAL_VALUE;\r\n        }\r\n\r\n        ChargeableInterface feeManager = ChargeableInterface(getComponentByName(FEE));\r\n        uint fee = feeManager.calculateFee(msg.sender, msg.value);\r\n\r\n        uint _investorShare = ( ( (msg.value-fee) * DENOMINATOR) / _sharePrice) * 10 ** decimals;\r\n        _investorShare = _investorShare / DENOMINATOR;\r\n\r\n        accumulatedFee += fee;\r\n        balances[msg.sender] += _investorShare;\r\n        totalSupply_ += _investorShare;\r\n\r\n        emit Invested(msg.sender, _investorShare);\r\n        return true;\r\n    }\r\n\r\n    function getPrice() public view returns(uint)  {\r\n        if(totalSupply_ == 0) {\r\n            return INITIAL_VALUE;\r\n        }\r\n\r\n        // Total Value in ETH among its tokens + ETH new added value\r\n        return (\r\n          ((getAssetsValue() + getETHBalance() ) * 10 ** decimals ) / (totalSupply_),\r\n        );\r\n    }\r\n\r\n    function getETHBalance() public view returns(uint){\r\n        return address(this).balance - accumulatedFee;\r\n    }\r\n\r\n    function getAssetsValue() public view returns (uint) {\r\n        // TODO cast to OlympusExchangeInterface\r\n        OlympusExchangeInterface exchangeProvider = OlympusExchangeInterface(getComponentByName(EXCHANGE));\r\n        uint _totalTokensValue = 0;\r\n        // Iterator\r\n        uint _expectedRate;\r\n        uint _balance;\r\n\r\n        for (uint16 i = 0; i < tokens.length; i++) {\r\n\r\n            _balance = ERC20(tokens[i]).balanceOf(address(this));\r\n\r\n            if(_balance == 0){continue;}\r\n\r\n            (_expectedRate, ) = exchangeProvider.getPrice(ETH, ERC20Extended(tokens[i]), _balance, 0x0);\r\n\r\n            if(_expectedRate == 0){continue;}\r\n            _totalTokensValue += (_balance * 10**18) / _expectedRate;\r\n\r\n        }\r\n        return _totalTokensValue;\r\n    }\r\n\r\n    // ----------------------------- FEES  -----------------------------\r\n    // Owner can send ETH to the Index, to perform some task, this eth belongs to him\r\n    function addOwnerBalance() external payable onlyOwner {\r\n        accumulatedFee += msg.value;\r\n    }\r\n\r\n    function withdrawFee(uint amount) external onlyOwner whenNotPaused returns(bool) {\r\n        require(accumulatedFee >= amount);\r\n        accumulatedFee -= amount;\r\n        msg.sender.transfer(amount);\r\n        return true;\r\n    }\r\n\r\n    function setManagementFee(uint _fee) external onlyOwner {\r\n        ChargeableInterface(getComponentByName(FEE)).setFeePercentage(_fee);\r\n    }\r\n\r\n    function getManagementFee() external view returns(uint) {\r\n        return ChargeableInterface(getComponentByName(FEE)).getFeePercentage();\r\n    }\r\n\r\n    // ----------------------------- WITHDRAW -----------------------------\r\n    function requestWithdraw(uint amount) external\r\n     whitelisted(WhitelistKeys.Investment)\r\n     withoutRisk(msg.sender, address(this), address(this), amount, getPrice())\r\n    {\r\n        WithdrawInterface(getComponentByName(WITHDRAW)).request(msg.sender, amount);\r\n    }\r\n\r\n    function setMaxTransfers(uint _maxTransfers) external onlyOwner {\r\n        maxTransfers = _maxTransfers;\r\n    }\r\n\r\n    function withdraw() external onlyOwnerOrWhitelisted(WhitelistKeys.Maintenance) whenNotPaused returns(bool) {\r\n\r\n        ReimbursableInterface(getComponentByName(REIMBURSABLE)).startGasCalculation();\r\n        WithdrawInterface withdrawProvider = WithdrawInterface(getComponentByName(WITHDRAW));\r\n        // Check if there is request\r\n        address[] memory _requests = withdrawProvider.getUserRequests();\r\n        if(_requests.length == 0) {\r\n            reimburse();\r\n            return true;\r\n        }\r\n\r\n        uint _transfers = 0;\r\n        uint _eth;\r\n        uint tokens;\r\n\r\n        if (!withdrawProvider.isInProgress()) {\r\n            withdrawProvider.start();\r\n        }\r\n        uint _totalETHToReturn = ( withdrawProvider.getTotalWithdrawAmount() * getPrice()) / 10 ** decimals;\r\n\r\n        if(_totalETHToReturn > getETHBalance()) {\r\n            uint _tokenPercentToSell = (( _totalETHToReturn - getETHBalance()) * DENOMINATOR) / getAssetsValue();\r\n            getETHFromTokens(_tokenPercentToSell);\r\n        }\r\n\r\n        for(uint8 i = 0; i < _requests.length && _transfers < maxTransfers ; i++) {\r\n\r\n\r\n            (_eth, tokens) = withdrawProvider.withdraw(_requests[i]);\r\n            if(tokens == 0) {continue;}\r\n\r\n            balances[_requests[i]] -= tokens;\r\n            totalSupply_ -= tokens;\r\n            address(_requests[i]).transfer(_eth);\r\n            _transfers++;\r\n        }\r\n\r\n        if(!withdrawProvider.isInProgress()) {\r\n            withdrawProvider.unlock();\r\n        }\r\n        reimburse();\r\n        return !withdrawProvider.isInProgress(); // True if completed\r\n    }\r\n\r\n    function withdrawInProgress() external view returns(bool) {\r\n        return  WithdrawInterface(getComponentByName(WITHDRAW)).isInProgress();\r\n    }\r\n\r\n    function reimburse() internal {\r\n        uint reimbursedAmount = ReimbursableInterface(getComponentByName(REIMBURSABLE)).reimburse();\r\n        accumulatedFee -= reimbursedAmount;\r\n        emit Reimbursed(reimbursedAmount);\r\n        msg.sender.transfer(reimbursedAmount);\r\n    }\r\n\r\n    function tokensWithAmount() public view returns( ERC20Extended[] memory) {\r\n        // First check the length\r\n        uint8 length = 0;\r\n        uint[] memory _amounts = new uint[](tokens.length);\r\n        for (uint8 i = 0; i < tokens.length; i++) {\r\n            _amounts[i] = ERC20Extended(tokens[i]).balanceOf(address(this));\r\n            if(_amounts[i] > 0) {length++;}\r\n        }\r\n\r\n        ERC20Extended[] memory _tokensWithAmount = new ERC20Extended[](length);\r\n        // Then create they array\r\n        uint8 index = 0;\r\n        for (uint8 j = 0; j < tokens.length; j++) {\r\n            if(_amounts[j] > 0) {\r\n                _tokensWithAmount[index] = ERC20Extended(tokens[j]);\r\n                index++;\r\n            }\r\n        }\r\n        return _tokensWithAmount;\r\n    }\r\n\r\n    function getETHFromTokens(uint _tokenPercentage ) internal {\r\n        ERC20Extended[] memory _tokensToSell = tokensWithAmount();\r\n        uint[] memory _amounts = new uint[](  _tokensToSell.length);\r\n        uint[] memory _sellRates = new uint[]( _tokensToSell.length);\r\n        OlympusExchangeInterface exchange = OlympusExchangeInterface(getComponentByName(EXCHANGE));\r\n\r\n        for (uint8 i = 0; i < _tokensToSell.length; i++) {\r\n\r\n            _amounts[i] = (_tokenPercentage * _tokensToSell[i].balanceOf(address(this)) )/DENOMINATOR;\r\n            ( , _sellRates[i] ) = exchange.getPrice(_tokensToSell[i], ETH, _amounts[i], 0x0);\r\n            require(!hasRisk(address(this), exchange, address( _tokensToSell[i]), _amounts[i] , 0));\r\n            _tokensToSell[i].approve(exchange,  0);\r\n            _tokensToSell[i].approve(exchange,  _amounts[i]);\r\n        }\r\n        require(exchange.sellTokens(_tokensToSell, _amounts, _sellRates, address(this), 0x0, 0x0));\r\n\r\n    }\r\n\r\n    // ----------------------------- REBALANCE -----------------------------\r\n\r\n    function buyTokens() external onlyOwnerOrWhitelisted(WhitelistKeys.Maintenance) whenNotPaused returns(bool) {\r\n\r\n        ReimbursableInterface(getComponentByName(REIMBURSABLE)).startGasCalculation();\r\n        OlympusExchangeInterface exchange = OlympusExchangeInterface(getComponentByName(EXCHANGE));\r\n\r\n\r\n        if(getETHBalance() == 0) {\r\n            reimburse();\r\n            return true;\r\n        }\r\n        uint[] memory _amounts = new uint[](tokens.length);\r\n        uint[] memory _rates = new uint[](tokens.length); // Initialize to 0, making sure any rate is fine\r\n        ERC20Extended[] memory _tokensErc20 = new ERC20Extended[](tokens.length); // Initialize to 0, making sure any rate is fine\r\n        uint ethBalance = getETHBalance();\r\n        uint totalAmount = 0;\r\n\r\n        for(uint8 i = 0; i < tokens.length; i++) {\r\n            _amounts[i] = ethBalance * weights[i] / 100;\r\n            _tokensErc20[i] = ERC20Extended(tokens[i]);\r\n            (, _rates[i] ) = exchange.getPrice(ETH,  _tokensErc20[i],  _amounts[i], 0x0);\r\n            totalAmount += _amounts[i];\r\n        }\r\n\r\n        require(exchange.buyTokens.value(totalAmount)(_tokensErc20, _amounts, _rates, address(this), 0x0, 0x0));\r\n\r\n        reimburse();\r\n        return true;\r\n    }\r\n\r\n    function rebalance() public onlyOwnerOrWhitelisted(WhitelistKeys.Maintenance) whenNotPaused returns (bool success) {\r\n        ReimbursableInterface(getComponentByName(REIMBURSABLE)).startGasCalculation();\r\n        RebalanceInterface rebalanceProvider = RebalanceInterface(getComponentByName(REBALANCE));\r\n        OlympusExchangeInterface exchangeProvider = OlympusExchangeInterface(getComponentByName(EXCHANGE));\r\n        address[] memory tokensToSell;\r\n        uint[] memory amountsToSell;\r\n        address[] memory tokensToBuy;\r\n        uint[] memory amountsToBuy;\r\n        uint8 i;\r\n        uint ETHBalanceBefore = address(this).balance;\r\n\r\n        (tokensToSell, amountsToSell, tokensToBuy, amountsToBuy,) = rebalanceProvider.rebalanceGetTokensToSellAndBuy();\r\n        // Sell Tokens\r\n        for (i = 0; i < tokensToSell.length; i++) {\r\n            ERC20Extended(tokensToSell[i]).approve(address(exchangeProvider), 0);\r\n            ERC20Extended(tokensToSell[i]).approve(address(exchangeProvider), amountsToSell[i]);\r\n            require(exchangeProvider.sellToken(ERC20Extended(tokensToSell[i]), amountsToSell[i], 0, address(this), 0x0, 0x0));\r\n\r\n        }\r\n\r\n        // Buy Tokens\r\n        amountsToBuy = rebalanceProvider.recalculateTokensToBuyAfterSale(address(this).balance - ETHBalanceBefore, amountsToBuy);\r\n        for (i = 0; i < tokensToBuy.length; i++) {\r\n            require(\r\n                exchangeProvider.buyToken.value(amountsToBuy[i])(ERC20Extended(tokensToBuy[i]), amountsToBuy[i], 0, address(this), 0x0, 0x0)\r\n            );\r\n        }\r\n\r\n        reimburse();\r\n        return true;\r\n    }\r\n\r\n    // ----------------------------- WHITELIST -----------------------------\r\n\r\n    function enableWhitelist(WhitelistKeys _key) external onlyOwner returns(bool) {\r\n        WhitelistInterface(getComponentByName(WHITELIST)).enable(uint8(_key));\r\n        return true;\r\n    }\r\n\r\n    function disableWhitelist(WhitelistKeys _key) external onlyOwner returns(bool) {\r\n        WhitelistInterface(getComponentByName(WHITELIST)).disable(uint8(_key));\r\n        return true;\r\n    }\r\n\r\n    function setAllowed(address[] accounts, WhitelistKeys _key,  bool allowed) onlyOwner public returns(bool){\r\n        WhitelistInterface(getComponentByName(WHITELIST)).setAllowed(accounts,uint8(_key), allowed);\r\n        return true;\r\n    }\r\n\r\n    function approveComponents() private {\r\n        approveComponent(EXCHANGE);\r\n        approveComponent(WITHDRAW);\r\n        approveComponent(RISK);\r\n        approveComponent(WHITELIST);\r\n        approveComponent(FEE);\r\n        approveComponent(REIMBURSABLE);\r\n        approveComponent(REBALANCE);\r\n    }\r\n\r\n    function updateAllComponents() public onlyOwner {\r\n        updateComponent(MARKET);\r\n        updateComponent(EXCHANGE);\r\n        updateComponent(WITHDRAW);\r\n        updateComponent(RISK);\r\n        updateComponent(WHITELIST);\r\n        updateComponent(FEE);\r\n        updateComponent(REBALANCE);\r\n        updateComponent(REIMBURSABLE);\r\n    }\r\n\r\n    function hasRisk(address _sender, address _receiver, address _tokenAddress, uint _amount, uint _rate) public returns(bool) {\r\n        RiskControlInterface riskControl = RiskControlInterface(getComponentByName(RISK));\r\n        bool risk = riskControl.hasRisk(_sender, _receiver, _tokenAddress, _amount, _rate);\r\n        emit RiskEvent (_sender, _receiver, _tokenAddress, _amount, _rate, risk);\r\n        return risk;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"addOwnerBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"hasRisk\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WITHDRAW\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateAllComponents\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WHITELIST\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"updateComponent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"uint8\"}],\"name\":\"disableWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_VALUE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getComponentByName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensWithAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getETHBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssetsValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawInProgress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"},{\"name\":\"_key\",\"type\":\"uint8\"},{\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"changeStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RISK\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManagementFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerInNewMarketplace\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensAndAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportRebalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"uint8\"}],\"name\":\"enableWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXCHANGE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REIMBURSABLE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_componentList\",\"type\":\"address\"},{\"name\":\"_initialFundFee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxTransfers\",\"type\":\"uint256\"}],\"name\":\"setMaxTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REBALANCE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"category\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKET\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accumulatedFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_category\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"ChangeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reimbursed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"risky\",\"type\":\"bool\"}],\"name\":\"RiskEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_componentAddress\",\"type\":\"address\"}],\"name\":\"ComponentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"OlympusIndex","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000000c4f6c796d707573496e646578000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034f4c490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d4f6c796d70757320496e64657800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000946696e616e6369616c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000263c618480dbe35c300d8d5ecda19bbb986acaed000000000000000000000000dd974d5c2e2928dea5f71b9825b8b646686bd200000000000000000000000000d26114cd6ee289accf82350c8d8487fedb8a0c0700000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000001e","Library":"","SwarmSource":"bzzr://79a3c5ab14a0beb81d7f4774a9e904c03d6b4206896158a320d1d8e4532caa7f"}]}