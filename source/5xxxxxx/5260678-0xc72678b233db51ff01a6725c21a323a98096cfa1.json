{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract Ownable {\r\n\r\n  address public contractOwner;\r\n\r\n  function Ownable() public {\r\n    contractOwner = msg.sender;\r\n  }\r\n\r\n  modifier onlyContractOwner() {\r\n    require(msg.sender == contractOwner);\r\n    _;\r\n  }\r\n\r\n  function transferContractOwnership(address _newOwner) public onlyContractOwner {\r\n    require(_newOwner != address(0));\r\n    contractOwner = _newOwner;\r\n  }\r\n  \r\n  function contractWithdraw() public onlyContractOwner {\r\n      contractOwner.transfer(this.balance);\r\n  }  \r\n\r\n}\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n  // Optional\r\n  // function name() public view returns (string name);\r\n  // function symbol() public view returns (string symbol);\r\n  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n  // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\ncontract EthPiranha is ERC721, Ownable {\r\n\r\n  event PiranhaCreated(uint256 tokenId, string name, address owner);\r\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n  string public constant NAME = \"Piranha\";\r\n  string public constant SYMBOL = \"PiranhaToken\";\r\n\r\n  mapping (uint256 => address) private piranhaIdToOwner;\r\n\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  mapping (uint256 => address) private piranhaIdToApproved;\r\n  \r\n   /*** DATATYPES ***/\r\n  struct Piranha {\r\n    string name;\r\n\tuint8 size;\r\n\tuint256 gen;\r\n\tuint8 unique;\r\n\tuint256 growthStartTime;\r\n\tuint256 sellPrice;\r\n\tuint8 hungry;\r\n  }\r\n\r\n  Piranha[] public piranhas;\r\n\r\n  function approve(address _to, uint256 _tokenId) public { //ERC721\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n    piranhaIdToApproved[_tokenId] = _to;\r\n    Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) { //ERC721\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  function createPiranhaTokens() public onlyContractOwner {\r\n     for (uint8 i=0; i<15; i++) {\r\n\t\t_createPiranha(\"EthPiranha\", msg.sender, 20 finney, 160, 1, 0);\r\n\t}\r\n  }\r\n\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  function name() public pure returns (string) { //ERC721\r\n    return NAME;\r\n  }\r\n\r\n  function symbol() public pure returns (string) { //ERC721\r\n    return SYMBOL;\r\n  }  \r\n\r\n  function ownerOf(uint256 _tokenId) public view returns (address owner) { //ERC721\r\n    owner = piranhaIdToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  function buy(uint256 _tokenId) public payable {\r\n    address oldOwner = piranhaIdToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n\r\n\tPiranha storage piranha = piranhas[_tokenId];\r\n\r\n    uint256 sellingPrice = piranha.sellPrice;\r\n\r\n    require(oldOwner != newOwner);\r\n    require(_addressNotNull(newOwner));\r\n    require(msg.value >= sellingPrice && sellingPrice > 0);\r\n\r\n    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 97), 100)); //97% to previous owner, 3% dev tax\r\n\r\n    // Stop selling\r\n    piranha.sellPrice=0;\r\n\tpiranha.hungry=0;\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(payment); //\r\n    }\r\n\r\n    TokenSold(_tokenId, sellingPrice, 0, oldOwner, newOwner, piranhas[_tokenId].name);\r\n\t\r\n    if (msg.value > sellingPrice) { //if excess pay\r\n\t    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n\t\tmsg.sender.transfer(purchaseExcess);\r\n\t}\r\n  }\r\n  \r\n  function changePiranhaName(uint256 _tokenId, string _name) public payable {\r\n\trequire (piranhaIdToOwner[_tokenId] == msg.sender && msg.value == 0.001 ether);\r\n\trequire(bytes(_name).length <= 15);\r\n\t\r\n\tPiranha storage piranha = piranhas[_tokenId];\r\n\tpiranha.name = _name;\r\n  }\r\n  \r\n  function startSelling(uint256 _tokenId, uint256 _price) public {\r\n\trequire (piranhaIdToOwner[_tokenId] == msg.sender);\r\n\t\r\n\tPiranha storage piranha = piranhas[_tokenId];\r\n\tpiranha.sellPrice = _price;\r\n  }  \r\n\r\n  function stopSelling(uint256 _tokenId) public {\r\n\trequire (piranhaIdToOwner[_tokenId] == msg.sender);\r\n\r\n\tPiranha storage piranha = piranhas[_tokenId];\r\n\trequire (piranha.sellPrice > 0);\r\n\t\r\n\tpiranha.sellPrice = 0;\r\n  }  \r\n  \r\n  function hungry(uint256 _tokenId) public {\r\n\trequire (piranhaIdToOwner[_tokenId] == msg.sender);\r\n\r\n\tPiranha storage piranha = piranhas[_tokenId];\r\n\trequire (piranha.hungry == 0);\r\n\t\r\n\tuint8 piranhaSize=uint8(piranha.size+(now-piranha.growthStartTime)/900);\r\n\r\n\trequire (piranhaSize < 240);\r\n\t\r\n\tpiranha.hungry = 1;\r\n  }   \r\n\r\n  function notHungry(uint256 _tokenId) public {\r\n\trequire (piranhaIdToOwner[_tokenId] == msg.sender);\r\n\r\n\tPiranha storage piranha = piranhas[_tokenId];\r\n\trequire (piranha.hungry == 1);\r\n\t\r\n\tpiranha.hungry = 0;\r\n  }   \r\n\r\n  function bite(uint256 _tokenId, uint256 _victimTokenId) public payable {\r\n\trequire (piranhaIdToOwner[_tokenId] == msg.sender);\r\n\trequire (msg.value == 1 finney);\r\n\t\r\n\tPiranha storage piranha = piranhas[_tokenId];\r\n\tPiranha storage victimPiranha = piranhas[_victimTokenId];\r\n\trequire (piranha.hungry == 1 && victimPiranha.hungry == 1);\r\n\r\n\tuint8 vitimPiranhaSize=uint8(victimPiranha.size+(now-victimPiranha.growthStartTime)/900);\r\n\t\r\n\trequire (vitimPiranhaSize>40); // don't bite a small\r\n\r\n\tuint8 piranhaSize=uint8(piranha.size+(now-piranha.growthStartTime)/900)+10;\r\n\t\r\n\tif (piranhaSize>240) { \r\n\t    piranha.size = 240; //maximum\r\n\t\tpiranha.hungry = 0;\r\n\t} else {\r\n\t    piranha.size = piranhaSize;\r\n\t}\r\n     \r\n\t//decrease victim size \r\n\tif (vitimPiranhaSize>=50) {\r\n\t    vitimPiranhaSize-=10;\r\n\t    victimPiranha.size = vitimPiranhaSize;\r\n\t}\r\n    else {\r\n\t\tvictimPiranha.size=40;\r\n\t}\r\n\t\r\n\tpiranha.growthStartTime=now;\r\n\tvictimPiranha.growthStartTime=now;\r\n\t\r\n  }    \r\n  \r\n  function breeding(uint256 _maleTokenId, uint256 _femaleTokenId) public payable {\r\n  \r\n    require (piranhaIdToOwner[_maleTokenId] ==  msg.sender && piranhaIdToOwner[_femaleTokenId] == msg.sender);\r\n\trequire (msg.value == 0.01 ether);\r\n\r\n\tPiranha storage piranhaMale = piranhas[_maleTokenId];\r\n\tPiranha storage piranhaFemale = piranhas[_femaleTokenId];\r\n\t\r\n\tuint8 maleSize=uint8(piranhaMale.size+(now-piranhaMale.growthStartTime)/900);\r\n\tif (maleSize>240)\r\n\t   piranhaMale.size=240;\r\n\telse \r\n\t   piranhaMale.size=maleSize;\r\n\r\n\tuint8 femaleSize=uint8(piranhaFemale.size+(now-piranhaFemale.growthStartTime)/900);\r\n\tif (femaleSize>240)\r\n\t   piranhaFemale.size=240;\r\n\telse \r\n\t   piranhaFemale.size=femaleSize;\r\n\t   \r\n\trequire (piranhaMale.size > 150 && piranhaFemale.size > 150);\r\n\t\r\n\tuint8 newbornSize = uint8(SafeMath.div(SafeMath.add(piranhaMale.size, piranhaMale.size),4));\r\n\t\r\n\tuint256 maxGen=piranhaFemale.gen;\r\n\tuint256 minGen=piranhaMale.gen;\r\n\t\r\n\tif (piranhaMale.gen > piranhaFemale.gen) {\r\n\t\tmaxGen=piranhaMale.gen;\r\n\t\tminGen=piranhaFemale.gen;\r\n\t} \r\n\t\r\n\tuint256 randNum = uint256(block.blockhash(block.number-1));\r\n\tuint256 newbornGen;\r\n\tuint8 newbornUnique = uint8(randNum%100+1); //chance to get rare piranha\r\n\t\r\n\tif (randNum%(10+maxGen) == 1) { // new generation, difficult depends on maxgen\r\n\t\tnewbornGen = SafeMath.add(maxGen,1);\r\n\t} else if (maxGen == minGen) {\r\n\t\tnewbornGen = maxGen;\r\n\t} else {\r\n\t\tnewbornGen = SafeMath.add(randNum%(maxGen-minGen+1),minGen);\r\n\t}\r\n\t\r\n\t// 5% chance to get rare piranhas for each gen\r\n\tif (newbornUnique > 5) \r\n\t\tnewbornUnique = 0;\r\n\t\t\r\n     //initiate new size, cancel selling\r\n\t piranhaMale.size = uint8(SafeMath.div(piranhaMale.size,2));\t\t\r\n     piranhaFemale.size = uint8(SafeMath.div(piranhaFemale.size,2));\t\r\n\r\n\t piranhaMale.growthStartTime = now;\t \r\n\t piranhaFemale.growthStartTime = now;\t \r\n\r\n\t piranhaMale.sellPrice = 0;\t \r\n\t piranhaFemale.sellPrice = 0;\t \r\n\t\t\r\n\t_createPiranha(\"EthPiranha\", msg.sender, 0, newbornSize, newbornGen, newbornUnique);\r\n  \r\n  }\r\n  \r\n  function takeOwnership(uint256 _tokenId) public { //ERC721\r\n    address newOwner = msg.sender;\r\n    address oldOwner = piranhaIdToOwner[_tokenId];\r\n\r\n    require(_addressNotNull(newOwner));\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  function allPiranhasInfo(uint256 _startPiranhaId) public view returns (address[] owners, uint8[] sizes, uint8[] hungry, uint256[] prices) { //for web site view\r\n\t\r\n\tuint256 totalPiranhas = totalSupply();\r\n\tPiranha storage piranha;\r\n\t\r\n    if (totalPiranhas == 0 || _startPiranhaId >= totalPiranhas) {\r\n        // Return an empty array\r\n      return (new address[](0), new uint8[](0), new uint8[](0), new uint256[](0));\r\n    }\r\n\r\n\t\r\n\tuint256 indexTo;\r\n\tif (totalPiranhas > _startPiranhaId+1000)\r\n\t\tindexTo = _startPiranhaId + 1000;\r\n\telse \t\r\n\t\tindexTo = totalPiranhas;\r\n\t\t\r\n    uint256 totalResultPiranhas = indexTo - _startPiranhaId;\t\t\r\n\t\t\r\n\taddress[] memory owners_res = new address[](totalResultPiranhas);\r\n\tuint8[] memory size_res = new uint8[](totalResultPiranhas);\r\n\tuint8[] memory hungry_res = new uint8[](totalResultPiranhas);\r\n\tuint256[] memory prices_res = new uint256[](totalResultPiranhas);\r\n\t\r\n\tfor (uint256 piranhaId = _startPiranhaId; piranhaId < indexTo; piranhaId++) {\r\n\t  piranha = piranhas[piranhaId];\r\n\t  \r\n\t  owners_res[piranhaId - _startPiranhaId] = piranhaIdToOwner[piranhaId];\r\n\t  hungry_res[piranhaId - _startPiranhaId] = piranha.hungry;\r\n\t  size_res[piranhaId - _startPiranhaId] = uint8(piranha.size+(now-piranha.growthStartTime)/900);\r\n\t  prices_res[piranhaId - _startPiranhaId] = piranha.sellPrice;\r\n\t}\r\n\t\r\n\treturn (owners_res, size_res, hungry_res, prices_res);\r\n  }\r\n  \r\n  function totalSupply() public view returns (uint256 total) { //ERC721\r\n    return piranhas.length;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _tokenId) public { //ERC721\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n\t_transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public { //ERC721\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n\r\n  /* PRIVATE FUNCTIONS */\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return piranhaIdToApproved[_tokenId] == _to;\r\n  }\r\n\r\n  function _createPiranha(string _name, address _owner, uint256 _price, uint8 _size, uint256 _gen, uint8 _unique) private {\r\n    Piranha memory _piranha = Piranha({\r\n      name: _name,\r\n\t  size: _size,\r\n\t  gen: _gen,\r\n\t  unique: _unique,\t  \r\n\t  growthStartTime: now,\r\n\t  sellPrice: _price,\r\n\t  hungry: 0\r\n    });\r\n    uint256 newPiranhaId = piranhas.push(_piranha) - 1;\r\n\r\n    require(newPiranhaId == uint256(uint32(newPiranhaId))); //check maximum limit of tokens\r\n\r\n    PiranhaCreated(newPiranhaId, _name, _owner);\r\n\r\n    _transfer(address(0), _owner, newPiranhaId);\r\n  }\r\n\r\n  function _owns(address _checkedAddr, uint256 _tokenId) private view returns (bool) {\r\n    return _checkedAddr == piranhaIdToOwner[_tokenId];\r\n  }\r\n\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    ownershipTokenCount[_to]++;\r\n    piranhaIdToOwner[_tokenId] = _to;\r\n\r\n    // When creating new piranhas _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete piranhaIdToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"notHungry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_startPiranhaId\",\"type\":\"uint256\"}],\"name\":\"allPiranhasInfo\",\"outputs\":[{\"name\":\"owners\",\"type\":\"address[]\"},{\"name\":\"sizes\",\"type\":\"uint8[]\"},{\"name\":\"hungry\",\"type\":\"uint8[]\"},{\"name\":\"prices\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"startSelling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contractWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"hungry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"changePiranhaName\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stopSelling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"piranhas\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint8\"},{\"name\":\"gen\",\"type\":\"uint256\"},{\"name\":\"unique\",\"type\":\"uint8\"},{\"name\":\"growthStartTime\",\"type\":\"uint256\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"hungry\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferContractOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createPiranhaTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_victimTokenId\",\"type\":\"uint256\"}],\"name\":\"bite\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maleTokenId\",\"type\":\"uint256\"},{\"name\":\"_femaleTokenId\",\"type\":\"uint256\"}],\"name\":\"breeding\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PiranhaCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EthPiranha","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2372711824b2793d668b7e0ce9814bad7eb952d64d0d967bd9b0b3d59436f8c9"}]}