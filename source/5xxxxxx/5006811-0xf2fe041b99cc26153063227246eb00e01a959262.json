{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath { //standart library for uint\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0 || b == 0){\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n//standart contract to identify owner\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  address public newOwner;\r\n\r\n  address public techSupport;\r\n\r\n  address public newTechSupport;\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier onlyTechSupport() {\r\n    require(msg.sender == techSupport);\r\n    _;\r\n  }\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() public {\r\n    if (msg.sender == newOwner) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n  function transferTechSupport (address _newSupport) public{\r\n    require (msg.sender == owner || msg.sender == techSupport);\r\n    newTechSupport = _newSupport;\r\n  }\r\n\r\n  function acceptSupport() public{\r\n    if(msg.sender == newTechSupport){\r\n      techSupport = newTechSupport;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n//Abstract Token contract\r\ncontract CQTToken{\r\n  function setCrowdsaleContract (address) public{}\r\n  function sendCrowdsaleTokens(address, uint256)  public {}\r\n  function burnTokens(address) {}\r\n  function getCrowdsaleTokens() public view returns(uint) {}\r\n  function burnSomeTokens(uint _value) public{}\r\n}\r\n\r\n//Crowdsale contract\r\ncontract Crowdsale is Ownable{\r\n\r\n  using SafeMath for uint;\r\n  function pow(uint256 a, uint256 b) public pure returns (uint256){ //power function\r\n   return (a**b);\r\n  }\r\n\r\n  uint decimals = 8;\r\n  // Token contract address\r\n  CQTToken public token;\r\n\r\n  // Constructor\r\n  function Crowdsale(address _tokenAddress, address _owner) public{\r\n    token = CQTToken(_tokenAddress);\r\n    owner = _owner;\r\n    techSupport = msg.sender;\r\n    //test parameter\r\n    // techSupport = 0x8C0F5211A006bB28D4c694dC76632901664230f9;\r\n    token.setCrowdsaleContract(this);\r\n  }\r\n\r\n  // Buy constants\r\n  uint minDeposit = 10000000000000000;\r\n\r\n  //Canadian time - (-5 hours to UTC)\r\n  // preIco constants\r\n  uint public preIcoStart = 1519189260; //21.02.2018 1519189260\r\n  uint public preIcoFinish = 1521694740; //21.03.2018\r\n\r\n  uint preIcoMaxCap = 60000000*pow(10,decimals);\r\n  uint tokenPrice = 50000000000000;\r\n\r\n\r\n  // Ico constants\r\n  uint public icoStart = 1521867660; //24.03.2018\r\n  uint public icoFinish = 1524632340; //24.04.2018\r\n\r\n  uint icoMinCap = 100000000*pow(10,decimals);\r\n  uint icoMaxCap = 550000000*pow(10,decimals);\r\n\r\n  //check is now preICO\r\n  function isPreIco(uint _time) public view returns (bool){\r\n    if((preIcoStart <= _time) && (_time <= preIcoFinish)){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  //check is now ICO\r\n  function isIco(uint _time) public view returns (bool){\r\n    if((icoStart <= _time) && (_time <= icoFinish)){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  //Crowdsale variables\r\n  uint public preIcoTokensSold = 0;\r\n  uint public icoTokensSold = 0;\r\n  uint public tokensSold = 0;\r\n  uint public ethCollected = 0;\r\n\r\n  //investors ether balance contains here\r\n  mapping (address => uint) investorBalances;\r\n\r\n  //fallback function (when investor send ether to contract)\r\n  function() public payable{\r\n    if (now > icoFinish){\r\n      finishCrowdsale();\r\n    }\r\n    require(isIco(now) || isPreIco(now));\r\n    require(msg.value >= minDeposit);\r\n    require(buy(msg.sender,msg.value,now)); //redirect to func buy\r\n  }\r\n\r\n  function sendTokensManually(address _address, uint _value) public onlyTechSupport{\r\n    token.sendCrowdsaleTokens(_address, _value);\r\n    if(isPreIco(now)){\r\n      preIcoTokensSold = preIcoTokensSold.add(_value);\r\n    }\r\n    if(isIco(now)){\r\n      icoTokensSold = icoTokensSold.add(_value);\r\n    }\r\n    tokensSold = tokensSold.add(_value);\r\n  }\r\n  \r\n  //function buy Tokens\r\n  function buy(address _address, uint _value, uint _time/*, bool _manual*/) internal returns (bool){\r\n    require(token.getCrowdsaleTokens() > 0);\r\n\r\n    uint tokensForSend = 0;\r\n\r\n    if (isPreIco(_time)){\r\n      require (preIcoMaxCap > preIcoTokensSold);\r\n      tokensForSend = etherToTokens(_value);\r\n      preIcoTokensSold = preIcoTokensSold.add(tokensForSend);\r\n      owner.transfer(this.balance);\r\n    }\r\n\r\n    if (isIco(_time)){\r\n      // Token contract will automatically throws if Crowdsale balance < tokensForSend\r\n      // require (icoMaxCap > icoTokensSold);\r\n      tokensForSend = etherToTokens(_value);\r\n\r\n      //If user cant buy all tokens we need to give ether back for him \r\n      if(tokensForSend.add(tokensSold) > token.getCrowdsaleTokens()){\r\n        tokensForSend = token.getCrowdsaleTokens();\r\n        uint ethToTake = tokensForSend.mul(tokenPrice).div(pow(10,decimals));\r\n\r\n        uint etherSendBack = _value.sub(ethToTake);\r\n        _address.transfer(etherSendBack);\r\n        icoTokensSold = icoTokensSold.add(tokensForSend);\r\n\r\n        tokensSold = tokensSold.add(tokensForSend);\r\n        token.sendCrowdsaleTokens(_address, tokensForSend);\r\n\r\n        ethCollected = ethCollected.add(ethToTake);\r\n        investorBalances[_address] = investorBalances[_address].add(ethToTake);\r\n        owner.transfer(this.balance);\r\n\r\n        return true;\r\n      }\r\n\r\n      investorBalances[_address] = investorBalances[_address].add(_value);\r\n      icoTokensSold = icoTokensSold.add(tokensForSend);\r\n    }\r\n\r\n    tokensSold = tokensSold.add(tokensForSend);\r\n    token.sendCrowdsaleTokens(_address, tokensForSend);\r\n\r\n    if (isIcoTrue()){\r\n      owner.transfer(this.balance);\r\n    }\r\n\r\n    ethCollected = ethCollected.add(_value);\r\n    return true;\r\n  }\r\n\r\n  //convert ether to tokens (without decimals)\r\n  function etherToTokens(uint _value) public view returns(uint) {\r\n    uint res = _value.mul(pow(10,decimals)).div(tokenPrice);\r\n\r\n    if (now < preIcoStart || isPreIco(now)){\r\n      return res.add(res*40/100);\r\n    }\r\n\r\n    if (now > preIcoFinish && now < icoStart){\r\n      return res.add(res*30/100);\r\n    }\r\n\r\n    if (isIco(now)){\r\n      if(icoStart + 7 days <= now){\r\n        return res.add(res*30/100);\r\n      }\r\n      if(icoStart + 14 days <= now){\r\n        return res.add(res*20/100);\r\n      }\r\n      if(icoStart + 21 days <= now){\r\n        return res.add(res*10/100);\r\n      }\r\n    return res;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  //function check is ICO complete (minCap exceeded)\r\n  function isIcoTrue() public view returns (bool){\r\n    if (tokensSold >= icoMinCap){\r\n      return true;\r\n    }\r\n  return false;\r\n  }\r\n\r\n  //Contract can change ICO finish date up to 7 days, but only one time\r\n  bool public isTryedFinishCrowdsale = false;\r\n  bool public isBurnActive = false;\r\n\r\n  function finishCrowdsale () public {\r\n    require (now > icoFinish);\r\n\r\n    if(!isTryedFinishCrowdsale){\r\n      if(tokensSold >= 610000000*pow(10,decimals)){\r\n        isBurnActive = true;  \r\n      }else{\r\n        icoFinish = icoFinish + 7 days;\r\n      }\r\n      isTryedFinishCrowdsale = true;\r\n    }else{\r\n      isBurnActive = true;\r\n    }\r\n  }\r\n  \r\n  //Owner can burn some tokens in Token Contract\r\n  function burnSomeTokens (uint _value) public onlyOwner{\r\n    require(isBurnActive);\r\n    token.burnSomeTokens(_value);\r\n  }\r\n\r\n  //if ICO failed and now = ICO finished date +3 days then investor can withdrow his ether\r\n  function refund() public{\r\n    require (!isIcoTrue());\r\n    require (icoFinish + 3 days <= now);\r\n\r\n    token.burnTokens(msg.sender);\r\n    msg.sender.transfer(investorBalances[msg.sender]);\r\n    investorBalances[msg.sender] = 0;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"isIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSupport\",\"type\":\"address\"}],\"name\":\"transferTechSupport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"pow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIcoTrue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"isPreIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnSomeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoFinish\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTryedFinishCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptSupport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBurnActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoFinish\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendTokensManually\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"techSupport\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newTechSupport\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"etherToTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000028259654db80fcf9adeda208e991cb799c1f6e8e0000000000000000000000001aa749fa7ebf70c77b65c82e09f52ddb7b4d3c90","Library":"","SwarmSource":"bzzr://048867a864dcb210529f2d4a774de898e2b844f6b84dcca0b593fd71dab466ce"}]}