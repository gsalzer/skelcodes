{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n  event Burn(address indexed burner, uint256 value);\r\n  function burn(uint256 _value) public {\r\n    require(_value > 0);\r\n    require(_value <= balances[msg.sender]);\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    Burn(burner, _value);\r\n  }\r\n}\r\ncontract KimJCoin is BurnableToken {\r\n  string public constant name = \"KimJ Coin\";\r\n  string public constant symbol = \"KJC\";\r\n  uint32 public constant decimals = 18;\r\n  uint256 public constant INITIAL_SUPPLY = 20000000 *(10 ** 18);  \r\n  address public giveAddress = 0xacc31A27A5Ce81cB7b6269003226024963016F37;\r\n  function KimJCoin() public {\r\n    uint256 _keep = 90;\r\n    uint256 _giveTokens = 10;\r\n\r\n    totalSupply = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY.mul(_keep).div(100);\r\n    balances[giveAddress] = INITIAL_SUPPLY.mul(_giveTokens).div(100);\r\n  }\r\n  \r\n  function AddressDefault() public view returns (address){\r\n    return giveAddress;\r\n  }\r\n  \r\n}\r\n\r\ncontract ICO is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  KimJCoin public token;\r\n\r\n  address multisig;\r\n  address restricted;\r\n\r\n  uint256 rate;\r\n  uint256 minAmount;\r\n\r\n  uint256 preIcoStartDate;\r\n  uint256 preIcoEndDate;\r\n  \r\n  uint256 tier1StartDate;\r\n  uint256 tier1EndDate;\r\n  uint256 tier2StartDate;\r\n  uint256 tier2EndDate;\r\n\r\n  uint256 percentsTeamTokens;\r\n  uint256 percentsBountySecondTokens;\r\n  uint256 percentsBountyFirstTokens;\r\n  uint256 percentsNuclearTokens;\r\n  uint256 percentsBounty;\r\n  uint256 percentsPreSaleTokens;\r\n  uint256 percentsIco1;\r\n  uint256 percentsIco2;\r\n  uint256 totaldivineTokensIssued;\r\n  uint256 totalEthereumRaised;\r\n  modifier saleIsOn() {\r\n    uint256 curState = getStatus();\r\n    require(curState != 0);\r\n    _;\r\n  }\r\n\r\n  modifier isUnderHardCap() {\r\n    uint256 _availableTokens = token.balanceOf(this);\r\n    uint256 _tokens = calculateTokens(msg.value);\r\n    uint256 _minTokens = holdTokensOnStage();\r\n    require(_availableTokens.sub(_tokens) >= _minTokens);\r\n    _;\r\n  }\r\n\r\n  modifier checkMinAmount() {\r\n    require(msg.value >= minAmount);\r\n    _;\r\n  }\r\n  function ICO() public {\r\n    \r\n   token   =  new KimJCoin();\r\n    multisig = msg.sender;\r\n    restricted = msg.sender;\r\n    minAmount = 0.01 * 1 ether;\r\n    rate = 1000;\r\n\r\n  preIcoStartDate = 1519257600  ;\r\n    preIcoEndDate = 1521072000;  \r\n  \r\n  tier1StartDate = 1521072000;\r\n  tier1EndDate = 1522540800;\r\n  \r\n  tier2StartDate = 1522540800;\r\n  tier2EndDate = 1525132800;\r\n  \r\n    percentsTeamTokens = 15;\r\n    percentsBountySecondTokens = 5;\r\n  percentsBountyFirstTokens = 5;\r\n  percentsNuclearTokens = 5;\r\n  percentsBounty = 10;\r\n  \r\n    percentsPreSaleTokens = 30;\r\n    percentsIco1 = 25;\r\n  percentsIco2 = 15;\r\n  totaldivineTokensIssued = 0;\r\n  totalEthereumRaised = 0;\r\n  }\r\n\r\n  function calculateTokens(uint256 value) internal constant returns (uint256) {\r\n    uint256 tokensOrig = rate.mul(value).div(1 ether).mul(10 ** 18);\r\n    uint256 tokens = rate.mul(value).div(1 ether).mul(10 ** 18);\r\n    uint256 curState = getStatus();\r\n    if(curState== 1){\r\n      tokens += tokens.div(2);\r\n    }\r\n  \r\n    bytes20 divineHash = ripemd160(block.coinbase, block.number, block.timestamp);\r\n    if (divineHash[0] == 0) \r\n    {\r\n      uint256 divineMultiplier;\r\n      if (curState==1){\r\n        divineMultiplier = 4;\r\n      }\r\n      else if (curState==2){\r\n        divineMultiplier = 3;\r\n      }\r\n      else if (curState==3){\r\n        divineMultiplier = 2;\r\n      }\r\n      else{\r\n        divineMultiplier = 1;\r\n      }\r\n      \r\n      uint256 divineTokensIssued = tokensOrig.mul(divineMultiplier);\r\n      tokens += divineTokensIssued;\r\n      totaldivineTokensIssued.add(divineTokensIssued);\r\n    }\r\n\r\n  \r\n  \r\n    return tokens;\r\n  }\r\n\r\n  // 0 - stop\r\n  // 1 - preSale\r\n  // 2 - sale 1\r\n  // 3 - sale 2\r\n  function getStatus() internal constant returns (uint256) {\r\n    if(now > tier2EndDate) {\r\n      return 0;\r\n    } else if(now > tier2StartDate && now < tier2EndDate) {\r\n      return 3;\r\n    } else if(now > tier1StartDate && now < tier1EndDate) {\r\n      return 2;\r\n    } else if(now > preIcoStartDate && now < preIcoEndDate){\r\n      return 1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function holdTokensOnStage() public view returns (uint256) {\r\n    uint256 _totalSupply = token.totalSupply();\r\n    uint256 _percents = 100;\r\n    uint256 curState = getStatus();\r\n    if(curState == 3) {\r\n      _percents = percentsTeamTokens+percentsNuclearTokens;  //100 - (30+10+25+15) = 20\r\n    } else if(curState == 2) {\r\n      _percents = _percents.sub(percentsPreSaleTokens.add(percentsBounty).add(percentsIco1));  //100 - (30+10+25) = 35\r\n    } else if(curState == 1) {\r\n      _percents = _percents.sub(percentsPreSaleTokens.add(percentsBounty)); //100 - (30+10) = 60\r\n    }\r\n\r\n    return _totalSupply.mul(_percents).div(100);\r\n  }\r\n\r\n  function onBalance() public view returns (uint256) {\r\n    return token.balanceOf(this);\r\n  }\r\n\r\n  function availableTokensOnCurrentStage() public view returns (uint256) {\r\n    uint256 _currentHolder = token.balanceOf(this);\r\n    uint256 _minTokens = holdTokensOnStage();\r\n    return _currentHolder.sub(_minTokens);\r\n  }\r\n\r\n  function getStatusInfo() public view returns (string) {\r\n    uint256 curState = getStatus();\r\n    if(now > tier2EndDate) {\r\n      return \"ICO is over\";\r\n    } else if(curState == 3) {\r\n      return \"Now ICO #2 is active\";\r\n    } else if(curState == 2) {\r\n      return \"Now ICO #1 is active\";\r\n    } else if(curState == 1) {\r\n      return \"Now Pre-ICO is active\";\r\n    } else {\r\n      return \"The sale of tokens is stopped\";\r\n    }\r\n  }\r\n\r\n  // burn the rest\r\n  // keep nuc and team tokens\r\n  function burnTokens() public onlyOwner {\r\n    require(now > tier2EndDate);\r\n    uint256 circulating = token.totalSupply().sub(token.balanceOf(this));\r\n\r\n    uint256 _teamTokens = circulating.mul(percentsTeamTokens).div(100 - percentsTeamTokens-percentsNuclearTokens);\r\n    uint256 _nucTokens = circulating.mul(percentsNuclearTokens).div(100 - percentsTeamTokens-percentsNuclearTokens);\r\n\r\n    // safety check. The math should work out, but this is here just in case\r\n    if (_teamTokens.add(_nucTokens)>token.balanceOf(this)){\r\n      _nucTokens = token.balanceOf(this).sub(_teamTokens);\r\n    }\r\n\r\n    token.transfer(restricted, _teamTokens);\r\n    token.transfer(token.AddressDefault(), _nucTokens);\r\n    uint256 _burnTokens = token.balanceOf(this);\r\n    if (_burnTokens>0){\r\n      token.burn(_burnTokens);\r\n    }\r\n  }\r\n\r\n  function createTokens() public saleIsOn isUnderHardCap checkMinAmount payable {\r\n    uint256 tokens = calculateTokens(msg.value);\r\n    totalEthereumRaised.add(msg.value);\r\n    multisig.transfer(msg.value);\r\n    token.transfer(msg.sender, tokens);\r\n  }\r\n\r\n\r\n  function() external payable {\r\n    createTokens();\r\n  }\r\n  \r\n  function getStats() public constant returns (uint256, uint256, uint256) {\r\n        return (totalEthereumRaised, token.totalSupply(), totaldivineTokensIssued);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableTokensOnCurrentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdTokensOnStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStatusInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://820fad550f4e29a517e9ab2077f66544fc0949501d9f2fa133772bbb491c276c"}]}