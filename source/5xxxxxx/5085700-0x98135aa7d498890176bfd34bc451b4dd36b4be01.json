{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    //Variables\r\n    address public owner;\r\n\r\n    address public newOwner;\r\n\r\n    //    Modifiers\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        newOwner = _newOwner;\r\n\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        if (msg.sender == newOwner) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) public balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood:\r\n        https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract SparkERC20 is StandardToken, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /* Public variables of the token */\r\n    uint256 public creationBlock;\r\n\r\n    uint8 public decimals;\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    string public standard;\r\n\r\n    bool public locked;\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function SparkERC20(\r\n        uint256 _totalSupply,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transferAllSupplyToOwner,\r\n        bool _locked\r\n    ) public {\r\n        standard = \"ERC20 0.1\";\r\n        locked = _locked;\r\n        totalSupply = _totalSupply;\r\n\r\n        if (_transferAllSupplyToOwner) {\r\n            balances[msg.sender] = totalSupply;\r\n        } else {\r\n            balances[this] = totalSupply;\r\n        }\r\n        name = _tokenName;\r\n        // Set the name for display purposes\r\n        symbol = _tokenSymbol;\r\n        // Set the symbol for display purposes\r\n        decimals = _decimalUnits;\r\n        // Amount of decimals for display purposes\r\n        creationBlock = block.number;\r\n    }\r\n\r\n    /* public methods */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(locked == false);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (locked) {\r\n            return false;\r\n        }\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n}\r\n\r\n/*\r\nThis contract manages the minters and the modifier to allow mint to happen only if called by minters\r\nThis contract contains basic minting functionality though\r\n*/\r\ncontract MintingERC20 is SparkERC20 {\r\n\r\n    // Variables\r\n    uint256 public maxSupply;\r\n\r\n    mapping (address => bool) public minters;\r\n\r\n    // Modifiers\r\n    modifier onlyMinters() {\r\n        require(true == minters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function MintingERC20(\r\n        uint256 _initialSupply,\r\n        uint256 _maxSupply,\r\n        string _tokenName,\r\n        uint8 _decimals,\r\n        string _symbol,\r\n        bool _transferAllSupplyToOwner,\r\n        bool _locked\r\n    ) public SparkERC20(\r\n        _initialSupply,\r\n        _tokenName,\r\n        _decimals,\r\n        _symbol,\r\n        _transferAllSupplyToOwner,\r\n        _locked\r\n    )\r\n    {\r\n        standard = \"MintingERC20 0.1\";\r\n        minters[msg.sender] = true;\r\n        maxSupply = _maxSupply;\r\n    }\r\n\r\n    function addMinter(address _newMinter) public onlyOwner {\r\n        minters[_newMinter] = true;\r\n    }\r\n\r\n    function removeMinter(address _minter) public onlyOwner {\r\n        minters[_minter] = false;\r\n    }\r\n\r\n    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\r\n        if (_amount == uint256(0)) {\r\n            return uint256(0);\r\n        }\r\n\r\n        if (totalSupply.add(_amount) > maxSupply) {\r\n            return uint256(0);\r\n        }\r\n\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_addr] = balances[_addr].add(_amount);\r\n        Transfer(address(0), _addr, _amount);\r\n\r\n        return _amount;\r\n    }\r\n\r\n}\r\n\r\ncontract Spark is MintingERC20 {\r\n\r\n    ICO public ico;\r\n\r\n    SparkDividends public dividends;\r\n\r\n    bool public transferFrozen = true;\r\n\r\n    function Spark(\r\n        string _tokenName,\r\n        uint8 _decimals,\r\n        string _symbol,\r\n        uint256 _maxSupply,\r\n        bool _locked\r\n    ) public MintingERC20(0, _maxSupply, _tokenName, _decimals, _symbol, false, _locked)\r\n    {\r\n        standard = \"Spark 0.1\";\r\n    }\r\n\r\n    function setICO(address _ico) public onlyOwner {\r\n        require(_ico != address(0));\r\n        ico = ICO(_ico);\r\n    }\r\n\r\n    function setSparkDividends(address _dividends) public onlyOwner {\r\n        require(address(0) != _dividends);\r\n        dividends = SparkDividends(_dividends);\r\n    }\r\n\r\n    function setLocked(bool _locked) public onlyOwner {\r\n        locked = _locked;\r\n    }\r\n\r\n    // prevent manual minting tokens when ICO is active;\r\n    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\r\n        uint256 mintedAmount;\r\n        if (msg.sender == owner) {\r\n            require(address(ico) != address(0));\r\n            if (!ico.isActive() && block.timestamp >= ico.startTime()) {\r\n                mintedAmount = super.mint(_addr, _amount);\r\n            }\r\n        } else {\r\n            mintedAmount = super.mint(_addr, _amount);\r\n        }\r\n\r\n        if (mintedAmount == _amount) {\r\n            require(address(dividends) != address(0));\r\n            dividends.logAccount(_addr, _amount);\r\n        }\r\n\r\n        return mintedAmount;\r\n    }\r\n\r\n    // Allow token transfer.\r\n    function freezing(bool _transferFrozen) public onlyOwner {\r\n        if (address(ico) != address(0) && !ico.isActive() && block.timestamp >= ico.startTime()) {\r\n            transferFrozen = _transferFrozen;\r\n        }\r\n    }\r\n\r\n    // ERC20 functions\r\n    // =========================\r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        require(!transferFrozen);\r\n\r\n        bool status = super.transfer(_to, _value);\r\n        if (status) {\r\n            require(address(dividends) != address(0));\r\n            dividends.logAccount(msg.sender, 0);\r\n            dividends.logAccount(_to, 0);\r\n        }\r\n\r\n        return status;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        require(!transferFrozen);\r\n\r\n        bool status = super.transferFrom(_from, _to, _value);\r\n        if (status) {\r\n            require(address(dividends) != address(0));\r\n            dividends.logAccount(_from, 0);\r\n            dividends.logAccount(_to, 0);\r\n        }\r\n\r\n        return status;\r\n\r\n    }\r\n\r\n}\r\n\r\ncontract WhiteList is Ownable {\r\n\r\n    mapping (address => bool) public whitelist;\r\n\r\n    /* events */\r\n    event WhitelistSet(address contributorAddress);\r\n\r\n    event WhitelistUnset(address contributorAddress);\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(true == whitelist[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function WhiteList() public {\r\n        whitelist[msg.sender] = true;\r\n    }\r\n\r\n    function addToWhitelist(address _address) public onlyOwner {\r\n        whitelist[_address] = true;\r\n        WhitelistSet(_address);\r\n    }\r\n\r\n    function removeFromWhitelist(address _address) public onlyOwner {\r\n        whitelist[_address] = false;\r\n        WhitelistUnset(_address);\r\n    }\r\n\r\n}\r\n\r\ncontract SparkDividends is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    Spark public spark;\r\n\r\n    ICO public ico;\r\n\r\n    address public treasuryAddress;\r\n\r\n    mapping(address => DividendData[]) public accounts;\r\n\r\n    FundsData[] public funds;\r\n\r\n    struct DividendData {\r\n        uint256 period;\r\n        uint256 day;\r\n        uint256 balance;\r\n    }\r\n\r\n    struct FundsData {\r\n        uint256 period;\r\n        uint256 ethersAmount;\r\n    }\r\n\r\n    event Disbursed(address indexed holder, uint256 value);\r\n\r\n    modifier onlySparkContracts() {\r\n        require(msg.sender == address(spark) || msg.sender == address(ico));\r\n        _;\r\n    }\r\n\r\n    function SparkDividends(\r\n        address _spark,\r\n        address _ico,\r\n        address _treasuryAddress\r\n    ) public {\r\n        require(_spark != address(0) && _ico != address(0) && _treasuryAddress != address(0));\r\n        spark = Spark(_spark);\r\n        ico = ICO(_ico);\r\n        treasuryAddress = _treasuryAddress;\r\n    }\r\n\r\n    function setSpark(address _spark) public onlyOwner {\r\n        require(_spark != address(0));\r\n        spark = Spark(_spark);\r\n    }\r\n\r\n    function setICO(address _ico) public onlyOwner {\r\n        require(_ico != address(0));\r\n        ico = ICO(_ico);\r\n    }\r\n\r\n    function setTreasuryAddress(address _treasuryAddress) public onlyOwner {\r\n        require(_treasuryAddress != address(0));\r\n        treasuryAddress = _treasuryAddress;\r\n    }\r\n\r\n    function transferEthers() public onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    function logAccount(address _address, uint256 _amount) public onlySparkContracts returns (bool) {\r\n        uint256 day = 0;\r\n        uint256 period = 1;\r\n\r\n        if (now > ico.endTime()) {\r\n            (period, day) = getPeriod(now);\r\n        }\r\n\r\n        if (_address != address(0) && period > 0) {\r\n            if (day != 0 && _amount > 0) {\r\n                logData(_address, period, 0, _amount);\r\n            }\r\n\r\n            logData(_address, period, day, 0);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function setEtherAmount() public payable returns (bool) {\r\n        if (msg.value == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256 day = 0;\r\n        uint256 period = 1;\r\n\r\n        if (now > ico.endTime()) {\r\n            (period, day) = getPeriod(now);\r\n        }\r\n\r\n        uint256 index = getFundsDataIndex(period);\r\n\r\n        if (index == funds.length) {\r\n            funds.push(FundsData(period, msg.value));\r\n        } else {\r\n            funds[index].ethersAmount = funds[index].ethersAmount.add(msg.value);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function claim() public returns (bool) {\r\n        uint256 currentDay;\r\n        uint256 currentPeriod;\r\n        bool status;\r\n        (currentPeriod, currentDay) = getPeriod(now);\r\n        if (currentPeriod == 1) {\r\n            return false;\r\n        }\r\n\r\n        uint256 dividendAmount;\r\n        uint256 outdatedAmount;\r\n        (dividendAmount, outdatedAmount) = calculateAmount(msg.sender, currentPeriod, currentDay);\r\n\r\n        if (dividendAmount == 0) {\r\n            return false;\r\n        }\r\n\r\n        msg.sender.transfer(dividendAmount);\r\n\r\n        if (outdatedAmount > 0) {\r\n            treasuryAddress.transfer(outdatedAmount);\r\n        }\r\n\r\n        if (cleanDividendsData(msg.sender, currentPeriod)) {\r\n            Disbursed(msg.sender, dividendAmount);\r\n            status = true;\r\n        }\r\n\r\n        require(status);\r\n        return true;\r\n    }\r\n\r\n    function calculateAmount(\r\n        address _address,\r\n        uint256 _currentPeriod,\r\n        uint256 _currentDay\r\n    ) public view returns (uint256 totalAmount, uint256 totalOutdated) {\r\n        for (uint256 i = 0; i < accounts[_address].length; i++) {\r\n            if (accounts[_address][i].period < _currentPeriod) {\r\n                uint256 index = getFundsDataIndex(accounts[_address][i].period);\r\n                if (index == funds.length) {\r\n                    continue;\r\n                }\r\n                uint256 dayEthers = funds[index].ethersAmount.div(90);\r\n                uint256 balance;\r\n                uint256 to = 90;\r\n\r\n                if (\r\n                    accounts[_address].length > i.add(1) &&\r\n                    accounts[_address][i.add(1)].period == accounts[_address][i].period\r\n                ) {\r\n                    to = accounts[_address][i.add(1)].day;\r\n                }\r\n\r\n                for (uint256 j = accounts[_address][i].day; j < to; j++) {\r\n                    balance = getBalanceByDay(_address, accounts[_address][i].period, j);\r\n                    if (_currentPeriod.sub(accounts[_address][i].period) > 1 && _currentDay > 2) {\r\n                        totalOutdated = totalOutdated.add(balance.mul(dayEthers).div(spark.maxSupply()));\r\n                    } else {\r\n                        totalAmount = totalAmount.add(balance.mul(dayEthers).div(spark.maxSupply()));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function logData(address _address, uint256 _period, uint256 _day, uint256 _amount) internal {\r\n        uint256 index = getDividendDataIndex(_address, _period, _day);\r\n        if (accounts[_address].length == index) {\r\n            accounts[_address].push(DividendData(_period, _day, spark.balanceOf(_address).sub(_amount)));\r\n        } else if (_amount == 0) {\r\n            accounts[_address][index].balance = spark.balanceOf(_address);\r\n        }\r\n    }\r\n\r\n    function getPeriod(uint256 _time) internal view returns (uint256, uint256) {\r\n        uint256 day = uint(_time.sub(ico.endTime()) % 90 days).div(1 days);\r\n        uint256 period = _time.sub(ico.endTime()).div(90 days);\r\n\r\n        return (++period, day);\r\n    }\r\n\r\n    function cleanDividendsData(address _address, uint256 _currentPeriod) internal returns (bool) {\r\n        for (uint256 i = 0; i < accounts[_address].length; i++) {\r\n            if (accounts[_address][i].period < _currentPeriod) {\r\n                for (uint256 j = i; j < accounts[_address].length.sub(1); j++) {\r\n                    DividendData storage dividend = accounts[_address][j];\r\n\r\n                    dividend.period = accounts[_address][j.add(1)].period;\r\n                    dividend.day = accounts[_address][j.add(1)].day;\r\n                    dividend.balance = accounts[_address][j.add(1)].balance;\r\n                }\r\n                delete accounts[_address][accounts[_address].length.sub(1)];\r\n                accounts[_address].length--;\r\n                i--;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function getFundsDataIndex(uint256 _period) internal view returns (uint256) {\r\n        for (uint256 i = 0; i < funds.length; i++) {\r\n            if (funds[i].period == _period) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return funds.length;\r\n    }\r\n\r\n    function getBalanceByDay(address _address, uint256 _period, uint256 _day) internal view returns (uint256) {\r\n        for (uint256 i = accounts[_address].length.sub(1); i >= 0; i--) {\r\n            if (accounts[_address][i].period == _period && accounts[_address][i].day <= _day) {\r\n                return accounts[_address][i].balance;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function getDividendDataIndex(address _address, uint256 _period, uint256 _day) internal view returns (uint256) {\r\n        for (uint256 i = 0; i < accounts[_address].length; i++) {\r\n            if (accounts[_address][i].period == _period && accounts[_address][i].day == _day) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return accounts[_address].length;\r\n    }\r\n\r\n}\r\n\r\ncontract Multivest is Ownable {\r\n    /* public variables */\r\n    mapping (address => bool) public allowedMultivests;\r\n\r\n    /* events */\r\n    event MultivestSet(address multivest);\r\n\r\n    event MultivestUnset(address multivest);\r\n\r\n    event Contribution(address holder, uint256 value, uint256 tokens);\r\n\r\n    modifier onlyAllowedMultivests(address _addresss) {\r\n        require(allowedMultivests[_addresss] == true);\r\n        _;\r\n    }\r\n\r\n    /* constructor */\r\n    function Multivest(address _multivest) public {\r\n        allowedMultivests[_multivest] = true;\r\n    }\r\n\r\n    function setAllowedMultivest(address _address) public onlyOwner {\r\n        allowedMultivests[_address] = true;\r\n        MultivestSet(_address);\r\n    }\r\n\r\n    function unsetAllowedMultivest(address _address) public onlyOwner {\r\n        allowedMultivests[_address] = false;\r\n        MultivestUnset(_address);\r\n    }\r\n\r\n    function multivestBuy(address _address, uint256 _value) public onlyAllowedMultivests(msg.sender) {\r\n        require(buy(_address, _value) == true);\r\n    }\r\n\r\n    function multivestBuy(\r\n        address _address,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) public payable onlyAllowedMultivests(verify(keccak256(msg.sender), _v, _r, _s)) {\r\n        require(_address == msg.sender && buy(msg.sender, msg.value) == true);\r\n    }\r\n\r\n    function verify(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal pure returns(address) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n\r\n        return ecrecover(keccak256(prefix, _hash), _v, _r, _s);\r\n    }\r\n\r\n    function buy(address _address, uint256 value) internal returns (bool);\r\n\r\n}\r\n\r\ncontract SellableToken is Multivest {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    Spark public spark;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // amount of sold tokens\r\n    uint256 public soldTokens;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public collectedEthers;\r\n\r\n    // address where funds are collected\r\n    address public etherHolder;\r\n\r\n    address public tokensHolder;\r\n\r\n    Bonus[] public bonuses;\r\n\r\n    struct Bonus {\r\n        uint256 maxAmount;\r\n        uint256 bonus;\r\n    }\r\n\r\n    function SellableToken(\r\n        address _multivestAddress,\r\n        address _etherHolder,\r\n        address _tokensHolder,\r\n        address _spark,\r\n        uint256 _startTime,\r\n        uint256 _endTime\r\n    ) public Multivest(_multivestAddress)\r\n    {\r\n        require(_spark != address(0) && _etherHolder != address(0) && _tokensHolder != address(0));\r\n        spark = Spark(_spark);\r\n        etherHolder = _etherHolder;\r\n        tokensHolder = _tokensHolder;\r\n\r\n        require(_startTime < _endTime);\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n    }\r\n\r\n    function setSpark(address _spark) public onlyOwner {\r\n        require(_spark != address(0));\r\n        spark = Spark(_spark);\r\n    }\r\n\r\n    function setEtherHolder(address _etherHolder) public onlyOwner {\r\n        require(_etherHolder != address(0));\r\n        etherHolder = _etherHolder;\r\n    }\r\n\r\n    function setTokenHolder(address _tokensHolder) public onlyOwner {\r\n        require(_tokensHolder != address(0));\r\n        tokensHolder = _tokensHolder;\r\n    }\r\n\r\n    function transferEthers() public onlyOwner {\r\n        etherHolder.transfer(this.balance);\r\n    }\r\n\r\n    // @return true if sale period is active\r\n    function isActive() public constant returns (bool) {\r\n        if (soldTokens == spark.maxSupply()) {\r\n            return false;\r\n        }\r\n        return withinPeriod();\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function withinPeriod() public constant returns (bool) {\r\n        return block.timestamp >= startTime && block.timestamp <= endTime;\r\n    }\r\n}\r\n\r\ncontract ICO is SellableToken, WhiteList {\r\n\r\n    uint256 public price;\r\n\r\n    function ICO(\r\n        address _multivestAddress,\r\n        address _etherHolder,\r\n        address _tokensHolder,\r\n        address _spark,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _price\r\n    ) public SellableToken(\r\n        _multivestAddress,\r\n        _etherHolder,\r\n        _tokensHolder,\r\n        _spark,\r\n        _startTime,\r\n        _endTime\r\n    ) WhiteList() {\r\n        require(_price > 0);\r\n        price = _price;\r\n\r\n        bonuses.push(Bonus(uint(10000000).mul(uint(10) ** spark.decimals()), uint256(150)));\r\n        bonuses.push(Bonus(uint(15000000).mul(uint(10) ** spark.decimals()), uint256(125)));\r\n        bonuses.push(Bonus(uint(20000000).mul(uint(10) ** spark.decimals()), uint256(110)));\r\n    }\r\n\r\n    function() public payable onlyWhitelisted {\r\n        require(buy(msg.sender, msg.value) == true);\r\n    }\r\n\r\n    function allocateUnsoldTokens() public {\r\n        if (!isActive() && block.timestamp >= startTime) {\r\n            uint256 amount = spark.maxSupply().sub(soldTokens);\r\n            require(amount > 0 && spark.mint(tokensHolder, amount) == amount);\r\n            soldTokens = spark.maxSupply();\r\n        }\r\n    }\r\n\r\n    function calculateTokensAmount(uint256 _value) public view returns (uint256 amount) {\r\n        amount = _value.mul(uint(10) ** spark.decimals()).div(price);\r\n        amount = amount.add(calculateBonusAmount(amount));\r\n    }\r\n\r\n    function calculateEthersAmount(uint256 _tokens) public view returns (uint256 ethers, uint256 bonus) {\r\n        if (_tokens == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        ethers = _tokens.mul(price).div(uint(10) ** spark.decimals());\r\n        bonus = calculateBonusAmount(_tokens);\r\n    }\r\n\r\n    function buy(address _address, uint256 _value) internal returns (bool) {\r\n        if (_value == 0) {\r\n            return false;\r\n        }\r\n\r\n        require(withinPeriod() && _address != address(0));\r\n\r\n        uint256 amount = calculateTokensAmount(_value);\r\n\r\n        require(amount > 0 && spark.mint(_address, amount) == amount);\r\n\r\n        collectedEthers = collectedEthers.add(_value);\r\n        soldTokens = soldTokens.add(amount);\r\n\r\n        Contribution(_address, _value, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function calculateBonusAmount(uint256 _amount) internal view returns (uint256) {\r\n        uint256 newSoldTokens = soldTokens;\r\n        uint256 remainingValue = _amount;\r\n\r\n        for (uint i = 0; i < bonuses.length; i++) {\r\n\r\n            if (bonuses[i].maxAmount > soldTokens) {\r\n                uint256 amount = remainingValue.mul(bonuses[i].bonus).div(100);\r\n                if (newSoldTokens.add(amount) > bonuses[i].maxAmount) {\r\n                    uint256 diff = bonuses[i].maxAmount.sub(newSoldTokens);\r\n                    remainingValue = remainingValue.sub(diff.mul(100).div(bonuses[i].bonus));\r\n                    newSoldTokens = newSoldTokens.add(diff);\r\n                } else {\r\n                    remainingValue = 0;\r\n                    newSoldTokens = newSoldTokens.add(amount);\r\n                }\r\n\r\n                if (remainingValue == 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return newSoldTokens.add(remainingValue).sub(soldTokens.add(_amount));\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividends\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transferFrozen\",\"type\":\"bool\"}],\"name\":\"freezing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dividends\",\"type\":\"address\"}],\"name\":\"setSparkDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ico\",\"type\":\"address\"}],\"name\":\"setICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"name\":\"_locked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Spark","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000014adf4b7320334b900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005535041524b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005535041524b000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://9c17de793d6f708f92cc0b4bea1d1fb791d042f6707316c659f806a32946ffc8"}]}