{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract TrueTogetherToken {\r\n\r\n    string public constant name = \"TRUE Together Token\";\r\n    string public constant symbol = \"TTR\";\r\n    uint256 public constant decimals = 18;\r\n    uint256 _totalSupply = 100000000 * 10 ** decimals;\r\n    address public founder = 0x0;\r\n    uint256 public voteEndTime;\r\n    uint256 airdropNum = 1 ether;\r\n    uint256 public distributed = 0;\r\n\r\n    mapping (address => bool) touched;\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => uint256) public frozen;\r\n    mapping (address => uint256) public totalVotes;\r\n\t\r\n    mapping (address => mapping (address => uint256)) public votingInfo;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Vote(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    constructor() public { \r\n        founder = msg.sender;\r\n        voteEndTime = 1534348800;\r\n    }\r\n\r\n    function totalSupply() view public returns (uint256 supply) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public returns (uint256 balance) {\r\n        if (!touched[_owner] && SafeMath.add(distributed, airdropNum) < _totalSupply && now < voteEndTime) {\r\n            touched[_owner] = true;\r\n            distributed = SafeMath.add(distributed, airdropNum);\r\n            balances[_owner] = SafeMath.add(balances[_owner], airdropNum);\r\n            emit Transfer(this, _owner, airdropNum);\r\n        }\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require (_to != 0x0);\r\n\r\n        if (now > voteEndTime) {\r\n            require((balances[msg.sender] >= _value));\r\n            balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\r\n            balances[_to] = SafeMath.add(balances[_to], _value);\r\n            emit Transfer(msg.sender, _to, _value);\r\n            return true;\t \r\n        } else {\r\n            require(balances[msg.sender] >= SafeMath.add(frozen[msg.sender], _value));\r\n            balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\r\n            balances[_to] = SafeMath.add(balances[_to], _value);\r\n            emit Transfer(msg.sender, _to, _value);\r\n            return true;\t \r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require (_to != 0x0);\r\n\r\n        if (now > voteEndTime) {\r\n            require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\r\n            balances[_from] = SafeMath.sub(balances[_from], _value);\r\n            balances[_to] = SafeMath.add(balances[_to], _value);\r\n            emit Transfer(_from, _to, _value);\r\n            return true;\t \r\n        } else {\r\n            require(balances[_from] >= SafeMath.add(frozen[_from], _value) && allowed[_from][msg.sender] >= _value);\r\n            balances[_from] = SafeMath.sub(balances[_from], _value);\r\n            balances[_to] = SafeMath.add(balances[_to], _value);\r\n            emit Transfer(_from, _to, _value);\r\n            return true;\t \r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function distribute(address _to, uint256 _amount) public returns (bool success) {\r\n        require(msg.sender == founder);\r\n        require(SafeMath.add(distributed, _amount) <= _totalSupply);\r\n\r\n        distributed = SafeMath.add(distributed, _amount);\r\n        balances[_to] = SafeMath.add(balances[_to], _amount);\r\n        touched[_to] = true;\r\n        emit Transfer(this, _to, _amount);\r\n        return true;\r\n    }\r\n\t\r\n    function distributeMultiple(address[] _tos, uint256[] _values) public returns (bool success) {\r\n        require(msg.sender == founder);\r\n\t\t\r\n        uint256 total = 0;\r\n        uint256 i = 0; \r\n        for (i = 0; i < _tos.length; i++) {\r\n            total = SafeMath.add(total, _values[i]);\r\n        }\r\n\r\n        require(SafeMath.add(distributed, total) < _totalSupply);\r\n\r\n        for (i = 0; i < _tos.length; i++) {\r\n            distributed = SafeMath.add(distributed, _values[i]);\r\n            balances[_tos[i]] = SafeMath.add(balances[_tos[i]], _values[i]);\r\n            touched[_tos[i]] = true;\r\n            emit Transfer(this, _tos[i], _values[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function vote(address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != 0x0 && now < voteEndTime);\r\n        require(balances[msg.sender] >= SafeMath.add(frozen[msg.sender], _value));\r\n\r\n        frozen[msg.sender] = SafeMath.add(frozen[msg.sender], _value);\r\n        totalVotes[_to] = SafeMath.add(totalVotes[_to], _value);\r\n        votingInfo[_to][msg.sender] = SafeMath.add(votingInfo[_to][msg.sender], _value);\r\n        emit Vote(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function voteAll(address _to) public returns (bool success) {\r\n        require(_to != 0x0 && now < voteEndTime);\r\n        require(balances[msg.sender] > frozen[msg.sender]);\r\n        \r\n        uint256 votesNum = SafeMath.sub(balances[msg.sender], frozen[msg.sender]);\r\n        frozen[msg.sender] = balances[msg.sender];\r\n        totalVotes[_to] = SafeMath.add(totalVotes[_to], votesNum);\r\n        votingInfo[_to][msg.sender] = SafeMath.add(votingInfo[_to][msg.sender], votesNum);\r\n        emit Vote(msg.sender, _to, votesNum);\r\n        return true;\r\n    }\r\n\t\r\n    function setEndTime(uint256 _endTime) public {\r\n        require(msg.sender == founder);\r\n        voteEndTime = _endTime;\r\n    }\r\n\t\r\n    function ticketsOf(address _owner) view public returns (uint256 tickets) {\r\n        return SafeMath.sub(balances[_owner], frozen[_owner]);\r\n    }\r\n\r\n    function changeFounder(address newFounder) public {\r\n        require(msg.sender == founder);\r\n\r\n        founder = newFounder;\r\n    }\r\n\r\n    function kill() public {\r\n        require(msg.sender == founder);\r\n\r\n        selfdestruct(founder);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"votingInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ticketsOf\",\"outputs\":[{\"name\":\"tickets\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFounder\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"distributeMultiple\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"voteAll\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TrueTogetherToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e53fc43a8d1a04ae63d21cfc878e4f0f57d9cb0ea1834af9ca61a702e0dbb27d"}]}