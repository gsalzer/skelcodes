{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ncontract owned {\r\n    address public owner;\r\n    function owned() public {owner = msg.sender;}\r\n    modifier onlyOwner { require(msg.sender == owner); _;}\r\n    function transferOwnership(address newOwner) onlyOwner public {owner = newOwner;}\r\n}\r\n\r\ncontract EmtCrowdfund is owned {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 8;\r\n    uint256 public totalSupply;\r\n    uint256 public tokenPrice;\r\n    uint public minBuyAmount = 700000000000000000;       // 0.7 eth\r\n    uint public maxBuyAmount = 13000000000000000000;     // 13 eth\r\n    uint public bonusPercent = 20;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => bool) public frozenAccount;\r\n    mapping (address => uint[]) public paymentHistory;\r\n    mapping (address => mapping (uint => uint)) public paymentDetail;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Burn(address indexed from, uint value);\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    function EmtCrowdfund(\r\n        uint256 initialSupply,\r\n        uint256 _tokenPrice,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n        tokenPrice = _tokenPrice / 10 ** uint256(decimals);\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != 0x0);\r\n        require (balanceOf[_from] >= _value);\r\n        require (balanceOf[_to] + _value >= balanceOf[_to]);\r\n        require(!frozenAccount[_from]);\r\n        require(!frozenAccount[_to]);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @notice Destroy tokens from other account\r\n     * @param _from the address of the owner\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint _value) public onlyOwner returns (bool success) {\r\n        require(balanceOf[_from] >= _value);\r\n        balanceOf[_from] -= _value;\r\n        totalSupply -= _value;\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    /** @notice Allow users to buy tokens for eth\r\n    *   @param _tokenPrice Price the users can buy\r\n    */\r\n    function setPrices(uint256 _tokenPrice) onlyOwner public {\r\n        tokenPrice = _tokenPrice;\r\n    }\r\n\r\n    function setBuyLimits(uint _min, uint _max) onlyOwner public {\r\n        minBuyAmount = _min;\r\n        maxBuyAmount = _max;\r\n    }\r\n\r\n    function setBonus(uint _percent) onlyOwner public {\r\n        bonusPercent = _percent;\r\n    }\r\n\r\n    function() payable public{\r\n        buy();\r\n    }\r\n\r\n    /// @notice Buy tokens from contract by sending ether\r\n    function buy() payable public {\r\n\r\n        uint now_ = now;\r\n\r\n        if(minBuyAmount > 0){\r\n            require(msg.value >= minBuyAmount);\r\n        }\r\n\r\n        if(maxBuyAmount > 0){\r\n            require(msg.value <= maxBuyAmount);\r\n\r\n            if(paymentHistory[msg.sender].length > 0){\r\n                uint lastTotal = 0;\r\n                uint thisDay = now_ - 86400;\r\n\r\n                for (uint i = 0; i < paymentHistory[msg.sender].length; i++) {\r\n                    if(paymentHistory[msg.sender][i] >= thisDay){\r\n                        lastTotal += paymentDetail[msg.sender][paymentHistory[msg.sender][i]];\r\n                    }\r\n                }\r\n\r\n                require(lastTotal <= maxBuyAmount);\r\n            }\r\n        }\r\n\r\n        uint amount = msg.value / tokenPrice;\r\n\r\n        if(bonusPercent > 0){\r\n            uint bonusAmount = amount / 100 * bonusPercent;\r\n            amount += bonusAmount;\r\n        }\r\n\r\n        require (totalSupply >= amount);\r\n        require(!frozenAccount[msg.sender]);\r\n        totalSupply -= amount;\r\n        balanceOf[msg.sender] += amount;\r\n\r\n        paymentHistory[msg.sender].push(now_);\r\n        paymentDetail[msg.sender][now_] = amount;\r\n\r\n        emit Transfer(address(0), msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n    * @notice Manual transfer for investors who paid from payment cards\r\n    * @param _to the address of the receiver\r\n    * @param _value the amount of tokens\r\n    */\r\n    function manualTransfer(address _to, uint _value) public onlyOwner returns (bool success) {\r\n        require (totalSupply >= _value);\r\n        require(!frozenAccount[_to]);\r\n        totalSupply -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(address(0), _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Withdraw ether to owner account\r\n    function withdrawAll() onlyOwner public {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_min\",\"type\":\"uint256\"},{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setBuyLimits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"manualTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paymentDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paymentHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBuyAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"}]","ContractName":"EmtCrowdfund","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000059682f0000000000000000000000000000000000000000000000000000007f544a44c000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000154574686572204d656d6f7269747920546f6b656e2700000000000000000000000000000000000000000000000000000000000000000000000000000000000003454d540000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://e597f0325251cc3b973db169cceba5fae1680f889e336a74564ed92109e24f76"}]}