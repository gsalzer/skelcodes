{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\ncontract SafeMath {  \r\n//internals\r\n\r\nfunction safeMul(uint a, uint b) internal returns(uint) {\r\nuint c = a * b;\r\nassert(a == 0 || c / a == b);\r\nreturn c;\r\n}\r\n\r\nfunction safeSub(uint a, uint b) internal returns(uint) {\r\nassert(b <= a);\r\nreturn a - b;\r\n}\r\n\r\nfunction safeAdd(uint a, uint b) internal returns(uint) {\r\nuint c = a + b;\r\nassert(c >= a && c >= b);\r\nreturn c;\r\n}\r\n}\r\n\r\n\r\n\r\n\r\ncontract owned { //Contract used to only allow the owner to call some functions\r\naddress public owner;\r\n\r\nfunction owned() public {\r\nowner = msg.sender;\r\n}\r\n\r\nmodifier onlyOwner {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\n\r\nfunction transferOwnership(address newOwner) onlyOwner public {\r\nowner = newOwner;\r\n}\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract TokenERC20 is SafeMath {\r\n// Public variables of the token\r\nstring public name;\r\nstring public symbol;\r\nuint8 public decimals = 18;\r\n//\r\nuint256 public totalSupply;\r\n\r\n\r\n// This creates an array with all balances\r\nmapping (address => uint256) public balanceOf;\r\nmapping (address => mapping (address => uint256)) public allowance;\r\n\r\n// This generates a public event on the blockchain that will notify clients\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n// This notifies clients about the amount burnt\r\nevent Burn(address indexed from, uint256 value);\r\n\r\n/**\r\n* Constrctor function\r\n*\r\n* Initializes contract with initial supply tokens to the creator of the contract\r\n*/\r\nfunction TokenERC20(\r\nuint256 initialSupply,\r\nstring tokenName,\r\nstring tokenSymbol\r\n) public {\r\ntotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\nbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\nname = tokenName;                                   // Set the name for display purposes\r\nsymbol = tokenSymbol;                               // Set the symbol for display purposes\r\n}\r\n\r\n/**\r\n* Internal transfer, only can be called by this contract\r\n*/\r\nfunction _transfer(address _from, address _to, uint _value) internal {\r\n// Prevent transfer to 0x0 address. Use burn() instead\r\nrequire(_to != 0x0);\r\n// Check if the sender has enough\r\nrequire(balanceOf[_from] >= _value);\r\n// Check for overflows\r\nrequire(safeAdd(balanceOf[_to], _value) > balanceOf[_to]);\r\n// Save this for an assertion in the future\r\nuint previousBalances = safeAdd(balanceOf[_from], balanceOf[_to]);\r\n// Subtract from the sender\r\nbalanceOf[_from] = safeSub(balanceOf[_from], _value);\r\n// Add the same to the recipient\r\nbalanceOf[_to] = safeAdd(balanceOf[_to], _value);\r\nTransfer(_from, _to, _value);\r\n// Asserts are used to use static analysis to find bugs in your code. They should never fail\r\nassert(safeAdd(balanceOf[_from], balanceOf[_to]) == previousBalances);\r\n}\r\n\r\n/**\r\n* Function to Transfer tokens\r\n*\r\n* Send `_value` tokens to `_to` from your account\r\n*\r\n* @param _to The address of the recipient\r\n* @param _value the amount to send\r\n*/\r\nfunction transfer(address _to, uint256 _value) public {\r\n_transfer(msg.sender, _to, _value);\r\n}\r\n\r\n/**\r\n* function to Transfer tokens from other address\r\n*\r\n* Send `_value` tokens to `_to` in behalf of `_from`\r\n*\r\n* @param _from The address of the sender\r\n* @param _to The address of the recipient\r\n* @param _value the amount to send\r\n*/\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\nrequire(_value <= allowance[_from][msg.sender]);     // Check allowance\r\nallowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);\r\n_transfer(_from, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* function Set allowance for other address\r\n*\r\n* Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n*\r\n* @param _spender The address authorized to spend\r\n* @param _value the max amount they can spend\r\n*/\r\nfunction approve(address _spender, uint256 _value) public\r\nreturns (bool success) {\r\nallowance[msg.sender][_spender] = _value;\r\nreturn true;\r\n}\r\n\r\n\r\n/**\r\n*Function to Destroy tokens\r\n*\r\n* Remove `_value` tokens from the system irreversibly\r\n*\r\n* @param _value the amount of money to burn\r\n*/\r\nfunction burn(uint256 _value) public returns (bool success) {\r\nrequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\nbalanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);            // Subtract from the sender\r\ntotalSupply = safeSub(totalSupply,_value);                      // Updates totalSupply\r\nBurn(msg.sender, _value);\r\nreturn true;\r\n}\r\n\r\n\r\n\r\n/**\r\n* Destroy tokens from other ccount\r\n*\r\n* Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n*\r\n* @param _from the address of the sender\r\n* @param _value the amount of money to burn\r\n*/\r\nfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\r\nrequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\nrequire(_value <= allowance[_from][msg.sender]);    // Check allowance\r\nbalanceOf[_from] = safeSub(balanceOf[_from], _value);                         // Subtract from the targeted balance\r\nallowance[_from][msg.sender] =safeSub(allowance[_from][msg.sender],_value);             // Subtract from the sender's allowance\r\ntotalSupply =safeSub(totalSupply,_value);                              // Update totalSupply\r\nBurn(_from, _value);\r\nreturn true;\r\n}\r\n}\r\n\r\n/******************************************/\r\n/*       NeverCoin STARTS HERE       */\r\n/******************************************/\r\n\r\ncontract NeverCoin is owned, TokenERC20  {\r\n\r\n//Modify these variables\r\nuint256 _initialSupply=15000000; \r\nstring _tokenName=\"NeverCoin\";  \r\nstring _tokenSymbol=\"NVC\";\r\n\r\nmapping (address => bool) public frozenAccount;\r\n\r\n/* This generates a public event on the blockchain that will notify clients */\r\nevent FrozenFunds(address target, bool frozen);\r\n\r\n/* Initializes contract with initial supply tokens to the creator of the contract */\r\nfunction NeverCoin( ) TokenERC20(_initialSupply, _tokenName, _tokenSymbol) public {}\r\n\r\n/* Internal transfer, only can be called by this contract. */\r\nfunction _transfer(address _from, address _to, uint _value) internal {\r\nrequire (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\nrequire (balanceOf[_from] >= _value);                // Check if the sender has enough\r\nrequire (safeAdd(balanceOf[_to], _value) > balanceOf[_to]); // Check for overflows\r\nrequire(!frozenAccount[_from]);                     // Check if sender is frozen\r\nrequire(!frozenAccount[_to]);                       // Check if recipient is frozen\r\nbalanceOf[_from] =safeSub(balanceOf[_from],_value);                         // Subtract from the sender\r\nbalanceOf[_to] =safeAdd(balanceOf[_to],_value);                           // Add the same to the recipient\r\nTransfer(_from, _to, _value);\r\n}\r\n\r\n/// function to create more coins and send it to `target`\r\n/// @param target Address to receive the tokens\r\n/// @param mintedAmount the amount of tokens it will receive\r\nfunction mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\nbalanceOf[target] =safeAdd(balanceOf[target],mintedAmount);\r\ntotalSupply =safeAdd(totalSupply,mintedAmount);\r\nTransfer(0, this, mintedAmount);\r\nTransfer(this, target, mintedAmount);\r\n}\r\n\r\n/// function to Prevent | Allow` `target` from sending & receiving tokens\r\n/// @param target Address to be frozen\r\n/// @param freeze either to freeze it or not\r\nfunction freezeAccount(address target, bool freeze) onlyOwner public {\r\nfrozenAccount[target] = freeze;\r\nFrozenFunds(target, freeze);\r\n}\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"NeverCoin","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d29f2d5c75a6fefc98de8140ab68c607536a4d56dd82eddd9c7856e4370f3eb2"}]}