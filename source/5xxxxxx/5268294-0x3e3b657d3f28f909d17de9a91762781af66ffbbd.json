{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ninterface ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract PostFactory {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"Karma Factory\";\r\n    string public constant SYMBOL = \"KC\";\r\n\r\n    uint256 private postId = 1;\r\n    // post IDs start at 1, just like arrays do :)\r\n\r\n    mapping (address => mapping (uint256 => bool)) upvotedPost;\r\n\r\n    mapping (address => mapping (uint256 => bool)) downvotedPost;\r\n\r\n    // checks if a post exists\r\n    mapping (uint256 => bool) postExists;\r\n\r\n    struct Post {\r\n        string link;\r\n        address poster;\r\n        uint256 voteCount;\r\n        uint64 datePosted;\r\n    }\r\n\r\n    mapping (uint256 => Post) posts; // ties postId to a post\r\n\r\n    mapping(string => uint256) linkToPostId; // Ties a post's link to it's ID\r\n\r\n    function createPost(string _link) public returns(uint256) {\r\n\r\n        Post memory post = Post({\r\n            link: _link,\r\n            poster: msg.sender,\r\n            voteCount: 0,\r\n            datePosted: uint64(now)\r\n        });\r\n\r\n        posts[postId] = post;\r\n        linkToPostId[_link] = postId;\r\n        postExists[postId] = true;\r\n\r\n        uint256 currentPostId = postId;\r\n        incrementpostId();\r\n\r\n        return currentPostId;\r\n    }\r\n\r\n    function updoot(uint256 _postId) public {\r\n        require(postExists[_postId]);\r\n        upvotedPost[msg.sender][_postId] = true;\r\n        downvotedPost[msg.sender][_postId] = false;\r\n        posts[_postId].voteCount = posts[_postId].voteCount.add(1);\r\n    }\r\n\r\n    function downdoot(uint256 _postId) public {\r\n        require(postExists[_postId]);\r\n        require(posts[_postId].voteCount >= 1);\r\n        upvotedPost[msg.sender][_postId] = false;\r\n        downvotedPost[msg.sender][_postId] = true;\r\n        posts[_postId].voteCount = posts[_postId].voteCount.sub(1);\r\n    }\r\n\r\n    function getPostLink(uint256 _postId) public view returns(string) {\r\n        return posts[_postId].link;\r\n    }\r\n\r\n    function getPostPoster(uint256 _postId) public view returns(address) {\r\n        return posts[_postId].poster;\r\n    }\r\n\r\n    function getPostVoteCount(uint256 _postId) public view returns(uint256) {\r\n        return posts[_postId].voteCount;\r\n    }\r\n\r\n    function getLinkToPostId(string _link) public view returns(uint256) {\r\n        return linkToPostId[_link];\r\n    }\r\n\r\n    function getDatePosted(uint256 _postId) public view returns(uint64) {\r\n        return posts[_postId].datePosted;\r\n    }\r\n\r\n    function incrementpostId() internal {\r\n        postId = postId.add(1);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract KarmaCenter is PostFactory {\r\n    using SafeMath for uint256;\r\n\r\n    // The KarmaCoin token being minted\r\n    ERC20Basic public token;\r\n    \r\n    // My wallet\r\n    address private controller;\r\n\r\n    event GameWon(address indexed winner, uint256 valueUnlocked);\r\n\r\n    //Constructor\r\n    function KarmaCenter(ERC20Basic _token) public {\r\n        token = _token;\r\n        controller = msg.sender;\r\n    }\r\n\r\n    function () public payable {\r\n        controller.transfer(msg.value);\r\n    }\r\n\r\n    function updoot(uint256 _postId) public {\r\n        require(postExists[_postId]);\r\n        require(token.balanceOf(msg.sender) > 0);\r\n        upvotedPost[msg.sender][_postId] = true;\r\n        downvotedPost[msg.sender][_postId] = false;\r\n        posts[_postId].voteCount = posts[_postId].voteCount.add(1);\r\n        address poster = posts[_postId].poster;\r\n        token.transfer(poster, 1);\r\n    }\r\n\r\n    function downdoot(uint256 _postId) public {\r\n        require(postExists[_postId]);\r\n        require(posts[_postId].voteCount >= 1);\r\n        upvotedPost[msg.sender][_postId] = false;\r\n        downvotedPost[msg.sender][_postId] = true;\r\n        posts[_postId].voteCount = posts[_postId].voteCount.sub(1);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"downdoot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"getPostPoster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"getPostVoteCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"updoot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_link\",\"type\":\"string\"}],\"name\":\"getLinkToPostId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_link\",\"type\":\"string\"}],\"name\":\"createPost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"getPostLink\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"getDatePosted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"valueUnlocked\",\"type\":\"uint256\"}],\"name\":\"GameWon\",\"type\":\"event\"}]","ContractName":"KarmaCenter","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004180a2c1f55722b495a8f8e3ca5a1eadde597a7e","Library":"","SwarmSource":"bzzr://2c09698ec431a0bcd32287473fa18d4d7830bf667ff8a4daefbd79dcd67b4f63"}]}