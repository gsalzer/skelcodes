{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/*\r\n\r\n\r\n    (   )\r\n  (   ) (\r\n   ) _   )\r\n    ( \\_\r\n  _(_\\ \\)__\r\n (____\\___)) \r\n \r\n \r\n*/\r\n\r\n\r\n// similar to ShrimpFarmer, with eight changes:\r\n// 1. one third of your ShitClones die when you sell your time\r\n// 2. the ownership of the devfee can transfer through sacrificing ShitClones\r\n//  a. the new requirement will be how many remaining ShitClones you have after the sacrifice\r\n//  b. you cannot sacrifice ShitClones if you are the ShitClonesLord\r\n// 3. the \"free\" 500 ShitClones cost 0.001 eth (in line with the mining fee)\r\n// bots should have a harder time, and whales can compete for the devfee\r\n// 4. UI is for peasants, this is mew sniper territory. Step away to a safe distance.\r\n// 5. I made some changes to the contract that might have fucked it, or not.\r\n// https://bit.ly/2xc8v53\r\n// 6. Join our discord @ https://discord.gg/RbgqjPd\r\n// 7. Let's stop creating these and move on. M'kay?\r\n// 8. Drops the mic.\r\n\r\ncontract ShitCloneFarmer {\r\n\r\n    uint256 public TIME_TO_MAKE_1_SHITCLONE = 86400;\r\n    uint256 public STARTING_SHITCLONE = 100;\r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    bool public initialized = true;\r\n    address public ShitCloneslordAddress;\r\n    uint256 public ShitCloneslordReq = 500000; // starts at 500k ShitClones\r\n    mapping (address => uint256) public ballShitClone;\r\n    mapping (address => uint256) public claimedTime;\r\n    mapping (address => uint256) public lastEvent;\r\n    mapping (address => address) public referrals;\r\n    uint256 public marketTime;\r\n\r\n    function ShitCloneFarmer() public {\r\n        ShitCloneslordAddress = msg.sender;\r\n    }\r\n\r\n    function makeShitClone(address ref) public {\r\n        require(initialized);\r\n\r\n        if (referrals[msg.sender] == 0 && referrals[msg.sender] != msg.sender) {\r\n            referrals[msg.sender] = ref;\r\n        }\r\n\r\n        uint256 timeUsed = getMyTime();\r\n        uint256 newShitClone = SafeMath.div(timeUsed, TIME_TO_MAKE_1_SHITCLONE);\r\n        ballShitClone[msg.sender] = SafeMath.add(ballShitClone[msg.sender], newShitClone);\r\n        claimedTime[msg.sender] = 0;\r\n        lastEvent[msg.sender] = now;\r\n        \r\n        // send referral time\r\n        claimedTime[referrals[msg.sender]] = SafeMath.add(claimedTime[referrals[msg.sender]], SafeMath.div(timeUsed, 5)); // +20%\r\n        \r\n        // boost market to prevent sprem hoarding\r\n        marketTime = SafeMath.add(marketTime, SafeMath.div(timeUsed, 10)); // +10%\r\n    }\r\n\r\n    function sellShitClones() public {\r\n        require(initialized);\r\n\r\n        uint256 cellCount = getMyTime();\r\n        uint256 cellValue = calculateCellSell(cellCount);\r\n        uint256 fee = devFee(cellValue);\r\n        \r\n        // one third of your ShitClones die :'(\r\n        ballShitClone[msg.sender] = SafeMath.mul(SafeMath.div(ballShitClone[msg.sender], 3), 2); // =66%\r\n        claimedTime[msg.sender] = 0;\r\n        lastEvent[msg.sender] = now;\r\n\r\n        // put them on the market\r\n        marketTime = SafeMath.add(marketTime, cellCount);\r\n\r\n        // ALL HAIL THE SHITCLONELORD!\r\n        ShitCloneslordAddress.transfer(fee);\r\n        msg.sender.transfer(SafeMath.sub(cellValue, fee));\r\n    }\r\n\r\n    function buyShitClones() public payable {\r\n        require(initialized);\r\n\r\n        uint256 timeBought = calculateCellBuy(msg.value, SafeMath.sub(this.balance, msg.value));\r\n        timeBought = SafeMath.sub(timeBought, devFee(timeBought));\r\n        claimedTime[msg.sender] = SafeMath.add(claimedTime[msg.sender], timeBought);\r\n\r\n        // ALL HAIL THE SHITCLONELORD!\r\n        ShitCloneslordAddress.transfer(devFee(msg.value));\r\n    }\r\n\r\n    // magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt, uint256 rs, uint256 bs) public view returns(uint256) {\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n\r\n    function calculateCellSell(uint256 time) public view returns(uint256) {\r\n        return calculateTrade(time, marketTime, this.balance);\r\n    }\r\n\r\n    function calculateCellBuy(uint256 eth, uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth, contractBalance, marketTime);\r\n    }\r\n\r\n    function calculateCellBuySimple(uint256 eth) public view returns(uint256) {\r\n        return calculateCellBuy(eth, this.balance);\r\n    }\r\n\r\n    function devFee(uint256 amount) public view returns(uint256) {\r\n        return SafeMath.div(SafeMath.mul(amount, 4), 100); // 4%\r\n    }\r\n\r\n    function seedMarket(uint256 time) public payable {\r\n        require(marketTime == 0);\r\n        require(ShitCloneslordAddress == msg.sender);\r\n        marketTime = time;\r\n    }\r\n\r\n    function getFreeShitClone() public payable {\r\n        require(initialized);\r\n        require(msg.value == 0.001 ether); // similar to mining fee, prevents bots\r\n        ShitCloneslordAddress.transfer(msg.value); // the ShitCloneslord gets the entry fee ;)\r\n\r\n        require(ballShitClone[msg.sender] == 0);\r\n        lastEvent[msg.sender] = now;\r\n        ballShitClone[msg.sender] = STARTING_SHITCLONE;\r\n    }\r\n\r\n    function getBalance() public view returns(uint256) {\r\n        return this.balance;\r\n    }\r\n\r\n    function getMyShitClone() public view returns(uint256) {\r\n        return ballShitClone[msg.sender];\r\n    }\r\n\r\n    function becomeShitClonelord() public {\r\n        require(initialized);\r\n        require(msg.sender != ShitCloneslordAddress);\r\n        require(ballShitClone[msg.sender] >= ShitCloneslordReq);\r\n\r\n        ballShitClone[msg.sender] = SafeMath.sub(ballShitClone[msg.sender], ShitCloneslordReq);\r\n        ShitCloneslordReq = ballShitClone[msg.sender]; // the requirement now becomes the balance at that time\r\n        ShitCloneslordAddress = msg.sender;\r\n    }\r\n\r\n    function getShitClonelordReq() public view returns(uint256) {\r\n        return ShitCloneslordReq;\r\n    }\r\n\r\n    function getMyTime() public view returns(uint256) {\r\n        return SafeMath.add(claimedTime[msg.sender], getTimeSinceLastEvent(msg.sender));\r\n    }\r\n\r\n    function getTimeSinceLastEvent(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed = min(TIME_TO_MAKE_1_SHITCLONE, SafeMath.sub(now, lastEvent[adr]));\r\n        return SafeMath.mul(secondsPassed, ballShitClone[adr]);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"makeShitClone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_SHITCLONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ShitCloneslordAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"calculateCellSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_TO_MAKE_1_SHITCLONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastEvent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"becomeShitClonelord\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellShitClones\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyShitClone\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateCellBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ShitCloneslordReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateCellBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getShitClonelordReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyShitClones\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFreeShitClone\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ballShitClone\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getTimeSinceLastEvent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"ShitCloneFarmer","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2d64cf1978ddb756ecf43ef70fb051c69a5401d830a8bda6de4e7cecf1a18669"}]}