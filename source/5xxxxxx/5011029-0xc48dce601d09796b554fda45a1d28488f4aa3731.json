{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/// @title Ownable contract\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n/// @title Ownable contract\r\ncontract Ownable {\r\n  \r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /// @dev Change ownership\r\n  /// @param newOwner Address of the new owner\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/// @title ERC20 contract\r\n/// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint);\r\n  function transfer(address to, uint value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  \r\n  function allowance(address owner, address spender) public constant returns (uint);\r\n  function transferFrom(address from, address to, uint value) public returns (bool);\r\n  function approve(address spender, uint value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/// @title ExtendedERC20 contract\r\ncontract ExtendedERC20 is ERC20 {\r\n  function mint(address _to, uint _amount) public returns (bool);\r\n}\r\n\r\n/// @title WizzleInfinityHelper contract\r\ncontract WizzleInfinityHelper {\r\n  function isWhitelisted(address addr) public constant returns (bool);\r\n}\r\n\r\n/// @title Crowdsale contract\r\ncontract Crowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n  \r\n  /// Token reference\r\n  ExtendedERC20 public token;\r\n  /// WizzleInfinityHelper reference - helper for whitelisting\r\n  WizzleInfinityHelper public helper;\r\n  /// Presale start time (inclusive)\r\n  uint256 public startTimePre;\r\n  /// Presale end time (inclusive)\r\n  uint256 public endTimePre;\r\n  /// ICO start time (inclusive)\r\n  uint256 public startTimeIco;\r\n  /// ICO end time (inclusive)\r\n  uint256 public endTimeIco;\r\n  /// Address where the funds will be collected\r\n  address public wallet;\r\n  /// EUR per 1 ETH rate\r\n  uint32 public rate;\r\n  /// Amount of tokens sold in presale\r\n  uint256 public tokensSoldPre;\r\n  /// Amount of tokens sold in ICO\r\n  uint256 public tokensSoldIco;\r\n  /// Amount of raised ethers expressed in weis\r\n  uint256 public weiRaised;\r\n  /// Number of contributors\r\n  uint256 public contributors;\r\n  /// Presale cap\r\n  uint256 public preCap;\r\n  /// ICO cap\r\n  uint256 public icoCap;\r\n  /// Presale discount percentage\r\n  uint8 public preDiscountPercentage;\r\n  /// Amount of tokens in ICO discount level 1 \r\n  uint256 public icoDiscountLevel1;\r\n  /// Amount of tokens in ICO discount level 2\r\n  uint256 public icoDiscountLevel2;\r\n  /// ICO discount percentage 1\r\n  uint8 public icoDiscountPercentageLevel1;\r\n  /// ICO discount percentage 2\r\n  uint8 public icoDiscountPercentageLevel2;\r\n  /// ICO discount percentage 3\r\n  uint8 public icoDiscountPercentageLevel3;\r\n\r\n  function Crowdsale(uint256 _startTimePre, uint256 _endTimePre, uint256 _startTimeIco, uint256 _endTimeIco, uint32 _rate, address _wallet, address _tokenAddress, address _helperAddress) {\r\n    require(_startTimePre >= now);\r\n    require(_endTimePre >= _startTimePre);\r\n    require(_startTimeIco >= _endTimePre);\r\n    require(_endTimeIco >= _startTimeIco);\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n    require(_tokenAddress != address(0));\r\n    require(_helperAddress != address(0));\r\n    startTimePre = _startTimePre;\r\n    endTimePre = _endTimePre;\r\n    startTimeIco = _startTimeIco;\r\n    endTimeIco = _endTimeIco;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    token = ExtendedERC20(_tokenAddress);\r\n    helper = WizzleInfinityHelper(_helperAddress);\r\n    preCap = 1500 * 10**24;           // 1500m tokens\r\n    preDiscountPercentage = 50;       // 50% discount\r\n    icoCap = 3450 * 10**24;           // 3450m tokens (500m + 500m + 2450m)\r\n    icoDiscountLevel1 = 500 * 10**24; // 500m tokens \r\n    icoDiscountLevel2 = 500 * 10**24; // 500m tokens\r\n    icoDiscountPercentageLevel1 = 40; // 40% discount\r\n    icoDiscountPercentageLevel2 = 30; // 30% discount\r\n    icoDiscountPercentageLevel3 = 25; // 25% discount\r\n  }\r\n\r\n  /// @dev Set the rate of ETH - EUR\r\n  /// @param _rate Rate of ETH - EUR\r\n  function setRate(uint32 _rate) public onlyOwner {\r\n    require(_rate > 0);\r\n    rate = _rate;\r\n  }\r\n\r\n  /// @dev Fallback function for crowdsale contribution\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /// @dev Buy tokens function\r\n  /// @param beneficiary Address which will receive the tokens\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(helper.isWhitelisted(beneficiary));\r\n    uint256 weiAmount = msg.value;\r\n    require(weiAmount > 0);\r\n    uint256 tokenAmount = 0;\r\n    if (isPresale()) {\r\n      /// Minimum contribution of 1 ether during presale\r\n      require(weiAmount >= 1 ether); \r\n      tokenAmount = getTokenAmount(weiAmount, preDiscountPercentage);\r\n      uint256 newTokensSoldPre = tokensSoldPre.add(tokenAmount);\r\n      require(newTokensSoldPre <= preCap);\r\n      tokensSoldPre = newTokensSoldPre;\r\n    } else if (isIco()) {\r\n      uint8 discountPercentage = getIcoDiscountPercentage();\r\n      tokenAmount = getTokenAmount(weiAmount, discountPercentage);\r\n      /// Minimum contribution 1 token during ICO\r\n      require(tokenAmount >= 10**18); \r\n      uint256 newTokensSoldIco = tokensSoldIco.add(tokenAmount);\r\n      require(newTokensSoldIco <= icoCap);\r\n      tokensSoldIco = newTokensSoldIco;\r\n    } else {\r\n      /// Stop execution and return remaining gas\r\n      require(false);\r\n    }\r\n    executeTransaction(beneficiary, weiAmount, tokenAmount);\r\n  }\r\n\r\n  /// @dev Internal function used for calculating ICO discount percentage depending on levels\r\n  function getIcoDiscountPercentage() internal constant returns (uint8) {\r\n    if (tokensSoldIco <= icoDiscountLevel1) {\r\n      return icoDiscountPercentageLevel1;\r\n    } else if (tokensSoldIco <= icoDiscountLevel1.add(icoDiscountLevel2)) {\r\n      return icoDiscountPercentageLevel2;\r\n    } else { \r\n      return icoDiscountPercentageLevel3; //for everything else\r\n    }\r\n  }\r\n\r\n  /// @dev Internal function used to calculate amount of tokens based on discount percentage\r\n  function getTokenAmount(uint256 weiAmount, uint8 discountPercentage) internal constant returns (uint256) {\r\n    /// Less than 100 to avoid division with zero\r\n    require(discountPercentage >= 0 && discountPercentage < 100); \r\n    uint256 baseTokenAmount = weiAmount.mul(rate);\r\n    uint256 tokenAmount = baseTokenAmount.mul(10000).div(100 - discountPercentage);\r\n    return tokenAmount;\r\n  }\r\n\r\n  /// @dev Internal function for execution of crowdsale transaction and proper logging used by payable functions\r\n  function executeTransaction(address beneficiary, uint256 weiAmount, uint256 tokenAmount) internal {\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    token.mint(beneficiary, tokenAmount);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokenAmount);\r\n\t  contributors = contributors.add(1);\r\n    wallet.transfer(weiAmount);\r\n  }\r\n\r\n  /// @dev Used to change presale cap (maximum tokens sold during presale)\r\n  /// @param _preCap Presale cap\r\n  function changePresaleCap(uint256 _preCap) public onlyOwner {\r\n    require(_preCap > 0);\r\n    PresaleCapChanged(owner, _preCap);\r\n    preCap = _preCap;\r\n  }\r\n\r\n  /// @dev Used to change presale discount percentage\r\n  /// @param _preDiscountPercentage Presale discount percentage\r\n  function changePresaleDiscountPercentage(uint8 _preDiscountPercentage) public onlyOwner {\r\n    require(_preDiscountPercentage >= 0 && _preDiscountPercentage < 100);\r\n    PresaleDiscountPercentageChanged(owner, _preDiscountPercentage);\r\n    preDiscountPercentage = _preDiscountPercentage;\r\n  }\r\n\r\n  /// @dev Used to change presale time\r\n  /// @param _startTimePre Start time of presale\r\n  /// @param _endTimePre End time of presale\r\n  function changePresaleTimeRange(uint256 _startTimePre, uint256 _endTimePre) public onlyOwner {\r\n    require(_endTimePre >= _startTimePre);\r\n    PresaleTimeRangeChanged(owner, _startTimePre, _endTimePre);\r\n    startTimePre = _startTimePre;\r\n    endTimePre = _endTimePre;\r\n  }\r\n\r\n  /// @dev Used to change ICO cap in case the hard cap has been reached\r\n  /// @param _icoCap ICO cap\r\n  function changeIcoCap(uint256 _icoCap) public onlyOwner {\r\n    require(_icoCap > 0);\r\n    IcoCapChanged(owner, _icoCap);\r\n    icoCap = _icoCap;\r\n  }\r\n\r\n  /// @dev Used to change time of ICO\r\n  /// @param _startTimeIco Start time of ICO\r\n  /// @param _endTimeIco End time of ICO\r\n  function changeIcoTimeRange(uint256 _startTimeIco, uint256 _endTimeIco) public onlyOwner {\r\n    require(_endTimeIco >= _startTimeIco);\r\n    IcoTimeRangeChanged(owner, _startTimeIco, _endTimeIco);\r\n    startTimeIco = _startTimeIco;\r\n    endTimeIco = _endTimeIco;\r\n  }\r\n\r\n  /// @dev Change amount of tokens in discount phases\r\n  /// @param _icoDiscountLevel1 Amount of tokens in first phase\r\n  /// @param _icoDiscountLevel2 Amount of tokens in second phase\r\n  function changeIcoDiscountLevels(uint256 _icoDiscountLevel1, uint256 _icoDiscountLevel2) public onlyOwner {\r\n    require(_icoDiscountLevel1 > 0 && _icoDiscountLevel2 > 0);\r\n    IcoDiscountLevelsChanged(owner, _icoDiscountLevel1, _icoDiscountLevel2);\r\n    icoDiscountLevel1 = _icoDiscountLevel1;\r\n    icoDiscountLevel2 = _icoDiscountLevel2;\r\n  }\r\n\r\n  /// @dev Change discount percentages for different phases\r\n  /// @param _icoDiscountPercentageLevel1 Discount percentage of phase 1\r\n  /// @param _icoDiscountPercentageLevel2 Discount percentage of phase 2\r\n  /// @param _icoDiscountPercentageLevel3 Discount percentage of phase 3\r\n  function changeIcoDiscountPercentages(uint8 _icoDiscountPercentageLevel1, uint8 _icoDiscountPercentageLevel2, uint8 _icoDiscountPercentageLevel3) public onlyOwner {\r\n    require(_icoDiscountPercentageLevel1 >= 0 && _icoDiscountPercentageLevel1 < 100);\r\n    require(_icoDiscountPercentageLevel2 >= 0 && _icoDiscountPercentageLevel2 < 100);\r\n    require(_icoDiscountPercentageLevel3 >= 0 && _icoDiscountPercentageLevel3 < 100);\r\n    IcoDiscountPercentagesChanged(owner, _icoDiscountPercentageLevel1, _icoDiscountPercentageLevel2, _icoDiscountPercentageLevel3);\r\n    icoDiscountPercentageLevel1 = _icoDiscountPercentageLevel1;\r\n    icoDiscountPercentageLevel2 = _icoDiscountPercentageLevel2;\r\n    icoDiscountPercentageLevel3 = _icoDiscountPercentageLevel3;\r\n  }\r\n\r\n  /// @dev Check if presale is active\r\n  function isPresale() public constant returns (bool) {\r\n    return now >= startTimePre && now <= endTimePre;\r\n  }\r\n\r\n  /// @dev Check if ICO is active\r\n  function isIco() public constant returns (bool) {\r\n    return now >= startTimeIco && now <= endTimeIco;\r\n  }\r\n\r\n  /// @dev Check if presale has ended\r\n  function hasPresaleEnded() public constant returns (bool) {\r\n    return now > endTimePre;\r\n  }\r\n\r\n  /// @dev Check if ICO has ended\r\n  function hasIcoEnded() public constant returns (bool) {\r\n    return now > endTimeIco;\r\n  }\r\n\r\n  /// @dev Amount of tokens that have been sold during both presale and ICO phase\r\n  function cummulativeTokensSold() public constant returns (uint256) {\r\n    return tokensSoldPre + tokensSoldIco;\r\n  }\r\n\r\n  /// @dev Function to extract mistakenly sent ERC20 tokens sent to Crowdsale contract\r\n  /// @param _token Address of token we want to extract\r\n  function claimTokens(address _token) public onlyOwner {\r\n    if (_token == address(0)) { \r\n         owner.transfer(this.balance);\r\n         return;\r\n    }\r\n\r\n    ERC20 erc20Token = ERC20(_token);\r\n    uint balance = erc20Token.balanceOf(this);\r\n    erc20Token.transfer(owner, balance);\r\n    ClaimedTokens(_token, owner, balance);\r\n  }\r\n\r\n  /// Events\r\n  event TokenPurchase(address indexed _purchaser, address indexed _beneficiary, uint256 _value, uint256 _amount);\r\n  event PresaleTimeRangeChanged(address indexed _owner, uint256 _startTimePre, uint256 _endTimePre);\r\n  event PresaleCapChanged(address indexed _owner, uint256 _preCap);\r\n  event PresaleDiscountPercentageChanged(address indexed _owner, uint8 _preDiscountPercentage);\r\n  event IcoCapChanged(address indexed _owner, uint256 _icoCap);\r\n  event IcoTimeRangeChanged(address indexed _owner, uint256 _startTimeIco, uint256 _endTimeIco);\r\n  event IcoDiscountLevelsChanged(address indexed _owner, uint256 _icoDiscountLevel1, uint256 _icoDiscountLevel2);\r\n  event IcoDiscountPercentagesChanged(address indexed _owner, uint8 _icoDiscountPercentageLevel1, uint8 _icoDiscountPercentageLevel2, uint8 _icoDiscountPercentageLevel3);\r\n  event ClaimedTokens(address indexed _token, address indexed _owner, uint _amount);\r\n\r\n}\r\n\r\n/// @title WizzleInfinityTokenCrowdsale contract\r\ncontract WizzleInfinityTokenCrowdsale is Crowdsale {\r\n\r\n  function WizzleInfinityTokenCrowdsale(uint256 _startTimePre, uint256 _endTimePre, uint256 _startTimeIco, uint256 _endTimeIco, uint32 _rate, address _wallet, address _tokenAddress, address _helperAddress) \r\n  Crowdsale(_startTimePre, _endTimePre, _startTimeIco, _endTimeIco, _rate, _wallet, _tokenAddress, _helperAddress) public {\r\n\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_startTimePre\",\"type\":\"uint256\"},{\"name\":\"_endTimePre\",\"type\":\"uint256\"}],\"name\":\"changePresaleTimeRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimePre\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoDiscountLevel1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoDiscountPercentageLevel3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoDiscountPercentageLevel1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTimeIco\",\"type\":\"uint256\"},{\"name\":\"_endTimeIco\",\"type\":\"uint256\"}],\"name\":\"changeIcoTimeRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimeIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldPre\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimeIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasPresaleEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"helper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasIcoEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoDiscountLevel2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimePre\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoDiscountPercentageLevel1\",\"type\":\"uint8\"},{\"name\":\"_icoDiscountPercentageLevel2\",\"type\":\"uint8\"},{\"name\":\"_icoDiscountPercentageLevel3\",\"type\":\"uint8\"}],\"name\":\"changeIcoDiscountPercentages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preDiscountPercentage\",\"type\":\"uint8\"}],\"name\":\"changePresaleDiscountPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoDiscountPercentageLevel2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoCap\",\"type\":\"uint256\"}],\"name\":\"changeIcoCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preCap\",\"type\":\"uint256\"}],\"name\":\"changePresaleCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cummulativeTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preDiscountPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoDiscountLevel1\",\"type\":\"uint256\"},{\"name\":\"_icoDiscountLevel2\",\"type\":\"uint256\"}],\"name\":\"changeIcoDiscountLevels\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint32\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTimePre\",\"type\":\"uint256\"},{\"name\":\"_endTimePre\",\"type\":\"uint256\"},{\"name\":\"_startTimeIco\",\"type\":\"uint256\"},{\"name\":\"_endTimeIco\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint32\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_helperAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_startTimePre\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTimePre\",\"type\":\"uint256\"}],\"name\":\"PresaleTimeRangeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_preCap\",\"type\":\"uint256\"}],\"name\":\"PresaleCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_preDiscountPercentage\",\"type\":\"uint8\"}],\"name\":\"PresaleDiscountPercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_icoCap\",\"type\":\"uint256\"}],\"name\":\"IcoCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_startTimeIco\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTimeIco\",\"type\":\"uint256\"}],\"name\":\"IcoTimeRangeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_icoDiscountLevel1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_icoDiscountLevel2\",\"type\":\"uint256\"}],\"name\":\"IcoDiscountLevelsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_icoDiscountPercentageLevel1\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_icoDiscountPercentageLevel2\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_icoDiscountPercentageLevel3\",\"type\":\"uint8\"}],\"name\":\"IcoDiscountPercentagesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WizzleInfinityTokenCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a72efac000000000000000000000000000000000000000000000000000000005a97427f000000000000000000000000000000000000000000000000000000005a974280000000000000000000000000000000000000000000000000000000005ac020ff0000000000000000000000000000000000000000000000000000000000000364000000000000000000000000ef671f5d4f95932f24b2052ef83247ba24307434000000000000000000000000b8327f32127afe37a544c52b628653e222a93bad000000000000000000000000ce75e5aa182ee99ea1be60aa13b3f2eed172730e","Library":"","SwarmSource":"bzzr://a0531436bb1c11e713f5c6af0bac9c19daa2dffda592c722bc15ff0e29ae6be7"}]}