{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;   \r\n    }\r\n}\r\n\r\ncontract BasicToken {\r\n    string private token_name;\r\n    string private token_symbol;\r\n    uint256 private token_decimals;\r\n\r\n    uint256 private total_supply;\r\n    uint256 private remaining_supply;\r\n\r\n    mapping (address => uint256) private balance_of;\r\n    mapping (address => mapping(address => uint256)) private allowance_of;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approve(address indexed target, address indexed spender, uint256 value);\r\n\r\n    function BasicToken (\r\n        string tokenName,\r\n        string tokenSymbol,\r\n        uint256 tokenDecimals,\r\n        uint256 tokenSupply\r\n    ) public {\r\n        token_name = tokenName;\r\n        token_symbol = tokenSymbol;\r\n        token_decimals = tokenDecimals;\r\n        total_supply = tokenSupply * (10 ** uint256(token_decimals));\r\n        remaining_supply = total_supply;\r\n    }\r\n\r\n    function name() public view returns (string) {\r\n        return token_name;\r\n    }\r\n\r\n    function symbol() public view returns (string) {\r\n        return token_symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return token_decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return total_supply;\r\n    }\r\n\r\n    function remainingSupply() internal view returns (uint256) {\r\n        return remaining_supply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address client_address\r\n    ) public view returns (uint256) {\r\n        return balance_of[client_address];\r\n    }\r\n\r\n    function setBalance(\r\n        address client_address,\r\n        uint256 value\r\n    ) internal returns (bool) {\r\n        require(client_address != address(0));\r\n        balance_of[client_address] = value;\r\n    }\r\n\r\n    function allowance(\r\n        address target_address,\r\n        address spender_address\r\n    ) public view returns (uint256) {\r\n        return allowance_of[target_address][spender_address];\r\n    }\r\n\r\n    function approve(\r\n        address spender_address,\r\n        uint256 value\r\n    ) public returns (bool) {\r\n        require(value >= 0);\r\n        require(msg.sender != address(0));\r\n        require(spender_address != address(0));\r\n\r\n        setApprove(msg.sender, spender_address, value);\r\n        Approve(msg.sender, spender_address, value);\r\n        return true;\r\n    }\r\n    \r\n    function setApprove(\r\n        address target_address,\r\n        address spender_address,\r\n        uint256 value\r\n    ) internal returns (bool) {\r\n        require(value >= 0);\r\n        require(msg.sender != address(0));\r\n        require(spender_address != address(0));\r\n\r\n        allowance_of[target_address][spender_address] = value;\r\n        return true;\r\n    }\r\n\r\n    function changeTokenName(\r\n        string newTokenName\r\n    ) internal returns (bool) {\r\n        token_name = newTokenName;\r\n        return true;\r\n    }\r\n\r\n    function changeTokenSymbol(\r\n        string newTokenSymbol\r\n    ) internal returns (bool) {\r\n        token_symbol = newTokenSymbol;\r\n        return true;\r\n    }\r\n\r\n    function changeTokenDecimals(\r\n        uint256 newTokenDecimals\r\n    ) internal returns (bool) {\r\n        token_decimals = newTokenDecimals;\r\n        return true;\r\n    }\r\n\r\n    function changeTotalSupply(\r\n        uint256 newTotalSupply\r\n    ) internal returns (bool) {\r\n        total_supply = newTotalSupply;\r\n        return true;\r\n    }\r\n\r\n    function changeRemainingSupply(\r\n        uint256 newRemainingSupply\r\n    ) internal returns (bool) {\r\n        remaining_supply = newRemainingSupply;\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract VoltOwned {\r\n    mapping (address => uint) private voltOwners;\r\n    address[] private ownerList;\r\n\r\n    mapping (address => uint256) private voltFreeze;\r\n\r\n    modifier onlyOwner {\r\n        require(voltOwners[msg.sender] == 99);\r\n        _;\r\n    }\r\n\r\n    modifier noFreeze {\r\n        require(now >= voltFreeze[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function VoltOwned(address firstOwner) public {\r\n        voltOwners[firstOwner] = 99;\r\n        ownerList.push(firstOwner);\r\n    }\r\n\r\n    function isOwner(address who) internal view returns (bool) {\r\n        if (voltOwners[who] == 99) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function addOwner(address newVoltOwnerAddress) public onlyOwner noFreeze {\r\n        require(newVoltOwnerAddress != address(0));\r\n        voltOwners[newVoltOwnerAddress] = 99;\r\n        ownerList.push(newVoltOwnerAddress);\r\n    }\r\n\r\n    function removeOwner(address removeVoltOwnerAddress) public onlyOwner noFreeze {\r\n        require(removeVoltOwnerAddress != address(0));\r\n        require(ownerList.length > 1);\r\n\r\n        voltOwners[removeVoltOwnerAddress] = 0;\r\n        for (uint256 i = 0; i != ownerList.length; i++) {\r\n            if (removeVoltOwnerAddress == ownerList[i]) {\r\n                delete ownerList[i];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getOwners() public onlyOwner noFreeze returns (address[]) {\r\n        return ownerList;\r\n    }\r\n\r\n    function isFreeze(address who) internal view returns (bool) {\r\n        if (now >= voltFreeze[who]) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function setFreeze(\r\n        address freezeAddress,\r\n        uint256 timestamp\r\n    ) public onlyOwner noFreeze returns (bool) {\r\n        require(freezeAddress != address(0));\r\n        voltFreeze[freezeAddress] = timestamp;\r\n    }\r\n\r\n    function getFreezeTimestamp(\r\n        address who\r\n    ) public onlyOwner noFreeze returns (uint256) {\r\n        return voltFreeze[who];\r\n    }\r\n}\r\n\r\ncontract VoltToken is BasicToken, VoltOwned {\r\n    using SafeMath for uint256;\r\n\r\n    bool private mintStatus;\r\n\r\n    event Deposit(address indexed from, address indexed to, uint256 value);\r\n    event Mint(address indexed to, uint256 value);\r\n    event Burn(address indexed target, uint256 value);\r\n\r\n    function VoltToken () public BasicToken (\r\n        \"VOLT\", \"ACDC\", 18, 4000000000\r\n    ) VoltOwned(\r\n        msg.sender\r\n    ) {\r\n        mintStatus = true;\r\n    }\r\n\r\n    modifier canMint {\r\n        require(mintStatus == true);\r\n        _;\r\n    }\r\n\r\n    function mint(\r\n        address to,\r\n        uint256 value,\r\n        uint256 freezeTimestamp\r\n    ) public onlyOwner noFreeze canMint {\r\n        uint256 ts = totalSupply();\r\n        uint256 rs = remainingSupply();\r\n        require(ts >= rs);\r\n\r\n        superMint(to, value);\r\n        setFreeze(to, freezeTimestamp);\r\n    }\r\n\r\n    function superMint(address to, uint256 value) public onlyOwner noFreeze {\r\n        uint256 rs = remainingSupply();\r\n        require(rs >= value);\r\n\r\n        uint256 currentBalance = balanceOf(to);\r\n        setBalance(to, currentBalance.add(value));\r\n        setRemainingSupply(rs.sub(value));\r\n        Transfer(0x0, to, value);\r\n        Mint(to, value);\r\n    }\r\n\r\n    function mintOpen() public onlyOwner noFreeze returns (bool) {\r\n        require(mintStatus == false);\r\n        mintStatus = true;\r\n        return true;\r\n    }\r\n\r\n    function mintClose() public onlyOwner noFreeze returns (bool) {\r\n        require(mintStatus == true);\r\n        mintStatus = false;\r\n        return true;\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 value\r\n    ) public noFreeze returns (bool) {\r\n        require(value > 0);\r\n        require(msg.sender != address(0));\r\n        require(to != address(0));\r\n\r\n        require(balanceOf(msg.sender) >= value);\r\n        require(balanceOf(to).add(value) >= balanceOf(to));\r\n\r\n        voltTransfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public noFreeze returns(bool) {\r\n        require(value > 0);\r\n        require(msg.sender != address(0));\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n\r\n        require(isFreeze(from) == false);\r\n        require(allowance(from, msg.sender) >= value);\r\n        require(balanceOf(from) >= value);\r\n        require(balanceOf(to).add(value) >= balanceOf(to));\r\n\r\n        voltTransfer(from, to, value);\r\n\r\n        uint256 remaining = allowance(from, msg.sender).sub(value);\r\n        setApprove(from, msg.sender, remaining);\r\n        return true;\r\n    }\r\n\r\n    function voltTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) private noFreeze returns (bool) {\r\n        uint256 preBalance = balanceOf(from);\r\n        setBalance(from, balanceOf(from).sub(value));\r\n        setBalance(to, balanceOf(to).add(value));\r\n        Transfer(from, to, value);\r\n        assert(balanceOf(from).add(value) == preBalance);\r\n        return true;\r\n    }\r\n\r\n    function setTokenName(\r\n        string newTokenName\r\n    ) public onlyOwner noFreeze returns (bool) {\r\n        return changeTokenName(newTokenName);\r\n    }\r\n\r\n    function setTokenSymbol(\r\n        string newTokenSymbol\r\n    ) public onlyOwner noFreeze returns (bool) {\r\n        return changeTokenSymbol(newTokenSymbol);\r\n    }\r\n\r\n    function setTotalSupply(\r\n        uint256 newTotalSupply\r\n    ) public onlyOwner noFreeze returns (bool) {\r\n        return changeTotalSupply(newTotalSupply);\r\n    }\r\n\r\n    function setRemainingSupply(\r\n        uint256 newRemainingSupply\r\n    ) public onlyOwner noFreeze returns (bool) {\r\n        return changeRemainingSupply(newRemainingSupply);\r\n    }\r\n\r\n    function getRemainingSupply() public onlyOwner noFreeze returns (uint256) {\r\n        return remainingSupply();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender_address\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRemainingSupply\",\"type\":\"uint256\"}],\"name\":\"setRemainingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"freezeTimestamp\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"removeVoltOwnerAddress\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"freezeAddress\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newVoltOwnerAddress\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"client_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getFreezeTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintClose\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenName\",\"type\":\"string\"}],\"name\":\"setTokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenSymbol\",\"type\":\"string\"}],\"name\":\"setTokenSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target_address\",\"type\":\"address\"},{\"name\":\"spender_address\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRemainingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"setTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"superMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approve\",\"type\":\"event\"}]","ContractName":"VoltToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3847ef2247276de789ee98c57a34fbfdbc1aeae639e262b4eb5fb21c7f23aad8"}]}