{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwnerCandidate;\r\n\r\n    event OwnershipRequested(address indexed _by, address indexed _to);\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() { require(msg.sender == owner); _;}\r\n\r\n    /// Proposes to transfer control of the contract to a newOwnerCandidate.\r\n    /// @param _newOwnerCandidate address The address to transfer ownership to.\r\n    function transferOwnership(address _newOwnerCandidate) external onlyOwner {\r\n        require(_newOwnerCandidate != address(0));\r\n\r\n        newOwnerCandidate = _newOwnerCandidate;\r\n\r\n        emit OwnershipRequested(msg.sender, newOwnerCandidate);\r\n    }\r\n\r\n    /// Accept ownership transfer. This method needs to be called by the perviously proposed owner.\r\n    function acceptOwnership() external {\r\n        if (msg.sender == newOwnerCandidate) {\r\n            owner = newOwnerCandidate;\r\n            newOwnerCandidate = address(0);\r\n\r\n            emit OwnershipTransferred(owner, newOwnerCandidate);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Serverable is Ownable {\r\n    address public server;\r\n\r\n    modifier onlyServer() { require(msg.sender == server); _;}\r\n\r\n    function setServerAddress(address _newServerAddress) external onlyOwner {\r\n        server = _newServerAddress;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC223 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public view returns (uint);\r\n  \r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function decimals() public view returns (uint8 _decimals);\r\n  function totalSupply() public view returns (uint256 _supply);\r\n\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool ok);\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract BalanceManager is Serverable {\r\n    /** player balances **/\r\n    mapping(uint32 => uint64) public balances;\r\n    /** player blocked tokens number **/\r\n    mapping(uint32 => uint64) public blockedBalances;\r\n    /** wallet balances **/\r\n    mapping(address => uint64) public walletBalances;\r\n    /** adress users **/\r\n    mapping(address => uint32) public userIds;\r\n\r\n    /** Dispatcher contract address **/\r\n    address public dispatcher;\r\n    /** service reward can be withdraw by owners **/\r\n    uint serviceReward;\r\n    /** service reward can be withdraw by owners **/\r\n    uint sentBonuses;\r\n    /** Token used to pay **/\r\n    ERC223 public gameToken;\r\n\r\n    modifier onlyDispatcher() {require(msg.sender == dispatcher);\r\n        _;}\r\n\r\n    event Withdraw(address _user, uint64 _amount);\r\n    event Deposit(address _user, uint64 _amount);\r\n\r\n    constructor(address _gameTokenAddress) public {\r\n        gameToken = ERC223(_gameTokenAddress);\r\n    }\r\n\r\n    function setDispatcherAddress(address _newDispatcherAddress) external onlyOwner {\r\n        dispatcher = _newDispatcherAddress;\r\n    }\r\n\r\n    /**\r\n     * Deposits from user\r\n     */\r\n    function tokenFallback(address _from, uint256 _amount, bytes _data) public {\r\n        if (userIds[_from] > 0) {\r\n            balances[userIds[_from]] += uint64(_amount);\r\n        } else {\r\n            walletBalances[_from] += uint64(_amount);\r\n        }\r\n\r\n        emit Deposit(_from, uint64(_amount));\r\n    }\r\n\r\n    /**\r\n     * Register user\r\n     */\r\n    function registerUserWallet(address _user, uint32 _id) external onlyServer {\r\n        require(userIds[_user] == 0);\r\n        require(_user != owner);\r\n\r\n        userIds[_user] = _id;\r\n        if (walletBalances[_user] > 0) {\r\n            balances[_id] += walletBalances[_user];\r\n            walletBalances[_user] = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deposits tokens in game to some user\r\n     */\r\n    function sendTo(address _user, uint64 _amount) external {\r\n        require(walletBalances[msg.sender] >= _amount);\r\n        walletBalances[msg.sender] -= _amount;\r\n        if (userIds[_user] > 0) {\r\n            balances[userIds[_user]] += _amount;\r\n        } else {\r\n            walletBalances[_user] += _amount;\r\n        }\r\n        emit Deposit(_user, _amount);\r\n    }\r\n\r\n    /**\r\n     * User can withdraw tokens manually in any time\r\n     */\r\n    function withdraw(uint64 _amount) external {\r\n        uint32 userId = userIds[msg.sender];\r\n        if (userId > 0) {\r\n            require(balances[userId] - blockedBalances[userId] >= _amount);\r\n            if (gameToken.transfer(msg.sender, _amount)) {\r\n                balances[userId] -= _amount;\r\n                emit Withdraw(msg.sender, _amount);\r\n            }\r\n        } else {\r\n            require(walletBalances[msg.sender] >= _amount);\r\n            if (gameToken.transfer(msg.sender, _amount)) {\r\n                walletBalances[msg.sender] -= _amount;\r\n                emit Withdraw(msg.sender, _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Server can withdraw tokens to user\r\n     */\r\n    function systemWithdraw(address _user, uint64 _amount) external onlyServer {\r\n        uint32 userId = userIds[_user];\r\n        require(balances[userId] - blockedBalances[userId] >= _amount);\r\n\r\n        if (gameToken.transfer(_user, _amount)) {\r\n            balances[userId] -= _amount;\r\n            emit Withdraw(_user, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispatcher can change user balance\r\n     */\r\n    function addUserBalance(uint32 _userId, uint64 _amount) external onlyDispatcher {\r\n        balances[_userId] += _amount;\r\n    }\r\n\r\n    /**\r\n     * Dispatcher can change user balance\r\n     */\r\n    function spendUserBalance(uint32 _userId, uint64 _amount) external onlyDispatcher {\r\n        require(balances[_userId] >= _amount);\r\n        balances[_userId] -= _amount;\r\n        if (blockedBalances[_userId] > 0) {\r\n            if (blockedBalances[_userId] <= _amount)\r\n                blockedBalances[_userId] = 0;\r\n            else\r\n                blockedBalances[_userId] -= _amount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Server can add bonuses to users, they will take from owner balance\r\n     */\r\n    function addBonus(uint32[] _userIds, uint64[] _amounts) external onlyServer {\r\n        require(_userIds.length == _amounts.length);\r\n\r\n        uint64 sum = 0;\r\n        for (uint32 i = 0; i < _amounts.length; i++)\r\n            sum += _amounts[i];\r\n\r\n        require(walletBalances[owner] >= sum);\r\n        for (i = 0; i < _userIds.length; i++) {\r\n            balances[_userIds[i]] += _amounts[i];\r\n            blockedBalances[_userIds[i]] += _amounts[i];\r\n        }\r\n\r\n        sentBonuses += sum;\r\n        walletBalances[owner] -= sum;\r\n    }\r\n\r\n    /**\r\n     * Dispatcher can change user balance\r\n     */\r\n    function addServiceReward(uint _amount) external onlyDispatcher {\r\n        serviceReward += _amount;\r\n    }\r\n\r\n    /**\r\n     * Owner withdraw service fee tokens \r\n     */\r\n    function serviceFeeWithdraw() external onlyOwner {\r\n        require(serviceReward > 0);\r\n        if (gameToken.transfer(msg.sender, serviceReward))\r\n            serviceReward = 0;\r\n    }\r\n\r\n    function viewSentBonuses() public view returns (uint) {\r\n        require(msg.sender == owner || msg.sender == server);\r\n        return sentBonuses;\r\n    }\r\n\r\n    function viewServiceReward() public view returns (uint) {\r\n        require(msg.sender == owner || msg.sender == server);\r\n        return serviceReward;\r\n    }\r\n}\r\n\r\n\r\ncontract BrokerManager is Ownable {\r\n\r\n\tstruct InvestTerm {\r\n\t\tuint64 amount;\r\n\t\tuint16 userFee;\r\n\t}\r\n\t/** server address **/\r\n\taddress public server;\r\n\t/** invesor fees **/\r\n\tmapping (uint32 => mapping (uint32 => InvestTerm)) public investTerms;\r\n\r\n\tmodifier onlyServer() {require(msg.sender == server); _;}\r\n\r\n\tfunction setServerAddress(address _newServerAddress) external onlyOwner {\r\n\t\tserver = _newServerAddress;\r\n\t}\r\n\r\n\t/**\r\n     * Create investition \r\n     */\r\n\tfunction invest(uint32 _playerId, uint32 _investorId, uint64 _amount, uint16 _userFee) external onlyServer {\r\n\t\trequire(_amount > 0 && _userFee > 0);\r\n\t\tinvestTerms[_investorId][_playerId] = InvestTerm(_amount, _userFee);\r\n\t}\r\n\r\n\t/**\r\n     * Delete investition \r\n     */\r\n\tfunction deleteInvest(uint32 _playerId, uint32 _investorId) external onlyServer {\r\n\t\tdelete investTerms[_investorId][_playerId];\r\n\t}\r\n}\r\n\r\n\r\ncontract Dispatcher is BrokerManager {\r\n\r\n    enum GameState {Initialized, Started, Finished, Cancelled}\r\n\r\n    struct GameTeam {\r\n        uint32 userId;\r\n        uint32 sponsorId;\r\n        uint64 prizeSum;\r\n        uint16 userFee;\r\n    }\r\n\r\n    struct Game {\r\n        GameState state;\r\n        uint64 entryFee;\r\n        uint32 serviceFee;\r\n        uint32 registrationDueDate;\r\n\r\n        bytes32 teamsHash;\r\n        bytes32 statsHash;\r\n\r\n        uint32 teamsNumber;\r\n        uint64 awardSent;\r\n    }\r\n\r\n    /** balance manager **/\r\n    BalanceManager public balanceManager;\r\n    /** player teams **/\r\n    mapping(uint32 => mapping(uint48 => GameTeam)) public teams;\r\n    /** games **/\r\n    mapping(uint32 => Game) public games;\r\n\r\n    constructor(address _balanceManagerAddress) public {\r\n        balanceManager = BalanceManager(_balanceManagerAddress);\r\n    }\r\n\r\n    /**\r\n     * Create new game\r\n     */\r\n    function createGame(\r\n        uint32 _gameId,\r\n        uint64 _entryFee,\r\n        uint32 _serviceFee,\r\n        uint32 _registrationDueDate\r\n    )\r\n    external\r\n    onlyServer\r\n    {\r\n        require(\r\n            games[_gameId].entryFee == 0\r\n            && _gameId > 0\r\n            && _entryFee > 0\r\n            && _registrationDueDate > 0\r\n        );\r\n        games[_gameId] = Game(GameState.Initialized, _entryFee, _serviceFee, _registrationDueDate, 0x0, 0x0, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Participate game\r\n     */\r\n    function participateGame(\r\n        uint32 _gameId,\r\n        uint32 _teamId,\r\n        uint32 _userId,\r\n        uint32 _sponsorId\r\n    )\r\n    external\r\n    onlyServer\r\n    {\r\n        Game storage game = games[_gameId];\r\n        require(\r\n            _gameId > 0\r\n            && game.state == GameState.Initialized\r\n            && _teamId > 0\r\n            && _userId > 0\r\n            && teams[_gameId][_teamId].userId == 0\r\n            && game.registrationDueDate > uint32(now)\r\n        );\r\n\r\n        uint16 userFee = 0;\r\n        if (_sponsorId > 0) {\r\n            require(balanceManager.balances(_sponsorId) >= game.entryFee && investTerms[_sponsorId][_userId].amount > game.entryFee);\r\n            balanceManager.spendUserBalance(_sponsorId, game.entryFee);\r\n            investTerms[_sponsorId][_userId].amount -= game.entryFee;\r\n            userFee = investTerms[_sponsorId][_userId].userFee;\r\n        }\r\n        else {\r\n            require(balanceManager.balances(_userId) >= game.entryFee);\r\n            balanceManager.spendUserBalance(_userId, game.entryFee);\r\n        }\r\n\r\n        teams[_gameId][_teamId] = GameTeam(_userId, _sponsorId, 0, userFee);\r\n        game.teamsNumber++;\r\n    }\r\n\r\n    /**\r\n     * Stop participate game, store teams hash\r\n     */\r\n    function startGame(uint32 _gameId, bytes32 _hash) external onlyServer {\r\n        Game storage game = games[_gameId];\r\n        require(\r\n            game.state == GameState.Initialized\r\n            && _gameId > 0\r\n        && _hash != 0x0\r\n        );\r\n\r\n        game.teamsHash = _hash;\r\n        game.state = GameState.Started;\r\n    }\r\n\r\n    /**\r\n     * Cancel game\r\n     */\r\n    function cancelGame(uint32 _gameId) external onlyServer {\r\n        Game storage game = games[_gameId];\r\n        require(\r\n            _gameId > 0\r\n            && game.state < GameState.Finished\r\n        );\r\n        game.state = GameState.Cancelled;\r\n    }\r\n\r\n    /**\r\n     * Finish game, store stats hash\r\n     */\r\n    function finishGame(uint32 _gameId, bytes32 _hash) external onlyServer {\r\n        Game storage game = games[_gameId];\r\n        require(\r\n            _gameId > 0\r\n            && game.state < GameState.Finished\r\n        && _hash != 0x0\r\n        );\r\n        game.statsHash = _hash;\r\n        game.state = GameState.Finished;\r\n    }\r\n\r\n    /**\r\n     * Reward winners\r\n     */\r\n    function winners(uint32 _gameId, uint32[] _teamIds, uint64[] _teamPrizes) external onlyServer {\r\n        Game storage game = games[_gameId];\r\n        require(game.state == GameState.Finished);\r\n\r\n        uint64 sumPrize = 0;\r\n        for (uint32 i = 0; i < _teamPrizes.length; i++)\r\n            sumPrize += _teamPrizes[i];\r\n\r\n        require(uint(sumPrize + game.awardSent) <= uint(game.entryFee * game.teamsNumber));\r\n\r\n        for (i = 0; i < _teamIds.length; i++) {\r\n            uint32 teamId = _teamIds[i];\r\n            GameTeam storage team = teams[_gameId][teamId];\r\n            uint32 userId = team.userId;\r\n\r\n            if (team.prizeSum == 0) {\r\n                if (team.sponsorId > 0) {\r\n                    uint64 userFee = team.userFee * _teamPrizes[i] / 100;\r\n                    balanceManager.addUserBalance(team.sponsorId, userFee);\r\n                    balanceManager.addUserBalance(userId, _teamPrizes[i] - userFee);\r\n                    team.prizeSum = _teamPrizes[i];\r\n                } else {\r\n                    balanceManager.addUserBalance(userId, _teamPrizes[i]);\r\n                    team.prizeSum = _teamPrizes[i];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refund money for cancelled game\r\n     */\r\n    function refundCancelledGame(uint32 _gameId, uint32[] _teamIds) external onlyServer {\r\n        Game storage game = games[_gameId];\r\n        require(game.state == GameState.Cancelled);\r\n\r\n        for (uint32 i = 0; i < _teamIds.length; i++) {\r\n            uint32 teamId = _teamIds[i];\r\n            GameTeam storage team = teams[_gameId][teamId];\r\n\r\n            require(teams[_gameId][teamId].prizeSum == 0);\r\n\r\n            if (team.prizeSum == 0) {\r\n                if (team.sponsorId > 0) {\r\n                    balanceManager.addUserBalance(team.sponsorId, game.entryFee);\r\n                } else {\r\n                    balanceManager.addUserBalance(team.userId, game.entryFee);\r\n                }\r\n                team.prizeSum = game.entryFee;\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint32\"},{\"name\":\"_teamId\",\"type\":\"uint32\"},{\"name\":\"_userId\",\"type\":\"uint32\"},{\"name\":\"_sponsorId\",\"type\":\"uint32\"}],\"name\":\"participateGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint32\"},{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint48\"}],\"name\":\"teams\",\"outputs\":[{\"name\":\"userId\",\"type\":\"uint32\"},{\"name\":\"sponsorId\",\"type\":\"uint32\"},{\"name\":\"prizeSum\",\"type\":\"uint64\"},{\"name\":\"userFee\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newServerAddress\",\"type\":\"address\"}],\"name\":\"setServerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint32\"},{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"finishGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint32\"},{\"name\":\"_entryFee\",\"type\":\"uint64\"},{\"name\":\"_serviceFee\",\"type\":\"uint32\"},{\"name\":\"_registrationDueDate\",\"type\":\"uint32\"}],\"name\":\"createGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint32\"},{\"name\":\"_teamIds\",\"type\":\"uint32[]\"},{\"name\":\"_teamPrizes\",\"type\":\"uint64[]\"}],\"name\":\"winners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"investTerms\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint64\"},{\"name\":\"userFee\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerId\",\"type\":\"uint32\"},{\"name\":\"_investorId\",\"type\":\"uint32\"},{\"name\":\"_amount\",\"type\":\"uint64\"},{\"name\":\"_userFee\",\"type\":\"uint16\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"entryFee\",\"type\":\"uint64\"},{\"name\":\"serviceFee\",\"type\":\"uint32\"},{\"name\":\"registrationDueDate\",\"type\":\"uint32\"},{\"name\":\"teamsHash\",\"type\":\"bytes32\"},{\"name\":\"statsHash\",\"type\":\"bytes32\"},{\"name\":\"teamsNumber\",\"type\":\"uint32\"},{\"name\":\"awardSent\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerId\",\"type\":\"uint32\"},{\"name\":\"_investorId\",\"type\":\"uint32\"}],\"name\":\"deleteInvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint32\"}],\"name\":\"cancelGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint32\"},{\"name\":\"_teamIds\",\"type\":\"uint32[]\"}],\"name\":\"refundCancelledGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"server\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_balanceManagerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Dispatcher","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000037e343f2cc245754595f1ae3656b460c35d636fb","Library":"","SwarmSource":"bzzr://ff17ddfd462079998d77105513693bf2bb25c1c6563a7075fb8ac3c815d10285"}]}