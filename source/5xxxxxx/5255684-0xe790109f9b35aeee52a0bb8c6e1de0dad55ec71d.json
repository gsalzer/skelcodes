{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n/*\r\n    ____\r\n   /\\' .\\    _____\r\n  /: \\___\\  / .  /\\\r\n  \\' / . / /____/..\\\r\n   \\/___/  \\'  '\\  /\r\n            \\'__'\\/\r\n\r\n Developer:  TechnicalRise\r\n \r\n*/\r\n\r\ncontract PHXReceivingContract {\r\n    /**\r\n     * @dev Standard ERC223 function that will handle incoming token transfers.\r\n     *\r\n     * @param _from  Token sender address.\r\n     * @param _value Amount of tokens.\r\n     * @param _data  Transaction metadata.\r\n     */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\ncontract PHXInterface {\r\n    function balanceOf(address who) public view returns (uint);\r\n    function transfer(address _to, uint _value) public returns (bool);\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool);\r\n}\r\n\r\ncontract PHXFlip is PHXReceivingContract {\r\n\r\n    address public constant PHXTKNADDR = 0x14b759A158879B133710f4059d32565b4a66140C;\r\n    PHXInterface public PHXTKN;\r\n\r\n\tfunction PHXFlip() public {\r\n\t    PHXTKN = PHXInterface(PHXTKNADDR); // Initialize the PHX Contract\r\n\t}\r\n\t\r\n\tfunction tokenFallback(address _from, uint _value, bytes _data) public {\r\n\t  // Note that msg.sender is the Token Contract Address\r\n\t  // and \"_from\" is the sender of the tokens\r\n\t  require(_humanSender(_from)); // Check that this is a non-contract sender\r\n\t  require(_phxToken(msg.sender));\r\n\t  \r\n\t  uint _possibleWinnings = 2 * _value;\r\n\t  // This doesn't require the PHX Balance to be greater than double the bet\r\n\t  // So check the contract's PHX Balance before wagering!\r\n\t  if(_prand(2) == 1) { // i.e. if it's \"heads\"\r\n\t      if(PHXTKN.balanceOf(this) >= _possibleWinnings) {\r\n\t          PHXTKN.transfer(_from, _possibleWinnings);\r\n\t      } else {\r\n\t          PHXTKN.transfer(_from,PHXTKN.balanceOf(this));\r\n\t      }\r\n\t  } else {\r\n\t      // And if you don't win, you just don't win, and it keeps your money\r\n\t  }\r\n    }\r\n    \r\n    // This is a supercheap psuedo-random number generator\r\n    // that relies on the fact that \"who\" will mine and \"when\" they will\r\n    // mine is random.  This is obviously vulnerable to \"inside the block\"\r\n    // attacks where someone writes a contract mined in the same block\r\n    // and calls this contract from it -- but we don't accept transactions\r\n    // from foreign contracts, lessening that risk\r\n    function _prand(uint _modulo) private view returns (uint) {\r\n        require((1 < _modulo) && (_modulo <= 10000)); // Keep it greater than 0, less than 10K.\r\n        uint seed1 = uint(block.coinbase); // Get Miner's Address\r\n        uint seed2 = now; // Get the timestamp\r\n        return uint(keccak256(seed1, seed2)) % _modulo;\r\n    }\r\n    \r\n    function _phxToken(address _tokenContract) private pure returns (bool) {\r\n        return _tokenContract == PHXTKNADDR; // Returns \"true\" of this is the PHX Token Contract\r\n    }\r\n    \r\n    // Determine if the \"_from\" address is a contract\r\n    function _humanSender(address _from) private view returns (bool) {\r\n      uint codeLength;\r\n      assembly {\r\n          codeLength := extcodesize(_from)\r\n      }\r\n      return (codeLength == 0); // If this is \"true\" sender is most likely  a Wallet\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PHXTKNADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PHXTKN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"PHXFlip","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7017c09f99dfbe9656b9644683cb76457855613f72e689e68697b8e40b70648d"}]}