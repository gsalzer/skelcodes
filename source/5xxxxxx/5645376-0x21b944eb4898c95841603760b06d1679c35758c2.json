{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\ncontract SafeMath {\r\n    function safeMul(uint a, uint b) pure internal returns(uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint a, uint b) pure  internal returns(uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) pure internal returns(uint) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n    \r\n    function safeDiv(uint a, uint b) pure internal returns (uint) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n     assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n}\r\ncontract ERC20 {\r\n  uint256 public totalsupply;\r\n  function totalSupply() public constant returns(uint256 _totalSupply);\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool ok);\r\n  function approve(address spender, uint256 value) public returns (bool ok);\r\n  function transfer(address to, uint256 value) public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Mari is ERC20, SafeMath\r\n{\r\n    // Name of the token\r\n    string public constant name = \"Mari\";\r\n\r\n    // Symbol of token\r\n    string public constant symbol = \"MAR\";\r\n\r\n    uint8 public constant decimals = 18;\r\n    uint public totalsupply = 2000000 * 10 ** 18; //\r\n    address public owner;\r\n    uint256 public _price_tokn = 483 ;\r\n    uint256 no_of_tokens;\r\n    bool stopped = true;\r\n    uint256 startdate;\r\n    uint256 enddate;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    \r\n     enum Stages {\r\n        NOTSTARTED,\r\n        ICO,\r\n        PAUSED,\r\n        ENDED\r\n    }\r\n    Stages public stage;\r\n    \r\n    modifier atStage(Stages _stage) {\r\n        if (stage != _stage)\r\n            // Contract not in expected state\r\n            revert();\r\n        _;\r\n    }\r\n    \r\n     modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n    function Mari() public\r\n    {\r\n        owner = msg.sender;\r\n        balances[owner] = 1750000 * 10 **18;\r\n        balances[address(this)] = 250000 *10**18;\r\n        stage = Stages.NOTSTARTED;\r\n        Transfer(0, owner, balances[owner]);\r\n        Transfer(0, owner, balances[address(this)]);\r\n    }\r\n  \r\n    function () public payable atStage(Stages.ICO)\r\n    {\r\n        require(!stopped && msg.sender != owner && now <= enddate);\r\n        no_of_tokens = safeMul(msg.value , _price_tokn);\r\n        transferTokens(msg.sender,no_of_tokens);\r\n    }\r\n    \r\n     function start_ICO() public onlyOwner \r\n      {\r\n          stage = Stages.ICO;\r\n          stopped = false;\r\n          startdate = now;\r\n          enddate = startdate + 30 days;\r\n     }\r\n    \r\n    // called by the owner, pause ICO\r\n    function StopICO() external onlyOwner {\r\n        stopped = true;\r\n        stage = Stages.PAUSED;\r\n    }\r\n\r\n    // called by the owner , resumes ICO\r\n    function releaseICO() external onlyOwner {\r\n        stopped = false;\r\n        stage = Stages.ICO;\r\n    }\r\n    \r\n     function end_ICO() external onlyOwner\r\n     {\r\n         stage = Stages.ENDED;\r\n         totalsupply = safeSub(totalsupply , balances[address(this)]);\r\n         balances[address(this)] = 0;\r\n         Transfer(address(this), 0 , balances[address(this)]);\r\n         \r\n     }\r\n\r\n\r\n    function totalSupply() public constant returns(uint256 _totalSupply)\r\n    {\r\n        return totalsupply;\r\n    }\r\n    \r\n    function balanceOf(address sender) public constant returns (uint256)\r\n    {\r\n        return balances[sender];\r\n    }\r\n    \r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) public returns(bool success) {\r\n        if (balances[_from] >= _amount &&\r\n            allowed[_from][msg.sender] >= _amount &&\r\n            _amount > 0 &&\r\n            balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount) public returns(bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n      // Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _amount) public returns(bool success) {\r\n        if (balances[msg.sender] >= _amount &&\r\n            _amount > 0 &&\r\n            balances[_to] + _amount > balances[_to]) {\r\n         \r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n\r\n          \r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n          // Transfer the balance from owner's account to another account\r\n    function transferTokens(address _to, uint256 _amount) private returns(bool success) {\r\n        if (balances[address(this)] >= _amount &&\r\n            _amount > 0 &&\r\n            balances[_to] + _amount > balances[_to]) {\r\n         \r\n            balances[address(this)] -= _amount;\r\n            balances[_to] += _amount;\r\n            Transfer(address(this), _to, _amount);\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n     function drain() external onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n    \r\n    \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"end_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_price_tokn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Mari","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://88e9f8e0dab69afb7380e9c5860acdf7006b229d95648ce6be1432df19aa7ccf"}]}