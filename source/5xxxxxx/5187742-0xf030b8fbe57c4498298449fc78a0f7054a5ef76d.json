{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC721 interface\r\n * @dev see https://github.com/ethereum/eips/issues/721\r\n */\r\ncontract ERC721 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  mapping (address => bool) public admins;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n    admins[owner] = true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  modifier onlyAdmin() {\r\n    require(admins[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  function changeAdmin(address _newAdmin, bool _approved) onlyOwner public {\r\n    admins[_newAdmin] = _approved;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC721Token\r\n * Generic implementation for the required functionality of the ERC721 standard\r\n */\r\ncontract ArkToken is ERC721, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // Total amount of tokens\r\n  uint256 private totalTokens;\r\n  uint256 public developerCut;\r\n\r\n  // Animal Data\r\n  mapping (uint256 => Animal) public arkData;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) private tokenOwner;\r\n\r\n  // mom ID => baby ID\r\n  mapping (uint256 => uint256) public babies;\r\n  \r\n  // baby ID => parents\r\n  mapping (uint256 => uint256[2]) public babyMommas;\r\n  \r\n  // token ID => their baby-makin' partner\r\n  mapping (uint256 => uint256) public mates;\r\n\r\n  // baby ID => sum price of mom and dad needed to make this babby\r\n  mapping (uint256 => uint256) public babyMakinPrice;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) private tokenApprovals;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) private ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) private ownedTokensIndex;\r\n\r\n  // Balances from % payouts.\r\n  mapping (address => uint256) public birtherBalances; \r\n\r\n  // Events\r\n  event Purchase(uint256 indexed _tokenId, address indexed _buyer, address indexed _seller, uint256 _purchasePrice);\r\n  event Birth(address indexed _birther, uint256 indexed _mom, uint256 _dad, uint256 indexed _baby);\r\n\r\n  // Purchasing Caps for Determining Next Pool Cut\r\n  uint256 private firstCap  = 0.5 ether;\r\n  uint256 private secondCap = 1.0 ether;\r\n  uint256 private thirdCap  = 1.5 ether;\r\n  uint256 private finalCap  = 3.0 ether;\r\n\r\n  // Struct to store Animal Data\r\n  struct Animal {\r\n    uint256 price;         // Current price of the item.\r\n    uint256 lastPrice;     // Last price needed to calculate whether baby-makin' limit has made it\r\n    address owner;         // Current owner of the item.\r\n    address birther;       // Address that birthed the animal.\r\n    uint256 birtherPct;    // Percent that birther will get for sales. The actual percent is this / 10.\r\n    uint8 gender;          // Gender of this animal: 0 for male, 1 for female.\r\n  }\r\n\r\n  function createToken(uint256 _tokenId, uint256 _startingPrice, uint256 _cut, address _owner, uint8 _gender) onlyAdmin() public {\r\n    // make sure price > 0\r\n    require(_startingPrice > 0);\r\n    // make sure token hasn't been used yet\r\n    require(arkData[_tokenId].price == 0);\r\n    \r\n    // create new token\r\n    Animal storage curAnimal = arkData[_tokenId];\r\n\r\n    curAnimal.owner = _owner;\r\n    curAnimal.price = _startingPrice;\r\n    curAnimal.lastPrice = _startingPrice;\r\n    curAnimal.gender = _gender;\r\n    curAnimal.birther = _owner;\r\n    curAnimal.birtherPct = _cut;\r\n\r\n    // mint new token\r\n    _mint(_owner, _tokenId);\r\n  }\r\n\r\n  function createMultiple (uint256[] _itemIds, uint256[] _prices, uint256[] _cuts, address[] _owners, uint8[] _genders) onlyAdmin() external {\r\n    for (uint256 i = 0; i < _itemIds.length; i++) {\r\n      createToken(_itemIds[i], _prices[i], _cuts[i], _owners[i], _genders[i]);\r\n    }\r\n  }\r\n\r\n  function createBaby(uint256 _dad, uint256 _mom, uint256 _baby, uint256 _price) public onlyAdmin() \r\n  {\r\n      mates[_mom] = _dad;\r\n      mates[_dad] = _mom;\r\n      babies[_mom] = _baby;\r\n      babyMommas[_baby] = [_mom, _dad];\r\n      babyMakinPrice[_baby] = _price;\r\n  }\r\n  \r\n  function createBabies(uint256[] _dads, uint256[] _moms, uint256[] _babies, uint256[] _prices) external onlyAdmin() {\r\n      require(_moms.length == _babies.length && _babies.length == _dads.length);\r\n      for (uint256 i = 0; i < _moms.length; i++) {\r\n          createBaby(_dads[i], _moms[i], _babies[i], _prices[i]);\r\n      }\r\n  }\r\n\r\n  /**\r\n  * @dev Determines next price of token\r\n  * @param _price uint256 ID of current price\r\n  */\r\n  function getNextPrice (uint256 _price) private view returns (uint256 _nextPrice) {\r\n    if (_price < firstCap) {\r\n      return _price.mul(150).div(95);\r\n    } else if (_price < secondCap) {\r\n      return _price.mul(135).div(96);\r\n    } else if (_price < thirdCap) {\r\n      return _price.mul(125).div(97);\r\n    } else if (_price < finalCap) {\r\n      return _price.mul(117).div(97);\r\n    } else {\r\n      return _price.mul(115).div(98);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Purchase animal from previous owner\r\n  * @param _tokenId uint256 of token\r\n  */\r\n  function buyToken(uint256 _tokenId) public \r\n    payable\r\n    isNotContract(msg.sender)\r\n  {\r\n\r\n    // get data from storage\r\n    Animal storage animal = arkData[_tokenId];\r\n    uint256 price = animal.price;\r\n    address oldOwner = animal.owner;\r\n    address newOwner = msg.sender;\r\n    uint256 excess = msg.value.sub(price);\r\n\r\n    // revert checks\r\n    require(price > 0);\r\n    require(msg.value >= price);\r\n    require(oldOwner != msg.sender);\r\n    require(oldOwner != address(0) && oldOwner != address(1)); // We're gonna put unbirthed babbies at 0x1\r\n    \r\n    uint256 totalCut = price.mul(4).div(100);\r\n    \r\n    uint256 birtherCut = price.mul(animal.birtherPct).div(1000); // birtherPct is % * 10 so we / 1000\r\n    birtherBalances[animal.birther] = birtherBalances[animal.birther].add(birtherCut);\r\n    \r\n    uint256 devCut = totalCut.sub(birtherCut);\r\n    developerCut = developerCut.add(devCut);\r\n\r\n    transferToken(oldOwner, newOwner, _tokenId);\r\n\r\n    // raise event\r\n    Purchase(_tokenId, newOwner, oldOwner, price);\r\n\r\n    // set new prices\r\n    animal.price = getNextPrice(price);\r\n    animal.lastPrice = price;\r\n\r\n    // Transfer payment to old owner minus the developer's and birther's cut.\r\n    oldOwner.transfer(price.sub(totalCut));\r\n    // Send refund to owner if needed\r\n    if (excess > 0) {\r\n      newOwner.transfer(excess);\r\n    }\r\n    \r\n    checkBirth(_tokenId);\r\n  }\r\n  \r\n  /**\r\n   * @dev Check to see whether a newly purchased animal should give birth.\r\n   * @param _tokenId Unique ID of the newly transferred animal.\r\n  */\r\n  function checkBirth(uint256 _tokenId)\r\n    internal\r\n  {\r\n    uint256 mom = 0;\r\n    \r\n    // gender 0 = male, 1 = female\r\n    if (arkData[_tokenId].gender == 0) {\r\n      mom = mates[_tokenId];\r\n    } else {\r\n      mom = _tokenId;\r\n    }\r\n    \r\n    if (babies[mom] > 0) {\r\n      if (tokenOwner[mates[_tokenId]] == msg.sender) {\r\n        // Check if the sum price to make a baby for these mates has been passed.\r\n        uint256 sumPrice = arkData[_tokenId].lastPrice + arkData[mates[_tokenId]].lastPrice;\r\n        if (sumPrice >= babyMakinPrice[babies[mom]]) {\r\n          autoBirth(babies[mom]);\r\n          \r\n          Birth(msg.sender, mom, mates[mom], babies[mom]);\r\n          babyMakinPrice[babies[mom]] = 0;\r\n          babies[mom] = 0;\r\n          mates[mates[mom]] = 0;\r\n          mates[mom] = 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @dev Internal function to birth a baby if an owner has both mom and dad.\r\n   * @param _baby Token ID of the baby to birth.\r\n  */\r\n  function autoBirth(uint256 _baby)\r\n    internal\r\n  {\r\n    Animal storage animal = arkData[_baby];\r\n    animal.birther = msg.sender;\r\n    transferToken(animal.owner, msg.sender, _baby);\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer Token from Previous Owner to New Owner\r\n  * @param _from previous owner address\r\n  * @param _to new owner address\r\n  * @param _tokenId uint256 ID of token\r\n  */\r\n  function transferToken(address _from, address _to, uint256 _tokenId) internal {\r\n    // check token exists\r\n    require(tokenExists(_tokenId));\r\n\r\n    // make sure previous owner is correct\r\n    require(arkData[_tokenId].owner == _from);\r\n\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n\r\n    // clear approvals linked to this token\r\n    clearApproval(_from, _tokenId);\r\n\r\n    // remove token from previous owner\r\n    removeToken(_from, _tokenId);\r\n\r\n    // update owner and add token to new owner\r\n    addToken(_to, _tokenId);\r\n\r\n   //raise event\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Withdraw dev's cut\r\n  */\r\n  function withdraw(uint256 _amount) public onlyAdmin() {\r\n    if (_amount == 0) { \r\n      _amount = developerCut; \r\n    }\r\n    developerCut = developerCut.sub(_amount);\r\n    owner.transfer(_amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw anyone's birther balance.\r\n   * @param _beneficiary The person whose balance shall be sent to them.\r\n  */\r\n  function withdrawBalance(address _beneficiary) external {\r\n    uint256 payout = birtherBalances[_beneficiary];\r\n    birtherBalances[_beneficiary] = 0;\r\n    _beneficiary.transfer(payout);\r\n  }\r\n\r\n  /**\r\n   * @dev Return all relevant data for an animal.\r\n   * @param _tokenId Unique animal ID.\r\n  */\r\n  function getArkData (uint256 _tokenId) external view \r\n  returns (address _owner, uint256 _price, uint256 _nextPrice, uint256 _mate, \r\n           address _birther, uint8 _gender, uint256 _baby, uint256 _babyPrice) \r\n  {\r\n    Animal memory animal = arkData[_tokenId];\r\n    uint256 baby;\r\n    if (animal.gender == 1) baby = babies[_tokenId];\r\n    else baby = babies[mates[_tokenId]];\r\n    \r\n    return (animal.owner, animal.price, getNextPrice(animal.price), mates[_tokenId], \r\n            animal.birther, animal.gender, baby, babyMakinPrice[baby]);\r\n  }\r\n  \r\n  /**\r\n   * @dev Get sum price required to birth baby.\r\n   * @param _babyId Unique baby Id.\r\n  */\r\n  function getBabyMakinPrice(uint256 _babyId) external view\r\n  returns (uint256 price)\r\n  {\r\n    price = babyMakinPrice[_babyId];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the parents of a certain baby.\r\n   * @param _babyId Unique baby Id.\r\n  */\r\n  function getBabyMommas(uint256 _babyId) external view\r\n  returns (uint256[2] parents)\r\n  {\r\n    parents = babyMommas[_babyId];\r\n  }\r\n  \r\n  /**\r\n   * @dev Frontend can use this to find the birther percent for animal.\r\n   * @param _tokenId The unique id for the animal.\r\n  */\r\n  function getBirthCut(uint256 _tokenId) external view\r\n  returns (uint256 birthCut)\r\n  {\r\n    birthCut = arkData[_tokenId].birtherPct;\r\n  }\r\n\r\n  /**\r\n   * @dev Check the birther balance of a certain address.\r\n   * @param _owner The address to check the balance of.\r\n  */\r\n  function checkBalance(address _owner) external view returns (uint256) {\r\n    return birtherBalances[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Determines if token exists by checking it's price\r\n  * @param _tokenId uint256 ID of token\r\n  */\r\n  function tokenExists (uint256 _tokenId) public view returns (bool _exists) {\r\n    return arkData[_tokenId].price > 0;\r\n  }\r\n\r\n  /**\r\n  * @dev Guarantees msg.sender is owner of the given token\r\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n  */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Guarantees msg.sender is not a contract\r\n  * @param _buyer address of person buying animal\r\n  */\r\n  modifier isNotContract(address _buyer) {\r\n    uint size;\r\n    assembly { size := extcodesize(_buyer) }\r\n    require(size == 0);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Gets the total amount of tokens stored by the contract\r\n  * @return uint256 representing the total amount of tokens\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalTokens;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address\r\n  * @param _owner address to query the balance of\r\n  * @return uint256 representing the amount owned by the passed address\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return ownedTokens[_owner].length;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the list of tokens owned by a given address\r\n  * @param _owner address to query the tokens of\r\n  * @return uint256[] representing the list of tokens owned by the passed address\r\n  */\r\n  function tokensOf(address _owner) public view returns (uint256[]) {\r\n    return ownedTokens[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the owner of the specified token ID\r\n  * @param _tokenId uint256 ID of the token to query the owner of\r\n  * @return owner address currently marked as the owner of the given token ID\r\n  */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address to take ownership of a given token ID\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved to take ownership of the given token ID\r\n   */\r\n  function approvedFor(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfers the ownership of a given token ID to another address\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Approves another address to claim for the ownership of the given token ID\r\n  * @param _to address to be approved for the given token ID\r\n  * @param _tokenId uint256 ID of the token to be approved\r\n  */\r\n  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Claims the ownership of a given token ID\r\n  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\r\n  */\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    require(isApprovedFor(msg.sender, _tokenId));\r\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether the msg.sender is approved for the given token ID or not\r\n   * This function is not private so it can be extended in further implementations like the operatable ERC721\r\n   * @param _owner address of the owner to query the approval of\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return bool whether the msg.sender is approved for the given token ID or not\r\n   */\r\n  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\r\n    return approvedFor(_tokenId) == _owner;\r\n  }\r\n  \r\n  /**\r\n  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\r\n  * @param _from address which you want to send tokens from\r\n  * @param _to address which you want to transfer the token to\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal isNotContract(_to) {\r\n    require(_to != address(0));\r\n    require(_to != ownerOf(_tokenId));\r\n    require(ownerOf(_tokenId) == _from);\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeToken(_from, _tokenId);\r\n    addToken(_to, _tokenId);\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval of a given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApproval(address _owner, uint256 _tokenId) private {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    tokenApprovals[_tokenId] = 0;\r\n    Approval(_owner, 0, _tokenId);\r\n  }\r\n\r\n\r\n    /**\r\n  * @dev Mint token function\r\n  * @param _to The address that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    addToken(_to, _tokenId);\r\n    Transfer(0x0, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addToken(address _to, uint256 _tokenId) private {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    arkData[_tokenId].owner = _to;\r\n    \r\n    uint256 length = balanceOf(_to);\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n    totalTokens = totalTokens.add(1);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeToken(address _from, uint256 _tokenId) private {\r\n    require(ownerOf(_tokenId) == _from);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = balanceOf(_from).sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    tokenOwner[_tokenId] = 0;\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n    totalTokens = totalTokens.sub(1);\r\n  }\r\n\r\n  function name() public pure returns (string _name) {\r\n    return \"EthersArk Token\";\r\n  }\r\n\r\n  function symbol() public pure returns (string _symbol) {\r\n    return \"EARK\";\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"name\":\"_exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"birtherBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"babyMakinPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"name\":\"_cuts\",\"type\":\"uint256[]\"},{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_genders\",\"type\":\"uint8[]\"}],\"name\":\"createMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arkData\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"lastPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"birther\",\"type\":\"address\"},{\"name\":\"birtherPct\",\"type\":\"uint256\"},{\"name\":\"gender\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_cut\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_gender\",\"type\":\"uint8\"}],\"name\":\"createToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_babyId\",\"type\":\"uint256\"}],\"name\":\"getBabyMommas\",\"outputs\":[{\"name\":\"parents\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dads\",\"type\":\"uint256[]\"},{\"name\":\"_moms\",\"type\":\"uint256[]\"},{\"name\":\"_babies\",\"type\":\"uint256[]\"},{\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"createBabies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_babyId\",\"type\":\"uint256\"}],\"name\":\"getBabyMakinPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getBirthCut\",\"outputs\":[{\"name\":\"birthCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"babies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dad\",\"type\":\"uint256\"},{\"name\":\"_mom\",\"type\":\"uint256\"},{\"name\":\"_baby\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createBaby\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getArkData\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"name\":\"_mate\",\"type\":\"uint256\"},{\"name\":\"_birther\",\"type\":\"address\"},{\"name\":\"_gender\",\"type\":\"uint8\"},{\"name\":\"_baby\",\"type\":\"uint256\"},{\"name\":\"_babyPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"babyMommas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_purchasePrice\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_birther\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_mom\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_dad\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_baby\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ArkToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e04c1e69ee22ff9c80a468e1815bdbb1fe8defd4421c95fab94a19cd939d1eaa"}]}