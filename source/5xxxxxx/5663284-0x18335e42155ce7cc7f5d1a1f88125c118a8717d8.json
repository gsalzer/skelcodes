{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: contracts/interfaces/ContractManagerInterface.sol\r\n\r\n/**\r\n * @title Contract Manager Interface\r\n * @author Bram Hoven\r\n * @notice Interface for communicating with the contract manager\r\n */\r\ninterface ContractManagerInterface {\r\n  /**\r\n   * @notice Triggered when contract is added\r\n   * @param _address Address of the new contract\r\n   * @param _contractName Name of the new contract\r\n   */\r\n  event ContractAdded(address indexed _address, string _contractName);\r\n\r\n  /**\r\n   * @notice Triggered when contract is removed\r\n   * @param _contractName Name of the contract that is removed\r\n   */\r\n  event ContractRemoved(string _contractName);\r\n\r\n  /**\r\n   * @notice Triggered when contract is updated\r\n   * @param _oldAddress Address where the contract used to be\r\n   * @param _newAddress Address where the new contract is deployed\r\n   * @param _contractName Name of the contract that has been updated\r\n   */\r\n  event ContractUpdated(address indexed _oldAddress, address indexed _newAddress, string _contractName);\r\n\r\n  /**\r\n   * @notice Triggered when authorization status changed\r\n   * @param _address Address who will gain or lose authorization to _contractName\r\n   * @param _authorized Boolean whether or not the address is authorized\r\n   * @param _contractName Name of the contract\r\n   */\r\n  event AuthorizationChanged(address indexed _address, bool _authorized, string _contractName);\r\n\r\n  /**\r\n   * @notice Check whether the accessor is authorized to access that contract\r\n   * @param _contractName Name of the contract that is being accessed\r\n   * @param _accessor Address who wants to access that contract\r\n   */\r\n  function authorize(string _contractName, address _accessor) external view returns (bool);\r\n\r\n  /**\r\n   * @notice Add a new contract to the manager\r\n   * @param _contractName Name of the new contract\r\n   * @param _address Address of the new contract\r\n   */\r\n  function addContract(string _contractName, address _address) external;\r\n\r\n  /**\r\n   * @notice Get a contract by its name\r\n   * @param _contractName Name of the contract\r\n   */\r\n  function getContract(string _contractName) external view returns (address _contractAddress);\r\n\r\n  /**\r\n   * @notice Remove an existing contract\r\n   * @param _contractName Name of the contract that will be removed\r\n   */\r\n  function removeContract(string _contractName) external;\r\n\r\n  /**\r\n   * @notice Update an existing contract (changing the address)\r\n   * @param _contractName Name of the existing contract\r\n   * @param _newAddress Address where the new contract is deployed\r\n   */\r\n  function updateContract(string _contractName, address _newAddress) external;\r\n\r\n  /**\r\n   * @notice Change whether an address is authorized to use a specific contract or not\r\n   * @param _contractName Name of the contract to which the accessor will gain authorization or not\r\n   * @param _authorizedAddress Address which will have its authorisation status changed\r\n   * @param _authorized Boolean whether the address will have access or not\r\n   */\r\n  function setAuthorizedContract(string _contractName, address _authorizedAddress, bool _authorized) external;\r\n}\r\n\r\n// File: contracts/interfaces/MemberManagerInterface.sol\r\n\r\n/**\r\n * @title Member Manager Interface\r\n * @author Bram Hoven\r\n */\r\ninterface MemberManagerInterface {\r\n  /**\r\n   * @notice Triggered when member is added\r\n   * @param member Address of newly added member\r\n   */\r\n  event MemberAdded(address indexed member);\r\n\r\n  /**\r\n   * @notice Triggered when member is removed\r\n   * @param member Address of removed member\r\n   */\r\n  event MemberRemoved(address indexed member);\r\n\r\n  /**\r\n   * @notice Triggered when member has bought tokens\r\n   * @param member Address of member\r\n   * @param tokensBought Amount of tokens bought\r\n   * @param tokens Amount of total tokens bought by member\r\n   */\r\n  event TokensBought(address indexed member, uint256 tokensBought, uint256 tokens);\r\n\r\n  /**\r\n   * @notice Remove a member from this contract\r\n   * @param _member Address of member that will be removed\r\n   */\r\n  function removeMember(address _member) external;\r\n\r\n  /**\r\n   * @notice Add to the amount this member has bought\r\n   * @param _member Address of the corresponding member\r\n   * @param _amountBought Amount of tokens this member has bought\r\n   */\r\n  function addAmountBoughtAsMember(address _member, uint256 _amountBought) external;\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/MemberManager.sol\r\n\r\n/**\r\n * @title Member Manager\r\n * @author Bram Hoven\r\n * @notice Stores a list of member which can be used for something like authorization\r\n */\r\ncontract MemberManager is MemberManagerInterface {\r\n  using SafeMath for uint256;\r\n  \r\n  // Map containing every member\r\n  mapping(address => bool) public members;\r\n  // Map containing amount of tokens bought\r\n  mapping(address => uint256) public bought;\r\n  // List containing all members\r\n  address[] public memberKeys;\r\n\r\n  // Name of this contract\r\n  string public contractName;\r\n  // Contract Manager\r\n  ContractManagerInterface internal contractManager;\r\n\r\n  /**\r\n   * @notice Triggered when member is added\r\n   * @param member Address of newly added member\r\n   */\r\n  event MemberAdded(address indexed member);\r\n\r\n  /**\r\n   * @notice Triggered when member is removed\r\n   * @param member Address of removed member\r\n   */\r\n  event MemberRemoved(address indexed member);\r\n\r\n  /**\r\n   * @notice Triggered when member has bought tokens\r\n   * @param member Address of member\r\n   * @param tokensBought Amount of tokens bought\r\n   * @param tokens Amount of total tokens bought by member\r\n   */\r\n  event TokensBought(address indexed member, uint256 tokensBought, uint256 tokens);\r\n\r\n  /**\r\n   * @notice Constructor for creating member manager\r\n   * @param _contractName Name of this contract for lookup in contract manager\r\n   * @param _contractManager Address where the contract manager is located\r\n   */\r\n  constructor(string _contractName, address _contractManager) public {\r\n    contractName = _contractName;\r\n    contractManager = ContractManagerInterface(_contractManager);\r\n  }\r\n\r\n  /**\r\n   * @notice Add a member to this contract\r\n   * @param _member Address of the new member\r\n   */\r\n  function _addMember(address _member) internal {\r\n    require(contractManager.authorize(contractName, msg.sender));\r\n\r\n    members[_member] = true;\r\n    memberKeys.push(_member);\r\n\r\n    emit MemberAdded(_member);\r\n  }\r\n\r\n  /**\r\n   * @notice Remove a member from this contract\r\n   * @param _member Address of member that will be removed\r\n   */\r\n  function removeMember(address _member) external {\r\n    require(contractManager.authorize(contractName, msg.sender));\r\n    require(members[_member] == true);\r\n\r\n    delete members[_member];\r\n\r\n    for (uint256 i = 0; i < memberKeys.length; i++) {\r\n      if (memberKeys[i] == _member) {\r\n        delete memberKeys[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    emit MemberRemoved(_member);\r\n  }\r\n\r\n  /**\r\n   * @notice Add to the amount this member has bought\r\n   * @param _member Address of the corresponding member\r\n   * @param _amountBought Amount of tokens this member has bought\r\n   */\r\n  function addAmountBoughtAsMember(address _member, uint256 _amountBought) external {\r\n    require(contractManager.authorize(contractName, msg.sender));\r\n    require(_amountBought != 0);\r\n\r\n    if(!members[_member]) {\r\n      _addMember(_member);\r\n    }\r\n\r\n    bought[_member] = bought[_member].add(_amountBought);\r\n\r\n    emit TokensBought(_member, _amountBought, bought[_member]);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"},{\"name\":\"_amountBought\",\"type\":\"uint256\"}],\"name\":\"addAmountBoughtAsMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"memberKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractName\",\"type\":\"string\"},{\"name\":\"_contractManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"}]","ContractName":"MemberManager","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000087986d21a28fc185a16f15c7e0d480505f28c934000000000000000000000000000000000000000000000000000000000000000957686974656c6973740000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://e2c7f3886c19c87af4308ccc3b6ca8efff9a1280cc2ed376e91318055ebb2801"}]}