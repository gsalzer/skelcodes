{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n// Made By PinkCherry - insanityskan@gmail.com - https://blog.naver.com/soolmini\r\n\r\nlibrary SafeMath\r\n{\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract OwnerHelper\r\n{\r\n    address public owner;\r\n\r\n    event OwnerTransferPropose(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner\r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address _to) onlyOwner public\r\n    {\r\n        require(_to != owner);\r\n        require(_to != address(0x0));\r\n        owner = _to;\r\n        emit OwnerTransferPropose(owner, _to);\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Interface\r\n{\r\n    event Transfer( address indexed _from, address indexed _to, uint _value);\r\n    event Approval( address indexed _owner, address indexed _spender, uint _value);\r\n    \r\n    function totalSupply() constant public returns (uint _supply);\r\n    function balanceOf( address _who ) public view returns (uint _value);\r\n    function transfer( address _to, uint _value) public returns (bool _success);\r\n    function approve( address _spender, uint _value ) public returns (bool _success);\r\n    function allowance( address _owner, address _spender ) public view returns (uint _allowance);\r\n    function transferFrom( address _from, address _to, uint _value) public returns (bool _success);\r\n}\r\n\r\ncontract GemmyCoin is ERC20Interface, OwnerHelper\r\n{\r\n    using SafeMath for uint;\r\n    \r\n    string public name;\r\n    uint public decimals;\r\n    string public symbol;\r\n    address public wallet;\r\n\r\n    uint public totalSupply;\r\n    \r\n    uint constant public saleSupply = 4000000000 * E18;\r\n    uint constant public rewardPoolSupply = 2500000000 * E18;\r\n    uint constant public foundationSupply = 500000000 * E18;\r\n    uint constant public gemmyMusicSupply = 1500000000 * E18;\r\n    uint constant public advisorSupply = 700000000 * E18;\r\n    uint constant public mktSupply = 800000000 * E18;\r\n    uint constant public maxSupply = 10000000000 * E18;\r\n    \r\n    uint public coinIssuedSale = 0;\r\n    uint public coinIssuedRewardPool = 0;\r\n    uint public coinIssuedFoundation = 0;\r\n    uint public coinIssuedGemmyMusic = 0;\r\n    uint public coinIssuedAdvisor = 0;\r\n    uint public coinIssuedMkt = 0;\r\n    uint public coinIssuedTotal = 0;\r\n    uint public coinIssuedBurn = 0;\r\n    \r\n    uint public saleEtherReceived = 0;\r\n\r\n    uint constant private E18 = 1000000000000000000;\r\n    uint constant private ethPerCoin = 35000;\r\n    \r\n    uint private UTC9 = 9 * 60 * 60;\r\n    uint public privateSaleDate = 1526223600 + UTC9;        // 2018-05-14 00:00:00 (UTC + 9)\r\n    uint public privateSaleEndDate = 1527951600 + UTC9;     // 2018-06-03 00:00:00 (UTC + 9)\r\n    \r\n    uint public firstPreSaleDate = 1528038000 + UTC9;       // 2018-06-04 00:00:00 (UTC + 9)\r\n    uint public firstPreSaleEndDate = 1528988400 + UTC9;    // 2018-06-15 00:00:00 (UTC + 9)\r\n    \r\n    uint public secondPreSaleDate = 1529852400 + UTC9;      // 2018-06-25 00:00:00 (UTC + 9)\r\n    uint public secondPreSaleEndDate = 1530802800 + UTC9;   // 2018-07-06 00:00:00 (UTC + 9)\r\n    \r\n    uint public firstCrowdSaleDate = 1531062000 + UTC9;     // 2018-07-09 00:00:00 (UTC + 9)\r\n    uint public firstCrowdSaleEndDate = 1532012400 + UTC9;  // 2018-07-20 00:00:00 (UTC + 9)\r\n\r\n    uint public secondCrowdSaleDate = 1532271600 + UTC9;    // 2018-07-23 00:00:00 (UTC + 9)\r\n    uint public secondCrowdSaleEndDate = 1532962800 + UTC9; // 2018-07-31 00:00:00 (UTC + 9)\r\n    \r\n    bool public totalCoinLock;\r\n    uint public gemmyMusicLockTime;\r\n    \r\n    uint public advisorFirstLockTime;\r\n    uint public advisorSecondLockTime;\r\n    \r\n    mapping (address => uint) internal balances;\r\n    mapping (address => mapping ( address => uint )) internal approvals;\r\n\r\n    mapping (address => bool) internal personalLocks;\r\n    mapping (address => bool) internal gemmyMusicLocks;\r\n    \r\n    mapping (address => uint) internal advisorFirstLockBalances;\r\n    mapping (address => uint) internal advisorSecondLockBalances;\r\n    \r\n    mapping (address => uint) internal  icoEtherContributeds;\r\n    \r\n    event CoinIssuedSale(address indexed _who, uint _coins, uint _balances, uint _ether);\r\n    event RemoveTotalCoinLock();\r\n    event SetAdvisorLockTime(uint _first, uint _second);\r\n    event RemovePersonalLock(address _who);\r\n    event RemoveGemmyMusicLock(address _who);\r\n    event RemoveAdvisorFirstLock(address _who);\r\n    event RemoveAdvisorSecondLock(address _who);\r\n    event WithdrawRewardPool(address _who, uint _value);\r\n    event WithdrawFoundation(address _who, uint _value);\r\n    event WithdrawGemmyMusic(address _who, uint _value);\r\n    event WithdrawAdvisor(address _who, uint _value);\r\n    event WithdrawMkt(address _who, uint _value);\r\n    event ChangeWallet(address _who);\r\n    event BurnCoin(uint _value);\r\n    event RefundCoin(address _who, uint _value);\r\n\r\n    constructor() public\r\n    {\r\n        name = \"GemmyMusicCoin\";\r\n        decimals = 18;\r\n        symbol = \"GMM\";\r\n        totalSupply = 0;\r\n        \r\n        owner = msg.sender;\r\n        wallet = msg.sender;\r\n        \r\n        require(maxSupply == saleSupply + rewardPoolSupply + foundationSupply + gemmyMusicSupply + advisorSupply + mktSupply);\r\n        \r\n        totalCoinLock = true;\r\n        gemmyMusicLockTime = privateSaleDate + (365 * 24 * 60 * 60);\r\n        advisorFirstLockTime = gemmyMusicLockTime;   // if tokenUnLock == timeChange\r\n        advisorSecondLockTime = gemmyMusicLockTime;  // if tokenUnLock == timeChange\r\n    }\r\n\r\n    function atNow() public view returns (uint)\r\n    {\r\n        return now;\r\n    }\r\n    \r\n    function () payable public\r\n    {\r\n        require(saleSupply > coinIssuedSale);\r\n        buyCoin();\r\n    }\r\n    \r\n    function buyCoin() private\r\n    {\r\n        uint saleTime = 0; // 1 : privateSale, 2 : firstPreSale, 3 : secondPreSale, 4 : firstCrowdSale, 5 : secondCrowdSale\r\n        uint coinBonus = 0;\r\n        \r\n        uint minEth = 0.1 ether;\r\n        uint maxEth = 100000 ether;\r\n        \r\n        uint nowTime = atNow();\r\n        \r\n        if( nowTime >= privateSaleDate && nowTime < privateSaleEndDate )\r\n        {\r\n            saleTime = 1;\r\n            coinBonus = 40;\r\n        }\r\n        else if( nowTime >= firstPreSaleDate && nowTime < firstPreSaleEndDate )\r\n        {\r\n            saleTime = 2;\r\n            coinBonus = 20;\r\n        }\r\n        else if( nowTime >= secondPreSaleDate && nowTime < secondPreSaleEndDate )\r\n        {\r\n            saleTime = 3;\r\n            coinBonus = 15;\r\n        }\r\n        else if( nowTime >= firstCrowdSaleDate && nowTime < firstCrowdSaleEndDate )\r\n        {\r\n            saleTime = 4;\r\n            coinBonus = 5;\r\n        }\r\n        else if( nowTime >= secondCrowdSaleDate && nowTime < secondCrowdSaleEndDate )\r\n        {\r\n            saleTime = 5;\r\n            coinBonus = 0;\r\n        }\r\n        \r\n        require(saleTime >= 1 && saleTime <= 5);\r\n        require(msg.value >= minEth && icoEtherContributeds[msg.sender].add(msg.value) <= maxEth);\r\n\r\n        uint coins = ethPerCoin.mul(msg.value);\r\n        coins = coins.mul(100 + coinBonus) / 100;\r\n        \r\n        require(saleSupply >= coinIssuedSale.add(coins));\r\n\r\n        totalSupply = totalSupply.add(coins);\r\n        coinIssuedSale = coinIssuedSale.add(coins);\r\n        saleEtherReceived = saleEtherReceived.add(msg.value);\r\n\r\n        balances[msg.sender] = balances[msg.sender].add(coins);\r\n        icoEtherContributeds[msg.sender] = icoEtherContributeds[msg.sender].add(msg.value);\r\n        personalLocks[msg.sender] = true;\r\n\r\n        emit Transfer(0x0, msg.sender, coins);\r\n        emit CoinIssuedSale(msg.sender, coins, balances[msg.sender], msg.value);\r\n\r\n        wallet.transfer(address(this).balance);\r\n    }\r\n    \r\n    function isTransferLock(address _from, address _to) constant private returns (bool _success)\r\n    {\r\n        _success = false;\r\n\r\n        if(totalCoinLock == true)\r\n        {\r\n            _success = true;\r\n        }\r\n        \r\n        if(personalLocks[_from] == true || personalLocks[_to] == true)\r\n        {\r\n            _success = true;\r\n        }\r\n        \r\n        if(gemmyMusicLocks[_from] == true || gemmyMusicLocks[_to] == true)\r\n        {\r\n            _success = true;\r\n        }\r\n        \r\n        return _success;\r\n    }\r\n    \r\n    function isPersonalLock(address _who) constant public returns (bool)\r\n    {\r\n        return personalLocks[_who];\r\n    }\r\n    \r\n    function removeTotalCoinLock() onlyOwner public\r\n    {\r\n        require(totalCoinLock == true);\r\n        \r\n        uint nowTime = atNow();\r\n        advisorFirstLockTime = nowTime + (2 * 30 * 24 * 60 * 60);\r\n        advisorSecondLockTime = nowTime + (4 * 30 * 24 * 60 * 60);\r\n    \r\n        totalCoinLock = false;\r\n        \r\n        emit RemoveTotalCoinLock();\r\n        emit SetAdvisorLockTime(advisorFirstLockTime, advisorSecondLockTime);\r\n    }\r\n    \r\n    function removePersonalLock(address _who) onlyOwner public\r\n    {\r\n        require(personalLocks[_who] == true);\r\n        \r\n        personalLocks[_who] = false;\r\n        \r\n        emit RemovePersonalLock(_who);\r\n    }\r\n    \r\n    function removePersonalLockMultiple(address[] _addresses) onlyOwner public\r\n    {\r\n        for(uint i = 0; i < _addresses.length; i++)\r\n        {\r\n        \r\n            require(personalLocks[_addresses[i]] == true);\r\n        \r\n            personalLocks[_addresses[i]] = false;\r\n        \r\n            emit RemovePersonalLock(_addresses[i]);\r\n        }\r\n    }\r\n    \r\n    function removeGemmyMusicLock(address _who) onlyOwner public\r\n    {\r\n        require(atNow() > gemmyMusicLockTime);\r\n        require(gemmyMusicLocks[_who] == true);\r\n        \r\n        gemmyMusicLocks[_who] = false;\r\n        \r\n        emit RemoveGemmyMusicLock(_who);\r\n    }\r\n    \r\n    function removeFirstAdvisorLock(address _who) onlyOwner public\r\n    {\r\n        require(atNow() > advisorFirstLockTime);\r\n        require(advisorFirstLockBalances[_who] > 0);\r\n        require(personalLocks[_who] == true);\r\n        \r\n        balances[_who] = balances[_who].add(advisorFirstLockBalances[_who]);\r\n        advisorFirstLockBalances[_who] = 0;\r\n        \r\n        emit RemoveAdvisorFirstLock(_who);\r\n    }\r\n    \r\n    function removeSecondAdvisorLock(address _who) onlyOwner public\r\n    {\r\n        require(atNow() > advisorSecondLockTime);\r\n        require(advisorFirstLockBalances[_who] > 0);\r\n        require(personalLocks[_who] == true);\r\n        \r\n        balances[_who] = balances[_who].add(advisorFirstLockBalances[_who]);\r\n        advisorFirstLockBalances[_who] = 0;\r\n        \r\n        emit RemoveAdvisorFirstLock(_who);\r\n    }\r\n    \r\n    function totalSupply() constant public returns (uint) \r\n    {\r\n        return totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address _who) public view returns (uint) \r\n    {\r\n        return balances[_who].add(advisorFirstLockBalances[_who].add(advisorSecondLockBalances[_who]));\r\n    }\r\n    \r\n    function transfer(address _to, uint _value) public returns (bool) \r\n    {\r\n        require(balances[msg.sender] >= _value);\r\n        require(isTransferLock(msg.sender, _to) == false);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferMultiple(address[] _addresses, uint[] _values) onlyOwner public returns (bool) \r\n    {\r\n        require(_addresses.length == _values.length);\r\n        \r\n        for(uint i = 0; i < _addresses.length; i++)\r\n        {\r\n            require(balances[msg.sender] >= _values[i]);\r\n            require(isTransferLock(msg.sender, _addresses[i]) == false);\r\n            \r\n            balances[msg.sender] = balances[msg.sender].sub(_values[i]);\r\n            balances[_addresses[i]] = balances[_addresses[i]].add(_values[i]);\r\n            \r\n            emit Transfer(msg.sender, _addresses[i], _values[i]);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint _value) public returns (bool)\r\n    {\r\n        require(balances[msg.sender] >= _value);\r\n        require(isTransferLock(msg.sender, _spender) == false);\r\n        \r\n        approvals[msg.sender][_spender] = _value;\r\n        \r\n        emit Approval(msg.sender, _spender, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) constant public returns (uint) \r\n    {\r\n        return approvals[_owner][_spender];\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) \r\n    {\r\n        require(balances[_from] >= _value);\r\n        require(approvals[_from][msg.sender] >= _value);\r\n        require(isTransferLock(msg.sender, _to) == false);\r\n        \r\n        approvals[_from][msg.sender] = approvals[_from][msg.sender].sub(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to]  = balances[_to].add(_value);\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function withdrawRewardPool(address _who, uint _value) onlyOwner public\r\n    {\r\n        uint coins = _value * E18;\r\n        \r\n        require(rewardPoolSupply >= coinIssuedRewardPool.add(coins));\r\n\r\n        totalSupply = totalSupply.add(coins);\r\n        coinIssuedRewardPool = coinIssuedRewardPool.add(coins);\r\n        coinIssuedTotal = coinIssuedTotal.add(coins);\r\n\r\n        balances[_who] = balances[_who].add(coins);\r\n        personalLocks[_who] = true;\r\n\r\n        emit Transfer(0x0, msg.sender, coins);\r\n        emit WithdrawRewardPool(_who, coins);\r\n    }\r\n    \r\n    function withdrawFoundation(address _who, uint _value) onlyOwner public\r\n    {\r\n        uint coins = _value * E18;\r\n        \r\n        require(foundationSupply >= coinIssuedFoundation.add(coins));\r\n\r\n        totalSupply = totalSupply.add(coins);\r\n        coinIssuedFoundation = coinIssuedFoundation.add(coins);\r\n        coinIssuedTotal = coinIssuedTotal.add(coins);\r\n\r\n        balances[_who] = balances[_who].add(coins);\r\n        personalLocks[_who] = true;\r\n\r\n        emit Transfer(0x0, msg.sender, coins);\r\n        emit WithdrawFoundation(_who, coins);\r\n    }\r\n    \r\n    function withdrawGemmyMusic(address _who, uint _value) onlyOwner public\r\n    {\r\n        uint coins = _value * E18;\r\n        \r\n        require(gemmyMusicSupply >= coinIssuedGemmyMusic.add(coins));\r\n\r\n        totalSupply = totalSupply.add(coins);\r\n        coinIssuedGemmyMusic = coinIssuedGemmyMusic.add(coins);\r\n        coinIssuedTotal = coinIssuedTotal.add(coins);\r\n\r\n        balances[_who] = balances[_who].add(coins);\r\n        gemmyMusicLocks[_who] = true;\r\n\r\n        emit Transfer(0x0, msg.sender, coins);\r\n        emit WithdrawGemmyMusic(_who, coins);\r\n    }\r\n    \r\n    function withdrawAdvisor(address _who, uint _value) onlyOwner public\r\n    {\r\n        uint coins = _value * E18;\r\n        \r\n        require(advisorSupply >= coinIssuedAdvisor.add(coins));\r\n\r\n        totalSupply = totalSupply.add(coins);\r\n        coinIssuedAdvisor = coinIssuedAdvisor.add(coins);\r\n        coinIssuedTotal = coinIssuedTotal.add(coins);\r\n\r\n        balances[_who] = balances[_who].add(coins * 20 / 100);\r\n        advisorFirstLockBalances[_who] = advisorFirstLockBalances[_who].add(coins * 40 / 100);\r\n        advisorSecondLockBalances[_who] = advisorSecondLockBalances[_who].add(coins * 40 / 100);\r\n        personalLocks[_who] = true;\r\n\r\n        emit Transfer(0x0, msg.sender, coins);\r\n        emit WithdrawAdvisor(_who, coins);\r\n    }\r\n    \r\n    function withdrawMkt(address _who, uint _value) onlyOwner public\r\n    {\r\n        uint coins = _value * E18;\r\n        \r\n        require(mktSupply >= coinIssuedMkt.add(coins));\r\n\r\n        totalSupply = totalSupply.add(coins);\r\n        coinIssuedMkt = coinIssuedMkt.add(coins);\r\n        coinIssuedTotal = coinIssuedTotal.add(coins);\r\n\r\n        balances[_who] = balances[_who].add(coins);\r\n        personalLocks[_who] = true;\r\n\r\n        emit Transfer(0x0, msg.sender, coins);\r\n        emit WithdrawMkt(_who, coins);\r\n    }\r\n    \r\n    function burnCoin() onlyOwner public\r\n    {\r\n        require(atNow() > secondCrowdSaleEndDate);\r\n        require(saleSupply - coinIssuedSale > 0);\r\n\r\n        uint coins = saleSupply - coinIssuedSale;\r\n        \r\n        balances[0x0] = balances[0x0].add(coins);\r\n        coinIssuedSale = coinIssuedSale.add(coins);\r\n        coinIssuedBurn = coinIssuedBurn.add(coins);\r\n\r\n        emit BurnCoin(coins);\r\n    }\r\n    \r\n    function changeWallet(address _who) onlyOwner public\r\n    {\r\n        require(_who != address(0x0));\r\n        require(_who != wallet);\r\n        \r\n        wallet = _who;\r\n        \r\n        emit ChangeWallet(_who);\r\n    }\r\n    \r\n    function refundCoin(address _who) onlyOwner public\r\n    {\r\n        require(totalCoinLock == true);\r\n        \r\n        uint coins = balances[_who];\r\n        \r\n        balances[wallet] = balances[wallet].add(coins);\r\n\r\n        emit RefundCoin(_who, coins);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"gemmyMusicLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSaleEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorFirstLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinIssuedBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removePersonalLockMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinIssuedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPreSaleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawAdvisor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"refundCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEtherReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPreSaleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinIssuedSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondCrowdSaleEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPoolSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mktSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"removePersonalLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"removeGemmyMusicLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinIssuedRewardPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondCrowdSaleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstCrowdSaleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinIssuedMkt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorSecondLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinIssuedFoundation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCoinLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeTotalCoinLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPreSaleEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawRewardPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"transferMultiple\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinIssuedAdvisor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawFoundation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawMkt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPreSaleEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawGemmyMusic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gemmyMusicSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isPersonalLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinIssuedGemmyMusic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"removeSecondAdvisorLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSaleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"removeFirstAdvisorLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstCrowdSaleEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_coins\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balances\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"CoinIssuedSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemoveTotalCoinLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_first\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_second\",\"type\":\"uint256\"}],\"name\":\"SetAdvisorLockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"RemovePersonalLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"RemoveGemmyMusicLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"RemoveAdvisorFirstLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"RemoveAdvisorSecondLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WithdrawRewardPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WithdrawFoundation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WithdrawGemmyMusic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WithdrawAdvisor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WithdrawMkt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"ChangeWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BurnCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"RefundCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnerTransferPropose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GemmyCoin","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8eaed8c50b378a0d5cce8478fd6c5b98c1cb9fbcaaf7e88cd9487283b2bbdc57"}]}