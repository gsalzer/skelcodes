{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n *      Preparing contracts \r\n * \r\n **/\r\n\r\n// Ownable contract with CFO\r\ncontract Ownable {\r\n    address public owner;\r\n    address public cfoAddress;\r\n\r\n    constructor() public{\r\n        owner = msg.sender;\r\n        cfoAddress = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    function setCFO(address newCFO) external onlyOwner {\r\n        require(newCFO != address(0));\r\n\r\n        cfoAddress = newCFO;\r\n    }\r\n}\r\n\r\n// Pausable contract which allows children to implement an emergency stop mechanism.\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    // Modifier to make a function callable only when the contract is not paused.\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    // Modifier to make a function callable only when the contract is paused.\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n\r\n    // called by the owner to pause, triggers stopped state\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    // called by the owner to unpause, returns to normal state\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n// Gen mixer\r\ncontract MixGenInterface {\r\n    function openEgg(uint64 userNumber, uint16 eggQuality) public returns (uint256 genes, uint16 quality);\r\n    function uniquePet(uint64 newPetId) public returns (uint256 genes, uint16 quality);\r\n}\r\n\r\n// Configuration of external contracts\r\ncontract ExternalContracts is Ownable {\r\n    MixGenInterface public geneScience;\r\n    \r\n    address public marketAddress;\r\n    \r\n    function setMixGenAddress(address _address) external onlyOwner {\r\n        MixGenInterface candidateContract = MixGenInterface(_address);\r\n        \r\n        geneScience = candidateContract;\r\n    }\r\n    \r\n    function setMarketAddress(address _address) external onlyOwner {\r\n        marketAddress = _address;\r\n    }\r\n}\r\n\r\n// Population settings and base functions\r\ncontract PopulationControl is Pausable {\r\n    \r\n    // start breed timeout is 12 hours\r\n    uint32 public breedTimeout = 12 hours;\r\n    uint32 maxTimeout = 178 days;\r\n    \r\n    function setBreedTimeout(uint32 timeout) external onlyOwner {\r\n        require(timeout <= maxTimeout);\r\n        \r\n        breedTimeout = timeout;\r\n    }\r\n}\r\n\r\n/**\r\n *      Presale main contracts \r\n * \r\n **/\r\n\r\n// Pet base contract\r\ncontract PetBase is PopulationControl{\r\n    \r\n    // events\r\n    event Birth(address owner, uint64 petId, uint16 quality, uint256 genes);\r\n    event Death(uint64 petId);\r\n    \r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    \r\n    // data storage\r\n    struct Pet {\r\n        uint256 genes;\r\n        uint64 birthTime;\r\n        uint16 quality;\r\n    }\r\n    \r\n    mapping (uint64 => Pet) pets;\r\n    mapping (uint64 => address) petIndexToOwner;\r\n    mapping (address => uint256) public ownershipTokenCount;\r\n    mapping (uint64 => uint64) breedTimeouts;\r\n \r\n    uint64 tokensCount;\r\n    uint64 lastTokenId;\r\n\r\n    // pet creation\r\n    function createPet(\r\n        uint256 _genes,\r\n        uint16 _quality,\r\n        address _owner\r\n    )\r\n        internal\r\n        returns (uint64)\r\n    {\r\n        Pet memory _pet = Pet({\r\n            genes: _genes,\r\n            birthTime: uint64(now),\r\n            quality: _quality\r\n        });\r\n               \r\n        lastTokenId++;\r\n        tokensCount++;\r\n\t\t\r\n        uint64 newPetId = lastTokenId;\r\n                \r\n        pets[newPetId] = _pet;\r\n        \r\n        _transfer(0, _owner, newPetId);\r\n        \r\n        breedTimeouts[newPetId] = uint64( now + (breedTimeout / 2) );\r\n        emit Birth(_owner, newPetId, _quality, _genes);\r\n\r\n        return newPetId;\r\n    }\r\n    \r\n    // transfer pet function\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        uint64 _tokenId64bit = uint64(_tokenId);\r\n        \r\n        ownershipTokenCount[_to]++;\r\n        petIndexToOwner[_tokenId64bit] = _to;\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n        }\r\n        \r\n         emit Transfer(_from, _to, _tokenId);\r\n    }\r\n    \r\n\t// calculation of recommended price\r\n    function recommendedPrice(uint16 quality) public pure returns(uint256 price) {\r\n        \r\n        require(quality <= uint16(0xF000));\r\n        require(quality >= uint16(0x1000));\r\n        \r\n        uint256 startPrice = 1000;\r\n        \r\n        price = startPrice;\r\n        \r\n        uint256 revertQuality = uint16(0xF000) - quality;\r\n        uint256 oneLevel = uint16(0x2000);\r\n        uint256 oneQuart = oneLevel/4;\r\n        \r\n        uint256 fullLevels = revertQuality/oneLevel;\r\n        uint256 fullQuarts =  (revertQuality % oneLevel) / oneQuart ;\r\n        \r\n        uint256 surplus = revertQuality - (fullLevels*oneLevel) - (fullQuarts*oneQuart);\r\n        \r\n        \r\n        // coefficeint is 4.4 per level\r\n        price = price * 44**fullLevels;\r\n        price = price / 10**fullLevels;\r\n        \r\n        // quart coefficient is sqrt(sqrt(4.4))\r\n        if(fullQuarts != 0)\r\n        {\r\n            price = price * 14483154**fullQuarts;\r\n            price = price / 10**(7 * fullQuarts);\r\n        }\r\n\r\n        // for surplus we using next quart coefficient\r\n        if(surplus != 0)\r\n        {\r\n            uint256 nextQuartPrice = (price * 14483154) / 10**7;\r\n            uint256 surPlusCoefficient = surplus * 10**6  /oneQuart;\r\n            uint256 surPlusPrice = ((nextQuartPrice - price) * surPlusCoefficient) / 10**6;\r\n            \r\n            price+= surPlusPrice;\r\n        }\r\n        \r\n        price*= 50 szabo;\r\n    }\r\n    \r\n\t// grade calculation based on parrot quality\r\n    function getGradeByQuailty(uint16 quality) public pure returns (uint8 grade) {\r\n        \r\n        require(quality <= uint16(0xF000));\r\n        require(quality >= uint16(0x1000));\r\n        \r\n        if(quality == uint16(0xF000))\r\n            return 7;\r\n        \r\n        quality+= uint16(0x1000);\r\n        \r\n        return uint8 ( quality / uint16(0x2000) );\r\n    }\r\n}\r\n\r\n// Ownership\r\ncontract PetOwnership is PetBase {\r\n\r\n    // function for the opportunity to gift parrots before the start of the game\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(_owns(msg.sender, uint64(_tokenId)));\r\n\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n \r\n\t// checks if a given address is the current owner of a particular pet\r\n    function _owns(address _claimant, uint64 _tokenId) internal view returns (bool) {\r\n        return petIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n    \r\n\t// returns the address currently assigned ownership of a given pet\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner) {\r\n        uint64 _tokenId64bit = uint64(_tokenId);\r\n        owner = petIndexToOwner[_tokenId64bit];\r\n        \r\n        require(owner != address(0));\r\n    }   \r\n}\r\n\r\n// Settings for eggs minted by administration\r\ncontract EggMinting is PetOwnership{\r\n    \r\n    uint8 public uniquePetsCount = 100;\r\n    \r\n    uint16 public globalPresaleLimit = 2500;\r\n\r\n    mapping (uint16 => uint16) public eggLimits;\r\n    mapping (uint16 => uint16) public purchesedEggs;\r\n    \r\n    constructor() public {\r\n        eggLimits[55375] = 200;\r\n        eggLimits[48770] = 1100;\r\n        eggLimits[39904] = 200;\r\n        eggLimits[32223] = 25;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint) {\r\n        return tokensCount;\r\n    }\r\n    \r\n    function setEggLimit(uint16 quality, uint16 limit) external onlyOwner {\r\n        eggLimits[quality] = limit;\r\n    }\r\n\r\n    function eggAvailable(uint16 quality) constant public returns(bool) {\r\n        // first 100 eggs - only cheap\r\n        if( quality < 48000 && tokensCount < ( 100 + uniquePetsCount ) )\r\n           return false;\r\n        \r\n        return (eggLimits[quality] > purchesedEggs[quality]);\r\n    }\r\n}\r\n\r\n// Buying eggs from the company\r\ncontract EggPurchase is EggMinting, ExternalContracts {\r\n    \r\n    uint16[4] discountThresholds =    [20, 100, 500, 1000];\r\n    uint8[4]  discountPercents   =    [75, 50,  30,  20  ];\r\n    \r\n\t// purchasing egg\r\n    function purchaseEgg(uint64 userNumber, uint16 quality) external payable whenNotPaused {\r\n\r\n        require(tokensCount >= uniquePetsCount);\r\n\t\t\r\n        // checking egg availablity\r\n        require(eggAvailable(quality));\r\n        \r\n        // checking total count of presale eggs\r\n        require(tokensCount <= globalPresaleLimit);\r\n\r\n        // calculating price\r\n        uint256 eggPrice = ( recommendedPrice(quality) * (100 - getCurrentDiscountPercent()) ) / 100;\r\n\r\n        // checking payment amount\r\n        require(msg.value >= eggPrice);\r\n        \r\n        // increment egg counter\r\n        purchesedEggs[quality]++;\r\n        \r\n        // initialize variables for store child genes and quility\r\n        uint256 childGenes;\r\n        uint16 childQuality;\r\n\r\n        // get genes and quality of new pet by opening egg through external interface\r\n        (childGenes, childQuality) = geneScience.openEgg(userNumber, quality);\r\n         \r\n        // creating new pet\r\n        createPet(\r\n            childGenes,      // genes string\r\n            childQuality,    // child quality by open egg\r\n            msg.sender       // owner\r\n        );\r\n    }\r\n    \r\n    function getCurrentDiscountPercent() constant public returns (uint8 discount) {\r\n        \r\n        for(uint8 i = 0; i <= 3; i++)\r\n        {\r\n            if(tokensCount < (discountThresholds[i] + uniquePetsCount ))\r\n                return discountPercents[i];\r\n        }\r\n        \r\n        return 10;\r\n    }\r\n}\r\n\r\n// Launch it\r\ncontract PreSale is EggPurchase {\r\n    \r\n    constructor() public {\r\n        paused = true;\r\n    }\r\n        \r\n    function generateUniquePets(uint8 count) external onlyOwner whenNotPaused {\r\n        \r\n        require(marketAddress != address(0));\r\n        require(address(geneScience) != address(0));\r\n        \r\n        uint256 childGenes;\r\n        uint16 childQuality;\r\n        uint64 newPetId;\r\n\r\n        for(uint8 i = 0; i< count; i++)\r\n        {\r\n            if(tokensCount >= uniquePetsCount)\r\n                continue;\r\n            \r\n            newPetId = tokensCount+1;\r\n\r\n            (childGenes, childQuality) = geneScience.uniquePet(newPetId);\r\n            createPet(childGenes, childQuality, marketAddress);\r\n        }\r\n    }\r\n    \r\n    function getPet(uint256 _id) external view returns (\r\n        uint64 birthTime,\r\n        uint256 genes,\r\n        uint64 breedTimeout,\r\n        uint16 quality,\r\n        address owner\r\n    ) {\r\n        uint64 _tokenId64bit = uint64(_id);\r\n        \r\n        Pet storage pet = pets[_tokenId64bit];\r\n        \r\n        birthTime = pet.birthTime;\r\n        genes = pet.genes;\r\n        breedTimeout = uint64(breedTimeouts[_tokenId64bit]);\r\n        quality = pet.quality;\r\n        owner = petIndexToOwner[_tokenId64bit];\r\n    }\r\n    \r\n    function unpause() public onlyOwner whenPaused {\r\n        require(address(geneScience) != address(0));\r\n\r\n        super.unpause();\r\n    }\r\n    \r\n    function withdrawBalance(uint256 summ) external onlyCFO {\r\n        cfoAddress.transfer(summ);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userNumber\",\"type\":\"uint64\"},{\"name\":\"quality\",\"type\":\"uint16\"}],\"name\":\"purchaseEgg\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"quality\",\"type\":\"uint16\"}],\"name\":\"recommendedPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"purchesedEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"breedTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMixGenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPet\",\"outputs\":[{\"name\":\"birthTime\",\"type\":\"uint64\"},{\"name\":\"genes\",\"type\":\"uint256\"},{\"name\":\"breedTimeout\",\"type\":\"uint64\"},{\"name\":\"quality\",\"type\":\"uint16\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalPresaleLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"count\",\"type\":\"uint8\"}],\"name\":\"generateUniquePets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"eggLimits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"quality\",\"type\":\"uint16\"}],\"name\":\"getGradeByQuailty\",\"outputs\":[{\"name\":\"grade\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniquePetsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"quality\",\"type\":\"uint16\"}],\"name\":\"eggAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timeout\",\"type\":\"uint32\"}],\"name\":\"setBreedTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownershipTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"summ\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDiscountPercent\",\"outputs\":[{\"name\":\"discount\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"quality\",\"type\":\"uint16\"},{\"name\":\"limit\",\"type\":\"uint16\"}],\"name\":\"setEggLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"geneScience\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"petId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"quality\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"petId\",\"type\":\"uint64\"}],\"name\":\"Death\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"PreSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://99cf237d0edfff5f9225c148fc48d0e276fcfc0e3225487b6a0f7bb0c2663dd2"}]}