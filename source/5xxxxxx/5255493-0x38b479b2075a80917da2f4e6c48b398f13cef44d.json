{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract KittyRace {\r\n    struct Race {\r\n        uint32 blockJoinedFirstRacer;\r\n        uint32 blockJoinedLastRacer;\r\n        Racer[] racers;\r\n    }\r\n\r\n    struct Racer {\r\n        address kittyOwner;\r\n        uint256 kittyId;\r\n    }\r\n\r\n    event RegisterEvent(\r\n        uint32 raceId,\r\n        address kittyAddress,\r\n        uint256 kittyId,\r\n        uint256 position\r\n    );\r\n\r\n    event RaceEvent(\r\n        uint32 raceId,\r\n        uint256 numRacers,\r\n        uint256 winnerKittyId\r\n    );\r\n\r\n    event PayoutEvent(\r\n        uint32 raceId,\r\n        address winnerKittyAddress,\r\n        uint256 winnerAmount,\r\n        bool winnerTxError,\r\n        address processingAddress,\r\n        uint256 processingAmount,\r\n        bool processingTxError\r\n    );\r\n\r\n    // Contract owner\r\n    address public owner;\r\n\r\n    // KittyCore contract reference\r\n    address public kittyCoreAddress;\r\n    KittyCoreI kittyCore;\r\n\r\n    // Pause button\r\n    bool gameOn = true;\r\n\r\n    // Precise payment value required to registerForRace(). This can be\r\n    // updated by the owner role as the gas or fiat prices adjust.\r\n    uint256 public entryFee = 0.005 ether;\r\n    uint256 public processingFee = 0.0005 ether; // paid from each entry fee to whoever successfully calls race() function\r\n    uint8 public registrationPeriod = 25; // number of blocks after race creation others can join\r\n    uint8 public maxRacers = 10; // maximum number of racers allowed for single race\r\n\r\n    uint32 public raceId = 0;\r\n    mapping (uint256 => Race) public races;\r\n    mapping (uint256 => bool) public activeRacers;\r\n    mapping (uint256 => bool) public completedRaces;\r\n\r\n    // Slight advantage for Kitties with the following genes\r\n    uint256[][] geneMasks = [\r\n        [ uint256(0x0000000000000000000000000000000000000000000000000000000000b00000), uint256(2) ], // jaguar (D) - pattern\r\n        [ uint256(0x0000000000000000000000000000000000000000000000000000000016000000), uint256(1) ], // jaguar (R1) - pattern\r\n        [ uint256(0x0000000000000000000000000000000000000000000000000000000000900000), uint256(2) ], // luckystripe (D) - pattern\r\n        [ uint256(0x0000000000000000000000000000000000000000000000000000000012000000), uint256(1) ], // luckystripe (R1) - pattern\r\n        [ uint256(0x0000000000000000000000000000000000000000000000019000000000000000), uint256(2) ], // wingtips (D) - eyes\r\n        [ uint256(0x0000000000000000000000000000000000000000000000320000000000000000), uint256(1) ], // wingtips (R1) - eyes\r\n        [ uint256(0x0000000000000000000000000000000000000000000500000000000000000000), uint256(2) ], // mauveover (D) - colorbody\r\n        [ uint256(0x000000000000000000000000000000000000000000a000000000000000000000), uint256(1) ], // mauveover (R1) - colorbody\r\n        [ uint256(0x00000000000000000000000000000000000000c0000000000000000000000000), uint256(2) ], // coffee (D) - color\r\n        [ uint256(0x0000000000000000000000000000000000001800000000000000000000000000), uint256(1) ]  // coffee (R1) - color\r\n    ];\r\n\r\n    modifier onlyOwner() { require(msg.sender == owner); _; }\r\n\r\n    function KittyRace(address _kittyCoreAddress) public {\r\n        owner = msg.sender;\r\n        kittyCoreAddress = _kittyCoreAddress;\r\n        kittyCore = KittyCoreI(kittyCoreAddress);\r\n    }\r\n\r\n    function kill() public onlyOwner {\r\n        // Contract cannot be killed after midnight, April 1, 2018 (Pacific)\r\n        require(now < 1522566000);\r\n\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function setEntryFee(uint256 _entryFee) public onlyOwner { entryFee = _entryFee; }\r\n    function setProcessingFee(uint256 _processingFee) public onlyOwner { processingFee = _processingFee; }\r\n    function setRegistrationPeriod(uint8 _registrationPeriod) public onlyOwner { registrationPeriod = _registrationPeriod; }\r\n    function setMaxRacers(uint8 _maxRacers) public onlyOwner { maxRacers = _maxRacers; }\r\n    function setGameOn(bool _gameOn) public onlyOwner { gameOn = _gameOn; }\r\n\r\n    function setKittyCoreAddress(address _kittyCoreAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        kittyCoreAddress = _kittyCoreAddress;\r\n        kittyCore = KittyCoreI(kittyCoreAddress);\r\n    }\r\n\r\n    function getRace(uint32 _raceId)\r\n        public\r\n        view\r\n        returns (uint256 blockJoinedFirstRacer, uint256 blockJoinedLastRacer, uint256 numRacers)\r\n    {\r\n        return (races[_raceId].blockJoinedFirstRacer, races[_raceId].blockJoinedLastRacer, races[_raceId].racers.length);\r\n    }\r\n\r\n    function getRacer(uint32 _raceId, uint256 _racerIndex)\r\n        public\r\n        view\r\n        returns (address kittyOwner, uint256 kittyId)\r\n    {\r\n        Racer storage racer = races[_raceId].racers[_racerIndex];\r\n        return (racer.kittyOwner, racer.kittyId);\r\n    }\r\n\r\n    function registerForRace(uint256 _kittyId)\r\n        external\r\n        payable\r\n        returns (uint256)\r\n    {\r\n        require(gameOn);\r\n\r\n        // Confirm precise entry fee was provided\r\n        require(msg.value == entryFee);\r\n\r\n        // Confirm sender owns the Kitty\r\n        require(msg.sender == kittyCore.ownerOf(_kittyId));\r\n\r\n        // Confirm Kitty is not currently in another race\r\n        require(activeRacers[_kittyId] != true);\r\n\r\n        Race storage race = races[raceId];\r\n\r\n        // Create new race if current race is completed or full\r\n        if (completedRaces[raceId] || race.racers.length >= maxRacers) {\r\n            raceId += 1;\r\n            race = races[raceId];\r\n        }\r\n\r\n        // Separated from statement above to function for first racer of first race\r\n        if (race.racers.length == 0) {\r\n            race.blockJoinedFirstRacer = uint32(block.number);\r\n        }\r\n        race.blockJoinedLastRacer = uint32(block.number);\r\n\r\n        Racer memory racer = Racer({\r\n            kittyOwner: msg.sender,\r\n            kittyId: _kittyId\r\n        });\r\n\r\n        race.racers.push(racer);\r\n\r\n        activeRacers[_kittyId] = true;\r\n\r\n        emit RegisterEvent(\r\n            raceId,\r\n            racer.kittyOwner,\r\n            racer.kittyId,\r\n            race.racers.length - 1 // Race position\r\n        );\r\n\r\n        return raceId;\r\n    }\r\n\r\n    function race(uint32 _raceId)\r\n        external\r\n        returns (uint256)\r\n    {\r\n        uint256 numRacers = races[_raceId].racers.length;\r\n\r\n        // Is race full, if not, have racers had enough time to join?\r\n        require(numRacers >= maxRacers || block.number > races[_raceId].blockJoinedFirstRacer + registrationPeriod);\r\n\r\n        // Enough unique block hashes to provide random roll for each racer?\r\n        require(block.number > races[_raceId].blockJoinedLastRacer + numRacers);\r\n\r\n        Racer memory racer;\r\n        Racer memory winner = races[_raceId].racers[0];\r\n        uint8 raceScore;\r\n        uint8 highScore = 0;\r\n\r\n        // Calc finishing order\r\n        for(uint i = 0; i < numRacers; i++) {\r\n            racer = races[_raceId].racers[i];\r\n            // Genetic skill score\r\n            raceScore = getKittySkillScore(racer.kittyId);\r\n            // Random chance score\r\n            raceScore += uint8(block.blockhash(races[_raceId].blockJoinedLastRacer + numRacers - i)) % 20;\r\n            // First and second entry incentives\r\n            if (i == 0) { raceScore += 2; } // First to join\r\n            if (i == 1) { raceScore += 1; } // Second to join\r\n\r\n            if (raceScore > highScore) {\r\n                winner = racer;\r\n                highScore = raceScore;\r\n            }\r\n\r\n            delete activeRacers[racer.kittyId];\r\n        }\r\n\r\n        emit RaceEvent(\r\n            _raceId,\r\n            numRacers,\r\n            winner.kittyId\r\n        );\r\n\r\n        emit PayoutEvent(\r\n            _raceId,\r\n            winner.kittyOwner,\r\n            (entryFee * numRacers) - (processingFee * numRacers),\r\n            !winner.kittyOwner.send((entryFee * numRacers) - (processingFee * numRacers)),\r\n            msg.sender,\r\n            processingFee * numRacers,\r\n            !msg.sender.send(processingFee * numRacers)\r\n        );\r\n\r\n        completedRaces[_raceId] = true;\r\n        delete races[_raceId];\r\n\r\n        return winner.kittyId;\r\n    }\r\n\r\n    function getKittySkillScore(uint256 _kittyId)\r\n        private\r\n        view\r\n        returns (uint8)\r\n    {\r\n        uint256 genes;\r\n        ( , , , , , , , , , genes) = kittyCore.getKitty(_kittyId);\r\n\r\n        uint8 skillScore;\r\n        for(uint8 i = 0; i < geneMasks.length; i++) {\r\n            if (genes & geneMasks[i][0] == geneMasks[i][0]) {\r\n                skillScore += uint8(geneMasks[i][1]);\r\n            }\r\n        }\r\n\r\n        return skillScore;\r\n    }\r\n}\r\n\r\n// Barebones interface to CryptoKitties contract\r\ncontract KittyCoreI {\r\n    function getKitty(uint _id) public returns (\r\n        bool isGestating,\r\n        bool isReady,\r\n        uint256 cooldownIndex,\r\n        uint256 nextActionAt,\r\n        uint256 siringWithId,\r\n        uint256 birthTime,\r\n        uint256 matronId,\r\n        uint256 sireId,\r\n        uint256 generation,\r\n        uint256 genes\r\n    );\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxRacers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"entryFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kittyCoreAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameOn\",\"type\":\"bool\"}],\"name\":\"setGameOn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registrationPeriod\",\"type\":\"uint8\"}],\"name\":\"setRegistrationPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"uint32\"}],\"name\":\"getRace\",\"outputs\":[{\"name\":\"blockJoinedFirstRacer\",\"type\":\"uint256\"},{\"name\":\"blockJoinedLastRacer\",\"type\":\"uint256\"},{\"name\":\"numRacers\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kittyId\",\"type\":\"uint256\"}],\"name\":\"registerForRace\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeRacers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"completedRaces\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"uint32\"}],\"name\":\"race\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kittyCoreAddress\",\"type\":\"address\"}],\"name\":\"setKittyCoreAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"races\",\"outputs\":[{\"name\":\"blockJoinedFirstRacer\",\"type\":\"uint32\"},{\"name\":\"blockJoinedLastRacer\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"uint32\"},{\"name\":\"_racerIndex\",\"type\":\"uint256\"}],\"name\":\"getRacer\",\"outputs\":[{\"name\":\"kittyOwner\",\"type\":\"address\"},{\"name\":\"kittyId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_processingFee\",\"type\":\"uint256\"}],\"name\":\"setProcessingFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"processingFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxRacers\",\"type\":\"uint8\"}],\"name\":\"setMaxRacers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_entryFee\",\"type\":\"uint256\"}],\"name\":\"setEntryFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raceId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kittyCoreAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"raceId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"kittyAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"kittyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"RegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"raceId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"numRacers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerKittyId\",\"type\":\"uint256\"}],\"name\":\"RaceEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"raceId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"winnerKittyAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerTxError\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"processingAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"processingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"processingTxError\",\"type\":\"bool\"}],\"name\":\"PayoutEvent\",\"type\":\"event\"}]","ContractName":"KittyRace","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000006012c8cf97bead5deae237070f9587f8e7a266d","Library":"","SwarmSource":"bzzr://f5d185c7c524836c2bf2fc43a3bb50234dbcd32b4d59f47c7063237bc702e1c0"}]}