{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Escrow is Ownable {\r\n    using SafeMath for uint256;\r\n    struct EscrowElement {\r\n    bool exists;\r\n    address src;\r\n    address dst;\r\n    uint256 value;\r\n    }\r\n\r\n    address public token;\r\n    ERC20 public tok;\r\n\r\n    mapping (bytes20 => EscrowElement) public escrows;\r\n\r\n    /* Numerator and denominator of common fraction.\r\n        E.g. 1 & 25 mean one twenty fifths, i.e. 0.04 = 4% */\r\n    uint256 public escrow_fee_numerator; /* 1 */\r\n    uint256 public escrow_fee_denominator; /* 25 */\r\n\r\n\r\n\r\n    event EscrowStarted(\r\n    bytes20 indexed escrow_id,\r\n    EscrowElement escrow_element\r\n    );\r\n\r\n    event EscrowReleased(\r\n    bytes20 indexed escrow_id,\r\n    EscrowElement escrow_element\r\n    );\r\n\r\n    event EscrowCancelled(\r\n    bytes20 indexed escrow_id,\r\n    EscrowElement escrow_element\r\n    );\r\n\r\n\r\n    event TokenSet(\r\n    address indexed token\r\n    );\r\n\r\n    event Withdrawed(\r\n    address indexed dst,\r\n    uint256 value\r\n    );\r\n\r\n    function Escrow(address _token){\r\n        token = _token;\r\n        tok = ERC20(_token);\r\n        escrow_fee_numerator = 1;\r\n        escrow_fee_denominator = 25;\r\n    }\r\n\r\n    function startEscrow(bytes20 escrow_id, address to, uint256 value) public returns (bool) {\r\n        require(to != address(0));\r\n        require(escrows[escrow_id].exists != true);\r\n//        ERC20 tok = ERC20(token);\r\n        tok.transferFrom(msg.sender, address(this), value);\r\n        EscrowElement memory escrow_element = EscrowElement(true, msg.sender, to, value);\r\n        escrows[escrow_id] = escrow_element;\r\n\r\n        emit EscrowStarted(escrow_id, escrow_element);\r\n\r\n        return true;\r\n    }\r\n\r\n    function releaseEscrow(bytes20 escrow_id, address fee_destination) onlyOwner returns (bool) {\r\n        require(fee_destination != address(0));\r\n        require(escrows[escrow_id].exists == true);\r\n\r\n        EscrowElement storage escrow_element = escrows[escrow_id];\r\n\r\n        uint256 fee = escrow_element.value.mul(escrow_fee_numerator).div(escrow_fee_denominator);\r\n        uint256 value = escrow_element.value.sub(fee);\r\n\r\n//        ERC20 tok = ERC20(token);\r\n\r\n        tok.transfer(escrow_element.dst, value);\r\n        tok.transfer(fee_destination, fee);\r\n\r\n\r\n        EscrowElement memory _escrow_element = escrow_element;\r\n\r\n        emit EscrowReleased(escrow_id, _escrow_element);\r\n\r\n        delete escrows[escrow_id];\r\n\r\n        return true;\r\n    }\r\n\r\n    function cancelEscrow(bytes20 escrow_id) onlyOwner returns (bool) {\r\n        EscrowElement storage escrow_element = escrows[escrow_id];\r\n\r\n//        ERC20 tok = ERC20(token);\r\n\r\n        tok.transfer(escrow_element.src, escrow_element.value);\r\n        /* Workaround because of lack of feature. See https://github.com/ethereum/solidity/issues/3577 */\r\n        EscrowElement memory _escrow_element = escrow_element;\r\n\r\n\r\n        emit EscrowCancelled(escrow_id, _escrow_element);\r\n\r\n        delete escrows[escrow_id];\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdrawToken(address dst, uint256 value) onlyOwner returns (bool){\r\n        require(dst != address(0));\r\n        require(value > 0);\r\n//        ERC20 tok = ERC20(token);\r\n        tok.transfer(dst, value);\r\n\r\n        emit Withdrawed(dst, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function setToken(address _token) onlyOwner returns (bool){\r\n        require(_token != address(0));\r\n        token = _token;\r\n        tok = ERC20(_token);\r\n        emit TokenSet(_token);\r\n\r\n        return true;\r\n    }\r\n    //\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tok\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"escrow_id\",\"type\":\"bytes20\"},{\"name\":\"fee_destination\",\"type\":\"address\"}],\"name\":\"releaseEscrow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow_fee_denominator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes20\"}],\"name\":\"escrows\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"escrow_id\",\"type\":\"bytes20\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"startEscrow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"escrow_id\",\"type\":\"bytes20\"}],\"name\":\"cancelEscrow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow_fee_numerator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"escrow_id\",\"type\":\"bytes20\"},{\"components\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"name\":\"escrow_element\",\"type\":\"tuple\"}],\"name\":\"EscrowStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"escrow_id\",\"type\":\"bytes20\"},{\"components\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"name\":\"escrow_element\",\"type\":\"tuple\"}],\"name\":\"EscrowReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"escrow_id\",\"type\":\"bytes20\"},{\"components\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"name\":\"escrow_element\",\"type\":\"tuple\"}],\"name\":\"EscrowCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Escrow","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000080238d9451f86dcf12bff21af9e8deadcf915bff","Library":"","SwarmSource":"bzzr://a92317f888d57875ad76851b95ea1e32daf99a0b956c4bf7649b811736c085e5"}]}