{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract AccessControl {\r\n  /// @dev The addresses of the accounts (or contracts) that can execute actions within each roles\r\n  address public ceoAddress;\r\n  address public cooAddress;\r\n\r\n  /// @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n  bool public paused = false;\r\n\r\n  /// @dev The AccessControl constructor sets the original C roles of the contract to the sender account\r\n  function AccessControl() public {\r\n    ceoAddress = msg.sender;\r\n    cooAddress = msg.sender;\r\n  }\r\n\r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n\r\n  /// @dev Access modifier for COO-only functionality\r\n  modifier onlyCOO() {\r\n    require(msg.sender == cooAddress);\r\n    _;\r\n  }\r\n\r\n  /// @dev Access modifier for any CLevel functionality\r\n  modifier onlyCLevel() {\r\n    require(msg.sender == ceoAddress || msg.sender == cooAddress);\r\n    _;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO\r\n  /// @param _newCEO The address of the new CEO\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n    ceoAddress = _newCEO;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the COO. Only available to the current CEO\r\n  /// @param _newCOO The address of the new COO\r\n  function setCOO(address _newCOO) public onlyCEO {\r\n    require(_newCOO != address(0));\r\n    cooAddress = _newCOO;\r\n  }\r\n\r\n  /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /// @dev Modifier to allow actions only when the contract IS paused\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /// @dev Pause the smart contract. Only can be called by the CEO\r\n  function pause() public onlyCEO whenNotPaused {\r\n     paused = true;\r\n  }\r\n\r\n  /// @dev Unpauses the smart contract. Only can be called by the CEO\r\n  function unpause() public onlyCEO whenPaused {\r\n    paused = false;\r\n  }\r\n}\r\n\r\n\r\ncontract RacingClubPresale is AccessControl {\r\n  using SafeMath for uint256;\r\n\r\n  // Max number of cars (includes sales and gifts)\r\n  uint256 public constant MAX_CARS = 999;\r\n\r\n  // Max number of cars to gift (includes unicorns)\r\n  uint256 public constant MAX_CARS_TO_GIFT = 99;\r\n\r\n  // Max number of unicorn cars to gift\r\n  uint256 public constant MAX_UNICORNS_TO_GIFT = 9;\r\n\r\n  // End date for the presale. No purchases can be made after this date.\r\n  // Thursday, May 10, 2018 11:59:59 PM\r\n  uint256 public constant PRESALE_END_TIMESTAMP = 1525996799;\r\n\r\n  // Price limits to decrease the appreciation rate\r\n  uint256 private constant PRICE_LIMIT_1 = 0.1 ether;\r\n\r\n  // Appreciation steps for each price limit\r\n  uint256 private constant APPRECIATION_STEP_1 = 0.0005 ether;\r\n  uint256 private constant APPRECIATION_STEP_2 = 0.0001 ether;\r\n\r\n  // Max count which can be bought with one transaction\r\n  uint256 private constant MAX_ORDER = 5;\r\n\r\n  // 0 - 9 valid Id's for cars\r\n  uint256 private constant CAR_MODELS = 10;\r\n\r\n  // The special car (the most rarest one) which can't be picked even with MAX_ORDER\r\n  uint256 public constant UNICORN_ID = 0;\r\n\r\n  // Maps any number from 0 - 255 to 0 - 9 car Id\r\n  uint256[] private PROBABILITY_MAP = [4, 18, 32, 46, 81, 116, 151, 186, 221, 256];\r\n\r\n  // Step by which the price should be changed\r\n  uint256 public appreciationStep = APPRECIATION_STEP_1;\r\n\r\n  // Current price of the car. The price appreciation is happening with each new sale.\r\n  uint256 public currentPrice = 0.001 ether;\r\n\r\n  // Overall cars count\r\n  uint256 public carsCount;\r\n\r\n  // Overall gifted cars count\r\n  uint256 public carsGifted;\r\n\r\n  // Gifted unicorn cars count\r\n  uint256 public unicornsGifted;\r\n\r\n  // A mapping from addresses to the carIds\r\n  mapping (address => uint256[]) private ownerToCars;\r\n\r\n  // A mapping from addresses to the upgrade packages\r\n  mapping (address => uint256) private ownerToUpgradePackages;\r\n\r\n  // Events\r\n  event CarsPurchased(address indexed _owner, uint256[] _carIds, bool _upgradePackage, uint256 _pricePayed);\r\n  event CarGifted(address indexed _receiver, uint256 _carId, bool _upgradePackage);\r\n\r\n  // Buy a car. The cars are unique within the order.\r\n  // If order count is 5 then one car can be preselected.\r\n  function purchaseCars(uint256 _carsToBuy, uint256 _pickedId, bool _upgradePackage) public payable whenNotPaused {\r\n    require(now < PRESALE_END_TIMESTAMP);\r\n    require(_carsToBuy > 0 && _carsToBuy <= MAX_ORDER);\r\n    require(carsCount + _carsToBuy <= MAX_CARS);\r\n\r\n    uint256 priceToPay = calculatePrice(_carsToBuy, _upgradePackage);\r\n    require(msg.value >= priceToPay);\r\n\r\n    // return excess ether\r\n    uint256 excess = msg.value.sub(priceToPay);\r\n    if (excess > 0) {\r\n      msg.sender.transfer(excess);\r\n    }\r\n\r\n    // initialize an array for the new cars\r\n    uint256[] memory randomCars = new uint256[](_carsToBuy);\r\n    // shows from which point the randomCars array should be filled\r\n    uint256 startFrom = 0;\r\n\r\n    // for MAX_ORDERs the first item is user picked\r\n    if (_carsToBuy == MAX_ORDER) {\r\n      require(_pickedId < CAR_MODELS);\r\n      require(_pickedId != UNICORN_ID);\r\n\r\n      randomCars[0] = _pickedId;\r\n      startFrom = 1;\r\n    }\r\n    fillRandomCars(randomCars, startFrom);\r\n\r\n    // add new cars to the owner's list\r\n    for (uint256 i = 0; i < randomCars.length; i++) {\r\n      ownerToCars[msg.sender].push(randomCars[i]);\r\n    }\r\n\r\n    // increment upgrade packages\r\n    if (_upgradePackage) {\r\n      ownerToUpgradePackages[msg.sender] += _carsToBuy;\r\n    }\r\n\r\n    CarsPurchased(msg.sender, randomCars, _upgradePackage, priceToPay);\r\n\r\n    carsCount += _carsToBuy;\r\n    currentPrice += _carsToBuy * appreciationStep;\r\n\r\n    // update this once per purchase\r\n    // to save the gas and to simplify the calculations\r\n    updateAppreciationStep();\r\n  }\r\n\r\n  // MAX_CARS_TO_GIFT amout of cars are dedicated for gifts\r\n  function giftCar(address _receiver, uint256 _carId, bool _upgradePackage) public onlyCLevel {\r\n    // NOTE\r\n    // Some promo results will be calculated after the presale,\r\n    // so there is no need to check for the PRESALE_END_TIMESTAMP.\r\n\r\n    require(_carId < CAR_MODELS);\r\n    require(_receiver != address(0));\r\n\r\n    // check limits\r\n    require(carsCount < MAX_CARS);\r\n    require(carsGifted < MAX_CARS_TO_GIFT);\r\n    if (_carId == UNICORN_ID) {\r\n      require(unicornsGifted < MAX_UNICORNS_TO_GIFT);\r\n    }\r\n\r\n    ownerToCars[_receiver].push(_carId);\r\n    if (_upgradePackage) {\r\n      ownerToUpgradePackages[_receiver] += 1;\r\n    }\r\n\r\n    CarGifted(_receiver, _carId, _upgradePackage);\r\n\r\n    carsCount += 1;\r\n    carsGifted += 1;\r\n    if (_carId == UNICORN_ID) {\r\n      unicornsGifted += 1;\r\n    }\r\n\r\n    currentPrice += appreciationStep;\r\n    updateAppreciationStep();\r\n  }\r\n\r\n  function calculatePrice(uint256 _carsToBuy, bool _upgradePackage) private view returns (uint256) {\r\n    // Arithmetic Sequence\r\n    // A(n) = A(0) + (n - 1) * D\r\n    uint256 lastPrice = currentPrice + (_carsToBuy - 1) * appreciationStep;\r\n\r\n    // Sum of the First n Terms of an Arithmetic Sequence\r\n    // S(n) = n * (a(1) + a(n)) / 2\r\n    uint256 priceToPay = _carsToBuy * (currentPrice + lastPrice) / 2;\r\n\r\n    // add an extra amount for the upgrade package\r\n    if (_upgradePackage) {\r\n      if (_carsToBuy < 3) {\r\n        priceToPay = priceToPay * 120 / 100; // 20% extra\r\n      } else if (_carsToBuy < 5) {\r\n        priceToPay = priceToPay * 115 / 100; // 15% extra\r\n      } else {\r\n        priceToPay = priceToPay * 110 / 100; // 10% extra\r\n      }\r\n    }\r\n\r\n    return priceToPay;\r\n  }\r\n\r\n  // Fill unique random cars into _randomCars starting from _startFrom\r\n  // as some slots may be already filled\r\n  function fillRandomCars(uint256[] _randomCars, uint256 _startFrom) private view {\r\n    // All random cars for the current purchase are generated from this 32 bytes.\r\n    // All purchases within a same block will get different car combinations\r\n    // as current price is changed at the end of the purchase.\r\n    //\r\n    // We don't need super secure random algorithm as it's just presale\r\n    // and if someone can time the block and grab the desired car we are just happy for him / her\r\n    bytes32 rand32 = keccak256(currentPrice, now);\r\n    uint256 randIndex = 0;\r\n    uint256 carId;\r\n\r\n    for (uint256 i = _startFrom; i < _randomCars.length; i++) {\r\n      do {\r\n        // the max number for one purchase is limited to 5\r\n        // 32 tries are more than enough to generate 5 unique numbers\r\n        require(randIndex < 32);\r\n        carId = generateCarId(uint8(rand32[randIndex]));\r\n        randIndex++;\r\n      } while(alreadyContains(_randomCars, carId, i));\r\n      _randomCars[i] = carId;\r\n    }\r\n  }\r\n\r\n  // Generate a car ID from the given serial number (0 - 255)\r\n  function generateCarId(uint256 _serialNumber) private view returns (uint256) {\r\n    for (uint256 i = 0; i < PROBABILITY_MAP.length; i++) {\r\n      if (_serialNumber < PROBABILITY_MAP[i]) {\r\n        return i;\r\n      }\r\n    }\r\n    // we should not reach to this point\r\n    assert(false);\r\n  }\r\n\r\n  // Check if the given value is already in the list.\r\n  // By default all items are 0 so _to is used explicitly to validate 0 values.\r\n  function alreadyContains(uint256[] _list, uint256 _value, uint256 _to) private pure returns (bool) {\r\n    for (uint256 i = 0; i < _to; i++) {\r\n      if (_list[i] == _value) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function updateAppreciationStep() private {\r\n    // this method is called once per purcahse\r\n    // so use 'greater than' not to miss the limit\r\n    if (currentPrice > PRICE_LIMIT_1) {\r\n      // don't update if there is no change\r\n      if (appreciationStep != APPRECIATION_STEP_2) {\r\n        appreciationStep = APPRECIATION_STEP_2;\r\n      }\r\n    }\r\n  }\r\n\r\n  function carCountOf(address _owner) public view returns (uint256 _carCount) {\r\n    return ownerToCars[_owner].length;\r\n  }\r\n\r\n  function carOfByIndex(address _owner, uint256 _index) public view returns (uint256 _carId) {\r\n    return ownerToCars[_owner][_index];\r\n  }\r\n\r\n  function carsOf(address _owner) public view returns (uint256[] _carIds) {\r\n    return ownerToCars[_owner];\r\n  }\r\n\r\n  function upgradePackageCountOf(address _owner) public view returns (uint256 _upgradePackageCount) {\r\n    return ownerToUpgradePackages[_owner];\r\n  }\r\n\r\n  function allOf(address _owner) public view returns (uint256[] _carIds, uint256 _upgradePackageCount) {\r\n    return (ownerToCars[_owner], ownerToUpgradePackages[_owner]);\r\n  }\r\n\r\n  function getStats() public view returns (uint256 _carsCount, uint256 _carsGifted, uint256 _unicornsGifted, uint256 _currentPrice, uint256 _appreciationStep) {\r\n    return (carsCount, carsGifted, unicornsGifted, currentPrice, appreciationStep);\r\n  }\r\n\r\n  function withdrawBalance(address _to, uint256 _amount) public onlyCEO {\r\n    if (_amount == 0) {\r\n      _amount = address(this).balance;\r\n    }\r\n\r\n    if (_to == address(0)) {\r\n      ceoAddress.transfer(_amount);\r\n    } else {\r\n      _to.transfer(_amount);\r\n    }\r\n  }\r\n\r\n\r\n  // Raffle\r\n  // max count of raffle participants\r\n  uint256 public raffleLimit = 50;\r\n\r\n  // list of raffle participants\r\n  address[] private raffleList;\r\n\r\n  // Events\r\n  event Raffle2Registered(address indexed _iuser, address _user);\r\n  event Raffle3Registered(address _user);\r\n\r\n  function isInRaffle(address _address) public view returns (bool) {\r\n    for (uint256 i = 0; i < raffleList.length; i++) {\r\n      if (raffleList[i] == _address) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function getRaffleStats() public view returns (address[], uint256) {\r\n    return (raffleList, raffleLimit);\r\n  }\r\n\r\n  function drawRaffle(uint256 _carId) public onlyCLevel {\r\n    bytes32 rand32 = keccak256(now, raffleList.length);\r\n    uint256 winner = uint(rand32) % raffleList.length;\r\n\r\n    giftCar(raffleList[winner], _carId, true);\r\n  }\r\n\r\n  function resetRaffle() public onlyCLevel {\r\n    delete raffleList;\r\n  }\r\n\r\n  function setRaffleLimit(uint256 _limit) public onlyCLevel {\r\n    raffleLimit = _limit;\r\n  }\r\n\r\n  // Raffle v1\r\n  function registerForRaffle() public {\r\n    require(raffleList.length < raffleLimit);\r\n    require(!isInRaffle(msg.sender));\r\n    raffleList.push(msg.sender);\r\n  }\r\n\r\n  // Raffle v2\r\n  function registerForRaffle2() public {\r\n    Raffle2Registered(msg.sender, msg.sender);\r\n  }\r\n\r\n  // Raffle v3\r\n  function registerForRaffle3() public payable {\r\n    Raffle3Registered(msg.sender);\r\n  }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRaffleStats\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raffleLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"upgradePackageCountOf\",\"outputs\":[{\"name\":\"_upgradePackageCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unicornsGifted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"carOfByIndex\",\"outputs\":[{\"name\":\"_carId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerForRaffle2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"carCountOf\",\"outputs\":[{\"name\":\"_carCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"allOf\",\"outputs\":[{\"name\":\"_carIds\",\"type\":\"uint256[]\"},{\"name\":\"_upgradePackageCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appreciationStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetRaffle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isInRaffle\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerForRaffle3\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_carId\",\"type\":\"uint256\"}],\"name\":\"drawRaffle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_END_TIMESTAMP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerForRaffle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CARS_TO_GIFT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"carsOf\",\"outputs\":[{\"name\":\"_carIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"carsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"name\":\"_carsCount\",\"type\":\"uint256\"},{\"name\":\"_carsGifted\",\"type\":\"uint256\"},{\"name\":\"_unicornsGifted\",\"type\":\"uint256\"},{\"name\":\"_currentPrice\",\"type\":\"uint256\"},{\"name\":\"_appreciationStep\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_carsToBuy\",\"type\":\"uint256\"},{\"name\":\"_pickedId\",\"type\":\"uint256\"},{\"name\":\"_upgradePackage\",\"type\":\"bool\"}],\"name\":\"purchaseCars\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"carsGifted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setRaffleLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNICORN_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UNICORNS_TO_GIFT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CARS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_carId\",\"type\":\"uint256\"},{\"name\":\"_upgradePackage\",\"type\":\"bool\"}],\"name\":\"giftCar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_carIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"_upgradePackage\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_pricePayed\",\"type\":\"uint256\"}],\"name\":\"CarsPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_carId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_upgradePackage\",\"type\":\"bool\"}],\"name\":\"CarGifted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_iuser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"Raffle2Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"Raffle3Registered\",\"type\":\"event\"}]","ContractName":"RacingClubPresale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6b3c02281e44d3920ae0ff9a7f1155c854ad4151145f4389d2d04052f840d69d"}]}