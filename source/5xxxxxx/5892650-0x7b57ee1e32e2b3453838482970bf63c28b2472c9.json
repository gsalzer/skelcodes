{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// token contract interface\r\ninterface Token{\r\n    function balanceOf(address user) external returns(uint256);\r\n    function transfer(address to, uint256 amount) external returns(bool);\r\n}\r\n\r\ncontract Safe{\r\n    using SafeMath for uint256;\r\n    \r\n    // counter for signing transactions\r\n    uint8 public count;\r\n    \r\n    uint256 internal end;\r\n    uint256 internal timeOutAuthentication;\r\n    \r\n    // arrays of safe keys\r\n    mapping (address => bool) internal safeKeys;\r\n    address [] internal massSafeKeys = new address[](4);\r\n    \r\n    // array of keys that signed the transaction\r\n    mapping (address => bool) internal signKeys;\r\n    \r\n    // free amount in safe\r\n    uint256 internal freeAmount; \r\n    // event transferring money to safe\r\n    bool internal tranche;\r\n    \r\n    // fixing lockup in safe\r\n    bool internal lockupIsSet;\r\n    \r\n    // lockup of safe\r\n    uint256 internal mainLockup; \r\n    \r\n    address internal lastSafeKey;\r\n    \r\n    Token public token;\r\n    \r\n    // Amount of cells\r\n    uint256 public countOfCell;\r\n    \r\n    // cell structure\r\n    struct _Cell{\r\n        uint256 lockup;\r\n        uint256 balance;\r\n        bool exist;\r\n        uint256 timeOfDeposit;\r\n    }\r\n    \r\n    // cell addresses\r\n    mapping (address => _Cell) internal userCells;\r\n    \r\n    event CreateCell(address indexed key);\r\n    event Deposit(address indexed key, uint256 balance);\r\n    event Delete(address indexed key);\r\n    event Edit(address indexed key, uint256 lockup);\r\n    event Withdraw(address indexed who, uint256 balance);\r\n    event InternalTransfer(address indexed from, address indexed to, uint256 balance);\r\n\r\n    modifier firstLevel() {\r\n        require(msg.sender == lastSafeKey);\r\n        require(count>=1);\r\n        require(now < end);\r\n        _;\r\n    }\r\n    \r\n    modifier secondLevel() {\r\n        require(msg.sender == lastSafeKey);\r\n        require(count>=2);\r\n        require(now < end);\r\n        _;\r\n    }\r\n    \r\n    modifier thirdLevel() {\r\n        require(msg.sender == lastSafeKey);\r\n        require(count>=3);\r\n        require(now < end);\r\n        _;\r\n    }\r\n    \r\n    constructor (address _first, address _second, address _third, address _fourth) public {\r\n        require(\r\n            _first != _second && \r\n            _first != _third && \r\n            _first != _fourth && \r\n            _second != _third &&\r\n            _second != _fourth &&\r\n            _third != _fourth &&\r\n            _first != 0x0 &&\r\n            _second != 0x0 &&\r\n            _third != 0x0 &&\r\n            _fourth != 0x0\r\n        );\r\n        safeKeys[_first] = true;\r\n        safeKeys[_second] = true;\r\n        safeKeys[_third] = true;\r\n        safeKeys[_fourth] = true;\r\n        massSafeKeys[0] = _first;\r\n        massSafeKeys[1] = _second;\r\n        massSafeKeys[2] = _third;\r\n        massSafeKeys[3] = _fourth;\r\n        timeOutAuthentication = 1 hours;\r\n    }\r\n    \r\n    function AuthStart() public returns(bool){\r\n        require(safeKeys[msg.sender]);\r\n        require(timeOutAuthentication >=0);\r\n        require(!signKeys[msg.sender]);\r\n        signKeys[msg.sender] = true;\r\n        count++;\r\n        end = now.add(timeOutAuthentication);\r\n        lastSafeKey = msg.sender;\r\n        return true;\r\n    }\r\n    \r\n    // completion of operation with safe-keys\r\n    function AuthEnd() public returns(bool){\r\n        require (safeKeys[msg.sender]);\r\n        for(uint i=0; i<4; i++){\r\n          signKeys[massSafeKeys[i]] = false;\r\n        }\r\n        count = 0;\r\n        end = 0;\r\n        lastSafeKey = 0x0;\r\n        return true;\r\n    }\r\n    \r\n    function getTimeOutAuthentication() firstLevel public view returns(uint256){\r\n        return timeOutAuthentication;\r\n    }\r\n    \r\n    function getFreeAmount() firstLevel public view returns(uint256){\r\n        return freeAmount;\r\n    }\r\n    \r\n    function getLockupCell(address _user) firstLevel public view returns(uint256){\r\n        return userCells[_user].lockup;\r\n    }\r\n    \r\n    function getBalanceCell(address _user) firstLevel public view returns(uint256){\r\n        return userCells[_user].balance;\r\n    }\r\n    \r\n    function getExistCell(address _user) firstLevel public view returns(bool){\r\n        return userCells[_user].exist;\r\n    }\r\n    \r\n    function getSafeKey(uint i) firstLevel view public returns(address){\r\n        return massSafeKeys[i];\r\n    }\r\n    \r\n    // withdrawal tokens from safe for issuer\r\n    function AssetWithdraw(address _to, uint256 _balance) secondLevel public returns(bool){\r\n        require(_balance<=freeAmount);\r\n        require(now>=mainLockup);\r\n        freeAmount = freeAmount.sub(_balance);\r\n        token.transfer(_to, _balance);\r\n        emit Withdraw(this, _balance);\r\n        return true;\r\n    }\r\n    \r\n    function setCell(address _cell, uint256 _lockup) secondLevel public returns(bool){\r\n        require(userCells[_cell].lockup==0 && userCells[_cell].balance==0);\r\n        require(!userCells[_cell].exist);\r\n        require(_lockup >= mainLockup);\r\n        userCells[_cell].lockup = _lockup;\r\n        userCells[_cell].exist = true;\r\n        countOfCell = countOfCell.add(1);\r\n        emit CreateCell(_cell);\r\n        return true;\r\n    }\r\n\r\n    function deleteCell(address _key) secondLevel public returns(bool){\r\n        require(getBalanceCell(_key)==0);\r\n        require(userCells[_key].exist);\r\n        userCells[_key].lockup = 0;\r\n        userCells[_key].exist = false;\r\n        countOfCell = countOfCell.sub(1);\r\n        emit Delete(_key);\r\n        return true;\r\n    }\r\n    \r\n    // change parameters of the cell\r\n    function editCell(address _key, uint256 _lockup) secondLevel public returns(bool){\r\n        require(getBalanceCell(_key)==0);\r\n        require(_lockup>= mainLockup);\r\n        require(userCells[_key].exist);\r\n        userCells[_key].lockup = _lockup;\r\n        emit Edit(_key, _lockup);\r\n        return true;\r\n    }\r\n\r\n    function depositCell(address _key, uint256 _balance) secondLevel public returns(bool){\r\n        require(userCells[_key].exist);\r\n        require(_balance<=freeAmount);\r\n        freeAmount = freeAmount.sub(_balance);\r\n        userCells[_key].balance = userCells[_key].balance.add(_balance);\r\n        userCells[_key].timeOfDeposit = now;\r\n        emit Deposit(_key, _balance);\r\n        return true;\r\n    }\r\n    \r\n    function changeDepositCell(address _key, uint256 _balance) secondLevel public returns(bool){\r\n        require(userCells[_key].timeOfDeposit.add(1 hours)>now);\r\n        userCells[_key].balance = userCells[_key].balance.sub(_balance);\r\n        freeAmount = freeAmount.add(_balance);\r\n        return true;\r\n    }\r\n    \r\n    // installation of a lockup for safe, \r\n    // fixing free amount on balance, \r\n    // token installation\r\n    // (run once)\r\n    function setContract(Token _token, uint256 _lockup) thirdLevel public returns(bool){\r\n        require(_token != address(0x0));\r\n        require(!lockupIsSet);\r\n        require(!tranche);\r\n        token = _token;\r\n        freeAmount = getMainBalance();\r\n        mainLockup = _lockup;\r\n        tranche = true;\r\n        lockupIsSet = true;\r\n        return true;\r\n    }\r\n    \r\n    // change of safe-key\r\n    function changeKey(address _oldKey, address _newKey) thirdLevel public returns(bool){\r\n        require(safeKeys[_oldKey]);\r\n        require(_newKey != 0x0);\r\n        for(uint i=0; i<4; i++){\r\n          if(massSafeKeys[i]==_oldKey){\r\n            massSafeKeys[i] = _newKey;\r\n          }\r\n        }\r\n        safeKeys[_oldKey] = false;\r\n        safeKeys[_newKey] = true;\r\n        \r\n        if(_oldKey==lastSafeKey){\r\n            lastSafeKey = _newKey;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    function setTimeOutAuthentication(uint256 _time) thirdLevel public returns(bool){\r\n        require(\r\n            _time > 0 && \r\n            timeOutAuthentication != _time &&\r\n            _time <= (5000 * 1 minutes)\r\n        );\r\n        timeOutAuthentication = _time;\r\n        return true;\r\n    }\r\n\r\n    function withdrawCell(uint256 _balance) public returns(bool){\r\n        require(userCells[msg.sender].balance >= _balance);\r\n        require(now >= userCells[msg.sender].lockup);\r\n        userCells[msg.sender].balance = userCells[msg.sender].balance.sub(_balance);\r\n        token.transfer(msg.sender, _balance);\r\n        emit Withdraw(msg.sender, _balance);\r\n        return true;\r\n    }\r\n    \r\n    // transferring tokens from one cell to another\r\n    function transferCell(address _to, uint256 _balance) public returns(bool){\r\n        require(userCells[msg.sender].balance >= _balance);\r\n        require(userCells[_to].lockup>=userCells[msg.sender].lockup);\r\n        require(userCells[_to].exist);\r\n        userCells[msg.sender].balance = userCells[msg.sender].balance.sub(_balance);\r\n        userCells[_to].balance = userCells[_to].balance.add(_balance);\r\n        emit InternalTransfer(msg.sender, _to, _balance);\r\n        return true;\r\n    }\r\n    \r\n    // information on balance of cell for holder\r\n    \r\n    function getInfoCellBalance() view public returns(uint256){\r\n        return userCells[msg.sender].balance;\r\n    }\r\n    \r\n    // information on lockup of cell for holder\r\n    \r\n    function getInfoCellLockup() view public returns(uint256){\r\n        return userCells[msg.sender].lockup;\r\n    }\r\n    \r\n    function getMainBalance() public view returns(uint256){\r\n        return token.balanceOf(this);\r\n    }\r\n    \r\n    function getMainLockup() public view returns(uint256){\r\n        return mainLockup;\r\n    }\r\n    \r\n    function isTimeOver() view public returns(bool){\r\n        if(now > end){\r\n            return true;\r\n        } else{\r\n            return false;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"transferCell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"},{\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"changeDepositCell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFreeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBalanceCell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLockupCell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"AuthStart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInfoCellLockup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getSafeKey\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"withdrawCell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldKey\",\"type\":\"address\"},{\"name\":\"_newKey\",\"type\":\"address\"}],\"name\":\"changeKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTimeOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setTimeOutAuthentication\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"AuthEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"deleteCell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInfoCellBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getExistCell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfCell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cell\",\"type\":\"address\"},{\"name\":\"_lockup\",\"type\":\"uint256\"}],\"name\":\"setCell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"AssetWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMainBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"},{\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"depositCell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_lockup\",\"type\":\"uint256\"}],\"name\":\"setContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeOutAuthentication\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMainLockup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"},{\"name\":\"_lockup\",\"type\":\"uint256\"}],\"name\":\"editCell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_first\",\"type\":\"address\"},{\"name\":\"_second\",\"type\":\"address\"},{\"name\":\"_third\",\"type\":\"address\"},{\"name\":\"_fourth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"key\",\"type\":\"address\"}],\"name\":\"CreateCell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"key\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"key\",\"type\":\"address\"}],\"name\":\"Delete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"key\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lockup\",\"type\":\"uint256\"}],\"name\":\"Edit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"InternalTransfer\",\"type\":\"event\"}]","ContractName":"Safe","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000569568bbf1746bed90dbe09d1f5b7277a4edcdd200000000000000000000000063484617d5c8e1f43e082565f6ec6eb832475bed000000000000000000000000345b1842815e89f3ee2576a1c2b828e88ef28c0e0000000000000000000000002c9b963917bc924abf8136b9f4c751b6227ec1e7","Library":"","SwarmSource":"bzzr://40dab415c2ba6750ea9f60fd7ebbc6c3af23fe6d5e50cfb538022d49c256a4a4"}]}