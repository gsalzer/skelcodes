{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\ncontract SicBo is Owned {\r\n    using SafeMath for uint;\r\n\r\n    uint public LimitBottom = 0.05 ether;\r\n    uint public LimitTop = 0.2 ether;\r\n    \r\n    address public Drawer;\r\n\r\n    struct Game {\r\n        bytes32 Bets;\r\n        bytes32 SecretKey_P;\r\n        bool isPlay;\r\n        bool isPay;\r\n        uint Result;\r\n        uint Time;\r\n        address Buyer;\r\n    }\r\n    \r\n    mapping (bytes32 => Game) public TicketPool;\r\n    \r\n    event SubmitTicket(bytes32 indexed SecretKey_D_hash, uint Bet_amount, bytes32 Bet, bytes32 SecretKey_P, address Player);   \r\n    event Result(bytes32 indexed SecretKey_D_hash, bytes32 indexed SecretKey_D,address indexed Buyer, uint Dice1, uint Dice2, uint Dice3, uint Game_Result, uint time);\r\n    event Pay(bytes32 indexed SecretKey_D_hash, address indexed Buyer, uint Game_Result);\r\n    event Owe(bytes32 indexed SecretKey_D_hash, address indexed Buyer, uint Game_Result);\r\n    event OwePay(bytes32 indexed SecretKey_D_hash, address indexed Buyer, uint Game_Result);\r\n    \r\n    function SicBo (address drawer_) public {\r\n        Drawer = drawer_;\r\n    }\r\n    \r\n    function submit(bytes32 Bets, bytes32 secretKey_P, bytes32 secretKey_D_hash) payable public {\r\n        \r\n        require(TicketPool[secretKey_D_hash].Time == 0);\r\n        require(msg.value >= LimitBottom && msg.value <= LimitTop);\r\n\r\n        uint  bet_total_amount = 0;\r\n        for (uint i = 0; i < 29; i++) {\r\n            if(Bets[i] == 0x00) continue;\r\n            \r\n            uint bet_amount_ = uint(Bets[i]).mul(10000000000000000);\r\n\r\n            bet_total_amount = bet_total_amount.add(bet_amount_);\r\n        }\r\n        \r\n        if(bet_total_amount == msg.value){\r\n            SubmitTicket(secretKey_D_hash, msg.value, Bets, secretKey_P, msg.sender);\r\n            TicketPool[secretKey_D_hash] = Game(Bets,secretKey_P,false,false,0,block.timestamp,msg.sender);\r\n        }else{\r\n            revert();\r\n        }\r\n        \r\n    }\r\n    \r\n    function award(bytes32 secretKey_D) public {\r\n        \r\n        require(Drawer == msg.sender);\r\n        \r\n        bytes32 secretKey_D_hash = keccak256(secretKey_D);\r\n        \r\n        Game local_ = TicketPool[secretKey_D_hash];\r\n        \r\n        require(local_.Time != 0 && !local_.isPlay);\r\n        \r\n        uint dice1 = uint(keccak256(\"Pig World ia a Awesome game place\", local_.SecretKey_P, secretKey_D)) % 6 + 1;\r\n        uint dice2 = uint(keccak256(secretKey_D, \"So you will like us so much!!!!\", local_.SecretKey_P)) % 6 + 1;\r\n        uint dice3 = uint(keccak256(local_.SecretKey_P, secretKey_D, \"Don't think this is unfair\", \"Our game are always provably fair...\")) % 6 + 1;\r\n    \r\n        uint amount = 0;\r\n        uint total = dice1 + dice2 + dice3;\r\n        \r\n        for (uint ii = 0; ii < 29; ii++) {\r\n            if(local_.Bets[ii] == 0x00) continue;\r\n            \r\n            uint bet_amount = uint(local_.Bets[ii]) * 10000000000000000;\r\n            \r\n            if(ii >= 23)\r\n                if (dice1 == ii - 22 || dice2 == ii - 22 || dice3 == ii - 22) {\r\n                    uint8 count = 1;\r\n                    if (dice1 == ii - 22) count++;\r\n                    if (dice2 == ii - 22) count++;\r\n                    if (dice3 == ii - 22) count++;\r\n                    amount += count * bet_amount;\r\n                }\r\n\r\n            if(ii <= 8)\r\n                if (dice1 == dice2 && dice2 == dice3 && dice1 == dice3) {\r\n                    if (ii == 8) {\r\n                        amount += 31 * bet_amount;\r\n                    }\r\n    \r\n                    if(ii >= 2 && ii <= 7)\r\n                        if (dice1 == ii - 1) {\r\n                            amount += 181 * bet_amount;\r\n                        }\r\n    \r\n                } else {\r\n                    \r\n                    if (ii == 0 && total <= 10) {\r\n                        amount += 2 * bet_amount;\r\n                    }\r\n                    \r\n                    if (ii == 1 && total >= 11) {\r\n                        amount += 2 * bet_amount;\r\n                    }\r\n                }\r\n                \r\n            if(ii >= 9 && ii <= 22){\r\n                if (ii == 9 && total == 4) {\r\n                    amount += 61 * bet_amount;\r\n                }\r\n                if (ii == 10 && total == 5) {\r\n                    amount += 31 * bet_amount;\r\n                }\r\n                if (ii == 11 && total == 6) {\r\n                    amount += 18 * bet_amount;\r\n                }\r\n                if (ii == 12 && total == 7) {\r\n                    amount += 13 * bet_amount;\r\n                }\r\n                if (ii == 13 && total == 8) {\r\n                    amount += 9 * bet_amount;\r\n                }\r\n                if (ii == 14 && total == 9) {\r\n                    amount += 8 * bet_amount;\r\n                }\r\n                if (ii == 15 && total == 10) {\r\n                    amount += 7 * bet_amount;\r\n                }\r\n                if (ii == 16 && total == 11) {\r\n                    amount += 7 * bet_amount;\r\n                }\r\n                if (ii == 17 && total == 12) {\r\n                    amount += 8 * bet_amount;\r\n                }\r\n                if (ii == 18 && total == 13) {\r\n                    amount += 9 * bet_amount;\r\n                }\r\n                if (ii == 19 && total == 14) {\r\n                    amount += 13 * bet_amount;\r\n                }\r\n                if (ii == 20 && total == 15) {\r\n                    amount += 18 * bet_amount;\r\n                }\r\n                if (ii == 21 && total == 16) {\r\n                    amount += 31 * bet_amount;\r\n                }\r\n                if (ii == 22 && total == 17) {\r\n                    amount += 61 * bet_amount;\r\n                }\r\n            }\r\n        }\r\n        \r\n        Result(secretKey_D_hash, secretKey_D, TicketPool[secretKey_D_hash].Buyer, dice1, dice2, dice3, amount, block.timestamp);\r\n        TicketPool[secretKey_D_hash].isPlay = true;\r\n        \r\n        if(amount != 0){\r\n            TicketPool[secretKey_D_hash].Result = amount;\r\n            if (address(this).balance >= amount && TicketPool[secretKey_D_hash].Buyer.send(amount)) {\r\n                TicketPool[secretKey_D_hash].isPay = true;\r\n                Pay(secretKey_D_hash,TicketPool[secretKey_D_hash].Buyer, amount);\r\n            } else {\r\n                Owe(secretKey_D_hash, TicketPool[secretKey_D_hash].Buyer, amount);\r\n                TicketPool[secretKey_D_hash].isPay = false;\r\n            } \r\n         } else {\r\n            TicketPool[secretKey_D_hash].isPay = true;\r\n        }\r\n        \r\n    }\r\n    \r\n    function () public payable {\r\n       \r\n    }\r\n    \r\n    function withdraw(uint withdrawEther_) public onlyOwner {\r\n        msg.sender.transfer(withdrawEther_);\r\n    }\r\n    \r\n    function changeLimit(uint _bottom, uint _top) public onlyOwner {\r\n        LimitBottom = _bottom;\r\n        LimitTop = _top;\r\n    }\r\n    \r\n    function changeDrawer(address drawer_) public onlyOwner {\r\n        Drawer = drawer_;\r\n    }\r\n    \r\n    function getisPlay(bytes32 secretKey_D_hash) public constant returns (bool isplay){\r\n        return TicketPool[secretKey_D_hash].isPlay;\r\n    }\r\n    \r\n    function getTicketTime(bytes32 secretKey_D_hash) public constant returns (uint Time){\r\n        return TicketPool[secretKey_D_hash].Time;\r\n    }\r\n    \r\n    function chargeOwe(bytes32 secretKey_D_hash) public {\r\n        require(!TicketPool[secretKey_D_hash].isPay);\r\n        require(TicketPool[secretKey_D_hash].isPlay);\r\n        require(TicketPool[secretKey_D_hash].Result != 0);\r\n        \r\n        if(address(this).balance >= TicketPool[secretKey_D_hash].Result){\r\n            if (TicketPool[secretKey_D_hash].Buyer.send(TicketPool[secretKey_D_hash].Result)) {\r\n                TicketPool[secretKey_D_hash].isPay = true;\r\n                OwePay(secretKey_D_hash, TicketPool[secretKey_D_hash].Buyer, TicketPool[secretKey_D_hash].Result);\r\n            }\r\n        } \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"Drawer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawEther_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"TicketPool\",\"outputs\":[{\"name\":\"Bets\",\"type\":\"bytes32\"},{\"name\":\"SecretKey_P\",\"type\":\"bytes32\"},{\"name\":\"isPlay\",\"type\":\"bool\"},{\"name\":\"isPay\",\"type\":\"bool\"},{\"name\":\"Result\",\"type\":\"uint256\"},{\"name\":\"Time\",\"type\":\"uint256\"},{\"name\":\"Buyer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secretKey_D\",\"type\":\"bytes32\"}],\"name\":\"award\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"secretKey_D_hash\",\"type\":\"bytes32\"}],\"name\":\"getTicketTime\",\"outputs\":[{\"name\":\"Time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secretKey_D_hash\",\"type\":\"bytes32\"}],\"name\":\"chargeOwe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LimitBottom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bottom\",\"type\":\"uint256\"},{\"name\":\"_top\",\"type\":\"uint256\"}],\"name\":\"changeLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LimitTop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"drawer_\",\"type\":\"address\"}],\"name\":\"changeDrawer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"secretKey_D_hash\",\"type\":\"bytes32\"}],\"name\":\"getisPlay\",\"outputs\":[{\"name\":\"isplay\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Bets\",\"type\":\"bytes32\"},{\"name\":\"secretKey_P\",\"type\":\"bytes32\"},{\"name\":\"secretKey_D_hash\",\"type\":\"bytes32\"}],\"name\":\"submit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"drawer_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"SecretKey_D_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"Bet_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Bet\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"SecretKey_P\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"Player\",\"type\":\"address\"}],\"name\":\"SubmitTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"SecretKey_D_hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"SecretKey_D\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"Buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Dice1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Dice2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Dice3\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Game_Result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Result\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"SecretKey_D_hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"Buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Game_Result\",\"type\":\"uint256\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"SecretKey_D_hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"Buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Game_Result\",\"type\":\"uint256\"}],\"name\":\"Owe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"SecretKey_D_hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"Buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Game_Result\",\"type\":\"uint256\"}],\"name\":\"OwePay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SicBo","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005dcd8ce94e1ddb593afb02456af4442d3423bc97","Library":"","SwarmSource":"bzzr://8107cd7f82c29bd655d676a07c47fa44f9c278eb011f3d11fd2e52155897c384"}]}