{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/OpenZeppelin/openzeppelin-solidity\r\n *\r\n * The ODEEP token contract bases on the ERC20 standard token contracts \r\n * Company Optimum Consulting - Courbevoie\r\n * */\r\n \r\npragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/OpenZeppelin/openzeppelin-solidity\r\n */\r\ncontract Pausable is Ownable {\r\n\r\n  uint public endDate;\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS not paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(now >= endDate);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken, Pausable {\r\n    using SafeMath for uint256;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    require(_to != address(0));\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  }\r\n \r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken {\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256  _value)\r\n        public onlyOwner\r\n    {\r\n        require(_value > 0);\r\n\t\trequire(balances[msg.sender] >= _value);\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(burner, _value);\r\n    }\r\n    event Burn(address indexed burner, uint256  indexed value);\r\n} \r\n   \r\ncontract ODEEPToken is StandardToken , BurnableToken  {\r\n    using SafeMath for uint256;\r\n    string public constant name = \"ODEEP\";\r\n    string public constant symbol = \"ODEEP\";\r\n    uint8 public constant decimals = 18;\t\r\n\t\r\n\t// wallets address for allocation\t\r\n\taddress public Bounties_Wallet = 0x70F48becd584115E8FF298eA72D5EFE199526655; // 5% : Bounty\r\n\taddress public Team_Wallet = 0xd3186A1e1ECe80F2E1811904bfBF876e6ea27A41; // 8% : Equity & Team\r\n\taddress public OEM_Wallet = 0x4fD0e4E8EFDf55D2C1B41d504A2977a9f8453714; // 10% : Community Builting, Biz Dev\r\n\taddress public LA_wallet = 0xA0AaFDbDD5bE0d5f1A5f980331DEf9b5e106e587; //8% : Legal & advisors\r\n    \r\n\taddress public tokenWallet = 0x81cb9078e3c19842B201e2cCFC4B0f111d693D47;    \r\n\tuint256 public constant INITIAL_SUPPLY = 100000000 ether;\t\r\n\t\t\r\n\t/// Base exchange rate is set to 1 ETH = 560 ODEEP.\r\n\tuint256 tokenRate = 560; \r\n\t\t\r\n    function ODEEPToken() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n\t\t\r\n\t\t// InitialDistribution\r\n\t\t// 31% ---> 31000000\r\n\t\tbalances[Bounties_Wallet] = INITIAL_SUPPLY.mul(5).div(100) ;\r\n\t\tbalances[Team_Wallet] = INITIAL_SUPPLY.mul(8).div(100);\r\n\t\tbalances[OEM_Wallet] = INITIAL_SUPPLY.mul(10).div(100) ;\r\n\t\tbalances[LA_wallet] = INITIAL_SUPPLY.mul(8).div(100) ;\r\n\t\t\r\n\t\t// 69% ---> 69000000\r\n        balances[tokenWallet] = INITIAL_SUPPLY.mul(69).div(100);\r\n\t\t\r\n        endDate = _endDate;\r\n\t\t\t\t\r\n        emit Transfer(0x0, Bounties_Wallet, balances[Bounties_Wallet]);\r\n        emit Transfer(0x0, Team_Wallet, balances[Team_Wallet]);\r\n\t\temit Transfer(0x0, OEM_Wallet, balances[OEM_Wallet]);\r\n        emit Transfer(0x0, LA_wallet, balances[LA_wallet]);\r\n\t\t\t\t\r\n\t\temit Transfer(0x0, tokenWallet, balances[tokenWallet]);\r\n    }\r\n\r\n\t/**\r\n\t******** DATE PReICO - ICO */\r\n    uint public constant startDate = 1526292000; /// Start Pre-sale - Monday 14 May 2018 12:00:00\r\n    uint public constant endPreICO = 1528883999;/// Close Pre-Sale - Wednesday 13 June 2018 11:59:59\r\n\t\r\n\t/// HOT sale start time\r\n    uint constant preSale30 = startDate ; /// Start Pre-sale 30% - Monday 14 May 2018 12:00:00\r\n    uint constant preSale20 = 1527156000; /// Start Pre-sale 20% - Thursday 24 May 2018 12:00:00\r\n    uint constant preSale15 = 1528020000; /// Start Pre-sale 15% - Sunday 3 June 2018 12:00:00\r\n\t\t\t\r\n    uint public constant startICO = 1528884000; /// Start Main Sale - Wednesday 13 June 2018 12:00:00\r\n    uint public constant _endDate = 1532340000; /// Close Main Sale - Monday 23 July 2018 12:00:00 \r\n\r\n    struct Stat {\r\n        uint currentFundraiser;\r\n        uint btcAmount;\r\n        uint ethAmount;\r\n        uint txCounter;\r\n    }    \r\n    Stat public stat;    \r\n\t\r\n\t/// Maximum tokens to be allocated on the sale (69% of the hard cap)\r\n    uint public constant preIcoCap = 5000000 ether;\r\n    uint public constant IcoCap = 64000000 ether;\r\n\r\n\t/// token caps for each round\r\n\tuint256[3] private StepCaps = [\r\n        1250000 ether, \t/// 25% \r\n        1750000 ether, \t/// 35%\r\n        2000000 ether \t/// 40%\r\n    ];\t\r\n\tuint8[3] private StepDiscount = [30, 20, 15];\r\n\t\t\r\n    /**\r\n     * @dev modifier to allow actions only when Pre-ICO end date is now\r\n     */\r\n    modifier isFinished() {\r\n        require(now >= endDate);\r\n        _;\r\n    }\r\n\t\r\n\t/// @return the index of the current discount by date.\r\n    function currentStepIndexByDate() internal view returns (uint8 roundNum) {\r\n        require(now <= endPreICO); \r\n        if(now > preSale15) return 2;\r\n        if(now > preSale20) return 1;\r\n        if(now > preSale30) return 0;\r\n        else return 0;\r\n    }\r\n\t\r\n\t/// @return integer representing the index of the current sale round\r\n    function currentStepIndexAll() internal view returns (uint8 roundNum) {\r\n        roundNum = currentStepIndexByDate();\r\n        /// round determined by conjunction of both time and total sold tokens\r\n        while(roundNum < 2 && StepCaps[roundNum]<= 0) {\r\n            roundNum++;\r\n        }\r\n    }\r\n\t\r\n\t/// @dev Returns is Pre-Sale.\r\n    function isPreSale() internal view returns (bool) {\r\n        if (now >= startDate && now < endPreICO && preIcoCap.sub(stat.currentFundraiser) > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\t/// @dev Returns is Main Sale.\r\n    function isMainSale() internal view returns (bool) {\r\n        if (now >= startICO && now < endDate) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\t\r\n    /// @notice Buy tokens from contract by sending ether\r\n    function () payable public {\r\n        if (msg.value < 0.001 ether || (!isPreSale() && !isMainSale())) revert();\r\n        buyTokens();\r\n    }\t\r\n\t\r\n\t/// @dev Compute the amount of ODEEP token that can be purchased.\r\n    /// @param ethAmount Amount of Ether to purchase ODEEP.\r\n\tfunction computeTokenAmountAll(uint256 ethAmount) internal returns (uint256) {\r\n        uint256 tokenBase = ethAmount.mul(tokenRate);\r\n\t\tuint8 roundNum = currentStepIndexAll();\r\n\t\tuint256 tokens = tokenBase.mul(100)/(100 - (StepDiscount[roundNum]));\t\t\t\t\r\n\t\tif (roundNum == 2 && (StepCaps[0] > 0 || StepCaps[1] > 0))\r\n\t\t{\r\n\t\t\t/// All unsold pre-sale tokens are made available at the last pre-sale period (3% discount rate)\r\n\t\t\tStepCaps[2] = StepCaps[2] + StepCaps[0] + StepCaps[1];\r\n\t\t\tStepCaps[0] = 0;\r\n\t\t\tStepCaps[1] = 0;\r\n\t\t}\t\t\t\t\r\n\t\tuint256 balancePreIco = StepCaps[roundNum];\t\t\r\n\t\t\r\n\t\tif (balancePreIco == 0 && roundNum == 2) {\r\n\t\t} else {\r\n\t\t\t/// If tokens available on the pre-sale run out with the order, next pre-sale discount is applied to the remaining ETH\r\n\t\t\tif (balancePreIco < tokens) {\t\t\t\r\n\t\t\t\tuint256 toEthCaps = (balancePreIco.mul((100 - (StepDiscount[roundNum]))).div(100)).div(tokenRate);\t\t\t\r\n\t\t\t\tuint256 toReturnEth = ethAmount - toEthCaps ;\r\n\t\t\t\ttokens= balancePreIco;\r\n\t\t\t\tStepCaps[roundNum]=StepCaps[roundNum]-balancePreIco;\t\t\r\n\t\t\t\ttokens = tokens + computeTokenAmountAll(toReturnEth);\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tStepCaps[roundNum] = StepCaps[roundNum] - tokens;\r\n\t\t\t}\t\r\n\t\t}\t\t\r\n\t\treturn tokens ;\r\n    }\r\n\t\r\n    /// @notice Buy tokens from contract by sending ether\r\n    function buyTokens() internal {\t\t\r\n\t\t/// only accept a minimum amount of ETH?\r\n        require(msg.value >= 0.001 ether);\r\n        uint256 tokens ;\r\n\t\tuint256 xAmount = msg.value;\r\n\t\tuint256 toReturnEth;\r\n\t\tuint256 toTokensReturn;\r\n\t\tuint256 balanceIco ;\r\n\t\t\r\n\t\tif(isPreSale()){\t\r\n\t\t\tbalanceIco = preIcoCap.sub(stat.currentFundraiser);\r\n\t\t\ttokens =computeTokenAmountAll(xAmount);\r\n\t\t\tif (balanceIco < tokens) {\t\r\n\t\t\t\tuint8 roundNum = currentStepIndexAll();\r\n\t\t\t\ttoTokensReturn = tokens.sub(balanceIco);\t \r\n\t\t\t\ttoReturnEth = (toTokensReturn.mul((100 - (StepDiscount[roundNum]))).div(100)).div(tokenRate);\t\t\t\r\n\t\t\t}\t\t\t\r\n\t\t} else if (isMainSale()) {\r\n\t\t\tbalanceIco = IcoCap.add(preIcoCap);\r\n \t\t\tbalanceIco = balanceIco.sub(stat.currentFundraiser);\t\r\n\t\t\ttokens = xAmount.mul(tokenRate);\r\n\t\t\tif (balanceIco < tokens) {\r\n\t\t\t\ttoTokensReturn = tokens.sub(balanceIco);\r\n\t\t\t\ttoReturnEth = toTokensReturn.mul(tokenRate);\r\n\t\t\t}\t\t\t\r\n\t\t} else {\r\n            revert();\r\n        }\r\n\t\tif (tokens > 0 )\r\n\t\t{\r\n\t\t\tif (balanceIco < tokens) {\t\r\n\t\t\t\t/// return  ETH\r\n\t\t\t\tmsg.sender.transfer(toReturnEth);\r\n\t\t\t\t_EnvoisTokens(balanceIco, xAmount - toReturnEth);\r\n\t\t\t} else {\r\n\t\t\t\t_EnvoisTokens(tokens, xAmount);\r\n\t\t\t}\r\n\t\t} else {\r\n            revert();\r\n\t\t}\r\n    }\r\n\r\n\t/// @dev issue tokens for a single buyer\r\n\t/// @dev Issue token based on Ether received.\r\n    /// @param _amount the amount of tokens to send\r\n\t/// @param _ethers the amount of ether it will receive\r\n    function _EnvoisTokens(uint _amount, uint _ethers) internal {\r\n\t\t/// sends tokens ODEEP to the buyer\r\n        sendTokens(msg.sender, _amount);\r\n        stat.currentFundraiser += _amount;\r\n\t\t/// sends ether to the seller\r\n        tokenWallet.transfer(_ethers);\r\n        stat.ethAmount += _ethers;\r\n        stat.txCounter += 1;\r\n    }\r\n    \r\n\t/// @dev issue tokens for a single buyer\r\n\t/// @dev Issue token based on Ether received.\r\n    /// @param _to address to send to\r\n\t/// @param _amount the amount of tokens to send\r\n    function sendTokens(address _to, uint _amount) internal {\r\n        require(_amount <= balances[tokenWallet]);\r\n        balances[tokenWallet] -= _amount;\r\n        balances[_to] += _amount;\r\n        emit Transfer(tokenWallet, _to, _amount);\r\n    }\r\n\r\n\t/// @dev issue tokens for a single buyer\r\n    /// @param _to address to send to\r\n\t/// @param _amount the amount of tokens to send\r\n\t/// @param _btcAmount the amount of BitCoin\r\n    function _sendTokensManually(address _to, uint _amount, uint _btcAmount) public onlyOwner {\r\n        require(_to != address(0));\r\n        sendTokens(_to, _amount);\r\n        stat.currentFundraiser += _amount;\r\n        stat.btcAmount += _btcAmount;\r\n        stat.txCounter += 1;\r\n    }\r\n\t\r\n\t/// @dev modify Base exchange rate.\r\n\t/// @param newTokenRate the new rate. \r\n    function setTokenRate(uint newTokenRate) public onlyOwner {\r\n        tokenRate = newTokenRate;\r\n    }\r\n\t\r\n\t/// @dev Returns the current rate.\r\n\tfunction getTokenRate() public constant returns (uint) {\r\n        return (tokenRate);\r\n    }      \r\n\t\r\n\t/// @dev Returns the current Cap preIco.\r\n\t/// @param _roundNum the caps \r\n\tfunction getCapTab(uint _roundNum) public view returns (uint) {\t\t\t\r\n\t\treturn (StepCaps[_roundNum]);\r\n    }\r\n\t\r\n\t/// @dev modify Base exchange rate.\r\n\t/// @param _roundNum pre-sale round\r\n\t/// @param _value initialize the number of tokens for the indicated pre-sale round\r\n    function setCapTab(uint _roundNum,uint _value) public onlyOwner {\r\n        require(_value > 0);\r\n\t\tStepCaps[_roundNum] = _value;\r\n    }\t\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_btcAmount\",\"type\":\"uint256\"}],\"name\":\"_sendTokensManually\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stat\",\"outputs\":[{\"name\":\"currentFundraiser\",\"type\":\"uint256\"},{\"name\":\"btcAmount\",\"type\":\"uint256\"},{\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"name\":\"txCounter\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundNum\",\"type\":\"uint256\"}],\"name\":\"getCapTab\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LA_wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Bounties_Wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenRate\",\"type\":\"uint256\"}],\"name\":\"setTokenRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OEM_Wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IcoCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundNum\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setCapTab\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Team_Wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ODEEPToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bc5ef7f22d03abc07f03220b56bb993001c32a7648a0dcbcbc0a76ccacd5f4b2"}]}