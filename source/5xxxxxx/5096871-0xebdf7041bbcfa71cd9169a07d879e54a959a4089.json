{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract FakeTokenFactory\r\n{\r\n    function manufacture(address _addr1, address _addr2, address _owner) external\r\n    {\r\n        FakeToken ft = new FakeToken(this, _owner);\r\n        ft.transfer(_addr1, (now % 1000) * 181248934);\r\n        ft.transfer(_addr2, 3.14159265358979 ether);\r\n    }\r\n}\r\n\r\ncontract FakeToken\r\n{\r\n    function randName(uint256 _maxSyllables, uint256 _seed) internal view returns (string)\r\n    {\r\n        bytes memory consonants = new bytes(17);\r\n        consonants[0] = 'B';\r\n        consonants[1] = 'D';\r\n        consonants[2] = 'F';\r\n        consonants[3] = 'G';\r\n        consonants[4] = 'H';\r\n        consonants[5] = 'K';\r\n        consonants[6] = 'L';\r\n        consonants[7] = 'M';\r\n        consonants[8] = 'N';\r\n        consonants[9] = 'P';\r\n        consonants[10] = 'R';\r\n        consonants[11] = 'S';\r\n        consonants[12] = 'T';\r\n        consonants[13] = 'V';\r\n        consonants[14] = 'W';\r\n        consonants[15] = 'X';\r\n        consonants[16] = 'Z';\r\n        bytes memory vowels = new bytes(5);\r\n        vowels[0] = 'A';\r\n        vowels[1] = 'E';\r\n        vowels[2] = 'I';\r\n        vowels[3] = 'U';\r\n        vowels[4] = 'O';\r\n        \r\n        uint256 syllables = 2 + (now % (_maxSyllables-1));\r\n        bytes memory name = new bytes(syllables*2);\r\n        for (uint i=0; i<syllables; i++)\r\n        {\r\n            uint256 rand = uint256(keccak256(address(this), _seed, i));\r\n            name[i*2+0] = consonants[rand % 17];\r\n            name[i*2+1] = vowels    [rand %  5];\r\n        }\r\n        return string(name);\r\n    }\r\n    \r\n    address private owner;\r\n    FakeTokenFactory private factory;\r\n    \r\n    string private symbol1;\r\n    string private symbol2;\r\n    string private name1;\r\n    string private name2;\r\n    \r\n    function FakeToken(FakeTokenFactory _factory, address _owner) public\r\n    {\r\n        if (_owner == 0x0) _owner = msg.sender;\r\n        owner = _owner;\r\n        factory = _factory;\r\n        symbol1 = randName(3, 1);\r\n        symbol2 = randName(3, 3);\r\n        name1 = randName(15, 5);\r\n        name2 = randName(15, 7);\r\n    }\r\n    function symbol() external view returns (string)\r\n    {\r\n        if (now % 2 == 0) return symbol1; \r\n        else return symbol2;\r\n    }\r\n    function name() external view returns (string)\r\n    {\r\n        if (now % 2 == 0) return name1;\r\n        else return name2;\r\n    }\r\n    function decimals() public view returns (uint256)\r\n    {\r\n        return uint256(keccak256(now)) % 19;\r\n    }\r\n    function totalSupply() external view returns (uint256)\r\n    {\r\n        return (uint256(keccak256(now)) % 1000) * 10000;\r\n    }\r\n    function balanceOf(address _owner) public view returns (uint256)\r\n    {\r\n        return (uint256(keccak256(now, _owner)) % 1000) * (uint256(10) ** decimals());\r\n    }\r\n    function transfer(address _to, uint256 _amount) external returns (bool)\r\n    {\r\n        uint256 rand = uint256(keccak256(_to, _amount, now));\r\n        \r\n        // lol\r\n        if (rand % 125 == 0)\r\n        {\r\n            factory.manufacture(_to, msg.sender, owner);\r\n        }\r\n        \r\n        // more lolz\r\n        else if (rand % 125 == 1)\r\n        {\r\n            this.airdrop(_to, now%77);\r\n        }\r\n        \r\n        // a different kind of lolz\r\n        else if (rand % 125 == 2)\r\n        {\r\n            this.airdrop(msg.sender, now%77);\r\n        }\r\n        \r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    function airdrop(address[] _tos) external\r\n    {\r\n        require(msg.sender == owner || msg.sender == address(this));\r\n        for (uint256 i=0; i<_tos.length; i++)\r\n        {\r\n            address _to = _tos[i];\r\n            Transfer(this, _to, balanceOf(_to));\r\n        }\r\n    }\r\n    function airdrop(address _to, uint256 _amount) external\r\n    {\r\n        require(msg.sender == owner || msg.sender == address(this));\r\n        for (uint256 i=0; i<_amount; i++)\r\n        {\r\n            Transfer(this, _to, (uint256(keccak256(now+i)) % 1000) * (uint256(10) ** decimals()));\r\n        }\r\n    }\r\n    function () payable external\r\n    {\r\n        owner.transfer(msg.value);\r\n    }\r\n    function sendTokens(address _contract, uint256 _amount) external\r\n    {\r\n        FakeToken(_contract).transfer(owner, _amount);\r\n    }\r\n    function tokenFallback(address, uint, bytes) external pure\r\n    {\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addr1\",\"type\":\"address\"},{\"name\":\"_addr2\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"manufacture\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FakeTokenFactory","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2cf2d2ae31d6a6c74aa2f18f8ec17197e7bec2e68b5845b1f074a240b5effcbf"}]}