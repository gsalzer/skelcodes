{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/*\r\n * Developed by B2Lab, 2018\r\n * Smart Contract for Token+ (labeled tokens) and Identity Management\r\n * Version 1.0\r\n */\r\n \r\ncontract IdentityBase{\r\n    \r\n\t//Basic Data for each Token-Holder\r\n    struct Data{\r\n\t\r\n        bytes32 biometricData;\r\n        string name;\r\n        string surname;\r\n        bool isEnabled;\r\n\t\t\r\n    }\r\n    \r\n\t//Identity Map\r\n\tmapping(address => Data) identities;\r\n   \r\n    /*\r\n\t * Params: address\r\n\t * Return: True (if the address is enabled) or False (otherwise)\r\n\t */\r\n\tfunction isIdentity(address _sender) public view returns(bool){\r\n\t\r\n\t\treturn identities[_sender].isEnabled;\r\n\t\t\r\n\t}   \r\n   \r\n\t/*\r\n     * Params: bytes32, string, string\r\n     * Return: True (if the identity has been set correctly) or False (if the identity already exists)\r\n     */   \r\n    function setMyIdentity(bytes32 _biometricData, string _name, string _surname) public returns(bool){\r\n    \r\n\t\tif(identities[msg.sender].biometricData == \"\"){\r\n\t\t\t\r\n\t\t\tData storage identity = identities[msg.sender];\r\n\t\t\tidentity.biometricData = _biometricData;\r\n            identity.name = _name;\r\n            identity.surname = _surname;\r\n            identity.isEnabled = true;\r\n            return true;\r\n\t\t\t\r\n        }else{\r\n\t\t\r\n\t\t\treturn false;\r\n\t\t\t\r\n        }   \r\n\t\t\r\n\t}\r\n   \r\n\t/*\r\n     *Params: bytes32\r\n     *Return: True (if the Biometric Data matches with the stored one) or False (otherwise)\r\n     */\r\n    function checkIdentity(bytes32 _biometricData) public returns(bool){\r\n        \r\n        if(identities[msg.sender].biometricData == _biometricData){\r\n\t\t\t\r\n\t\t\temit UnlockEvent(msg.sender, identities[msg.sender].name, identities[msg.sender].surname, now, true);\r\n            return true;\r\n\t\t\t\r\n        }else{\r\n            \r\n\t\t\temit UnlockEvent(msg.sender, identities[msg.sender].name, identities[msg.sender].surname, now, false);\r\n            return false;\r\n\t\t\t\r\n        }\r\n       \r\n\t}  \r\n\t\r\n\t//Event to notify results of each interaction with the checkIdentity function\r\n\tevent UnlockEvent(address sender, string name, string surname, uint256 timestamp, bool result);  \r\n\r\n}\r\n\r\n\r\ncontract IdentityExtended is IdentityBase{  \r\n    \r\n\t//Additional Data Extension\r\n\tstruct DataExtended{\r\n\t\r\n        bool usaPermission;\r\n\t\tbool euPermission;\r\n        bool chinaPermission;\r\n\t\t\r\n    }\r\n    \r\n\t//Map of Extended Data Identities\r\n    mapping(address => DataExtended) identitiesExtended;    \r\n   \r\n\t/*\r\n\t *Params: bool, bool, bool\r\n\t *Return: null\r\n\t *TODO: implement permission policies\r\n\t */\r\n    function setIdentityExtended(bool _usaPermission, bool _euPermission, bool _chinaPermission) public {\r\n        \r\n        DataExtended storage dataExtended = identitiesExtended[msg.sender];\r\n        dataExtended.usaPermission = _usaPermission;\r\n        dataExtended.euPermission = _euPermission;\r\n        dataExtended.chinaPermission = _chinaPermission;\r\n\t\t\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract B2Lab_TokenPlus{\r\n\r\n\t//Token Data\r\n\tstring constant public tokenName = \"NFT B2LAB\";\r\n\tstring constant public tokenSymbol = \"B2L\";\r\n\taddress public contractOwner;\r\n\tuint256 constant public totalTokens = 1000000;\r\n\tuint256 public issuedTokens = 0;\r\n\tuint256 public price = 1000000000 wei;\r\n\t\r\n\t//Smart Contract address for Identity Management\r\n\taddress public identityEthAddress;\r\n   \r\n\t//Balances Map\r\n\tmapping(address => uint256) public balances;\r\n   \r\n\t//Owners Map\r\n\tmapping(uint256 => address) public tokenOwners;\r\n\t\r\n\t//Additional Data\r\n\tstruct TokenData{\r\n\t    \r\n\t    bytes8 dataA;\r\n\t    bytes8 dataB;\r\n\t    bytes8 dataC;\r\n\t    //...\r\n\t    \r\n\t}\r\n\t\r\n\t//Data Token Map\r\n\tmapping(uint256 => TokenData) public tokenInfo;\r\n\t\r\n\t//Constructor: Set the Contract Owner and IdentityEthAddress\r\n\tfunction B2Lab_TokenPlus(address _ethAddress) public {\r\n\t\r\n\t\tcontractOwner = msg.sender;\r\n\t\tidentityEthAddress = _ethAddress;\r\n\t\t\r\n\t}\r\n\t\r\n\t//Check if the sender is the contract owner\r\n    modifier isContractOwner(){\r\n        \r\n        require(msg.sender == contractOwner);\r\n        _;\r\n        \r\n    }\r\n    \r\n    /*\r\n     *Params: address\r\n\t *Return: null\r\n\t */\r\n    function changeIdentityEthAddress(address _ethAddress) public isContractOwner{\r\n\t\r\n        identityEthAddress = _ethAddress;\r\n\t\t\r\n    }\r\n    \r\n    //Check if \"address _a\" is an identity in the IdentityEthAddress Contract\r\n\tmodifier checkIsIdentity(address _a){\r\n       \r\n        IdentityBase i = IdentityBase(identityEthAddress);\r\n        \r\n\t\trequire(i.isIdentity(_a));\r\n\t\t_;\r\n\t\t\r\n\t} \r\n   \r\n  \t/*\r\n     *Params: null\r\n     *Return: Error (if the sender doesn't meet the requirements) or Tokens (otherwise)\r\n     */\r\n\tfunction buyTokens() payable public checkIsIdentity(msg.sender){\r\n\t\r\n\t\trequire(msg.value > 0);\r\n\t\tuint256 numberTokens = msg.value / price;\r\n\t\tuint256 redelivery =  msg.value % price;\r\n\t\trequire(numberTokens != 0);\r\n\t\trequire(numberTokens <= 100);\r\n\t\trequire((issuedTokens+numberTokens) <= totalTokens);\r\n\t\t\r\n\t\tfor(uint256 i = 0; i < numberTokens; i++){\r\n\t\t\r\n\t\t\tissuedTokens++;\r\n\t\t\ttokenOwners[issuedTokens] = msg.sender;\r\n\t\t\temit Transfer(contractOwner, msg.sender, issuedTokens);\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tbalances[msg.sender] += numberTokens;\r\n\t\tmsg.sender.transfer(redelivery);\r\n\t\t\r\n\t}  \r\n   \r\n\t/*\r\n     *Params: address, uint256[]\r\n     *Return: Error (if the sender and the recipient doesn't meet the requirements) or Token Transfer (otherwise)\r\n     */\r\n    function transferTokens(address _to, uint256[] _tokenId) public checkIsIdentity(msg.sender) checkIsIdentity(_to){\r\n\t\t\r\n\t\trequire(msg.sender != _to);\r\n\t\trequire(_tokenId.length != 0);\r\n        require(_tokenId.length <= 10);\r\n        require(_to != address(0));\r\n\t\t\r\n        for(uint256 i = 0; i < _tokenId.length; i++){\r\n\t\t\r\n            require(tokenOwners[_tokenId[i]] == msg.sender);\r\n\t\t\ttokenOwners[_tokenId[i]] = _to;\r\n            emit Transfer(msg.sender, _to, _tokenId[i]);\r\n\t\t\t\r\n        }\r\n\t\t\r\n\t\tbalances[msg.sender] -= _tokenId.length;\r\n\t\tbalances[_to] += _tokenId.length;\r\n\t\t\r\n\t}\r\n\r\n\t//Event to notify each Tokens Transfer\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n\t\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_biometricData\",\"type\":\"bytes32\"}],\"name\":\"checkIdentity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_usaPermission\",\"type\":\"bool\"},{\"name\":\"_euPermission\",\"type\":\"bool\"},{\"name\":\"_chinaPermission\",\"type\":\"bool\"}],\"name\":\"setIdentityExtended\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isIdentity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_biometricData\",\"type\":\"bytes32\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_surname\",\"type\":\"string\"}],\"name\":\"setMyIdentity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"surname\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"UnlockEvent\",\"type\":\"event\"}]","ContractName":"IdentityExtended","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://27cab8b722cea7aeaa6eafa2ab8b78c95538e88971f061a7eca89234c570298a"}]}