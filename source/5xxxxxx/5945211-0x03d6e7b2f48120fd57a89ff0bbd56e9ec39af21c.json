{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/utils/LoggingErrors.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title Log Various Error Types\r\n * @author Adam Lemmon <adam@oraclize.it>\r\n * @dev Inherit this contract and your may now log errors easily\r\n * To support various error types, params, etc.\r\n */\r\ncontract LoggingErrors {\r\n  /**\r\n  * Events\r\n  */\r\n  event LogErrorString(string errorString);\r\n\r\n  /**\r\n  * Error cases\r\n  */\r\n\r\n  /**\r\n   * @dev Default error to simply log the error message and return\r\n   * @param _errorMessage The error message to log\r\n   * @return ALWAYS false\r\n   */\r\n  function error(string _errorMessage) internal returns(bool) {\r\n    emit LogErrorString(_errorMessage);\r\n    return false;\r\n  }\r\n}\r\n\r\n// File: contracts/wallet/WalletConnector.sol\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n/**\r\n * @title Wallet Connector\r\n * @dev Connect the wallet contract to the correct Wallet Logic version\r\n */\r\ncontract WalletConnector is LoggingErrors {\r\n  /**\r\n   * Storage\r\n   */\r\n  address public owner_;\r\n  address public latestLogic_;\r\n  uint256 public latestVersion_;\r\n  mapping(uint256 => address) public logicVersions_;\r\n  uint256 public birthBlock_;\r\n\r\n  /**\r\n   * Events\r\n   */\r\n  event LogLogicVersionAdded(uint256 version);\r\n  event LogLogicVersionRemoved(uint256 version);\r\n\r\n  /**\r\n   * @dev Constructor to set the latest logic address\r\n   * @param _latestVersion Latest version of the wallet logic\r\n   * @param _latestLogic Latest address of the wallet logic contract\r\n   */\r\n  function WalletConnector (\r\n    uint256 _latestVersion,\r\n    address _latestLogic\r\n  ) public {\r\n    owner_ = msg.sender;\r\n    latestLogic_ = _latestLogic;\r\n    latestVersion_ = _latestVersion;\r\n    logicVersions_[_latestVersion] = _latestLogic;\r\n    birthBlock_ = block.number;\r\n  }\r\n\r\n  /**\r\n   * Add a new version of the logic contract\r\n   * @param _version The version to be associated with the new contract.\r\n   * @param _logic New logic contract.\r\n   * @return Success of the transaction.\r\n   */\r\n  function addLogicVersion (\r\n    uint256 _version,\r\n    address _logic\r\n  ) external\r\n    returns(bool)\r\n  {\r\n    if (msg.sender != owner_)\r\n      return error('msg.sender != owner, WalletConnector.addLogicVersion()');\r\n\r\n    if (logicVersions_[_version] != 0)\r\n      return error('Version already exists, WalletConnector.addLogicVersion()');\r\n\r\n    // Update latest if this is the latest version\r\n    if (_version > latestVersion_) {\r\n      latestLogic_ = _logic;\r\n      latestVersion_ = _version;\r\n    }\r\n\r\n    logicVersions_[_version] = _logic;\r\n    LogLogicVersionAdded(_version);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Remove a version. Cannot remove the latest version.\r\n   * @param  _version The version to remove.\r\n   */\r\n  function removeLogicVersion(uint256 _version) external {\r\n    require(msg.sender == owner_);\r\n    require(_version != latestVersion_);\r\n    delete logicVersions_[_version];\r\n    LogLogicVersionRemoved(_version);\r\n  }\r\n\r\n  /**\r\n   * Constants\r\n   */\r\n\r\n  /**\r\n   * Called from user wallets in order to upgrade their logic.\r\n   * @param _version The version to upgrade to. NOTE pass in 0 to upgrade to latest.\r\n   * @return The address of the logic contract to upgrade to.\r\n   */\r\n  function getLogic(uint256 _version)\r\n    external\r\n    constant\r\n    returns(address)\r\n  {\r\n    if (_version == 0)\r\n      return latestLogic_;\r\n    else\r\n      return logicVersions_[_version];\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"birthBlock_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestVersion_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_version\",\"type\":\"uint256\"},{\"name\":\"_logic\",\"type\":\"address\"}],\"name\":\"addLogicVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"logicVersions_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestLogic_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"getLogic\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"removeLogicVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_latestVersion\",\"type\":\"uint256\"},{\"name\":\"_latestLogic\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"LogLogicVersionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"LogLogicVersionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"errorString\",\"type\":\"string\"}],\"name\":\"LogErrorString\",\"type\":\"event\"}]","ContractName":"WalletConnector","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000914edccf760deb72056d6dcda6727a24378417b7","Library":"","SwarmSource":"bzzr://9b71391e5d4627566d95f17754292d2b1eca6d041749f53424935fa1868bbf5b"}]}