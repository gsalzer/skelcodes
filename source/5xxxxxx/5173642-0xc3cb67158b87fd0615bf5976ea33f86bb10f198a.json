{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  address public ethAddress;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n    ethAddress = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Token {\r\n    uint256 public _totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/**\r\n * @title       Token\r\n * @dev         ERC-20 Standard Token\r\n */\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n      if (balances[msg.sender] >= _value && _value > 0) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n}\r\n\r\n/// @title ERC-20 Auction Base\r\n/// @dev Contains models, variables, and internal methods for the auction.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\n/// @author Fazri Zubair, Farhan Khwaja (Lucid Sight, Inc.)\r\ncontract AuctionBase {\r\n    // Represents an auction on an FT (ERC-20)\r\n    struct Auction {\r\n        // Current owner of FT (ERC-20)\r\n        address seller;\r\n        // Price (in wei) at beginning of auction\r\n        uint128 startingPrice;\r\n        // Price (in wei) at end of auction\r\n        uint128 endingPrice;\r\n        // Duration (in seconds) of auction\r\n        uint64 duration;\r\n        // Time when auction started\r\n        // NOTE: 0 if this auction has been concluded\r\n        uint64 startedAt;\r\n        // Token Quantity\r\n        uint256 tokenQuantity;\r\n        // Token Address\r\n        address tokenAddress;\r\n        // Auction number of this auction wrt tokenAddress\r\n        uint256 auctionNumber;\r\n    }\r\n\r\n    /// ERC-20 Auction Contract Address\r\n    address public cryptiblesAuctionContract;\r\n\r\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\r\n    // Values 0-10,000 map to 0%-100%\r\n    uint256 public ownerCut = 375;\r\n\r\n    // Map to keep a track on number of auctions by an owner\r\n    mapping (address => uint256) auctionCounter;\r\n\r\n    // Map from token,owner to their corresponding auction.\r\n    mapping (address => mapping (uint256 => Auction)) tokensAuction;\r\n\r\n    event AuctionCreated(address tokenAddress, uint256 startingPrice, uint256 endingPrice, uint256 duration, uint256 quantity, uint256 auctionNumber, uint64 startedAt);\r\n    event AuctionWinner(address tokenAddress, uint256 totalPrice, address winner, uint256 quantity, uint256 auctionNumber);\r\n    event AuctionCancelled(address tokenAddress, address sellerAddress, uint256 auctionNumber, uint256 quantity);\r\n    event EtherWithdrawed(uint256 value);\r\n\r\n    /// @dev Returns true if the claimant owns the token.\r\n    /// @param _claimant - Address claiming to own the token.\r\n    /// @param _totalTokens - Check total tokens being put on auction against user balance\r\n    function _owns(address _tokenAddress, address _claimant, uint256 _totalTokens) internal view returns (bool) {\r\n        StandardToken tokenContract = StandardToken(_tokenAddress);\r\n        return (tokenContract.balanceOf(_claimant) >= _totalTokens);\r\n    }\r\n\r\n    /// @dev Escrows the ERC-20 Token, assigning ownership to this contract.\r\n    /// Throws if the escrow fails.\r\n    /// @param _owner - Current owner address of token to escrow.\r\n    /// @param _totalTokens - Number of tokens (ERC-20) to \r\n    function _escrow(address _tokenAddress, address _owner, uint256 _totalTokens) internal {\r\n        // it will throw if transfer fails\r\n        StandardToken tokenContract = StandardToken(_tokenAddress);\r\n        tokenContract.transferFrom(_owner, this, _totalTokens);\r\n    }\r\n\r\n    /// @dev Transfers an Erc-20 Token owned by this contract to another address.\r\n    /// Returns true if the transfer succeeds.\r\n    /// @param _receiver - Address to transfer ERC-20 Token to.\r\n    /// @param _totalTokens - Tokens to transfer\r\n    function _transfer(address _tokenAddress, address _receiver, uint256 _totalTokens) internal {\r\n        // it will throw if transfer fails\r\n        StandardToken tokenContract = StandardToken(_tokenAddress);\r\n        tokenContract.transfer(_receiver, _totalTokens);\r\n    }\r\n\r\n    /// @dev Adds an auction to the list of open auctions. Also fires the\r\n    ///  AuctionCreated event.\r\n    /// @param _tokenAddress The address of the token to be put on auction.\r\n    /// @param _auction Auction to add.\r\n    function _addAuction(address _tokenAddress, Auction _auction) internal {\r\n        // Require that all auctions have a duration of\r\n        // at least one minute.\r\n        require(_auction.duration >= 1 minutes);\r\n        \r\n        AuctionCreated(\r\n            _tokenAddress,\r\n            uint256(_auction.startingPrice),\r\n            uint256(_auction.endingPrice),\r\n            uint256(_auction.duration),\r\n            uint256(_auction.tokenQuantity),\r\n            uint256(_auction.auctionNumber),\r\n            uint64(_auction.startedAt)\r\n        );\r\n    }\r\n\r\n    /// @dev Cancels an auction unconditionally.\r\n    function _cancelAuction(address _tokenAddress, uint256 _auctionNumber) internal {\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = tokensAuction[_tokenAddress][_auctionNumber];\r\n        address seller = auction.seller;\r\n        uint256 tokenQuantity = auction.tokenQuantity;\r\n\r\n        _removeAuction(_tokenAddress, _auctionNumber);\r\n        _transfer(_tokenAddress, seller, tokenQuantity);\r\n        AuctionCancelled(_tokenAddress, seller, _auctionNumber, tokenQuantity);\r\n    }\r\n\r\n    /// @dev Computes the price and transfers winnings.\r\n    /// Does NOT transfer ownership of token.\r\n    function _bid(address _tokenAddress, uint256 _auctionNumber, uint256 _bidAmount)\r\n        internal\r\n    {\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = tokensAuction[_tokenAddress][_auctionNumber];\r\n\r\n        // Explicitly check that this auction is currently live.\r\n        // (Because of how Ethereum mappings work, we can't just count\r\n        // on the lookup above failing. An invalid _tokenAddress will just\r\n        // return an auction object that is all zeros.)\r\n        require(_isOnAuction(auction));\r\n\r\n        // Check that the bid is greater than or equal to the current price\r\n        uint256 price = _currentPrice(auction);\r\n        require(_bidAmount >= price);\r\n\r\n        // Grab a reference to the seller before the auction struct\r\n        // gets deleted.\r\n        address seller = auction.seller;\r\n        uint256 quantity = auction.tokenQuantity;\r\n\r\n        // The bid is good! Remove the auction before sending the fees\r\n        // to the sender so we can't have a reentrancy attack.\r\n        _removeAuction(_tokenAddress, _auctionNumber);\r\n\r\n        // Transfer proceeds to seller (if there are any!)\r\n        if (price > 0) {\r\n            // Calculate the auctioneer's cut.\r\n            // (NOTE: _computeCut() is guaranteed to return a\r\n            // value <= price, so this subtraction can't go negative.)\r\n            uint256 auctioneerCut = _computeCut(price);\r\n            uint256 sellerProceeds = price - auctioneerCut;\r\n\r\n            // NOTE: Doing a transfer() in the middle of a complex\r\n            // method like this is generally discouraged because of\r\n            // reentrancy attacks and DoS attacks if the seller is\r\n            // a contract with an invalid fallback function. We explicitly\r\n            // guard against reentrancy attacks by removing the auction\r\n            // before calling transfer(), and the only thing the seller\r\n            // can DoS is the sale of their own asset! (And if it's an\r\n            // accident, they can call cancelAuction(). )\r\n            seller.transfer(sellerProceeds);\r\n        }\r\n\r\n        // Calculate any excess funds included with the bid. If the excess\r\n        // is anything worth worrying about, transfer it back to bidder.\r\n        // NOTE: We checked above that the bid amount is greater than or\r\n        // equal to the price so this cannot underflow.\r\n        uint256 bidExcess = _bidAmount - price;\r\n\r\n        // Return the funds. Similar to the previous transfer, this is\r\n        // not susceptible to a re-entry attack because the auction is\r\n        // removed before any transfers occur.\r\n        msg.sender.transfer(bidExcess);\r\n\r\n        // Tell the world!\r\n        AuctionWinner(_tokenAddress, price, msg.sender, quantity, _auctionNumber);\r\n    }\r\n\r\n    /// @dev Removes an auction from the list of open auctions.\r\n    /// @param _tokenAddress - Address of FT (ERC-20) on auction.\r\n    /// @param _auctionNumber - Auction Number corresponding the auction bidding on\r\n    function _removeAuction(address _tokenAddress, uint256 _auctionNumber) internal {\r\n        delete tokensAuction[_tokenAddress][_auctionNumber];\r\n    }\r\n\r\n    /// @dev Returns true if the FT (ERC-20) is on auction.\r\n    /// @param _auction - Auction to check.\r\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\r\n        return (_auction.startedAt > 0);\r\n    }\r\n\r\n    /// @dev Returns current price of an FT (ERC-20) on auction. Broken into two\r\n    ///  functions (this one, that computes the duration from the auction\r\n    ///  structure, and the other that does the price computation) so we\r\n    ///  can easily test that the price computation works correctly.\r\n    function _currentPrice(Auction storage _auction)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 secondsPassed = 0;\r\n\r\n        // A bit of insurance against negative values (or wraparound).\r\n        // Probably not necessary (since Ethereum guarnatees that the\r\n        // now variable doesn't ever go backwards).\r\n        if (now > _auction.startedAt) {\r\n            secondsPassed = now - _auction.startedAt;\r\n        }\r\n\r\n        return _computeCurrentPrice(\r\n            _auction.startingPrice,\r\n            _auction.endingPrice,\r\n            _auction.duration,\r\n            secondsPassed\r\n        );\r\n    }\r\n\r\n    /// @dev Computes the current price of an auction. Factored out\r\n    ///  from _currentPrice so we can run extensive unit tests.\r\n    ///  When testing, make this function public and turn on\r\n    ///  `Current price computation` test suite.\r\n    function _computeCurrentPrice(\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        uint256 _secondsPassed\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our public functions carefully cap the maximum values for\r\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\r\n        //  also known to be non-zero (see the require() statement in\r\n        //  _addAuction())\r\n        if (_secondsPassed >= _duration) {\r\n            // We've reached the end of the dynamic pricing portion\r\n            // of the auction, just return the end price.\r\n            return _endingPrice;\r\n        } else {\r\n            // Starting price can be higher than ending price (and often is!), so\r\n            // this delta can be negative.\r\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\r\n\r\n            // This multiplication can't overflow, _secondsPassed will easily fit within\r\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\r\n            // will always fit within 256-bits.\r\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\r\n\r\n            // currentPriceChange can be negative, but if so, will have a magnitude\r\n            // less that _startingPrice. Thus, this result will always end up positive.\r\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\r\n\r\n            return uint256(currentPrice);\r\n        }\r\n    }\r\n\r\n    /// @dev Computes owner's cut of a sale.\r\n    /// @param _price - Sale price of NFT.\r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our entry functions carefully cap the maximum values for\r\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\r\n        //  statement in the ClockAuction constructor). The result of this\r\n        //  function is always guaranteed to be <= _price.\r\n        return _price * ownerCut / 10000;\r\n    }\r\n    \r\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\r\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\r\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\r\n    ///  _approve() and transferFrom() are used together for putting Kitties on auction, and\r\n    ///  there is no value in spamming the log with Approval events in that case.\r\n    function _approve(address _tokenAddress, address _approved, uint256 _tokenQuantity) internal {\r\n        StandardToken tokenContract = StandardToken(_tokenAddress);\r\n        tokenContract.approve(_approved, _tokenQuantity);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n/// @title Clock auction for fungible tokens.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract ClockAuction is Pausable, AuctionBase {\r\n\r\n    /// @dev Constructor creates a reference to the FT (ERC-20) ownership contract\r\n    /// @param _contractAddr - Address of the SaleClockAuction Contract. Setting the variable.\r\n    function ClockAuction(address _contractAddr) public {\r\n        require(ownerCut <= 10000);\r\n        cryptiblesAuctionContract = _contractAddr;\r\n    }\r\n\r\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\r\n    ///  as well as any Ether sent directly to the contract address.\r\n    ///  Always transfers to the FT (ERC-20) contract, but can be called either by\r\n    ///  the owner or the FT (ERC-20) contract.\r\n    function withdrawBalance() external {\r\n        require(\r\n            msg.sender == owner ||\r\n            msg.sender == ethAddress\r\n        );\r\n        // We are using this boolean method to make sure that even if one fails it will still work\r\n        bool res = msg.sender.send(this.balance);\r\n\r\n    }\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenAddress - Address of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of time to move between starting\r\n    ///  price and ending price (in seconds).\r\n    /// @param _totalQuantity - Token Quantity to Auction\r\n    function createAuction(\r\n        address _tokenAddress,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        uint256 _totalQuantity\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Checking whether user has enough balance\r\n        require(_owns(_tokenAddress, msg.sender, _totalQuantity));\r\n        \r\n        // We can't approve our ERC-20 Tokens minted earlier as they will need to be\r\n        // approved by the owner and not by our contract\r\n        // _approve(_tokenAddress, msg.sender, _tokenQuantity);\r\n\r\n        // Sanity check that no inputs overflow how many bits we've allocated\r\n        // to store them in the auction struct.\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(this == address(cryptiblesAuctionContract));\r\n\r\n        uint256 auctionNumber = auctionCounter[_tokenAddress];\r\n        \r\n        // Defaults to 0, incrementing the counter\r\n        if(auctionNumber == uint256(0)){\r\n            auctionNumber = 1;\r\n        }else{\r\n            auctionNumber += 1;\r\n        }\r\n\r\n        auctionCounter[_tokenAddress] = auctionNumber;\r\n        \r\n        _escrow(_tokenAddress, msg.sender, _totalQuantity);\r\n\r\n        Auction memory auction = Auction(\r\n            msg.sender,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now),\r\n            uint256(_totalQuantity),\r\n            _tokenAddress,\r\n            auctionNumber\r\n        );\r\n\r\n        tokensAuction[_tokenAddress][auctionNumber] = auction;\r\n\r\n        _addAuction(_tokenAddress, auction);\r\n    }\r\n\r\n    /// @dev Bids on an open auction, completing the auction and transferring\r\n    ///  ownership of the FT (ERC-20) if enough Ether is supplied.\r\n    /// @param _tokenAddress - Address of token to bid on.\r\n    /// @param _auctionNumber - Auction Number corresponding the auction bidding on\r\n    function bid(address _tokenAddress, uint256 _auctionNumber)\r\n        external\r\n        payable\r\n        whenNotPaused\r\n    {\r\n        Auction storage auction = tokensAuction[_tokenAddress][_auctionNumber];\r\n        // _bid will throw if the bid or funds transfer fails\r\n        _bid(_tokenAddress, _auctionNumber, msg.value);\r\n        _transfer(_tokenAddress, msg.sender, auction.tokenQuantity);\r\n    }\r\n\r\n    /// @dev Cancels an auction that hasn't been won yet.\r\n    ///  Returns the FT (ERC-20) to original owner.\r\n    /// @notice This is a state-modifying function that can\r\n    ///  be called while the contract is paused.\r\n    /// @param _tokenAddress - Address of token on auction\r\n    /// @param _auctionNumber - Auction Number for the token\r\n    function cancelAuction(address _tokenAddress, uint256 _auctionNumber)\r\n        external\r\n    {\r\n        Auction storage auction = tokensAuction[_tokenAddress][_auctionNumber];\r\n        require(_isOnAuction(auction));\r\n        address seller = auction.seller;\r\n        require(msg.sender == seller);\r\n        _cancelAuction(_tokenAddress, _auctionNumber);\r\n    }\r\n\r\n    /// @dev Cancels an auction when the contract is paused.\r\n    ///  Only the owner may do this, and FT (ERC-20)s are returned to\r\n    ///  the seller. This should only be used in emergencies.\r\n    /// @param _tokenAddress - Address of the FT (ERC-20) on auction to cancel.\r\n    /// @param _auctionNumber - Auction Number for the token\r\n    function cancelAuctionWhenPaused(address _tokenAddress, uint256 _auctionNumber)\r\n        whenPaused\r\n        onlyOwner\r\n        external\r\n    {\r\n        Auction storage auction = tokensAuction[_tokenAddress][_auctionNumber];\r\n        require(_isOnAuction(auction));\r\n        _cancelAuction(_tokenAddress, _auctionNumber);\r\n    }\r\n\r\n    /// @dev Returns auction info for an FT (ERC-20) on auction.\r\n    /// @param _tokenAddress - Address of FT (ERC-20) on auction.\r\n    /// @param _auctionNumber - Auction Number for the token\r\n    function getAuction(address _tokenAddress, uint256 _auctionNumber)\r\n        external\r\n        view\r\n        returns\r\n    (\r\n        address seller,\r\n        uint256 startingPrice,\r\n        uint256 endingPrice,\r\n        uint256 duration,\r\n        uint256 startedAt,\r\n        uint256 tokenQuantity,\r\n        address tokenAddress,\r\n        uint256 auctionNumber\r\n    ) {\r\n        Auction storage auction = tokensAuction[_tokenAddress][_auctionNumber];\r\n        require(_isOnAuction(auction));\r\n        return (\r\n            auction.seller,\r\n            auction.startingPrice,\r\n            auction.endingPrice,\r\n            auction.duration,\r\n            auction.startedAt,\r\n            auction.tokenQuantity,\r\n            auction.tokenAddress,\r\n            auction.auctionNumber\r\n        );\r\n    }\r\n\r\n    /// @dev Returns the current price of an auction.\r\n    /// @param _tokenAddress - Address of the token price we are checking.\r\n    /// @param _auctionNumber - Auction Number for the token\r\n    function getCurrentPrice(address _tokenAddress, uint256 _auctionNumber)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Auction storage auction = tokensAuction[_tokenAddress][_auctionNumber];\r\n        require(_isOnAuction(auction));\r\n        return _currentPrice(auction);\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title Sale Clock auction \r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract SaleClockAuction is ClockAuction {\r\n\r\n    // @dev Sanity check that allows us to ensure that we are pointing to the\r\n    //  right auction call.\r\n    bool public isSaleClockAuction = true;\r\n\r\n    function SaleClockAuction() public\r\n        ClockAuction(this) {\r\n        }\r\n    \r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenAddress - Address of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of auction (in seconds).\r\n    /// @param _tokenQuantity - Token Quantity to auction\r\n    function createAuction(\r\n        address _tokenAddress,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        uint256 _tokenQuantity\r\n    )\r\n        external\r\n    {\r\n        require(_owns(_tokenAddress, msg.sender, _tokenQuantity));\r\n\r\n        // We can't approve our ERC-20 Tokens minted earlier as they will need to be\r\n        // approved by the owner and not by our contract\r\n        // _approve(_tokenAddress, msg.sender, _tokenQuantity);\r\n\r\n        // Sanity check that no inputs overflow how many bits we've allocated\r\n        // to store them in the auction struct.\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        require(this == address(cryptiblesAuctionContract));\r\n\r\n        uint256 auctionNumber = auctionCounter[_tokenAddress];\r\n        \r\n        // Defaults to 0, incrementing the counter\r\n        if(auctionNumber == 0){\r\n            auctionNumber = 1;\r\n        }else{\r\n            auctionNumber += 1;\r\n        }\r\n\r\n        auctionCounter[_tokenAddress] = auctionNumber;\r\n        \r\n        _escrow(_tokenAddress, msg.sender, _tokenQuantity);\r\n\r\n        Auction memory auction = Auction(\r\n            msg.sender,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now),\r\n            uint256(_tokenQuantity),\r\n            _tokenAddress,\r\n            auctionNumber\r\n        );\r\n\r\n        tokensAuction[_tokenAddress][auctionNumber] = auction;\r\n        \r\n        _addAuction(_tokenAddress, auction);\r\n    }\r\n\r\n    /// @dev works the same as default bid method.\r\n    /// @param _tokenAddress - Address of token to auction, sender must be owner.\r\n    /// @param _auctionNumber - Auction number associated with the Token Address\r\n    function bid(address _tokenAddress, uint256 _auctionNumber)\r\n        external\r\n        payable\r\n    {\r\n        uint256 quantity = tokensAuction[_tokenAddress][_auctionNumber].tokenQuantity;\r\n        _bid(_tokenAddress, _auctionNumber, msg.value);\r\n        _transfer(_tokenAddress,msg.sender, quantity);\r\n    }\r\n\r\n    /// @dev Function to chnage the OwnerCut only accessible by the Owner of the contract\r\n    /// @param _newCut - Sets the ownerCut to new value\r\n    function setOwnerCut(uint256 _newCut) external onlyOwner {\r\n        require(_newCut <= 10000);\r\n        ownerCut = _newCut;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_auctionNumber\",\"type\":\"uint256\"}],\"name\":\"cancelAuctionWhenPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptiblesAuctionContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_auctionNumber\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_auctionNumber\",\"type\":\"uint256\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCut\",\"type\":\"uint256\"}],\"name\":\"setOwnerCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_auctionNumber\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"name\":\"endingPrice\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"startedAt\",\"type\":\"uint256\"},{\"name\":\"tokenQuantity\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"auctionNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_auctionNumber\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSaleClockAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_tokenQuantity\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auctionNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startedAt\",\"type\":\"uint64\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auctionNumber\",\"type\":\"uint256\"}],\"name\":\"AuctionWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sellerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"auctionNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EtherWithdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"SaleClockAuction","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://71f94e8553230b0bdb312cb453318c4b9625c096c0d2751fece5fc955e0af3b5"}]}