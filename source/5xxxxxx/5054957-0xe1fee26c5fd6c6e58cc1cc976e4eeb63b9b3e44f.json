{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n// ------------------------------------------------------------------------\r\n// HODLwin2Eth_exchanger\r\n//  This HODL2eth exchanger contract created by the www.HODLwin.com team\r\n//  is heavily based on the tokentraderfactory created by\r\n//  JonnyLatte & BokkyPooBah 2017. released under The MIT licence.\r\n//  big appreciation and respect to those two\r\n//\r\n//  This is a Decentralised trustless contract and when launched will only accept \r\n//  the token input at launch, in our case the HODLwin token and return ETH\r\n//  in exchange. \r\n//\r\n//  Once it has been released on the blockchain only the rate of Ethereum\r\n//  swapped in return for the HODLwin tokens and also the owner of the contract \r\n//  can be changed. \r\n//  \r\n//  No one including the owner can turn it off or set the price below\r\n//  the original crowdsale price of the token the price can only ever be \r\n//  set higher than this public crowdsale price. \r\n//  It is intended that the only way to get Eth out of this contract is to\r\n//  exchange HODLwin tokens for it. It is also setup to receive any Eth sent\r\n//  to store for exchanging for HODLwin tokens.\r\n//\r\n//  original code licensed under:\r\n//   Enjoy. (c) JonnyLatte & BokkyPooBah 2017. The MIT licence.\r\n//  modified code by www.HODLwin.com team\r\n// ------------------------------------------------------------------------\r\n\r\ncontract ERC20 {\r\n    \r\n  // Events ---------------------------\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n  // Functions ------------------------\r\n\r\n  function totalSupply() public constant returns (uint);\r\n  function balanceOf(address _owner) public constant returns (uint balance);\r\n  function transfer(address _to, uint _value) public returns (bool success);\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n  function approve(address _spender, uint _value) public returns (bool success);\r\n  function allowance(address _owner, address _spender) public constant returns (uint remaining);\r\n\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    \r\n     event OwnershipTransferProposed(address indexed _from, address indexed _to);\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier checkpermission{\r\n       require(msg.sender == owner && HODLwin2Eth(msg.sender).owner() == owner);\r\n        _;\r\n    }\r\n\r\n       function transferOwnership(address _newOwner) public onlyOwner {\r\n    require( _newOwner != owner );\r\n    require( _newOwner != address(0x0) );\r\n    OwnershipTransferProposed(owner, _newOwner);\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n// contract can buy tokens for ETH\r\n// prices are in amount of wei per batch of token units\r\n\r\ncontract HODLwin2Eth is Owned {\r\n\r\n    address public HODLaddress;       // address of token\r\n    uint256 public mktValue;    // contract buys lots of token at this price\r\n    uint256 public units;       // lot size (token-wei)\r\n    uint256 public origMktValue; //the original crowdsale price\r\n    event HODLrSoldWin(address indexed seller, uint256 amountOfTokensToSell,\r\n        uint256 tokensSold, uint256 etherValueOfTokensSold);\r\n    event mktValueupdated(uint _mktValue);\r\n    // Constructor - only to be called by the HODLwin2EthExchanger contract\r\n    \r\n    function HODLwin2Eth (\r\n        address _HODLaddress,\r\n        uint256 _mktValue,\r\n        uint256 _units,\r\n        uint256 _origMktValue\r\n                ) public {\r\n        HODLaddress       = _HODLaddress;\r\n        mktValue    = _mktValue;\r\n         units       = _units;\r\n         origMktValue = _origMktValue;\r\n           }\r\n\r\n     // instructions for HODLr to sell Win tokens for ethers:\r\n    // 1. Calling the HODLwin   approve() function with the following parameters\r\n    //    _spender              is the address of this contract\r\n    //    _value                is the number of tokens to be sold\r\n    // 2. Call the HODLrSellWin() function with the following parameter\r\n    //    amountOfTokensToSell  is the amount of asset tokens to be sold by\r\n    //                          the taker\r\n    //\r\n    // The HODLrSoldWin() event is logged with the following parameters\r\n    //   seller                  is the seller's address\r\n    //   amountOfTokensToSell    is the amount of the asset tokens being\r\n    //                           sold by the taker\r\n    //   tokensSold              is the number of the asset tokens sold\r\n    //   etherValueOfTokensSold  is the ether value of the asset tokens sold\r\n    // Warning you cannot sell less than 1 full token only accepts 1 token or larger\r\n    \r\n    function HODLrSellWin(uint256 amountOfTokensToSell) public {\r\n                // Maximum number of token the contract can buy\r\n            // Note that mktValue has already been validated as > 0\r\n            uint256 can_buy = this.balance / mktValue;\r\n            // Token lots available\r\n            // Note that units has already been validated as > 0\r\n            uint256 order = amountOfTokensToSell / units;\r\n            // Adjust order for funds available\r\n            if(order > can_buy) order = can_buy;\r\n           if(order > 0){\r\n            // Extract user tokens\r\n           \r\n             require (ERC20(HODLaddress).transferFrom(msg.sender, address(this), order * units));\r\n               //  Pay user\r\n             require (msg.sender.send(order * mktValue));\r\n           }\r\n           \r\n            HODLrSoldWin(msg.sender, amountOfTokensToSell, order * units, order * mktValue);\r\n        \r\n    }\r\n\r\nfunction updatemktValue(uint _mktValue) public onlyOwner {\r\n\t\r\n    require(_mktValue >= origMktValue);\r\n\tmktValue = _mktValue;\r\n   mktValueupdated(_mktValue);\r\n  }\r\n  \r\n    // Taker buys tokens by sending ethers\r\n   function () public payable {\r\n      \r\n    }\r\n}\r\n\r\n// This contract deploys HODLwin2Eth contracts and logs the event\r\ncontract HODLwin2EthExchanger is Owned {\r\n\r\n    event TradeListing(address indexed ownerAddress, address indexed HODLwin2EthAddress,\r\n        address indexed HODLaddress, uint256 mktValue, uint256 units, uint256 origMktValue);\r\n \r\n\r\n    mapping(address => bool) _verify;\r\n\r\n    // Anyone can call this method to verify the settings of a\r\n    // HODLwin2Eth contract. The parameters are:\r\n    //   tradeContract  is the address of a HODLwin2Eth contract\r\n    //\r\n    // Return values:\r\n    //   valid        did this HODLwin2EthExchanger create the HODLwin2Eth contract?\r\n    //   owner        is the owner of the HODLwin2Eth contract\r\n    //   HODLaddress  is the ERC20 HODLwin contract address\r\n    //   mktValue     is the buy price in ethers per `units` of HODLwin tokens\r\n    //   units        is the number of units of HODLwin tokens\r\n    //   origMktValue is the original crowdsale price from the public crowdsale\r\n    //\r\n    function verify(address tradeContract) public  constant returns (\r\n        bool    valid,\r\n        address owner,\r\n        address HODLaddress,\r\n        uint256 mktValue,\r\n        uint256 units,\r\n        uint256 origMktValue\r\n      \r\n    ) {\r\n        valid = _verify[tradeContract];\r\n      require (valid);\r\n            HODLwin2Eth t = HODLwin2Eth(tradeContract);\r\n            owner         = t.owner();\r\n            HODLaddress    = t.HODLaddress();\r\n            mktValue      = t.mktValue();\r\n            units         = t.units();\r\n            origMktValue = t.origMktValue();\r\n }\r\n\r\n    // Maker can call this method to create a new HODLwin2Eth contract\r\n    // with the maker being the owner of this new contract\r\n    //\r\n    // Parameters:\r\n    //   HODLaddress  is the address of the HODLwin contract\r\n    //   mktValue     is the buy price in ethers per `units` of HODLwin tokens\r\n    //   sellPrice    is the sell price in ethers per `units` of HODLwin tokens\r\n    //   units        is the number of units of HODLwin tokens\r\n    //\r\n    // For example, setting up the HODLwin2Eth contract for the following\r\n    // buy HODLwin tokens at a rate of 1*e15/1*e18= 0.001 ETH (1ETH=1000WIN)\r\n    //   HODLaddress        0x48c80f1f4d53d5951e5d5438b54cba84f29f32a5\r\n    //   mktValue     1*e15\r\n    //   units        1*e18\r\n    //  \r\n    // The TradeListing() event is logged with the following parameters\r\n    //   ownerAddress        is the Maker's address\r\n    //   HODLwin2EthAddress  is the address of the newly created HODLwin2Eth contract\r\n    //   HODLaddress         is the ERC20 HODLaddress address\r\n    //   mktValue            is the buy price in ethers per `units` of HODLaddress tokens\r\n    //   sellPrice           is the sell price in ethers per `units` of HODLaddress tokens\r\n    //   unit                is the number of units of HODLaddress tokens\r\n    //   buysTokens          is the HODLwin2Eth contract buying tokens?\r\n    //   sellsTokens         is the HODLwin2Eth contract selling tokens?\r\n    //\r\n    function createTradeContract(\r\n        address HODLaddress,\r\n        uint256 mktValue,\r\n        uint256 units,\r\n        uint256 origMktValue\r\n    ) public returns (address trader) {\r\n        // Cannot have invalid HODLaddress\r\n        require (HODLaddress != 0x0);\r\n        // Check for ERC20 allowance function\r\n        // This will throw an error if the allowance function\r\n        // is undefined to prevent GNTs from being used\r\n        // with this HODLwin\r\n        uint256 allowance = ERC20(HODLaddress).allowance(msg.sender, this);\r\n        allowance= allowance;\r\n        // Cannot set zero or negative price\r\n        require(mktValue > 0);\r\n        // Must make profit on spread\r\n       // Cannot buy or sell zero or negative units\r\n        require(units > 0);\r\n\r\n        trader = new HODLwin2Eth(\r\n            HODLaddress,\r\n            mktValue,\r\n            units,\r\n            origMktValue\r\n            );\r\n        // Record that this HODLwin created the trader\r\n        _verify[trader] = true;\r\n        // Set the owner to whoever called the function\r\n        HODLwin2Eth(trader).transferOwnership(msg.sender);\r\n        TradeListing(msg.sender, trader, HODLaddress, mktValue, units, origMktValue);\r\n    }\r\n\r\n   \r\n    //Fallback Accepts ether even accidental sending \r\n   function () public payable {\r\n    \r\n  }\r\n   \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amountOfTokensToSell\",\"type\":\"uint256\"}],\"name\":\"HODLrSellWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"origMktValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mktValue\",\"type\":\"uint256\"}],\"name\":\"updatemktValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"units\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mktValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HODLaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_HODLaddress\",\"type\":\"address\"},{\"name\":\"_mktValue\",\"type\":\"uint256\"},{\"name\":\"_units\",\"type\":\"uint256\"},{\"name\":\"_origMktValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountOfTokensToSell\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherValueOfTokensSold\",\"type\":\"uint256\"}],\"name\":\"HODLrSoldWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_mktValue\",\"type\":\"uint256\"}],\"name\":\"mktValueupdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HODLwin2Eth","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000938358f6f7786735cffbac3a218f3be16e496cf400000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000038d7ea4c68000","Library":"","SwarmSource":"bzzr://4b0590482047139a59657fa903ade3298e7fa44dfcc315139b32d209959ee581"}]}