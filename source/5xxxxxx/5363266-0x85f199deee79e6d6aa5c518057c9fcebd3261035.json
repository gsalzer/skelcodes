{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * Multiplication\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n  \tif (a == 0) {\r\n      return 0;\r\n  \t}\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * Division\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0); \r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * Soustraction\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * Addition\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // ERROR if not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * Amount of token burn\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(burner, _value);\r\n  }\r\n}\r\n\r\ncontract CCXToken is  BurnableToken{\r\n    string public constant name = \"CCX\";\r\n    string public constant symbol = \"CCX\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public totalSupply;\r\n\r\n    function CCXToken() public\r\n    {\r\n        totalSupply = 40000000 * 10 ** uint256(decimals);\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n    \r\n    \r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\n\r\ncontract CCXCrowdsale is Ownable{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    enum Periods {NotStarted, PreSale,EndPreSale,ThirdWeek,SecondWeek,FirstWeek,Finished}\r\n    Periods public period;\r\n\r\n\r\n    CCXToken public token;\r\n    address public wallet;\r\n    uint256 public constant ratePresale = 1500;\r\n    uint256 public constant rateFirstWeek = 1100;\r\n    uint256 public constant rateSecondWeek = 1200;\r\n    uint256 public constant rateThirdWeek = 1300;\r\n    uint256 public constant rate = 1000;\r\n    uint256 public balance;\r\n    uint256 public tokens;\r\n\r\n    mapping(address => uint256) internal balances;\r\n\r\n     function CCXCrowdsale(address _token,address _wallet) public{\r\n        token = CCXToken(_token);\r\n           wallet = _wallet;\r\n        period = Periods.NotStarted;\r\n    }\r\n\r\n   \r\n    \r\n    \r\n\r\n    function nextState() onlyOwner public{\r\n       \r\n        if(period == Periods.NotStarted){\r\n            period = Periods.PreSale;\r\n        }\r\n        else if(period == Periods.PreSale){\r\n            period = Periods.EndPreSale;\r\n        }\r\n        else if(period == Periods.EndPreSale){\r\n            period = Periods.ThirdWeek;\r\n        }\r\n        else if(period == Periods.ThirdWeek){\r\n            period = Periods.SecondWeek;\r\n        }\r\n        else if(period == Periods.SecondWeek){\r\n            period = Periods.FirstWeek;\r\n        }\r\n    }\r\n\r\n    function buyTokens() internal\r\n    {\r\n        \r\n          uint256   amount = msg.value;\r\n          bool success= false;\r\n      if(uint(period) == 1){\r\n      \t\t    tokens = amount.mul(ratePresale); \t\r\n       }else if(uint(period) == 3){\r\n      \t\t    tokens = amount.mul(rateThirdWeek);\r\n       }\r\n         else if(uint(period) == 4){    \r\n      \t\t    tokens = amount.mul(rateSecondWeek);\r\n       }\r\n         else if(uint(period) == 5){     \r\n      \t\t    tokens = amount.mul(rateFirstWeek);\r\n       }\r\n       else{\r\n         tokens = amount.mul(rate);\r\n    }\r\n        success = token.transfer(msg.sender, tokens);\r\n        balance = balance.add(tokens);\r\n        require(success);\r\n        wallet.transfer(msg.value);\r\n  \r\n       }\r\n\r\n\r\n    function () public payable{\r\n            require(msg.sender != address(0));\r\n        require(msg.value > 0);\r\n        buyTokens();\r\n    }\r\n  \r\n   function burningTokens() public onlyOwner{\r\n        if(period == Periods.Finished){\r\n            token.burn(tokens);\r\n        }\r\n    }\r\n}\r\n\r\n   contract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ratePresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateSecondWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateThirdWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateFirstWeek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burningTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CCXCrowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c6a8ec006aef55454471e5a6a49fb07437e48657000000000000000000000000270c448bdc43f8369718cc4185e4fff49e4afd88","Library":"","SwarmSource":"bzzr://158a3089f1c390b9028d7034597e13bf2785421ae766dd52324cd1e46f6a6f10"}]}