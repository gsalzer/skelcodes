{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Releasable is Ownable {\r\n\r\n  event Release();\r\n\r\n  bool public released = false;\r\n\r\n  modifier afterReleased() {\r\n    require(released);\r\n    _;\r\n  }\r\n\r\n  function release() onlyOwner public {\r\n    require(!released);\r\n    released = true;\r\n    Release();\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Managed is Releasable {\r\n\r\n  mapping (address => bool) public manager;\r\n  event SetManager(address _addr);\r\n  event UnsetManager(address _addr);\r\n\r\n  function Managed() public {\r\n    manager[msg.sender] = true;\r\n  }\r\n\r\n  modifier onlyManager() {\r\n    require(manager[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  function setManager(address _addr) public onlyOwner {\r\n    require(_addr != address(0) && manager[_addr] == false);\r\n    manager[_addr] = true;\r\n\r\n    SetManager(_addr);\r\n  }\r\n\r\n  function unsetManager(address _addr) public onlyOwner {\r\n    require(_addr != address(0) && manager[_addr] == true);\r\n    manager[_addr] = false;\r\n\r\n    UnsetManager(_addr);\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ReleasableToken is StandardToken, Managed {\r\n\r\n  function transfer(address _to, uint256 _value) public afterReleased returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function saleTransfer(address _to, uint256 _value) public onlyManager returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public afterReleased returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public afterReleased returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public afterReleased returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public afterReleased returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract BurnableToken is ReleasableToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) onlyManager public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= tota0lSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n  *  GANA\r\n  */\r\ncontract GANA is BurnableToken {\r\n\r\n  string public constant name = \"GANA\";\r\n  string public constant symbol = \"GANA\";\r\n  uint8 public constant decimals = 18;\r\n\r\n  event ClaimedTokens(address manager, address _token, uint256 claimedBalance);\r\n\r\n  function GANA() public {\r\n    totalSupply = 2000000000 * 1 ether;\r\n    balances[msg.sender] = totalSupply;\r\n  }\r\n\r\n  function claimTokens(address _token, uint256 _claimedBalance) public onlyManager afterReleased {\r\n    ERC20Basic token = ERC20Basic(_token);\r\n    uint256 tokenBalance = token.balanceOf(this);\r\n    require(tokenBalance >= _claimedBalance);\r\n\r\n    address manager = msg.sender;\r\n    token.transfer(manager, _claimedBalance);\r\n    ClaimedTokens(manager, _token, _claimedBalance);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n  *  Whitelist contract\r\n  */\r\ncontract Whitelist is Ownable {\r\n\r\n   mapping (address => bool) public whitelist;\r\n   event Registered(address indexed _addr);\r\n   event Unregistered(address indexed _addr);\r\n\r\n   modifier onlyWhitelisted(address _addr) {\r\n     require(whitelist[_addr]);\r\n     _;\r\n   }\r\n\r\n   function isWhitelist(address _addr) public view returns (bool listed) {\r\n     return whitelist[_addr];\r\n   }\r\n\r\n   function registerAddress(address _addr) public onlyOwner {\r\n     require(_addr != address(0) && whitelist[_addr] == false);\r\n     whitelist[_addr] = true;\r\n     Registered(_addr);\r\n   }\r\n\r\n   function registerAddresses(address[] _addrs) public onlyOwner {\r\n     for(uint256 i = 0; i < _addrs.length; i++) {\r\n       require(_addrs[i] != address(0) && whitelist[_addrs[i]] == false);\r\n       whitelist[_addrs[i]] = true;\r\n       Registered(_addrs[i]);\r\n     }\r\n   }\r\n\r\n   function unregisterAddress(address _addr) public onlyOwner onlyWhitelisted(_addr) {\r\n       whitelist[_addr] = false;\r\n       Unregistered(_addr);\r\n   }\r\n\r\n   function unregisterAddresses(address[] _addrs) public onlyOwner {\r\n     for(uint256 i = 0; i < _addrs.length; i++) {\r\n       require(whitelist[_addrs[i]]);\r\n       whitelist[_addrs[i]] = false;\r\n       Unregistered(_addrs[i]);\r\n     }\r\n   }\r\n\r\n}\r\n\r\n\r\n/**\r\n  *  GANA PUBLIC-SALE\r\n  */\r\ncontract GanaPublicSale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  GANA public gana;\r\n  Whitelist public whitelist;\r\n  address public wallet;\r\n  uint256 public hardCap   = 30000 ether; //publicsale cap\r\n  uint256 public weiRaised = 0;\r\n  uint256 public defaultRate = 20000;\r\n\r\n  //uint256 public startTime = 1483228800; //TEST ONLY UTC 01/01/2017 00:00am\r\n  uint256 public startTime = 1524218400; //UTC 04/20/2018 10:00am\r\n  uint256 public endTime   = 1526637600; //UTC 05/18/2018 10:00am\r\n\r\n  event TokenPurchase(address indexed sender, address indexed buyer, uint256 weiAmount, uint256 ganaAmount);\r\n  event Refund(address indexed buyer, uint256 weiAmount);\r\n  event TransferToSafe();\r\n  event BurnAndReturnAfterEnded(uint256 burnAmount, uint256 returnAmount);\r\n\r\n  function GanaPublicSale(address _gana, address _wallet, address _whitelist) public {\r\n    require(_wallet != address(0));\r\n    gana = GANA(_gana);\r\n    whitelist = Whitelist(_whitelist);\r\n    wallet = _wallet;\r\n  }\r\n\r\n  modifier onlyWhitelisted() {\r\n    require(whitelist.isWhitelist(msg.sender));\r\n    _;\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyGana(msg.sender);\r\n  }\r\n\r\n  function buyGana(address buyer) public onlyWhitelisted payable {\r\n    require(!hasEnded());\r\n    require(afterStart());\r\n    require(buyer != address(0));\r\n    require(msg.value > 0);\r\n    require(buyer == msg.sender);\r\n\r\n    uint256 weiAmount = msg.value;\r\n    //pre-calculate wei raise after buying\r\n    uint256 preCalWeiRaised = weiRaised.add(weiAmount);\r\n    uint256 ganaAmount;\r\n    uint256 rate = getRate();\r\n\r\n    if(preCalWeiRaised <= hardCap){\r\n      //the pre-calculate wei raise is less than the hard cap\r\n      ganaAmount = weiAmount.mul(rate);\r\n      gana.saleTransfer(buyer, ganaAmount);\r\n      weiRaised = preCalWeiRaised;\r\n      TokenPurchase(msg.sender, buyer, weiAmount, ganaAmount);\r\n    }else{\r\n      //the pre-calculate weiRaised is more than the hard cap\r\n      uint256 refundWeiAmount = preCalWeiRaised.sub(hardCap);\r\n      uint256 fundWeiAmount =  weiAmount.sub(refundWeiAmount);\r\n      ganaAmount = fundWeiAmount.mul(rate);\r\n      gana.saleTransfer(buyer, ganaAmount);\r\n      weiRaised = weiRaised.add(fundWeiAmount);\r\n      TokenPurchase(msg.sender, buyer, fundWeiAmount, ganaAmount);\r\n      buyer.transfer(refundWeiAmount);\r\n      Refund(buyer,refundWeiAmount);\r\n    }\r\n  }\r\n\r\n  function getRate() public view returns (uint256) {\r\n    if(weiRaised < 12500 ether){\r\n      return 21000;\r\n    }else if(weiRaised < 25000 ether){\r\n      return 20500;\r\n    }else{\r\n      return 20000;\r\n    }\r\n  }\r\n\r\n  //Was it sold out or sale overdue\r\n  function hasEnded() public view returns (bool) {\r\n    bool hardCapReached = weiRaised >= hardCap; // balid cap\r\n    return hardCapReached || afterEnded();\r\n  }\r\n\r\n  function afterEnded() internal constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n  function afterStart() internal constant returns (bool) {\r\n    return now >= startTime;\r\n  }\r\n\r\n  function transferToSafe() onlyOwner public {\r\n    require(hasEnded());\r\n    wallet.transfer(this.balance);\r\n    TransferToSafe();\r\n  }\r\n\r\n  /**\r\n  * @dev burn unsold token and return bonus token\r\n  * @param reserveWallet reserve pool address\r\n  */\r\n  function burnAndReturnAfterEnded(address reserveWallet) onlyOwner public {\r\n    require(reserveWallet != address(0));\r\n    require(hasEnded());\r\n    uint256 unsoldWei = hardCap.sub(weiRaised);\r\n    uint256 ganaBalance = gana.balanceOf(this);\r\n    require(ganaBalance > 0);\r\n\r\n    if(unsoldWei > 0){\r\n      //Burn unsold and return bonus\r\n      uint256 unsoldGanaAmount = ganaBalance;\r\n      uint256 burnGanaAmount = unsoldWei.mul(defaultRate);\r\n      uint256 bonusGanaAmount = unsoldGanaAmount.sub(burnGanaAmount);\r\n      gana.burn(burnGanaAmount);\r\n      gana.saleTransfer(reserveWallet, bonusGanaAmount);\r\n      BurnAndReturnAfterEnded(burnGanaAmount, bonusGanaAmount);\r\n    }else{\r\n      //All tokens were sold. return bonus\r\n      gana.saleTransfer(reserveWallet, ganaBalance);\r\n      BurnAndReturnAfterEnded(0, ganaBalance);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev emergency function before sale\r\n  * @param returnAddress return token address\r\n  */\r\n  function returnGanaBeforeSale(address returnAddress) onlyOwner public {\r\n    require(returnAddress != address(0));\r\n    require(weiRaised == 0);\r\n    uint256 returnGana = gana.balanceOf(this);\r\n    gana.saleTransfer(returnAddress, returnGana);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"buyGana\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferToSafe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reserveWallet\",\"type\":\"address\"}],\"name\":\"burnAndReturnAfterEnded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gana\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"returnAddress\",\"type\":\"address\"}],\"name\":\"returnGanaBeforeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_gana\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ganaAmount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransferToSafe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"BurnAndReturnAfterEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GanaPublicSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006754e21b9eaa053c62d7854dd6561ae451b0cbcf000000000000000000000000d6746c99cf43ad52777c4e26d9a9e957b992582e000000000000000000000000d99c17fc653176a32734031be3000bc82f261eb0","Library":"","SwarmSource":"bzzr://cc05296e3ee1d89f37bc91bb036fb513643a5c369d4bed497b60d465ae3004b7"}]}