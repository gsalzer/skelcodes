{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address holder, address spender) external view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  event Approval(address indexed holder, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // require(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // require(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract SpindleToken is ERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = 'SPINDLE';\r\n    string public constant symbol = 'SPD';\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 constant TOTAL_SPD = 10000000000;\r\n    uint256 constant TOTAL_SUPPLY = TOTAL_SPD * (uint256(10) ** decimals);\r\n\r\n    uint64 constant ICO_START_TIME = 1526083200; // 2018-05-12\r\n    uint64 constant RELEASE_B = ICO_START_TIME + 30 days;\r\n    uint64 constant RELEASE_C = ICO_START_TIME + 60 days;\r\n    uint64 constant RELEASE_D = ICO_START_TIME + 90 days;\r\n    uint64 constant RELEASE_E = ICO_START_TIME + 180 days;\r\n    uint64 constant RELEASE_F = ICO_START_TIME + 270 days;\r\n    uint64[] RELEASE = new uint64[](6);\r\n\r\n    mapping(address => uint256[6]) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    /**\r\n     * @dev Constructor that gives msg.sender all of existing tokens.\r\n     */\r\n    function SpindleToken() public {\r\n        RELEASE[0] = ICO_START_TIME;\r\n        RELEASE[1] = RELEASE_B;\r\n        RELEASE[2] = RELEASE_C;\r\n        RELEASE[3] = RELEASE_D;\r\n        RELEASE[4] = RELEASE_E;\r\n        RELEASE[5] = RELEASE_F;\r\n\r\n        balances[msg.sender][0] = TOTAL_SUPPLY;\r\n        emit Transfer(0x0, msg.sender, TOTAL_SUPPLY);\r\n    }\r\n\r\n    /**\r\n     * @dev total number of tokens in existence\r\n     */\r\n    function totalSupply() external view returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) external returns (bool) {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        _updateLockUpAmountOf(msg.sender);\r\n\r\n        // SafeMath.sub will revert if there is not enough balance.\r\n        balances[msg.sender][0] = balances[msg.sender][0].sub(_value);\r\n        balances[_to][0] = balances[_to][0].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the payable balance of the specified address.\r\n     * @param _holder The address to query the the balance of.\r\n     * @return An uint256 representing the payable amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _holder) external view returns (uint256) {\r\n        uint256[6] memory arr = lockUpAmountOf(_holder);\r\n        return arr[0];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the lockUpAmount tuple of the specified address.\r\n     * @param _holder address The address to query the the balance of.\r\n     * @return An LockUpAmount representing the amount owned by the passed address.\r\n    */\r\n    function lockUpAmountOf(address _holder) public view returns (\r\n        uint256[6]\r\n    ) {\r\n        uint256[6] memory arr;\r\n        arr[0] = balances[_holder][0];\r\n        for (uint i = 1; i < RELEASE.length; i++) {\r\n            arr[i] = balances[_holder][i];\r\n            if(now >= RELEASE[i]){\r\n                arr[0] = arr[0].add(balances[_holder][i]);\r\n                arr[i] = 0;\r\n            }\r\n            else\r\n            {\r\n                arr[i] = balances[_holder][i];\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    /**\r\n     * @dev update the lockUpAmount of _address.\r\n     * @param _address address The address updated the balances of.\r\n     */\r\n    function _updateLockUpAmountOf(address _address) internal {\r\n        uint256[6] memory arr = lockUpAmountOf(_address);\r\n\r\n        for(uint8 i = 0;i < arr.length; i++){\r\n            balances[_address][i] = arr[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev gets the strings of lockUpAmount of _address.\r\n     * @param _address address The address gets the string of lockUpAmount of.\r\n     */\r\n    function lockUpAmountStrOf(address _address) external view returns (\r\n        address Address,\r\n        string a,\r\n        string b,\r\n        string c,\r\n        string d,\r\n        string e,\r\n        string f\r\n    ) {\r\n        address __address = _address;\r\n        if(__address == address(0)) __address = msg.sender;\r\n\r\n        uint256[6] memory arr = lockUpAmountOf(__address);\r\n\r\n        return (\r\n            __address,\r\n            _uintToSPDStr(arr[0]),\r\n            _uintToSPDStr(arr[1]),\r\n            _uintToSPDStr(arr[2]),\r\n            _uintToSPDStr(arr[3]),\r\n            _uintToSPDStr(arr[4]),\r\n            _uintToSPDStr(arr[5])\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev gets the SPD_strings of a token amount.\r\n     * @param _amount The value of a token amount.\r\n     */\r\n    function _uintToSPDStr(uint256 _amount) internal pure returns (string) {\r\n        uint8 __tindex;\r\n        uint8 __sindex;\r\n        uint8 __left;\r\n        uint8 __right;\r\n        bytes memory __t = new bytes(30);  // '10000000000.000000000000000000'.length is 30 (max input)\r\n\r\n        // set all bytes\r\n        for(__tindex = 29; ; __tindex--){  // last_index:29 to first_index:0\r\n            if(__tindex == 11){            // dot index\r\n                __t[__tindex] = byte(46);  // byte of '.' is 46\r\n                continue;\r\n            }\r\n            __t[__tindex] = byte(48 + _amount%10);  // byte of '0' is 48\r\n            _amount = _amount.div(10);\r\n            if(__tindex == 0) break;\r\n        }\r\n\r\n        // calc the str region\r\n        for(__left = 0; __left < 10; __left++) {     // find the first index of non-zero byte.  return at least '0.xxxxx'\r\n            if(__t[__left]  != byte(48)) break;      // byte of '0' is 48\r\n        }\r\n        for(__right = 29; __right > 12; __right--){  // find the  last index of non-zero byte.  return at least 'xxxxx.0'\r\n            if(__t[__right] != byte(48)) break;      // byte of '0' is 48\r\n        }\r\n\r\n        bytes memory __s = new bytes(__right - __left + 1 + 4); // allocatte __s[left..right] + ' SPD'\r\n\r\n        // set and return\r\n        __sindex = 0;\r\n        for(__tindex = __left; __tindex <= __right; __tindex++){\r\n            __s[__sindex] = __t[__tindex];\r\n            __sindex++;\r\n        }\r\n\r\n        __s[__sindex++] = byte(32);  // byte of ' ' is 32\r\n        __s[__sindex++] = byte(83);  // byte of 'S' is 83\r\n        __s[__sindex++] = byte(80);  // byte of 'P' is 80\r\n        __s[__sindex++] = byte(68);  // byte of 'D' is 68\r\n\r\n        return string(__s);\r\n    }\r\n\r\n    /**\r\n     * @dev Distribute tokens from owner address to another\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _a uint256 the amount of A-type-tokens to be transferred\r\n     * ...\r\n     * @param _f uint256 the amount of F-type-tokens to be transferred\r\n     */\r\n    function distribute(address _to, uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e, uint256 _f) onlyOwner external returns (bool) {\r\n        require(_to != address(0));\r\n        _updateLockUpAmountOf(msg.sender);\r\n\r\n        uint256 __total = 0;\r\n        __total = __total.add(_a);\r\n        __total = __total.add(_b);\r\n        __total = __total.add(_c);\r\n        __total = __total.add(_d);\r\n        __total = __total.add(_e);\r\n        __total = __total.add(_f);\r\n\r\n        balances[msg.sender][0] = balances[msg.sender][0].sub(__total);\r\n\r\n        balances[_to][0] = balances[_to][0].add(_a);\r\n        balances[_to][1] = balances[_to][1].add(_b);\r\n        balances[_to][2] = balances[_to][2].add(_c);\r\n        balances[_to][3] = balances[_to][3].add(_d);\r\n        balances[_to][4] = balances[_to][4].add(_e);\r\n        balances[_to][5] = balances[_to][5].add(_f);\r\n\r\n        emit Transfer(msg.sender, _to, __total);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        _updateLockUpAmountOf(_from);\r\n\r\n        balances[_from][0] = balances[_from][0].sub(_value);\r\n        balances[_to][0] = balances[_to][0].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) external returns (bool) {\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _holder address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address _holder, address _spender) external view returns (uint256) {\r\n        return allowed[_holder][_spender];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_a\",\"type\":\"uint256\"},{\"name\":\"_b\",\"type\":\"uint256\"},{\"name\":\"_c\",\"type\":\"uint256\"},{\"name\":\"_d\",\"type\":\"uint256\"},{\"name\":\"_e\",\"type\":\"uint256\"},{\"name\":\"_f\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"lockUpAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[6]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"lockUpAmountStrOf\",\"outputs\":[{\"name\":\"Address\",\"type\":\"address\"},{\"name\":\"a\",\"type\":\"string\"},{\"name\":\"b\",\"type\":\"string\"},{\"name\":\"c\",\"type\":\"string\"},{\"name\":\"d\",\"type\":\"string\"},{\"name\":\"e\",\"type\":\"string\"},{\"name\":\"f\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SpindleToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8718140c084bead5dcdfca3173be3182266b3f3582cdcafdc38b7e043b9f8103"}]}