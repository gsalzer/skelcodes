{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n// The Original All For 1 -  www.allfor1.io\r\n// https://www.twitter.com/allfor1_io\r\n// https://www.reddit.com/user/allfor1_io\r\n\r\ncontract AllForOne {\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    mapping (address => uint) private playerCount;\r\n    mapping (address => uint) private currentGame;\r\n    mapping (address => uint) private currentPlayersRequired;\r\n    mapping (address => uint) private playerRegistrationStatus;\r\n    mapping (address => uint) private confirmedWinners;\r\n    mapping (uint => address) private numberToAddress;\r\n    uint private currentBet;\r\n    uint private jackpot;\r\n    uint private ownerBalance;\r\n    address private contractAddress;\r\n    address private owner;\r\n    address private lastWinner;\r\n    \r\n    function AllForOne () {\r\n        contractAddress = this;\r\n        currentGame[contractAddress]++;\r\n        currentPlayersRequired[contractAddress] = 25;\r\n        owner = msg.sender;\r\n        currentBet = 0.005 ether;\r\n        lastWinner = msg.sender;\r\n    }\r\n    modifier onlyOwner () {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier changeBetConditions () {\r\n        require (playerCount[contractAddress] == 0);\r\n        require (contractAddress.balance == 0 ether);\r\n        _;\r\n    }\r\n    modifier betConditions () {\r\n        require (playerRegistrationStatus[msg.sender] < currentGame[contractAddress]);\r\n        require (playerCount[contractAddress] < currentPlayersRequired[contractAddress]);\r\n        require (msg.value == currentBet);\r\n        require (confirmedWinners[msg.sender] == 0);\r\n        _;\r\n    }\r\n    modifier revealConditions () {\r\n        require (playerCount[contractAddress] == currentPlayersRequired[contractAddress]);\r\n        _;\r\n    }\r\n    modifier winnerWithdrawConditions () {\r\n        require (confirmedWinners[msg.sender] == 1);\r\n        _;\r\n    }\r\n    modifier ownerWithdrawConditions () {\r\n        require (ownerBalance >= 1);\r\n        _;\r\n    }\r\n    function transferOwnership (address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    function changeBet (uint _newBet) external changeBetConditions onlyOwner {\r\n        currentBet = _newBet;\r\n    }\r\n    function canBet () view public returns (uint, uint, address) {\r\n        uint _status = 0;\r\n        uint _playerCount = playerCount[contractAddress];\r\n        address _lastWinner = lastWinner;\r\n        if (playerRegistrationStatus[msg.sender] < currentGame[contractAddress]) {\r\n        _status = 1;\r\n        }\r\n        return (_status, _playerCount, _lastWinner);\r\n    }\r\n    function placeBet () payable betConditions {\r\n        playerCount[contractAddress]++;\r\n        playerRegistrationStatus[msg.sender] = currentGame[contractAddress];\r\n        numberToAddress[playerCount[contractAddress]] = msg.sender;\r\n        }\r\n    function revealWinner () external revealConditions {\r\n        playerCount[contractAddress] = 0;\r\n        currentGame[contractAddress]++;\r\n        uint _winningNumber = uint(keccak256(currentGame[contractAddress] + uint(numberToAddress[8]) + uint(numberToAddress[24]) - uint(numberToAddress[6]) * uint(numberToAddress[17]) + uint(numberToAddress[15]) - uint(numberToAddress[19]) * uint(numberToAddress[18]) + uint(numberToAddress[22]) - uint(numberToAddress[2]) + uint(numberToAddress[5]) + uint(numberToAddress[4]) - uint(numberToAddress[23]) - uint(numberToAddress[10]) + uint(numberToAddress[21]) - uint(numberToAddress[20]) + uint(numberToAddress[3]) + uint(numberToAddress[16]) - uint(numberToAddress[13]) - uint(numberToAddress[1]) + uint(numberToAddress[12]) - uint(numberToAddress[11]) - uint(numberToAddress[9]) + uint(numberToAddress[14]) - uint(numberToAddress[25]) + uint(numberToAddress[7]))) % currentPlayersRequired[contractAddress] + 1;\r\n        address _winningAddress = numberToAddress[_winningNumber];\r\n        confirmedWinners[_winningAddress] = 1;\r\n        ownerBalance++;\r\n        lastWinner = _winningAddress;\r\n        msg.sender.transfer(currentBet);\r\n    }\r\n    function winnerWithdraw () external winnerWithdrawConditions {\r\n        confirmedWinners[msg.sender] = 0;\r\n        jackpot = (currentBet * (currentPlayersRequired[contractAddress] - 2));\r\n        msg.sender.transfer(jackpot);\r\n    }\r\n    function ownerWithdraw () external onlyOwner ownerWithdrawConditions {\r\n        msg.sender.transfer(ownerBalance * currentBet);\r\n        ownerBalance = 0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"ownerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"revealWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"winnerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBet\",\"type\":\"uint256\"}],\"name\":\"changeBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AllForOne","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9f897f4f332dc0c704e8a11fb180ad907fcc3eae6c18278659cd0a5df9c8c08c"}]}