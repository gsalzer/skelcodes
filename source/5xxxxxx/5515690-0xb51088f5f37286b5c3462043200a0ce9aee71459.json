{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\ncontract Base {\r\n    modifier only(address allowed) {\r\n        require(msg.sender == allowed);\r\n        _;\r\n    }\r\n    // *************************************************\r\n    // *          reentrancy handling                  *\r\n    // *************************************************\r\n    uint constant internal L00 = 2 ** 0;\r\n    uint constant internal L01 = 2 ** 1;\r\n    uint constant internal L02 = 2 ** 2;\r\n    uint constant internal L03 = 2 ** 3;\r\n    uint constant internal L04 = 2 ** 4;\r\n    uint constant internal L05 = 2 ** 5;\r\n    uint private bitlocks = 0;\r\n    modifier noAnyReentrancy {\r\n        var _locks = bitlocks;\r\n        require(_locks == 0);\r\n        bitlocks = uint(-1);\r\n        _;\r\n        bitlocks = _locks;\r\n    }\r\n}\r\ncontract IToken {\r\n    function mint(address _to, uint _amount);\r\n    function start();\r\n    function getTotalSupply() returns(uint);\r\n    function balanceOf(address _owner) returns(uint);\r\n    function transfer(address _to, uint _amount) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n    function burn(uint256 _amount, address _address)  returns (bool success);\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ncontract Owned is Base {\r\n    address public owner;\r\n    address newOwner;\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n    function transferOwnership(address _newOwner) only(owner) {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() only(newOwner) {\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n}\r\ncontract Crowdsale is Owned {\r\n    using SafeMath for uint;\r\n    enum State { INIT, PRESALE, PREICO, PREICO_FINISHED, ICO_FIRST, ICO_SECOND, ICO_THIRD, STOPPED, CLOSED, EMERGENCY_STOP}\r\n    uint public constant MAX_SALE_SUPPLY = 24 * (10**25);\r\n    uint public constant DECIMALS = (10**18);\r\n    State public currentState = State.INIT;\r\n    IToken public token;\r\n    uint public totalSaleSupply = 0;\r\n    uint public totalFunds = 0;\r\n    uint public tokenPrice = 1000000000000000000; //wei\r\n    uint public bonus = 50000; //50%\r\n    uint public currentPrice;\r\n    address public beneficiary;\r\n    mapping(address => uint) balances;\r\n\r\n    address public foundersWallet; //replace\r\n    uint public foundersAmount = 160000000 * DECIMALS;\r\n    uint public maxPreICOSupply = 48 * (10**24);\r\n    uint public maxICOFirstSupply = 84 * (10**24);\r\n    uint public maxICOSecondSupply = 48 * (10**24);\r\n    uint public maxICOThirdSupply = 24 * (10**24);\r\n    uint public currentRoundSupply = 0;\r\n    uint private bonusBase = 100000; //100%;\r\n    modifier inState(State _state){\r\n        require(currentState == _state);\r\n        _;\r\n    }\r\n    modifier salesRunning(){\r\n        require(currentState == State.PREICO\r\n        || currentState == State.ICO_FIRST\r\n        || currentState == State.ICO_SECOND\r\n        || currentState == State.ICO_THIRD);\r\n        _;\r\n    }\r\n    modifier minAmount(){\r\n        require(msg.value >= 0.2 ether);\r\n        _;\r\n    }\r\n\r\n    event Transfer(address indexed _to, uint _value);\r\n    function Crowdsale(address _foundersWallet, address _beneficiary){\r\n        beneficiary = _beneficiary;\r\n        foundersWallet = _foundersWallet;\r\n    }\r\n    function initialize(IToken _token)\r\n    public\r\n    only(owner)\r\n    inState(State.INIT)\r\n    {\r\n        require(_token != address(0));\r\n        token = _token;\r\n        currentPrice = tokenPrice;\r\n        _mint(foundersWallet, foundersAmount);\r\n    }\r\n    function setBonus(uint _bonus) public\r\n    only(owner)\r\n    {\r\n        bonus = _bonus;\r\n    }\r\n    function setPrice(uint _tokenPrice)\r\n    public\r\n    only(owner)\r\n    {\r\n        currentPrice = _tokenPrice;\r\n    }\r\n    function setState(State _newState)\r\n    public\r\n    only(owner)\r\n    {\r\n        require(\r\n            currentState == State.INIT && _newState == State.PRESALE\r\n            || currentState == State.PRESALE && _newState == State.PREICO\r\n            || currentState == State.PREICO && _newState == State.PREICO_FINISHED\r\n            || currentState == State.PREICO_FINISHED && _newState == State.ICO_FIRST\r\n            || currentState == State.ICO_FIRST && _newState == State.STOPPED\r\n            || currentState == State.STOPPED && _newState == State.ICO_SECOND\r\n            || currentState == State.ICO_SECOND && _newState == State.STOPPED\r\n            || currentState == State.STOPPED && _newState == State.ICO_THIRD\r\n            || currentState == State.ICO_THIRD && _newState == State.CLOSED\r\n            || _newState == State.EMERGENCY_STOP\r\n        );\r\n        currentState = _newState;\r\n        if(_newState == State.PREICO\r\n        || _newState == State.ICO_FIRST\r\n        || _newState == State.ICO_SECOND\r\n        || _newState == State.ICO_THIRD){\r\n            currentRoundSupply = 0;\r\n        }\r\n        if(_newState == State.CLOSED){\r\n            _finish();\r\n        }\r\n    }\r\n    function setStateWithBonus(State _newState, uint _bonus)\r\n    public\r\n    only(owner)\r\n    {\r\n        require(\r\n            currentState == State.INIT && _newState == State.PRESALE\r\n            || currentState == State.PRESALE && _newState == State.PREICO\r\n            || currentState == State.PREICO && _newState == State.PREICO_FINISHED\r\n            || currentState == State.PREICO_FINISHED && _newState == State.ICO_FIRST\r\n            || currentState == State.ICO_FIRST && _newState == State.STOPPED\r\n            || currentState == State.STOPPED && _newState == State.ICO_SECOND\r\n            || currentState == State.ICO_SECOND && _newState == State.STOPPED\r\n            || currentState == State.STOPPED && _newState == State.ICO_THIRD\r\n            || currentState == State.ICO_THIRD && _newState == State.CLOSED\r\n            || _newState == State.EMERGENCY_STOP\r\n        );\r\n        currentState = _newState;\r\n        bonus = _bonus;\r\n        if(_newState == State.CLOSED){\r\n            _finish();\r\n        }\r\n    }\r\n    function mintPresale(address _to, uint _amount)\r\n    public\r\n    only(owner)\r\n    inState(State.PRESALE)\r\n    {\r\n        require(totalSaleSupply.add(_amount) <= MAX_SALE_SUPPLY);\r\n        totalSaleSupply = totalSaleSupply.add(_amount);\r\n        _mint(_to, _amount);\r\n    }\r\n    function ()\r\n    public\r\n    payable\r\n    salesRunning\r\n    minAmount\r\n    {\r\n        _receiveFunds();\r\n    }\r\n\r\n\r\n\r\n    //==================== Internal Methods =================\r\n    function _receiveFunds()\r\n    internal\r\n    {\r\n        require(msg.value != 0);\r\n        uint transferTokens = msg.value.mul(DECIMALS).div(currentPrice);\r\n        require(totalSaleSupply.add(transferTokens) <= MAX_SALE_SUPPLY);\r\n        uint bonusTokens = transferTokens.mul(bonus).div(bonusBase);\r\n        transferTokens = transferTokens.add(bonusTokens);\r\n        _checkMaxRoundSupply(transferTokens);\r\n        totalSaleSupply = totalSaleSupply.add(transferTokens);\r\n        balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n        totalFunds = totalFunds.add(msg.value);\r\n        _mint(msg.sender, transferTokens);\r\n        beneficiary.transfer(msg.value);\r\n        Transfer(msg.sender, transferTokens);\r\n    }\r\n    function _mint(address _to, uint _amount)\r\n    noAnyReentrancy\r\n    internal\r\n    {\r\n        token.mint(_to, _amount);\r\n    }\r\n    function _checkMaxRoundSupply(uint _amountTokens)\r\n    internal\r\n    {\r\n        if (currentState == State.PREICO) {\r\n            require(currentRoundSupply.add(_amountTokens) <= maxPreICOSupply);\r\n        } else if (currentState == State.ICO_FIRST) {\r\n            require(currentRoundSupply.add(_amountTokens) <= maxICOFirstSupply);\r\n        } else if (currentState == State.ICO_SECOND) {\r\n            require(currentRoundSupply.add(_amountTokens) <= maxICOSecondSupply);\r\n        } else if (currentState == State.ICO_THIRD) {\r\n            require(currentRoundSupply.add(_amountTokens) <= maxICOThirdSupply);\r\n        }\r\n    }\r\n\r\n    function burn(uint256 _amount, address _address) only(owner) {\r\n        require(token.burn(_amount, _address));\r\n\ttotalSaleSupply = totalSaleSupply.sub(_amount);\r\n    }\r\n\r\n    function _finish()\r\n    noAnyReentrancy\r\n    internal\r\n    {\r\n        token.start();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newState\",\"type\":\"uint8\"},{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"setStateWithBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newState\",\"type\":\"uint8\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SALE_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoundSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxICOSecondSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPreICOSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxICOFirstSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxICOThirdSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_foundersWallet\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000af8ae410d29f23a150465f166a20d62c73c7f78a000000000000000000000000af8ae410d29f23a150465f166a20d62c73c7f78a","Library":"","SwarmSource":"bzzr://95ff275986515580b38c7ff08c28939d8f4ff6b158d5c9e0c6a2f1d6e7cbfb18"}]}