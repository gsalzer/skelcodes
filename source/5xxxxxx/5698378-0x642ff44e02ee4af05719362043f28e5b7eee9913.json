{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b > 0);\r\n        // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a - b;\r\n        assert(b <= a);\r\n        assert(a == c + b);\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        assert(a == c - b);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping(address => bool) bearer;\r\n    }\r\n\r\n    function add(Role storage role, address addr) internal {\r\n        role.bearer[addr] = true;\r\n    }\r\n\r\n    function remove(Role storage role, address addr) internal {\r\n        role.bearer[addr] = false;\r\n    }\r\n\r\n    function check(Role storage role, address addr) view internal {\r\n        require(has(role, addr));\r\n    }\r\n\r\n    function has(Role storage role, address addr) view internal returns (bool) {\r\n        return role.bearer[addr];\r\n    }\r\n}\r\n\r\n\r\ncontract RBAC {\r\n\r\n    address initialOwner;\r\n\r\n    using Roles for Roles.Role;\r\n\r\n    mapping(string => Roles.Role) private roles;\r\n\r\n    event RoleAdded(address addr, string roleName);\r\n    event RoleRemoved(address addr, string roleName);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == initialOwner);\r\n        _;\r\n    }\r\n\r\n    function checkRole(address addr, string roleName) view public {\r\n        roles[roleName].check(addr);\r\n    }\r\n\r\n    function hasRole(address addr, string roleName) view public returns (bool) {\r\n        return roles[roleName].has(addr);\r\n    }\r\n\r\n    function addRole(address addr, string roleName) public onlyOwner {\r\n        roles[roleName].add(addr);\r\n        emit RoleAdded(addr, roleName);\r\n    }\r\n\r\n    function removeRole(address addr, string roleName) public onlyOwner {\r\n        roles[roleName].remove(addr);\r\n        emit RoleRemoved(addr, roleName);\r\n    }\r\n\r\n    modifier onlyRole(string roleName) {\r\n        checkRole(msg.sender, roleName);\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract PrimasToken is RBAC {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    uint256 public decimals;\r\n    string public symbol;\r\n    string public version;\r\n    uint256 public totalSupply;\r\n    uint256 initialAmount;\r\n    uint256 deployTime;\r\n    uint256 lastInflationDayStart;\r\n    uint256 incentivesPool;\r\n\r\n    mapping(address => uint256) private userLockedTokens;\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Lock(address userAddress, uint256 amount);\r\n    event Unlock(address userAddress,uint256 amount);\r\n    event Inflate (uint256 incentivesPoolValue);\r\n\r\n    constructor() public {\r\n        name = \"Primas Token\";\r\n        decimals = 18;\r\n        symbol = \"PST\";\r\n        version = \"V2.0\";\r\n        initialAmount = 100000000 * 10 ** decimals;\r\n        balances[msg.sender] = initialAmount;\r\n        totalSupply = initialAmount;\r\n        initialOwner = msg.sender;\r\n        deployTime = block.timestamp;\r\n        incentivesPool = 0;\r\n        lastInflationDayStart = 0;\r\n        emit Transfer(address(0), msg.sender, initialAmount);\r\n    }\r\n\r\n    function inflate() public onlyRole(\"InflationOperator\") returns (uint256)  {\r\n        uint256 currentTime = block.timestamp;\r\n        uint256 currentDayStart = currentTime / 1 days;\r\n        uint256 inflationAmount;\r\n        require(lastInflationDayStart != currentDayStart);\r\n        lastInflationDayStart = currentDayStart;\r\n        uint256 createDurationYears = (currentTime - deployTime) / 1 years;\r\n        if (createDurationYears < 1) {\r\n            inflationAmount = initialAmount / 10 / 365;\r\n        } else if (createDurationYears >= 20) {\r\n            inflationAmount = 0;\r\n        } else {\r\n            inflationAmount = initialAmount * (100 - (5 * createDurationYears)) / 365 * 1000;\r\n        }\r\n        incentivesPool = incentivesPool.add(inflationAmount);\r\n        totalSupply = totalSupply.add(inflationAmount);\r\n        emit Inflate(incentivesPool);\r\n        return incentivesPool;\r\n    }\r\n\r\n    function getIncentivesPool() view public returns (uint256) {\r\n        return incentivesPool;\r\n    }\r\n\r\n    function incentivesIn(address[] _users, uint256[] _values) public onlyRole(\"IncentivesCollector\") returns (bool success) {\r\n        require(_users.length == _values.length);\r\n        for (uint256 i = 0; i < _users.length; i++) {\r\n            incentivesPool = incentivesPool.add(_values[i]);\r\n            balances[_users[i]] = balances[_users[i]].sub(_values[i]);\r\n            userLockedTokens[_users[i]] = userLockedTokens[_users[i]].sub(_values[i]);\r\n            emit Transfer(_users[i], address(0), _values[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function incentivesOut(address[] _users, uint256[] _values) public onlyRole(\"IncentivesDistributor\") returns (bool success) {\r\n        require(_users.length == _values.length);\r\n        for (uint256 i = 0; i < _users.length; i++) {\r\n            incentivesPool = incentivesPool.sub(_values[i]);\r\n            balances[_users[i]] = balances[_users[i]].add(_values[i]);\r\n            emit Transfer(address(0), _users[i], _values[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function tokenLock(address _userAddress, uint256 _amount) public onlyRole(\"Locker\") {\r\n        require(balanceOf(_userAddress) >= _amount);\r\n        userLockedTokens[_userAddress] = userLockedTokens[_userAddress].add(_amount);\r\n        emit Lock(_userAddress, _amount);\r\n    }\r\n\r\n    function tokenUnlock(address _userAddress, uint256 _amount, address _to, uint256 _toAmount) public onlyRole(\"Unlocker\") {\r\n        require(_amount >= _toAmount);\r\n        require(userLockedTokens[_userAddress] >= _amount);\r\n        userLockedTokens[_userAddress] = userLockedTokens[_userAddress].sub(_amount);\r\n        emit Unlock(_userAddress, _amount);\r\n        if (_to != address(0) && _toAmount != 0) {\r\n            balances[_userAddress] = balances[_userAddress].sub(_toAmount);\r\n            balances[_to] = balances[_to].add(_toAmount);\r\n            emit Transfer(_userAddress, _to, _toAmount);\r\n        }\r\n    }\r\n\r\n    function transferAndLock(address _userAddress, address _to, uint256 _amount) public onlyRole(\"Locker\")  {\r\n        require(balanceOf(_userAddress) >= _amount);\r\n        balances[_userAddress] = balances[_userAddress].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        userLockedTokens[_to] = userLockedTokens[_to].add(_amount);\r\n        emit Transfer(_userAddress, _to, _amount);\r\n        emit Lock(_to, _amount);\r\n    }\r\n\r\n    function balanceOf(address _owner) view public returns (uint256 balance) {\r\n        return balances[_owner] - userLockedTokens[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balanceOf(msg.sender) >= _value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(balanceOf(_from) >= _value && allowed[_from][msg.sender] >= _value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"removeRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_toAmount\",\"type\":\"uint256\"}],\"name\":\"tokenUnlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"addRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokenLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"incentivesOut\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"inflate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIncentivesPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAndLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"incentivesIn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"incentivesPoolValue\",\"type\":\"uint256\"}],\"name\":\"Inflate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"}]","ContractName":"PrimasToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c25743e753c5ef699bd0430bc0e07061bd02228d5ff44df74aca75001cbffedb"}]}