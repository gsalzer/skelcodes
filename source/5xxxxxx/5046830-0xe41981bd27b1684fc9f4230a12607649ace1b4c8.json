{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract NovaLabInterface {\r\n    function bornFamedStar(uint lc) external constant returns(bool) {}\r\n}\r\n\r\ncontract NovaAccessControl {\r\n  mapping (address => bool) managers;\r\n  address cfoAddress;\r\n\r\n  function NovaAccessControl() public {\r\n    managers[msg.sender] = true;\r\n  }\r\n\r\n  modifier onlyManager() {\r\n    require(managers[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  function setManager(address _newManager) external onlyManager {\r\n    require(_newManager != address(0));\r\n    managers[_newManager] = true;\r\n  }\r\n\r\n  function removeManager(address mangerAddress) external onlyManager {\r\n    require(mangerAddress != msg.sender);\r\n    managers[mangerAddress] = false;\r\n  }\r\n\r\n  function updateCfo(address newCfoAddress) external onlyManager {\r\n    require(newCfoAddress != address(0));\r\n    cfoAddress = newCfoAddress;\r\n  }\r\n}\r\n\r\ncontract FamedStar is NovaAccessControl {\r\n  struct Star {\r\n    bytes32 name;\r\n    uint mass;\r\n    uint lc;\r\n    address owner;\r\n  }\r\n\r\n  address public labAddress;\r\n  address public novaAddress;\r\n\r\n  Star[] stars;\r\n  mapping (bytes32 => uint) public famedStarNameToIds;\r\n  mapping (uint => uint) public famedStarMassToIds;\r\n\r\n  function FamedStar() public {\r\n      // add placeholder\r\n      _addFamedStar(\"placeholder\", 0, 0);\r\n  }\r\n\r\n  function _bytes32ToString(bytes32 x) internal pure returns (string) {\r\n    bytes memory bytesString = new bytes(32);\r\n    uint charCount = 0;\r\n    for (uint j = 0; j < 32; j++) {\r\n        byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n        if (char != 0) {\r\n            bytesString[charCount] = char;\r\n            charCount++;\r\n        }\r\n    }\r\n    bytes memory bytesStringTrimmed = new bytes(charCount);\r\n    for (j = 0; j < charCount; j++) {\r\n        bytesStringTrimmed[j] = bytesString[j];\r\n    }\r\n    return string(bytesStringTrimmed);\r\n  }\r\n\r\n  function _stringToBytes32(string source) internal pure returns (bytes32 result) {\r\n    bytes memory tempEmptyStringTest = bytes(source);\r\n    if (tempEmptyStringTest.length == 0) {\r\n        return 0x0;\r\n    }\r\n\r\n    assembly {\r\n        result := mload(add(source, 32))\r\n    }\r\n  }\r\n\r\n  function updateLabAddress(address addr) external onlyManager {\r\n      labAddress = addr;\r\n  }\r\n\r\n  function updateNovaAddress(address addr) external onlyManager {\r\n      novaAddress = addr;\r\n  }\r\n\r\n  function addFamedStar(string name, uint mass, uint lc) external onlyManager {\r\n      _addFamedStar(name, mass, lc);\r\n  }\r\n\r\n  function _addFamedStar(string name, uint mass, uint lc) internal {\r\n      require(bytes(name).length <= 32);\r\n      var bN = _stringToBytes32(name);\r\n      // no repeat on name\r\n      require(famedStarNameToIds[bN] == 0);\r\n\r\n      // no repeat on mass\r\n      require(famedStarMassToIds[mass] == 0);\r\n\r\n      var id = stars.push(Star({\r\n          name: bN,\r\n          mass: mass,\r\n          lc: lc,\r\n          owner: 0x0\r\n      })) - 1;\r\n\r\n      famedStarNameToIds[bN] = id;\r\n      famedStarMassToIds[mass] = id;\r\n  }\r\n\r\n  function getFamedStarByID(uint id) public constant returns(uint starID, string name, uint mass, address owner) {\r\n      require(id > 0 && id < stars.length);\r\n      var star = stars[id];\r\n\r\n      return (id, _bytes32ToString(star.name), star.mass, star.owner);\r\n  }\r\n\r\n  function getFamedStarByName(string n) public constant returns(uint starID, string name, uint mass, address owner) {\r\n      starID = famedStarNameToIds[_stringToBytes32(n)];\r\n\r\n      require(starID > 0);\r\n\r\n      var star = stars[starID];\r\n\r\n      return (starID, n, star.mass, star.owner);\r\n  }\r\n\r\n  function getFamedStarByMass(uint m) public constant returns(uint starID, string name, uint mass, address owner) {\r\n      starID = famedStarMassToIds[m];\r\n\r\n      require(starID > 0);\r\n\r\n      var star = stars[starID];\r\n\r\n      return (starID, _bytes32ToString(star.name), star.mass, star.owner);\r\n  }\r\n\r\n  function updateFamedStarOwner(uint id, address newOwner) external {\r\n      require(msg.sender == novaAddress);\r\n      require(id > 0 && id < stars.length);\r\n      var star = stars[id];\r\n      require(star.mass > 0);\r\n\r\n      stars[id].owner = newOwner;\r\n  }\r\n\r\n  function bornFamedStar(address userAddress, uint mass) external returns(uint id, bytes32 name) {\r\n      require(msg.sender == novaAddress);\r\n      var starID = famedStarMassToIds[mass];\r\n      if (starID == 0) {\r\n          return (0, 0);\r\n      }\r\n\r\n      var star = stars[starID];\r\n\r\n      if (star.owner != address(0x0)) {\r\n          return (0, 0);\r\n      }\r\n\r\n      bool isGot;\r\n      var labContract = NovaLabInterface(labAddress);\r\n      isGot = labContract.bornFamedStar(star.lc);\r\n      if (isGot) {\r\n          stars[starID].owner = userAddress;\r\n          return (starID, stars[starID].name);\r\n      } else {\r\n          stars[starID].lc++;\r\n          return (0, 0);\r\n      }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"labAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"updateFamedStarOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getFamedStarByID\",\"outputs\":[{\"name\":\"starID\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"mass\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCfoAddress\",\"type\":\"address\"}],\"name\":\"updateCfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"novaAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"mass\",\"type\":\"uint256\"}],\"name\":\"bornFamedStar\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"famedStarMassToIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"mass\",\"type\":\"uint256\"},{\"name\":\"lc\",\"type\":\"uint256\"}],\"name\":\"addFamedStar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mangerAddress\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"famedStarNameToIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"getFamedStarByMass\",\"outputs\":[{\"name\":\"starID\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"mass\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"updateNovaAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"n\",\"type\":\"string\"}],\"name\":\"getFamedStarByName\",\"outputs\":[{\"name\":\"starID\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"mass\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"updateLabAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"FamedStar","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bcac7007ee76f8e7265f343d707c148ac900ead9972b1100d91c740edfed3f55"}]}