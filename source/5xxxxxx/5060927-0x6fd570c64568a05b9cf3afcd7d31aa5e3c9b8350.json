{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/ERC721.sol\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n}\r\n\r\n// File: contracts/TulipsSaleInterface.sol\r\n\r\n/*\r\n* @title Crypto Tulips Initial Sale Interface\r\n* @dev This interface sets the standard for initial sale\r\n* contract. All future sale contracts should follow this.\r\n*/\r\ninterface TulipsSaleInterface {\r\n    function putOnInitialSale(uint256 tulipId) external;\r\n\r\n    function createAuction(\r\n        uint256 _tulipId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _transferFrom\r\n    )external;\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/TulipsRoles.sol\r\n\r\n/*\r\n* @title Crypto Tulips SaleAuction\r\n* @dev .\r\n*/\r\ncontract TulipsRoles is Pausable {\r\n\r\n    modifier onlyFinancial() {\r\n        require(msg.sender == address(financialAccount));\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperations() {\r\n        require(msg.sender == address(operationsAccount));\r\n        _;\r\n    }\r\n\r\n    function TulipsRoles() Ownable() public {\r\n        financialAccount = msg.sender;\r\n        operationsAccount = msg.sender;\r\n    }\r\n\r\n    address public financialAccount;\r\n    address public operationsAccount;\r\n\r\n    function transferFinancial(address newFinancial) public onlyOwner {\r\n        require(newFinancial != address(0));\r\n        financialAccount = newFinancial;\r\n    }\r\n\r\n    function transferOperations(address newOperations) public onlyOwner {\r\n        require(newOperations != address(0));\r\n        operationsAccount = newOperations;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/TulipsSaleAuction.sol\r\n\r\n/*\r\n* @title Crypto Tulips SaleAuction\r\n* @dev .\r\n*/\r\ncontract TulipsSaleAuction is TulipsRoles, TulipsSaleInterface {\r\n\r\n    modifier onlyCoreContract() {\r\n        require(msg.sender == address(coreContract));\r\n        _;\r\n    }\r\n\r\n    struct Auction {\r\n        address seller;\r\n        uint128 startingPrice;\r\n        uint128 endingPrice;\r\n        uint64 duration;\r\n        uint64 startedAt;\r\n    }\r\n\r\n    // @dev core contract cannot change due to security reasons\r\n    ERC721 public coreContract;\r\n\r\n    // Commission cut\r\n    uint256 public ownerCut;\r\n\r\n    uint256 public initialStartPrice;\r\n    uint256 public initialEndPrice;\r\n    uint256 public initialSaleDuration = 1 days;\r\n\r\n    // Map from token ID to their corresponding auction.\r\n    mapping (uint256 => Auction) public tokenIdToAuction;\r\n\r\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\r\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\r\n    event AuctionCancelled(uint256 tokenId);\r\n\r\n    /*\r\n    * @dev Constructor initialized with the reference to core Tulips contract\r\n    * @param _tulipsCoreContract - core contract adress should be fixed\r\n    * @param _cut - core contract adress should be fixed\r\n    */\r\n    function TulipsSaleAuction(address _tulipsCoreContract, uint256 _cut) TulipsRoles() public {\r\n        require(_cut <= 10000); // cut as percentage between 0.00-100.00%\r\n        ownerCut = _cut;\r\n\r\n        coreContract = ERC721(_tulipsCoreContract);\r\n    }\r\n     /*\r\n    * @dev These are auction prices for initial tulip sales.\r\n    */\r\n    function setDefaultAuctionPrices(uint256 _startPrice, uint256 _endPrice) external onlyFinancial {\r\n        initialStartPrice = _startPrice;\r\n        initialEndPrice = _endPrice;\r\n    }\r\n\r\n    function recievePayout(uint payoutAmount, address payoutAddress) external onlyFinancial {\r\n        require(payoutAddress != 0);\r\n        payoutAddress.transfer(payoutAmount);\r\n    }\r\n\r\n    /*\r\n    * @dev This function is called from core Contract to put tulip on initial sale.\r\n    * This is a privilaged version that, recieves request from corecontract.\r\n    * Core contract ensures that this contract already is the ownerof this tulip\r\n    */\r\n    function putOnInitialSale(uint256 _tulipId) external onlyCoreContract {\r\n        // !! Core contract must ensure the ownership\r\n        _createAuction(_tulipId, initialStartPrice, initialEndPrice, initialSaleDuration, this);\r\n    }\r\n\r\n    function createAuction(\r\n        uint256 _tulipId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _transferFrom\r\n    )external\r\n    {\r\n        // Avoid input overflowing struct memory sizes\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        // Make sure we have at least a minute for this auction\r\n        require(_duration >= 1 minutes);\r\n\r\n        require(coreContract.ownerOf(_tulipId) == _transferFrom);\r\n\r\n        // Transfer from checks whether the owner approved this transfer so\r\n        // we can't transfer tulips without permission\r\n        coreContract.transferFrom(_transferFrom, this, _tulipId);\r\n\r\n        _createAuction(_tulipId, _startingPrice, _endingPrice, _duration, _transferFrom);\r\n    }\r\n\r\n\r\n\r\n    /// @param _tulipId - Id of the tulip to auction.\r\n    /// @param _startingPrice - Starting price in wei.\r\n    /// @param _endingPrice - Ending price in wei.\r\n    /// @param _duration - Duration in seconds.\r\n    /// @param _seller - Seller address\r\n    function _createAuction(\r\n        uint256 _tulipId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n        internal\r\n    {\r\n\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n\r\n        tokenIdToAuction[_tulipId] = auction;\r\n\r\n        AuctionCreated(\r\n            uint256(_tulipId),\r\n            uint256(auction.startingPrice),\r\n            uint256(auction.endingPrice),\r\n            uint256(auction.duration)\r\n        );\r\n    }\r\n\r\n\r\n    /*\r\n    * @dev Cancel auction and return tulip to original owner.\r\n    * @param _tulipId - ID of the tulip on auction\r\n    */\r\n    function cancelAuction(uint256 _tulipId)\r\n        external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tulipId];\r\n        require(auction.startedAt > 0);\r\n\r\n        // Only seller can call this function\r\n        address seller = auction.seller;\r\n        require(msg.sender == seller);\r\n\r\n        // Return the tulip to the owner\r\n        coreContract.transfer(seller, _tulipId);\r\n\r\n        // Remove auction from storage\r\n        delete tokenIdToAuction[_tulipId];\r\n\r\n        AuctionCancelled(_tulipId);\r\n    }\r\n\r\n    function buy(uint256 _tulipId)\r\n        external\r\n        payable\r\n        whenNotPaused\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tulipId];\r\n\r\n        require(auction.startedAt > 0);\r\n\r\n        uint256 price = _currentPrice(auction);\r\n        require(msg.value >= price);\r\n\r\n        address seller = auction.seller;\r\n\r\n        delete tokenIdToAuction[_tulipId];\r\n\r\n        // We don't calculate auctioneers if the seller is us.\r\n        if (price > 0 && seller != address(this)) {\r\n            // Calculate the auctioneer's cut.\r\n            uint256 auctioneerCut = _computeCut(price);\r\n            uint256 sellerGains = price - auctioneerCut;\r\n\r\n            seller.transfer(sellerGains);\r\n        }\r\n\r\n        uint256 bidExcess = msg.value - price;\r\n\r\n        msg.sender.transfer(bidExcess);\r\n\r\n        coreContract.transfer(msg.sender, _tulipId);\r\n\r\n        AuctionSuccessful(_tulipId, price, msg.sender);\r\n    }\r\n\r\n    function secondsPassed(uint256 _tulipId )external view\r\n       returns (uint256)\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tulipId];\r\n\r\n        uint256 secondsPassed = 0;\r\n\r\n        if (now > auction.startedAt) {\r\n            secondsPassed = now - auction.startedAt;\r\n        }\r\n\r\n        return secondsPassed;\r\n    }\r\n\r\n    function currentPrice(uint256 _tulipId) external view\r\n        returns (uint256)\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tulipId];\r\n\r\n        require(auction.startedAt > 0);\r\n\r\n        return _currentPrice(auction);\r\n    }\r\n\r\n    function _currentPrice(Auction storage _auction)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 secondsPassed = 0;\r\n\r\n        if (now > _auction.startedAt) {\r\n            secondsPassed = now - _auction.startedAt;\r\n        }\r\n\r\n        return _computeCurrentPrice(\r\n            _auction.startingPrice,\r\n            _auction.endingPrice,\r\n            _auction.duration,\r\n            secondsPassed\r\n        );\r\n    }\r\n\r\n    function _computeCurrentPrice(\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        uint256 _secondsPassed\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (_secondsPassed >= _duration) {\r\n            return _endingPrice;\r\n        } else {\r\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\r\n\r\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\r\n\r\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\r\n\r\n            return uint256(currentPrice);\r\n        }\r\n    }\r\n\r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        return _price * ownerCut / 10000;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tulipId\",\"type\":\"uint256\"}],\"name\":\"putOnInitialSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operationsAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tulipId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_transferFrom\",\"type\":\"address\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payoutAmount\",\"type\":\"uint256\"},{\"name\":\"payoutAddress\",\"type\":\"address\"}],\"name\":\"recievePayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"financialAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_endPrice\",\"type\":\"uint256\"}],\"name\":\"setDefaultAuctionPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFinancial\",\"type\":\"address\"}],\"name\":\"transferFinancial\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tulipId\",\"type\":\"uint256\"}],\"name\":\"secondsPassed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialEndPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tulipId\",\"type\":\"uint256\"}],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOperations\",\"type\":\"address\"}],\"name\":\"transferOperations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialStartPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tulipId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSaleDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tulipId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToAuction\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"startingPrice\",\"type\":\"uint128\"},{\"name\":\"endingPrice\",\"type\":\"uint128\"},{\"name\":\"duration\",\"type\":\"uint64\"},{\"name\":\"startedAt\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coreContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tulipsCoreContract\",\"type\":\"address\"},{\"name\":\"_cut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"AuctionSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TulipsSaleAuction","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007031f0bad732aa9984fa2638a24bccbe6a8e291200000000000000000000000000000000000000000000000000000000000001f4","Library":"","SwarmSource":"bzzr://3090ad6f8e6b232d78b1f282651a5d59dcc27cab5b28f2a4a72155075fc89d93"}]}