{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/InstantListing.sol\r\n\r\ncontract InstantListing is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Proposal {\r\n        uint256 totalContributions;\r\n        mapping(address => uint256) contributions;\r\n\r\n        address tokenAddress;\r\n        string projectName;\r\n        string websiteUrl;\r\n        string whitepaperUrl;\r\n        string legalDocumentUrl;\r\n        uint256 icoStartDate;\r\n        uint256 icoEndDate;\r\n        uint256 icoRate; // If 4000 COB = 1 ETH, then icoRate = 4000.\r\n        uint256 totalRaised;\r\n    }\r\n\r\n    // Round number\r\n    uint256 public round;\r\n\r\n    // Flag to mark if \"listing-by-rank\" is already executed\r\n    bool public ranked;\r\n\r\n    // The address of beneficiary.\r\n    address public beneficiary;\r\n\r\n    // The address of token used for payment (e.g. COB)\r\n    address public paymentTokenAddress;\r\n\r\n    // Required amount of paymentToken to able to propose a listing.\r\n    uint256 public requiredDownPayment;\r\n\r\n    // Proposals proposed by community.\r\n    mapping(uint256 => mapping(address => Proposal)) public proposals;\r\n\r\n    // Contribution of each round.\r\n    mapping(uint256 => uint256) public roundContribution;\r\n\r\n    // A mapping of the token listing status.\r\n    mapping(address => bool) public listed;\r\n\r\n    // A mapping from token contract address to the last refundable unix\r\n    // timestamp, 0 means not refundable.\r\n    mapping(address => uint256) public refundable;\r\n\r\n    // Candidates\r\n    address[] public candidates;\r\n\r\n    // Configs.\r\n    uint256 public startTime;\r\n    uint256 public prevEndTime;\r\n    uint256 public softCap;\r\n    uint256 public hardCap;\r\n    uint256 public duration;\r\n    uint256 public numListed;\r\n\r\n    // Events.\r\n    event SoftCapReached(uint256 indexed _round, address _tokenAddress);\r\n    event TokenProposed(uint256 indexed _round, address _tokenAddress, uint256 _refundEndTime);\r\n    event TokenListed(uint256 indexed _round, address _tokenAddress, uint256 _refundEndTime);\r\n    event Vote(uint256 indexed _round, address indexed _tokenAddress, address indexed voter, uint256 amount);\r\n    event RoundFinalized(uint256 _round);\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    function getCurrentTimestamp() internal view returns (uint256) {\r\n        return now;\r\n    }\r\n\r\n    function initialize(\r\n        address _beneficiary,\r\n        address _paymentTokenAddress)\r\n        onlyOwner public {\r\n\r\n        beneficiary = _beneficiary;\r\n        paymentTokenAddress = _paymentTokenAddress;\r\n    }\r\n\r\n    function reset(\r\n        uint256 _requiredDownPayment,\r\n        uint256 _startTime,\r\n        uint256 _duration,\r\n        uint256 _softCap,\r\n        uint256 _hardCap,\r\n        uint256 _numListed)\r\n        onlyOwner public {\r\n        require(getCurrentTimestamp() >= startTime + duration);\r\n\r\n\r\n        // List tokens in the leaderboard\r\n        if (!ranked) {\r\n            listTokenByRank();\r\n        }\r\n\r\n        // Transfer all balance except for latest round,\r\n        // which is reserved for refund.\r\n        StandardToken paymentToken = StandardToken(paymentTokenAddress);\r\n        if (round != 0) {\r\n            prevEndTime = startTime + duration;\r\n            paymentToken.transfer(beneficiary,\r\n                paymentToken.balanceOf(this) - roundContribution[round]);\r\n        }\r\n\r\n        requiredDownPayment = _requiredDownPayment;\r\n        startTime = _startTime;\r\n        duration = _duration;\r\n        hardCap = _hardCap;\r\n        softCap = _softCap;\r\n        numListed = _numListed;\r\n        ranked = false;\r\n\r\n        emit RoundFinalized(round);\r\n\r\n        delete candidates;\r\n\r\n        round += 1;\r\n    }\r\n\r\n    function propose(\r\n        address _tokenAddress,\r\n        string _projectName,\r\n        string _websiteUrl,\r\n        string _whitepaperUrl,\r\n        string _legalDocumentUrl,\r\n        uint256 _icoStartDate,\r\n        uint256 _icoEndDate,\r\n        uint256 _icoRate,\r\n        uint256 _totalRaised) public {\r\n        require(proposals[round][_tokenAddress].totalContributions == 0);\r\n        require(getCurrentTimestamp() < startTime + duration);\r\n\r\n        StandardToken paymentToken = StandardToken(paymentTokenAddress);\r\n        uint256 downPayment = paymentToken.allowance(msg.sender, this);\r\n\r\n        if (downPayment < requiredDownPayment) {\r\n            revert();\r\n        }\r\n\r\n        paymentToken.transferFrom(msg.sender, this, downPayment);\r\n\r\n        proposals[round][_tokenAddress] = Proposal({\r\n            tokenAddress: _tokenAddress,\r\n            projectName: _projectName,\r\n            websiteUrl: _websiteUrl,\r\n            whitepaperUrl: _whitepaperUrl,\r\n            legalDocumentUrl: _legalDocumentUrl,\r\n            icoStartDate: _icoStartDate,\r\n            icoEndDate: _icoEndDate,\r\n            icoRate: _icoRate,\r\n            totalRaised: _totalRaised,\r\n            totalContributions: 0\r\n        });\r\n\r\n        // Only allow refunding amount exceeding down payment.\r\n        proposals[round][_tokenAddress].contributions[msg.sender] =\r\n            downPayment - requiredDownPayment;\r\n        proposals[round][_tokenAddress].totalContributions = downPayment;\r\n        roundContribution[round] = roundContribution[round].add(\r\n            downPayment - requiredDownPayment);\r\n        listed[_tokenAddress] = false;\r\n\r\n        if (downPayment >= softCap && downPayment < hardCap) {\r\n            candidates.push(_tokenAddress);\r\n            emit SoftCapReached(round, _tokenAddress);\r\n        }\r\n\r\n        if (downPayment >= hardCap) {\r\n            listed[_tokenAddress] = true;\r\n            emit TokenListed(round, _tokenAddress, refundable[_tokenAddress]);\r\n        }\r\n\r\n        refundable[_tokenAddress] = startTime + duration + 7 * 1 days;\r\n        emit TokenProposed(round, _tokenAddress, refundable[_tokenAddress]);\r\n    }\r\n\r\n    function vote(address _tokenAddress) public {\r\n        require(getCurrentTimestamp() >= startTime &&\r\n                getCurrentTimestamp() < startTime + duration);\r\n        require(proposals[round][_tokenAddress].totalContributions > 0);\r\n\r\n        StandardToken paymentToken = StandardToken(paymentTokenAddress);\r\n        bool prevSoftCapReached =\r\n            proposals[round][_tokenAddress].totalContributions >= softCap;\r\n        uint256 allowedPayment = paymentToken.allowance(msg.sender, this);\r\n\r\n        paymentToken.transferFrom(msg.sender, this, allowedPayment);\r\n        proposals[round][_tokenAddress].contributions[msg.sender] =\r\n            proposals[round][_tokenAddress].contributions[msg.sender].add(\r\n                allowedPayment);\r\n        proposals[round][_tokenAddress].totalContributions =\r\n            proposals[round][_tokenAddress].totalContributions.add(\r\n                allowedPayment);\r\n        roundContribution[round] = roundContribution[round].add(allowedPayment);\r\n\r\n        if (!prevSoftCapReached &&\r\n            proposals[round][_tokenAddress].totalContributions >= softCap &&\r\n            proposals[round][_tokenAddress].totalContributions < hardCap) {\r\n            candidates.push(_tokenAddress);\r\n            emit SoftCapReached(round, _tokenAddress);\r\n        }\r\n\r\n        if (proposals[round][_tokenAddress].totalContributions >= hardCap) {\r\n            listed[_tokenAddress] = true;\r\n            refundable[_tokenAddress] = 0;\r\n            emit TokenListed(round, _tokenAddress, refundable[_tokenAddress]);\r\n        }\r\n\r\n        emit Vote(round, _tokenAddress, msg.sender, allowedPayment);\r\n    }\r\n\r\n    function setRefundable(address _tokenAddress, uint256 endTime)\r\n        onlyOwner public {\r\n        refundable[_tokenAddress] = endTime;\r\n    }\r\n\r\n    // For those claimed but not refund payment\r\n    function withdrawBalance() onlyOwner public {\r\n        require(getCurrentTimestamp() >= (prevEndTime + 7 * 1 days));\r\n\r\n        StandardToken paymentToken = StandardToken(paymentTokenAddress);\r\n        paymentToken.transfer(beneficiary, paymentToken.balanceOf(this));\r\n    }\r\n\r\n    function refund(address _tokenAddress) public {\r\n        require(refundable[_tokenAddress] > 0 &&\r\n                prevEndTime > 0 &&\r\n                getCurrentTimestamp() >= prevEndTime &&\r\n                getCurrentTimestamp() < refundable[_tokenAddress]);\r\n\r\n        StandardToken paymentToken = StandardToken(paymentTokenAddress);\r\n\r\n        uint256 amount = proposals[round][_tokenAddress].contributions[msg.sender];\r\n        if (amount > 0) {\r\n            proposals[round][_tokenAddress].contributions[msg.sender] = 0;\r\n            proposals[round][_tokenAddress].totalContributions =\r\n                proposals[round][_tokenAddress].totalContributions.sub(amount);\r\n            paymentToken.transfer(msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function listTokenByRank() onlyOwner public {\r\n        require(getCurrentTimestamp() >= startTime + duration &&\r\n                !ranked);\r\n\r\n        quickSort(0, candidates.length);\r\n\r\n        uint collected = 0;\r\n        for (uint i = 0; i < candidates.length && collected < numListed; i++) {\r\n            if (!listed[candidates[i]]) {\r\n                listed[candidates[i]] = true;\r\n                refundable[candidates[i]] = 0;\r\n                emit TokenListed(round, candidates[i], refundable[candidates[i]]);\r\n                collected++;\r\n            }\r\n        }\r\n\r\n        ranked = true;\r\n    }\r\n\r\n    function quickSort(uint beg, uint end) internal {\r\n        if (beg + 1 >= end)\r\n            return;\r\n\r\n        uint pv = proposals[round][candidates[end - 1]].totalContributions;\r\n        uint partition = beg;\r\n\r\n        for (uint i = beg; i < end; i++) {\r\n            if (proposals[round][candidates[i]].totalContributions > pv) {\r\n                (candidates[partition], candidates[i]) =\r\n                    (candidates[i], candidates[partition]);\r\n                partition++;\r\n            }\r\n        }\r\n        (candidates[partition], candidates[end - 1]) =\r\n           (candidates[end - 1], candidates[partition]);\r\n\r\n        quickSort(beg, partition);\r\n        quickSort(partition + 1, end);\r\n    }\r\n\r\n    function getContributions(\r\n        uint256 _round,\r\n        address _tokenAddress,\r\n        address contributor) view public returns (uint256) {\r\n        return proposals[_round][_tokenAddress].contributions[contributor];\r\n    }\r\n\r\n    function numCandidates() view public returns (uint256) {\r\n        return candidates.length;\r\n    }\r\n\r\n    function kill() public onlyOwner {\r\n        StandardToken paymentToken = StandardToken(paymentTokenAddress);\r\n        paymentToken.transfer(beneficiary, paymentToken.balanceOf(this));\r\n\r\n        selfdestruct(beneficiary);\r\n    }\r\n\r\n    // Default method, we do not accept ether atm.\r\n    function () public payable {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numListed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_paymentTokenAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numCandidates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_projectName\",\"type\":\"string\"},{\"name\":\"_websiteUrl\",\"type\":\"string\"},{\"name\":\"_whitepaperUrl\",\"type\":\"string\"},{\"name\":\"_legalDocumentUrl\",\"type\":\"string\"},{\"name\":\"_icoStartDate\",\"type\":\"uint256\"},{\"name\":\"_icoEndDate\",\"type\":\"uint256\"},{\"name\":\"_icoRate\",\"type\":\"uint256\"},{\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"propose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"getContributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"listed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refundable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"totalContributions\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"projectName\",\"type\":\"string\"},{\"name\":\"websiteUrl\",\"type\":\"string\"},{\"name\":\"whitepaperUrl\",\"type\":\"string\"},{\"name\":\"legalDocumentUrl\",\"type\":\"string\"},{\"name\":\"icoStartDate\",\"type\":\"uint256\"},{\"name\":\"icoEndDate\",\"type\":\"uint256\"},{\"name\":\"icoRate\",\"type\":\"uint256\"},{\"name\":\"totalRaised\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requiredDownPayment\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_softCap\",\"type\":\"uint256\"},{\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"name\":\"_numListed\",\"type\":\"uint256\"}],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ranked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"listTokenByRank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setRefundable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredDownPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"SoftCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_refundEndTime\",\"type\":\"uint256\"}],\"name\":\"TokenProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_refundEndTime\",\"type\":\"uint256\"}],\"name\":\"TokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_round\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"RoundFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"InstantListing","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4ce105fbc349a80f1864db21e930b0b9ea3a9b25331bdf473830fc93bd9537ac"}]}