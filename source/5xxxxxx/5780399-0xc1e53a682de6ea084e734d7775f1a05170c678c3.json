{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// zeppelin-solidity: 1.8.0\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ChampionSimple is Ownable {\r\n  using SafeMath for uint;\r\n\r\n  event LogDistributeReward(address addr, uint reward);\r\n  event LogParticipant(address addr, uint choice, uint betAmount);\r\n  event LogModifyChoice(address addr, uint oldChoice, uint newChoice);\r\n  event LogRefund(address addr, uint betAmount);\r\n  event LogWithdraw(address addr, uint amount);\r\n  event LogWinChoice(uint choice, uint reward);\r\n\r\n  uint public minimumBet = 5 * 10 ** 16;\r\n  uint public deposit = 0;\r\n  uint public totalBetAmount = 0;\r\n  uint public startTime;\r\n  uint public winChoice;\r\n  uint public winReward;\r\n  uint public numberOfBet;\r\n  bool public betClosed = false;\r\n\r\n  struct Player {\r\n    uint betAmount;\r\n    uint choice;\r\n  }\r\n\r\n  address [] public players;\r\n  mapping(address => Player) public playerInfo;\r\n  mapping(uint => uint) public numberOfChoice;\r\n  mapping(uint => mapping(address => bool)) public addressOfChoice;\r\n  mapping(address => bool) public withdrawRecord;\r\n \r\n  modifier beforeTimestamp(uint timestamp) {\r\n    require(now < timestamp);\r\n    _;\r\n  }\r\n\r\n  modifier afterTimestamp(uint timestamp) {\r\n    require(now >= timestamp);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev the construct function\r\n   * @param _startTime the deadline of betting\r\n   * @param _minimumBet the minimum bet amount\r\n   */\r\n  function ChampionSimple(uint _startTime, uint _minimumBet) payable public {\r\n    require(_startTime > now);\r\n    deposit = msg.value;\r\n    startTime = _startTime;\r\n    minimumBet = _minimumBet;\r\n  }\r\n\r\n  /**\r\n   * @dev find a player has participanted or not\r\n   * @param player the address of the participant\r\n   */\r\n  function checkPlayerExists(address player) public view returns (bool) {\r\n    if (playerInfo[player].choice == 0) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev to bet which team will be the champion\r\n   * @param choice the choice of the participant(actually team id)\r\n   */\r\n  function placeBet(uint choice) payable beforeTimestamp(startTime) public {\r\n    require(choice > 0);\r\n    require(!checkPlayerExists(msg.sender));\r\n    require(msg.value >= minimumBet);\r\n\r\n    playerInfo[msg.sender].betAmount = msg.value;\r\n    playerInfo[msg.sender].choice = choice;\r\n    totalBetAmount = totalBetAmount.add(msg.value);\r\n    numberOfBet = numberOfBet.add(1);\r\n    players.push(msg.sender);\r\n    numberOfChoice[choice] = numberOfChoice[choice].add(1);\r\n    addressOfChoice[choice][msg.sender] = true;\r\n    LogParticipant(msg.sender, choice, msg.value);\r\n  }\r\n\r\n  /**\r\n   * @dev allow user to change their choice before a timestamp\r\n   * @param choice the choice of the participant(actually team id)\r\n   */\r\n  function modifyChoice(uint choice) beforeTimestamp(startTime) public {\r\n    require(choice > 0);\r\n    require(checkPlayerExists(msg.sender));\r\n\r\n    uint oldChoice = playerInfo[msg.sender].choice;\r\n    numberOfChoice[oldChoice] = numberOfChoice[oldChoice].sub(1);\r\n    numberOfChoice[choice] = numberOfChoice[choice].add(1);\r\n    playerInfo[msg.sender].choice = choice;\r\n\r\n    addressOfChoice[oldChoice][msg.sender] = false;\r\n    addressOfChoice[choice][msg.sender] = true;\r\n    LogModifyChoice(msg.sender, oldChoice, choice);\r\n  }\r\n\r\n  /**\r\n   * @dev close who is champion bet with the champion id\r\n   */\r\n  function saveResult(uint teamId) onlyOwner public {\r\n    winChoice = teamId;\r\n    betClosed = true;\r\n    winReward = deposit.add(totalBetAmount).div(numberOfChoice[winChoice]);\r\n    LogWinChoice(winChoice, winReward);\r\n  }\r\n\r\n  /**\r\n   * @dev every user can withdraw his reward\r\n   */\r\n  function withdrawReward() public {\r\n    require(betClosed);\r\n    require(!withdrawRecord[msg.sender]);\r\n    require(winChoice > 0);\r\n    require(winReward > 0);\r\n    require(addressOfChoice[winChoice][msg.sender]);\r\n\r\n    msg.sender.transfer(winReward);\r\n    withdrawRecord[msg.sender] = true;\r\n    LogDistributeReward(msg.sender, winReward);\r\n  }\r\n\r\n  /**\r\n   * @dev anyone could recharge deposit\r\n   */\r\n  function rechargeDeposit() payable public {\r\n    deposit = deposit.add(msg.value);\r\n  }\r\n\r\n  /**\r\n   * @dev get player bet information\r\n   * @param addr indicate the bet address\r\n   */\r\n  function getPlayerBetInfo(address addr) view public returns (uint, uint) {\r\n    return (playerInfo[addr].choice, playerInfo[addr].betAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev get the bet numbers of a specific choice\r\n   * @param choice indicate the choice\r\n   */\r\n  function getNumberByChoice(uint choice) view public returns (uint) {\r\n    return numberOfChoice[choice];\r\n  }\r\n\r\n  /**\r\n   * @dev if there are some reasons lead game postpone or cancel\r\n   *      the bet will also cancel and refund every bet\r\n   */\r\n  function refund() onlyOwner public {\r\n    for (uint i = 0; i < players.length; i++) {\r\n      players[i].transfer(playerInfo[players[i]].betAmount);\r\n      LogRefund(players[i], playerInfo[players[i]].betAmount);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev get the players\r\n   */\r\n  function getPlayers() view public returns (address[]) {\r\n    return players;\r\n  }\r\n\r\n  /**\r\n   * @dev dealer can withdraw the remain ether if distribute exceeds max length\r\n   */\r\n  function withdraw() onlyOwner public {\r\n    uint _balance = address(this).balance;\r\n    owner.transfer(_balance);\r\n    LogWithdraw(owner, _balance);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"choice\",\"type\":\"uint256\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"saveResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"choice\",\"type\":\"uint256\"}],\"name\":\"getNumberByChoice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"checkPlayerExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerInfo\",\"outputs\":[{\"name\":\"betAmount\",\"type\":\"uint256\"},{\"name\":\"choice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winChoice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressOfChoice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"choice\",\"type\":\"uint256\"}],\"name\":\"modifyChoice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rechargeDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPlayerBetInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numberOfChoice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_minimumBet\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"LogDistributeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"choice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"LogParticipant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldChoice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newChoice\",\"type\":\"uint256\"}],\"name\":\"LogModifyChoice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"choice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"LogWinChoice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ChampionSimple","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005b2944a000000000000000000000000000000000000000000000000000b1a2bc2ec50000","Library":"","SwarmSource":"bzzr://b9fffabbe7ad0d3c0e331250c9a7745be49c13922e09fcdd21cd271a0048de9c"}]}