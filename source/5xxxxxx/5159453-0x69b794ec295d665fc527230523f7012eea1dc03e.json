{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b > 0);\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    uint8 public decimals;\r\n    function balanceOf(address _owner) public constant returns (uint256 _balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool _succes);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale contract \r\n */\r\ncontract Crowdsale is SafeMath {\r\n\r\n    // token address\r\n    address public tokenAddress = 0xa5FD4f631Ddf9C37d7B8A2c429a58bDC78abC843;\r\n    \r\n    // The token being sold\r\n    ERC20Basic public ipc = ERC20Basic(tokenAddress);\r\n    \r\n    // address where funds are collected\r\n    address public crowdsaleAgent = 0x783fE4521c2164eB6a7972122E7E33a1D1A72799;\r\n    \r\n    address public owner = 0xa52858fB590CFe15d03ee1F3803F2D3fCa367166;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    // minimum amount of ether to participate in ICO\r\n    uint256 public minimumEtherAmount = 0.2 ether;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    // + deadlines within bonus program\r\n    uint256 public startTime = 1520082000;     //(GMT): Saturday, 3. March 2018 13:00:00\r\n    uint256 public deadlineOne = 1520168400;   //(GMT): Sunday, 4. March 2018 13:00:00\r\n    uint256 public deadlineTwo = 1520427600;   //(GMT): Wednesday, 7. March 2018 13:00:00\r\n    uint256 public deadlineThree = 1520773200; //(GMT): Sunday, 11. March 2018 13:00:00\r\n    uint256 public endTime = 1522674000;       //(GMT): Monday, 2. April 2018 13:00:00 \r\n    \r\n    // token amount for one ether during crowdsale\r\n    uint public firstRate = 6000; \r\n    uint public secondRate = 5500;\r\n    uint public thirdRate = 5000;\r\n    uint public finalRate = 4400;\r\n\r\n    // token distribution during Crowdsale\r\n    mapping(address => uint256) public distribution;\r\n    \r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    modifier onlyCrowdsaleAgent {\r\n        require(msg.sender == crowdsaleAgent);\r\n        _;\r\n    }\r\n    \r\n    // fallback function can be used to buy tokens\r\n    function () public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // token purchase function\r\n    function buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != address(0));\r\n        require(beneficiary != address(this));\r\n        require(beneficiary != tokenAddress);\r\n        require(validPurchase());\r\n        uint256 weiAmount = msg.value;\r\n        // calculate token amount to be transferred to beneficiary\r\n        uint256 tokens = calcTokenAmount(weiAmount);\r\n        // update state\r\n        weiRaised = safeAdd(weiRaised, weiAmount);\r\n        distribution[beneficiary] = safeAdd(distribution[beneficiary], tokens);\r\n        ipc.transfer(beneficiary, tokens);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n        forwardFunds();\r\n    }\r\n\r\n    // return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return now > endTime;\r\n    }\r\n    \r\n    // set crowdsale wallet where funds are collected\r\n    function setCrowdsaleAgent(address _crowdsaleAgent) public returns (bool) {\r\n        require(msg.sender == owner || msg.sender == crowdsaleAgent);\r\n        crowdsaleAgent = _crowdsaleAgent;\r\n        return true;\r\n    }\r\n    \r\n    // set ico times\r\n    function setTimes(  uint256 _startTime, bool changeStartTime,\r\n                        uint256 firstDeadline, bool changeFirstDeadline,\r\n                        uint256 secondDeadline, bool changeSecondDeadline,\r\n                        uint256 thirdDeadline, bool changeThirdDeadline,\r\n                        uint256 _endTime, bool changeEndTime) onlyCrowdsaleAgent public returns (bool) {\r\n        if(changeStartTime) startTime = _startTime;\r\n        if(changeFirstDeadline) deadlineOne = firstDeadline;\r\n        if(changeSecondDeadline) deadlineTwo = secondDeadline;\r\n        if(changeThirdDeadline) deadlineThree = thirdDeadline;\r\n        if(changeEndTime) endTime = _endTime;\r\n        return true;\r\n                            \r\n    }\r\n    \r\n    // set token rates\r\n    function setNewIPCRates(uint _firstRate, bool changeFirstRate,\r\n                            uint _secondRate, bool changeSecondRate,\r\n                            uint _thirdRate, bool changeThirdRate,\r\n                            uint _finaleRate, bool changeFinalRate) onlyCrowdsaleAgent public returns (bool) {\r\n        if(changeFirstRate) firstRate = _firstRate;\r\n        if(changeSecondRate) secondRate = _secondRate;\r\n        if(changeThirdRate) thirdRate = _thirdRate;\r\n        if(changeFinalRate) finalRate = _finaleRate;\r\n        return true;\r\n    }\r\n    \r\n    // set new minumum amount of Wei to participate in ICO\r\n    function setMinimumEtherAmount(uint256 _minimumEtherAmountInWei) onlyCrowdsaleAgent public returns (bool) {\r\n        minimumEtherAmount = _minimumEtherAmountInWei;\r\n        return true;\r\n    }\r\n    \r\n    // withdraw remaining IPC token amount after crowdsale has ended\r\n    function withdrawRemainingIPCToken() onlyCrowdsaleAgent public returns (bool) {\r\n        uint256 remainingToken = ipc.balanceOf(this);\r\n        require(hasEnded() && remainingToken > 0);\r\n        ipc.transfer(crowdsaleAgent, remainingToken);\r\n        return true;\r\n    }\r\n    \r\n    // send erc20 token from this contract\r\n    function withdrawERC20Token(address beneficiary, address _token) onlyCrowdsaleAgent public {\r\n        ERC20Basic erc20Token = ERC20Basic(_token);\r\n        uint256 amount = erc20Token.balanceOf(this);\r\n        require(amount>0);\r\n        erc20Token.transfer(beneficiary, amount);\r\n    }\r\n    \r\n    // transfer 'weiAmount' wei to 'beneficiary'\r\n    function sendEther(address beneficiary, uint256 weiAmount) onlyCrowdsaleAgent public {\r\n        beneficiary.transfer(weiAmount);\r\n    }\r\n\r\n    // Calculate the token amount from the donated ETH onsidering the bonus system.\r\n    function calcTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n        uint256 price;\r\n        if (now >= startTime && now < deadlineOne) {\r\n            price = firstRate; \r\n        } else if (now >= deadlineOne && now < deadlineTwo) {\r\n            price = secondRate;\r\n        } else if (now >= deadlineTwo && now < deadlineThree) {\r\n            price = thirdRate;\r\n        } else if (now >= deadlineThree && now <= endTime) {\r\n        \tprice = finalRate;\r\n        }\r\n        uint256 tokens = safeMul(price, weiAmount);\r\n        uint8 decimalCut = 18 > ipc.decimals() ? 18-ipc.decimals() : 0;\r\n        return safeDiv(tokens, 10**uint256(decimalCut));\r\n    }\r\n\r\n    // forward ether to the fund collection wallet\r\n    function forwardFunds() internal {\r\n        crowdsaleAgent.transfer(msg.value);\r\n    }\r\n\r\n    // return true if valid purchase\r\n    function validPurchase() internal view returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool isMinimumAmount = msg.value >= minimumEtherAmount;\r\n        bool hasTokenBalance = ipc.balanceOf(this) > 0;\r\n        return withinPeriod && isMinimumAmount && hasTokenBalance;\r\n    }\r\n     \r\n    // selfdestruct crowdsale contract only after crowdsale has ended\r\n    function killContract() onlyCrowdsaleAgent public {\r\n        require(hasEnded() && ipc.balanceOf(this) == 0);\r\n     selfdestruct(crowdsaleAgent);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadlineTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleAgent\",\"type\":\"address\"}],\"name\":\"setCrowdsaleAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRemainingIPCToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadlineThree\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimumEtherAmountInWei\",\"type\":\"uint256\"}],\"name\":\"setMinimumEtherAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumEtherAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_firstRate\",\"type\":\"uint256\"},{\"name\":\"changeFirstRate\",\"type\":\"bool\"},{\"name\":\"_secondRate\",\"type\":\"uint256\"},{\"name\":\"changeSecondRate\",\"type\":\"bool\"},{\"name\":\"_thirdRate\",\"type\":\"uint256\"},{\"name\":\"changeThirdRate\",\"type\":\"bool\"},{\"name\":\"_finaleRate\",\"type\":\"uint256\"},{\"name\":\"changeFinalRate\",\"type\":\"bool\"}],\"name\":\"setNewIPCRates\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"changeStartTime\",\"type\":\"bool\"},{\"name\":\"firstDeadline\",\"type\":\"uint256\"},{\"name\":\"changeFirstDeadline\",\"type\":\"bool\"},{\"name\":\"secondDeadline\",\"type\":\"uint256\"},{\"name\":\"changeSecondDeadline\",\"type\":\"bool\"},{\"name\":\"thirdDeadline\",\"type\":\"uint256\"},{\"name\":\"changeThirdDeadline\",\"type\":\"bool\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"changeEndTime\",\"type\":\"bool\"}],\"name\":\"setTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"sendEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"distribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ipc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadlineOne\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9e763c4e4bde714250f90b574b5f488001ecc62d71fce92ecdd377aea4d6e0ea"}]}