{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/// @author developers //NB!\r\n/// @notice support@developers //NB!\r\n/// @title  Contract presale //NB!\r\n\r\ncontract AvPresale {\r\n\r\n    string public constant RELEASE = \"0.2.1_AviaTest\";\r\n\r\n    //config// \r\n    uint public constant PRESALE_START  = 5298043; /* 22.03.2018 03:07:00 +3GMT */ //NB!\r\n    uint public constant PRESALE_END    = 5303803; /* 23.03.2018 03:07:00 +3GMT */ //NB!\r\n    uint public constant WITHDRAWAL_END = 5309563; /* 24.03.2018 03:07:00 +3GMT */ //NB!\r\n\r\n    address public constant OWNER = 0x32Bac79f4B6395DEa37f0c2B68b6e26ce24a59EA; //NB!\r\n\r\n    uint public constant MIN_TOTAL_AMOUNT_GET_ETH = 1; //NB!\r\n    uint public constant MAX_TOTAL_AMOUNT_GET_ETH = 2; //NB!\r\n\t//min send value 0.001 ETH (1 finney)\r\n    uint public constant MIN_GET_AMOUNT_FINNEY = 10; //NB!\r\n\r\n    string[5] private standingNames = [\"BEFORE_START\",  \"PRESALE_RUNNING\", \"WITHDRAWAL_RUNNING\", \"MONEY_BACK_RUNNING\", \"CLOSED\" ];\r\n    enum State { BEFORE_START,  PRESALE_RUNNING, WITHDRAWAL_RUNNING, MONEY_BACK_RUNNING, CLOSED }\r\n\r\n    uint public total_amount = 0;\r\n    uint public total_money_back = 0;\r\n    mapping (address => uint) public balances;\r\n\r\n    uint private constant MIN_TOTAL_AMOUNT_GET = MIN_TOTAL_AMOUNT_GET_ETH * 1 ether;\r\n    uint private constant MAX_TOTAL_AMOUNT_GET = MAX_TOTAL_AMOUNT_GET_ETH * 1 ether;\r\n    uint private constant MIN_GET_AMOUNT = MIN_GET_AMOUNT_FINNEY * 1 finney;\r\n    bool public isTerminated = false;\r\n    bool public isStopped = false;\r\n\r\n\r\n    function AvPresale () public checkSettings() { }\r\n\r\n\r\n    //methods//\r\n\t\r\n\t//The transfer of money to the owner\r\n    function sendMoneyOwner() external\r\n\tinStanding(State.WITHDRAWAL_RUNNING)\r\n    onlyOwner\r\n    noReentrancy\r\n    {\r\n        OWNER.transfer(this.balance);\r\n    }\r\n\t\r\n\t//Money back to users\r\n    function moneyBack() external\r\n    inStanding(State.MONEY_BACK_RUNNING)\r\n    noReentrancy\r\n    {\r\n        sendMoneyBack();\r\n    }\r\n\t\r\n    //payments\r\n    function ()\r\n    payable\r\n    noReentrancy\r\n    public\r\n    {\r\n        State state = currentStanding();\r\n        if (state == State.PRESALE_RUNNING) {\r\n            getMoney();\r\n        } else if (state == State.MONEY_BACK_RUNNING) {\r\n            sendMoneyBack();\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    //Forced termination\r\n    function termination() external\r\n    inStandingBefore(State.MONEY_BACK_RUNNING)\r\n    onlyOwner\r\n    {\r\n        isTerminated = true;\r\n    }\r\n\r\n    //Forced stop with the possibility of withdrawal\r\n    function stop() external\r\n    inStanding(State.PRESALE_RUNNING)\r\n    onlyOwner\r\n    {\r\n        isStopped = true;\r\n    }\r\n\r\n\r\n    //Current status of the contract\r\n    function standing() external constant\r\n    returns (string)\r\n    {\r\n        return standingNames[ uint(currentStanding()) ];\r\n    }\r\n\r\n    //Method adding money to the user\r\n    function getMoney() private notTooSmallAmountOnly {\r\n      if (total_amount + msg.value > MAX_TOTAL_AMOUNT_GET) {\r\n          var change_to_return = total_amount + msg.value - MAX_TOTAL_AMOUNT_GET;\r\n          var acceptable_remainder = MAX_TOTAL_AMOUNT_GET - total_amount;\r\n          balances[msg.sender] += acceptable_remainder;\r\n          total_amount += acceptable_remainder;\r\n          msg.sender.transfer(change_to_return);\r\n      } else {\r\n          balances[msg.sender] += msg.value;\r\n          total_amount += msg.value;\r\n      }\r\n    }\r\n\t\r\n\t//Method of repayment users \r\n    function sendMoneyBack() private tokenHoldersOnly {\r\n        uint amount_to_money_back = min(balances[msg.sender], this.balance - msg.value) ;\r\n        balances[msg.sender] -= amount_to_money_back;\r\n        total_money_back += amount_to_money_back;\r\n        msg.sender.transfer(amount_to_money_back + msg.value);\r\n    }\r\n\r\n    //Determining the current status of the contract\r\n    function currentStanding() private constant returns (State) {\r\n        if (isTerminated) {\r\n            return this.balance > 0\r\n                   ? State.MONEY_BACK_RUNNING\r\n                   : State.CLOSED;\r\n        } else if (block.number < PRESALE_START) {\r\n            return State.BEFORE_START;\r\n        } else if (block.number <= PRESALE_END && total_amount < MAX_TOTAL_AMOUNT_GET && !isStopped) {\r\n            return State.PRESALE_RUNNING;\r\n        } else if (this.balance == 0) {\r\n            return State.CLOSED;\r\n        } else if (block.number <= WITHDRAWAL_END && total_amount >= MIN_TOTAL_AMOUNT_GET) {\r\n            return State.WITHDRAWAL_RUNNING;\r\n        } else {\r\n            return State.MONEY_BACK_RUNNING;\r\n        }\r\n    }\r\n\r\n    function min(uint a, uint b) pure private returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    //Prohibition if the condition does not match\r\n    modifier inStanding(State state) {\r\n        require(state == currentStanding());\r\n        _;\r\n    }\r\n\r\n    //Prohibition if the current state was not before\r\n    modifier inStandingBefore(State state) {\r\n        require(currentStanding() < state);\r\n        _;\r\n    }\r\n\r\n    //Works on users's command\r\n    modifier tokenHoldersOnly(){\r\n        require(balances[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n    //Do not accept transactions with a sum less than the configuration limit\r\n    modifier notTooSmallAmountOnly(){\r\n        require(msg.value >= MIN_GET_AMOUNT);\r\n        _;\r\n    }\r\n\r\n    //Prohibition of repeated treatment\r\n    bool private lock = false;\r\n    modifier noReentrancy() {\r\n        require(!lock);\r\n        lock = true;\r\n        _;\r\n        lock = false;\r\n    }\r\n\t\r\n\t //Prohibition if it does not match the settings\r\n    modifier checkSettings() {\r\n        if ( OWNER == 0x0\r\n            || PRESALE_START == 0\r\n            || PRESALE_END == 0\r\n            || WITHDRAWAL_END ==0\r\n            || PRESALE_START <= block.number\r\n            || PRESALE_START >= PRESALE_END\r\n            || PRESALE_END   >= WITHDRAWAL_END\r\n            || MIN_TOTAL_AMOUNT_GET > MAX_TOTAL_AMOUNT_GET )\r\n                revert();\r\n        _;\r\n    }\r\n\t\r\n\t//Works on owner's command\r\n    modifier onlyOwner(){\r\n        require(msg.sender == OWNER);\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"moneyBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"termination\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_money_back\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RELEASE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WITHDRAWAL_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_TOTAL_AMOUNT_GET_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTerminated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standing\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_GET_AMOUNT_FINNEY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOTAL_AMOUNT_GET_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendMoneyOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"AvPresale","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://774177ffdfbe2367ead2d6bf202b86cdf14901d4442b49297c707fb63027f4d1"}]}