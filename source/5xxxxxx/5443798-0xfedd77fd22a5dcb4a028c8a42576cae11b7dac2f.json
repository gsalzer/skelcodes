{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ExchangeRate is Ownable {\r\n\r\n  event RateUpdated(uint timestamp, bytes32 symbol, uint rate);\r\n\r\n  mapping(bytes32 => uint) public rates;\r\n\r\n  /**\r\n   * @dev Allows the current owner to update a single rate.\r\n   * @param _symbol The symbol to be updated. \r\n   * @param _rate the rate for the symbol. \r\n   */\r\n  function updateRate(string _symbol, uint _rate) public onlyOwner {\r\n    rates[keccak256(_symbol)] = _rate;\r\n    emit RateUpdated(now, keccak256(_symbol), _rate);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to update multiple rates.\r\n   * @param data an array that alternates sha3 hashes of the symbol and the corresponding rate . \r\n   */\r\n  function updateRates(uint[] data) public onlyOwner {\r\n    \r\n    require(data.length % 2 <= 0);      \r\n    uint i = 0;\r\n    while (i < data.length / 2) {\r\n      bytes32 symbol = bytes32(data[i * 2]);\r\n      uint rate = data[i * 2 + 1];\r\n      rates[symbol] = rate;\r\n      emit RateUpdated(now, symbol, rate);\r\n      i++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the anyone to read the current rate.\r\n   * @param _symbol the symbol to be retrieved. \r\n   */\r\n  function getRate(string _symbol) public constant returns(uint) {\r\n    return rates[keccak256(_symbol)];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract SmartCoinFerma is MintableToken {\r\n    \r\n  string public constant name = \"Smart Coin Ferma\";\r\n   \r\n  string public constant symbol = \"SCF\";\r\n    \r\n  uint32 public constant decimals = 8;\r\n\r\n  HoldersList public list = new HoldersList();\r\n \r\n  bool public tradingStarted = true;\r\n\r\n \r\n   /**\r\n   * @dev modifier that throws if trading has not started yet\r\n   */\r\n  modifier hasStartedTrading() {\r\n    require(tradingStarted);\r\n    _;\r\n  } \r\n\r\n  /**\r\n   * @dev Allows the owner to enable the trading. This can not be undone\r\n   */\r\n  function startTrading() public onlyOwner {\r\n    tradingStarted = true;\r\n  }\r\n\r\n   /**\r\n   * @dev Allows anyone to transfer the PAY tokens once trading has started\r\n   * @param _to the recipient address of the tokens. \r\n   * @param _value number of tokens to be transfered. \r\n   */\r\n  function transfer(address _to, uint _value) hasStartedTrading  public returns (bool) {\r\n    \r\n    \r\n    require(super.transfer(_to, _value) == true);\r\n    list.changeBalance( msg.sender, balances[msg.sender]);\r\n    list.changeBalance( _to, balances[_to]);\r\n    \r\n    return true;\r\n  }\r\n\r\n     /**\r\n   * @dev Allows anyone to transfer the PAY tokens once trading has started\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value)  public returns (bool) {\r\n   \r\n    \r\n    require (super.transferFrom(_from, _to, _value) == true);\r\n    list.changeBalance( _from, balances[_from]);\r\n    list.changeBalance( _to, balances[_to]);\r\n    \r\n    return true;\r\n  }\r\n  function mint(address _to, uint _amount) onlyOwner canMint public returns (bool) {\r\n     require(super.mint(_to, _amount) == true); \r\n     list.changeBalance( _to, balances[_to]);\r\n     list.setTotal(totalSupply_);\r\n     return true;\r\n  }\r\n  \r\n  \r\n  \r\n}\r\n\r\ncontract HoldersList is Ownable{\r\n   uint256 public _totalTokens;\r\n   \r\n   struct TokenHolder {\r\n        uint256 balance;\r\n        uint       regTime;\r\n        bool isValue;\r\n    }\r\n    \r\n    mapping(address => TokenHolder) holders;\r\n    address[] public payees;\r\n    \r\n    function changeBalance(address _who, uint _amount)  public onlyOwner {\r\n        \r\n            holders[_who].balance = _amount;\r\n            if (notInArray(_who)){\r\n                payees.push(_who);\r\n                holders[_who].regTime = now;\r\n                holders[_who].isValue = true;\r\n            }\r\n            \r\n        //}\r\n    }\r\n    function notInArray(address _who) internal view returns (bool) {\r\n        if (holders[_who].isValue) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n  /**\r\n   * @dev Defines number of issued tokens. \r\n   */\r\n  \r\n    function setTotal(uint _amount) public onlyOwner {\r\n      _totalTokens = _amount;\r\n  }\r\n  \r\n  /**\r\n   * @dev Returnes number of issued tokens.\r\n   */\r\n  \r\n   function getTotal() public constant returns (uint)  {\r\n     return  _totalTokens;\r\n  }\r\n  \r\n  /**\r\n   * @dev Returnes holders balance.\r\n   \r\n   */\r\n  function returnBalance (address _who) public constant returns (uint){\r\n      uint _balance;\r\n      \r\n      _balance= holders[_who].balance;\r\n      return _balance;\r\n  }\r\n  \r\n  \r\n  /**\r\n   * @dev Returnes number of holders in array.\r\n   \r\n   */\r\n  function returnPayees () public constant returns (uint){\r\n      uint _ammount;\r\n      \r\n      _ammount= payees.length;\r\n      return _ammount;\r\n  }\r\n  \r\n  \r\n  /**\r\n   * @dev Returnes holders address.\r\n   \r\n   */\r\n  function returnHolder (uint _num) public constant returns (address){\r\n      address _addr;\r\n      \r\n      _addr= payees[_num];\r\n      return _addr;\r\n  }\r\n  \r\n  /**\r\n   * @dev Returnes registration date of holder.\r\n   \r\n   */\r\n  function returnRegDate (address _who) public constant returns (uint){\r\n      uint _redData;\r\n      \r\n      _redData= holders[_who].regTime;\r\n      return _redData;\r\n  }\r\n    \r\n}\r\n\r\n\r\ncontract Crowdsale is Ownable {\r\n  using SafeMath for uint;\r\n  event TokenSold(address recipient, uint ether_amount, uint pay_amount, uint exchangerate);\r\n  event AuthorizedCreate(address recipient, uint pay_amount);\r\n  \r\n\r\n  SmartCoinFerma public token = new SmartCoinFerma();\r\n\r\n\r\n     \r\n  //prod\r\n  address multisigVaultFirst = 0xAD7C50cfeb60B6345cb428c5820eD073f35283e7;\r\n  address multisigVaultSecond = 0xA9B04eF1901A0d720De14759bC286eABC344b3BA;\r\n  address multisigVaultThird = 0xF1678Cc0727b354a9B0612dd40D275a3BBdE5979;\r\n  \r\n  uint restrictedPercent = 50;\r\n  \r\n \r\n  bool pause = false;\r\n  \r\n  \r\n  \r\n  //prod\r\n  address restricted = 0x217d44b5c4bffC5421bd4bb9CC85fBf61d3fbdb6;\r\n  address restrictedAdditional = 0xF1678Cc0727b354a9B0612dd40D275a3BBdE5979;\r\n  \r\n  ExchangeRate exchangeRate;\r\n\r\n  \r\n  uint public start = 1523491200; \r\n  uint period = 365;\r\n  uint _rate;\r\n\r\n  /**\r\n   * @dev modifier to allow token creation only when the sale IS ON\r\n   */\r\n  modifier saleIsOn() {\r\n    require(now >= start && now < start + period * 1 days);\r\n    require(pause!=true);\r\n    _;\r\n  }\r\n    \r\n    /**\r\n   * @dev Allows owner to pause the crowdsale\r\n   */\r\n    function setPause( bool _newPause ) onlyOwner public {\r\n        pause = _newPause;\r\n    }\r\n\r\n\r\n   /**\r\n   * @dev Allows anyone to create tokens by depositing ether.\r\n   * @param recipient the recipient to receive tokens. \r\n   */\r\n  function createTokens(address recipient) saleIsOn payable {\r\n    uint256 sum;\r\n    uint256 halfSum;  \r\n    uint256 quatSum; \r\n    uint256 rate;\r\n    uint256 tokens;\r\n    uint256 restrictedTokens;\r\n   \r\n    uint256 tok1;\r\n    uint256 tok2;\r\n    \r\n    \r\n    \r\n    require( msg.value > 0 );\r\n    sum = msg.value;\r\n    halfSum = sum.div(2);\r\n    quatSum = halfSum.div(2);\r\n    rate = exchangeRate.getRate(\"ETH\"); \r\n    tokens = rate.mul(sum).div(1 ether);\r\n    require( tokens > 0 );\r\n    \r\n    token.mint(recipient, tokens);\r\n    \r\n    \r\n    multisigVaultFirst.transfer(halfSum);\r\n    multisigVaultSecond.transfer(quatSum);\r\n    multisigVaultThird.transfer(quatSum);\r\n    /*\r\n    * \"dev Create restricted tokens\r\n    */\r\n    restrictedTokens = tokens.mul(restrictedPercent).div(100 - restrictedPercent);\r\n    tok1 = restrictedTokens.mul(60).div(100);\r\n    tok2 = restrictedTokens.mul(40).div(100);\r\n    require (tok1 + tok2==restrictedTokens );\r\n    \r\n    token.mint(restricted, tok1);\r\n    token.mint(restrictedAdditional, tok2);\r\n    \r\n    \r\n    emit TokenSold(recipient, msg.value, tokens, rate);\r\n  }\r\n\r\n    /**\r\n   * @dev Allows the owner to set the starting time.\r\n   * @param _start the new _start\r\n   */\r\n  function setStart(uint _start) public onlyOwner {\r\n    start = _start;\r\n  }\r\n\r\n    /**\r\n   * @dev Allows the owner to set the exchangerate contract.\r\n   * @param _exchangeRate the exchangerate address\r\n   */\r\n  function setExchangeRate(address _exchangeRate) public onlyOwner {\r\n    exchangeRate = ExchangeRate(_exchangeRate);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the owner to finish the minting. This will create the \r\n   * restricted tokens and then close the minting.\r\n   * Then the ownership of the PAY token contract is transfered \r\n   * to this owner.\r\n   */\r\n  function finishMinting() public onlyOwner {\r\n    //uint issuedTokenSupply = token.totalSupply();\r\n    //uint restrictedTokens = issuedTokenSupply.mul(49).div(51);\r\n    //token.mint(multisigVault, restrictedTokens);\r\n    token.finishMinting();\r\n    token.transferOwnership(owner);\r\n    }\r\n\r\n  /**\r\n   * @dev Fallback function which receives ether and created the appropriate number of tokens for the \r\n   * msg.sender.\r\n   */\r\n  function() external payable {\r\n      createTokens(msg.sender);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeRate\",\"type\":\"address\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ether_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pay_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exchangerate\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_amount\",\"type\":\"uint256\"}],\"name\":\"AuthorizedCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1e217873f239e0446ac0e93f817949b426c461ede12388d8764f0f87d9f41a81"}]}