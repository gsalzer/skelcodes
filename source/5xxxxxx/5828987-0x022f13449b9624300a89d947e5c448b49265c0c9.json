{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/OpenZeppelin/openzeppelin-solidity\r\n *\r\n * The BG token contract bases on the ERC20 standard token contracts \r\n * Company Optimum Consulting - Courbevoie\r\n * */\r\n \r\npragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/OpenZeppelin/openzeppelin-solidity\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event PausePublic(bool newState);\r\n  event PauseOwnerAdmin(bool newState);\r\n\r\n  bool public pausedPublic = true;\r\n  bool public pausedOwnerAdmin = false;\r\n  uint public endDate;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable based on pause states.\r\n   */\r\n  modifier whenNotPaused() {\r\n    if(pausedPublic) {\r\n      if(!pausedOwnerAdmin) {\r\n        require(msg.sender == owner);\r\n      } else {\r\n        revert();\r\n      }\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to set new pause flags\r\n   * pausedPublic can't be false while pausedOwnerAdmin is true\r\n   */\r\n  function pause(bool newPausedPublic, bool newPausedOwnerAdmin) onlyOwner public {\r\n    require(!(newPausedPublic == false && newPausedOwnerAdmin == true));\r\n\r\n    pausedPublic = newPausedPublic;\r\n    pausedOwnerAdmin = newPausedOwnerAdmin;\r\n\r\n    emit PausePublic(newPausedPublic);\r\n    emit PauseOwnerAdmin(newPausedOwnerAdmin);\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken, Pausable {\r\n    using SafeMath for uint256;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    require(_to != address(0));\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  }\r\n \r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken {\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256  _value)\r\n        public onlyOwner\r\n    {\r\n        require(_value > 0);\r\n\t\trequire(balances[msg.sender] >= _value);\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(burner, _value);\r\n    }\r\n    event Burn(address indexed burner, uint256  indexed value);\r\n} \r\n\r\ncontract BGToken is StandardToken , BurnableToken  {\r\n    using SafeMath for uint256;\r\n    string public constant name = \"BlueGold\";\r\n    string public constant symbol = \"BG\";\r\n    uint8 public constant decimals = 18;\t\r\n\t\r\n\t// wallets address for allocation\t\r\n\taddress public Bounties_Wallet = 0x2805C02FE839210E194Fc4a12DaB683a34Ad95EF; // 5% : Bounty\r\n\taddress public Team_Wallet = 0x6C42c4EC37d0F45E2d9C2287f399E14Ea2b3B77d; // 8% : Equity & Team\r\n\taddress public OEM_Wallet = 0x278cB54ae3B7851D3262A307cb6780b642A29485; // 10% : Community Builting, Biz Dev\r\n\taddress public LA_wallet = 0x1669e7910e27b1400B5567eE360de2c5Ee964859; //8% : Legal & advisors\r\n\t\t\r\n\taddress public tokenWallet = 0xDb3D4293981adeEC2A258c0b8046eAdb20D3ff13;     \r\n\tuint256 public constant INITIAL_SUPPLY = 100000000 ether;\t\r\n\t\r\n\t/// Base exchange rate is set to 1 ETH = 460 BG.\r\n\tuint256 tokenRate = 460; \t\r\n\t\r\n    function BGToken() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n\r\n\t\t// InitialDistribution\r\n\t\t// 31% ---> 31000000\r\n\t\tbalances[Bounties_Wallet] = INITIAL_SUPPLY.mul(5).div(100) ;\r\n\t\tbalances[Team_Wallet] = INITIAL_SUPPLY.mul(8).div(100);\r\n\t\tbalances[OEM_Wallet] = INITIAL_SUPPLY.mul(10).div(100) ;\r\n\t\tbalances[LA_wallet] = INITIAL_SUPPLY.mul(8).div(100) ;\r\n\t\t\r\n\t\t// 69% ---> 69000000\r\n        balances[tokenWallet] = INITIAL_SUPPLY.mul(69).div(100);\r\n\t\t\t\t\r\n        emit Transfer(0x0, Bounties_Wallet, balances[Bounties_Wallet]);\r\n        emit Transfer(0x0, Team_Wallet, balances[Team_Wallet]);\r\n\t\temit Transfer(0x0, OEM_Wallet, balances[OEM_Wallet]);\r\n        emit Transfer(0x0, LA_wallet, balances[LA_wallet]);\r\n\t\t\t\t\r\n\t\temit Transfer(0x0, tokenWallet, balances[tokenWallet]);\r\n        endDate = _endDate;\t\t\t\r\n    }\r\n\t\r\n    uint constant _endDate = 1546297199; /// Close Main Sale -  Monday 31 December 2018 23:59:59 \r\n\tuint256 Bonus = 30; \t\r\n\tuint256 extraBonus = 20; \t\t\r\n\r\n    struct Stat {\r\n        uint currentFundraiser;\r\n        uint otherAmount;\r\n        uint ethAmount;\r\n        uint txCounter;\r\n    }    \r\n    Stat public stat;    \t\r\n\r\n\t/// Maximum tokens to be allocated on the sale (69% of the hard cap)\r\n    uint256 IcoCap = INITIAL_SUPPLY;\r\n\t\r\n\t /**\r\n     * @dev modifier to allow actions only when ICO end date is not now\r\n     */\r\n\tmodifier isRunning {\r\n        require (endDate >= now);\r\n        _;\r\n    }\r\n\t\r\n    /// @notice Buy tokens from contract by sending ether\r\n    function () payable isRunning public {\r\n        if (msg.value < 0.001 ether) revert();\r\n        buyTokens();\r\n    }\t\r\n\r\n    /// @notice Buy tokens from contract by sending ether\r\n    function buyTokens() internal {\t\t\r\n\t\t/// only accept a minimum amount of ETH?\r\n        require(msg.value >= 0.001 ether);\r\n        uint256 tokens ;\r\n\t\tuint256 xAmount = msg.value;\r\n\t\tuint256 toReturnEth;\r\n\t\tuint256 toTokensReturn;\r\n\t\tuint256 balanceIco ;\t\r\n\t\tuint256 AllBonus = 0; \r\n\t\t\r\n\t\tbalanceIco = IcoCap;\r\n\t\tbalanceIco = balanceIco.sub(stat.currentFundraiser);\t\r\n\t\t\r\n\t\tAllBonus= Bonus.add(extraBonus);\r\n\t\ttokens = xAmount.mul(tokenRate);\r\n\t\ttokens = (tokens.mul(100)).div(100 - (AllBonus));\r\n\t\t\r\n\t\tif (balanceIco < tokens) {\r\n\t\t\ttoTokensReturn = tokens.sub(balanceIco);\r\n\t\t\ttoReturnEth = toTokensReturn.mul(tokenRate);\r\n\t\t}\t\t\t\r\n\r\n\t\tif (tokens > 0 )\r\n\t\t{\r\n\t\t\tif (balanceIco < tokens) {\t\r\n\t\t\t\t/// return  ETH\r\n\t\t\t\tif (toReturnEth <= xAmount) \r\n\t\t\t\t{\r\n\t\t\t\t\tmsg.sender.transfer(toReturnEth);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t_EnvoisTokens(balanceIco, xAmount - toReturnEth);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\t_EnvoisTokens(tokens, xAmount);\r\n\t\t\t}\r\n\t\t} else {\r\n            revert();\r\n\t\t}\r\n    }\r\n\r\n\t/// @dev issue tokens for a single buyer\r\n\t/// @dev Issue token based on Ether received.\r\n    /// @param _amount the amount of tokens to send\r\n\t/// @param _ethers the amount of ether it will receive\r\n    function _EnvoisTokens(uint _amount, uint _ethers) internal {\r\n\t\t/// sends tokens ODEEP to the buyer\r\n        sendTokens(msg.sender, _amount);\r\n        stat.currentFundraiser += _amount;\r\n\t\t/// sends ether to the seller\r\n        tokenWallet.transfer(_ethers);\r\n        stat.ethAmount += _ethers;\r\n        stat.txCounter += 1;\r\n    }\r\n\r\n\t/// @dev issue tokens for a single buyer\r\n\t/// @dev Issue token based on Ether received.\r\n    /// @param _to address to send to\r\n\t/// @param _amount the amount of tokens to send\r\n    function sendTokens(address _to, uint _amount) internal {\r\n        require(_amount <= balances[tokenWallet]);\r\n        balances[tokenWallet] -= _amount;\r\n        balances[_to] += _amount;\r\n        emit Transfer(tokenWallet, _to, _amount);\r\n    }\r\n\t\r\n\t/// @dev issue tokens for a single buyer\r\n    /// @param _to address to send to\r\n\t/// @param _amount the amount of tokens to send\r\n\t/// @param _otherAmount the amount of pay\r\n    function _sendTokensManually(address _to, uint _amount, uint _otherAmount) public onlyOwner {\r\n        require(_to != address(0));\r\n\t\tsendTokens(_to, _amount);\t\t\r\n\t\tstat.currentFundraiser += _amount;\r\n        stat.otherAmount += _otherAmount;\r\n        stat.txCounter += 1;\r\n    }\t\r\n\r\n\t/// @dev modify ICO cap.\r\n\t/// @param newIcoCap the new Cap. \r\n    function setIcoCap(uint256 newIcoCap) public onlyOwner {\r\n        IcoCap = newIcoCap;\r\n    }\r\n\t\r\n\t/// @dev Returns the current Cap.\r\n\tfunction getIcoCap() public constant returns (uint256) {\r\n        return (IcoCap);\r\n    }    \t\r\n\t\t\r\n\t/// @dev modify Base exchange rate.\r\n\t/// @param newTokenRate the new rate. \r\n    function setTokenRate(uint newTokenRate) public onlyOwner {\r\n        tokenRate = newTokenRate;\r\n    }\r\n\t\r\n\t/// @dev Returns the current rate.\r\n\tfunction getTokenRate() public constant returns (uint) {\r\n        return (tokenRate);\r\n    }    \t\r\n\t\r\n\t/// @dev modify Bonus.\r\n\t/// @param newBonus the new Bonus. \r\n    function setBonus(uint newBonus) public onlyOwner {\r\n        Bonus = newBonus;\t\t\r\n    }\r\n\t\r\n\t/// @dev Returns the current Bonus.\r\n\tfunction getBonus() public constant returns (uint) {\r\n        return (Bonus);\r\n    } \t\r\n\t\r\n\t/// @dev modify ExtraBonus.\r\n\t/// @param newExtraBonus the new Bonus. \r\n    function setExtraBonus(uint newExtraBonus) public onlyOwner {\r\n        extraBonus = newExtraBonus;\r\n    }\r\n\t\r\n\t/// @dev Returns the current ExtraBonus.\r\n\tfunction getExtraBonus() public constant returns (uint) {\r\n        return (extraBonus);\r\n    } \t\r\n\t\r\n\t/// @dev modify endDate.\r\n\t/// @param newEndDate the new endDate. \r\n    function setEndDate(uint newEndDate) public onlyOwner {\r\n        endDate = newEndDate;\r\n    }\t\t\r\n\t\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_otherAmount\",\"type\":\"uint256\"}],\"name\":\"_sendTokensManually\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stat\",\"outputs\":[{\"name\":\"currentFundraiser\",\"type\":\"uint256\"},{\"name\":\"otherAmount\",\"type\":\"uint256\"},{\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"name\":\"txCounter\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBonus\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausedPublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LA_wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEndDate\",\"type\":\"uint256\"}],\"name\":\"setEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIcoCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Bounties_Wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenRate\",\"type\":\"uint256\"}],\"name\":\"setTokenRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausedOwnerAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OEM_Wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newIcoCap\",\"type\":\"uint256\"}],\"name\":\"setIcoCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPausedPublic\",\"type\":\"bool\"},{\"name\":\"newPausedOwnerAdmin\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Team_Wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newExtraBonus\",\"type\":\"uint256\"}],\"name\":\"setExtraBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExtraBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"PausePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"PauseOwnerAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BGToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7cb7a8c975076dc39598fba80c4a4443ea434662e036780a242a26ec224c0168"}]}