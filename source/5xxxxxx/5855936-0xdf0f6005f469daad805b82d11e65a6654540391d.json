{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.23;\r\n// tarot.etherealbazaar.com\r\ncontract EtherealTarot {\r\n\r\n    struct reading { // Struct\r\n        uint8[] cards;\r\n        bool[] upright;\r\n        uint8 card_count;\r\n    }\r\n\r\n  mapping(address => reading) readings;\r\n\r\n  uint8[78] cards;\r\n  uint8 deckSize = 78;\r\n  address public creator;\r\n\r\n  constructor() public {\r\n    creator = msg.sender;\r\n    for (uint8 card = 0; card < deckSize; card++) {\r\n      cards[card] = card;\r\n    }\r\n  }\r\n    \r\n  function draw(uint8 index, uint8 count) private {\r\n    // put the drawn card at the end of the array\r\n    // so the next random draw cannot contain\r\n    // a card thats already been drawn\r\n    uint8 drawnCard = cards[index];\r\n    uint8 tableIndex = deckSize - count - 1;\r\n    cards[index] = cards[tableIndex];\r\n    cards[tableIndex] = drawnCard;\r\n  }\r\n\r\n  function draw_random_card(uint8 count) private returns(uint8) {\r\n    uint8 random_card = random(deckSize - count, count);\r\n    draw(random_card, count);\r\n    return random_card;\r\n  }\r\n\r\n  function random(uint8 range, uint8 count) view private returns(uint8) {\r\n    uint8 _seed = uint8(\r\n      keccak256(\r\n        abi.encodePacked(\r\n          keccak256(\r\n            abi.encodePacked(\r\n              blockhash(block.number),\r\n              _seed)\r\n          ), now + count)\r\n      )\r\n    );\r\n    return _seed % (range);\r\n  }\r\n  function random_bool(uint8 count) view private returns(bool){\r\n      return 0==random(2,count);\r\n  }\r\n\r\n  function spread(uint8 requested) private {\r\n    // cards in the current spread\r\n    uint8[] memory table = new uint8[](requested);\r\n    // reversed cards aren't all bad! understand the shadow...\r\n    bool[] memory upright = new bool[](requested);\r\n\r\n    //Draw the whole spread\r\n    for (uint8 position = 0; position < requested; position++) {\r\n      table[position] = draw_random_card(position);\r\n      upright[position] = random_bool(position);\r\n    }\r\n    readings[msg.sender]=reading(table,upright,requested);\r\n  }\r\n\r\n\r\n  function has_reading() view public returns(bool) {\r\n    return readings[msg.sender].card_count!=0;\r\n  }\r\n  function reading_card_at(uint8 index) view public returns(uint8) {\r\n    return readings[msg.sender].cards[index];\r\n  }\r\n  // returning variable length arrays proved quite tricky...\r\n  function reading_card_upright_at(uint8 index) view public returns(bool) {\r\n    return readings[msg.sender].upright[index];\r\n  }\r\n  function reading_card_count() view public returns(uint8){\r\n    return readings[msg.sender].card_count;\r\n  }\r\n  // Tarot by donation\r\n  function withdraw() public {\r\n    require(msg.sender == creator);\r\n    creator.transfer(address(this).balance);\r\n  }\r\n    \r\n  // 8 Different Spreads available\r\n  function career_path() payable public {\r\n    spread(7);\r\n  }\r\n\r\n  function celtic_cross() payable public {\r\n    spread(10);\r\n  }\r\n\r\n  function past_present_future() payable public {\r\n    spread(3);\r\n  }\r\n\r\n  function success() payable public {\r\n    spread(5);\r\n  }\r\n\r\n  function spiritual_guidance() payable public {\r\n    spread(8);\r\n  }\r\n\r\n  function single_card() payable public {\r\n    spread(1);\r\n  }\r\n  \r\n  function situation_challenge() payable public {\r\n    spread(2);\r\n  }\r\n\r\n  function seventeen() payable public {\r\n    spread(17);\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"situation_challenge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"success\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"single_card\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"career_path\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"reading_card_at\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"reading_card_upright_at\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seventeen\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"past_present_future\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reading_card_count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"has_reading\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"celtic_cross\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"spiritual_guidance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"EtherealTarot","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://279a571d52813ca5a32ba8df458f295e6fb2b8f4fdd66f75f011d37164bd6548"}]}