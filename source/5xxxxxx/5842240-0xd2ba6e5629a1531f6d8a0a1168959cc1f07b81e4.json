{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ninterface TokenContract {\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n}\r\n\r\ncontract SafeWithdraw is Ownable {\r\n  address signerAddress = 0xDD594FeD73370549607A658DfE7737C437265BBC;\r\n  TokenContract public tkn;\r\n  address public tokenWallet;\r\n  mapping (bytes32 => bool) public claimed;\r\n\r\n  constructor() public {\r\n    tkn = TokenContract(0x92D3e963aA94D909869940A8d15FA16CcbC6655E);\r\n    tokenWallet = 0x850Ac570A9f4817C43722938127aFa504aeb7717;\r\n  }\r\n\r\n  function changeWallet(address _newWallet) onlyOwner public {\r\n    tokenWallet = _newWallet;\r\n  }\r\n\r\n  function changeSigner(address _newSigner) onlyOwner public {\r\n    signerAddress = _newSigner;\r\n  }\r\n\r\n  function transfer(uint256 _amount, string code, bytes sig) public {\r\n    bytes32 message = prefixed(keccak256(_amount, code));\r\n    \r\n    require (!claimed[message]);\r\n\r\n    if (recoverSigner(message, sig) == signerAddress) {\r\n      uint256 fullValue = _amount * (1 ether);\r\n      claimed[message] = true;\r\n      tkn.transferFrom(tokenWallet, msg.sender, fullValue);\r\n      emit Claimed(msg.sender, fullValue);\r\n    }\r\n  }\r\n\r\n  function killMe() public {\r\n    require(msg.sender == owner);\r\n    selfdestruct(msg.sender);\r\n  }\r\n\r\n  function splitSignature(bytes sig)\r\n    internal\r\n    pure\r\n    returns (uint8, bytes32, bytes32)\r\n  {\r\n    require(sig.length == 65);\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n    return (v, r, s);\r\n  }\r\n\r\n  function recoverSigner(bytes32 message, bytes sig)\r\n    internal\r\n    pure\r\n    returns (address)\r\n  {\r\n    uint8 v;\r\n    bytes32 r;\r\n    bytes32 s;\r\n    (v, r, s) = splitSignature(sig);\r\n    return ecrecover(message, v, r, s);\r\n  }\r\n\r\n  function prefixed(bytes32 hash) internal pure returns (bytes32) {\r\n    return keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash);\r\n  }\r\n\r\n  event Claimed(address _by, uint256 _amount);\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tkn\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSigner\",\"type\":\"address\"}],\"name\":\"changeSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killMe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SafeWithdraw","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f949657540e0572aedc0bacba670efcadbf4cd046896c85277a335820a8bd6e1"}]}