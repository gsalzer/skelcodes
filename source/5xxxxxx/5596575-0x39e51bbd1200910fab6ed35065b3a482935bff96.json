{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'FINX' 'FINX Token' token contract\r\n//\r\n// Symbol\t: FINX\r\n// Name\t\t: FINX Token\r\n// Total supply: 100,000,000,000.000000000000000000\r\n// Decimals\t: 18\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n\tfunction add(uint a, uint b) internal pure returns (uint c) {\r\n\t\tc = a + b;\r\n\t\trequire(c >= a);\r\n\t}\r\n\tfunction sub(uint a, uint b) internal pure returns (uint c) {\r\n\t\trequire(b <= a);\r\n\t\tc = a - b;\r\n\t}\r\n\tfunction mul(uint a, uint b) internal pure returns (uint c) {\r\n\t\tc = a * b;\r\n\t\trequire(a == 0 || c / a == b);\r\n\t}\r\n\tfunction div(uint a, uint b) internal pure returns (uint c) {\r\n\t\trequire(b > 0);\r\n\t\tc = a / b;\r\n\t}\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n\tfunction totalSupply() public constant returns (uint);\r\n\tfunction balanceOf(address tokenOwner) public constant returns (uint balance);\r\n\tfunction allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n\tfunction transfer(address to, uint tokens) public returns (bool success);\r\n\tfunction approve(address spender, uint tokens) public returns (bool success);\r\n\tfunction transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\r\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and an\r\n// initial fixed supply\r\n// ----------------------------------------------------------------------------\r\ncontract FINXToken is ERC20Interface {\r\n\tusing SafeMath for uint;\r\n\r\n\tstring constant public symbol = \"FINX\";\r\n\tstring constant public name = \"FINX\";\r\n\tuint8 constant public decimals = 18;\r\n\tuint public _totalSupply = 100000000000e18;\r\n\r\n\tuint constant endTime = 1543622400; // 2018-12-01 00:00:00 GMT+00:00\r\n\tuint constant unlockTime = 1622505600; // 2021-06-01 00:00:00 GMT+00:00\r\n\r\n\taddress founder1 = 0x0e85a9faB7D61b6cbbf1ccafA8144E23009a60AF;\r\n\taddress founder2 = 0xFcEa27D04354aD5f20B5dbaf5C314e4f143eAe48;\r\n\taddress founder3 = 0xa0eC2A32bd678DFbD3d359Be8075093f36B2c0aa;\r\n\taddress founder4 = 0xC93324C26ce4221d187FEeeaf54bC047Bbddd26a;\r\n\r\n\taddress mgmtTeam = 0xb3495892fB336D81dBAb4650c2291Bfd7A52c1C1;\r\n\taddress advsTeam = 0x72C1A4670a97a6A2BD106cA3341f059123a4F381;\r\n\r\n\taddress crowdSale = 0x9940bd75d32a0544750eed5EfC208453F4ae31ab;\r\n\r\n\tuint constant founderTokens = 250000000e18;\r\n\tuint constant mgmtTokens = 20000000e18;\r\n\tuint constant advsTokens = 40000000e18;\r\n\tuint constant crowdSaleTokens = 98940000000e18;\r\n\r\n\tmapping(address => uint) balances;\r\n\tmapping(address => mapping(address => uint)) allowed;\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Constructor\r\n\t// ------------------------------------------------------------------------\r\n\tfunction FINXToken() public {\r\n\t\tpreSale(founder1, founderTokens);\r\n\t\tpreSale(founder2, founderTokens);\r\n\t\tpreSale(founder3, founderTokens);\r\n\t\tpreSale(founder4, founderTokens);\r\n\r\n\t\tpreSale(mgmtTeam, mgmtTokens);\r\n\t\tpreSale(advsTeam, advsTokens);\r\n\r\n\t\tpreSale(crowdSale, crowdSaleTokens);\r\n\t}\r\n\r\n\r\n\tfunction preSale(address _address, uint _amount) internal returns (bool) {\r\n\t\tbalances[_address] = _amount;\r\n\t\temit Transfer(address(0x0), _address, _amount);\r\n\t}\r\n\r\n\r\n\tfunction transferPermissions(address spender) internal constant returns (bool) {\r\n\t\tif (spender == crowdSale) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (now < endTime) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (now < unlockTime) {\r\n\t\t\tif (spender == founder1 || spender == founder2 || spender == founder3 || spender == founder4) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Total supply\r\n\t// ------------------------------------------------------------------------\r\n\tfunction totalSupply() public constant returns (uint) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Get the token balance for account `tokenOwner`\r\n\t// ------------------------------------------------------------------------\r\n\tfunction balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n\t\treturn balances[tokenOwner];\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Transfer the balance from token owner's account to `to` account\r\n\t// - Owner's account must have sufficient balance to transfer\r\n\t// - 0 value transfers are allowed\r\n\t// ------------------------------------------------------------------------\r\n\tfunction transfer(address to, uint tokens) public returns (bool success) {\r\n\t\trequire(transferPermissions(msg.sender));\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(tokens);\r\n\t\tbalances[to] = balances[to].add(tokens);\r\n\t\temit Transfer(msg.sender, to, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n\t// from the token owner's account\r\n\t//\r\n\t// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n\t// recommends that there are no checks for the approval double-spend attack\r\n\t// as this should be implemented in user interfaces\r\n\t// ------------------------------------------------------------------------\r\n\tfunction approve(address spender, uint tokens) public returns (bool success) {\r\n\t\tallowed[msg.sender][spender] = tokens;\r\n\t\temit Approval(msg.sender, spender, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Transfer `tokens` from the `from` account to the `to` account\r\n\t//\r\n\t// The calling account must already have sufficient tokens approve(...)-d\r\n\t// for spending from the `from` account and\r\n\t// - From account must have sufficient balance to transfer\r\n\t// - Spender must have sufficient allowance to transfer\r\n\t// - 0 value transfers are allowed\r\n\t// ------------------------------------------------------------------------\r\n\tfunction transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n\t\trequire(transferPermissions(from));\r\n\t\tbalances[from] = balances[from].sub(tokens);\r\n\t\tallowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n\t\tbalances[to] = balances[to].add(tokens);\r\n\t\temit Transfer(from, to, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Returns the amount of tokens approved by the owner that can be\r\n\t// transferred to the spender's account\r\n\t// ------------------------------------------------------------------------\r\n\tfunction allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n\t\treturn allowed[tokenOwner][spender];\r\n\t}\r\n\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Don't accept ETH\r\n\t// ------------------------------------------------------------------------\r\n\tfunction () public payable {\r\n\t\trevert();\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FINXToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e84f8506a792e275a0817c21a13f2313771e9380e9250be16c3014113fe28364"}]}