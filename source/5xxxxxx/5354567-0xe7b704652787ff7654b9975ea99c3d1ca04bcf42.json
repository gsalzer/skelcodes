{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title AccessMint\r\n * @dev Adds grant/revoke functions to the contract.\r\n */\r\ncontract AccessMint is Claimable {\r\n\r\n  // Access for minting new tokens.\r\n  mapping(address => bool) private mintAccess;\r\n\r\n  // Modifier for accessibility to define new hero types.\r\n  modifier onlyAccessMint {\r\n    require(msg.sender == owner || mintAccess[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  // @dev Grant acess to mint heroes.\r\n  function grantAccessMint(address _address)\r\n    onlyOwner\r\n    public\r\n  {\r\n    mintAccess[_address] = true;\r\n  }\r\n\r\n  // @dev Revoke acess to mint heroes.\r\n  function revokeAccessMint(address _address)\r\n    onlyOwner\r\n    public\r\n  {\r\n    mintAccess[_address] = false;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title AccessDeploy\r\n * @dev Adds grant/revoke functions to the contract.\r\n */\r\ncontract AccessDeploy is Claimable {\r\n\r\n  // Access for deploying heroes.\r\n  mapping(address => bool) private deployAccess;\r\n\r\n  // Modifier for accessibility to deploy a hero on a location.\r\n  modifier onlyAccessDeploy {\r\n    require(msg.sender == owner || deployAccess[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  // @dev Grant acess to deploy heroes.\r\n  function grantAccessDeploy(address _address)\r\n    onlyOwner\r\n    public\r\n  {\r\n    deployAccess[_address] = true;\r\n  }\r\n\r\n  // @dev Revoke acess to deploy heroes.\r\n  function revokeAccessDeploy(address _address)\r\n    onlyOwner\r\n    public\r\n  {\r\n    deployAccess[_address] = false;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title CryptoSagaDungeonProgress\r\n * @dev Storage contract for progress of dungeons.\r\n */\r\ncontract CryptoSagaDungeonProgress is Claimable, AccessDeploy {\r\n\r\n  // The progress of the player in dungeons.\r\n  mapping(address => uint32[25]) public addressToProgress;\r\n\r\n  // @dev Get progress.\r\n  function getProgressOfAddressAndId(address _address, uint32 _id)\r\n    external view\r\n    returns (uint32)\r\n  {\r\n    var _progressList = addressToProgress[_address];\r\n    return _progressList[_id];\r\n  }\r\n\r\n  // @dev Increment progress.\r\n  function incrementProgressOfAddressAndId(address _address, uint32 _id)\r\n    onlyAccessDeploy\r\n    public\r\n  {\r\n    var _progressList = addressToProgress[_address];\r\n    _progressList[_id]++;\r\n    addressToProgress[_address] = _progressList;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"grantAccessDeploy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToProgress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"incrementProgressOfAddressAndId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"revokeAccessDeploy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getProgressOfAddressAndId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryptoSagaDungeonProgress","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2bb7fec470ebbc1f6b37c8082c497f5a9acacd09ca97de334a818452f4497e54"}]}