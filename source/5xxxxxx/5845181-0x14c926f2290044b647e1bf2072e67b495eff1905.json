{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n--------------------------------------------------------------------------------\r\nThe Bethereum [BETHER] Token Smart Contract\r\n\r\nCredit:\r\nBethereum Limited\r\n\r\nERC20: https://github.com/ethereum/EIPs/issues/20\r\nERC223: https://github.com/ethereum/EIPs/issues/223\r\n\r\nMIT Licence\r\n--------------------------------------------------------------------------------\r\n*/\r\n\r\n/*\r\n* Contract that is working with ERC223 tokens\r\n*/\r\n\r\ncontract ContractReceiver {\r\n    function tokenFallback(address _from, uint _value, bytes _data) {\r\n        /* Fix for Mist warning */\r\n        _from;\r\n        _value;\r\n        _data;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC223Interface {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) constant returns (uint);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n}\r\n\r\n\r\ncontract BethereumERC223 is ERC223Interface {\r\n    using SafeMath for uint256;\r\n\r\n    /* Contract Constants */\r\n    string public constant _name = \"Bethereum\";\r\n    string public constant _symbol = \"BETHER\";\r\n    uint8 public constant _decimals = 18;\r\n\r\n    /* Contract Variables */\r\n    address public owner;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping (address => uint256)) public allowed;\r\n\r\n    /* Constructor initializes the owner's balance and the supply  */\r\n    function BethereumERC223() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /* ERC20 Events */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* ERC223 Events */\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n\r\n    /* Returns the balance of a particular account */\r\n    function balanceOf(address _address) constant returns (uint256 balance) {\r\n        return balances[_address];\r\n    }\r\n\r\n    /* Transfer the balance from the sender's address to the address _to */\r\n    function transfer(address _to, uint _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value\r\n        && _value > 0\r\n        && balances[_to] + _value > balances[_to]) {\r\n            bytes memory empty;\r\n            if(isContract(_to)) {\r\n                return transferToContract(_to, _value, empty);\r\n            } else {\r\n                return transferToAddress(_to, _value, empty);\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* Withdraws to address _to form the address _from up to the amount _value */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value\r\n        && allowed[_from][msg.sender] >= _value\r\n        && _value > 0\r\n        && balances[_to] + _value > balances[_to]) {\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* Allows _spender to withdraw the _allowance amount form sender */\r\n    function approve(address _spender, uint256 _allowance) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _allowance;\r\n        Approval(msg.sender, _spender, _allowance);\r\n        return true;\r\n    }\r\n\r\n    /* Checks how much _spender can withdraw from _owner */\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /* ERC223 Functions */\r\n    /* Get the contract constant _name */\r\n    function name() constant returns (string name) {\r\n        return _name;\r\n    }\r\n\r\n    /* Get the contract constant _symbol */\r\n    function symbol() constant returns (string symbol) {\r\n        return _symbol;\r\n    }\r\n\r\n    /* Get the contract constant _decimals */\r\n    function decimals() constant returns (uint8 decimals) {\r\n        return _decimals;\r\n    }\r\n\r\n    /* Transfer the balance from the sender's address to the address _to with data _data */\r\n    function transfer(address _to, uint _value, bytes _data) returns (bool success) {\r\n        if (balances[msg.sender] >= _value\r\n        && _value > 0\r\n        && balances[_to] + _value > balances[_to]) {\r\n            if(isContract(_to)) {\r\n                return transferToContract(_to, _value, _data);\r\n            } else {\r\n                return transferToAddress(_to, _value, _data);\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* Transfer function when _to represents a regular address */\r\n    function transferToAddress(address _to, uint _value, bytes _data) internal returns (bool success) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    /* Transfer function when _to represents a contract address, with the caveat\r\n    that the contract needs to implement the tokenFallback function in order to receive tokens */\r\n    function transferToContract(address _to, uint _value, bytes _data) internal returns (bool success) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        Transfer(msg.sender, _to, _value);\r\n        Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    /* Infers if whether _address is a contract based on the presence of bytecode */\r\n    function isContract(address _address) internal returns (bool is_contract) {\r\n        uint length;\r\n        if (_address == 0) return false;\r\n        assembly {\r\n        length := extcodesize(_address)\r\n        }\r\n        if(length > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* Stops any attempt to send Ether to this contract */\r\n    function () {\r\n        throw;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\n/**\r\n* @title Pausable token\r\n*\r\n* @dev StandardToken modified with pausable transfers.\r\n**/\r\ncontract PausableToken is BethereumERC223, Pausable {\r\n\r\n    function transfer(address _to, uint256 _value, bytes _data) public whenNotPaused returns (bool) {\r\n        return super.transfer(_to, _value, _data);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is BethereumERC223, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract BethereumToken is MintableToken, PausableToken {\r\n\r\n    function BethereumToken(){\r\n        pause();\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    MintableToken public token;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n    function Crowdsale(uint256 _endTime, address _wallet) {\r\n\r\n        require(_endTime >= now);\r\n        require(_wallet != 0x0);\r\n\r\n        token = createTokenContract();\r\n        endTime = _endTime;\r\n        wallet = _wallet;\r\n    }\r\n\r\n    // creates the token to be sold.\r\n    // override this method to have crowdsale of a specific mintable token.\r\n    function createTokenContract() internal returns (BethereumToken) {\r\n        return new BethereumToken();\r\n    }\r\n\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) public payable {  }\r\n\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        return now > endTime;\r\n    }\r\n}\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    bool public isFinalized = false;\r\n\r\n    bool public weiCapReached = false;\r\n\r\n    event Finalized();\r\n\r\n    /**\r\n     * @dev Must be called after crowdsale ends, to do some extra finalization\r\n     * work. Calls the contract's finalization function.\r\n     */\r\n    function finalize() onlyOwner public {\r\n        require(!isFinalized);\r\n\r\n        finalization();\r\n        Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Can be overridden to add finalization logic. The overriding function\r\n     * should call super.finalization() to ensure the chain of finalization is\r\n     * executed entirely.\r\n     */\r\n    function finalization() internal {\r\n    }\r\n}\r\n\r\ncontract BETHERTokenSale is FinalizableCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // Define sale\r\n    uint public constant RATE = 17500;\r\n    uint public constant TOKEN_SALE_LIMIT = 25000 * 1000000000000000000;\r\n\r\n    uint256 public constant TOKENS_FOR_OPERATIONS = 400000000*(10**18);\r\n    uint256 public constant TOKENS_FOR_SALE = 600000000*(10**18);\r\n\r\n    uint public constant TOKENS_FOR_PRESALE = 315000000*(1 ether / 1 wei);\r\n\r\n    uint public BONUS_PERCENTAGE;\r\n\r\n    enum Phase {\r\n    Created,\r\n    CrowdsaleRunning,\r\n    Paused\r\n    }\r\n\r\n    Phase public currentPhase = Phase.Created;\r\n\r\n    event LogPhaseSwitch(Phase phase);\r\n\r\n    // Constructor\r\n    function BETHERTokenSale(\r\n    uint256 _end,\r\n    address _wallet\r\n    )\r\n    FinalizableCrowdsale()\r\n    Crowdsale(_end, _wallet) {\r\n    }\r\n\r\n    function setNewBonusScheme(uint _bonusPercentage) {\r\n        BONUS_PERCENTAGE = _bonusPercentage;\r\n    }\r\n\r\n    function mintRawTokens(address _buyer, uint256 _newTokens) public onlyOwner {\r\n        token.mint(_buyer, _newTokens);\r\n    }\r\n\r\n    /// @dev Lets buy you some tokens.\r\n    function buyTokens(address _buyer) public payable {\r\n        // Available only if presale or crowdsale is running.\r\n        require(currentPhase == Phase.CrowdsaleRunning);\r\n        require(_buyer != address(0));\r\n        require(msg.value > 0);\r\n        require(validPurchase());\r\n\r\n        uint tokensWouldAddTo = 0;\r\n        uint weiWouldAddTo = 0;\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        uint newTokens = msg.value.mul(RATE);\r\n\r\n        weiWouldAddTo = weiRaised.add(weiAmount);\r\n\r\n        require(weiWouldAddTo <= TOKEN_SALE_LIMIT);\r\n\r\n        newTokens = addBonusTokens(token.totalSupply(), newTokens);\r\n\r\n        tokensWouldAddTo = newTokens.add(token.totalSupply());\r\n        require(tokensWouldAddTo <= TOKENS_FOR_SALE);\r\n\r\n        token.mint(_buyer, newTokens);\r\n        TokenPurchase(msg.sender, _buyer, weiAmount, newTokens);\r\n\r\n        weiRaised = weiWouldAddTo;\r\n        forwardFunds();\r\n        if (weiRaised == TOKENS_FOR_SALE){\r\n            weiCapReached = true;\r\n        }\r\n    }\r\n\r\n    // @dev Adds bonus tokens by token supply bought by user\r\n    // @param _totalSupply total supply of token bought during pre-sale/crowdsale\r\n    // @param _newTokens tokens currently bought by user\r\n    function addBonusTokens(uint256 _totalSupply, uint256 _newTokens) internal view returns (uint256) {\r\n        uint returnTokens;\r\n        uint tokens = _newTokens;\r\n        returnTokens = tokens.add(tokens.mul(BONUS_PERCENTAGE).div(100));\r\n\r\n        return returnTokens;\r\n    }\r\n\r\n    function setSalePhase(Phase _nextPhase) public onlyOwner {\r\n        currentPhase = _nextPhase;\r\n        LogPhaseSwitch(_nextPhase);\r\n    }\r\n\r\n    function transferTokenOwnership(address _newOwner) {\r\n        token.transferOwnership(_newOwner);\r\n    }\r\n\r\n    // Finalize\r\n    function finalization() internal {\r\n        uint256 toMint = TOKENS_FOR_OPERATIONS;\r\n        token.mint(wallet, toMint);\r\n        token.finishMinting();\r\n        token.transferOwnership(wallet);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BethereumToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://553ceef02edfa96310a6b4d21ebefb1d14ca8c7fc79123b65bfe5c92dcf047e4"}]}