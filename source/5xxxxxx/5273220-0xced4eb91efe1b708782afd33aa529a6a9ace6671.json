{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n// Whitelist smart contract\r\n// This smart contract keeps list of addresses to whitelist\r\ncontract WhiteList is Ownable {\r\n\r\n    \r\n    mapping(address => bool) public whiteList;\r\n    uint public totalWhiteListed; //white listed users number\r\n\r\n    event LogWhiteListed(address indexed user, uint whiteListedNum);\r\n    event LogWhiteListedMultiple(uint whiteListedNum);\r\n    event LogRemoveWhiteListed(address indexed user);\r\n\r\n    // @notice it will return status of white listing\r\n    // @return true if user is white listed and false if is not\r\n    function isWhiteListed(address _user) external view returns (bool) {\r\n\r\n        return whiteList[_user]; \r\n    }\r\n\r\n    // @notice it will remove whitelisted user\r\n    // @param _contributor {address} of user to unwhitelist\r\n    function removeFromWhiteList(address _user) external onlyOwner() returns (bool) {\r\n       \r\n        require(whiteList[_user] == true);\r\n        whiteList[_user] = false;\r\n        totalWhiteListed--;\r\n        LogRemoveWhiteListed(_user);\r\n        return true;\r\n    }\r\n\r\n    // @notice it will white list one member\r\n    // @param _user {address} of user to whitelist\r\n    // @return true if successful\r\n    function addToWhiteList(address _user) external onlyOwner() returns (bool) {\r\n\r\n        if (whiteList[_user] != true) {\r\n            whiteList[_user] = true;\r\n            totalWhiteListed++;\r\n            LogWhiteListed(_user, totalWhiteListed);            \r\n        }\r\n        return true;\r\n    }\r\n\r\n    // @notice it will white list multiple members\r\n    // @param _user {address[]} of users to whitelist\r\n    // @return true if successful\r\n    function addToWhiteListMultiple(address[] _users) external onlyOwner() returns (bool) {\r\n\r\n        for (uint i = 0; i < _users.length; ++i) {\r\n\r\n            if (whiteList[_users[i]] != true) {\r\n                whiteList[_users[i]] = true;\r\n                totalWhiteListed++;                          \r\n            }           \r\n        }\r\n        LogWhiteListedMultiple(totalWhiteListed); \r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"addToWhiteListMultiple\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWhiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whiteListedNum\",\"type\":\"uint256\"}],\"name\":\"LogWhiteListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"whiteListedNum\",\"type\":\"uint256\"}],\"name\":\"LogWhiteListedMultiple\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogRemoveWhiteListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WhiteList","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://518187c3722d917d6021d5bb47ade4f4d56f77fd226cacc617cae99468f0d3bc"}]}