{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n// Symbol      : VTA\r\n// Name        : Vita Token\r\n// Total supply: 10 ** 28\r\n// Decimals    : 18\r\n//import './SafeMath.sol';\r\n//import './ERC20Interface.sol';\r\n//Sobre vita reward:\r\n//El token se crea primero y luego se asigna la dirección de vita reward\r\n\r\n// ----- Safe Math\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n//------------\r\n// ----- ERC20Interface\r\ncontract ERC20Interface {\r\n    /// total amount of tokens\r\n    uint256 public totalSupply;\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n//------------\r\n\r\ncontract VitaToken is ERC20Interface, SafeMath {\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    address public manager;\r\n    address public reward_contract;\r\n    uint public crowd_start_date;\r\n    uint public crowd_end_date;\r\n    uint public first_bonus_duration;\r\n    uint public second_bonus_duration;\r\n    uint public extra_bonus_duration;\r\n    //uint public third_bonus_duration;\r\n    uint public first_bonus_amount;\r\n    uint public second_bonus_amount;\r\n    uint public third_bonus_amount;\r\n    uint public extra_bonus_amount;\r\n    uint public ETH_VTA;\r\n    uint public total_reward_amount;\r\n    uint public max_crowd_vitas;\r\n    uint public collected_crowd_vitas;\r\n    //Cantidad total recaudada en wei\r\n    uint public collected_crowd_wei;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => uint) rewards;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    function VitaToken() public {\r\n        symbol = \"VTA\";\r\n        name = \"Vita Token\";\r\n        //Razones para usar la cantidad estandar de decimales:\r\n        //Todos los envios de dinero se hacen con wei, que es 1 seguido de 18 ceros\r\n        //Seguir el estandar facilita los calculos, especialmente en el crowdsale\r\n        //\r\n        decimals = 18;\r\n        ETH_VTA = 100000;\r\n        //Weis recaudados en crowdsale\r\n        collected_crowd_wei = 0;\r\n        //3 mil millones mas 18 decimales\r\n        max_crowd_vitas = 3 * 10 ** 27;\r\n        //Vitas recaudadas en crowdsale\r\n        collected_crowd_vitas = 0;\r\n        // 10 mil millones más 18 decimales\r\n        totalSupply = 10 ** 28;\r\n        manager = msg.sender;\r\n        //Mitad para reward, mitad para el equipo\r\n        total_reward_amount = totalSupply / 2;\r\n        balances[manager] = totalSupply / 2;\r\n\r\n        crowd_start_date = now;\r\n        extra_bonus_duration = 4 days;\r\n        //El crowdsale termina 122 días de lanzar el SC (15 agosto)\r\n        crowd_end_date = crowd_start_date + extra_bonus_duration + 122 days;\r\n        //la duración del primer bono es de 47 días (15 de abril - 1 de junio)\r\n        first_bonus_duration = 47 days;\r\n        //la duración del segundo bono es de 30 días (1 de junio - 1 de julio)\r\n        second_bonus_duration = 30 days;\r\n        //la duración del tercer bono es de 45 días, no es relevante agregarla porque es el caso final (1 de julio - 15 de agosto)\r\n\r\n\r\n        extra_bonus_amount = 40000;\r\n        first_bonus_amount = 35000;\r\n        second_bonus_amount = 20000;\r\n        third_bonus_amount = 10000;\r\n    }\r\n\r\n    modifier restricted(){\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    //Decorador para métodos que solo pueden ser accedidos a través de Vita reward\r\n    modifier onlyVitaReward(){\r\n        require(msg.sender == reward_contract);\r\n        _;\r\n    }\r\n    //Transferir propiedad del contrato\r\n    function transferOwnership(address new_manager) public restricted {\r\n        emit OwnershipTransferred(manager, new_manager);\r\n        manager = new_manager;\r\n    }\r\n\r\n    //Cambiar el contrato de Vita reward\r\n    function newVitaReward(address new_reward_contract) public restricted {\r\n        uint amount_to_transfer;\r\n        if(reward_contract == address(0)){\r\n            amount_to_transfer = total_reward_amount;\r\n        }else{\r\n            amount_to_transfer = balances[reward_contract];\r\n        }\r\n        balances[new_reward_contract] = amount_to_transfer;\r\n        balances[reward_contract] = 0;\r\n        reward_contract = new_reward_contract;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function rewardsOf(address _owner) public view returns (uint balance) {\r\n        return rewards[_owner];\r\n    }\r\n\r\n    //tokens debe ser el número de tokens seguido del número de decimales\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    //tokens debe ser el número de tokens seguido del número de decimales\r\n    function reward(address patient, address company, uint tokens_patient, uint tokens_company, uint tokens_vita_team) public onlyVitaReward returns (bool success) {\r\n        balances[reward_contract] = safeSub(balances[reward_contract], (tokens_patient + tokens_company + tokens_vita_team));\r\n        //Se envian los tokens del paciente, normalmente el 90%\r\n        balances[patient] = safeAdd(balances[patient], tokens_patient);\r\n        //Se envian los tokens a la compañia que hizo la llamada a reward, normalmente 5%\r\n        balances[company] = safeAdd(balances[company], tokens_company);\r\n        //Se envian los tokens al equipo de vita, normalmente 5%\r\n        balances[manager] = safeAdd(balances[manager], tokens_vita_team);\r\n        rewards[patient] = safeAdd(rewards[patient], 1);\r\n        emit Transfer(reward_contract, patient, tokens_patient);\r\n        emit Transfer(reward_contract, company, tokens_company);\r\n        emit Transfer(reward_contract, manager, tokens_vita_team);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        require(balances[from] >= tokens && allowed[from][msg.sender] >= tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Permite determinar cuantas VTA tiene un usuario permitido gastar\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function () public payable {\r\n        require(now >= crowd_start_date && now <= crowd_end_date);\r\n        require(collected_crowd_vitas < max_crowd_vitas);\r\n        uint tokens;\r\n        if(now <= crowd_start_date + extra_bonus_duration){\r\n            tokens = msg.value * (ETH_VTA + extra_bonus_amount);\r\n        }else if(now <= crowd_start_date + extra_bonus_duration + first_bonus_duration){\r\n            tokens = msg.value * (ETH_VTA + first_bonus_amount);\r\n        }else if(now <= crowd_start_date + extra_bonus_duration + first_bonus_duration + second_bonus_duration){\r\n            tokens = msg.value * (ETH_VTA + second_bonus_amount);\r\n        }else{\r\n            tokens = msg.value * (ETH_VTA + third_bonus_amount);\r\n        }\r\n\r\n        balances[manager] = safeSub(balances[manager], tokens);\r\n        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\r\n        emit Transfer(manager, msg.sender, tokens);\r\n        collected_crowd_wei += msg.value;\r\n        collected_crowd_vitas += tokens;\r\n        manager.transfer(msg.value);\r\n    }\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extra_bonus_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"third_bonus_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"rewardsOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collected_crowd_wei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"patient\",\"type\":\"address\"},{\"name\":\"company\",\"type\":\"address\"},{\"name\":\"tokens_patient\",\"type\":\"uint256\"},{\"name\":\"tokens_company\",\"type\":\"uint256\"},{\"name\":\"tokens_vita_team\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_VTA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowd_start_date\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowd_end_date\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extra_bonus_duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max_crowd_vitas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_reward_contract\",\"type\":\"address\"}],\"name\":\"newVitaReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"first_bonus_duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_reward_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"first_bonus_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reward_contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"second_bonus_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"second_bonus_duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collected_crowd_vitas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_manager\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"VitaToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://465965529d4f35c749fc6a3c77d9b7d2ed47db77eb78f4cee99da33126c002c0"}]}