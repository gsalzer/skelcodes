{"status":"1","message":"OK","result":[{"SourceCode":"// Solydity version\r\npragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// initialization interface \r\ninterface Token {\r\n    function transfer(address _reciever, uint256 _value);\r\n    function transferOwner(address _from, address _to,  uint256 _value);\r\n}\r\n\r\n// initialization contract\r\ncontract StepCoinIco is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n  \r\n  uint public buyPrice;\r\n\r\n  Token public token;\r\n    \r\n  address multisigMain;\r\n  address multisig01;\r\n  address multisig02;\r\n  address multisig03;\r\n  address multisig04;\r\n  address multisig05;\r\n  address multisig06;\r\n\r\n  //07.01.2018\r\n  uint constant startIco = 1530403200;\r\n  \r\n  //09.01.2018\r\n  uint constant endIco = 1535760000;\r\n\r\n  modifier saleIsOn() {\r\n    require(now >= startIco && now < endIco);\r\n    _;\r\n  }\r\n\r\n  modifier limits() {\r\n    require(msg.value >= 1 finney && msg.value <= 100 ether);\r\n    _;\r\n  }\r\n\r\n  function StepCoinIco(Token _token) {\r\n        \r\n    multisigMain = 0x29172317dBB1b894f4224a5a0f6552bF56837A80;\r\n    multisig01 = 0x077Dd1D4B19805E7f3e492E6a99977C08dCb0B50;\r\n    multisig02 = 0xC91164BC5bC9d053Af3653745378439a07d42Fd0;\r\n    multisig03 = 0x36F31F604ABf3ecFdB6E34F6C0426bDFb941F1F2;\r\n    multisig04 = 0xCd4bcD9BFD29f224D1a97C0FF0f7423113d6B820;\r\n    multisig05 = 0xD3f1DA8C238ea8AAf11082FADE14e5015956865d;\r\n    multisig06 = 0xAc2524dD77E72AB3760BA8501B509cd9858F9D67;\r\n\r\n    token = _token;\r\n\r\n    buyPrice = 1000000000000;\r\n  }\r\n\r\n\r\n  function () payable {\r\n    _buy(msg.sender, msg.value);\r\n  }\r\n\r\n  function buy() payable returns (uint) {\r\n    uint tokens = _buy(msg.sender, msg.value);\r\n    return tokens;\r\n  }\r\n\r\n  function _buy(address _sender, uint256 _amount) saleIsOn limits internal returns (uint) {\r\n\r\n    uint _tokensAmountMultisigMain = msg.value.div(2); //50%\r\n    uint _tokensAmountMultisig01 = msg.value.div(10);  //10%\r\n    uint _tokensAmountMultisig02 = msg.value.div(10);  //10%\r\n    uint _tokensAmountMultisig03 = msg.value.div(10);  //10%\r\n    uint _tokensAmountMultisig04 = msg.value.div(10);  //10%\r\n    uint _tokensAmountMultisig05 = msg.value.div(20);  //5%\r\n    uint _tokensAmountMultisig06 = msg.value.div(20);  //5%\r\n\r\n    multisigMain.transfer(_tokensAmountMultisigMain);\r\n    multisig01.transfer(_tokensAmountMultisig01);\r\n    multisig02.transfer(_tokensAmountMultisig02);\r\n    multisig03.transfer(_tokensAmountMultisig03);\r\n    multisig04.transfer(_tokensAmountMultisig04);\r\n    multisig05.transfer(_tokensAmountMultisig05);\r\n    multisig06.transfer(_tokensAmountMultisig06);\r\n\r\n    uint tokens = _amount.div(buyPrice);\r\n    token.transfer(_sender, tokens);\r\n    return tokens;\r\n  }\r\n    \r\n  function sendTokens(address _address, uint _amount) onlyOwner external {\r\n    require(_address != 0x0);\r\n    token.transferOwner(address(this), _address, _amount);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"StepCoinIco","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f12e158c8c225035520a5bf44abf90352e4cc074","Library":"","SwarmSource":"bzzr://f76bb585e6f8d1c843134fbe5710418fa2630099f490f3040b0f6b4539111543"}]}