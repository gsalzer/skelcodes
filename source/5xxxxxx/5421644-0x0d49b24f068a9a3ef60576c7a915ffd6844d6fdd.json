{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\n address public owner;\r\n\r\n\r\n event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n /**\r\n  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n  * account.\r\n  */\r\n function Ownable() public {\r\n   owner = msg.sender;\r\n }\r\n\r\n /**\r\n  * @dev Throws if called by any account other than the owner.\r\n  */\r\n modifier onlyOwner() {\r\n   require(msg.sender == owner);\r\n   _;\r\n }\r\n\r\n /**\r\n  * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n  * @param newOwner The address to transfer ownership to.\r\n  */\r\n function transferOwnership(address newOwner) public onlyOwner {\r\n   require(newOwner != address(0));\r\n   emit OwnershipTransferred(owner, newOwner);\r\n   owner = newOwner;\r\n }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/// @title Token Loot Contract\r\n/// @author Julia Altenried, Yuriy Kashnikov\r\n\r\ncontract TokenLoot is Ownable {\r\n\r\n  // FIELDS\r\n  /* signer address, verified in 'receiveTokenLoot' method, can be set by owner only */\r\n  address neverdieSigner;\r\n  /* SKL token */\r\n  ERC20 sklToken;\r\n  /* XP token */\r\n  ERC20 xpToken;\r\n  /* Gold token */\r\n  ERC20 goldToken;\r\n  /* Silver token */\r\n  ERC20 silverToken;\r\n  /* Scale token */\r\n  ERC20 scaleToken;\r\n  /* Nonces */\r\n  mapping (address => uint) public nonces;\r\n\r\n\r\n  // EVENTS\r\n  event ReceiveLoot(address indexed sender,\r\n                    uint _amountSKL,\r\n                    uint _amountXP,\r\n                    uint _amountGold,\r\n                    uint _amountSilver,\r\n                    uint _amountScale,\r\n                    uint _nonce);\r\n \r\n\r\n  // SETTERS\r\n  function setSKLContractAddress(address _to) public onlyOwner {\r\n    sklToken = ERC20(_to);\r\n  }\r\n\r\n  function setXPContractAddress(address _to) public onlyOwner {\r\n    xpToken = ERC20(_to);\r\n  }\r\n\r\n  function setGoldContractAddress(address _to) public onlyOwner {\r\n    goldToken = ERC20(_to);\r\n  }\r\n\r\n  function setSilverContractAddress(address _to) public onlyOwner {\r\n    silverToken = ERC20(_to);\r\n  }\r\n\r\n  function setScaleContractAddress(address _to) public onlyOwner {\r\n    scaleToken = ERC20(_to);\r\n  }\r\n\r\n  function setNeverdieSignerAddress(address _to) public onlyOwner {\r\n    neverdieSigner = _to;\r\n  }\r\n\r\n  /// @dev handy constructor to initialize TokenLoot with a set of proper parameters\r\n  /// @param _xpContractAddress XP token address\r\n  /// @param _sklContractAddress SKL token address\r\n  /// @param _goldContractAddress Gold token address\r\n  /// @param _silverContractAddress Silver token address\r\n  /// @param _scaleContractAddress Scale token address\r\n  /// @param _signer signer address, verified further in swap functions\r\n  function TokenLoot(address _xpContractAddress,\r\n                     address _sklContractAddress,\r\n                     address _goldContractAddress,\r\n                     address _silverContractAddress,\r\n                     address _scaleContractAddress,\r\n                     address _signer) {\r\n    xpToken = ERC20(_xpContractAddress);\r\n    sklToken = ERC20(_sklContractAddress);\r\n    goldToken = ERC20(_goldContractAddress);\r\n    silverToken = ERC20(_silverContractAddress);\r\n    scaleToken = ERC20(_scaleContractAddress);\r\n    neverdieSigner = _signer;\r\n  }\r\n\r\n  /// @dev withdraw loot tokens\r\n  /// @param _amountSKL the amount of SKL tokens to withdraw\r\n  /// @param _amountXP them amount of XP tokens to withdraw\r\n  /// @param _amountGold them amount of Gold tokens to withdraw\r\n  /// @param _amountSilver them amount of Silver tokens to withdraw\r\n  /// @param _amountScale them amount of Scale tokens to withdraw\r\n  /// @param _nonce incremental index of withdrawal\r\n  /// @param _v ECDCA signature\r\n  /// @param _r ECDSA signature\r\n  /// @param _s ECDSA signature\r\n  function receiveTokenLoot(uint _amountSKL, \r\n                            uint _amountXP, \r\n                            uint _amountGold, \r\n                            uint _amountSilver,\r\n                            uint _amountScale,\r\n                            uint _nonce, \r\n                            uint8 _v, \r\n                            bytes32 _r, \r\n                            bytes32 _s) {\r\n\r\n    // reject if the new nonce is lower or equal to the current one\r\n    require(_nonce > nonces[msg.sender]);\r\n    nonces[msg.sender] = _nonce;\r\n\r\n    // verify signature\r\n    address signer = ecrecover(keccak256(msg.sender, \r\n                                         _amountSKL, \r\n                                         _amountXP, \r\n                                         _amountGold,\r\n                                         _amountSilver,\r\n                                         _amountScale,\r\n                                         _nonce), _v, _r, _s);\r\n    require(signer == neverdieSigner);\r\n\r\n    // transer tokens\r\n    if (_amountSKL > 0) assert(sklToken.transfer(msg.sender, _amountSKL));\r\n    if (_amountXP > 0) assert(xpToken.transfer(msg.sender, _amountXP));\r\n    if (_amountGold > 0) assert(goldToken.transfer(msg.sender, _amountGold));\r\n    if (_amountSilver > 0) assert(silverToken.transfer(msg.sender, _amountSilver));\r\n    if (_amountScale > 0) assert(scaleToken.transfer(msg.sender, _amountScale));\r\n\r\n    // emit event\r\n    ReceiveLoot(msg.sender, _amountSKL, _amountXP, _amountGold, _amountSilver, _amountScale, _nonce);\r\n  }\r\n\r\n  /// @dev fallback function to reject any ether coming directly to the contract\r\n  function () payable public { \r\n      revert(); \r\n  }\r\n\r\n  /// @dev withdraw all SKL and XP tokens\r\n  function withdraw() public onlyOwner {\r\n    uint256 allSKL = sklToken.balanceOf(this);\r\n    uint256 allXP = xpToken.balanceOf(this);\r\n    uint256 allGold = goldToken.balanceOf(this);\r\n    uint256 allSilver = silverToken.balanceOf(this);\r\n    uint256 allScale = scaleToken.balanceOf(this);\r\n    if (allSKL > 0) sklToken.transfer(msg.sender, allSKL);\r\n    if (allXP > 0) xpToken.transfer(msg.sender, allXP);\r\n    if (allGold > 0) goldToken.transfer(msg.sender, allGold);\r\n    if (allSilver > 0) silverToken.transfer(msg.sender, allSilver);\r\n    if (allScale > 0) scaleToken.transfer(msg.sender, allScale);\r\n  }\r\n\r\n  /// @dev kill contract, but before transfer all SKL and XP tokens \r\n  function kill() onlyOwner public {\r\n    withdraw();\r\n    selfdestruct(owner);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setNeverdieSignerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setGoldContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountSKL\",\"type\":\"uint256\"},{\"name\":\"_amountXP\",\"type\":\"uint256\"},{\"name\":\"_amountGold\",\"type\":\"uint256\"},{\"name\":\"_amountSilver\",\"type\":\"uint256\"},{\"name\":\"_amountScale\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"receiveTokenLoot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setScaleContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setXPContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setSilverContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setSKLContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_xpContractAddress\",\"type\":\"address\"},{\"name\":\"_sklContractAddress\",\"type\":\"address\"},{\"name\":\"_goldContractAddress\",\"type\":\"address\"},{\"name\":\"_silverContractAddress\",\"type\":\"address\"},{\"name\":\"_scaleContractAddress\",\"type\":\"address\"},{\"name\":\"_signer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountSKL\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amountXP\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amountGold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amountSilver\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amountScale\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"ReceiveLoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenLoot","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d28525ad63f337c86843d720dae921228e44f0ac000000000000000000000000a7bd9d58d22d5e35ec4a08083141e0340ea2ca93000000000000000000000000b6f09f221d7a93390235d427c72fffc4f3856a9f0000000000000000000000002498aa67cd08ac321085734a8570137ec2001731000000000000000000000000106734655a3c75b92c154a7f827c4ab7d91118540000000000000000000000002831de120827570cf8c7cfcb9b788c222e307de4","Library":"","SwarmSource":"bzzr://65709c73b7639d270c0fa474ed497ec9fe7bad89596ca718595d1781595386b8"}]}