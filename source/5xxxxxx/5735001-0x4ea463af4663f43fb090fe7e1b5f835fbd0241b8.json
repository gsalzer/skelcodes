{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/cupExchange/CupExchange.sol\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) external returns(bool);\r\n    function transferFrom(address from, address to, uint amount) external returns(bool);\r\n    function allowance(address owner, address spender) external returns(uint256);\r\n    function balanceOf(address owner) external returns(uint256);\r\n}\r\n\r\ncontract CupExchange {\r\n    using SafeMath for uint256;\r\n    using SafeMath for int256;\r\n\r\n    address public owner;\r\n    token internal teamCup;\r\n    token internal cup;\r\n    uint256 public exchangePrice; // with decimals\r\n    bool public halting = true;\r\n\r\n    event Halted(bool halting);\r\n    event Exchange(address user, uint256 distributedAmount, uint256 collectedAmount);\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Setup the contract owner\r\n     */\r\n    constructor(address cupToken, address teamCupToken) public {\r\n        owner = msg.sender;\r\n        teamCup = token(teamCupToken);\r\n        cup = token(cupToken);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * User exchange for team cup\r\n     */\r\n    function exchange() public {\r\n        require(msg.sender != address(0x0));\r\n        require(msg.sender != address(this));\r\n        require(!halting);\r\n\r\n        // collect cup token\r\n        uint256 allowance = cup.allowance(msg.sender, this);\r\n        require(allowance > 0);\r\n        require(cup.transferFrom(msg.sender, this, allowance));\r\n\r\n        // transfer team cup token\r\n        uint256 teamCupBalance = teamCup.balanceOf(address(this));\r\n        uint256 teamCupAmount = allowance * exchangePrice;\r\n        require(teamCupAmount <= teamCupBalance);\r\n        require(teamCup.transfer(msg.sender, teamCupAmount));\r\n\r\n        emit Exchange(msg.sender, teamCupAmount, allowance);\r\n    }\r\n\r\n    /**\r\n     * Withdraw the funds\r\n     */\r\n    function safeWithdrawal(address safeAddress) public onlyOwner {\r\n        require(safeAddress != address(0x0));\r\n        require(safeAddress != address(this));\r\n\r\n        uint256 balance = teamCup.balanceOf(address(this));\r\n        teamCup.transfer(safeAddress, balance);\r\n    }\r\n\r\n    /**\r\n    * Set finalPriceForThisCoin\r\n    */\r\n    function setExchangePrice(int256 price) public onlyOwner {\r\n        require(price > 0);\r\n        exchangePrice = uint256(price);\r\n    }\r\n\r\n    function halt() public onlyOwner {\r\n        halting = true;\r\n        emit Halted(halting);\r\n    }\r\n\r\n    function unhalt() public onlyOwner {\r\n        halting = false;\r\n        emit Halted(halting);\r\n    }\r\n}\r\n\r\n// File: contracts/cupExchange/cupExchangeImpl/GECupExchange.sol\r\n\r\ncontract GECupExchange is CupExchange {\r\n    address public cup = 0x0750167667190A7Cd06a1e2dBDd4006eD5b522Cc;\r\n    address public teamCup = 0x81Bf4f53A091086A7F92134801121066018e28bd;\r\n    constructor() CupExchange(cup, teamCup) public {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"safeAddress\",\"type\":\"address\"}],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"setExchangePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamCup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"halting\",\"type\":\"bool\"}],\"name\":\"Halted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"distributedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"collectedAmount\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"}]","ContractName":"GECupExchange","CompilerVersion":"v0.4.25-nightly.2018.6.8+commit.81c5a6e4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b57b8eca5e877c3d8d699331005eefcc96afc2a202629b8986749e655efa9fb7"}]}