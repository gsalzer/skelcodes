{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n // ERC Token Standard #20 Interface\r\n // https://github.com/ethereum/EIPs/issues/20\r\n\r\n contract ERC20Interface {\r\n\t/// @notice Get the total token supply\r\n\tfunction totalSupply() constant returns (uint256 totalAmount);\r\n\r\n\t/// @notice  Get the account balance of another account with address _owner\r\n\tfunction balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n\t/// @notice  Send _value amount of tokens to address _to\r\n\tfunction transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n\t/// @notice  Send _value amount of tokens from address _from to address _to\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n\t/// @notice  Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n\t/// @notice  If this function is called again it overwrites the current allowance with _value.\r\n\t/// @notice  this function is required for some DEX functionality\r\n\tfunction approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n\t/// @notice  Returns the amount which _spender is still allowed to withdraw from _owner\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n\t/// @notice  Triggered when tokens are transferred.\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n\t/// @notice  Triggered whenever approve(address _spender, uint256 _value) is called.\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n }\r\n \r\n contract owned{\r\n\taddress public owner;\r\n\taddress constant supervisor  = 0x2d6808bC989CbEB46cc6dd75a6C90deA50e3e504;\r\n\t\r\n\tfunction owned(){\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t/// @notice Functions with this modifier can only be executed by the owner\r\n\tmodifier isOwner {\r\n\t\tassert(msg.sender == owner || msg.sender == supervisor);\r\n\t\t_;\r\n\t}\r\n\t\r\n\t/// @notice Transfer the ownership of this contract\r\n\tfunction transferOwnership(address newOwner);\r\n\t\r\n\tevent ownerChanged(address whoTransferredOwnership, address formerOwner, address newOwner);\r\n }\r\n\r\ncontract METADOLLAR is ERC20Interface, owned{\r\n\r\n\tstring public constant name = \"METADOLLAR\";\r\n\tstring public constant symbol = \"DOL\";\r\n\tuint public constant decimals = 18;\r\n\tuint256 public _totalSupply = 1000000000000000000000000000000;\r\n\tuint256 public icoMin = 1000000000000000;\t\t\t\t\t\r\n\tuint256 public preIcoLimit = 1000000000000000000;\t\t\t\r\n\tuint256 public countHolders = 0;\t\t\t\t// count how many unique holders have tokens\r\n\tuint256 public amountOfInvestments = 0;\t// amount of collected wei\r\n\t\r\n\tuint256 preICOprice;\t\t\t\t\t\t\t\t\r\n\tuint256 ICOprice;\t\t\t\t\t\t\t\t\t\t\r\n\tuint256 public currentTokenPrice;\t\t\t\t\r\n\tuint256 public sellPrice;      \r\n\tuint256 public mtdPreAmount;\r\n\tuint256 public ethPreAmount;\r\n\tuint256 public mtdAmount;\r\n\tuint256 public ethAmount;\r\n\t\r\n\tbool public preIcoIsRunning;\r\n\tbool public minimalGoalReached;\r\n\tbool public icoIsClosed;\r\n\t\r\n\r\n\t//Balances for each account\r\n\tmapping (address => uint256) public tokenBalanceOf;\r\n\r\n\t// Owner of account approves the transfer of an amount to another account\r\n\tmapping(address => mapping (address => uint256)) allowed;\r\n\t\r\n\t//list with information about frozen accounts\r\n\tmapping(address => bool) frozenAccount;\r\n\t\r\n\t//this generate a public event on a blockchain that will notify clients\r\n\tevent FrozenFunds(address initiator, address account, string status);\r\n\t\r\n\t//this generate a public event on a blockchain that will notify clients\r\n\tevent BonusChanged(uint8 bonusOld, uint8 bonusNew);\r\n\t\r\n\t//this generate a public event on a blockchain that will notify clients\r\n\tevent minGoalReached(uint256 minIcoAmount, string notice);\r\n\t\r\n\t//this generate a public event on a blockchain that will notify clients\r\n\tevent preIcoEnded(uint256 preIcoAmount, string notice);\r\n\t\r\n\t//this generate a public event on a blockchain that will notify clients\r\n\tevent priceUpdated(uint256 oldPrice, uint256 newPrice, string notice);\r\n\t\r\n\t//this generate a public event on a blockchain that will notify clients\r\n\tevent withdrawed(address _to, uint256 summe, string notice);\r\n\t\r\n\t//this generate a public event on a blockchain that will notify clients\r\n\tevent deposited(address _from, uint256 summe, string notice);\r\n\t\r\n\t//this generate a public event on a blockchain that will notify clients\r\n\tevent orderToTransfer(address initiator, address _from, address _to, uint256 summe, string notice);\r\n\t\r\n\t//this generate a public event on a blockchain that will notify clients\r\n\tevent tokenCreated(address _creator, uint256 summe, string notice);\r\n\t\r\n\t//this generate a public event on a blockchain that will notify clients\r\n\tevent tokenDestroyed(address _destroyer, uint256 summe, string notice);\r\n\t\r\n\t//this generate a public event on a blockchain that will notify clients\r\n\tevent icoStatusUpdated(address _initiator, string status);\r\n\r\n\t/// @notice Constructor of the contract\r\n\tfunction STARTMETADOLLAR() {\r\n\t    mtdAmount = 1000000000000000000;\r\n\t    ethAmount = 1000000000000000;\r\n\t    mtdPreAmount = 1000000000000000000;\r\n\t    ethPreAmount = 1000000000000000;\r\n\t\tpreIcoIsRunning = true;\r\n\t\tminimalGoalReached = false;\r\n\t\ticoIsClosed = false;\r\n\t\ttokenBalanceOf[this] += _totalSupply;\r\n\t\tallowed[this][owner] = _totalSupply;\r\n\t\tallowed[this][supervisor] = _totalSupply;\r\n\t\tcurrentTokenPrice = mtdAmount * ethAmount;\t// initial price of 1 Token\r\n\t\tpreICOprice = mtdPreAmount * ethPreAmount; \t\t\t\r\n\t\tICOprice = mtdAmount * ethAmount;\t\t\t\r\n\t\tsellPrice = 900000000000000;\r\n\t\tupdatePrices();\r\n\t}\r\n\r\n\tfunction () payable {\r\n\t\trequire(!frozenAccount[msg.sender]);\r\n\t\tif(msg.value > 0 && !frozenAccount[msg.sender]) {\r\n\t\t\tbuyToken();\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Returns a whole amount of tokens\r\n\tfunction totalSupply() constant returns (uint256 totalAmount) {\r\n\t\ttotalAmount = _totalSupply;\r\n\t}\r\n\r\n\t/// @notice What is the balance of a particular account?\r\n\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\r\n\t\treturn tokenBalanceOf[_owner];\r\n\t}\r\n\r\n\t/// @notice Shows how much tokens _spender can spend from _owner address\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\t\r\n\t/// @notice Calculates amount of weis needed to buy more than one token\r\n\t/// @param howManyTokenToBuy - Amount of tokens to calculate\r\n\tfunction calculateTheEndPrice(uint256 howManyTokenToBuy) constant returns (uint256 summarizedPriceInWeis) {\r\n\t\tif(howManyTokenToBuy > 0) {\r\n\t\t\tsummarizedPriceInWeis = howManyTokenToBuy * currentTokenPrice;\r\n\t\t}else {\r\n\t\t\tsummarizedPriceInWeis = 0;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/// @notice Shows if account is frozen\r\n\t/// @param account - Accountaddress to check\r\n\tfunction checkFrozenAccounts(address account) constant returns (bool accountIsFrozen) {\r\n\t\taccountIsFrozen = frozenAccount[account];\r\n\t}\r\n\r\n\t/// @notice Buy tokens from contract by sending ether\r\n\tfunction buy() payable public {\r\n\t\trequire(!frozenAccount[msg.sender]);\r\n\t\trequire(msg.value > 0);\r\n\t\tbuyToken();\r\n\t}\r\n\r\n\t/// @notice Sell tokens and receive ether from contract\r\n\tfunction sell(uint256 amount) {\r\n\t\trequire(!frozenAccount[msg.sender]);\r\n\t\trequire(tokenBalanceOf[msg.sender] >= amount);         \t// checks if the sender has enough to sell\r\n\t\trequire(amount > 0);\r\n\t\trequire(sellPrice > 0);\r\n\t\t_transfer(msg.sender, this, amount);\r\n\t\tuint256 revenue = amount * sellPrice;\r\n\t\trequire(this.balance >= revenue);\r\n\t\tmsg.sender.transfer(revenue);                \t\t// sends ether to the seller: it's important to do this last to prevent recursion attacks\r\n\t}\r\n\t\r\n\t/// @notice Allow user to sell maximum possible amount of tokens, depend on ether amount on contract\r\n\tfunction sellMaximumPossibleAmountOfTokens() {\r\n\t\trequire(!frozenAccount[msg.sender]);\r\n\t\trequire(tokenBalanceOf[msg.sender] > 0);\r\n\t\trequire(this.balance > sellPrice);\r\n\t\tif(tokenBalanceOf[msg.sender] * sellPrice <= this.balance) {\r\n\t\t\tsell(tokenBalanceOf[msg.sender]);\r\n\t\t}else {\r\n\t\t\tsell(this.balance / sellPrice);\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Transfer amount of tokens from own wallet to someone else\r\n\tfunction transfer(address _to, uint256 _value) returns (bool success) {\r\n\t\tassert(msg.sender != address(0));\r\n\t\tassert(_to != address(0));\r\n\t\trequire(!frozenAccount[msg.sender]);\r\n\t\trequire(!frozenAccount[_to]);\r\n\t\trequire(tokenBalanceOf[msg.sender] >= _value);\r\n\t\trequire(tokenBalanceOf[msg.sender] - _value < tokenBalanceOf[msg.sender]);\r\n\t\trequire(tokenBalanceOf[_to] + _value > tokenBalanceOf[_to]);\r\n\t\trequire(_value > 0);\r\n\t\t_transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// @notice  Send _value amount of tokens from address _from to address _to\r\n\t/// @notice  The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n\t/// @notice  tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n\t/// @notice  fees in sub-currencies; the command should fail unless the _from account has\r\n\t/// @notice  deliberately authorized the sender of the message via some mechanism; we propose\r\n\t/// @notice  these standardized APIs for approval:\r\n\tfunction transferFrom(address _from,\taddress _to,\tuint256 _value) returns (bool success) {\r\n\t\tassert(msg.sender != address(0));\r\n\t\tassert(_from != address(0));\r\n\t\tassert(_to != address(0));\r\n\t\trequire(!frozenAccount[msg.sender]);\r\n\t\trequire(!frozenAccount[_from]);\r\n\t\trequire(!frozenAccount[_to]);\r\n\t\trequire(tokenBalanceOf[_from] >= _value);\r\n\t\trequire(allowed[_from][msg.sender] >= _value);\r\n\t\trequire(tokenBalanceOf[_from] - _value < tokenBalanceOf[_from]);\r\n\t\trequire(tokenBalanceOf[_to] + _value > tokenBalanceOf[_to]);\r\n\t\trequire(_value > 0);\r\n\t\torderToTransfer(msg.sender, _from, _to, _value, \"Order to transfer tokens from allowed account\");\r\n\t\t_transfer(_from, _to, _value);\r\n\t\tallowed[_from][msg.sender] -= _value;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// @notice Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n\t/// @notice If this function is called again it overwrites the current allowance with _value.\r\n\tfunction approve(address _spender, uint256 _value) returns (bool success) {\r\n\t\trequire(!frozenAccount[msg.sender]);\r\n\t\tassert(_spender != address(0));\r\n\t\trequire(_value >= 0);\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// @notice Check if minimal goal of ICO is reached\r\n\tfunction checkMinimalGoal() internal {\r\n\t\tif(tokenBalanceOf[this] <= _totalSupply - icoMin) {\r\n\t\t\tminimalGoalReached = true;\r\n\t\t\tminGoalReached(icoMin, \"Minimal goal of ICO is reached!\");\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Check if preICO is ended\r\n\tfunction checkPreIcoStatus() internal {\r\n\t\tif(tokenBalanceOf[this] <= _totalSupply - preIcoLimit) {\r\n\t\t\tpreIcoIsRunning = false;\r\n\t\t\tpreIcoEnded(preIcoLimit, \"Token amount for preICO sold!\");\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Processing each buying\r\n\tfunction buyToken() internal {\r\n\t\tuint256 value = msg.value;\r\n\t\taddress sender = msg.sender;\r\n\t\trequire(!icoIsClosed);\r\n\t\trequire(!frozenAccount[sender]);\r\n\t\trequire(value > 0);\r\n\t\trequire(currentTokenPrice > 0);\r\n\t\tuint256 amount = value / currentTokenPrice;\t\t\t// calculates amount of tokens\r\n\t\tuint256 moneyBack = value - (amount * currentTokenPrice);\r\n\t\trequire(tokenBalanceOf[this] >= amount);              \t\t// checks if contract has enough to sell\r\n\t\tamountOfInvestments = amountOfInvestments + (value - moneyBack);\r\n\t\tupdatePrices();\r\n\t\t_transfer(this, sender, amount);\r\n\t\tif(!minimalGoalReached) {\r\n\t\t\tcheckMinimalGoal();\r\n\t\t}\r\n\t\tif(moneyBack > 0) {\r\n\t\t\tsender.transfer(moneyBack);\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Internal transfer, can only be called by this contract\r\n\tfunction _transfer(address _from, address _to, uint256 _value) internal {\r\n\t\tassert(_from != address(0));\r\n\t\tassert(_to != address(0));\r\n\t\trequire(_value > 0);\r\n\t\trequire(tokenBalanceOf[_from] >= _value);\r\n\t\trequire(tokenBalanceOf[_to] + _value > tokenBalanceOf[_to]);\r\n\t\trequire(!frozenAccount[_from]);\r\n\t\trequire(!frozenAccount[_to]);\r\n\t\tif(tokenBalanceOf[_to] == 0){\r\n\t\t\tcountHolders += 1;\r\n\t\t}\r\n\t\ttokenBalanceOf[_from] -= _value;\r\n\t\tif(tokenBalanceOf[_from] == 0){\r\n\t\t\tcountHolders -= 1;\r\n\t\t}\r\n\t\ttokenBalanceOf[_to] += _value;\r\n\t\tallowed[this][owner] = tokenBalanceOf[this];\r\n\t\tallowed[this][supervisor] = tokenBalanceOf[this];\r\n\t\tTransfer(_from, _to, _value);\r\n\t}\r\n\r\n\t/// @notice Set current ICO prices in wei for one token\r\n\tfunction updatePrices() internal {\r\n\t\tuint256 oldPrice = currentTokenPrice;\r\n\t\tif(preIcoIsRunning) {\r\n\t\t\tcheckPreIcoStatus();\r\n\t\t}\r\n\t\tif(preIcoIsRunning) {\r\n\t\t\tcurrentTokenPrice = preICOprice;\r\n\t\t}else{\r\n\t\t\tcurrentTokenPrice = ICOprice;\r\n\t\t}\r\n\t\t\r\n\t\tif(oldPrice != currentTokenPrice) {\r\n\t\t\tpriceUpdated(oldPrice, currentTokenPrice, \"Token price updated!\");\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Set current preICO price in wei for one token\r\n\t/// @param priceForPreIcoInWei - is the amount in wei for one token\r\n\tfunction setPreICOPrice(uint256 priceForPreIcoInWei) isOwner {\r\n\t\trequire(priceForPreIcoInWei > 0);\r\n\t\trequire(preICOprice != priceForPreIcoInWei);\r\n\t\tpreICOprice = priceForPreIcoInWei;\r\n\t\tupdatePrices();\r\n\t}\r\n\r\n\t/// @notice Set current ICO price in wei for one token\r\n\t/// @param priceForIcoInWei - is the amount in wei for one token\r\n\tfunction setICOPrice(uint256 priceForIcoInWei) isOwner {\r\n\t\trequire(priceForIcoInWei > 0);\r\n\t\trequire(ICOprice != priceForIcoInWei);\r\n\t\tICOprice = priceForIcoInWei;\r\n\t\tupdatePrices();\r\n\t}\r\n\r\n\t/// @notice Set both prices at the same time\r\n\t/// @param priceForPreIcoInWei - Price of the token in pre ICO\r\n\t/// @param priceForIcoInWei - Price of the token in ICO\r\n\tfunction setPrices(uint256 priceForPreIcoInWei, uint256 priceForIcoInWei) isOwner {\r\n\t\trequire(priceForPreIcoInWei > 0);\r\n\t\trequire(priceForIcoInWei > 0);\r\n\t\tpreICOprice = priceForPreIcoInWei;\r\n\t\tICOprice = priceForIcoInWei;\r\n\t\tupdatePrices();\r\n\t}\r\n\t\r\n\t/// @notice Set current mtdAmount price in wei for one token\r\n\t/// @param mtdAmountInWei - is the amount in wei for one token\r\n\tfunction setMtdAmount(uint256 mtdAmountInWei) isOwner {\r\n\t\trequire(mtdAmountInWei > 0);\r\n\t\trequire(mtdAmount != mtdAmountInWei);\r\n\t\tmtdAmount = mtdAmountInWei;\r\n\t\tupdatePrices();\r\n\t}\r\n\r\n\t/// @notice Set current ethAmount price in wei for one token\r\n\t/// @param ethAmountInWei - is the amount in wei for one token\r\n\tfunction setEthAmount(uint256 ethAmountInWei) isOwner {\r\n\t\trequire(ethAmountInWei > 0);\r\n\t\trequire(ethAmount != ethAmountInWei);\r\n\t\tethAmount = ethAmountInWei;\r\n\t\tupdatePrices();\r\n\t}\r\n\r\n\t/// @notice Set both ethAmount and mtdAmount at the same time\r\n\t/// @param mtdAmountInWei - is the amount in wei for one token\r\n\t/// @param ethAmountInWei - is the amount in wei for one token\r\n\tfunction setAmounts(uint256 mtdAmountInWei, uint256 ethAmountInWei) isOwner {\r\n\t\trequire(mtdAmountInWei > 0);\r\n\t\trequire(ethAmountInWei > 0);\r\n\t\tmtdAmount = mtdAmountInWei;\r\n\t\tethAmount = ethAmountInWei;\r\n\t\tupdatePrices();\r\n\t}\r\n\t\r\n\t/// @notice Set current mtdPreAmount price in wei for one token\r\n\t/// @param mtdPreAmountInWei - is the amount in wei for one token\r\n\tfunction setMtdPreAmount(uint256 mtdPreAmountInWei) isOwner {\r\n\t\trequire(mtdPreAmountInWei > 0);\r\n\t\trequire(mtdPreAmount != mtdPreAmountInWei);\r\n\t\tmtdPreAmount = mtdPreAmountInWei;\r\n\t\tupdatePrices();\r\n\t}\r\n\r\n\t/// @notice Set current ethPreAmount price in wei for one token\r\n\t/// @param ethPreAmountInWei - is the amount in wei for one token\r\n\tfunction setEthPreAmount(uint256 ethPreAmountInWei) isOwner {\r\n\t\trequire(ethPreAmountInWei > 0);\r\n\t\trequire(ethPreAmount != ethPreAmountInWei);\r\n\t\tethPreAmount = ethPreAmountInWei;\r\n\t\tupdatePrices();\r\n\t}\r\n\r\n\t/// @notice Set both ethPreAmount and mtdPreAmount at the same time\r\n\t/// @param mtdPreAmountInWei - is the amount in wei for one token\r\n\t/// @param ethPreAmountInWei - is the amount in wei for one token\r\n\tfunction setPreAmounts(uint256 mtdPreAmountInWei, uint256 ethPreAmountInWei) isOwner {\r\n\t\trequire(mtdPreAmountInWei > 0);\r\n\t\trequire(ethPreAmountInWei > 0);\r\n\t\tmtdPreAmount = mtdPreAmountInWei;\r\n\t\tethPreAmount = ethPreAmountInWei;\r\n\t\tupdatePrices();\r\n\t}\r\n\r\n\t/// @notice Set the current sell price in wei for one token\r\n\t/// @param priceInWei - is the amount in wei for one token\r\n\tfunction setSellPrice(uint256 priceInWei) isOwner {\r\n\t\trequire(priceInWei >= 0);\r\n\t\tsellPrice = priceInWei;\r\n\t}\r\n\r\n\t/// @notice 'freeze? Prevent | Allow' 'account' from sending and receiving tokens\r\n\t/// @param account - address to be frozen\r\n\t/// @param freeze - select is the account frozen or not\r\n\tfunction freezeAccount(address account, bool freeze) isOwner {\r\n\t\trequire(account != owner);\r\n\t\trequire(account != supervisor);\r\n\t\tfrozenAccount[account] = freeze;\r\n\t\tif(freeze) {\r\n\t\t\tFrozenFunds(msg.sender, account, \"Account set frozen!\");\r\n\t\t}else {\r\n\t\t\tFrozenFunds(msg.sender, account, \"Account set free for use!\");\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Create an amount of token\r\n\t/// @param amount - token to create\r\n\tfunction mintToken(uint256 amount) isOwner {\r\n\t\trequire(amount > 0);\r\n\t\trequire(tokenBalanceOf[this] <= icoMin);\t// owner can create token only if the initial amount is strongly not enough to supply and demand ICO\r\n\t\trequire(_totalSupply + amount > _totalSupply);\r\n\t\trequire(tokenBalanceOf[this] + amount > tokenBalanceOf[this]);\r\n\t\t_totalSupply += amount;\r\n\t\ttokenBalanceOf[this] += amount;\r\n\t\tallowed[this][owner] = tokenBalanceOf[this];\r\n\t\tallowed[this][supervisor] = tokenBalanceOf[this];\r\n\t\ttokenCreated(msg.sender, amount, \"Additional tokens created!\");\r\n\t}\r\n\r\n\t/// @notice Destroy an amount of token\r\n\t/// @param amount - token to destroy\r\n\tfunction destroyToken(uint256 amount) isOwner {\r\n\t\trequire(amount > 0);\r\n\t\trequire(tokenBalanceOf[this] >= amount);\r\n\t\trequire(_totalSupply >= amount);\r\n\t\trequire(tokenBalanceOf[this] - amount >= 0);\r\n\t\trequire(_totalSupply - amount >= 0);\r\n\t\ttokenBalanceOf[this] -= amount;\r\n\t\t_totalSupply -= amount;\r\n\t\tallowed[this][owner] = tokenBalanceOf[this];\r\n\t\tallowed[this][supervisor] = tokenBalanceOf[this];\r\n\t\ttokenDestroyed(msg.sender, amount, \"An amount of tokens destroyed!\");\r\n\t}\r\n\r\n\t/// @notice Transfer the ownership to another account\r\n\t/// @param newOwner - address who get the ownership\r\n\tfunction transferOwnership(address newOwner) isOwner {\r\n\t\tassert(newOwner != address(0));\r\n\t\taddress oldOwner = owner;\r\n\t\towner = newOwner;\r\n\t\townerChanged(msg.sender, oldOwner, newOwner);\r\n\t\tallowed[this][oldOwner] = 0;\r\n\t\tallowed[this][newOwner] = tokenBalanceOf[this];\r\n\t}\r\n\r\n\t/// @notice Transfer ether from smartcontract to owner\r\n\tfunction collect() isOwner {\r\n        require(this.balance > 0);\r\n\t\twithdraw(this.balance);\r\n    }\r\n\r\n\t/// @notice Withdraw an amount of ether\r\n\t/// @param summeInWei - amout to withdraw\r\n\tfunction withdraw(uint256 summeInWei) isOwner {\r\n\t\tuint256 contractbalance = this.balance;\r\n\t\taddress sender = msg.sender;\r\n\t\trequire(contractbalance >= summeInWei);\r\n\t\twithdrawed(sender, summeInWei, \"wei withdrawed\");\r\n        sender.transfer(summeInWei);\r\n\t}\r\n\r\n\t/// @notice Deposit an amount of ether\r\n\tfunction deposit() payable isOwner {\r\n\t\trequire(msg.value > 0);\r\n\t\trequire(msg.sender.balance >= msg.value);\r\n\t\tdeposited(msg.sender, msg.value, \"wei deposited\");\r\n\t}\r\n\r\n\r\n\t/// @notice Stop running ICO\r\n\t/// @param icoIsStopped - status if this ICO is stopped\r\n\tfunction stopThisIco(bool icoIsStopped) isOwner {\r\n\t\trequire(icoIsClosed != icoIsStopped);\r\n\t\ticoIsClosed = icoIsStopped;\r\n\t\tif(icoIsStopped) {\r\n\t\t\ticoStatusUpdated(msg.sender, \"Coin offering was stopped!\");\r\n\t\t}else {\r\n\t\t\ticoStatusUpdated(msg.sender, \"Coin offering is running!\");\r\n\t\t}\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"countHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"priceForPreIcoInWei\",\"type\":\"uint256\"},{\"name\":\"priceForIcoInWei\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"icoIsStopped\",\"type\":\"bool\"}],\"name\":\"stopThisIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"priceForIcoInWei\",\"type\":\"uint256\"}],\"name\":\"setICOPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"summeInWei\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"STARTMETADOLLAR\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mtdPreAmountInWei\",\"type\":\"uint256\"}],\"name\":\"setMtdPreAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoIsClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"howManyTokenToBuy\",\"type\":\"uint256\"}],\"name\":\"calculateTheEndPrice\",\"outputs\":[{\"name\":\"summarizedPriceInWeis\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mtdAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mtdAmountInWei\",\"type\":\"uint256\"}],\"name\":\"setMtdAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPreAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethPreAmountInWei\",\"type\":\"uint256\"}],\"name\":\"setEthPreAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"priceForPreIcoInWei\",\"type\":\"uint256\"}],\"name\":\"setPreICOPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"destroyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mtdAmountInWei\",\"type\":\"uint256\"},{\"name\":\"ethAmountInWei\",\"type\":\"uint256\"}],\"name\":\"setAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mtdPreAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellMaximumPossibleAmountOfTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethAmountInWei\",\"type\":\"uint256\"}],\"name\":\"setEthAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkFrozenAccounts\",\"outputs\":[{\"name\":\"accountIsFrozen\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mtdPreAmountInWei\",\"type\":\"uint256\"},{\"name\":\"ethPreAmountInWei\",\"type\":\"uint256\"}],\"name\":\"setPreAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoIsRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"priceInWei\",\"type\":\"uint256\"}],\"name\":\"setSellPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"string\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bonusOld\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"bonusNew\",\"type\":\"uint8\"}],\"name\":\"BonusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minIcoAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"notice\",\"type\":\"string\"}],\"name\":\"minGoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"preIcoAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"notice\",\"type\":\"string\"}],\"name\":\"preIcoEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"notice\",\"type\":\"string\"}],\"name\":\"priceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"summe\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"notice\",\"type\":\"string\"}],\"name\":\"withdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"summe\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"notice\",\"type\":\"string\"}],\"name\":\"deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"summe\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"notice\",\"type\":\"string\"}],\"name\":\"orderToTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"summe\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"notice\",\"type\":\"string\"}],\"name\":\"tokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_destroyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"summe\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"notice\",\"type\":\"string\"}],\"name\":\"tokenDestroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"string\"}],\"name\":\"icoStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"whoTransferredOwnership\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"formerOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ownerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"METADOLLAR","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a5a1a9c84200647f205b34e1291847a7baf3e33a0e8bfe80934a2fb4fc34e839"}]}