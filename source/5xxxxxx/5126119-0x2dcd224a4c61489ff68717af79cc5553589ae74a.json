{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    // Required methods\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function implementsERC721() public pure returns (bool);\r\n    function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n    function takeOwnership(uint256 _tokenId) public;\r\n    function totalSupply() public view returns (uint256 total);\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n\r\ncontract SportStarToken is ERC721 {\r\n\r\n    // ***** EVENTS\r\n\r\n    // @dev Transfer event as defined in current draft of ERC721.\r\n    //  ownership is assigned, including births.\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n\r\n\r\n\r\n    // ***** STORAGE\r\n\r\n    // @dev A mapping from token IDs to the address that owns them. All tokens have\r\n    //  some valid owner address.\r\n    mapping (uint256 => address) public tokenIndexToOwner;\r\n\r\n    // @dev A mapping from owner address to count of tokens that address owns.\r\n    //  Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint256) private ownershipTokenCount;\r\n\r\n    // @dev A mapping from TokenIDs to an address that has been approved to call\r\n    //  transferFrom(). Each Token can only have one approved address for transfer\r\n    //  at any time. A zero value means no approval is outstanding.\r\n    mapping (uint256 => address) public tokenIndexToApproved;\r\n\r\n    // Additional token data\r\n    mapping (uint256 => bytes32) public tokenIndexToData;\r\n\r\n    address public ceoAddress;\r\n    address public masterContractAddress;\r\n\r\n    uint256 public promoCreatedCount;\r\n\r\n\r\n\r\n    // ***** DATATYPES\r\n\r\n    struct Token {\r\n        string name;\r\n    }\r\n\r\n    Token[] private tokens;\r\n\r\n\r\n\r\n    // ***** ACCESS MODIFIERS\r\n\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMasterContract() {\r\n        require(msg.sender == masterContractAddress);\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    // ***** CONSTRUCTOR\r\n\r\n    function SportStarToken() public {\r\n        ceoAddress = msg.sender;\r\n    }\r\n\r\n\r\n\r\n    // ***** PRIVILEGES SETTING FUNCTIONS\r\n\r\n    function setCEO(address _newCEO) public onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    function setMasterContract(address _newMasterContract) public onlyCEO {\r\n        require(_newMasterContract != address(0));\r\n\r\n        masterContractAddress = _newMasterContract;\r\n    }\r\n\r\n\r\n\r\n    // ***** PUBLIC FUNCTIONS\r\n\r\n    // @notice Returns all the relevant information about a specific token.\r\n    // @param _tokenId The tokenId of the token of interest.\r\n    function getToken(uint256 _tokenId) public view returns (\r\n        string tokenName,\r\n        address owner\r\n    ) {\r\n        Token storage token = tokens[_tokenId];\r\n        tokenName = token.name;\r\n        owner = tokenIndexToOwner[_tokenId];\r\n    }\r\n\r\n    // @param _owner The owner whose sport star tokens we are interested in.\r\n    // @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n    //  expensive (it walks the entire Tokens array looking for tokens belonging to owner),\r\n    //  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n    //  not contract-to-contract calls.\r\n    function tokensOfOwner(address _owner) public view returns (uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n        if (tokenCount == 0) {\r\n            // Return an empty array\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalTokens = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            uint256 tokenId;\r\n            for (tokenId = 0; tokenId <= totalTokens; tokenId++) {\r\n                if (tokenIndexToOwner[tokenId] == _owner) {\r\n                    result[resultIndex] = tokenId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function getTokenData(uint256 _tokenId) public view returns (bytes32 tokenData) {\r\n        return tokenIndexToData[_tokenId];\r\n    }\r\n\r\n\r\n\r\n    // ***** ERC-721 FUNCTIONS\r\n\r\n    // @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n    // @param _to The address to be granted transfer approval. Pass address(0) to\r\n    //  clear all approvals.\r\n    // @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    function approve(address _to, uint256 _tokenId) public {\r\n        // Caller must own token.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        tokenIndexToApproved[_tokenId] = _to;\r\n\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    // For querying balance of a particular account\r\n    // @param _owner The address for balance query\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    function name() public pure returns (string) {\r\n        return \"CryptoSportStars\";\r\n    }\r\n\r\n    function symbol() public pure returns (string) {\r\n        return \"SportStarToken\";\r\n    }\r\n\r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // For querying owner of token\r\n    // @param _tokenId The tokenID for owner inquiry\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner)\r\n    {\r\n        owner = tokenIndexToOwner[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n\r\n    // @notice Allow pre-approved user to take ownership of a token\r\n    // @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        address newOwner = msg.sender;\r\n        address oldOwner = tokenIndexToOwner[_tokenId];\r\n\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_addressNotNull(newOwner));\r\n\r\n        // Making sure transfer is approved\r\n        require(_approved(newOwner, _tokenId));\r\n\r\n        _transfer(oldOwner, newOwner, _tokenId);\r\n    }\r\n\r\n    // For querying totalSupply of token\r\n    function totalSupply() public view returns (uint256 total) {\r\n        return tokens.length;\r\n    }\r\n\r\n    // Owner initates the transfer of the token to another account\r\n    // @param _to The address for the token to be transferred to.\r\n    // @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    function transfer(address _to, uint256 _tokenId) public {\r\n        require(_owns(msg.sender, _tokenId));\r\n        require(_addressNotNull(_to));\r\n\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    // Third-party initiates transfer of token from address _from to address _to\r\n    // @param _from The address for the token to be transferred from.\r\n    // @param _to The address for the token to be transferred to.\r\n    // @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n        require(_owns(_from, _tokenId));\r\n        require(_approved(_to, _tokenId));\r\n        require(_addressNotNull(_to));\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n\r\n\r\n    // ONLY MASTER CONTRACT FUNCTIONS\r\n\r\n    function createToken(string _name, address _owner) public onlyMasterContract returns (uint256 _tokenId) {\r\n        return _createToken(_name, _owner);\r\n    }\r\n\r\n    function updateOwner(address _from, address _to, uint256 _tokenId) public onlyMasterContract {\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function setTokenData(uint256 _tokenId, bytes32 tokenData) public onlyMasterContract {\r\n        tokenIndexToData[_tokenId] = tokenData;\r\n    }\r\n\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n    // Safety check on _to address to prevent against an unexpected 0x0 default.\r\n    function _addressNotNull(address _to) private pure returns (bool) {\r\n        return _to != address(0);\r\n    }\r\n\r\n    // For checking approval of transfer for address _to\r\n    function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n        return tokenIndexToApproved[_tokenId] == _to;\r\n    }\r\n\r\n    // For creating Token\r\n    function _createToken(string _name, address _owner) private returns (uint256 _tokenId) {\r\n        Token memory _token = Token({\r\n            name: _name\r\n            });\r\n        uint256 newTokenId = tokens.push(_token) - 1;\r\n\r\n        // It's probably never going to happen, 4 billion tokens are A LOT, but\r\n        // let's just be 100% sure we never let this happen.\r\n        require(newTokenId == uint256(uint32(newTokenId)));\r\n\r\n        // This will assign ownership, and also emit the Transfer event as\r\n        // per ERC721 draft\r\n        _transfer(address(0), _owner, newTokenId);\r\n\r\n        return newTokenId;\r\n    }\r\n\r\n    // Check for token ownership\r\n    function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n        return claimant == tokenIndexToOwner[_tokenId];\r\n    }\r\n\r\n    // @dev Assigns ownership of a specific Token to an address.\r\n    function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n        // Since the number of tokens is capped to 2^32 we can't overflow this\r\n        ownershipTokenCount[_to]++;\r\n        //transfer ownership\r\n        tokenIndexToOwner[_tokenId] = _to;\r\n\r\n        // When creating new tokens _from is 0x0, but we can't account that address.\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            // clear any previously approved ownership exchange\r\n            delete tokenIndexToApproved[_tokenId];\r\n        }\r\n\r\n        // Emit the transfer event.\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMasterContract\",\"type\":\"address\"}],\"name\":\"setMasterContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createToken\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"tokenData\",\"type\":\"bytes32\"}],\"name\":\"setTokenData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenData\",\"outputs\":[{\"name\":\"tokenData\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"updateOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToData\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SportStarToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://773183e7b53d3f80c4056a710bafe75982beea1a7dc6337c9686350936663271"}]}