{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\n//http://0xbtcminer.surge.sh/\r\n \r\ncontract MineFarmer{\r\n    //uint256 EGGS_PER_SHRIMP_PER_SECOND=1;\r\n    uint256 public EGGS_TO_HATCH_1SHRIMP=86400;//for final version should be seconds in a day\r\n    uint256 public STARTING_SHRIMP=300;\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    bool public initialized=false;\r\n    address public ceoAddress;\r\n    mapping (address => uint256) public hatcheryShrimp;\r\n    mapping (address => uint256) public claimedEggs;\r\n    mapping (address => uint256) public lastHatch;\r\n    mapping (address => address) public referrals;\r\n    uint256 public marketEggs;\r\n    _0xBitcoinToken Token = _0xBitcoinToken(0xB6eD7644C69416d67B522e20bC294A9a9B405B31);\r\n    address partnerAddress;\r\n    constructor() public{\r\n        ceoAddress=0x85abE8E3bed0d4891ba201Af1e212FE50bb65a26;\r\n        partnerAddress = 0x20C945800de43394F70D789874a4daC9cFA57451;\r\n    }\r\n    function hatchEggs(address ref) public{\r\n        require(initialized);\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 eggsUsed=getMyEggs();\r\n        uint256 newShrimp=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1SHRIMP);\r\n        hatcheryShrimp[msg.sender]=SafeMath.add(hatcheryShrimp[msg.sender],newShrimp);\r\n        claimedEggs[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        \r\n        //send referral eggs\r\n        claimedEggs[referrals[msg.sender]]=SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\r\n        \r\n        //boost market to nerf shrimp hoarding\r\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\r\n    }\r\n    function sellEggs() public{\r\n        require(initialized);\r\n        uint256 hasEggs=getMyEggs();\r\n        uint256 eggValue=calculateEggSell(hasEggs);\r\n        uint256 fee=devFee(eggValue);\r\n        claimedEggs[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        marketEggs=SafeMath.add(marketEggs,hasEggs);\r\n        devFeeHandle(fee);\r\n        Token.transfer(msg.sender, SafeMath.sub(eggValue, fee)); \r\n    }\r\n    function buyEggs(uint256 _incoming, address who) internal{\r\n        require(initialized);\r\n        uint256 eggsBought=calculateEggBuy(_incoming,SafeMath.sub(Token.balanceOf(address(this)),_incoming));\r\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\r\n        uint256 fee = devFee(_incoming);\r\n        devFeeHandle(fee);\r\n        claimedEggs[who]=SafeMath.add(claimedEggs[who],eggsBought);\r\n    }\r\n    \r\n    function receiveApproval(address receiveFrom, uint256 tkn, address tknaddr, bytes empty){\r\n        require(tknaddr == address(Token) && msg.sender == tknaddr);\r\n        Token.transferFrom(receiveFrom, address(this), tkn);\r\n        buyEggs(tkn, receiveFrom);\r\n    }\r\n    \r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\r\n        return calculateTrade(eggs,marketEggs,Token.balanceOf(address(this)));\r\n    }\r\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth,contractBalance,marketEggs);\r\n    }\r\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateEggBuy(eth,Token.balanceOf(address(this)));\r\n    }\r\n    function devFee(uint256 amount) public view returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,4),100);\r\n    }\r\n    \r\n    function devFeeHandle(uint256 fee) internal{\r\n        Token.transfer(ceoAddress, fee/2);\r\n        Token.transfer(partnerAddress, SafeMath.sub(fee,fee/2));\r\n    }\r\n    function seedMarket(uint256 eggs, uint256 tkn) public{\r\n        require(marketEggs==0);\r\n        if (tkn>0){\r\n            Token.transferFrom(msg.sender, address(this), tkn);\r\n        }\r\n        initialized=true;\r\n        marketEggs=eggs;\r\n    }\r\n    function getFreeShrimp() public{\r\n        require(initialized);\r\n        require(hatcheryShrimp[msg.sender]==0);\r\n        lastHatch[msg.sender]=now;\r\n        hatcheryShrimp[msg.sender]=STARTING_SHRIMP;\r\n    }\r\n    function getBalance() public view returns(uint256){\r\n        return Token.balanceOf(address(this));\r\n    }\r\n    function getMyShrimp() public view returns(uint256){\r\n        return hatcheryShrimp[msg.sender];\r\n    }\r\n    function getMyEggs() public view returns(uint256){\r\n        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\r\n    }\r\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\r\n        uint256 secondsPassed=min(EGGS_TO_HATCH_1SHRIMP,SafeMath.sub(now,lastHatch[adr]));\r\n        return SafeMath.mul(secondsPassed,hatcheryShrimp[adr]);\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\nlibrary ExtendedMath {\r\n    //return the smaller of the two inputs (a or b)\r\n    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\r\n        if(a > b) return b;\r\n        return a;\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and an\r\n// initial fixed supply\r\n// ----------------------------------------------------------------------------\r\ncontract _0xBitcoinToken is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n    using ExtendedMath for uint;\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n     uint public latestDifficultyPeriodStarted;\r\n    uint public epochCount;//number of 'blocks' mined\r\n    uint public _BLOCKS_PER_READJUSTMENT = 1024;\r\n    //a little number\r\n    uint public  _MINIMUM_TARGET = 2**16;\r\n      //a big number is easier ; just find a solution that is smaller\r\n    //uint public  _MAXIMUM_TARGET = 2**224;  bitcoin uses 224\r\n    uint public  _MAXIMUM_TARGET = 2**234;\r\n    uint public miningTarget;\r\n    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\r\n    uint public rewardEra;\r\n    uint public maxSupplyForEra;\r\n    address public lastRewardTo;\r\n    uint public lastRewardAmount;\r\n    uint public lastRewardEthBlockNumber;\r\n    bool locked = false;\r\n    mapping(bytes32 => bytes32) solutionForChallenge;\r\n    uint public tokensMinted;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    function _0xBitcoinToken() public onlyOwner{\r\n        symbol = \"0xBTC\";\r\n        name = \"0xBitcoin Token\";\r\n        decimals = 8;\r\n        _totalSupply = 21000000 * 10**uint(decimals);\r\n        if(locked) revert();\r\n        balances[msg.sender] = 2100000 * 10**uint(decimals);\r\n        balances[0x14723a09acff6d2a60dcdf7aa4aff308fddc160c] = 2100000 * 10**uint(decimals);\r\n        locked = true;\r\n        tokensMinted = 0;\r\n        rewardEra = 0;\r\n        maxSupplyForEra = _totalSupply.div(2);\r\n        miningTarget = _MAXIMUM_TARGET;\r\n        latestDifficultyPeriodStarted = block.number;\r\n        _startNewMiningEpoch();\r\n        //The owner gets nothing! You must mine this ERC20 token\r\n        //balances[owner] = _totalSupply;\r\n        //Transfer(address(0), owner, _totalSupply);\r\n    }\r\n        function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\r\n            //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender's address to prevent MITM attacks\r\n            bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\r\n            //the challenge digest must match the expected\r\n            if (digest != challenge_digest) revert();\r\n            //the digest must be smaller than the target\r\n            if(uint256(digest) > miningTarget) revert();\r\n            //only allow one reward for each challenge\r\n             bytes32 solution = solutionForChallenge[challengeNumber];\r\n             solutionForChallenge[challengeNumber] = digest;\r\n             if(solution != 0x0) revert();  //prevent the same answer from awarding twice\r\n            uint reward_amount = getMiningReward();\r\n            balances[msg.sender] = balances[msg.sender].add(reward_amount);\r\n            tokensMinted = tokensMinted.add(reward_amount);\r\n            //Cannot mint more tokens than there are\r\n            assert(tokensMinted <= maxSupplyForEra);\r\n            //set readonly diagnostics data\r\n            lastRewardTo = msg.sender;\r\n            lastRewardAmount = reward_amount;\r\n            lastRewardEthBlockNumber = block.number;\r\n             _startNewMiningEpoch();\r\n              Mint(msg.sender, reward_amount, epochCount, challengeNumber );\r\n           return true;\r\n        }\r\n    //a new 'block' to be mined\r\n    function _startNewMiningEpoch() internal {\r\n      //if max supply for the era will be exceeded next reward round then enter the new era before that happens\r\n      //40 is the final reward era, almost all tokens minted\r\n      //once the final era is reached, more tokens will not be given out because the assert function\r\n      if( tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39)\r\n      {\r\n        rewardEra = rewardEra + 1;\r\n      }\r\n      //set the next minted supply at which the era will change\r\n      // total supply is 2100000000000000  because of 8 decimal places\r\n      maxSupplyForEra = _totalSupply - _totalSupply.div( 2**(rewardEra + 1));\r\n      epochCount = epochCount.add(1);\r\n      //every so often, readjust difficulty. Dont readjust when deploying\r\n      if(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\r\n      {\r\n        _reAdjustDifficulty();\r\n      }\r\n      //make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\r\n      //do this last since this is a protection mechanism in the mint() function\r\n      challengeNumber = block.blockhash(block.number - 1);\r\n    }\r\n    //https://en.bitcoin.it/wiki/Difficulty#What_is_the_formula_for_difficulty.3F\r\n    //as of 2017 the bitcoin difficulty was up to 17 zeroes, it was only 8 in the early days\r\n    //readjust the target by 5 percent\r\n    function _reAdjustDifficulty() internal {\r\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\r\n        //assume 360 ethereum blocks per hour\r\n        //we want miners to spend 10 minutes to mine each 'block', about 60 ethereum blocks = one 0xbitcoin epoch\r\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT; //256\r\n        uint targetEthBlocksPerDiffPeriod = epochsMined * 60; //should be 60 times slower than ethereum\r\n        //if there were less eth blocks passed in time than expected\r\n        if( ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod )\r\n        {\r\n          uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div( ethBlocksSinceLastDifficultyPeriod );\r\n          uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\r\n          // If there were 5% more blocks mined than expected then this is 5.  If there were 100% more blocks mined than expected then this is 100.\r\n          //make it harder\r\n          miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));   //by up to 50 %\r\n        }else{\r\n          uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div( targetEthBlocksPerDiffPeriod );\r\n          uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000); //always between 0 and 1000\r\n          //make it easier\r\n          miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));   //by up to 50 %\r\n        }\r\n        latestDifficultyPeriodStarted = block.number;\r\n        if(miningTarget < _MINIMUM_TARGET) //very difficult\r\n        {\r\n          miningTarget = _MINIMUM_TARGET;\r\n        }\r\n        if(miningTarget > _MAXIMUM_TARGET) //very easy\r\n        {\r\n          miningTarget = _MAXIMUM_TARGET;\r\n        }\r\n    }\r\n    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\r\n    function getChallengeNumber() public constant returns (bytes32) {\r\n        return challengeNumber;\r\n    }\r\n    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\r\n     function getMiningDifficulty() public constant returns (uint) {\r\n        return _MAXIMUM_TARGET.div(miningTarget);\r\n    }\r\n    function getMiningTarget() public constant returns (uint) {\r\n       return miningTarget;\r\n   }\r\n    //21m coins total\r\n    //reward begins at 50 and is cut in half every reward era (as tokens are mined)\r\n    function getMiningReward() public constant returns (uint) {\r\n        //once we get half way thru the coins, only get 25 per block\r\n         //every reward era, the reward amount halves.\r\n         return (50 * 10**uint(decimals) ).div( 2**rewardEra ) ;\r\n    }\r\n    //help debug mining software\r\n    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\r\n        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\r\n        return digest;\r\n      }\r\n        //help debug mining software\r\n      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\r\n          bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\r\n          if(uint256(digest) > testTarget) revert();\r\n          return (digest == challenge_digest);\r\n        }\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account. The `spender` contract function\r\n    // `receiveApproval(...)` is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () public payable {\r\n        revert();\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"},{\"name\":\"tkn\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFreeShrimp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EGGS_TO_HATCH_1SHRIMP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcheryShrimp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiveFrom\",\"type\":\"address\"},{\"name\":\"tkn\",\"type\":\"uint256\"},{\"name\":\"tknaddr\",\"type\":\"address\"},{\"name\":\"empty\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyShrimp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_SHRIMP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"MineFarmer","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a190f04181140b30e232e217643e98e78eb9c7c955f7a1b75957674a31c7bf0c"}]}