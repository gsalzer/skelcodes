{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ninterface Token {\r\n    function totalSupply() constant external returns (uint256);\r\n    \r\n    function transfer(address receiver, uint amount) external returns (bool success);\r\n    function burn(uint256 _value) external returns (bool success);\r\n    function startTrading() external;\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ninterface AquaPriceOracle {\r\n  function getAudCentWeiPrice() external constant returns (uint);\r\n  function getAquaTokenAudCentsPrice() external constant returns (uint);\r\n  event NewPrice(uint _audCentWeiPrice, uint _aquaTokenAudCentsPrice);\r\n}\r\n\r\n\r\n///@title Aqua Sale Smart contract\r\ncontract AquaSale is Owned {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 constant ONE_HUNDRED = 100;\r\n\r\n    //Internal state\r\n    mapping (address => uint) internal buyerBalances;\r\n    \r\n    //Public interface\r\n    \r\n    ///Team trust account address\r\n    address public teamTrustAccount;\r\n    \r\n    ///Team share of total token supply after successful completion of the \r\n    ///crowdsale expressed as whole percentage number (0-100)\r\n    uint public teamSharePercent;\r\n    \r\n    ///Low funding goal (Soft Cap) in number of tokens\r\n    uint public lowTokensToSellGoal;\r\n    \r\n    ///High funding goal (Hard Cap) in number of tokens\r\n    uint public highTokensToSellGoal;\r\n    \r\n    ///Number of tokens sold\r\n    uint public soldTokens;\r\n    \r\n    ///Crowdsale start time (in seconds since unix epoch)\r\n    uint public startTime;\r\n    \r\n    ///Crowdsale end time (in seconds since unix epoch)\r\n    uint public deadline;\r\n\r\n    ///Address of Aqua Token used as a reward for Ether contributions\r\n    Token public tokenReward;\r\n    \r\n    ///Aqua Token price oracle contract address\r\n    AquaPriceOracle public tokenPriceOracle;\r\n    \r\n\r\n    ///Indicates if funding goal is reached (crowdsale is successful)\r\n    bool public fundingGoalReached = false;\r\n    \r\n    ///Indicates if high funding goal (Hard Cap) is reached.\r\n    bool public highFundingGoalReached = false;\r\n\r\n    ///Event is triggered when funding goal is reached\r\n    ///@param amntRaisedWei Amount raised in Wei\r\n    ///@param isHigherGoal True if Hard Cap is reached. False if Soft Cap is reached\r\n    event GoalReached(uint amntRaisedWei, bool isHigherGoal);\r\n    \r\n    ///Event is triggered when crowdsale contract processes funds transfer\r\n    ///(contribution or withdrawal)\r\n    ///@param backer Account address that sends (in case of contribution) or receives (in case of refund or withdrawal) funds\r\n    ///@param isContribution True in case funds transfer is a contribution. False in case funds transfer is a refund or a withdrawal.\r\n    event FundsTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    ///Constructor initializes Aqua Sale contract\r\n    ///@param ifSuccessfulSendTo Beneficiary address â€“ account address that can withdraw raised funds in case crowdsale succeeds\r\n    ///@param _lowTokensToSellGoal Low funding goal (Soft Cap) as number of tokens to sell\r\n    ///@param _highTokensToSellGoal High funding goal (Hard Cap) as number of tokens to sell\r\n    ///@param startAfterMinutes Crowdsale start time as the number of minutes since contract deployment time\r\n    ///@param durationInMinutes Duration of the crowdsale in minutes\r\n    ///@param addressOfTokenUsedAsReward Aqua Token smart contract address\r\n    ///@param addressOfTokenPriceOracle Aqua Price oracle smart contract address\r\n    ///@param addressOfTeamTrusAccount Account address that receives team share of tokens upon successful completion of crowdsale\r\n    ///@param _teamSharePercent Team share of total token supply after successful completion of the crowdsale expressed as whole percentage number (0-100)\r\n    function AquaSale(\r\n        address ifSuccessfulSendTo,\r\n        uint _lowTokensToSellGoal,\r\n        uint _highTokensToSellGoal,\r\n        uint startAfterMinutes,\r\n        uint durationInMinutes,\r\n        address addressOfTokenUsedAsReward,\r\n        address addressOfTokenPriceOracle,\r\n        address addressOfTeamTrusAccount,\r\n        uint _teamSharePercent\r\n    ) public {\r\n        owner = ifSuccessfulSendTo;\r\n        lowTokensToSellGoal = _lowTokensToSellGoal;\r\n        highTokensToSellGoal = _highTokensToSellGoal;\r\n        startTime = now.add(startAfterMinutes.mul(1 minutes));\r\n        deadline = startTime.add(durationInMinutes.mul(1 minutes));\r\n        tokenReward = Token(addressOfTokenUsedAsReward);\r\n        tokenPriceOracle = AquaPriceOracle(addressOfTokenPriceOracle);\r\n        teamTrustAccount = addressOfTeamTrusAccount;\r\n        teamSharePercent = _teamSharePercent;\r\n    }\r\n    \r\n    ///Returns balance of the buyer\r\n    ///@param _buyer address of crowdsale participant\r\n    ///@return Buyer balance in wei\r\n    function buyerBalance(address _buyer) public constant returns(uint) {\r\n        return buyerBalances[_buyer];\r\n    }\r\n\r\n    ///Fallback function expects that the sent amount is payment for tokens\r\n    function () public payable {\r\n        purchaseTokens();\r\n    }\r\n    \r\n    ///function accepts Ether and allocates Aqua Tokens to the sender\r\n    function purchaseTokens() public payable {\r\n        require(!highFundingGoalReached && now >= startTime );\r\n        uint amount = msg.value;\r\n        uint noTokens = amount.div(\r\n            tokenPriceOracle.getAquaTokenAudCentsPrice().mul(tokenPriceOracle.getAudCentWeiPrice())\r\n            );\r\n        buyerBalances[msg.sender] = buyerBalances[msg.sender].add(amount);\r\n        soldTokens = soldTokens.add(noTokens);\r\n        checkGoalsReached();\r\n\r\n        tokenReward.transfer(msg.sender, noTokens);\r\n\r\n        FundsTransfer(msg.sender, amount, true);\r\n    }\r\n    \r\n    ///Investors should call this function in order to receive refund in \r\n    ///case crowdsale is not successful.\r\n    ///The sending address should be the same address that was used to\r\n    ///participate in crowdsale. The amount will be refunded to this address\r\n    function refund() public {\r\n        require(!fundingGoalReached && buyerBalances[msg.sender] > 0\r\n                && now >= deadline);\r\n        uint amount = buyerBalances[msg.sender];\r\n        buyerBalances[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n        FundsTransfer(msg.sender, amount, false);\r\n    }\r\n\r\n    ///iAqua authorized sttaff will call this function to withdraw contributed \r\n    ///amount (only in case crowdsale is successful)\r\n    function withdraw() onlyOwner public {\r\n        require( (fundingGoalReached && now >= deadline) || highFundingGoalReached );\r\n        uint raisedFunds = this.balance;\r\n        uint teamTokens = soldTokens.mul(teamSharePercent).div(ONE_HUNDRED.sub(teamSharePercent));\r\n        uint totalTokens = tokenReward.totalSupply();\r\n        if (totalTokens < teamTokens.add(soldTokens)) {\r\n            teamTokens = totalTokens.sub(soldTokens);\r\n        }\r\n        tokenReward.transfer(teamTrustAccount, teamTokens);\r\n        uint distributedTokens = teamTokens.add(soldTokens);\r\n        if (totalTokens > distributedTokens) {\r\n            tokenReward.burn(totalTokens.sub(distributedTokens));\r\n        }\r\n        tokenReward.startTrading();\r\n        Owned(address(tokenReward)).transferOwnership(owner);\r\n        owner.transfer(raisedFunds);\r\n        FundsTransfer(owner, raisedFunds, false);\r\n    }\r\n    \r\n    //Internal functions\r\n    \r\n    function checkGoalsReached() internal {\r\n        if (fundingGoalReached) {\r\n            if (highFundingGoalReached) {\r\n                return;\r\n            }\r\n            if (soldTokens >= highTokensToSellGoal) {\r\n                highFundingGoalReached = true;\r\n                GoalReached(this.balance, true);\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            if (soldTokens >= lowTokensToSellGoal) {\r\n                fundingGoalReached = true;\r\n                GoalReached(this.balance, false);\r\n            }\r\n            if (soldTokens >= highTokensToSellGoal) {\r\n                highFundingGoalReached = true;\r\n                GoalReached(this.balance, true);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buyerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highTokensToSellGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTrustAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchaseTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowTokensToSellGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSharePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highFundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ifSuccessfulSendTo\",\"type\":\"address\"},{\"name\":\"_lowTokensToSellGoal\",\"type\":\"uint256\"},{\"name\":\"_highTokensToSellGoal\",\"type\":\"uint256\"},{\"name\":\"startAfterMinutes\",\"type\":\"uint256\"},{\"name\":\"durationInMinutes\",\"type\":\"uint256\"},{\"name\":\"addressOfTokenUsedAsReward\",\"type\":\"address\"},{\"name\":\"addressOfTokenPriceOracle\",\"type\":\"address\"},{\"name\":\"addressOfTeamTrusAccount\",\"type\":\"address\"},{\"name\":\"_teamSharePercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amntRaisedWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isHigherGoal\",\"type\":\"bool\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundsTransfer\",\"type\":\"event\"}]","ContractName":"AquaSale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000076598864a2f85c59747054737961540a800ff9e7000000000000000000000000000000000000000000000000000000000004f544000000000000000000000000000000000000000000000000000000000039cfde000000000000000000000000000000000000000000000000000000000000a0b1000000000000000000000000000000000000000000000000000000000001fff40000000000000000000000001d97bccc6296aac6f0be796c7e8cb270eca4c6c60000000000000000000000001949329a76ae8c63161b026830be34d8bc278efe00000000000000000000000076598864a2f85c59747054737961540a800ff9e70000000000000000000000000000000000000000000000000000000000000010","Library":"","SwarmSource":"bzzr://0a333515833257766f60e17f3ec11e7527fdf8f2368f0022b778d8a4b0c72ea1"}]}