{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract NectarToken is MintableToken {\r\n    string public name = \"Nectar\";\r\n    string public symbol = \"NCT\";\r\n    uint8 public decimals = 18;\r\n\r\n    bool public transfersEnabled = false;\r\n    event TransfersEnabled();\r\n\r\n    // Disable transfers until after the sale\r\n    modifier whenTransfersEnabled() {\r\n        require(transfersEnabled);\r\n        _;\r\n    }\r\n\r\n    modifier whenTransfersNotEnabled() {\r\n        require(!transfersEnabled);\r\n        _;\r\n    }\r\n\r\n    function enableTransfers() onlyOwner whenTransfersNotEnabled public {\r\n        transfersEnabled = true;\r\n        TransfersEnabled();\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public whenTransfersEnabled returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenTransfersEnabled returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    // Approves and then calls the receiving contract\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        // call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n        // receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n        // it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract NectarCrowdsale is Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    /** Maximum amount to raise in USD based on initial exchange rate */\r\n    uint256 constant maxCapUsd = 50000000;\r\n    /** Minumum amount per purchase in USD based on initial exchange rate*/\r\n    uint256 constant minimumPurchaseUsd = 100;\r\n\r\n    /** Tranche parameters */\r\n    uint256 constant tranche1ThresholdUsd = 5000000;\r\n    uint256 constant tranche1Rate = 37604;\r\n    uint256 constant tranche2ThresholdUsd = 10000000;\r\n    uint256 constant tranche2Rate = 36038;\r\n    uint256 constant tranche3ThresholdUsd = 15000000;\r\n    uint256 constant tranche3Rate = 34471;\r\n    uint256 constant tranche4ThresholdUsd = 20000000;\r\n    uint256 constant tranche4Rate = 32904;\r\n    uint256 constant standardTrancheRate= 31337;\r\n\r\n    /** The token being sold */\r\n    NectarToken public token;\r\n\r\n    /** Start timestamp when token purchases are allowed, inclusive */\r\n    uint256 public startTime;\r\n\r\n    /** End timestamp when token purchases are allowed, inclusive */\r\n    uint256 public endTime;\r\n\r\n    /** Set value of wei/usd used in cap and minimum purchase calculation */\r\n    uint256 public weiUsdExchangeRate;\r\n\r\n    /** Address where funds are collected */\r\n    address public wallet;\r\n\r\n    /** Address used to sign purchase authorizations */\r\n    address public purchaseAuthorizer;\r\n\r\n    /** Total amount of raised money in wei */\r\n    uint256 public weiRaised;\r\n\r\n    /** Cap in USD */\r\n    uint256 public capUsd;\r\n\r\n    /** Maximum amount of raised money in wei */\r\n    uint256 public cap;\r\n\r\n    /** Minumum amount of wei per purchase */\r\n    uint256 public minimumPurchase;\r\n\r\n    /** Have we canceled the sale? */\r\n    bool public isCanceled;\r\n\r\n    /** have we finalized the sale? */\r\n    bool public isFinalized;\r\n\r\n    /** Record of nonces -> purchases */\r\n    mapping (uint256 => bool) public purchases;\r\n\r\n    /**\r\n     * Event triggered on presale minting\r\n     * @param purchaser who paid for the tokens\r\n     * @param amount amount of tokens minted\r\n     */\r\n    event PreSaleMinting(address indexed purchaser, uint256 amount);\r\n\r\n    /**\r\n     * Event triggered on token purchase\r\n     * @param purchaser who paid for the tokens\r\n     * @param value wei paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n\r\n    /** Event triggered on sale cancelation */\r\n    event Canceled();\r\n\r\n    /** Event triggered on sale finalization */\r\n    event Finalized();\r\n\r\n    /**\r\n     * NectarCrowdsale constructor\r\n     * @param _startTime start timestamp when purchases are allowed, inclusive\r\n     * @param _endTime end timestamp when purchases are allowed, inclusive\r\n     * @param _initialWeiUsdExchangeRate initial rate of wei/usd used in cap and minimum purchase calculation\r\n     * @param _wallet wallet in which to collect the funds\r\n     * @param _purchaseAuthorizer address to verify purchase authorizations from\r\n     */\r\n    function NectarCrowdsale(\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _initialWeiUsdExchangeRate,\r\n        address _wallet,\r\n        address _purchaseAuthorizer\r\n    )\r\n        public\r\n    {\r\n        require(_startTime >= now);\r\n        require(_endTime >= _startTime);\r\n        require(_initialWeiUsdExchangeRate > 0);\r\n        require(_wallet != address(0));\r\n        require(_purchaseAuthorizer != address(0));\r\n\r\n        token = createTokenContract();\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        weiUsdExchangeRate = _initialWeiUsdExchangeRate;\r\n        wallet = _wallet;\r\n        purchaseAuthorizer = _purchaseAuthorizer;\r\n\r\n        capUsd = maxCapUsd;\r\n\r\n        // Updates cap and minimumPurchase based on capUsd and weiUsdExchangeRate\r\n        updateCapAndExchangeRate();\r\n\r\n        isCanceled = false;\r\n        isFinalized = false;\r\n    }\r\n\r\n    /** Disable usage of the fallback function, only accept eth from buyTokens */\r\n    function () external payable {\r\n        revert();\r\n    }\r\n\r\n    /** Only allow before the sale period */\r\n    modifier onlyPreSale() {\r\n        require(now < startTime);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Directly mint tokens and assign to presale buyers\r\n     * @param purchaser Address to assign to\r\n     * @param tokenAmount amount of tokens to mint\r\n     */\r\n    function mintPreSale(address purchaser, uint256 tokenAmount) public onlyOwner onlyPreSale {\r\n        require(purchaser != address(0));\r\n        require(tokenAmount > 0);\r\n\r\n        token.mint(purchaser, tokenAmount);\r\n        PreSaleMinting(purchaser, tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * Buy tokens once authorized by the frontend\r\n     * @param nonce nonce parameter generated by the frontend\r\n     * @param authorizedAmount maximum purchase amount authorized for this transaction\r\n     * @param sig the signature generated by the frontned\r\n     */\r\n    function buyTokens(uint256 authorizedAmount, uint256 nonce, bytes sig) public payable whenNotPaused {\r\n        require(msg.sender != address(0));\r\n        require(validPurchase(authorizedAmount, nonce, sig));\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 rate = currentTranche();\r\n        uint256 tokens = weiAmount.mul(rate);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        purchases[nonce] = true;\r\n\r\n        token.mint(msg.sender, tokens);\r\n        TokenPurchase(msg.sender, weiAmount, tokens);\r\n\r\n        forwardFunds();\r\n    }\r\n\r\n    /** Cancel the sale */\r\n    function cancel() public onlyOwner {\r\n        require(!isCanceled);\r\n        require(!hasEnded());\r\n\r\n        Canceled();\r\n        isCanceled = true;\r\n    }\r\n\r\n    /** Finalize the sale */\r\n    function finalize() public onlyOwner {\r\n        require(!isFinalized);\r\n        require(hasEnded());\r\n\r\n        finalization();\r\n        Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    /**\r\n     * Set exchange rate before sale\r\n     * @param _weiUsdExchangeRate rate of wei/usd used in cap and minimum purchase calculation\r\n     */\r\n    function setExchangeRate(uint256 _weiUsdExchangeRate) public onlyOwner onlyPreSale {\r\n        require(_weiUsdExchangeRate > 0);\r\n\r\n        weiUsdExchangeRate = _weiUsdExchangeRate;\r\n        updateCapAndExchangeRate();\r\n    }\r\n\r\n    /**\r\n     * Set exchange rate before sale\r\n     * @param _capUsd new cap in USD\r\n     */\r\n    function setCapUsd(uint256 _capUsd) public onlyOwner onlyPreSale {\r\n        require(_capUsd <= maxCapUsd);\r\n\r\n        capUsd = _capUsd;\r\n        updateCapAndExchangeRate();\r\n    }\r\n\r\n    /** Enable token sales once sale is completed */\r\n    function enableTransfers() public onlyOwner {\r\n        require(isFinalized);\r\n        require(hasEnded());\r\n\r\n        token.enableTransfers();\r\n    }\r\n\r\n    /**\r\n     * Get the rate of tokens/wei in the current tranche\r\n     * @return the current tokens/wei rate\r\n     */\r\n    function currentTranche() public view returns (uint256) {\r\n        uint256 currentFundingUsd = weiRaised.div(weiUsdExchangeRate);\r\n        if (currentFundingUsd <= tranche1ThresholdUsd) {\r\n            return tranche1Rate;\r\n        } else if (currentFundingUsd <= tranche2ThresholdUsd) {\r\n            return tranche2Rate;\r\n        } else if (currentFundingUsd <= tranche3ThresholdUsd) {\r\n            return tranche3Rate;\r\n        } else if (currentFundingUsd <= tranche4ThresholdUsd) {\r\n            return tranche4Rate;\r\n        } else {\r\n            return standardTrancheRate;\r\n        }\r\n    }\r\n\r\n    /** @return true if crowdsale event has ended */\r\n    function hasEnded() public view returns (bool) {\r\n        bool afterEnd = now > endTime;\r\n        bool capMet = weiRaised >= cap;\r\n        return afterEnd || capMet || isCanceled;\r\n    }\r\n\r\n    /** Get the amount collected in USD, needed for WINGS calculation. */\r\n    function totalCollected() public view returns (uint256) {\r\n        uint256 presale = maxCapUsd.sub(capUsd);\r\n        uint256 crowdsale = weiRaised.div(weiUsdExchangeRate);\r\n        return presale.add(crowdsale);\r\n    }\r\n\r\n    /** Creates the token to be sold. */\r\n    function createTokenContract() internal returns (NectarToken) {\r\n        return new NectarToken();\r\n    }\r\n\r\n    /** Create the 30% extra token supply at the end of the sale */\r\n    function finalization() internal {\r\n        // Create 30% NCT for company use\r\n        uint256 tokens = token.totalSupply().mul(3).div(10);\r\n        token.mint(wallet, tokens);\r\n    }\r\n\r\n    /** Forward ether to the fund collection wallet */\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    /** Update parameters dependant on capUsd and eiUsdEchangeRate */\r\n    function updateCapAndExchangeRate() internal {\r\n        cap = capUsd.mul(weiUsdExchangeRate);\r\n        minimumPurchase = minimumPurchaseUsd.mul(weiUsdExchangeRate);\r\n    }\r\n\r\n    /**\r\n     * Is a purchase transaction valid?\r\n     * @return true if the transaction can buy tokens\r\n     */\r\n    function validPurchase(uint256 authorizedAmount, uint256 nonce, bytes sig) internal view returns (bool) {\r\n        // 84 = 20 byte address + 32 byte authorized amount + 32 byte nonce\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n84\";\r\n        bytes32 hash = keccak256(prefix, msg.sender, authorizedAmount, nonce);\r\n        bool validAuthorization = ECRecovery.recover(hash, sig) == purchaseAuthorizer;\r\n\r\n        bool validNonce = !purchases[nonce];\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool aboveMinimum = msg.value >= minimumPurchase;\r\n        bool belowAuthorized = msg.value <= authorizedAmount;\r\n        bool belowCap = weiRaised.add(msg.value) <= cap;\r\n        return validAuthorization && validNonce && withinPeriod && aboveMinimum && belowAuthorized && belowCap;\r\n    }\r\n}\r\n\r\nlibrary ECRecovery {\r\n\r\n  /**\r\n   * @dev Recover signer address from a message by using his signature\r\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\r\n   */\r\n  function recover(bytes32 hash, bytes sig) public pure returns (address) {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    //Check the signature length\r\n    if (sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"capUsd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCanceled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiUsdExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authorizedAmount\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseAuthorizer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_capUsd\",\"type\":\"uint256\"}],\"name\":\"setCapUsd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchases\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"purchaser\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"mintPreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTranche\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiUsdExchangeRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_initialWeiUsdExchangeRate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_purchaseAuthorizer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PreSaleMinting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Canceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"NectarCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a8c7030000000000000000000000000000000000000000000000000000000005ab3fd3000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000afa1c92a27215d1d1dad4fa89972e7c8d91218f9000000000000000000000000471f62713fc13c554467abae55913415501e20c2","Library":"ECRecovery:c104e1b762e0e01bfcdee5a040573a9d36688c63","SwarmSource":"bzzr://fe54c2a9c594ff01b9af5425b8f2dc854e61440a959c8e59f10636f311c5f52c"}]}