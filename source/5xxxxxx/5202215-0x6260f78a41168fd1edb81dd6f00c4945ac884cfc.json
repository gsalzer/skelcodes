{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Investors relations: partners@arbitraging.co\r\n**/\r\n\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\n \r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Standard\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Interface {\r\n     function totalSupply() public constant returns (uint);\r\n     function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n     function transfer(address to, uint tokens) public returns (bool success);\r\n     function approve(address spender, uint tokens) public returns (bool success);\r\n     function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n     event Transfer(address indexed from, address indexed to, uint tokens);\r\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ninterface OldXRPCToken {\r\n    function transfer(address receiver, uint amount) external;\r\n    function balanceOf(address _owner) external returns (uint256 balance);\r\n    function mint(address wallet, address buyer, uint256 tokenAmount) external;\r\n    function showMyTokenBalance(address addr) external;\r\n}\r\ncontract ARBITRAGEToken is ERC20Interface,Ownable {\r\n\r\n   using SafeMath for uint256;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) tokenBalances;\r\n   \r\n   string public constant name = \"ARBITRAGE\";\r\n   string public constant symbol = \"ARB\";\r\n   uint256 public constant decimals = 18;\r\n\r\n   uint256 public constant INITIAL_SUPPLY = 10000000;\r\n    address ownerWallet;\r\n   // Owner of account approves the transfer of an amount to another account\r\n   mapping (address => mapping (address => uint256)) allowed;\r\n   event Debug(string message, address addr, uint256 number);\r\n\r\n    function ARBITRAGEToken(address wallet) public {\r\n        owner = msg.sender;\r\n        ownerWallet=wallet;\r\n        totalSupply = INITIAL_SUPPLY * 10 ** 18;\r\n        tokenBalances[wallet] = INITIAL_SUPPLY * 10 ** 18;   //Since we divided the token into 10^18 parts\r\n    }\r\n /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(tokenBalances[msg.sender]>=_value);\r\n    tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(_value);\r\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  \r\n     /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= tokenBalances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    tokenBalances[_from] = tokenBalances[_from].sub(_value);\r\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n     /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n     // ------------------------------------------------------------------------\r\n     // Total supply\r\n     // ------------------------------------------------------------------------\r\n     function totalSupply() public constant returns (uint) {\r\n         return totalSupply  - tokenBalances[address(0)];\r\n     }\r\n     \r\n    \r\n     \r\n     // ------------------------------------------------------------------------\r\n     // Returns the amount of tokens approved by the owner that can be\r\n     // transferred to the spender's account\r\n     // ------------------------------------------------------------------------\r\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n         return allowed[tokenOwner][spender];\r\n     }\r\n     \r\n     /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n     \r\n     // ------------------------------------------------------------------------\r\n     // Don't accept ETH\r\n     // ------------------------------------------------------------------------\r\n     function () public payable {\r\n         revert();\r\n     }\r\n \r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n    return tokenBalances[_owner];\r\n  }\r\n\r\n    function mint(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {\r\n      require(tokenBalances[wallet] >= tokenAmount);               // checks if it has enough to sell\r\n      tokenBalances[buyer] = tokenBalances[buyer].add(tokenAmount);                  // adds the amount to buyer's balance\r\n      tokenBalances[wallet] = tokenBalances[wallet].sub(tokenAmount);                        // subtracts amount from seller's balance\r\n      Transfer(wallet, buyer, tokenAmount); \r\n      totalSupply=totalSupply.sub(tokenAmount);\r\n    }\r\n    function pullBack(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {\r\n        require(tokenBalances[buyer]>=tokenAmount);\r\n        tokenBalances[buyer] = tokenBalances[buyer].sub(tokenAmount);\r\n        tokenBalances[wallet] = tokenBalances[wallet].add(tokenAmount);\r\n        Transfer(buyer, wallet, tokenAmount);\r\n        totalSupply=totalSupply.add(tokenAmount);\r\n     }\r\n    function showMyTokenBalance(address addr) public view returns (uint tokenBalance) {\r\n        tokenBalance = tokenBalances[addr];\r\n    }\r\n}\r\ncontract ARBITRAGECrowdsale {\r\n    \r\n    struct Stakeholder\r\n    {\r\n        address stakeholderAddress;\r\n        uint stakeholderPerc;\r\n    }\r\n  using SafeMath for uint256;\r\n \r\n  // The token being sold\r\n  ARBITRAGEToken public token;\r\n  OldXRPCToken public prevXRPCToken;\r\n  \r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  Stakeholder[] ownersList;\r\n  \r\n  // address where funds are collected\r\n  // address where tokens are deposited and from where we send tokens to buyers\r\n  address public walletOwner;\r\n  Stakeholder stakeholderObj;\r\n  \r\n\r\n  uint256 public coinPercentage = 5;\r\n\r\n    // how many token units a buyer gets per wei\r\n    uint256 public ratePerWei = 1657;\r\n    uint256 public maxBuyLimit=2000;\r\n    uint256 public tokensSoldInThisRound=0;\r\n    uint256 public totalTokensSold = 0;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n\r\n    bool public isCrowdsalePaused = false;\r\n    address partnerHandler;\r\n  \r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function ARBITRAGECrowdsale(address _walletOwner, address _partnerHandler) public {\r\n      \r\n        prevXRPCToken = OldXRPCToken(0xAdb41FCD3DF9FF681680203A074271D3b3Dae526); \r\n        \r\n        startTime = now;\r\n        \r\n        require(_walletOwner != 0x0);\r\n        walletOwner=_walletOwner;\r\n\r\n         stakeholderObj = Stakeholder({\r\n         stakeholderAddress: walletOwner,\r\n         stakeholderPerc : 100});\r\n         \r\n         ownersList.push(stakeholderObj);\r\n        partnerHandler = _partnerHandler;\r\n        token = createTokenContract(_walletOwner);\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  function createTokenContract(address wall) internal returns (ARBITRAGEToken) {\r\n    return new ARBITRAGEToken(wall);\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () public payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  \r\n  // low level token purchase function\r\n\r\n  function buyTokens(address beneficiary) public payable {\r\n    require (isCrowdsalePaused != true);\r\n        \r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n    uint256 weiAmount = msg.value;\r\n    // calculate token amount to be created\r\n\r\n    uint256 tokens = weiAmount.mul(ratePerWei);\r\n    require(tokensSoldInThisRound.add(tokens)<=maxBuyLimit);\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(walletOwner, beneficiary, tokens); \r\n    tokensSoldInThisRound=tokensSoldInThisRound+tokens;\r\n    TokenPurchase(walletOwner, beneficiary, weiAmount, tokens);\r\n    totalTokensSold = totalTokensSold.add(tokens);\r\n    uint partnerCoins = tokens.mul(coinPercentage);\r\n    partnerCoins = partnerCoins.div(100);\r\n    forwardFunds(partnerCoins);\r\n  }\r\n\r\n   // send ether to the fund collection wallet(s)\r\n    function forwardFunds(uint256 partnerTokenAmount) internal {\r\n      for (uint i=0;i<ownersList.length;i++)\r\n      {\r\n         uint percent = ownersList[i].stakeholderPerc;\r\n         uint amountToBeSent = msg.value.mul(percent);\r\n         amountToBeSent = amountToBeSent.div(100);\r\n         ownersList[i].stakeholderAddress.transfer(amountToBeSent);\r\n         \r\n         if (ownersList[i].stakeholderAddress!=walletOwner &&  ownersList[i].stakeholderPerc>0)\r\n         {\r\n             token.mint(walletOwner,ownersList[i].stakeholderAddress,partnerTokenAmount);\r\n         }\r\n      }\r\n    }\r\n    \r\n    function updateOwnerShares(address[] partnersAddresses, uint[] partnersPercentages) public{\r\n        require(msg.sender==partnerHandler);\r\n        require(partnersAddresses.length==partnersPercentages.length);\r\n        \r\n        uint sumPerc=0;\r\n        for(uint i=0; i<partnersPercentages.length;i++)\r\n        {\r\n            sumPerc+=partnersPercentages[i];\r\n        }\r\n        require(sumPerc==100);\r\n        \r\n        delete ownersList;\r\n        \r\n        for(uint j=0; j<partnersAddresses.length;j++)\r\n        {\r\n            delete stakeholderObj;\r\n             stakeholderObj = Stakeholder({\r\n             stakeholderAddress: partnersAddresses[j],\r\n             stakeholderPerc : partnersPercentages[j]});\r\n             ownersList.push(stakeholderObj);\r\n        }\r\n    }\r\n\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return nonZeroPurchase;\r\n  }\r\n\r\n  \r\n   function showMyTokenBalance() public view returns (uint256 tokenBalance) {\r\n        tokenBalance = token.showMyTokenBalance(msg.sender);\r\n    }\r\n    \r\n    /**\r\n     * The function to pull back tokens from a  notorious user\r\n     * Can only be called from owner wallet\r\n     **/\r\n    function pullBack(address buyer) public {\r\n        require(msg.sender==walletOwner);\r\n        uint bal = token.balanceOf(buyer);\r\n        token.pullBack(walletOwner,buyer,bal);\r\n    }\r\n    \r\n\r\n    /**\r\n     * function to set the new price \r\n     * can only be called from owner wallet\r\n     **/ \r\n    function setPriceRate(uint256 newPrice) public returns (bool) {\r\n        require(msg.sender==walletOwner);\r\n        ratePerWei = newPrice;\r\n    }\r\n    \r\n    /**\r\n     * function to set the max buy limit in 1 transaction \r\n     * can only be called from owner wallet\r\n     **/ \r\n    \r\n      function setMaxBuyLimit(uint256 maxlimit) public returns (bool) {\r\n        require(msg.sender==walletOwner);\r\n        maxBuyLimit = maxlimit *10 ** 18;\r\n    }\r\n    \r\n      /**\r\n     * function to start new ICO round \r\n     * can only be called from owner wallet\r\n     **/ \r\n    \r\n      function startNewICORound(uint256 maxlimit, uint256 newPrice) public returns (bool) {\r\n        require(msg.sender==walletOwner);\r\n        setMaxBuyLimit(maxlimit);\r\n        setPriceRate(newPrice);\r\n        tokensSoldInThisRound=0;\r\n    }\r\n    \r\n      /**\r\n     * function to get this round information \r\n     * can only be called from owner wallet\r\n     **/ \r\n    \r\n      function getCurrentICORoundInfo() public view returns \r\n      (uint256 maxlimit, uint256 newPrice, uint tokensSold) {\r\n       return(maxBuyLimit,ratePerWei,tokensSoldInThisRound);\r\n    }\r\n    \r\n    /**\r\n     * function to pause the crowdsale \r\n     * can only be called from owner wallet\r\n     **/\r\n     \r\n    function pauseCrowdsale() public returns(bool) {\r\n        require(msg.sender==walletOwner);\r\n        isCrowdsalePaused = true;\r\n    }\r\n\r\n    /**\r\n     * function to resume the crowdsale if it is paused\r\n     * can only be called from owner wallet\r\n     * if the crowdsale has been stopped, this function would not resume it\r\n     **/ \r\n    function resumeCrowdsale() public returns (bool) {\r\n        require(msg.sender==walletOwner);\r\n        isCrowdsalePaused = false;\r\n    }\r\n    \r\n    /**\r\n     * Shows the remaining tokens in the contract i.e. tokens remaining for sale\r\n     **/ \r\n    function tokensRemainingForSale() public view returns (uint256 balance) {\r\n        balance = token.balanceOf(walletOwner);\r\n    }\r\n    \r\n    /**\r\n     * function to show the equity percentage of an owner - major or minor\r\n     * can only be called from the owner wallet\r\n     **/\r\n    function checkOwnerShare (address owner) public constant returns (uint share) {\r\n        require(msg.sender==walletOwner);\r\n        \r\n        for(uint i=0;i<ownersList.length;i++)\r\n        {\r\n            if(ownersList[i].stakeholderAddress==owner)\r\n            {\r\n                return ownersList[i].stakeholderPerc;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * function to change the coin percentage awarded to the partners\r\n     * can only be called from the owner wallet\r\n     **/\r\n    function changePartnerCoinPercentage(uint percentage) public {\r\n        require(msg.sender==walletOwner);\r\n        coinPercentage = percentage;\r\n    }\r\n    \r\n    /**\r\n     * airdrop to old token holders\r\n     **/ \r\n    function airDropToOldTokenHolders(address[] oldTokenHolders) public {\r\n        require(msg.sender==walletOwner);\r\n        for(uint i = 0; i<oldTokenHolders.length; i++){\r\n            if(prevXRPCToken.balanceOf(oldTokenHolders[i])>0)\r\n            {\r\n                token.mint(walletOwner,oldTokenHolders[i],prevXRPCToken.balanceOf(oldTokenHolders[i]));\r\n            }\r\n        }\r\n    }\r\n    \r\n    function changeWalletOwner(address newWallet) public {\r\n        require(msg.sender==walletOwner);\r\n        walletOwner = newWallet;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokensRemainingForSale\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxlimit\",\"type\":\"uint256\"},{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"startNewICORound\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldTokenHolders\",\"type\":\"address[]\"}],\"name\":\"airDropToOldTokenHolders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"partnersAddresses\",\"type\":\"address[]\"},{\"name\":\"partnersPercentages\",\"type\":\"uint256[]\"}],\"name\":\"updateOwnerShares\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentICORoundInfo\",\"outputs\":[{\"name\":\"maxlimit\",\"type\":\"uint256\"},{\"name\":\"newPrice\",\"type\":\"uint256\"},{\"name\":\"tokensSold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"changeWalletOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"pullBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBuyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"changePartnerCoinPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxlimit\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"checkOwnerShare\",\"outputs\":[{\"name\":\"share\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldInThisRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsalePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevXRPCToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePerWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showMyTokenBalance\",\"outputs\":[{\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_walletOwner\",\"type\":\"address\"},{\"name\":\"_partnerHandler\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"ARBITRAGECrowdsale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d9acba6f45c7bed110cf7e86406ba2d295e9cc3a000000000000000000000000d9acba6f45c7bed110cf7e86406ba2d295e9cc3a","Library":"","SwarmSource":"bzzr://895b12902afb9411781486eacb96fea26bad3be21a1dc1a437571dc3d6772874"}]}