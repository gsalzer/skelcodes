{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n\r\n\tfunction safeMul(uint256 a, uint256 b) pure internal returns (uint256) {\r\n\t\tuint256 c = a * b;\r\n\t\tjudgement(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction safeDiv(uint256 a, uint256 b) pure internal returns (uint256) {\r\n\t\tjudgement(b > 0);\r\n\t\tuint256 c = a / b;\r\n\t\tjudgement(a == b * c + a % b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction safeSub(uint256 a, uint256 b) pure internal returns (uint256) {\r\n\t\tjudgement(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction safeAdd(uint256 a, uint256 b) pure internal returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tjudgement(c>=a && c>=b);\r\n\t\treturn c;\r\n\t}\r\n\tfunction safeMulWithPresent(uint256 a , uint256 b) pure internal returns (uint256){\r\n\t\tuint256 c = safeDiv(safeMul(a,b),1000);\r\n\t\tjudgement(b == (c*1000)/a);\r\n\t\treturn c;\r\n\t}\r\n\tfunction judgement(bool assertion) pure internal {\r\n\t\tif (!assertion) {\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n}\r\ncontract HCBPerm{\r\n\taddress public owner;\r\n\tconstructor () public{\r\n\t\towner = msg.sender;\r\n\t}\r\n\tevent LogOwnerChanged (address msgSender );\r\n\r\n\t///notice check if the msgSender is owner\r\n\tmodifier onlyOwner{\r\n\t\tassert(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction setOwner (address newOwner) public onlyOwner returns (bool){\r\n\t\tif (owner == msg.sender){\r\n\t\t\towner = newOwner;\r\n\t\t\temit LogOwnerChanged(msg.sender);\r\n\t\t\treturn true;\r\n\t\t}else{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n}\r\ncontract HCBFreeze is HCBPerm{\r\n\tbool internal stopped = false;\r\n\r\n\tmodifier stoppable {\r\n\t\tassert (!stopped);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction status() view public returns (bool){\r\n\t\treturn stopped;\r\n\t}\r\n\t//freeze all env\r\n\tfunction stop() public onlyOwner{\r\n\t\tstopped = true;\r\n\t}\r\n\t//unfreeze\r\n\tfunction start() public onlyOwner{\r\n\t\tstopped = false;\r\n\t}\r\n\r\n}\r\ncontract Token is SafeMath {\r\n\t/*\r\n\t\tBasic ERC20 token\r\n\t*/\r\n\tuint256 public totalSupply;                                 /// total amount of tokens\r\n\t/// @param _owner The address from which the balance will be retrieved\r\n\t/// @return The balance\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n\t/// @notice send `_value` token to `_to` from `msg.sender`\r\n\t/// @param _to The address of the recipient\r\n\t/// @param _value The amount of token to be transferred\r\n\t/// @return Whether the transfer was successful or not\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n\t/// @param amount of need to burn\r\n\t/// @return Burn amount of token\r\n\tfunction burn(uint256 amount) public returns (bool);\r\n\r\n\t/// @param _from transaction from address\r\n\t/// @param _to   transaction to address\r\n\t/// @return check the from and to address weather been freezed\r\n\tfunction frozenCheck(address _from , address _to) view private returns (bool);\r\n\r\n\t/// @param target the address gonna freeze or unfreeze\r\n\t/// @param freeze freeze or unfreeze\r\n\tfunction freezeAccount(address target , bool freeze) public;\r\n\r\n\t/// @param key  the key of main chain\r\n\t/// return weather operation was successful or not\r\n\tfunction register(string key) public returns(bool);\r\n\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\tevent Burn    (address indexed _owner , uint256 _value);\r\n\tevent LogRegister (address user, string key);\r\n}\r\ncontract BasicToken is Token ,HCBFreeze{\r\n\r\n\tfunction transfer(address _to, uint256 _value) stoppable public returns (bool ind) {\r\n\t\t//Default assumes totalSupply can't be over max (2^256 - 1).\r\n\t\t//If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n\t\t//Replace the if with this one instead.\r\n\t\trequire(_to!= address(0));\r\n\t\trequire(frozenCheck(msg.sender,_to));\r\n\t\tif (balances[msg.sender] >= _value && _value > 0) {\r\n\t\t\tbalances[msg.sender] = safeSub(balances[msg.sender] , _value);\r\n\t\t\tbalances[_to]  = safeAdd(balances[_to],_value);\r\n\t\t\temit Transfer(msg.sender, _to, _value);\r\n\t\t\treturn true;\r\n\t\t} else { return false; }\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\tfunction burn(uint256 amount) stoppable onlyOwner public returns (bool){\r\n\t\tif(balances[msg.sender] > amount ){\r\n\t\t\tbalances[msg.sender] = safeSub(balances[msg.sender],amount);\r\n\t\t\ttotalSupply = safeSub(totalSupply,amount);\r\n\t\t\temit Burn(msg.sender,amount);\r\n\t\t\treturn true;\r\n\t\t}else{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\tfunction frozenCheck(address _from , address _to) view private returns (bool){\r\n\t\trequire(!frozenAccount[_from]);\r\n\t\trequire(!frozenAccount[_to]);\r\n\t\treturn true;\r\n\t}\r\n\tfunction freezeAccount(address target , bool freeze) onlyOwner public{\r\n\t\tfrozenAccount[target] = freeze;\r\n\t}\r\n\tfunction register(string key) public returns(bool){\r\n\t\tassert(bytes(key).length <= 64);\r\n\t\trequire(!status());\r\n\r\n\t\tkeys[msg.sender] = key;\r\n\t\temit LogRegister(msg.sender,key);\r\n\t\treturn true;\r\n\t}\r\n\tmapping (address => uint256)                      internal balances;\r\n\tmapping (address => bool)                         private  frozenAccount;    //Save frozen account\r\n\tmapping (address => string)                       private  keys;            //mapping main chain's public key and Eth key\r\n}\r\ncontract HCBToken is BasicToken{\r\n\r\n\tstring public name = \"HiggsCandyBox\";                         /// Set the full name of this contract\r\n\tuint256 public decimals = 18;                                 /// Set the decimal\r\n\tstring public symbol = \"HCB\";                                 /// Set the symbol of this contract\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t\ttotalSupply = 1000000000000000000000000000;\r\n\t\tbalances[msg.sender] = totalSupply;\r\n\t}\r\n\r\n\tfunction () stoppable public {\r\n\t\trevert();\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ind\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"LogOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"key\",\"type\":\"string\"}],\"name\":\"LogRegister\",\"type\":\"event\"}]","ContractName":"HCBToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d16603f812220ec8e965872031ec697d24403f050c4be23c61236934248169e4"}]}