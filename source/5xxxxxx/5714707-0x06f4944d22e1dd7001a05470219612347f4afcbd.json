{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  ERC20 public token;\r\n\r\n  // How many wei units a buyer gets per token\r\n  uint256 public price;\r\n\r\n  // Minimum wei\r\n  uint256 public weiMinimum;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @param _token Address of the token being sold\r\n   * @param _price How many wei units a buyer gets per token\r\n   * @param _minimum Minimal wei per transaction\r\n   */\r\n  constructor(ERC20 _token, uint256 _price, uint256 _minimum) public {\r\n    require(_token != address(0));\r\n    require(_price > 0);\r\n    require(_minimum >= 0);\r\n    token = _token;\r\n    price = _price;\r\n    weiMinimum = _minimum * (10 ** 18);\r\n  }\r\n\r\n  /**\r\n   * Crowdsale token purchase logic\r\n   */\r\n  function () external payable {\r\n    require(!isFinalized);\r\n\r\n    address beneficiary = msg.sender;\r\n    uint256 weiAmount = msg.value;\r\n\r\n    require(beneficiary != address(0));\r\n    require(weiAmount != 0);\r\n    require(weiAmount >= weiMinimum);\r\n\r\n    uint256 tokens = weiAmount.div(price);\r\n    uint256 selfBalance = balance();\r\n    require(tokens > 0);\r\n    require(tokens <= selfBalance);\r\n\r\n    // Get tokens to beneficiary\r\n    token.transfer(beneficiary, tokens);\r\n\r\n    emit TokenPurchase(\r\n      beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    // Transfet eth to owner\r\n    owner.transfer(msg.value);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n  }\r\n\r\n\r\n  /**\r\n   * Self tokken ballance\r\n   */\r\n  function balance() public view returns (uint256) {\r\n    address self = address(this);\r\n    uint256 selfBalance = token.balanceOf(self);\r\n    return selfBalance;\r\n  }\r\n\r\n  /**\r\n   * Set new price\r\n   * @param _price How many wei units a buyer gets per token\r\n   */\r\n  function setPrice(uint256 _price) onlyOwner public {\r\n    require(_price > 0);\r\n    price = _price;\r\n  }\r\n\r\n  /**\r\n   * Set new minimum\r\n   * @param _minimum Minimal wei per transaction\r\n   */\r\n  function setMinimum(uint256 _minimum) onlyOwner public {\r\n    require(_minimum >= 0);\r\n    weiMinimum = _minimum * (10 ** 18);\r\n  }\r\n\r\n  /**\r\n   * Must be called after crowdsale ends, to do some extra finalization work.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n\r\n    transferBallance();\r\n\r\n    emit Finalized();\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * Send all token ballance to owner\r\n   */\r\n  function transferBallance() onlyOwner public {\r\n    uint256 selfBalance = balance();\r\n    token.transfer(msg.sender, selfBalance);\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"setMinimum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferBallance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_minimum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002cf2d4919e639b25b806126eb5c97d043ffb0a7000000000000000000000000000000000000000000000000000000000002d8c720000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://d3154c07bd589d8f0d043ceaab081e610c135d9bd3d5f740f62898fd88affcc1"}]}