{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    *               契約が一時停止されている場合にのみアクションを許可する\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    *               契約が一時停止されていない場合にのみアクションを許可する\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    *             一時停止するために所有者によって呼び出され、停止状態をトリガする\r\n    */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    *             ポーズをとるためにオーナーが呼び出し、通常の状態に戻ります\r\n    */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract RocsBase is Pausable {\r\n\r\n    // 生誕代\r\n    uint128 public eggPrice = 50 finney;\r\n    function setEggPrice(uint128 _price) public onlyOwner {\r\n        eggPrice = _price;\r\n    }\r\n    // 進化代\r\n    uint128 public evolvePrice = 5 finney;\r\n    function setEvolvePrice(uint128 _price) public onlyOwner {\r\n        evolvePrice = _price;\r\n    }\r\n\r\n    // 生誕\r\n    event RocCreated(address owner, uint tokenId, uint rocId);\r\n    // ERC721\r\n    event Transfer(address from, address to, uint tokenId);\r\n    event ItemTransfer(address from, address to, uint tokenId);\r\n\r\n    /// @dev Rocの構造体\r\n    struct Roc {\r\n        // ID\r\n        uint rocId;\r\n        // DNA\r\n        string dna;\r\n        // 出品中フラグ 1は出品中\r\n        uint8 marketsFlg;\r\n    }\r\n\r\n    /// @dev Rocsの配列\r\n    Roc[] public rocs;\r\n\r\n    // rocIdとtokenIdのマッピング\r\n    mapping(uint => uint) public rocIndex;\r\n    // rocIdからtokenIdを取得\r\n    function getRocIdToTokenId(uint _rocId) public view returns (uint) {\r\n        return rocIndex[_rocId];\r\n    }\r\n\r\n    /// @dev 所有するアドレスへのマッピング\r\n    mapping (uint => address) public rocIndexToOwner;\r\n    // @dev 所有者アドレスから所有するトークン数へのマッピング\r\n    mapping (address => uint) public ownershipTokenCount;\r\n    /// @dev 呼び出しが承認されたアドレスへのマッピング\r\n    mapping (uint => address) public rocIndexToApproved;\r\n\r\n    /// @dev 特定のRocの所有権をアドレスに割り当てます。\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        ownershipTokenCount[_to]++;\r\n        ownershipTokenCount[_from]--;\r\n        rocIndexToOwner[_tokenId] = _to;\r\n        // イベント開始\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n}\r\n\r\n/// @title ERC-721に準拠した契約のインタフェース：置き換え不可能なトークン\r\ncontract ERC721 {\r\n    // イベント\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n    // 必要なメソッド\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address _owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function totalSupply() public view returns (uint);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\n/// @title Roc所有権を管理するコントラクト\r\n/// @dev OpenZeppelinのERC721ドラフト実装に準拠\r\ncontract RocsOwnership is RocsBase, ERC721 {\r\n\r\n    /// @notice ERC721で定義されている、置き換え不可能なトークンの名前と記号。\r\n    string public constant name = \"CryptoFeather\";\r\n    string public constant symbol = \"CFE\";\r\n\r\n    bytes4 constant InterfaceSignature_ERC165 = \r\n    bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    bytes4 constant InterfaceSignature_ERC721 =\r\n    bytes4(keccak256('name()')) ^\r\n    bytes4(keccak256('symbol()')) ^\r\n    bytes4(keccak256('balanceOf(address)')) ^\r\n    bytes4(keccak256('ownerOf(uint256)')) ^\r\n    bytes4(keccak256('approve(address,uint256)')) ^\r\n    bytes4(keccak256('transfer(address,uint256)')) ^\r\n    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n    bytes4(keccak256('totalSupply()'));\r\n\r\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n    ///  この契約によって実装された標準化されたインタフェースでtrueを返します。\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\r\n    {\r\n        // DEBUG ONLY\r\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\r\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\r\n    }\r\n\r\n    /// @dev 特定のアドレスに指定されたrocの現在の所有者であるかどうかをチェックします。\r\n    /// @param _claimant \r\n    /// @param _tokenId \r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return rocIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev 特定のアドレスに指定されたrocが存在するかどうかをチェックします。\r\n    /// @param _claimant the address we are confirming kitten is approved for.\r\n    /// @param _tokenId kitten id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return rocIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev 以前の承認を上書きして、transferFrom（）に対して承認されたアドレスをマークします。\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        rocIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    // 指定されたアドレスのroc数を取得します。\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    /// @notice rocの所有者を変更します。\r\n    /// @dev ERC-721への準拠に必要\r\n    function transfer(address _to, uint256 _tokenId) public whenNotPaused {\r\n        // 安全チェック\r\n        require(_to != address(0));\r\n        // 自分のrocしか送ることはできません。\r\n        require(_owns(msg.sender, _tokenId));\r\n        // 所有権の再割り当て、保留中の承認のクリア、転送イベントの送信\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice transferFrom（）を介して別のアドレスに特定のrocを転送する権利を与えます。\r\n    /// @dev ERC-721への準拠に必要\r\n    function approve(address _to, uint256 _tokenId) external whenNotPaused {\r\n        // 所有者のみが譲渡承認を認めることができます。\r\n        require(_owns(msg.sender, _tokenId));\r\n        // 承認を登録します（以前の承認を置き換えます）。\r\n        _approve(_tokenId, _to);\r\n        // 承認イベントを発行する。\r\n        emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice roc所有者の変更を行います。を転送します。そのアドレスには、以前の所有者から転送承認が与えられています。\r\n    /// @dev ERC-721への準拠に必要\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public whenNotPaused {\r\n        // 安全チェック。\r\n        require(_to != address(0));\r\n        // 承認と有効な所有権の確認\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n        // 所有権を再割り当てします（保留中の承認をクリアし、転送イベントを発行します）。\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice 現在存在するrocの総数を返します。\r\n    /// @dev ERC-721への準拠に必要です。\r\n    function totalSupply() public view returns (uint) {\r\n        return rocs.length - 1;\r\n    }\r\n\r\n    /// @notice 指定されたrocの現在所有権が割り当てられているアドレスを返します。\r\n    /// @dev ERC-721への準拠に必要です。\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner) {\r\n        owner = rocIndexToOwner[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n\r\n    /// @dev この契約に所有権を割り当て、NFTを強制終了します。\r\n    /// @param _owner \r\n    /// @param _tokenId \r\n    function _escrow(address _owner, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        transferFrom(_owner, this, _tokenId);\r\n    }\r\n\r\n}\r\n\r\n/// @title Rocの飼育に関する管理を行うコントラクト\r\ncontract RocsBreeding is RocsOwnership {\r\n\r\n    /// @notice 新しいRocを作成して保存。 \r\n    /// @param _rocId \r\n    /// @param _dna \r\n    /// @param _marketsFlg \r\n    /// @param _owner \r\n    /// @dev RocCreatedイベントとTransferイベントの両方を生成します。 \r\n    function _createRoc(\r\n        uint _rocId,\r\n        string _dna,\r\n        uint _marketsFlg,\r\n        address _owner\r\n    )\r\n        internal\r\n        returns (uint)\r\n    {\r\n        Roc memory _roc = Roc({\r\n            rocId: _rocId,\r\n            dna: _dna,\r\n            marketsFlg: uint8(_marketsFlg)\r\n        });\r\n\r\n        uint newRocId = rocs.push(_roc) - 1;\r\n        // 同一のトークンIDが発生した場合は実行を停止します\r\n        require(newRocId == uint(newRocId));\r\n        // RocCreatedイベント\r\n        emit RocCreated(_owner, newRocId, _rocId);\r\n\r\n        // これにより所有権が割り当てられ、ERC721ドラフトごとに転送イベントが発行されます\r\n        rocIndex[_rocId] = newRocId;\r\n        _transfer(0, _owner, newRocId);\r\n\r\n        return newRocId;\r\n    }\r\n\r\n    /// @notice 新たに生み出します \r\n    /// @param _rocId \r\n    /// @param _dna \r\n    function giveProduce(uint _rocId, string _dna)\r\n        external\r\n        payable\r\n        whenNotPaused\r\n        returns(uint)\r\n    {\r\n        // 支払いを確認します。\r\n        require(msg.value >= eggPrice);\r\n        uint createRocId = _createRoc(\r\n            _rocId,\r\n            _dna, \r\n            0, \r\n            msg.sender\r\n        );\r\n        // 超過分を買い手に返す\r\n        uint256 bidExcess = msg.value - eggPrice;\r\n        msg.sender.transfer(bidExcess);\r\n\r\n        return createRocId;\r\n    }\r\n\r\n    /// @notice 初めてのRoc \r\n    /// @param _rocId \r\n    /// @param _dna \r\n    function freeGiveProduce(uint _rocId, string _dna)\r\n        external\r\n        payable\r\n        whenNotPaused\r\n        returns(uint)\r\n    {\r\n        // 初めてのRocか確認します。\r\n        require(balanceOf(msg.sender) == 0);\r\n        uint createRocId = _createRoc(\r\n            _rocId,\r\n            _dna, \r\n            0, \r\n            msg.sender\r\n        );\r\n        // 超過分を買い手に返す\r\n        uint256 bidExcess = msg.value;\r\n        msg.sender.transfer(bidExcess);\r\n\r\n        return createRocId;\r\n    }\r\n\r\n}\r\n\r\n/// @title Rocの売買のためのMarkets処理\r\ncontract RocsMarkets is RocsBreeding {\r\n\r\n    event MarketsCreated(uint256 tokenId, uint128 marketsPrice);\r\n    event MarketsSuccessful(uint256 tokenId, uint128 marketsPriceice, address buyer);\r\n    event MarketsCancelled(uint256 tokenId);\r\n\r\n    // NFT上のマーケットへの出品\r\n    struct Markets {\r\n        // 登録時のNFT売手\r\n        address seller;\r\n        // 価格\r\n        uint128 marketsPrice;\r\n    }\r\n\r\n    // トークンIDから対応するマーケットへの出品にマップします。\r\n    mapping (uint256 => Markets) tokenIdToMarkets;\r\n\r\n    // マーケットへの出品の手数料を設定\r\n    uint256 public ownerCut = 0;\r\n    function setOwnerCut(uint256 _cut) public onlyOwner {\r\n        require(_cut <= 10000);\r\n        ownerCut = _cut;\r\n    }\r\n\r\n    /// @notice Rocマーケットへの出品を作成し、開始します。\r\n    /// @param _rocId \r\n    /// @param _marketsPrice \r\n    function createRocSaleMarkets(\r\n        uint256 _rocId,\r\n        uint256 _marketsPrice\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(_marketsPrice == uint256(uint128(_marketsPrice)));\r\n\r\n        // チェック用のtokenIdをセット\r\n        uint checkTokenId = getRocIdToTokenId(_rocId);\r\n\r\n        // checkのオーナーである事\r\n        require(_owns(msg.sender, checkTokenId));\r\n        // checkのパラメータチェック\r\n        Roc memory roc = rocs[checkTokenId];\r\n        // マーケットへの出品中か確認してください。\r\n        require(uint8(roc.marketsFlg) == 0);\r\n        // 承認\r\n        _approve(checkTokenId, msg.sender);\r\n        // マーケットへの出品セット\r\n        _escrow(msg.sender, checkTokenId);\r\n        Markets memory markets = Markets(\r\n            msg.sender,\r\n            uint128(_marketsPrice)\r\n        );\r\n\r\n        // マーケットへの出品FLGをセット\r\n        rocs[checkTokenId].marketsFlg = 1;\r\n        _addMarkets(checkTokenId, markets);\r\n    }\r\n\r\n    /// @dev マーケットへの出品を公開マーケットへの出品のリストに追加します。 \r\n    ///  また、MarketsCreatedイベントを発生させます。\r\n    /// @param _tokenId The ID of the token to be put on markets.\r\n    /// @param _markets Markets to add.\r\n    function _addMarkets(uint256 _tokenId, Markets _markets) internal {\r\n        tokenIdToMarkets[_tokenId] = _markets;\r\n        emit MarketsCreated(\r\n            uint256(_tokenId),\r\n            uint128(_markets.marketsPrice)\r\n        );\r\n    }\r\n\r\n    /// @dev マーケットへの出品を公開マーケットへの出品のリストから削除します。\r\n    /// @param _tokenId \r\n    function _removeMarkets(uint256 _tokenId) internal {\r\n        delete tokenIdToMarkets[_tokenId];\r\n    }\r\n\r\n    /// @dev 無条件にマーケットへの出品を取り消します。\r\n    /// @param _tokenId \r\n    function _cancelMarkets(uint256 _tokenId) internal {\r\n        _removeMarkets(_tokenId);\r\n        emit MarketsCancelled(_tokenId);\r\n    }\r\n\r\n    /// @dev まだ獲得されていないMarketsをキャンセルします。\r\n    ///  元の所有者にNFTを返します。\r\n    /// @notice これは、契約が一時停止している間に呼び出すことができる状態変更関数です。\r\n    /// @param _rocId \r\n    function cancelMarkets(uint _rocId) external {\r\n        uint checkTokenId = getRocIdToTokenId(_rocId);\r\n        Markets storage markets = tokenIdToMarkets[checkTokenId];\r\n        address seller = markets.seller;\r\n        require(msg.sender == seller);\r\n        _cancelMarkets(checkTokenId);\r\n        rocIndexToOwner[checkTokenId] = seller;\r\n        rocs[checkTokenId].marketsFlg = 0;\r\n    }\r\n\r\n    /// @dev 契約が一時停止されたときにMarketsをキャンセルします。\r\n    ///  所有者だけがこれを行うことができ、NFTは売り手に返されます。 \r\n    ///  緊急時にのみ使用してください。\r\n    /// @param _rocId \r\n    function cancelMarketsWhenPaused(uint _rocId) whenPaused onlyOwner external {\r\n        uint checkTokenId = getRocIdToTokenId(_rocId);\r\n        Markets storage markets = tokenIdToMarkets[checkTokenId];\r\n        address seller = markets.seller;\r\n        _cancelMarkets(checkTokenId);\r\n        rocIndexToOwner[checkTokenId] = seller;\r\n        rocs[checkTokenId].marketsFlg = 0;\r\n    }\r\n\r\n    /// @dev Markets入札\r\n    ///  十分な量のEtherが供給されればNFTの所有権を移転する。\r\n    /// @param _rocId \r\n    function bid(uint _rocId) external payable whenNotPaused {\r\n        uint checkTokenId = getRocIdToTokenId(_rocId);\r\n        // マーケットへの出品構造体への参照を取得する\r\n        Markets storage markets = tokenIdToMarkets[checkTokenId];\r\n\r\n        uint128 sellingPrice = uint128(markets.marketsPrice);\r\n        // 入札額が価格以上である事を確認する。\r\n        // msg.valueはweiの数\r\n        require(msg.value >= sellingPrice);\r\n        // マーケットへの出品構造体が削除される前に、販売者への参照を取得します。\r\n        address seller = markets.seller;\r\n\r\n        // マーケットへの出品を削除します。\r\n        _removeMarkets(checkTokenId);\r\n\r\n        if (sellingPrice > 0) {\r\n            // 競売人のカットを計算します。\r\n            uint128 marketseerCut = uint128(_computeCut(sellingPrice));\r\n            uint128 sellerProceeds = sellingPrice - marketseerCut;\r\n\r\n            // 売り手に送金する\r\n            seller.transfer(sellerProceeds);\r\n        }\r\n\r\n        // 超過分を買い手に返す\r\n        msg.sender.transfer(msg.value - sellingPrice);\r\n        // イベント\r\n        emit MarketsSuccessful(checkTokenId, sellingPrice, msg.sender);\r\n\r\n        _transfer(seller, msg.sender, checkTokenId);\r\n        // マーケットへの出品FLGをセット\r\n        rocs[checkTokenId].marketsFlg = 0;\r\n    }\r\n\r\n    /// @dev 手数料計算\r\n    /// @param _price \r\n    function _computeCut(uint128 _price) internal view returns (uint) {\r\n        return _price * ownerCut / 10000;\r\n    }\r\n\r\n}\r\n\r\n/// @title CryptoRocs\r\ncontract RocsCore is RocsMarkets {\r\n\r\n    // コア契約が壊れてアップグレードが必要な場合に設定します\r\n    address public newContractAddress;\r\n\r\n    /// @dev 一時停止を無効にすると、契約を一時停止する前にすべての外部契約アドレスを設定する必要があります。\r\n    function unpause() public onlyOwner whenPaused {\r\n        require(newContractAddress == address(0));\r\n        // 実際に契約を一時停止しないでください。\r\n        super.unpause();\r\n    }\r\n\r\n    // @dev 利用可能な残高を取得できるようにします。\r\n    function withdrawBalance(uint _subtractFees) external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        if (balance > _subtractFees) {\r\n            owner.transfer(balance - _subtractFees);\r\n        }\r\n    }\r\n\r\n    /// @notice tokenIdからRocに関するすべての関連情報を返します。\r\n    /// @param _tokenId トークンID\r\n    function getRoc(uint _tokenId)\r\n        external\r\n        view\r\n        returns (\r\n        uint rocId,\r\n        string dna,\r\n        uint marketsFlg\r\n    ) {\r\n        Roc memory roc = rocs[_tokenId];\r\n        rocId = uint(roc.rocId);\r\n        dna = string(roc.dna);\r\n        marketsFlg = uint(roc.marketsFlg);\r\n    }\r\n\r\n    /// @notice rocIdからRocに関するすべての関連情報を返します。\r\n    /// @param _rocId rocId\r\n    function getRocrocId(uint _rocId)\r\n        external\r\n        view\r\n        returns (\r\n        uint rocId,\r\n        string dna,\r\n        uint marketsFlg\r\n    ) {\r\n        Roc memory roc = rocs[getRocIdToTokenId(_rocId)];\r\n        rocId = uint(roc.rocId);\r\n        dna = string(roc.dna);\r\n        marketsFlg = uint(roc.marketsFlg);\r\n    }\r\n\r\n    /// @notice rocIdからMarkets情報を返します。\r\n    /// @param _rocId rocId\r\n    function getMarketsRocId(uint _rocId)\r\n        external\r\n        view\r\n        returns (\r\n        address seller,\r\n        uint marketsPrice\r\n    ) {\r\n        uint checkTokenId = getRocIdToTokenId(_rocId);\r\n        Markets memory markets = tokenIdToMarkets[checkTokenId];\r\n        seller = markets.seller;\r\n        marketsPrice = uint(markets.marketsPrice);\r\n    }\r\n\r\n    /// @notice rocIdからオーナー情報を返します。\r\n    /// @param _rocId rocId\r\n    function getRocIndexToOwner(uint _rocId)\r\n        external\r\n        view\r\n        returns (\r\n        address owner\r\n    ) {\r\n        uint checkTokenId = getRocIdToTokenId(_rocId);\r\n        owner = rocIndexToOwner[checkTokenId];\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rocIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rocId\",\"type\":\"uint256\"},{\"name\":\"_dna\",\"type\":\"string\"}],\"name\":\"freeGiveProduce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rocIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rocId\",\"type\":\"uint256\"}],\"name\":\"getMarketsRocId\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"marketsPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eggPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rocId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rocId\",\"type\":\"uint256\"}],\"name\":\"getRocIndexToOwner\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rocId\",\"type\":\"uint256\"}],\"name\":\"getRocrocId\",\"outputs\":[{\"name\":\"rocId\",\"type\":\"uint256\"},{\"name\":\"dna\",\"type\":\"string\"},{\"name\":\"marketsFlg\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rocId\",\"type\":\"uint256\"},{\"name\":\"_marketsPrice\",\"type\":\"uint256\"}],\"name\":\"createRocSaleMarkets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rocId\",\"type\":\"uint256\"},{\"name\":\"_dna\",\"type\":\"string\"}],\"name\":\"giveProduce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cut\",\"type\":\"uint256\"}],\"name\":\"setOwnerCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoc\",\"outputs\":[{\"name\":\"rocId\",\"type\":\"uint256\"},{\"name\":\"dna\",\"type\":\"string\"},{\"name\":\"marketsFlg\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rocIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"evolvePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint128\"}],\"name\":\"setEvolvePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownershipTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rocs\",\"outputs\":[{\"name\":\"rocId\",\"type\":\"uint256\"},{\"name\":\"dna\",\"type\":\"string\"},{\"name\":\"marketsFlg\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_subtractFees\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rocId\",\"type\":\"uint256\"}],\"name\":\"cancelMarkets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint128\"}],\"name\":\"setEggPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rocId\",\"type\":\"uint256\"}],\"name\":\"cancelMarketsWhenPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rocId\",\"type\":\"uint256\"}],\"name\":\"getRocIdToTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"marketsPrice\",\"type\":\"uint128\"}],\"name\":\"MarketsCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"marketsPriceice\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"MarketsSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MarketsCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rocId\",\"type\":\"uint256\"}],\"name\":\"RocCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RocsCore","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://152f9256f4929a2224eb413d4437b69dfa601575014c68e90e2048c4304abf54"}]}