{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n        return 0;\r\n        }\r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Heritable\r\n * @dev The Heritable contract provides ownership transfer capabilities, in the\r\n * case that the current owner stops \"heartbeating\". Only the heir can pronounce the\r\n * owner's death.\r\n */\r\ncontract Heritable is Ownable {\r\n    address public heir;\r\n\r\n    // Time window the owner has to notify they are alive.\r\n    uint public heartbeatTimeout;\r\n\r\n    // Timestamp of the owner's death, as pronounced by the heir.\r\n    uint public timeOfDeath;\r\n\r\n    event HeirChanged(address indexed owner, address indexed newHeir);\r\n    event OwnerHeartbeated(address indexed owner);\r\n    event OwnerProclaimedDead(address indexed owner, address indexed heir, uint timeOfDeath);\r\n    event HeirOwnershipClaimed(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n    * @dev Throw an exception if called by any account other than the heir's.\r\n    */\r\n    modifier onlyHeir() {\r\n        require(msg.sender == heir);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @notice Create a new Heritable Contract with heir address 0x0.\r\n    * @param _heartbeatTimeout time available for the owner to notify they are alive,\r\n    * before the heir can take ownership.\r\n    */\r\n    function Heritable(uint _heartbeatTimeout) public {\r\n        setHeartbeatTimeout(_heartbeatTimeout);\r\n    }\r\n\r\n    function setHeir(address newHeir) public onlyOwner {\r\n        require(newHeir != owner);\r\n        heartbeat();\r\n        HeirChanged(owner, newHeir);\r\n        heir = newHeir;\r\n    }\r\n\r\n    /**\r\n    * @dev set heir = 0x0\r\n    */\r\n    function removeHeir() public onlyOwner {\r\n        heartbeat();\r\n        heir = 0;\r\n    }\r\n\r\n    /**\r\n    * @dev Heir can pronounce the owners death. To claim the ownership, they will\r\n    * have to wait for `heartbeatTimeout` seconds.\r\n    */\r\n    function proclaimDeath() public onlyHeir {\r\n        require(owner != heir); // added\r\n        require(ownerLives());\r\n        OwnerProclaimedDead(owner, heir, timeOfDeath);\r\n        timeOfDeath = now;\r\n    }\r\n\r\n    /**\r\n    * @dev Owner can send a heartbeat if they were mistakenly pronounced dead.\r\n    */\r\n    function heartbeat() public onlyOwner {\r\n        OwnerHeartbeated(owner);\r\n        timeOfDeath = 0;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows heir to transfer ownership only if heartbeat has timed out.\r\n    */\r\n    function claimHeirOwnership() public onlyHeir {\r\n        require(!ownerLives());\r\n        require(now >= timeOfDeath + heartbeatTimeout);\r\n        OwnershipTransferred(owner, heir);\r\n        HeirOwnershipClaimed(owner, heir);\r\n        owner = heir;\r\n        timeOfDeath = 0;\r\n    }\r\n\r\n    function setHeartbeatTimeout(uint newHeartbeatTimeout) internal onlyOwner {\r\n        require(ownerLives());\r\n        heartbeatTimeout = newHeartbeatTimeout;\r\n    }\r\n\r\n    function ownerLives() internal view returns (bool) {\r\n        return timeOfDeath == 0;\r\n    }\r\n}\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    // Required methods\r\n    function approve(address _to, uint _tokenId) public;\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function implementsERC721() public pure returns (bool);\r\n    function ownerOf(uint _tokenId) public view returns (address addr);\r\n    function takeOwnership(uint _tokenId) public;\r\n    function totalSupply() public view returns (uint total);\r\n    function transferFrom(address _from, address _to, uint _tokenId) public;\r\n    function transfer(address _to, uint _tokenId) public;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokenOfOwnerByIndex(address _owner, uint _index) external view returns (uint tokenId);\r\n    // function tokenMetadata(uint _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\ncontract BitArtToken is Heritable, ERC721 {\r\n    string public constant NAME = \"BitGallery\";\r\n    string public constant SYMBOL = \"BitArt\";\r\n\r\n    struct Art {\r\n        bytes32 data;\r\n    }\r\n\r\n    Art[] internal arts;\r\n\r\n    mapping (uint => address) public tokenOwner;\r\n    mapping (address => uint) public ownedTokenCount;\r\n    mapping (uint => address) public tokenApprovals;\r\n\r\n    event Transfer(address from, address to, uint tokenId);\r\n    event Approval(address owner, address approved, uint tokenId);\r\n\r\n    // 30 days to change owner\r\n    function BitArtToken() Heritable(2592000) public {}\r\n\r\n    function tokensOf(address _owner) external view returns(uint[]) {\r\n        uint tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            return new uint[](0);\r\n        } else {\r\n            uint[] memory result = new uint[](tokenCount);\r\n            uint totaltokens = totalSupply();\r\n            uint index = 0;\r\n            \r\n            for (uint tokenId = 0; tokenId < totaltokens; tokenId++) {\r\n                if (tokenOwner[tokenId] == _owner) {\r\n                    result[index] = tokenId;\r\n                    index++;\r\n                }\r\n            }\r\n            \r\n            return result;\r\n        }\r\n    }\r\n\r\n    function approve(address _to, uint _tokenId) public {\r\n        require(_owns(msg.sender, _tokenId));\r\n        tokenApprovals[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return ownedTokenCount[_owner];\r\n    }\r\n\r\n    function getArts() public view returns (bytes32[]) {\r\n        uint count = totalSupply();\r\n        bytes32[] memory result = new bytes32[](count);\r\n\r\n        for (uint i = 0; i < count; i++) {\r\n            result[i] = arts[i].data;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function name() public pure returns (string) {\r\n        return NAME;\r\n    }\r\n\r\n    function ownerOf(uint _tokenId) public view returns (address owner) {\r\n        owner = tokenOwner[_tokenId];\r\n        require(_addressNotNull(owner));\r\n    }\r\n\r\n    function symbol() public pure returns (string) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    function takeOwnership(uint _tokenId) public {\r\n        address newOwner = msg.sender;\r\n        require(_addressNotNull(newOwner));\r\n        require(_approved(newOwner, _tokenId));\r\n        address oldOwner = tokenOwner[_tokenId];\r\n\r\n        _transfer(oldOwner, newOwner, _tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint total) {\r\n        return arts.length;\r\n    }\r\n\r\n    function transfer(address _to, uint _tokenId) public {\r\n        require(_owns(msg.sender, _tokenId));\r\n        require(_addressNotNull(_to));\r\n\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _tokenId) public {\r\n        require(_owns(_from, _tokenId));\r\n        require(_approved(_to, _tokenId));\r\n        require(_addressNotNull(_to));\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n        require(_to != address(0));\r\n        require(tokenOwner[_tokenId] == address(0));\r\n\r\n        _transfer(0x0, _to, _tokenId);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _tokenId) internal {\r\n        require(_from != _to);\r\n        ownedTokenCount[_to]++;\r\n        tokenOwner[_tokenId] = _to;\r\n\r\n        if (_addressNotNull(_from)) {\r\n            ownedTokenCount[_from]--;\r\n            delete tokenApprovals[_tokenId];\r\n        }\r\n\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _addressNotNull(address _address) private pure returns (bool) {\r\n        return _address != address(0);\r\n    }\r\n\r\n    function _approved(address _to, uint _tokenId) private view returns (bool) {\r\n        return tokenApprovals[_tokenId] == _to;\r\n    }\r\n\r\n    function _owns(address _claimant, uint _tokenId) private view returns (bool) {\r\n        return _claimant == tokenOwner[_tokenId];\r\n    }\r\n}\r\n\r\ncontract BitAuction is BitArtToken {\r\n    using SafeMath for uint;\r\n\r\n    struct Auction {\r\n        uint basePrice;\r\n        uint64 time1;\r\n        uint64 time2;\r\n        uint8 pct1;\r\n        uint8 pct2;\r\n        uint8 discount;\r\n    }\r\n\r\n    uint internal _auctionStartsAfter;\r\n    uint internal _auctionDuration;\r\n    uint internal _auctionFee;\r\n\r\n    mapping (uint => Auction) public tokenAuction;\r\n\r\n    event AuctionRulesChanged(uint startsAfter, uint duration, uint fee);\r\n    event NewAuction(uint tokenId, uint discount);\r\n    event NewSaleDiscount(uint tokenId, uint discount);\r\n\r\n    function BitAuction() public { }\r\n\r\n    function setSaleDiscount(uint _tokenId, uint _discount) external {      \r\n        require(ownerOf(_tokenId) == msg.sender);\r\n        require(_discount <= 90);\r\n        require(_discount >= 10);\r\n\r\n        Auction storage auction = tokenAuction[_tokenId];\r\n        require(auction.basePrice > 0);        \r\n        require(auction.time2 <= now);\r\n        auction.discount = uint8(_discount);\r\n\r\n        NewSaleDiscount(_tokenId, _discount);\r\n    }\r\n\r\n    function canPurchase(uint _tokenId) public view returns (bool) {\r\n        Auction storage auction = tokenAuction[_tokenId];\r\n        require(auction.time1 > 0);\r\n        return (now >= auction.time1 && priceOf(_tokenId) > 0);\r\n    }\r\n\r\n    function getPrices(uint[] _ids) public view returns (uint[]) {\r\n        uint count = _ids.length;\r\n        bool isEmpty = count == 0;\r\n\r\n        if (isEmpty) {\r\n            count = totalSupply();\r\n        }\r\n\r\n        uint[] memory result = new uint[](count);\r\n        \r\n        for (uint i = 0; i < count; i++) {\r\n            uint tokenId = isEmpty ? i : _ids[i];\r\n            result[i] = priceOf(tokenId);\r\n        }        \r\n        \r\n        return result;\r\n    }\r\n\r\n    function priceOf(uint _tokenId) public view returns (uint) {\r\n        Auction storage auction = tokenAuction[_tokenId];\r\n        return _currentPrice(auction);\r\n    }\r\n\r\n    function setAuctionDurationRules(uint _timeAfter, uint _duration, uint _fee) public onlyOwner {  \r\n        require(_timeAfter >= 0 seconds);\r\n        require(_timeAfter <= 7 days);\r\n        require(_duration >= 24 hours);\r\n        require(_duration <= 30 days);\r\n        require(_fee >= 1);\r\n        require(_fee <= 5);\r\n        \r\n        _auctionStartsAfter = _timeAfter;\r\n        _auctionDuration = _duration;\r\n        _auctionFee = _fee;\r\n\r\n        AuctionRulesChanged(_timeAfter, _duration, _fee);\r\n    }\r\n\r\n    function _createCustomAuction(uint _tokenId, uint _basePrice, uint _time1, uint _time2, uint _pct1, uint _pct2) private {\r\n        require(_time1 >= now);\r\n        require(_time2 >= _time1);\r\n        require(_pct1 > 0);\r\n        require(_pct2 > 0);\r\n        \r\n        Auction memory auction = Auction({\r\n            basePrice: _basePrice, \r\n            time1: uint64(_time1), \r\n            time2: uint64(_time2), \r\n            pct1: uint8(_pct1), \r\n            pct2: uint8(_pct2), \r\n            discount: 0           \r\n        });\r\n\r\n        tokenAuction[_tokenId] = auction;\r\n    }\r\n\r\n    function _createNewTokenAuction(uint _tokenId, uint _basePrice) internal {\r\n        _createCustomAuction(_tokenId, _basePrice, now, now + _auctionStartsAfter + _auctionDuration, 100, 10);\r\n    }\r\n\r\n    function _createStandartAuction(uint _tokenId, uint _basePrice) internal {\r\n        uint start = now + _auctionStartsAfter;\r\n        _createCustomAuction(_tokenId, _basePrice, start, start + _auctionDuration, 200, 110);\r\n    }\r\n\r\n    function _currentPrice(Auction _auction) internal view returns (uint) {\r\n        if (_auction.discount > 0) {\r\n            return uint((_auction.basePrice * (100 - _auction.discount)) / 100);\r\n        }\r\n\r\n        uint _startingPrice = uint((_auction.basePrice * _auction.pct1) / 100);\r\n\r\n        if (_auction.time1 > now) {\r\n            return _startingPrice;\r\n        }\r\n\r\n        uint _secondsPassed = uint(now - _auction.time1);\r\n        uint _duration = uint(_auction.time2 - _auction.time1);\r\n        uint _endingPrice = uint((_auction.basePrice * _auction.pct2) / 100);\r\n\r\n        if (_secondsPassed >= _duration) {\r\n            return _endingPrice;\r\n        } else {\r\n            int totalPriceChange = int(_endingPrice) - int(_startingPrice);\r\n            int currentPriceChange = totalPriceChange * int(_secondsPassed) / int(_duration);\r\n            int currentPrice = int(_startingPrice) + currentPriceChange;\r\n\r\n            return uint(currentPrice);\r\n        }\r\n    }\r\n\r\n    function _computePrice(uint _secondsPassed, uint _duration, uint _startingPrice, uint _endingPrice) private pure returns (uint) {\r\n        if (_secondsPassed >= _duration) {\r\n            return _endingPrice;\r\n        } else {\r\n            int totalPriceChange = int(_endingPrice) - int(_startingPrice);\r\n            int currentPriceChange = totalPriceChange * int(_secondsPassed) / int(_duration);\r\n            int currentPrice = int(_startingPrice) + currentPriceChange;\r\n\r\n            return uint(currentPrice);\r\n        }\r\n    }\r\n}\r\n\r\ncontract BitGallery is BitAuction {\r\n    using SafeMath for uint;\r\n\r\n    string public infoMessage;\r\n\r\n    event TokenSold(uint tokenId, uint price, address from, address to);\r\n    event NewToken(uint tokenId, string metadata);\r\n\r\n    function BitGallery() public {\r\n        setAuctionDurationRules(24 hours, 6 days, 3);\r\n\r\n        setMessage(\"Our web site is www.bitgallery.co\");                          \r\n    }\r\n\r\n    function() public payable {}\r\n\r\n    function addArt(string _keyData, uint _basePrice) public onlyOwner {\r\n        return addArtTo(address(this), _keyData, _basePrice);\r\n    }\r\n\r\n    function addArtTo(address _owner, string _keyData, uint _basePrice) public onlyOwner {\r\n        require(_basePrice >= 1 finney);\r\n        \r\n        Art memory _art = Art({\r\n            data: keccak256(_keyData)\r\n        });\r\n\r\n        uint tokenId = arts.push(_art) - 1;\r\n        NewToken(tokenId, _keyData);\r\n        _mint(_owner, tokenId);\r\n        _createNewTokenAuction(tokenId, _basePrice);\r\n    }\r\n\r\n    function artExists(string _keydata) public view returns (bool) {\r\n        for (uint i = 0; i < totalSupply(); i++) {\r\n            if (arts[i].data == keccak256(_keydata)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function fullDataOf(uint _tokenId) public view returns (\r\n        uint basePrice,\r\n        uint64 time1,\r\n        uint64 time2,\r\n        uint8 pct1,\r\n        uint8 pct2,\r\n        uint8 discount,\r\n        uint currentPrice,\r\n        bool _canPurchase,\r\n        address owner\r\n    ) {\r\n        Auction storage auction = tokenAuction[_tokenId];\r\n        basePrice = auction.basePrice;\r\n        time1 = auction.time1;\r\n        time2 = auction.time2;\r\n        pct1 = auction.pct1;\r\n        pct2 = auction.pct2;\r\n        discount = auction.discount;\r\n        currentPrice = priceOf(_tokenId);\r\n        _canPurchase = canPurchase(_tokenId);\r\n        owner = ownerOf(_tokenId);\r\n    }\r\n\r\n    function payout(address _to) public onlyOwner {\r\n        require(_to != address(this));\r\n        \r\n        if (_to == address(0)) { \r\n            _to = msg.sender;\r\n        }\r\n\r\n        _to.transfer(this.balance);\r\n    }\r\n\r\n    function purchase(uint _tokenId) public payable {\r\n        Auction storage auction = tokenAuction[_tokenId];\r\n        require(now >= auction.time1);\r\n        uint price = _currentPrice(auction);\r\n        require(msg.value >= price);\r\n\r\n        uint payment = uint((price * (100 - _auctionFee)) / 100);\r\n        uint purchaseExcess = msg.value - price;\r\n        _createStandartAuction(_tokenId, price);\r\n\r\n        address from = ownerOf(_tokenId);\r\n        address to = msg.sender;\r\n        _transfer(from, to, _tokenId);\r\n\r\n        if (from != address(this)) {\r\n            from.transfer(payment);\r\n        }\r\n\r\n        TokenSold(_tokenId, price, from, to);\r\n        msg.sender.transfer(purchaseExcess);\r\n    }\r\n\r\n    function setMessage(string _message) public onlyOwner {        \r\n        infoMessage = _message;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimHeirOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownedTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHeir\",\"type\":\"address\"}],\"name\":\"setHeir\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"proclaimDeath\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_keyData\",\"type\":\"string\"},{\"name\":\"_basePrice\",\"type\":\"uint256\"}],\"name\":\"addArt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"setMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_discount\",\"type\":\"uint256\"}],\"name\":\"setSaleDiscount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"heartbeat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"fullDataOf\",\"outputs\":[{\"name\":\"basePrice\",\"type\":\"uint256\"},{\"name\":\"time1\",\"type\":\"uint64\"},{\"name\":\"time2\",\"type\":\"uint64\"},{\"name\":\"pct1\",\"type\":\"uint8\"},{\"name\":\"pct2\",\"type\":\"uint8\"},{\"name\":\"discount\",\"type\":\"uint8\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"_canPurchase\",\"type\":\"bool\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getArts\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"heartbeatTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"canPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"heir\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"infoMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_keydata\",\"type\":\"string\"}],\"name\":\"artExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenApprovals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeOfDeath\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeAfter\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setAuctionDurationRules\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeHeir\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenAuction\",\"outputs\":[{\"name\":\"basePrice\",\"type\":\"uint256\"},{\"name\":\"time1\",\"type\":\"uint64\"},{\"name\":\"time2\",\"type\":\"uint64\"},{\"name\":\"pct1\",\"type\":\"uint8\"},{\"name\":\"pct2\",\"type\":\"uint8\"},{\"name\":\"discount\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_keyData\",\"type\":\"string\"},{\"name\":\"_basePrice\",\"type\":\"uint256\"}],\"name\":\"addArtTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"NewToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startsAfter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"AuctionRulesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"NewAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"NewSaleDiscount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newHeir\",\"type\":\"address\"}],\"name\":\"HeirChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerHeartbeated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"heir\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timeOfDeath\",\"type\":\"uint256\"}],\"name\":\"OwnerProclaimedDead\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"HeirOwnershipClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BitGallery","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2d38690b3cb2f39fa03f8d20b1fc9f8b9b165fa01258d2bc3a6d7584ca9d3c3f"}]}