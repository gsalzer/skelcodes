{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract BatCave is Pausable {\r\n    // total eggs one bat can produce per day\r\n    uint256 public EGGS_TO_HATCH_1BAT = 86400;\r\n    // how much bat for newbie user\r\n    uint256 public STARTING_BAT = 300;\r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    address public batman;\r\n    address public superman;\r\n    address public aquaman;\r\n    mapping(address => uint256) public hatcheryBat;\r\n    mapping(address => uint256) public claimedEggs;\r\n    mapping(address => uint256) public lastHatch;\r\n    mapping(address => address) public referrals;\r\n    mapping (address => uint256) realRef;\r\n\r\n\r\n    // total eggs in market\r\n    uint256 public marketEggs;\r\n\r\n    function BatCave() public{\r\n        paused = false;\r\n    }\r\n\r\n    modifier onlyDCFamily() {\r\n      require(batman!=address(0) && superman!=address(0) && aquaman!=address(0));\r\n      require(msg.sender == owner || msg.sender == batman || msg.sender == superman || msg.sender == aquaman);\r\n      _;\r\n    }\r\n\r\n    function setBatman(address _bat) public onlyOwner{\r\n      require(_bat!=address(0));\r\n      batman = _bat;\r\n    }\r\n\r\n    function setSuperman(address _bat) public onlyOwner{\r\n      require(_bat!=address(0));\r\n      superman = _bat;\r\n    }\r\n\r\n    function setAquaman(address _bat) public onlyOwner{\r\n      require(_bat!=address(0));\r\n      aquaman = _bat;\r\n    }\r\n\r\n    function setRealRef(address _ref,uint256 _isReal) public onlyOwner{\r\n        require(_ref!=address(0));\r\n        require(_isReal==0 || _isReal==1);\r\n        realRef[_ref] = _isReal;\r\n    }\r\n\r\n    function withdraw(uint256 _percent) public onlyDCFamily {\r\n        require(_percent>0&&_percent<=100);\r\n        uint256 val = SafeMath.div(SafeMath.mul(address(this).balance,_percent), 300);\r\n        if (val>0){\r\n          batman.transfer(val);\r\n          superman.transfer(val);\r\n          aquaman.transfer(val);\r\n        }\r\n    }\r\n\r\n    // hatch eggs into bats\r\n    function hatchEggs(address ref) public whenNotPaused {\r\n        // set user's referral only if which is empty\r\n        if (referrals[msg.sender] == address(0) && referrals[msg.sender] != msg.sender) {\r\n            //referrals[msg.sender] = ref;\r\n            if (realRef[ref] == 1){\r\n                referrals[msg.sender] = ref;\r\n            }else{\r\n                referrals[msg.sender] = owner;\r\n            }\r\n\r\n        }\r\n        uint256 eggsUsed = getMyEggs();\r\n        uint256 newBat = SafeMath.div(eggsUsed, EGGS_TO_HATCH_1BAT);\r\n        hatcheryBat[msg.sender] = SafeMath.add(hatcheryBat[msg.sender], newBat);\r\n        claimedEggs[msg.sender] = 0;\r\n        lastHatch[msg.sender] = now;\r\n\r\n        //send referral eggs 20% of user\r\n        //claimedEggs[referrals[msg.sender]] = SafeMath.add(claimedEggs[referrals[msg.sender]], SafeMath.div(eggsUsed, 5));\r\n        claimedEggs[referrals[msg.sender]] = SafeMath.add(claimedEggs[referrals[msg.sender]], SafeMath.div(eggsUsed, 3));\r\n\r\n        //boost market to nerf bat hoarding\r\n        // add 10% of user into market\r\n        marketEggs = SafeMath.add(marketEggs, SafeMath.div(eggsUsed, 10));\r\n    }\r\n\r\n    // sell eggs for eth\r\n    function sellEggs() public whenNotPaused {\r\n        uint256 hasEggs = getMyEggs();\r\n        uint256 eggValue = calculateEggSell(hasEggs);\r\n        uint256 fee = devFee(eggValue);\r\n        // kill one third of the owner's snails on egg sale\r\n        hatcheryBat[msg.sender] = SafeMath.mul(SafeMath.div(hatcheryBat[msg.sender], 3), 2);\r\n        claimedEggs[msg.sender] = 0;\r\n        lastHatch[msg.sender] = now;\r\n        marketEggs = SafeMath.add(marketEggs, hasEggs);\r\n        owner.transfer(fee);\r\n        msg.sender.transfer(SafeMath.sub(eggValue, fee));\r\n    }\r\n\r\n    function buyEggs() public payable whenNotPaused {\r\n        uint256 eggsBought = calculateEggBuy(msg.value, SafeMath.sub(address(this).balance, msg.value));\r\n        eggsBought = SafeMath.sub(eggsBought, devFee(eggsBought));\r\n        owner.transfer(devFee(msg.value));\r\n        claimedEggs[msg.sender] = SafeMath.add(claimedEggs[msg.sender], eggsBought);\r\n    }\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt, uint256 rs, uint256 bs) public view returns(uint256) {\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN, bs), SafeMath.add(PSNH, SafeMath.div(SafeMath.add(SafeMath.mul(PSN, rs), SafeMath.mul(PSNH, rt)), rt)));\r\n    }\r\n\r\n    // eggs to eth\r\n    function calculateEggSell(uint256 eggs) public view returns(uint256) {\r\n        return calculateTrade(eggs, marketEggs, address(this).balance);\r\n    }\r\n\r\n    function calculateEggBuy(uint256 eth, uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth, contractBalance, marketEggs);\r\n    }\r\n\r\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256) {\r\n        return calculateEggBuy(eth, address(this).balance);\r\n    }\r\n\r\n    // eggs amount to eth for developers: eggs*4/100\r\n    function devFee(uint256 amount) public pure returns(uint256) {\r\n        return SafeMath.div(SafeMath.mul(amount, 4), 100);\r\n    }\r\n\r\n    // add eggs when there's no more eggs\r\n    // 864000000 with 0.02 Ether\r\n    function seedMarket(uint256 eggs) public payable {\r\n        require(marketEggs == 0);\r\n        marketEggs = eggs;\r\n    }\r\n\r\n    function getFreeBat() public payable whenNotPaused {\r\n        require(msg.value == 0.001 ether);\r\n        require(hatcheryBat[msg.sender] == 0);\r\n        lastHatch[msg.sender] = now;\r\n        hatcheryBat[msg.sender] = STARTING_BAT;\r\n        owner.transfer(msg.value);\r\n    }\r\n\r\n    function getBalance() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getMyBat() public view returns(uint256) {\r\n        return hatcheryBat[msg.sender];\r\n    }\r\n\r\n    function getMyEggs() public view returns(uint256) {\r\n        return SafeMath.add(claimedEggs[msg.sender], getEggsSinceLastHatch(msg.sender));\r\n    }\r\n\r\n    function getEggsSinceLastHatch(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed = min(EGGS_TO_HATCH_1BAT, SafeMath.sub(now, lastHatch[adr]));\r\n        return SafeMath.mul(secondsPassed, hatcheryBat[adr]);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns(uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bat\",\"type\":\"address\"}],\"name\":\"setBatman\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyBat\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyEggs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bat\",\"type\":\"address\"}],\"name\":\"setAquaman\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"batman\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedEggs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EGGS_TO_HATCH_1BAT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcheryBat\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFreeBat\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aquaman\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_BAT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref\",\"type\":\"address\"},{\"name\":\"_isReal\",\"type\":\"uint256\"}],\"name\":\"setRealRef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bat\",\"type\":\"address\"}],\"name\":\"setSuperman\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superman\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"BatCave","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1fa68b6d132dfc9331b6e1e36407d4f1c360b2e0697cc8b3bbb7f9ff7c8926be"}]}