{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n// File: contracts/NokuPricingPlan.sol\r\n\r\n/**\r\n* @dev The NokuPricingPlan contract defines the responsibilities of a Noku pricing plan.\r\n*/\r\ninterface NokuPricingPlan {\r\n    /**\r\n    * @dev Pay the fee for the service identified by the specified name.\r\n    * The fee amount shall already be approved by the client.\r\n    * @param serviceName The name of the target service.\r\n    * @param multiplier The multiplier of the base service fee to apply.\r\n    * @param client The client of the target service.\r\n    * @return true if fee has been paid.\r\n    */\r\n    function payFee(bytes32 serviceName, uint256 multiplier, address client) public returns(bool paid);\r\n\r\n    /**\r\n    * @dev Get the usage fee for the service identified by the specified name.\r\n    * The returned fee amount shall be approved before using #payFee method.\r\n    * @param serviceName The name of the target service.\r\n    * @param multiplier The multiplier of the base service fee to apply.\r\n    * @return The amount to approve before really paying such fee.\r\n    */\r\n    function usageFee(bytes32 serviceName, uint256 multiplier) public constant returns(uint fee);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/NokuTokenBurner.sol\r\n\r\ncontract BurnableERC20 is ERC20 {\r\n    function burn(uint256 amount) public returns (bool burned);\r\n}\r\n\r\n/**\r\n* @dev The NokuTokenBurner contract has the responsibility to burn the configured fraction of received\r\n* ERC20-compliant tokens and distribute the remainder to the configured wallet.\r\n*/\r\ncontract NokuTokenBurner is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    event LogNokuTokenBurnerCreated(address indexed caller, address indexed wallet);\r\n    event LogBurningPercentageChanged(address indexed caller, uint256 indexed burningPercentage);\r\n\r\n    // The wallet receiving the unburnt tokens.\r\n    address public wallet;\r\n\r\n    // The percentage of tokens to burn after being received (range [0, 100])\r\n    uint256 public burningPercentage;\r\n\r\n    // The cumulative amount of burnt tokens.\r\n    uint256 public burnedTokens;\r\n\r\n    // The cumulative amount of tokens transferred back to the wallet.\r\n    uint256 public transferredTokens;\r\n\r\n    /**\r\n    * @dev Create a new NokuTokenBurner with predefined burning fraction.\r\n    * @param _wallet The wallet receiving the unburnt tokens.\r\n    */\r\n    function NokuTokenBurner(address _wallet) public {\r\n        require(_wallet != address(0));\r\n        \r\n        wallet = _wallet;\r\n        burningPercentage = 100;\r\n\r\n        LogNokuTokenBurnerCreated(msg.sender, _wallet);\r\n    }\r\n\r\n    /**\r\n    * @dev Change the percentage of tokens to burn after being received.\r\n    * @param _burningPercentage The percentage of tokens to be burnt.\r\n    */\r\n    function setBurningPercentage(uint256 _burningPercentage) public onlyOwner {\r\n        require(0 <= _burningPercentage && _burningPercentage <= 100);\r\n        require(_burningPercentage != burningPercentage);\r\n        \r\n        burningPercentage = _burningPercentage;\r\n\r\n        LogBurningPercentageChanged(msg.sender, _burningPercentage);\r\n    }\r\n\r\n    /**\r\n    * @dev Called after burnable tokens has been transferred for burning.\r\n    * @param _token THe extended ERC20 interface supported by the sent tokens.\r\n    * @param _amount The amount of burnable tokens just arrived ready for burning.\r\n    */\r\n    function tokenReceived(address _token, uint256 _amount) public whenNotPaused {\r\n        require(_token != address(0));\r\n        require(_amount > 0);\r\n\r\n        uint256 amountToBurn = _amount.mul(burningPercentage).div(100);\r\n        if (amountToBurn > 0) {\r\n            assert(BurnableERC20(_token).burn(amountToBurn));\r\n            \r\n            burnedTokens = burnedTokens.add(amountToBurn);\r\n        }\r\n\r\n        uint256 amountToTransfer = _amount.sub(amountToBurn);\r\n        if (amountToTransfer > 0) {\r\n            assert(BurnableERC20(_token).transfer(wallet, amountToTransfer));\r\n\r\n            transferredTokens = transferredTokens.add(amountToTransfer);\r\n        }\r\n    }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(burner, _value);\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\r\n\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/NokuCustomERC20.sol\r\n\r\n/**\r\n* @dev The NokuCustomERC20Token contract is a custom ERC20-compliant token available in the Noku Service Platform (NSP).\r\n* The Noku customer is able to choose the token name, symbol, decimals, initial supply and to administer its lifecycle\r\n* by minting or burning tokens in order to increase or decrease the token supply.\r\n*/\r\ncontract NokuCustomERC20 is Ownable, DetailedERC20, MintableToken, BurnableToken {\r\n    using SafeMath for uint256;\r\n\r\n    event LogNokuCustomERC20Created(\r\n        address indexed caller,\r\n        string indexed name,\r\n        string indexed symbol,\r\n        uint8 decimals,\r\n        address pricingPlan,\r\n        address serviceProvider\r\n    );\r\n    event LogTransferFeePercentageChanged(address indexed caller, uint256 indexed transferFeePercentage);\r\n    event LogPricingPlanChanged(address indexed caller, address indexed pricingPlan);\r\n\r\n    // The entity acting as Custom token service provider i.e. Noku\r\n    address public serviceProvider;\r\n\r\n    // The pricing plan determining the fee to be paid in NOKU tokens by customers for using Noku services\r\n    address public pricingPlan;\r\n\r\n    // The fee percentage for Custom token transfer or zero if transfer is free of charge\r\n    uint256 public transferFeePercentage;\r\n\r\n    bytes32 public constant CUSTOM_ERC20_BURN_SERVICE_NAME = \"NokuCustomERC20.burn\";\r\n    bytes32 public constant CUSTOM_ERC20_MINT_SERVICE_NAME = \"NokuCustomERC20.mint\";\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only by service provider i.e. Noku.\r\n    */\r\n    modifier onlyServiceProvider() {\r\n        require(msg.sender == serviceProvider);\r\n        _;\r\n    }\r\n\r\n    function NokuCustomERC20(\r\n        string _name,\r\n        string _symbol,\r\n        uint8 _decimals,\r\n        address _pricingPlan,\r\n        address _serviceProvider\r\n    )\r\n    DetailedERC20 (_name, _symbol, _decimals) public\r\n    {\r\n        require(bytes(_name).length > 0);\r\n        require(bytes(_symbol).length > 0);\r\n        require(_pricingPlan != 0);\r\n        require(_serviceProvider != 0);\r\n\r\n        pricingPlan = _pricingPlan;\r\n        serviceProvider = _serviceProvider;\r\n\r\n        LogNokuCustomERC20Created(\r\n            msg.sender,\r\n            _name,\r\n            _symbol,\r\n            _decimals,\r\n            _pricingPlan,\r\n            _serviceProvider\r\n        );\r\n    }\r\n\r\n    function isCustomToken() public pure returns(bool isCustom) {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Change the transfer fee percentage to be paid in Custom tokens.\r\n    * @param _transferFeePercentage The fee percentage to be paid for transfer in range [0, 100].\r\n    */\r\n    function setTransferFeePercentage(uint256 _transferFeePercentage) public onlyOwner {\r\n        require(0 <= _transferFeePercentage && _transferFeePercentage <= 100);\r\n        require(_transferFeePercentage != transferFeePercentage);\r\n\r\n        transferFeePercentage = _transferFeePercentage;\r\n\r\n        LogTransferFeePercentageChanged(msg.sender, _transferFeePercentage);\r\n    }\r\n\r\n    /**\r\n    * @dev Change the pricing plan of service fee to be paid in NOKU tokens.\r\n    * @param _pricingPlan The pricing plan of NOKU token to be paid, zero means flat subscription.\r\n    */\r\n    function setPricingPlan(address _pricingPlan) public onlyServiceProvider {\r\n        require(_pricingPlan != 0);\r\n        require(_pricingPlan != pricingPlan);\r\n\r\n        pricingPlan = _pricingPlan;\r\n\r\n        LogPricingPlanChanged(msg.sender, _pricingPlan);\r\n    }\r\n\r\n    /**\r\n    * @dev Get the fee to be paid for the transfer of NOKU tokens.\r\n    * @param _value The amount of NOKU tokens to be transferred.\r\n    */\r\n    function transferFee(uint256 _value) public view returns (uint256 usageFee) {\r\n        return _value.mul(transferFeePercentage).div(100);\r\n    }\r\n\r\n    /**\r\n    * @dev Override #transfer for optionally paying fee to Custom token owner.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool transferred) {\r\n        if (transferFeePercentage == 0) {\r\n            return super.transfer(_to, _value);\r\n        }\r\n        else {\r\n            uint256 usageFee = transferFee(_value);\r\n            uint256 netValue = _value.sub(usageFee);\r\n\r\n            bool feeTransferred = super.transfer(owner, usageFee);\r\n            bool netValueTransferred = super.transfer(_to, netValue);\r\n\r\n            return feeTransferred && netValueTransferred;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Override #transferFrom for optionally paying fee to Custom token owner.\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool transferred) {\r\n        if (transferFeePercentage == 0) {\r\n            return super.transferFrom(_from, _to, _value);\r\n        }\r\n        else {\r\n            uint256 usageFee = transferFee(_value);\r\n            uint256 netValue = _value.sub(usageFee);\r\n\r\n            bool feeTransferred = super.transferFrom(_from, owner, usageFee);\r\n            bool netValueTransferred = super.transferFrom(_from, _to, netValue);\r\n\r\n            return feeTransferred && netValueTransferred;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Burn a specific amount of tokens, paying the service fee.\r\n    * @param _amount The amount of token to be burned.\r\n    */\r\n    function burn(uint256 _amount) public {\r\n        require(_amount > 0);\r\n\r\n        super.burn(_amount);\r\n\r\n        require(NokuPricingPlan(pricingPlan).payFee(CUSTOM_ERC20_BURN_SERVICE_NAME, _amount, msg.sender));\r\n    }\r\n\r\n    /**\r\n    * @dev Mint a specific amount of tokens, paying the service fee.\r\n    * @param _to The address that will receive the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool minted) {\r\n        require(_to != 0);\r\n        require(_amount > 0);\r\n\r\n        super.mint(_to, _amount);\r\n\r\n        require(NokuPricingPlan(pricingPlan).payFee(CUSTOM_ERC20_MINT_SERVICE_NAME, _amount, msg.sender));\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"transferred\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"minted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pricingPlan\",\"type\":\"address\"}],\"name\":\"setPricingPlan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CUSTOM_ERC20_BURN_SERVICE_NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CUSTOM_ERC20_MINT_SERVICE_NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transferFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setTransferFeePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"serviceProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFeePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"transferred\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFee\",\"outputs\":[{\"name\":\"usageFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricingPlan\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCustomToken\",\"outputs\":[{\"name\":\"isCustom\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_pricingPlan\",\"type\":\"address\"},{\"name\":\"_serviceProvider\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"pricingPlan\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"serviceProvider\",\"type\":\"address\"}],\"name\":\"LogNokuCustomERC20Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transferFeePercentage\",\"type\":\"uint256\"}],\"name\":\"LogTransferFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"pricingPlan\",\"type\":\"address\"}],\"name\":\"LogPricingPlanChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"NokuCustomERC20","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000e0670e32c120813a54860442155659cfa029d343000000000000000000000000E4FD84c00EFE090E7204b3060B62991b92581afc0000000000000000000000000000000000000000000000000000000000000002473100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024731000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://d5048f84a0d33c6353fba4d82ddda899d1c71a4e8d704b53f173378c1e98ac8b"}]}