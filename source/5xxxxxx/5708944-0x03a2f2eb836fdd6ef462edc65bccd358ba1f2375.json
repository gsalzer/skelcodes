{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath \r\n{\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 result = a * b;\r\n        assert(a == 0 || result / a == b);\r\n        return result;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 result = a / b;\r\n        return result;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        assert(b <= a); \r\n        return a - b; \r\n    } \r\n  \r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    { \r\n        uint256 result = a + b; \r\n        assert(result >= a);\r\n        return result;\r\n    }\r\n \r\n    function getAllValuesSum(uint256[] values)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        uint256 result = 0;\r\n        \r\n        for (uint i = 0; i < values.length; i++){\r\n            result = add(result, values[i]);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    constructor() public {\r\n        ownerAddress = msg.sender;\r\n    }\r\n\r\n    event TransferOwnership(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    address public ownerAddress;\r\n    //wallet that can change owner\r\n    address internal masterKey = 0x819466D9C043DBb7aB4E1168aB8E014c3dCAA470;\r\n   \r\n    function transferOwnership(address newOwner) \r\n        public \r\n        returns(bool);\r\n    \r\n   \r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerAddress);\r\n        _;\r\n    }\r\n    // Prevents user to send transaction on his own address\r\n    modifier notSender(address owner){\r\n        require(msg.sender != owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic\r\n{\r\n    event Transfer(\r\n        address indexed from, \r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n    \r\n    uint256 public totalSupply;\r\n    \r\n    function balanceOf(address who) public view returns(uint256);\r\n    function transfer(address to, uint256 value) public returns(bool);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct WalletData {\r\n        uint256 tokensAmount;\r\n        uint256 freezedAmount;\r\n        bool canFreezeTokens;\r\n    }\r\n   \r\n    mapping(address => WalletData) wallets;\r\n\r\n    function transfer(address to, uint256 value)\r\n        public\r\n        notSender(to)\r\n        returns(bool)\r\n    {    \r\n        require(to != address(0) \r\n        && wallets[msg.sender].tokensAmount >= value \r\n        && (wallets[msg.sender].canFreezeTokens && checkIfCanUseTokens(msg.sender, value)));\r\n\r\n        uint256 amount = wallets[msg.sender].tokensAmount.sub(value);\r\n        wallets[msg.sender].tokensAmount = amount;\r\n        wallets[to].tokensAmount = wallets[to].tokensAmount.add(value);\r\n        \r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address owner)\r\n        public\r\n        view\r\n        returns(uint256 balance)\r\n    {\r\n        return wallets[owner].tokensAmount;\r\n    }\r\n    // Check wallet on unfreeze tokens amount\r\n    function checkIfCanUseTokens(\r\n        address owner,\r\n        uint256 amount\r\n    ) \r\n        internal\r\n        view\r\n        returns(bool) \r\n    {\r\n        uint256 unfreezedAmount = wallets[owner].tokensAmount - wallets[owner].freezedAmount;\r\n        return amount <= unfreezedAmount;\r\n    }\r\n}\r\n\r\ncontract FreezableToken is BasicToken {\r\n    event AllowFreeze(address indexed who);\r\n    event DissallowFreeze(address indexed who);\r\n    event FreezeTokens(address indexed who, uint256 freezeAmount);\r\n    event UnfreezeTokens(address indexed who, uint256 unfreezeAmount);\r\n        \r\n    uint256 public freezeTokensAmount = 0;\r\n    \r\n    // Give permission to a wallet for freeze tokens.\r\n    function allowFreezing(address owner)\r\n        public\r\n        onlyOwner\r\n        returns(bool)\r\n    {\r\n        require(!wallets[owner].canFreezeTokens);\r\n        wallets[owner].canFreezeTokens = true;\r\n        emit AllowFreeze(owner);\r\n        return true;\r\n    }\r\n    \r\n    function dissalowFreezing(address owner)\r\n        public\r\n        onlyOwner\r\n        returns(bool)\r\n    {\r\n        require(wallets[owner].canFreezeTokens);\r\n        wallets[owner].canFreezeTokens = false;\r\n        wallets[owner].freezedAmount = 0;\r\n        \r\n        emit DissallowFreeze(owner);\r\n        return true;\r\n    }\r\n    \r\n    function freezeAllowance(address owner)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        return wallets[owner].canFreezeTokens;   \r\n    }\r\n    // Freeze tokens on sender wallet if have permission.\r\n    function freezeTokens(\r\n        uint256 amount\r\n    )\r\n        public\r\n        isFreezeAllowed\r\n        returns(bool)\r\n    {\r\n        uint256 freezedAmount = wallets[msg.sender].freezedAmount.add(amount);\r\n        require(wallets[msg.sender].tokensAmount >= freezedAmount);\r\n        wallets[msg.sender].freezedAmount = freezedAmount;\r\n        emit FreezeTokens(msg.sender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function showFreezedTokensAmount(address owner)\r\n    public\r\n    view\r\n    returns(uint256)\r\n    {\r\n        return wallets[owner].freezedAmount;\r\n    }\r\n    \r\n    function unfreezeTokens(\r\n        uint256 amount\r\n    ) \r\n        public\r\n        isFreezeAllowed\r\n        returns(bool)\r\n    {\r\n        uint256 freezeAmount = wallets[msg.sender].freezedAmount.sub(amount);\r\n        wallets[msg.sender].freezedAmount = freezeAmount;\r\n        emit UnfreezeTokens(msg.sender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function getUnfreezedTokens(address owner)\r\n    internal\r\n    view\r\n    returns(uint256)\r\n    {\r\n        return wallets[owner].tokensAmount - wallets[owner].freezedAmount;\r\n    }\r\n    \r\n    modifier isFreezeAllowed() {\r\n        require(freezeAllowance(msg.sender));\r\n        _;\r\n    }\r\n}\r\n\r\ncontract MultisendableToken is FreezableToken\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    function massTransfer(\r\n        address[] addresses,\r\n        uint[] values\r\n    ) \r\n        public\r\n        onlyOwner\r\n        returns(bool) \r\n    {\r\n        for (uint i = 0; i < addresses.length; i++){\r\n            transferFromOwner(addresses[i], values[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transferFromOwner(\r\n        address to,\r\n        uint256 value\r\n    )\r\n        internal\r\n        onlyOwner\r\n    {\r\n        require(to != address(0)\r\n        && wallets[ownerAddress].tokensAmount >= value\r\n        && (freezeAllowance(ownerAddress) && checkIfCanUseTokens(ownerAddress, value)));\r\n        \r\n        uint256 freezeAmount = wallets[ownerAddress].tokensAmount.sub(value);\r\n        wallets[ownerAddress].tokensAmount = freezeAmount;\r\n        wallets[to].tokensAmount = wallets[to].tokensAmount.add(value);\r\n        \r\n        emit Transfer(ownerAddress, to, value);\r\n    }\r\n}\r\n    \r\ncontract Airdropper is MultisendableToken\r\n{\r\n    using SafeMath for uint256[];\r\n    \r\n    event Airdrop(uint256 tokensDropped, uint256 airdropCount);\r\n    event AirdropFinished();\r\n    \r\n    uint256 public airdropsCount = 0;\r\n    uint256 public airdropTotalSupply = 0;\r\n    uint256 public distributedTokensAmount = 0;\r\n    bool public airdropFinished = false;\r\n    \r\n    function airdropToken(\r\n        address[] addresses,\r\n        uint256[] values\r\n    ) \r\n        public\r\n        onlyOwner\r\n        returns(bool) \r\n    {\r\n        uint256 result = distributedTokensAmount + values.getAllValuesSum();\r\n        require(!airdropFinished && result <= airdropTotalSupply);\r\n        \r\n        distributedTokensAmount = result;\r\n        airdropsCount++;\r\n        \r\n        emit Airdrop(values.getAllValuesSum(), airdropsCount);\r\n        return massTransfer(addresses, values);\r\n    }\r\n    \r\n    function finishAirdrops() public onlyOwner {\r\n        // Can't finish airdrop before send all tokens for airdrop.\r\n        require(distributedTokensAmount == airdropTotalSupply);\r\n        airdropFinished = true;\r\n        emit AirdropFinished();\r\n    }\r\n}\r\n\r\ncontract CryptosoulToken is Airdropper {\r\n    event Mint(address indexed to, uint256 value);\r\n    event AllowMinting();\r\n    event Burn(address indexed from, uint256 value);\r\n    \r\n    string constant public name = \"CryptoSoul\";\r\n    string constant public symbol = \"SOUL\";\r\n    uint constant public decimals = 6;\r\n    \r\n    uint256 constant public START_TOKENS = 500000000 * 10**decimals; //500M start\r\n    uint256 constant public MINT_AMOUNT = 1360000 * 10**decimals;\r\n    uint32 constant public MINT_INTERVAL_SEC = 1 days; // 24 hours\r\n    uint256 constant private MAX_BALANCE_VALUE = 2**256 - 1;\r\n    uint constant public startMintingData = 1538352000;\r\n    \r\n    uint public nextMintPossibleTime = 0;\r\n    bool public canMint = false;\r\n    \r\n    constructor() public {\r\n        wallets[ownerAddress].tokensAmount = START_TOKENS;\r\n        wallets[ownerAddress].canFreezeTokens = true;\r\n        totalSupply = START_TOKENS;\r\n        airdropTotalSupply = 200000000 * 10**decimals;\r\n        emit Mint(ownerAddress, START_TOKENS);\r\n    }\r\n\r\n    function allowMinting()\r\n    public\r\n    onlyOwner\r\n    {\r\n        // Can start minting token after 01.10.2018\r\n        require(now >= startMintingData);\r\n        nextMintPossibleTime = now;\r\n        canMint = true;\r\n        emit AllowMinting();\r\n    }\r\n\r\n    function mint()\r\n        public\r\n        onlyOwner\r\n        returns(bool)\r\n    {\r\n        require(canMint &&\r\n        totalSupply + MINT_AMOUNT <= MAX_BALANCE_VALUE\r\n        && now >= nextMintPossibleTime);\r\n        nextMintPossibleTime = nextMintPossibleTime.add(MINT_INTERVAL_SEC);\r\n        uint256 freezeAmount = wallets[ownerAddress].tokensAmount.add(MINT_AMOUNT);\r\n        wallets[ownerAddress].tokensAmount = freezeAmount;\r\n        totalSupply = totalSupply.add(MINT_AMOUNT);\r\n        \r\n        emit Mint(ownerAddress, MINT_AMOUNT);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 value)\r\n        public\r\n        onlyOwner\r\n        returns(bool)\r\n    {\r\n        require(checkIfCanUseTokens(ownerAddress, value)\r\n        && wallets[ownerAddress].tokensAmount >= value);\r\n        \r\n        uint256 freezeAmount = wallets[ownerAddress].tokensAmount.sub(value);\r\n        wallets[ownerAddress].tokensAmount = freezeAmount;\r\n        totalSupply = totalSupply.sub(value);                             \r\n        \r\n        emit Burn(ownerAddress, value);\r\n        return true;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) \r\n        public\r\n        returns(bool)\r\n    {\r\n        require(msg.sender == masterKey && newOwner != address(0));\r\n        // Transfer token data from old owner to new.\r\n        wallets[newOwner].tokensAmount = wallets[ownerAddress].tokensAmount;\r\n        wallets[newOwner].canFreezeTokens = true;\r\n        wallets[newOwner].freezedAmount = wallets[ownerAddress].freezedAmount;\r\n        wallets[ownerAddress].freezedAmount = 0;\r\n        wallets[ownerAddress].tokensAmount = 0;\r\n        wallets[ownerAddress].canFreezeTokens = false;\r\n        emit TransferOwnership(ownerAddress, newOwner);\r\n        ownerAddress = newOwner;\r\n        return true;\r\n    }\r\n    \r\n    function()\r\n        public\r\n        payable\r\n    {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"dissalowFreezing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"massTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributedTokensAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezeTokensAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"freezeAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextMintPossibleTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"airdropToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"freezeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"showFreezedTokensAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishAirdrops\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"allowFreezing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_INTERVAL_SEC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unfreezeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startMintingData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllowMinting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensDropped\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"airdropCount\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AirdropFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"AllowFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"DissallowFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"freezeAmount\",\"type\":\"uint256\"}],\"name\":\"FreezeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"unfreezeAmount\",\"type\":\"uint256\"}],\"name\":\"UnfreezeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CryptosoulToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2f01726c7a2fed4430a1e9bba9b184d3196e0046998d0eb695c84df0336e6a0f"}]}