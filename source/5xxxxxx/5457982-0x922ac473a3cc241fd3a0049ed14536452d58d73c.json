{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title ERC20 Token Interface\r\n */\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC677 transferAndCall token interface\r\n * @dev See https://github.com/ethereum/EIPs/issues/677 for specification and\r\n *      discussion.\r\n */\r\ncontract ERC677 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\r\n\r\n    function transferAndCall(address _to, uint _value, bytes _data) public returns (bool success);\r\n}\r\n\r\n/**\r\n * @title Receiver interface for ERC677 transferAndCall\r\n * @dev See https://github.com/ethereum/EIPs/issues/677 for specification and\r\n *      discussion.\r\n */\r\ncontract ERC677Receiver {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n\r\n/**\r\n * @title VALID Token\r\n * @dev ERC20 compatible smart contract for the VALID token. Closely follows\r\n *      ConsenSys StandardToken.\r\n */\r\ncontract ValidToken is ERC677, ERC20 {\r\n    // token metadata\r\n    string public constant name = \"VALID\";\r\n    string public constant symbol = \"VLD\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    // total supply and maximum amount of tokens\r\n    uint256 public constant maxSupply = 10**9 * 10**uint256(decimals);\r\n    // note: this equals 10**27, which is smaller than uint256 max value (~10**77)\r\n\r\n    // token accounting\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n    // token lockups\r\n    mapping(address => uint256) lockups;\r\n    event TokensLocked(address indexed _holder, uint256 _timeout);\r\n\r\n    // ownership\r\n    address public owner;\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // minting\r\n    bool public mintingDone = false;\r\n    modifier mintingFinished() {\r\n        require(mintingDone == true);\r\n        _;\r\n    }\r\n    modifier mintingInProgress() {\r\n        require(mintingDone == false);\r\n        _;\r\n    }\r\n\r\n    // constructor\r\n    function ValidToken() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer the ownership.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    // minting functionality\r\n\r\n    function mint(address[] _recipients, uint256[] _amounts) public mintingInProgress onlyOwner {\r\n        require(_recipients.length == _amounts.length);\r\n        require(_recipients.length < 255);\r\n\r\n        for (uint8 i = 0; i < _recipients.length; i++) {\r\n            address recipient = _recipients[i];\r\n            uint256 amount = _amounts[i];\r\n\r\n            // enforce maximum token supply\r\n            require(totalSupply + amount >= totalSupply);\r\n            require(totalSupply + amount <= maxSupply);\r\n\r\n            balances[recipient] += amount;\r\n            totalSupply += amount;\r\n\r\n            Transfer(0, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function lockTokens(address[] _holders, uint256[] _timeouts) public mintingInProgress onlyOwner {\r\n        require(_holders.length == _timeouts.length);\r\n        require(_holders.length < 255);\r\n\r\n        for (uint8 i = 0; i < _holders.length; i++) {\r\n            address holder = _holders[i];\r\n            uint256 timeout = _timeouts[i];\r\n\r\n            // make sure lockup period can not be overwritten\r\n            require(lockups[holder] == 0);\r\n\r\n            lockups[holder] = timeout;\r\n            TokensLocked(holder, timeout);\r\n        }\r\n    }\r\n\r\n    function finishMinting() public mintingInProgress onlyOwner {\r\n        // check hard cap again\r\n        assert(totalSupply <= maxSupply);\r\n\r\n        mintingDone = true;\r\n    }\r\n\r\n    // ERC20 functionality\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public mintingFinished returns (bool) {\r\n        // prevent some common errors\r\n        require(_to != address(0x0));\r\n        require(_to != address(this));\r\n\r\n        // check lockups\r\n        if (lockups[msg.sender] != 0) {\r\n            require(now >= lockups[msg.sender]);\r\n        }\r\n\r\n        // check balance\r\n        require(balances[msg.sender] >= _value);\r\n        assert(balances[_to] + _value >= balances[_to]); // receiver balance overflow check\r\n\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public mintingFinished returns (bool) {\r\n        // prevent some common errors\r\n        require(_to != address(0x0));\r\n        require(_to != address(this));\r\n\r\n        // check lockups\r\n        if (lockups[_from] != 0) {\r\n            require(now >= lockups[_from]);\r\n        }\r\n\r\n        // check balance and allowance\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value);\r\n        require(allowance >= _value);\r\n        assert(balances[_to] + _value >= balances[_to]); // receiver balance overflow check\r\n\r\n        allowed[_from][msg.sender] -= _value;\r\n        balances[_from] -= _value;\r\n        balances[_to] += _value;\r\n\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        // no check for zero allowance, see NOTES.md\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // ERC677 functionality\r\n\r\n    function transferAndCall(address _to, uint _value, bytes _data) public mintingFinished returns (bool) {\r\n        require(transfer(_to, _value));\r\n\r\n        Transfer(msg.sender, _to, _value, _data);\r\n\r\n        // call receiver\r\n        if (isContract(_to)) {\r\n            ERC677Receiver receiver = ERC677Receiver(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool) {\r\n        uint len;\r\n        assembly {\r\n            len := extcodesize(_addr)\r\n        }\r\n        return len > 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holders\",\"type\":\"address[]\"},{\"name\":\"_timeouts\",\"type\":\"uint256[]\"}],\"name\":\"lockTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingDone\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ValidToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b11ec1e97e5367d19bc132813f0d459ff8c05fbac52d69a1a2bd457f33704f28"}]}