{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract MyFirstEthereumToken {\r\n    // The keyword \"public\" makes those variables\r\n    // readable from outside.\r\n    address public owner;\r\n\t// Public variables of the token\r\n    string public name = \"MyFirstEthereumToken\";\r\n    string public symbol = \"MFET\";\r\n    uint8 public decimals = 18;\t// 18 decimals is the strongly suggested default, avoid changing it\r\n \r\n    uint256 public totalSupply; \r\n\tuint256 public totalExtraTokens = 0;\r\n\tuint256 public totalContributed = 0;\r\n\t\r\n\tbool public onSale = false;\r\n\r\n\t/* This creates an array with all balances */\r\n    mapping (address => uint256) public balances;\r\n\tmapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // Events allow light clients to react on\r\n    // changes efficiently.\r\n    event Sent(address from, address to, uint amount);\r\n\t// This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\t\r\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n\tfunction name() public constant returns (string) { return name; }\r\n    function symbol() public constant returns (string) { return symbol; }\r\n    function decimals() public constant returns (uint8) { return decimals; }\r\n\tfunction totalSupply() public constant returns (uint256) { return totalSupply; }\r\n\tfunction balanceOf(address _owner) public constant returns (uint256) { return balances[_owner]; }\r\n\t\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function MyFirstEthereumToken(uint256 initialSupply) public payable\r\n\t{\r\n\t\towner = msg.sender;\r\n\t\t\r\n\t\t// Update total supply with the decimal amount\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n\t\t//totalSupply = initialSupply;  \r\n\t\t// Give the creator all initial tokens\r\n        balances[msg.sender] = totalSupply; \r\n\t\t// Give the creator all initial tokens\t\t\r\n        //balanceOf[msg.sender] = initialSupply;  \r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success)\r\n\t{\r\n        return _transfer(msg.sender, _to, _value);\r\n    }\r\n\t\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal returns (bool success)\r\n\t{\r\n\t\t// mitigates the ERC20 short address attack\r\n\t\t//require(msg.data.length >= (2 * 32) + 4);\r\n\t\t// checks for minimum transfer amount\r\n\t\trequire(_value > 0);\r\n\t\t// Prevent transfer to 0x0 address. Use burn() instead  \r\n        require(_to != 0x0);\t      \r\n\t\t// Check if the sender has enough\r\n        require(balances[_from] >= _value);\t\r\n\t\t// Check for overflows\r\n        require(balances[_to] + _value > balances[_to]);\t// Check for overflows\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balances[_from] + balances[_to];\r\n        // Subtract from the sender\r\n        balances[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balances[_to] += _value;\r\n\t\t// Call for Event\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balances[_from] + balances[_to] == previousBalances);\r\n\t\t\r\n\t\treturn true;\r\n    }\r\n\r\n    /**\r\n     * Send tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function send(address _to, uint256 _value) public \r\n\t{\r\n        _send(_to, _value);\r\n    }\r\n\t\r\n    /**\r\n     * Internal send, only can be called by this contract\r\n     */\r\n    function _send(address _to, uint256 _value) internal \r\n\t{\t\r\n\t\taddress _from = msg.sender;\r\n\t\t\r\n\t\t// mitigates the ERC20 short address attack\r\n\t\t//require(msg.data.length >= (2 * 32) + 4);\r\n\t\t// checks for minimum transfer amount\r\n\t\trequire(_value > 0);\r\n\t\t// Prevent transfer to 0x0 address. Use burn() instead  \r\n        require(_to != 0x0);\t      \r\n\t\t// Check if the sender has enough\r\n        require(balances[_from] >= _value);\t\r\n\t\t// Check for overflows\r\n        require(balances[_to] + _value > balances[_to]);\t// Check for overflows\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balances[_from] + balances[_to];\r\n        // Subtract from the sender\r\n        balances[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balances[_to] += _value;\r\n\t\t// Call for Event\r\n        Sent(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balances[_from] + balances[_to] == previousBalances);\r\n    }\r\n\r\n   /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) \r\n\t{\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) \r\n\t{\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) \r\n\t{\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n\t\t\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\t\r\n\t/**\r\n     * Create tokens\r\n     *\r\n     * Create `_amount` tokens to `owner` account\r\n     *\r\n     * @param _amount the amount to create\r\n     */\t\r\n    function createTokens(uint256 _amount) public\r\n\t{\r\n\t    require(msg.sender == owner);\r\n        //if (msg.sender != owner) return;\r\n        \r\n        balances[owner] += _amount; \r\n        totalSupply += _amount;\r\n\t\t\r\n        Transfer(0, owner, _amount);\r\n    }\r\n\r\n\t/**\r\n     * Withdraw funds\r\n     *\r\n     * Transfers the total amount of funds to ownwer account minus gas fee\r\n     *\r\n     */\t\r\n    function safeWithdrawAll() public returns (bool)\r\n\t{\r\n\t    require(msg.sender == owner);\r\n\t\t\r\n\t\tuint256 _gasPrice = 30000000000;\r\n\t\t\r\n\t\trequire(this.balance > _gasPrice);\r\n\t\t\r\n\t\tuint256 _totalAmount = this.balance - _gasPrice;\r\n\t\t\r\n\t\towner.transfer(_totalAmount);\r\n\t\t\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t/**\r\n     * Withdraw funds\r\n     *\r\n     * Create `_amount` tokens to `owner` account\r\n     *\r\n     * @param _amount the amount to create\r\n     */\t\r\n    function safeWithdraw(uint256 _amount) public returns (bool)\r\n\t{\r\n\t    require(msg.sender == owner);\r\n\t\t\r\n\t\tuint256 _gasPrice = 30000000000;\r\n\t\t\r\n\t\trequire(_amount > 0);\r\n\t\t\r\n\t\tuint256 totalAmount = _amount + _gasPrice; \r\n\t\t\r\n\t\trequire(this.balance >= totalAmount);\r\n\t\t\r\n\t\towner.transfer(totalAmount);\r\n\t\t\r\n\t\treturn true;\r\n    }\r\n    \r\n\tfunction getBalanceContract() public constant returns(uint)\r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n\t\t\r\n        return this.balance;\r\n    }\r\n\t\r\n\t/**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);   // Check if the sender has enough\r\n        balances[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balances[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balances[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\t\r\n\t// A function to buy tokens accesible by any address\r\n\t// The payable keyword allows the contract to accept ethers\r\n\t// from the transactor. The ethers to be deposited is entered as msg.value\r\n\t// (which will get clearer when we will call the functions in browser-solidity)\r\n\t// and the corresponding tokens are stored in balance[msg.sender] mapping.\r\n\t// underflows and overflows are security consideration which are\r\n\t// not checked in the process. But lets not worry about them for now.\r\n\r\n\tfunction buyTokens () public payable \r\n\t{\r\n\t\t// checks for minimum transfer amount\r\n\t\trequire(msg.value > 0);\r\n\t\t\r\n\t\trequire(onSale == true);\r\n\t\t\r\n\t\towner.transfer(msg.value);\r\n\t\t\t\r\n\t\ttotalContributed += msg.value;\r\n\t\t\r\n\t\tuint256 tokensAmount = msg.value * 1000;\r\n\t\t\r\n\t\tif(totalContributed >= 1 ether)\r\n\t\t{\r\n\t\t\t\r\n\t\t\tuint256 multiplier = (totalContributed / 1 ether);\r\n\t\t\t\r\n\t\t\tuint256 extraTokens = (tokensAmount * multiplier) / 10;\r\n\t\t\t\r\n\t\t\ttotalExtraTokens += extraTokens;\r\n\t\t\t\r\n\t\t\ttokensAmount += extraTokens;\r\n\t\t}\r\n\t\t\t\r\n\t\tbalances[msg.sender] += tokensAmount;\r\n\t\t\r\n\t\ttotalSupply += tokensAmount;\r\n        \r\n        Transfer(address(this), msg.sender, tokensAmount);\r\n\t}\r\n\t\r\n\t/**\r\n     * EnableSale Function\r\n     *\r\n     */\t\r\n\tfunction enableSale() public\r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n\r\n        onSale = true;\r\n    }\r\n\t\r\n\t/**\r\n     * DisableSale Function\r\n     *\r\n     */\t\r\n\tfunction disableSale() public \r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n\r\n        onSale = false;\r\n    }\r\n\t\r\n    /**\r\n     * Kill Function\r\n     *\r\n     */\t\r\n    function kill() public\r\n\t{\r\n\t    require(msg.sender == owner);\r\n\t\r\n\t\tonSale = false;\r\n\t\r\n        selfdestruct(owner);\r\n    }\r\n\t\r\n    /**\r\n     * Fallback Function\r\n     *\r\n     */\t\r\n\tfunction() public payable \r\n\t{\r\n\t\tbuyTokens();\r\n\t\t//totalContributed += msg.value;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalExtraTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MyFirstEthereumToken","CompilerVersion":"v0.4.20-nightly.2018.1.29+commit.a668b9de","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://7fef325d90707329a433a2c490482328af6423c9346f0ac1093447a6721c46be"}]}