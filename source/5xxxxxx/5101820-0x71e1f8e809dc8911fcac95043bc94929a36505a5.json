{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * Aethia CHI Token\r\n *\r\n * Chi is the in-game currency used throughout Aethia. This contract governs\r\n * the ownership and transfer of all Chi within the game.\r\n */\r\ncontract ChiToken is ERC20 {\r\n\r\n    /**\r\n     * The currency is named Chi.\r\n     * \r\n     * The currency's symbol is 'CHI'. The different uses for the two are as \r\n     * follows:\r\n     *  - \"That Jelly Pill will cost you 5 CHI.\"\r\n     *  - \"Did you know Aethia uses Chi as currency?\"\r\n     */\r\n    string public name = 'Chi';\r\n    string public symbol = 'CHI';\r\n    \r\n    /**\r\n     * There is ten-billion Chi in circulation.\r\n     */\r\n    uint256 _totalSupply = 10000000000;\r\n    \r\n    /**\r\n     * Chi is an atomic currency.\r\n     * \r\n     * It is not possible to have a fraction of a Chi. You are only able to have\r\n     * integer values of Chi tokens.\r\n     */\r\n    uint256 public decimals = 0;\r\n\r\n    /**\r\n     * The amount of CHI owned per address.\r\n     */\r\n    mapping (address => uint256) balances;\r\n    \r\n    /**\r\n     * The amount of CHI an owner has allowed a certain spender.\r\n     */\r\n    mapping (address => mapping (address => uint256)) allowances;\r\n\r\n    /**\r\n     * Chi token transfer event.\r\n     * \r\n     * For audit and logging purposes, as well as to adhere to the ERC-20\r\n     * standard, all chi token transfers are logged by benefactor and \r\n     * beneficiary.\r\n     */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\n    /**\r\n     * Chi token allowance approval event.\r\n     * \r\n     * For audit and logging purposes, as well as to adhere to the ERC-20\r\n     * standard, all chi token allowance approvals are logged by owner and \r\n     * approved spender.\r\n     */\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /**\r\n     * Contract constructor.\r\n     * \r\n     * This creates all ten-billion Chi tokens and sets them to the creating\r\n     * address. From this address, the tokens will be distributed to the proper\r\n     * locations.\r\n     */\r\n    function ChiToken() public {\r\n        balances[msg.sender] = _totalSupply;\r\n    }\r\n    \r\n    /**\r\n     * The total supply of Chi tokens. \r\n     * \r\n     * Returns\r\n     * -------\r\n     * uint256\r\n     *     The total number of Chi tokens in circulation.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * Get Chi balance of an address.\r\n     * \r\n     * Parameters \r\n     * ----------\r\n     * address : _owner\r\n     *     The address to return the Chi balance of.\r\n     * \r\n     * Returns\r\n     * -------\r\n     * uint256\r\n     *     The amount of Chi owned by given address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * Transfer an amount of Chi to an address.\r\n     * \r\n     * Parameters\r\n     * ----------\r\n     * address : _to\r\n     *     The beneficiary address to transfer the Chi tokens to.\r\n     * uint256 : _value\r\n     *     The number of Chi tokens to transfer.\r\n     * \r\n     * Returns\r\n     * -------\r\n     * bool\r\n     *     True if the transfer succeeds.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(balances[msg.sender] >= _value);\r\n\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer Chi tokens from one address to another.\r\n     * \r\n     * This requires an allowance to be set for the requester.\r\n     * \r\n     * Parameters\r\n     * ----------\r\n     * address : _from\r\n     *     The benefactor address from which the Chi tokens are to be sent.\r\n     * address : _to\r\n     *     The beneficiary address to transfer the Chi tokens to.\r\n     * uint256 : _value\r\n     *      The number of Chi tokens to transfer.\r\n     * \r\n     * Returns\r\n     * -------\r\n     * bool\r\n     *     True if the transfer succeeds.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(balances[_from] >= _value);\r\n        require(allowances[_from][msg.sender] >= _value);\r\n\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n\r\n        allowances[_from][msg.sender] -= _value;\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Approve given address to spend a number of Chi tokens.\r\n     * \r\n     * This gives an approval to `_spender` to spend `_value` tokens on behalf\r\n     * of `msg.sender`.\r\n     * \r\n     * Parameters\r\n     * ----------\r\n     * address : _spender\r\n     *     The address that is to be allowed to spend the given number of Chi\r\n     *     tokens.\r\n     * uint256 : _value\r\n     *     The number of Chi tokens that `_spender` is allowed to spend.\r\n     * \r\n     * Returns\r\n     * -------\r\n     * bool\r\n     *     True if the approval succeeds.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowances[msg.sender][_spender] = _value;\r\n\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Get the number of tokens `_spender` is allowed to spend by `_owner`.\r\n     * \r\n     * Parameters\r\n     * ----------\r\n     * address : _owner\r\n     *     The address that gave out the allowance.\r\n     * address : _spender\r\n     *     The address that is given the allowance to spend.\r\n     * \r\n     * Returns\r\n     * -------\r\n     * uint256\r\n     *     The number of tokens `_spender` is allowed to spend by `_owner`.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ChiToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://839ff1dfb026eb39731b2c1a362e2b21872b709945dc9fae0d0db53c2dc21aec"}]}