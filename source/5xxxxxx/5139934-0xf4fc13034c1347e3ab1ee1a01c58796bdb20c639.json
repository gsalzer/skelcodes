{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Leaderboard {\r\n    struct User {\r\n        address user;\r\n        uint balance;\r\n        string name;\r\n    }\r\n    \r\n    User[3] public leaderboard;\r\n    \r\n    address owner;\r\n    \r\n    function Leaderboard() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function addScore(string name) public payable returns (bool) {\r\n        if (leaderboard[2].balance >= msg.value)\r\n            // user didn't make it into top 3\r\n            return false;\r\n        for (uint i=0; i<3; i++) {\r\n            if (leaderboard[i].balance < msg.value) {\r\n                // resort\r\n                if (leaderboard[i].user != msg.sender) {\r\n                    bool duplicate = false;\r\n                    for (uint j=i+1; j<3; j++) {\r\n                        if (leaderboard[j].user == msg.sender) {\r\n                            duplicate = true;\r\n                            delete leaderboard[j];\r\n                        }\r\n                        if (duplicate)\r\n                            leaderboard[j] = leaderboard[j+1];\r\n                        else\r\n                            leaderboard[j] = leaderboard[j-1];\r\n                    }\r\n                }\r\n                // add new highscore\r\n                leaderboard[i] = User({\r\n                    user: msg.sender,\r\n                    balance: msg.value,\r\n                    name: name\r\n                });\r\n                return true;\r\n            }\r\n            if (leaderboard[i].user == msg.sender)\r\n                // user is alrady in list with higher or equal score\r\n                return false;\r\n        }\r\n    }\r\n    \r\n    function withdrawBalance() public {\r\n        owner.transfer(this.balance);\r\n    }\r\n    \r\n    function getUser(uint index) public view returns(address, uint, string) {\r\n        return (leaderboard[index].user, leaderboard[index].balance, leaderboard[index].name);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addScore\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leaderboard\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Leaderboard","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://37e301e5b65bcfbd6b174bac441dbed5e80bb8d976662caeaa500b32c2270887"}]}