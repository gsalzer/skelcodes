{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title HolderBase\r\n * @notice HolderBase handles data & funcitons for token or ether holders.\r\n * HolderBase contract can distribute only one of ether or token.\r\n */\r\ncontract HolderBase is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  uint8 public constant MAX_HOLDERS = 64; // TODO: tokyo-input should verify # of holders\r\n  uint256 public coeff;\r\n  bool public distributed;\r\n  bool public initialized;\r\n\r\n  struct Holder {\r\n    address addr;\r\n    uint96 ratio;\r\n  }\r\n\r\n  Holder[] public holders;\r\n\r\n  event Distributed();\r\n\r\n  function HolderBase(uint256 _coeff) public {\r\n    require(_coeff != 0);\r\n    coeff = _coeff;\r\n  }\r\n\r\n  function getHolderCount() public view returns (uint256) {\r\n    return holders.length;\r\n  }\r\n\r\n  function initHolders(address[] _addrs, uint96[] _ratios) public onlyOwner {\r\n    require(!initialized);\r\n    require(holders.length == 0);\r\n    require(_addrs.length != 0);\r\n    require(_addrs.length <= MAX_HOLDERS);\r\n    require(_addrs.length == _ratios.length);\r\n\r\n    uint256 accRatio;\r\n\r\n    for(uint8 i = 0; i < _addrs.length; i++) {\r\n      if (_addrs[i] != address(0)) {\r\n        // address will be 0x00 in case of \"crowdsale\".\r\n        holders.push(Holder(_addrs[i], _ratios[i]));\r\n      }\r\n\r\n      accRatio = accRatio.add(uint256(_ratios[i]));\r\n    }\r\n\r\n    require(accRatio <= coeff);\r\n\r\n    initialized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Distribute ether to `holder`s according to ratio.\r\n   * Remaining ether is transfered to `wallet` from the close\r\n   * function of RefundVault contract.\r\n   */\r\n  function distribute() internal {\r\n    require(!distributed, \"Already distributed\");\r\n    uint256 balance = this.balance;\r\n\r\n    require(balance > 0, \"No ether to distribute\");\r\n    distributed = true;\r\n\r\n    for (uint8 i = 0; i < holders.length; i++) {\r\n      uint256 holderAmount = balance.mul(uint256(holders[i].ratio)).div(coeff);\r\n\r\n      holders[i].addr.transfer(holderAmount);\r\n    }\r\n\r\n    emit Distributed(); // A single log to reduce gas\r\n  }\r\n\r\n  /**\r\n   * @dev Distribute ERC20 token to `holder`s according to ratio.\r\n   */\r\n  function distributeToken(ERC20Basic _token, uint256 _targetTotalSupply) internal {\r\n    require(!distributed, \"Already distributed\");\r\n    distributed = true;\r\n\r\n    for (uint8 i = 0; i < holders.length; i++) {\r\n      uint256 holderAmount = _targetTotalSupply.mul(uint256(holders[i].ratio)).div(coeff);\r\n      deliverTokens(_token, holders[i].addr, holderAmount);\r\n    }\r\n\r\n    emit Distributed(); // A single log to reduce gas\r\n  }\r\n\r\n  // Override to distribute tokens\r\n  function deliverTokens(ERC20Basic _token, address _beneficiary, uint256 _tokens) internal {}\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Locker\r\n * @notice Locker holds tokens and releases them at a certain time.\r\n */\r\ncontract Locker is Ownable {\r\n  using SafeMath for uint;\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * It is init state only when adding release info is possible.\r\n   * beneficiary only can release tokens when Locker is active.\r\n   * After all tokens are released, locker is drawn.\r\n   */\r\n  enum State { Init, Ready, Active, Drawn }\r\n\r\n  struct Beneficiary {\r\n    uint ratio;             // ratio based on Locker's initial balance.\r\n    uint withdrawAmount;    // accumulated tokens beneficiary released\r\n    bool releaseAllTokens;\r\n  }\r\n\r\n  /**\r\n   * @notice Release has info to release tokens.\r\n   * If lock type is straight, only two release infos is required.\r\n   *\r\n   *     |\r\n   * 100 |                _______________\r\n   *     |              _/\r\n   *  50 |            _/\r\n   *     |         . |\r\n   *     |       .   |\r\n   *     |     .     |\r\n   *     +===+=======+----*----------> time\r\n   *     Locker  First    Last\r\n   *  Activated  Release  Release\r\n   *\r\n   *\r\n   * If lock type is variable, the release graph will be\r\n   *\r\n   *     |\r\n   * 100 |                                 _________\r\n   *     |                                |\r\n   *  70 |                      __________|\r\n   *     |                     |\r\n   *  30 |            _________|\r\n   *     |           |\r\n   *     +===+=======+---------+----------*------> time\r\n   *     Locker   First        Second     Last\r\n   *  Activated   Release      Release    Release\r\n   *\r\n   *\r\n   *\r\n   * For the first straight release graph, parameters would be\r\n   *   coeff: 100\r\n   *   releaseTimes: [\r\n   *     first release time,\r\n   *     second release time\r\n   *   ]\r\n   *   releaseRatios: [\r\n   *     50,\r\n   *     100,\r\n   *   ]\r\n   *\r\n   * For the second variable release graph, parameters would be\r\n   *   coeff: 100\r\n   *   releaseTimes: [\r\n   *     first release time,\r\n   *     second release time,\r\n   *     last release time\r\n   *   ]\r\n   *   releaseRatios: [\r\n   *     30,\r\n   *     70,\r\n   *     100,\r\n   *   ]\r\n   *\r\n   */\r\n  struct Release {\r\n    bool isStraight;        // lock type : straight or variable\r\n    uint[] releaseTimes;    //\r\n    uint[] releaseRatios;   //\r\n  }\r\n\r\n  uint public activeTime;\r\n\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n\r\n  uint public coeff;\r\n  uint public initialBalance;\r\n  uint public withdrawAmount; // total amount of tokens released\r\n\r\n  mapping (address => Beneficiary) public beneficiaries;\r\n  mapping (address => Release) public releases;  // beneficiary's lock\r\n  mapping (address => bool) public locked; // whether beneficiary's lock is instantiated\r\n\r\n  uint public numBeneficiaries;\r\n  uint public numLocks;\r\n\r\n  State public state;\r\n\r\n  modifier onlyState(State v) {\r\n    require(state == v);\r\n    _;\r\n  }\r\n\r\n  modifier onlyBeneficiary(address _addr) {\r\n    require(beneficiaries[_addr].ratio > 0);\r\n    _;\r\n  }\r\n\r\n  event StateChanged(State _state);\r\n  event Locked(address indexed _beneficiary, bool _isStraight);\r\n  event Released(address indexed _beneficiary, uint256 _amount);\r\n\r\n  function Locker(address _token, uint _coeff, address[] _beneficiaries, uint[] _ratios) public {\r\n    require(_token != address(0));\r\n    require(_beneficiaries.length == _ratios.length);\r\n\r\n    token = ERC20Basic(_token);\r\n    coeff = _coeff;\r\n    numBeneficiaries = _beneficiaries.length;\r\n\r\n    uint accRatio;\r\n\r\n    for(uint i = 0; i < numBeneficiaries; i++) {\r\n      require(_ratios[i] > 0);\r\n      beneficiaries[_beneficiaries[i]].ratio = _ratios[i];\r\n\r\n      accRatio = accRatio.add(_ratios[i]);\r\n    }\r\n\r\n    require(coeff == accRatio);\r\n  }\r\n\r\n  /**\r\n   * @notice beneficiary can release their tokens after activated\r\n   */\r\n  function activate() external onlyOwner onlyState(State.Ready) {\r\n    require(numLocks == numBeneficiaries); // double check : assert all releases are recorded\r\n\r\n    initialBalance = token.balanceOf(this);\r\n    require(initialBalance > 0);\r\n\r\n    activeTime = now; // solium-disable-line security/no-block-members\r\n\r\n    // set locker as active state\r\n    state = State.Active;\r\n    emit StateChanged(state);\r\n  }\r\n\r\n  function getReleaseType(address _beneficiary)\r\n    public\r\n    view\r\n    onlyBeneficiary(_beneficiary)\r\n    returns (bool)\r\n  {\r\n    return releases[_beneficiary].isStraight;\r\n  }\r\n\r\n  function getTotalLockedAmounts(address _beneficiary)\r\n    public\r\n    view\r\n    onlyBeneficiary(_beneficiary)\r\n    returns (uint)\r\n  {\r\n    return getPartialAmount(beneficiaries[_beneficiary].ratio, coeff, initialBalance);\r\n  }\r\n\r\n  function getReleaseTimes(address _beneficiary)\r\n    public\r\n    view\r\n    onlyBeneficiary(_beneficiary)\r\n    returns (uint[])\r\n  {\r\n    return releases[_beneficiary].releaseTimes;\r\n  }\r\n\r\n  function getReleaseRatios(address _beneficiary)\r\n    public\r\n    view\r\n    onlyBeneficiary(_beneficiary)\r\n    returns (uint[])\r\n  {\r\n    return releases[_beneficiary].releaseRatios;\r\n  }\r\n\r\n  /**\r\n   * @notice add new release record for beneficiary\r\n   */\r\n  function lock(address _beneficiary, bool _isStraight, uint[] _releaseTimes, uint[] _releaseRatios)\r\n    external\r\n    onlyOwner\r\n    onlyState(State.Init)\r\n    onlyBeneficiary(_beneficiary)\r\n  {\r\n    require(!locked[_beneficiary]);\r\n    require(_releaseRatios.length != 0);\r\n    require(_releaseRatios.length == _releaseTimes.length);\r\n\r\n    uint i;\r\n    uint len = _releaseRatios.length;\r\n\r\n    // finally should release all tokens\r\n    require(_releaseRatios[len - 1] == coeff);\r\n\r\n    // check two array are ascending sorted\r\n    for(i = 0; i < len - 1; i++) {\r\n      require(_releaseTimes[i] < _releaseTimes[i + 1]);\r\n      require(_releaseRatios[i] < _releaseRatios[i + 1]);\r\n    }\r\n\r\n    // 2 release times for straight locking type\r\n    if (_isStraight) {\r\n      require(len == 2);\r\n    }\r\n\r\n    numLocks = numLocks.add(1);\r\n\r\n    // create Release for the beneficiary\r\n    releases[_beneficiary].isStraight = _isStraight;\r\n\r\n    // copy array of uint\r\n    releases[_beneficiary].releaseTimes = _releaseTimes;\r\n    releases[_beneficiary].releaseRatios = _releaseRatios;\r\n\r\n    // lock beneficiary\r\n    locked[_beneficiary] = true;\r\n    emit Locked(_beneficiary, _isStraight);\r\n\r\n    //  if all beneficiaries locked, change Locker state to change\r\n    if (numLocks == numBeneficiaries) {\r\n      state = State.Ready;\r\n      emit StateChanged(state);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice transfer releasable tokens for beneficiary wrt the release graph\r\n   */\r\n  function release() external onlyState(State.Active) onlyBeneficiary(msg.sender) {\r\n    require(!beneficiaries[msg.sender].releaseAllTokens);\r\n\r\n    uint releasableAmount = getReleasableAmount(msg.sender);\r\n    beneficiaries[msg.sender].withdrawAmount = beneficiaries[msg.sender].withdrawAmount.add(releasableAmount);\r\n\r\n    beneficiaries[msg.sender].releaseAllTokens = beneficiaries[msg.sender].withdrawAmount == getPartialAmount(\r\n      beneficiaries[msg.sender].ratio,\r\n      coeff,\r\n      initialBalance);\r\n\r\n    withdrawAmount = withdrawAmount.add(releasableAmount);\r\n\r\n    if (withdrawAmount == initialBalance) {\r\n      state = State.Drawn;\r\n      emit StateChanged(state);\r\n    }\r\n\r\n    token.transfer(msg.sender, releasableAmount);\r\n    emit Released(msg.sender, releasableAmount);\r\n  }\r\n\r\n  function getReleasableAmount(address _beneficiary) internal view returns (uint) {\r\n    if (releases[_beneficiary].isStraight) {\r\n      return getStraightReleasableAmount(_beneficiary);\r\n    } else {\r\n      return getVariableReleasableAmount(_beneficiary);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice return releaseable amount for beneficiary in case of straight type of release\r\n   */\r\n  function getStraightReleasableAmount(address _beneficiary) internal view returns (uint releasableAmount) {\r\n    Beneficiary memory _b = beneficiaries[_beneficiary];\r\n    Release memory _r = releases[_beneficiary];\r\n\r\n    // total amount of tokens beneficiary can release\r\n    uint totalReleasableAmount = getTotalLockedAmounts(_beneficiary);\r\n\r\n    uint firstTime = _r.releaseTimes[0];\r\n    uint lastTime = _r.releaseTimes[1];\r\n\r\n    // solium-disable security/no-block-members\r\n    require(now >= firstTime); // pass if can release\r\n    // solium-enable security/no-block-members\r\n\r\n    if(now >= lastTime) { // inclusive to reduce calculation\r\n      releasableAmount = totalReleasableAmount;\r\n    } else {\r\n      // releasable amount at first time\r\n      uint firstAmount = getPartialAmount(\r\n        _r.releaseRatios[0],\r\n        coeff,\r\n        totalReleasableAmount);\r\n\r\n      // partial amount without first amount\r\n      releasableAmount = getPartialAmount(\r\n        now.sub(firstTime),\r\n        lastTime.sub(firstTime),\r\n        totalReleasableAmount.sub(firstAmount));\r\n      releasableAmount = releasableAmount.add(firstAmount);\r\n    }\r\n\r\n    // subtract already withdrawn amounts\r\n    releasableAmount = releasableAmount.sub(_b.withdrawAmount);\r\n  }\r\n\r\n  /**\r\n   * @notice return releaseable amount for beneficiary in case of variable type of release\r\n   */\r\n  function getVariableReleasableAmount(address _beneficiary) internal view returns (uint releasableAmount) {\r\n    Beneficiary memory _b = beneficiaries[_beneficiary];\r\n    Release memory _r = releases[_beneficiary];\r\n\r\n    // total amount of tokens beneficiary will receive\r\n    uint totalReleasableAmount = getTotalLockedAmounts(_beneficiary);\r\n\r\n    uint releaseRatio;\r\n\r\n    // reverse order for short curcit\r\n    for(uint i = _r.releaseTimes.length - 1; i >= 0; i--) {\r\n      if (now >= _r.releaseTimes[i]) {\r\n        releaseRatio = _r.releaseRatios[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    require(releaseRatio > 0);\r\n\r\n    releasableAmount = getPartialAmount(\r\n      releaseRatio,\r\n      coeff,\r\n      totalReleasableAmount);\r\n    releasableAmount = releasableAmount.sub(_b.withdrawAmount);\r\n  }\r\n\r\n  /// https://github.com/0xProject/0x.js/blob/05aae368132a81ddb9fd6a04ac5b0ff1cbb24691/packages/contracts/src/current/protocol/Exchange/Exchange.sol#L497\r\n  /// @notice Calculates partial value given a numerator and denominator.\r\n  /// @param numerator Numerator.\r\n  /// @param denominator Denominator.\r\n  /// @param target Value to calculate partial of.\r\n  /// @return Partial value of target.\r\n  function getPartialAmount(uint numerator, uint denominator, uint target) public pure returns (uint) {\r\n    return numerator.mul(target).div(denominator);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  /**\r\n   * @param _wallet Vault address\r\n   */\r\n  constructor(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  /**\r\n   * @param investor Investor address\r\n   */\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    emit Closed();\r\n    wallet.transfer(address(this).balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    emit RefundsEnabled();\r\n  }\r\n\r\n  /**\r\n   * @param investor Investor address\r\n   */\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    emit Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title MultiHolderVault\r\n * @dev This contract distribute ether to multiple address.\r\n */\r\ncontract MultiHolderVault is HolderBase, RefundVault {\r\n  using SafeMath for uint256;\r\n\r\n  function MultiHolderVault(address _wallet, uint256 _ratioCoeff)\r\n    public\r\n    HolderBase(_ratioCoeff)\r\n    RefundVault(_wallet)\r\n  {}\r\n\r\n  function close() public onlyOwner {\r\n    require(state == State.Active);\r\n    require(initialized);\r\n\r\n    super.distribute(); // distribute ether to holders\r\n    super.close(); // transfer remaining ether to wallet\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\ncontract BaseCrowdsale is HolderBase, Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  Locker public locker;     // token locker\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // how many token units a buyer gets per wei\r\n  // use coeff ratio from HolderBase\r\n  uint256 public rate;\r\n\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  // ratio of tokens for crowdsale\r\n  uint256 public crowdsaleRatio;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  uint256 public cap;\r\n\r\n  // minimum amount of funds to be raised in weis\r\n  uint256 public goal;\r\n\r\n  // refund vault used to hold funds while crowdsale is running\r\n  MultiHolderVault public vault;\r\n\r\n  address public nextTokenOwner;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event Finalized();\r\n  event ClaimTokens(address indexed _token, uint256 _amount);\r\n\r\n  function BaseCrowdsale(uint256 _coeff) HolderBase(_coeff) public {}\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  function buyTokens(address beneficiary) public payable whenNotPaused {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    uint256 toFund = calculateToFund(beneficiary, weiAmount);\r\n    require(toFund > 0);\r\n\r\n    uint256 toReturn = weiAmount.sub(toFund);\r\n\r\n    buyTokensPreHook(beneficiary, toFund);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = getTokenAmount(toFund);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(toFund);\r\n\r\n    if (toReturn > 0) {\r\n      msg.sender.transfer(toReturn);\r\n    }\r\n\r\n    buyTokensPostHook(beneficiary, tokens, toFund);\r\n\r\n    generateTokens(beneficiary, tokens);\r\n    emit TokenPurchase(msg.sender, beneficiary, toFund, tokens);\r\n    forwardFunds(toFund);\r\n  }\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    emit Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n\r\n  // vault finalization task, called when owner calls finalize()\r\n  function finalization() internal {\r\n    if (goalReached()) {\r\n      finalizationSuccessHook();\r\n    } else {\r\n      finalizationFailHook();\r\n    }\r\n  }\r\n\r\n  // if crowdsale is unsuccessful, investors can claim refunds here\r\n  function claimRefund() public {\r\n    require(isFinalized);\r\n    require(!goalReached());\r\n\r\n    vault.refund(msg.sender);\r\n  }\r\n\r\n  function goalReached() public view returns (bool) {\r\n    return weiRaised >= goal;\r\n  }\r\n\r\n  /// @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return capReached || now > endTime; // solium-disable-line security/no-block-members\r\n  }\r\n\r\n  // Override this method to have a way to add business logic to your crowdsale when buying\r\n  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\r\n    return weiAmount.mul(rate);\r\n  }\r\n\r\n  /**\r\n   * @notice forwardd ether to vault\r\n   */\r\n  function forwardFunds(uint256 toFund) internal {\r\n    vault.deposit.value(toFund)(msg.sender);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime; // solium-disable-line security/no-block-members\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  /**\r\n   * @notice calculate fund wrt sale cap. Override this function to control ether cap.\r\n   * @param _beneficiary address address to receive tokens\r\n   * @param _weiAmount uint256 amount of ether in wei\r\n   */\r\n  function calculateToFund(address _beneficiary, uint256 _weiAmount) internal view returns (uint256) {\r\n    uint256 toFund;\r\n    uint256 postWeiRaised = weiRaised.add(_weiAmount);\r\n\r\n    if (postWeiRaised > cap) {\r\n      toFund = cap.sub(weiRaised);\r\n    } else {\r\n      toFund = _weiAmount;\r\n    }\r\n    return toFund;\r\n  }\r\n\r\n  /**\r\n   * @notice interface to initialize crowdsale parameters.\r\n   * init should be implemented by Crowdsale Generator.\r\n   */\r\n  function init(bytes32[] args) public;\r\n\r\n  /**\r\n   * @notice pre hook for buyTokens function\r\n   * @param _beneficiary address address to receive tokens\r\n   * @param _toFund uint256 amount of ether in wei\r\n   */\r\n  function buyTokensPreHook(address _beneficiary, uint256 _toFund) internal {}\r\n\r\n  /**\r\n   * @notice post hook for buyTokens function\r\n   * @param _beneficiary address address to receive tokens\r\n   * @param _tokens uint256 amount of tokens to receive\r\n   * @param _toFund uint256 amount of ether in wei\r\n   */\r\n  function buyTokensPostHook(address _beneficiary, uint256 _tokens, uint256 _toFund) internal {}\r\n\r\n  function finalizationFailHook() internal {\r\n    vault.enableRefunds();\r\n  }\r\n\r\n  function finalizationSuccessHook() internal {\r\n    // calculate target total supply including all token holders\r\n    uint256 targetTotalSupply = getTotalSupply().mul(coeff).div(crowdsaleRatio);\r\n    ERC20Basic token = ERC20Basic(getTokenAddress());\r\n\r\n    super.distributeToken(token, targetTotalSupply);\r\n    afterGeneratorHook();\r\n\r\n    locker.activate();\r\n    vault.close();\r\n\r\n    transferTokenOwnership(nextTokenOwner);\r\n  }\r\n\r\n  function afterGeneratorHook() internal {}\r\n\r\n  /**\r\n   * @notice common interfaces for both of MiniMe and Mintable token.\r\n   */\r\n  function generateTokens(address _beneficiary, uint256 _tokens) internal;\r\n  function transferTokenOwnership(address _to) internal;\r\n  function getTotalSupply() internal returns (uint256);\r\n  function finishMinting() internal returns (bool);\r\n  function getTokenAddress() internal returns (address);\r\n\r\n  /**\r\n   * @notice helper function to generate tokens with ratio\r\n   */\r\n  function generateTargetTokens(address _beneficiary, uint256 _targetTotalSupply, uint256 _ratio) internal {\r\n    uint256 tokens = _targetTotalSupply.mul(_ratio).div(coeff);\r\n    generateTokens(_beneficiary, tokens);\r\n  }\r\n\r\n  /**\r\n   * @notice claim ERC20Basic compatible tokens\r\n   */\r\n  function claimTokens(ERC20Basic _token) external onlyOwner {\r\n    require(isFinalized);\r\n    uint256 balance = _token.balanceOf(this);\r\n    _token.transfer(owner, balance);\r\n    emit ClaimTokens(_token, balance);\r\n  }\r\n\r\n  /**\r\n   * @notice Override HolderBase.deliverTokens\r\n   * @param _token ERC20Basic token contract\r\n   * @param _beneficiary Address to receive tokens\r\n   * @param _tokens Amount of tokens\r\n   */\r\n  function deliverTokens(ERC20Basic _token, address _beneficiary, uint256 _tokens) internal {\r\n    generateTokens(_beneficiary, _tokens);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title BlockIntervalCrowdsale\r\n * @notice BlockIntervalCrowdsale limit purchaser to take participate too frequently.\r\n */\r\ncontract BlockIntervalCrowdsale is BaseCrowdsale {\r\n  uint256 public blockInterval;\r\n  mapping (address => uint256) public recentBlock;\r\n\r\n  function BlockIntervalCrowdsale(uint256 _blockInterval) public {\r\n    require(_blockInterval != 0);\r\n    blockInterval = _blockInterval;\r\n  }\r\n\r\n  /**\r\n   * @return true if the block number is over the block internal.\r\n   */\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinBlock = recentBlock[msg.sender].add(blockInterval) < block.number;\r\n    return withinBlock && super.validPurchase();\r\n  }\r\n\r\n  /**\r\n   * @notice save the block number\r\n   */\r\n  function buyTokensPreHook(address _beneficiary, uint256 _toFund) internal {\r\n    recentBlock[msg.sender] = block.number;\r\n    super.buyTokensPreHook(_beneficiary, _toFund);\r\n  }\r\n}\r\n\r\n\r\n// https://github.com/bitclave/crowdsale/blob/master/contracts/BonusCrowdsale.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Parent crowdsale contract with support for time-based and amount based bonuses\r\n* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\r\n*\r\n*/\r\ncontract BonusCrowdsale is BaseCrowdsale {\r\n\r\n  // Constants\r\n  // The following will be populated by main crowdsale contract\r\n  uint32[] public BONUS_TIMES;\r\n  uint32[] public BONUS_TIMES_VALUES;\r\n  uint128[] public BONUS_AMOUNTS;\r\n  uint32[] public BONUS_AMOUNTS_VALUES;\r\n\r\n  /**\r\n  * @dev Retrieve length of bonuses by time array\r\n  * @return Bonuses by time array length\r\n  */\r\n  function bonusesForTimesCount() public view returns(uint) {\r\n    return BONUS_TIMES.length;\r\n  }\r\n\r\n  /**\r\n  * @dev Sets bonuses for time\r\n  */\r\n  function setBonusesForTimes(uint32[] times, uint32[] values) public onlyOwner {\r\n    require(times.length == values.length);\r\n    for (uint i = 0; i + 1 < times.length; i++) {\r\n      require(times[i] < times[i+1]);\r\n    }\r\n\r\n    BONUS_TIMES = times;\r\n    BONUS_TIMES_VALUES = values;\r\n  }\r\n\r\n  /**\r\n  * @dev Retrieve length of bonuses by amounts array\r\n  * @return Bonuses by amounts array length\r\n  */\r\n  function bonusesForAmountsCount() public view returns(uint) {\r\n    return BONUS_AMOUNTS.length;\r\n  }\r\n\r\n  /**\r\n  * @dev Sets bonuses for USD amounts\r\n  */\r\n  function setBonusesForAmounts(uint128[] amounts, uint32[] values) public onlyOwner {\r\n    require(amounts.length == values.length);\r\n    for (uint i = 0; i + 1 < amounts.length; i++) {\r\n      require(amounts[i] > amounts[i+1]);\r\n    }\r\n\r\n    BONUS_AMOUNTS = amounts;\r\n    BONUS_AMOUNTS_VALUES = values;\r\n  }\r\n\r\n  /**\r\n  * @notice Overrided getTokenAmount function of parent Crowdsale contract\r\n    to calculate the token with time and amount bonus.\r\n  * @param weiAmount walelt of investor to receive tokens\r\n  */\r\n  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\r\n    // Compute time and amount bonus\r\n    uint256 bonus = computeBonus(weiAmount);\r\n    uint256 rateWithBonus = rate.mul(coeff.add(bonus)).div(coeff);\r\n    return weiAmount.mul(rateWithBonus);\r\n  }\r\n\r\n  /**\r\n  * @dev Computes overall bonus based on time of contribution and amount of contribution.\r\n  * The total bonus is the sum of bonus by time and bonus by amount\r\n  * @return bonus percentage scaled by 10\r\n  */\r\n  function computeBonus(uint256 weiAmount) public view returns(uint256) {\r\n    return computeAmountBonus(weiAmount).add(computeTimeBonus());\r\n  }\r\n\r\n  /**\r\n  * @dev Computes bonus based on time of contribution relative to the beginning of crowdsale\r\n  * @return bonus percentage scaled by 10\r\n  */\r\n  function computeTimeBonus() public view returns(uint256) {\r\n    require(now >= startTime); // solium-disable-line security/no-block-members\r\n\r\n    for (uint i = 0; i < BONUS_TIMES.length; i++) {\r\n      if (now <= BONUS_TIMES[i]) { // solium-disable-line security/no-block-members\r\n        return BONUS_TIMES_VALUES[i];\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n  * @dev Computes bonus based on amount of contribution\r\n  * @return bonus percentage scaled by 10\r\n  */\r\n  function computeAmountBonus(uint256 weiAmount) public view returns(uint256) {\r\n    for (uint i = 0; i < BONUS_AMOUNTS.length; i++) {\r\n      if (weiAmount >= BONUS_AMOUNTS[i]) {\r\n        return BONUS_AMOUNTS_VALUES[i];\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title FinishMintingCrowdsale\r\n * @notice FinishMintingCrowdsale prevents token generation after sale ended.\r\n */\r\ncontract FinishMintingCrowdsale is BaseCrowdsale {\r\n  function afterGeneratorHook() internal {\r\n    require(finishMinting());\r\n    super.afterGeneratorHook();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title KYC\r\n * @dev KYC contract handles the white list for PLCCrowdsale contract\r\n * Only accounts registered in KYC contract can buy PLC token.\r\n * Admins can register account, and the reason why\r\n */\r\ncontract KYC is Ownable {\r\n  // check the address is registered for token sale\r\n  mapping (address => bool) public registeredAddress;\r\n\r\n  // check the address is admin of kyc contract\r\n  mapping (address => bool) public admin;\r\n\r\n  event Registered(address indexed _addr);\r\n  event Unregistered(address indexed _addr);\r\n  event SetAdmin(address indexed _addr, bool indexed _isAdmin);\r\n\r\n  /**\r\n   * @dev check whether the msg.sender is admin or not\r\n   */\r\n  modifier onlyAdmin() {\r\n    require(admin[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  function KYC() public {\r\n    admin[msg.sender] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev set new admin as admin of KYC contract\r\n   * @param _addr address The address to set as admin of KYC contract\r\n   */\r\n  function setAdmin(address _addr, bool _isAdmin)\r\n    public\r\n    onlyOwner\r\n  {\r\n    require(_addr != address(0));\r\n    admin[_addr] = _isAdmin;\r\n\r\n    emit SetAdmin(_addr, _isAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev register the address for token sale\r\n   * @param _addr address The address to register for token sale\r\n   */\r\n  function register(address _addr)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    require(_addr != address(0));\r\n\r\n    registeredAddress[_addr] = true;\r\n\r\n    emit Registered(_addr);\r\n  }\r\n\r\n  /**\r\n   * @dev register the addresses for token sale\r\n   * @param _addrs address[] The addresses to register for token sale\r\n   */\r\n  function registerByList(address[] _addrs)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    for(uint256 i = 0; i < _addrs.length; i++) {\r\n      require(_addrs[i] != address(0));\r\n\r\n      registeredAddress[_addrs[i]] = true;\r\n\r\n      emit Registered(_addrs[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev unregister the registered address\r\n   * @param _addr address The address to unregister for token sale\r\n   */\r\n  function unregister(address _addr)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    registeredAddress[_addr] = false;\r\n\r\n    emit Unregistered(_addr);\r\n  }\r\n\r\n  /**\r\n   * @dev unregister the registered addresses\r\n   * @param _addrs address[] The addresses to unregister for token sale\r\n   */\r\n  function unregisterByList(address[] _addrs)\r\n    public\r\n    onlyAdmin\r\n  {\r\n    for(uint256 i = 0; i < _addrs.length; i++) {\r\n      registeredAddress[_addrs[i]] = false;\r\n\r\n      emit Unregistered(_addrs[i]);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title KYCCrowdsale\r\n * @notice KYCCrowdsale checks kyc information and\r\n */\r\ncontract KYCCrowdsale is BaseCrowdsale {\r\n\r\n  KYC kyc;\r\n\r\n  function KYCCrowdsale (address _kyc) public {\r\n    require(_kyc != 0x0);\r\n    kyc = KYC(_kyc);\r\n  }\r\n\r\n  function registered(address _addr) public view returns (bool) {\r\n    return kyc.registeredAddress(_addr);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    hasMintPermission\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ncontract MintableBaseCrowdsale is BaseCrowdsale {\r\n\r\n  MintableToken token;\r\n\r\n  function MintableBaseCrowdsale (address _token) public {\r\n    require(_token != address(0));\r\n    token = MintableToken(_token);\r\n  }\r\n\r\n\r\n  function generateTokens(address _beneficiary, uint256 _tokens) internal {\r\n    token.mint(_beneficiary, _tokens);\r\n  }\r\n\r\n  function transferTokenOwnership(address _to) internal {\r\n    token.transferOwnership(_to);\r\n  }\r\n\r\n  function getTotalSupply() internal returns (uint256) {\r\n    return token.totalSupply();\r\n  }\r\n\r\n  function finishMinting() internal returns (bool) {\r\n    require(token.finishMinting());\r\n    return true;\r\n  }\r\n\r\n  function getTokenAddress() internal returns (address) {\r\n    return address(token);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title StagedCrowdsale\r\n * @notice StagedCrowdsale seperates sale period with start time & end time.\r\n * For each period, seperate max cap and kyc could be setup.\r\n * Both startTime and endTime are inclusive.\r\n */\r\ncontract StagedCrowdsale is KYCCrowdsale {\r\n\r\n  uint8 public numPeriods;\r\n\r\n  Stage[] public stages;\r\n\r\n  struct Stage {\r\n    uint128 cap;\r\n    uint128 maxPurchaseLimit;\r\n    uint128 minPurchaseLimit;\r\n    uint128 weiRaised; // stage's weiAmount raised\r\n    uint32 startTime;\r\n    uint32 endTime;\r\n    bool kyc;\r\n  }\r\n\r\n  function StagedCrowdsale(uint _numPeriods) public {\r\n    numPeriods = uint8(_numPeriods);\r\n    require(numPeriods > 0);\r\n  }\r\n\r\n  function initStages(\r\n    uint32[] _startTimes,\r\n    uint32[] _endTimes,\r\n    uint128[] _capRatios,\r\n    uint128[] _maxPurchaseLimits,\r\n    uint128[] _minPurchaseLimits,\r\n    bool[] _kycs)\r\n    public\r\n  {\r\n    uint len = numPeriods;\r\n\r\n    require(stages.length == 0);\r\n    // solium-disable\r\n    require(len == _startTimes.length &&\r\n      len == _endTimes.length &&\r\n      len == _capRatios.length &&\r\n      len == _maxPurchaseLimits.length &&\r\n      len == _minPurchaseLimits.length &&\r\n      len == _kycs.length);\r\n    // solium-enable\r\n\r\n    for (uint i = 0; i < len; i++) {\r\n      require(_endTimes[i] >= _startTimes[i]);\r\n\r\n      uint stageCap;\r\n\r\n      if (_capRatios[i] != 0) {\r\n        stageCap = cap.mul(uint(_capRatios[i])).div(coeff);\r\n      } else {\r\n        stageCap = 0;\r\n      }\r\n\r\n      stages.push(Stage({\r\n        startTime: _startTimes[i],\r\n        endTime: _endTimes[i],\r\n        cap: uint128(stageCap),\r\n        maxPurchaseLimit: _maxPurchaseLimits[i],\r\n        minPurchaseLimit: _minPurchaseLimits[i],\r\n        kyc: _kycs[i],\r\n        weiRaised: 0\r\n      }));\r\n    }\r\n\r\n    require(validPeriods());\r\n  }\r\n\r\n  /**\r\n   * @notice if period is on sale, return index of the period.\r\n   */\r\n  function getStageIndex() public view returns (uint8 currentStage, bool onSale) {\r\n    onSale = true;\r\n    Stage memory p;\r\n\r\n    for (currentStage = 0; currentStage < stages.length; currentStage++) {\r\n      p = stages[currentStage];\r\n      if (p.startTime <= now && now <= p.endTime) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    onSale = false;\r\n  }\r\n\r\n  /**\r\n   * @notice return if all period is finished.\r\n   */\r\n  function saleFinished() public view returns (bool) {\r\n    require(stages.length == numPeriods);\r\n    return stages[stages.length - 1].endTime < now;\r\n  }\r\n\r\n\r\n  function validPeriods() internal view returns (bool) {\r\n    if (stages.length != numPeriods) {\r\n      return false;\r\n    }\r\n\r\n    // check stages are overlapped.\r\n    for (uint8 i = 0; i < stages.length - 1; i++) {\r\n      if (stages[i].endTime >= stages[i + 1].startTime) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Override BaseCrowdsale.calculateToFund function.\r\n   * Check if period is on sale and apply cap if needed.\r\n   */\r\n  function calculateToFund(address _beneficiary, uint256 _weiAmount) internal view returns (uint256) {\r\n    uint256 weiAmount = _weiAmount;\r\n    uint8 currentStage;\r\n    bool onSale;\r\n\r\n    (currentStage, onSale) = getStageIndex();\r\n\r\n    require(onSale);\r\n\r\n    Stage memory p = stages[currentStage];\r\n\r\n    // Check kyc if needed for this period\r\n    if (p.kyc) {\r\n      require(super.registered(_beneficiary));\r\n    }\r\n\r\n    // check min purchase limit of the period\r\n    require(weiAmount >= uint(p.minPurchaseLimit));\r\n\r\n    // reduce up to max purchase limit of the period\r\n    if (p.maxPurchaseLimit != 0 && weiAmount > uint(p.maxPurchaseLimit)) {\r\n      weiAmount = uint(p.maxPurchaseLimit);\r\n    }\r\n\r\n    // pre-calculate `toFund` with the period's cap\r\n    if (p.cap > 0) {\r\n      uint256 postWeiRaised = uint256(p.weiRaised).add(weiAmount);\r\n\r\n      if (postWeiRaised > p.cap) {\r\n        weiAmount = uint256(p.cap).sub(p.weiRaised);\r\n      }\r\n    }\r\n\r\n    // get `toFund` with the cap of the sale\r\n    return super.calculateToFund(_beneficiary, weiAmount);\r\n  }\r\n\r\n  function buyTokensPreHook(address _beneficiary, uint256 _toFund) internal {\r\n    uint8 currentStage;\r\n    bool onSale;\r\n\r\n    (currentStage, onSale) = getStageIndex();\r\n\r\n    require(onSale);\r\n\r\n    Stage storage p = stages[currentStage];\r\n\r\n    p.weiRaised = uint128(_toFund.add(uint256(p.weiRaised)));\r\n    super.buyTokensPreHook(_beneficiary, _toFund);\r\n  }\r\n}\r\n\r\n\r\npragma solidity^0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AlphaconCrowdsale is BaseCrowdsale, MintableBaseCrowdsale, BonusCrowdsale, BlockIntervalCrowdsale, KYCCrowdsale, StagedCrowdsale, FinishMintingCrowdsale {\r\n\r\n  bool public initialized;\r\n\r\n  // constructor parameters are left padded bytes32.\r\n\r\n  function AlphaconCrowdsale(bytes32[5] args) \r\n    BaseCrowdsale(\r\n      parseUint(args[0]))\r\n    MintableBaseCrowdsale(\r\n      parseAddress(args[1]))\r\n    BonusCrowdsale()\r\n    BlockIntervalCrowdsale(\r\n      parseUint(args[2]))\r\n    KYCCrowdsale(\r\n      parseAddress(args[3]))\r\n    StagedCrowdsale(\r\n      parseUint(args[4]))\r\n    FinishMintingCrowdsale() public {}\r\n  \r\n\r\n  function parseBool(bytes32 b) internal pure returns (bool) {\r\n    return b == 0x1;\r\n  }\r\n\r\n  function parseUint(bytes32 b) internal pure returns (uint) {\r\n    return uint(b);\r\n  }\r\n\r\n  function parseAddress(bytes32 b) internal pure returns (address) {\r\n    return address(b & 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff);\r\n  }\r\n\r\n  function init(bytes32[] args) public {\r\n    uint _startTime = uint(args[0]);\r\n    uint _endTime = uint(args[1]);\r\n    uint _rate = uint(args[2]);\r\n    uint _cap = uint(args[3]);\r\n    uint _goal = uint(args[4]);\r\n    uint _crowdsaleRatio = uint(args[5]);\r\n    address _vault = address(args[6]);\r\n    address _locker = address(args[7]);\r\n    address _nextTokenOwner = address(args[8]);\r\n\r\n    require(_endTime > _startTime);\r\n    require(_rate > 0);\r\n    require(_cap > 0);\r\n    require(_goal > 0);\r\n    require(_cap > _goal);\r\n    require(_crowdsaleRatio > 0);\r\n    require(_vault != address(0));\r\n    require(_locker != address(0));\r\n    require(_nextTokenOwner != address(0));\r\n    \r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    cap = _cap;\r\n    goal = _goal;\r\n    crowdsaleRatio = _crowdsaleRatio;\r\n    vault = MultiHolderVault(_vault);\r\n    locker = Locker(_locker);\r\n    nextTokenOwner = _nextTokenOwner;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amounts\",\"type\":\"uint128[]\"},{\"name\":\"values\",\"type\":\"uint32[]\"}],\"name\":\"setBonusesForAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BONUS_AMOUNTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"times\",\"type\":\"uint32[]\"},{\"name\":\"values\",\"type\":\"uint32[]\"}],\"name\":\"setBonusesForTimes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BONUS_AMOUNTS_VALUES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusesForTimesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_HOLDERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"ratio\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"args\",\"type\":\"bytes32[]\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusesForAmountsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BONUS_TIMES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"computeBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextTokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"recentBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHolderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"computeTimeBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"computeAmountBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"name\":\"cap\",\"type\":\"uint128\"},{\"name\":\"maxPurchaseLimit\",\"type\":\"uint128\"},{\"name\":\"minPurchaseLimit\",\"type\":\"uint128\"},{\"name\":\"weiRaised\",\"type\":\"uint128\"},{\"name\":\"startTime\",\"type\":\"uint32\"},{\"name\":\"endTime\",\"type\":\"uint32\"},{\"name\":\"kyc\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTimes\",\"type\":\"uint32[]\"},{\"name\":\"_endTimes\",\"type\":\"uint32[]\"},{\"name\":\"_capRatios\",\"type\":\"uint128[]\"},{\"name\":\"_maxPurchaseLimits\",\"type\":\"uint128[]\"},{\"name\":\"_minPurchaseLimits\",\"type\":\"uint128[]\"},{\"name\":\"_kycs\",\"type\":\"bool[]\"}],\"name\":\"initStages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coeff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStageIndex\",\"outputs\":[{\"name\":\"currentStage\",\"type\":\"uint8\"},{\"name\":\"onSale\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"registered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPeriods\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BONUS_TIMES_VALUES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_ratios\",\"type\":\"uint96[]\"}],\"name\":\"initHolders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"args\",\"type\":\"bytes32[5]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AlphaconCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000454b9f249bc1492ee995793bbc3e57b830f1a5e90000000000000000000000000000000000000000000000000000000000000005000000000000000000000000d6b9e8f3f0d06ce286ae07801e44eacbe86155ef0000000000000000000000000000000000000000000000000000000000000002","Library":"","SwarmSource":"bzzr://8aa72e811eba0a6c14aa79a28f1d9a52b8d5145ea3973e3b0ddba54a156c5d64"}]}