{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract MultiOwners {\r\n\r\n    event AccessGrant(address indexed owner);\r\n    event AccessRevoke(address indexed owner);\r\n    \r\n    mapping(address => bool) owners;\r\n    address public publisher;\r\n\r\n\r\n    function MultiOwners() {\r\n        owners[msg.sender] = true;\r\n        publisher = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() { \r\n        require(owners[msg.sender] == true);\r\n        _; \r\n    }\r\n\r\n    function isOwner() constant returns (bool) {\r\n        return owners[msg.sender] ? true : false;\r\n    }\r\n\r\n    function checkOwner(address maybe_owner) constant returns (bool) {\r\n        return owners[maybe_owner] ? true : false;\r\n    }\r\n\r\n\r\n    function grant(address _owner) onlyOwner {\r\n        owners[_owner] = true;\r\n        AccessGrant(_owner);\r\n    }\r\n\r\n    function revoke(address _owner) onlyOwner {\r\n        require(_owner != publisher);\r\n        require(msg.sender != _owner);\r\n\r\n        owners[_owner] = false;\r\n        AccessRevoke(_owner);\r\n    }\r\n}\r\n\r\ncontract Haltable is MultiOwners {\r\n    bool public halted;\r\n\r\n    modifier stopInEmergency {\r\n        require(!halted);\r\n        _;\r\n    }\r\n\r\n    modifier onlyInEmergency {\r\n        require(halted);\r\n        _;\r\n    }\r\n\r\n    // called by the owner on emergency, triggers stopped state\r\n    function halt() external onlyOwner {\r\n        halted = true;\r\n    }\r\n\r\n    // called by the owner on end of emergency, returns to normal state\r\n    function unhalt() external onlyOwner onlyInEmergency {\r\n        halted = false;\r\n    }\r\n\r\n}\r\n\r\ncontract StagePercentageStep is MultiOwners {\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    uint256 public tokenPriceInETH;\r\n    uint256 public mintCapInETH;\r\n    uint256 public mintCapInUSD;\r\n    uint256 public mintCapInTokens;\r\n    uint256 public hardCapInTokens;\r\n    uint256 public totalWei;\r\n    uint256 public bonusAvailable;\r\n    uint256 public bonusTotalSupply;\r\n    \r\n\r\n    struct Round {\r\n        uint256 windowInTokens;\r\n        uint256 windowInETH;\r\n        uint256 accInETH;\r\n        uint256 accInTokens;\r\n        uint256 nextAccInETH;\r\n        uint256 nextAccInTokens;\r\n        uint256 discount;\r\n        uint256 priceInETH;\r\n        uint256 weightPercentage;\r\n    }\r\n    \r\n    Round[] public rounds;\r\n    \r\n    function StagePercentageStep(string _name) {\r\n        name = _name;\r\n    }\r\n    \r\n    function totalEther() public constant returns(uint256) {\r\n        return totalWei.div(1e18);\r\n    }\r\n\r\n    function registerRound(uint256 priceDiscount, uint256 weightPercentage) internal {\r\n        uint256 windowInETH;\r\n        uint256 windowInTokens;\r\n        uint256 accInETH = 0;\r\n        uint256 accInTokens = 0;\r\n        uint256 priceInETH;\r\n        \r\n        \r\n        priceInETH = tokenPriceInETH.mul(100-priceDiscount).div(100);\r\n        windowInETH = mintCapInETH.mul(weightPercentage).div(100);\r\n        windowInTokens = windowInETH.mul(1e18).div(priceInETH);\r\n\r\n        if(rounds.length > 0) {\r\n            accInTokens = accInTokens.add(rounds[rounds.length-1].nextAccInTokens);\r\n            accInETH = accInETH.add(rounds[rounds.length-1].nextAccInETH);\r\n        }\r\n\r\n        rounds.push(Round({\r\n            windowInETH: windowInETH,\r\n            windowInTokens: windowInTokens,\r\n            accInETH: accInETH,\r\n            accInTokens: accInTokens,\r\n            nextAccInETH: accInETH + windowInETH,\r\n            nextAccInTokens: accInTokens + windowInTokens,\r\n            weightPercentage: weightPercentage,\r\n            discount: priceDiscount,\r\n            priceInETH: priceInETH\r\n        }));\r\n        mintCapInTokens = mintCapInTokens.add(windowInTokens);\r\n        hardCapInTokens = mintCapInTokens.mul(120).div(100);\r\n    }\r\n    \r\n    /*\r\n     * @dev calculate amount\r\n     * @param _value ether to be converted to tokens\r\n     * @param _totalEthers total received ETH\r\n     * @return tokens amount that we should send to our dear investor\r\n     * @return odd ethers amount, which contract should send back\r\n     */\r\n    function calcAmount(\r\n        uint256 _amount,\r\n        uint256 _totalEthers\r\n    ) public constant returns (uint256 estimate, uint256 amount) {\r\n        Round memory round;\r\n        uint256 totalEthers = _totalEthers;\r\n        amount = _amount;\r\n        \r\n        for(uint256 i; i<rounds.length; i++) {\r\n            round = rounds[i];\r\n\r\n            if(!(totalEthers >= round.accInETH && totalEthers < round.nextAccInETH)) {\r\n                continue;\r\n            }\r\n            \r\n            if(totalEthers.add(amount) < round.nextAccInETH) {\r\n                return (estimate + amount.mul(1e18).div(round.priceInETH), 0);\r\n            }\r\n\r\n            amount = amount.sub(round.nextAccInETH.sub(totalEthers));\r\n            estimate = estimate + (\r\n                round.nextAccInETH.sub(totalEthers).mul(1e18).div(round.priceInETH)\r\n            );\r\n            totalEthers = round.nextAccInETH;\r\n        }\r\n        return (estimate, amount);\r\n    }    \r\n}\r\n\r\ncontract SessiaCrowdsale is StagePercentageStep, Haltable {\r\n    using SafeMath for uint256;\r\n\r\n    // min wei per tx\r\n    uint256 public ethPriceInUSD = 680e2; // 460 USD per one ETH\r\n    uint256 public minimalUSD = 680e2; // minimal sale 500 USD\r\n    uint256 public minimalWei = minimalUSD.mul(1e18).div(ethPriceInUSD); // 1.087 ETH\r\n\r\n    // Token\r\n    SessiaToken public token;\r\n\r\n    // Withdraw wallet\r\n    address public wallet;\r\n\r\n    // period\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    //\r\n    address public bonusMintingAgent;\r\n\r\n\r\n    event ETokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\r\n    event ETransferOddEther(address indexed beneficiary, uint256 value);\r\n    event ESetBonusMintingAgent(address agent);\r\n    event ESetStartTime(uint256 new_startTime);\r\n    event ESetEndTime(uint256 new_endTime);\r\n    event EManualMinting(address indexed beneficiary, uint256 value, uint256 amount);\r\n    event EBonusMinting(address indexed beneficiary, uint256 value);\r\n\r\n\r\n    modifier validPurchase() {\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        \r\n        require(withinPeriod() && nonZeroPurchase);\r\n\r\n        _;        \r\n    }\r\n\r\n    function SessiaCrowdsale(\r\n        uint256 _startTime,  // 1526482800 05/16/2018 @ 3:00pm (UTC)\r\n        uint256 _endTime,  //  1537110000 09/16/2018 @ 3:00pm (UTC)\r\n        address _wallet,  // 0x62926204Fb0f6B01D9530C0d2AcCe194b07dEfA8\r\n        address _bonusMintingAgent\r\n    )\r\n        public\r\n        StagePercentageStep(\"Pre-ITO\") \r\n     {\r\n        require(_startTime >= 0);\r\n        require(_endTime > _startTime);\r\n\r\n        token = new SessiaToken();\r\n        token.grant(_bonusMintingAgent);\r\n        token.grant(_wallet);\r\n\r\n        bonusMintingAgent = _bonusMintingAgent;\r\n        wallet = _wallet;\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n\r\n        tokenPriceInETH = 1e15; // 0.001 ETH\r\n        mintCapInUSD = 3000000e2; // 3.000.000 USD * 100 cents\r\n        mintCapInETH = mintCapInUSD.mul(1e18).div(ethPriceInUSD);\r\n    \r\n        registerRound({priceDiscount: 30, weightPercentage: 10});\r\n        registerRound({priceDiscount: 20, weightPercentage: 20});\r\n        registerRound({priceDiscount: 10, weightPercentage: 30});\r\n        registerRound({priceDiscount: 0, weightPercentage: 40});\r\n    \r\n        require(bonusMintingAgent != 0);\r\n        require(wallet != 0x0);\r\n    }\r\n\r\n    function withinPeriod() constant public returns (bool) {\r\n        return (now >= startTime && now <= endTime);\r\n    }\r\n\r\n    // @return false if crowdsale event was ended\r\n    function running() constant public returns (bool) {\r\n        return withinPeriod() && !token.mintingFinished();\r\n    }\r\n\r\n    /*\r\n     * @dev change agent for bonus minting\r\n     * @praram agent new agent address\r\n     */\r\n    function setBonusMintingAgent(address agent) public onlyOwner {\r\n        require(agent != address(this));\r\n        token.revoke(bonusMintingAgent);\r\n        token.grant(agent);\r\n        bonusMintingAgent = agent;\r\n        ESetBonusMintingAgent(agent);\r\n    }\r\n\r\n    // @return current stage name\r\n    function stageName() constant public returns (string) {\r\n        bool beforePeriod = (now < startTime);\r\n\r\n        if(beforePeriod) {\r\n            return \"Not started\";\r\n        }\r\n\r\n        if(withinPeriod()) {\r\n            return name;\r\n        } \r\n\r\n        return \"Finished\";\r\n    }\r\n\r\n    /*\r\n     * @dev fallback for processing ether\r\n     */\r\n    function() public payable {\r\n        return buyTokens(msg.sender);\r\n    }\r\n\r\n    /*\r\n     * @dev set start date\r\n     * @param _at — new start date\r\n     */\r\n    function setStartTime(uint256 _at) public onlyOwner {\r\n        require(block.timestamp < _at); // should be great than current block timestamp\r\n        require(_at < endTime);\r\n\r\n        startTime = _at;\r\n        ESetStartTime(_at);\r\n    }\r\n\r\n    /*\r\n     * @dev set end date\r\n     * @param _at — new end date\r\n     */\r\n    function setEndTime(uint256 _at) public onlyOwner {\r\n        require(startTime < _at);  // should be great than current block timestamp\r\n\r\n        endTime = _at;\r\n        ESetEndTime(_at);\r\n    }\r\n\r\n    /*\r\n     * @dev Large Token Holder minting \r\n     * @param to - mint to address\r\n     * @param amount - how much mint\r\n     */\r\n    function bonusMinting(address to, uint256 amount) stopInEmergency public {\r\n        require(msg.sender == bonusMintingAgent || isOwner());\r\n        require(amount <= bonusAvailable);\r\n        require(token.totalSupply() + amount <= hardCapInTokens);\r\n\r\n        bonusTotalSupply = bonusTotalSupply.add(amount);\r\n        bonusAvailable = bonusAvailable.sub(amount);\r\n        EBonusMinting(to, amount);\r\n        token.mint(to, amount);\r\n    }\r\n\r\n    /*\r\n     * @dev sell token and send to contributor address\r\n     * @param contributor address\r\n     */\r\n    function buyTokens(address contributor) payable stopInEmergency validPurchase public {\r\n        require(contributor != 0x0);\r\n        require(msg.value >= minimalWei);\r\n\r\n        uint256 amount;\r\n        uint256 odd_ethers;\r\n        uint256 ethers;\r\n        \r\n        (amount, odd_ethers) = calcAmount(msg.value, totalWei);  \r\n        require(amount + token.totalSupply() + bonusAvailable <= hardCapInTokens);\r\n\r\n        ethers = (msg.value.sub(odd_ethers));\r\n\r\n        token.mint(contributor, amount); // fail if minting is finished\r\n        ETokenPurchase(contributor, ethers, amount);\r\n        totalWei = totalWei.add(ethers);\r\n\r\n        if(odd_ethers > 0) {\r\n            require(odd_ethers < msg.value);\r\n            ETransferOddEther(contributor, odd_ethers);\r\n            contributor.transfer(odd_ethers);\r\n        }\r\n        bonusAvailable = bonusAvailable.add(amount.mul(20).div(100));\r\n\r\n        wallet.transfer(ethers);\r\n    }\r\n\r\n\r\n    /*\r\n     * @dev manual tokens issuing\r\n     * @param contributor address, etheres\r\n     */\r\n    function manualMinting(address contributor, uint256 value) onlyOwner stopInEmergency public {\r\n        require(withinPeriod());\r\n        require(contributor != 0x0);\r\n        require(value >= minimalWei);\r\n\r\n        uint256 amount;\r\n        uint256 odd_ethers;\r\n        uint256 ethers;\r\n        \r\n        (amount, odd_ethers) = calcAmount(value, totalWei);\r\n        require(amount + token.totalSupply() + bonusAvailable <= hardCapInTokens);\r\n\r\n        ethers = value.sub(odd_ethers);\r\n\r\n        token.mint(contributor, amount); // fail if minting is finished\r\n        EManualMinting(contributor, amount, ethers);\r\n        totalWei = totalWei.add(ethers);\r\n        bonusAvailable = bonusAvailable.add(amount.mul(20).div(100));\r\n    }\r\n\r\n    function finishCrowdsale() onlyOwner public {\r\n        require(block.timestamp > endTime || (mintCapInETH - totalWei) <= 1e18);\r\n        require(!token.mintingFinished());\r\n\r\n        if(bonusAvailable > 0) {\r\n            bonusMinting(wallet, bonusAvailable);\r\n        }\r\n        token.finishMinting();\r\n    }\r\n\r\n}\r\n\r\ncontract SessiaToken is MintableToken, MultiOwners {\r\n\r\n    string public constant name = \"Sessia Kickers\";\r\n    string public constant symbol = \"PRE-KICK\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        if(!isOwner()) {\r\n            revert();\r\n        }\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        if(!isOwner()) {\r\n            revert();\r\n        }\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function grant(address _owner) public {\r\n        require(publisher == msg.sender);\r\n        return super.grant(_owner);\r\n    }\r\n\r\n    function revoke(address _owner) public {\r\n        require(publisher == msg.sender);\r\n        return super.revoke(_owner);\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) public returns (bool) {\r\n        require(publisher == msg.sender);\r\n        return super.mint(_to, _amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"withinPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"manualMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapInTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceInETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"grant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_totalEthers\",\"type\":\"uint256\"}],\"name\":\"calcAmount\",\"outputs\":[{\"name\":\"estimate\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintCapInTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPriceInUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"name\":\"windowInTokens\",\"type\":\"uint256\"},{\"name\":\"windowInETH\",\"type\":\"uint256\"},{\"name\":\"accInETH\",\"type\":\"uint256\"},{\"name\":\"accInTokens\",\"type\":\"uint256\"},{\"name\":\"nextAccInETH\",\"type\":\"uint256\"},{\"name\":\"nextAccInTokens\",\"type\":\"uint256\"},{\"name\":\"discount\",\"type\":\"uint256\"},{\"name\":\"priceInETH\",\"type\":\"uint256\"},{\"name\":\"weightPercentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publisher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bonusMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintCapInETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintCapInUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_at\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusMintingAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"running\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"maybe_owner\",\"type\":\"address\"}],\"name\":\"checkOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setBonusMintingAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_bonusMintingAgent\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ETransferOddEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"ESetBonusMintingAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"new_startTime\",\"type\":\"uint256\"}],\"name\":\"ESetStartTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"new_endTime\",\"type\":\"uint256\"}],\"name\":\"ESetEndTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EManualMinting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EBonusMinting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AccessGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AccessRevoke\",\"type\":\"event\"}]","ContractName":"SessiaCrowdsale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005afc4770000000000000000000000000000000000000000000000000000000005b9e6ff000000000000000000000000062926204fb0f6b01d9530c0d2acce194b07defa800000000000000000000000062926204fb0f6b01d9530c0d2acce194b07defa8","Library":"","SwarmSource":"bzzr://9dbdedf001d05a5f2c223c58582c13339b41548301449930fbe9c2f0e8770628"}]}