{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Token {\r\n  function totalSupply() constant public returns (uint256 supply);\r\n\r\n  function balanceOf(address _owner) constant public returns (uint256 balance);\r\n  function transfer(address _to, uint256 _value) public  returns (bool success) ;\r\n  function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success) ;\r\n  function approve(address _spender, uint256 _value) public  returns (bool success) ;\r\n  function allowance(address _owner, address _spender) constant public  returns (uint256 remaining) ;\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  uint public decimals;\r\n  string public name;\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where Contributors can make\r\n * token Contributions and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive. The contract requires a MintableToken that will be\r\n * minted as contributions arrive, note that the crowdsale contract\r\n * must be owner of the token in order to be able to mint it.\r\n */\r\ncontract Crowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n  // totalTokens\r\n  uint256 public totalTokens;\r\n  // soft cap\r\n  uint softcap;\r\n  // hard cap\r\n  uint hardcap;  \r\n  Token public token;\r\n  // balances for softcap\r\n  mapping(address => uint) public balances;\r\n  // balances for softcap\r\n  mapping(address => uint) public balancesToken;  \r\n  // The token being offered\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  \r\n  //pre-sale\r\n    //start\r\n  uint256 public startPreSale;\r\n    //end\r\n  uint256 public endPreSale;\r\n\r\n  //ico\r\n    //start\r\n  uint256 public startIco;\r\n    //end \r\n  uint256 public endIco;    \r\n\r\n  //token distribution\r\n  uint256 public maxPreSale;\r\n  uint256 public maxIco;\r\n\r\n  uint256 public totalPreSale;\r\n  uint256 public totalIco;\r\n  \r\n  // how many token units a Contributor gets per wei\r\n  uint256 public ratePreSale;\r\n  uint256 public rateIco;   \r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // minimum quantity values\r\n  uint256 public minQuanValues; \r\n  uint256 public maxQuanValues; \r\n\r\n/**\r\n* event for token Procurement logging\r\n* @param contributor who Pledged for the tokens\r\n* @param beneficiary who got the tokens\r\n* @param value weis Contributed for Procurement\r\n* @param amount amount of tokens Procured\r\n*/\r\n  event TokenProcurement(address indexed contributor, address indexed beneficiary, uint256 value, uint256 amount);\r\n  function Crowdsale() public {\r\n    \r\n    //soft cap\r\n    softcap = 5000 * 1 ether; \r\n    hardcap = 20000 * 1 ether;  \t\r\n    // min quantity values\r\n    minQuanValues = 100000000000000000; //0.1 eth\r\n    // max quantity values\r\n    maxQuanValues = 27 * 1 ether; //    \r\n    // start and end timestamps where investments are allowed\r\n    //Pre-sale\r\n      //start\r\n    startPreSale = 1523260800;//09 Apr 2018 08:00:00 +0000\r\n      //end\r\n    endPreSale = 1525507200;//05 May 2018 08:00:00 +0000\r\n  \r\n    //ico\r\n      //start\r\n    startIco = 1525507200;//05 May 2018 08:00:00 +0000\r\n      //end \r\n    endIco = startIco + 6 * 7 * 1 days;   \r\n\r\n    // rate;\r\n    ratePreSale = 382;\r\n    rateIco = 191; \r\n    \r\n    // restrictions on amounts during the crowdfunding event stages\r\n    maxPreSale = 30000000 * 1 ether;\r\n    maxIco =     60000000 * 1 ether;    \r\n    \r\n    // address where funds are collected\r\n    wallet = 0x04cFbFa64917070d7AEECd20225782240E8976dc;\r\n  }\r\n\r\n  function setratePreSale(uint _ratePreSale) public onlyOwner  {\r\n    ratePreSale = _ratePreSale;\r\n  }\r\n \r\n  function setrateIco(uint _rateIco) public onlyOwner  {\r\n    rateIco = _rateIco;\r\n  }   \r\n  \r\n\r\n\r\n  // fallback function can be used to Procure tokens\r\n  function () external payable {\r\n    procureTokens(msg.sender);\r\n  }\r\n  \r\n  function setToken(address _address) public onlyOwner {\r\n      token = Token(_address);\r\n  }\r\n    \r\n  // low level token Pledge function\r\n  function procureTokens(address beneficiary) public payable {\r\n    uint256 tokens;\r\n    uint256 weiAmount = msg.value;\r\n    uint256 backAmount;\r\n    require(beneficiary != address(0));\r\n    //minimum amount in ETH\r\n    require(weiAmount >= minQuanValues);\r\n    //maximum amount in ETH\r\n    require(weiAmount.add(balances[msg.sender]) <= maxQuanValues);    \r\n    //hard cap\r\n    address _this = this;\r\n    require(hardcap > _this.balance);\r\n\r\n    //Pre-sale\r\n    if (now >= startPreSale && now < endPreSale && totalPreSale < maxPreSale){\r\n      tokens = weiAmount.mul(ratePreSale);\r\n\t  if (maxPreSale.sub(totalPreSale) <= tokens){\r\n\t    endPreSale = now;\r\n\t    startIco = now;\r\n\t    endIco = startIco + 6 * 7 * 1 days; \r\n\t  }\r\n      if (maxPreSale.sub(totalPreSale) < tokens){\r\n        tokens = maxPreSale.sub(totalPreSale); \r\n        weiAmount = tokens.div(ratePreSale);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n      totalPreSale = totalPreSale.add(tokens);\r\n    }\r\n       \r\n    //ico   \r\n    if (now >= startIco && now < endIco && totalIco < maxIco){\r\n      tokens = weiAmount.mul(rateIco);\r\n      if (maxIco.sub(totalIco) < tokens){\r\n        tokens = maxIco.sub(totalIco); \r\n        weiAmount = tokens.div(rateIco);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n      totalIco = totalIco.add(tokens);\r\n    }        \r\n\r\n    require(tokens > 0);\r\n    balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n    balancesToken[msg.sender] = balancesToken[msg.sender].add(tokens);\r\n    \r\n    if (backAmount > 0){\r\n      msg.sender.transfer(backAmount);    \r\n    }\r\n    emit TokenProcurement(msg.sender, beneficiary, weiAmount, tokens);\r\n  }\r\n  function getToken() public{\r\n    address _this = this;\r\n    require(_this.balance >= softcap && now > endIco); \r\n    uint value = balancesToken[msg.sender];\r\n    balancesToken[msg.sender] = 0;\r\n    token.transfer(msg.sender, value);\r\n  }\r\n  \r\n  function refund() public{\r\n    address _this = this;\r\n    require(_this.balance < softcap && now > endIco);\r\n    require(balances[msg.sender] > 0);\r\n    uint value = balances[msg.sender];\r\n    balances[msg.sender] = 0;\r\n    msg.sender.transfer(value);\r\n  }\r\n  \r\n  function transferTokenToMultisig(address _address) public onlyOwner {\r\n    address _this = this;\r\n    require(_this.balance >= softcap && now > endIco);  \r\n    token.transfer(_address, token.balanceOf(_this));\r\n  }   \r\n  \r\n  function transferEthToMultisig() public onlyOwner {\r\n    address _this = this;\r\n    require(_this.balance >= softcap && now > endIco);  \r\n    wallet.transfer(_this.balance);\r\n  }  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_rateIco\",\"type\":\"uint256\"}],\"name\":\"setrateIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxQuanValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferTokenToMultisig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferEthToMultisig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ratePreSale\",\"type\":\"uint256\"}],\"name\":\"setratePreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"procureTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minQuanValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balancesToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenProcurement\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ca285f043c7bbb4ea30401692234e38dac59089bcfe63313e6f8d4e2b0825b99"}]}