{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\ncontract GameCards {\r\n\r\n    /// Lease record, store card tenants details\r\n    /// and lease details\r\n    struct LeaseCard {\r\n        uint id;\r\n        address tenant;\r\n        uint price;\r\n        uint untilBlock;\r\n        string title;\r\n        string url;\r\n        string image;\r\n    }\r\n\r\n    /// Record card details\r\n    struct CardDetails {\r\n        uint8 id;\r\n        uint price;\r\n        uint priceLease; // price per block\r\n        uint leaseDuration; // in block\r\n        bool availableBuy;\r\n        bool availableLease;\r\n        uint[] leaseList;\r\n        mapping(uint => LeaseCard) leaseCardStructs;\r\n    }\r\n\r\n    /// Record card\r\n    struct Card {\r\n        uint8 id;\r\n        address owner;\r\n        string title;\r\n        string url;\r\n        string image;\r\n        bool nsfw;\r\n    }\r\n\r\n    /// Users pending withdrawals\r\n    mapping(address => uint) public pendingWithdrawals;\r\n\r\n    mapping(uint8 => Card) public cardStructs; // random access by card key\r\n    uint8[] public cardList; // list of announce keys so we can enumerate them\r\n\r\n    mapping(uint8 => CardDetails) public cardDetailsStructs; // random access by card details key\r\n    uint8[] public cardDetailsList; // list of cards details keys so we can enumerate them\r\n\r\n    /// Initial card price\r\n    uint public initialCardPrice = 1 ether;\r\n\r\n    /// Owner cut (1%) . This cut only apply on a user-to-user card transaction\r\n    uint public ownerBuyCut = 100;\r\n    /// fluffyCat cut (10%)\r\n    uint public fluffyCatCut = 1000;\r\n\r\n    /// contractOwner can withdraw the funds\r\n    address public contractOwner;\r\n    /// fluffyCat address\r\n    address public fluffyCatAddress = 0x2c00A5013aA2E600663f7b197C98db73bA847e6d;\r\n\r\n    /// Contract constructor\r\n    function GameCards() public {\r\n        contractOwner = msg.sender;\r\n    }\r\n\r\n    modifier onlyContractOwner() {\r\n        // Throws if called by any account other than the contract owner\r\n        require(msg.sender == contractOwner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCardOwner(uint8 cardId) {\r\n        // Throws if called by any account other than the card owner\r\n        require(msg.sender == cardStructs[cardId].owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidCard(uint8 cardId) {\r\n        // Throws if card is not valid\r\n        require(cardId >= 1 && cardId <= 100);\r\n        _;\r\n    }\r\n\r\n    /// Return cardList array\r\n    function getCards() public view returns(uint8[]) {\r\n        uint8[] memory result = new uint8[](cardList.length);\r\n        uint8 counter = 0;\r\n        for (uint8 i = 0; i < cardList.length; i++) {\r\n            result[counter] = i;\r\n            counter++;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// Return cardDetailsList array\r\n    function getCardsDetails() public view returns(uint8[]) {\r\n        uint8[] memory result = new uint8[](cardDetailsList.length);\r\n        uint8 counter = 0;\r\n        for (uint8 i = 0; i < cardDetailsList.length; i++) {\r\n            result[counter] = i;\r\n            counter++;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// Return card details by id\r\n    function getCardDetails(uint8 cardId) public view onlyValidCard(cardId)\r\n        returns (uint8 id, uint price, uint priceLease, uint leaseDuration, bool availableBuy, bool availableLease) {\r\n            bool _buyAvailability;\r\n            if (cardDetailsStructs[cardId].id == 0 || cardDetailsStructs[cardId].availableBuy) {\r\n                _buyAvailability = true;\r\n            }\r\n\r\n            CardDetails storage detail = cardDetailsStructs[cardId];\r\n            return (\r\n                detail.id,\r\n                detail.price,\r\n                detail.priceLease,\r\n                detail.leaseDuration,\r\n                _buyAvailability,\r\n                detail.availableLease\r\n                );\r\n        }\r\n\r\n    /// Return card by id\r\n    function getCard(uint8 cardId) public view onlyValidCard(cardId)\r\n        returns (uint8 id, address owner, string title, string url, string image, bool nsfw) {\r\n            Card storage card = cardStructs[cardId];\r\n            id = card.id;\r\n            owner = card.owner;\r\n            title = card.title;\r\n            url = card.url;\r\n            image = card.image;\r\n            nsfw = card.nsfw;\r\n        }\r\n\r\n    /// This is called on the initial buy card, user to user buy is at buyCard()\r\n    /// Amount is sent to contractOwner balance and fluffycat get 10% of this amount\r\n    function initialBuyCard(uint8 cardId, string title, string url, string image) public\r\n        onlyValidCard(cardId)\r\n        payable\r\n        returns (bool success)\r\n    {\r\n        // Check sent amount\r\n        uint price = computeInitialPrice(cardId);\r\n        require(msg.value >= price);\r\n        // If owner is 0x0, then we are sure that\r\n        // this is the initial buy\r\n        require(cardStructs[cardId].owner == address(0));\r\n\r\n        // Fill card\r\n        _fillCardStruct(cardId, msg.sender, title, url, image);\r\n        // Set nsfw flag to false\r\n        cardStructs[cardId].nsfw = false;\r\n        // Contract credit 10% of price to FluffyCat\r\n        _applyShare(contractOwner, fluffyCatAddress, fluffyCatCut);\r\n        // Initialize card details\r\n        _initCardDetails(cardId, price);\r\n        // Add the card to cardList\r\n        cardList.push(cardId);\r\n        return true;\r\n    }\r\n\r\n    /// Perform a user to user buy transaction\r\n    /// Contract owner takes 1% cut on each of this transaction\r\n    function buyCard(uint8 cardId, string title, string url, string image) public\r\n        onlyValidCard(cardId)\r\n        payable\r\n        returns (bool success)\r\n    {\r\n        // Check that this is not an initial buy, i.e. that the\r\n        // card belongs to someone\r\n        require(cardStructs[cardId].owner != address(0));\r\n        // Check if card is on sale\r\n        require(cardDetailsStructs[cardId].availableBuy);\r\n        // Check sent amount\r\n        uint price = cardDetailsStructs[cardId].price;\r\n        require(msg.value >= price);\r\n\r\n        address previousOwner = cardStructs[cardId].owner;\r\n        // Take 1% cut on buy\r\n        _applyShare(previousOwner, contractOwner, ownerBuyCut);\r\n        // Fill card\r\n        _fillCardStruct(cardId, msg.sender, title, url, image);\r\n        // Set nsfw flag to false\r\n        cardStructs[cardId].nsfw = false;\r\n        // Disable sell status\r\n        cardDetailsStructs[cardId].availableBuy = false;\r\n        return true;\r\n    }\r\n\r\n    /// Allow card owner to edit his card informations\r\n    function editCard(uint8 cardId, string title, string url, string image) public\r\n        onlyValidCard(cardId)\r\n        onlyCardOwner(cardId)\r\n        returns (bool success)\r\n    {\r\n        // Fill card\r\n        _fillCardStruct(cardId, msg.sender, title, url, image);\r\n        // Disable sell status\r\n        return true;\r\n    }\r\n\r\n    /// Allow card owner to set his card on sale at specific price\r\n    function sellCard(uint8 cardId, uint price) public\r\n        onlyValidCard(cardId)\r\n        onlyCardOwner(cardId)\r\n        returns (bool success)\r\n    {\r\n        cardDetailsStructs[cardId].price = price;\r\n        cardDetailsStructs[cardId].availableBuy = true;\r\n        return true;\r\n    }\r\n\r\n    /// Allow card owner to cancel sell offer\r\n    function cancelSellCard(uint8 cardId) public\r\n        onlyValidCard(cardId)\r\n        onlyCardOwner(cardId)\r\n        returns (bool success)\r\n    {\r\n        cardDetailsStructs[cardId].availableBuy = false;\r\n        return true;\r\n    }\r\n\r\n    /// Allow card owner to set his card on lease at fixed price per block and duration\r\n    function setLeaseCard(uint8 cardId, uint priceLease, uint leaseDuration) public\r\n        onlyValidCard(cardId)\r\n        onlyCardOwner(cardId)\r\n        returns (bool success)\r\n    {\r\n        // Card cannot be on sale when setting lease\r\n        // cancelSellCard() first\r\n        require(!cardDetailsStructs[cardId].availableBuy);\r\n        // Card cannot be set on lease while currently leasing\r\n        uint _lastLeaseId = getCardLeaseLength(cardId);\r\n        uint _until = cardDetailsStructs[cardId].leaseCardStructs[_lastLeaseId].untilBlock;\r\n        require(_until < block.number);\r\n\r\n        cardDetailsStructs[cardId].priceLease = priceLease;\r\n        cardDetailsStructs[cardId].availableLease = true;\r\n        cardDetailsStructs[cardId].leaseDuration = leaseDuration;\r\n        return true;\r\n    }\r\n\r\n    /// Allow card owner to cancel lease offer\r\n    /// Note that this do not interrupt current lease if any\r\n    function cancelLeaseOffer(uint8 cardId) public\r\n        onlyValidCard(cardId)\r\n        onlyCardOwner(cardId)\r\n        returns (bool success)\r\n    {\r\n        cardDetailsStructs[cardId].availableLease = false;\r\n        return true;\r\n    }\r\n\r\n    /// Allow future tenant to lease a card\r\n    function leaseCard(uint8 cardId, string title, string url, string image) public\r\n        onlyValidCard(cardId)\r\n        payable\r\n        returns (bool success)\r\n    {\r\n        CardDetails storage details = cardDetailsStructs[cardId];\r\n        // Check that card is avaible to lease\r\n        require(details.availableLease);\r\n        // Get price (per block) and leaseDuration (block)\r\n        uint price = details.priceLease;\r\n        uint leaseDuration = details.leaseDuration;\r\n        uint totalAmount = price * leaseDuration;\r\n        // Check that amount sent is sufficient\r\n        require(msg.value >= totalAmount);\r\n        // Get new lease id\r\n        uint leaseId = getCardLeaseLength(cardId) + 1;\r\n        // Get the block number of lease end\r\n        uint untilBlock = block.number + leaseDuration;\r\n        // Take 1% cut on lease\r\n        Card storage card = cardStructs[cardId];\r\n        address _cardOwner = card.owner;\r\n        _applyShare(_cardOwner, contractOwner, ownerBuyCut);\r\n        // Fill leaseCardStructs\r\n        details.leaseCardStructs[leaseId].id = leaseId;\r\n        details.leaseCardStructs[leaseId].tenant = msg.sender;\r\n        details.leaseCardStructs[leaseId].price = totalAmount;\r\n        details.leaseCardStructs[leaseId].untilBlock = untilBlock;\r\n        details.leaseCardStructs[leaseId].title = title;\r\n        details.leaseCardStructs[leaseId].url = url;\r\n        details.leaseCardStructs[leaseId].image = image;\r\n        // Leases are now unavailable for this card\r\n        details.availableLease = false;\r\n        // Add lease to leases list of correspondant cardDetails\r\n        details.leaseList.push(leaseId);\r\n        return true;\r\n    }\r\n\r\n    /// Get last lease from a card\r\n    function getLastLease(uint8 cardId) public view\r\n        returns(uint leaseIndex, address tenant, uint untilBlock, string title, string url, string image)\r\n    {\r\n        uint _leaseIndex = getCardLeaseLength(cardId);\r\n        return getLease(cardId, _leaseIndex);\r\n    }\r\n\r\n    /// Get lease from card\r\n    function getLease(uint8 cardId, uint leaseId) public view\r\n        returns(uint leaseIndex, address tenant, uint untilBlock, string title, string url, string image)\r\n    {\r\n        return(\r\n            cardDetailsStructs[cardId].leaseCardStructs[leaseId].id,\r\n            cardDetailsStructs[cardId].leaseCardStructs[leaseId].tenant,\r\n            cardDetailsStructs[cardId].leaseCardStructs[leaseId].untilBlock,\r\n            cardDetailsStructs[cardId].leaseCardStructs[leaseId].title,\r\n            cardDetailsStructs[cardId].leaseCardStructs[leaseId].url,\r\n            cardDetailsStructs[cardId].leaseCardStructs[leaseId].image\r\n        );\r\n    }\r\n\r\n    /// Get lease list from a card\r\n    function getCardLeaseLength(uint8 cardId) public view\r\n        returns(uint cardLeasesCount)\r\n    {\r\n        return(cardDetailsStructs[cardId].leaseList.length);\r\n    }\r\n\r\n    /// Transfer the ownership of a card\r\n    function transferCardOwnership(address to, uint8 cardId)\r\n        public\r\n        onlyCardOwner(cardId)\r\n        returns (bool success)\r\n    {\r\n        // Transfer card ownership\r\n        cardStructs[cardId].owner = to;\r\n        return true;\r\n    }\r\n\r\n    /// Return balance from sender\r\n    function getBalance()\r\n        public\r\n        view\r\n        returns (uint amount)\r\n    {\r\n        return pendingWithdrawals[msg.sender];\r\n    }\r\n\r\n    /// Allow address to withdraw their balance\r\n    function withdraw()\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint amount = pendingWithdrawals[msg.sender];\r\n        // Remember to zero the pending refund before\r\n        // sending to prevent re-entrancy attacks\r\n        pendingWithdrawals[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n        return true;\r\n    }\r\n\r\n    /// Compute initial card price (in wei)\r\n    function computeInitialPrice(uint8 cardId) public view\r\n        onlyValidCard(cardId)\r\n        returns (uint price)\r\n    {\r\n        // 1 ether - 0.01 ether * (cardId - 1)\r\n        return initialCardPrice - ((initialCardPrice / 100) * (uint256(cardId) - 1));\r\n    }\r\n\r\n    /// Allow contract owner to set NSFW flag on a card\r\n    function setNSFW(uint8 cardId, bool flag) public\r\n        onlyValidCard(cardId)\r\n        onlyContractOwner()\r\n        returns (bool success)\r\n    {\r\n        cardStructs[cardId].nsfw = flag;\r\n        return true;\r\n    }\r\n\r\n    /// Fill Card struct\r\n    function _fillCardStruct(uint8 _cardId, address _owner, string _title, string _url, string _image) internal\r\n        returns (bool success)\r\n    {\r\n        cardStructs[_cardId].owner = _owner;\r\n        cardStructs[_cardId].title = _title;\r\n        cardStructs[_cardId].url = _url;\r\n        cardStructs[_cardId].image = _image;\r\n        return true;\r\n    }\r\n\r\n    /// Initialize sell card for future\r\n    function _initCardDetails(uint8 cardId, uint price) internal\r\n        returns (bool success)\r\n    {\r\n        // priceLease, leaseDuration set to default value(= 0)\r\n        cardDetailsStructs[cardId].id = cardId;\r\n        cardDetailsStructs[cardId].price = price;\r\n        cardDetailsStructs[cardId].availableBuy = false;\r\n        cardDetailsStructs[cardId].availableLease = false;\r\n        cardDetailsList.push(cardId);\r\n        return true;\r\n    }\r\n\r\n    /// Send split amounts to respective balances\r\n    function _applyShare(address _seller, address _auctioneer, uint _cut) internal\r\n        returns (bool success)\r\n    {\r\n        // Compute share\r\n        uint256 auctioneerCut = _computeCut(msg.value, _cut);\r\n        uint256 sellerProceeds = msg.value - auctioneerCut;\r\n        // Credit seller balance\r\n        pendingWithdrawals[_seller] += sellerProceeds;\r\n        // Credit auctionner balance\r\n        pendingWithdrawals[_auctioneer] += auctioneerCut;\r\n        return true;\r\n    }\r\n\r\n    /// Compute _cut from a _price\r\n    function _computeCut(uint256 _price, uint256 _cut) internal pure\r\n        returns (uint256)\r\n    {\r\n        return _price * _cut / 10000;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"cardDetailsStructs\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint8\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"priceLease\",\"type\":\"uint256\"},{\"name\":\"leaseDuration\",\"type\":\"uint256\"},{\"name\":\"availableBuy\",\"type\":\"bool\"},{\"name\":\"availableLease\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint8\"}],\"name\":\"getCard\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint8\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"image\",\"type\":\"string\"},{\"name\":\"nsfw\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerBuyCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint8\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"sellCard\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint8\"}],\"name\":\"cancelLeaseOffer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardDetailsList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fluffyCatAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fluffyCatCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint8\"}],\"name\":\"getCardLeaseLength\",\"outputs\":[{\"name\":\"cardLeasesCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint8\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"image\",\"type\":\"string\"}],\"name\":\"initialBuyCard\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint8\"},{\"name\":\"priceLease\",\"type\":\"uint256\"},{\"name\":\"leaseDuration\",\"type\":\"uint256\"}],\"name\":\"setLeaseCard\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint8\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"image\",\"type\":\"string\"}],\"name\":\"editCard\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint8\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"image\",\"type\":\"string\"}],\"name\":\"leaseCard\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint8\"},{\"name\":\"leaseId\",\"type\":\"uint256\"}],\"name\":\"getLease\",\"outputs\":[{\"name\":\"leaseIndex\",\"type\":\"uint256\"},{\"name\":\"tenant\",\"type\":\"address\"},{\"name\":\"untilBlock\",\"type\":\"uint256\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"image\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint8\"}],\"name\":\"computeInitialPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint8\"}],\"name\":\"getCardDetails\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint8\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"priceLease\",\"type\":\"uint256\"},{\"name\":\"leaseDuration\",\"type\":\"uint256\"},{\"name\":\"availableBuy\",\"type\":\"bool\"},{\"name\":\"availableLease\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialCardPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint8\"}],\"name\":\"transferCardOwnership\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint8\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"image\",\"type\":\"string\"}],\"name\":\"buyCard\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"cardStructs\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint8\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"image\",\"type\":\"string\"},{\"name\":\"nsfw\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCardsDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint8\"},{\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setNSFW\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint8\"}],\"name\":\"cancelSellCard\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint8\"}],\"name\":\"getLastLease\",\"outputs\":[{\"name\":\"leaseIndex\",\"type\":\"uint256\"},{\"name\":\"tenant\",\"type\":\"address\"},{\"name\":\"untilBlock\",\"type\":\"uint256\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"image\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"GameCards","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f1fa12c502744f5de882fb2554edcff79d92059342053871a441f2f544899782"}]}