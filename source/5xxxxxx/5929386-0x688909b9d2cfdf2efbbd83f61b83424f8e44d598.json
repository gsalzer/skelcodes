{"status":"1","message":"OK","result":[{"SourceCode":"/// @title Store lederboards in the Blockchain\r\n/// @author Marcel Scherello blockscores@scherello.de\r\n/// @notice Create a custom leaderboard and start counting the scores\r\n/// @dev All function calls are currently implement without side effects\r\n/// @dev v1.1.0\r\ncontract BlockScores {\r\n    struct Player {\r\n        bytes32  playerName;\r\n        address playerAddress;\r\n        uint  score;\r\n        uint  score_unconfirmed;\r\n        uint   isActive;\r\n    }\r\n    struct Board {\r\n        bytes32  boardName;\r\n        string  boardDescription;\r\n        uint   numPlayers;\r\n        address boardOwner;\r\n        mapping (uint => Player) players;\r\n    }\r\n    mapping (bytes32 => Board) boards;\r\n    uint public numBoards;\r\n    address owner = msg.sender;\r\n\r\n    uint public balance;\r\n    uint public boardCost = 1000000000000000;\r\n    uint public playerCost = 1000000000000000;\r\n\r\n    modifier isOwner {\r\n        assert(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    Funding Functions\r\n    */\r\n\r\n    /// @notice withdraw all funds to contract owner\r\n    /// @return true\r\n    function withdraw() isOwner public returns(bool) {\r\n        uint _amount = address(this).balance;\r\n        emit Withdrawal(owner, _amount);\r\n        owner.transfer(_amount);\r\n        balance -= _amount;\r\n        return true;\r\n    }\r\n\r\n    /// @notice change the costs for using the contract\r\n    /// @param costBoard costs for a new board\r\n    /// @param costPlayer costs for a new player\r\n    /// @return true\r\n    function setCosts (uint costBoard, uint costPlayer) isOwner public returns(bool) {\r\n        boardCost = costBoard;\r\n        playerCost = costPlayer;\r\n        return true;\r\n    }\r\n\r\n    /// @notice split the revenue of a new player between boardOwner and contract owner\r\n    /// @param boardOwner of the leaderboard\r\n    /// @param _amount amount to be split\r\n    /// @return true\r\n    function split(address boardOwner, uint _amount) internal returns(bool) {\r\n        emit Withdrawal(owner, _amount/2);\r\n        owner.transfer(_amount/2);\r\n        //emit Withdrawal(boardOwner, _amount/2);\r\n        boardOwner.transfer(_amount/2);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Event for Withdrawal\r\n    event Withdrawal(address indexed _from, uint _value);\r\n\r\n    /**\r\n    Board Functions\r\n    */\r\n\r\n    /// @notice Add a new leaderboard. Board hash will be created by name and creator\r\n    /// @notice a funding is required to create a new leaderboard\r\n    /// @param name The name of the leaderboard\r\n    /// @param boardDescription A subtitle for the leaderboard\r\n    /// @return The hash of the newly created leaderboard\r\n    function addNewBoard(bytes32 name, string boardDescription) public payable returns(bytes32 boardHash){\r\n        require(msg.value >= boardCost);\r\n        balance += msg.value;\r\n        boardHash = keccak256(abi.encodePacked(name, msg.sender));\r\n        numBoards++;\r\n        boards[boardHash] = Board(name, boardDescription, 0, msg.sender);\r\n        emit newBoardCreated(boardHash);\r\n    }\r\n\r\n    /// @notice Simulate the creation of a leaderboard hash\r\n    /// @param name The name of the leaderboard\r\n    /// @param admin The address of the admin address\r\n    /// @return The possible hash of the leaderboard\r\n    function createBoardHash(bytes32 name, address admin) pure public returns (bytes32){\r\n        return keccak256(abi.encodePacked(name, admin));\r\n    }\r\n\r\n    /// @notice Get the metadata of a leaderboard\r\n    /// @param boardHash The hash of the leaderboard\r\n    /// @return Leaderboard name, description and number of players\r\n    function getBoardByHash(bytes32 boardHash) constant public returns(bytes32,string,uint){\r\n        return (boards[boardHash].boardName, boards[boardHash].boardDescription, boards[boardHash].numPlayers);\r\n    }\r\n\r\n    /// @notice Overwrite leaderboard name and desctiption as owner only\r\n    /// @param boardHash The hash of the leaderboard to be modified\r\n    /// @param name The new name of the leaderboard\r\n    /// @param boardDescription The new subtitle for the leaderboard\r\n    /// @return true\r\n    function changeBoardMetadata(bytes32 boardHash, bytes32 name, string boardDescription) public returns(bool) {\r\n        require(boards[boardHash].boardOwner == msg.sender);\r\n        boards[boardHash].boardName = name;\r\n        boards[boardHash].boardDescription = boardDescription;\r\n    }\r\n\r\n    /// @notice event for newly created leaderboard\r\n    event newBoardCreated(bytes32 boardHash);\r\n\r\n\r\n    /**\r\n    Player Functions\r\n    */\r\n\r\n    /// @notice Add a new player to an existing leaderboard\r\n    /// @param boardHash The hash of the leaderboard\r\n    /// @param playerName The name of the player\r\n    /// @return Player ID\r\n    function addPlayerToBoard(bytes32 boardHash, bytes32 playerName) public payable returns (bool) {\r\n        require(msg.value >= playerCost);\r\n        Board storage g = boards[boardHash];\r\n        split (g.boardOwner, msg.value);\r\n        uint newPlayerID = g.numPlayers++;\r\n        g.players[newPlayerID] = Player(playerName, msg.sender,0,0,1);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Get player data by leaderboard hash and player id/index\r\n    /// @param boardHash The hash of the leaderboard\r\n    /// @param playerID Index number of the player\r\n    /// @return Player name, confirmed score, unconfirmed score\r\n    function getPlayerByBoard(bytes32 boardHash, uint8 playerID) constant public returns (bytes32, uint, uint){\r\n        Player storage p = boards[boardHash].players[playerID];\r\n        require(p.isActive == 1);\r\n        return (p.playerName, p.score, p.score_unconfirmed);\r\n    }\r\n\r\n    /// @notice The leaderboard owner can remove a player\r\n    /// @param boardHash The hash of the leaderboard\r\n    /// @param playerName The name of the player to be removed\r\n    /// @return true/false\r\n    function removePlayerFromBoard(bytes32 boardHash, bytes32 playerName) public returns (bool){\r\n        Board storage g = boards[boardHash];\r\n        require(g.boardOwner == msg.sender);\r\n        uint8 playerID = getPlayerId (boardHash, playerName, 0);\r\n        require(playerID < 255 );\r\n        g.players[playerID].isActive = 0;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Get the player id either by player Name or address\r\n    /// @param boardHash The hash of the leaderboard\r\n    /// @param playerName The name of the player\r\n    /// @param playerAddress The player address\r\n    /// @return ID or 999 in case of false\r\n    function getPlayerId (bytes32 boardHash, bytes32 playerName, address playerAddress) constant internal returns (uint8) {\r\n        Board storage g = boards[boardHash];\r\n        for (uint8 i = 0; i <= g.numPlayers; i++) {\r\n            if ((keccak256(abi.encodePacked(g.players[i].playerName)) == keccak256(abi.encodePacked(playerName)) || playerAddress == g.players[i].playerAddress) && g.players[i].isActive == 1) {\r\n                return i;\r\n                break;\r\n            }\r\n        }\r\n        return 255;\r\n    }\r\n\r\n    /**\r\n    Score Functions\r\n    */\r\n\r\n    /// @notice Add a unconfirmed score to leaderboard/player. Overwrites an existing unconfirmed score\r\n    /// @param boardHash The hash of the leaderboard\r\n    /// @param playerName The name of the player\r\n    /// @param score Integer\r\n    /// @return true/false\r\n    function addBoardScore(bytes32 boardHash, bytes32 playerName, uint score) public returns (bool){\r\n        uint8 playerID = getPlayerId (boardHash, playerName, 0);\r\n        require(playerID < 255 );\r\n        boards[boardHash].players[playerID].score_unconfirmed = score;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Confirm an unconfirmed score to leaderboard/player. Adds unconfirmed to existing score. Player can not confirm his own score\r\n    /// @param boardHash The hash of the leaderboard\r\n    /// @param playerName The name of the player who's score should be confirmed\r\n    /// @return true/false\r\n    function confirmBoardScore(bytes32 boardHash, bytes32 playerName) public returns (bool){\r\n        uint8 playerID = getPlayerId (boardHash, playerName, 0);\r\n        uint8 confirmerID = getPlayerId (boardHash, \"\", msg.sender);\r\n        require(playerID < 255); // player needs to be active\r\n        require(confirmerID < 255); // confirmer needs to be active\r\n        require(boards[boardHash].players[playerID].playerAddress != msg.sender); //confirm only other players\r\n        boards[boardHash].players[playerID].score += boards[boardHash].players[playerID].score_unconfirmed;\r\n        boards[boardHash].players[playerID].score_unconfirmed = 0;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    Migration Functions\r\n    */\r\n    /// @notice Read board metadata for migration as contract owner only\r\n    /// @param boardHash The hash of the leaderboard\r\n    /// @return Bord metadata\r\n    function migrationGetBoard(bytes32 boardHash) constant isOwner public returns(bytes32,string,uint,address) {\r\n        return (boards[boardHash].boardName, boards[boardHash].boardDescription, boards[boardHash].numPlayers, boards[boardHash].boardOwner);\r\n    }\r\n\r\n    /// @notice Write board metadata for migration as contract owner only\r\n    /// @param boardHash The hash of the leaderboard to be modified\r\n    /// @param name The new name of the leaderboard\r\n    /// @param boardDescription The new subtitle for the leaderboard\r\n    /// @param boardOwner The address for the boardowner\r\n    /// @return true\r\n    function migrationSetBoard(bytes32 boardHash, bytes32 name, string boardDescription, uint8 numPlayers, address boardOwner) isOwner public returns(bool) {\r\n        boards[boardHash].boardName = name;\r\n        boards[boardHash].boardDescription = boardDescription;\r\n        boards[boardHash].numPlayers = numPlayers;\r\n        boards[boardHash].boardOwner = boardOwner;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Read player metadata for migration as contract owner\r\n    /// @param boardHash The hash of the leaderboard\r\n    /// @param playerID Index number of the player\r\n    /// @return Player metadata\r\n    function migrationGetPlayer(bytes32 boardHash, uint8 playerID) constant isOwner public returns (uint, bytes32, address, uint, uint, uint){\r\n        Player storage p = boards[boardHash].players[playerID];\r\n        return (playerID, p.playerName, p.playerAddress, p.score, p.score_unconfirmed, p.isActive);\r\n    }\r\n\r\n    /// @notice Write player metadata for migration as contract owner only\r\n    /// @param boardHash The hash of the leaderboard\r\n    /// @param playerID Player ID\r\n    /// @param playerName Player name\r\n    /// @param playerAddress Player address\r\n    /// @param score Player score\r\n    /// @param score_unconfirmed Player unconfirmed score\r\n    /// @param isActive Player isActive\r\n    /// @return true\r\n    function migrationSetPlayer(bytes32 boardHash, uint playerID, bytes32 playerName, address playerAddress, uint score, uint score_unconfirmed, uint isActive) isOwner public returns (bool) {\r\n        Board storage g = boards[boardHash];\r\n        g.players[playerID] = Player(playerName, playerAddress, score, score_unconfirmed, isActive);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"boardHash\",\"type\":\"bytes32\"},{\"name\":\"playerID\",\"type\":\"uint8\"}],\"name\":\"migrationGetPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boardCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"boardHash\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"boardDescription\",\"type\":\"string\"}],\"name\":\"changeBoardMetadata\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"boardHash\",\"type\":\"bytes32\"},{\"name\":\"playerName\",\"type\":\"bytes32\"}],\"name\":\"removePlayerFromBoard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"boardDescription\",\"type\":\"string\"}],\"name\":\"addNewBoard\",\"outputs\":[{\"name\":\"boardHash\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"boardHash\",\"type\":\"bytes32\"},{\"name\":\"playerName\",\"type\":\"bytes32\"},{\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"addBoardScore\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"boardHash\",\"type\":\"bytes32\"},{\"name\":\"playerID\",\"type\":\"uint8\"}],\"name\":\"getPlayerByBoard\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playerCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"boardHash\",\"type\":\"bytes32\"}],\"name\":\"getBoardByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"boardHash\",\"type\":\"bytes32\"}],\"name\":\"migrationGetBoard\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numBoards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"boardHash\",\"type\":\"bytes32\"},{\"name\":\"playerName\",\"type\":\"bytes32\"}],\"name\":\"confirmBoardScore\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"createBoardHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"boardHash\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"boardDescription\",\"type\":\"string\"},{\"name\":\"numPlayers\",\"type\":\"uint8\"},{\"name\":\"boardOwner\",\"type\":\"address\"}],\"name\":\"migrationSetBoard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"costBoard\",\"type\":\"uint256\"},{\"name\":\"costPlayer\",\"type\":\"uint256\"}],\"name\":\"setCosts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"boardHash\",\"type\":\"bytes32\"},{\"name\":\"playerID\",\"type\":\"uint256\"},{\"name\":\"playerName\",\"type\":\"bytes32\"},{\"name\":\"playerAddress\",\"type\":\"address\"},{\"name\":\"score\",\"type\":\"uint256\"},{\"name\":\"score_unconfirmed\",\"type\":\"uint256\"},{\"name\":\"isActive\",\"type\":\"uint256\"}],\"name\":\"migrationSetPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"boardHash\",\"type\":\"bytes32\"},{\"name\":\"playerName\",\"type\":\"bytes32\"}],\"name\":\"addPlayerToBoard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"boardHash\",\"type\":\"bytes32\"}],\"name\":\"newBoardCreated\",\"type\":\"event\"}]","ContractName":"BlockScores","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://99d2c8f31081b549e6351e62483c9160a65104183c036e0e994ebad068771473"}]}