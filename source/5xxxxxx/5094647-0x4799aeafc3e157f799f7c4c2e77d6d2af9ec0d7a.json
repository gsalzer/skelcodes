{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  function RefundVault(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\n\r\ncontract MinerOneToken is MintableToken {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"MinerOne\";\r\n    string public symbol = \"MIO\";\r\n    uint8 public decimals = 18;\r\n\r\n    /**\r\n     * This struct holds data about token holder dividends\r\n     */\r\n    struct Account {\r\n        /**\r\n         * Last amount of dividends seen at the token holder payout\r\n         */\r\n        uint256 lastDividends;\r\n        /**\r\n         * Amount of wei contract needs to pay to token holder\r\n         */\r\n        uint256 fixedBalance;\r\n        /**\r\n         * Unpayed wei amount due to rounding\r\n         */\r\n        uint256 remainder;\r\n    }\r\n\r\n    /**\r\n     * Mapping which holds all token holders data\r\n     */\r\n    mapping(address => Account) internal accounts;\r\n\r\n    /**\r\n     * Running total of all dividends distributed\r\n     */\r\n    uint256 internal totalDividends;\r\n    /**\r\n     * Holds an amount of unpayed weis\r\n     */\r\n    uint256 internal reserved;\r\n\r\n    /**\r\n     * Raised when payment distribution occurs\r\n     */\r\n    event Distributed(uint256 amount);\r\n    /**\r\n     * Raised when shareholder withdraws his profit\r\n     */\r\n    event Paid(address indexed to, uint256 amount);\r\n    /**\r\n     * Raised when the contract receives Ether\r\n     */\r\n    event FundsReceived(address indexed from, uint256 amount);\r\n\r\n    modifier fixBalance(address _owner) {\r\n        Account storage account = accounts[_owner];\r\n        uint256 diff = totalDividends.sub(account.lastDividends);\r\n        if (diff > 0) {\r\n            uint256 numerator = account.remainder.add(balances[_owner].mul(diff));\r\n\r\n            account.fixedBalance = account.fixedBalance.add(numerator.div(totalSupply_));\r\n            account.remainder = numerator % totalSupply_;\r\n            account.lastDividends = totalDividends;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhenMintingFinished() {\r\n        require(mintingFinished);\r\n        _;\r\n    }\r\n\r\n    function () external payable {\r\n        withdraw(msg.sender, msg.value);\r\n    }\r\n\r\n    function deposit() external payable {\r\n        require(msg.value > 0);\r\n        require(msg.value <= this.balance.sub(reserved));\r\n\r\n        totalDividends = totalDividends.add(msg.value);\r\n        reserved = reserved.add(msg.value);\r\n        Distributed(msg.value);\r\n    }\r\n\r\n    /**\r\n     * Returns unpayed wei for a given address\r\n     */\r\n    function getDividends(address _owner) public view returns (uint256) {\r\n        Account storage account = accounts[_owner];\r\n        uint256 diff = totalDividends.sub(account.lastDividends);\r\n        if (diff > 0) {\r\n            uint256 numerator = account.remainder.add(balances[_owner].mul(diff));\r\n            return account.fixedBalance.add(numerator.div(totalSupply_));\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public\r\n        onlyWhenMintingFinished\r\n        fixBalance(msg.sender)\r\n        fixBalance(_to) returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public\r\n        onlyWhenMintingFinished\r\n        fixBalance(_from)\r\n        fixBalance(_to) returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function payoutToAddress(address[] _holders) external {\r\n        require(_holders.length > 0);\r\n        require(_holders.length <= 100);\r\n        for (uint256 i = 0; i < _holders.length; i++) {\r\n            withdraw(_holders[i], 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Token holder must call this to receive dividends\r\n     */\r\n    function withdraw(address _benefeciary, uint256 _toReturn) internal\r\n        onlyWhenMintingFinished\r\n        fixBalance(_benefeciary) returns (bool) {\r\n\r\n        uint256 amount = accounts[_benefeciary].fixedBalance;\r\n        reserved = reserved.sub(amount);\r\n        accounts[_benefeciary].fixedBalance = 0;\r\n        uint256 toTransfer = amount.add(_toReturn);\r\n        if (toTransfer > 0) {\r\n            _benefeciary.transfer(toTransfer);\r\n        }\r\n        if (amount > 0) {\r\n            Paid(_benefeciary, amount);\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract MinerOneCrowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n    // Wallet where all ether will be\r\n    address public constant WALLET = 0x2C2b3885BC8B82Ad4D603D95ED8528Ef112fE8F2;\r\n    // Wallet for team tokens\r\n    address public constant TEAM_WALLET = 0x997faEf570B534E5fADc8D2D373e2F11aF4e115a;\r\n    // Wallet for research and development tokens\r\n    address public constant RESEARCH_AND_DEVELOPMENT_WALLET = 0x770998331D6775c345B1807c40413861fc4D6421;\r\n    // Wallet for bounty tokens\r\n    address public constant BOUNTY_WALLET = 0xd481Aab166B104B1aB12e372Ef7af6F986f4CF19;\r\n\r\n    uint256 public constant UINT256_MAX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n    uint256 public constant ICO_TOKENS = 287000000e18;\r\n    uint8 public constant ICO_TOKENS_PERCENT = 82;\r\n    uint8 public constant TEAM_TOKENS_PERCENT = 10;\r\n    uint8 public constant RESEARCH_AND_DEVELOPMENT_TOKENS_PERCENT = 6;\r\n    uint8 public constant BOUNTY_TOKENS_PERCENT = 2;\r\n    uint256 public constant SOFT_CAP = 3000000e18;\r\n    uint256 public constant START_TIME = 1518692400; // 2018/02/15 11:00 UTC +0\r\n    uint256 public constant RATE = 1000; // 1000 tokens costs 1 ether\r\n    uint256 public constant LARGE_PURCHASE = 10000e18;\r\n    uint256 public constant LARGE_PURCHASE_BONUS = 4;\r\n    uint256 public constant TOKEN_DESK_BONUS = 3;\r\n    uint256 public constant MIN_TOKEN_AMOUNT = 100e18;\r\n\r\n    Phase[] internal phases;\r\n\r\n    struct Phase {\r\n        uint256 till;\r\n        uint8 discount;\r\n    }\r\n\r\n    // The token being sold\r\n    MinerOneToken public token;\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n    // refund vault used to hold funds while crowdsale is running\r\n    RefundVault public vault;\r\n    uint256 public currentPhase = 0;\r\n    bool public isFinalized = false;\r\n    address private tokenMinter;\r\n    address private tokenDeskProxy;\r\n    uint256 public icoEndTime = 1526558400; // 2018/05/17 12:00 UTC +0\r\n\r\n    /**\r\n    * event for token purchase logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param beneficiary who got the tokens\r\n    * @param value weis paid for purchase\r\n    * @param amount amount of tokens purchased\r\n    */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    event Finalized();\r\n    /**\r\n    * When there no tokens left to mint and token minter tries to manually mint tokens\r\n    * this event is raised to signal how many tokens we have to charge back to purchaser\r\n    */\r\n    event ManualTokenMintRequiresRefund(address indexed purchaser, uint256 value);\r\n\r\n    function MinerOneCrowdsale(address _token) public {\r\n        phases.push(Phase({ till: 1519214400, discount: 35 })); // 2018/02/21 12:00 UTC +0\r\n        phases.push(Phase({ till: 1519905600, discount: 30 })); // 2018/03/01 12:00 UTC +0\r\n        phases.push(Phase({ till: 1521201600, discount: 25 })); // 2018/03/16 12:00 UTC +0\r\n        phases.push(Phase({ till: 1522584000, discount: 20 })); // 2018/04/01 12:00 UTC +0\r\n        phases.push(Phase({ till: 1524312000, discount: 15 })); // 2018/04/21 12:00 UTC +0\r\n        phases.push(Phase({ till: 1525608000, discount: 10 })); // 2018/05/06 12:00 UTC +0\r\n        phases.push(Phase({ till: 1526472000, discount: 5  })); // 2018/05/16 12:00 UTC +0\r\n        phases.push(Phase({ till: UINT256_MAX, discount:0 }));  // unlimited\r\n\r\n        token = MinerOneToken(_token);\r\n        vault = new RefundVault(WALLET);\r\n        tokenMinter = msg.sender;\r\n    }\r\n\r\n    modifier onlyTokenMinterOrOwner() {\r\n        require(msg.sender == tokenMinter || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens or claim refund\r\n    function () external payable {\r\n        if (!isFinalized) {\r\n            buyTokens(msg.sender, msg.sender);\r\n        } else {\r\n            claimRefund();\r\n        }\r\n    }\r\n\r\n    function mintTokens(address[] _receivers, uint256[] _amounts) external onlyTokenMinterOrOwner {\r\n        require(_receivers.length > 0 && _receivers.length <= 100);\r\n        require(_receivers.length == _amounts.length);\r\n        require(!isFinalized);\r\n        for (uint256 i = 0; i < _receivers.length; i++) {\r\n            address receiver = _receivers[i];\r\n            uint256 amount = _amounts[i];\r\n\r\n            require(receiver != address(0));\r\n            require(amount > 0);\r\n\r\n            uint256 excess = appendContribution(receiver, amount);\r\n\r\n            if (excess > 0) {\r\n                ManualTokenMintRequiresRefund(receiver, excess);\r\n            }\r\n        }\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address sender, address beneficiary) public payable {\r\n        require(beneficiary != address(0));\r\n        require(sender != address(0));\r\n        require(validPurchase());\r\n\r\n        uint256 weiReceived = msg.value;\r\n        uint256 nowTime = getNow();\r\n        // this loop moves phases and insures correct stage according to date\r\n        while (currentPhase < phases.length && phases[currentPhase].till < nowTime) {\r\n            currentPhase = currentPhase.add(1);\r\n        }\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = calculateTokens(weiReceived);\r\n\r\n        if (tokens < MIN_TOKEN_AMOUNT) revert();\r\n\r\n        uint256 excess = appendContribution(beneficiary, tokens);\r\n        uint256 refund = (excess > 0 ? excess.mul(weiReceived).div(tokens) : 0);\r\n\r\n        weiReceived = weiReceived.sub(refund);\r\n        weiRaised = weiRaised.add(weiReceived);\r\n\r\n        if (refund > 0) {\r\n            sender.transfer(refund);\r\n        }\r\n\r\n        TokenPurchase(sender, beneficiary, weiReceived, tokens.sub(excess));\r\n\r\n        if (goalReached()) {\r\n            WALLET.transfer(weiReceived);\r\n        } else {\r\n            vault.deposit.value(weiReceived)(sender);\r\n        }\r\n    }\r\n\r\n    // if crowdsale is unsuccessful, investors can claim refunds here\r\n    function claimRefund() public {\r\n        require(isFinalized);\r\n        require(!goalReached());\r\n\r\n        vault.refund(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev Must be called after crowdsale ends, to do some extra finalization\r\n    * work. Calls the contract's finalization function.\r\n    */\r\n    function finalize() public onlyOwner {\r\n        require(!isFinalized);\r\n        require(hasEnded());\r\n\r\n        if (goalReached()) {\r\n            vault.close();\r\n\r\n            uint256 totalSupply = token.totalSupply();\r\n\r\n            uint256 teamTokens = uint256(TEAM_TOKENS_PERCENT).mul(totalSupply).div(ICO_TOKENS_PERCENT);\r\n            token.mint(TEAM_WALLET, teamTokens);\r\n            uint256 rdTokens = uint256(RESEARCH_AND_DEVELOPMENT_TOKENS_PERCENT).mul(totalSupply).div(ICO_TOKENS_PERCENT);\r\n            token.mint(RESEARCH_AND_DEVELOPMENT_WALLET, rdTokens);\r\n            uint256 bountyTokens = uint256(BOUNTY_TOKENS_PERCENT).mul(totalSupply).div(ICO_TOKENS_PERCENT);\r\n            token.mint(BOUNTY_WALLET, bountyTokens);\r\n\r\n            token.finishMinting();\r\n            token.transferOwnership(token);\r\n        } else {\r\n            vault.enableRefunds();\r\n        }\r\n\r\n        Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return getNow() > icoEndTime || token.totalSupply() == ICO_TOKENS;\r\n    }\r\n\r\n    function goalReached() public view returns (bool) {\r\n        return token.totalSupply() >= SOFT_CAP;\r\n    }\r\n\r\n    function setTokenMinter(address _tokenMinter) public onlyOwner {\r\n        require(_tokenMinter != address(0));\r\n        tokenMinter = _tokenMinter;\r\n    }\r\n\r\n    function setTokenDeskProxy(address _tokekDeskProxy) public onlyOwner {\r\n        require(_tokekDeskProxy != address(0));\r\n        tokenDeskProxy = _tokekDeskProxy;\r\n    }\r\n\r\n    function setIcoEndTime(uint256 _endTime) public onlyOwner {\r\n        require(_endTime > icoEndTime);\r\n        icoEndTime = _endTime;\r\n    }\r\n\r\n    function getNow() internal view returns (uint256) {\r\n        return now;\r\n    }\r\n\r\n    function calculateTokens(uint256 _weiAmount) internal view returns (uint256) {\r\n        uint256 tokens = _weiAmount.mul(RATE).mul(100).div(uint256(100).sub(phases[currentPhase].discount));\r\n\r\n        uint256 bonus = 0;\r\n        if (currentPhase > 0) {\r\n            bonus = bonus.add(tokens >= LARGE_PURCHASE ? LARGE_PURCHASE_BONUS : 0);\r\n            bonus = bonus.add(msg.sender == tokenDeskProxy ? TOKEN_DESK_BONUS : 0);\r\n        }\r\n        return tokens.add(tokens.mul(bonus).div(100));\r\n    }\r\n\r\n    function appendContribution(address _beneficiary, uint256 _tokens) internal returns (uint256) {\r\n        uint256 excess = 0;\r\n        uint256 tokensToMint = 0;\r\n        uint256 totalSupply = token.totalSupply();\r\n\r\n        if (totalSupply.add(_tokens) < ICO_TOKENS) {\r\n            tokensToMint = _tokens;\r\n        } else {\r\n            tokensToMint = ICO_TOKENS.sub(totalSupply);\r\n            excess = _tokens.sub(tokensToMint);\r\n        }\r\n        if (tokensToMint > 0) {\r\n            token.mint(_beneficiary, tokensToMint);\r\n        }\r\n        return excess;\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal view returns (bool) {\r\n        bool withinPeriod = getNow() >= START_TIME && getNow() <= icoEndTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        bool canMint = token.totalSupply() < ICO_TOKENS;\r\n        bool validPhase = (currentPhase < phases.length);\r\n        return withinPeriod && nonZeroPurchase && canMint && validPhase;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOUNTY_TOKENS_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESEARCH_AND_DEVELOPMENT_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokekDeskProxy\",\"type\":\"address\"}],\"name\":\"setTokenDeskProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LARGE_PURCHASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenMinter\",\"type\":\"address\"}],\"name\":\"setTokenMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESEARCH_AND_DEVELOPMENT_TOKENS_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_TOKENS_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LARGE_PURCHASE_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOFT_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receivers\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UINT256_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_TOKENS_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOUNTY_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_TOKEN_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DESK_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setIcoEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ManualTokenMintRequiresRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MinerOneCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000141044ccc363d6e8d92dd8983422775913e304ec","Library":"","SwarmSource":"bzzr://fde9420d3c9cdd70b537e3d8c513587c634fc8f1d18ccea6dcc3501ac5b9d324"}]}