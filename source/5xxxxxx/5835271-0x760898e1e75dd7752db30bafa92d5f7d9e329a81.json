{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract CryptoRomeControl is Ownable {\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() external onlyOwner whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n    }\r\n}\r\n\r\ncontract ERC721 {\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function takeOwnership(uint256 _tokenId) public;\r\n    function totalSupply() public view returns (uint256 total);\r\n}\r\n\r\ncontract CryptoRomeAuction is CryptoRomeControl {\r\n\r\n    // Reference to contract tracking NFT ownership\r\n    ERC721 public nonFungibleContract;\r\n\r\n    uint256 public auctionStart;\r\n    uint256 public startingPrice;\r\n    uint256 public endingPrice;\r\n    uint256 public auctionEnd;\r\n    uint256 public extensionTime;\r\n    uint256 public highestBid;\r\n    address public highestBidder;\r\n    bytes32 public highestBidderCC;\r\n    bool public highestBidIsCC;\r\n    address public paymentAddress;\r\n    uint256 public tokenId;\r\n    bool public ended;\r\n\r\n    event Bid(address from, uint256 amount);\r\n    event AuctionEnded(address winnerMetamask, bytes32 winnerCC, uint256 amount);\r\n\r\n    constructor(address _nftAddress) public {\r\n        nonFungibleContract = ERC721(_nftAddress);\r\n    }\r\n\r\n    function createAuction(uint256 _startTime, uint256 _startingPrice, uint256 _duration, uint256 _extensionTime, address _wallet, uint256 _tokenId) public onlyOwner {\r\n        require(nonFungibleContract.ownerOf(_tokenId) == owner);\r\n        require(_wallet != address(0));\r\n        require(_duration > 0);\r\n        require(_duration >= _extensionTime);\r\n        auctionStart = _startTime;\r\n        startingPrice = _startingPrice;\r\n        auctionEnd = (SafeMath.add(auctionStart, _duration));\r\n        extensionTime = _extensionTime;\r\n        paymentAddress = _wallet;\r\n        tokenId = _tokenId;\r\n        highestBid = 0;\r\n        _escrow(_tokenId);\r\n    }\r\n\r\n    function getAuctionData() public view returns(uint256, uint256, uint256, address, bytes32) {\r\n        return(auctionStart, auctionEnd, highestBid, highestBidder, highestBidderCC);\r\n    }\r\n\r\n    function _isContract(address _user) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(_user) }\r\n        return size > 0;\r\n    }\r\n\r\n    // Escrows the NFT, assigning ownership to this contract.\r\n    function _escrow(uint256 _tokenId) internal {\r\n        nonFungibleContract.takeOwnership(_tokenId);\r\n    }\r\n\r\n    // Transfers an NFT owned by this contract to another address.\r\n    function _transfer(address _receiver, uint256 _tokenId) internal {\r\n        nonFungibleContract.transfer(_receiver, _tokenId);\r\n    }\r\n\r\n    function auctionStarted() public view returns (bool) {\r\n        if (auctionStart != 0) {\r\n          return now > auctionStart;\r\n        } else {\r\n          return false;\r\n        }\r\n    }\r\n\r\n    function auctionExpired() public view returns (bool) {\r\n        return now > auctionEnd;\r\n    }\r\n\r\n    function bid() public payable {\r\n        require(!_isContract(msg.sender));\r\n        require(auctionStarted());\r\n        require(!auctionExpired());\r\n        require(msg.value >= (highestBid + 10000000000000000));\r\n\r\n        if (highestBid != 0) {\r\n            if (!highestBidIsCC) {\r\n                highestBidder.transfer(highestBid);\r\n            }\r\n        }\r\n\r\n        if (now > SafeMath.sub(auctionEnd, extensionTime)) {\r\n            // If within extention time window, extend auction\r\n            auctionEnd = SafeMath.add(now,extensionTime);\r\n        }\r\n\r\n        highestBidder = msg.sender;\r\n        highestBid = msg.value;\r\n        highestBidIsCC = false;\r\n        highestBidderCC = \"\";\r\n\r\n        emit Bid(msg.sender, msg.value);\r\n    }\r\n\r\n    function bidCC(uint256 value, bytes32 userId) onlyOwner public {\r\n        require(auctionStarted());\r\n        require(!auctionExpired());\r\n        require(value >= (highestBid + 10000000000000000));\r\n\r\n        if (highestBid != 0) {\r\n            if (!highestBidIsCC) {\r\n                highestBidder.transfer(highestBid);\r\n                highestBidder = address(0);\r\n            }\r\n        }\r\n\r\n        if (now > SafeMath.sub(auctionEnd, extensionTime)) {\r\n            // If within extention time window, extend auction\r\n            auctionEnd = SafeMath.add(now,extensionTime);\r\n        }\r\n\r\n        highestBidderCC = userId;\r\n        highestBid = value;\r\n        highestBidIsCC = true;\r\n\r\n        emit Bid(msg.sender, value);\r\n    }\r\n\r\n    function endAuction() public onlyOwner {\r\n        require(auctionExpired());\r\n        require(!ended);\r\n        ended = true;\r\n        emit AuctionEnded(highestBidder, highestBidderCC, highestBid);\r\n        // Transfer the item to the buyer\r\n        if (!highestBidIsCC) {\r\n            _transfer(highestBidder, tokenId);\r\n            paymentAddress.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function approveTransfer(uint256 approved, address winnerAddress) public onlyOwner {\r\n        require(ended);\r\n        // Follow-up step for CC transfer that needs approval\r\n        if (approved > 0) {\r\n            _transfer(winnerAddress, tokenId);\r\n        } else {\r\n            _transfer(owner, tokenId);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_extensionTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAuctionData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"userId\",\"type\":\"bytes32\"}],\"name\":\"bidCC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"approved\",\"type\":\"uint256\"},{\"name\":\"winnerAddress\",\"type\":\"address\"}],\"name\":\"approveTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonFungibleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBidderCC\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extensionTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBidIsCC\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nftAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winnerMetamask\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerCC\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryptoRomeAuction","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000013c8a7817ab3e74c28f5ef0eb7d7a3bdb329c2a0","Library":"","SwarmSource":"bzzr://b9fbe3f757521d5fa9fad2aa38b57b63630a47f7edbb476697d1cb0d28f743b0"}]}