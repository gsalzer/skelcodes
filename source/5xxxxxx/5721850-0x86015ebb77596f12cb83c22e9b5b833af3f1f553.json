{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n/**\r\n* @title IADOWR Special Event Contract\r\n* @dev ERC-20 Token Standard Compliant Contract\r\n*/\r\n\r\n/**\r\n * @title SafeMath by OpenZeppelin\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * Token contract interface for external use\r\n */\r\ncontract token {\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public;\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title admined\r\n * @notice This contract have some admin-only functions\r\n */\r\ncontract admined {\r\n    mapping (address => uint8) public admin; //Admin address is public\r\n\r\n    /**\r\n    * @dev This contructor takes the msg.sender as the first administer\r\n    */\r\n    constructor() internal {\r\n        admin[msg.sender] = 2; //Set initial master admin to contract creator\r\n        emit AssignAdminship(msg.sender, 2);\r\n    }\r\n\r\n    /**\r\n    * @dev This modifier limits function execution to the admin\r\n    */\r\n    modifier onlyAdmin(uint8 _level) { //A modifier to define admin-only functions\r\n        require(admin[msg.sender] >= _level);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice This function transfer the adminship of the contract to _newAdmin\r\n    * @param _newAdmin User address\r\n    * @param _level User new level\r\n    */\r\n    function assingAdminship(address _newAdmin, uint8 _level) onlyAdmin(2) public { //Admin can be transfered\r\n        admin[_newAdmin] = _level;\r\n        emit AssignAdminship(_newAdmin , _level);\r\n    }\r\n\r\n    /**\r\n    * @dev Log Events\r\n    */\r\n    event AssignAdminship(address newAdminister, uint8 level);\r\n\r\n}\r\n\r\ncontract IADSpecialEvent is admined {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    //This ico contract have 2 states\r\n    enum State {\r\n        Ongoing,\r\n        Successful\r\n    }\r\n    //public variables\r\n    token public constant tokenReward = token(0xC1E2097d788d33701BA3Cc2773BF67155ec93FC4);\r\n    State public state = State.Ongoing; //Set initial stage\r\n    uint256 public totalRaised; //eth in wei funded\r\n    uint256 public totalDistributed; //tokens distributed\r\n    uint256 public completedAt;\r\n    address public creator;\r\n    mapping (address => bool) whiteList;\r\n    uint256 public rate = 6250;//Base rate is 5000 IAD/ETH - It's a 25% bonus\r\n    string public version = '1';\r\n\r\n    //events for log\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFunderInitialized(address _creator);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n\r\n    modifier notFinished() {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice ICO constructor\r\n    */\r\n    constructor () public {\r\n\r\n        creator = msg.sender;\r\n\r\n        emit LogFunderInitialized(creator);\r\n    }\r\n\r\n    /**\r\n    * @notice whiteList handler\r\n    */\r\n    function whitelistAddress(address _user, bool _flag) onlyAdmin(1) public {\r\n        whiteList[_user] = _flag;\r\n    }\r\n\r\n    /**\r\n    * @notice contribution handler\r\n    */\r\n    function contribute() public notFinished payable {\r\n        //must be whitlisted\r\n        require(whiteList[msg.sender] == true);\r\n        //lets get the total purchase\r\n        uint256 tokenBought = msg.value.mul(rate);\r\n        //Minimum 150K tokenss\r\n        require(tokenBought >= 150000 * (10 ** 18));\r\n        //Keep track of total wei raised\r\n        totalRaised = totalRaised.add(msg.value);\r\n        //Keep track of total tokens distributed\r\n        totalDistributed = totalDistributed.add(tokenBought);\r\n        //Transfer the tokens\r\n        tokenReward.transfer(msg.sender, tokenBought);\r\n        //Logs\r\n        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n        emit LogContributorsPayout(msg.sender, tokenBought);\r\n    }\r\n\r\n    /**\r\n    * @notice closure handler\r\n    */\r\n    function finish() onlyAdmin(2) public { //When finished eth and tremaining tokens are transfered to creator\r\n\r\n        if(state != State.Successful){\r\n          state = State.Successful;\r\n          completedAt = now;\r\n        }\r\n\r\n        uint256 remanent = tokenReward.balanceOf(this);\r\n        require(creator.send(address(this).balance));\r\n        tokenReward.transfer(creator,remanent);\r\n\r\n        emit LogBeneficiaryPaid(creator);\r\n        emit LogContributorsPayout(creator, remanent);\r\n\r\n    }\r\n\r\n    function sendTokensManually(address _to, uint256 _amount) onlyAdmin(2) public {\r\n\r\n        require(whiteList[_to] == true);\r\n        //Keep track of total tokens distributed\r\n        totalDistributed = totalDistributed.add(_amount);\r\n        //Transfer the tokens\r\n        tokenReward.transfer(_to, _amount);\r\n        //Logs\r\n        emit LogContributorsPayout(_to, _amount);\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice Function to claim eth on contract\r\n    */\r\n    function claimETH() onlyAdmin(2) public{\r\n\r\n        require(creator.send(address(this).balance));\r\n\r\n        emit LogBeneficiaryPaid(creator);\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice Function to claim any token stuck on contract at any time\r\n    */\r\n    function claimTokens(token _address) onlyAdmin(2) public{\r\n        require(state == State.Successful); //Only when sale finish\r\n\r\n        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\r\n        _address.transfer(msg.sender,remainder); //Transfer tokens to admin\r\n\r\n    }\r\n\r\n    /*\r\n    * @dev direct payments handler\r\n    */\r\n\r\n    function () public payable {\r\n\r\n        contribute();\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"assingAdminship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendTokensManually\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdminister\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"AssignAdminship\",\"type\":\"event\"}]","ContractName":"IADSpecialEvent","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f84062ae429b4c4e39d66b29969136d7023625c082c0ca6a7b84410b794aad6d"}]}