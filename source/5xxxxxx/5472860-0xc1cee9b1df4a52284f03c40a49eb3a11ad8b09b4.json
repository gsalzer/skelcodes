{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\ncontract ERC20Basic {\r\n\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\t\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\t\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n\t\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public balances;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\t\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract CerttifyToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value, string message);\r\n    event IssueCert(bytes32 indexed id, address certIssuer, uint256 value, bytes cert);\r\n\r\n    string public name = \"Certtify Token\";\r\n    string public symbol = \"CTF\";\r\n    uint8 public decimals = 18;\r\n\r\n    address public deployer;\r\n    bool public lockup = true;\r\n\r\n    function CerttifyToken(uint256 maxSupply) public {\r\n        totalSupply = maxSupply.mul(10 ** uint256(decimals));\r\n        balances[msg.sender] = totalSupply;\r\n        deployer = msg.sender;\r\n    }\r\n\r\n    modifier afterLockup() {\r\n        require(!lockup || msg.sender == deployer);\r\n        _;\r\n    }\r\n\r\n    function unlock() public {\r\n        require(msg.sender == deployer);\r\n        lockup = false;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public afterLockup() returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public afterLockup() returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function burn(uint256 _value, string _message) public afterLockup() {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        address burner = msg.sender;\r\n        totalSupply = totalSupply.sub(_value);\r\n        balances[burner] = balances[burner].sub(_value);\r\n        emit Burn(burner, _value, _message);\r\n    }\r\n\r\n    function issueCert(uint256 _value, bytes _cert) external afterLockup() {\r\n        if (_value > 0) { \r\n            burn(_value, \"\");\r\n        }\r\n        emit IssueCert(keccak256(block.number, msg.sender, _value, _cert), msg.sender, _value, _cert);\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n  \r\n    address public owner;\r\n\r\n    function Ownable(address _owner) public {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\ncontract Bounty is Ownable {\r\n\r\n    CerttifyToken public token;\r\n    mapping(address => uint256) public bounties;\r\n    bool public withdrawlEnabled = false;\r\n\r\n    event BountySet(address indexed beneficiary, uint256 amount);\r\n    event BountyWithdraw(address indexed beneficiary, uint256 amount);\r\n\r\n    function Bounty(CerttifyToken _token, address _admin) Ownable(_admin) public {\r\n        token = _token;\r\n    }\r\n\r\n    function setBounties(address[] beneficiaries, uint256[] amounts) external onlyOwner {\r\n        require(beneficiaries.length == amounts.length);\r\n        for (uint256 i = 0; i < beneficiaries.length; i++) {\r\n            bounties[beneficiaries[i]] = amounts[i];\r\n            emit BountySet(beneficiaries[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function enableWithdrawl() external onlyOwner {\r\n        withdrawlEnabled = true;\r\n    }\r\n\r\n    function withdrawBounty() public {\r\n        require(withdrawlEnabled);\r\n        require(bounties[msg.sender] > 0);\r\n        uint256 bountyWithdrawn = bounties[msg.sender];\r\n        bounties[msg.sender] = 0;\r\n        emit BountyWithdraw(msg.sender, bountyWithdrawn);\r\n        token.transfer(msg.sender, bountyWithdrawn);\r\n    }\r\n\r\n    function () external {\r\n        withdrawBounty();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"setBounties\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bounties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableWithdrawl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawlEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BountySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BountyWithdraw\",\"type\":\"event\"}]","ContractName":"Bounty","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cb379CC4F1E10366eA8043645d7c66F1673279dA0000000000000000000000007126cb446ea014805ec56e5b620afc41039c1958","Library":"","SwarmSource":"bzzr://1acf99fd154a20a25f676990ef2fa3086c1c1b46724c2d0dd7f522184b02dca2"}]}