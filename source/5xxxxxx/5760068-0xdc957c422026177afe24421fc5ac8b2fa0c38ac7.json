{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract HgcToken {\r\n\r\n    string public name = \"Happy Guess Chain Coin\";\r\n    string public symbol = \"HGCC\";\r\n    uint256 public decimals = 6;\r\n\r\n    uint256 constant initSupplyUnits = 2100000000000000;\r\n\r\n    uint256 public totalSupply = 0;\r\n    bool public stopped = false;\r\n\r\n    address owner = 0x0;\r\n\r\n    struct Account{\r\n        uint256 available;\r\n        uint256 frozen;\r\n    }\r\n\r\n    mapping (address => Account) public accounts;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    modifier isOwner {\r\n        assert(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier isRunning {\r\n        assert (!stopped);\r\n        _;\r\n    }\r\n\r\n    modifier validAddress {\r\n        assert(0x0 != msg.sender);\r\n        _;\r\n    }\r\n\r\n    function HgcToken() public {\r\n        owner = msg.sender ;\r\n        totalSupply = initSupplyUnits;\r\n\r\n        Account memory account = Account({\r\n            available:totalSupply,\r\n            frozen:0\r\n            });\r\n\r\n        accounts[owner] = account;\r\n        emit Transfer(0x0, owner, initSupplyUnits);\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256 supply) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance){\r\n        return balanceFor(accounts[_owner]);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public isRunning validAddress returns (bool success) {\r\n        Account storage accountFrom = accounts[msg.sender] ;\r\n        require(accountFrom.available >= _value);\r\n\r\n        Account storage accountTo = accounts[_to] ;\r\n        uint256 count = balanceFor(accountFrom) + balanceFor(accountTo) ;\r\n        require(accountTo.available + _value >= accountTo.available);\r\n\r\n        accountFrom.available -= _value;\r\n        accountTo.available += _value;\r\n\r\n        require(count == balanceFor(accountFrom) + balanceFor(accountTo)) ;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public isRunning validAddress returns (bool success) {\r\n        Account storage accountFrom = accounts[_from] ;\r\n        require(accountFrom.available >= _value);\r\n\r\n        Account storage accountTo = accounts[_to] ;\r\n        require(accountTo.available + _value >= accountTo.available);\r\n        require(allowance[_from][msg.sender] >= _value);\r\n\r\n        uint256 count = balanceFor(accountFrom) + balanceFor(accountTo) ;\r\n\r\n        accountTo.available += _value;\r\n        accountFrom.available -= _value;\r\n\r\n        allowance[_from][msg.sender] -= _value;\r\n\r\n        require(count == balanceFor(accountFrom) + balanceFor(accountTo)) ;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public isRunning validAddress returns (bool success) {\r\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function balanceFor(Account box) internal pure returns (uint256 balance){\r\n        return box.available + box.frozen ;\r\n    }\r\n\r\n    function stop() public isOwner isRunning{\r\n        stopped = true;\r\n    }\r\n\r\n    function start() public isOwner {\r\n        stopped = false;\r\n    }\r\n\r\n    function setName(string _name) public isOwner {\r\n        name = _name;\r\n    }\r\n\r\n    function burn(uint256 _value) public isRunning {\r\n        Account storage account = accounts[msg.sender];\r\n        require(account.available >= _value);\r\n        account.available -= _value ;\r\n\r\n        Account storage systemAccount = accounts[0x0] ;\r\n        systemAccount.available += _value;\r\n\r\n        emit Transfer(msg.sender, 0x0, _value);\r\n    }\r\n\r\n    function frozen(address targetAddress , uint256 value) public isOwner returns (bool success){\r\n        Account storage account = accounts[targetAddress];\r\n\r\n        require(value > 0 && account.available >= value);\r\n\r\n        uint256 count = account.available + account.frozen;\r\n\r\n        account.available -= value;\r\n        account.frozen += value;\r\n\r\n        require(count == account.available + account.frozen);\r\n\r\n        return true;\r\n    }\r\n\r\n    function unfrozen(address targetAddress, uint256 value) public isOwner returns (bool success){\r\n        Account storage account = accounts[targetAddress];\r\n\r\n        require(value > 0 && account.frozen >= value);\r\n\r\n        uint256 count = account.available + account.frozen;\r\n\r\n        account.available += value;\r\n        account.frozen -= value;\r\n\r\n        require(count == account.available + account.frozen);\r\n\r\n        return true;\r\n    }\r\n\r\n    function accountOf(address targetAddress) public isOwner constant returns (uint256 available, uint256 locked){\r\n        Account storage account = accounts[targetAddress];\r\n        return (account.available, account.frozen);\r\n    }\r\n\r\n    function accountOf() public constant returns (uint256 available, uint256 locked){\r\n        Account storage account = accounts[msg.sender];\r\n        return (account.available, account.frozen);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountOf\",\"outputs\":[{\"name\":\"available\",\"type\":\"uint256\"},{\"name\":\"locked\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targetAddress\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"frozen\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"available\",\"type\":\"uint256\"},{\"name\":\"frozen\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"targetAddress\",\"type\":\"address\"}],\"name\":\"accountOf\",\"outputs\":[{\"name\":\"available\",\"type\":\"uint256\"},{\"name\":\"locked\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targetAddress\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"unfrozen\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"HgcToken","CompilerVersion":"v0.4.25-nightly.2018.6.7+commit.ddd256a6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://95f08f61d12fa17bb777ea945ee167d2f0b376b130b1138835e13ab67632a52a"}]}