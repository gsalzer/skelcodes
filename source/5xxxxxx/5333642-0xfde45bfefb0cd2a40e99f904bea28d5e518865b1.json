{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\nlibrary SafeMath {\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\ncontract OwnableToken {\r\n\taddress public owner;\r\n\taddress public minter;\r\n\taddress public burner;\r\n\taddress public controller;\r\n\t\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tfunction OwnableToken() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\t\r\n\tmodifier onlyMinter() {\r\n\t\trequire(msg.sender == minter);\r\n\t\t_;\r\n\t}\r\n\t\r\n\tmodifier onlyBurner() {\r\n\t\trequire(msg.sender == burner);\r\n\t\t_;\r\n\t}\r\n\tmodifier onlyController() {\r\n\t\trequire(msg.sender == controller);\r\n\t\t_;\r\n\t}\r\n  \r\n\tmodifier onlyPayloadSize(uint256 numwords) {                                       \r\n\t\tassert(msg.data.length == numwords * 32 + 4);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\trequire(newOwner != address(0));\r\n\t\temit OwnershipTransferred(owner, newOwner);\r\n\t\towner = newOwner;\r\n\t}\r\n\t\r\n\tfunction setMinter(address _minterAddress) public onlyOwner {\r\n\t\tminter = _minterAddress;\r\n\t}\r\n\t\r\n\tfunction setBurner(address _burnerAddress) public onlyOwner {\r\n\t\tburner = _burnerAddress;\r\n\t}\r\n\t\r\n\tfunction setControler(address _controller) public onlyOwner {\r\n\t\tcontroller = _controller;\r\n\t}\r\n}\r\n\r\ncontract KYCControl is OwnableToken {\r\n\tevent KYCApproved(address _user, bool isApproved);\r\n\tmapping(address => bool) public KYCParticipants;\r\n\t\r\n\tfunction isKYCApproved(address _who) view public returns (bool _isAprroved){\r\n\t\treturn KYCParticipants[_who];\r\n\t}\r\n\r\n\tfunction approveKYC(address _userAddress) onlyController public {\r\n\t\tKYCParticipants[_userAddress] = true;\r\n\t\temit KYCApproved(_userAddress, true);\r\n\t}\r\n}\r\n\r\ncontract VernamCrowdSaleToken is OwnableToken, KYCControl {\r\n\tusing SafeMath for uint256;\r\n\t\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n\t/* Public variables of the token */\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals;\r\n\tuint256 public _totalSupply;\r\n\t\r\n\t/*Private Variables*/\r\n\tuint256 constant POW = 10 ** 18;\r\n\tuint256 _circulatingSupply;\r\n\t\r\n\t/* This creates an array with all balances */\r\n\tmapping (address => uint256) public balances;\r\n\t\t\r\n\t// This notifies clients about the amount burnt\r\n\tevent Burn(address indexed from, uint256 value);\r\n\tevent Mint(address indexed _participant, uint256 value);\r\n\r\n\t/* Initializes contract with initial supply tokens to the creator of the contract */\r\n\tfunction VernamCrowdSaleToken() public {\r\n\t\tname = \"Vernam Crowdsale Token\";                            // Set the name for display purposes\r\n\t\tsymbol = \"VCT\";                               \t\t\t\t// Set the symbol for display purposes\r\n\t\tdecimals = 18;                            \t\t\t\t\t// Amount of decimals for display purposes\r\n\t\t_totalSupply = SafeMath.mul(1000000000, POW);     \t\t\t//1 Billion Tokens with 18 Decimals\r\n\t\t_circulatingSupply = 0;\r\n\t}\r\n\t\r\n\tfunction mintToken(address _participant, uint256 _mintedAmount) public onlyMinter returns (bool _success) {\r\n\t\trequire(_mintedAmount > 0);\r\n\t\trequire(_circulatingSupply.add(_mintedAmount) <= _totalSupply);\r\n\t\tKYCParticipants[_participant] = false;\r\n\r\n        balances[_participant] =  balances[_participant].add(_mintedAmount);\r\n        _circulatingSupply = _circulatingSupply.add(_mintedAmount);\r\n\t\t\r\n\t\temit Transfer(0, this, _mintedAmount);\r\n        emit Transfer(this, _participant, _mintedAmount);\r\n\t\temit Mint(_participant, _mintedAmount);\r\n\t\t\r\n\t\treturn true;\r\n    }\r\n\t\r\n\tfunction burn(address _participant, uint256 _value) public onlyBurner returns (bool _success) {\r\n        require(_value > 0);\r\n\t\trequire(balances[_participant] >= _value);   \t\t\t\t\t\t\t// Check if the sender has enough\r\n\t\trequire(isKYCApproved(_participant) == true);\r\n\t\tbalances[_participant] = balances[_participant].sub(_value);            // Subtract from the sender\r\n\t\t_circulatingSupply = _circulatingSupply.sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);                      \t\t\t// Updates totalSupply\r\n\t\temit Transfer(_participant, 0, _value);\r\n        emit Burn(_participant, _value);\r\n        \r\n\t\treturn true;\r\n    }\r\n  \r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\t\r\n\tfunction circulatingSupply() public view returns (uint256) {\r\n\t\treturn _circulatingSupply;\r\n\t}\r\n\t\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n}\r\n\r\ncontract VernamPrivatePreSale is OwnableToken, KYCControl {\r\n\tusing SafeMath for uint256;\r\n\r\n\tVernamCrowdSaleToken public vernamCrowdsaleToken;\r\n\t\r\n\tmapping(address => uint256) public privatePreSaleTokenBalances;\r\n\tmapping(address => uint256) public weiBalances;\r\n\t\r\n\tuint256 constant public minimumContributionWeiByOneInvestor = 25000000000000000000 wei;\r\n\tuint256 public privatePreSalePrice = 100000000000000 wei;\r\n\tuint256 public totalSupplyInWei = 5000000000000000000000 wei;\r\n\tuint256 public totalTokensForSold = 50000000000000000000000000; \r\n\tuint256 public privatePreSaleSoldTokens;\r\n\tuint256 public totalInvested;\r\n\t\r\n\taddress public beneficiary;\r\n\t\r\n\tfunction VernamPrivatePreSale() public {\r\n\t\tbeneficiary = 0xd977af9f1cf2cf615ab7d61c84aabb315b9a0337;\r\n\t\tvernamCrowdsaleToken = VernamCrowdSaleToken(0x6d908a2ef63aeac21cb2b5c3d32a145f14144b38);\r\n\t}\r\n\t\r\n\tfunction() public payable {\r\n\t\tbuyPreSale(msg.sender, msg.value);\r\n\t}\r\n\t\r\n\tfunction buyPreSale(address _participant, uint256 _value) payable public {\r\n\t\trequire(_value >= minimumContributionWeiByOneInvestor);\r\n\t\trequire(totalSupplyInWei >= totalInvested.add(_value));\r\n\t\t\r\n\t\tbeneficiary.transfer(_value);\r\n\t\t\r\n\t\tweiBalances[_participant] = weiBalances[_participant].add(_value);\r\n\t\t\r\n\t\ttotalInvested = totalInvested.add(_value);\r\n\t\t\r\n\t\tuint256 tokens = ((_value).mul(1 ether)).div(privatePreSalePrice);\r\n\t\t\r\n\t\tprivatePreSaleSoldTokens = privatePreSaleSoldTokens.add(tokens);\r\n\t\tprivatePreSaleTokenBalances[_participant] = privatePreSaleTokenBalances[_participant].add(tokens);\r\n\t\t\r\n\t\tvernamCrowdsaleToken.mintToken(_participant, tokens);\r\n\t}\r\n\t\r\n\tfunction getPrivatePreSaleTokenBalance(address _participant) public view returns(uint256) {\r\n\t\treturn privatePreSaleTokenBalances[_participant];\r\n\t}\t\r\n\r\n\tfunction getWeiBalance(address _participant) public view returns(uint256) {\r\n\t\treturn weiBalances[_participant];\r\n\t}\r\n\t\r\n\tfunction setBenificiary(address _benecifiaryAddress) public view onlyOwner {\r\n\t\tbeneficiary = _benecifiaryAddress;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"approveKYC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"privatePreSaleTokenBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"getPrivatePreSaleTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privatePreSaleSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privatePreSalePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setControler\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weiBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnerAddress\",\"type\":\"address\"}],\"name\":\"setBurner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"KYCParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_benecifiaryAddress\",\"type\":\"address\"}],\"name\":\"setBenificiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensForSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"getWeiBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumContributionWeiByOneInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isKYCApproved\",\"outputs\":[{\"name\":\"_isAprroved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vernamCrowdsaleToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"buyPreSale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minterAddress\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"KYCApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"VernamPrivatePreSale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6dbe96a5bcb35884c444b1214b0d7040267f2a3f2b31430c436bdb942bd3f1ab"}]}