{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n// File: zeppelin-solidity/contracts/ReentrancyGuard.sol\r\n\r\n/**\r\n * @title Helps contracts guard agains reentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>\r\n * @notice If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private reentrancy_lock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!reentrancy_lock);\r\n    reentrancy_lock = true;\r\n    _;\r\n    reentrancy_lock = false;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\r\n\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/BsktToken.sol\r\n\r\nlibrary AddressArrayUtils {\r\n\r\n    /// @return Returns index and ok for the first occurrence starting from\r\n    /// index 0\r\n    function index(address[] addresses, address a)\r\n        internal pure returns (uint, bool)\r\n    {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            if (addresses[i] == a) {\r\n                return (i, true);\r\n            }\r\n        }\r\n        return (0, false);\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title BsktToken\r\n/// @notice Bskt tokens are transferable, and can be created and redeemed by\r\n/// anyone. To create, a user must approve the contract to move the underlying\r\n/// tokens, then call `create`.\r\n/// @author CryptoFin\r\ncontract BsktToken is StandardToken, DetailedERC20, Pausable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using AddressArrayUtils for address[];\r\n\r\n    struct TokenInfo {\r\n        address addr;\r\n        uint256 quantity;\r\n    }\r\n    uint256 public creationUnit;\r\n    TokenInfo[] public tokens;\r\n\r\n    event Create(address indexed creator, uint256 amount);\r\n    event Redeem(address indexed redeemer, uint256 amount, address[] skippedTokens);\r\n\r\n    /// @notice Requires value to be divisible by creationUnit\r\n    /// @param value Number to be checked\r\n    modifier requireMultiple(uint256 value) {\r\n        require((value % creationUnit) == 0);\r\n        _;\r\n    }\r\n\r\n    /// @notice Requires value to be non-zero\r\n    /// @param value Number to be checked\r\n    modifier requireNonZero(uint256 value) {\r\n        require(value > 0);\r\n        _;\r\n    }\r\n\r\n    /// @notice Initializes contract with a list of ERC20 token addresses and\r\n    /// corresponding minimum number of units required for a creation unit\r\n    /// @param addresses Addresses of the underlying ERC20 token contracts\r\n    /// @param quantities Number of token base units required per creation unit\r\n    /// @param _creationUnit Number of base units per creation unit\r\n    function BsktToken(\r\n        address[] addresses,\r\n        uint256[] quantities,\r\n        uint256 _creationUnit,\r\n        string _name,\r\n        string _symbol\r\n    ) DetailedERC20(_name, _symbol, 18) public {\r\n        require(addresses.length > 0);\r\n        require(addresses.length == quantities.length);\r\n        require(_creationUnit >= 1);\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            tokens.push(TokenInfo({\r\n                addr: addresses[i],\r\n                quantity: quantities[i]\r\n            }));\r\n        }\r\n\r\n        creationUnit = _creationUnit;\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /// @notice Creates Bskt tokens in exchange for underlying tokens. Before\r\n    /// calling, underlying tokens must be approved to be moved by the Bskt\r\n    /// contract. The number of approved tokens required depends on baseUnits.\r\n    /// @dev If any underlying tokens' `transferFrom` fails (eg. the token is\r\n    /// frozen), create will no longer work. At this point a token upgrade will\r\n    /// be necessary.\r\n    /// @param baseUnits Number of base units to create. Must be a multiple of\r\n    /// creationUnit.\r\n    function create(uint256 baseUnits)\r\n        external\r\n        whenNotPaused()\r\n        requireNonZero(baseUnits)\r\n        requireMultiple(baseUnits)\r\n    {\r\n        // Check overflow\r\n        require((totalSupply_ + baseUnits) > totalSupply_);\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            TokenInfo memory token = tokens[i];\r\n            ERC20 erc20 = ERC20(token.addr);\r\n            uint256 amount = baseUnits.div(creationUnit).mul(token.quantity);\r\n            require(erc20.transferFrom(msg.sender, address(this), amount));\r\n        }\r\n\r\n        mint(msg.sender, baseUnits);\r\n        emit Create(msg.sender, baseUnits);\r\n    }\r\n\r\n    /// @notice Redeems Bskt tokens in exchange for underlying tokens\r\n    /// @param baseUnits Number of base units to redeem. Must be a multiple of\r\n    /// creationUnit.\r\n    /// @param tokensToSkip Underlying token addresses to skip redemption for.\r\n    /// Intended to be used to skip frozen or broken tokens which would prevent\r\n    /// all underlying tokens from being withdrawn due to a revert. Skipped\r\n    /// tokens are left in the Bskt contract and are unclaimable.\r\n    function redeem(uint256 baseUnits, address[] tokensToSkip)\r\n        external\r\n        requireNonZero(baseUnits)\r\n        requireMultiple(baseUnits)\r\n    {\r\n        require(baseUnits <= totalSupply_);\r\n        require(baseUnits <= balances[msg.sender]);\r\n        require(tokensToSkip.length <= tokens.length);\r\n        // Total supply check not required since a user would have to have\r\n        // balance greater than the total supply\r\n\r\n        // Burn before to prevent re-entrancy\r\n        burn(msg.sender, baseUnits);\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            TokenInfo memory token = tokens[i];\r\n            ERC20 erc20 = ERC20(token.addr);\r\n            uint256 index;\r\n            bool ok;\r\n            (index, ok) = tokensToSkip.index(token.addr);\r\n            if (ok) {\r\n                continue;\r\n            }\r\n            uint256 amount = baseUnits.div(creationUnit).mul(token.quantity);\r\n            require(erc20.transfer(msg.sender, amount));\r\n        }\r\n        emit Redeem(msg.sender, baseUnits, tokensToSkip);\r\n    }\r\n\r\n    /// @return addresses Underlying token addresses\r\n    function tokenAddresses() external view returns (address[]){\r\n        address[] memory addresses = new address[](tokens.length);\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            addresses[i] = tokens[i].addr;\r\n        }\r\n        return addresses;\r\n    }\r\n\r\n    /// @return quantities Number of token base units required per creation unit\r\n    function tokenQuantities() external view returns (uint256[]){\r\n        uint256[] memory quantities = new uint256[](tokens.length);\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            quantities[i] = tokens[i].quantity;\r\n        }\r\n        return quantities;\r\n    }\r\n\r\n    // @dev Mints new Bskt tokens\r\n    // @param to Address to mint to\r\n    // @param amount Amount to mint\r\n    // @return ok Whether the operation was successful\r\n    function mint(address to, uint256 amount) internal returns (bool) {\r\n        totalSupply_ = totalSupply_.add(amount);\r\n        balances[to] = balances[to].add(amount);\r\n        emit Transfer(address(0), to, amount);\r\n        return true;\r\n    }\r\n\r\n    // @dev Burns Bskt tokens\r\n    // @param from Address to burn from\r\n    // @param amount Amount to burn\r\n    // @return ok Whether the operation was successful\r\n    function burn(address from, uint256 amount) internal returns (bool) {\r\n        totalSupply_ = totalSupply_.sub(amount);\r\n        balances[from] = balances[from].sub(amount);\r\n        emit Transfer(from, address(0), amount);\r\n        return true;\r\n    }\r\n\r\n    // @notice Look up token quantity and whether token exists\r\n    // @param token Token address to look up\r\n    // @return (quantity, ok) Units of underlying token, and whether the\r\n    // token was found\r\n    function getQuantity(address token) internal view returns (uint256, bool) {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            if (tokens[i].addr == token) {\r\n                return (tokens[i].quantity, true);\r\n            }\r\n        }\r\n        return (0, false);\r\n    }\r\n\r\n    /// @notice Owner: Withdraw excess funds which don't belong to Bskt token\r\n    /// holders\r\n    /// @param token ERC20 token address to withdraw\r\n    function withdrawExcessToken(address token)\r\n        external\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        ERC20 erc20 = ERC20(token);\r\n        uint256 withdrawAmount;\r\n        uint256 amountOwned = erc20.balanceOf(address(this));\r\n        uint256 quantity;\r\n        bool ok;\r\n        (quantity, ok) = getQuantity(token);\r\n        if (ok) {\r\n            withdrawAmount = amountOwned.sub(\r\n                totalSupply_.div(creationUnit).mul(quantity)\r\n            );\r\n        } else {\r\n            withdrawAmount = amountOwned;\r\n        }\r\n        require(erc20.transfer(owner, withdrawAmount));\r\n    }\r\n\r\n    /// @dev Prevent Bskt tokens from being sent to the Bskt contract\r\n    /// @param _to The address to transfer tokens to\r\n    /// @param _value the amount of tokens to be transferred\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(this));\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /// @dev Prevent Bskt tokens from being sent to the Bskt contract\r\n    /// @param _from The address to transfer tokens from\r\n    /// @param _to The address to transfer to\r\n    /// @param _value The amount of tokens to be transferred\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(this));\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"baseUnits\",\"type\":\"uint256\"},{\"name\":\"tokensToSkip\",\"type\":\"address[]\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenQuantities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"quantity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"baseUnits\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawExcessToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"name\":\"_creationUnit\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"skippedTokens\",\"type\":\"address[]\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BsktToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000d26114cd6ee289accf82350c8d8487fedb8a0c07000000000000000000000000b8c77482e45f1f44de1745f52c74426c631bdd52000000000000000000000000e0b7927c4af23765cb51314a0e0521a9645f0e2a000000000000000000000000d4fa1460f537bb9085d22c7bccb5dd450ef28e3a0000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a2000000000000000000000000744d70fdbe2ba4cf95131626614a1763df805b9e000000000000000000000000e94327d07fc17907b4db788e5adf2ed424addff6000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498000000000000000000000000dd974d5c2e2928dea5f71b9825b8b646686bd200000000000000000000000000d4c435f5b09f855c3317c8524cb1f586e42795fa000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000110747de870000000000000000000000000000000000000000000000000000001307de99f500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000001a692c1b0000000000000000000000000000000000000000000000000000024323d8d8a900000000000000000000000000000000000000000000000000000001d5ec27180000000000000000000000000000000000000000000000000000005791cba5f800000000000000000000000000000000000000000000000000000016622dcedb000000000000000000000000000000000000000000000000000000f14c71ec9e0000000000000000000000000000000000000000000000000000000000000012457468657265756d31302051322d32303138000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034531300000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://9c58c6163f42c9838b1d2b973d7e927253f51e517f49d7feb5dc0edaff821b6a"}]}