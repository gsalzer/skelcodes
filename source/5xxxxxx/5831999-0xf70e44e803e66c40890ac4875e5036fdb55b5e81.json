{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// zeppelin-solidity@1.8.0 from NPM\r\n\r\ncontract DataCenterInterface {\r\n  function getResult(bytes32 gameId) view public returns (uint16, uint16, uint8);\r\n}\r\n\r\ncontract DataCenterAddrResolverInterface {\r\n  function getAddress() public returns (address _addr);\r\n}\r\n\r\ncontract DataCenterBridge {\r\n  uint8 constant networkID_auto = 0;\r\n  uint8 constant networkID_mainnet = 1;\r\n  uint8 constant networkID_testnet = 3;\r\n  string public networkName;\r\n\r\n  address public mainnetAddr = 0x6690E2698Bfa407DB697E69a11eA56810454549b;\r\n  address public testnetAddr = 0x282b192518fc09568de0E66Df8e2533f88C16672;\r\n\r\n  DataCenterAddrResolverInterface DAR;\r\n\r\n  DataCenterInterface dataCenter;\r\n\r\n  modifier dataCenterAPI() {\r\n    if((address(DAR) == 0) || (getCodeSize(address(DAR)) == 0))\r\n      setNetwork(networkID_auto);\r\n    if(address(dataCenter) != DAR.getAddress())\r\n      dataCenter = DataCenterInterface(DAR.getAddress());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev set network will indicate which net will be used\r\n   * @notice comment out `networkID` to avoid 'unused parameter' warning\r\n   */\r\n  function setNetwork(uint8 /*networkID*/) internal returns(bool){\r\n    return setNetwork();\r\n  }\r\n\r\n  function setNetwork() internal returns(bool){\r\n    if (getCodeSize(mainnetAddr) > 0) {\r\n      DAR = DataCenterAddrResolverInterface(mainnetAddr);\r\n      setNetworkName(\"eth_mainnet\");\r\n      return true;\r\n    }\r\n    if (getCodeSize(testnetAddr) > 0) {\r\n      DAR = DataCenterAddrResolverInterface(testnetAddr);\r\n      setNetworkName(\"eth_ropsten\");\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function setNetworkName(string _networkName) internal {\r\n    networkName = _networkName;\r\n  }\r\n\r\n  function getNetworkName() internal view returns (string) {\r\n    return networkName;\r\n  }\r\n\r\n  function dataCenterGetResult(bytes32 _gameId) dataCenterAPI internal returns (uint16, uint16, uint8){\r\n    return dataCenter.getResult(_gameId);\r\n  }\r\n\r\n  function getCodeSize(address _addr) view internal returns (uint _size) {\r\n    assembly {\r\n      _size := extcodesize(_addr)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Bet is Ownable, DataCenterBridge {\r\n  using SafeMath for uint;\r\n\r\n  event LogDistributeReward(address indexed addr, uint reward, uint index);\r\n  event LogGameResult(bytes32 indexed category, bytes32 indexed gameId, uint leftPts, uint rightPts);\r\n  event LogParticipant(address indexed addr, uint choice, uint betAmount);\r\n  event LogRefund(address indexed addr, uint betAmount);\r\n  event LogBetClosed(bool isRefund, uint timestamp);\r\n  event LogDealerWithdraw(address indexed addr, uint withdrawAmount);\r\n\r\n  /** \r\n   * @desc\r\n   * gameId: is a fixed string just like \"0021701030\"\r\n   *   the full gameId encode(include football, basketball, esports..) will publish on github\r\n   * leftOdds: need divide 100, if odds is 216 means 2.16\r\n   * middleOdds: need divide 100, if odds is 175 means 1.75\r\n   * rightOdds: need divide 100, if odds is 250 means 2.50\r\n   * spread: need sub 0.5, if spread is 1 means 0.5, 0 means no spread\r\n   * flag: indicate which team get spread, 1 means leftTeam, 3 means rightTeam\r\n   */\r\n  struct BetInfo {\r\n    bytes32 category;\r\n    bytes32 gameId;\r\n    uint8   spread;\r\n    uint8   flag;\r\n    uint16  leftOdds;\r\n    uint16  middleOdds;\r\n    uint16  rightOdds;\r\n    uint    minimumBet;\r\n    uint    startTime;\r\n    uint    deposit;\r\n    address dealer;\r\n  }\r\n\r\n  struct Player {\r\n    uint betAmount;\r\n    uint choice;\r\n  }\r\n\r\n  /**\r\n   * @desc\r\n   * winChoice: Indicate the winner choice of this betting\r\n   *   1 means leftTeam win, 3 means rightTeam win, 2 means draw(leftTeam is not always equivalent to the home team)\r\n   */\r\n  uint8 public winChoice;\r\n  uint8 public confirmations = 0;\r\n  uint8 public neededConfirmations = 1;\r\n  uint16 public leftPts;\r\n  uint16 public rightPts;\r\n  bool public isBetClosed = false;\r\n\r\n  uint public totalBetAmount = 0;\r\n  uint public leftAmount;\r\n  uint public middleAmount;\r\n  uint public rightAmount;\r\n  uint public numberOfBet;\r\n\r\n  address [] public players;\r\n  mapping(address => Player) public playerInfo;\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the dealer\r\n   */\r\n  modifier onlyDealer() {\r\n    require(msg.sender == betInfo.dealer);\r\n    _;\r\n  }\r\n\r\n  function() payable public {}\r\n\r\n  BetInfo betInfo;\r\n\r\n  function Bet(address _dealer, bytes32 _category, bytes32 _gameId, uint _minimumBet, \r\n                  uint8 _spread, uint16 _leftOdds, uint16 _middleOdds, uint16 _rightOdds, uint8 _flag,\r\n                  uint _startTime, uint8 _neededConfirmations, address _owner) payable public {\r\n    require(_flag == 1 || _flag == 3);\r\n    require(_startTime > now);\r\n    require(msg.value >= 0.1 ether);\r\n    require(_neededConfirmations >= neededConfirmations);\r\n\r\n    betInfo.dealer = _dealer;\r\n    betInfo.deposit = msg.value;\r\n    betInfo.flag = _flag;\r\n    betInfo.category = _category;\r\n    betInfo.gameId = _gameId;\r\n    betInfo.minimumBet = _minimumBet;\r\n    betInfo.spread = _spread;\r\n    betInfo.leftOdds = _leftOdds;\r\n    betInfo.middleOdds = _middleOdds;\r\n    betInfo.rightOdds = _rightOdds;\r\n    betInfo.startTime = _startTime;\r\n\r\n    neededConfirmations = _neededConfirmations;\r\n    owner = _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev get basic information of this bet\r\n   */\r\n  function getBetInfo() public view returns (bytes32, bytes32, uint8, uint8, uint16, uint16, uint16, uint, uint, uint, address) {\r\n    return (betInfo.category, betInfo.gameId, betInfo.spread, betInfo.flag, betInfo.leftOdds, betInfo.middleOdds,\r\n            betInfo.rightOdds, betInfo.minimumBet, betInfo.startTime, betInfo.deposit, betInfo.dealer);\r\n  }\r\n\r\n  /**\r\n   * @dev get basic information of this bet\r\n   *\r\n   *  uint public numberOfBet;\r\n   *  uint public totalBetAmount = 0;\r\n   *  uint public leftAmount;\r\n   *  uint public middleAmount;\r\n   *  uint public rightAmount;\r\n   *  uint public deposit;\r\n   */\r\n  function getBetMutableData() public view returns (uint, uint, uint, uint, uint, uint) {\r\n    return (numberOfBet, totalBetAmount, leftAmount, middleAmount, rightAmount, betInfo.deposit);\r\n  }\r\n\r\n  /**\r\n   * @dev get bet result information\r\n   *\r\n   *  uint8 public winChoice;\r\n   *  uint8 public confirmations = 0;\r\n   *  uint8 public neededConfirmations = 1;\r\n   *  uint16 public leftPts;\r\n   *  uint16 public rightPts;\r\n   *  bool public isBetClosed = false;\r\n   */\r\n  function getBetResult() public view returns (uint8, uint8, uint8, uint16, uint16, bool) {\r\n    return (winChoice, confirmations, neededConfirmations, leftPts, rightPts, isBetClosed);\r\n  }\r\n\r\n  /**\r\n   * @dev calculate the gas whichdistribute rewards will cost\r\n   * set default gasPrice is 5000000000\r\n   */\r\n  function getRefundTxFee() public view returns (uint) {\r\n    return numberOfBet.mul(5000000000 * 21000);\r\n  }\r\n\r\n  /**\r\n   * @dev find a player has participanted or not\r\n   * @param player the address of the participant\r\n   */\r\n  function checkPlayerExists(address player) public view returns (bool) {\r\n    if (playerInfo[player].choice == 0) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev to check the dealer is solvent or not\r\n   * @param choice indicate which team user choose\r\n   * @param amount indicate how many ether user bet\r\n   */\r\n  function isSolvent(uint choice, uint amount) internal view returns (bool) {\r\n    uint needAmount;\r\n    if (choice == 1) {\r\n      needAmount = (leftAmount.add(amount)).mul(betInfo.leftOdds).div(100);\r\n    } else if (choice == 2) {\r\n      needAmount = (middleAmount.add(amount)).mul(betInfo.middleOdds).div(100);\r\n    } else {\r\n      needAmount = (rightAmount.add(amount)).mul(betInfo.rightOdds).div(100);\r\n    }\r\n\r\n    if (needAmount.add(getRefundTxFee()) > totalBetAmount.add(amount).add(betInfo.deposit)) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev update this bet some state\r\n   * @param choice indicate which team user choose\r\n   * @param amount indicate how many ether user bet\r\n   */\r\n  function updateAmountOfEachChoice(uint choice, uint amount) internal {\r\n    if (choice == 1) {\r\n      leftAmount = leftAmount.add(amount);\r\n    } else if (choice == 2) {\r\n      middleAmount = middleAmount.add(amount);\r\n    } else {\r\n      rightAmount = rightAmount.add(amount);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev place a bet with his/her choice\r\n   * @param choice indicate which team user choose\r\n   */\r\n  function placeBet(uint choice) public payable {\r\n    require(now < betInfo.startTime);\r\n    require(choice == 1 ||  choice == 2 || choice == 3);\r\n    require(msg.value >= betInfo.minimumBet);\r\n    require(!checkPlayerExists(msg.sender));\r\n\r\n    if (!isSolvent(choice, msg.value)) {\r\n      revert();\r\n    }\r\n\r\n    playerInfo[msg.sender].betAmount = msg.value;\r\n    playerInfo[msg.sender].choice = choice;\r\n\r\n    totalBetAmount = totalBetAmount.add(msg.value);\r\n    numberOfBet = numberOfBet.add(1);\r\n    updateAmountOfEachChoice(choice, msg.value);\r\n    players.push(msg.sender);\r\n    LogParticipant(msg.sender, choice, msg.value);\r\n  }\r\n\r\n  /**\r\n   * @dev in order to let more people participant, dealer can recharge\r\n   */\r\n  function rechargeDeposit() public payable {\r\n    require(msg.value >= betInfo.minimumBet);\r\n    betInfo.deposit = betInfo.deposit.add(msg.value);\r\n  }\r\n\r\n  /**\r\n   * @dev given game result, _return win choice by specific spread\r\n   */\r\n  function getWinChoice(uint _leftPts, uint _rightPts) public view returns (uint8) {\r\n    uint8 _winChoice;\r\n    if (betInfo.spread == 0) {\r\n      if (_leftPts > _rightPts) {\r\n        _winChoice = 1;\r\n      } else if (_leftPts == _rightPts) {\r\n        _winChoice = 2;\r\n      } else {\r\n        _winChoice = 3;\r\n      }\r\n    } else {\r\n      if (betInfo.flag == 1) {\r\n        if (_leftPts + betInfo.spread > _rightPts) {\r\n          _winChoice = 1;\r\n        } else {\r\n          _winChoice = 3;\r\n        }\r\n      } else {\r\n        if (_rightPts + betInfo.spread > _leftPts) {\r\n          _winChoice = 3;\r\n        } else {\r\n          _winChoice = 1;\r\n        }\r\n      }\r\n    }\r\n    return _winChoice;\r\n  }\r\n\r\n  /**\r\n   * @dev manualCloseBet could only be called by owner,\r\n   *      this method only be used for ropsten,\r\n   *      when ethereum-events-data deployed,\r\n   *      game result should not be upload by owner\r\n   */\r\n  function manualCloseBet(uint16 _leftPts, uint16 _rightPts) onlyOwner external {\r\n    require(!isBetClosed);\r\n    leftPts = _leftPts;\r\n    rightPts = _rightPts;\r\n\r\n    LogGameResult(betInfo.category, betInfo.gameId, leftPts, rightPts);\r\n\r\n    winChoice = getWinChoice(leftPts, rightPts);\r\n\r\n    if (winChoice == 1) {\r\n      distributeReward(betInfo.leftOdds);\r\n    } else if (winChoice == 2) {\r\n      distributeReward(betInfo.middleOdds);\r\n    } else {\r\n      distributeReward(betInfo.rightOdds);\r\n    }\r\n\r\n    isBetClosed = true;\r\n    LogBetClosed(false, now);\r\n    withdraw();\r\n  }\r\n\r\n  /**\r\n   * @dev closeBet could be called by everyone, but owner/dealer should to this.\r\n   */\r\n  function closeBet() external {\r\n    require(!isBetClosed);\r\n    (leftPts, rightPts, confirmations) = dataCenterGetResult(betInfo.gameId);\r\n\r\n    require(confirmations >= neededConfirmations);\r\n\r\n    LogGameResult(betInfo.category, betInfo.gameId, leftPts, rightPts);\r\n\r\n    winChoice = getWinChoice(leftPts, rightPts);\r\n\r\n    if (winChoice == 1) {\r\n      distributeReward(betInfo.leftOdds);\r\n    } else if (winChoice == 2) {\r\n      distributeReward(betInfo.middleOdds);\r\n    } else {\r\n      distributeReward(betInfo.rightOdds);\r\n    }\r\n\r\n    isBetClosed = true;\r\n    LogBetClosed(false, now);\r\n    withdraw();\r\n  }\r\n\r\n  /**\r\n   * @dev get the players\r\n   */\r\n  function getPlayers() view public returns (address[]) {\r\n    return players;\r\n  }\r\n\r\n  /**\r\n   * @dev get contract balance\r\n   */\r\n  function getBalance() view public returns (uint) {\r\n    return address(this).balance;\r\n  }\r\n\r\n  /**\r\n   * @dev if there are some reasons lead game postpone or cancel\r\n   *      the bet will also cancel and refund every bet\r\n   */\r\n  function refund() onlyOwner public {\r\n    for (uint i = 0; i < players.length; i++) {\r\n      players[i].transfer(playerInfo[players[i]].betAmount);\r\n      LogRefund(players[i], playerInfo[players[i]].betAmount);\r\n    }\r\n\r\n    isBetClosed = true;\r\n    LogBetClosed(true, now);\r\n    withdraw();\r\n  }\r\n\r\n  /**\r\n   * @dev dealer can withdraw the remain ether after refund or closed\r\n   */\r\n  function withdraw() internal {\r\n    require(isBetClosed);\r\n    uint _balance = address(this).balance;\r\n    betInfo.dealer.transfer(_balance);\r\n    LogDealerWithdraw(betInfo.dealer, _balance);\r\n  }\r\n\r\n  /**\r\n   * @dev distribute ether to every winner as they choosed odds\r\n   */\r\n  function distributeReward(uint winOdds) internal {\r\n    for (uint i = 0; i < players.length; i++) {\r\n      if (playerInfo[players[i]].choice == winChoice) {\r\n        players[i].transfer(winOdds.mul(playerInfo[players[i]].betAmount).div(100));\r\n        LogDistributeReward(players[i], winOdds.mul(playerInfo[players[i]].betAmount).div(100), i);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ncontract BetCenter is Ownable {\r\n\r\n  event LogCreateBet(uint indexed startTime, uint indexed spreadTag, bytes32 indexed category, uint deposit, address bet, bytes32 gameId);\r\n\r\n  function() payable public {}\r\n\r\n  function createBet(bytes32 category, bytes32 gameId, uint minimumBet, \r\n                  uint8 spread, uint16 leftOdds, uint16 middleOdds, uint16 rightOdds, uint8 flag,\r\n                  uint startTime, uint8 confirmations) payable public {\r\n    Bet bet = (new Bet).value(msg.value)(msg.sender, category, gameId, minimumBet, \r\n                  spread, leftOdds, middleOdds, rightOdds , flag, startTime, confirmations, owner);\r\n    if (spread == 0) {\r\n      LogCreateBet(startTime, 0, category, msg.value, bet, gameId);\r\n    } else {\r\n      LogCreateBet(startTime, 1, category, msg.value, bet, gameId);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"category\",\"type\":\"bytes32\"},{\"name\":\"gameId\",\"type\":\"bytes32\"},{\"name\":\"minimumBet\",\"type\":\"uint256\"},{\"name\":\"spread\",\"type\":\"uint8\"},{\"name\":\"leftOdds\",\"type\":\"uint16\"},{\"name\":\"middleOdds\",\"type\":\"uint16\"},{\"name\":\"rightOdds\",\"type\":\"uint16\"},{\"name\":\"flag\",\"type\":\"uint8\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"confirmations\",\"type\":\"uint8\"}],\"name\":\"createBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"spreadTag\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"category\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameId\",\"type\":\"bytes32\"}],\"name\":\"LogCreateBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BetCenter","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://215226908b1c11154c4dde3dbb19a7adde4715e5fb9db753de09580f41888397"}]}