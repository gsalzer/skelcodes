{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\ncontract TrustedDocument {\r\n    // Data structure for keeping document bundles signatures\r\n    // and metadata\r\n    struct Document {\r\n        // Id of the document, starting at 1\r\n        // 0 reserved for undefined / not found etc\r\n        uint documentId;\r\n        // File name\r\n        bytes32 fileName;\r\n        // Hash of the file -> (SHA256(TOBASE64(FILECONTENT)))\r\n        string documentContentSHA256;\r\n        // Hash of file containing extra metadata\r\n        // describing file. Secured same way as\r\n        // content of the file and can be any\r\n        // size to save gas on transactions\r\n        string documentMetadataSHA256;\r\n        // Block time when document was added to\r\n        // block / was mined\r\n        uint blockTime;\r\n        // Block number\r\n        uint blockNumber;\r\n        // Document validity date from claimed by\r\n        // publisher. Documents can be published\r\n        // before they become valid, or in some\r\n        // cases later.\r\n        uint validFrom;\r\n        // Optional valid date to if relevant\r\n        uint validTo;\r\n        // Reference to document update. Document\r\n        // can be updated/replaced, but such update \r\n        // history cannot be hidden and it is \r\n        // persistant and auditable by everyone.\r\n        // Update can address document itself aswell\r\n        // as only metadata, where documentContentSHA256\r\n        // stays same between updates - it can be\r\n        // compared between versions.\r\n        // This works as one way linked list\r\n        uint updatedVersionId;\r\n    }\r\n\r\n    // Owner of the contract\r\n    address public owner;\r\n\r\n    // Needed for keeping new version address.\r\n    // If 0, then this contract is up to date.\r\n    // If not 0, no documents can be added to \r\n    // this version anymore. Contract becomes \r\n    // retired and documents are read only.\r\n    address public upgradedVersion;\r\n\r\n    // Total count of signed documents\r\n    uint public documentsCount;\r\n\r\n    // Base URL on which files will be stored\r\n    string public baseUrl;\r\n\r\n    // Map of signed documents\r\n    mapping(uint => Document) private documents;\r\n\r\n    // Event for confirmation of adding new document\r\n    event EventDocumentAdded(uint indexed documentId);\r\n    // Event for updating document\r\n    event EventDocumentUpdated(uint indexed referencingDocumentId, uint indexed updatedDocumentId);\r\n    // Event for going on retirement\r\n    event Retired(address indexed upgradedVersion);\r\n\r\n    // Restricts call to owner\r\n    modifier onlyOwner() {\r\n        if (msg.sender == owner) \r\n        _;\r\n    }\r\n\r\n    // Restricts call only when this version is up to date == upgradedVersion is not set to a new address\r\n    // or in other words, equal to 0\r\n    modifier ifNotRetired() {\r\n        if (upgradedVersion == 0) \r\n        _;\r\n    } \r\n\r\n    // Constructor\r\n    function TrustedDocument() public {\r\n        owner = msg.sender;\r\n        baseUrl = \"_\";\r\n    }\r\n\r\n    // Enables to transfer ownership. Works even after\r\n    // retirement. No documents can be added, but some\r\n    // other tasks still can be performed.\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    // Adds new document - only owner and if not retired\r\n    function addDocument(bytes32 _fileName, string _documentContentSHA256, string _documentMetadataSHA256, uint _validFrom, uint _validTo) public onlyOwner ifNotRetired {\r\n        // Documents incremented before use so documents ids will\r\n        // start with 1 not 0 (shifter by 1)\r\n        // 0 is reserved as undefined value\r\n        uint documentId = documentsCount+1;\r\n        //\r\n        EventDocumentAdded(documentId);\r\n        documents[documentId] = Document(documentId, _fileName, _documentContentSHA256, _documentMetadataSHA256, block.timestamp, block.number, _validFrom, _validTo, 0);\r\n        documentsCount++;\r\n    }\r\n\r\n    // Gets total count of documents\r\n    function getDocumentsCount() public view\r\n    returns (uint)\r\n    {\r\n        return documentsCount;\r\n    }\r\n\r\n    // Retire if newer version will be available. To persist\r\n    // integrity, address of newer version needs to be provided.\r\n    // After retirement there is no way to add more documents.\r\n    function retire(address _upgradedVersion) public onlyOwner ifNotRetired {\r\n        // TODO - check if such contract exists\r\n        upgradedVersion = _upgradedVersion;\r\n        Retired(upgradedVersion);\r\n    }\r\n\r\n    // Gets document with ID\r\n    function getDocument(uint _documentId) public view\r\n    returns (\r\n        uint documentId,\r\n        bytes32 fileName,\r\n        string documentContentSHA256,\r\n        string documentMetadataSHA256,\r\n        uint blockTime,\r\n        uint blockNumber,\r\n        uint validFrom,\r\n        uint validTo,\r\n        uint updatedVersionId\r\n    ) {\r\n        Document memory doc = documents[_documentId];\r\n        return (doc.documentId, doc.fileName, doc.documentContentSHA256, doc.documentMetadataSHA256, doc.blockTime, doc.blockNumber, doc.validFrom, doc.validTo, doc.updatedVersionId);\r\n    }\r\n\r\n    // Gets document updatedVersionId with ID\r\n    // 0 - no update for document\r\n    function getDocumentUpdatedVersionId(uint _documentId) public view\r\n    returns (uint) \r\n    {\r\n        Document memory doc = documents[_documentId];\r\n        return doc.updatedVersionId;\r\n    }\r\n\r\n    // Gets base URL so GUI will know where to seek for storage.\r\n    // Multiple URLS can be set in the string and separated by comma\r\n    function getBaseUrl() public view\r\n    returns (string) \r\n    {\r\n        return baseUrl;\r\n    }\r\n\r\n    // Set base URL even on retirement. Files will have to be maintained\r\n    // for a very long time, and for example domain name could change.\r\n    // To manage this, owner should be able to set base url anytime\r\n    function setBaseUrl(string _baseUrl) public onlyOwner {\r\n        baseUrl = _baseUrl;\r\n    }\r\n\r\n    // Utility to help seek fo specyfied document\r\n    function getFirstDocumentIdStartingAtValidFrom(uint _unixTimeFrom) public view\r\n    returns (uint) \r\n    {\r\n        for (uint i = 0; i < documentsCount; i++) {\r\n           Document memory doc = documents[i];\r\n           if (doc.validFrom>=_unixTimeFrom) {\r\n               return i;\r\n           }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    // Utility to help seek fo specyfied document\r\n    function getFirstDocumentIdBetweenDatesValidFrom(uint _unixTimeStarting, uint _unixTimeEnding) public view\r\n    returns (uint firstID, uint lastId) \r\n    {\r\n        firstID = 0;\r\n        lastId = 0;\r\n        //\r\n        for (uint i = 0; i < documentsCount; i++) {\r\n            Document memory doc = documents[i];\r\n            if (firstID==0) {\r\n                if (doc.validFrom>=_unixTimeStarting) {\r\n                    firstID = i;\r\n                }\r\n            } else {\r\n                if (doc.validFrom<=_unixTimeEnding) {\r\n                    lastId = i;\r\n                }\r\n            }\r\n        }\r\n        //\r\n        if ((firstID>0)&&(lastId==0)&&(_unixTimeStarting<_unixTimeEnding)) {\r\n            lastId = documentsCount;\r\n        }\r\n    }\r\n\r\n    // Utility to help seek fo specyfied document\r\n    function getDocumentIdWithContentHash(string _documentContentSHA256) public view\r\n    returns (uint) \r\n    {\r\n        bytes32 documentContentSHA256Keccak256 = keccak256(_documentContentSHA256);\r\n        for (uint i = 0; i < documentsCount; i++) {\r\n           Document memory doc = documents[i];\r\n           if (keccak256(doc.documentContentSHA256)==documentContentSHA256Keccak256) {\r\n               return i;\r\n           }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    // Utility to help seek fo specyfied document\r\n    function getDocumentIdWithName(string _fileName) public view\r\n    returns (uint) \r\n    {\r\n        bytes32 fileNameKeccak256 = keccak256(_fileName);\r\n        for (uint i = 0; i < documentsCount; i++) {\r\n           Document memory doc = documents[i];\r\n           if (keccak256(doc.fileName)==fileNameKeccak256) {\r\n               return i;\r\n           }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    // To update document:\r\n    // 1 - Add new version as ordinary document\r\n    // 2 - Call this function to link old version with update\r\n    function updateDocument(uint referencingDocumentId, uint updatedDocumentId) public onlyOwner ifNotRetired {\r\n        Document storage referenced = documents[referencingDocumentId];\r\n        Document memory updated = documents[updatedDocumentId];\r\n        //\r\n        referenced.updatedVersionId = updated.documentId;\r\n        EventDocumentUpdated(referenced.updatedVersionId,updated.documentId);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBaseUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDocumentsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_fileName\",\"type\":\"string\"}],\"name\":\"getDocumentIdWithName\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unixTimeStarting\",\"type\":\"uint256\"},{\"name\":\"_unixTimeEnding\",\"type\":\"uint256\"}],\"name\":\"getFirstDocumentIdBetweenDatesValidFrom\",\"outputs\":[{\"name\":\"firstID\",\"type\":\"uint256\"},{\"name\":\"lastId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referencingDocumentId\",\"type\":\"uint256\"},{\"name\":\"updatedDocumentId\",\"type\":\"uint256\"}],\"name\":\"updateDocument\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_documentId\",\"type\":\"uint256\"}],\"name\":\"getDocument\",\"outputs\":[{\"name\":\"documentId\",\"type\":\"uint256\"},{\"name\":\"fileName\",\"type\":\"bytes32\"},{\"name\":\"documentContentSHA256\",\"type\":\"string\"},{\"name\":\"documentMetadataSHA256\",\"type\":\"string\"},{\"name\":\"blockTime\",\"type\":\"uint256\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"validFrom\",\"type\":\"uint256\"},{\"name\":\"validTo\",\"type\":\"uint256\"},{\"name\":\"updatedVersionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_documentId\",\"type\":\"uint256\"}],\"name\":\"getDocumentUpdatedVersionId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_unixTimeFrom\",\"type\":\"uint256\"}],\"name\":\"getFirstDocumentIdStartingAtValidFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"documentsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradedVersion\",\"type\":\"address\"}],\"name\":\"retire\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_baseUrl\",\"type\":\"string\"}],\"name\":\"setBaseUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_documentContentSHA256\",\"type\":\"string\"}],\"name\":\"getDocumentIdWithContentHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fileName\",\"type\":\"bytes32\"},{\"name\":\"_documentContentSHA256\",\"type\":\"string\"},{\"name\":\"_documentMetadataSHA256\",\"type\":\"string\"},{\"name\":\"_validFrom\",\"type\":\"uint256\"},{\"name\":\"_validTo\",\"type\":\"uint256\"}],\"name\":\"addDocument\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"documentId\",\"type\":\"uint256\"}],\"name\":\"EventDocumentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referencingDocumentId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"updatedDocumentId\",\"type\":\"uint256\"}],\"name\":\"EventDocumentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"upgradedVersion\",\"type\":\"address\"}],\"name\":\"Retired\",\"type\":\"event\"}]","ContractName":"TrustedDocument","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f4634187fb69c135fa9074e11a877455dce77d2adf094473810ba6cd5113ce37"}]}