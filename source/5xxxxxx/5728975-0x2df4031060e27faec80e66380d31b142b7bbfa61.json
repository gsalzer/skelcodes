{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts/commons/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/flavours/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/flavours/Lockable.sol\r\n\r\n/**\r\n * @title Lockable\r\n * @dev Base contract which allows children to\r\n *      implement main operations locking mechanism.\r\n */\r\ncontract Lockable is Ownable {\r\n    event Lock();\r\n    event Unlock();\r\n\r\n    bool public locked = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable\r\n    *       only when the contract is not locked.\r\n     */\r\n    modifier whenNotLocked() {\r\n        require(!locked);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable\r\n     *      only when the contract is locked.\r\n     */\r\n    modifier whenLocked() {\r\n        require(locked);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to lock, triggers locked state\r\n     */\r\n    function lock() public onlyOwner whenNotLocked {\r\n        locked = true;\r\n        emit Lock();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner\r\n     *      to unlock, returns to unlocked state\r\n     */\r\n    function unlock() public onlyOwner whenLocked {\r\n        locked = false;\r\n        emit Unlock();\r\n    }\r\n}\r\n\r\n// File: contracts/base/ERC20Token.sol\r\n\r\ninterface ERC20Token {\r\n    function transferFrom(address from_, address to_, uint value_) external returns (bool);\r\n}\r\n\r\n// File: contracts/base/BaseAirdrop.sol\r\n\r\ncontract BaseAirdrop is Lockable {\r\n    using SafeMath for uint;\r\n\r\n    ERC20Token public token;\r\n\r\n    address public tokenHolder;\r\n\r\n    mapping(address => bool) public users;\r\n\r\n    event AirdropToken(address indexed to, uint amount);\r\n\r\n    constructor(address _token, address _tokenHolder) public {\r\n        require(_token != address(0) && _tokenHolder != address(0));\r\n        token = ERC20Token(_token);\r\n        tokenHolder = _tokenHolder;\r\n    }\r\n\r\n    function airdrop(uint8 v, bytes32 r, bytes32 s) public whenNotLocked {\r\n        if (ecrecover(keccak256(\"Signed for Airdrop\", address(this), address(token), msg.sender), v, r, s) != owner\r\n            || users[msg.sender]) {\r\n            revert();\r\n        }\r\n        users[msg.sender] = true;\r\n        uint amount = getAirdropAmount(msg.sender);\r\n        token.transferFrom(tokenHolder, msg.sender, amount);\r\n        emit AirdropToken(msg.sender, amount);\r\n    }\r\n\r\n    function getAirdropStatus(address user) public constant returns (bool success) {\r\n        return users[user];\r\n    }\r\n\r\n    function getAirdropAmount(address user) public constant returns (uint amount);\r\n}\r\n\r\n// File: contracts/BITOXAirdrop.sol\r\n\r\n/**\r\n * @title BITOX token airdrop contract.\r\n */\r\ncontract BITOXAirdrop is BaseAirdrop {\r\n\r\n    uint public constant PER_USER_AMOUNT = 2883e18;\r\n\r\n    constructor(address _token, address _tokenHolder) public BaseAirdrop(_token, _tokenHolder) {\r\n        locked = true;\r\n    }\r\n\r\n    // Disable direct payments\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n    function getAirdropAmount(address user) public constant returns (uint amount) {\r\n        require(user != address(0));\r\n        return PER_USER_AMOUNT;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PER_USER_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAirdropAmount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAirdropStatus\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BITOXAirdrop","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"000000000000000000000000bdda280ee7bccc68f3be60a369b6b1eaee02493c000000000000000000000000521aff68ac6f05f36ae75fc786eec3b310baf68b","Library":"","SwarmSource":"bzzr://11d39b17a920a0c47bd16b43c714c0853567aa85be4df1228a8c484ff3c9e821"}]}