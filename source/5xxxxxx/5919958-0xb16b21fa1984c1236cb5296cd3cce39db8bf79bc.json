{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/* ==================================================================== */\r\n/* Copyright (c) 2018 The MagicAcademy Project.  All rights reserved.\r\n/* \r\n/* https://www.magicacademy.io One of the world's first idle strategy games of blockchain \r\n/*  \r\n/* authors rainy@livestar.com/fanny.zheng@livestar.com\r\n/*                 \r\n/* ==================================================================== */\r\ncontract GameConfig {\r\n  using SafeMath for SafeMath;\r\n  address public owner;\r\n\r\n  /**event**/\r\n  event newCard(uint256 cardId,uint256 baseCoinCost,uint256 coinCostIncreaseHalf,uint256 ethCost,uint256 baseCoinProduction);\r\n  event newBattleCard(uint256 cardId,uint256 baseCoinCost,uint256 coinCostIncreaseHalf,uint256 ethCost,uint256 attackValue,uint256 defenseValue,uint256 coinStealingCapacity);\r\n  event newUpgradeCard(uint256 upgradecardId, uint256 coinCost, uint256 ethCost, uint256 upgradeClass, uint256 cardId, uint256 upgradeValue);\r\n  \r\n  struct Card {\r\n    uint256 cardId;\r\n    uint256 baseCoinCost;\r\n    uint256 coinCostIncreaseHalf; // Halfed to make maths slightly less (cancels a 2 out)\r\n    uint256 ethCost;\r\n    uint256 baseCoinProduction;\r\n    bool unitSellable; // Rare units (from raffle) not sellable\r\n  }\r\n\r\n\r\n  struct BattleCard {\r\n    uint256 cardId;\r\n    uint256 baseCoinCost;\r\n    uint256 coinCostIncreaseHalf; // Halfed to make maths slightly less (cancels a 2 out)\r\n    uint256 ethCost;\r\n    uint256 attackValue;\r\n    uint256 defenseValue;\r\n    uint256 coinStealingCapacity;\r\n    bool unitSellable; // Rare units (from raffle) not sellable\r\n  }\r\n  \r\n  struct UpgradeCard {\r\n    uint256 upgradecardId;\r\n    uint256 coinCost;\r\n    uint256 ethCost;\r\n    uint256 upgradeClass;\r\n    uint256 cardId;\r\n    uint256 upgradeValue;\r\n  }\r\n  \r\n  /** mapping**/\r\n  mapping(uint256 => Card) private cardInfo;  //normal card\r\n  mapping(uint256 => BattleCard) private battlecardInfo;  //battle card\r\n  mapping(uint256 => UpgradeCard) private upgradeInfo;  //upgrade card\r\n     \r\n  uint256 public currNumOfCards = 9;  \r\n  uint256 public currNumOfBattleCards = 6;  \r\n  uint256 public currNumOfUpgrades; \r\n\r\n  uint256 PLATPrice = 65000;\r\n  string versionNo;\r\n \r\n  // Constructor \r\n  function GameConfig() public {\r\n    owner = msg.sender;\r\n    versionNo = \"20180706\";\r\n    cardInfo[1] = Card(1, 0, 10, 0, 2, true);\r\n    cardInfo[2] = Card(2, 100, 50, 0, 5, true);\r\n    cardInfo[3] = Card(3, 0, 0, 0.01 ether, 100, true);\r\n    cardInfo[4] = Card(4, 200, 100, 0, 10,  true);\r\n    cardInfo[5] = Card(5, 500, 250, 0, 20,  true);\r\n    cardInfo[6] = Card(6, 1000, 500, 0, 40, true);\r\n    cardInfo[7] = Card(7, 0, 1000, 0.05 ether, 500, true);\r\n    cardInfo[8] = Card(8, 1500, 750, 0, 60,  true);\r\n    cardInfo[9] = Card(9, 0, 0, 0.99 ether, 5500, false);\r\n\r\n    battlecardInfo[40] = BattleCard(40, 50, 25, 0,  10, 10, 10000, true);\r\n    battlecardInfo[41] = BattleCard(41, 100, 50, 0,  1, 25, 500, true);\r\n    battlecardInfo[42] = BattleCard(42, 0, 0, 0.01 ether,  200, 10, 50000, true);\r\n    battlecardInfo[43] = BattleCard(43, 250, 125, 0, 25, 1, 15000, true);\r\n    battlecardInfo[44] = BattleCard(44, 500, 250, 0, 20, 40, 5000, true);\r\n    battlecardInfo[45] = BattleCard(45, 0, 2500, 0.02 ether, 0, 0, 100000, true);\r\n\r\n    //InitUpgradeCard();\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function setPLATPrice(uint256 price) external onlyOwner {\r\n    PLATPrice = price;\r\n  }\r\n  function getPLATPrice() external view returns (uint256) {\r\n    return PLATPrice;\r\n  }\r\n  function getVersion() external view returns(string) {\r\n    return versionNo;\r\n  }\r\n\r\n  function InitUpgradeCard() external onlyOwner {\r\n  //upgradecardId,coinCost,ethCost,upgradeClass,cardId,upgradeValue;\r\n    CreateUpgradeCards(1,500,0,0,1,1);\r\n    CreateUpgradeCards(2 ,0,0.02 ether,1,1,1);\r\n    CreateUpgradeCards(3,0,0.1 ether,8,1,999);\r\n    CreateUpgradeCards(4,0,0.02 ether,0,2,2);\r\n    CreateUpgradeCards(5,5000,0,1,2,5);\r\n    CreateUpgradeCards(6,0,0.1 ether,8,2,999);\r\n    CreateUpgradeCards(7,5000,0,0,3,5);\r\n    CreateUpgradeCards(8,0,0.1 ether,1,3,5);\r\n    CreateUpgradeCards(9,5000000,0,8,3,999);\r\n    CreateUpgradeCards(10,0,0.02 ether,0,4,4);\r\n    CreateUpgradeCards(11,10000,0,1,4,5);\r\n    CreateUpgradeCards(12,0,0.1 ether,8,4,999);\r\n    CreateUpgradeCards(13,15000,0,0,5,6);\r\n    CreateUpgradeCards(14,0,0.25 ether,1,5,5);\r\n    CreateUpgradeCards(15,0,0.1 ether,8,5,999);\r\n    CreateUpgradeCards(16,0,0.02 ether,0,6,8);\r\n    CreateUpgradeCards(17,30000,0,1,6,5);\r\n    CreateUpgradeCards(18,0,0.1 ether,8,6,999);\r\n    CreateUpgradeCards(19,35000,0,0,7,25);\r\n    CreateUpgradeCards(20,0,0.05 ether,1,7,5);\r\n    CreateUpgradeCards(21,5000000,0,8,7,999);\r\n    CreateUpgradeCards(22,0,0.02 ether,0,8,10);\r\n    CreateUpgradeCards(23,75000,0,1,8,5);\r\n    CreateUpgradeCards(24,0,0.1 ether,8,8,999);\r\n\r\n    //for battle cards\r\n    CreateUpgradeCards(25,1000,0,2,40,5);                 \r\n    CreateUpgradeCards(26,2500,0,4,40,5);       \r\n    CreateUpgradeCards(27,50000000,0,8,40,999); \r\n    CreateUpgradeCards(28,2500,0,4,41,5);       \r\n    CreateUpgradeCards(29,5000,0,5,41,5);       \r\n    CreateUpgradeCards(30,50000000,0,8,41,999); \r\n    CreateUpgradeCards(31,5000,0,2,42,10);      \r\n    CreateUpgradeCards(32,7500,0,3,42,5);       \r\n    CreateUpgradeCards(33,5000000,0,8,42,999);  \r\n    CreateUpgradeCards(34,7500,0,2,43,5);       \r\n    CreateUpgradeCards(35,10000,0,6,43,1000);   \r\n    CreateUpgradeCards(36,50000000,0,8,43,999); \r\n    CreateUpgradeCards(37,10000,0,3,44,5);      \r\n    CreateUpgradeCards(38,15000,0,5,44,5);      \r\n    CreateUpgradeCards(39,50000000,0,8,44,999); \r\n    CreateUpgradeCards(40,25000,0,6,45,10000);  \r\n    CreateUpgradeCards(41,50000,0,7,45,5);      \r\n    CreateUpgradeCards(42,5000000,0,8,45,999); \r\n  } \r\n\r\n  function CreateBattleCards(uint256 _cardId, uint256 _baseCoinCost, uint256 _coinCostIncreaseHalf, uint256 _ethCost, uint _attackValue, uint256 _defenseValue, uint256 _coinStealingCapacity, bool _unitSellable) public onlyOwner {\r\n    BattleCard memory _battlecard = BattleCard({\r\n      cardId: _cardId,\r\n      baseCoinCost: _baseCoinCost,\r\n      coinCostIncreaseHalf: _coinCostIncreaseHalf,\r\n      ethCost: _ethCost,\r\n      attackValue: _attackValue,\r\n      defenseValue: _defenseValue,\r\n      coinStealingCapacity: _coinStealingCapacity,\r\n      unitSellable: _unitSellable\r\n    });\r\n    battlecardInfo[_cardId] = _battlecard;\r\n    currNumOfBattleCards = SafeMath.add(currNumOfBattleCards,1);\r\n    newBattleCard(_cardId,_baseCoinCost,_coinCostIncreaseHalf,_ethCost,_attackValue,_defenseValue,_coinStealingCapacity);\r\n    \r\n  }\r\n\r\n  function CreateCards(uint256 _cardId, uint256 _baseCoinCost, uint256 _coinCostIncreaseHalf, uint256 _ethCost, uint256 _baseCoinProduction, bool _unitSellable) public onlyOwner {\r\n    Card memory _card = Card({\r\n      cardId: _cardId,\r\n      baseCoinCost: _baseCoinCost,\r\n      coinCostIncreaseHalf: _coinCostIncreaseHalf,\r\n      ethCost: _ethCost,\r\n      baseCoinProduction: _baseCoinProduction,\r\n      unitSellable: _unitSellable\r\n    });\r\n    cardInfo[_cardId] = _card;\r\n    currNumOfCards = SafeMath.add(currNumOfCards,1);\r\n    newCard(_cardId,_baseCoinCost,_coinCostIncreaseHalf,_ethCost,_baseCoinProduction);\r\n  }\r\n\r\n  function CreateUpgradeCards(uint256 _upgradecardId, uint256 _coinCost, uint256 _ethCost, uint256 _upgradeClass, uint256 _cardId, uint256 _upgradeValue) public onlyOwner {\r\n    UpgradeCard memory _upgradecard = UpgradeCard({\r\n      upgradecardId: _upgradecardId,\r\n      coinCost: _coinCost,\r\n      ethCost: _ethCost,\r\n      upgradeClass: _upgradeClass,\r\n      cardId: _cardId,\r\n      upgradeValue: _upgradeValue\r\n    });\r\n    upgradeInfo[_upgradecardId] = _upgradecard;\r\n    currNumOfUpgrades = SafeMath.add(currNumOfUpgrades,1);\r\n    newUpgradeCard(_upgradecardId,_coinCost,_ethCost,_upgradeClass,_cardId,_upgradeValue); \r\n  }\r\n  \r\n  function getCostForCards(uint256 cardId, uint256 existing, uint256 amount) public constant returns (uint256) {\r\n    uint256 icount = existing;\r\n    if (amount == 1) { \r\n      if (existing == 0) {  \r\n        return cardInfo[cardId].baseCoinCost; \r\n      } else {\r\n        return cardInfo[cardId].baseCoinCost + (existing * cardInfo[cardId].coinCostIncreaseHalf * 2);\r\n            }\r\n    } else if (amount > 1) { \r\n      uint256 existingCost;\r\n      if (existing > 0) {\r\n        existingCost = (cardInfo[cardId].baseCoinCost * existing) + (existing * (existing - 1) * cardInfo[cardId].coinCostIncreaseHalf);\r\n      }\r\n      icount = SafeMath.add(existing,amount);  \r\n      uint256 newCost = SafeMath.add(SafeMath.mul(cardInfo[cardId].baseCoinCost, icount), SafeMath.mul(SafeMath.mul(icount, (icount - 1)), cardInfo[cardId].coinCostIncreaseHalf));\r\n      return newCost - existingCost;\r\n      }\r\n  }\r\n\r\n  function getCostForBattleCards(uint256 cardId, uint256 existing, uint256 amount) public constant returns (uint256) {\r\n    uint256 icount = existing;\r\n    if (amount == 1) { \r\n      if (existing == 0) {  \r\n        return battlecardInfo[cardId].baseCoinCost; \r\n      } else {\r\n        return battlecardInfo[cardId].baseCoinCost + (existing * battlecardInfo[cardId].coinCostIncreaseHalf * 2);\r\n            }\r\n    } else if (amount > 1) {\r\n      uint256 existingCost;\r\n      if (existing > 0) {\r\n        existingCost = (battlecardInfo[cardId].baseCoinCost * existing) + (existing * (existing - 1) * battlecardInfo[cardId].coinCostIncreaseHalf);\r\n      }\r\n      icount = SafeMath.add(existing,amount);  \r\n      uint256 newCost = SafeMath.add(SafeMath.mul(battlecardInfo[cardId].baseCoinCost, icount), SafeMath.mul(SafeMath.mul(icount, (icount - 1)), battlecardInfo[cardId].coinCostIncreaseHalf));\r\n      return newCost - existingCost;\r\n    }\r\n  }\r\n\r\n  function getCostForUprade(uint256 cardId, uint256 existing, uint256 amount) public constant returns (uint256) {\r\n    if (amount == 1) { \r\n      if (existing == 0) {  \r\n        return upgradeInfo[cardId].coinCost; \r\n      } else if (existing == 1 || existing == 4){\r\n        return 0;\r\n      }else if (existing == 2) {\r\n        return upgradeInfo[cardId].coinCost * 50; \r\n    }else if (existing == 3) {\r\n      return upgradeInfo[cardId].coinCost * 50 * 40; \r\n    }else if (existing == 5) {\r\n      return upgradeInfo[cardId].coinCost * 50 * 40 * 30; \r\n    }\r\n  }\r\n  }\r\n\r\n  function getWeakenedDefensePower(uint256 defendingPower) external pure returns (uint256) {\r\n    return SafeMath.div(defendingPower,2);\r\n  }\r\n \r\n    /// @notice get the production card's ether cost\r\n  function unitEthCost(uint256 cardId) external constant returns (uint256) {\r\n    return cardInfo[cardId].ethCost;\r\n  }\r\n\r\n    /// @notice get the battle card's ether cost\r\n  function unitBattleEthCost(uint256 cardId) external constant returns (uint256) {\r\n    return battlecardInfo[cardId].ethCost;\r\n  }\r\n  /// @notice get the battle card's plat cost\r\n  function unitBattlePLATCost(uint256 cardId) external constant returns (uint256) {\r\n    return SafeMath.mul(battlecardInfo[cardId].ethCost,PLATPrice);\r\n  }\r\n\r\n    /// @notice normal production plat value\r\n  function unitPLATCost(uint256 cardId) external constant returns (uint256) {\r\n    return SafeMath.mul(cardInfo[cardId].ethCost,PLATPrice);\r\n  }\r\n\r\n  function unitCoinProduction(uint256 cardId) external constant returns (uint256) {\r\n    return cardInfo[cardId].baseCoinProduction;\r\n  }\r\n\r\n  function unitAttack(uint256 cardId) external constant returns (uint256) {\r\n    return battlecardInfo[cardId].attackValue;\r\n  }\r\n    \r\n  function unitDefense(uint256 cardId) external constant returns (uint256) {\r\n    return battlecardInfo[cardId].defenseValue;\r\n  }\r\n\r\n  function unitStealingCapacity(uint256 cardId) external constant returns (uint256) {\r\n    return battlecardInfo[cardId].coinStealingCapacity;\r\n  }\r\n  \r\n  function productionCardIdRange() external constant returns (uint256, uint256) {\r\n    return (1, currNumOfCards);\r\n  }\r\n\r\n  function battleCardIdRange() external constant returns (uint256, uint256) {\r\n    uint256 battleMax = SafeMath.add(39,currNumOfBattleCards);\r\n    return (40, battleMax);\r\n  }\r\n\r\n  function upgradeIdRange() external constant returns (uint256, uint256) {\r\n    return (1, currNumOfUpgrades);\r\n  }\r\n \r\n  function getcurrNumOfCards() external view returns (uint256) {\r\n    return currNumOfCards;\r\n  }\r\n\r\n  function getcurrNumOfUpgrades() external view returns (uint256) {\r\n    return currNumOfUpgrades;\r\n  }\r\n  // get the detail info of card \r\n  function getCardsInfo(uint256 cardId) external constant returns (\r\n    uint256 baseCoinCost,\r\n    uint256 coinCostIncreaseHalf,\r\n    uint256 ethCost, \r\n    uint256 baseCoinProduction,\r\n    uint256 platCost, \r\n    bool  unitSellable\r\n  ) {\r\n    baseCoinCost = cardInfo[cardId].baseCoinCost;\r\n    coinCostIncreaseHalf = cardInfo[cardId].coinCostIncreaseHalf;\r\n    ethCost = cardInfo[cardId].ethCost;\r\n    baseCoinProduction = cardInfo[cardId].baseCoinProduction;\r\n    platCost = SafeMath.mul(ethCost,PLATPrice);\r\n    unitSellable = cardInfo[cardId].unitSellable;\r\n  }\r\n  //for production card\r\n  function getCardInfo(uint256 cardId, uint256 existing, uint256 amount) external view returns \r\n  (uint256, uint256, uint256, uint256, bool) {\r\n    return (cardInfo[cardId].cardId, \r\n    cardInfo[cardId].baseCoinProduction, \r\n    getCostForCards(cardId, existing, amount), \r\n    SafeMath.mul(cardInfo[cardId].ethCost, amount),\r\n    cardInfo[cardId].unitSellable);\r\n  }\r\n\r\n   //for battle card\r\n  function getBattleCardInfo(uint256 cardId, uint256 existing, uint256 amount) external constant returns \r\n  (uint256, uint256, uint256, bool) {\r\n    return (battlecardInfo[cardId].cardId, \r\n    getCostForBattleCards(cardId, existing, amount), \r\n    SafeMath.mul(battlecardInfo[cardId].ethCost, amount),\r\n    battlecardInfo[cardId].unitSellable);\r\n  }\r\n\r\n  //Battle Cards\r\n  function getBattleCardsInfo(uint256 cardId) external constant returns (\r\n    uint256 baseCoinCost,\r\n    uint256 coinCostIncreaseHalf,\r\n    uint256 ethCost, \r\n    uint256 attackValue,\r\n    uint256 defenseValue,\r\n    uint256 coinStealingCapacity,\r\n    uint256 platCost,\r\n    bool  unitSellable\r\n  ) {\r\n    baseCoinCost = battlecardInfo[cardId].baseCoinCost;\r\n    coinCostIncreaseHalf = battlecardInfo[cardId].coinCostIncreaseHalf;\r\n    ethCost = battlecardInfo[cardId].ethCost;\r\n    attackValue = battlecardInfo[cardId].attackValue;\r\n    defenseValue = battlecardInfo[cardId].defenseValue;\r\n    coinStealingCapacity = battlecardInfo[cardId].coinStealingCapacity;\r\n    platCost = SafeMath.mul(ethCost,PLATPrice);\r\n    unitSellable = battlecardInfo[cardId].unitSellable;\r\n  }\r\n\r\n  function getUpgradeInfo(uint256 upgradeId) external constant returns (uint256 coinCost, \r\n    uint256 ethCost, \r\n    uint256 upgradeClass, \r\n    uint256 cardId, \r\n    uint256 upgradeValue,\r\n    uint256 platCost) {\r\n    \r\n    coinCost = upgradeInfo[upgradeId].coinCost;\r\n    ethCost = upgradeInfo[upgradeId].ethCost;\r\n    upgradeClass = upgradeInfo[upgradeId].upgradeClass;\r\n    cardId = upgradeInfo[upgradeId].cardId;\r\n    upgradeValue = upgradeInfo[upgradeId].upgradeValue;\r\n    platCost = SafeMath.mul(ethCost,PLATPrice);\r\n  }\r\n    //upgrade cards\r\n  function getUpgradeCardsInfo(uint256 upgradecardId, uint256 existing) external constant returns (\r\n    uint256 coinCost, \r\n    uint256 ethCost, \r\n    uint256 upgradeClass, \r\n    uint256 cardId, \r\n    uint256 upgradeValue,\r\n    uint256 platCost\r\n    ) {\r\n    coinCost = upgradeInfo[upgradecardId].coinCost;\r\n    ethCost = upgradeInfo[upgradecardId].ethCost;\r\n    upgradeClass = upgradeInfo[upgradecardId].upgradeClass;\r\n    cardId = upgradeInfo[upgradecardId].cardId;\r\n    if (upgradeClass==8) {\r\n      upgradeValue = upgradeInfo[upgradecardId].upgradeValue;\r\n      if (ethCost>0) {\r\n        if (existing==1) {\r\n          ethCost = 0.2 ether;\r\n        } else if (existing==2) {\r\n          ethCost = 0.5 ether;\r\n        }\r\n      } else {\r\n        bool bf = false;\r\n        if (upgradecardId == 27 || upgradecardId==30 || upgradecardId==36) { \r\n          bf = true;\r\n        }\r\n        if (bf == true) {\r\n          if (existing==1) {\r\n            coinCost = 0;\r\n            ethCost = 0.1 ether;\r\n          } else if (existing==2) {\r\n            coinCost = 0;\r\n            ethCost = 0.1 ether;\r\n          }\r\n        }else{\r\n          if (existing==1) {\r\n            coinCost = coinCost * 10;\r\n          } else if (existing==2) {\r\n            coinCost = coinCost * 100;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (existing ==1) {\r\n        upgradeValue = 9999;\r\n      }else if (existing==2){\r\n        upgradeValue = 99999;\r\n      }\r\n    } else {\r\n      uint8 uflag;\r\n      if (coinCost >0 ) {\r\n        if (upgradeClass ==0 || upgradeClass ==1 || upgradeClass == 3) {\r\n          uflag = 1;\r\n        } else if (upgradeClass==2 || upgradeClass == 4 || upgradeClass==5 || upgradeClass==7) {\r\n          uflag = 2;\r\n        }\r\n      }\r\n   \r\n      if (coinCost>0 && existing>=1) {\r\n        coinCost = getCostForUprade(upgradecardId, existing, 1);\r\n      }\r\n      if (ethCost>0) {\r\n        if (upgradecardId == 2) {\r\n          if (existing>=1) { \r\n            ethCost = SafeMath.mul(ethCost,2);\r\n          } \r\n        } \r\n      } else {\r\n        if ((existing ==1 || existing ==4)) {\r\n          if (ethCost<=0) {                                                                                                                                                                                                                                                                                                                                                                                                                                                 \r\n            ethCost = 0.1 ether;\r\n            coinCost = 0;\r\n        }\r\n      }\r\n    }\r\n      upgradeValue = upgradeInfo[upgradecardId].upgradeValue;\r\n      if (ethCost>0) {\r\n        if (uflag==1) {\r\n          upgradeValue = upgradeInfo[upgradecardId].upgradeValue * 2;\r\n        } else if (uflag==2) {\r\n          upgradeValue = upgradeInfo[upgradecardId].upgradeValue * 4;\r\n        } else {\r\n          if (upgradeClass == 6){\r\n            if (upgradecardId == 27){\r\n              upgradeValue = upgradeInfo[upgradecardId].upgradeValue * 5;\r\n            } else if (upgradecardId == 40) {\r\n              upgradeValue = upgradeInfo[upgradecardId].upgradeValue * 3;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    platCost = SafeMath.mul(ethCost,PLATPrice);\r\n\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPLATPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"existing\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getCostForUprade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"unitDefense\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"upgradeId\",\"type\":\"uint256\"}],\"name\":\"getUpgradeInfo\",\"outputs\":[{\"name\":\"coinCost\",\"type\":\"uint256\"},{\"name\":\"ethCost\",\"type\":\"uint256\"},{\"name\":\"upgradeClass\",\"type\":\"uint256\"},{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"upgradeValue\",\"type\":\"uint256\"},{\"name\":\"platCost\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"unitBattleEthCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"existing\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getCostForCards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"getBattleCardsInfo\",\"outputs\":[{\"name\":\"baseCoinCost\",\"type\":\"uint256\"},{\"name\":\"coinCostIncreaseHalf\",\"type\":\"uint256\"},{\"name\":\"ethCost\",\"type\":\"uint256\"},{\"name\":\"attackValue\",\"type\":\"uint256\"},{\"name\":\"defenseValue\",\"type\":\"uint256\"},{\"name\":\"coinStealingCapacity\",\"type\":\"uint256\"},{\"name\":\"platCost\",\"type\":\"uint256\"},{\"name\":\"unitSellable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"unitStealingCapacity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"productionCardIdRange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"unitAttack\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"unitCoinProduction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeIdRange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"upgradecardId\",\"type\":\"uint256\"},{\"name\":\"existing\",\"type\":\"uint256\"}],\"name\":\"getUpgradeCardsInfo\",\"outputs\":[{\"name\":\"coinCost\",\"type\":\"uint256\"},{\"name\":\"ethCost\",\"type\":\"uint256\"},{\"name\":\"upgradeClass\",\"type\":\"uint256\"},{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"upgradeValue\",\"type\":\"uint256\"},{\"name\":\"platCost\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currNumOfUpgrades\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"defendingPower\",\"type\":\"uint256\"}],\"name\":\"getWeakenedDefensePower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradecardId\",\"type\":\"uint256\"},{\"name\":\"_coinCost\",\"type\":\"uint256\"},{\"name\":\"_ethCost\",\"type\":\"uint256\"},{\"name\":\"_upgradeClass\",\"type\":\"uint256\"},{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_upgradeValue\",\"type\":\"uint256\"}],\"name\":\"CreateUpgradeCards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"existing\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getCostForBattleCards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"existing\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBattleCardInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_baseCoinCost\",\"type\":\"uint256\"},{\"name\":\"_coinCostIncreaseHalf\",\"type\":\"uint256\"},{\"name\":\"_ethCost\",\"type\":\"uint256\"},{\"name\":\"_baseCoinProduction\",\"type\":\"uint256\"},{\"name\":\"_unitSellable\",\"type\":\"bool\"}],\"name\":\"CreateCards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"unitBattlePLATCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getcurrNumOfUpgrades\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"battleCardIdRange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"getCardsInfo\",\"outputs\":[{\"name\":\"baseCoinCost\",\"type\":\"uint256\"},{\"name\":\"coinCostIncreaseHalf\",\"type\":\"uint256\"},{\"name\":\"ethCost\",\"type\":\"uint256\"},{\"name\":\"baseCoinProduction\",\"type\":\"uint256\"},{\"name\":\"platCost\",\"type\":\"uint256\"},{\"name\":\"unitSellable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_baseCoinCost\",\"type\":\"uint256\"},{\"name\":\"_coinCostIncreaseHalf\",\"type\":\"uint256\"},{\"name\":\"_ethCost\",\"type\":\"uint256\"},{\"name\":\"_attackValue\",\"type\":\"uint256\"},{\"name\":\"_defenseValue\",\"type\":\"uint256\"},{\"name\":\"_coinStealingCapacity\",\"type\":\"uint256\"},{\"name\":\"_unitSellable\",\"type\":\"bool\"}],\"name\":\"CreateBattleCards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getcurrNumOfCards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"InitUpgradeCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPLATPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"existing\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getCardInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"unitEthCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currNumOfBattleCards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currNumOfCards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"unitPLATCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"baseCoinCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"coinCostIncreaseHalf\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"baseCoinProduction\",\"type\":\"uint256\"}],\"name\":\"newCard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"baseCoinCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"coinCostIncreaseHalf\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"attackValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"defenseValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"coinStealingCapacity\",\"type\":\"uint256\"}],\"name\":\"newBattleCard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"upgradecardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"coinCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"upgradeClass\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"upgradeValue\",\"type\":\"uint256\"}],\"name\":\"newUpgradeCard\",\"type\":\"event\"}]","ContractName":"GameConfig","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://490a119067f291c23be2ca56189e58c6f11a079349f04f708c6f087ff04af635"}]}