{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// ----------------------------------------------------------------------------\r\n// @Project FunkeyCoin (FNK)\r\n// @Creator FunkeyRyu\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// @Name SafeMath\r\n// @Desc Math operations with safety checks that throw on error\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n// ----------------------------------------------------------------------------\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @Name Lockable\r\n// @Desc Admin Lock\r\n// ----------------------------------------------------------------------------\r\ncontract Lockable {\r\n    bool public    m_bIsLock;\r\n    \r\n    // Admin Address\r\n    address public m_aOwner;\r\n    mapping( address => bool ) public m_mLockAddress;\r\n\r\n    event Locked(address a_aLockAddress, bool a_bStatus);\r\n\r\n    modifier IsOwner {\r\n        require(m_aOwner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier CheckAllLock {\r\n        require(!m_bIsLock);\r\n        _;\r\n    }\r\n\r\n    modifier CheckLockAddress {\r\n        if (m_mLockAddress[msg.sender]) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        m_bIsLock   = true;\r\n        m_aOwner    = msg.sender;\r\n    }\r\n\r\n    function SetAllLock(bool a_bStatus)\r\n    public\r\n    IsOwner\r\n    {\r\n        m_bIsLock = a_bStatus;\r\n    }\r\n\r\n    // Lock Address\r\n    function SetLockAddress(address a_aLockAddress, bool a_bStatus)\r\n    external\r\n    IsOwner\r\n    {\r\n        require(m_aOwner != a_aLockAddress);\r\n\r\n        m_mLockAddress[a_aLockAddress] = a_bStatus;\r\n        \r\n        emit Locked(a_aLockAddress, a_bStatus);\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @Name FunkeyCoinBase\r\n// @Desc ERC20-based token\r\n// ----------------------------------------------------------------------------\r\ncontract FunkeyCoinBase is ERC20Interface, Lockable {\r\n    using SafeMath for uint;\r\n\r\n    uint                                                _totalSupply;\r\n    mapping(address => uint256)                         _balances;\r\n    mapping(address => mapping(address => uint256))     _allowed;\r\n\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return _balances[tokenOwner];\r\n    }\r\n\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return _allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint tokens) \r\n    CheckAllLock\r\n    CheckLockAddress\r\n    public returns (bool success) {\r\n        require( _balances[msg.sender] >= tokens);\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].sub(tokens);\r\n        _balances[to] = _balances[to].add(tokens);\r\n\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint tokens)\r\n    CheckAllLock\r\n    CheckLockAddress\r\n    public returns (bool success) {\r\n        _allowed[msg.sender][spender] = tokens;\r\n\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint tokens)\r\n    CheckAllLock\r\n    CheckLockAddress\r\n    public returns (bool success) {\r\n        require(tokens <= _balances[from]);\r\n        require(tokens <= _allowed[from][msg.sender]);\r\n        \r\n        _balances[from] = _balances[from].sub(tokens);\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(tokens);\r\n        _balances[to] = _balances[to].add(tokens);\r\n\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// @Name FunkeyCoin (FNK)\r\n// @Desc Funkey Admin Ryu\r\n// ----------------------------------------------------------------------------\r\ncontract FunkeyCoin is FunkeyCoinBase {\r\n    string  public   name;\r\n    uint8   public   decimals;\r\n    string  public   symbol;\r\n\r\n    event EventBurnCoin(address a_burnAddress, uint a_amount);\r\n\r\n    constructor (uint a_totalSupply, string a_tokenName, string a_tokenSymbol, uint8 a_decimals) public {\r\n        m_aOwner = msg.sender;\r\n        \r\n        _totalSupply = a_totalSupply;\r\n        _balances[msg.sender] = a_totalSupply;\r\n\r\n        name = a_tokenName;\r\n        symbol = a_tokenSymbol;\r\n        decimals = a_decimals;\r\n    }\r\n\r\n    function burnCoin(uint a_coinAmount)\r\n    external\r\n    IsOwner\r\n    {\r\n        require(_balances[msg.sender] >= a_coinAmount);\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].sub(a_coinAmount);\r\n        _totalSupply = _totalSupply.sub(a_coinAmount);\r\n\r\n        emit EventBurnCoin(msg.sender, a_coinAmount);\r\n    }\r\n\r\n    // Allocate tokens to the users\r\n    function allocateCoins(address[] a_receiver, uint[] a_values)\r\n    external\r\n    IsOwner{\r\n        require(a_receiver.length == a_values.length);\r\n\r\n        uint    receiverLength = a_receiver.length;\r\n        address to;\r\n        uint    value;\r\n\r\n        for(uint ui = 0; ui < receiverLength; ui++){\r\n            to      = a_receiver[ui];\r\n            value   = a_values[ui].mul(10**uint(decimals));\r\n\r\n            require(_balances[msg.sender] >= value);\r\n\r\n            _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n            _balances[to] = _balances[to].add(value);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_aOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a_coinAmount\",\"type\":\"uint256\"}],\"name\":\"burnCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a_aLockAddress\",\"type\":\"address\"},{\"name\":\"a_bStatus\",\"type\":\"bool\"}],\"name\":\"SetLockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"m_mLockAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a_receiver\",\"type\":\"address[]\"},{\"name\":\"a_values\",\"type\":\"uint256[]\"}],\"name\":\"allocateCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a_bStatus\",\"type\":\"bool\"}],\"name\":\"SetAllLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_bIsLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"a_totalSupply\",\"type\":\"uint256\"},{\"name\":\"a_tokenName\",\"type\":\"string\"},{\"name\":\"a_tokenSymbol\",\"type\":\"string\"},{\"name\":\"a_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"a_burnAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"a_amount\",\"type\":\"uint256\"}],\"name\":\"EventBurnCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"a_aLockAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"a_bStatus\",\"type\":\"bool\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FunkeyCoin","CompilerVersion":"v0.4.24-nightly.2018.4.23+commit.c7ee2ca0","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000409f9cbc7c4a04c220000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a46756e6b6579436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003464e4b0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://ad627d757eef4145586962748058c5dfbfd5b2b66ad27e72da5add032ec1f673"}]}