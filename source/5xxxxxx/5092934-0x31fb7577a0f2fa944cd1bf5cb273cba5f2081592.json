{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract RedEnvelope {\r\n\r\n    struct EnvelopeType {\r\n        uint256 maxNumber;\r\n        uint256 feeRate;\r\n    }\r\n    \r\n    struct Envelope {\r\n        address maker;\r\n        address arbiter;\r\n        uint256 envelopeTypeId;\r\n        uint256 minValue;\r\n        uint256 remainingValue;\r\n        uint256 remainingNumber;\r\n        uint256 willExpireAfter;\r\n        bool random;\r\n        mapping(address => bool) tooks;\r\n    }\r\n\r\n    struct Settings {\r\n        address arbiter;\r\n        uint256 minValue;\r\n    }\r\n\r\n    event Made (\r\n        address indexed maker,\r\n        address indexed arbiter,\r\n        uint256 indexed envelopeId,\r\n        uint256 envelopeTypeId,\r\n        uint256 minValue,\r\n        uint256 total,\r\n        uint256 quantity,\r\n        uint256 willExpireAfter,\r\n        uint256 minedAt,\r\n        uint256 random\r\n    );\r\n\r\n    event Took (\r\n        address indexed taker,\r\n        uint256 indexed envelopeId,\r\n        uint256 value,\r\n        uint256 minedAt\r\n    );\r\n\r\n    event Redeemed(\r\n        address indexed maker,\r\n        uint256 indexed envelopeId,\r\n        uint256 value,\r\n        uint256 minedAt\r\n    );\r\n\r\n    Settings public settings;\r\n    address public owner;\r\n    uint256 public balanceOfEnvelopes;\r\n    \r\n    mapping (address => uint256) public envelopeCounts;\r\n    mapping (uint256 => EnvelopeType) public envelopeTypes;\r\n    mapping (uint256 => Envelope) public envelopes;\r\n\r\n    modifier onlyOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function random() view private returns (uint256) {\r\n        // factor = ceil(2 ^ 256 / 100)\r\n        uint256 factor = 1157920892373161954235709850086879078532699846656405640394575840079131296399;\r\n        bytes32 blockHash = block.blockhash(block.number - 1);\r\n        return uint256(uint256(blockHash) / factor);\r\n    }\r\n\r\n    function RedEnvelope() public {\r\n        settings = Settings(\r\n            msg.sender,\r\n            2000000000000000 // minValue = 0.002 ETH\r\n        );\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setSettings(address _arbiter, uint256 _minValue) onlyOwner public {\r\n        settings.arbiter = _arbiter;\r\n        settings.minValue = _minValue;\r\n    }\r\n    \r\n    function setOwner(address _owner) onlyOwner public {\r\n        owner = _owner;\r\n    }\r\n\r\n    function () payable public {}\r\n\r\n    /*\r\n     * uint256 _envelopeTypeId\r\n     * uint256[2] _data\r\n     *  [0] - maxNumber\r\n     *  [1] - feeRate\r\n     */\r\n    function setEnvelopeType(uint256 _envelopeTypeId, uint256[2] _data) onlyOwner public {\r\n        envelopeTypes[_envelopeTypeId].maxNumber = _data[0];\r\n        envelopeTypes[_envelopeTypeId].feeRate = _data[1];\r\n    }\r\n\r\n    /*\r\n     * uint256 _envelopeId\r\n     * uint256[3] _data\r\n     *  [0] - envelopeTypeId\r\n     *  [1] - quantity;\r\n     *  [2] - willExpireIn;\r\n     *  [3] - random\r\n     */\r\n    function make(uint256 _envelopeId, uint256[4] _data) payable external {\r\n        uint256 count = envelopeCounts[msg.sender] + 1;\r\n        if (uint256(keccak256(msg.sender, count)) != _envelopeId) { // 错误的envelopeId\r\n            revert();\r\n        }\r\n        EnvelopeType memory envelopeType = envelopeTypes[_data[0]];\r\n        if (envelopeType.maxNumber < _data[1]) { // quantity过大\r\n            revert();\r\n        }\r\n        uint256 total = ( msg.value * 1000 ) / ( envelopeType.feeRate + 1000 );\r\n        if (total / _data[1] < settings.minValue) { // value过小\r\n            revert();\r\n        }\r\n        Envelope memory envelope = Envelope(\r\n            msg.sender,                     // maker\r\n            settings.arbiter,               // arbiter\r\n            _data[0],                       // envelopeTypeId\r\n            settings.minValue,              // minValue\r\n            total,                          // remainingValue\r\n            _data[1],                       // remainingNumber\r\n            block.timestamp + _data[2],     // willExpireAfter\r\n            _data[3] > 0                    // random\r\n        );\r\n        \r\n        envelopes[_envelopeId] = envelope;\r\n        balanceOfEnvelopes += total;\r\n        envelopeCounts[msg.sender] = count;\r\n\r\n        Made(\r\n            envelope.maker,\r\n            envelope.arbiter,\r\n            _envelopeId,\r\n            envelope.envelopeTypeId,\r\n            envelope.minValue,\r\n            envelope.remainingValue,\r\n            envelope.remainingNumber,\r\n            envelope.willExpireAfter,\r\n            block.timestamp,\r\n            envelope.random ? 1 : 0\r\n        );\r\n    }\r\n\r\n    /*\r\n     * uint256 _envelopeId\r\n     * uint256[4] _data\r\n     *  [0] - willExpireAfter\r\n     *  [1] - v\r\n     *  [2] - r\r\n     *  [3] - s\r\n     */\r\n    function take(uint256 _envelopeId, uint256[4] _data) external {\r\n        // 验证红包\r\n        Envelope storage envelope = envelopes[_envelopeId];\r\n        if (envelope.willExpireAfter < block.timestamp) { // 红包过期\r\n            revert();\r\n        }\r\n        if (envelope.remainingNumber == 0) { // 抢完了\r\n            revert();\r\n        }\r\n        if (envelope.tooks[msg.sender]) { // 抢过了\r\n            revert();\r\n        }\r\n        // 验证arbiter的签名\r\n        if (_data[0] < block.timestamp) { // 签名过期\r\n            revert();\r\n        }\r\n        if (envelope.arbiter != ecrecover(keccak256(_envelopeId, _data[0], msg.sender), uint8(_data[1]), bytes32(_data[2]), bytes32(_data[3]))) { // 签名错误\r\n            revert();\r\n        }\r\n        \r\n        uint256 value = 0;\r\n        if (!envelope.random) {\r\n            value = envelope.remainingValue / envelope.remainingNumber;\r\n        } else {\r\n            if (envelope.remainingNumber == 1) {\r\n                value = envelope.remainingValue;\r\n            } else {\r\n                uint256 maxValue = envelope.remainingValue - (envelope.remainingNumber - 1) * envelope.minValue;\r\n                uint256 avgValue = envelope.remainingValue / envelope.remainingNumber * 2;\r\n                value = avgValue < maxValue ? avgValue * random() / 100 : maxValue * random() / 100;\r\n                value = value < envelope.minValue ? envelope.minValue : value;\r\n            }\r\n        }\r\n\r\n        envelope.remainingValue -= value;\r\n        envelope.remainingNumber -= 1;\r\n        envelope.tooks[msg.sender] = true;\r\n        balanceOfEnvelopes -= value;\r\n        msg.sender.transfer(value);\r\n\r\n        Took(\r\n            msg.sender,\r\n            _envelopeId,\r\n            value,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /*\r\n     * uint256 _envelopeId\r\n     */\r\n    function redeem(uint256 _envelopeId) external {\r\n        Envelope storage envelope = envelopes[_envelopeId];\r\n        if (envelope.willExpireAfter >= block.timestamp) { // 尚未失效\r\n            revert();\r\n        }\r\n        if (envelope.remainingValue == 0) { // 没钱\r\n            revert();\r\n        }\r\n        if (envelope.maker != msg.sender) { // 不是maker\r\n            revert();\r\n        }\r\n\r\n        uint256 value = envelope.remainingValue;\r\n        envelope.remainingValue = 0;\r\n        envelope.remainingNumber = 0;\r\n        balanceOfEnvelopes -= value;\r\n        msg.sender.transfer(value);\r\n\r\n        Redeemed(\r\n            msg.sender,\r\n            _envelopeId,\r\n            value,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function getPaid(uint256 amount) onlyOwner external {\r\n        uint256 maxAmount = this.balance - balanceOfEnvelopes;\r\n        msg.sender.transfer(amount < maxAmount ? amount : maxAmount);\r\n    }\r\n\r\n    function sayGoodBye() onlyOwner external {\r\n        selfdestruct(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_envelopeId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"uint256[4]\"}],\"name\":\"make\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arbiter\",\"type\":\"address\"},{\"name\":\"_minValue\",\"type\":\"uint256\"}],\"name\":\"setSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"envelopeTypes\",\"outputs\":[{\"name\":\"maxNumber\",\"type\":\"uint256\"},{\"name\":\"feeRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"envelopes\",\"outputs\":[{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"arbiter\",\"type\":\"address\"},{\"name\":\"envelopeTypeId\",\"type\":\"uint256\"},{\"name\":\"minValue\",\"type\":\"uint256\"},{\"name\":\"remainingValue\",\"type\":\"uint256\"},{\"name\":\"remainingNumber\",\"type\":\"uint256\"},{\"name\":\"willExpireAfter\",\"type\":\"uint256\"},{\"name\":\"random\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_envelopeTypeId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"uint256[2]\"}],\"name\":\"setEnvelopeType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sayGoodBye\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPaid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"envelopeCounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_envelopeId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"uint256[4]\"}],\"name\":\"take\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfEnvelopes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_envelopeId\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"name\":\"arbiter\",\"type\":\"address\"},{\"name\":\"minValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"arbiter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"envelopeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"envelopeTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"willExpireAfter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"random\",\"type\":\"uint256\"}],\"name\":\"Made\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"envelopeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minedAt\",\"type\":\"uint256\"}],\"name\":\"Took\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"envelopeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minedAt\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"}]","ContractName":"RedEnvelope","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://21203bb25b5b9757f6f4a39da7d2c163c6e4326de562b28461d84520269ba0d3"}]}