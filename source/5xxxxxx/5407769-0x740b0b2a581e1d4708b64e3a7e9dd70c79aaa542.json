{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n// ----------------------------------------------------------------------------\r\n// BLU ICO contract\r\n//\r\n// BLU mainnet token address : 0x362a95215564d895f27021a7d7314629db2e1649\r\n// RATE = 4000 => 1 ETH = 4000 BLU\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe math\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Ownership contract\r\n// _newOwner is address of new owner\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    \r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() public {\r\n        owner = 0x0567cB7c5A688401Aab87093058754E096C4d37E;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // transfer Ownership to other address\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0x0));\r\n        emit OwnershipTransferred(owner,_newOwner);\r\n        owner = _newOwner;\r\n    }\r\n    \r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// BlupassToken interface\r\n// ----------------------------------------------------------------------------\r\ncontract BlupassToken {\r\n    \r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    \r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Blupass ICO smart contract\r\n// ----------------------------------------------------------------------------\r\ncontract BlupassICO is Owned {\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    // public Variables\r\n    uint256 public totalRaised; //eth in wei\r\n    uint256 public totalDistributed; //tokens distributed\r\n    uint256 public RATE; // RATE of the BLU\r\n    BlupassToken public BLU; // BLU token address\r\n    bool public isStopped = false; // ICO start/stop\r\n    \r\n    mapping(address => bool) whitelist; // whitelisting for KYC verified users\r\n\r\n    // events for log\r\n    event LogWhiteListed(address _addr);\r\n    event LogBlackListed(address _addr);\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFunderInitialized(address _creator);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n    \r\n    // To determine whether the ICO is running or stopped\r\n    modifier onlyWhenRunning {\r\n        require(!isStopped);\r\n        _;\r\n    }\r\n    \r\n    // To determine whether the user is whitelisted \r\n    modifier onlyifWhiteListed {\r\n        require(whitelist[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // BlupassICO constructor\r\n    // _addressOfToken is the token totalDistributed\r\n    // ----------------------------------------------------------------------------\r\n    function BlupassICO (BlupassToken _addressOfToken) public {\r\n        require(_addressOfToken != address(0)); // should have valid address\r\n        RATE = 4000;\r\n        BLU = BlupassToken(_addressOfToken);\r\n        emit LogFunderInitialized(owner);\r\n    }\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Function to handle eth transfers\r\n    // It invokes when someone sends ETH to this contract address.\r\n    // Requires enough gas for the execution otherwise it'll throw out of gas error.\r\n    // tokens are transferred to user\r\n    // ETH are transferred to current owner\r\n    // minimum 1 ETH investment\r\n    // ----------------------------------------------------------------------------\r\n    function() public payable {\r\n        contribute();\r\n    }\r\n\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Acceptes ETH and send equivalent BLU with bonus if any.\r\n    // NOTE: Add user to whitelist by invoking addToWhiteList() function.\r\n    // Only whitelisted users can buy tokens.\r\n    // For Non-whitelisted/Blacklisted users transaction will be reverted. \r\n    // ----------------------------------------------------------------------------\r\n    function contribute() onlyWhenRunning onlyifWhiteListed public payable {\r\n        \r\n        require(msg.value >= 1 ether); // min 1 ETH investment\r\n        \r\n        uint256 tokenBought; // Variable to store amount of tokens bought\r\n        uint256 bonus; // Variable to store bonus if any\r\n\r\n        totalRaised = totalRaised.add(msg.value); // Save the total eth totalRaised (in wei)\r\n        tokenBought = msg.value.mul(RATE); // Token calculation according to RATE\r\n        \r\n        // Bonus for  5+ ETH investment\r\n        \r\n        // 20 % bonus for 5 to 9 ETH investment\r\n        if (msg.value >= 5 ether && msg.value <= 9 ether) {\r\n            bonus = (tokenBought.mul(20)).div(100); // 20 % bonus\r\n            tokenBought = tokenBought.add(bonus);\r\n        } \r\n        \r\n        // 40 % bonus for 10+ ETH investment\r\n        if (msg.value >= 10 ether) {\r\n            bonus = (tokenBought.mul(40)).div(100); // 40 % bonus\r\n            tokenBought = tokenBought.add(bonus);\r\n        }\r\n\r\n        // this smart contract should have enough tokens to distribute\r\n        require(BLU.balanceOf(this) >= tokenBought);\r\n        \r\n        totalDistributed = totalDistributed.add(tokenBought); //Save to total tokens distributed\r\n        BLU.transfer(msg.sender,tokenBought); //Send Tokens to user\r\n        owner.transfer(msg.value); // Send ETH to owner\r\n        \r\n        //LOGS\r\n        emit LogContributorsPayout(msg.sender,tokenBought); // Log investor paid event\r\n        emit LogBeneficiaryPaid(owner); // Log owner paid event\r\n        emit LogFundingReceived(msg.sender, msg.value, totalRaised); // Log funding event\r\n    }\r\n\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // function to whitelist user if KYC verified\r\n    // returns true if whitelisting is successful else returns false\r\n    // ----------------------------------------------------------------------------\r\n    function addToWhiteList(address _userAddress) onlyOwner public returns(bool) {\r\n        require(_userAddress != address(0)); // user address must be valid\r\n        // if not already in the whitelist\r\n        if (!whitelist[_userAddress]) {\r\n            whitelist[_userAddress] = true;\r\n            emit LogWhiteListed(_userAddress); // Log whitelist event\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // function to remove user from whitelist\r\n    // ----------------------------------------------------------------------------\r\n    function removeFromWhiteList(address _userAddress) onlyOwner public returns(bool) {\r\n        require(_userAddress != address(0)); // user address must be valid\r\n        // if in the whitelist\r\n        if(whitelist[_userAddress]) {\r\n           whitelist[_userAddress] = false; \r\n           emit LogBlackListed(_userAddress); // Log blacklist event\r\n           return true;\r\n        } else {\r\n            return false;\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // function to check if user is whitelisted\r\n    // ----------------------------------------------------------------------------\r\n    function checkIfWhiteListed(address _userAddress) view public returns(bool) {\r\n        return whitelist[_userAddress];\r\n    }\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // function to stop the ICO\r\n    // ----------------------------------------------------------------------------\r\n    function stopICO() onlyOwner public {\r\n        isStopped = true;\r\n    }\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // function to resume the ICO\r\n    // ----------------------------------------------------------------------------\r\n    function resumeICO() onlyOwner public {\r\n        isStopped = false;\r\n    }\r\n\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Function to claim any token stuck on contract\r\n    // ----------------------------------------------------------------------------\r\n    function claimTokens() onlyOwner public {\r\n        uint256 remainder = BLU.balanceOf(this); //Check remainder tokens\r\n        BLU.transfer(owner,remainder); //Transfer tokens to owner\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"checkIfWhiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BLU\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressOfToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"LogWhiteListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"LogBlackListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BlupassICO","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000362a95215564d895f27021a7d7314629db2e1649","Library":"","SwarmSource":"bzzr://36a7297a3a7b190dac8f2ec4c59a106bde4a302d90d82c74d657ea0eef28f560"}]}