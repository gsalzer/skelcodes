{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC721 interface\r\n * @dev see https://github.com/ethereum/eips/issues/721\r\n */\r\ncontract ERC721 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\n/**\r\n * @title ERC721Token\r\n * Generic implementation for the required functionality of the ERC721 standard\r\n */\r\ncontract ERC721Token is ERC721 {\r\n  using SafeMath for uint256;\r\n\r\n  // Total amount of tokens\r\n  uint256 private totalTokens;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) private tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) private tokenApprovals;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) private ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) private ownedTokensIndex;\r\n\r\n  /**\r\n  * @dev Guarantees msg.sender is owner of the given token\r\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n  */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the total amount of tokens stored by the contract\r\n  * @return uint256 representing the total amount of tokens\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalTokens;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address\r\n  * @param _owner address to query the balance of\r\n  * @return uint256 representing the amount owned by the passed address\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return ownedTokens[_owner].length;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the list of tokens owned by a given address\r\n  * @param _owner address to query the tokens of\r\n  * @return uint256[] representing the list of tokens owned by the passed address\r\n  */\r\n  function tokensOf(address _owner) public view returns (uint256[]) {\r\n    return ownedTokens[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the owner of the specified token ID\r\n  * @param _tokenId uint256 ID of the token to query the owner of\r\n  * @return owner address currently marked as the owner of the given token ID\r\n  */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address to take ownership of a given token ID\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved to take ownership of the given token ID\r\n   */\r\n  function approvedFor(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfers the ownership of a given token ID to another address\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Approves another address to claim for the ownership of the given token ID\r\n  * @param _to address to be approved for the given token ID\r\n  * @param _tokenId uint256 ID of the token to be approved\r\n  */\r\n  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Claims the ownership of a given token ID\r\n  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\r\n  */\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    require(isApprovedFor(msg.sender, _tokenId));\r\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Mint token function\r\n  * @param _to The address that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addToken(_to, _tokenId);\r\n    Transfer(0x0, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Burns a specific token\r\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\r\n    if (approvedFor(_tokenId) != 0) {\r\n      clearApproval(msg.sender, _tokenId);\r\n    }\r\n    removeToken(msg.sender, _tokenId);\r\n    Transfer(msg.sender, 0x0, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether the msg.sender is approved for the given token ID or not\r\n   * This function is not private so it can be extended in further implementations like the operatable ERC721\r\n   * @param _owner address of the owner to query the approval of\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return bool whether the msg.sender is approved for the given token ID or not\r\n   */\r\n  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\r\n    return approvedFor(_tokenId) == _owner;\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\r\n  * @param _from address which you want to send tokens from\r\n  * @param _to address which you want to transfer the token to\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    require(_to != ownerOf(_tokenId));\r\n    require(ownerOf(_tokenId) == _from);\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeToken(_from, _tokenId);\r\n    addToken(_to, _tokenId);\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval of a given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApproval(address _owner, uint256 _tokenId) private {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    tokenApprovals[_tokenId] = 0;\r\n    Approval(_owner, 0, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addToken(address _to, uint256 _tokenId) private {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    uint256 length = balanceOf(_to);\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n    totalTokens = totalTokens.add(1);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeToken(address _from, uint256 _tokenId) private {\r\n    require(ownerOf(_tokenId) == _from);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = balanceOf(_from).sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    tokenOwner[_tokenId] = 0;\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n    totalTokens = totalTokens.sub(1);\r\n  }\r\n}\r\n\r\n/**\r\n * @title AccessMint\r\n * @dev Adds grant/revoke functions to the contract.\r\n */\r\ncontract AccessMint is Claimable {\r\n\r\n  // Access for minting new tokens.\r\n  mapping(address => bool) private mintAccess;\r\n\r\n  // Event that is fired when minted.\r\n  event Mint(\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n  // Modifier for accessibility to define new hero types.\r\n  modifier onlyAccessMint {\r\n    require(msg.sender == owner || mintAccess[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  // @dev Grant acess to mint heroes.\r\n  function grantAccessMint(address _address)\r\n    onlyOwner\r\n    public\r\n  {\r\n    mintAccess[_address] = true;\r\n  }\r\n\r\n  // @dev Revoke acess to mint heroes.\r\n  function revokeAccessMint(address _address)\r\n    onlyOwner\r\n    public\r\n  {\r\n    mintAccess[_address] = false;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title The swap contract (Card => reward)\r\n * @dev With this contract, a CryptoSagaCard holder can swap his/her CryptoSagaCard for reward.\r\n *  This contract is intended to be inherited by CryptoSagaCore later.\r\n */\r\ncontract CryptoSagaCardSwap is Ownable {\r\n\r\n  // Card contract.\r\n  address internal cardAddess;\r\n\r\n  // Modifier for accessibility to define new hero types.\r\n  modifier onlyCard {\r\n    require(msg.sender == cardAddess);\r\n    _;\r\n  }\r\n  \r\n  // @dev Set the address of the contract that represents ERC721 Card.\r\n  function setCardContract(address _contractAddress)\r\n    public\r\n    onlyOwner\r\n  {\r\n    cardAddess = _contractAddress;\r\n  }\r\n\r\n  // @dev Convert card into reward.\r\n  //  This should be implemented by CryptoSagaCore later.\r\n  function swapCardForReward(address _by, uint8 _rank)\r\n    onlyCard\r\n    public \r\n    returns (uint256)\r\n  {\r\n    return 0;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title CryptoSaga Card\r\n * @dev ERC721 Token that repesents CryptoSaga's cards.\r\n *  Buy consuming a card, players of CryptoSaga can get a heroe.\r\n */\r\ncontract CryptoSagaCard is ERC721Token, Claimable, AccessMint {\r\n\r\n  string public constant name = \"CryptoSaga Card\";\r\n  string public constant symbol = \"CARD\";\r\n\r\n  // Rank of the token.\r\n  mapping(uint256 => uint8) public tokenIdToRank;\r\n\r\n  // The number of tokens ever minted.\r\n  uint256 public numberOfTokenId;\r\n\r\n  // The converter contract.\r\n  CryptoSagaCardSwap private swapContract;\r\n\r\n  // Event that should be fired when card is converted.\r\n  event CardSwap(address indexed _by, uint256 _tokenId, uint256 _rewardId);\r\n\r\n  // @dev Set the address of the contract that represents CryptoSaga Cards.\r\n  function setCryptoSagaCardSwapContract(address _contractAddress)\r\n    public\r\n    onlyOwner\r\n  {\r\n    swapContract = CryptoSagaCardSwap(_contractAddress);\r\n  }\r\n\r\n  function rankOf(uint256 _tokenId) \r\n    public view\r\n    returns (uint8)\r\n  {\r\n    return tokenIdToRank[_tokenId];\r\n  }\r\n\r\n  // @dev Mint a new card.\r\n  function mint(address _beneficiary, uint256 _amount, uint8 _rank)\r\n    onlyAccessMint\r\n    public\r\n  {\r\n    for (uint256 i = 0; i < _amount; i++) {\r\n      _mint(_beneficiary, numberOfTokenId);\r\n      tokenIdToRank[numberOfTokenId] = _rank;\r\n      numberOfTokenId ++;\r\n    }\r\n  }\r\n\r\n  // @dev Swap this card for reward.\r\n  //  The card will be burnt.\r\n  function swap(uint256 _tokenId)\r\n    onlyOwnerOf(_tokenId)\r\n    public\r\n    returns (uint256)\r\n  {\r\n    require(address(swapContract) != address(0));\r\n\r\n    var _rank = tokenIdToRank[_tokenId];\r\n    var _rewardId = swapContract.swapCardForReward(this, _rank);\r\n    CardSwap(ownerOf(_tokenId), _tokenId, _rewardId);\r\n    _burn(_tokenId);\r\n    return _rewardId;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title The smart contract for the pre-sale.\r\n * @dev Origin Card is an ERC20 token.\r\n */\r\ncontract Presale is Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  // Eth will be sent to this wallet.\r\n  address public wallet;\r\n\r\n  // The token contract.\r\n  CryptoSagaCard public cardContract;\r\n\r\n  // Start and end timestamps where investments are allowed (both inclusive).\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // Price for a card in wei.\r\n  uint256 public price;\r\n\r\n  // Amount of card sold.\r\n  uint256 public soldCards;\r\n\r\n  // Increase of price per transaction.\r\n  uint256 public priceIncrease;\r\n\r\n  // Amount of card redeemed.\r\n  uint256 public redeemedCards;\r\n\r\n  // Event that is fired when purchase transaction is made.\r\n  event TokenPurchase(\r\n    address indexed purchaser, \r\n    address indexed beneficiary, \r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  // Event that is fired when redeem tokens.\r\n  event TokenRedeem(\r\n    address indexed beneficiary,\r\n    uint256 amount\r\n  );\r\n\r\n  // Event that is fired when refunding excessive money from ther user.\r\n  event RefundEth(\r\n    address indexed beneficiary,\r\n    uint256 amount\r\n  );\r\n\r\n  // @dev Contructor.\r\n  function Presale(address _wallet, address _cardAddress, uint256 _startTime, uint256 _endTime, uint256 _price, uint256 _priceIncrease)\r\n    public\r\n  {\r\n    require(_endTime >= _startTime);\r\n    require(_price >= 0);\r\n    require(_priceIncrease >= 0);\r\n    require(_wallet != address(0));\r\n    \r\n    wallet = _wallet;\r\n    cardContract = CryptoSagaCard(_cardAddress);\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    price = _price;\r\n    priceIncrease = _priceIncrease;\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase()\r\n    internal view \r\n    returns (bool)\r\n  {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @Notify Redeem limit is 500 cards.\r\n  // @return true if the transaction can redeem tokens\r\n  function validRedeem()\r\n    internal view\r\n    returns (bool)\r\n  {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool notExceedRedeemLimit = redeemedCards < 500;\r\n    return withinPeriod && notExceedRedeemLimit;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded()\r\n    public view \r\n    returns (bool) \r\n  {\r\n    return now > endTime;\r\n  }\r\n\r\n\r\n  // @dev Low level token purchase function.\r\n  function buyTokens(address _beneficiary, uint256 _amount)\r\n    whenNotPaused\r\n    public\r\n    payable\r\n  {\r\n    require(_beneficiary != address(0));\r\n    require(validPurchase());\r\n    require(_amount >= 1 && _amount <= 5);\r\n\r\n    var _priceOfBundle = price.mul(_amount);\r\n\r\n    require(msg.value >= _priceOfBundle);\r\n\r\n    // Increase the price.\r\n    // The price increases only when a transaction is made.\r\n    // Amount of tokens purchase at a transaction won't affect the price.\r\n    price = price.add(priceIncrease);\r\n\r\n    // Mint tokens.\r\n    // Rank 0 means Origin Card.\r\n    cardContract.mint(_beneficiary, _amount, 0);\r\n\r\n    // Add count of tokens sold.\r\n    soldCards += _amount;\r\n\r\n    // Send the raised eth to the wallet.\r\n    wallet.transfer(_priceOfBundle);\r\n\r\n    // Send the exta eth paid by the sender.\r\n    var _extraEthInWei = msg.value.sub(_priceOfBundle);\r\n    if (_extraEthInWei >= 0) {\r\n      msg.sender.transfer(_extraEthInWei);\r\n    }\r\n\r\n    // Fire event.\r\n    TokenPurchase(msg.sender, _beneficiary, msg.value, _amount);\r\n  }\r\n\r\n  // @dev Low level token redeem function.\r\n  function redeemTokens(address _beneficiary)\r\n    onlyOwner\r\n    public\r\n  {\r\n    require(_beneficiary != address(0));\r\n    require(validRedeem());\r\n\r\n    // Mint token.\r\n    // Rank 0 means Origin Card.\r\n    cardContract.mint(_beneficiary, 1, 0);\r\n\r\n    // Add count of tokens redeemed.\r\n    redeemedCards ++;\r\n\r\n    // Fire event.\r\n    TokenRedeem(_beneficiary, 1);\r\n  }\r\n\r\n  // @dev Set price increase of token per transaction.\r\n  //  Note that this will never become below 0, \r\n  //  which means early buyers will always buy tokens at lower price than later buyers.\r\n  function setPriceIncrease(uint256 _priceIncrease)\r\n    onlyOwner\r\n    public\r\n  {\r\n    require(priceIncrease >= 0);\r\n    \r\n    // Set price increase per transaction.\r\n    priceIncrease = _priceIncrease;\r\n  }\r\n\r\n  // @dev Withdraw ether collected.\r\n  function withdrawal()\r\n    onlyOwner\r\n    public\r\n  {\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldCards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeemedCards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cardContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_priceIncrease\",\"type\":\"uint256\"}],\"name\":\"setPriceIncrease\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"redeemTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceIncrease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_cardAddress\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_priceIncrease\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Presale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006ea5f3284ccb1a1878167c640a42b3c9b6e5930b0000000000000000000000001b5242794288b45831ce069c9934a29b89af0197000000000000000000000000000000000000000000000000000000005a710700000000000000000000000000000000000000000000000000000000005abf78400000000000000000000000000000000000000000000000000011c37937e08000000000000000000000000000000000000000000000000000000110d9316ec000","Library":"","SwarmSource":"bzzr://431d42bbb6abf874050b6fc49323ec35951cc0b21c13782b6e59b44a5390ad89"}]}