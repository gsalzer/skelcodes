{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/// @title Contract to bet Ether for on a match of two teams\r\ncontract MatchBetting {\r\n    using SafeMath for uint256;\r\n\r\n    //Represents a team, along with betting information\r\n    struct Team {\r\n        string name;\r\n        mapping(address => uint) bettingContribution;\r\n        mapping(address => uint) ledgerBettingContribution;\r\n        uint totalAmount;\r\n        uint totalParticipants;\r\n    }\r\n    //Represents two teams\r\n    Team[2] public teams;\r\n    // Flag to show if the match is completed\r\n    bool public matchCompleted = false;\r\n    // Flag to show if the contract will stop taking bets.\r\n    bool public stopMatchBetting = false;\r\n    // The minimum amount of ether to bet for the match\r\n    uint public minimumBetAmount;\r\n    // WinIndex represents the state of the match. 4 shows match not started.\r\n    // 4 - Match has not started\r\n    // 0 - team[0] has won\r\n    // 1 - team[1] has won\r\n    // 2 - match is draw\r\n    uint public winIndex = 4;\r\n    // A helper variable to track match easily on the backend web server\r\n    uint matchNumber;\r\n    // Owner of the contract\r\n    address public owner;\r\n    // The jackpot address, to which some of the proceeds goto from the match\r\n    address public jackpotAddress;\r\n\r\n    address[] public betters;\r\n\r\n    // Only the owner will be allowed to excute the function.\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    //@notice Contructor that is used configure team names, the minimum bet amount, owner, jackpot address\r\n    // and match Number\r\n    function MatchBetting(string teamA, string teamB, uint _minimumBetAmount, address sender, address _jackpotAddress, uint _matchNumber) public {\r\n        Team memory newTeamA = Team({\r\n            totalAmount : 0,\r\n            name : teamA,\r\n            totalParticipants : 0\r\n            });\r\n\r\n        Team memory newTeamB = Team({\r\n            totalAmount : 0,\r\n            name : teamB,\r\n            totalParticipants : 0\r\n            });\r\n\r\n        teams[0] = newTeamA;\r\n        teams[1] = newTeamB;\r\n        minimumBetAmount = _minimumBetAmount;\r\n        owner = sender;\r\n        jackpotAddress = _jackpotAddress;\r\n        matchNumber = _matchNumber;\r\n    }\r\n\r\n    //@notice Allows a user to place Bet on the match\r\n    function placeBet(uint index) public payable {\r\n        require(msg.value >= minimumBetAmount);\r\n        require(!stopMatchBetting);\r\n        require(!matchCompleted);\r\n\r\n        if(teams[0].bettingContribution[msg.sender] == 0 && teams[1].bettingContribution[msg.sender] == 0) {\r\n            betters.push(msg.sender);\r\n        }\r\n\r\n        if (teams[index].bettingContribution[msg.sender] == 0) {\r\n            teams[index].totalParticipants = teams[index].totalParticipants.add(1);\r\n        }\r\n        teams[index].bettingContribution[msg.sender] = teams[index].bettingContribution[msg.sender].add(msg.value);\r\n        teams[index].ledgerBettingContribution[msg.sender] = teams[index].ledgerBettingContribution[msg.sender].add(msg.value);\r\n        teams[index].totalAmount = teams[index].totalAmount.add(msg.value);\r\n    }\r\n\r\n    //@notice Set the outcome of the match\r\n    function setMatchOutcome(uint winnerIndex, string teamName) public onlyOwner {\r\n        if (winnerIndex == 0 || winnerIndex == 1) {\r\n            //Match is not draw, double check on name and index so that no mistake is made\r\n            require(compareStrings(teams[winnerIndex].name, teamName));\r\n            uint loosingIndex = (winnerIndex == 0) ? 1 : 0;\r\n            // Send Share to jackpot only when Ether are placed on both the teams\r\n            if (teams[winnerIndex].totalAmount != 0 && teams[loosingIndex].totalAmount != 0) {\r\n                uint jackpotShare = (teams[loosingIndex].totalAmount).div(5);\r\n                jackpotAddress.transfer(jackpotShare);\r\n            }\r\n        }\r\n        winIndex = winnerIndex;\r\n        matchCompleted = true;\r\n    }\r\n\r\n    //@notice Sets the flag stopMatchBetting to true\r\n    function setStopMatchBetting() public onlyOwner{\r\n        stopMatchBetting = true;\r\n    }\r\n\r\n    //@notice Allows the user to get ether he placed on his team, if his team won or draw.\r\n    function getEther() public {\r\n        require(matchCompleted);\r\n\r\n        if (winIndex == 2) {\r\n            uint betOnTeamA = teams[0].bettingContribution[msg.sender];\r\n            uint betOnTeamB = teams[1].bettingContribution[msg.sender];\r\n\r\n            teams[0].bettingContribution[msg.sender] = 0;\r\n            teams[1].bettingContribution[msg.sender] = 0;\r\n\r\n            uint totalBetContribution = betOnTeamA.add(betOnTeamB);\r\n            require(totalBetContribution != 0);\r\n\r\n            msg.sender.transfer(totalBetContribution);\r\n        } else {\r\n            uint loosingIndex = (winIndex == 0) ? 1 : 0;\r\n            // If No Ether were placed on winning Team - Allow claim Ether placed on loosing side.\r\n\r\n            uint betValue;\r\n            if (teams[winIndex].totalAmount == 0) {\r\n                betValue = teams[loosingIndex].bettingContribution[msg.sender];\r\n                require(betValue != 0);\r\n\r\n                teams[loosingIndex].bettingContribution[msg.sender] = 0;\r\n                msg.sender.transfer(betValue);\r\n            } else {\r\n                betValue = teams[winIndex].bettingContribution[msg.sender];\r\n                require(betValue != 0);\r\n\r\n                teams[winIndex].bettingContribution[msg.sender] = 0;\r\n\r\n                uint winTotalAmount = teams[winIndex].totalAmount;\r\n                uint loosingTotalAmount = teams[loosingIndex].totalAmount;\r\n\r\n                if (loosingTotalAmount == 0) {\r\n                    msg.sender.transfer(betValue);\r\n                } else {\r\n                    //original Bet + (original bet * 80 % of bet on losing side)/bet on winning side\r\n                    uint userTotalShare = betValue;\r\n                    uint bettingShare = betValue.mul(80).div(100).mul(loosingTotalAmount).div(winTotalAmount);\r\n                    userTotalShare = userTotalShare.add(bettingShare);\r\n\r\n                    msg.sender.transfer(userTotalShare);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getBetters() public view returns (address[]) {\r\n        return betters;\r\n    }\r\n\r\n    //@notice get various information about the match and its current state.\r\n    function getMatchInfo() public view returns (string, uint, uint, string, uint, uint, uint, bool, uint, uint, bool) {\r\n        return (teams[0].name, teams[0].totalAmount, teams[0].totalParticipants, teams[1].name,\r\n        teams[1].totalAmount, teams[1].totalParticipants, winIndex, matchCompleted, minimumBetAmount, matchNumber, stopMatchBetting);\r\n    }\r\n\r\n    //@notice Returns users current amount of bet on the match\r\n    function userBetContribution(address userAddress) public view returns (uint, uint) {\r\n        return (teams[0].bettingContribution[userAddress], teams[1].bettingContribution[userAddress]);\r\n    }\r\n\r\n    //@notice Returns how much a user has bet on the match.\r\n    function ledgerUserBetContribution(address userAddress) public view returns (uint, uint) {\r\n        return (teams[0].ledgerBettingContribution[userAddress], teams[1].ledgerBettingContribution[userAddress]);\r\n    }\r\n\r\n    //@notice Private function the helps in comparing strings.\r\n    function compareStrings(string a, string b) private pure returns (bool){\r\n        return keccak256(a) == keccak256(b);\r\n    }\r\n}\r\n\r\ncontract MatchBettingFactory is Ownable {\r\n    // Array of all the matches deployed\r\n    address[] deployedMatches;\r\n    // The address to which some ether is to be transferred\r\n    address public jackpotAddress;\r\n\r\n    //@notice Constructor thats sets up the jackpot address\r\n    function MatchBettingFactory(address _jackpotAddress) public{\r\n        jackpotAddress = _jackpotAddress;\r\n    }\r\n\r\n    //@notice Creates a match with given team names, minimum bet amount and a match number\r\n    function createMatch(string teamA, string teamB, uint _minimumBetAmount, uint _matchNumber) public onlyOwner{\r\n        address matchBetting = new MatchBetting(teamA, teamB, _minimumBetAmount, msg.sender, jackpotAddress, _matchNumber);\r\n        deployedMatches.push(matchBetting);\r\n    }\r\n\r\n    //@notice get a address of all deployed matches\r\n    function getDeployedMatches() public view returns (address[]) {\r\n        return deployedMatches;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"jackpotAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"teamA\",\"type\":\"string\"},{\"name\":\"teamB\",\"type\":\"string\"},{\"name\":\"_minimumBetAmount\",\"type\":\"uint256\"},{\"name\":\"_matchNumber\",\"type\":\"uint256\"}],\"name\":\"createMatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeployedMatches\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_jackpotAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MatchBettingFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000052873aa8dc33d19436b33527342dbf0caa9f8c90","Library":"","SwarmSource":"bzzr://dabf70a444db0572dd3ed06d2bed9255cec91849e07b359d441bc10aa25655ee"}]}