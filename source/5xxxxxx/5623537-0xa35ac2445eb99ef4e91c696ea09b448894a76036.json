{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n\r\n    function Destructible() public payable { }\r\n\r\n    /**\r\n     * @dev Transfers the current balance to the owner and terminates the contract.\r\n     */\r\n    function destroy() onlyOwner public {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function destroyAndSend(address _recipient) onlyOwner public {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\ncontract TrustServiceStorage is Destructible {\r\n\r\n    struct Deal {\r\n        bytes32 dealHash;\r\n        address[] addresses;\r\n    }\r\n\r\n    uint256 dealId = 1;\r\n\r\n    mapping (uint256 => Deal) deals;\r\n\r\n    mapping (uint256 => mapping(address => bool)) signedAddresses;\r\n\r\n    address trust;\r\n\r\n    modifier onlyTrust() {\r\n        require(msg.sender == trust);\r\n        _;\r\n    }\r\n\r\n    function setTrust(address _trust) onlyOwner {\r\n        trust = _trust;\r\n    }\r\n\r\n    function getDealId() onlyTrust returns (uint256) {\r\n        return dealId;\r\n    }\r\n\r\n    function setDealId(uint256 _dealId) onlyTrust {\r\n        dealId = _dealId;\r\n    }\r\n\r\n    function addDeal(uint256 dealId, bytes32 dealHash, address[] addresses) onlyTrust returns (uint256) {\r\n        deals[dealId] = Deal(dealHash, addresses);\r\n    }\r\n\r\n    function getDealHash(uint256 dealId) onlyTrust returns (bytes32) {\r\n        return deals[dealId].dealHash;\r\n    }\r\n\r\n    function getDealAddrCount(uint256 dealId) onlyTrust returns (uint256) {\r\n        return deals[dealId].addresses.length;\r\n    }\r\n\r\n    function getDealAddrAtIndex(uint256 dealId, uint256 index) onlyTrust returns (address)  {\r\n        return deals[dealId].addresses[index];\r\n    }\r\n\r\n    function setSigned(uint256 dealId, address _address) onlyTrust {\r\n        signedAddresses[dealId][_address] = true;\r\n    }\r\n\r\n    function setUnSigned(uint256 dealId, address _address) onlyTrust {\r\n        signedAddresses[dealId][_address] = false;\r\n    }\r\n\r\n    function getSigned(uint256 dealId, address _address) onlyTrust returns (bool) {\r\n        return signedAddresses[dealId][_address];\r\n    }\r\n}\r\n\r\ncontract TrustService is Destructible {\r\n\r\n    TrustServiceStorage trustStorage;\r\n\r\n    ERC20 public feeToken;\r\n    uint256 public fee;\r\n    address public feeSender;\r\n    address public feeRecipient;\r\n\r\n    event DealSaved(uint256 indexed dealId);\r\n\r\n    function setFee(address _feeToken, address _feeSender, address _feeRecipient, uint256 _fee) public onlyOwner {\r\n       require(_feeToken != address(0));\r\n       require(_feeSender != address(0));\r\n       require(_feeRecipient != address(0));\r\n       require(_fee > 0);\r\n       feeToken = ERC20(_feeToken);\r\n       feeSender = _feeSender;\r\n       feeRecipient = _feeRecipient;\r\n       fee = _fee;\r\n    }\r\n\r\n    function clearFee() public onlyOwner {\r\n       fee = 0;\r\n    }\r\n\r\n    function setStorage(address _storageAddress) onlyOwner {\r\n        trustStorage = TrustServiceStorage(_storageAddress);\r\n    }\r\n\r\n    function createDeal(\r\n      bytes32 dealHash,\r\n      address[] addresses\r\n    ) public returns (uint256) {\r\n\r\n        require(fee == 0 || feeToken.transferFrom(feeSender, feeRecipient, fee));\r\n\r\n        uint256 dealId = trustStorage.getDealId();\r\n\r\n        trustStorage.addDeal(dealId, dealHash, addresses);\r\n\r\n        DealSaved(dealId);\r\n\r\n        trustStorage.setDealId(dealId + 1);\r\n\r\n        return dealId;\r\n    }\r\n\r\n    function createAndSignDeal(\r\n      bytes32 dealHash,\r\n      address[] addresses)\r\n    public {\r\n\r\n        uint256 id = createDeal(dealHash, addresses);\r\n        signDeal(id);\r\n    }\r\n\r\n    function readDeal(uint256 dealId) public view returns (\r\n      bytes32 dealHash,\r\n      address[] addresses,\r\n      bool[] signed\r\n    ) {\r\n        dealHash = trustStorage.getDealHash(dealId);\r\n\r\n        uint256 addrCount = trustStorage.getDealAddrCount(dealId);\r\n\r\n        addresses = new address[](addrCount);\r\n\r\n        signed = new bool[](addrCount);\r\n\r\n        for(uint i = 0; i < addrCount; i ++) {\r\n            addresses[i] = trustStorage.getDealAddrAtIndex(dealId, i);\r\n            signed[i] = trustStorage.getSigned(dealId , addresses[i]);\r\n        }\r\n    }\r\n\r\n    function signDeal(uint256 dealId) public {\r\n        trustStorage.setSigned(dealId, msg.sender);\r\n    }\r\n\r\n    function confirmDeal(uint256 dealId, bytes32 dealHash) public constant returns (bool) {\r\n        bytes32 hash = trustStorage.getDealHash(dealId);\r\n\r\n        return hash == dealHash;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"feeSender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dealId\",\"type\":\"uint256\"},{\"name\":\"dealHash\",\"type\":\"bytes32\"}],\"name\":\"confirmDeal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"readDeal\",\"outputs\":[{\"name\":\"dealHash\",\"type\":\"bytes32\"},{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"signed\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_storageAddress\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeToken\",\"type\":\"address\"},{\"name\":\"_feeSender\",\"type\":\"address\"},{\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealHash\",\"type\":\"bytes32\"},{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"createAndSignDeal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"signDeal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealHash\",\"type\":\"bytes32\"},{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"createDeal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"DealSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TrustService","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c78f7ba6fb815e04f4293a240a7411174ba95bd68347cae160cdc38350f0e538"}]}