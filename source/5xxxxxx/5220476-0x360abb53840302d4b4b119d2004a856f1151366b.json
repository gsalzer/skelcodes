{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 _totalSupply);\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n    function ownerOf(uint _tokenId) external view returns (address _owner);\r\n    function approve(address _to, uint _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint _tokenId) external;\r\n    function transfer(address _to, uint _tokenId) external;\r\n    \r\n    // Events\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n    // Optional functions\r\n    // function name() public view returns (string _name);\r\n    // function symbol() public view returns (string _symbol);\r\n    // function tokenOfOwnerByIndex(address _owner, uint _index) external view returns (uint _tokenId);\r\n    // function tokenMetadata(uint _tokenId) public view returns (string _infoUrl);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract AccessControl is Ownable {\r\n    \r\n    bool public paused = false;\r\n    \r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n    \r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n    \r\n    function pause() external onlyOwner whenNotPaused {\r\n        paused = true;\r\n    }\r\n    \r\n    function unpause() external onlyOwner whenPaused {\r\n        paused = false;\r\n    }\r\n    \r\n}\r\n\r\ncontract DetailBase is AccessControl {\r\n    \r\n    event Create(address owner, uint256 detailId, uint256 dna);\r\n\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n\r\n    struct Detail {\r\n        uint256 dna;\r\n        uint256 idParent;\r\n        uint64 releaseTime;\r\n    }\r\n\r\n    Detail[] details;\r\n\r\n    mapping (uint256 => address) public detailIndexToOwner;\r\n    mapping (address => uint256) public ownershipTokenCount;\r\n    mapping (uint256 => address) public detailIndexToApproved;\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        ownershipTokenCount[_to]++;\r\n        detailIndexToOwner[_tokenId] = _to;\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            delete detailIndexToApproved[_tokenId];\r\n        }\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function createDetail(address _owner, uint256 _dna) internal whenNotPaused returns (uint) {\r\n        Detail memory _detail = Detail(_dna, 0, uint64(now));\r\n        uint256 newDetailId = details.push(_detail) - 1;\r\n        require(newDetailId == uint256(uint32(newDetailId)));\r\n        Create(_owner, newDetailId, _detail.dna);\r\n        _transfer(0, _owner, newDetailId);\r\n\r\n        return newDetailId;\r\n    }\r\n\r\n    function getDetail(uint _id) public view returns (uint256, uint256, uint64) {\r\n        return (details[_id].dna, details[_id].idParent, details[_id].releaseTime);\r\n    }\r\n    \r\n}\r\n\r\ncontract AssemblyBase is DetailBase {\r\n        \r\n    struct Assembly {\r\n        uint256 idParent;\r\n        uint256 dna;\r\n        uint64 releaseTime;\r\n        uint64 updateTime;\r\n        uint64 startMiningTime;\r\n        uint64[] spares;\r\n        uint8 countMiningDetail;\r\n        uint8 rang;\r\n    }\r\n    \r\n    uint8[] private rangIndex = [\r\n        3,\r\n        4,\r\n        5,\r\n        6\r\n    ];\r\n    \r\n    Assembly[] assemblys;\r\n    \r\n    mapping (uint256 => address) public assemblIndexToOwner;\r\n    mapping (address => uint256) public ownershipAssemblyCount;\r\n    mapping (uint256 => address) public robotIndexToApproved;\r\n    \r\n    function gatherDetails(uint64[] _arrIdDetails) public whenNotPaused returns (uint) {\r\n        \r\n        require(_arrIdDetails.length == 7);\r\n        \r\n        for (uint i = 0; i < _arrIdDetails.length; i++) {\r\n            _checkDetail(_arrIdDetails[i], uint8(i+1));\r\n        }\r\n        \r\n        Assembly memory _ass = Assembly(0, _makeDna(_arrIdDetails), uint64(now), uint64(now), 0, _arrIdDetails, 0,  _range(_arrIdDetails));\r\n        \r\n        uint256 newAssemblyId = assemblys.push(_ass) - 1;\r\n        \r\n        for (uint j = 0; j < _arrIdDetails.length; j++) {\r\n            details[_arrIdDetails[j]].idParent = newAssemblyId;\r\n        }\r\n        \r\n        assemblIndexToOwner[newAssemblyId] = msg.sender;\r\n        ownershipAssemblyCount[msg.sender]++;\r\n        \r\n        return newAssemblyId;\r\n    }\r\n    \r\n    function changeAssembly(uint _id, uint64[] _index, uint64[] _arrIdReplace) public whenNotPaused {\r\n        require(_index.length == _arrIdReplace.length &&\r\n                assemblIndexToOwner[_id] == msg.sender &&\r\n                assemblys[_id].startMiningTime == 0);\r\n        for (uint i = 0; i < _arrIdReplace.length; i++) {\r\n            _checkDetail(_arrIdReplace[i], uint8(_index[i] + 1));\r\n        }\r\n        \r\n        Assembly storage _assStorage = assemblys[_id];\r\n        \r\n        for (uint j = 0; j < _index.length; j++) {\r\n            details[_assStorage.spares[_index[j]]].idParent = 0;\r\n            _assStorage.spares[_index[j]] = _arrIdReplace[j];\r\n            details[_arrIdReplace[j]].idParent = _id;\r\n        }\r\n        \r\n        _assStorage.dna = _makeDna(_assStorage.spares);\r\n        _assStorage.updateTime = uint64(now);\r\n        _assStorage.rang = _range(_assStorage.spares);\r\n    }\r\n    \r\n    function startMining(uint _id) public whenNotPaused returns(bool) {\r\n        require(assemblIndexToOwner[_id] == msg.sender &&\r\n                assemblys[_id].rang > 0 &&\r\n                assemblys[_id].startMiningTime == 0);\r\n        assemblys[_id].startMiningTime = uint64(now);\r\n        return true;\r\n    }\r\n    \r\n    function getAssembly(uint _id) public view returns (uint256, uint64, uint64, uint64, uint64[], uint8, uint8) {\r\n        return (assemblys[_id].dna,\r\n                assemblys[_id].releaseTime,\r\n                assemblys[_id].updateTime,\r\n                assemblys[_id].startMiningTime,\r\n                assemblys[_id].spares,\r\n                assemblys[_id].countMiningDetail,\r\n                assemblys[_id].rang);\r\n    }\r\n    \r\n    function getAllAssembly(address _owner) public view returns(uint[], uint[], uint[]) {\r\n        uint[] memory resultIndex = new uint[](ownershipAssemblyCount[_owner]);\r\n        uint[] memory resultDna = new uint[](ownershipAssemblyCount[_owner]);\r\n        uint[] memory resultRang = new uint[](ownershipAssemblyCount[_owner]);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < assemblys.length; i++) {\r\n          if (assemblIndexToOwner[i] == _owner) {\r\n            resultIndex[counter] = i; // index\r\n            resultDna[counter] = assemblys[i].dna;\r\n            resultRang[counter] = assemblys[i].rang;\r\n            counter++;\r\n          }\r\n        }\r\n        return (resultIndex, resultDna, resultRang);\r\n    }\r\n    \r\n    function _checkDetail(uint _id, uint8 _mask) internal view {\r\n        require(detailIndexToOwner[_id] == msg.sender\r\n        && details[_id].idParent == 0\r\n        && details[_id].dna / 1000 == _mask);\r\n    }\r\n    \r\n    function _isCanMining(uint64[] memory _arrIdDetails) internal view returns(uint) {\r\n        uint _ch = details[_arrIdDetails[i]].dna % 100;\r\n        for (uint i = 1; i < _arrIdDetails.length; i++) {\r\n            if (_ch != details[_arrIdDetails[i]].dna % 100) {\r\n                return 0;\r\n            }\r\n        }\r\n        return _ch;\r\n    }\r\n    \r\n    function costRecharge(uint _robotId) public view returns(uint) {\r\n        uint8 _rang = assemblys[_robotId].rang;\r\n        if (_rang == 3) {\r\n            return 0.015 ether;\r\n        } else if (_rang == 4) {\r\n            return 0.02 ether;\r\n        } else if (_rang == 5) {\r\n            return 0.025 ether;\r\n        } else if (_rang == 6) {\r\n            return 0.025 ether;\r\n        }\r\n    }\r\n    \r\n    function _range(uint64[] memory _arrIdDetails) internal view returns(uint8) {\r\n        uint8 rang;\r\n        uint _ch = _isCanMining(_arrIdDetails);\r\n        if (_ch == 0) {\r\n            rang = 0;\r\n        } else if (_ch < 29) {\r\n            rang = rangIndex[0];\r\n        } else if (_ch > 28 && _ch < 37) {\r\n            rang = rangIndex[1];\r\n        } else if (_ch > 36 && _ch < 40) {\r\n            rang = rangIndex[2];\r\n        } else if (_ch < 39) {\r\n            rang = rangIndex[3];\r\n        }\r\n        return rang;\r\n    }\r\n    \r\n    function _makeDna(uint64[] memory _arrIdDetails) internal view returns(uint) {\r\n        uint _dna = 0;\r\n        for (uint i = 0; i < _arrIdDetails.length; i++) {\r\n            _dna += details[_arrIdDetails[i]].dna * (10000 ** i);\r\n        }\r\n        return _dna;\r\n    }\r\n    \r\n    function _transferRobot(address _from, address _to, uint256 _robotId) internal {\r\n        ownershipAssemblyCount[_to]++;\r\n        assemblIndexToOwner[_robotId] = _to;\r\n        if (_from != address(0)) {\r\n            ownershipAssemblyCount[_from]--;\r\n            delete robotIndexToApproved[_robotId];\r\n        }\r\n        Transfer(_from, _to, _robotId);\r\n    }\r\n    \r\n}\r\n\r\ncontract BaseContract is AssemblyBase, ERC721 {\r\n    \r\n    using SafeMath for uint;\r\n    address wallet1;\r\n    address wallet2;\r\n    address wallet3;\r\n    address wallet4;\r\n    address wallet5;\r\n    \r\n    string public constant name = \"Robots Crypto\";\r\n    string public constant symbol = \"RC\";\r\n\r\n    uint[] dHead;\r\n    uint[] dHousing;\r\n    uint[] dLeftHand;\r\n    uint[] dRightHand;\r\n    uint[] dPelvic;\r\n    uint[] dLeftLeg;\r\n    uint[] dRightLeg;\r\n    \r\n    uint randNonce = 0;\r\n\r\n    function BaseContract() public {\r\n        Detail memory _detail = Detail(0, 0, 0);\r\n        details.push(_detail);\r\n        Assembly memory _ass = Assembly(0, 0, 0, 0, 0, new uint64[](0), 0, 0);\r\n        assemblys.push(_ass);\r\n    }\r\n\r\n    function transferOnWallet() public payable {\r\n        uint value84 = msg.value.mul(84).div(100);\r\n        uint val79 = msg.value.mul(79).div(100);\r\n        \r\n        wallet1.transfer(msg.value - value84);\r\n        wallet2.transfer(msg.value - val79);\r\n        wallet3.transfer(msg.value - val79);\r\n        wallet4.transfer(msg.value - val79);\r\n        wallet5.transfer(msg.value - val79);\r\n        \r\n    }\r\n    \r\n    function setWallet(address _wall1, address _wall2, address _wall3, address _wall4, address _wall5) public onlyOwner {\r\n        wallet1 = _wall1;\r\n        wallet2 = _wall2;\r\n        wallet3 = _wall3;\r\n        wallet4 = _wall4;\r\n        wallet5 = _wall5;\r\n    }\r\n    \r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return detailIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n    \r\n    function _ownsRobot(address _claimant, uint256 _robotId) internal view returns (bool) {\r\n        return assemblIndexToOwner[_robotId] == _claimant;\r\n    }\r\n    \r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return detailIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        detailIndexToApproved[_tokenId] = _approved;\r\n    }\r\n    \r\n    function _approveRobot(uint256 _robotId, address _approved) internal {\r\n        robotIndexToApproved[_robotId] = _approved;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n    \r\n    function balanceOfRobots(address _owner) public view returns (uint256 count) {\r\n        return ownershipAssemblyCount[_owner];\r\n    }\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n    {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n    \r\n    function transferRobot(\r\n        address _to,\r\n        uint256 _robotId\r\n    )\r\n        external\r\n    {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        _transferRobot(msg.sender, _to, _robotId);\r\n        uint64[] storage spares = assemblys[_robotId].spares;\r\n        for (uint i = 0; i < spares.length; i++) {\r\n            _transfer(msg.sender, _to, spares[i]);\r\n        }\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) external {\r\n        require(_owns(msg.sender, _tokenId));\r\n        _approve(_tokenId, _to);\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n    \r\n    function approveRobot(address _to, uint256 _robotId) external {\r\n        require(_ownsRobot(msg.sender, _robotId));\r\n        _approveRobot(_robotId, _to);\r\n        Approval(msg.sender, _to, _robotId);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        \r\n    {\r\n        require(_to != address(0));\r\n        require(_owns(_from, _tokenId));\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n    \r\n    function transferFromRobot(\r\n        address _from,\r\n        address _to,\r\n        uint256 _robotId\r\n    )\r\n        external\r\n        \r\n    {\r\n        require(_to != address(0));\r\n        require(_ownsRobot(_from, _robotId));\r\n\r\n        _transferRobot(_from, _to, _robotId);\r\n        ownershipTokenCount[_from] -= 7;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return details.length - 1;\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (address owner)\r\n    {\r\n        owner = detailIndexToOwner[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n    \r\n    function ownerOfRobot(uint256 _robotId)\r\n        external\r\n        view\r\n        returns (address owner)\r\n    {\r\n        owner = assemblIndexToOwner[_robotId];\r\n        require(owner != address(0));\r\n    }\r\n\r\n\r\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalDetails = totalSupply();\r\n            uint256 resultIndex = 0;\r\n            uint256 detailId;\r\n\r\n            for (detailId = 1; detailId <= totalDetails; detailId++) {\r\n                if (detailIndexToOwner[detailId] == _owner) {\r\n                    result[resultIndex] = detailId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n    \r\n    modifier canMining(uint _id) {\r\n        if (assemblys[_id].rang == 6) {\r\n            require(assemblys[_id].countMiningDetail < (assemblys[_id].rang - 1));\r\n        } else {\r\n            require(assemblys[_id].countMiningDetail < assemblys[_id].rang);\r\n        }\r\n        _;\r\n      }\r\n    \r\n    function getAllHead() public view returns (uint[]) {\r\n        return dHead;\r\n    }\r\n    \r\n    function getAllHousing() public view returns (uint[]) {\r\n        return dHousing;\r\n    }\r\n    \r\n    function getAllLeftHand() public view returns (uint[]) {\r\n        return dLeftHand;\r\n    }\r\n    \r\n    function getAllRightHand() public view returns (uint[]) {\r\n        return dRightHand;\r\n    }\r\n    \r\n    function getAllPelvic() public view returns (uint[]) {\r\n        return dPelvic;\r\n    }\r\n    \r\n    function getAllLeftLeg() public view returns (uint[]) {\r\n        return dLeftLeg;\r\n    }\r\n    \r\n    function getAllRightLeg() public view returns (uint[]) {\r\n        return dRightLeg;\r\n    }\r\n    \r\n}\r\n\r\ncontract MainContract is BaseContract {\r\n    \r\n    event BuyChestSuccess(uint count);\r\n    \r\n    mapping (address => uint256) public ownershipChestCount;\r\n    \r\n        modifier isMultiplePrice() {\r\n        require((msg.value % 0.1 ether) == 0);\r\n        _;\r\n    }\r\n    \r\n    modifier isMinValue() {\r\n        require(msg.value >= 0.1 ether);\r\n        _;\r\n    }\r\n    \r\n    function addOwnershipChest(address _owner, uint _num) external onlyOwner {\r\n        ownershipChestCount[_owner] += _num;\r\n    }\r\n    \r\n    function getMyChest(address _owner) external view returns(uint) {\r\n        return ownershipChestCount[_owner];\r\n    }\r\n    \r\n    function buyChest() public payable whenNotPaused isMinValue isMultiplePrice {\r\n        transferOnWallet();\r\n        uint tokens = msg.value.div(0.1 ether);\r\n        ownershipChestCount[msg.sender] += tokens;\r\n        BuyChestSuccess(tokens);\r\n    }\r\n    \r\n    \r\n    function getMiningDetail(uint _id) public canMining(_id) whenNotPaused returns(bool) {\r\n        require(assemblIndexToOwner[_id] == msg.sender);\r\n        if (assemblys[_id].startMiningTime + 259200 <= now) {\r\n            if (assemblys[_id].rang == 6) {\r\n                _generateDetail(40);\r\n            } else {\r\n                _generateDetail(28);\r\n            }\r\n            assemblys[_id].startMiningTime = uint64(now);\r\n            assemblys[_id].countMiningDetail++;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function getAllDetails(address _owner) public view returns(uint[], uint[]) {\r\n        uint[] memory resultIndex = new uint[](ownershipTokenCount[_owner] - (ownershipAssemblyCount[_owner] * 7));\r\n        uint[] memory resultDna = new uint[](ownershipTokenCount[_owner] - (ownershipAssemblyCount[_owner] * 7));\r\n        uint counter = 0;\r\n        for (uint i = 0; i < details.length; i++) {\r\n          if (detailIndexToOwner[i] == _owner && details[i].idParent == 0) {\r\n            resultIndex[counter] = i;\r\n            resultDna[counter] = details[i].dna;\r\n            counter++;\r\n          }\r\n        }\r\n        return (resultIndex, resultDna);\r\n    }\r\n    \r\n    function _generateDetail(uint _randLim) internal {\r\n        uint _dna = randMod(7);\r\n            \r\n        uint256 newDetailId = createDetail(msg.sender, (_dna * 1000 + randMod(_randLim)));\r\n                \r\n        if (_dna == 1) {\r\n            dHead.push(newDetailId);\r\n        } else if (_dna == 2) {\r\n            dHousing.push(newDetailId);\r\n        } else if (_dna == 3) {\r\n            dLeftHand.push(newDetailId);\r\n        } else if (_dna == 4) {\r\n            dRightHand.push(newDetailId);\r\n        } else if (_dna == 5) {\r\n            dPelvic.push(newDetailId);\r\n        } else if (_dna == 6) {\r\n            dLeftLeg.push(newDetailId);\r\n        } else if (_dna == 7) {\r\n            dRightLeg.push(newDetailId);\r\n        }\r\n    }\r\n    \r\n    function init(address _owner, uint _color) external onlyOwner {\r\n        \r\n        uint _dna = 1;\r\n        \r\n        for (uint i = 0; i < 7; i++) {\r\n            \r\n            uint256 newDetailId = createDetail(_owner, (_dna * 1000 + _color));\r\n            \r\n            if (_dna == 1) {\r\n                dHead.push(newDetailId);\r\n            } else if (_dna == 2) {\r\n                dHousing.push(newDetailId);\r\n            } else if (_dna == 3) {\r\n                dLeftHand.push(newDetailId);\r\n            } else if (_dna == 4) {\r\n                dRightHand.push(newDetailId);\r\n            } else if (_dna == 5) {\r\n                dPelvic.push(newDetailId);\r\n            } else if (_dna == 6) {\r\n                dLeftLeg.push(newDetailId);\r\n            } else if (_dna == 7) {\r\n                dRightLeg.push(newDetailId);\r\n            }\r\n            _dna++;\r\n        }\r\n    }\r\n    \r\n    function randMod(uint _modulus) internal returns(uint) {\r\n        randNonce++;\r\n        return (uint(keccak256(now, msg.sender, randNonce)) % _modulus) + 1;\r\n    }\r\n    \r\n    function openChest() public whenNotPaused {\r\n        require(ownershipChestCount[msg.sender] >= 1);\r\n        for (uint i = 0; i < 5; i++) {\r\n            _generateDetail(40);\r\n        }\r\n        ownershipChestCount[msg.sender]--;\r\n    }\r\n    \r\n    function open5Chest() public whenNotPaused {\r\n        require(ownershipChestCount[msg.sender] >= 5);\r\n        for (uint i = 0; i < 5; i++) {\r\n            openChest();\r\n        }\r\n    }\r\n    \r\n    function rechargeRobot(uint _robotId) external whenNotPaused payable {\r\n        require(assemblIndexToOwner[_robotId] == msg.sender &&\r\n                msg.value == costRecharge(_robotId));\r\n        if (assemblys[_robotId].rang == 6) {\r\n            require(assemblys[_robotId].countMiningDetail == (assemblys[_robotId].rang - 1));\r\n        } else {\r\n            require(assemblys[_robotId].countMiningDetail == assemblys[_robotId].rang);\r\n        }   \r\n        transferOnWallet();        \r\n        assemblys[_robotId].countMiningDetail = 0;\r\n        assemblys[_robotId].startMiningTime = 0;\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"robotIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"detailIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assemblIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllHead\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllRightHand\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllLeftHand\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownershipChestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_color\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllPelvic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_robotId\",\"type\":\"uint256\"}],\"name\":\"ownerOfRobot\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"startMining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_robotId\",\"type\":\"uint256\"}],\"name\":\"approveRobot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAllAssembly\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getMyChest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arrIdDetails\",\"type\":\"uint64[]\"}],\"name\":\"gatherDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openChest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMiningDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wall1\",\"type\":\"address\"},{\"name\":\"_wall2\",\"type\":\"address\"},{\"name\":\"_wall3\",\"type\":\"address\"},{\"name\":\"_wall4\",\"type\":\"address\"},{\"name\":\"_wall5\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_robotId\",\"type\":\"uint256\"}],\"name\":\"transferRobot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getAssembly\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64[]\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownershipAssemblyCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfRobots\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferOnWallet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_robotId\",\"type\":\"uint256\"}],\"name\":\"transferFromRobot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"open5Chest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_robotId\",\"type\":\"uint256\"}],\"name\":\"costRecharge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyChest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownershipTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_robotId\",\"type\":\"uint256\"}],\"name\":\"rechargeRobot\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllHousing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"detailIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"addOwnershipChest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint64[]\"},{\"name\":\"_arrIdReplace\",\"type\":\"uint64[]\"}],\"name\":\"changeAssembly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllLeftLeg\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAllDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllRightLeg\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"BuyChestSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"detailId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dna\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"}]","ContractName":"MainContract","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://240c50bbd2061417c3d0549a402d6292f72a8995a05a03d4e8352a9a6c8679e6"}]}