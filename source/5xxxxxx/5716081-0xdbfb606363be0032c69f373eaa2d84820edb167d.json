{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n  address public tech;\r\n  \r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  modifier onlyTech() {\r\n    require(msg.sender == tech);\r\n    _;\r\n  }\r\n  \r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n  \r\n  function transferTech(address newTech) public onlyOwner {\r\n    require(newTech != address(0));\r\n    tech = newTech;\r\n  }\r\n}\r\n\r\ncontract Stelz is ERC20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  string public constant name = \"STELZ\";\r\n  string public constant symbol = \"STELZ\";\r\n  uint8 public constant decimals = 5;\r\n  uint256 public constant initial_supply = 300000000 * (10 ** uint256(decimals));\r\n\r\n  mapping (address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n  uint256 wei_price;\r\n  uint256 min_amount;\r\n  enum States {\r\n    Sale,\r\n    Stop\r\n  }\r\n  States public state;\r\n  \r\n  constructor() public {\r\n    owner = msg.sender;\r\n    tech = msg.sender;\r\n    totalSupply_ = initial_supply;\r\n    balances[owner] = initial_supply;\r\n    wei_price = 1754385960; // equal to 0.1usd per stelz\r\n    min_amount = 1754385964912000000; // equal to 1000usd\r\n    state = States.Sale;\r\n    emit Transfer(0x0, owner, initial_supply);\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n  \r\n  function price() public view returns (uint256) {\r\n    return wei_price;\r\n  }\r\n  \r\n  function minAmount() public view returns (uint256) {\r\n    return min_amount;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _balance = balances[msg.sender];\r\n    require(_value <= _balance);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function changePrice(uint256 _new_price) public onlyTech {\r\n    wei_price = _new_price;\r\n  }\r\n  \r\n  function changeMinAmount(uint256 _new_min_amount) public onlyTech {\r\n    min_amount = _new_min_amount;\r\n  }\r\n  \r\n  modifier checkMinAmount(uint256 amount) {\r\n    require(amount >= min_amount);\r\n    _;\r\n  }\r\n  \r\n  modifier requireState(States _requiredState) {\r\n    require(state == _requiredState);\r\n    _;\r\n  }\r\n  \r\n  function changeState(States _newState)\r\n  onlyTech\r\n  public\r\n  {\r\n    state = _newState;\r\n  }\r\n  \r\n  function transferMany(address[] recipients, uint256[] values) public {\r\n    for (uint256 i = 0; i < recipients.length; i++) {\r\n      require(balances[msg.sender] >= values[i]);\r\n      require(recipients[i] != address(0));\r\n      balances[msg.sender] = balances[msg.sender].sub(values[i]);\r\n      balances[recipients[i]] = balances[recipients[i]].add(values[i]);\r\n      emit Transfer(msg.sender, recipients[i], values[i]);\r\n    }\r\n  }\r\n  \r\n  function requestPayout(uint256 _amount)\r\n  onlyOwner\r\n  public\r\n  {\r\n    msg.sender.transfer(_amount);\r\n  }\r\n  \r\n  function() payable\r\n  checkMinAmount(msg.value)\r\n  requireState(States.Sale)\r\n  public\r\n  {\r\n    uint256 _coinIncrease = msg.value.div(wei_price);\r\n    require(balances[owner] >= _coinIncrease);\r\n    balances[owner] = balances[owner].sub(_coinIncrease);\r\n    balances[msg.sender] = balances[msg.sender].add(_coinIncrease);\r\n    emit Transfer(owner, msg.sender, _coinIncrease);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tech\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initial_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newState\",\"type\":\"uint8\"}],\"name\":\"changeState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTech\",\"type\":\"address\"}],\"name\":\"transferTech\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_price\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"transferMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_min_amount\",\"type\":\"uint256\"}],\"name\":\"changeMinAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Stelz","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://70f6f1e3d463e9072985145e8b88255f72510a7570d037d48af44958173c1ebc"}]}