{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\ncontract SafeMath {\r\n    function safeMul(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) internal returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint c = a + b;\r\n        assert(c >= a && c >= b);\r\n        return c;\r\n    }\r\n\r\n    //  function assert(bool assertion) internal {\r\n    //    if (!assertion) throw;\r\n    //  }\r\n}\r\n\r\n\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20Interface {\r\n    // Get the total token supply\r\n    function totalSupply() public constant returns (uint256 totalSupply);\r\n\r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    // this function is required for some DEX functionality\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\ncontract Etx is ERC20Interface {\r\n    uint256 public expirationBlock;\r\n    function isActive(address _owner) public returns (bool activated);\r\n}\r\n\r\n\r\ncontract Ethex is SafeMath {\r\n    address public admin; //the admin address\r\n    address public feeAccount; //the account that will receive fees\r\n    address public etxAddress;\r\n\r\n    uint256 public makeFee; //percentage times (1 ether)\r\n    uint256 public takeFee; //percentage times (1 ether)\r\n    uint256 public lastFreeBlock;\r\n\r\n    mapping (bytes32 => uint256) public sellOrderBalances; //a hash of available order balances holds a number of tokens\r\n    mapping (bytes32 => uint256) public buyOrderBalances; //a hash of available order balances. holds a number of eth\r\n\r\n    event MakeBuyOrder(bytes32 orderHash, address indexed token, uint256 tokenAmount, uint256 weiAmount, address indexed buyer);\r\n\r\n    event MakeSellOrder(bytes32 orderHash, address indexed token, uint256 tokenAmount, uint256 weiAmount, address indexed seller);\r\n\r\n    event CancelBuyOrder(bytes32 orderHash, address indexed token, uint256 tokenAmount, uint256 weiAmount, address indexed buyer);\r\n\r\n    event CancelSellOrder(bytes32 orderHash, address indexed token, uint256 tokenAmount, uint256 weiAmount, address indexed seller);\r\n\r\n    event TakeBuyOrder(bytes32 orderHash, address indexed token, uint256 tokenAmount, uint256 weiAmount, uint256 totalTransactionTokens, address indexed buyer, address indexed seller);\r\n\r\n    event TakeSellOrder(bytes32 orderHash, address indexed token, uint256 tokenAmount, uint256 weiAmount, uint256 totalTransactionWei, address indexed buyer, address indexed seller);\r\n\r\n    function Ethex(address admin_, address feeAccount_, uint256 makeFee_, uint256 takeFee_, address etxAddress_, uint256 _lastFreeBlock) public {\r\n        admin = admin_;\r\n        feeAccount = feeAccount_;\r\n        makeFee = makeFee_;\r\n        takeFee = takeFee_;\r\n        etxAddress = etxAddress_;\r\n        lastFreeBlock = _lastFreeBlock;\r\n    }\r\n\r\n    function() public {\r\n        revert();\r\n    }\r\n\r\n    function changeAdmin(address admin_) public {\r\n        require(msg.sender == admin);\r\n        admin = admin_;\r\n    }\r\n\r\n    function changeETXAddress(address etxAddress_) public {\r\n        require(msg.sender == admin);\r\n        require(block.number > Etx(etxAddress).expirationBlock());\r\n        etxAddress = etxAddress_;\r\n    }\r\n\r\n    function changeLastFreeBlock(uint256 _lastFreeBlock) public {\r\n        require(msg.sender == admin);\r\n        require(_lastFreeBlock > block.number + 100); //announce at least 100 blocks ahead\r\n        lastFreeBlock = _lastFreeBlock;\r\n    }\r\n\r\n    function changeFeeAccount(address feeAccount_) public {\r\n        require(msg.sender == admin);\r\n        feeAccount = feeAccount_;\r\n    }\r\n\r\n    function changeMakeFee(uint256 makeFee_) public {\r\n        require(msg.sender == admin);\r\n        require(makeFee_ < makeFee);\r\n        makeFee = makeFee_;\r\n    }\r\n\r\n    function changeTakeFee(uint256 takeFee_) public {\r\n        require(msg.sender == admin);\r\n        require(takeFee_ < takeFee);\r\n        takeFee = takeFee_;\r\n    }\r\n\r\n    function feeFromTotalCostForAccount(uint256 totalCost, uint256 feeAmount, address account) public constant returns (uint256) {\r\n        if (Etx(etxAddress).isActive(account)) {\r\n            // No fee for active addr.\r\n            return 0;\r\n        }\r\n\r\n        if (block.number <= lastFreeBlock)\r\n        {\r\n            return 0;\r\n        }\r\n\r\n        return feeFromTotalCost(totalCost, feeAmount);\r\n    }\r\n\r\n    function feeFromTotalCost(uint256 totalCost, uint256 feeAmount) public constant returns (uint256) {\r\n\r\n        uint256 cost = safeMul(totalCost, (1 ether)) / safeAdd((1 ether), feeAmount);\r\n\r\n        // Calculate ceil(cost).\r\n        uint256 remainder = safeMul(totalCost, (1 ether)) % safeAdd((1 ether), feeAmount);\r\n        if (remainder != 0) {\r\n            cost = safeAdd(cost, 1);\r\n        }\r\n\r\n        uint256 fee = safeSub(totalCost, cost);\r\n        return fee;\r\n    }\r\n\r\n    function calculateFeeForAccount(uint256 cost, uint256 feeAmount, address account) public constant returns (uint256) {\r\n        if (Etx(etxAddress).isActive(account)) {\r\n            // No fee for vested addr.\r\n            return 0;\r\n        }\r\n\r\n        if (block.number <= lastFreeBlock)\r\n        {\r\n            return 0;\r\n        }\r\n\r\n        return calculateFee(cost, feeAmount);\r\n    }\r\n\r\n    function calculateFee(uint256 cost, uint256 feeAmount) public constant returns (uint256) {\r\n\r\n        uint256 fee = safeMul(cost, feeAmount) / (1 ether);\r\n        return fee;\r\n    }\r\n\r\n    // Makes an offer to trade tokenAmount of ERC20 token, token, for weiAmount of wei.\r\n    function makeSellOrder(address token, uint256 tokenAmount, uint256 weiAmount) public {\r\n        require(tokenAmount != 0);\r\n        require(weiAmount != 0);\r\n\r\n        bytes32 h = sha256(token, tokenAmount, weiAmount, msg.sender);\r\n\r\n\r\n        // Update balance.\r\n        sellOrderBalances[h] = safeAdd(sellOrderBalances[h], tokenAmount);\r\n\r\n        // Check allowance.  -- Done after updating balance bc it makes a call to an untrusted contract.\r\n        require(tokenAmount <= ERC20Interface(token).allowance(msg.sender, this));\r\n\r\n        // Grab the token.\r\n        if (!ERC20Interface(token).transferFrom(msg.sender, this, tokenAmount)) {\r\n            revert();\r\n        }\r\n\r\n\r\n        MakeSellOrder(h, token, tokenAmount, weiAmount, msg.sender);\r\n    }\r\n\r\n    // Makes an offer to trade msg.value wei for tokenAmount of token (an ERC20 token).\r\n    function makeBuyOrder(address token, uint256 tokenAmount) public payable {\r\n        require(tokenAmount != 0);\r\n        require(msg.value != 0);\r\n\r\n        uint256 fee = feeFromTotalCost(msg.value, makeFee);\r\n        uint256 valueNoFee = safeSub(msg.value, fee);\r\n        bytes32 h = sha256(token, tokenAmount, valueNoFee, msg.sender);\r\n\r\n        //put ether in the buyOrderBalances map\r\n        buyOrderBalances[h] = safeAdd(buyOrderBalances[h], msg.value);\r\n\r\n        // Notify all clients.\r\n        MakeBuyOrder(h, token, tokenAmount, valueNoFee, msg.sender);\r\n    }\r\n\r\n\r\n    // Cancels all previous offers by msg.sender to trade tokenAmount of tokens for weiAmount of wei.\r\n    function cancelAllSellOrders(address token, uint256 tokenAmount, uint256 weiAmount) public {\r\n        bytes32 h = sha256(token, tokenAmount, weiAmount, msg.sender);\r\n        uint256 remain = sellOrderBalances[h];\r\n        delete sellOrderBalances[h];\r\n\r\n        ERC20Interface(token).transfer(msg.sender, remain);\r\n\r\n        CancelSellOrder(h, token, tokenAmount, weiAmount, msg.sender);\r\n    }\r\n\r\n    // Cancels any previous offers to trade weiAmount of wei for tokenAmount of tokens. Refunds the wei to sender.\r\n    function cancelAllBuyOrders(address token, uint256 tokenAmount, uint256 weiAmount) public {\r\n        bytes32 h = sha256(token, tokenAmount, weiAmount, msg.sender);\r\n        uint256 remain = buyOrderBalances[h];\r\n        delete buyOrderBalances[h];\r\n\r\n        if (!msg.sender.send(remain)) {\r\n            revert();\r\n        }\r\n\r\n        CancelBuyOrder(h, token, tokenAmount, weiAmount, msg.sender);\r\n    }\r\n\r\n    // Take some (or all) of the ether (minus fees) in the buyOrderBalances hash in exchange for totalTokens tokens.\r\n    function takeBuyOrder(address token, uint256 tokenAmount, uint256 weiAmount, uint256 totalTokens, address buyer) public {\r\n        require(tokenAmount != 0);\r\n        require(weiAmount != 0);\r\n        require(totalTokens != 0);\r\n\r\n        bytes32 h = sha256(token, tokenAmount, weiAmount, buyer);\r\n\r\n        // How many wei for the amount of tokens being sold?\r\n        uint256 transactionWeiAmountNoFee = safeMul(totalTokens, weiAmount) / tokenAmount;\r\n\r\n        // Does the buyer (maker) have enough money in the contract?\r\n        uint256 unvestedMakeFee = calculateFee(transactionWeiAmountNoFee, makeFee);\r\n        uint256 totalTransactionWeiAmount = safeAdd(transactionWeiAmountNoFee, unvestedMakeFee);\r\n        require(buyOrderBalances[h] >= totalTransactionWeiAmount);\r\n\r\n\r\n        // Calculate the actual vested fees.\r\n        uint256 currentTakeFee = calculateFeeForAccount(transactionWeiAmountNoFee, takeFee, msg.sender);\r\n        uint256 currentMakeFee = calculateFeeForAccount(transactionWeiAmountNoFee, makeFee, buyer);\r\n\r\n        // Proceed with transferring balances.\r\n\r\n        // Update our internal accounting.\r\n        buyOrderBalances[h] = safeSub(buyOrderBalances[h], totalTransactionWeiAmount);\r\n\r\n\r\n        // Did the seller send enough tokens?  -- This check is here bc it calls to an untrusted contract.\r\n        require(ERC20Interface(token).allowance(msg.sender, this) >= totalTokens);\r\n\r\n        // Send buyer their tokens and any fee refund.\r\n        if (currentMakeFee < unvestedMakeFee) {// the buyer got a fee discount. Send the refund.\r\n            uint256 refundAmount = safeSub(unvestedMakeFee, currentMakeFee);\r\n            if (!buyer.send(refundAmount)) {\r\n                revert();\r\n            }\r\n        }\r\n        if (!ERC20Interface(token).transferFrom(msg.sender, buyer, totalTokens)) {\r\n            revert();\r\n        }\r\n\r\n        // Grab our fee.\r\n        if (safeAdd(currentTakeFee, currentMakeFee) > 0) {\r\n            if (!feeAccount.send(safeAdd(currentTakeFee, currentMakeFee))) {\r\n                revert();\r\n            }\r\n        }\r\n\r\n        // Send seller the proceeds.\r\n        if (!msg.sender.send(safeSub(transactionWeiAmountNoFee, currentTakeFee))) {\r\n            revert();\r\n        }\r\n\r\n        TakeBuyOrder(h, token, tokenAmount, weiAmount, totalTokens, buyer, msg.sender);\r\n    }\r\n\r\n\r\n    function takeSellOrder(address token, uint256 tokenAmount, uint256 weiAmount, address seller) public payable {\r\n\r\n        require(tokenAmount != 0);\r\n        require(weiAmount != 0);\r\n\r\n        bytes32 h = sha256(token, tokenAmount, weiAmount, seller);\r\n\r\n        // Check that the contract has enough token to satisfy this order.\r\n        uint256 currentTakeFee = feeFromTotalCostForAccount(msg.value, takeFee, msg.sender);\r\n        uint256 transactionWeiAmountNoFee = safeSub(msg.value, currentTakeFee);\r\n        uint256 totalTokens = safeMul(transactionWeiAmountNoFee, tokenAmount) / weiAmount;\r\n        require(sellOrderBalances[h] >= totalTokens);\r\n\r\n        // Calculate total vested fee.\r\n        uint256 currentMakeFee = calculateFeeForAccount(transactionWeiAmountNoFee, makeFee, seller);\r\n        uint256 totalFee = safeAdd(currentMakeFee, currentTakeFee);\r\n\r\n        uint256 makerProceedsAfterFee = safeSub(transactionWeiAmountNoFee, currentMakeFee);\r\n\r\n        // Transfer.\r\n\r\n        // Update internal accounting.\r\n        sellOrderBalances[h] = safeSub(sellOrderBalances[h], totalTokens);\r\n\r\n        // Send buyer the tokens.\r\n        if (!ERC20Interface(token).transfer(msg.sender, totalTokens)) {\r\n            revert();\r\n        }\r\n\r\n        // Take our fee.\r\n        if (totalFee > 0) {\r\n            if (!feeAccount.send(totalFee)) {\r\n                revert();\r\n            }\r\n        }\r\n\r\n        // Send seller the proceeds.\r\n        if (!seller.send(makerProceedsAfterFee)) {\r\n            revert();\r\n        }\r\n\r\n        TakeSellOrder(h, token, tokenAmount, weiAmount, transactionWeiAmountNoFee, msg.sender, seller);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"takeSellOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sellOrderBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"takeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"makeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"makeFee_\",\"type\":\"uint256\"}],\"name\":\"changeMakeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cost\",\"type\":\"uint256\"},{\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"makeBuyOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"buyOrderBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"cancelAllBuyOrders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"makeSellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeAccount_\",\"type\":\"address\"}],\"name\":\"changeFeeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"totalCost\",\"type\":\"uint256\"},{\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"feeFromTotalCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"takeBuyOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lastFreeBlock\",\"type\":\"uint256\"}],\"name\":\"changeLastFreeBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cost\",\"type\":\"uint256\"},{\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calculateFeeForAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etxAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etxAddress_\",\"type\":\"address\"}],\"name\":\"changeETXAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastFreeBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"cancelAllSellOrders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"totalCost\",\"type\":\"uint256\"},{\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"feeFromTotalCostForAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"takeFee_\",\"type\":\"uint256\"}],\"name\":\"changeTakeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"admin_\",\"type\":\"address\"},{\"name\":\"feeAccount_\",\"type\":\"address\"},{\"name\":\"makeFee_\",\"type\":\"uint256\"},{\"name\":\"takeFee_\",\"type\":\"uint256\"},{\"name\":\"etxAddress_\",\"type\":\"address\"},{\"name\":\"_lastFreeBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"MakeBuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"MakeSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"CancelBuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"CancelSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTransactionTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"TakeBuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTransactionWei\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"TakeSellOrder\",\"type\":\"event\"}]","ContractName":"Ethex","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000008016370e643866a88b73342eef763fc2bbcc84000000000000000000000000007d8d7bc3d89386eda8742c1d2162b52a33949200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008e1bc9bf040000000000000000000000000000be8d3261cd699fc5ae124b3f8d38d568fd461b50000000000000000000000000000000000000000000000000000000000989680","Library":"","SwarmSource":"bzzr://2ba3a0f5119ff966af85f63ca51f7f0d60eeb68b78e9d6819e8242b5c04f122c"}]}