{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    hasMintPermission\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/CappedToken.sol\r\n\r\n/**\r\n * @title Capped token\r\n * @dev Mintable token with a token cap.\r\n */\r\ncontract CappedToken is MintableToken {\r\n\r\n  uint256 public cap;\r\n\r\n  constructor(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    onlyOwner\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(totalSupply_.add(_amount) <= cap);\r\n\r\n    return super.mint(_to, _amount);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/GambioToken.sol\r\n\r\ncontract GambioToken is CappedToken {\r\n\r\n\r\n  using SafeMath for uint256;\r\n\r\n  string public name = \"GMB\";\r\n  string public symbol = \"GMB\";\r\n  uint8 public decimals = 18;\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n  event BurnTransferred(address indexed previousBurner, address indexed newBurner);\r\n\r\n  address burnerRole;\r\n\r\n  modifier onlyBurner() {\r\n    require(msg.sender == burnerRole);\r\n    _;\r\n  }\r\n\r\n  constructor(address _burner, uint256 _cap) public CappedToken(_cap) {\r\n    burnerRole = _burner;\r\n  }\r\n\r\n  function transferBurnRole(address newBurner) public onlyBurner {\r\n    require(newBurner != address(0));\r\n    emit BurnTransferred(burnerRole, newBurner);\r\n    burnerRole = newBurner;\r\n  }\r\n\r\n  function burn(uint256 _value) public onlyBurner {\r\n    require(_value <= balances[msg.sender]);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(msg.sender, _value);\r\n    emit Transfer(msg.sender, address(0), _value);\r\n  }\r\n}\r\n\r\n// File: contracts/Crowdsale.sol\r\n\r\ncontract Crowdsale {\r\n\r\n\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  GambioToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  uint256 public rate;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  event TokenPurchase(address indexed beneficiary, uint256 indexed value, uint256 indexed amount, uint256 transactionId);\r\n\r\n  constructor(\r\n    uint256 _startTime,\r\n    uint256 _endTime,\r\n    uint256 _rate,\r\n    address _wallet,\r\n    uint256 _initialWeiRaised,\r\n    uint256 _tokenCap) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_wallet != address(0));\r\n    require(_rate > 0);\r\n    require(_tokenCap > 0);\r\n\r\n    token = new GambioToken(_wallet, _tokenCap);\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    weiRaised = _initialWeiRaised;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/TokenVesting.sol\r\n\r\n/* solium-disable security/no-block-members */\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  event Released(uint256 amount);\r\n  event Revoked();\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  uint256 public cliff;\r\n  uint256 public start;\r\n  uint256 public duration;\r\n\r\n  bool public revocable;\r\n\r\n  mapping (address => uint256) public released;\r\n  mapping (address => bool) public revoked;\r\n\r\n  /**\r\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\r\n   * of the balance will have vested.\r\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n   * @param _start the time (as Unix time) at which point vesting starts \r\n   * @param _duration duration in seconds of the period in which the tokens will vest\r\n   * @param _revocable whether the vesting is revocable or not\r\n   */\r\n  constructor(\r\n    address _beneficiary,\r\n    uint256 _start,\r\n    uint256 _cliff,\r\n    uint256 _duration,\r\n    bool _revocable\r\n  )\r\n    public\r\n  {\r\n    require(_beneficiary != address(0));\r\n    require(_cliff <= _duration);\r\n\r\n    beneficiary = _beneficiary;\r\n    revocable = _revocable;\r\n    duration = _duration;\r\n    cliff = _start.add(_cliff);\r\n    start = _start;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function release(ERC20Basic token) public {\r\n    uint256 unreleased = releasableAmount(token);\r\n\r\n    require(unreleased > 0);\r\n\r\n    released[token] = released[token].add(unreleased);\r\n\r\n    token.safeTransfer(beneficiary, unreleased);\r\n\r\n    emit Released(unreleased);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n   * remain in the contract, the rest are returned to the owner.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function revoke(ERC20Basic token) public onlyOwner {\r\n    require(revocable);\r\n    require(!revoked[token]);\r\n\r\n    uint256 balance = token.balanceOf(this);\r\n\r\n    uint256 unreleased = releasableAmount(token);\r\n    uint256 refund = balance.sub(unreleased);\r\n\r\n    revoked[token] = true;\r\n\r\n    token.safeTransfer(owner, refund);\r\n\r\n    emit Revoked();\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function releasableAmount(ERC20Basic token) public view returns (uint256) {\r\n    return vestedAmount(token).sub(released[token]);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function vestedAmount(ERC20Basic token) public view returns (uint256) {\r\n    uint256 currentBalance = token.balanceOf(this);\r\n    uint256 totalBalance = currentBalance.add(released[token]);\r\n\r\n    if (block.timestamp < cliff) {\r\n      return 0;\r\n    } else if (block.timestamp >= start.add(duration) || revoked[token]) {\r\n      return totalBalance;\r\n    } else {\r\n      return totalBalance.mul(block.timestamp.sub(start)).div(duration);\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/GambioVesting.sol\r\n\r\ncontract GambioVesting is TokenVesting {\r\n\r\n\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public previousRelease;\r\n  uint256 period;\r\n\r\n  constructor(uint256 _period, address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable)\r\n  public\r\n  TokenVesting(_beneficiary, _start, _cliff, _duration, _revocable) {\r\n    //require(period > 0);\r\n\r\n    period = _period;\r\n    previousRelease = now;\r\n  }\r\n\r\n  //overriding release function\r\n  function release(ERC20Basic token) public {\r\n    require(now >= previousRelease.add(period));\r\n\r\n    uint256 unreleased = releasableAmount(token);\r\n\r\n    require(unreleased > 0);\r\n\r\n    released[token] = released[token].add(unreleased);\r\n\r\n    token.safeTransfer(beneficiary, unreleased);\r\n\r\n    previousRelease = now;\r\n\r\n    emit Released(unreleased);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/CappedCrowdsale.sol\r\n\r\ncontract CappedCrowdsale is Crowdsale, Ownable {\r\n\r\n\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public hardCap;\r\n  bool public isFinalized = false;\r\n\r\n  //vesting\r\n  uint256 public vestingTokens;\r\n  uint256 public vestingDuration;\r\n  uint256 public vestingPeriod;\r\n  address public vestingBeneficiary;\r\n  GambioVesting public vesting;\r\n\r\n  event Finalized();\r\n  event FinishMinting();\r\n\r\n  event TokensMinted(\r\n    address indexed beneficiary,\r\n    uint256 indexed amount\r\n  );\r\n\r\n  constructor(uint256 _hardCap, uint256[] _vestingData, address _beneficiary)\r\n  public {\r\n\r\n    require(_vestingData.length == 3);\r\n    require(_hardCap > 0);\r\n    require(_vestingData[0] > 0);\r\n    require(_vestingData[1] > 0);\r\n    require(_vestingData[2] > 0);\r\n    require(_beneficiary != address(0));\r\n\r\n    hardCap = _hardCap;\r\n    vestingTokens = _vestingData[0];\r\n    vestingDuration = _vestingData[1];\r\n    vestingPeriod = _vestingData[2];\r\n    vestingBeneficiary = _beneficiary;\r\n  }\r\n\r\n  /**\r\n     * @dev Must be called after crowdsale ends, to do some extra finalization\r\n     * work. Calls the contract's finalization function.\r\n     */\r\n  function finalize() public onlyOwner {\r\n    require(!isFinalized);\r\n\r\n    vesting = new GambioVesting(vestingPeriod, vestingBeneficiary, now, 0, vestingDuration, false);\r\n\r\n    token.mint(address(vesting), vestingTokens);\r\n\r\n    emit Finalized();\r\n    isFinalized = true;\r\n  }\r\n\r\n  function finishMinting() public onlyOwner {\r\n    require(token.mintingFinished() == false);\r\n    require(isFinalized);\r\n    token.finishMinting();\r\n\r\n    emit FinishMinting();\r\n  }\r\n\r\n  function mint(address beneficiary, uint256 amount) public onlyOwner {\r\n    require(!token.mintingFinished());\r\n    require(isFinalized);\r\n    require(amount > 0);\r\n    require(beneficiary != address(0));\r\n    token.mint(beneficiary, amount);\r\n\r\n    emit TokensMinted(beneficiary, amount);\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    bool capReached = weiRaised >= hardCap;\r\n    return super.hasEnded() || capReached || isFinalized;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/OnlyWhiteListedAddresses.sol\r\n\r\ncontract OnlyWhiteListedAddresses is Ownable {\r\n\r\n\r\n  using SafeMath for uint256;\r\n  address utilityAccount;\r\n  mapping(address => bool) whitelist;\r\n  mapping(address => address) public referrals;\r\n\r\n  modifier onlyOwnerOrUtility() {\r\n    require(msg.sender == owner || msg.sender == utilityAccount);\r\n    _;\r\n  }\r\n\r\n  event WhitelistedAddresses(\r\n    address[] users\r\n  );\r\n\r\n  event ReferralsAdded(\r\n    address[] user,\r\n    address[] referral\r\n  );\r\n\r\n  constructor(address _utilityAccount) public {\r\n    utilityAccount = _utilityAccount;\r\n  }\r\n\r\n  function whitelistAddress(address[] users) public onlyOwnerOrUtility {\r\n    for (uint i = 0; i < users.length; i++) {\r\n      whitelist[users[i]] = true;\r\n    }\r\n    emit WhitelistedAddresses(users);\r\n  }\r\n\r\n  function addAddressReferrals(address[] users, address[] _referrals) public onlyOwnerOrUtility {\r\n    require(users.length == _referrals.length);\r\n    for (uint i = 0; i < users.length; i++) {\r\n      require(isWhiteListedAddress(users[i]));\r\n\r\n      referrals[users[i]] = _referrals[i];\r\n    }\r\n    emit ReferralsAdded(users, _referrals);\r\n  }\r\n\r\n  function isWhiteListedAddress(address addr) public view returns (bool) {\r\n    return whitelist[addr];\r\n  }\r\n}\r\n\r\n// File: contracts/GambioCrowdsale.sol\r\n\r\ncontract GambioCrowdsale is CappedCrowdsale, OnlyWhiteListedAddresses {\r\n  using SafeMath for uint256;\r\n\r\n  struct TokenPurchaseRecord {\r\n    uint256 timestamp;\r\n    uint256 weiAmount;\r\n    address beneficiary;\r\n  }\r\n\r\n  uint256 transactionId = 1;\r\n\r\n  mapping(uint256 => TokenPurchaseRecord) pendingTransactions;\r\n\r\n  mapping(uint256 => bool) completedTransactions;\r\n\r\n  uint256 public referralPercentage;\r\n\r\n  uint256 public individualCap;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param transactionId transaction identifier\r\n   * @param beneficiary who will get the tokens\r\n   * @param timestamp when the token purchase request was made\r\n   * @param weiAmount wei invested\r\n   */\r\n  event TokenPurchaseRequest(\r\n    uint256 indexed transactionId,\r\n    address beneficiary,\r\n    uint256 indexed timestamp,\r\n    uint256 indexed weiAmount,\r\n    uint256 tokensAmount\r\n  );\r\n\r\n  event ReferralTokensSent(\r\n    address indexed beneficiary,\r\n    uint256 indexed tokensAmount,\r\n    uint256 indexed transactionId\r\n  );\r\n\r\n  event BonusTokensSent(\r\n    address indexed beneficiary,\r\n    uint256 indexed tokensAmount,\r\n    uint256 indexed transactionId\r\n  );\r\n\r\n  constructor(\r\n    uint256 _startTime,\r\n    uint256 _endTime,\r\n    uint256 _icoHardCapWei,\r\n    uint256 _referralPercentage,\r\n    uint256 _rate,\r\n    address _wallet,\r\n    uint256 _privateWeiRaised,\r\n    uint256 _individualCap,\r\n    address _utilityAccount,\r\n    uint256 _tokenCap,\r\n    uint256[] _vestingData\r\n  )\r\n  public\r\n  OnlyWhiteListedAddresses(_utilityAccount)\r\n  CappedCrowdsale(_icoHardCapWei, _vestingData, _wallet)\r\n  Crowdsale(_startTime, _endTime, _rate, _wallet, _privateWeiRaised, _tokenCap)\r\n  {\r\n    referralPercentage = _referralPercentage;\r\n    individualCap = _individualCap;\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function() external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(!isFinalized);\r\n    require(beneficiary == msg.sender);\r\n    require(msg.value != 0);\r\n    require(msg.value >= individualCap);\r\n\r\n    uint256 weiAmount = msg.value;\r\n    require(isWhiteListedAddress(beneficiary));\r\n    require(validPurchase(weiAmount));\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    uint256 _transactionId = transactionId;\r\n    uint256 tokensAmount = weiAmount.mul(rate);\r\n\r\n    pendingTransactions[_transactionId] = TokenPurchaseRecord(now, weiAmount, beneficiary);\r\n    transactionId += 1;\r\n\r\n\r\n    emit TokenPurchaseRequest(_transactionId, beneficiary, now, weiAmount, tokensAmount);\r\n    forwardFunds();\r\n  }\r\n\r\n  function delayIcoEnd(uint256 newDate) public onlyOwner {\r\n    require(newDate != 0);\r\n    require(newDate > now);\r\n    require(!hasEnded());\r\n    require(newDate > endTime);\r\n\r\n    endTime = newDate;\r\n  }\r\n\r\n  function increaseWeiRaised(uint256 amount) public onlyOwner {\r\n    require(now < startTime);\r\n    require(amount > 0);\r\n    require(weiRaised.add(amount) <= hardCap);\r\n\r\n    weiRaised = weiRaised.add(amount);\r\n  }\r\n\r\n  function decreaseWeiRaised(uint256 amount) public onlyOwner {\r\n    require(now < startTime);\r\n    require(amount > 0);\r\n    require(weiRaised > 0);\r\n    require(weiRaised >= amount);\r\n\r\n    weiRaised = weiRaised.sub(amount);\r\n  }\r\n\r\n  function issueTokensMultiple(uint256[] _transactionIds, uint256[] bonusTokensAmounts) public onlyOwner {\r\n    require(isFinalized);\r\n    require(_transactionIds.length == bonusTokensAmounts.length);\r\n    for (uint i = 0; i < _transactionIds.length; i++) {\r\n      issueTokens(_transactionIds[i], bonusTokensAmounts[i]);\r\n    }\r\n  }\r\n\r\n  function issueTokens(uint256 _transactionId, uint256 bonusTokensAmount) internal {\r\n    require(completedTransactions[_transactionId] != true);\r\n    require(pendingTransactions[_transactionId].timestamp != 0);\r\n\r\n    TokenPurchaseRecord memory record = pendingTransactions[_transactionId];\r\n    uint256 tokens = record.weiAmount.mul(rate);\r\n    address referralAddress = referrals[record.beneficiary];\r\n\r\n    token.mint(record.beneficiary, tokens);\r\n    emit TokenPurchase(record.beneficiary, record.weiAmount, tokens, _transactionId);\r\n\r\n    completedTransactions[_transactionId] = true;\r\n\r\n    if (bonusTokensAmount != 0) {\r\n      require(bonusTokensAmount != 0);\r\n      token.mint(record.beneficiary, bonusTokensAmount);\r\n      emit BonusTokensSent(record.beneficiary, bonusTokensAmount, _transactionId);\r\n    }\r\n\r\n    if (referralAddress != address(0)) {\r\n      uint256 referralAmount = tokens.mul(referralPercentage).div(uint256(100));\r\n      token.mint(referralAddress, referralAmount);\r\n      emit ReferralTokensSent(referralAddress, referralAmount, _transactionId);\r\n    }\r\n  }\r\n\r\n  function validPurchase(uint256 weiAmount) internal view returns (bool) {\r\n    bool withinCap = weiRaised.add(weiAmount) <= hardCap;\r\n    bool withinCrowdsaleInterval = now >= startTime && now <= endTime;\r\n    return withinCrowdsaleInterval && withinCap;\r\n  }\r\n\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n}\r\n\r\n// File: contracts/Migrations.sol\r\n\r\ncontract Migrations {\r\n\r\n\r\n  address public owner;\r\n  uint public lastCompletedMigration;\r\n\r\n  modifier restricted() {\r\n    if (msg.sender == owner) _;\r\n  }\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function setCompleted(uint completed) public restricted {\r\n    lastCompletedMigration = completed;\r\n  }\r\n\r\n  function upgrade(address newAddress) public restricted {\r\n    Migrations upgraded = Migrations(newAddress);\r\n    upgraded.setCompleted(lastCompletedMigration);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"individualCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseWeiRaised\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhiteListedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionIds\",\"type\":\"uint256[]\"},{\"name\":\"bonusTokensAmounts\",\"type\":\"uint256[]\"}],\"name\":\"issueTokensMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDate\",\"type\":\"uint256\"}],\"name\":\"delayIcoEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vesting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"_referrals\",\"type\":\"address[]\"}],\"name\":\"addAddressReferrals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseWeiRaised\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_icoHardCapWei\",\"type\":\"uint256\"},{\"name\":\"_referralPercentage\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_privateWeiRaised\",\"type\":\"uint256\"},{\"name\":\"_individualCap\",\"type\":\"uint256\"},{\"name\":\"_utilityAccount\",\"type\":\"address\"},{\"name\":\"_tokenCap\",\"type\":\"uint256\"},{\"name\":\"_vestingData\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchaseRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ReferralTokensSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"BonusTokensSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"WhitelistedAddresses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"referral\",\"type\":\"address[]\"}],\"name\":\"ReferralsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FinishMinting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"GambioCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005b3ce0f0000000000000000000000000000000000000000000000000000000005b607970000000000000000000000000000000000000000000000e7289f37328e8c800000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000138800000000000000000000000001e0c66def9faca90b2664378dd8aa9755b3127000000000000000000000000000000000000000000000052bcf94094b7f100000000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000e2a0e69b0f21f1afcd5ab93ecd892fbf0f2ed2e100000000000000000000000000000000000000001027e72f1f12813088000000000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000021ed657c8e0d427f84000000000000000000000000000000000000000000000000000000000000003b53800000000000000000000000000000000000000000000000000000000000003f480","Library":"","SwarmSource":"bzzr://bf8b6e3dfaac69241d439c9687bc29856d41630deaa0dd9e6cdad681147ec72e"}]}