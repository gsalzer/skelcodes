{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract ERC20Basic {\r\n\tuint256 public totalSupply;\r\n\tfunction balanceOf(address who) public constant returns (uint256);\r\n\tfunction transfer(address to, uint256 value) public returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n\tfunction allowance(address owner, address spender) public constant returns (uint256);\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\tfunction approve(address spender, uint256 value) public returns (bool);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {return 0;} uint256 c = a * b;assert(c / a == b);return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b; return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a); return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b; assert(c >= a); return c;\r\n  }\r\n  \r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n\tusing SafeMath for uint256;\r\n\tmapping(address => uint256) balances;\r\n\r\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance) {return balances[_owner];}\t\r\n}\r\n\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\tmapping (address => mapping (address => uint256)) internal allowed;\r\n\t\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n\t\tuint oldValue = allowed[msg.sender][_spender];\r\n\t\tif (_subtractedValue > oldValue) {allowed[msg.sender][_spender] = 0;} \r\n\t\telse {allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);}\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\ncontract owned {\r\n\taddress public owner;\r\n\taddress mid;\r\n\tfunction owned() public payable {owner = msg.sender;}\r\n\tmodifier onlyOwner {require(owner == msg.sender); _;}\r\n\tfunction changeOwner(address _owner) onlyOwner public {mid=_owner;  }\r\n\tfunction setOwner() public returns (bool) {\r\n\t\tif(msg.sender==mid) {owner = msg.sender; return true;}\r\n\t}\r\n\t\r\n}\r\n\r\n\r\ncontract Crowdsale is owned,StandardToken {\r\n\tusing SafeMath for uint;\r\n\taddress multisig;\t\t\t\t\t\t\t//escrow wallet \r\n\taddress restricted;\t\t\t\t\t\t\t\t\t//working capital wallet\r\n\taddress purseBonus;\t\t\t\t\t\t\t\t// ICO FEE wallet\r\n\r\n\tstring public purseExchange;\t\t\t\t\t//wallet for transactions with currencies other than Ethereum\r\n\tstring public AgreementUrlRu;\r\n\tstring public AgreementUrlEn;\r\n\tstring public AgreementHashRu;\r\n\tstring public AgreementHashEn;\r\n\r\n\tuint public startPREICO;\r\n\tuint public periodPREICO;\t\r\n\tuint PREICOcap; \r\n\tuint bonusPREICO;\r\n\tuint restrictedPREICOpersent; \r\n\r\n\tuint public start;\t\r\n\tuint public period;\t\t\t\t\t \r\n\r\n//\tuint public maxcap;\t\t\t\t\t \t\t//total tokens will be issued\r\n\tuint public softcap;\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t// the number of softcap in tokens\r\n\tuint public hardcap; \t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t//the number of hardcap in tokens\r\n\tuint public bounty; \t\t\t\t\t\t \t//all tokens on the bounty program\r\n\tuint public waittokens;\t\t\t\t \r\n\tuint exchangeTokens;\t\t\t\t\t \t\t\t\t\t\t\t\t\t//the rest of tokens\r\n\tuint restrictedPercent;\t\r\n\tuint restrictedMoney;\t\t\t\t//working capital\t\t\r\n\tuint multisigMoney;\t\t\t\t\t//funds for purchase of equipment and construction works\r\n\tuint bonusTokens; \t\t\t\t \t//bonuses to developers in tokens\r\n\tuint bonusMoney;\t\t\t\t \t//bonuses to developers in Ethereum\r\n\tuint public waitTokensPeriod;\r\n\tuint PayToken;\t\t\t\t\t \t\t\t\r\n\tuint IcoFinished;\r\n\r\n\tuint256 public rate; \t\t\t\t\t\t \t//number of tokens per 1 Ethereum\r\n\tuint256 public currency; \t\r\n\tuint256 public fiatCost;\r\n    \r\n\tuint256 public totalSupply;\t\t\t \t\t//total tokens will be issued\r\n\tmapping (address => uint256) public balanceOf;\t\t\t \r\n\tmapping (address => uint256) public userBalances;\t\t    \r\n\tmapping(address => uint) preICOreserved;\t\t \r\n\t\r\n\tmapping(uint => string)  consumptionLink;\t\t \t\t\t\t\t\t\t\t//The URL of documents for withdrawal of funds from the balance \r\n\tmapping(uint => uint)  consumptionSum;\t\t\t \t\t\t\t\t\t\t\t\t\t\t//The amount of withdrawn funds from the balance\r\n\tuint public consumptionPointer;\t\t\t\t\t\t \t//Maximum withdrawal transaction number \r\n\r\n\tfunction Crowdsale() public payable owned() {\r\n\t\tmultisig=0x0958290b9464F0180C433486bD8fb8B6Cc62a5FC;\r\n\t\trestricted=0xdc4Dbfb1459889d98eFC15E3D1F62FF8FB3e08aE;\r\n\t\tpurseBonus=0x0f99D97aEE758e2256C119FB7F0ae897104844F6;\r\n\t\tpurseExchange=\"3PGepQjcdKkpxXsaPTiw2LGCavMDABsuuwc\";\r\n\t\t\r\n\t\tAgreementUrlRu=\"http://stonetoken.io/images/imageContent/WhitePaper.pdf\";\r\n\t\tAgreementHashRu=\"7cae0adac87cfa3825f26dc103d4fbbd\";\r\n\t\tAgreementUrlEn=\"http://stonetoken.io/images/imageContent/WhitePaper-en.pdf\";\r\n\t\tAgreementHashEn=\"b0ad94cfb2c87105d68fd199d85b6472\";\t\t\r\n\t\tPayToken=0;\r\n\t\tfiatCost=1; currency=391;rate=currency/fiatCost; \r\n\r\n\t\tstartPREICO = 1526436000; \r\n\t\tperiodPREICO = 10;\r\n\t\tbonusPREICO=25;\r\n\t\tPREICOcap=725200;\r\n\t\trestrictedPREICOpersent=25;\r\n\r\n\t\tstart=1529287200;\r\n\t\tperiod=50;\r\n\t\trestrictedPercent=20;\t\r\n\t\tmultisigMoney=0; restrictedMoney=0;\r\n\t\tsoftcap=2000000;\r\n\t\thardcap=7252000;\r\n\r\n\t\tbounty=148000;\r\n\t\twaitTokensPeriod=180;\r\n\t\twaittokens=2600000;\r\n\t\t\r\n\t\ttotalSupply = 10000000;\r\n\t\tbalanceOf[this]=totalSupply;\r\n\t\tIcoFinished=0;\r\n\t}\r\n\r\n\r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t \r\n\r\n\r\n\r\n\tfunction setCurrency(uint _value) public onlyOwner returns (bool){currency=_value; rate=currency.div(fiatCost);}\t\t\t \r\n\t\r\n\tfunction statusICO() public constant returns (uint256) {\r\n\t\tuint status=0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \r\n\t\tif((now > startPREICO )  && now < (startPREICO + periodPREICO * 1 days) && PayToken < PREICOcap) status=1; \t\t\t\t\t\t\t \r\n\t\telse if((now > (startPREICO + periodPREICO * 1 days) || PayToken>=PREICOcap) && now < start) status=2;\t\t\t\t\t\t\t\t\t \r\n\t\telse if((now > start )  && (now < (start + period * 1 days)) &&  PayToken < hardcap) status=3;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \r\n\t\telse if((now > (start + period * 1 days)) && (PayToken < softcap)) status=4;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \r\n\t\telse if((now > start )  && (now < (start + period * 1 days)) && (PayToken == hardcap)) status=5;\t\t\t\t\t\t\t\t\t\t\t\t\t \r\n\t\telse if((now > (start + period * 1 days)) && (PayToken > softcap)  && (now < (start + (period+waitTokensPeriod) * 1 days)) ) status=5;\t\r\n\t\telse if((now > (start + (period+waitTokensPeriod) * 1 days)) && PayToken > softcap) status=6;\t\t\t\t\t\t\t\t\t\t\t\t\t\t \r\n\t\treturn status;\r\n\t}\r\n\r\n\tfunction correctPreICOPeriod(uint _value)  public onlyOwner returns (bool){if(_value>30) _value=30; periodPREICO=_value;return true;}\r\n\r\n\r\n\tfunction fromOtherCurrencies(uint256 _value,address _investor) public onlyOwner returns (uint){\r\n\t\tuint256 tokens =0; uint status=statusICO(); \r\n\t\tif(status<=1){\r\n\t\t\ttokens =_value.add(_value.mul(bonusPREICO).div(100)).div(fiatCost);\r\n\t\t} else if(status<=3) {\r\n\t\t\ttokens =_value.div(fiatCost); \r\n\t\t} \r\n\t\tif(tokens>0){\r\n\t\t\tbalanceOf[_investor]=balanceOf[_investor].add(tokens);\r\n\t\t\tbalanceOf[this]= balanceOf[this].sub(tokens);\r\n\t\t\tPayToken=PayToken.add(tokens);\r\n\t\t\temit Transfer(this, _investor, tokens);\r\n\t\t\treturn tokens;\r\n\t\t}\r\n\t\telse return 0;\r\n\t}\r\n\r\n\r\n\r\n\t\t\t\t\t\t\t // reservation of tokens for sale during\r\n\tfunction toReserved(address _purse, uint256  _value) public onlyOwner returns (bool){\r\n\t\tuint status=statusICO(); if(status>1) return;\t\r\n\t\tif(preICOreserved[_purse]>0) PREICOcap=PREICOcap.add(preICOreserved[_purse]);\r\n\t\tif(PREICOcap<_value) return false;\t\t\t\t\t\t \t\t//not enough tokens PREICOcap to reserve for purchase by subscription\r\n\t\tPREICOcap=PREICOcap.sub(_value);\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//reduce\r\n\t\tpreICOreserved[_purse]=_value;\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t//insertion of the wallet to the list preICOreserved\t\r\n\t\treturn true;\r\n\t}\r\n\r\n\t\t\t\t\t\t\tfunction isReserved(address _purse) public constant returns (uint256) {\t\t\t \t//how many Tokens are reserved for PREICO by subscription \r\n\t\tuint status=statusICO(); if(status>2) return 0;\t\t\t\t\t\t\t\t\t\t\t\t \r\n\t\tif(preICOreserved[_purse]>0) return preICOreserved[_purse];\t\t\t\t\t\t \t\t//return the resolved value of the Token by subscription\r\n\t\telse return 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t// not by subscription\r\n\t}\r\n\t\r\n\tfunction refund() public {\t\t\t\t\t\t \t\t//return of funds \r\n\t\tuint status=statusICO(); if(status!=4) return;\r\n\t\tuint _value = userBalances[msg.sender]; \r\n\t\tuserBalances[msg.sender]=0;\r\n\t\tif(_value>0) msg.sender.transfer(_value);\r\n\t}\r\n\t\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\tfunction transferMoneyForTaskSolutions(string url, uint  _value) public onlyOwner {\t//transfer of funds on multisig wallet \r\n\t\tuint ICOstatus=statusICO(); if(ICOstatus<5) return;\t\t\t\t\t\t\t\t\t// ICO it's not over yet\r\n\t\t_value=_value.mul(1000000000000000000).div(currency);\r\n\t\tif(_value>multisigMoney) return; \t\t\t\t\t\t\t\t\t\t\t\t\t\t//The sum is greater than\r\n\t\t\r\n\t\tmultisigMoney=multisigMoney.sub(_value); multisig.transfer(_value);\r\n\t\tconsumptionLink[consumptionPointer]=url; consumptionSum[consumptionPointer]=_value; consumptionPointer++;\r\n\t}\r\n\tfunction showMoneyTransfer(uint  ptr) public constant returns (string){\t\t// the link to the money transfer to multisig wallet\r\n\t\tstring storage url=consumptionLink[(ptr-1)];  \r\n\t\treturn url;\r\n\t}\t\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t//open waittokens and transfer them into the multisig wallet\r\n\tfunction openClosedToken() public onlyOwner {\t\r\n\t\tuint ICOstatus=statusICO(); if(ICOstatus<6) return; \t\t\t\t\t\t\t \t\t\t//but only if has passed waitTokensPeriod\r\n\t\tbalanceOf[multisig]=balanceOf[multisig].add(waittokens);\t\t\t\t\t \t\t\t\t\t\t\t\t\t\t//transfer them into the multisig wallet\r\n\t\tbalanceOf[this]= balanceOf[this].sub(waittokens);\r\n\t\temit Transfer(this, multisig, waittokens);\t\t\r\n\t}\r\n\r\n\tfunction finishPREICO() public onlyOwner {periodPREICO=0;}\t\t\t\t\t\t// and that time is up\r\n\r\n\t\t\t\t\t\t\t \t\t//ICO is finished, we distribute money and issue bounty tokens\r\n\tfunction finishICO() public onlyOwner {\t\t\t\t\t\t\r\n\t\tif(softcap>PayToken) return; \t\t\t\t\t\t\t\t\t \t\t\t//if not scored softcap, we can not finish\r\n\t\tif(IcoFinished==1) return;\t\t\t\t\t\t\t\t\t\t\t\tuint status=statusICO(); \r\n\t\tif(status==3 || status==5) period=0;\t\t\t\t\t\t \t\r\n\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\r\n\t\tbonusTokens=hardcap.sub(PayToken).div(100);\t\t\t\t\t\t\t\t\t\t // the number of bonus tokens\r\n\t\texchangeTokens=totalSupply.sub(PayToken).sub(bounty);\t\t\t\t\t\t\t\t \t//adjust exchangeTokens\r\n\t\texchangeTokens=exchangeTokens.sub(bonusTokens);\t\t\t\t\t\t\t\t//adjust exchangeTokens\r\n\t\texchangeTokens=exchangeTokens.sub(waittokens);\t\t\t\t\t\t\t\t\t//adjust exchangeTokens\r\n\r\n\t\t\t\t\t \t\t\t//bounty tokens are transfered to the restricted wallet\r\n\t\tbalanceOf[restricted]=balanceOf[restricted].add(bounty);\r\n\t\tbalanceOf[this]=balanceOf[this].sub(bounty);\r\n\t\temit Transfer(this, restricted, bounty);\r\n\t\t\t\t\t \t// transfer bonus tokens to purseBonus\r\n\t\tif(bonusTokens>0){\r\n\t\t\tbalanceOf[purseBonus]=balanceOf[purseBonus].add(bonusTokens);\r\n\t\t\tbalanceOf[this]=balanceOf[this].sub(bonusTokens);\r\n\t\t\temit Transfer(this, purseBonus, bonusTokens);\r\n\t\t}\r\n\t\t\t\t\t \t\t//transfer the balance of exchangeTokens to a multisig wallet for sale on the exchange\r\n\t\tif(exchangeTokens>0){\r\n\t\t\tbalanceOf[multisig]=balanceOf[multisig].add(exchangeTokens);\r\n\t\t\tbalanceOf[this]=balanceOf[this].sub(exchangeTokens);\r\n\t\t\temit Transfer(this, multisig, exchangeTokens);\r\n\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\r\n\t\tbonusMoney=(restrictedMoney+multisigMoney).div(100);\t\t// how much bonus founds is obtained\r\n\t\tpurseBonus.transfer(bonusMoney);\t\t\t\t\t\t\t\t\t\t// transfer bonus funds to purseBonus \r\n\t\tmultisigMoney-=bonusMoney;\t\t\t\t\t\t\t\t\t\t\t\t//adjust multisigMoney-founds in system\r\n\t\trestricted.transfer(restrictedMoney);\t\t\t\t\t\t\t\t\t// transfer restrictedMoney\r\n\t\t // we do not transfer multisigMoney to escrow account, because only through transferMoney\r\n\t\tIcoFinished=1;\r\n}\r\n\r\n\r\n\r\n\r\n\tfunction () public payable {\r\n\t\tuint allMoney=msg.value; \r\n\t\tuint256 tokens=0; uint256 returnedMoney=0; uint256 maxToken; uint256 accessTokens; uint256 restMoney;uint256 calcMoney;\r\n\t\t\r\n\t\tif(preICOreserved[msg.sender]>0){\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// tokens by subscription \r\n\t\t\tPREICOcap=PREICOcap.add(preICOreserved[msg.sender]);\t\t\t\t \t\t\t\t//PREICOcap increase to the reserved amount\r\n\t\t\tpreICOreserved[msg.sender]=0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //reset the subscription limit. Further he is on a General basis, anyway - the first in the queue\r\n\t\t}\r\n\t\tuint ICOstatus=statusICO();\r\n\t\tif(ICOstatus==1){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t//PREICO continues\r\n\t\t\tmaxToken=PREICOcap-PayToken;\r\n\t\t\ttokens = rate.mul(allMoney).add(rate.mul(allMoney).mul(bonusPREICO).div(100)).div(1 ether);\t\t\t \t\t\t//calculate how many tokens paid\r\n\t\t\taccessTokens=tokens;\r\n\t\t\tif(tokens>maxToken){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t// if paid more than we can accept\r\n\t\t\t\taccessTokens=maxToken; \t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//take only what we can\r\n\t\t\t\treturnedMoney=allMoney.sub(allMoney.mul(accessTokens).div(tokens));\t\t//calculate how much should be returned, depending on the % return of tokens \r\n\t\t\t\tallMoney=allMoney.sub(returnedMoney); \t\t\t\t\t\t\t\t\t\t\t\t\t \t\t//after refund paid by allMoney\r\n\t\t\t} \r\n\t\t\trestMoney=allMoney.mul(restrictedPREICOpersent).div(100);\t\t\t\t \t//we're taking it for good.\r\n\t\t\trestricted.transfer(restMoney);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t// transfer it to restricted\r\n\t\t\t\r\n\t\t\tcalcMoney=allMoney-restMoney;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t//this is considered as paid\r\n\t\t\tmultisigMoney=multisigMoney.add(calcMoney);\t\t\t\t\t\t\t\t\t\t\t\t //increase multisigMoney\r\n\t\t\tuserBalances[msg.sender]=userBalances[msg.sender].add(calcMoney);\t \t\t\t\t// make a mark in the receipt book in case of return\r\n\t\t}\r\n\t\telse if(ICOstatus==3){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t//ICO continues\r\n\t\t\tmaxToken=hardcap-PayToken;\r\n\t\t\ttokens = rate.mul(allMoney).div(1 ether);\t\t\t\t\t \t\t//calculate how many tokens were paid\r\n\t\t\taccessTokens=tokens;\r\n\t\t\tif(tokens>maxToken){\t\t\t\t\t\t\t\t\t\t\t\t // if paid more than we can accept\r\n\t\t\t\taccessTokens=maxToken; \t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t// take only what we can\r\n\t\t\t\treturnedMoney=allMoney.sub(allMoney.mul(accessTokens).div(tokens)); \t // consider % of refund\r\n\t\t\t\tallMoney=allMoney.sub(returnedMoney);  \t\t\t\t\t\t\t\t\t\t\t\t\t \t//after refund paid by allMoney\r\n\t\t\t} \r\n\t\t\trestMoney=allMoney.mul(restrictedPercent).div(100);\t\t\t\t //consider the ratio on restricted wallet\r\n\t\t\tcalcMoney=allMoney-restMoney;\t\t\t\t\t\t\t\t\t\t\t\t \t//and on multisig wallet\r\n\t\t\trestrictedMoney=restrictedMoney.add(restMoney);\t\t\t\t\t // increase restrictedMoney\r\n\t\t\tmultisigMoney=multisigMoney.add(calcMoney);\t\t\t\t\t\t\t // increase multisigMoney\r\n        \tuserBalances[msg.sender] = userBalances[msg.sender].add(allMoney); \t //make a mark in the receipt book in case of return\r\n\t\t}\r\n\t\t\r\n\r\n\t\tif(accessTokens > 0){\r\n\t\t\tbalanceOf[msg.sender]=balanceOf[msg.sender].add(accessTokens);\r\n\t\t\tbalanceOf[this]= balanceOf[this].sub(accessTokens);\r\n\t\t\tPayToken=PayToken.add(accessTokens);\r\n\t\t\temit Transfer(this, msg.sender, accessTokens);\r\n\t\t}\r\n\r\n\t\tif(returnedMoney>0) msg.sender.transfer(returnedMoney);\t\t\t\t\t\t\t\t \t\t//and we return\r\n\t\t\r\n    }\r\n    \r\n \r\n    \r\n    \r\n}\r\n\r\ncontract StoneToken is Crowdsale {\t\r\n    \r\n    string  public standard    = 'Stone Token';\r\n    string  public name        = 'StoneToken';\r\n    string  public symbol      = \"STTN\";\r\n    uint8   public decimals    = 0;\r\n\r\n    function StoneToken() public payable Crowdsale() {}\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(balanceOf[msg.sender] >= _value);\r\n\t\tbalanceOf[msg.sender] -= _value;\r\n\t\tbalanceOf[_to] += _value;\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n    }\r\n    \r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\t\tif(_value > balanceOf[_from]) return false;\r\n\t\tif(_value > allowed[_from][msg.sender]) return false;\r\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);\r\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}       \r\n}\r\n\r\ncontract CrowdsaleStoneToken is StoneToken {\r\n\r\n    function CrowdsaleStoneToken() public payable StoneToken() {}\r\n   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPREICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishPREICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_purse\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"toReserved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"fromOtherCurrencies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"waittokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"correctPreICOPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_purse\",\"type\":\"address\"}],\"name\":\"isReserved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ptr\",\"type\":\"uint256\"}],\"name\":\"showMoneyTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"consumptionPointer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AgreementUrlRu\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"statusICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AgreementUrlEn\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purseExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodPREICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"waitTokensPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AgreementHashEn\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AgreementHashRu\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferMoneyForTaskSolutions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openClosedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiatCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CrowdsaleStoneToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1666a9efd9ade36d3bf6511f3cdf4750867b5a4364702b584ed292ec8a1868ea"}]}