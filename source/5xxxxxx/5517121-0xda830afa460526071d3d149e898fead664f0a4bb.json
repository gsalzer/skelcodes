{"status":"1","message":"OK","result":[{"SourceCode":"// Smart contract used for the EatMeCoin Crowdsale \r\n//\r\n// @author: Pavel Metelitsyn, Geejay101\r\n// April 2018\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function percent(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c / 100;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\n\r\n /* from OpenZeppelin library */\r\n /* https://github.com/OpenZeppelin/zeppelin-solidity */\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/*\r\n    Copyright 2016, Jordi Baylina\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/// @title MiniMeToken Contract\r\n/// @author Jordi Baylina\r\n/// @dev This token contract's goal is to make it easy for anyone to clone this\r\n///  token using the token distribution at a given block, this will allow DAO's\r\n///  and DApps to upgrade their features in a decentralized manner without\r\n///  affecting the original token\r\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\r\n\r\n\r\n/// @dev The token controller contract must implement these functions\r\ncontract TokenController {\r\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\r\n    /// @param _owner The address that sent the ether to create tokens\r\n    /// @return True if the ether is accepted, false if it throws\r\n    function proxyPayment(address _owner) public payable returns(bool);\r\n\r\n    /// @notice Notifies the controller about a token transfer allowing the\r\n    ///  controller to react if desired\r\n    /// @param _from The origin of the transfer\r\n    /// @param _to The destination of the transfer\r\n    /// @param _amount The amount of the transfer\r\n    /// @return False if the controller does not authorize the transfer\r\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\r\n\r\n    /// @notice Notifies the controller about an approval allowing the\r\n    ///  controller to react if desired\r\n    /// @param _owner The address that calls `approve()`\r\n    /// @param _spender The spender in the `approve()` call\r\n    /// @param _amount The amount in the `approve()` call\r\n    /// @return False if the controller does not authorize the approval\r\n    function onApprove(address _owner, address _spender, uint _amount) public\r\n        returns(bool);\r\n}\r\n\r\ncontract Controlled {\r\n    /// @notice The address of the controller is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyController { require(msg.sender == controller); _; }\r\n\r\n    address public controller;\r\n\r\n    function Controlled() public { controller = msg.sender;}\r\n\r\n    /// @notice Changes the controller of the contract\r\n    /// @param _newController The new controller of the contract\r\n    function changeController(address _newController) public onlyController {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\r\n}\r\n\r\n/// @dev The actual token contract, the default controller is the msg.sender\r\n///  that deploys the contract, so usually this token will be deployed by a\r\n///  token controller contract, which Giveth will call a \"Campaign\"\r\ncontract MiniMeToken is Controlled {\r\n\r\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    string public version = 'MMT_0.2'; //An arbitrary versioning scheme\r\n\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct  Checkpoint {\r\n\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    MiniMeToken public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transfersEnabled;\r\n\r\n    // The factory used to create new clone tokens\r\n    MiniMeTokenFactory public tokenFactory;\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n    /// @notice Constructor to create a MiniMeToken\r\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\r\n    ///  will create the Clone token contracts, the token factory needs to be\r\n    ///  deployed first\r\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param _parentSnapShotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token, set to 0 if it\r\n    ///  is a new token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    function MiniMeToken(\r\n        address _tokenFactory,\r\n        address _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) public {\r\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = MiniMeToken(_parentToken);\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n        doTransfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount\r\n    ) public returns (bool success) {\r\n\r\n        // The controller of this contract can move tokens around at will,\r\n        //  this is important to recognize! Confirm that you trust the\r\n        //  controller of this contract, which in most situations should be\r\n        //  another open source smart contract or 0x0\r\n        if (msg.sender != controller) {\r\n            require(transfersEnabled);\r\n\r\n            // The standard ERC 20 transferFrom functionality\r\n            require(allowed[_from][msg.sender] >= _amount);\r\n            allowed[_from][msg.sender] -= _amount;\r\n        }\r\n        doTransfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount\r\n    ) internal {\r\n\r\n           if (_amount == 0) {\r\n               Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\r\n               return;\r\n           }\r\n\r\n           require(parentSnapShotBlock < block.number);\r\n\r\n           // Do not allow transfer to 0x0 or the token contract itself\r\n           require((_to != 0) && (_to != address(this)));\r\n\r\n           // If the amount being transfered is more than the balance of the\r\n           //  account the transfer throws\r\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\r\n\r\n           require(previousBalanceFrom >= _amount);\r\n\r\n           // Alerts the token controller of the transfer\r\n           if (isContract(controller)) {\r\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\r\n           }\r\n\r\n           // First update the balance array with the new value for the address\r\n           //  sending the tokens\r\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n\r\n           // Then update the balance array with the new value for the address\r\n           //  receiving the tokens\r\n           var previousBalanceTo = balanceOfAt(_to, block.number);\r\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n\r\n           // An event to make the transfer easy to find on the blockchain\r\n           Transfer(_from, _to, _amount);\r\n\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        // Alerts the token controller of the approve function call\r\n        if (isContract(controller)) {\r\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender\r\n    ) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\r\n    ) public returns (bool success) {\r\n        require(approve(_spender, _amount));\r\n\r\n        ApproveAndCallFallBack(_spender).receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            this,\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() public constant returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n////////////////\r\n// Query balance and totalSupply in History\r\n////////////////\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) public constant\r\n        returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0)\r\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0)\r\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n////////////////\r\n// Clone Token Method\r\n////////////////\r\n\r\n    /// @notice Creates a new clone token with the initial distribution being\r\n    ///  this token at `_snapshotBlock`\r\n    /// @param _cloneTokenName Name of the clone token\r\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\r\n    /// @param _cloneTokenSymbol Symbol of the clone token\r\n    /// @param _snapshotBlock Block when the distribution of the parent token is\r\n    ///  copied to set the initial distribution of the new clone token;\r\n    ///  if the block is zero than the actual block, the current block is used\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    /// @return The address of the new MiniMeToken Contract\r\n    function createCloneToken(\r\n        string _cloneTokenName,\r\n        uint8 _cloneDecimalUnits,\r\n        string _cloneTokenSymbol,\r\n        uint _snapshotBlock,\r\n        bool _transfersEnabled\r\n        ) public returns(address) {\r\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\r\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\r\n            this,\r\n            _snapshotBlock,\r\n            _cloneTokenName,\r\n            _cloneDecimalUnits,\r\n            _cloneTokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        cloneToken.changeController(msg.sender);\r\n\r\n        // An event to make the token easy to find on the blockchain\r\n        NewCloneToken(address(cloneToken), _snapshotBlock);\r\n        return address(cloneToken);\r\n    }\r\n\r\n////////////////\r\n// Generate and destroy tokens\r\n////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function generateTokens(address _owner, uint _amount\r\n    ) public onlyController returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint previousBalanceTo = balanceOf(_owner);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        Transfer(0, _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _owner The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function destroyTokens(address _owner, uint _amount\r\n    ) onlyController public returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint previousBalanceFrom = balanceOf(_owner);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        Transfer(_owner, 0, _amount);\r\n        return true;\r\n    }\r\n\r\n////////////////\r\n// Enable tokens transfers\r\n////////////////\r\n\r\n\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    function enableTransfers(bool _transfersEnabled) public onlyController {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n////////////////\r\n// Internal helper functions to query and set a value in a snapshot array\r\n////////////////\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\r\n    ) constant internal returns (uint) {\r\n        if (checkpoints.length == 0) return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock) return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1)/ 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\r\n    ) internal  {\r\n        if ((checkpoints.length == 0)\r\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\r\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\r\n               newCheckPoint.fromBlock =  uint128(block.number);\r\n               newCheckPoint.value = uint128(_value);\r\n           } else {\r\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n               oldCheckPoint.value = uint128(_value);\r\n           }\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint size;\r\n        if (_addr == 0) return false;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size>0;\r\n    }\r\n\r\n    /// @dev Helper function to return a min betwen the two uints\r\n    function min(uint a, uint b) pure internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /// @notice The fallback function: If the contract's controller has not been\r\n    ///  set to 0, then the `proxyPayment` method is called which relays the\r\n    ///  ether and creates tokens as described in the token controller contract\r\n    function () public payable {\r\n        require(isContract(controller));\r\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\r\n    }\r\n\r\n//////////\r\n// Safety Methods\r\n//////////\r\n\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token) public onlyController {\r\n        if (_token == 0x0) {\r\n            controller.transfer(this.balance);\r\n            return;\r\n        }\r\n\r\n        MiniMeToken token = MiniMeToken(_token);\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(controller, balance);\r\n        ClaimedTokens(_token, controller, balance);\r\n    }\r\n\r\n////////////////\r\n// Events\r\n////////////////\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n}\r\n\r\n\r\n////////////////\r\n// MiniMeTokenFactory\r\n////////////////\r\n\r\n/// @dev This contract is used to generate clone contracts from a contract.\r\n///  In solidity this is the way to create a contract from a contract of the\r\n///  same class\r\ncontract MiniMeTokenFactory {\r\n\r\n    /// @notice Update the DApp by creating a new token with new functionalities\r\n    ///  the msg.sender becomes the controller of this clone token\r\n    /// @param _parentToken Address of the token being cloned\r\n    /// @param _snapshotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    /// @return The address of the new token contract\r\n    function createCloneToken(\r\n        address _parentToken,\r\n        uint _snapshotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) public returns (MiniMeToken) {\r\n        MiniMeToken newToken = new MiniMeToken(\r\n            this,\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        newToken.changeController(msg.sender);\r\n        return newToken;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract EatMeCoin is MiniMeToken { \r\n\r\n  // we use this variable to store the number of the finalization block\r\n  uint256 public checkpointBlock;\r\n\r\n  // address which is allowed to trigger tokens generation\r\n  address public mayGenerateAddr;\r\n\r\n  // flag\r\n  bool tokenGenerationEnabled = true; //<- added after first audit\r\n\r\n\r\n  modifier mayGenerate() {\r\n    require ( (msg.sender == mayGenerateAddr) &&\r\n              (tokenGenerationEnabled == true) ); //<- added after first audit\r\n    _;\r\n  }\r\n\r\n  // Constructor\r\n  function EatMeCoin(address _tokenFactory) \r\n    MiniMeToken(\r\n      _tokenFactory,\r\n      0x0,\r\n      0,\r\n      \"EatMeCoin\",\r\n      18, // decimals\r\n      \"EAT\",\r\n      // SHOULD TRANSFERS BE ENABLED? -- NO\r\n      false){\r\n    \r\n    controller = msg.sender;\r\n    mayGenerateAddr = controller;\r\n  }\r\n\r\n  function setGenerateAddr(address _addr) onlyController{\r\n    // we can appoint an address to be allowed to generate tokens\r\n    require( _addr != 0x0 );\r\n    mayGenerateAddr = _addr;\r\n  }\r\n\r\n\r\n  /// @notice this is default function called when ETH is send to this contract\r\n  ///   we use the campaign contract for selling tokens\r\n  function () payable {\r\n    revert();\r\n  }\r\n\r\n  \r\n  /// @notice This function is copy-paste of the generateTokens of the original MiniMi contract\r\n  ///   except it uses mayGenerate modifier (original uses onlyController)\r\n  function generate_token_for(address _addrTo, uint256 _amount) mayGenerate returns (bool) {\r\n    \r\n    //balances[_addr] += _amount;\r\n   \r\n    uint256 curTotalSupply = totalSupply();\r\n    require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow    \r\n    uint256 previousBalanceTo = balanceOf(_addrTo);\r\n    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n    updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n    updateValueAtNow(balances[_addrTo], previousBalanceTo + _amount);\r\n    Transfer(0, _addrTo, _amount);\r\n    return true;\r\n  }\r\n\r\n  // overwrites the original function\r\n  function generateTokens(address _owner, uint256 _amount\r\n    ) onlyController returns (bool) {\r\n    revert();\r\n    generate_token_for(_owner, _amount);    \r\n  }\r\n\r\n\r\n  // permanently disables generation of new tokens\r\n  function finalize() mayGenerate {\r\n    tokenGenerationEnabled = false;\r\n    transfersEnabled = true;\r\n    checkpointBlock = block.number;\r\n  }  \r\n}\r\n\r\n\r\ncontract eat_token_interface{\r\n  uint8 public decimals;\r\n  function generate_token_for(address _addr,uint256 _amount) returns (bool);\r\n  function finalize();\r\n}\r\n\r\n// Controlled is implemented in MiniMeToken.sol\r\ncontract TokenCampaign is Controlled {\r\n  using SafeMath for uint256;\r\n\r\n  // this is our token\r\n  eat_token_interface public token;\r\n\r\n  uint8 public constant decimals = 18;\r\n\r\n  uint256 public constant scale = (uint256(10) ** decimals);\r\n\r\n  uint256 public constant hardcap = 100000000 * scale;\r\n\r\n  ///////////////////////////////////\r\n  //\r\n  // constants related to token sale\r\n\r\n  // after sale ends, additional tokens will be generated\r\n  // according to the following rules,\r\n  // where 100% correspond to the number of sold tokens\r\n\r\n  // percent of reward tokens to be generated\r\n  uint256 public constant PRCT100_D_TEAM = 63; // % * 100 , 0.63%\r\n  uint256 public constant PRCT100_R_TEAM = 250; // % * 100 , 2.5%\r\n  uint256 public constant PRCT100_R2 = 150;  // % * 100 , 1.5%\r\n\r\n  // fixed reward\r\n  uint256 public constant FIXEDREWARD_MM = 100000 * scale; // fixed\r\n\r\n  // we keep some of the ETH in the contract until the sale is finalized\r\n  // percent of ETH going to operational and reserve account\r\n  uint256 public constant PRCT100_ETH_OP = 4000; // % * 100 , 2x 40%\r\n\r\n  // preCrowd structure, Wei\r\n  uint256 public constant preCrowdMinContribution = (20 ether);\r\n\r\n  // minmal contribution, Wei\r\n  uint256 public constant minContribution = (1 ether) / 100;\r\n\r\n  // how many tokens for one ETH\r\n  uint256 public constant preCrowd_tokens_scaled = 7142857142857140000000; // 30% discount\r\n  uint256 public constant stage_1_tokens_scaled =  6250000000000000000000; // 20% discount\r\n  uint256 public constant stage_2_tokens_scaled =  5555555555555560000000; // 10% discount\r\n  uint256 public constant stage_3_tokens_scaled =  5000000000000000000000; //<-- scaled\r\n\r\n  // Tokens allocated for each stage\r\n  uint256 public constant PreCrowdAllocation =  20000000 * scale ; // Tokens\r\n  uint256 public constant Stage1Allocation =    15000000 * scale ; // Tokens\r\n  uint256 public constant Stage2Allocation =    15000000 * scale ; // Tokens\r\n  uint256 public constant Stage3Allocation =    20000000 * scale ; // Tokens\r\n\r\n  // keeps track of tokens allocated, scaled value\r\n  uint256 public tokensRemainingPreCrowd = PreCrowdAllocation;\r\n  uint256 public tokensRemainingStage1 = Stage1Allocation;\r\n  uint256 public tokensRemainingStage2 = Stage2Allocation;\r\n  uint256 public tokensRemainingStage3 = Stage3Allocation;\r\n\r\n  // If necessary we can cap the maximum amount \r\n  // of individual contributions in case contributions have exceeded the hardcap\r\n  // this avoids to cap the contributions already when funds flow in\r\n  uint256 public maxPreCrowdAllocationPerInvestor =  20000000 * scale ; // Tokens\r\n  uint256 public maxStage1AllocationPerInvestor =    15000000 * scale ; // Tokens\r\n  uint256 public maxStage2AllocationPerInvestor =    15000000 * scale ; // Tokens\r\n  uint256 public maxStage3AllocationPerInvestor =    20000000 * scale ; // Tokens\r\n\r\n  // keeps track of tokens generated so far, scaled value\r\n  uint256 public tokensGenerated = 0;\r\n\r\n  address[] public joinedCrowdsale;\r\n\r\n  // total Ether raised (= Ether paid into the contract)\r\n  uint256 public amountRaised = 0; \r\n\r\n  // How much wei we have given back to investors.\r\n  uint256 public amountRefunded = 0;\r\n\r\n\r\n  ////////////////////////////////////////////////////////\r\n  //\r\n  // folowing addresses need to be set in the constructor\r\n  // we also have setter functions which allow to change\r\n  // an address if it is compromised or something happens\r\n\r\n  // destination for D-team's share\r\n  address public dteamVaultAddr1;\r\n  address public dteamVaultAddr2;\r\n  address public dteamVaultAddr3;\r\n  address public dteamVaultAddr4;\r\n\r\n  // destination for R-team's share\r\n  address public rteamVaultAddr;\r\n\r\n  // advisor address\r\n  address public r2VaultAddr;\r\n\r\n  // adivisor address\r\n  address public mmVaultAddr;\r\n  \r\n  // destination for reserve tokens\r\n  address public reserveVaultAddr;\r\n\r\n  // destination for collected Ether\r\n  address public trusteeVaultAddr;\r\n  \r\n  // destination for operational costs account\r\n  address public opVaultAddr;\r\n\r\n  // adress of our token\r\n  address public tokenAddr;\r\n  \r\n  // @check ensure that state transitions are \r\n  // only in one direction\r\n  // 3 - passive, not accepting funds\r\n  // 2 - active main sale, accepting funds\r\n  // 1 - closed, not accepting funds \r\n  // 0 - finalized, not accepting funds\r\n  uint8 public campaignState = 3; \r\n  bool public paused = false;\r\n\r\n  // time in seconds since epoch \r\n  // set to midnight of saturday January 1st, 4000\r\n  uint256 public tCampaignStart = 64060588800;\r\n\r\n  uint256 public t_1st_StageEnd = 5 * (1 days); // Stage1 3 days open\r\n  // for testing\r\n  // uint256 public t_1st_StageEnd = 3 * (1 hours); // Stage1 3 days open\r\n\r\n  uint256 public t_2nd_StageEnd = 2 * (1 days); // Stage2 2 days open\r\n  // for testing\r\n  // uint256 public t_2nd_StageEnd = 2 * (1 hours); // Stage2 2 days open\r\n\r\n  uint256 public tCampaignEnd = 35 * (1 days); // Stage3 35 days open\r\n  // for testing\r\n  // uint256 public tCampaignEnd = 35 * (1 hours); // Stage3 35 days open\r\n\r\n  uint256 public tFinalized = 64060588800;\r\n\r\n  // participant data\r\n  struct ParticipantListData {\r\n\r\n    bool participatedFlag;\r\n\r\n    uint256 contributedAmountPreAllocated;\r\n    uint256 contributedAmountPreCrowd;\r\n    uint256 contributedAmountStage1;\r\n    uint256 contributedAmountStage2;\r\n    uint256 contributedAmountStage3;\r\n\r\n    uint256 preallocatedTokens;\r\n    uint256 allocatedTokens;\r\n\r\n    uint256 spentAmount;\r\n  }\r\n\r\n  /** participant addresses */\r\n  mapping (address => ParticipantListData) public participantList;\r\n\r\n  uint256 public investorsProcessed = 0;\r\n  uint256 public investorsBatchSize = 100;\r\n\r\n  bool public isWhiteListed = true;\r\n\r\n  struct WhiteListData {\r\n    bool status;\r\n    uint256 maxCap;\r\n  }\r\n\r\n  /** Whitelisted addresses */\r\n  mapping (address => WhiteListData) public participantWhitelist;\r\n\r\n\r\n  //////////////////////////////////////////////\r\n  //\r\n  // Events\r\n \r\n  event CampaignOpen(uint256 timenow);\r\n  event CampaignClosed(uint256 timenow);\r\n  event CampaignPaused(uint256 timenow);\r\n  event CampaignResumed(uint256 timenow);\r\n\r\n  event PreAllocated(address indexed backer, uint256 raised);\r\n  event RaisedPreCrowd(address indexed backer, uint256 raised);\r\n  event RaisedStage1(address indexed backer, uint256 raised);\r\n  event RaisedStage2(address indexed backer, uint256 raised);\r\n  event RaisedStage3(address indexed backer, uint256 raised);\r\n  event Airdropped(address indexed backer, uint256 tokensairdropped);\r\n\r\n  event Finalized(uint256 timenow);\r\n\r\n  event ClaimedTokens(address indexed _token, address indexed _controller, uint256 _amount);\r\n\r\n  // Address early participation whitelist status changed\r\n  event Whitelisted(address addr, bool status);\r\n\r\n  // Refund was processed for a contributor\r\n  event Refund(address investor, uint256 weiAmount);\r\n\r\n  /// @notice Constructor\r\n  /// @param _tokenAddress Our token's address\r\n  /// @param  _trusteeAddress Trustee address\r\n  /// @param  _opAddress Operational expenses address \r\n  /// @param  _reserveAddress Project Token Reserve\r\n  function TokenCampaign(\r\n    address _tokenAddress,\r\n    address _dteamAddress1,\r\n    address _dteamAddress2,\r\n    address _dteamAddress3,\r\n    address _dteamAddress4,\r\n    address _rteamAddress,\r\n    address _r2Address,\r\n    address _mmAddress,\r\n    address _trusteeAddress,\r\n    address _opAddress,\r\n    address _reserveAddress)\r\n  {\r\n\r\n    controller = msg.sender;\r\n    \r\n    /// set addresses     \r\n    tokenAddr = _tokenAddress;\r\n    dteamVaultAddr1 = _dteamAddress1;\r\n    dteamVaultAddr2 = _dteamAddress2;\r\n    dteamVaultAddr3 = _dteamAddress3;\r\n    dteamVaultAddr4 = _dteamAddress4;\r\n    rteamVaultAddr = _rteamAddress;\r\n    r2VaultAddr = _r2Address;\r\n    mmVaultAddr = _mmAddress;\r\n    trusteeVaultAddr = _trusteeAddress; \r\n    opVaultAddr = _opAddress;\r\n    reserveVaultAddr = _reserveAddress;\r\n\r\n    /// reference our token\r\n    token = eat_token_interface(tokenAddr);\r\n   \r\n  }\r\n\r\n\r\n  /////////////////////////////////////////////\r\n  ///\r\n  /// Functions that change contract state\r\n\r\n  ///\r\n  /// Setters\r\n  ///\r\n\r\n  /// @notice  Puts campaign into active state  \r\n  ///  only controller can do that\r\n  ///  only possible if team token Vault is set up\r\n  ///  WARNING: usual caveats apply to the Ethereum's interpretation of time\r\n  function startSale() public onlyController {\r\n    require( campaignState > 2 );\r\n\r\n    campaignState = 2;\r\n\r\n    uint256 tNow = now;\r\n    // assume timestamps will not cause overflow\r\n    tCampaignStart = tNow;\r\n    t_1st_StageEnd += tNow;\r\n    t_2nd_StageEnd += tNow;\r\n    tCampaignEnd += tNow;\r\n\r\n    CampaignOpen(now);\r\n  }\r\n\r\n\r\n  /// @notice Pause sale\r\n  ///   just in case we have some troubles \r\n  ///   Note that time marks are not updated\r\n  function pauseSale() public onlyController {\r\n    require( campaignState  == 2 );\r\n    paused = true;\r\n    CampaignPaused(now);\r\n  }\r\n\r\n\r\n  /// @notice Resume sale\r\n  function resumeSale() public onlyController {\r\n    require( campaignState  == 2 );\r\n    paused = false;\r\n    CampaignResumed(now);\r\n  }\r\n\r\n\r\n\r\n  /// @notice Puts the camapign into closed state\r\n  ///   only controller can do so\r\n  ///   only possible from the active state\r\n  ///   we can call this function if we want to stop sale before end time \r\n  ///   and be able to perform 'finalizeCampaign()' immediately\r\n  function closeSale() public onlyController {\r\n    require( campaignState  == 2 );\r\n    campaignState = 1;\r\n\r\n    CampaignClosed(now);\r\n  }   \r\n\r\n\r\n  function setParticipantWhitelist(address addr, bool status, uint256 maxCap) public onlyController {\r\n    participantWhitelist[addr] = WhiteListData({status:status, maxCap:maxCap});\r\n    Whitelisted(addr, status);\r\n  }\r\n\r\n  function setMultipleParticipantWhitelist(address[] addrs, bool[] statuses, uint[] maxCaps) public onlyController {\r\n    for (uint256 iterator = 0; iterator < addrs.length; iterator++) {\r\n      setParticipantWhitelist(addrs[iterator], statuses[iterator], maxCaps[iterator]);\r\n    }\r\n  }\r\n\r\n  function investorCount() public constant returns (uint256) {\r\n    return joinedCrowdsale.length;\r\n  }\r\n\r\n  function contractBalance() public constant returns (uint256) {\r\n    return this.balance;\r\n  }\r\n\r\n  /**\r\n   * Investors can claim refund after finalisation.\r\n   *\r\n   * Note that any refunds from proxy buyers should be handled separately,\r\n   * and not through this contract.\r\n   */\r\n  function refund() public {\r\n    require (campaignState == 0);\r\n\r\n    uint256 weiValue = participantList[msg.sender].contributedAmountPreCrowd;\r\n    weiValue = weiValue.add(participantList[msg.sender].contributedAmountStage1);\r\n    weiValue = weiValue.add(participantList[msg.sender].contributedAmountStage2);\r\n    weiValue = weiValue.add(participantList[msg.sender].contributedAmountStage3);\r\n    weiValue = weiValue.sub(participantList[msg.sender].spentAmount);\r\n\r\n    if (weiValue <= 0) revert();\r\n\r\n    participantList[msg.sender].contributedAmountPreCrowd = 0;\r\n    participantList[msg.sender].contributedAmountStage1 = 0;\r\n    participantList[msg.sender].contributedAmountStage2 = 0;\r\n    participantList[msg.sender].contributedAmountStage3 = 0;\r\n\r\n    amountRefunded = amountRefunded.add(weiValue);\r\n\r\n    // send it\r\n    if (!msg.sender.send(weiValue)) revert();\r\n\r\n    // announce to world\r\n    Refund(msg.sender, weiValue);\r\n\r\n  }\r\n\r\n  /// @notice Finalizes the campaign\r\n  ///   Get funds out, generates team, reserve and reserve tokens\r\n  function allocateInvestors() public onlyController {     \r\n      \r\n    /// only if sale was closed or 48 hours = 2880 minutes have passed since campaign end\r\n    /// we leave this time to complete possibly pending orders from offchain contributions \r\n\r\n    require ( (campaignState == 1) || ((campaignState != 0) && (now > tCampaignEnd + (2880 minutes))));\r\n\r\n    uint256 nTokens = 0;\r\n    uint256 rate = 0;\r\n    uint256 contributedAmount = 0; \r\n\r\n    uint256 investorsProcessedEnd = investorsProcessed + investorsBatchSize;\r\n\r\n    if (investorsProcessedEnd > joinedCrowdsale.length) {\r\n      investorsProcessedEnd = joinedCrowdsale.length;\r\n    }\r\n\r\n    for (uint256 i = investorsProcessed; i < investorsProcessedEnd; i++) {\r\n\r\n        investorsProcessed++;\r\n\r\n        address investorAddress = joinedCrowdsale[i];\r\n\r\n        // PreCrowd stage\r\n        contributedAmount = participantList[investorAddress].contributedAmountPreCrowd;\r\n\r\n        if (isWhiteListed) {\r\n\r\n            // is contributeAmount within whitelisted amount\r\n            if (contributedAmount > participantWhitelist[investorAddress].maxCap) {\r\n                contributedAmount = participantWhitelist[investorAddress].maxCap;\r\n            }\r\n\r\n            // calculate remaining whitelisted amount\r\n            if (contributedAmount>0) {\r\n                participantWhitelist[investorAddress].maxCap = participantWhitelist[investorAddress].maxCap.sub(contributedAmount);\r\n            }\r\n\r\n        }\r\n\r\n        if (contributedAmount>0) {\r\n\r\n            // calculate the number of tokens\r\n            rate = preCrowd_tokens_scaled;\r\n            nTokens = (rate.mul(contributedAmount)).div(1 ether);\r\n\r\n            // check whether individual allocations are capped\r\n            if (nTokens > maxPreCrowdAllocationPerInvestor) {\r\n              nTokens = maxPreCrowdAllocationPerInvestor;\r\n            }\r\n\r\n            // If tokens are bigger than whats left in the stage, give the rest \r\n            if (tokensRemainingPreCrowd.sub(nTokens) < 0) {\r\n                nTokens = tokensRemainingPreCrowd;\r\n            }\r\n\r\n            // update spent amount\r\n            participantList[joinedCrowdsale[i]].spentAmount = participantList[joinedCrowdsale[i]].spentAmount.add(nTokens.div(rate).mul(1 ether));\r\n\r\n            // calculate leftover tokens for the stage \r\n            tokensRemainingPreCrowd = tokensRemainingPreCrowd.sub(nTokens);\r\n\r\n            // update the new token holding\r\n            participantList[investorAddress].allocatedTokens = participantList[investorAddress].allocatedTokens.add(nTokens);\r\n\r\n        }\r\n\r\n        //  stage1\r\n        contributedAmount = participantList[investorAddress].contributedAmountStage1;\r\n\r\n        if (isWhiteListed) {\r\n\r\n            // is contributeAmount within whitelisted amount\r\n            if (contributedAmount > participantWhitelist[investorAddress].maxCap) {\r\n                contributedAmount = participantWhitelist[investorAddress].maxCap;\r\n            }\r\n\r\n            // calculate remaining whitelisted amount\r\n            if (contributedAmount>0) {\r\n                participantWhitelist[investorAddress].maxCap = participantWhitelist[investorAddress].maxCap.sub(contributedAmount);\r\n            }\r\n\r\n        }\r\n\r\n        if (contributedAmount>0) {\r\n\r\n            // calculate the number of tokens\r\n            rate = stage_1_tokens_scaled;\r\n            nTokens = (rate.mul(contributedAmount)).div(1 ether);\r\n\r\n            // check whether individual allocations are capped\r\n            if (nTokens > maxStage1AllocationPerInvestor) {\r\n              nTokens = maxStage1AllocationPerInvestor;\r\n            }\r\n\r\n            // If tokens are bigger than whats left in the stage, give the rest \r\n            if (tokensRemainingStage1.sub(nTokens) < 0) {\r\n                nTokens = tokensRemainingStage1;\r\n            }\r\n\r\n            // update spent amount\r\n            participantList[joinedCrowdsale[i]].spentAmount = participantList[joinedCrowdsale[i]].spentAmount.add(nTokens.div(rate).mul(1 ether));\r\n\r\n            // calculate leftover tokens for the stage \r\n            tokensRemainingStage1 = tokensRemainingStage1.sub(nTokens);\r\n\r\n            // update the new token holding\r\n            participantList[investorAddress].allocatedTokens = participantList[investorAddress].allocatedTokens.add(nTokens);\r\n\r\n        }\r\n\r\n        //  stage2\r\n        contributedAmount = participantList[investorAddress].contributedAmountStage2;\r\n\r\n        if (isWhiteListed) {\r\n\r\n            // is contributeAmount within whitelisted amount\r\n            if (contributedAmount > participantWhitelist[investorAddress].maxCap) {\r\n                contributedAmount = participantWhitelist[investorAddress].maxCap;\r\n            }\r\n\r\n            // calculate remaining whitelisted amount\r\n            if (contributedAmount>0) {\r\n                participantWhitelist[investorAddress].maxCap = participantWhitelist[investorAddress].maxCap.sub(contributedAmount);\r\n            }\r\n\r\n        }\r\n\r\n        if (contributedAmount>0) {\r\n\r\n            // calculate the number of tokens\r\n            rate = stage_2_tokens_scaled;\r\n            nTokens = (rate.mul(contributedAmount)).div(1 ether);\r\n\r\n            // check whether individual allocations are capped\r\n            if (nTokens > maxStage2AllocationPerInvestor) {\r\n              nTokens = maxStage2AllocationPerInvestor;\r\n            }\r\n\r\n            // If tokens are bigger than whats left in the stage, give the rest \r\n            if (tokensRemainingStage2.sub(nTokens) < 0) {\r\n                nTokens = tokensRemainingStage2;\r\n            }\r\n\r\n            // update spent amount\r\n            participantList[joinedCrowdsale[i]].spentAmount = participantList[joinedCrowdsale[i]].spentAmount.add(nTokens.div(rate).mul(1 ether));\r\n\r\n            // calculate leftover tokens for the stage \r\n            tokensRemainingStage2 = tokensRemainingStage2.sub(nTokens);\r\n\r\n            // update the new token holding\r\n            participantList[investorAddress].allocatedTokens = participantList[investorAddress].allocatedTokens.add(nTokens);\r\n\r\n        }\r\n\r\n        //  stage3\r\n        contributedAmount = participantList[investorAddress].contributedAmountStage3;\r\n\r\n        if (isWhiteListed) {\r\n\r\n            // is contributeAmount within whitelisted amount\r\n            if (contributedAmount > participantWhitelist[investorAddress].maxCap) {\r\n                contributedAmount = participantWhitelist[investorAddress].maxCap;\r\n            }\r\n\r\n            // calculate remaining whitelisted amount\r\n            if (contributedAmount>0) {\r\n                participantWhitelist[investorAddress].maxCap = participantWhitelist[investorAddress].maxCap.sub(contributedAmount);\r\n            }\r\n\r\n        }\r\n\r\n        if (contributedAmount>0) {\r\n\r\n            // calculate the number of tokens\r\n            rate = stage_3_tokens_scaled;\r\n            nTokens = (rate.mul(contributedAmount)).div(1 ether);\r\n\r\n            // check whether individual allocations are capped\r\n            if (nTokens > maxStage3AllocationPerInvestor) {\r\n              nTokens = maxStage3AllocationPerInvestor;\r\n            }\r\n\r\n            // If tokens are bigger than whats left in the stage, give the rest \r\n            if (tokensRemainingStage3.sub(nTokens) < 0) {\r\n                nTokens = tokensRemainingStage3;\r\n            }\r\n\r\n            // update spent amount\r\n            participantList[joinedCrowdsale[i]].spentAmount = participantList[joinedCrowdsale[i]].spentAmount.add(nTokens.div(rate).mul(1 ether));\r\n\r\n            // calculate leftover tokens for the stage \r\n            tokensRemainingStage3 = tokensRemainingStage3.sub(nTokens);\r\n\r\n            // update the new token holding\r\n            participantList[investorAddress].allocatedTokens = participantList[investorAddress].allocatedTokens.add(nTokens);\r\n\r\n        }\r\n\r\n        do_grant_tokens(investorAddress, participantList[investorAddress].allocatedTokens);\r\n\r\n    }\r\n\r\n  }\r\n\r\n  /// @notice Finalizes the campaign\r\n  ///   Get funds out, generates team, reserve and reserve tokens\r\n  function finalizeCampaign() public onlyController {     \r\n      \r\n    /// only if sale was closed or 48 hours = 2880 minutes have passed since campaign end\r\n    /// we leave this time to complete possibly pending orders from offchain contributions \r\n\r\n    require ( (campaignState == 1) || ((campaignState != 0) && (now > tCampaignEnd + (2880 minutes))));\r\n\r\n    campaignState = 0;\r\n\r\n    // dteam tokens\r\n    uint256 drewardTokens = (tokensGenerated.mul(PRCT100_D_TEAM)).div(10000);\r\n\r\n    // rteam tokens\r\n    uint256 rrewardTokens = (tokensGenerated.mul(PRCT100_R_TEAM)).div(10000);\r\n\r\n    // r2 tokens\r\n    uint256 r2rewardTokens = (tokensGenerated.mul(PRCT100_R2)).div(10000);\r\n\r\n    // mm tokens\r\n    uint256 mmrewardTokens = FIXEDREWARD_MM;\r\n\r\n    do_grant_tokens(dteamVaultAddr1, drewardTokens);\r\n    do_grant_tokens(dteamVaultAddr2, drewardTokens);\r\n    do_grant_tokens(dteamVaultAddr3, drewardTokens);\r\n    do_grant_tokens(dteamVaultAddr4, drewardTokens);     \r\n    do_grant_tokens(rteamVaultAddr, rrewardTokens);\r\n    do_grant_tokens(r2VaultAddr, r2rewardTokens);\r\n    do_grant_tokens(mmVaultAddr, mmrewardTokens);\r\n\r\n    // generate reserve tokens \r\n    // uint256 reserveTokens = rest of tokens under hardcap\r\n    uint256 reserveTokens = hardcap.sub(tokensGenerated);\r\n    do_grant_tokens(reserveVaultAddr, reserveTokens);\r\n\r\n    // prevent further token generation\r\n    token.finalize();\r\n\r\n    tFinalized = now;\r\n    \r\n    // notify the world\r\n    Finalized(tFinalized);\r\n  }\r\n\r\n\r\n  ///   Get funds out\r\n  function retrieveFunds() public onlyController {     \r\n\r\n      require (campaignState == 0);\r\n      \r\n      // forward funds to the trustee \r\n      // since we forward a fraction of the incomming ether on every contribution\r\n      // 'amountRaised' IS NOT equal to the contract's balance\r\n      // we use 'this.balance' instead\r\n\r\n      // we do this manually to give people the chance to claim refunds in case of overpayments\r\n\r\n      trusteeVaultAddr.transfer(this.balance);\r\n\r\n  }\r\n\r\n     ///   Get funds out\r\n  function emergencyFinalize() public onlyController {     \r\n\r\n    campaignState = 0;\r\n\r\n    // prevent further token generation\r\n    token.finalize();\r\n\r\n  }\r\n\r\n\r\n  /// @notice triggers token generaton for the recipient\r\n  ///  can be called only from the token sale contract itself\r\n  ///  side effect: increases the generated tokens counter \r\n  ///  CAUTION: we do not check campaign state and parameters assuming that's callee's task\r\n  function do_grant_tokens(address _to, uint256 _nTokens) internal returns (bool){\r\n    \r\n    require( token.generate_token_for(_to, _nTokens) );\r\n    \r\n    tokensGenerated = tokensGenerated.add(_nTokens);\r\n    \r\n    return true;\r\n  }\r\n\r\n\r\n  ///  @notice processes the contribution\r\n  ///   checks campaign state, time window and minimal contribution\r\n  ///   throws if one of the conditions fails\r\n  function process_contribution(address _toAddr) internal {\r\n\r\n    require ((campaignState == 2)   // active main sale\r\n         && (now <= tCampaignEnd)   // within time window\r\n         && (paused == false));     // not on hold\r\n    \r\n    // we check that Eth sent is sufficient \r\n    // though our token has decimals we don't want nanocontributions\r\n    require ( msg.value >= minContribution );\r\n\r\n    amountRaised = amountRaised.add(msg.value);\r\n\r\n    // check whether we know this investor, if not add him to list\r\n    if (!participantList[_toAddr].participatedFlag) {\r\n\r\n       // A new investor\r\n       participantList[_toAddr].participatedFlag = true;\r\n       joinedCrowdsale.push(_toAddr);\r\n    }\r\n\r\n    if ( msg.value >= preCrowdMinContribution ) {\r\n\r\n      participantList[_toAddr].contributedAmountPreCrowd = participantList[_toAddr].contributedAmountPreCrowd.add(msg.value);\r\n      \r\n      // notify the world\r\n      RaisedPreCrowd(_toAddr, msg.value);\r\n\r\n    } else {\r\n\r\n      if (now <= t_1st_StageEnd) {\r\n\r\n        participantList[_toAddr].contributedAmountStage1 = participantList[_toAddr].contributedAmountStage1.add(msg.value);\r\n\r\n        // notify the world\r\n        RaisedStage1(_toAddr, msg.value);\r\n\r\n      } else if (now <= t_2nd_StageEnd) {\r\n\r\n        participantList[_toAddr].contributedAmountStage2 = participantList[_toAddr].contributedAmountStage2.add(msg.value);\r\n\r\n        // notify the world\r\n        RaisedStage2(_toAddr, msg.value);\r\n\r\n      } else {\r\n\r\n        participantList[_toAddr].contributedAmountStage3 = participantList[_toAddr].contributedAmountStage3.add(msg.value);\r\n        \r\n        // notify the world\r\n        RaisedStage3(_toAddr, msg.value);\r\n\r\n      }\r\n\r\n    }\r\n\r\n    // compute the fraction of ETH going to op account\r\n    uint256 opEth = (PRCT100_ETH_OP.mul(msg.value)).div(10000);\r\n\r\n    // transfer to op account \r\n    opVaultAddr.transfer(opEth);\r\n\r\n    // transfer to reserve account \r\n    reserveVaultAddr.transfer(opEth);\r\n\r\n  }\r\n\r\n  /**\r\n  * Preallocated tokens have been sold or given in airdrop before the actual crowdsale opens. \r\n  * This function mints the tokens and moves the crowdsale needle.\r\n  *\r\n  */\r\n  function preallocate(address _toAddr, uint fullTokens, uint weiPaid) public onlyController {\r\n\r\n    require (campaignState != 0);\r\n\r\n    uint tokenAmount = fullTokens * scale;\r\n    uint weiAmount = weiPaid ; // This can be also 0, we give out tokens for free\r\n\r\n    if (!participantList[_toAddr].participatedFlag) {\r\n\r\n       // A new investor\r\n       participantList[_toAddr].participatedFlag = true;\r\n       joinedCrowdsale.push(_toAddr);\r\n\r\n    }\r\n\r\n    participantList[_toAddr].contributedAmountPreAllocated = participantList[_toAddr].contributedAmountPreAllocated.add(weiAmount);\r\n    participantList[_toAddr].preallocatedTokens = participantList[_toAddr].preallocatedTokens.add(tokenAmount);\r\n\r\n    amountRaised = amountRaised.add(weiAmount);\r\n\r\n    // side effect: do_grant_tokens updates the \"tokensGenerated\" variable\r\n    require( do_grant_tokens(_toAddr, tokenAmount) );\r\n\r\n    // notify the world\r\n    PreAllocated(_toAddr, weiAmount);\r\n\r\n  }\r\n\r\n  function airdrop(address _toAddr, uint fullTokens) public onlyController {\r\n\r\n    require (campaignState != 0);\r\n\r\n    uint tokenAmount = fullTokens * scale;\r\n\r\n    if (!participantList[_toAddr].participatedFlag) {\r\n\r\n       // A new investor\r\n       participantList[_toAddr].participatedFlag = true;\r\n       joinedCrowdsale.push(_toAddr);\r\n\r\n    }\r\n\r\n    participantList[_toAddr].preallocatedTokens = participantList[_toAddr].allocatedTokens.add(tokenAmount);\r\n\r\n    // side effect: do_grant_tokens updates the \"tokensGenerated\" variable\r\n    require( do_grant_tokens(_toAddr, tokenAmount) );\r\n\r\n    // notify the world\r\n    Airdropped(_toAddr, fullTokens);\r\n\r\n  }\r\n\r\n  function multiAirdrop(address[] addrs, uint[] fullTokens) public onlyController {\r\n\r\n    require (campaignState != 0);\r\n\r\n    for (uint256 iterator = 0; iterator < addrs.length; iterator++) {\r\n      airdrop(addrs[iterator], fullTokens[iterator]);\r\n    }\r\n  }\r\n\r\n  // set individual preCrowd cap\r\n  function setInvestorsBatchSize(uint256 _batchsize) public onlyController {\r\n      investorsBatchSize = _batchsize;\r\n  }\r\n\r\n  // set individual preCrowd cap\r\n  function setMaxPreCrowdAllocationPerInvestor(uint256 _cap) public onlyController {\r\n      maxPreCrowdAllocationPerInvestor = _cap;\r\n  }\r\n\r\n  // set individual stage1Crowd cap\r\n  function setMaxStage1AllocationPerInvestor(uint256 _cap) public onlyController {\r\n      maxStage1AllocationPerInvestor = _cap;\r\n  }\r\n\r\n  // set individual stage2Crowd cap\r\n  function setMaxStage2AllocationPerInvestor(uint256 _cap) public onlyController {\r\n      maxStage2AllocationPerInvestor = _cap;\r\n  }\r\n\r\n  // set individual stage3Crowd cap\r\n  function setMaxStage3AllocationPerInvestor(uint256 _cap) public onlyController {\r\n      maxStage3AllocationPerInvestor = _cap;\r\n  }\r\n\r\n  function setdteamVaultAddr1(address _newAddr) public onlyController {\r\n    require( _newAddr != 0x0 );\r\n    dteamVaultAddr1 = _newAddr;\r\n  }\r\n\r\n  function setdteamVaultAddr2(address _newAddr) public onlyController {\r\n    require( _newAddr != 0x0 );\r\n    dteamVaultAddr2 = _newAddr;\r\n  }\r\n\r\n  function setdteamVaultAddr3(address _newAddr) public onlyController {\r\n    require( _newAddr != 0x0 );\r\n    dteamVaultAddr3 = _newAddr;\r\n  }\r\n\r\n  function setdteamVaultAddr4(address _newAddr) public onlyController {\r\n    require( _newAddr != 0x0 );\r\n    dteamVaultAddr4 = _newAddr;\r\n  }\r\n\r\n  function setrteamVaultAddr(address _newAddr) public onlyController {\r\n    require( _newAddr != 0x0 );\r\n    rteamVaultAddr = _newAddr;\r\n  }\r\n\r\n  function setr2VaultAddr(address _newAddr) public onlyController {\r\n    require( _newAddr != 0x0 );\r\n    r2VaultAddr = _newAddr;\r\n  }\r\n\r\n  function setmmVaultAddr(address _newAddr) public onlyController {\r\n    require( _newAddr != 0x0 );\r\n    mmVaultAddr = _newAddr;\r\n  }\r\n\r\n  function settrusteeVaultAddr(address _newAddr) public onlyController {\r\n    require( _newAddr != 0x0 );\r\n    trusteeVaultAddr = _newAddr;\r\n  }\r\n\r\n  function setopVaultAddr(address _newAddr) public onlyController {\r\n    require( _newAddr != 0x0 );\r\n    opVaultAddr = _newAddr;\r\n  }\r\n\r\n  function toggleWhitelist(bool _isWhitelisted) public onlyController {\r\n    isWhiteListed = _isWhitelisted;\r\n  }\r\n\r\n  /// @notice This function handles receiving Ether in favor of a third party address\r\n  ///   we can use this function for buying tokens on behalf\r\n  /// @param _toAddr the address which will receive tokens\r\n  function proxy_contribution(address _toAddr) public payable {\r\n    require ( _toAddr != 0x0 );\r\n\r\n    process_contribution(_toAddr);\r\n  }\r\n\r\n\r\n  /// @notice This function handles receiving Ether\r\n  function () payable {\r\n      process_contribution(msg.sender); \r\n  }\r\n\r\n  /// This method can be used by the controller to extract mistakenly\r\n  ///  sent tokens to this contract.\r\n  function claimTokens(address _tokenAddr) public onlyController {\r\n\r\n      ERC20Basic some_token = ERC20Basic(_tokenAddr);\r\n      uint256 balance = some_token.balanceOf(this);\r\n      some_token.transfer(controller, balance);\r\n      ClaimedTokens(_tokenAddr, controller, balance);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"settrusteeVaultAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dteamVaultAddr3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxStage2AllocationPerInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage_2_tokens_scaled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setMaxStage2AllocationPerInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage_3_tokens_scaled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tCampaignEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Stage1Allocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPreCrowdAllocationPerInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddr\",\"type\":\"address\"},{\"name\":\"fullTokens\",\"type\":\"uint256\"},{\"name\":\"weiPaid\",\"type\":\"uint256\"}],\"name\":\"preallocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxStage3AllocationPerInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"setopVaultAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreCrowdAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participantList\",\"outputs\":[{\"name\":\"participatedFlag\",\"type\":\"bool\"},{\"name\":\"contributedAmountPreAllocated\",\"type\":\"uint256\"},{\"name\":\"contributedAmountPreCrowd\",\"type\":\"uint256\"},{\"name\":\"contributedAmountStage1\",\"type\":\"uint256\"},{\"name\":\"contributedAmountStage2\",\"type\":\"uint256\"},{\"name\":\"contributedAmountStage3\",\"type\":\"uint256\"},{\"name\":\"preallocatedTokens\",\"type\":\"uint256\"},{\"name\":\"allocatedTokens\",\"type\":\"uint256\"},{\"name\":\"spentAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"r2VaultAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rteamVaultAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsProcessed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRemainingStage1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setMaxPreCrowdAllocationPerInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"opVaultAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"setr2VaultAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Stage2Allocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dteamVaultAddr4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"setdteamVaultAddr1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dteamVaultAddr1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dteamVaultAddr2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"retrieveFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRCT100_ETH_OP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"bool\"},{\"name\":\"maxCap\",\"type\":\"uint256\"}],\"name\":\"setParticipantWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"setdteamVaultAddr2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"toggleWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_batchsize\",\"type\":\"uint256\"}],\"name\":\"setInvestorsBatchSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participantWhitelist\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"},{\"name\":\"maxCap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRCT100_D_TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRemainingStage3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddr\",\"type\":\"address\"},{\"name\":\"fullTokens\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRCT100_R2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxStage1AllocationPerInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyFinalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensGenerated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preCrowd_tokens_scaled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCampaign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tCampaignStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setMaxStage3AllocationPerInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddr\",\"type\":\"address\"}],\"name\":\"proxy_contribution\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"setdteamVaultAddr4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"statuses\",\"type\":\"bool[]\"},{\"name\":\"maxCaps\",\"type\":\"uint256[]\"}],\"name\":\"setMultipleParticipantWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"setrteamVaultAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preCrowdMinContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveVaultAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRCT100_R_TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FIXEDREWARD_MM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"setdteamVaultAddr3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trusteeVaultAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"t_1st_StageEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setMaxStage1AllocationPerInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"t_2nd_StageEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"setmmVaultAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"fullTokens\",\"type\":\"uint256[]\"}],\"name\":\"multiAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Stage3Allocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage_1_tokens_scaled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateInvestors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsBatchSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRemainingPreCrowd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mmVaultAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"joinedCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isWhiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRemainingStage2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"campaignState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"scale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_dteamAddress1\",\"type\":\"address\"},{\"name\":\"_dteamAddress2\",\"type\":\"address\"},{\"name\":\"_dteamAddress3\",\"type\":\"address\"},{\"name\":\"_dteamAddress4\",\"type\":\"address\"},{\"name\":\"_rteamAddress\",\"type\":\"address\"},{\"name\":\"_r2Address\",\"type\":\"address\"},{\"name\":\"_mmAddress\",\"type\":\"address\"},{\"name\":\"_trusteeAddress\",\"type\":\"address\"},{\"name\":\"_opAddress\",\"type\":\"address\"},{\"name\":\"_reserveAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timenow\",\"type\":\"uint256\"}],\"name\":\"CampaignOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timenow\",\"type\":\"uint256\"}],\"name\":\"CampaignClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timenow\",\"type\":\"uint256\"}],\"name\":\"CampaignPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timenow\",\"type\":\"uint256\"}],\"name\":\"CampaignResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"raised\",\"type\":\"uint256\"}],\"name\":\"PreAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"raised\",\"type\":\"uint256\"}],\"name\":\"RaisedPreCrowd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"raised\",\"type\":\"uint256\"}],\"name\":\"RaisedStage1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"raised\",\"type\":\"uint256\"}],\"name\":\"RaisedStage2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"raised\",\"type\":\"uint256\"}],\"name\":\"RaisedStage3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensairdropped\",\"type\":\"uint256\"}],\"name\":\"Airdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timenow\",\"type\":\"uint256\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"}]","ContractName":"TokenCampaign","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000158813d43fa4d02443a2d783f2a3ed0e2bb42a0900000000000000000000000002e5496c52a92c6086424418e3ec08997d01549d0000000000000000000000001d247aa35e722a25e1ac8210895f2bfcebd1f7ce000000000000000000000000c6ce19a1690f4a949bc71beefcbd227a52b13987000000000000000000000000b80b6f95c7711cad4fa62a8c65891f58b25e6ea8000000000000000000000000ebe98c1d09ebd3e994f82fa72071f2604f4f945200000000000000000000000018899838a2d38353fda812e67c9b448777f163370000000000000000000000005cbb15e9fd72e6483ad61e7d692551019ff477c30000000000000000000000000aa973f3cbd41e97e4655b4a777a72956483ba0f000000000000000000000000ea73fa8249cf85ab0f0ebfbc18788ef5fb155ffc0000000000000000000000000aa973f3cbd41e97e4655b4a777a72956483ba0f","Library":"","SwarmSource":"bzzr://87108df9b7a6c2e35658ac3e64c18e6dbca67dc098f17d6860f2a89dda505800"}]}