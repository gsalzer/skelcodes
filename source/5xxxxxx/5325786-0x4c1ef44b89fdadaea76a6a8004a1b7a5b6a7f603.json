{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.19;\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n  * account.\r\n  */\r\n    function Ownable()public {\r\n        owner = msg.sender;\r\n    }\r\n    /**\r\n  * @dev Throws if called by any account other than the owner.\r\n  */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    /**\r\n  * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n  * @param newOwner The address to transfer ownership to.\r\n  */\r\n    function transferOwnership(address newOwner)public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b)internal pure returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b)internal pure returns(uint256) {\r\n        assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b);  There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b)internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b)internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n\r\n  function Destructible() public payable { }\r\n\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() onlyOwner public {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) onlyOwner public {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Destructible {\r\n    event Pause();\r\n    event Unpause();\r\n    bool public paused = false;\r\n    /**\r\n  * @dev Modifier to make a function callable only when the contract is not paused.\r\n  */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n    /**\r\n  * @dev Modifier to make a function callable only when the contract is paused.\r\n  */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n    /**\r\n  * @dev called by the owner to pause, triggers stopped state\r\n  */\r\n    function pause()onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n    /**\r\n  * @dev called by the owner to unpause, returns to normal state\r\n  */\r\n    function unpause()onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    uint256 public completeRemainingTokens;\r\n    function balanceOf(address who)public view returns(uint256);\r\n    function transfer(address to, uint256 value)public returns(bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic,\r\nPausable {\r\n    uint256 startPreSale; uint256 endPreSale; uint256 startSale; \r\n    uint256 endSale; \r\n    using SafeMath for uint256; mapping(address => uint256)balances; uint256 preICOReserveTokens; uint256 icoReserveTokens; \r\n    address businessReserveAddress; uint256 public timeLock = 1586217600; //7 April 2020 locked\r\n    uint256 public incentiveTokensLimit;\r\n    modifier checkAdditionalTokenLock(uint256 value) {\r\n\r\n        if (msg.sender == businessReserveAddress) {\r\n            \r\n            if ((now<endSale) ||(now < timeLock &&value>incentiveTokensLimit)) {\r\n                revert();\r\n            } else {\r\n                _;\r\n            }\r\n        } else {\r\n            _;\r\n        }\r\n\r\n    }\r\n    \r\n    function updateTimeLock(uint256 _timeLock) external onlyOwner {\r\n        timeLock = _timeLock;\r\n    }\r\n    function updateBusinessReserveAddress(address _businessAddress) external onlyOwner {\r\n        businessReserveAddress =_businessAddress;\r\n    }\r\n    \r\n    function updateIncentiveTokenLimit(uint256 _incentiveTokens) external onlyOwner {\r\n      incentiveTokensLimit = _incentiveTokens;\r\n   }    \r\n    /**\r\n * @dev transfer token for a specified address\r\n * @param _to The address to transfer to.\r\n * @param _value The amount to be transferred.\r\n */\r\n    function transfer(address _to, uint256 _value)public whenNotPaused checkAdditionalTokenLock(_value) returns(\r\n        bool\r\n    ) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n * @dev Gets the balance of the specified address.\r\n * @param _owner The address to query the the balance of.\r\n * @return An uint256 representing the amount owned by the passed address.\r\n */\r\n    function balanceOf(address _owner)public constant returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)public view returns(uint256);\r\n    function transferFrom(address from, address to, uint256 value)public returns(\r\n        bool\r\n    );\r\n    function approve(address spender, uint256 value)public returns(bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n   * @dev Burns a all amount of tokens of address.\r\n   */\r\n    function burn()public {\r\n        uint256 _value = balances[msg.sender];\r\n        // no need to require value <= totalSupply, since that would imply the sender's\r\n        // balance is greater than the totalSupply, which *should* be an assertion\r\n        // failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(burner, _value);\r\n        emit Transfer(burner, address(0), _value);\r\n    }\r\n}\r\n\r\ncontract StandardToken is ERC20,BurnableToken {\r\n    mapping(address => mapping(address => uint256))internal allowed;\r\n\r\n    /**\r\n  * @dev Transfer tokens from one address to another\r\n  * @param _from address The address which you want to send tokens from\r\n  * @param _to address The address which you want to transfer to\r\n  * @param _value uint256 the amount of tokens to be transferred\r\n  */\r\n    function transferFrom(address _from, address _to, uint256 _value)public whenNotPaused checkAdditionalTokenLock(_value) returns(\r\n        bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    /**\r\n  * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n  *\r\n  * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n  * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n  * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n  * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n  * @param _spender The address which will spend the funds.\r\n  * @param _value The amount of tokens to be spent.\r\n  */\r\n    function approve(address _spender, uint256 _value)public checkAdditionalTokenLock(_value) returns(\r\n        bool\r\n    ) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    /**\r\n  * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n  * @param _owner address The address which owns the funds.\r\n  * @param _spender address The address which will spend the funds.\r\n  * @return A uint256 specifying the amount of tokens still available for the spender.\r\n  */\r\n    function allowance(address _owner, address _spender)public constant returns(\r\n        uint256 remaining\r\n    ) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    /**\r\n  * approve should be called when allowed[_spender] == 0. To increment\r\n  * allowed value is better to use this function to avoid 2 calls (and wait until\r\n  * the first transaction is mined)\r\n  * From MonolithDAO Token.sol\r\n  */\r\n    function increaseApproval(address _spender, uint _addedValue)public checkAdditionalTokenLock(_addedValue) returns(\r\n        bool success\r\n    ) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    function decreaseApproval(address _spender, uint _subtractedValue)public returns(\r\n        bool success\r\n    ) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\ncontract SMRTCoin is StandardToken {\r\n    string public constant name = \"SMRT\";\r\n    uint public constant decimals = 18;\r\n    string public constant symbol = \"SMRT\";\r\n    using SafeMath for uint256; uint256 public weiRaised = 0; address depositWalletAddress; \r\n    event Buy(address _from, uint256 _ethInWei, string userId); \r\n    \r\n    function SMRTCoin()public {\r\n        owner = msg.sender;\r\n        totalSupply = 600000000 * (10 ** decimals);\r\n        preICOReserveTokens = 90000000 * (10 ** decimals);\r\n        icoReserveTokens = 210000000 * (10 ** decimals);\r\n        depositWalletAddress = 0x85a98805C17701504C252eAAB99f60C7c204A785; //TODO change\r\n        businessReserveAddress = 0x73FEC20272a555Af1AEA4bF27D406683632c2a8c; \r\n        balances[owner] = totalSupply;\r\n        emit Transfer(address(0), owner, totalSupply);\r\n        startPreSale = now; //TODO update 1521900000 24 march 14 00 00 UTC\r\n        endPreSale = 1524319200; //21 April 14 00 00 utc\r\n        startSale = endPreSale + 1;\r\n        endSale = startSale + 30 days;\r\n    }\r\n    function ()public {\r\n        revert();\r\n    }\r\n    /**\r\n   * This will be called by adding data to represnet data.\r\n   */\r\n    function buy(string userId)public payable whenNotPaused {\r\n        require(msg.value > 0);\r\n        require(msg.sender != address(0));\r\n        weiRaised += msg.value;\r\n        forwardFunds();\r\n        emit Buy(msg.sender, msg.value, userId);\r\n    }\r\n    /**\r\n   * This function will called by only distributors to send tokens by calculating from offchain listners\r\n   */\r\n    function getBonustokens(uint256 tokens)internal returns(uint256 bonusTokens) {\r\n        require(now <= endSale);\r\n        uint256 bonus;\r\n        if (now <= endPreSale) {\r\n            bonus = 50;\r\n        } else if (now < startSale + 1 weeks) {\r\n            bonus = 10;\r\n        } else if (now < startSale + 2 weeks) {\r\n            bonus = 5;\r\n        }\r\n\r\n        bonusTokens = ((tokens / 100) * bonus);\r\n    }\r\n    function CrowdSale(address recieverAddress, uint256 tokens)public onlyOwner {\r\n        tokens =  tokens.add(getBonustokens(tokens));\r\n        uint256 tokenLimit = (tokens.mul(20)).div(100); //as 20 becuase its 10 percnet of total\r\n        incentiveTokensLimit  = incentiveTokensLimit.add(tokenLimit);\r\n        if (now <= endPreSale && preICOReserveTokens >= tokens) {\r\n            preICOReserveTokens = preICOReserveTokens.sub(tokens);\r\n            transfer(businessReserveAddress, tokens);\r\n            transfer(recieverAddress, tokens);\r\n        } else if (now < endSale && icoReserveTokens >= tokens) {\r\n            icoReserveTokens = icoReserveTokens.sub(tokens);\r\n            transfer(businessReserveAddress, tokens);\r\n            transfer(recieverAddress, tokens);\r\n        }\r\n        else{ \r\n            revert();\r\n        }\r\n    }\r\n    /**\r\n  * @dev Determines how ETH is stored/forwarded on purchases.\r\n  */\r\n    function forwardFunds()internal {\r\n        depositWalletAddress.transfer(msg.value);\r\n    }\r\n    function changeDepositWalletAddress(address newDepositWalletAddr)external onlyOwner {\r\n        require(newDepositWalletAddr != 0);\r\n        depositWalletAddress = newDepositWalletAddr;\r\n    }\r\n    function updateSaleTime(uint256 _startSale, uint256 _endSale)external onlyOwner {\r\n        startSale = _startSale;\r\n        endSale = _endSale;\r\n    }\r\n\r\n \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_businessAddress\",\"type\":\"address\"}],\"name\":\"updateBusinessReserveAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeLock\",\"type\":\"uint256\"}],\"name\":\"updateTimeLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userId\",\"type\":\"string\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incentiveTokensLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recieverAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"CrowdSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDepositWalletAddr\",\"type\":\"address\"}],\"name\":\"changeDepositWalletAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_incentiveTokens\",\"type\":\"uint256\"}],\"name\":\"updateIncentiveTokenLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startSale\",\"type\":\"uint256\"},{\"name\":\"_endSale\",\"type\":\"uint256\"}],\"name\":\"updateSaleTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completeRemainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ethInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userId\",\"type\":\"string\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SMRTCoin","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://445e0a749421a87551d7ca5b5ff576c7844d185c640180f0b78eaafdf46e747c"}]}