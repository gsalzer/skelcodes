{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ninterface GACR {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function mint(address _to, uint256 _amount) external returns (bool);\r\n    function finishMinting() external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function setTeamAddress(address _teamFund) external;\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // ICO stage\r\n    enum CrowdsaleStage { PreICO, ICO }\r\n    CrowdsaleStage public stage = CrowdsaleStage.PreICO; // By default it's Pre Sale\r\n\r\n    // Token distribution\r\n    uint256 public constant maxTokens           = 50000000*1e18;    // max of GACR tokens\r\n    uint256 public constant tokensForSale       = 28500000*1e18;    // 57%\r\n    uint256 public constant tokensForBounty     = 1500000*1e18;     // 3%\r\n    uint256 public constant tokensForAdvisors   = 3000000*1e18;     // 6%\r\n    uint256 public constant tokensForTeam       = 9000000*1e18;     // 18%\r\n    uint256 public tokensForEcosystem           = 8000000*1e18;     // 16%\r\n\r\n    // Start & End time of Crowdsale\r\n    uint256 startTime   = 1522494000;   // 2018-03-31T11:00:00\r\n    uint256 endTime     = 1539169200;   // 2018-10-10T11:00:00\r\n\r\n    // The token being sold\r\n    GACR public token;\r\n\r\n    // Address where funds are collected\r\n    address public wallet;\r\n\r\n    // How many token units a buyer gets per wei\r\n    uint256 public rate;\r\n\r\n    // Amount of wei raised\r\n    uint256 public weiRaised;\r\n\r\n    // Limit for total contributions\r\n    uint256 public cap;\r\n\r\n    // KYC for ICO\r\n    mapping(address => bool) public whitelist;\r\n\r\n    /**\r\n     * Event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n     * @dev Event for whitelist update\r\n     * @param purchaser who add to whitelist\r\n     * @param status of purchased for whitelist\r\n     */\r\n    event WhitelistUpdate(address indexed purchaser, bool status);\r\n\r\n    /**\r\n     * @dev Event for crowdsale finalize\r\n     */\r\n    event Finalized();\r\n\r\n    /**\r\n     * @param _cap ether cap for Crowdsale\r\n     * @param _rate Number of token units a buyer gets per wei\r\n     * @param _wallet Address where collected funds will be forwarded to\r\n     */\r\n    constructor(uint256 _cap, uint256 _rate, address _wallet, address _token) public {\r\n        require(_cap > 0);\r\n        require(_rate > 0);\r\n        require(_wallet != address(0));\r\n\r\n        cap = _cap;\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n        token = GACR(_token);\r\n    }\r\n\r\n    /**\r\n     * @dev Check that sale is on\r\n     */\r\n    modifier saleIsOn() {\r\n        require(now > startTime && now < endTime);\r\n        _;\r\n    }\r\n\r\n    //note: only for test\r\n    //function setNowTime(uint value) public onlyOwner {\r\n    //    require(value != 0);\r\n    //    _nowTime = value;\r\n    //}\r\n\r\n    /**\r\n     * @dev Buy tokens\r\n     */\r\n    function buyTokens(address _beneficiary) saleIsOn public payable {\r\n        uint256 _weiAmount = msg.value;\r\n\r\n        require(_beneficiary != address(0));\r\n        require(_weiAmount != 0);\r\n        require(weiRaised.add(_weiAmount) <= cap);\r\n\r\n        require(stage==CrowdsaleStage.PreICO ||\r\n               (stage==CrowdsaleStage.ICO && isWhitelisted(_beneficiary)));\r\n\r\n        // calculate token amount to be created\r\n        uint256 _tokenAmount = _weiAmount.mul(rate);\r\n\r\n        // bonus calculation\r\n        uint256 bonusTokens = 0;\r\n        if (stage == CrowdsaleStage.PreICO) {\r\n            if (_tokenAmount >= 50e18 && _tokenAmount < 3000e18) {\r\n                bonusTokens = _tokenAmount.mul(23).div(100);\r\n            } else if (_tokenAmount >= 3000e18 && _tokenAmount < 15000e18) {\r\n                bonusTokens = _tokenAmount.mul(27).div(100);\r\n            } else if (_tokenAmount >= 15000e18 && _tokenAmount < 30000e18) {\r\n                bonusTokens = _tokenAmount.mul(30).div(100);\r\n            } else if (_tokenAmount >= 30000e18) {\r\n                bonusTokens = _tokenAmount.mul(35).div(100);\r\n            }\r\n        } else if (stage == CrowdsaleStage.ICO) {\r\n            uint256 _nowTime = now;\r\n\r\n            if (_nowTime >= 1531486800 && _nowTime < 1532696400) {\r\n                bonusTokens = _tokenAmount.mul(18).div(100);\r\n            } else if (_nowTime >= 1532696400 && _nowTime < 1533906000) {\r\n                bonusTokens = _tokenAmount.mul(15).div(100);\r\n            } else if (_nowTime >= 1533906000 && _nowTime < 1535115600) {\r\n                bonusTokens = _tokenAmount.mul(12).div(100);\r\n            } else if (_nowTime >= 1535115600 && _nowTime < 1536325200) {\r\n                bonusTokens = _tokenAmount.mul(9).div(100);\r\n            } else if (_nowTime >= 1536325200 && _nowTime < 1537534800) {\r\n                bonusTokens = _tokenAmount.mul(6).div(100);\r\n            } else if (_nowTime >= 1537534800 && _nowTime < endTime) {\r\n                bonusTokens = _tokenAmount.mul(3).div(100);\r\n            }\r\n        }\r\n        _tokenAmount += bonusTokens;\r\n\r\n        // check limit for sale\r\n        require(tokensForSale >= (token.totalSupply() + _tokenAmount));\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(_weiAmount);\r\n        token.mint(_beneficiary, _tokenAmount);\r\n\r\n        emit TokenPurchase(msg.sender, _beneficiary, _weiAmount, _tokenAmount);\r\n\r\n        wallet.transfer(_weiAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Payable function\r\n     */\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Change Crowdsale Stage.\r\n     * Options: PreICO, ICO\r\n     */\r\n    function setCrowdsaleStage(uint value) public onlyOwner {\r\n\r\n        CrowdsaleStage _stage;\r\n\r\n        if (uint256(CrowdsaleStage.PreICO) == value) {\r\n            _stage = CrowdsaleStage.PreICO;\r\n        } else if (uint256(CrowdsaleStage.ICO) == value) {\r\n            _stage = CrowdsaleStage.ICO;\r\n        }\r\n\r\n        stage = _stage;\r\n    }\r\n\r\n    /**\r\n     * @dev Set new rate (protection from strong volatility)\r\n     */\r\n    function setNewRate(uint _newRate) public onlyOwner {\r\n        require(_newRate > 0);\r\n        rate = _newRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Set hard cap (protection from strong volatility)\r\n     */\r\n    function setHardCap(uint256 _newCap) public onlyOwner {\r\n        require(_newCap > 0);\r\n        cap = _newCap;\r\n    }\r\n\r\n    /**\r\n     * @dev Set new wallet\r\n     */\r\n    function changeWallet(address _newWallet) public onlyOwner {\r\n        require(_newWallet != address(0));\r\n        wallet = _newWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Add/Remove to whitelist array of addresses based on boolean status\r\n     */\r\n    function updateWhitelist(address[] addresses, bool status) public onlyOwner {\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            address contributorAddress = addresses[i];\r\n            whitelist[contributorAddress] = status;\r\n            emit WhitelistUpdate(contributorAddress, status);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Check that address is exist in whitelist\r\n     */\r\n    function isWhitelisted(address contributor) public constant returns (bool) {\r\n        return whitelist[contributor];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n        return token.mint(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Return ownership to previous owner\r\n     */\r\n    function returnOwnership() onlyOwner public returns (bool) {\r\n        token.transferOwnership(owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Finish Crowdsale\r\n     */\r\n    function finish(address _bountyFund, address _advisorsFund, address _ecosystemFund, address _teamFund) public onlyOwner {\r\n        require(_bountyFund != address(0));\r\n        require(_advisorsFund != address(0));\r\n        require(_ecosystemFund != address(0));\r\n        require(_teamFund != address(0));\r\n\r\n        emit Finalized();\r\n\r\n        // unsold tokens to ecosystem (perhaps further they will be burnt)\r\n        uint256 unsoldTokens = tokensForSale - token.totalSupply();\r\n        if (unsoldTokens > 0) {\r\n            tokensForEcosystem = tokensForEcosystem + unsoldTokens;\r\n        }\r\n\r\n        // distribute\r\n        token.mint(_bountyFund,tokensForBounty);\r\n        token.mint(_advisorsFund,tokensForAdvisors);\r\n        token.mint(_ecosystemFund,tokensForEcosystem);\r\n        token.mint(_teamFund,tokensForTeam);\r\n\r\n        // finish\r\n        token.finishMinting();\r\n\r\n        // freeze team tokens\r\n        token.setTeamAddress(_teamFund);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setNewRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForAdvisors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForEcosystem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setCrowdsaleStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCap\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bountyFund\",\"type\":\"address\"},{\"name\":\"_advisorsFund\",\"type\":\"address\"},{\"name\":\"_ecosystemFund\",\"type\":\"address\"},{\"name\":\"_teamFund\",\"type\":\"address\"}],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"WhitelistUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000f1678619d52360800000000000000000000000000000000000000000000000000000000000000000190000000000000000000000000dfc4bccf1aec515932c2d1ae499f92bb4ce041130000000000000000000000009b60f708738ac99d6b2e298651612f174be475ba","Library":"","SwarmSource":"bzzr://9eb8daaf59735983ff79b60f43ef281a25094ee99d0befee9cb508d1fb79e92b"}]}