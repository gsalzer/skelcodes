{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract INotInitedOwnable {\r\n    \r\n    function init() public;\r\n    \r\n    function transferOwnership(address newOwner) public;\r\n}\r\n\r\ncontract IOwnableUpgradeableImplementation is INotInitedOwnable {\r\n    \r\n    function transferOwnership(address newOwner) public;\r\n    \r\n    function getOwner() constant public returns(address);\r\n    \r\n    function upgradeImplementation(address _newImpl) public;\r\n    \r\n    function getImplementation() constant public returns(address);\r\n}\r\n\r\ncontract IHookOperator is IOwnableUpgradeableImplementation {\r\n\r\n    event LogSetBalancePercentageLimit(uint256 limit);\r\n    event LogSetOverBalanceLimitHolder(address holderAddress, bool isHolder);\r\n    event LogSetUserManager(address userManagerAddress);\r\n    event LogSetICOToken(address icoTokenAddress);\r\n\r\n    event LogOnTransfer(address from, address to, uint tokens);\r\n    event LogOnMint(address to, uint256 amount);\r\n    event LogOnBurn(uint amount);\r\n    event LogOnTaxTransfer(address indexed taxableUser, uint tokensAmount);\r\n\r\n    event LogSetKYCVerificationContract(address _kycVerificationContractAddress);\r\n    event LogUpdateUserRatio(uint256 generationRatio, address indexed userContractAddress);\r\n\r\n    /**\r\n        Setters\r\n    */\r\n    function setBalancePercentageLimit(uint256 limit) public;\r\n    function getBalancePercentageLimit() public view returns(uint256);\r\n    \r\n    function setOverBalanceLimitHolder(address holderAddress, bool isHolder) public;\r\n\r\n    function setUserManager(address userManagerAddress) public;\r\n    function getUserManager() public view returns(address userManagerAddress);\r\n   \r\n    function setICOToken(address icoTokenAddress) public;\r\n    function getICOToken() public view returns(address icoTokenAddress);\r\n\r\n    /**\r\n        Main Functions\r\n    */\r\n    function onTransfer(address from, address to, uint256 tokensAmount) public;\r\n\r\n    function onMint(address to, uint256 tokensAmount) public;\r\n\r\n    function onBurn(uint256 amount) public;\r\n\r\n    function onTaxTransfer(address taxableUser, uint256 tokensAmount) public;\r\n\r\n    /**\r\n        KYC Verification\r\n    */\r\n    function kycVerification(address from, address to, uint256 tokensAmount) public;\r\n\r\n    function setKYCVerificationContract(address _kycVerificationContractAddress) public;\r\n\r\n    function getKYCVerificationContractAddress() public view returns(address _kycVerificationContractAddress);\r\n    \r\n    /**\r\n        Helper functions\r\n    */\r\n    function updateUserRatio(uint256 generationRatio, address userContractAddress) public;\r\n\r\n    function isOverBalanceLimitHolder(address holderAddress) public view returns(bool);\r\n\r\n    function isInBalanceLimit(address userAddress, uint256 tokensAmount) public view returns(bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract ExchangeOracle is Ownable, Pausable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    bool public isIrisOracle = true;\r\n\r\n    uint public rate = 0;\r\n    uint public minWeiAmount = 1000; \r\n\r\n    event LogRateChanged(uint oldRate, uint newRate, address changer);\r\n    event LogMinWeiAmountChanged(uint oldMinWeiAmount, uint newMinWeiAmount, address changer);\r\n\r\n    constructor(uint initialRate) public {\r\n        require(initialRate > 0);\r\n        rate = initialRate;\r\n    }\r\n\r\n    function rate() external view whenNotPaused returns(uint) {\r\n        return rate;\r\n    }\r\n\r\n    /*\r\n        The new rate has to be passed in format:\r\n            100 rate = 100 000 passed rate ( 1 ether = 100 tokens )\r\n            1 rate = 1 000 passed rate ( 1 ether = 1 token )\r\n            0.01 rate = 10 passed rate ( 100 ethers = 1 token )\r\n    **/\r\n    function setRate(uint newRate) external onlyOwner whenNotPaused returns(bool) {\r\n        require(newRate > 0);\r\n        \r\n        uint oldRate = rate;\r\n        rate = newRate;\r\n\r\n        emit LogRateChanged(oldRate, newRate, msg.sender);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        By default minWeiAmount = 1000\r\n        With min wei amount we can set the rate to be a float number\r\n\r\n        We use it as a multiplier because we can not pass float numbers in ethereum\r\n        If the token price becomes bigger than ether one, for example -> 1 token = 10 ethers\r\n        We will pass 100 as rate and this will be relevant to 0.1 token = 1 ether\r\n    **/\r\n    function setMinWeiAmount(uint newMinWeiAmount) external onlyOwner whenNotPaused returns(bool) {\r\n        require(newMinWeiAmount > 0);\r\n        require(newMinWeiAmount % 10 == 0); \r\n\r\n        uint oldMinWeiAmount = minWeiAmount;\r\n        minWeiAmount = newMinWeiAmount;\r\n\r\n        emit LogMinWeiAmountChanged(oldMinWeiAmount, minWeiAmount, msg.sender);\r\n\r\n        return true;\r\n    }\r\n\r\n    function convertTokensAmountInWeiAtRate(uint tokensAmount, uint convertRate) external whenNotPaused view returns(uint) {\r\n\r\n        uint weiAmount = tokensAmount.mul(minWeiAmount);\r\n        weiAmount = weiAmount.div(convertRate);\r\n\r\n        if ((tokensAmount % convertRate) != 0) {\r\n            weiAmount++;\r\n        } \r\n\r\n        return weiAmount;\r\n    }\r\n\r\n    function calcWeiForTokensAmount(uint tokensAmount) external view whenNotPaused returns(uint) {\r\n        \r\n        uint weiAmount = tokensAmount.mul(minWeiAmount);\r\n        weiAmount = weiAmount.div(rate);\r\n\r\n        if ((tokensAmount % rate) != 0) {\r\n            weiAmount++;\r\n        } \r\n\r\n        return weiAmount;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract ICOToken is BurnableToken, MintableToken, PausableToken {\r\n\r\n    string public constant name = \"AIUR Token\";\r\n    string public constant symbol = \"AIUR\";\r\n    uint8 public constant decimals = 18;\r\n}\r\n\r\ncontract ICOTokenExtended is ICOToken {\r\n\r\n    address public refunder;\r\n\r\n    IHookOperator public hookOperator;\r\n    ExchangeOracle public aiurExchangeOracle;\r\n\r\n    mapping(address => bool) public minters;\r\n\r\n    uint256 public constant MIN_REFUND_RATE_DELIMITER = 2; // Refund rate has to be minimum 50% of the AIUR ExchangeOracle rate\r\n\r\n    event LogRefunderSet(address refunderAddress);\r\n    event LogTransferOverFunds(address from, address to, uint ethersAmount, uint tokensAmount);\r\n    event LogTaxTransfer(address from, address to, uint amount);\r\n    event LogMinterAdd(address addedMinter);\r\n    event LogMinterRemove(address removedMinter);\r\n\r\n    modifier onlyMinter(){\r\n        require(minters[msg.sender]);\r\n        \r\n        _;\r\n    }\r\n\r\n    modifier onlyCurrentHookOperator() {\r\n        require(msg.sender == address(hookOperator));\r\n\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroAddress(address inputAddress) {\r\n        require(inputAddress != address(0));\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyRefunder() {\r\n        require(msg.sender == refunder);\r\n\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        minters[msg.sender] = true;\r\n    }\r\n\r\n    function setRefunder(address refunderAddress) external onlyOwner nonZeroAddress(refunderAddress) {\r\n        refunder = refunderAddress;\r\n\r\n        emit LogRefunderSet(refunderAddress);\r\n    }\r\n\r\n    // Set the exchange oracle after crowdsale \r\n    function setExchangeOracle(address exchangeOracleAddress) external onlyOwner nonZeroAddress(exchangeOracleAddress) {\r\n        aiurExchangeOracle = ExchangeOracle(exchangeOracleAddress);\r\n    }\r\n\r\n    function setHookOperator(address hookOperatorAddress) external onlyOwner nonZeroAddress(hookOperatorAddress) {\r\n        hookOperator = IHookOperator(hookOperatorAddress);\r\n    }\r\n\r\n    function addMinter(address minterAddress) external onlyOwner nonZeroAddress(minterAddress) {\r\n        minters[minterAddress] = true;    \r\n\r\n        emit LogMinterAdd(minterAddress);\r\n    }\r\n\r\n    function removeMinter(address minterAddress) external onlyOwner nonZeroAddress(minterAddress) {\r\n        minters[minterAddress] = false;    \r\n\r\n        emit LogMinterRemove(minterAddress);\r\n    }\r\n\r\n    function mint(address to, uint256 tokensAmount) public onlyMinter canMint nonZeroAddress(to) returns(bool) {\r\n        hookOperator.onMint(to, tokensAmount);\r\n\r\n        totalSupply = totalSupply.add(tokensAmount);\r\n        balances[to] = balances[to].add(tokensAmount);\r\n\r\n        emit Mint(to, tokensAmount);\r\n        emit Transfer(address(0), to, tokensAmount);\r\n        return true;\r\n    } \r\n\r\n    function burn(uint tokensAmount) public {\r\n        hookOperator.onBurn(tokensAmount);       \r\n\r\n        super.burn(tokensAmount);  \r\n    } \r\n\r\n    function transfer(address to, uint tokensAmount) public nonZeroAddress(to) returns(bool) {\r\n        hookOperator.onTransfer(msg.sender, to, tokensAmount);\r\n\r\n        return super.transfer(to, tokensAmount);\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint tokensAmount) public nonZeroAddress(from) nonZeroAddress(to) returns(bool) {\r\n        hookOperator.onTransfer(from, to, tokensAmount);\r\n        \r\n        return super.transferFrom(from, to, tokensAmount);\r\n    }\r\n\r\n    /*\r\n        This function is used for taxation purposes and will be used after pre-defined requirement are met\r\n    */\r\n    function taxTransfer(address from, address to, uint tokensAmount) external onlyCurrentHookOperator nonZeroAddress(from) nonZeroAddress(to) returns(bool) {  \r\n        require(balances[from] >= tokensAmount);\r\n\r\n        transferDirectly(from, to, tokensAmount);\r\n\r\n        hookOperator.onTaxTransfer(from, tokensAmount);\r\n        emit LogTaxTransfer(from, to, tokensAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferOverBalanceFunds(address from, address to, uint rate) external payable onlyRefunder nonZeroAddress(from) nonZeroAddress(to) returns(bool) {\r\n        require(!hookOperator.isOverBalanceLimitHolder(from));\r\n\r\n        uint256 oracleRate = aiurExchangeOracle.rate();\r\n        require(rate <= oracleRate.add(oracleRate.div(MIN_REFUND_RATE_DELIMITER)));\r\n\r\n        uint256 fromBalance = balanceOf(from);\r\n        \r\n        // Calculate percentage limit in tokens\r\n        uint256 maxTokensBalance = totalSupply.mul(hookOperator.getBalancePercentageLimit()).div(100);\r\n\r\n        require(fromBalance > maxTokensBalance);\r\n\r\n        uint256 tokensToTake = fromBalance.sub(maxTokensBalance);\r\n        uint256 weiToRefund = aiurExchangeOracle.convertTokensAmountInWeiAtRate(tokensToTake, rate);\r\n\r\n        require(hookOperator.isInBalanceLimit(to, tokensToTake));\r\n        require(msg.value == weiToRefund);\r\n\r\n        transferDirectly(from, to, tokensToTake);\r\n        from.transfer(msg.value);\r\n\r\n        emit LogTransferOverFunds(from, to, weiToRefund, tokensToTake);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferDirectly(address from, address to, uint tokensAmount) private {\r\n        balances[from] = balances[from].sub(tokensAmount);\r\n        balances[to] = balances[to].add(tokensAmount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"transferOverBalanceFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"exchangeOracleAddress\",\"type\":\"address\"}],\"name\":\"setExchangeOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minterAddress\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"taxTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_REFUND_RATE_DELIMITER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aiurExchangeOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hookOperatorAddress\",\"type\":\"address\"}],\"name\":\"setHookOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minterAddress\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refunderAddress\",\"type\":\"address\"}],\"name\":\"setRefunder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refunder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hookOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refunderAddress\",\"type\":\"address\"}],\"name\":\"LogRefunderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethersAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"LogTransferOverFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogTaxTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addedMinter\",\"type\":\"address\"}],\"name\":\"LogMinterAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"removedMinter\",\"type\":\"address\"}],\"name\":\"LogMinterRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ICOTokenExtended","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6945f490da383fac8e27d00c03477641cc09d95d0ce9a2f1edba6e74780b16cb"}]}