{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC721 interface\r\n * @dev see https://github.com/ethereum/eips/issues/721\r\n */\r\ncontract ERC721 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  mapping (address => bool) public admins;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n    admins[owner] = true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  modifier onlyAdmin() {\r\n    require(admins[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  function changeAdmin(address _newAdmin, bool _approved) onlyOwner public {\r\n    admins[_newAdmin] = _approved;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC721Token\r\n * Generic implementation for the required functionality of the ERC721 standard\r\n */\r\ncontract Economeme is ERC721, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // Total amount of tokens\r\n  uint256 private totalTokens;\r\n  uint256 public developerCut;\r\n  uint256 public submissionPool; // The fund amount gained from submissions.\r\n  uint256 public submissionPrice; // How much it costs to submit a meme.\r\n  uint256 public endingBalance; // Balance at the end of the last purchase.\r\n\r\n  // Meme Data\r\n  mapping (uint256 => Meme) public memeData;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) private tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) private tokenApprovals;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) private ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) private ownedTokensIndex;\r\n\r\n  // Balances from % payouts.\r\n  mapping (address => uint256) public creatorBalances;\r\n\r\n  // Events\r\n  event Purchase(uint256 indexed _tokenId, address indexed _buyer, address indexed _seller, uint256 _purchasePrice);\r\n  event Creation(address indexed _creator, uint256 _tokenId, uint256 _timestamp);\r\n\r\n  // Purchasing caps for determining next price\r\n  uint256 private firstCap  = 0.02 ether;\r\n  uint256 private secondCap = 0.5 ether;\r\n  uint256 private thirdCap  = 2.0 ether;\r\n  uint256 private finalCap  = 5.0 ether;\r\n\r\n  // Struct to store Meme data\r\n  struct Meme {\r\n    uint256 price;         // Current price of the item.\r\n    address owner;         // Current owner of the item.\r\n    address creator;       // Address that created dat boi.\r\n  }\r\n  \r\n  function Economeme() public {\r\n    submissionPrice = 1 ether / 100;\r\n  }\r\n\r\n/** ******************************* Buying ********************************* **/\r\n\r\n  /**\r\n  * @dev Purchase meme from previous owner\r\n  * @param _tokenId uint256 of token\r\n  */\r\n  function buyToken(uint256 _tokenId) public \r\n    payable\r\n  {\r\n    // get data from storage\r\n    Meme storage meme = memeData[_tokenId];\r\n    uint256 price = meme.price;\r\n    address oldOwner = meme.owner;\r\n    address newOwner = msg.sender;\r\n    uint256 excess = msg.value.sub(price);\r\n\r\n    // revert checks\r\n    require(price > 0);\r\n    require(msg.value >= price);\r\n    require(oldOwner != msg.sender);\r\n    \r\n    uint256 devCut = price.mul(3).div(100);\r\n    developerCut = developerCut.add(devCut);\r\n\r\n    uint256 creatorCut = price.div(100);\r\n    creatorBalances[meme.creator] = creatorBalances[meme.creator].add(creatorCut);\r\n\r\n    uint256 transferAmount = price.sub(creatorCut + devCut);\r\n\r\n    transferToken(oldOwner, newOwner, _tokenId);\r\n\r\n    // raise event\r\n    emit Purchase(_tokenId, newOwner, oldOwner, price);\r\n\r\n    // set new price\r\n    meme.price = getNextPrice(price);\r\n\r\n    // Safe transfer to owner that will bypass throws on bad contracts.\r\n    safeTransfer(oldOwner, transferAmount);\r\n    \r\n    // Send refund to buyer if needed\r\n    if (excess > 0) {\r\n      newOwner.transfer(excess);\r\n    }\r\n    \r\n    // If safeTransfer did not succeed, we take lost funds into our cut and will return manually if it wasn't malicious.\r\n    // Otherwise we're going out for some beers.\r\n    if (address(this).balance > endingBalance + creatorCut + devCut) submissionPool += transferAmount;\r\n    \r\n    endingBalance = address(this).balance;\r\n  }\r\n\r\n  /**\r\n   * @dev safeTransfer allows a push to an address that will not revert if the address throws.\r\n   * @param _oldOwner The owner that funds will be transferred to.\r\n   * @param _amount The amount of funds that will be transferred.\r\n  */\r\n  function safeTransfer(address _oldOwner, uint256 _amount) internal { \r\n    assembly { \r\n        let x := mload(0x40) \r\n        let success := call(\r\n            5000, \r\n            _oldOwner, \r\n            _amount, \r\n            x, \r\n            0x0, \r\n            x, \r\n            0x20) \r\n        mstore(0x40,add(x,0x20)) \r\n    } \r\n  }\r\n\r\n  /**\r\n  * @dev Transfer Token from Previous Owner to New Owner\r\n  * @param _from previous owner address\r\n  * @param _to new owner address\r\n  * @param _tokenId uint256 ID of token\r\n  */\r\n  function transferToken(address _from, address _to, uint256 _tokenId) internal {\r\n    // check token exists\r\n    require(tokenExists(_tokenId));\r\n\r\n    // make sure previous owner is correct\r\n    require(memeData[_tokenId].owner == _from);\r\n\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n\r\n    // clear approvals linked to this token\r\n    clearApproval(_from, _tokenId);\r\n\r\n    // remove token from previous owner\r\n    removeToken(_from, _tokenId);\r\n\r\n    // update owner and add token to new owner\r\n    addToken(_to, _tokenId);\r\n\r\n    // raise event\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n  \r\n  /**\r\n  * @dev Determines next price of token\r\n  * @param _price uint256 ID of current price\r\n  */\r\n  function getNextPrice (uint256 _price) internal view returns (uint256 _nextPrice) {\r\n    if (_price < firstCap) {\r\n      return _price.mul(200).div(95);\r\n    } else if (_price < secondCap) {\r\n      return _price.mul(135).div(96);\r\n    } else if (_price < thirdCap) {\r\n      return _price.mul(125).div(97);\r\n    } else if (_price < finalCap) {\r\n      return _price.mul(117).div(97);\r\n    } else {\r\n      return _price.mul(115).div(98);\r\n    }\r\n  }\r\n\r\n/** *********************** Player Administrative ************************** **/\r\n\r\n  /**\r\n  * @dev Used by posters to submit and create a new meme.\r\n  */\r\n  function createToken() external payable {\r\n    // make sure token hasn't been used yet\r\n    uint256 tokenId = totalTokens + 1;\r\n    require(memeData[tokenId].price == 0);\r\n    require(msg.value == submissionPrice);\r\n    submissionPool += submissionPrice;\r\n    endingBalance = address(this).balance;\r\n    \r\n    // create new token\r\n    memeData[tokenId] = Meme(1 ether / 100, msg.sender, msg.sender);\r\n\r\n    // mint new token\r\n    _mint(msg.sender, tokenId);\r\n    \r\n    emit Creation(msg.sender, tokenId, block.timestamp);\r\n  }\r\n\r\n  /**\r\n  * @dev Withdraw anyone's creator balance.\r\n  * @param _beneficiary The person whose balance shall be sent to them.\r\n  */\r\n  function withdrawBalance(address _beneficiary) external {\r\n    uint256 payout = creatorBalances[_beneficiary];\r\n    creatorBalances[_beneficiary] = 0;\r\n    _beneficiary.transfer(payout);\r\n    endingBalance = address(this).balance;\r\n  }\r\n\r\n/** **************************** Frontend ********************************** **/\r\n\r\n  /**\r\n  * @dev Return all relevant data for a meme.\r\n  * @param _tokenId Unique meme ID.\r\n  */\r\n  function getMemeData (uint256 _tokenId) external view \r\n  returns (address _owner, uint256 _price, uint256 _nextPrice, address _creator) \r\n  {\r\n    Meme memory meme = memeData[_tokenId];\r\n    return (meme.owner, meme.price, getNextPrice(meme.price), meme.creator);\r\n  }\r\n\r\n  /**\r\n  * @dev Check the creator balance of a certain address.\r\n  * @param _owner The address to check the balance of.\r\n  */\r\n  function checkBalance(address _owner) external view returns (uint256) {\r\n    return creatorBalances[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Determines if token exists by checking it's price\r\n  * @param _tokenId uint256 ID of token\r\n  */\r\n  function tokenExists (uint256 _tokenId) public view returns (bool _exists) {\r\n    return memeData[_tokenId].price > 0;\r\n  }\r\n  \r\n/** ***************************** Only Admin ******************************* **/\r\n  \r\n  /**\r\n   * @dev Withdraw dev's cut\r\n   * @param _devAmount The amount to withdraw from developer cut.\r\n   * @param _submissionAmount The amount to withdraw form submission pool.\r\n  */\r\n  function withdraw(uint256 _devAmount, uint256 _submissionAmount) public onlyAdmin() {\r\n    if (_devAmount == 0) { \r\n      _devAmount = developerCut; \r\n    }\r\n    if (_submissionAmount == 0) {\r\n      _submissionAmount = submissionPool;\r\n    }\r\n    developerCut = developerCut.sub(_devAmount);\r\n    submissionPool = submissionPool.sub(_submissionAmount);\r\n    owner.transfer(_devAmount + _submissionAmount);\r\n    endingBalance = address(this).balance;\r\n  }\r\n\r\n  /**\r\n   * @dev Admin may refund a submission to a user.\r\n   * @param _refundee The address to refund.\r\n   * @param _amount The amount of wei to refund.\r\n  */\r\n  function refundSubmission(address _refundee, uint256 _amount) external onlyAdmin() {\r\n    submissionPool = submissionPool.sub(_amount);\r\n    _refundee.transfer(_amount);\r\n    endingBalance = address(this).balance;\r\n  }\r\n  \r\n  /**\r\n   * @dev Refund a submission by a specific tokenId.\r\n   * @param _tokenId The unique Id of the token to be refunded at current submission price.\r\n  */\r\n  function refundByToken(uint256 _tokenId) external onlyAdmin() {\r\n    submissionPool = submissionPool.sub(submissionPrice);\r\n    memeData[_tokenId].creator.transfer(submissionPrice);\r\n    endingBalance = address(this).balance;\r\n  }\r\n\r\n  /**\r\n   * @dev Change how much it costs to submit a meme.\r\n   * @param _newPrice The new price of submission.\r\n  */\r\n  function changeSubmissionPrice(uint256 _newPrice) external onlyAdmin() {\r\n    submissionPrice = _newPrice;\r\n  }\r\n\r\n\r\n/** ***************************** Modifiers ******************************** **/\r\n\r\n  /**\r\n  * @dev Guarantees msg.sender is owner of the given token\r\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n  */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n/** ******************************* ERC721 ********************************* **/\r\n\r\n  /**\r\n  * @dev Gets the total amount of tokens stored by the contract\r\n  * @return uint256 representing the total amount of tokens\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalTokens;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address\r\n  * @param _owner address to query the balance of\r\n  * @return uint256 representing the amount owned by the passed address\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return ownedTokens[_owner].length;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the list of tokens owned by a given address\r\n  * @param _owner address to query the tokens of\r\n  * @return uint256[] representing the list of tokens owned by the passed address\r\n  */\r\n  function tokensOf(address _owner) public view returns (uint256[]) {\r\n    return ownedTokens[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the owner of the specified token ID\r\n  * @param _tokenId uint256 ID of the token to query the owner of\r\n  * @return owner address currently marked as the owner of the given token ID\r\n  */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address to take ownership of a given token ID\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved to take ownership of the given token ID\r\n   */\r\n  function approvedFor(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfers the ownership of a given token ID to another address\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Approves another address to claim for the ownership of the given token ID\r\n  * @param _to address to be approved for the given token ID\r\n  * @param _tokenId uint256 ID of the token to be approved\r\n  */\r\n  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      emit Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Claims the ownership of a given token ID\r\n  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\r\n  */\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    require(isApprovedFor(msg.sender, _tokenId));\r\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether the msg.sender is approved for the given token ID or not\r\n   * This function is not private so it can be extended in further implementations like the operatable ERC721\r\n   * @param _owner address of the owner to query the approval of\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return bool whether the msg.sender is approved for the given token ID or not\r\n   */\r\n  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\r\n    return approvedFor(_tokenId) == _owner;\r\n  }\r\n  \r\n  /**\r\n  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\r\n  * @param _from address which you want to send tokens from\r\n  * @param _to address which you want to transfer the token to\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    require(_to != ownerOf(_tokenId));\r\n    require(ownerOf(_tokenId) == _from);\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeToken(_from, _tokenId);\r\n    addToken(_to, _tokenId);\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval of a given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApproval(address _owner, uint256 _tokenId) private {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    tokenApprovals[_tokenId] = 0;\r\n    emit Approval(_owner, 0, _tokenId);\r\n  }\r\n\r\n\r\n    /**\r\n  * @dev Mint token function\r\n  * @param _to The address that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    addToken(_to, _tokenId);\r\n    emit Transfer(0x0, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addToken(address _to, uint256 _tokenId) private {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    memeData[_tokenId].owner = _to;\r\n    \r\n    uint256 length = balanceOf(_to);\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n    totalTokens = totalTokens.add(1);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeToken(address _from, uint256 _tokenId) private {\r\n    require(ownerOf(_tokenId) == _from);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = balanceOf(_from).sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    tokenOwner[_tokenId] = 0;\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n    totalTokens = totalTokens.sub(1);\r\n  }\r\n\r\n  function name() public pure returns (string _name) {\r\n    return \"Economeme Meme\";\r\n  }\r\n\r\n  function symbol() public pure returns (string _symbol) {\r\n    return \"ECME\";\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"name\":\"_exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"creatorBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getMemeData\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"name\":\"_creator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_devAmount\",\"type\":\"uint256\"},{\"name\":\"_submissionAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refundee\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"refundSubmission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"refundByToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changeSubmissionPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"submissionPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endingBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"memeData\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"creator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"submissionPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_purchasePrice\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Creation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Economeme","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b6e12e4506a106bd9aeeb4bde779ec680ab639e96c7684d96228473afcd2a2d6"}]}