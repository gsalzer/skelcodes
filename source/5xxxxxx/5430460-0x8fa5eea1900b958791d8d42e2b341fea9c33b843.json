{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\ncontract Better{\r\n    event Bet(address indexed _from, uint team, uint _value);\r\n    event Claim(address indexed _from, uint _value);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event LogManualWinnerUpdated(uint winner);\r\n\r\n    //only informative states\r\n    uint public constant STATE_BET_ENABLED=0;\r\n    uint public constant STATE_BET_DISABLED=1;\r\n    uint public constant  STATE_CLAIM_ENABLED=2;\r\n    \r\n    uint private constant NO_TEAM=0;\r\n    uint[33] private _pools;  //pools[0] is reserved\r\n    \r\n    uint public DEV_TAX_DIVISOR;    //example 1/4 = 25%\r\n    uint public  _startTime;    //example=1522983600;   //when WC starts and bets close\r\n    uint public  _endTime;  //example=1522985400;  //when WC ends and claims open\r\n\r\n    uint private _totalPrize;\r\n    uint private _winnerTeam;\r\n    uint private _numberBets;\r\n    \r\n    address public creatorAddr;\r\n    \r\n    \r\n    mapping (address => mapping (uint => uint)) private _bets;\r\n    \r\n    function Better(uint passDevTaxDivisor, uint passStartTime, uint passEndTime) public {\r\n        creatorAddr=msg.sender;\r\n        DEV_TAX_DIVISOR=passDevTaxDivisor;\r\n        _startTime=passStartTime;\r\n        _endTime=passEndTime;\r\n        \r\n        _winnerTeam=NO_TEAM;\r\n\r\n        _totalPrize=0;\r\n        _numberBets=0;\r\n        for(uint i =0; i<33; i++)_pools[i]=0; //set all pool to 0\r\n    }\r\n    \r\n    \r\n    modifier onlyCreator {\r\n        require(msg.sender == creatorAddr);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyBeforeWinner {\r\n        require(_winnerTeam == NO_TEAM);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAfterWinner {\r\n        require(_winnerTeam != NO_TEAM);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAfterEndTime() {\r\n        require(now >= _endTime);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyBeforeStartTime() {\r\n        require(now <= _startTime);\r\n        _;\r\n    }\r\n\r\n    function setWinnerManually(uint winnerTeam) public onlyCreator onlyBeforeWinner returns (bool){\r\n         _winnerTeam = winnerTeam;\r\n         emit LogManualWinnerUpdated(winnerTeam);\r\n    }\r\n    \r\n    function updateEndTimeManually(uint passEndTime) public onlyCreator onlyBeforeWinner returns (bool){\r\n        _endTime=passEndTime;\r\n    }\r\n    \r\n    function updateStartTimeManually(uint passStartTime) public onlyCreator onlyBeforeWinner returns (bool){\r\n        _startTime=passStartTime;\r\n    }\r\n    \r\n    function bet(uint team) public onlyBeforeWinner onlyBeforeStartTime payable returns (bool)  {\r\n        require(msg.value>0);\r\n        require(team >0);\r\n        \r\n        uint devTax= SafeMath.div(msg.value,DEV_TAX_DIVISOR);\r\n        uint finalValue=SafeMath.sub(msg.value,devTax);\r\n        \r\n        assert(finalValue>0 && devTax>0);\r\n        \r\n        creatorAddr.transfer(devTax);\r\n        \r\n        _pools[team]=SafeMath.add(_pools[team],finalValue);\r\n        _bets[msg.sender][team]=SafeMath.add(_bets[msg.sender][team],finalValue);\r\n        _totalPrize=SafeMath.add(_totalPrize,finalValue);\r\n        \r\n        _numberBets++;\r\n        emit Bet(msg.sender,team,msg.value);\r\n        return true;\r\n    }\r\n    \r\n    function claim() public onlyAfterWinner onlyAfterEndTime returns (bool){\r\n        uint moneyInvested= _bets[msg.sender][_winnerTeam];\r\n        require(moneyInvested>0);\r\n        \r\n        uint moneyTeam= _pools[_winnerTeam];\r\n        \r\n\r\n        uint aux= SafeMath.mul(_totalPrize,moneyInvested);\r\n        uint wonAmmount= SafeMath.div(aux,moneyTeam);\r\n        \r\n        _bets[msg.sender][_winnerTeam]=0;\r\n        msg.sender.transfer(wonAmmount);\r\n        \r\n        emit Claim(msg.sender,wonAmmount);\r\n        return true;\r\n    }\r\n\r\n    function getMyBet(uint teamNumber) public constant returns (uint teamBet) {\r\n       return (_bets[msg.sender][teamNumber]);\r\n    }\r\n    \r\n    function getPools() public constant returns (uint[33] pools) {\r\n        return _pools;\r\n    }\r\n    \r\n    function getTotalPrize() public constant returns (uint prize){\r\n        return _totalPrize;\r\n    }\r\n    \r\n    function getNumberOfBets() public constant returns (uint numberBets){\r\n        return _numberBets;\r\n    }\r\n    \r\n    function getWinnerTeam() public constant returns (uint winnerTeam){\r\n        return _winnerTeam;\r\n    }\r\n    \r\n\r\n    function getState() public constant returns (uint state){\r\n        if(now<_startTime)return STATE_BET_ENABLED;\r\n        if(now<_endTime)return STATE_BET_DISABLED;\r\n        else return STATE_CLAIM_ENABLED;\r\n    }\r\n    \r\n    function getDev() public constant returns (string signature){\r\n        return 'chelinho139';\r\n    }\r\n    function () public payable {\r\n        throw;\r\n    }\r\n    \r\n\r\n// EgyptEgypt 1\r\n// MoroccoMorocco 2\r\n// NigeriaNigeria 3\r\n// SenegalSenegal 4\r\n// TunisiaTunisia 5\r\n// AustraliaAustralia 6\r\n// IR IranIR Iran 7\r\n// JapanJapan 8\r\n// Korea RepublicKorea Republic 9\r\n// Saudi ArabiaSaudi Arabia 10\r\n// BelgiumBelgium 11\r\n// CroatiaCroatia 12 \r\n// DenmarkDenmark 13 \r\n// EnglandEngland 14 \r\n// FranceFrance 15 \r\n// GermanyGermany 16 \r\n// IcelandIceland 17 \r\n// PolandPoland 18 \r\n// PortugalPortugal 19 \r\n// RussiaRussia 20\r\n// SerbiaSerbia 21 \r\n// SpainSpain 22 \r\n// SwedenSweden 23 \r\n// SwitzerlandSwitzerland 24 \r\n// Costa RicaCosta Rica 25 \r\n// MexicoMexico 26 \r\n// PanamaPanama 27 \r\n// ArgentinaArgentina 28 \r\n// BrazilBrazil 29 \r\n// ColombiaColombia 30 \r\n// PeruPeru 31 \r\n// UruguayUruguay 32\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getDev\",\"outputs\":[{\"name\":\"signature\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"state\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEV_TAX_DIVISOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATE_BET_ENABLED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"winnerTeam\",\"type\":\"uint256\"}],\"name\":\"setWinnerManually\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"teamNumber\",\"type\":\"uint256\"}],\"name\":\"getMyBet\",\"outputs\":[{\"name\":\"teamBet\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"name\":\"pools\",\"type\":\"uint256[33]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"team\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATE_CLAIM_ENABLED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"passEndTime\",\"type\":\"uint256\"}],\"name\":\"updateEndTimeManually\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"passStartTime\",\"type\":\"uint256\"}],\"name\":\"updateStartTimeManually\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalPrize\",\"outputs\":[{\"name\":\"prize\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATE_BET_DISABLED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWinnerTeam\",\"outputs\":[{\"name\":\"winnerTeam\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfBets\",\"outputs\":[{\"name\":\"numberBets\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"passDevTaxDivisor\",\"type\":\"uint256\"},{\"name\":\"passStartTime\",\"type\":\"uint256\"},{\"name\":\"passEndTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"team\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"uint256\"}],\"name\":\"LogManualWinnerUpdated\",\"type\":\"event\"}]","ContractName":"Better","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000005b21afc4000000000000000000000000000000000000000000000000000000005b4dbe20","Library":"","SwarmSource":"bzzr://239a6b3b826f07c3b5dc3babb446b4ffa41a46eccdb4adb2161db57111a4e9b6"}]}