{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\n\r\ncontract Lottery {\r\n\r\n    /*\r\n     * checks only owner address is calling\r\n    */\r\n    modifier onlyOwner \r\n    {\r\n        require(msg.sender == owner);\r\n         _;\r\n    }\r\n\r\n    /*\r\n     * game vars\r\n    */\r\n    address public owner;\r\n\r\n    uint private randomNumber;  //上一次的randomNumber会参与到下一次的随机数产生\r\n\r\n    /*\r\n     * events\r\n    */\r\n    event LogRandNumberBC(uint64 taskID,uint16 randomNum);\r\n\r\n    /*\r\n     * init\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function RollLottery(uint64 taskID) public\r\n        onlyOwner\r\n    {\r\n        uint16 randResult;\r\n\r\n        randomNumber \t= uint(keccak256(randomNumber,taskID,block.difficulty)) * uint(blockhash(block.number - 1));\r\n        randResult \t\t= uint16(randomNumber % 1000);\r\n\r\n        emit LogRandNumberBC(taskID,randResult);\r\n    }\r\n\r\n\r\n    function ()\r\n        public payable\r\n    {\r\n        return;\r\n    }\r\n\r\n\r\n    /* only owner address can set owner address */\r\n    function ownerChangeOwner(address newOwner) public\r\n        onlyOwner\r\n    {\r\n        owner = newOwner;\r\n    }\r\n\r\n    /* only owner address can suicide - emergency */\r\n    function ownerkill() public\r\n        onlyOwner\r\n    {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"taskID\",\"type\":\"uint64\"}],\"name\":\"RollLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ownerChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"taskID\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"randomNum\",\"type\":\"uint16\"}],\"name\":\"LogRandNumberBC\",\"type\":\"event\"}]","ContractName":"Lottery","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b5ee050c371a026f390ccd327a8e18cb230cea6fbd7322292fa9378fbdac8c6a"}]}