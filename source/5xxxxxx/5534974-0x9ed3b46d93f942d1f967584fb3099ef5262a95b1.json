{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Ownable {\r\n  address internal owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public returns (bool) {\r\n    require(newOwner != address(0x0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract BitNauticWhitelist is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public usdPerEth;\r\n\r\n    constructor(uint256 _usdPerEth) public {\r\n        usdPerEth = _usdPerEth;\r\n    }\r\n\r\n    mapping(address => bool) public AMLWhitelisted;\r\n    mapping(address => uint256) public contributionCap;\r\n\r\n    /**\r\n     * @dev add an address to the whitelist\r\n     * @param addr address\r\n     * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n     */\r\n    function setKYCLevel(address addr, uint8 level) onlyOwner public returns (bool) {\r\n        if (level >= 3) {\r\n            contributionCap[addr] = 50000 ether; // crowdsale hard cap\r\n        } else if (level == 2) {\r\n            contributionCap[addr] = SafeMath.div(500000 * 10 ** 18, usdPerEth); // KYC Tier 2 - 500k USD\r\n        } else if (level == 1) {\r\n            contributionCap[addr] = SafeMath.div(3000 * 10 ** 18, usdPerEth); // KYC Tier 1 - 3k USD\r\n        } else {\r\n            contributionCap[addr] = 0;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev add addresses to the whitelist\r\n     * @param addrs addresses\r\n     * @return true if at least one address was added to the whitelist,\r\n     * false if all addresses were already in the whitelist\r\n     */\r\n    function setKYCLevelsBulk(address[] addrs, uint8[] levels) onlyOwner external returns (bool success) {\r\n        require(addrs.length == levels.length);\r\n\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            assert(setKYCLevel(addrs[i], levels[i]));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function setAMLWhitelisted(address addr, bool whitelisted) onlyOwner public returns (bool) {\r\n        AMLWhitelisted[addr] = whitelisted;\r\n\r\n        return true;\r\n    }\r\n\r\n    function setAMLWhitelistedBulk(address[] addrs, bool[] whitelisted) onlyOwner external returns (bool) {\r\n        require(addrs.length == whitelisted.length);\r\n\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            assert(setAMLWhitelisted(addrs[i], whitelisted[i]));\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Crowdsale is Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    MintableToken public token;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public ICOStartTime;\r\n    uint256 public ICOEndTime;\r\n\r\n    // wallet address where funds will be saved\r\n    address internal wallet;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised; // internal\r\n\r\n    // Public Supply\r\n    uint256 public publicSupply;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    // BitNautic Crowdsale constructor\r\n    constructor(MintableToken _token, uint256 _publicSupply, uint256 _startTime, uint256 _endTime, address _wallet) public {\r\n        require(_endTime >= _startTime);\r\n        require(_wallet != 0x0);\r\n\r\n        // BitNautic token creation\r\n        token = _token;\r\n\r\n        // total supply of token for the crowdsale\r\n        publicSupply = _publicSupply;\r\n\r\n        // Pre-ICO start Time\r\n        ICOStartTime = _startTime;\r\n\r\n        // ICO end Time\r\n        ICOEndTime = _endTime;\r\n\r\n        // wallet where funds will be saved\r\n        wallet = _wallet;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function() public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // High level token purchase function\r\n    function buyTokens(address beneficiary) whenNotPaused public payable {\r\n        require(beneficiary != 0x0);\r\n        require(validPurchase());\r\n\r\n        // minimum investment should be 0.05 ETH\r\n        uint256 lowerPurchaseLimit = 0.05 ether;\r\n        require(msg.value >= lowerPurchaseLimit);\r\n\r\n        assert(_tokenPurchased(msg.sender, beneficiary, msg.value));\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(msg.value);\r\n\r\n        forwardFunds();\r\n    }\r\n\r\n    function _tokenPurchased(address /* buyer */, address /* beneficiary */, uint256 /* weiAmount */) internal returns (bool) {\r\n        // TO BE OVERLOADED IN SUBCLASSES\r\n        return true;\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal constant returns (bool) {\r\n        bool withinPeriod = ICOStartTime <= now && now <= ICOEndTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n\r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        return now > ICOEndTime;\r\n    }\r\n\r\n    bool public checkBurnTokens = false;\r\n\r\n    function burnTokens() onlyOwner public returns (bool) {\r\n        require(hasEnded());\r\n        require(!checkBurnTokens);\r\n\r\n        token.mint(0x0, publicSupply);\r\n        token.burnTokens(publicSupply);\r\n        publicSupply = 0;\r\n        checkBurnTokens = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    function getTokenAddress() onlyOwner public view returns (address) {\r\n        return address(token);\r\n    }\r\n}\r\n\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 internal cap;\r\n\r\n  constructor(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n\r\n}\r\n\r\ncontract FinalizableCrowdsale is Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    bool isFinalized = false;\r\n\r\n    event Finalized();\r\n\r\n    /**\r\n     * @dev Must be called after crowdsale ends, to do some extra finalization\r\n     * work. Calls the contract's finalization function.\r\n     */\r\n    function finalizeCrowdsale() onlyOwner public {\r\n        require(!isFinalized);\r\n        require(hasEnded());\r\n\r\n        finalization();\r\n        emit Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Can be overridden to add finalization logic. The overriding function\r\n     * should call super.finalization() to ensure the chain of finalization is\r\n     * executed entirely.\r\n     */\r\n    function finalization() internal {\r\n    }\r\n}\r\n\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  constructor(address _wallet) public {\r\n    require(_wallet != 0x0);\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    emit Closed();\r\n    wallet.transfer(address(this).balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    emit RefundsEnabled();\r\n  }\r\n\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    emit Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\ncontract RefundableCrowdsale is FinalizableCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // minimum amount of funds to be raised in weis\r\n    uint256 internal goal;\r\n    bool internal _goalReached = false;\r\n    // refund vault used to hold funds while crowdsale is running\r\n    RefundVault private vault;\r\n\r\n    constructor(uint256 _goal) public {\r\n        require(_goal > 0);\r\n        vault = new RefundVault(wallet);\r\n        goal = _goal;\r\n    }\r\n\r\n    // We're overriding the fund forwarding from Crowdsale.\r\n    // In addition to sending the funds, we want to call\r\n    // the RefundVault deposit function\r\n    function forwardFunds() internal {\r\n        vault.deposit.value(msg.value)(msg.sender);\r\n    }\r\n\r\n    // if crowdsale is unsuccessful, investors can claim refunds here\r\n    function claimRefund() public {\r\n        require(isFinalized);\r\n        require(!goalReached());\r\n\r\n        vault.refund(msg.sender);\r\n    }\r\n\r\n    // vault finalization task, called when owner calls finalize()\r\n    function finalization() internal {\r\n        if (goalReached()) {\r\n            vault.close();\r\n        } else {\r\n            vault.enableRefunds();\r\n        }\r\n        super.finalization();\r\n    }\r\n\r\n    function goalReached() public returns (bool) {\r\n        if (weiRaised >= goal) {\r\n            _goalReached = true;\r\n        }\r\n\r\n        return _goalReached;\r\n    }\r\n\r\n    //  function updateGoalCheck() onlyOwner public {\r\n    //    _goalReached = true;\r\n    //  }\r\n\r\n    function getVaultAddress() onlyOwner public view returns (address) {\r\n        return vault;\r\n    }\r\n}\r\n\r\ncontract BitNauticCrowdsale is CappedCrowdsale, RefundableCrowdsale {\r\n    uint256 constant public crowdsaleInitialSupply = 35000000 * 10 ** 18; // 70% of token cap\r\n//    uint256 constant public crowdsaleSoftCap = 2 ether;\r\n//    uint256 constant public crowdsaleHardCap = 10 ether;\r\n    uint256 constant public crowdsaleSoftCap = 5000 ether;\r\n    uint256 constant public crowdsaleHardCap = 50000 ether;\r\n\r\n    uint256 constant public preICOStartTime = 1525132800;          // 2018-05-01 00:00 GMT+0\r\n    uint256 constant public mainICOStartTime = 1527811200;         // 2018-06-01 00:00 GMT+0\r\n    uint256 constant public mainICOFirstWeekEndTime = 1528416000;  // 2018-06-08 00:00 GMT+0\r\n    uint256 constant public mainICOSecondWeekEndTime = 1529020800; // 2018-06-15 00:00 GMT+0\r\n    uint256 constant public mainICOThirdWeekEndTime = 1529625600;  // 2018-06-22 00:00 GMT+0\r\n    uint256 constant public mainICOFourthWeekEndTime = 1530403200; // 2018-07-01 00:00 GMT+0\r\n    uint256 constant public mainICOEndTime = 1532995200;           // 2018-07-31 00:00 GMT+0\r\n\r\n//    uint256 public preICOStartTime = now;          // 2018-05-01 00:00 GMT+0\r\n//    uint256 constant public mainICOStartTime = preICOStartTime;         // 2018-06-01 00:00 GMT+0\r\n//    uint256 constant public mainICOFirstWeekEndTime = mainICOStartTime;  // 2018-06-08 00:00 GMT+0\r\n//    uint256 constant public mainICOSecondWeekEndTime = mainICOFirstWeekEndTime; // 2018-06-15 00:00 GMT+0\r\n//    uint256 constant public mainICOThirdWeekEndTime = mainICOSecondWeekEndTime;  // 2018-06-22 00:00 GMT+0\r\n//    uint256 constant public mainICOFourthWeekEndTime = mainICOThirdWeekEndTime; // 2018-07-01 00:00 GMT+0\r\n//    uint256 constant public mainICOEndTime = mainICOFourthWeekEndTime + 5 minutes;           // 2018-07-30 00:00 GMT+0\r\n\r\n    uint256 constant public tokenBaseRate = 500; // 1 ETH = 500 BTNT\r\n\r\n    // bonuses in percentage\r\n    uint256 constant public preICOBonus = 30;\r\n    uint256 constant public firstWeekBonus = 20;\r\n    uint256 constant public secondWeekBonus = 15;\r\n    uint256 constant public thirdWeekBonus = 10;\r\n    uint256 constant public fourthWeekBonus = 5;\r\n\r\n    uint256 public teamSupply =     3000000 * 10 ** 18; // 6% of token cap\r\n    uint256 public bountySupply =   2500000 * 10 ** 18; // 5% of token cap\r\n    uint256 public reserveSupply =  5000000 * 10 ** 18; // 10% of token cap\r\n    uint256 public advisorSupply =  2500000 * 10 ** 18; // 5% of token cap\r\n    uint256 public founderSupply =  2000000 * 10 ** 18; // 4% of token cap\r\n\r\n    // amount of tokens each address will receive at the end of the crowdsale\r\n    mapping (address => uint256) public creditOf;\r\n\r\n    mapping (address => uint256) public weiInvestedBy;\r\n\r\n    BitNauticWhitelist public whitelist;\r\n\r\n    /** Constructor BitNauticICO */\r\n    constructor(BitNauticToken _token, BitNauticWhitelist _whitelist, address _wallet)\r\n    CappedCrowdsale(crowdsaleHardCap)\r\n    FinalizableCrowdsale()\r\n    RefundableCrowdsale(crowdsaleSoftCap)\r\n    Crowdsale(_token, crowdsaleInitialSupply, preICOStartTime, mainICOEndTime, _wallet) public\r\n    {\r\n        whitelist = _whitelist;\r\n    }\r\n\r\n    function _tokenPurchased(address buyer, address beneficiary, uint256 weiAmount) internal returns (bool) {\r\n        require(SafeMath.add(weiInvestedBy[buyer], weiAmount) <= whitelist.contributionCap(buyer));\r\n\r\n        uint256 tokens = SafeMath.mul(weiAmount, tokenBaseRate);\r\n\r\n        tokens = tokens.add(SafeMath.mul(tokens, getCurrentBonus()).div(100));\r\n\r\n        require(publicSupply >= tokens);\r\n\r\n        publicSupply = publicSupply.sub(tokens);\r\n\r\n        creditOf[beneficiary] = creditOf[beneficiary].add(tokens);\r\n        weiInvestedBy[buyer] = SafeMath.add(weiInvestedBy[buyer], weiAmount);\r\n\r\n        emit TokenPurchase(buyer, beneficiary, weiAmount, tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    address constant public privateSaleWallet = 0x5A01D561AE864006c6B733f21f8D4311d1E1B42a;\r\n\r\n    function goalReached() public returns (bool) {\r\n        if (weiRaised + privateSaleWallet.balance >= goal) {\r\n            _goalReached = true;\r\n        }\r\n\r\n        return _goalReached;\r\n    }\r\n\r\n    function getCurrentBonus() public view returns (uint256) {\r\n        if (now < mainICOStartTime) {\r\n            return preICOBonus;\r\n        } else if (now < mainICOFirstWeekEndTime) {\r\n            return firstWeekBonus;\r\n        } else if (now < mainICOSecondWeekEndTime) {\r\n            return secondWeekBonus;\r\n        } else if (now < mainICOThirdWeekEndTime) {\r\n            return thirdWeekBonus;\r\n        } else if (now < mainICOFourthWeekEndTime) {\r\n            return fourthWeekBonus;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function claimBitNauticTokens() public returns (bool) {\r\n        return grantInvestorTokens(msg.sender);\r\n    }\r\n\r\n    function grantInvestorTokens(address investor) public returns (bool) {\r\n        require(creditOf[investor] > 0);\r\n        require(now > mainICOEndTime && whitelist.AMLWhitelisted(investor));\r\n        require(goalReached());\r\n\r\n        assert(token.mint(investor, creditOf[investor]));\r\n        creditOf[investor] = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n    function grantInvestorsTokens(address[] investors) public returns (bool) {\r\n        require(now > mainICOEndTime);\r\n        require(goalReached());\r\n\r\n        for (uint256 i = 0; i < investors.length; i++) {\r\n            if (creditOf[investors[i]] > 0 && whitelist.AMLWhitelisted(investors[i])) {\r\n                token.mint(investors[i], creditOf[investors[i]]);\r\n                creditOf[investors[i]] = 0;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function bountyDrop(address[] recipients, uint256[] values) onlyOwner public returns (bool) {\r\n        require(now > mainICOEndTime);\r\n        require(goalReached());\r\n        require(recipients.length == values.length);\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            values[i] = SafeMath.mul(values[i], 1 ether);\r\n            if (bountySupply >= values[i]) {\r\n                return false;\r\n            }\r\n            bountySupply = SafeMath.sub(bountySupply, values[i]);\r\n            token.mint(recipients[i], values[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    uint256 public teamTimeLock = mainICOEndTime;\r\n    uint256 public founderTimeLock = mainICOEndTime + 365 days;\r\n    uint256 public advisorTimeLock = mainICOEndTime + 180 days;\r\n    uint256 public reserveTimeLock = mainICOEndTime;\r\n\r\n    function grantAdvisorTokens(address advisorAddress) onlyOwner public {\r\n        require((advisorSupply > 0) && (advisorTimeLock < now));\r\n        require(goalReached());\r\n\r\n        token.mint(advisorAddress, advisorSupply);\r\n        advisorSupply = 0;\r\n    }\r\n\r\n    uint256 public teamVestingCounter = 0; // months of vesting\r\n\r\n    function grantTeamTokens(address teamAddress) onlyOwner public {\r\n        require((teamVestingCounter < 12) && (teamTimeLock < now));\r\n        require(goalReached());\r\n\r\n        teamTimeLock = SafeMath.add(teamTimeLock, 4 weeks);\r\n        token.mint(teamAddress, SafeMath.div(teamSupply, 12));\r\n        teamVestingCounter = SafeMath.add(teamVestingCounter, 1);\r\n    }\r\n\r\n    function grantFounderTokens(address founderAddress) onlyOwner public {\r\n        require((founderSupply > 0) && (founderTimeLock < now));\r\n        require(goalReached());\r\n\r\n        token.mint(founderAddress, founderSupply);\r\n        founderSupply = 0;\r\n    }\r\n\r\n    function grantReserveTokens(address beneficiary) onlyOwner public {\r\n        require((reserveSupply > 0) && (now > reserveTimeLock));\r\n        require(goalReached());\r\n\r\n        token.mint(beneficiary, reserveSupply);\r\n        reserveSupply = 0;\r\n    }\r\n\r\n    function transferTokenOwnership(address newTokenOwner) onlyOwner public returns (bool) {\r\n        return token.transferOwnership(newTokenOwner);\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = SafeMath.add(totalSupply, _amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n//  function finishMinting() onlyOwner public returns (bool) {\r\n//    mintingFinished = true;\r\n//    emit MintFinished();\r\n//    return true;\r\n//  }\r\n\r\n  function burnTokens(uint256 _unsoldTokens) onlyOwner canMint public returns (bool) {\r\n    totalSupply = SafeMath.sub(totalSupply, _unsoldTokens);\r\n  }\r\n}\r\n\r\ncontract CappedToken is MintableToken {\r\n  uint256 public cap;\r\n\r\n  constructor(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    require(totalSupply.add(_amount) <= cap);\r\n\r\n    return super.mint(_to, _amount);\r\n  }\r\n}\r\n\r\ncontract BitNauticToken is CappedToken {\r\n  string public constant name = \"BitNautic Token\";\r\n  string public constant symbol = \"BTNT\";\r\n  uint8 public constant decimals = 18;\r\n\r\n  uint256 public totalSupply = 0;\r\n\r\n  constructor()\r\n  CappedToken(50000000 * 10 ** uint256(decimals)) public\r\n  {\r\n\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ICOStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkBurnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleInitialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamVestingCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"grantInvestorTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fourthWeekBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVaultAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainICOSecondWeekEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleHardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"creditOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weiInvestedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBaseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainICOStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"advisorAddress\",\"type\":\"address\"}],\"name\":\"grantAdvisorTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"founderAddress\",\"type\":\"address\"}],\"name\":\"grantFounderTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdWeekBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondWeekBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainICOFourthWeekEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"grantReserveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstWeekBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBitNauticTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainICOEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"bountyDrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investors\",\"type\":\"address[]\"}],\"name\":\"grantInvestorsTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainICOThirdWeekEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainICOFirstWeekEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"teamAddress\",\"type\":\"address\"}],\"name\":\"grantTeamTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleSoftCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSaleWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BitNauticCrowdsale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000047010bfcdebde5c6f0cb3426cee269a96f7ac6ce00000000000000000000000019fefe079d1035ca7ca9fcc058ba44542f5393e4000000000000000000000000c0c356867322042e571846ab4f856542646f102e","Library":"","SwarmSource":"bzzr://42d29af5cb69698d26d32cd58d207238074aab87373d8f8ca0fc4b2a31bc9b0a"}]}