{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n// File: eidoo-icoengine/contracts/ICOEngineInterface.sol\r\n\r\ncontract ICOEngineInterface {\r\n\r\n    // false if the ico is not started, true if the ico is started and running, true if the ico is completed\r\n    function started() public view returns(bool);\r\n\r\n    // false if the ico is not started, false if the ico is started and running, true if the ico is completed\r\n    function ended() public view returns(bool);\r\n\r\n    // time stamp of the starting time of the ico, must return 0 if it depends on the block number\r\n    function startTime() public view returns(uint);\r\n\r\n    // time stamp of the ending time of the ico, must retrun 0 if it depends on the block number\r\n    function endTime() public view returns(uint);\r\n\r\n    // Optional function, can be implemented in place of startTime\r\n    // Returns the starting block number of the ico, must return 0 if it depends on the time stamp\r\n    // function startBlock() public view returns(uint);\r\n\r\n    // Optional function, can be implemented in place of endTime\r\n    // Returns theending block number of the ico, must retrun 0 if it depends on the time stamp\r\n    // function endBlock() public view returns(uint);\r\n\r\n    // returns the total number of the tokens available for the sale, must not change when the ico is started\r\n    function totalTokens() public view returns(uint);\r\n\r\n    // returns the number of the tokens available for the ico. At the moment that the ico starts it must be equal to totalTokens(),\r\n    // then it will decrease. It is used to calculate the percentage of sold tokens as remainingTokens() / totalTokens()\r\n    function remainingTokens() public view returns(uint);\r\n\r\n    // return the price as number of tokens released for each ether\r\n    function price() public view returns(uint);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/KYCBase.sol\r\n\r\n// Abstract base contract\r\ncontract KYCBase {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => bool) public isKycSigner;\r\n    mapping (uint64 => uint256) public alreadyPayed;\r\n\r\n    event KycVerified(address indexed signer, address buyerAddress, uint64 buyerId, uint maxAmount);\r\n\r\n    function KYCBase(address [] kycSigners) internal {\r\n        for (uint i = 0; i < kycSigners.length; i++) {\r\n            isKycSigner[kycSigners[i]] = true;\r\n        }\r\n    }\r\n\r\n    // Must be implemented in descending contract to assign tokens to the buyers. Called after the KYC verification is passed\r\n    function releaseTokensTo(address buyer, address signer) internal returns(bool);\r\n\r\n    // This method can be overridden to enable some sender to buy token for a different address\r\n    function senderAllowedFor(address buyer)\r\n        internal view returns(bool)\r\n    {\r\n        return buyer == msg.sender;\r\n    }\r\n\r\n    function buyTokensFor(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\r\n        public payable returns (bool)\r\n    {\r\n        require(senderAllowedFor(buyerAddress));\r\n        return buyImplementation(buyerAddress, buyerId, maxAmount, v, r, s);\r\n    }\r\n\r\n    function buyTokens(uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\r\n        public payable returns (bool)\r\n    {\r\n        return buyImplementation(msg.sender, buyerId, maxAmount, v, r, s);\r\n    }\r\n\r\n    function buyImplementation(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\r\n        private returns (bool)\r\n    {\r\n        // check the signature\r\n        bytes32 hash = sha256(\"Eidoo icoengine authorization\", this, buyerAddress, buyerId, maxAmount);\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (!isKycSigner[signer]) {\r\n            revert();\r\n        } else {\r\n            uint256 totalPayed = alreadyPayed[buyerId].add(msg.value);\r\n            require(totalPayed <= maxAmount);\r\n            alreadyPayed[buyerId] = totalPayed;\r\n            KycVerified(signer, buyerAddress, buyerId, maxAmount);\r\n            return releaseTokensTo(buyerAddress, signer);\r\n        }\r\n    }\r\n\r\n    // No payable fallback function, the tokens must be buyed using the functions buyTokens and buyTokensFor\r\n    function () public {\r\n        revert();\r\n    }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/CappedToken.sol\r\n\r\n/**\r\n * @title Capped token\r\n * @dev Mintable token with a token cap.\r\n */\r\ncontract CappedToken is MintableToken {\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedToken(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    require(totalSupply_.add(_amount) <= cap);\r\n\r\n    return super.mint(_to, _amount);\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardBurnableToken.sol\r\n\r\n/**\r\n * @title Standard Burnable Token\r\n * @dev Adds burnFrom method to ERC20 implementations\r\n */\r\ncontract StandardBurnableToken is BurnableToken, StandardToken {\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _value uint256 The amount of token to be burned\r\n   */\r\n  function burnFrom(address _from, uint256 _value) public {\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    _burn(_from, _value);\r\n  }\r\n}\r\n\r\n// File: contracts/ORSToken.sol\r\n\r\n/// @title ORSToken\r\n/// @author Sicos et al.\r\ncontract ORSToken is CappedToken, StandardBurnableToken, PausableToken {\r\n\r\n    string public name = \"ORS Token\";\r\n    string public symbol = \"ORS\";\r\n    uint8 public decimals = 18;\r\n\r\n    /// @dev Constructor\r\n    /// @param _cap Maximum number of integral token units; total supply must never exceed this limit\r\n    constructor(uint _cap) public CappedToken(_cap) {\r\n        pause();  // Disable token trade\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ORSTokenSale.sol\r\n\r\n/// @title ORSTokenSale\r\n/// @author Sicos et al.\r\ncontract ORSTokenSale is KYCBase, ICOEngineInterface, Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    // Maximum token amounts of each pool\r\n    // Note: There were 218054209 token sold in PreSale\r\n    // Note: 4193635 Bonus token will be issued to preSale investors\r\n    // Note: PRESALE_CAP = 218054209 PreSale token + 4193635 PreSale Bonus token\r\n    uint constant public PRESALE_CAP = 222247844e18;          // 222,247,844 e18\r\n    uint constant public MAINSALE_CAP = 281945791e18;         // 281,945,791 e18\r\n    // Note: BONUS_CAP should be at least 5% of MAINSALE_CAP\r\n    // Note: BONUS_CAP = 64460000 BONUS token  - 4193635 PreSale Bonus token\r\n    uint constant public BONUS_CAP = 60266365e18;             //  60,266,365 e18\r\n\r\n    // Granted token shares that will be minted upon finalization\r\n    uint constant public COMPANY_SHARE = 127206667e18;        // 127,206,667 e18\r\n    uint constant public TEAM_SHARE = 83333333e18;            //  83,333,333 e18\r\n    uint constant public ADVISORS_SHARE = 58333333e18;        //  58,333,333 e18\r\n\r\n    // Remaining token amounts of each pool\r\n    uint public presaleRemaining = PRESALE_CAP;\r\n    uint public mainsaleRemaining = MAINSALE_CAP;\r\n    uint public bonusRemaining = BONUS_CAP;\r\n\r\n    // Beneficiaries of granted token shares\r\n    address public companyWallet;\r\n    address public advisorsWallet;\r\n    address public bountyWallet;\r\n\r\n    ORSToken public token;\r\n\r\n    // Integral token units (10^-18 tokens) per wei\r\n    uint public rate;\r\n\r\n    // Mainsale period\r\n    uint public openingTime;\r\n    uint public closingTime;\r\n\r\n    // Ethereum address where invested funds will be transferred to\r\n    address public wallet;\r\n\r\n    // Purchases signed via Eidoo's platform will receive bonus tokens\r\n    address public eidooSigner;\r\n\r\n    bool public isFinalized = false;\r\n\r\n    /// @dev Log entry on rate changed\r\n    /// @param newRate New rate in integral token units per wei\r\n    event RateChanged(uint newRate);\r\n\r\n    /// @dev Log entry on token purchased\r\n    /// @param buyer Ethereum address of token purchaser\r\n    /// @param value Worth in wei of purchased token amount\r\n    /// @param tokens Number of integral token units\r\n    event TokenPurchased(address indexed buyer, uint value, uint tokens);\r\n\r\n    /// @dev Log entry on buyer refunded upon token purchase\r\n    /// @param buyer Ethereum address of token purchaser\r\n    /// @param value Worth of refund of wei\r\n    event BuyerRefunded(address indexed buyer, uint value);\r\n\r\n    /// @dev Log entry on finalized\r\n    event Finalized();\r\n\r\n    /// @dev Constructor\r\n    /// @param _token An ORSToken\r\n    /// @param _rate Rate in integral token units per wei\r\n    /// @param _openingTime Block (Unix) timestamp of mainsale start time\r\n    /// @param _closingTime Block (Unix) timestamp of mainsale latest end time\r\n    /// @param _wallet Ethereum account who will receive sent ether upon token purchase during mainsale\r\n    /// @param _companyWallet Ethereum account of company who will receive company share upon finalization\r\n    /// @param _advisorsWallet Ethereum account of advisors who will receive advisors share upon finalization\r\n    /// @param _bountyWallet Ethereum account of a wallet that will receive remaining bonus upon finalization\r\n    /// @param _kycSigners List of KYC signers' Ethereum addresses\r\n    constructor(\r\n        ORSToken _token,\r\n        uint _rate,\r\n        uint _openingTime,\r\n        uint _closingTime,\r\n        address _wallet,\r\n        address _companyWallet,\r\n        address _advisorsWallet,\r\n        address _bountyWallet,\r\n        address[] _kycSigners\r\n    )\r\n        public\r\n        KYCBase(_kycSigners)\r\n    {\r\n        require(_token != address(0x0));\r\n        require(_token.cap() == PRESALE_CAP + MAINSALE_CAP + BONUS_CAP + COMPANY_SHARE + TEAM_SHARE + ADVISORS_SHARE);\r\n        require(_rate > 0);\r\n        require(_openingTime > now && _closingTime > _openingTime);\r\n        require(_wallet != address(0x0));\r\n        require(_companyWallet != address(0x0) && _advisorsWallet != address(0x0) && _bountyWallet != address(0x0));\r\n        require(_kycSigners.length >= 2);\r\n\r\n        token = _token;\r\n        rate = _rate;\r\n        openingTime = _openingTime;\r\n        closingTime = _closingTime;\r\n        wallet = _wallet;\r\n        companyWallet = _companyWallet;\r\n        advisorsWallet = _advisorsWallet;\r\n        bountyWallet = _bountyWallet;\r\n\r\n        eidooSigner = _kycSigners[0];\r\n    }\r\n\r\n    /// @dev Set rate, i.e. adjust to changes of fiat/ether exchange rates\r\n    /// @param newRate Rate in integral token units per wei\r\n    function setRate(uint newRate) public onlyOwner {\r\n        require(newRate > 0);\r\n\r\n        if (newRate != rate) {\r\n            rate = newRate;\r\n\r\n            emit RateChanged(newRate);\r\n        }\r\n    }\r\n\r\n    /// @dev Distribute presold tokens and bonus tokens to investors\r\n    /// @param investors List of investors' Ethereum addresses\r\n    /// @param tokens List of integral token amounts each investors will receive\r\n    function distributePresale(address[] investors, uint[] tokens) public onlyOwner {\r\n        require(!isFinalized);\r\n        require(tokens.length == investors.length);\r\n\r\n        for (uint i = 0; i < investors.length; ++i) {\r\n            presaleRemaining = presaleRemaining.sub(tokens[i]);\r\n\r\n            token.mint(investors[i], tokens[i]);\r\n        }\r\n    }\r\n\r\n    /// @dev Finalize, i.e. end token minting phase and enable token trading\r\n    function finalize() public onlyOwner {\r\n        require(ended() && !isFinalized);\r\n        require(presaleRemaining == 0);\r\n\r\n        // Distribute granted token shares\r\n        token.mint(companyWallet, COMPANY_SHARE + TEAM_SHARE);\r\n        token.mint(advisorsWallet, ADVISORS_SHARE);\r\n\r\n        // There shouldn't be any remaining presale tokens\r\n        // Remaining mainsale tokens will be lost (i.e. not minted)\r\n        // Remaining bonus tokens will be minted for the benefit of bounty wallet\r\n        if (bonusRemaining > 0) {\r\n            token.mint(bountyWallet, bonusRemaining);\r\n            bonusRemaining = 0;\r\n        }\r\n\r\n        // Enable token trade\r\n        token.finishMinting();\r\n        token.unpause();\r\n\r\n        isFinalized = true;\r\n\r\n        emit Finalized();\r\n    }\r\n\r\n    // false if the ico is not started, true if the ico is started and running, true if the ico is completed\r\n    /// @dev Started (as required by Eidoo's ICOEngineInterface)\r\n    /// @return True iff mainsale start has passed\r\n    function started() public view returns (bool) {\r\n        return now >= openingTime;\r\n    }\r\n\r\n    // false if the ico is not started, false if the ico is started and running, true if the ico is completed\r\n    /// @dev Ended (as required by Eidoo's ICOEngineInterface)\r\n    /// @return True iff mainsale is finished\r\n    function ended() public view returns (bool) {\r\n        // Note: Even though we allow token holders to burn their tokens immediately after purchase, this won't\r\n        //       affect the early end via \"sold out\" as mainsaleRemaining is independent of token.totalSupply.\r\n        return now > closingTime || mainsaleRemaining == 0;\r\n    }\r\n\r\n    // time stamp of the starting time of the ico, must return 0 if it depends on the block number\r\n    /// @dev Start time (as required by Eidoo's ICOEngineInterface)\r\n    /// @return Block (Unix) timestamp of mainsale start time\r\n    function startTime() public view returns (uint) {\r\n        return openingTime;\r\n    }\r\n\r\n    // time stamp of the ending time of the ico, must retrun 0 if it depends on the block number\r\n    /// @dev End time (as required by Eidoo's ICOEngineInterface)\r\n    /// @return Block (Unix) timestamp of mainsale latest end time\r\n    function endTime() public view returns (uint) {\r\n        return closingTime;\r\n    }\r\n\r\n    // returns the total number of the tokens available for the sale, must not change when the ico is started\r\n    /// @dev Total amount of tokens initially available for purchase during mainsale (excluding bonus tokens)\r\n    /// @return Integral token units\r\n    function totalTokens() public view returns (uint) {\r\n        return MAINSALE_CAP;\r\n    }\r\n\r\n    // returns the number of the tokens available for the ico. At the moment that the ico starts it must be\r\n    // equal to totalTokens(), then it will decrease. It is used to calculate the percentage of sold tokens as\r\n    // remainingTokens() / totalTokens()\r\n    /// @dev Remaining amount of tokens available for purchase during mainsale (excluding bonus tokens)\r\n    /// @return Integral token units\r\n    function remainingTokens() public view returns (uint) {\r\n        return mainsaleRemaining;\r\n    }\r\n\r\n    // return the price as number of tokens released for each ether\r\n    /// @dev Price (as required by Eidoo's ICOEngineInterface); actually the inverse of a \"price\"\r\n    /// @return Rate in integral token units per wei\r\n    function price() public view returns (uint) {\r\n        return rate;\r\n    }\r\n\r\n    /// @dev Release purchased tokens to buyers during mainsale (as required by Eidoo's ICOEngineInterface)\r\n    /// @param buyer Ethereum address of purchaser\r\n    /// @param signer Ethereum address of signer\r\n    /// @return Always true, failures will be indicated by transaction reversal\r\n    function releaseTokensTo(address buyer, address signer) internal returns (bool) {\r\n        require(started() && !ended());\r\n\r\n        uint value = msg.value;\r\n        uint refund = 0;\r\n\r\n        uint tokens = value.mul(rate);\r\n        uint bonus = 0;\r\n\r\n        // (Last) buyer whose purchase would exceed available mainsale tokens will be partially refunded\r\n        if (tokens > mainsaleRemaining) {\r\n            uint valueOfRemaining = mainsaleRemaining.div(rate);\r\n\r\n            refund = value.sub(valueOfRemaining);\r\n            value = valueOfRemaining;\r\n            tokens = mainsaleRemaining;\r\n            // Note:\r\n            // To be 100% accurate the buyer should receive only a token amount that corresponds to valueOfRemaining,\r\n            // i.e. tokens = valueOfRemaining.mul(rate), because of mainsaleRemaining may not be a multiple of rate\r\n            // (due to regular adaption to the ether/fiat exchange rate).\r\n            // Nevertheless, we deliver all mainsaleRemaining tokens as the worth of these additional tokens at time\r\n            // of purchase is less than a wei and the gas costs of a correct solution, i.e. calculate value * rate\r\n            // again, would exceed this by several orders of magnitude.\r\n        }\r\n\r\n        // Purchases signed via Eidoo's platform will receive additional 5% bonus tokens\r\n        if (signer == eidooSigner) {\r\n            bonus = tokens.div(20);\r\n        }\r\n\r\n        mainsaleRemaining = mainsaleRemaining.sub(tokens);\r\n        bonusRemaining = bonusRemaining.sub(bonus);\r\n\r\n        token.mint(buyer, tokens.add(bonus));\r\n        wallet.transfer(value);\r\n        if (refund > 0) {\r\n            buyer.transfer(refund);\r\n\r\n            emit BuyerRefunded(buyer, refund);\r\n        }\r\n\r\n        emit TokenPurchased(buyer, value, tokens.add(bonus));\r\n\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isKycSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPANY_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eidooSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADVISORS_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"alreadyPayed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investors\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"distributePresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyerAddress\",\"type\":\"address\"},{\"name\":\"buyerId\",\"type\":\"uint64\"},{\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buyTokensFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAINSALE_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyerId\",\"type\":\"uint64\"},{\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainsaleRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_companyWallet\",\"type\":\"address\"},{\"name\":\"_advisorsWallet\",\"type\":\"address\"},{\"name\":\"_bountyWallet\",\"type\":\"address\"},{\"name\":\"_kycSigners\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BuyerRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyerId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"KycVerified\",\"type\":\"event\"}]","ContractName":"ORSTokenSale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ac2e58a06e6265f1cf5084ee58da68e5d75b49ca0000000000000000000000000000000000000000000000000000000000002c9c000000000000000000000000000000000000000000000000000000005af933f0000000000000000000000000000000000000000000000000000000005b09cad0000000000000000000000000f5a4cd4e156170281880b645c2c36e4da5610284000000000000000000000000f83547c41dbf888da26d6e3f4a8c0dba3013467200000000000000000000000043c954e971db80573861baf0bdfcac1f69f8c0d50000000000000000000000006265d03b984c3e1378e42b132d2d76f5a1ccb9ff00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000dd5ecefcaa0cb5d75f7b72dc9d2ce446d6d005200000000000000000000000004e315e5de2abbf7b745d9628ee60e4355c0fab86","Library":"","SwarmSource":"bzzr://618745af11b7f97aba5980c5e3a2a125aeea418c923e8435f665acc0442f050d"}]}