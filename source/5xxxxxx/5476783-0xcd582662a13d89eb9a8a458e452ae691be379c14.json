{"status":"1","message":"OK","result":[{"SourceCode":"contract GEE {\r\n\r\n    string public name = \"Green Earth Economy Token\";\r\n    uint8 public decimals = 18;\r\n    string public symbol = \"GEE\";\r\n\r\n    address public _owner = 0xb9a2Dd4453dE3f4cF1983f6F6f2521a2BA40E4c8;\r\n    address public _agent = 0xff23a447fD49966043342AbD692F9193f2399f79;\r\n    address public _dev = 0xC96CfB18C39DC02FBa229B6EA698b1AD5576DF4c;\r\n    address public _devFeesAddr = 0x0f521BE3Cd38eb6AA546F8305ee65B62d3018032;\r\n    uint256 public _tokePerEth = 275;\r\n\r\n    bool _payFees = false;\r\n    uint256 _fees = 1500;    // 15% initially\r\n    uint256 _lifeVal = 0;\r\n    uint256 _feeLimit = 312 * 1 ether;\r\n    uint256 _devFees = 0;\r\n\r\n    uint256 public weiAmount;\r\n    uint256 incomingValueAsEth;\r\n    uint256 _calcToken;\r\n    uint256 _tokePerWei;\r\n\r\n    uint256 public _totalSupply = 21000000 * 1 ether;\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    // Storage\r\n    mapping (address => uint256) public balances;\r\n\r\n    function GEE() {\r\n        _owner = msg.sender;\r\n        preMine();\r\n    }\r\n\r\n    function preMine() {\r\n        // premine 4m to owner, 1m to dev, 1m to agent\r\n        balances[_owner] = 2000000 * 1 ether;\r\n        Transfer(this, _owner, balances[_owner]);\r\n\r\n        balances[_dev] = 1000000 * 1 ether;\r\n        Transfer(this, _dev, balances[_dev]);\r\n\r\n        balances[_agent] = 1000000 * 1 ether;\r\n        Transfer(this, _agent, balances[_agent]);\r\n\r\n        // reduce _totalSupply\r\n        _totalSupply = sub(_totalSupply, (4000000 * 1 ether));\r\n    }\r\n\r\n    function transfer(address _to, uint _value, bytes _data) public {\r\n        // sender must have enough tokens to transfer\r\n        require(balances[msg.sender] >= _value);\r\n\r\n        uint codeLength;\r\n\r\n        assembly {\r\n        // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        // contact..?\r\n        require(codeLength == 0);\r\n\r\n        balances[msg.sender] = sub(balanceOf(msg.sender), _value);\r\n        balances[_to] = add(balances[_to], _value);\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public {\r\n        // sender must have enough tokens to transfer\r\n        require(balances[msg.sender] >= _value);\r\n\r\n        uint codeLength;\r\n\r\n        assembly {\r\n        // contract..? .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n\r\n        // we decided that we don't want to lose tokens into contracts\r\n        require(codeLength == 0);\r\n\r\n        balances[msg.sender] = sub(balanceOf(msg.sender), _value);\r\n        balances[_to] = add(balances[_to], _value);\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    // fallback to receive ETH into contract and send tokens back based on current exchange rate\r\n    function () payable public {\r\n        require(msg.value > 0);\r\n        uint256 _tokens = mul(msg.value,_tokePerEth);\r\n        _tokens = div(_tokens,10);\r\n        require(_totalSupply >= _tokens);//, \"Insufficient tokens available at current exchange rate\");\r\n        _totalSupply = sub(_totalSupply, _tokens);\r\n        balances[msg.sender] = add(balances[msg.sender], _tokens);\r\n        Transfer(this, msg.sender, _tokens);\r\n        _lifeVal = add(_lifeVal, msg.value);\r\n\r\n        if(!_payFees) {\r\n            // then check whether fees are due and set _payFees accordingly\r\n            if(_lifeVal >= _feeLimit) _payFees = true;\r\n        }\r\n\r\n        if(_payFees) {\r\n            _devFees = add(_devFees, ((msg.value * _fees) / 10000));\r\n        }\r\n    }\r\n\r\n    function changePayRate(uint256 _newRate) public {\r\n        require(((msg.sender == _owner) || (msg.sender == _dev)) && (_newRate >= 0));\r\n        _tokePerEth = _newRate;\r\n    }\r\n\r\n    function safeWithdrawal(address _receiver, uint256 _value) public {\r\n        require((msg.sender == _owner));\r\n        uint256 valueAsEth = mul(_value,1 ether);\r\n\r\n        // send the dev fees\r\n        if(_payFees) _devFeesAddr.transfer(_devFees);\r\n\r\n        // check balance before transferring\r\n        require(valueAsEth <= this.balance);\r\n        _receiver.transfer(valueAsEth);\r\n    }\r\n\r\n    function balanceOf(address _receiver) public constant returns (uint balance) {\r\n        return balances[_receiver];\r\n    }\r\n\r\n    function changeOwner(address _receiver) public {\r\n        require(msg.sender == _dev);\r\n        _dev = _receiver;\r\n    }\r\n\r\n    function changeDev(address _receiver) public {\r\n        require(msg.sender == _owner);\r\n        _owner = _receiver;\r\n    }\r\n\r\n    function changeDevFeesAddr(address _receiver) public {\r\n        require(msg.sender == _dev);\r\n        _devFeesAddr = _receiver;\r\n    }\r\n\r\n    function changeAgent(address _receiver) public {\r\n        require(msg.sender == _agent);\r\n        _agent = _receiver;\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // just in case fallback\r\n    function updateTokenBalance(uint256 newBalance) public {\r\n        require(msg.sender == _owner);\r\n        _totalSupply = add(_totalSupply,newBalance);\r\n    }\r\n\r\n    function getBalance() public constant returns (uint256) {\r\n        return this.balance;\r\n    }\r\n    function getLifeVal() public returns (uint256) {\r\n        require((msg.sender == _owner) || (msg.sender == _dev));\r\n        return _lifeVal;\r\n    }\r\n\r\n    // enables fee update - must be between 0 and 20 (%)\r\n    function updateFeeAmount(uint _newFee) public {\r\n        require((msg.sender == _dev) || (msg.sender == _owner));\r\n        require((_newFee >= 0) && (_newFee <= 20));\r\n        _fees = _newFee * 100;\r\n    }\r\n\r\n    function withdrawDevFees() public {\r\n        require(_payFees);\r\n        _devFeesAddr.transfer(_devFees);\r\n        _devFees = 0;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_devFeesAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"changeDevFeesAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDevFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"preMine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"changeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getLifeVal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"updateTokenBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"changeDev\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updateFeeAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_tokePerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"changePayRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_dev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_agent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"GEE","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8308cd4753213027fe0414f779b970ed1e12451bb2293ca946ee18a7d0fc67c2"}]}