{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title NumberLottery\r\n * @dev NumberLottery contract starts with a random,\r\n * hashed number that the player can try to guess. If the guess is correct,\r\n * they receive the balance of the contract as a reward (including their bet).\r\n * If they guess incorrectly, the contract keeps the player's bet amount. Have fun!\r\n */\r\n \r\ncontract NumberLottery \r\n{\r\n  // creates random number between 1 - 10 on contract creation\r\n  uint256 private  randomNumber = uint256( keccak256(now) ) % 10 + 1;\r\n  uint256 public prizeFund;\r\n  uint256 public minBet = 0.1 ether;\r\n  address owner = msg.sender;\r\n\r\n  struct GameHistory \r\n  {\r\n    address player;\r\n    uint256 number;\r\n  }\r\n  \r\n  GameHistory[] public log;\r\n\r\n  modifier onlyOwner() \r\n  {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  // 0.1 ether is a pretty good bet amount but if price changes, this will be useful\r\n  function changeMinBet(uint256 _newMinBet) \r\n  external \r\n  onlyOwner \r\n  {\r\n    minBet = _newMinBet;\r\n  }\r\n\r\n  function startGame(uint256 _number) \r\n  public \r\n  payable \r\n  {\r\n      if(msg.value >= minBet && _number <= 10)\r\n      {\r\n          GameHistory gameHistory;\r\n          gameHistory.player = msg.sender;\r\n          gameHistory.number = _number;\r\n          log.push(gameHistory);\r\n          \r\n          // if player guesses correctly, transfer contract balance\r\n          // else the player's bet is automatically added to the reward / contract balance\r\n          if (_number == randomNumber) \r\n          {\r\n              msg.sender.transfer(this.balance);\r\n          }\r\n          \r\n          randomNumber = uint256( keccak256(now) ) % 10 + 1;\r\n          prizeFund = this.balance;\r\n      }\r\n  }\r\n\r\n  function withdaw(uint256 _am) \r\n  public \r\n  onlyOwner \r\n  {\r\n    owner.transfer(_am);\r\n  }\r\n\r\n  function() public payable { }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"startGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinBet\",\"type\":\"uint256\"}],\"name\":\"changeMinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_am\",\"type\":\"uint256\"}],\"name\":\"withdaw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"number\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"NumberLottery","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a48df6a4869c64a740bb85689e98102193dbdc87c698f6a7f43efea7324e9dcd"}]}