{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\npragma experimental \"v0.5.0\";\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract SmartInvestmentFundToken {\r\n    using SafeMath for uint256;\r\n\r\n    /* Map all our our balances for issued tokens */\r\n    mapping (address => uint256) balances;\r\n\r\n    /* Map between users and their approval addresses and amounts */\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    /* The name of the contract */\r\n    string public name = \"Smart Investment Fund Token v2\";\r\n\r\n    /* The symbol for the contract */\r\n    string public symbol = \"XSFT\";\r\n\r\n    /* How many DPs are in use in this contract */\r\n    uint8 public decimals = 6;\r\n\r\n    /* Defines the current supply of the token in its own units */\r\n    uint256 public totalSupply = 722935000000;\r\n\r\n    /* Our transfer event to fire whenever we shift XSFT around */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    /* Our approval event when one user approves another to control */\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /* Create a new instance of this fund with links to other contracts that are required. */\r\n    function SmartInvestmentFundToken (address _tokenConvertor) public {\r\n\t\t// Give the 0x00 address the fulll supply and allow the token convertor to transfer it\r\n        balances[0] = totalSupply;\r\n        allowed[0][_tokenConvertor] = totalSupply;\r\n        emit Approval(0, _tokenConvertor, totalSupply);\r\n    }\r\n\r\n    modifier onlyPayloadSize(uint numwords) {\r\n        assert(msg.data.length == numwords * 32 + 4);\r\n        _;\r\n    } \r\n    \r\n    /* Transfer funds between two addresses that are not the current msg.sender - this requires approval to have been set separately and follows standard ERC20 guidelines */\r\n    function transferFrom(address _from, address _to, uint256 _amount) public onlyPayloadSize(3) returns (bool) {\r\n        if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to].add(_amount) > balances[_to]) {\r\n            balances[_from] = balances[_from].sub(_amount);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n            balances[_to] = balances[_to].add(_amount);\r\n            emit Transfer(_from, _to, _amount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /* Adds an approval for the specified account to spend money of the message sender up to the defined limit */\r\n    function approve(address _spender, uint256 _amount) public onlyPayloadSize(2) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /* Gets the current allowance that has been approved for the specified spender of the owner address */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /* Gets the balance of a specified account */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /* Transfer the balance from owner's account to another account */\r\n    function transfer(address _to, uint256 _amount) public onlyPayloadSize(2) returns (bool) {\r\n        /* Check if sender has balance and for overflows */\r\n        if (balances[msg.sender] < _amount || balances[_to].add(_amount) < balances[_to])\r\n            return false;\r\n\r\n        /* Add and subtract new balances */\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        /* Fire notification event */\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenConvertor\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SmartInvestmentFundToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000043b0eb4dfe7a3a86b4805b6db07e80c285b54553","Library":"","SwarmSource":"bzzr://c7e2e09a25245346323a0f57c1da9bbd36f15616d30e32846199acc313ad5a17"}]}