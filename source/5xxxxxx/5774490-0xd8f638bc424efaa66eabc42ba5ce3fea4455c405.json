{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath from Zeppelin\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b > 0);\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        assert(c >= b);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 Interface\r\n */\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 Token\r\n * @dev This contract is based on Zeppelin StandardToken.sol and MonolithDAO Token.sol\r\n */\r\ncontract StandardERC20Token is ERC20Interface {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Name of ERC20 token\r\n    string public name;\r\n\r\n    // Symbol of ERC20 token\r\n    string public symbol;\r\n\r\n    // Decimals of ERC20 token\r\n    uint8 public decimals;\r\n\r\n    // Total supply of ERC20 token\r\n    uint256 internal supply;\r\n\r\n    // Mapping of balances\r\n    mapping(address => uint256) internal balances;\r\n\r\n    // Mapping of approval\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    // Modifier to check the length of msg.data\r\n    modifier onlyPayloadSize(uint256 size) {\r\n        if(msg.data.length < size.add(4)) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Don't accept ETH\r\n     */\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n    /**\r\n    * @dev Constructor\r\n    *\r\n    * @param _issuer The account who owns all tokens\r\n    * @param _name The name of the token\r\n    * @param _symbol The symbol of the token\r\n    * @param _decimals The decimals of the token\r\n    * @param _amount The initial amount of the token\r\n    */\r\n    constructor(address _issuer, string _name, string _symbol, uint8 _decimals, uint256 _amount) public {\r\n        require(_issuer != address(0));\r\n        require(bytes(_name).length > 0);\r\n        require(bytes(_symbol).length > 0);\r\n        require(_decimals <= 18);\r\n        require(_amount > 0);\r\n\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        supply = _amount.mul(10 ** uint256(decimals));\r\n        balances[_issuer] = supply;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the total amount of tokens\r\n    *\r\n    * @return Total amount of tokens\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return supply;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the balance of the specified address\r\n    *\r\n    * @param _owner The address from which the balance will be retrieved\r\n    * @return The balance\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    *\r\n    * @param _to The address of the recipient\r\n    * @param _value The amount of token to be transferred\r\n    * @return Whether the transfer was successful or not\r\n    */\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(64) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    *\r\n    * @param _from The address of the sender\r\n    * @param _to The address of the recipient\r\n    * @param _value The amount of token to be transferred\r\n    * @return Whether the transfer was successful or not\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(96) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\r\n    * To prevent attack described in https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729, \r\n    * approve is not allowed when the allowance of specified spender is not zero, call increaseApproval \r\n    * or decreaseApproval to change an allowance\r\n    *\r\n    * @param _spender The address of the account able to transfer the tokens\r\n    * @param _value The amount of wei to be approved for transfer\r\n    * @return Whether the approval was successful or not\r\n    */\r\n    function approve(address _spender, uint256 _value) onlyPayloadSize(64) public returns (bool) {\r\n        require(_value > 0);\r\n        require(allowed[msg.sender][_spender] == 0);\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender\r\n    *\r\n    * @param _owner The address of the account owning tokens\r\n    * @param _spender The address of the account able to transfer the tokens\r\n    * @return Amount of remaining tokens allowed to spent\r\n    */\r\n    function allowance(address _owner, address _spender) onlyPayloadSize(64) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender\r\n    *\r\n    * @param _spender The address which will spend the funds\r\n    * @param _value The amount of tokens to increase the allowance by\r\n    * @return Whether the approval was successful or not\r\n    */\r\n    function increaseApproval(address _spender, uint _value) onlyPayloadSize(64) public returns (bool) {\r\n        require(_value > 0);\r\n\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_value);\r\n\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender\r\n    *\r\n    * @param _spender The address which will spend the funds\r\n    * @param _value The amount of tokens to decrease the allowance by\r\n    * @return Whether the approval was successful or not\r\n    */\r\n    function decreaseApproval(address _spender, uint _value) onlyPayloadSize(64) public returns (bool) {\r\n        require(_value > 0);\r\n\r\n        uint256 value = allowed[msg.sender][_spender];\r\n\r\n        if (_value >= value) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = value.sub(_value);\r\n        }\r\n\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title LongHash ERC20 Token\r\n  */\r\ncontract LongHashERC20Token is StandardERC20Token {\r\n\r\n    // Issuer of tokens\r\n    address public issuer;\r\n\r\n    // Events\r\n    event Issuance(address indexed _from, uint256 _amount, uint256 _value);\r\n    event Burn(address indexed _from, uint256 _amount, uint256 _value);\r\n\r\n    // Modifier to check the issuer\r\n    modifier onlyIssuer() {\r\n        if (msg.sender != issuer) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Constructor\r\n    *\r\n    * @param _issuer The account who owns all tokens\r\n    * @param _name The name of the token\r\n    * @param _symbol The symbol of the token\r\n    * @param _decimals The decimals of the token\r\n    * @param _amount The initial amount of the token\r\n    */\r\n    constructor(address _issuer, string _name, string _symbol, uint8 _decimals, uint256 _amount) \r\n        StandardERC20Token(_issuer, _name, _symbol, _decimals, _amount) public {\r\n        issuer = _issuer;\r\n    }\r\n\r\n    /**\r\n    * @dev Issuing tokens\r\n    *\r\n    * @param _amount The amount of tokens to be issued\r\n    * @return Whether the issuance was successful or not\r\n    */\r\n    function issue(uint256 _amount) onlyIssuer() public returns (bool) {\r\n        require(_amount > 0);\r\n        uint256 value = _amount.mul(10 ** uint256(decimals));\r\n\r\n        supply = supply.add(value);\r\n        balances[issuer] = balances[issuer].add(value);\r\n\r\n        emit Issuance(msg.sender, _amount, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Burn tokens\r\n    *\r\n    * @param _amount The amount of tokens to be burned\r\n    * @return Whether the burn was successful or not\r\n    */\r\n    function burn(uint256 _amount) onlyIssuer() public returns (bool) {\r\n        uint256 value;\r\n\r\n        require(_amount > 0);\r\n        value = _amount.mul(10 ** uint256(decimals));\r\n        require(supply >= value);\r\n        require(balances[issuer] >= value);\r\n\r\n        supply = supply.sub(value);\r\n        balances[issuer] = balances[issuer].sub(value);\r\n\r\n        emit Burn(msg.sender, _amount, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Change the issuer of tokens\r\n    *\r\n    * @param _to The new issuer\r\n    * @param _transfer Whether transfer the old issuer's tokens to new issuer\r\n    * @return Whether the burn was successful or not\r\n    */\r\n    function changeIssuer(address _to, bool _transfer) onlyIssuer() public returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        if (_transfer) {\r\n            balances[_to] = balances[issuer];\r\n            balances[issuer] = 0;\r\n        }\r\n        issuer = _to;\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_transfer\",\"type\":\"bool\"}],\"name\":\"changeIssuer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_issuer\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LongHashERC20Token","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000097703cd253d6d6540f1dd72e1866e59f14aa295e00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000000e4c6f6e674861736820546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034c48540000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://4bb4a85385d52629d4e7ccaaec357b5a8ed52780ee579c5bad05cc53d39f6b6e"}]}