{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.19;\r\n\r\n// DopeRaider Districts Contract\r\n// by gasmasters.io\r\n// contact: team@doperaider.com\r\n\r\n// special thanks to :\r\n//                    8฿ł₮₮Ɽł₱\r\n//                    Etherguy\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\ncontract ERC721 {\r\n  function implementsERC721() public pure returns(bool);\r\n  function totalSupply() public view returns(uint256 total);\r\n  function balanceOf(address _owner) public view returns(uint256 balance);\r\n  function ownerOf(uint256 _tokenId) public view returns(address owner);\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n  // Optional\r\n  // function name() public view returns (string name);\r\n  // function symbol() public view returns (string symbol);\r\n  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n// File: contracts/NarcoCoreInterface.sol\r\n\r\ncontract NarcosCoreInterface is ERC721 {\r\n  function getNarco(uint256 _id)\r\n  public\r\n  view\r\n  returns(\r\n    string  narcoName,\r\n    uint256 weedTotal,\r\n    uint256 cokeTotal,\r\n    uint16[6] skills,\r\n    uint8[4] consumables,\r\n    string genes,\r\n    uint8 homeLocation,\r\n    uint16 level,\r\n    uint256[6] cooldowns,\r\n    uint256 id,\r\n    uint16[9] stats\r\n  );\r\n\r\n  function updateWeedTotal(uint256 _narcoId, bool _add, uint16 _total) public;\r\n  function updateCokeTotal(uint256 _narcoId, bool _add,  uint16 _total) public;\r\n  function updateConsumable(uint256 _narcoId, uint256 _index, uint8 _new) public;\r\n  function updateSkill(uint256 _narcoId, uint256 _index, uint16 _new) public;\r\n  function incrementStat(uint256 _narcoId, uint256 _index) public;\r\n  function setCooldown(uint256 _narcoId , uint256 _index , uint256 _new) public;\r\n  function getRemainingCapacity(uint256 _id) public view returns (uint8 capacity);\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = true;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n// File: contracts/Districts/DistrictsAdmin.sol\r\n\r\ncontract DistrictsAdmin is Ownable, Pausable {\r\n  event ContractUpgrade(address newContract);\r\n\r\n  address public newContractAddress;\r\n  address public coreAddress;\r\n\r\n  NarcosCoreInterface public narcoCore;\r\n\r\n  function setNarcosCoreAddress(address _address) public onlyOwner {\r\n    _setNarcosCoreAddress(_address);\r\n  }\r\n\r\n  function _setNarcosCoreAddress(address _address) internal {\r\n    NarcosCoreInterface candidateContract = NarcosCoreInterface(_address);\r\n    require(candidateContract.implementsERC721());\r\n    coreAddress = _address;\r\n    narcoCore = candidateContract;\r\n  }\r\n\r\n  /// @dev Used to mark the smart contract as upgraded, in case there is a serious\r\n  ///  breaking bug. This method does nothing but keep track of the new contract and\r\n  ///  emit a message indicating that the new address is set. It's up to clients of this\r\n  ///  contract to update to the new contract address in that case.\r\n  /// @param _v2Address new address\r\n  function setNewAddress(address _v2Address) public onlyOwner whenPaused {\r\n    newContractAddress = _v2Address;\r\n\r\n    ContractUpgrade(_v2Address);\r\n  }\r\n\r\n\r\n  // token manager contract\r\n  address [6] public tokenContractAddresses;\r\n\r\n  function setTokenAddresses(address[6] _addresses) public onlyOwner {\r\n      tokenContractAddresses = _addresses;\r\n  }\r\n\r\n  modifier onlyDopeRaiderContract() {\r\n    require(msg.sender == coreAddress);\r\n    _;\r\n  }\r\n\r\n  modifier onlyTokenContract() {\r\n    require(\r\n        msg.sender == tokenContractAddresses[0] ||\r\n        msg.sender == tokenContractAddresses[1] ||\r\n        msg.sender == tokenContractAddresses[2] ||\r\n        msg.sender == tokenContractAddresses[3] ||\r\n        msg.sender == tokenContractAddresses[4] ||\r\n        msg.sender == tokenContractAddresses[5]\r\n      );\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n\r\n// File: contracts/DistrictsCore.sol\r\n\r\ncontract DistrictsCore is DistrictsAdmin {\r\n\r\n  // DISTRICT EVENTS\r\n  event NarcoArrived(uint8 indexed location, uint256 indexed narcoId); // who just arrived here\r\n  event NarcoLeft(uint8 indexed location, uint256 indexed narcoId); // who just left here\r\n  event TravelBust(uint256 indexed narcoId, uint16 confiscatedWeed, uint16 confiscatedCoke);\r\n  event Hijacked(uint256 indexed hijacker, uint256 indexed victim , uint16 stolenWeed , uint16 stolenCoke);\r\n  event HijackDefended(uint256 indexed hijacker, uint256 indexed victim);\r\n  event EscapedHijack(uint256 indexed hijacker, uint256 indexed victim , uint8 escapeLocation);\r\n\r\n  uint256 public airLiftPrice = 0.01 ether; // home dorothy price\r\n  uint256 public hijackPrice = 0.008 ether; // universal hijackPrice\r\n  uint256 public travelPrice = 0.002 ether; // universal travelPrice\r\n  uint256 public spreadPercent = 5; // universal spread between buy and sell\r\n  uint256 public devFeePercent = 2; // on various actions\r\n  uint256 public currentDevFees = 0;\r\n  uint256 public bustRange = 10;\r\n\r\n  function setAirLiftPrice(uint256 _price) public onlyOwner{\r\n    airLiftPrice = _price;\r\n  }\r\n\r\n  function setBustRange(uint256 _range) public onlyOwner{\r\n    bustRange = _range;\r\n  }\r\n\r\n  function setHijackPrice(uint256 _price) public onlyOwner{\r\n    hijackPrice = _price;\r\n  }\r\n\r\n  function setTravelPrice(uint256 _price) public onlyOwner{\r\n    travelPrice = _price;\r\n  }\r\n\r\n  function setSpreadPercent(uint256 _spread) public onlyOwner{\r\n    spreadPercent = _spread;\r\n  }\r\n\r\n  function setDevFeePercent(uint256 _fee) public onlyOwner{\r\n    devFeePercent = _fee;\r\n  }\r\n\r\n  function isDopeRaiderDistrictsCore() public pure returns(bool){ return true; }\r\n\r\n\r\n  // Market Items\r\n\r\n  struct MarketItem{\r\n    uint256 id;\r\n    string itemName;\r\n    uint8 skillAffected;\r\n    uint8 upgradeAmount;\r\n    uint8 levelRequired; // the level a narco must have before they\r\n  }\r\n\r\n  // there is a fixed amount of items - they are not tokens bc iterations will be needed.\r\n  // 0,1 = weed , coke , 2 - 4 consumables , 5-23 items\r\n  MarketItem[24] public marketItems;\r\n\r\n  function configureMarketItem(uint256 _id, uint8 _skillAffected, uint8  _upgradeAmount, uint8 _levelRequired, string _itemName) public onlyOwner{\r\n    marketItems[_id].skillAffected = _skillAffected;\r\n    marketItems[_id].upgradeAmount = _upgradeAmount;\r\n    marketItems[_id].levelRequired = _levelRequired;\r\n    marketItems[_id].itemName = _itemName;\r\n    marketItems[_id].id = _id;\r\n  }\r\n\r\n\r\n  struct District {\r\n    uint256[6] exits;\r\n    uint256 weedPot;\r\n    uint256 weedAmountHere;\r\n    uint256 cokePot;\r\n    uint256 cokeAmountHere;\r\n    uint256[24] marketPrices;\r\n    bool[24] isStocked;\r\n    bool hasMarket;\r\n    string name;\r\n  }\r\n\r\n  District[8] public districts; // there is no '0' district - this will be used to indicate no exit\r\n\r\n  // for keeping track of who is where\r\n  mapping(uint256 => uint8) narcoIndexToLocation;\r\n\r\n  function DistrictsCore() public {\r\n  }\r\n\r\n  function getDistrict(uint256 _id) public view returns(uint256[6] exits, bool hasMarket, uint256[24] prices, bool[24] isStocked, uint256 weedPot, uint256 cokePot, uint256 weedAmountHere, uint256 cokeAmountHere, string name){\r\n    District storage district = districts[_id];\r\n    exits = district.exits;\r\n    hasMarket = district.hasMarket;\r\n    prices = district.marketPrices;\r\n\r\n    // minimum prices for w/c set in the districts configuration file\r\n    prices[0] = max(prices[0], (((district.weedPot / district.weedAmountHere)/100)*(100+spreadPercent)));// Smeti calc this is the buy price (contract sells)\r\n    prices[1] = max(prices[1], (((district.cokePot / district.cokeAmountHere)/100)*(100+spreadPercent)));  // Smeti calc this is the buy price (contract sells)\r\n    isStocked = district.isStocked;\r\n    weedPot = district.weedPot;\r\n    cokePot = district.cokePot;\r\n    weedAmountHere = district.weedAmountHere;\r\n    cokeAmountHere = district.cokeAmountHere;\r\n    name = district.name;\r\n  }\r\n\r\n  function createNamedDistrict(uint256 _index, string _name, bool _hasMarket) public onlyOwner{\r\n    districts[_index].name = _name;\r\n    districts[_index].hasMarket = _hasMarket;\r\n    districts[_index].weedAmountHere = 1;\r\n    districts[_index].cokeAmountHere = 1;\r\n    districts[_index].weedPot = 0.001 ether;\r\n    districts[_index].cokePot = 0.001 ether;\r\n  }\r\n\r\n  function initializeSupply(uint256 _index, uint256 _weedSupply, uint256 _cokeSupply) public onlyOwner{\r\n    districts[_index].weedAmountHere = _weedSupply;\r\n    districts[_index].cokeAmountHere = _cokeSupply;\r\n  }\r\n\r\n  function configureDistrict(uint256 _index, uint256[6]_exits, uint256[24] _prices, bool[24] _isStocked) public onlyOwner{\r\n    districts[_index].exits = _exits; // clockwise starting at noon\r\n    districts[_index].marketPrices = _prices;\r\n    districts[_index].isStocked = _isStocked;\r\n  }\r\n\r\n  // callable by other contracts to control economy\r\n  function increaseDistrictWeed(uint256 _district, uint256 _quantity) public onlyDopeRaiderContract{\r\n    districts[_district].weedAmountHere += _quantity;\r\n  }\r\n  function increaseDistrictCoke(uint256 _district, uint256 _quantity) public onlyDopeRaiderContract{\r\n    districts[_district].cokeAmountHere += _quantity;\r\n  }\r\n\r\n  // proxy updates to main contract\r\n  function updateConsumable(uint256 _narcoId,  uint256 _index ,uint8 _newQuantity) public onlyTokenContract {\r\n    narcoCore.updateConsumable(_narcoId,  _index, _newQuantity);\r\n  }\r\n\r\n  function updateWeedTotal(uint256 _narcoId,  uint16 _total) public onlyTokenContract {\r\n    narcoCore.updateWeedTotal(_narcoId,  true , _total);\r\n    districts[getNarcoLocation(_narcoId)].weedAmountHere += uint8(_total);\r\n  }\r\n\r\n  function updatCokeTotal(uint256 _narcoId,  uint16 _total) public onlyTokenContract {\r\n    narcoCore.updateCokeTotal(_narcoId,  true , _total);\r\n    districts[getNarcoLocation(_narcoId)].cokeAmountHere += uint8(_total);\r\n  }\r\n\r\n\r\n  function getNarcoLocation(uint256 _narcoId) public view returns(uint8 location){\r\n    location = narcoIndexToLocation[_narcoId];\r\n    // could be they have not travelled, so just return their home location\r\n    if (location == 0) {\r\n      (\r\n            ,\r\n            ,\r\n            ,\r\n            ,\r\n            ,\r\n            ,\r\n        location\r\n        ,\r\n        ,\r\n        ,\r\n        ,\r\n        ) = narcoCore.getNarco(_narcoId);\r\n\r\n    }\r\n\r\n  }\r\n\r\n  function getNarcoHomeLocation(uint256 _narcoId) public view returns(uint8 location){\r\n      (\r\n            ,\r\n            ,\r\n            ,\r\n            ,\r\n            ,\r\n            ,\r\n        location\r\n        ,\r\n        ,\r\n        ,\r\n        ,\r\n        ) = narcoCore.getNarco(_narcoId);\r\n  }\r\n\r\n  // function to be called when wanting to add funds to all districts\r\n  function floatEconony() public payable onlyOwner {\r\n        if(msg.value>0){\r\n          for (uint district=1;district<8;district++){\r\n              districts[district].weedPot+=(msg.value/14);\r\n              districts[district].cokePot+=(msg.value/14);\r\n            }\r\n        }\r\n    }\r\n\r\n  // function to be called when wanting to add funds to a district\r\n  function distributeRevenue(uint256 _district , uint8 _splitW, uint8 _splitC) public payable onlyDopeRaiderContract {\r\n        if(msg.value>0){\r\n         _distributeRevenue(msg.value, _district, _splitW, _splitC);\r\n        }\r\n  }\r\n\r\n  uint256 public localRevenuePercent = 80;\r\n\r\n  function setLocalRevenuPercent(uint256 _lrp) public onlyOwner{\r\n    localRevenuePercent = _lrp;\r\n  }\r\n\r\n  function _distributeRevenue(uint256 _grossRevenue, uint256 _district , uint8 _splitW, uint8 _splitC) internal {\r\n          // subtract dev fees\r\n          uint256 onePc = _grossRevenue/100;\r\n          uint256 netRevenue = onePc*(100-devFeePercent);\r\n          uint256 devFee = onePc*(devFeePercent);\r\n\r\n          uint256 districtRevenue = (netRevenue/100)*localRevenuePercent;\r\n          uint256 federalRevenue = (netRevenue/100)*(100-localRevenuePercent);\r\n\r\n          // distribute district revenue\r\n          // split evenly between weed and coke pots\r\n          districts[_district].weedPot+=(districtRevenue/100)*_splitW;\r\n          districts[_district].cokePot+=(districtRevenue/100)*_splitC;\r\n\r\n          // distribute federal revenue\r\n           for (uint district=1;district<8;district++){\r\n              districts[district].weedPot+=(federalRevenue/14);\r\n              districts[district].cokePot+=(federalRevenue/14);\r\n            }\r\n\r\n          // acrue dev fee\r\n          currentDevFees+=devFee;\r\n  }\r\n\r\n  function withdrawFees() external onlyOwner {\r\n        if (currentDevFees<=address(this).balance){\r\n          currentDevFees = 0;\r\n          msg.sender.transfer(currentDevFees);\r\n        }\r\n    }\r\n\r\n\r\n  function buyItem(uint256 _narcoId, uint256 _district, uint256 _itemIndex, uint256 _quantity) public payable whenNotPaused{\r\n    require(narcoCore.ownerOf(_narcoId) == msg.sender); // must be owner\r\n\r\n    uint256 narcoWeedTotal;\r\n    uint256 narcoCokeTotal;\r\n    uint16[6] memory narcoSkills;\r\n    uint8[4] memory narcoConsumables;\r\n    uint16 narcoLevel;\r\n\r\n    (\r\n                ,\r\n      narcoWeedTotal,\r\n      narcoCokeTotal,\r\n      narcoSkills,\r\n      narcoConsumables,\r\n                ,\r\n                ,\r\n      narcoLevel,\r\n                ,\r\n                ,\r\n    ) = narcoCore.getNarco(_narcoId);\r\n\r\n    require(getNarcoLocation(_narcoId) == uint8(_district)); // right place to buy\r\n    require(uint8(_quantity) > 0 && districts[_district].isStocked[_itemIndex] == true); // there is enough of it\r\n    require(marketItems[_itemIndex].levelRequired <= narcoLevel || _district==7); //  must be level to buy this item or black market\r\n    require(narcoCore.getRemainingCapacity(_narcoId) >= _quantity || _itemIndex>=6); // narco can carry it or not a consumable\r\n\r\n    // progression through the upgrades for non consumable items (>=6)\r\n    if (_itemIndex>=6) {\r\n      require (_quantity==1);\r\n\r\n      if (marketItems[_itemIndex].skillAffected!=5){\r\n            // regular items\r\n            require (marketItems[_itemIndex].levelRequired==0 || narcoSkills[marketItems[_itemIndex].skillAffected]<marketItems[_itemIndex].upgradeAmount);\r\n          }else{\r\n            // capacity has 20 + requirement\r\n            require (narcoSkills[5]<20+marketItems[_itemIndex].upgradeAmount);\r\n      }\r\n    }\r\n\r\n    uint256 costPrice = districts[_district].marketPrices[_itemIndex] * _quantity;\r\n\r\n    if (_itemIndex ==0 ) {\r\n      costPrice = max(districts[_district].marketPrices[0], (((districts[_district].weedPot / districts[_district].weedAmountHere)/100)*(100+spreadPercent))) * _quantity;\r\n    }\r\n    if (_itemIndex ==1 ) {\r\n      costPrice = max(districts[_district].marketPrices[1], (((districts[_district].cokePot / districts[_district].cokeAmountHere)/100)*(100+spreadPercent))) * _quantity;\r\n    }\r\n\r\n    require(msg.value >= costPrice); // paid enough?\r\n    // ok purchase here\r\n    if (_itemIndex > 1 && _itemIndex < 6) {\r\n      // consumable\r\n      narcoCore.updateConsumable(_narcoId, _itemIndex - 2, uint8(narcoConsumables[_itemIndex - 2] + _quantity));\r\n       _distributeRevenue(costPrice, _district , 50, 50);\r\n    }\r\n\r\n    if (_itemIndex >= 6) {\r\n        // skills boost\r\n        // check which skill is updated by this item\r\n        narcoCore.updateSkill(\r\n          _narcoId,\r\n          marketItems[_itemIndex].skillAffected,\r\n          uint16(narcoSkills[marketItems[_itemIndex].skillAffected] + (marketItems[_itemIndex].upgradeAmount))\r\n        );\r\n        _distributeRevenue(costPrice, _district , 50, 50);\r\n    }\r\n    if (_itemIndex == 0) {\r\n        // weedTotal\r\n        narcoCore.updateWeedTotal(_narcoId, true,  uint16(_quantity));\r\n        districts[_district].weedAmountHere += uint8(_quantity);\r\n        _distributeRevenue(costPrice, _district , 100, 0);\r\n    }\r\n    if (_itemIndex == 1) {\r\n       // cokeTotal\r\n       narcoCore.updateCokeTotal(_narcoId, true, uint16(_quantity));\r\n       districts[_district].cokeAmountHere += uint8(_quantity);\r\n       _distributeRevenue(costPrice, _district , 0, 100);\r\n    }\r\n\r\n    // allow overbid\r\n    if (msg.value>costPrice){\r\n        msg.sender.transfer(msg.value-costPrice);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  function sellItem(uint256 _narcoId, uint256 _district, uint256 _itemIndex, uint256 _quantity) public whenNotPaused{\r\n    require(narcoCore.ownerOf(_narcoId) == msg.sender); // must be owner\r\n    require(_itemIndex < marketItems.length && _district < 8 && _district > 0 && _quantity > 0); // valid item and district and quantity\r\n\r\n    uint256 narcoWeedTotal;\r\n    uint256 narcoCokeTotal;\r\n\r\n    (\r\n                ,\r\n      narcoWeedTotal,\r\n      narcoCokeTotal,\r\n                ,\r\n                ,\r\n                ,\r\n                ,\r\n                ,\r\n                ,\r\n                ,\r\n            ) = narcoCore.getNarco(_narcoId);\r\n\r\n\r\n    require(getNarcoLocation(_narcoId) == _district); // right place to buy\r\n    // at this time only weed and coke can be sold to the contract\r\n    require((_itemIndex == 0 && narcoWeedTotal >= _quantity) || (_itemIndex == 1 && narcoCokeTotal >= _quantity));\r\n\r\n    uint256 salePrice = 0;\r\n\r\n    if (_itemIndex == 0) {\r\n      salePrice = districts[_district].weedPot / districts[_district].weedAmountHere;  // Smeti calc this is the sell price (contract buys)\r\n    }\r\n    if (_itemIndex == 1) {\r\n      salePrice = districts[_district].cokePot / districts[_district].cokeAmountHere;  // Smeti calc this is the sell price (contract buys)\r\n    }\r\n    require(salePrice > 0); // yeah that old chestnut lol\r\n\r\n    // do the updates\r\n    if (_itemIndex == 0) {\r\n      narcoCore.updateWeedTotal(_narcoId, false, uint16(_quantity));\r\n      districts[_district].weedPot=sub(districts[_district].weedPot,salePrice*_quantity);\r\n      districts[_district].weedAmountHere=sub(districts[_district].weedAmountHere,_quantity);\r\n    }\r\n    if (_itemIndex == 1) {\r\n      narcoCore.updateCokeTotal(_narcoId, false, uint16(_quantity));\r\n      districts[_district].cokePot=sub(districts[_district].cokePot,salePrice*_quantity);\r\n      districts[_district].cokeAmountHere=sub(districts[_district].cokeAmountHere,_quantity);\r\n    }\r\n    narcoCore.incrementStat(_narcoId, 0); // dealsCompleted\r\n    // transfer the amount to the seller - should be owner of, but for now...\r\n    msg.sender.transfer(salePrice*_quantity);\r\n\r\n  }\r\n\r\n\r\n\r\n  // allow a Narco to travel between districts\r\n  // travelling is done by taking \"exit\" --> index into the loctions\r\n  function travelTo(uint256 _narcoId, uint256 _exitId) public payable whenNotPaused{\r\n    require(narcoCore.ownerOf(_narcoId) == msg.sender); // must be owner\r\n    require((msg.value >= travelPrice && _exitId < 7) || (msg.value >= airLiftPrice && _exitId==7));\r\n\r\n    // exitId ==7 is a special exit for airlifting narcos back to their home location\r\n\r\n\r\n    uint256 narcoWeedTotal;\r\n    uint256 narcoCokeTotal;\r\n    uint16[6] memory narcoSkills;\r\n    uint8[4] memory narcoConsumables;\r\n    uint256[6] memory narcoCooldowns;\r\n\r\n    (\r\n                ,\r\n      narcoWeedTotal,\r\n      narcoCokeTotal,\r\n      narcoSkills,\r\n      narcoConsumables,\r\n                ,\r\n                ,\r\n                ,\r\n      narcoCooldowns,\r\n                ,\r\n    ) = narcoCore.getNarco(_narcoId);\r\n\r\n    // travel cooldown must have expired and narco must have some gas\r\n    require(now>narcoCooldowns[0] && (narcoConsumables[0]>0 || _exitId==7));\r\n\r\n    uint8 sourceLocation = getNarcoLocation(_narcoId);\r\n    District storage sourceDistrict = districts[sourceLocation]; // find out source\r\n    require(_exitId==7 || sourceDistrict.exits[_exitId] != 0); // must be a valid exit\r\n\r\n    // decrease the weed pot and cocaine pot for the destination district\r\n    uint256 localWeedTotal = districts[sourceLocation].weedAmountHere;\r\n    uint256 localCokeTotal = districts[sourceLocation].cokeAmountHere;\r\n\r\n    if (narcoWeedTotal < localWeedTotal) {\r\n      districts[sourceLocation].weedAmountHere -= narcoWeedTotal;\r\n    } else {\r\n      districts[sourceLocation].weedAmountHere = 1; // always drop to 1\r\n    }\r\n\r\n    if (narcoCokeTotal < localCokeTotal) {\r\n      districts[sourceLocation].cokeAmountHere -= narcoCokeTotal;\r\n    } else {\r\n      districts[sourceLocation].cokeAmountHere = 1; // always drop to 1\r\n    }\r\n\r\n    // do the move\r\n    uint8 targetLocation = getNarcoHomeLocation(_narcoId);\r\n    if (_exitId<7){\r\n      targetLocation =  uint8(sourceDistrict.exits[_exitId]);\r\n    }\r\n\r\n    narcoIndexToLocation[_narcoId] = targetLocation;\r\n\r\n    // distribute the travel revenue\r\n    _distributeRevenue(msg.value, targetLocation , 50, 50);\r\n\r\n    // increase the weed pot and cocaine pot for the destination district with the travel cost\r\n    districts[targetLocation].weedAmountHere += narcoWeedTotal;\r\n    districts[targetLocation].cokeAmountHere += narcoCokeTotal;\r\n\r\n    // consume some gas (gas index = 0)\r\n    if (_exitId!=7){\r\n      narcoCore.updateConsumable(_narcoId, 0 , narcoConsumables[0]-1);\r\n    }\r\n    // set travel cooldown (speed skill = 0)\r\n    //narcoCore.setCooldown( _narcoId ,  0 , now + min(3 minutes,(455-(5*narcoSkills[0])* 1 seconds)));\r\n    narcoCore.setCooldown( _narcoId ,  0 , now + (455-(5*narcoSkills[0])* 1 seconds));\r\n\r\n    // update travel stat\r\n    narcoCore.incrementStat(_narcoId, 7);\r\n    // Travel risk\r\n     uint64 bustChance=random(50+(5*narcoSkills[0])); // 0  = speed skill\r\n\r\n     if (bustChance<=bustRange){\r\n      busted(_narcoId,targetLocation,narcoWeedTotal,narcoCokeTotal);\r\n     }\r\n\r\n     NarcoArrived(targetLocation, _narcoId); // who just arrived here\r\n     NarcoLeft(sourceLocation, _narcoId); // who just left here\r\n\r\n  }\r\n\r\n  function busted(uint256 _narcoId, uint256 targetLocation, uint256 narcoWeedTotal, uint256 narcoCokeTotal) private  {\r\n       uint256 bustedWeed=narcoWeedTotal/2; // %50\r\n       uint256 bustedCoke=narcoCokeTotal/2; // %50\r\n       districts[targetLocation].weedAmountHere -= bustedWeed; // smeti fix\r\n       districts[targetLocation].cokeAmountHere -= bustedCoke; // smeti fix\r\n       districts[7].weedAmountHere += bustedWeed; // smeti fix\r\n       districts[7].cokeAmountHere += bustedCoke; // smeti fix\r\n       narcoCore.updateWeedTotal(_narcoId, false, uint16(bustedWeed)); // 50% weed\r\n       narcoCore.updateCokeTotal(_narcoId, false, uint16(bustedCoke)); // 50% coke\r\n       narcoCore.updateWeedTotal(0, true, uint16(bustedWeed)); // 50% weed confiscated into office lardass\r\n       narcoCore.updateCokeTotal(0, true, uint16(bustedCoke)); // 50% coke confiscated into office lardass\r\n       TravelBust(_narcoId, uint16(bustedWeed), uint16(bustedCoke));\r\n  }\r\n\r\n\r\n  function hijack(uint256 _hijackerId, uint256 _victimId)  public payable whenNotPaused{\r\n    require(narcoCore.ownerOf(_hijackerId) == msg.sender); // must be owner\r\n    require(msg.value >= hijackPrice);\r\n\r\n    // has the victim escaped?\r\n    if (getNarcoLocation(_hijackerId)!=getNarcoLocation(_victimId)){\r\n        EscapedHijack(_hijackerId, _victimId , getNarcoLocation(_victimId));\r\n        narcoCore.incrementStat(_victimId, 6); // lucky escape\r\n    }else\r\n    {\r\n      // hijack calculation\r\n      uint256 hijackerWeedTotal;\r\n      uint256 hijackerCokeTotal;\r\n      uint16[6] memory hijackerSkills;\r\n      uint8[4] memory hijackerConsumables;\r\n      uint256[6] memory hijackerCooldowns;\r\n\r\n      (\r\n                  ,\r\n        hijackerWeedTotal,\r\n        hijackerCokeTotal,\r\n        hijackerSkills,\r\n        hijackerConsumables,\r\n                  ,\r\n                  ,\r\n                  ,\r\n        hijackerCooldowns,\r\n                  ,\r\n      ) = narcoCore.getNarco(_hijackerId);\r\n\r\n      // does hijacker have capacity to carry any loot?\r\n\r\n      uint256 victimWeedTotal;\r\n      uint256 victimCokeTotal;\r\n      uint16[6] memory victimSkills;\r\n      uint256[6] memory victimCooldowns;\r\n      uint8 victimHomeLocation;\r\n      (\r\n                  ,\r\n        victimWeedTotal,\r\n        victimCokeTotal,\r\n        victimSkills,\r\n                  ,\r\n                  ,\r\n       victimHomeLocation,\r\n                  ,\r\n        victimCooldowns,\r\n                  ,\r\n      ) = narcoCore.getNarco(_victimId);\r\n\r\n      // victim is not in home location , or is officer lardass\r\n      require(getNarcoLocation(_victimId)!=victimHomeLocation || _victimId==0);\r\n      require(hijackerConsumables[3] >0); // narco has ammo\r\n\r\n      require(now>hijackerCooldowns[3]); // must be outside cooldown\r\n\r\n      // consume the ammo\r\n      narcoCore.updateConsumable(_hijackerId, 3 , hijackerConsumables[3]-1);\r\n      // attempt the hijack\r\n\r\n      // 3 = attackIndex\r\n      // 4 = defenseIndex\r\n\r\n      if (random((hijackerSkills[3]+victimSkills[4]))+1 >victimSkills[4]) {\r\n        // successful hijacking\r\n\r\n        doHijack(_hijackerId  , _victimId , victimWeedTotal , victimCokeTotal);\r\n\r\n        // heist character\r\n        if (_victimId==0){\r\n             narcoCore.incrementStat(_hijackerId, 5); // raidSuccessful\r\n        }\r\n\r\n      }else{\r\n        // successfully defended\r\n        narcoCore.incrementStat(_victimId, 4); // defendedSuccessfully\r\n        HijackDefended( _hijackerId,_victimId);\r\n      }\r\n\r\n    } // end if escaped\r\n\r\n    //narcoCore.setCooldown( _hijackerId ,  3 , now + min(3 minutes,(455-(5*hijackerSkills[3])* 1 seconds))); // cooldown\r\n     narcoCore.setCooldown( _hijackerId ,  3 , now + (455-(5*hijackerSkills[3])* 1 seconds)); // cooldown\r\n\r\n      // distribute the hijack revenue\r\n      _distributeRevenue(hijackPrice, getNarcoLocation(_hijackerId) , 50, 50);\r\n\r\n  } // end hijack function\r\n\r\n  function doHijack(uint256 _hijackerId  , uint256 _victimId ,  uint256 victimWeedTotal , uint256 victimCokeTotal) private {\r\n\r\n        uint256 hijackerCapacity =  narcoCore.getRemainingCapacity(_hijackerId);\r\n\r\n        // fill pockets starting with coke\r\n        uint16 stolenCoke = uint16(min(hijackerCapacity , (victimCokeTotal/2))); // steal 50%\r\n        uint16 stolenWeed = uint16(min(hijackerCapacity - stolenCoke, (victimWeedTotal/2))); // steal 50%\r\n\r\n        // 50% chance to start with weed\r\n        if (random(100)>50){\r\n           stolenWeed = uint16(min(hijackerCapacity , (victimWeedTotal/2))); // steal 50%\r\n           stolenCoke = uint16(min(hijackerCapacity - stolenWeed, (victimCokeTotal/2))); // steal 50\r\n        }\r\n\r\n        // steal some loot this calculation tbd\r\n        // for now just take all coke / weed\r\n        if (stolenWeed>0){\r\n          narcoCore.updateWeedTotal(_hijackerId, true, stolenWeed);\r\n          narcoCore.updateWeedTotal(_victimId,false, stolenWeed);\r\n        }\r\n        if (stolenCoke>0){\r\n          narcoCore.updateCokeTotal(_hijackerId, true , stolenCoke);\r\n          narcoCore.updateCokeTotal(_victimId,false, stolenCoke);\r\n        }\r\n\r\n        narcoCore.incrementStat(_hijackerId, 3); // hijackSuccessful\r\n        Hijacked(_hijackerId, _victimId , stolenWeed, stolenCoke);\r\n\r\n\r\n  }\r\n\r\n\r\n  // pseudo random - but does that matter?\r\n  uint64 _seed = 0;\r\n  function random(uint64 upper) private returns (uint64 randomNumber) {\r\n     _seed = uint64(keccak256(keccak256(block.blockhash(block.number-1), _seed), now));\r\n     return _seed % upper;\r\n   }\r\n\r\n   function min(uint a, uint b) private pure returns (uint) {\r\n            return a < b ? a : b;\r\n   }\r\n   function max(uint a, uint b) private pure returns (uint) {\r\n            return a > b ? a : b;\r\n   }\r\n   function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n     assert(b <= a);\r\n     return a - b;\r\n   }\r\n  // never call this from a contract\r\n  /// @param _loc that we are interested in\r\n  function narcosByDistrict(uint8 _loc) public view returns(uint256[] narcosHere) {\r\n    uint256 tokenCount = numberOfNarcosByDistrict(_loc);\r\n    uint256 totalNarcos = narcoCore.totalSupply();\r\n    uint256[] memory result = new uint256[](tokenCount);\r\n    uint256 narcoId;\r\n    uint256 resultIndex = 0;\r\n    for (narcoId = 0; narcoId <= totalNarcos; narcoId++) {\r\n      if (getNarcoLocation(narcoId) == _loc) {\r\n        result[resultIndex] = narcoId;\r\n        resultIndex++;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function numberOfNarcosByDistrict(uint8 _loc) public view returns(uint256 number) {\r\n    uint256 count = 0;\r\n    uint256 narcoId;\r\n    for (narcoId = 0; narcoId <= narcoCore.totalSupply(); narcoId++) {\r\n      if (getNarcoLocation(narcoId) == _loc) {\r\n        count++;\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"narcoCore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"},{\"name\":\"_total\",\"type\":\"uint16\"}],\"name\":\"updatCokeTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"travelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_hasMarket\",\"type\":\"bool\"}],\"name\":\"createNamedDistrict\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coreAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDistrict\",\"outputs\":[{\"name\":\"exits\",\"type\":\"uint256[6]\"},{\"name\":\"hasMarket\",\"type\":\"bool\"},{\"name\":\"prices\",\"type\":\"uint256[24]\"},{\"name\":\"isStocked\",\"type\":\"bool[24]\"},{\"name\":\"weedPot\",\"type\":\"uint256\"},{\"name\":\"cokePot\",\"type\":\"uint256\"},{\"name\":\"weedAmountHere\",\"type\":\"uint256\"},{\"name\":\"cokeAmountHere\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spread\",\"type\":\"uint256\"}],\"name\":\"setSpreadPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenContractAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setDevFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_weedSupply\",\"type\":\"uint256\"},{\"name\":\"_cokeSupply\",\"type\":\"uint256\"}],\"name\":\"initializeSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketItems\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"itemName\",\"type\":\"string\"},{\"name\":\"skillAffected\",\"type\":\"uint8\"},{\"name\":\"upgradeAmount\",\"type\":\"uint8\"},{\"name\":\"levelRequired\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hijackerId\",\"type\":\"uint256\"},{\"name\":\"_victimId\",\"type\":\"uint256\"}],\"name\":\"hijack\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNarcosCoreAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"}],\"name\":\"getNarcoLocation\",\"outputs\":[{\"name\":\"location\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"},{\"name\":\"_total\",\"type\":\"uint16\"}],\"name\":\"updateWeedTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDopeRaiderDistrictsCore\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setTravelPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lrp\",\"type\":\"uint256\"}],\"name\":\"setLocalRevenuPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hijackPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[6]\"}],\"name\":\"setTokenAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_loc\",\"type\":\"uint8\"}],\"name\":\"numberOfNarcosByDistrict\",\"outputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_skillAffected\",\"type\":\"uint8\"},{\"name\":\"_upgradeAmount\",\"type\":\"uint8\"},{\"name\":\"_levelRequired\",\"type\":\"uint8\"},{\"name\":\"_itemName\",\"type\":\"string\"}],\"name\":\"configureMarketItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_exits\",\"type\":\"uint256[6]\"},{\"name\":\"_prices\",\"type\":\"uint256[24]\"},{\"name\":\"_isStocked\",\"type\":\"bool[24]\"}],\"name\":\"configureDistrict\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"},{\"name\":\"_exitId\",\"type\":\"uint256\"}],\"name\":\"travelTo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"},{\"name\":\"_district\",\"type\":\"uint256\"},{\"name\":\"_itemIndex\",\"type\":\"uint256\"},{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_range\",\"type\":\"uint256\"}],\"name\":\"setBustRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setHijackPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_district\",\"type\":\"uint256\"},{\"name\":\"_splitW\",\"type\":\"uint8\"},{\"name\":\"_splitC\",\"type\":\"uint8\"}],\"name\":\"distributeRevenue\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"},{\"name\":\"_district\",\"type\":\"uint256\"},{\"name\":\"_itemIndex\",\"type\":\"uint256\"},{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"sellItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setAirLiftPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"localRevenuePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"floatEconony\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_loc\",\"type\":\"uint8\"}],\"name\":\"narcosByDistrict\",\"outputs\":[{\"name\":\"narcosHere\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_district\",\"type\":\"uint256\"},{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"increaseDistrictWeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airLiftPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_newQuantity\",\"type\":\"uint8\"}],\"name\":\"updateConsumable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_narcoId\",\"type\":\"uint256\"}],\"name\":\"getNarcoHomeLocation\",\"outputs\":[{\"name\":\"location\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_district\",\"type\":\"uint256\"},{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"increaseDistrictCoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDevFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"districts\",\"outputs\":[{\"name\":\"weedPot\",\"type\":\"uint256\"},{\"name\":\"weedAmountHere\",\"type\":\"uint256\"},{\"name\":\"cokePot\",\"type\":\"uint256\"},{\"name\":\"cokeAmountHere\",\"type\":\"uint256\"},{\"name\":\"hasMarket\",\"type\":\"bool\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spreadPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bustRange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"location\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"narcoId\",\"type\":\"uint256\"}],\"name\":\"NarcoArrived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"location\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"narcoId\",\"type\":\"uint256\"}],\"name\":\"NarcoLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"narcoId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"confiscatedWeed\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"confiscatedCoke\",\"type\":\"uint16\"}],\"name\":\"TravelBust\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hijacker\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"victim\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stolenWeed\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"stolenCoke\",\"type\":\"uint16\"}],\"name\":\"Hijacked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hijacker\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"victim\",\"type\":\"uint256\"}],\"name\":\"HijackDefended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hijacker\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"victim\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"escapeLocation\",\"type\":\"uint8\"}],\"name\":\"EscapedHijack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DistrictsCore","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ee68c42cb2a1ac2a9c9a9116e0605179194d3e4697ba500c24fe7d90429a6fb2"}]}