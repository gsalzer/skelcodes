{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n/*\r\n This issue is covered by\r\nINTERNATIONAL BILL OF EXCHANGE (IBOE), REGISTRATION NUMBER: 99-279-0080 and SERIAL\r\nNUMBER: 062014 PARTIAL ASSIGNMENT /\r\nRELEASE IN THE AMOUNT OF $ 500,000,000,000.00 USD in words;\r\nFIVE HUNDRED BILLION and No / I00 USD, submitted to and in accordance with FINAL ARTICLES OF\r\n(UNICITRAL Convention 1988) ratified Articles 1-7, 11-13.46-3, 47-4 (c), 51, House Joint Resolution 192 of June 5.1933,\r\nUCC 1-104, 10-104. Reserved RELASED BY SECRETARY OF THE TRESAURY OF THE UNITED STATES OF AMERICA\r\n */\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply()public view returns(uint total_Supply);\r\n    function balanceOf(address who)public view returns(uint256);\r\n    function allowance(address owner, address spender)public view returns(uint);\r\n    function transferFrom(address from, address to, uint value)public returns(bool ok);\r\n    function approve(address spender, uint value)public returns(bool ok);\r\n    function transfer(address to, uint value)public returns(bool ok);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract FENIX is ERC20\r\n{\r\n    using SafeMath for uint256;\r\n        // Name of the token\r\n    string public constant name = \"FENIX\";\r\n\r\n    // Symbol of token\r\n    string public constant symbol = \"FNX\";\r\n    uint8 public constant decimals = 18;\r\n    uint public _totalsupply = 1000000000 * 10 ** 18; // 1 Billion FNX Coins\r\n    address public owner;\r\n    uint256 public _price_tokn = 100;  //1 USD in cents\r\n    uint256 no_of_tokens;\r\n    uint256 total_token;\r\n    bool stopped = false;\r\n    uint256 public ico_startdate;\r\n    uint256 public ico_enddate;\r\n    uint256 public preico_startdate;\r\n    uint256 public preico_enddate;\r\n    bool public icoRunningStatus;\r\n    bool public lockstatus; \r\n  \r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    address public ethFundMain = 0xBe80a978364649422708470c979435f43e027209; // address to receive ether from smart contract\r\n    uint256 public ethreceived;\r\n    uint bonusCalculationFactor;\r\n    uint256 public pre_minContribution = 100000;// 1000 USD in cents for pre sale\r\n    uint256 ContributionAmount;\r\n    address public admin;  // admin address used to do transaction through the wallet on behalf of owner\r\n \r\n \r\n    uint public priceFactor;\r\n    mapping(address => uint256) availTokens;\r\n\r\n    enum Stages {\r\n        NOTSTARTED,\r\n        PREICO,\r\n        ICO,\r\n        ENDED\r\n    }\r\n    Stages public stage;\r\n\r\n    modifier atStage(Stages _stage) {\r\n        require (stage == _stage);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        require (msg.sender == owner);\r\n     _;\r\n    }\r\n\r\n  \r\n    constructor(uint256 EtherPriceFactor) public\r\n    {\r\n        require(EtherPriceFactor != 0);\r\n        owner = msg.sender;\r\n        balances[owner] = 890000000 * 10 ** 18;  // 890 Million given to owner\r\n        stage = Stages.NOTSTARTED;\r\n        icoRunningStatus =true;\r\n        lockstatus = true;\r\n        priceFactor = EtherPriceFactor;\r\n        emit Transfer(0, owner, balances[owner]);\r\n    }\r\n\r\n    function () public payable\r\n    {\r\n        require(stage != Stages.ENDED);\r\n        require(!stopped && msg.sender != owner);\r\n        if (stage == Stages.PREICO && now <= preico_enddate){\r\n             require((msg.value).mul(priceFactor.mul(100)) >= (pre_minContribution.mul(10 ** 18)));\r\n\r\n          y();\r\n\r\n    }\r\n    else  if (stage == Stages.ICO && now <= ico_enddate){\r\n  \r\n          _price_tokn= getCurrentTokenPrice();\r\n       \r\n          y();\r\n\r\n    }\r\n    else {\r\n        revert();\r\n    }\r\n    }\r\n    \r\n   \r\n\r\n  function getCurrentTokenPrice() private returns (uint)\r\n        {\r\n        uint price_tokn;\r\n        bonusCalculationFactor = (block.timestamp.sub(ico_startdate)).div(3600); //time period in seconds\r\n        if (bonusCalculationFactor== 0) \r\n            price_tokn = 70;                     //30 % Discount\r\n        else if (bonusCalculationFactor >= 1 && bonusCalculationFactor < 24) \r\n            price_tokn = 75;                     //25 % Discount\r\n        else if (bonusCalculationFactor >= 24 && bonusCalculationFactor < 168) \r\n            price_tokn = 80;                      //20 % Discount\r\n        else if (bonusCalculationFactor >= 168 && bonusCalculationFactor < 336) \r\n            price_tokn = 90;                     //10 % Discount\r\n        else if (bonusCalculationFactor >= 336) \r\n            price_tokn = 100;                  //0 % Discount\r\n            \r\n            return price_tokn;\r\n     \r\n        }\r\n        \r\n         function y() private {\r\n            \r\n             no_of_tokens = ((msg.value).mul(priceFactor.mul(100))).div(_price_tokn);\r\n             if(_price_tokn >=80){\r\n                 availTokens[msg.sender] = availTokens[msg.sender].add(no_of_tokens);\r\n             }\r\n             ethreceived = ethreceived.add(msg.value);\r\n             balances[address(this)] = (balances[address(this)]).sub(no_of_tokens);\r\n             balances[msg.sender] = balances[msg.sender].add(no_of_tokens);\r\n             emit  Transfer(address(this), msg.sender, no_of_tokens);\r\n    }\r\n\r\n   \r\n    // called by the owner, pause ICO\r\n    function StopICO() external onlyOwner  {\r\n        stopped = true;\r\n\r\n    }\r\n\r\n    // called by the owner , resumes ICO\r\n    function releaseICO() external onlyOwner\r\n    {\r\n        stopped = false;\r\n\r\n    }\r\n    \r\n    // to change price of Ether in USD, in case price increases or decreases\r\n     function setpricefactor(uint256 newPricefactor) external onlyOwner\r\n    {\r\n        priceFactor = newPricefactor;\r\n        \r\n    }\r\n    \r\n     function setEthmainAddress(address newEthfundaddress) external onlyOwner\r\n    {\r\n        ethFundMain = newEthfundaddress;\r\n    }\r\n    \r\n     function setAdminAddress(address newAdminaddress) external onlyOwner\r\n    {\r\n        admin = newAdminaddress;\r\n    }\r\n    \r\n     function start_PREICO() external onlyOwner atStage(Stages.NOTSTARTED)\r\n      {\r\n          stage = Stages.PREICO;\r\n          stopped = false;\r\n          _price_tokn = 70;     //30 % dicount\r\n          balances[address(this)] =10000000 * 10 ** 18 ; //10 million in preICO\r\n         preico_startdate = now;\r\n         preico_enddate = now + 7 days; //time for preICO\r\n       emit Transfer(0, address(this), balances[address(this)]);\r\n          }\r\n    \r\n    function start_ICO() external onlyOwner atStage(Stages.PREICO)\r\n      {\r\n          stage = Stages.ICO;\r\n          stopped = false;\r\n          balances[address(this)] =balances[address(this)].add(100000000 * 10 ** 18); //100 million in ICO\r\n         ico_startdate = now;\r\n         ico_enddate = now + 21 days; //time for ICO\r\n       emit Transfer(0, address(this), 100000000 * 10 ** 18);\r\n          }\r\n\r\n    function end_ICO() external onlyOwner atStage(Stages.ICO)\r\n    {\r\n        require(now > ico_enddate);\r\n        stage = Stages.ENDED;\r\n        icoRunningStatus = false;\r\n        uint256 x = balances[address(this)];\r\n        balances[owner] = (balances[owner]).add( balances[address(this)]);\r\n        balances[address(this)] = 0;\r\n       emit  Transfer(address(this), owner , x);\r\n        \r\n    }\r\n    \r\n    // This function can be used by owner in emergency to update running status parameter\r\n    function fixSpecications(bool RunningStatusICO) external onlyOwner\r\n    {\r\n        icoRunningStatus = RunningStatusICO;\r\n    }\r\n    \r\n    // function to remove locking period after 12 months, can be called only be owner\r\n    function removeLocking(bool RunningStatusLock) external onlyOwner\r\n    {\r\n        lockstatus = RunningStatusLock;\r\n    }\r\n\r\n\r\n   function balanceDetails(address investor)\r\n        constant\r\n        public\r\n        returns (uint256,uint256)\r\n    {\r\n        return (availTokens[investor], balances[investor]) ;\r\n    }\r\n    \r\n    // what is the total supply of the ech tokens\r\n    function totalSupply() public view returns(uint256 total_Supply) {\r\n        total_Supply = _totalsupply;\r\n    }\r\n\r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner)public view returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(address _from, address _to, uint256 _amount)public returns(bool success) {\r\n        require(_to != 0x0);\r\n        require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\r\n        balances[_from] = (balances[_from]).sub(_amount);\r\n        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount)public returns(bool success) {\r\n        require(_spender != 0x0);\r\n        if (!icoRunningStatus && lockstatus) {\r\n            require(_amount <= availTokens[msg.sender]);\r\n        }\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)public view returns(uint256 remaining) {\r\n        require(_owner != 0x0 && _spender != 0x0);\r\n        return allowed[_owner][_spender];\r\n    }\r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _amount) public returns(bool success) {\r\n       \r\n       if ( msg.sender == owner || msg.sender == admin) {\r\n            require(balances[msg.sender] >= _amount && _amount >= 0);\r\n            balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n            balances[_to] += _amount;\r\n            availTokens[_to] += _amount;\r\n            emit Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        }\r\n        else\r\n        if (!icoRunningStatus && lockstatus && msg.sender != owner) {\r\n            require(availTokens[msg.sender] >= _amount);\r\n            availTokens[msg.sender] -= _amount;\r\n            balances[msg.sender] -= _amount;\r\n            availTokens[_to] += _amount;\r\n            balances[_to] += _amount;\r\n            emit Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        }\r\n\r\n          else if(!lockstatus)\r\n         {\r\n           require(balances[msg.sender] >= _amount && _amount >= 0);\r\n           balances[msg.sender] = (balances[msg.sender]).sub(_amount);\r\n           balances[_to] = (balances[_to]).add(_amount);\r\n           emit Transfer(msg.sender, _to, _amount);\r\n           return true;\r\n          }\r\n\r\n        else{\r\n            revert();\r\n        }\r\n    }\r\n\r\n\r\n    //In case the ownership needs to be transferred\r\n\tfunction transferOwnership(address newOwner)public onlyOwner\r\n\t{\r\n\t    require( newOwner != 0x0);\r\n\t    balances[newOwner] = (balances[newOwner]).add(balances[owner]);\r\n\t    balances[owner] = 0;\r\n\t    owner = newOwner;\r\n\t    emit Transfer(msg.sender, newOwner, balances[newOwner]);\r\n\t}\r\n\r\n\r\n    function drain() external onlyOwner {\r\n        address myAddress = this;\r\n        ethFundMain.transfer(myAddress.balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"end_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethreceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPricefactor\",\"type\":\"uint256\"}],\"name\":\"setpricefactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdminaddress\",\"type\":\"address\"}],\"name\":\"setAdminAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start_PREICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEthfundaddress\",\"type\":\"address\"}],\"name\":\"setEthmainAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_price_tokn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundMain\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_enddate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"RunningStatusLock\",\"type\":\"bool\"}],\"name\":\"removeLocking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pre_minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"balanceDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"RunningStatusICO\",\"type\":\"bool\"}],\"name\":\"fixSpecications\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preico_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preico_enddate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockstatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoRunningStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"EtherPriceFactor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FENIX","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000001f4","Library":"","SwarmSource":"bzzr://a2e03f93b0100b7e3db5901acee53b9a1bf916e47e9ef83cc703eba354a84097"}]}