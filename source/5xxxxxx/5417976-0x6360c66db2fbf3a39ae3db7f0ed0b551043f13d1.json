{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n/***********************************************\r\n ***************\r\n * UTF8 library\r\n * == FINAL ==\r\n ***************\r\n **********************************************/\r\nlibrary UTF8 {\r\n    function getStringLength(string str) internal pure returns(int256 length) {\r\n        uint256 i = 0;\r\n        bytes memory str_rep = bytes(str);\r\n        while(i < str_rep.length) {\r\n            if (str_rep[i] >> 7 == 0)         i += 1;\r\n            else if (str_rep[i] >> 5 == 0x6)  i += 2;\r\n            else if (str_rep[i] >> 4 == 0xE)  i += 3;\r\n            else if (str_rep[i] >> 3 == 0x1E) i += 4;\r\n            else                              i += 1;\r\n            length++;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/***********************************************\r\n ***************\r\n * Math library\r\n ***************\r\n **********************************************/\r\nlibrary Math {\r\n    function divide(int256 numerator, int256 denominator, uint256 precision) internal pure returns(int256) {\r\n        int256 _numerator = numerator * int256(10 ** (precision + 1));\r\n        int256 _quotient  = ((_numerator / denominator) + 5) / 10;\r\n        return _quotient;\r\n    }\r\n\r\n    function rand(uint256 nonce, int256 min, int256 max) internal view returns(int256) {\r\n        return int256(uint256(keccak256(nonce + block.number + block.timestamp)) % uint256((max - min))) + min;\r\n    }\r\n\r\n    function rand16(uint256 nonce, uint16 min, uint16 max) internal view returns(uint16) {\r\n        return uint16(uint256(keccak256(nonce + block.number + block.timestamp)) % uint256(max - min)) + min;\r\n    }\r\n\r\n    function rand8(uint256 nonce, uint8 min, uint8 max) internal view returns(uint8) {\r\n        return uint8(uint256(keccak256(nonce + block.number + block.timestamp)) % uint256(max - min)) + min;\r\n    }\r\n\r\n    function percent(uint256 value, uint256 per) internal pure returns(uint256) {\r\n        return uint256((divide(int256(value), 100, 4) * int256(per)) / 10000);\r\n    }\r\n}\r\n\r\n\r\n/***********************************************\r\n ***************\r\n * Ownable contract\r\n * == FINAL ==\r\n ***************\r\n **********************************************/\r\ncontract Ownable {\r\n    address public owner;\r\n    \r\n    modifier onlyOwner()  { require(msg.sender == owner); _; }\r\n\r\n    function Ownable() public { owner = msg.sender; }\r\n\r\n    function updateContractOwner(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/***********************************************\r\n ***************\r\n * Priced contract\r\n ***************\r\n **********************************************/\r\ncontract Priced is Ownable {\r\n    uint256 private price       = 500000000000000000;  // Basic price in wei\r\n    uint16  private zMax        = 1600;                // Max z for get price percent\r\n    uint256 private zPrice      = 25000000000000000;   // Price for each item in z index (in wei)\r\n    uint8   private commission  = 10;                  // Update commission in percent\r\n\r\n    function setPriceData(uint256 _price, uint16 _zMax, uint256 _zPrice, uint8 _commission) external onlyOwner {\r\n        price       = _price;\r\n        zMax        = _zMax;\r\n        zPrice      = _zPrice;\r\n        commission  = _commission;\r\n    }\r\n\r\n    function getCreatePrice(uint16 z, uint256 zCount) internal view returns(uint256) {\r\n        return ((price * uint256(Math.divide(int256(z), int256(zMax), 4))) / 10000) + (zPrice * zCount);\r\n    }\r\n\r\n    function getCommission(uint256 starPrice) internal view returns(uint256) {\r\n        return Math.percent(starPrice, commission);\r\n    }\r\n}\r\n\r\n\r\n/***********************************************\r\n ***************\r\n * Control contract\r\n * == FINAL ==\r\n ***************\r\n **********************************************/\r\ncontract Control is Ownable {\r\n    /**\r\n     * Withdraw balance\r\n     */\r\n    function withdrawBalance(address recipient, uint256 value) external onlyOwner {\r\n        require(value > 0);\r\n        require(value < address(this).balance);\r\n        recipient.transfer(value);\r\n    }\r\n}\r\n\r\n\r\n/***********************************************\r\n ***************\r\n * Storage contract\r\n ***************\r\n **********************************************/\r\ncontract Storage {\r\n    struct Star {\r\n        address owner;   // Star owner\r\n        uint8   gid;     // Star galaxy id\r\n        uint8   zIndex;  // Star z\r\n        uint16  box;     // Current xy box \r\n        uint8   inbox;   // Random x-y in box\r\n        uint8   stype;   // Star type\r\n        uint8   color;   // Star color\r\n        uint256 price;   // Price for this star\r\n        uint256 sell;    // Sell price for this star\r\n        bool    deleted; // Star is deleted\r\n        string  name;    // User defined star name\r\n        string  message; // User defined message\r\n    }\r\n\r\n    // General stars storage\r\n    Star[] internal stars;\r\n\r\n    // Stars at zIndex area (gid => zIndex => count)\r\n    mapping(uint8 => mapping(uint8 => uint16)) internal zCount;    \r\n\r\n    // Stars positions (gid => zIndex => box => starId)\r\n    mapping(uint8 => mapping(uint8 => mapping(uint16 => uint256))) private positions;    \r\n\r\n\r\n    /**\r\n     * Add new star\r\n     */\r\n    function addStar(address owner, uint8 gid, uint8 zIndex, uint16 box, uint8 inbox, uint8 stype, uint8 color, uint256 price) internal returns(uint256) {\r\n        Star memory _star = Star({\r\n            owner: owner,\r\n            gid: gid, zIndex: zIndex, box: box, inbox: inbox,\r\n            stype: stype, color: color,\r\n            price: price, sell: 0, deleted: false, name: \"\", message: \"\"\r\n        });\r\n        uint256 starId = stars.push(_star) - 1;\r\n        placeStar(gid, zIndex, box, starId);\r\n        return starId;\r\n    }\r\n\r\n    function placeStar(uint8 gid, uint8 zIndex, uint16 box, uint256 starId) private {\r\n        zCount[gid][zIndex]         = zCount[gid][zIndex] + 1;\r\n        positions[gid][zIndex][box] = starId;\r\n    }\r\n\r\n    function setStarNameMessage(uint256 starId, string name, string message) internal {\r\n        stars[starId].name    = name;\r\n        stars[starId].message = message;\r\n    }\r\n\r\n    function setStarNewOwner(uint256 starId, address newOwner) internal {\r\n        stars[starId].owner = newOwner;\r\n    }\r\n\r\n    function setStarSellPrice(uint256 starId, uint256 sellPrice) internal {\r\n        stars[starId].sell = sellPrice;\r\n    }\r\n\r\n    function setStarDeleted(uint256 starId) internal {\r\n        stars[starId].deleted = true;\r\n        setStarSellPrice(starId, 0);\r\n        setStarNameMessage(starId, \"\", \"\");\r\n        setStarNewOwner(starId, address(0));\r\n\r\n        Star storage _star = stars[starId];\r\n        zCount[_star.gid][_star.zIndex]               = zCount[_star.gid][_star.zIndex] - 1;\r\n        positions[_star.gid][_star.zIndex][_star.box] = 0;\r\n    }\r\n\r\n\r\n    /**\r\n     * Get star by id\r\n     */\r\n    function getStar(uint256 starId) external view returns(address owner, uint8 gid, uint8 zIndex, uint16 box, uint8 inbox,\r\n                                                           uint8 stype, uint8 color,\r\n                                                           uint256 price, uint256 sell, bool deleted,\r\n                                                           string name, string message) {\r\n        Star storage _star = stars[starId];\r\n        owner      = _star.owner;\r\n        gid        = _star.gid;\r\n        zIndex     = _star.zIndex;\r\n        box        = _star.box;\r\n        inbox      = _star.inbox;\r\n        stype      = _star.stype;\r\n        color      = _star.color;\r\n        price      = _star.price;\r\n        sell       = _star.sell;\r\n        deleted    = _star.deleted;\r\n        name       = _star.name;\r\n        message    = _star.message;\r\n    }\r\n\r\n    function getStarIdAtPosition(uint8 gid, uint8 zIndex, uint16 box) internal view returns(uint256) {\r\n        return positions[gid][zIndex][box];\r\n    }\r\n\r\n    function starExists(uint256 starId) internal view returns(bool) {\r\n        return starId > 0 && starId < stars.length && stars[starId].deleted == false;\r\n    }\r\n\r\n    function isStarOwner(uint256 starId, address owner) internal view returns(bool) {\r\n        return stars[starId].owner == owner;\r\n    }\r\n}\r\n\r\n\r\n/***********************************************\r\n ***************\r\n * Validation contract\r\n ***************\r\n **********************************************/\r\ncontract Validation is Priced, Storage {\r\n    uint8   private gidMax     = 5;\r\n    uint16  private zMin       = 100;\r\n    uint16  private zMax       = 1600;\r\n    uint8   private lName      = 25;\r\n    uint8   private lMessage   = 140;\r\n    uint8   private maxCT      = 255; // Max color, types\r\n    uint256 private nonce      = 1;\r\n    uint8   private maxIRandom = 4;\r\n    uint16  private boxSize    = 20;  // Universe box size\r\n    uint8   private inboxXY    = 100;\r\n\r\n    // Available box count in each z index (zIndex => count)\r\n    mapping(uint8 => uint16) private boxes;\r\n\r\n\r\n    /**\r\n     * Set validation data\r\n     */\r\n    function setValidationData(uint16 _zMin, uint16 _zMax, uint8 _lName, uint8 _lMessage, uint8 _maxCT, uint8 _maxIR, uint16 _boxSize) external onlyOwner {\r\n        zMin       = _zMin;\r\n        zMax       = _zMax;\r\n        lName      = _lName;\r\n        lMessage   = _lMessage;\r\n        maxCT      = _maxCT;\r\n        maxIRandom = _maxIR;\r\n        boxSize    = _boxSize;\r\n        inboxXY    = uint8((boxSize * boxSize) / 4);\r\n    }\r\n\r\n    function setGidMax(uint8 _gidMax) external onlyOwner {\r\n        gidMax = _gidMax;\r\n    }\r\n\r\n\r\n    /**\r\n     * Get set boxes\r\n     */\r\n    function setBoxCount(uint16 z, uint16 count) external onlyOwner {\r\n        require(isValidZ(z));\r\n        boxes[getZIndex(z)] = count;\r\n    }\r\n\r\n    function getBoxCount(uint16 z) external view returns(uint16 count) {\r\n        require(isValidZ(z));\r\n        return boxes[getZIndex(z)];\r\n    }\r\n\r\n    function getBoxCountZIndex(uint8 zIndex) private view returns(uint16 count) {\r\n        return boxes[zIndex];\r\n    }\r\n\r\n\r\n    /**\r\n     * Get z index and z count\r\n     */\r\n    function getZIndex(uint16 z) internal view returns(uint8 zIndex) {\r\n        return uint8(z / boxSize);\r\n    }\r\n\r\n    function getZCount(uint8 gid, uint8 zIndex) public view returns(uint16 count) {\r\n        return zCount[gid][zIndex];\r\n    }\r\n\r\n    \r\n    /**\r\n     * Validate star parameters\r\n     */\r\n    function isValidGid(uint8 gid) internal view returns(bool) {\r\n        return gid > 0 && gid <= gidMax;\r\n    }\r\n\r\n    function isValidZ(uint16 z) internal view returns(bool) {\r\n        return z >= zMin && z <= zMax;\r\n    }\r\n\r\n    function isValidBox(uint8 gid, uint8 zIndex, uint16 box) internal view returns(bool) {\r\n        return getStarIdAtPosition(gid, zIndex, box) == 0;\r\n    }\r\n\r\n\r\n    /**\r\n     * Check name and message length\r\n     */\r\n    function isValidNameLength(string name) internal view returns(bool) {\r\n        return UTF8.getStringLength(name) <= lName;\r\n    }\r\n\r\n    function isValidMessageLength(string message) internal view returns(bool) {\r\n        return UTF8.getStringLength(message) <= lMessage;\r\n    }\r\n\r\n\r\n    /**\r\n     * Check is valid msg value\r\n     */\r\n    function isValidMsgValue(uint256 price) internal returns(bool) {\r\n        if (msg.value < price) return false;\r\n        if (msg.value > price)\r\n            msg.sender.transfer(msg.value - price);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Get random number\r\n     */\r\n    function getRandom16(uint16 min, uint16 max) private returns(uint16) {\r\n        nonce++;\r\n        return Math.rand16(nonce, min, max);\r\n    }\r\n\r\n    function getRandom8(uint8 min, uint8 max) private returns(uint8) {\r\n        nonce++;\r\n        return Math.rand8(nonce, min, max);\r\n    }\r\n\r\n    function getRandomColorType() internal returns(uint8) {\r\n        return getRandom8(0, maxCT);\r\n    }\r\n\r\n\r\n    /**\r\n     * Get random star position\r\n     */\r\n    function getRandomPosition(uint8 gid, uint8 zIndex) internal returns(uint16 box, uint8 inbox) {\r\n        uint16 boxCount = getBoxCountZIndex(zIndex);\r\n        uint16 randBox  = 0;\r\n        if (boxCount == 0) revert();\r\n\r\n        uint8 ii   = maxIRandom;\r\n        bool valid = false;\r\n        while (!valid && ii > 0) {\r\n            randBox = getRandom16(0, boxCount);\r\n            valid   = isValidBox(gid, zIndex, randBox);\r\n            ii--;\r\n        }\r\n\r\n        if (!valid) revert();\r\n        return(randBox, getRandom8(0, inboxXY));\r\n    }\r\n}\r\n\r\n\r\n/***********************************************\r\n ***************\r\n * Stars general contract\r\n ***************\r\n **********************************************/\r\ncontract Stars is Control, Validation {\r\n    // Contrac events\r\n    event StarCreated(uint256 starId);\r\n    event StarUpdated(uint256 starId, uint8 reason);\r\n    event StarDeleted(uint256 starId, address owner);\r\n    event StarSold   (uint256 starId, address seller, address buyer, uint256 price);\r\n    event StarGifted (uint256 starId, address sender, address recipient);\r\n\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Stars() public {\r\n        // Add star with zero index\r\n        uint256 starId = addStar(address(0), 0, 0, 0, 0, 0, 0, 0);\r\n        setStarNameMessage(starId, \"Universe\", \"Big Bang!\");\r\n    }\r\n\r\n\r\n    /**\r\n     * Create star\r\n     */\r\n    function createStar(uint8 gid, uint16 z, string name, string message) external payable {\r\n        // Check basic requires\r\n        require(isValidGid(gid));\r\n        require(isValidZ(z));\r\n        require(isValidNameLength(name));\r\n        require(isValidMessageLength(message));\r\n\r\n        // Get zIndex\r\n        uint8   zIndex    = getZIndex(z);\r\n        uint256 starPrice = getCreatePrice(z, getZCount(gid, zIndex));\r\n        require(isValidMsgValue(starPrice));\r\n\r\n        // Create star (need to split method into two because solidity got error - to deep stack)\r\n        uint256 starId = newStar(gid, zIndex, starPrice);\r\n        setStarNameMessage(starId, name, message);\r\n\r\n        // Event and returns data\r\n        emit StarCreated(starId);\r\n    }\r\n\r\n    function newStar(uint8 gid, uint8 zIndex, uint256 price) private returns(uint256 starId) {\r\n        uint16 box; uint8 inbox;\r\n        uint8   stype  = getRandomColorType();\r\n        uint8   color  = getRandomColorType();\r\n        (box, inbox)   = getRandomPosition(gid, zIndex);\r\n        starId         = addStar(msg.sender, gid, zIndex, box, inbox, stype, color, price);\r\n    }\r\n\r\n\r\n    /**\r\n     * Update start method\r\n     */\r\n    function updateStar(uint256 starId, string name, string message) external payable {\r\n        // Exists and owned star\r\n        require(starExists(starId));\r\n        require(isStarOwner(starId, msg.sender));\r\n\r\n        // Check basic requires\r\n        require(isValidNameLength(name));\r\n        require(isValidMessageLength(message));        \r\n\r\n        // Get star update price\r\n        uint256 commission = getCommission(stars[starId].price);\r\n        require(isValidMsgValue(commission));\r\n\r\n        // Update star\r\n        setStarNameMessage(starId, name, message);\r\n        emit StarUpdated(starId, 1);\r\n    }    \r\n\r\n\r\n    /**\r\n     * Delete star\r\n     */\r\n    function deleteStar(uint256 starId) external payable {\r\n        // Exists and owned star\r\n        require(starExists(starId));\r\n        require(isStarOwner(starId, msg.sender));\r\n\r\n        // Get star update price\r\n        uint256 commission = getCommission(stars[starId].price);\r\n        require(isValidMsgValue(commission));\r\n\r\n        // Update star data\r\n        setStarDeleted(starId);\r\n        emit StarDeleted(starId, msg.sender);\r\n    }    \r\n\r\n\r\n    /**\r\n     * Set star sell price\r\n     */\r\n    function sellStar(uint256 starId, uint256 sellPrice) external {\r\n        // Exists and owned star\r\n        require(starExists(starId));\r\n        require(isStarOwner(starId, msg.sender));\r\n        require(sellPrice < 10**28);\r\n\r\n        // Set star sell price\r\n        setStarSellPrice(starId, sellPrice);\r\n        emit StarUpdated(starId, 2);\r\n    }    \r\n\r\n\r\n    /**\r\n     * Gift star\r\n     */\r\n    function giftStar(uint256 starId, address recipient) external payable {\r\n        // Check star exists owned\r\n        require(starExists(starId));\r\n        require(recipient != address(0));\r\n        require(isStarOwner(starId, msg.sender));\r\n        require(!isStarOwner(starId, recipient));\r\n\r\n        // Get gift commission\r\n        uint256 commission = getCommission(stars[starId].price);\r\n        require(isValidMsgValue(commission));\r\n\r\n        // Update star\r\n        setStarNewOwner(starId, recipient);\r\n        setStarSellPrice(starId, 0);\r\n        emit StarGifted(starId, msg.sender, recipient);\r\n        emit StarUpdated(starId, 3);\r\n    }    \r\n\r\n\r\n    /**\r\n     * Buy star\r\n     */\r\n    function buyStar(uint256 starId, string name, string message) external payable {\r\n        // Exists and NOT owner\r\n        require(starExists(starId));\r\n        require(!isStarOwner(starId, msg.sender));\r\n        require(stars[starId].sell > 0);\r\n\r\n        // Get sell commission and check value\r\n        uint256 commission = getCommission(stars[starId].price);\r\n        uint256 starPrice  = stars[starId].sell;\r\n        uint256 totalPrice = starPrice + commission;\r\n        require(isValidMsgValue(totalPrice));\r\n\r\n        // Transfer money to seller\r\n        address seller = stars[starId].owner;\r\n        seller.transfer(starPrice);\r\n\r\n        // Update star data\r\n        setStarNewOwner(starId, msg.sender);\r\n        setStarSellPrice(starId, 0);\r\n        setStarNameMessage(starId, name, message);\r\n        emit StarSold(starId, seller, msg.sender, starPrice);\r\n        emit StarUpdated(starId, 4);\r\n    }        \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gid\",\"type\":\"uint8\"},{\"name\":\"z\",\"type\":\"uint16\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"createStar\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gidMax\",\"type\":\"uint8\"}],\"name\":\"setGidMax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starId\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"giftStar\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starId\",\"type\":\"uint256\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"}],\"name\":\"sellStar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_zMax\",\"type\":\"uint16\"},{\"name\":\"_zPrice\",\"type\":\"uint256\"},{\"name\":\"_commission\",\"type\":\"uint8\"}],\"name\":\"setPriceData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_zMin\",\"type\":\"uint16\"},{\"name\":\"_zMax\",\"type\":\"uint16\"},{\"name\":\"_lName\",\"type\":\"uint8\"},{\"name\":\"_lMessage\",\"type\":\"uint8\"},{\"name\":\"_maxCT\",\"type\":\"uint8\"},{\"name\":\"_maxIR\",\"type\":\"uint8\"},{\"name\":\"_boxSize\",\"type\":\"uint16\"}],\"name\":\"setValidationData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starId\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"buyStar\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"z\",\"type\":\"uint16\"},{\"name\":\"count\",\"type\":\"uint16\"}],\"name\":\"setBoxCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starId\",\"type\":\"uint256\"}],\"name\":\"deleteStar\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"starId\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"updateStar\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"starId\",\"type\":\"uint256\"}],\"name\":\"getStar\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"gid\",\"type\":\"uint8\"},{\"name\":\"zIndex\",\"type\":\"uint8\"},{\"name\":\"box\",\"type\":\"uint16\"},{\"name\":\"inbox\",\"type\":\"uint8\"},{\"name\":\"stype\",\"type\":\"uint8\"},{\"name\":\"color\",\"type\":\"uint8\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"sell\",\"type\":\"uint256\"},{\"name\":\"deleted\",\"type\":\"bool\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gid\",\"type\":\"uint8\"},{\"name\":\"zIndex\",\"type\":\"uint8\"}],\"name\":\"getZCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"updateContractOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"z\",\"type\":\"uint16\"}],\"name\":\"getBoxCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"starId\",\"type\":\"uint256\"}],\"name\":\"StarCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"starId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"StarUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"starId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"StarDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"starId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"StarSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"starId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"StarGifted\",\"type\":\"event\"}]","ContractName":"Stars","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9da1480a31b5117c30a4ebb09152979e780f61e0431a5b04b240d7dcc0fc13ff"}]}