{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2017  MixBytes, LLC\r\n\r\n// Licensed under the Apache License, Version 2.0 (the \"License\").\r\n// You may not use this file except in compliance with the License.\r\n\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND (express or implied).\r\n\r\n// Code taken from https://github.com/ethereum/dapp-bin/blob/master/wallet/wallet.sol\r\n// Audit, refactoring and improvements by github.com/Eenae\r\n\r\n// @authors:\r\n// Gav Wood <g@ethdev.com>\r\n// inheritable \"property\" contract that enables methods to be protected by requiring the acquiescence of either a\r\n// single, or, crucially, each of a number of, designated owners.\r\n// usage:\r\n// use modifiers onlyowner (just own owned) or onlymanyowners(hash), whereby the same hash must be provided by\r\n// some number (specified in constructor) of the set of owners (specified in the constructor, modifiable) before the\r\n// interior is executed.\r\n\r\npragma solidity ^0.4.15;\r\n\r\n\r\n/// note: during any ownership changes all pending operations (waiting for more signatures) are cancelled\r\n// TODO acceptOwnership\r\ncontract multiowned {\r\n\r\n\t// TYPES\r\n\r\n    // struct for the status of a pending operation.\r\n    struct MultiOwnedOperationPendingState {\r\n        // count of confirmations needed\r\n        uint yetNeeded;\r\n\r\n        // bitmap of confirmations where owner #ownerIndex's decision corresponds to 2**ownerIndex bit\r\n        uint ownersDone;\r\n\r\n        // position of this operation key in m_multiOwnedPendingIndex\r\n        uint index;\r\n    }\r\n\r\n\t// EVENTS\r\n\r\n    event Confirmation(address owner, bytes32 operation);\r\n    event Revoke(address owner, bytes32 operation);\r\n    event FinalConfirmation(address owner, bytes32 operation);\r\n\r\n    // some others are in the case of an owner changing.\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n    event OwnerAdded(address newOwner);\r\n    event OwnerRemoved(address oldOwner);\r\n\r\n    // the last one is emitted if the required signatures change\r\n    event RequirementChanged(uint newRequirement);\r\n\r\n\t// MODIFIERS\r\n\r\n    // simple single-sig function modifier.\r\n    modifier onlyowner {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n    // multi-sig function modifier: the operation must have an intrinsic hash in order\r\n    // that later attempts can be realised as the same underlying operation and\r\n    // thus count as confirmations.\r\n    modifier onlymanyowners(bytes32 _operation) {\r\n        if (confirmAndCheck(_operation)) {\r\n            _;\r\n        }\r\n        // Even if required number of confirmations has't been collected yet,\r\n        // we can't throw here - because changes to the state have to be preserved.\r\n        // But, confirmAndCheck itself will throw in case sender is not an owner.\r\n    }\r\n\r\n    modifier validNumOwners(uint _numOwners) {\r\n        require(_numOwners > 0 && _numOwners <= c_maxOwners);\r\n        _;\r\n    }\r\n\r\n    modifier multiOwnedValidRequirement(uint _required, uint _numOwners) {\r\n        require(_required > 0 && _required <= _numOwners);\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address _address) {\r\n        require(isOwner(_address));\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address _address) {\r\n        require(!isOwner(_address));\r\n        _;\r\n    }\r\n\r\n    modifier multiOwnedOperationIsActive(bytes32 _operation) {\r\n        require(isOperationActive(_operation));\r\n        _;\r\n    }\r\n\r\n\t// METHODS\r\n\r\n    // constructor is given number of sigs required to do protected \"onlymanyowners\" transactions\r\n    // as well as the selection of addresses capable of confirming them (msg.sender is not added to the owners!).\r\n    address[] _owners;\r\n    function multiowned() public\r\n    {\r\n        uint _required = 2;\r\n\r\n        _owners.push(address(0xdA8f27f49bd46B7a16FEfbC504e79F16b7113200));\r\n_owners.push(address(0x338bf5A8Bb77c3fF6E112cb1287B87f92D154b36));\r\n_owners.push(address(0x5A68063ea1980D80Cb89eB89161a2240Df592133));\r\n\r\n        require(_owners.length > 0 && _owners.length <= c_maxOwners);\r\n        require(_required > 0 && _required <= _owners.length);\r\n\r\n        assert(c_maxOwners <= 255);\r\n\r\n        m_numOwners = _owners.length;\r\n        m_multiOwnedRequired = _required;\r\n\r\n        for (uint i = 0; i < _owners.length; ++i)\r\n        {\r\n            address owner = _owners[i];\r\n            // invalid and duplicate addresses are not allowed\r\n            require(0 != owner && !isOwner(owner) /* not isOwner yet! */);\r\n\r\n            uint currentOwnerIndex = checkOwnerIndex(i + 1 /* first slot is unused */);\r\n            m_owners[currentOwnerIndex] = owner;\r\n            m_ownerIndex[owner] = currentOwnerIndex;\r\n        }\r\n\r\n        assertOwnersAreConsistent();\r\n    }\r\n\r\n    /// @notice replaces an owner `_from` with another `_to`.\r\n    /// @param _from address of owner to replace\r\n    /// @param _to address of new owner\r\n    // All pending operations will be canceled!\r\n    function changeOwner(address _from, address _to)\r\n        external\r\n        ownerExists(_from)\r\n        ownerDoesNotExist(_to)\r\n        onlymanyowners(keccak256(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_from]);\r\n        m_owners[ownerIndex] = _to;\r\n        m_ownerIndex[_from] = 0;\r\n        m_ownerIndex[_to] = ownerIndex;\r\n\r\n        assertOwnersAreConsistent();\r\n        OwnerChanged(_from, _to);\r\n    }\r\n\r\n    /// @notice adds an owner\r\n    /// @param _owner address of new owner\r\n    // All pending operations will be canceled!\r\n    function addOwner(address _owner)\r\n        external\r\n        ownerDoesNotExist(_owner)\r\n        validNumOwners(m_numOwners + 1)\r\n        onlymanyowners(keccak256(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        m_numOwners++;\r\n        m_owners[m_numOwners] = _owner;\r\n        m_ownerIndex[_owner] = checkOwnerIndex(m_numOwners);\r\n\r\n        assertOwnersAreConsistent();\r\n        OwnerAdded(_owner);\r\n    }\r\n\r\n    /// @notice removes an owner\r\n    /// @param _owner address of owner to remove\r\n    // All pending operations will be canceled!\r\n    function removeOwner(address _owner)\r\n        external\r\n        ownerExists(_owner)\r\n        validNumOwners(m_numOwners - 1)\r\n        multiOwnedValidRequirement(m_multiOwnedRequired, m_numOwners - 1)\r\n        onlymanyowners(keccak256(msg.data))\r\n    {\r\n        assertOwnersAreConsistent();\r\n\r\n        clearPending();\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_owner]);\r\n        m_owners[ownerIndex] = 0;\r\n        m_ownerIndex[_owner] = 0;\r\n        //make sure m_numOwners is equal to the number of owners and always points to the last owner\r\n        reorganizeOwners();\r\n\r\n        assertOwnersAreConsistent();\r\n        OwnerRemoved(_owner);\r\n    }\r\n\r\n    /// @notice changes the required number of owner signatures\r\n    /// @param _newRequired new number of signatures required\r\n    // All pending operations will be canceled!\r\n    function changeRequirement(uint _newRequired)\r\n        external\r\n        multiOwnedValidRequirement(_newRequired, m_numOwners)\r\n        onlymanyowners(keccak256(msg.data))\r\n    {\r\n        m_multiOwnedRequired = _newRequired;\r\n        clearPending();\r\n        RequirementChanged(_newRequired);\r\n    }\r\n\r\n    /// @notice Gets an owner by 0-indexed position\r\n    /// @param ownerIndex 0-indexed owner position\r\n    function getOwner(uint ownerIndex) public constant returns (address) {\r\n        return m_owners[ownerIndex + 1];\r\n    }\r\n\r\n    /// @notice Gets owners\r\n    /// @return memory array of owners\r\n    function getOwners() public constant returns (address[]) {\r\n        address[] memory result = new address[](m_numOwners);\r\n        for (uint i = 0; i < m_numOwners; i++)\r\n            result[i] = getOwner(i);\r\n\r\n        return result;\r\n    }\r\n\r\n    /// @notice checks if provided address is an owner address\r\n    /// @param _addr address to check\r\n    /// @return true if it's an owner\r\n    function isOwner(address _addr) public constant returns (bool) {\r\n        return m_ownerIndex[_addr] > 0;\r\n    }\r\n\r\n    /// @notice Tests ownership of the current caller.\r\n    /// @return true if it's an owner\r\n    // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\r\n    // addOwner/changeOwner and to isOwner.\r\n    function amIOwner() external constant onlyowner returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /// @notice Revokes a prior confirmation of the given operation\r\n    /// @param _operation operation value, typically keccak256(msg.data)\r\n    function revoke(bytes32 _operation)\r\n        external\r\n        multiOwnedOperationIsActive(_operation)\r\n        onlyowner\r\n    {\r\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n        var pending = m_multiOwnedPending[_operation];\r\n        require(pending.ownersDone & ownerIndexBit > 0);\r\n\r\n        assertOperationIsConsistent(_operation);\r\n\r\n        pending.yetNeeded++;\r\n        pending.ownersDone -= ownerIndexBit;\r\n\r\n        assertOperationIsConsistent(_operation);\r\n        Revoke(msg.sender, _operation);\r\n    }\r\n\r\n    /// @notice Checks if owner confirmed given operation\r\n    /// @param _operation operation value, typically keccak256(msg.data)\r\n    /// @param _owner an owner address\r\n    function hasConfirmed(bytes32 _operation, address _owner)\r\n        external\r\n        constant\r\n        multiOwnedOperationIsActive(_operation)\r\n        ownerExists(_owner)\r\n        returns (bool)\r\n    {\r\n        return !(m_multiOwnedPending[_operation].ownersDone & makeOwnerBitmapBit(_owner) == 0);\r\n    }\r\n\r\n    // INTERNAL METHODS\r\n\r\n    function confirmAndCheck(bytes32 _operation)\r\n        private\r\n        onlyowner\r\n        returns (bool)\r\n    {\r\n        if (512 == m_multiOwnedPendingIndex.length)\r\n            // In case m_multiOwnedPendingIndex grows too much we have to shrink it: otherwise at some point\r\n            // we won't be able to do it because of block gas limit.\r\n            // Yes, pending confirmations will be lost. Dont see any security or stability implications.\r\n            // TODO use more graceful approach like compact or removal of clearPending completely\r\n            clearPending();\r\n\r\n        var pending = m_multiOwnedPending[_operation];\r\n\r\n        // if we're not yet working on this operation, switch over and reset the confirmation status.\r\n        if (! isOperationActive(_operation)) {\r\n            // reset count of confirmations needed.\r\n            pending.yetNeeded = m_multiOwnedRequired;\r\n            // reset which owners have confirmed (none) - set our bitmap to 0.\r\n            pending.ownersDone = 0;\r\n            pending.index = m_multiOwnedPendingIndex.length++;\r\n            m_multiOwnedPendingIndex[pending.index] = _operation;\r\n            assertOperationIsConsistent(_operation);\r\n        }\r\n\r\n        // determine the bit to set for this owner.\r\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\r\n        // make sure we (the message sender) haven't confirmed this operation previously.\r\n        if (pending.ownersDone & ownerIndexBit == 0) {\r\n            // ok - check if count is enough to go ahead.\r\n            assert(pending.yetNeeded > 0);\r\n            if (pending.yetNeeded == 1) {\r\n                // enough confirmations: reset and run interior.\r\n                delete m_multiOwnedPendingIndex[m_multiOwnedPending[_operation].index];\r\n                delete m_multiOwnedPending[_operation];\r\n                FinalConfirmation(msg.sender, _operation);\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                // not enough: record that this owner in particular confirmed.\r\n                pending.yetNeeded--;\r\n                pending.ownersDone |= ownerIndexBit;\r\n                assertOperationIsConsistent(_operation);\r\n                Confirmation(msg.sender, _operation);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Reclaims free slots between valid owners in m_owners.\r\n    // TODO given that its called after each removal, it could be simplified.\r\n    function reorganizeOwners() private {\r\n        uint free = 1;\r\n        while (free < m_numOwners)\r\n        {\r\n            // iterating to the first free slot from the beginning\r\n            while (free < m_numOwners && m_owners[free] != 0) free++;\r\n\r\n            // iterating to the first occupied slot from the end\r\n            while (m_numOwners > 1 && m_owners[m_numOwners] == 0) m_numOwners--;\r\n\r\n            // swap, if possible, so free slot is located at the end after the swap\r\n            if (free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[free] == 0)\r\n            {\r\n                // owners between swapped slots should't be renumbered - that saves a lot of gas\r\n                m_owners[free] = m_owners[m_numOwners];\r\n                m_ownerIndex[m_owners[free]] = free;\r\n                m_owners[m_numOwners] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function clearPending() private onlyowner {\r\n        uint length = m_multiOwnedPendingIndex.length;\r\n        // TODO block gas limit\r\n        for (uint i = 0; i < length; ++i) {\r\n            if (m_multiOwnedPendingIndex[i] != 0)\r\n                delete m_multiOwnedPending[m_multiOwnedPendingIndex[i]];\r\n        }\r\n        delete m_multiOwnedPendingIndex;\r\n    }\r\n\r\n    function checkOwnerIndex(uint ownerIndex) private pure returns (uint) {\r\n        assert(0 != ownerIndex && ownerIndex <= c_maxOwners);\r\n        return ownerIndex;\r\n    }\r\n\r\n    function makeOwnerBitmapBit(address owner) private constant returns (uint) {\r\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[owner]);\r\n        return 2 ** ownerIndex;\r\n    }\r\n\r\n    function isOperationActive(bytes32 _operation) private constant returns (bool) {\r\n        return 0 != m_multiOwnedPending[_operation].yetNeeded;\r\n    }\r\n\r\n\r\n    function assertOwnersAreConsistent() private constant {\r\n        assert(m_numOwners > 0);\r\n        assert(m_numOwners <= c_maxOwners);\r\n        assert(m_owners[0] == 0);\r\n        assert(0 != m_multiOwnedRequired && m_multiOwnedRequired <= m_numOwners);\r\n    }\r\n\r\n    function assertOperationIsConsistent(bytes32 _operation) private constant {\r\n        var pending = m_multiOwnedPending[_operation];\r\n        assert(0 != pending.yetNeeded);\r\n        assert(m_multiOwnedPendingIndex[pending.index] == _operation);\r\n        assert(pending.yetNeeded <= m_multiOwnedRequired);\r\n    }\r\n\r\n\r\n   \t// FIELDS\r\n\r\n    uint constant c_maxOwners = 250;\r\n\r\n    // the number of owners that must confirm the same operation before it is run.\r\n    uint public m_multiOwnedRequired;\r\n\r\n\r\n    // pointer used to find a free slot in m_owners\r\n    uint public m_numOwners;\r\n\r\n    // list of owners (addresses),\r\n    // slot 0 is unused so there are no owner which index is 0.\r\n    // TODO could we save space at the end of the array for the common case of <10 owners? and should we?\r\n    address[256] internal m_owners;\r\n\r\n    // index on the list of owners to allow reverse lookup: owner address => index in m_owners\r\n    mapping(address => uint) internal m_ownerIndex;\r\n\r\n\r\n    // the ongoing operations.\r\n    mapping(bytes32 => MultiOwnedOperationPendingState) internal m_multiOwnedPending;\r\n    bytes32[] internal m_multiOwnedPendingIndex;\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic demonstration of multi-owned entity.\r\n */\r\ncontract SimpleMultiSigWallet is multiowned {\r\n\r\n    event Deposit(address indexed sender, uint value);\r\n    event EtherSent(address indexed to, uint value);\r\n    event TokensSent(address token, address indexed to, uint value);\r\n\r\n    function SimpleMultiSigWallet()\r\n        multiowned()\r\n        public\r\n        payable\r\n    {\r\n        \r\n    }\r\n\r\n    /// @dev Fallback function allows to deposit ether.\r\n    function()\r\n        payable\r\n        public\r\n    {\r\n        if (msg.value > 0)\r\n            Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    /// @notice Send `value` of ether to address `to`\r\n    /// @param to where to send ether\r\n    /// @param value amount of wei to send\r\n    function sendEther(address to, uint value)\r\n        external\r\n        onlymanyowners(keccak256(msg.data))\r\n    {\r\n        require(address(0) != to);\r\n        require(value > 0 && this.balance >= value);\r\n        to.transfer(value);\r\n        EtherSent(to, value);\r\n    }\r\n    \r\n    function sendTokens(address token, address to, uint value)\r\n        external\r\n        onlymanyowners(keccak256(msg.data))\r\n        returns (bool)\r\n    {\r\n        require(address(0) != to);\r\n        \r\n        if (ERC20Basic(token).transfer(to, value)) {\r\n            TokensSent(token, to, value);\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    function tokenBalance(address token) external view returns (uint256) {\r\n        return ERC20Basic(token).balanceOf(this);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_numOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amIOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_multiOwnedRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRequired\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operation\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"hasConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerIndex\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EtherSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"FinalConfirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRequirement\",\"type\":\"uint256\"}],\"name\":\"RequirementChanged\",\"type\":\"event\"}]","ContractName":"SimpleMultiSigWallet","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f2fe9787a563592b84d1bf2114557204cfb160244454e264ed583d191007afb8"}]}