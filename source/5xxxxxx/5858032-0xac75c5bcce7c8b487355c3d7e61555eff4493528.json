{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Contract {\r\n  struct Contributor {\r\n    uint256 balance;\r\n    uint256 balance_bonus;\r\n    uint256 fee;\r\n    bool whitelisted;\r\n  }\r\n  mapping (address => Contributor) public contributors;\r\n  uint256 public contract_eth_value;\r\n  uint256 public contract_eth_value_fee;\r\n}\r\n\r\ncontract ERC20 {\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n}\r\n\r\ncontract HybridProxy {\r\n\r\n  struct Contributor {\r\n    uint256 balance;\r\n    uint256 balance_bonus;\r\n    uint256 fee;\r\n    bool whitelisted;\r\n  }\r\n\r\n  struct Snapshot {\r\n    uint256 tokens_balance;\r\n    uint256 eth_balance;\r\n  }\r\n\r\n  //FEES RELATED\r\n  //============================\r\n  address constant public DEVELOPER1 = 0xEE06BdDafFA56a303718DE53A5bc347EfbE4C68f;\r\n  address constant public DEVELOPER2 = 0x63F7547Ac277ea0B52A0B060Be6af8C5904953aa;\r\n  uint256 constant public FEE_DEV = 500; //0.2% fee per dev -> so 0.4% fee in total\r\n  //============================\r\n\r\n  Contract contr;\r\n  uint256 public eth_balance;\r\n  uint256 public fee_balance;\r\n  ERC20 public token;\r\n  mapping (address => uint8) public contributor_rounds;\r\n  Snapshot[] public snapshots;\r\n  address owner;\r\n  uint8 public rounds;\r\n\r\n  constructor(address _contract) {\r\n    owner = msg.sender;\r\n    contr = Contract(_contract);\r\n    eth_balance = contr.contract_eth_value();\r\n    require(eth_balance != 0);\r\n  }\r\n\r\n  function dev_fee(uint256 tokens_this_round) returns (uint256) {\r\n    uint256 tokens_individual;\r\n    tokens_individual = tokens_this_round/FEE_DEV;\r\n    require(token.transfer(DEVELOPER1, tokens_individual));\r\n    require(token.transfer(DEVELOPER2, tokens_individual));\r\n    tokens_this_round -= (2*tokens_individual);\r\n    return tokens_this_round;\r\n  }\r\n\r\n  //public functions\r\n\r\n  function withdraw()  {\r\n    uint256 contract_token_balance = token.balanceOf(address(this));\r\n\t\tvar (balance, balance_bonus, fee, whitelisted) = contr.contributors(msg.sender);\r\n\t\tif (contributor_rounds[msg.sender] < rounds) {\r\n\t\t\tSnapshot storage snapshot = snapshots[contributor_rounds[msg.sender]];\r\n      uint256 tokens_to_withdraw = (balance * snapshot.tokens_balance) / snapshot.eth_balance;\r\n\t\t\tsnapshot.tokens_balance -= tokens_to_withdraw;\r\n\t\t\tsnapshot.eth_balance -= balance;\r\n      contributor_rounds[msg.sender]++;\r\n      require(token.transfer(msg.sender, tokens_to_withdraw));\r\n    }\r\n  }\r\n\r\n  function emergency_withdraw(address _token) {\r\n    require(msg.sender == owner);\r\n    require(ERC20(_token).transfer(owner, ERC20(_token).balanceOf(this)));\r\n  }\r\n\r\n  function set_tokens_received() {\r\n    require(msg.sender == owner);\r\n    uint256 previous_balance;\r\n    uint256 tokens_this_round;\r\n    for (uint8 i = 0; i < snapshots.length; i++) {\r\n      previous_balance += snapshots[i].tokens_balance;\r\n    }\r\n    tokens_this_round = token.balanceOf(address(this)) - previous_balance;\r\n    require(tokens_this_round != 0);\r\n    tokens_this_round = dev_fee(tokens_this_round);\r\n    snapshots.push(Snapshot(tokens_this_round, eth_balance));\r\n    rounds++;\r\n  }\r\n\r\n  function set_token_address(address _token) {\r\n    require(msg.sender == owner && _token != 0x0);\r\n    token = ERC20(_token);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"fee_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eth_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_token_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"set_tokens_received\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEVELOPER2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEVELOPER1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributor_rounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emergency_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens_this_round\",\"type\":\"uint256\"}],\"name\":\"dev_fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_DEV\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"snapshots\",\"outputs\":[{\"name\":\"tokens_balance\",\"type\":\"uint256\"},{\"name\":\"eth_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"HybridProxy","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000030f0096c06b8b585864029d4959767da6e2fc647","Library":"","SwarmSource":"bzzr://a8ef7ada93659a69db4b4584f28ba19b26b20add1e355fa098b4288f71902dff"}]}