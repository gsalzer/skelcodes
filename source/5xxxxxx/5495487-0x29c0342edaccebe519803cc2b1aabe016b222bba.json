{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n *  @title TokenSale\r\n *  @dev Martin Halford, CTO, BlockGrain (AgriChain Pty Ltd) - April 2018\r\n */\r\ncontract TokenSale {\r\n  using SafeMath for uint256;\r\n\r\n  // Address of owner\r\n  address public owner;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // Amount of raised (in Wei)\r\n  uint256 public amountRaised;\r\n\r\n  // Upper limit of the amount to be collected\r\n  uint256 public saleLimit = 25000 ether;\r\n\r\n  // Minimum contribution permitted\r\n  uint256 public minContribution = 0.5 ether;\r\n\r\n  // Maximum contribution permitted\r\n  uint256 public maxContribution = 500 ether;\r\n\r\n  // Flag to accept or reject payments\r\n  bool public isAcceptingPayments;\r\n\r\n  // List of admins who can edit the whitelist\r\n  mapping (address => bool) public tokenSaleAdmins;\r\n\r\n  // List of addresses that are whitelisted for private sale\r\n  mapping (address => bool) public whitelist;\r\n\r\n  // List of addresses that have made payments (in Wei)\r\n  mapping (address => uint256) public amountPaid;\r\n\r\n  // modifier to check owner\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  // modifier to check whitelist admin status\r\n  modifier onlyAdmin() {\r\n    require(tokenSaleAdmins[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  // modifier to check if whitelisted address\r\n  modifier isWhitelisted() {\r\n    require(whitelist[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  // modifier to check if payments being accepted\r\n  modifier acceptingPayments() {\r\n    require(isAcceptingPayments);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   * @param _wallet Address where collected funds will be forwarded to\r\n   */\r\n  constructor(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    owner = msg.sender;\r\n    wallet = _wallet;\r\n    tokenSaleAdmins[msg.sender] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev fallback function\r\n   */\r\n  function () isWhitelisted acceptingPayments payable public {\r\n    uint256 _contribution = msg.value;\r\n    require(_contribution >= minContribution);\r\n    require(_contribution <= maxContribution);\r\n    require(msg.sender != address(0));\r\n\r\n    // add to sender's amountPaid record\r\n    amountPaid[msg.sender] += _contribution;\r\n\r\n    // add to amount raised\r\n    amountRaised = amountRaised.add(_contribution);\r\n\r\n    // handle edge case where amountRaised exceeds saleLimit\r\n    if (amountRaised > saleLimit) {\r\n      uint256 _refundAmount = amountRaised.sub(saleLimit);\r\n      msg.sender.transfer(_refundAmount);\r\n      _contribution = _contribution.sub(_refundAmount);\r\n      _refundAmount = 0;\r\n      amountRaised = saleLimit;\r\n      isAcceptingPayments = false;\r\n    }\r\n\r\n    // transfer funds to external wallet\r\n    wallet.transfer(_contribution);\r\n  }\r\n\r\n  /**\r\n   * @dev Start accepting payments\r\n   */\r\n  function acceptPayments() onlyAdmin public  {\r\n    isAcceptingPayments = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Stop accepting payments\r\n   */\r\n  function rejectPayments() onlyAdmin public  {\r\n    isAcceptingPayments = false;\r\n  }\r\n\r\n  /**\r\n   *  @dev Add a user to the whitelist admins\r\n   */\r\n  function addAdmin(address _admin) onlyOwner public {\r\n    tokenSaleAdmins[_admin] = true;\r\n  }\r\n\r\n  /**\r\n   *  @dev Remove a user from the whitelist admins\r\n   */\r\n  function removeAdmin(address _admin) onlyOwner public {\r\n    tokenSaleAdmins[_admin] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Add an address to the whitelist\r\n   * @param _contributor The address of the contributor\r\n   */\r\n  function whitelistAddress(address _contributor) onlyAdmin public  {\r\n    whitelist[_contributor] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Add multiple addresses to the whitelist\r\n   * @param _contributors The addresses of the contributor\r\n   */\r\n  function whitelistAddresses(address[] _contributors) onlyAdmin public {\r\n    for (uint256 i = 0; i < _contributors.length; i++) {\r\n      whitelist[_contributors[i]] = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Remove an addresses from the whitelist\r\n   * @param _contributor The addresses of the contributor\r\n   */\r\n  function unWhitelistAddress(address _contributor) onlyAdmin public  {\r\n    whitelist[_contributor] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Remove multiple addresses from the whitelist\r\n   * @param _contributors The addresses of the contributor\r\n   */\r\n  function unWhitelistAddresses(address[] _contributors) onlyAdmin public {\r\n    for (uint256 i = 0; i < _contributors.length; i++) {\r\n      whitelist[_contributors[i]] = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Update the sale limit\r\n   * @param _saleLimit The updated sale limit value\r\n   */\r\n  function updateSaleLimit(uint256 _saleLimit) onlyAdmin public {\r\n    saleLimit = _saleLimit;\r\n  }\r\n\r\n  /**\r\n    * @dev Update the minimum contribution\r\n    * @param _minContribution The updated minimum contribution value\r\n    */\r\n  function updateMinContribution(uint256 _minContribution) onlyAdmin public {\r\n    minContribution = _minContribution;\r\n  }\r\n\r\n  /**\r\n    * @dev Update the maximum contribution\r\n    * @param _maxContribution The updated maximum contribution value\r\n    */\r\n  function updateMaxContribution(uint256 _maxContribution) onlyAdmin public {\r\n    maxContribution = _maxContribution;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributors\",\"type\":\"address[]\"}],\"name\":\"whitelistAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_saleLimit\",\"type\":\"uint256\"}],\"name\":\"updateSaleLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minContribution\",\"type\":\"uint256\"}],\"name\":\"updateMinContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rejectPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxContribution\",\"type\":\"uint256\"}],\"name\":\"updateMaxContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAcceptingPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"unWhitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSaleAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributors\",\"type\":\"address[]\"}],\"name\":\"unWhitelistAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000620a5931a75941b9d78986603c3cbbac6c7978a8","Library":"","SwarmSource":"bzzr://e63464667a3f86abb5446b6d4cb3034da0a63b607ce9fff832ba5d1447e5cb58"}]}