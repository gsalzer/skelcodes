{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/*\r\n * Price band\r\n * 5 ETH       @ $550 = 10,000 ZMN \r\n * 10 ETH      @ $545 = 10,000 ZMN\r\n * 25 ETH      @ $540 = 10,000 ZMN\r\n * 50 ETH      @ $530 = 10,000 ZMN\r\n * 250 ETH     @ $520 = 10,000 ZMN\r\n * 500 ETH     @ $510 = 10,000 ZMN\r\n * 1,000 ETH   @ $500 = 10,000 ZMN\r\n*/\r\ncontract PrivateSaleExchangeRate is Ownable {\r\n    using SafeMath for uint256;\r\n    uint256 public rate;\r\n    uint256 public timestamp;\r\n    event UpdateUsdEthRate(uint256 _rate);\r\n    \r\n    function PrivateSaleExchangeRate(uint256 _rate) public {\r\n        require(_rate > 0);\r\n        rate = _rate;\r\n        timestamp = now;\r\n    }\r\n    \r\n    /*\r\n     * @param _rate USD/ETH\r\n     */\r\n    function updateUsdEthRate(uint256 _rate) public onlyOwner {\r\n        require(_rate > 0);\r\n        require(rate != _rate);\r\n        emit UpdateUsdEthRate(_rate);\r\n        rate = _rate;\r\n        timestamp = now;\r\n    }\r\n    \r\n     /*\r\n     * @dev return amount of ZMN token derive from price band and current exchange rate\r\n     * @param _weiAmount purchase amount of ETH\r\n     */\r\n    function getTokenAmount(uint256 _weiAmount) public view returns (uint256){\r\n        \r\n        // US cost for 10,000 tokens\r\n        uint256 cost = 550;\r\n        \r\n        if(_weiAmount < 10 ether){ \r\n            cost = 550; \r\n        }else if(_weiAmount < 25 ether){ \r\n            cost = 545; \r\n        }else if(_weiAmount < 50 ether){ \r\n            cost = 540; \r\n        }else if(_weiAmount < 250 ether){ \r\n            cost = 530; \r\n        }else if(_weiAmount < 500 ether){ \r\n            cost = 520; \r\n        }else if(_weiAmount < 1000 ether){ \r\n            cost = 510;\r\n        }else{\r\n            cost = 500;\r\n        }\r\n        return _weiAmount.mul(rate).mul(10000).div(cost);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateUsdEthRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"UpdateUsdEthRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PrivateSaleExchangeRate","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000180","Library":"","SwarmSource":"bzzr://25d601c43341b12d2e660d02caed22c2e25343ee4a453789f1a70088b8b2a26c"}]}