{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract ReentrancyGuard {\r\n    /**\r\n    * @dev We use a single lock for the whole contract.\r\n    */\r\n    bool private reentrancyLock = false;\r\n\r\n    /**\r\n    * @dev Prevents a contract from calling itself, directly or indirectly.\r\n    * @notice If you mark a function `nonReentrant`, you should also\r\n    * mark it `external`. Calling one nonReentrant function from\r\n    * another is not supported. Instead, you can implement a\r\n    * `private` function doing the actual work, and a `external`\r\n    * wrapper marked as `nonReentrant`.\r\n    */\r\n    modifier nonReentrant() {\r\n        require(!reentrancyLock);\r\n        reentrancyLock = true;\r\n        _;\r\n        reentrancyLock = false;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n        assert(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        ERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n        internal\r\n    {\r\n        assert(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        assert(token.approve(spender, value));\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n    \r\n    mapping (address=>bool) private whiteList;\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused || whiteList[msg.sender]);\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused || whiteList[msg.sender]);\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n\r\n        emit Unpause();\r\n    }\r\n\r\n    function addToWhiteList(address[] _whiteList) external onlyOwner {\r\n        require(_whiteList.length > 0);\r\n\r\n        for(uint8 i = 0; i < _whiteList.length; i++) {\r\n            assert(_whiteList[i] != address(0));\r\n\r\n            whiteList[_whiteList[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeFromWhiteList(address[] _blackList) external onlyOwner {\r\n        require(_blackList.length > 0);\r\n\r\n        for(uint8 i = 0; i < _blackList.length; i++) {\r\n            assert(_blackList[i] != address(0));\r\n\r\n            whiteList[_blackList[i]] = true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract W12TokenDistributor is Ownable {\r\n    W12Token public token;\r\n\r\n    mapping(uint32 => bool) public processedTransactions;\r\n\r\n    constructor() public {\r\n        token = new W12Token();\r\n    }\r\n\r\n    function isTransactionSuccessful(uint32 id) external view returns (bool) {\r\n        return processedTransactions[id];\r\n    }\r\n\r\n    modifier validateInput(uint32[] _payment_ids, address[] _receivers, uint256[] _amounts) {\r\n        require(_receivers.length == _amounts.length);\r\n        require(_receivers.length == _payment_ids.length);\r\n\r\n        _;\r\n    }\r\n\r\n    function transferTokenOwnership() external onlyOwner {\r\n        token.transferOwnership(owner);\r\n    }\r\n}\r\n\r\ncontract TokenTimelock {\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    // ERC20 basic token contract being held\r\n    ERC20Basic public token;\r\n\r\n    // beneficiary of tokens after they are released\r\n    address public beneficiary;\r\n\r\n    // timestamp when token release is enabled\r\n    uint256 public releaseTime;\r\n\r\n    constructor (ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\r\n        // solium-disable-next-line security/no-block-members\r\n        require(_releaseTime > block.timestamp);\r\n        token = _token;\r\n        beneficiary = _beneficiary;\r\n        releaseTime = _releaseTime;\r\n    }\r\n\r\n    /**\r\n    * @notice Transfers tokens held by timelock to beneficiary.\r\n    */\r\n    function release() public {\r\n        // solium-disable-next-line security/no-block-members\r\n        require(block.timestamp >= releaseTime);\r\n\r\n        uint256 amount = token.balanceOf(this);\r\n        require(amount > 0);\r\n\r\n        token.safeTransfer(beneficiary, amount);\r\n    }\r\n}\r\n\r\ncontract W12Crowdsale is W12TokenDistributor, ReentrancyGuard {\r\n    uint public presaleStartDate = 1526817600;\r\n    uint public presaleEndDate = 1532088000;\r\n    uint public crowdsaleStartDate = 1532692800;\r\n    uint public crowdsaleEndDate = 1538049600;\r\n\r\n    uint public presaleTokenBalance = 20 * (10 ** 24);\r\n    uint public crowdsaleTokenBalance = 80 * (10 ** 24);\r\n\r\n    address public crowdsaleFundsWallet;\r\n\r\n    enum Stage { Inactive, FlashSale, Presale, Crowdsale }\r\n\r\n    event LockCreated(address indexed wallet, address timeLock1, address timeLock2, address timeLock3);\r\n\r\n    constructor(address _crowdsaleFundsWallet) public {\r\n        require(_crowdsaleFundsWallet != address(0));\r\n\r\n        // Wallet to hold collected Ether\r\n        crowdsaleFundsWallet = address(_crowdsaleFundsWallet);\r\n    }\r\n    \r\n    function setUpCrowdsale() external onlyOwner {\r\n        uint tokenDecimalsMultiplicator = 10 ** 18;\r\n\r\n        // Tokens to sell during the first two phases of ICO\r\n        token.mint(address(this), presaleTokenBalance + crowdsaleTokenBalance);\r\n        // Partners\r\n        token.mint(address(0xDbdCEa0B020D4769D7EA0aF47Df8848d478D67d1),  8 * (10 ** 6) * tokenDecimalsMultiplicator);\r\n        // Bounty and support of ecosystem\r\n        token.mint(address(0x1309Bb4DBBB6F8B3DE1822b4Cf22570d44f79cde),  8 * (10 ** 6) * tokenDecimalsMultiplicator);\r\n        // Airdrop\r\n        token.mint(address(0x0B2F4A122c34c4ccACf4EBecE15dE571d67b4D0a),  4 * (10 ** 6) * tokenDecimalsMultiplicator);\r\n        \r\n        address[] storage whiteList;\r\n\r\n        whiteList.push(address(this));\r\n        whiteList.push(address(0xDbdCEa0B020D4769D7EA0aF47Df8848d478D67d1));\r\n        whiteList.push(address(0x1309Bb4DBBB6F8B3DE1822b4Cf22570d44f79cde));\r\n        whiteList.push(address(0x0B2F4A122c34c4ccACf4EBecE15dE571d67b4D0a));\r\n        whiteList.push(address(0xd13B531160Cfe6CC2f9a5615524CA636A0A94D88));\r\n        whiteList.push(address(0x3BAF5A51E6212d311Bc567b60bE84Fc180d39805));\r\n\r\n        token.addToWhiteList(whiteList);\r\n    }\r\n\r\n    function lockSeedInvestors() external onlyOwner {\r\n        uint tokenDecimalsMultiplicator = 10 ** 18;\r\n\r\n        // Seed investors\r\n\r\n        address contributor1 = address(0xA0473967Bf75a9D6cA84A58975D26b6Fd3eecB32);\r\n        TokenTimelock t1c1 = new TokenTimelock(token, contributor1, 1541030400);\r\n        TokenTimelock t2c1 = new TokenTimelock(token, contributor1, 1572566400);\r\n        TokenTimelock t3c1 = new TokenTimelock(token, contributor1, 1604188800);\r\n\r\n        token.mint(t1c1, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\r\n        token.mint(t2c1, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\r\n        token.mint(t3c1, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\r\n\r\n        emit LockCreated(contributor1, t1c1, t2c1, t3c1);\r\n\r\n        address contributor2 = address(0x7ff9837FebAACbD1d1d91066F9DC5bbE1Bf1C023);\r\n        TokenTimelock t1c2 = new TokenTimelock(token, contributor2, 1541030400);\r\n        TokenTimelock t2c2 = new TokenTimelock(token, contributor2, 1572566400);\r\n        TokenTimelock t3c2 = new TokenTimelock(token, contributor2, 1604188800);\r\n\r\n        token.mint(t1c2, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\r\n        token.mint(t2c2, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\r\n        token.mint(t3c2, 2 * (10 ** 6) * tokenDecimalsMultiplicator);\r\n\r\n        emit LockCreated(contributor2, t1c2, t2c2, t3c2);\r\n\r\n        address contributor3 = address(0xe4a7d4f7C358A56eA191Bb0aC3D8074327504Ac4);\r\n        TokenTimelock t1c3 = new TokenTimelock(token, contributor3, 1541030400);\r\n        TokenTimelock t2c3 = new TokenTimelock(token, contributor3, 1572566400);\r\n        TokenTimelock t3c3 = new TokenTimelock(token, contributor3, 1604188800);\r\n\r\n        token.mint(t1c3, 25 * (10 ** 5) * tokenDecimalsMultiplicator);\r\n        token.mint(t2c3, 25 * (10 ** 5) * tokenDecimalsMultiplicator);\r\n        token.mint(t3c3, 3 * (10 ** 6) * tokenDecimalsMultiplicator);\r\n\r\n        emit LockCreated(contributor2, t1c3, t2c3, t3c3);\r\n    }\r\n\r\n    function lockTeamAndReserve() external onlyOwner {\r\n        uint tokenDecimalsMultiplicator = 10 ** 18;\r\n\r\n        // Team lockup\r\n\r\n        address team = address(0x17abe2BA2Af3559A45C016F02EA5677017AA3362);\r\n        TokenTimelock t1c1 = new TokenTimelock(token, team, 1541030400);\r\n        TokenTimelock t2c1 = new TokenTimelock(token, team, 1572566400);\r\n        TokenTimelock t3c1 = new TokenTimelock(token, team, 1604188800);\r\n\r\n        token.mint(t1c1, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\r\n        token.mint(t2c1, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\r\n        token.mint(t3c1, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\r\n\r\n        emit LockCreated(team, t1c1, t2c1, t3c1);\r\n\r\n        // Reserve lockup\r\n\r\n        address reserve = address(0xE8bE756Ddd148dA0e2B440876A0Dc2FAC8BBE7A7);\r\n        TokenTimelock t1c2 = new TokenTimelock(token, reserve, 1541030400);\r\n        TokenTimelock t2c2 = new TokenTimelock(token, reserve, 1572566400);\r\n        TokenTimelock t3c2 = new TokenTimelock(token, reserve, 1604188800);\r\n\r\n        token.mint(t1c2, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\r\n        token.mint(t2c2, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\r\n        token.mint(t3c2, 20 * (10 ** 6) * tokenDecimalsMultiplicator);\r\n\r\n        emit LockCreated(reserve, t1c2, t2c2, t3c2);\r\n    }\r\n\r\n    function () payable external {\r\n        Stage currentStage = getStage();\r\n\r\n        require(currentStage != Stage.Inactive);\r\n\r\n        uint currentRate = getCurrentRate();\r\n        uint tokensBought = msg.value * (10 ** 18) / currentRate;\r\n\r\n        token.transfer(msg.sender, tokensBought);\r\n        advanceStage(tokensBought, currentStage);\r\n    }\r\n\r\n    function getCurrentRate() public view returns (uint) {\r\n        uint currentSaleTime;\r\n        Stage currentStage = getStage();\r\n\r\n        if(currentStage == Stage.Presale) {\r\n            currentSaleTime = now - presaleStartDate;\r\n            uint presaleCoef = currentSaleTime * 100 / (presaleEndDate - presaleStartDate);\r\n            \r\n            return 262500000000000 + 35000000000000 * presaleCoef / 100;\r\n        }\r\n        \r\n        if(currentStage == Stage.Crowdsale) {\r\n            currentSaleTime = now - crowdsaleStartDate;\r\n            uint crowdsaleCoef = currentSaleTime * 100 / (crowdsaleEndDate - crowdsaleStartDate);\r\n\r\n            return 315000000000000 + 35000000000000 * crowdsaleCoef / 100;\r\n        }\r\n\r\n        if(currentStage == Stage.FlashSale) {\r\n            return 234500000000000;\r\n        }\r\n\r\n        revert();\r\n    }\r\n\r\n    function getStage() public view returns (Stage) {\r\n        if(now >= crowdsaleStartDate && now < crowdsaleEndDate) {\r\n            return Stage.Crowdsale;\r\n        }\r\n\r\n        if(now >= presaleStartDate) {\r\n            if(now < presaleStartDate + 1 days)\r\n                return Stage.FlashSale;\r\n\r\n            if(now < presaleEndDate)\r\n                return Stage.Presale;\r\n        }\r\n\r\n        return Stage.Inactive;\r\n    }\r\n\r\n    function bulkTransfer(uint32[] _payment_ids, address[] _receivers, uint256[] _amounts)\r\n        external onlyOwner validateInput(_payment_ids, _receivers, _amounts) {\r\n\r\n        bool success = false;\r\n\r\n        for (uint i = 0; i < _receivers.length; i++) {\r\n            if (!processedTransactions[_payment_ids[i]]) {\r\n                success = token.transfer(_receivers[i], _amounts[i]);\r\n                processedTransactions[_payment_ids[i]] = success;\r\n\r\n                if (!success)\r\n                    break;\r\n\r\n                advanceStage(_amounts[i], getStage());\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferTokensToOwner() external onlyOwner {\r\n        token.transfer(owner, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function advanceStage(uint tokensBought, Stage currentStage) internal {\r\n        if(currentStage == Stage.Presale || currentStage == Stage.FlashSale) {\r\n            if(tokensBought <= presaleTokenBalance)\r\n            {\r\n                presaleTokenBalance -= tokensBought;\r\n                return;\r\n            }\r\n        }\r\n        \r\n        if(currentStage == Stage.Crowdsale) {\r\n            if(tokensBought <= crowdsaleTokenBalance)\r\n            {\r\n                crowdsaleTokenBalance -= tokensBought;\r\n                return;\r\n            }\r\n        }\r\n\r\n        revert();\r\n    }\r\n\r\n    function withdrawFunds() external nonReentrant {\r\n        require(crowdsaleFundsWallet == msg.sender);\r\n\r\n        crowdsaleFundsWallet.transfer(address(this).balance);\r\n    }\r\n\r\n    function setPresaleStartDate(uint32 _presaleStartDate) external onlyOwner {\r\n        presaleStartDate = _presaleStartDate;\r\n    }\r\n\r\n    function setPresaleEndDate(uint32 _presaleEndDate) external onlyOwner {\r\n        presaleEndDate = _presaleEndDate;\r\n    }\r\n\r\n    function setCrowdsaleStartDate(uint32 _crowdsaleStartDate) external onlyOwner {\r\n        crowdsaleStartDate = _crowdsaleStartDate;\r\n    }\r\n\r\n    function setCrowdsaleEndDate(uint32 _crowdsaleEndDate) external onlyOwner {\r\n        crowdsaleEndDate = _crowdsaleEndDate;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender] - _value;\r\n        balances[_to] = balances[_to] + _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from] - _value;\r\n        balances[_to] = balances[_to] + _value;\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    *\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    *\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender] + _addedValue;\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    *\r\n    * approve should be called when allowed[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue - _subtractedValue;\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to mint tokens\r\n    * @param _to The address that will receive the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        totalSupply_ = totalSupply_ + _amount;\r\n        balances[_to] = balances[_to] + _amount;\r\n\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to stop minting new tokens.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract DetailedERC20 is ERC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    constructor (string _name, string _symbol, uint8 _decimals) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}\r\n\r\ncontract CappedToken is MintableToken {\r\n\r\n    uint256 public cap;\r\n\r\n    constructor(uint256 _cap) public {\r\n        require(_cap > 0);\r\n\r\n        cap = _cap;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to mint tokens\r\n    * @param _to The address that will receive the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        require(totalSupply_ + _amount <= cap);\r\n\r\n        return super.mint(_to, _amount);\r\n    }\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n    * @dev Burns a specific amount of tokens.\r\n    * @param _value The amount of token to be burned.\r\n    */\r\n    function burn(uint256 _value) public {\r\n        _burn(msg.sender, _value);\r\n    }\r\n\r\n    function _burn(address _who, uint256 _value) internal {\r\n        require(_value <= balances[_who]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        balances[_who] = balances[_who] - _value;\r\n        totalSupply_ = totalSupply_ - _value;\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n}\r\n\r\ncontract StandardBurnableToken is BurnableToken, StandardToken {\r\n\r\n    /**\r\n    * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _value uint256 The amount of token to be burned\r\n    */\r\n    function burnFrom(address _from, uint256 _value) public {\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n        // this function needs to emit an event with the updated approval.\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\r\n        _burn(_from, _value);\r\n    }\r\n}\r\n\r\ncontract W12Token is StandardBurnableToken, CappedToken, DetailedERC20, PausableToken  {\r\n    constructor() CappedToken(400*(10**24)) DetailedERC20(\"W12 Token\", \"W12\", 18) public { }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whiteList\",\"type\":\"address[]\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackList\",\"type\":\"address[]\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"W12Token","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://697589d1487c45d450972cdf1bd2042ce2365fa0293ebe76d186ec6c82cc5412"}]}