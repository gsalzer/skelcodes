{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/// @title Multisignature wallet - Allows multiple parties to agree on send ERC20 token transactions before execution.\r\n/// @author Based on code by Stefan George - <stefan.george@consensys.net>\r\n\r\n/*\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20\r\n{\r\n  function balanceOf(address who) public view returns (uint);\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath \r\n{\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint a, uint b) \r\n    internal \r\n    pure \r\n    returns (uint) \r\n  {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint a, uint b) \r\n    internal \r\n    pure \r\n    returns (uint) \r\n  {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract MultiSigWalletTokenLimit\r\n{\r\n  using SafeMath for uint;\r\n\r\n  /*\r\n   *  Events\r\n   */\r\n  event Confirmation(address indexed sender, uint indexed transaction_id);\r\n  event Revocation(address indexed sender, uint indexed transaction_id);\r\n  event Submission(uint indexed transaction_id);\r\n  event Execution(uint indexed transaction_id);\r\n  event ExecutionFailure(uint indexed transaction_id);\r\n  event TokensReceived(address indexed from, uint value);\r\n  event Transfer(address indexed to, uint indexed value);\r\n  event CurrentPeriodChanged(uint indexed current_period, uint indexed current_transferred, uint indexed current_limit);\r\n\r\n  /*\r\n   * Structures\r\n   */\r\n  struct Transaction\r\n  {\r\n    address to;\r\n    uint value;\r\n    bool executed;\r\n  }\r\n\r\n  struct Period\r\n  {\r\n    uint timestamp;\r\n    uint current_limit;\r\n    uint limit;\r\n  }\r\n\r\n  /*\r\n  *  Storage\r\n  */\r\n  mapping (uint => Transaction) public transactions;\r\n  mapping (uint => mapping (address => bool)) public confirmations;\r\n  mapping (address => bool) public is_owner;\r\n  address[] public owners;\r\n  uint public required;\r\n  uint public transaction_count;\r\n  ERC20 public erc20_contract;  //address of the ERC20 tokens contract\r\n  mapping (uint => Period) public periods;\r\n  uint public period_count;\r\n  uint public current_period;\r\n  uint public current_transferred;  //amount of transferred tokens in the current period\r\n\r\n  /*\r\n  *  Modifiers\r\n  */\r\n  modifier ownerExists(address owner) \r\n  {\r\n    require(is_owner[owner]);\r\n    _;\r\n  }\r\n\r\n  modifier transactionExists(uint transaction_id) \r\n  {\r\n    require(transactions[transaction_id].to != 0);\r\n    _;\r\n  }\r\n\r\n  modifier confirmed(uint transaction_id, address owner)\r\n  {\r\n    require(confirmations[transaction_id][owner]);\r\n    _;\r\n  }\r\n\r\n  modifier notConfirmed(uint transaction_id, address owner)\r\n  {\r\n    require(!confirmations[transaction_id][owner]);\r\n    _;\r\n  }\r\n\r\n  modifier notExecuted(uint transaction_id)\r\n  {\r\n    require(!transactions[transaction_id].executed);\r\n    _;\r\n  }\r\n\r\n  modifier ownerOrWallet(address owner)\r\n  {\r\n    require (msg.sender == address(this) || is_owner[owner]);\r\n    _;\r\n  }\r\n\r\n  modifier notNull(address _address)\r\n  {\r\n    require(_address != 0);\r\n    _;\r\n  }\r\n\r\n  /// @dev Fallback function: don't accept ETH\r\n  function()\r\n    public\r\n    payable\r\n  {\r\n    revert();\r\n  }\r\n\r\n  /*\r\n  * Public functions\r\n  */\r\n  /// @dev Contract constructor sets initial owners, required number of confirmations, initial periods' parameters and token address.\r\n  /// @param _owners List of initial owners.\r\n  /// @param _required Number of required confirmations.\r\n  /// @param _timestamps Timestamps of initial periods.\r\n  /// @param _limits Limits of initial periods. The length of _limits must be the same as _timestamps.\r\n  /// @param _erc20_contract Address of the ERC20 tokens contract.\r\n  function MultiSigWalletTokenLimit(address[] _owners, uint _required, uint[] _timestamps, uint[] _limits, ERC20 _erc20_contract)\r\n    public\r\n  {\r\n    for (uint i = 0; i < _owners.length; i++)\r\n    {\r\n      require(!is_owner[_owners[i]] && _owners[i] != 0);\r\n      is_owner[_owners[i]] = true;\r\n    }\r\n    owners = _owners;\r\n    required = _required;\r\n\r\n    periods[0].timestamp = 2**256 - 1;\r\n    periods[0].limit = 2**256 - 1;\r\n    uint total_limit = 0;\r\n    for (i = 0; i < _timestamps.length; i++)\r\n    {\r\n      periods[i + 1].timestamp = _timestamps[i];\r\n      periods[i + 1].current_limit = _limits[i];\r\n      total_limit = total_limit.add(_limits[i]);\r\n      periods[i + 1].limit = total_limit;\r\n    }\r\n    period_count = 1 + _timestamps.length;\r\n    current_period = 0;\r\n    if (_timestamps.length > 0)\r\n      current_period = 1;\r\n    current_transferred = 0;\r\n\r\n    erc20_contract = _erc20_contract;\r\n  }\r\n\r\n  /// @dev Allows an owner to submit and confirm a send tokens transaction.\r\n  /// @param to Address to transfer tokens.\r\n  /// @param value Amout of tokens to transfer.\r\n  /// @return Returns transaction ID.\r\n  function submitTransaction(address to, uint value)\r\n    public\r\n    notNull(to)\r\n    returns (uint transaction_id)\r\n  {\r\n    transaction_id = addTransaction(to, value);\r\n    confirmTransaction(transaction_id);\r\n  }\r\n\r\n  /// @dev Allows an owner to confirm a transaction.\r\n  /// @param transaction_id Transaction ID.\r\n  function confirmTransaction(uint transaction_id)\r\n    public\r\n    ownerExists(msg.sender)\r\n    transactionExists(transaction_id)\r\n    notConfirmed(transaction_id, msg.sender)\r\n  {\r\n    confirmations[transaction_id][msg.sender] = true;\r\n    emit Confirmation(msg.sender, transaction_id);\r\n    executeTransaction(transaction_id);\r\n  }\r\n\r\n  /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n  /// @param transaction_id Transaction ID.\r\n  function revokeConfirmation(uint transaction_id)\r\n    public\r\n    ownerExists(msg.sender)\r\n    confirmed(transaction_id, msg.sender)\r\n    notExecuted(transaction_id)\r\n  {\r\n    confirmations[transaction_id][msg.sender] = false;\r\n    emit Revocation(msg.sender, transaction_id);\r\n  }\r\n\r\n  function executeTransaction(uint transaction_id)\r\n    public\r\n    ownerExists(msg.sender)\r\n    confirmed(transaction_id, msg.sender)\r\n    notExecuted(transaction_id)\r\n  {\r\n    if (isConfirmed(transaction_id))\r\n    {\r\n      Transaction storage txn = transactions[transaction_id];\r\n      txn.executed = true;\r\n      if (transfer(txn.to, txn.value))\r\n        emit Execution(transaction_id);\r\n      else\r\n      {\r\n        emit ExecutionFailure(transaction_id);\r\n        txn.executed = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @dev Returns the confirmation status of a transaction.\r\n  /// @param transaction_id Transaction ID.\r\n  /// @return Confirmation status.\r\n  function isConfirmed(uint transaction_id)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    uint count = 0;\r\n    for (uint i = 0; i < owners.length; i++)\r\n    {\r\n      if (confirmations[transaction_id][owners[i]])\r\n        ++count;\r\n    if (count >= required)\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /*\r\n   * Internal functions\r\n   */\r\n  /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n  /// @param to Address to transfer tokens.\r\n  /// @param value Amout of tokens to transfer.\r\n  /// @return Returns transaction ID.\r\n  function addTransaction(address to, uint value)\r\n    internal\r\n    returns (uint transaction_id)\r\n  {\r\n    transaction_id = transaction_count;\r\n    transactions[transaction_id] = Transaction({\r\n      to: to,\r\n      value: value,\r\n      executed: false\r\n    });\r\n    ++transaction_count;\r\n    emit Submission(transaction_id);\r\n  }\r\n\r\n  /*\r\n   * Web3 call functions\r\n   */\r\n  /// @dev Returns number of confirmations of a transaction.\r\n  /// @param transaction_id Transaction ID.\r\n  /// @return Number of confirmations.\r\n  function getConfirmationCount(uint transaction_id)\r\n    public\r\n    view\r\n    returns (uint count)\r\n  {\r\n    for (uint i = 0; i < owners.length; i++)\r\n      if (confirmations[transaction_id][owners[i]])\r\n        ++count;\r\n  }\r\n\r\n  /// @dev Returns total number of transactions after filers are applied.\r\n  /// @param pending Include pending transactions.\r\n  /// @param executed Include executed transactions.\r\n  /// @return Total number of transactions after filters are applied.\r\n  function getTransactionCount(bool pending, bool executed)\r\n    public\r\n    view\r\n    returns (uint count)\r\n  {\r\n    for (uint i = 0; i < transaction_count; i++)\r\n      if (pending && !transactions[i].executed\r\n        || executed && transactions[i].executed)\r\n        ++count;\r\n  }\r\n\r\n  /// @dev Returns list of owners.\r\n  /// @return List of owner addresses.\r\n  function getOwners()\r\n    public\r\n    view\r\n    returns (address[])\r\n  {\r\n    return owners;\r\n  }\r\n\r\n  /// @dev Returns array with owner addresses, which confirmed transaction.\r\n  /// @param transaction_id Transaction ID.\r\n  /// @return Returns array of owner addresses.\r\n  function getConfirmations(uint transaction_id)\r\n    public\r\n    view\r\n    returns (address[] _confirmations)\r\n  {\r\n    address[] memory confirmations_temp = new address[](owners.length);\r\n    uint count = 0;\r\n    uint i;\r\n    for (i = 0; i < owners.length; i++)\r\n      if (confirmations[transaction_id][owners[i]])\r\n      {\r\n        confirmations_temp[count] = owners[i];\r\n        ++count;\r\n      }\r\n      _confirmations = new address[](count);\r\n      for (i = 0; i < count; i++)\r\n        _confirmations[i] = confirmations_temp[i];\r\n  }\r\n\r\n  /// @dev Returns list of transaction IDs in defined range.\r\n  /// @param from Index start position of transaction array.\r\n  /// @param to Index end position of transaction array.\r\n  /// @param pending Include pending transactions.\r\n  /// @param executed Include executed transactions.\r\n  /// @return Returns array of transaction IDs.\r\n  function getTransactionIds(uint from, uint to, bool pending, bool executed)\r\n    public\r\n    view\r\n    returns (uint[] _transaction_ids)\r\n  {\r\n    uint[] memory transaction_ids_temp = new uint[](transaction_count);\r\n    uint count = 0;\r\n    uint i;\r\n    for (i = 0; i < transaction_count; i++)\r\n      if (pending && !transactions[i].executed\r\n        || executed && transactions[i].executed)\r\n      {\r\n        transaction_ids_temp[count] = i;\r\n        ++count;\r\n      }\r\n      _transaction_ids = new uint[](to - from);\r\n      for (i = from; i < to; i++)\r\n        _transaction_ids[i - from] = transaction_ids_temp[i];\r\n  }\r\n\r\n  /// @dev Fallback function which is called by tokens contract after transferring tokens to this wallet.\r\n  /// @param from Source address of the transfer.\r\n  /// @param value Amount of received ERC20 tokens.\r\n  function tokenFallback(address from, uint value, bytes)\r\n    public\r\n  {\r\n    require(msg.sender == address(erc20_contract));\r\n    emit TokensReceived(from, value);\r\n  }\r\n\r\n  /// @dev Returns balance of the wallet\r\n  function getWalletBalance()\r\n    public\r\n    view\r\n    returns(uint)\r\n  { \r\n    return erc20_contract.balanceOf(this);\r\n  }\r\n\r\n  /// @dev Updates current perriod: looking for a period with a minimmum date(timestamp) that is greater than now.\r\n  function updateCurrentPeriod()\r\n    public\r\n    ownerOrWallet(msg.sender)\r\n  {\r\n    uint new_period = 0;\r\n    for (uint i = 1; i < period_count; i++)\r\n      if (periods[i].timestamp > now && periods[i].timestamp < periods[new_period].timestamp)\r\n        new_period = i;\r\n    if (new_period != current_period)\r\n    {\r\n      current_period = new_period;\r\n      emit CurrentPeriodChanged(current_period, current_transferred, periods[current_period].limit);\r\n    }\r\n  }\r\n\r\n  /// @dev Transfers ERC20 tokens from the wallet to a given address\r\n  /// @param to Address to transfer.\r\n  /// @param value Amount of tokens to transfer.\r\n  function transfer(address to, uint value) \r\n    internal\r\n    returns (bool)\r\n  {\r\n    updateCurrentPeriod();\r\n    require(value <= getWalletBalance() && current_transferred.add(value) <= periods[current_period].limit);\r\n\r\n    if (erc20_contract.transfer(to, value)) \r\n    {\r\n      current_transferred = current_transferred.add(value);\r\n      emit Transfer(to, value);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"is_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period_count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"name\":\"transaction_id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transaction_id\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20_contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWalletBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transaction_id\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transaction_id\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"},{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"name\":\"_transaction_ids\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateCurrentPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transaction_id\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transaction_id\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_transferred\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periods\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"current_limit\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transaction_id\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transaction_count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_required\",\"type\":\"uint256\"},{\"name\":\"_timestamps\",\"type\":\"uint256[]\"},{\"name\":\"_limits\",\"type\":\"uint256[]\"},{\"name\":\"_erc20_contract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transaction_id\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transaction_id\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transaction_id\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transaction_id\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transaction_id\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"current_period\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"current_transferred\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"current_limit\",\"type\":\"uint256\"}],\"name\":\"CurrentPeriodChanged\",\"type\":\"event\"}]","ContractName":"MultiSigWalletTokenLimit","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000260000000000000000000000000e69a353b3152dd7b706ff7dd40fe1d18b7802d3100000000000000000000000000000000000000000000000000000000000000030000000000000000000000001e6d695f42e37d22722fa71d81ff6a6f770057e4000000000000000000000000986ffe4040df37136d8db2a435ff51ff8486aaca000000000000000000000000bd8cfdc865791e7982d77aa147fae637941080150000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000005af38b80000000000000000000000000000000000000000000000000000000005b1c6a00000000000000000000000000000000000000000000000000000000005b43f700000000000000000000000000000000000000000000000000000000005b6cd580000000000000000000000000000000000000000000000000000000005b95b400000000000000000000000000000000000000000000000000000000005bbd4100000000000000000000000000000000000000000000000000000000005be61f80000000000000000000000000000000000000000000000000000000005c0dac80000000000000000000000000000000000000000000000000000000005c368b00000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000002aca794c32936bed8000000000000000000000000000000000000000000000001b640b2de823c0b98000000000000000000000000000000000000000000000003813d1bf14f0e7748000000000000000000000000000000000000000000000002ad3bcc537346ab6a840000000000000000000000000000000000000000000002ad3bcc537346ab6a840000000000000000000000000000000000000000000002ad3bcc537346ab6a840000000000000000000000000000000000000000000002ad3bcc537346ab6a840000000000000000000000000000000000000000000002ad3bcc537346ab6a840000000000000000000000000000000000000000000002ad3bcc537346ab6a8400","Library":"","SwarmSource":"bzzr://1932ca89493c676b3d8e7fcc0d10ab2805c0c319140c318aca9ee21ec07092f9"}]}