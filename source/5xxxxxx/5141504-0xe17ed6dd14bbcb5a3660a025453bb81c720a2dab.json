{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20BasicInterface {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    uint8 public decimals;\r\n}\r\n\r\n\r\n/**\r\n * @title AirDropContract\r\n * Simply do the airdrop.\r\n */\r\ncontract AirDrop is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // the amount that owner wants to send each time\r\n    uint public airDropAmount;\r\n\r\n    // the mapping to judge whether each address has already been airDropped\r\n    mapping ( address => bool ) public invalidAirDrop;\r\n\r\n    // flag to stop airdrop\r\n    bool public stop = false;\r\n\r\n    ERC20BasicInterface public erc20;\r\n\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // event\r\n    event LogAirDrop(address indexed receiver, uint amount);\r\n    event LogStop();\r\n    event LogStart();\r\n    event LogWithdrawal(address indexed receiver, uint amount);\r\n\r\n    /**\r\n    * @dev Constructor to set _airDropAmount and _tokenAddresss.\r\n    * @param _airDropAmount The amount of token that is sent for doing airDrop.\r\n    * @param _tokenAddress The address of token.\r\n    */\r\n    function AirDrop(uint256 _startTime, uint256 _endTime, uint _airDropAmount, address _tokenAddress) public {\r\n        require(_startTime >= now &&\r\n            _endTime >= _startTime &&\r\n            _airDropAmount > 0 &&\r\n            _tokenAddress != address(0)\r\n        );\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        erc20 = ERC20BasicInterface(_tokenAddress);\r\n        uint tokenDecimals = erc20.decimals();\r\n        airDropAmount = _airDropAmount.mul(10 ** tokenDecimals);\r\n    }\r\n\r\n    /**\r\n    * @dev Confirm that airDrop is available.\r\n    * @return A bool to confirm that airDrop is available.\r\n    */\r\n    function isValidAirDropForAll() public view returns (bool) {\r\n        bool validNotStop = !stop;\r\n        bool validAmount = erc20.balanceOf(this) >= airDropAmount;\r\n        bool validPeriod = now >= startTime && now <= endTime;\r\n        return validNotStop && validAmount && validPeriod;\r\n    }\r\n\r\n    /**\r\n    * @dev Confirm that airDrop is available for msg.sender.\r\n    * @return A bool to confirm that airDrop is available for msg.sender.\r\n    */\r\n    function isValidAirDropForIndividual() public view returns (bool) {\r\n        bool validNotStop = !stop;\r\n        bool validAmount = erc20.balanceOf(this) >= airDropAmount;\r\n        bool validPeriod = now >= startTime && now <= endTime;\r\n        bool validAmountForIndividual = !invalidAirDrop[msg.sender];\r\n        return validNotStop && validAmount && validPeriod && validAmountForIndividual;\r\n    }\r\n\r\n    /**\r\n    * @dev Do the airDrop to msg.sender\r\n    */\r\n    function receiveAirDrop() public {\r\n        require(isValidAirDropForIndividual());\r\n\r\n        // set invalidAirDrop of msg.sender to true\r\n        invalidAirDrop[msg.sender] = true;\r\n\r\n        // execute transferFrom\r\n        require(erc20.transfer(msg.sender, airDropAmount));\r\n\r\n        LogAirDrop(msg.sender, airDropAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Change the state of stop flag\r\n    */\r\n    function toggle() public onlyOwner {\r\n        stop = !stop;\r\n\r\n        if (stop) {\r\n            LogStop();\r\n        } else {\r\n            LogStart();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Withdraw the amount of token that is remaining in this contract.\r\n    * @param _address The address of EOA that can receive token from this contract.\r\n    */\r\n    function withdraw(address _address) public onlyOwner {\r\n        require(stop || now > endTime);\r\n        require(_address != address(0));\r\n        uint tokenBalanceOfContract = erc20.balanceOf(this);\r\n        require(erc20.transfer(_address, tokenBalanceOfContract));\r\n        LogWithdrawal(_address, tokenBalanceOfContract);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"stop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDropAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invalidAirDrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isValidAirDropForIndividual\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isValidAirDropForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveAirDrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_airDropAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogAirDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AirDrop","CompilerVersion":"v0.4.20-nightly.2018.1.6+commit.2548228b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a976cb0000000000000000000000000000000000000000000000000000000005abfa26f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000318117e8fb2e9f6be234ee4dab49fbed97175c7b","Library":"","SwarmSource":"bzzr://ac69ac7b74d93b25ab806d4b5fe344e98058267fbcfe19c0678353bfffd0bec4"}]}