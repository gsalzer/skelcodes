{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    /// Total amount of tokens\r\n  uint256 public totalSupply;\r\n  \r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  \r\n  function transfer(address _to, uint256 _amount) public returns (bool success);\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n  \r\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\r\n  \r\n  function approve(address _spender, uint256 _amount) public returns (bool success);\r\n  \r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  //balance in each address account\r\n  mapping(address => uint256) balances;\r\n  address ownerWallet;\r\n  struct Lockup\r\n  {\r\n      uint256 lockupTime;\r\n      uint256 lockupAmount;\r\n  }\r\n  Lockup lockup;\r\n  mapping(address=>Lockup) lockupParticipants;  \r\n  \r\n  \r\n  uint256 startTime;\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _amount The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n    require(_to != address(0));\r\n    require(balances[msg.sender] >= _amount && _amount > 0\r\n        && balances[_to].add(_amount) > balances[_to]);\r\n\r\n    if (lockupParticipants[msg.sender].lockupAmount>0)\r\n    {\r\n        uint timePassed = now - startTime;\r\n        if (timePassed < lockupParticipants[msg.sender].lockupTime)\r\n        {\r\n            require(balances[msg.sender].sub(_amount) >= lockupParticipants[msg.sender].lockupAmount);\r\n        }\r\n    }\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Transfer(msg.sender, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n  \r\n  \r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _amount uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n    require(_to != address(0));\r\n    require(balances[_from] >= _amount);\r\n    require(allowed[_from][msg.sender] >= _amount);\r\n    require(_amount > 0 && balances[_to].add(_amount) > balances[_to]);\r\n    \r\n    if (lockupParticipants[_from].lockupAmount>0)\r\n    {\r\n        uint timePassed = now - startTime;\r\n        if (timePassed < lockupParticipants[_from].lockupTime)\r\n        {\r\n            require(balances[msg.sender].sub(_amount) >= lockupParticipants[_from].lockupAmount);\r\n        }\r\n    }\r\n    balances[_from] = balances[_from].sub(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n    emit Transfer(_from, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _amount The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = _amount;\r\n    emit Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken, Ownable {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public onlyOwner{\r\n        require(_value <= balances[ownerWallet]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        balances[ownerWallet] = balances[ownerWallet].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n    }\r\n}\r\n/**\r\n * @title DayDay Token\r\n * @dev Token representing DD.\r\n */\r\n contract DayDayToken is BurnableToken {\r\n     string public name ;\r\n     string public symbol ;\r\n     uint8 public decimals =  2;\r\n     \r\n   \r\n     /**\r\n     *@dev users sending ether to this contract will be reverted. Any ether sent to the contract will be sent back to the caller\r\n     */\r\n     function ()public payable {\r\n         revert();\r\n     }\r\n     \r\n     /**\r\n     * @dev Constructor function to initialize the initial supply of token to the creator of the contract\r\n     */\r\n     function DayDayToken(address wallet) public \r\n     {\r\n         owner = msg.sender;\r\n         ownerWallet = wallet;\r\n         totalSupply = 300000000000;\r\n         totalSupply = totalSupply.mul(10 ** uint256(decimals)); //Update total supply with the decimal amount\r\n         name = \"DayDayToken\";\r\n         symbol = \"DD\";\r\n         balances[wallet] = totalSupply;\r\n         startTime = now;\r\n         \r\n         //Emitting transfer event since assigning all tokens to the creator also corresponds to the transfer of tokens to the creator\r\n         emit Transfer(address(0), msg.sender, totalSupply);\r\n     }\r\n     \r\n     /**\r\n     *@dev helper method to get token details, name, symbol and totalSupply in one go\r\n     */\r\n    function getTokenDetail() public view returns (string, string, uint256) {\r\n\t    return (name, symbol, totalSupply);\r\n    }\r\n    \r\n     \r\n    function lockTokensForFs (address F1, address F2) public onlyOwner\r\n    {\r\n        lockup = Lockup({lockupTime:720 days,lockupAmount:90000000 * 10 ** uint256(decimals)});\r\n        lockupParticipants[F1] = lockup;\r\n        \r\n        lockup = Lockup({lockupTime:720 days,lockupAmount:60000000 * 10 ** uint256(decimals)});\r\n        lockupParticipants[F2] = lockup;\r\n    }\r\n    function lockTokensForAs( address A1, address A2, \r\n                         address A3, address A4,\r\n                         address A5, address A6,\r\n                         address A7, address A8,\r\n                         address A9) public onlyOwner\r\n    {\r\n        lockup = Lockup({lockupTime:180 days,lockupAmount:90000000 * 10 ** uint256(decimals)});\r\n        lockupParticipants[A1] = lockup;\r\n        \r\n        lockup = Lockup({lockupTime:180 days,lockupAmount:60000000 * 10 ** uint256(decimals)});\r\n        lockupParticipants[A2] = lockup;\r\n        \r\n        lockup = Lockup({lockupTime:180 days,lockupAmount:30000000 * 10 ** uint256(decimals)});\r\n        lockupParticipants[A3] = lockup;\r\n        \r\n        lockup = Lockup({lockupTime:180 days,lockupAmount:60000000 * 10 ** uint256(decimals)});\r\n        lockupParticipants[A4] = lockup;\r\n        \r\n        lockup = Lockup({lockupTime:180 days,lockupAmount:60000000 * 10 ** uint256(decimals)});\r\n        lockupParticipants[A5] = lockup;\r\n        \r\n        lockup = Lockup({lockupTime:180 days,lockupAmount:15000000 * 10 ** uint256(decimals)});\r\n        lockupParticipants[A6] = lockup;\r\n        \r\n        lockup = Lockup({lockupTime:180 days,lockupAmount:15000000 * 10 ** uint256(decimals)});\r\n        lockupParticipants[A7] = lockup;\r\n        \r\n        lockup = Lockup({lockupTime:180 days,lockupAmount:15000000 * 10 ** uint256(decimals)});\r\n        lockupParticipants[A8] = lockup;\r\n        \r\n        lockup = Lockup({lockupTime:180 days,lockupAmount:15000000 * 10 ** uint256(decimals)});\r\n        lockupParticipants[A9] = lockup;\r\n    }\r\n    \r\n    function lockTokensForCs(address C1,address C2, address C3) public onlyOwner\r\n    {\r\n        lockup = Lockup({lockupTime:90 days,lockupAmount:2500000 * 10 ** uint256(decimals)});\r\n        lockupParticipants[C1] = lockup;\r\n        \r\n        lockup = Lockup({lockupTime:90 days,lockupAmount:1000000 * 10 ** uint256(decimals)});\r\n        lockupParticipants[C2] = lockup;\r\n        \r\n        lockup = Lockup({lockupTime:90 days,lockupAmount:1500000 * 10 ** uint256(decimals)});\r\n        lockupParticipants[C3] = lockup;   \r\n    }\r\n    \r\n    function lockTokensForTeamAndReserve(address team) public onlyOwner\r\n    {\r\n        lockup = Lockup({lockupTime:360 days,lockupAmount:63000000 * 10 ** uint256(decimals)});\r\n        lockupParticipants[team] = lockup;\r\n        \r\n        lockup = Lockup({lockupTime:720 days,lockupAmount:415000000 * 10 ** uint256(decimals)});\r\n        lockupParticipants[ownerWallet] = lockup;\r\n    }\r\n }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"team\",\"type\":\"address\"}],\"name\":\"lockTokensForTeamAndReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"A1\",\"type\":\"address\"},{\"name\":\"A2\",\"type\":\"address\"},{\"name\":\"A3\",\"type\":\"address\"},{\"name\":\"A4\",\"type\":\"address\"},{\"name\":\"A5\",\"type\":\"address\"},{\"name\":\"A6\",\"type\":\"address\"},{\"name\":\"A7\",\"type\":\"address\"},{\"name\":\"A8\",\"type\":\"address\"},{\"name\":\"A9\",\"type\":\"address\"}],\"name\":\"lockTokensForAs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"F1\",\"type\":\"address\"},{\"name\":\"F2\",\"type\":\"address\"}],\"name\":\"lockTokensForFs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"C1\",\"type\":\"address\"},{\"name\":\"C2\",\"type\":\"address\"},{\"name\":\"C3\",\"type\":\"address\"}],\"name\":\"lockTokensForCs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DayDayToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ee7d46528e9a8d3ca2c18ceb0b24248aa881d859","Library":"","SwarmSource":"bzzr://1a071d3cff3e005da22fcd095e0f3df8e6a31c9ec97fe810277abf7907aaf35b"}]}