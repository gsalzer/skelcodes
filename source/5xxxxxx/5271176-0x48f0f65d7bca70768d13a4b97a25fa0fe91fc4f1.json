{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface ERC223\r\n{\r\n\tfunction transfer(address _to, uint _value, bytes _data) public returns(bool);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value, bytes indexed data);\r\n}\r\n\r\ninterface ERC20\r\n{\r\n\tfunction transferFrom(address _from, address _to, uint _value) public returns(bool);\r\n\tfunction approve(address _spender, uint _value) public returns (bool);\r\n\tfunction allowance(address _owner, address _spender) public constant returns(uint);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\ncontract ERC223ReceivingContract\r\n{\r\n\tfunction tokenFallBack(address _from, uint _value, bytes _data)public;\t \r\n}\r\n\r\ncontract Token\r\n{\r\n\tstring internal _symbol;\r\n\tstring internal _name;\r\n\tuint8 internal _decimals;\t\r\n    uint internal _totalSupply;\r\n   \tmapping(address =>uint) internal _balanceOf;\r\n\tmapping(address => mapping(address => uint)) internal _allowances;\r\n\r\n    function Token(string symbol, string name, uint8 decimals, uint totalSupply) public{\r\n\t    _symbol = symbol;\r\n\t\t_name = name;\r\n\t\t_decimals = decimals;\r\n\t\t_totalSupply = totalSupply;\r\n    }\r\n\r\n\tfunction name() public constant returns (string){\r\n        \treturn _name;    \r\n\t}\r\n\r\n\tfunction symbol() public constant returns (string){\r\n        \treturn _symbol;    \r\n\t}\r\n\r\n\tfunction decimals() public constant returns (uint8){\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\tfunction totalSupply() public constant returns (uint){\r\n        \treturn _totalSupply;\r\n\t}\r\n            \t\r\n\tevent Transfer(address indexed _from, address indexed _to, uint _value);\t\r\n}\r\n\r\n\r\ncontract Multiownable {\r\n    uint256 public howManyOwnersDecide;\r\n    address[] public owners;\r\n    bytes32[] public allOperations;\r\n    address insideOnlyManyOwners;\r\n    \r\n    // Reverse lookup tables for owners and allOperations\r\n    mapping(address => uint) ownersIndices; // Starts from 1\r\n    mapping(bytes32 => uint) allOperationsIndicies;\r\n    \r\n    // Owners voting mask per operations\r\n    mapping(bytes32 => uint256) public votesMaskByOperation;\r\n    mapping(bytes32 => uint256) public votesCountByOperation;\r\n    event OwnershipTransferred(address[] previousOwners, address[] newOwners);\r\n    function isOwner(address wallet) public constant returns(bool) {\r\n        return ownersIndices[wallet] > 0;\r\n    }\r\n\r\n    function ownersCount() public constant returns(uint) {\r\n        return owners.length;\r\n    }\r\n\r\n    function allOperationsCount() public constant returns(uint) {\r\n        return allOperations.length;\r\n    }\r\n\r\n    // MODIFIERS\r\n\r\n    /**\r\n    * @dev Allows to perform method by any of the owners\r\n    */\r\n    modifier onlyAnyOwner {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to perform method only after all owners call it with the same arguments\r\n    */\r\n    modifier onlyManyOwners {\r\n        if (insideOnlyManyOwners == msg.sender) {\r\n            _;\r\n            return;\r\n        }\r\n        require(isOwner(msg.sender));\r\n\r\n        uint ownerIndex = ownersIndices[msg.sender] - 1;\r\n        bytes32 operation = keccak256(msg.data);\r\n        \r\n        if (votesMaskByOperation[operation] == 0) {\r\n            allOperationsIndicies[operation] = allOperations.length;\r\n            allOperations.push(operation);\r\n        }\r\n        require((votesMaskByOperation[operation] & (2 ** ownerIndex)) == 0);\r\n        votesMaskByOperation[operation] |= (2 ** ownerIndex);\r\n        votesCountByOperation[operation] += 1;\r\n\r\n        // If all owners confirm same operation\r\n        if (votesCountByOperation[operation] == howManyOwnersDecide) {\r\n            deleteOperation(operation);\r\n            insideOnlyManyOwners = msg.sender;\r\n            _;\r\n            insideOnlyManyOwners = address(0);\r\n        }\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n\r\n    function Multiownable() public {\r\n        owners.push(msg.sender);\r\n        ownersIndices[msg.sender] = 1;\r\n        howManyOwnersDecide = 1;\r\n    }\r\n\r\n    // INTERNAL METHODS\r\n\r\n    /**\r\n    * @dev Used to delete cancelled or performed operation\r\n    * @param operation defines which operation to delete\r\n    */\r\n    function deleteOperation(bytes32 operation) internal {\r\n        uint index = allOperationsIndicies[operation];\r\n        if (allOperations.length > 1) {\r\n            allOperations[index] = allOperations[allOperations.length - 1];\r\n            allOperationsIndicies[allOperations[index]] = index;\r\n        }\r\n        allOperations.length--;\r\n        \r\n        delete votesMaskByOperation[operation];\r\n        delete votesCountByOperation[operation];\r\n        delete allOperationsIndicies[operation];\r\n    }\r\n\r\n    // PUBLIC METHODS\r\n\r\n    /**\r\n    * @dev Allows owners to change ownership\r\n    * @param newOwners defines array of addresses of new owners\r\n    */\r\n    function transferOwnership(address[] newOwners) public {\r\n        transferOwnershipWithHowMany(newOwners, newOwners.length);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows owners to change ownership\r\n    * @param newOwners defines array of addresses of new owners\r\n    * @param newHowManyOwnersDecide defines how many owners can decide\r\n    */\r\n    function transferOwnershipWithHowMany(address[] newOwners, uint256 newHowManyOwnersDecide) public onlyManyOwners {\r\n        require(newOwners.length > 0);\r\n        require(newOwners.length <= 256);\r\n        require(newHowManyOwnersDecide > 0);\r\n        require(newHowManyOwnersDecide <= newOwners.length);\r\n        for (uint i = 0; i < newOwners.length; i++) {\r\n            require(newOwners[i] != address(0));\r\n        }\r\n\r\n        OwnershipTransferred(owners, newOwners);\r\n\r\n        // Reset owners array and index reverse lookup table\r\n        for (i = 0; i < owners.length; i++) {\r\n            delete ownersIndices[owners[i]];\r\n        }\r\n        for (i = 0; i < newOwners.length; i++) {\r\n            require(ownersIndices[newOwners[i]] == 0);\r\n            ownersIndices[newOwners[i]] = i + 1;\r\n        }\r\n        owners = newOwners;\r\n        howManyOwnersDecide = newHowManyOwnersDecide;\r\n\r\n        // Discard all pendign operations\r\n        for (i = 0; i < allOperations.length; i++) {\r\n            delete votesMaskByOperation[allOperations[i]];\r\n            delete votesCountByOperation[allOperations[i]];\r\n            delete allOperationsIndicies[allOperations[i]];\r\n        }\r\n        allOperations.length = 0;\r\n    }\r\n}\r\n\r\ncontract MyToken is Token(\"TLT\",\"Talent Coin\",8,50000000),ERC20,ERC223,Multiownable\r\n{    \t\t\r\n\tuint256 internal sellPrice;\r\n\tuint256 internal buyPrice;\r\n    function MyToken() public payable\r\n    {\r\n    \t_balanceOf[msg.sender]=_totalSupply;       \t\t\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint){\r\n    \treturn _totalSupply;  \r\n\t}\r\n\t\r\n    function balanceOf(address _addr)public constant returns (uint){\r\n      \treturn _balanceOf[_addr];\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint _value)public onlyManyOwners returns (bool){\r\n    \trequire(_value>0 && _value <= balanceOf(msg.sender));\r\n    \tif(!isContract(_to))\r\n    \t{\r\n    \t\t_balanceOf[msg.sender]-= _value;\r\n        \t_balanceOf[_to]+=_value;\r\n\t\t    Transfer(msg.sender, _to, _value); \r\n \t\t\treturn true;\r\n\t    }\r\n    \treturn false;\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint _value, bytes _data)public returns(bool)\r\n\t{\r\n\t    require(_value>0 && _value <= balanceOf(msg.sender));\r\n\t\tif(isContract(_to))\r\n\t\t{\r\n\t\t\t_balanceOf[msg.sender]-= _value;\r\n\t       \t_balanceOf[_to]+=_value;\r\n\t\t\tERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\r\n\t\t\t_contract.tokenFallBack(msg.sender,_value,_data);\r\n\t\t\tTransfer(msg.sender, _to, _value, _data); \r\n    \t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction isContract(address _addr) internal view returns(bool){\r\n\t\tuint codeLength;\r\n\t\tassembly\r\n\t\t{\r\n\t\t    codeLength := extcodesize(_addr)\r\n\t    }\r\n\t\treturn codeLength > 0;\r\n\t}\t\r\n    \r\n\tfunction transferFrom(address _from, address _to, uint _value)public onlyManyOwners returns(bool){\r\n    \trequire(_allowances[_from][msg.sender] > 0 && _value > 0 && _allowances[_from][msg.sender] >= _value && _balanceOf[_from] >= _value);\r\n    \t{\r\n\t\t\t_balanceOf[_from]-=_value;\r\n    \t\t_balanceOf[_to]+=_value;\r\n\t\t\t_allowances[_from][msg.sender] -= _value;\r\n\t\t\tTransfer(_from, _to, _value);            \r\n\t\t\treturn true;\r\n    \t}\r\n    \treturn false;\r\n   }\r\n\r\n\tfunction approve(address _spender, uint _value) public returns (bool)\r\n\t{\r\n    \t_allowances[msg.sender][_spender] = _value;\r\n    \tApproval(msg.sender, _spender, _value);\t\r\n    \treturn true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public constant returns(uint)\r\n    {\r\n    \treturn _allowances[_owner][_spender];\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwners\",\"type\":\"address[]\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allOperationsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"howManyOwnersDecide\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allOperations\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votesMaskByOperation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votesCountByOperation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwners\",\"type\":\"address[]\"},{\"name\":\"newHowManyOwnersDecide\",\"type\":\"uint256\"}],\"name\":\"transferOwnershipWithHowMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwners\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"newOwners\",\"type\":\"address[]\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MyToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4c40e0b625a556454bf65dd52ed6b0c8dfe51247d531e4637f9f285cf17768e3"}]}