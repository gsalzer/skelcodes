{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  ERC20 public token;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // How many token units a buyer gets per wei.\r\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\r\n  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\r\n  // 1 wei will give you 1 unit, or 0.001 TOK.\r\n  uint256 public rate;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @param _rate Number of token units a buyer gets per wei\r\n   * @param _wallet Address where collected funds will be forwarded to\r\n   * @param _token Address of the token being sold\r\n   */\r\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    token = _token;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) public payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(_beneficiary, tokens);\r\n    emit TokenPurchase(\r\n      msg.sender,\r\n      _beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    _updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n    _forwardFunds();\r\n    _postValidatePurchase(_beneficiary, weiAmount);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _postValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    token.transfer(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _updatePurchasingState(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 _weiAmount)\r\n    internal view returns (uint256)\r\n  {\r\n    return _weiAmount.mul(rate);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract WhitelistedCrowdsale is Crowdsale, Ownable {\r\n\r\n  mapping(address => bool) public whitelist;\r\n\r\n  /**\r\n   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\r\n   */\r\n  modifier isWhitelisted(address _beneficiary) {\r\n    require(whitelist[_beneficiary]);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds single address to whitelist.\r\n   * @param _beneficiary Address to be added to the whitelist\r\n   */\r\n  function addToWhitelist(address _beneficiary) external onlyOwner {\r\n    whitelist[_beneficiary] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\r\n   * @param _beneficiaries Addresses to be added to the whitelist\r\n   */\r\n  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\r\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n      whitelist[_beneficiaries[i]] = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Removes single address from whitelist.\r\n   * @param _beneficiary Address to be removed to the whitelist\r\n   */\r\n  function removeFromWhitelist(address _beneficiary) external onlyOwner {\r\n    whitelist[_beneficiary] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\r\n   * @param _beneficiary Token beneficiary\r\n   * @param _weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n    isWhitelisted(_beneficiary)\r\n  {\r\n    super._preValidatePurchase(_beneficiary, _weiAmount);\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\ncontract OMICrowdsale is WhitelistedCrowdsale, Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  /* \r\n   *  Constants\r\n   */\r\n  uint256 constant crowdsaleStartTime = 1530273600; // Pacific/Auckland 2018-06-30 00:00:00 \r\n  uint256 constant crowdsaleFinishTime = 1538222400; // Pacific/Auckland 2018-09-30 00:00:00\r\n  uint256 constant crowdsaleUSDGoal = 22125000;\r\n  uint256 constant crowdsaleTokenGoal = 362500000*1e18;\r\n  uint256 constant minimumTokenPurchase = 2500*1e18;\r\n  uint256 constant maximumTokenPurchase = 5000000*1e18;\r\n\r\n  /*\r\n   *  Storage\r\n   */\r\n  OMIToken public token;\r\n  OMITokenLock public tokenLock;\r\n\r\n  uint256 public totalUSDRaised;\r\n  uint256 public totalTokensSold;\r\n  bool public isFinalized = false;\r\n\r\n  mapping(address => uint256) public purchaseRecords;\r\n\r\n  /*\r\n   *  Events\r\n   */\r\n  event RateChanged(uint256 newRate);\r\n  event USDRaisedUpdated(uint256 newTotal);\r\n  event WhitelistAddressAdded(address newWhitelistAddress);\r\n  event WhitelistAddressRemoved(address removedWhitelistAddress);\r\n  event CrowdsaleStarted();\r\n  event CrowdsaleFinished();\r\n\r\n\r\n  /*\r\n   *  Modifiers\r\n   */\r\n  modifier whenNotFinalized () {\r\n    require(!isFinalized);\r\n    _;\r\n  }\r\n\r\n  /*\r\n   *  Public Functions\r\n   */\r\n  /// @dev Contract constructor sets...\r\n  function OMICrowdsale (\r\n    uint256 _startingRate,\r\n    address _ETHWallet,\r\n    address _OMIToken,\r\n    address _OMITokenLock\r\n  )\r\n    Crowdsale(_startingRate, _ETHWallet, ERC20(_OMIToken))\r\n    public\r\n  {\r\n    token = OMIToken(_OMIToken);\r\n    require(token.isOMITokenContract());\r\n\r\n    tokenLock = OMITokenLock(_OMITokenLock);\r\n    require(tokenLock.isOMITokenLockContract());\r\n\r\n    rate = _startingRate;\r\n  }\r\n\r\n  /// @dev Function to call from other contracts to ensure that this is the proper contract\r\n  function isOMICrowdsaleContract()\r\n    public \r\n    pure \r\n    returns(bool)\r\n  { \r\n    return true; \r\n  }\r\n\r\n  /// @dev Function to check if crowdsale is open\r\n  function isOpen()\r\n    public\r\n    view\r\n    whenNotPaused\r\n    whenNotFinalized\r\n    returns(bool)\r\n  {\r\n    return now >= crowdsaleStartTime;\r\n  }\r\n\r\n  /// @dev Allows the owner to set the current rate for calculating the number of tokens for a purchase.\r\n  /// @dev An external cron job will fetch the ETH/USD daily average from the cryptocompare API and call this function.\r\n  function setRate(uint256 _newRate)\r\n    public\r\n    onlyOwner\r\n    whenNotFinalized\r\n    returns(bool)\r\n  {\r\n    require(_newRate > 0);\r\n    rate = _newRate;\r\n    RateChanged(rate);\r\n    return true;\r\n  }\r\n\r\n  /// @dev Allows the owner to update the total amount of USD raised. T\r\n  function setUSDRaised(uint256 _total)\r\n    public\r\n    onlyOwner\r\n    whenNotFinalized\r\n  {\r\n    require(_total > 0);\r\n    totalUSDRaised = _total;\r\n    USDRaisedUpdated(_total);\r\n  }\r\n\r\n  /// @dev Gets the purchase records for a given address\r\n  /// @param _beneficiary Tokan purchaser\r\n  function getPurchaseRecord(address _beneficiary) \r\n    public \r\n    view \r\n    isWhitelisted(_beneficiary)\r\n    returns(uint256)\r\n  {\r\n    return purchaseRecords[_beneficiary];\r\n  }\r\n\r\n  /// @dev Adds single address to whitelist\r\n  /// @param _beneficiary Address to be added to the whitelist\r\n  function addToWhitelist(address _beneficiary) external onlyOwner {\r\n    whitelist[_beneficiary] = true;\r\n    WhitelistAddressAdded(_beneficiary);\r\n  }\r\n\r\n  /// @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\r\n  /// @param _beneficiaries Addresses to be added to the whitelist\r\n  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\r\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n      whitelist[_beneficiaries[i]] = true;\r\n      WhitelistAddressAdded(_beneficiaries[i]);\r\n    }\r\n  }\r\n\r\n  /// @dev Removes single address from whitelist.\r\n  /// @param _beneficiary Address to be removed to the whitelist\r\n  function removeFromWhitelist(address _beneficiary) external onlyOwner {\r\n    whitelist[_beneficiary] = false;\r\n    WhitelistAddressRemoved(_beneficiary);\r\n  }\r\n\r\n  /// @dev Finalizes the crowdsale\r\n  function finalize() external onlyOwner {\r\n    _finalization();\r\n  }\r\n\r\n  /*\r\n   *  Internal Functions\r\n   */\r\n  /// @dev Extend parent behavior to check if current stage should close. Must call super to ensure the enforcement of the whitelist.\r\n  /// @param _beneficiary Token purchaser\r\n  /// @param _weiAmount Amount of wei contributed\r\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount)\r\n    internal\r\n    whenNotPaused\r\n    whenNotFinalized\r\n   {\r\n    super._preValidatePurchase(_beneficiary, _weiAmount);\r\n\r\n    // Beneficiary's total should be between the minimum and maximum purchase amounts\r\n    uint256 _totalPurchased = purchaseRecords[_beneficiary].add(_getTokenAmount(_weiAmount));\r\n    require(_totalPurchased >= minimumTokenPurchase);\r\n    require(_totalPurchased <= maximumTokenPurchase);\r\n\r\n    // Must make the purchase from the intended whitelisted address\r\n    require(msg.sender == _beneficiary);\r\n\r\n    // Must be after the start time\r\n    require(now >= crowdsaleStartTime);\r\n  }\r\n\r\n  /// @dev Overrides parent by storing balances in timelock contract instead of issuing tokens right away.\r\n  /// @param _beneficiary Token purchaser\r\n  /// @param _tokenAmount Amount of tokens purchased\r\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount)\r\n    internal\r\n  {\r\n    // Lock beneficiary's tokens\r\n    tokenLock.lockTokens(_beneficiary, 1 weeks, _tokenAmount);\r\n  }\r\n\r\n  /// @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n  /// @param _beneficiary Address receiving the tokens\r\n  /// @param _weiAmount Value in wei involved in the purchase\r\n  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount)\r\n    internal\r\n  {\r\n    uint256 _tokenAmount = _getTokenAmount(_weiAmount);\r\n\r\n    // Add token amount to the purchase history\r\n    purchaseRecords[_beneficiary] = purchaseRecords[_beneficiary].add(_tokenAmount);\r\n    \r\n    // Add token amount to total tokens sold\r\n    totalTokensSold = totalTokensSold.add(_tokenAmount);\r\n\r\n    // Finish the crowdsale...\r\n    // ...if there is not a minimum purchase left\r\n    if (crowdsaleTokenGoal.sub(totalTokensSold) < minimumTokenPurchase) {\r\n      _finalization();\r\n    }\r\n    // ...if USD funding goal has been reached\r\n    if (totalUSDRaised >= crowdsaleUSDGoal) {\r\n      _finalization();\r\n    }\r\n    // ...if the time is after the crowdsale end time\r\n    if (now > crowdsaleFinishTime) {\r\n      _finalization();\r\n    }\r\n  }\r\n\r\n  /// @dev Finalizes crowdsale\r\n  function _finalization()\r\n    internal\r\n    whenNotFinalized\r\n  {\r\n    isFinalized = true;\r\n    tokenLock.finishCrowdsale();\r\n    CrowdsaleFinished();\r\n  }\r\n}\r\n\r\ncontract OMITokenLock is Ownable, Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  /*\r\n   *  Storage\r\n   */\r\n  OMIToken public token;\r\n  OMICrowdsale public crowdsale;\r\n  address public allowanceProvider;\r\n  bool public crowdsaleFinished = false;\r\n  uint256 public crowdsaleEndTime;\r\n\r\n  struct Lock {\r\n    uint256 amount;\r\n    uint256 lockDuration;\r\n    bool released;\r\n    bool revoked;\r\n  }\r\n  struct TokenLockVault {\r\n    address beneficiary;\r\n    uint256 tokenBalance;\r\n    uint256 lockIndex;\r\n    Lock[] locks;\r\n  }\r\n  mapping(address => TokenLockVault) public tokenLocks;\r\n  address[] public lockIndexes;\r\n  uint256 public totalTokensLocked;\r\n\r\n  /*\r\n   *  Modifiers\r\n   */\r\n  modifier ownerOrCrowdsale () {\r\n    require(msg.sender == owner || OMICrowdsale(msg.sender) == crowdsale);\r\n    _;\r\n  }\r\n\r\n  /*\r\n   *  Events\r\n   */\r\n  event LockedTokens(address indexed beneficiary, uint256 amount, uint256 releaseTime);\r\n  event UnlockedTokens(address indexed beneficiary, uint256 amount);\r\n  event FinishedCrowdsale();\r\n\r\n  /*\r\n   *  Public Functions\r\n   */\r\n  /// @dev Constructor function\r\n  function OMITokenLock (address _token, address _allowanceProvider) public {\r\n    token = OMIToken(_token);\r\n    require(token.isOMITokenContract());\r\n\r\n    allowanceProvider = _allowanceProvider;\r\n  }\r\n\r\n  /// @dev Function to call from other contracts to ensure that this is the proper contract\r\n  function isOMITokenLockContract()\r\n    public \r\n    pure \r\n    returns(bool)\r\n  { \r\n    return true; \r\n  }\r\n\r\n  /// @dev Sets the crowdsale address to allow authorize locking permissions\r\n  /// @param _crowdsale The address of the crowdsale\r\n  function setCrowdsaleAddress (address _crowdsale)\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    crowdsale = OMICrowdsale(_crowdsale);\r\n    require(crowdsale.isOMICrowdsaleContract());\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @dev Sets the token allowance provider address\r\n  /// @param _allowanceProvider The address of the token allowance provider\r\n  function setAllowanceAddress (address _allowanceProvider)\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    allowanceProvider = _allowanceProvider;\r\n    return true;\r\n  }\r\n\r\n  /// @dev Marks the crowdsale as being finished and sets the crowdsale finish date\r\n  function finishCrowdsale()\r\n    public\r\n    ownerOrCrowdsale\r\n    whenNotPaused\r\n  {\r\n    require(!crowdsaleFinished);\r\n    crowdsaleFinished = true;\r\n    crowdsaleEndTime = now;\r\n    FinishedCrowdsale();\r\n  }\r\n\r\n  /// @dev Gets the total amount of tokens for a given address\r\n  /// @param _beneficiary The address for which to look up the total token amount\r\n  function getTokenBalance(address _beneficiary)\r\n    public\r\n    view\r\n    returns (uint)\r\n  {\r\n    return tokenLocks[_beneficiary].tokenBalance;\r\n  }\r\n\r\n  /// @dev Gets the total number of locks for a given address\r\n  /// @param _beneficiary The address for which to look up the total number of locks\r\n  function getNumberOfLocks(address _beneficiary)\r\n    public\r\n    view\r\n    returns (uint)\r\n  {\r\n    return tokenLocks[_beneficiary].locks.length;\r\n  }\r\n\r\n  /// @dev Gets the lock at a given index for a given address\r\n  /// @param _beneficiary The address used to look up the lock\r\n  /// @param _lockIndex The index used to look up the lock\r\n  function getLockByIndex(address _beneficiary, uint256 _lockIndex)\r\n    public\r\n    view\r\n    returns (uint256 amount, uint256 lockDuration, bool released, bool revoked)\r\n  {\r\n    require(_lockIndex >= 0);\r\n    require(_lockIndex <= tokenLocks[_beneficiary].locks.length.sub(1));\r\n\r\n    return (\r\n      tokenLocks[_beneficiary].locks[_lockIndex].amount,\r\n      tokenLocks[_beneficiary].locks[_lockIndex].lockDuration,\r\n      tokenLocks[_beneficiary].locks[_lockIndex].released,\r\n      tokenLocks[_beneficiary].locks[_lockIndex].revoked\r\n    );\r\n  }\r\n\r\n  /// @dev Revokes the lock at a given index for a given address\r\n  /// @param _beneficiary The address used to look up the lock\r\n  /// @param _lockIndex The lock index to be revoked\r\n  function revokeLockByIndex(address _beneficiary, uint256 _lockIndex)\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    require(_lockIndex >= 0);\r\n    require(_lockIndex <= tokenLocks[_beneficiary].locks.length.sub(1));\r\n    require(!tokenLocks[_beneficiary].locks[_lockIndex].revoked);\r\n\r\n    tokenLocks[_beneficiary].locks[_lockIndex].revoked = true;\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @dev Locks tokens for a given beneficiary\r\n  /// @param _beneficiary The address to which the tokens will be released\r\n  /// @param _lockDuration The duration of time that must elapse after the crowdsale end date\r\n  /// @param _tokens The amount of tokens to be locked\r\n  function lockTokens(address _beneficiary, uint256 _lockDuration, uint256 _tokens)\r\n    external\r\n    ownerOrCrowdsale\r\n    whenNotPaused\r\n  {\r\n    // Lock duration must be greater than zero seconds\r\n    require(_lockDuration >= 0);\r\n    // Token amount must be greater than zero\r\n    require(_tokens > 0);\r\n\r\n    // Token Lock must have a sufficient allowance prior to creating locks\r\n    require(_tokens.add(totalTokensLocked) <= token.allowance(allowanceProvider, address(this)));\r\n\r\n    TokenLockVault storage lock = tokenLocks[_beneficiary];\r\n\r\n    // If this is the first lock for this beneficiary, add their address to the lock indexes\r\n    if (lock.beneficiary == 0) {\r\n      lock.beneficiary = _beneficiary;\r\n      lock.lockIndex = lockIndexes.length;\r\n      lockIndexes.push(_beneficiary);\r\n    }\r\n\r\n    // Add the lock\r\n    lock.locks.push(Lock(_tokens, _lockDuration, false, false));\r\n\r\n    // Update the total tokens for this beneficiary\r\n    lock.tokenBalance = lock.tokenBalance.add(_tokens);\r\n\r\n    // Update the number of locked tokens\r\n    totalTokensLocked = _tokens.add(totalTokensLocked);\r\n\r\n    LockedTokens(_beneficiary, _tokens, _lockDuration);\r\n  }\r\n\r\n  /// @dev Transfers any tokens held in a timelock vault to beneficiary if they are due for release.\r\n  function releaseTokens()\r\n    public\r\n    whenNotPaused\r\n    returns(bool)\r\n  {\r\n    require(crowdsaleFinished);\r\n    require(_release(msg.sender));\r\n    return true;\r\n  }\r\n\r\n  /// @dev Transfers tokens held by timelock to all beneficiaries within the provided range.\r\n  /// @param _beneficiary The user for which token locks should be released.\r\n  function releaseTokensByAddress(address _beneficiary)\r\n    external\r\n    whenNotPaused\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    require(crowdsaleFinished);\r\n    require(_release(_beneficiary));\r\n    return true;\r\n  }\r\n\r\n  /*\r\n   *  Internal Functions\r\n   */\r\n  /// @dev Reviews and releases token for a given beneficiary\r\n  /// @param _beneficiary address for which a token release should be attempted\r\n  function _release(address _beneficiary)\r\n    internal\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    TokenLockVault memory lock = tokenLocks[_beneficiary];\r\n    require(lock.beneficiary == _beneficiary);\r\n    require(_beneficiary != 0x0);\r\n\r\n    bool hasUnDueLocks = false;\r\n\r\n    for (uint256 i = 0; i < lock.locks.length; i++) {\r\n      Lock memory currentLock = lock.locks[i];\r\n      // Skip any locks which are already released or revoked\r\n      if (currentLock.released || currentLock.revoked) {\r\n        continue;\r\n      }\r\n\r\n      // Skip any locks that are not due for release\r\n      if (crowdsaleEndTime.add(currentLock.lockDuration) >= now) {\r\n        hasUnDueLocks = true;\r\n        continue;\r\n      }\r\n\r\n      // The amount of tokens to transfer must be less than the number of locked tokens\r\n      require(currentLock.amount <= token.allowance(allowanceProvider, address(this)));\r\n\r\n      // Release Tokens\r\n      UnlockedTokens(_beneficiary, currentLock.amount);\r\n      tokenLocks[_beneficiary].locks[i].released = true;\r\n      tokenLocks[_beneficiary].tokenBalance = tokenLocks[_beneficiary].tokenBalance.sub(currentLock.amount);\r\n      totalTokensLocked = totalTokensLocked.sub(currentLock.amount);\r\n      assert(token.transferFrom(allowanceProvider, _beneficiary, currentLock.amount));\r\n    }\r\n\r\n    // If there are no future locks to be released, delete the lock vault\r\n    if (!hasUnDueLocks) {\r\n      delete tokenLocks[_beneficiary];\r\n      lockIndexes[lock.lockIndex] = 0x0;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    hasMintPermission\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract CappedToken is MintableToken {\r\n\r\n  uint256 public cap;\r\n\r\n  constructor(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    onlyOwner\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(totalSupply_.add(_amount) <= cap);\r\n\r\n    return super.mint(_to, _amount);\r\n  }\r\n\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract OMIToken is CappedToken, PausableToken {\r\n  string public constant name = \"Ecomi Token\";\r\n  string public constant symbol = \"OMI\";\r\n  uint256 public decimals = 18;\r\n\r\n  function OMIToken() public CappedToken(1000000000*1e18) {}\r\n\r\n  /// @dev Function to call from other contracts to ensure that this is the proper contract\r\n  function isOMITokenContract()\r\n    public \r\n    pure \r\n    returns(bool)\r\n  { \r\n    return true; \r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchaseRecords\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getPurchaseRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUSDRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addManyToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"setUSDRaised\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenLock\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOMICrowdsaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startingRate\",\"type\":\"uint256\"},{\"name\":\"_ETHWallet\",\"type\":\"address\"},{\"name\":\"_OMIToken\",\"type\":\"address\"},{\"name\":\"_OMITokenLock\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newTotal\",\"type\":\"uint256\"}],\"name\":\"USDRaisedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newWhitelistAddress\",\"type\":\"address\"}],\"name\":\"WhitelistAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"removedWhitelistAddress\",\"type\":\"address\"}],\"name\":\"WhitelistAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"OMICrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000020f2000000000000000000000000a93d2cfae313cfbb4235a603d0b82fc75ae6a37200000000000000000000000052089ba2c27523cf44826cfb92c711d3ef4df231000000000000000000000000cfe17af4e4e1b7d546730ce1bfbcf0ba2b380f45","Library":"","SwarmSource":"bzzr://da36e77554dcd5437b01c711dc682a40eec155e87646379391cbad02e7bf42e4"}]}