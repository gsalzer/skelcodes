{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract THTokenSale is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    // Sale Token\r\n    THToken public token;\r\n\r\n    // Total wei raised\r\n    uint256 public fundsRaised = 0;\r\n\r\n    // Minimal possible cap in ethers\r\n    // @dev NEEDS to be the same as Stage 1 cap now.\r\n    uint256 public constant SOFT_CAP = 3000 ether;\r\n\r\n    // Maximum possible cap in ethers\r\n    uint256 public constant HARD_CAP = 12000 ether;\r\n\r\n    bool public softCapReached = false;\r\n    bool public hardCapReached = false;\r\n    bool public saleSuccessfullyFinished = false;\r\n\r\n    /**\r\n     * Stage 1: 3000 ether worth of THT available at 40% bonus\r\n     * Stage 2: 1800 ether worth of THT available at 20% bonus\r\n     * Stage 3: 2250 ether worth of THT available at 10% bonus\r\n     * Stage 4: 2250 ether worth of THT available at 5% bonus\r\n     * Stage 5: 2700 ether worth of THT available with no bonus\r\n     */\r\n    uint256[5] public stageCaps = [\r\n        3000 ether,\r\n        4800 ether,\r\n        7050 ether,\r\n        9300 ether,\r\n        12000 ether\r\n    ];\r\n    uint256[5] public stageTokenMul = [\r\n        5040,\r\n        4320,\r\n        3960,\r\n        3780,\r\n        3600\r\n    ];\r\n    uint256 public activeStage = 0;\r\n\r\n    // Minimum investment during first 48 hours\r\n    uint256 public constant MIN_INVESTMENT_PHASE1 = 5 ether;\r\n    // Minimum investment\r\n    uint256 public constant MIN_INVESTMENT = 0.1 ether;\r\n\r\n    // refundAllowed can be set to true if SOFT_CAP is not reached\r\n    bool public refundAllowed = false;\r\n    // Token Allocation for Bounty(5%), Advisors (5%), Platform (10%)\r\n    uint256[3] public varTokenAllocation = [5, 5, 10];\r\n    // 20% vested over 4 segments for Core Team\r\n    uint256[4] public teamTokenAllocation = [5, 5, 5, 5];\r\n    // 60% crowdsale\r\n    uint256 public constant CROWDSALE_ALLOCATION = 60;\r\n\r\n    // Vested amounts of tokens, filled with proper values when finalizing\r\n    uint256[4] public vestedTeam = [0, 0, 0, 0];\r\n    uint256 public vestedAdvisors = 0;\r\n\r\n    // Withdraw\r\n    address public wallet;\r\n    // CoreTeam Vested\r\n    address public walletCoreTeam;\r\n    // Platform THT\r\n    address public walletPlatform;\r\n    // Bounty and Advisors THT\r\n    address public walletBountyAndAdvisors;\r\n\r\n    // start and end timestamp when investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // Whitelisted addresses and their allocations of wei available to invest\r\n    mapping(address => uint256) public whitelist;\r\n\r\n    // Wei received from token buyers\r\n    mapping(address => uint256) public weiBalances;\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event Whitelisted(address indexed beneficiary, uint256 value);\r\n    event SoftCapReached();\r\n    event HardCapReached();\r\n    event Finalized(bool successfullyFinished);\r\n    event StageOpened(uint stage);\r\n    event StageClosed(uint stage);\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only during the sale\r\n    */\r\n    modifier beforeSaleEnds() {\r\n        // Not calling hasEnded due to lower gas usage\r\n        require(now < endTime && fundsRaised < HARD_CAP);\r\n        _;\r\n    }\r\n\r\n    function THTokenSale(\r\n        uint256 _startTime,\r\n        address _wallet,\r\n        address _walletCoreTeam,\r\n        address _walletPlatform,\r\n        address _walletBountyAndAdvisors\r\n    ) public {\r\n        require(_startTime >= now);\r\n        require(_wallet != 0x0);\r\n        require(_walletCoreTeam != 0x0);\r\n        require(_walletPlatform != 0x0);\r\n        require(_walletBountyAndAdvisors != 0x0);\r\n        require(vestedTeam.length == teamTokenAllocation.length);   // sanity checks\r\n        require(stageCaps.length == stageTokenMul.length);   // sanity checks\r\n\r\n        token = new THToken();\r\n        wallet = _wallet;\r\n        walletCoreTeam = _walletCoreTeam;\r\n        walletPlatform = _walletPlatform;\r\n        walletBountyAndAdvisors = _walletBountyAndAdvisors;\r\n        startTime = _startTime;\r\n        // Sale lasts up to 4 weeks and 4 days\r\n        endTime = _startTime + 32 * 86400;\r\n    }\r\n\r\n    /*\r\n     * @dev fallback for processing ether\r\n     */\r\n    function() public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /*\r\n     * @dev Sale is executed in stages/tranches. Each stage except the first is activated manually by the owner.\r\n     * Only allow next stage when current stage/tranche is filled to cap.\r\n     */\r\n    function activateNextStage() onlyOwner public {\r\n        uint256 stageIndex = activeStage;\r\n        require(fundsRaised >= stageCaps[stageIndex]);\r\n        require(stageIndex + 1 < stageCaps.length);\r\n\r\n        activeStage = stageIndex + 1;\r\n        StageOpened(activeStage + 1);\r\n    }\r\n\r\n    /*\r\n     * @dev sell token and send to contributor address\r\n     * @param contributor address\r\n     */\r\n    function buyTokens(address contributor) whenNotPaused beforeSaleEnds public payable {\r\n        uint256 _stageIndex = activeStage;\r\n        uint256 refund = 0;\r\n        uint256 weiAmount = msg.value;\r\n        uint256 _activeStageCap = stageCaps[_stageIndex];\r\n\r\n        require(fundsRaised < _activeStageCap);\r\n        require(validPurchase());\r\n        require(canContribute(contributor, weiAmount));\r\n\r\n        uint256 capDelta = _activeStageCap.sub(fundsRaised);\r\n\r\n        if (capDelta < weiAmount) {\r\n            // Not enough tokens available for full contribution, we will do a partial.\r\n            weiAmount = capDelta;\r\n            // Calculate refund for contributor.\r\n            refund = msg.value.sub(weiAmount);\r\n        }\r\n\r\n        uint256 tokensToMint = weiAmount.mul(stageTokenMul[_stageIndex]);\r\n\r\n        whitelist[contributor] = whitelist[contributor].sub(weiAmount);\r\n        weiBalances[contributor] = weiBalances[contributor].add(weiAmount);\r\n\r\n        fundsRaised = fundsRaised.add(weiAmount);\r\n        token.mint(contributor, tokensToMint);\r\n\r\n        // Refund after state changes for re-entrancy safety\r\n        if (refund > 0) {\r\n            msg.sender.transfer(refund);\r\n        }\r\n        TokenPurchase(0x0, contributor, weiAmount, tokensToMint);\r\n\r\n        if (fundsRaised >= _activeStageCap) {\r\n            finalizeCurrentStage();\r\n        }\r\n    }\r\n\r\n    function canContribute(address contributor, uint256 weiAmount) public view returns (bool) {\r\n        require(contributor != 0x0);\r\n        require(weiAmount > 0);\r\n        return (whitelist[contributor] >= weiAmount);\r\n    }\r\n\r\n    function addWhitelist(address contributor, uint256 weiAmount) onlyOwner public returns (bool) {\r\n        require(contributor != 0x0);\r\n        require(weiAmount > 0);\r\n        // Only ever set the new amount, even if user is already whitelisted with a previous value set\r\n        whitelist[contributor] = weiAmount;\r\n        Whitelisted(contributor, weiAmount);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * @dev Add participants to whitelist in bulk\r\n     */\r\n    function addWhitelistBulk(address[] contributors, uint256[] amounts) onlyOwner beforeSaleEnds public returns (bool) {\r\n        address contributor;\r\n        uint256 amount;\r\n        require(contributors.length == amounts.length);\r\n\r\n        for (uint i = 0; i < contributors.length; i++) {\r\n            contributor = contributors[i];\r\n            amount = amounts[i];\r\n            require(addWhitelist(contributor, amount));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function withdraw() onlyOwner public {\r\n        require(softCapReached);\r\n        require(this.balance > 0);\r\n\r\n        wallet.transfer(this.balance);\r\n    }\r\n\r\n    function withdrawCoreTeamTokens() onlyOwner public {\r\n        require(saleSuccessfullyFinished);\r\n\r\n        if (now > startTime + 720 days && vestedTeam[3] > 0) {\r\n            token.transfer(walletCoreTeam, vestedTeam[3]);\r\n            vestedTeam[3] = 0;\r\n        }\r\n        if (now > startTime + 600 days && vestedTeam[2] > 0) {\r\n            token.transfer(walletCoreTeam, vestedTeam[2]);\r\n            vestedTeam[2] = 0;\r\n        }\r\n        if (now > startTime + 480 days && vestedTeam[1] > 0) {\r\n            token.transfer(walletCoreTeam, vestedTeam[1]);\r\n            vestedTeam[1] = 0;\r\n        }\r\n        if (now > startTime + 360 days && vestedTeam[0] > 0) {\r\n            token.transfer(walletCoreTeam, vestedTeam[0]);\r\n            vestedTeam[0] = 0;\r\n        }\r\n    }\r\n\r\n    function withdrawAdvisorTokens() onlyOwner public {\r\n        require(saleSuccessfullyFinished);\r\n\r\n        if (now > startTime + 180 days && vestedAdvisors > 0) {\r\n            token.transfer(walletBountyAndAdvisors, vestedAdvisors);\r\n            vestedAdvisors = 0;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Leave token balance as is.\r\n     * The tokens are unusable if a refund call could be successful due to transferAllowed = false upon failing to reach SOFT_CAP.\r\n     */\r\n    function refund() public {\r\n        require(refundAllowed);\r\n        require(!softCapReached);\r\n        require(weiBalances[msg.sender] > 0);\r\n\r\n        uint256 currentBalance = weiBalances[msg.sender];\r\n        weiBalances[msg.sender] = 0;\r\n        msg.sender.transfer(currentBalance);\r\n    }\r\n\r\n    /*\r\n     * @dev When finishing the crowdsale we mint non-crowdsale tokens based on total tokens minted during crowdsale\r\n     */\r\n    function finishCrowdsale() onlyOwner public returns (bool) {\r\n        require(now >= endTime || fundsRaised >= HARD_CAP);\r\n        require(!saleSuccessfullyFinished && !refundAllowed);\r\n\r\n        // Crowdsale successful\r\n        if (softCapReached) {\r\n            uint256 _crowdsaleAllocation = CROWDSALE_ALLOCATION; // 60% crowdsale\r\n            uint256 crowdsaleTokens = token.totalSupply();\r\n\r\n            uint256 tokensBounty = crowdsaleTokens.mul(varTokenAllocation[0]).div(_crowdsaleAllocation); // 5% Bounty\r\n            uint256 tokensAdvisors = crowdsaleTokens.mul(varTokenAllocation[1]).div(_crowdsaleAllocation); // 5% Advisors\r\n            uint256 tokensPlatform = crowdsaleTokens.mul(varTokenAllocation[2]).div(_crowdsaleAllocation); // 10% Platform\r\n\r\n            vestedAdvisors = tokensAdvisors;\r\n\r\n            // 20% Team\r\n            uint256 tokensTeam = 0;\r\n            uint len = teamTokenAllocation.length;\r\n            uint amount = 0;\r\n            for (uint i = 0; i < len; i++) {\r\n                amount = crowdsaleTokens.mul(teamTokenAllocation[i]).div(_crowdsaleAllocation);\r\n                vestedTeam[i] = amount;\r\n                tokensTeam = tokensTeam.add(amount);\r\n            }\r\n\r\n            token.mint(walletBountyAndAdvisors, tokensBounty);\r\n            token.mint(walletPlatform, tokensPlatform);\r\n\r\n            token.mint(this, tokensAdvisors);\r\n            token.mint(this, tokensTeam);\r\n\r\n            token.endMinting(true);\r\n            saleSuccessfullyFinished = true;\r\n            Finalized(true);\r\n            return true;\r\n        } else {\r\n            refundAllowed = true;\r\n            // Token contract gets destroyed\r\n            token.endMinting(false);\r\n            Finalized(false);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // @return user balance\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return token.balanceOf(_owner);\r\n    }\r\n\r\n    function hasStarted() public view returns (bool) {\r\n        return now >= startTime;\r\n    }\r\n\r\n    function hasEnded() public view returns (bool) {\r\n        return now >= endTime || fundsRaised >= HARD_CAP;\r\n    }\r\n\r\n    function validPurchase() internal view returns (bool) {\r\n        // Extended from 2 * 86400 to 200.000 seconds, since there's a 48 hour pause scheduled after phase 1\r\n        if(now <= (startTime + 200000) && msg.value < MIN_INVESTMENT_PHASE1) {\r\n            return false;\r\n        }\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool withinPurchaseLimits = msg.value >= MIN_INVESTMENT;\r\n        return withinPeriod && withinPurchaseLimits;\r\n    }\r\n\r\n    function finalizeCurrentStage() internal {\r\n        uint256 _stageIndex = activeStage;\r\n\r\n        if (_stageIndex == 0) {\r\n            softCapReached = true;\r\n            SoftCapReached();\r\n        } else if (_stageIndex == stageCaps.length - 1) {\r\n            hardCapReached = true;\r\n            HardCapReached();\r\n        }\r\n\r\n        StageClosed(_stageIndex + 1);\r\n    }\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract THToken is MintableToken {\r\n\r\n    string public constant name = \"Tradershub Token\";\r\n    string public constant symbol = \"THT\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    bool public transferAllowed = false;\r\n\r\n    event TransferAllowed(bool transferIsAllowed);\r\n\r\n    modifier canTransfer() {\r\n        require(mintingFinished && transferAllowed);\r\n        _;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) canTransfer public returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) canTransfer public returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function endMinting(bool _transferAllowed) onlyOwner canMint public returns (bool) {\r\n        if (!_transferAllowed) {\r\n            // Only ever called if the sale failed to reach soft cap\r\n            selfdestruct(msg.sender);\r\n            return true;\r\n        }\r\n        transferAllowed = _transferAllowed;\r\n        TransferAllowed(_transferAllowed);\r\n        return super.finishMinting();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"activateNextStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletBountyAndAdvisors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activeStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stageCaps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_INVESTMENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletCoreTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weiBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletPlatform\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_INVESTMENT_PHASE1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleSuccessfullyFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"varTokenAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAdvisorTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"addWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOFT_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stageTokenMul\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestedAdvisors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamTokenAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestedTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawCoreTeamTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CROWDSALE_ALLOCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contributors\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"addWhitelistBulk\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_walletCoreTeam\",\"type\":\"address\"},{\"name\":\"_walletPlatform\",\"type\":\"address\"},{\"name\":\"_walletBountyAndAdvisors\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SoftCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"HardCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"successfullyFinished\",\"type\":\"bool\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"StageOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"StageClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"THTokenSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a8edaf0000000000000000000000000cbe68025e4883430e53a1e59de0a556358f335f1000000000000000000000000ecf3fa1553b6f16bd63805433383cf5ce3ca995300000000000000000000000000b3f327c503d2d3ff79c88438aed27848c1691900000000000000000000000000cb16adfe143cadd5d7d86860b381d7d2fa54d7","Library":"","SwarmSource":"bzzr://4a9a6d2fb4c1af3ff6565fce8b8c722192ec8167fe1e45fd24a499e10aa5f049"}]}