{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20; // solhint-disable-line\r\n\r\n/// @title A standard interface for non-fungible tokens.\r\n/// @author Dieter Shirley <dete@axiomzen.co>\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n}\r\n\r\n/// @title ViralLo.vin, Creator token smart contract\r\n/// @author Sam Morris <hi@sam.viralo.vin>\r\ncontract ViralLovinCreatorToken is ERC721 {\r\n\r\n  /*** EVENTS ***/\r\n\r\n  /// @dev The Birth event is fired whenever a new Creator is created\r\n  event Birth(\r\n      uint256 tokenId, \r\n      string name, \r\n      address owner, \r\n      uint256 collectiblesOrdered\r\n    );\r\n\r\n  /// @dev The TokenSold event is fired whenever a token is sold.\r\n  event TokenSold(\r\n      uint256 tokenId, \r\n      uint256 oldPrice, \r\n      uint256 newPrice, \r\n      address prevOwner, \r\n      address winner, \r\n      string name, \r\n      uint256 collectiblesOrdered\r\n    );\r\n\r\n  /// @dev Transfer event as defined in current draft of ERC721. \r\n  ///  ownership is assigned, including births.\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n  /*** CONSTANTS ***/\r\n\r\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n  string public constant NAME = \"ViralLovin Creator Token\"; // solhint-disable-line\r\n  string public constant SYMBOL = \"CREATOR\"; // solhint-disable-line\r\n\r\n  uint256 private startingPrice = 0.001 ether;\r\n\r\n  /*** STORAGE ***/\r\n\r\n  /// @dev A mapping from Creator IDs to the address that owns them. \r\n  /// All Creators have some valid owner address.\r\n  mapping (uint256 => address) public creatorIndexToOwner;\r\n\r\n  /// @dev A mapping from owner address to count of tokens that address owns.\r\n  //  Used internally inside balanceOf() to resolve ownership count.\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  /// @dev A mapping from Creator IDs to an address that has been approved to call\r\n  ///  transferFrom(). Each Creator can only have one approved address for transfer\r\n  ///  at any time. A zero value means no approval is outstanding.\r\n  mapping (uint256 => address) public creatorIndexToApproved;\r\n\r\n  // @dev A mapping from creator IDs to the price of the token.\r\n  mapping (uint256 => uint256) private creatorIndexToPrice;\r\n\r\n  // The addresses that can execute actions within each roles.\r\n  address public ceoAddress;\r\n  address public cooAddress;\r\n\r\n  uint256 public creatorsCreatedCount;\r\n\r\n  /*** DATATYPES ***/\r\n  struct Creator {\r\n    string name;\r\n    uint256 collectiblesOrdered;\r\n  }\r\n\r\n  Creator[] private creators;\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n  \r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n\r\n  /// @dev Access modifier for COO-only functionality\r\n  modifier onlyCOO() {\r\n    require(msg.sender == cooAddress);\r\n    _;\r\n  }\r\n\r\n  /// Access modifier for contract owner only functionality\r\n  modifier onlyCLevel() {\r\n    require(\r\n      msg.sender == ceoAddress ||\r\n      msg.sender == cooAddress\r\n    );\r\n    _;\r\n  }\r\n\r\n  /*** CONSTRUCTOR ***/\r\n  \r\n  function ViralLovinCreatorToken() public {\r\n    ceoAddress = msg.sender;\r\n    cooAddress = msg.sender;\r\n  }\r\n\r\n  /*** PUBLIC FUNCTIONS ***/\r\n  \r\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to clear all approvals.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n    creatorIndexToApproved[_tokenId] = _to;\r\n    Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  /// @dev Creates a new Creator with the given name, price, and the total number of collectibles ordered then assigns to an address.\r\n  function createCreator(\r\n      address _owner, \r\n      string _name, \r\n      uint256 _price, \r\n      uint256 _collectiblesOrdered\r\n    ) public onlyCOO {\r\n    address creatorOwner = _owner;\r\n    if (creatorOwner == address(0)) {\r\n      creatorOwner = cooAddress;\r\n    }\r\n\r\n    if (_price <= 0) {\r\n      _price = startingPrice;\r\n    }\r\n\r\n    creatorsCreatedCount++;\r\n    _createCreator(_name, creatorOwner, _price, _collectiblesOrdered);\r\n    }\r\n\r\n  /// @notice Returns all the information about Creator token.\r\n  /// @param _tokenId The tokenId of the Creator token.\r\n  function getCreator(\r\n      uint256 _tokenId\r\n    ) public view returns (\r\n        string creatorName, \r\n        uint256 sellingPrice, \r\n        address owner, \r\n        uint256 collectiblesOrdered\r\n    ) {\r\n    Creator storage creator = creators[_tokenId];\r\n    creatorName = creator.name;\r\n    collectiblesOrdered = creator.collectiblesOrdered;\r\n    sellingPrice = creatorIndexToPrice[_tokenId];\r\n    owner = creatorIndexToOwner[_tokenId];\r\n  }\r\n\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /// @dev For ERC-721 compliance.\r\n  function name() public pure returns (string) {\r\n    return NAME;\r\n  }\r\n\r\n  /// For querying owner of a token\r\n  /// @param _tokenId The tokenID\r\n  /// @dev Required for ERC-721 compliance.\r\n  function ownerOf(uint256 _tokenId) public view returns (address owner)\r\n  {\r\n    owner = creatorIndexToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  /// For contract payout\r\n  function payout(address _to) public onlyCLevel {\r\n    require(_addressNotNull(_to));\r\n    _payout(_to);\r\n  }\r\n\r\n  /// Allows someone to obtain the token\r\n  function purchase(uint256 _tokenId) public payable {\r\n    address oldOwner = creatorIndexToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n    uint256 sellingPrice = creatorIndexToPrice[_tokenId];\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= sellingPrice);\r\n\r\n    // Transfer contract to new owner\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n    // Transfer payment to VL\r\n    ceoAddress.transfer(sellingPrice);\r\n\r\n    // Emits TokenSold event\r\n    TokenSold(\r\n        _tokenId, \r\n        sellingPrice, \r\n        creatorIndexToPrice[_tokenId], \r\n        oldOwner, \r\n        newOwner, \r\n        creators[_tokenId].name, \r\n        creators[_tokenId].collectiblesOrdered\r\n    );\r\n  }\r\n\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    return creatorIndexToPrice[_tokenId];\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n    ceoAddress = _newCEO;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n  /// @param _newCOO The address of the new COO\r\n  function setCOO(address _newCOO) public onlyCEO {\r\n    require(_newCOO != address(0));\r\n    cooAddress = _newCOO;\r\n  }\r\n\r\n  /// @dev For ERC-721 compliance.\r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  /// @notice Allow pre-approved user to take ownership of a token\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = creatorIndexToOwner[_tokenId];\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  /// @param _owner Creator tokens belonging to the owner.\r\n  /// @dev Expensive; not to be called by smart contract. Walks the collectibes array looking for Creator tokens belonging to owner.\r\n  function tokensOfOwner(\r\n      address _owner\r\n      ) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalCreators = totalSupply();\r\n      uint256 resultIndex = 0;\r\n      uint256 creatorId;\r\n      for (creatorId = 0; creatorId <= totalCreators; creatorId++) {\r\n        if (creatorIndexToOwner[creatorId] == _owner) {\r\n          result[resultIndex] = creatorId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /// For querying totalSupply of token\r\n  /// @dev Required for ERC-721 compliance.\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return creators.length;\r\n  }\r\n\r\n  /// Owner initates the transfer of the token to another account\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transfer(address _to, uint256 _tokenId) public {\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// Initiates transfer of token from address _from to address _to\r\n  /// @param _from The address for the token to be transferred from.\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  \r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// For checking approval of transfer for address _to\r\n  function _approved(\r\n      address _to, \r\n      uint256 _tokenId\r\n      ) private view returns (bool) {\r\n    return creatorIndexToApproved[_tokenId] == _to;\r\n  }\r\n\r\n  /// For creating a Creator\r\n  function _createCreator(\r\n      string _name, \r\n      address _owner, \r\n      uint256 _price, \r\n      uint256 _collectiblesOrdered\r\n      ) private {\r\n    Creator memory _creator = Creator({\r\n      name: _name,\r\n      collectiblesOrdered: _collectiblesOrdered\r\n    });\r\n    uint256 newCreatorId = creators.push(_creator) - 1;\r\n\r\n    require(newCreatorId == uint256(uint32(newCreatorId)));\r\n\r\n    Birth(newCreatorId, _name, _owner, _collectiblesOrdered);\r\n\r\n    creatorIndexToPrice[newCreatorId] = _price;\r\n\r\n    // This will assign ownership, and also emit the Transfer event as per ERC721 draft\r\n    _transfer(address(0), _owner, newCreatorId);\r\n  }\r\n\r\n  /// Check for token ownership\r\n  function _owns(\r\n      address claimant, \r\n      uint256 _tokenId\r\n      ) private view returns (bool) {\r\n    return claimant == creatorIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /// For paying out the full balance of contract\r\n  function _payout(address _to) private {\r\n    if (_to == address(0)) {\r\n      ceoAddress.transfer(this.balance);\r\n    } else {\r\n      _to.transfer(this.balance);\r\n    }\r\n  }\r\n\r\n  /// @dev Assigns ownership of Creator token to an address.\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    // increment owner token count\r\n    ownershipTokenCount[_to]++;\r\n    // transfer ownership\r\n    creatorIndexToOwner[_tokenId] = _to;\r\n\r\n    // When creating new creators _from is 0x0, we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership\r\n      delete creatorIndexToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorsCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creatorIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCreator\",\"outputs\":[{\"name\":\"creatorName\",\"type\":\"string\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"collectiblesOrdered\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_collectiblesOrdered\",\"type\":\"uint256\"}],\"name\":\"createCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creatorIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"collectiblesOrdered\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"collectiblesOrdered\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ViralLovinCreatorToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2b2dff92357ae5c914a00bd81845786f195cbb8758dbed6880070e19e4527f55"}]}