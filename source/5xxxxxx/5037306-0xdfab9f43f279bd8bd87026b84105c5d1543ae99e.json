{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n* A contract that pays off, if a user is able to produce a valid solution\r\n* for the Fermat's last theorem\r\n*/\r\n\r\ncontract Fermat {\r\n\r\n    /**\r\n    *  The owner is the creator of the contract.\r\n\r\n    *  The owner will be able to withdraw the\r\n    *  bounty after the releaseTime has passed.\r\n\r\n    *  The release time is set to 17280000 seconds (= 200 days)\r\n    *  in the future from the timestamp of the contract creation\r\n    */\r\n    address public owner = msg.sender;\r\n    uint releaseTime = now + 17280000;\r\n\r\n    /**\r\n    * This function is used to increase the bounty\r\n    */\r\n    function addBalance() public payable {\r\n\r\n    }\r\n\r\n    function getOwner() view public returns (address)  {\r\n        return owner;\r\n    }\r\n\r\n    /*\r\n    * Returns the time when it is possible for the owner\r\n    * to withdraw the deposited funds from the contract.\r\n    */\r\n    function getReleaseTime() view public returns (uint)  {\r\n        return releaseTime;\r\n    }\r\n\r\n    /**\r\n     * Allow the owner of the contract to\r\n     * withdraw the bounty after the release time has passed\r\n     */\r\n    function withdraw() public {\r\n        require(msg.sender == owner);\r\n        require(now >= releaseTime);\r\n\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n\r\n    function getBalance() view public returns (uint256) {\r\n        return this.balance;\r\n    }\r\n\r\n    /**\r\n     * The function that is used to claim the bounty.\r\n     * If the caller is able to provide satisfying values for a,b,c and n\r\n     * the balance of the contract (the bounty) is transferred to the caller\r\n    */\r\n    function claim(int256 a, int256 b, int256 c, int256 n) public {\r\n        uint256 value = solve(a, b, c, n);\r\n        if (value == 0) {\r\n            msg.sender.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /*\r\n     * The \"core\" logic of the smart contract.\r\n     * Calculates the equation with provided values for Fermat's last theorem.\r\n     * Returns the value of a^n + b^n - c^n, n > 2\r\n     */\r\n    function solve(int256 a, int256 b, int256 c, int256 n) pure public returns (uint256) {\r\n        assert(n > 2);\r\n        assert(a > 0);\r\n        assert(b > 0);\r\n        assert(c > 0);\r\n        uint256 aExp = power(a, n);\r\n        uint256 bExp = power(b, n);\r\n        uint256 cExp = power(c, n);\r\n\r\n        uint256 sum = add(aExp, bExp);\r\n        uint256 difference = sub(sum, cExp);\r\n        return difference;\r\n    }\r\n\r\n    /*\r\n     A safe way to handle exponentiation. Throws error on overflow.\r\n    */\r\n    function power(int256 a, int256 pow)  pure public returns (uint256) {\r\n        assert(a >= 0);\r\n        assert(pow >= 0);\r\n        int256 result = 1;\r\n        if(a == 0) {\r\n            return 1;\r\n        }\r\n        for (int256 i = 0; i < pow; i++) {\r\n            result = result * a;\r\n            assert(result >= a);\r\n        }\r\n        return uint256(result);\r\n    }\r\n\r\n    /*\r\n     A safe way to handle addition. Throws error on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /*\r\n     A safe way to handle subtraction. Throws error on underflow.\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"int256\"},{\"name\":\"b\",\"type\":\"int256\"},{\"name\":\"c\",\"type\":\"int256\"},{\"name\":\"n\",\"type\":\"int256\"}],\"name\":\"solve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"int256\"},{\"name\":\"pow\",\"type\":\"int256\"}],\"name\":\"power\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"int256\"},{\"name\":\"b\",\"type\":\"int256\"},{\"name\":\"c\",\"type\":\"int256\"},{\"name\":\"n\",\"type\":\"int256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Fermat","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://aabd3a800789db5b4ddf333d4ca584c918603e6b2ace209a92a5a19f6b74a3fd"}]}