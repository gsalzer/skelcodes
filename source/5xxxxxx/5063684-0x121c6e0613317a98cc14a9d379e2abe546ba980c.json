{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Multiownable {\r\n\r\n    // VARIABLES\r\n\r\n    uint256 public howManyOwnersDecide;\r\n    address[] public owners;\r\n    bytes32[] public allOperations;\r\n    address insideOnlyManyOwners;\r\n    \r\n    // Reverse lookup tables for owners and allOperations\r\n    mapping(address => uint) ownersIndices; // Starts from 1\r\n    mapping(bytes32 => uint) allOperationsIndicies;\r\n    \r\n    // Owners voting mask per operations\r\n    mapping(bytes32 => uint256) public votesMaskByOperation;\r\n    mapping(bytes32 => uint256) public votesCountByOperation;\r\n    \r\n    // EVENTS\r\n\r\n    event OwnershipTransferred(address[] previousOwners, address[] newOwners);\r\n\r\n    // ACCESSORS\r\n\r\n    function isOwner(address wallet) public constant returns(bool) {\r\n        return ownersIndices[wallet] > 0;\r\n    }\r\n\r\n    function ownersCount() public constant returns(uint) {\r\n        return owners.length;\r\n    }\r\n\r\n    function allOperationsCount() public constant returns(uint) {\r\n        return allOperations.length;\r\n    }\r\n\r\n    // MODIFIERS\r\n\r\n    /**\r\n    * @dev Allows to perform method by any of the owners\r\n    */\r\n    modifier onlyAnyOwner {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to perform method only after all owners call it with the same arguments\r\n    */\r\n    modifier onlyManyOwners {\r\n        if (insideOnlyManyOwners == msg.sender) {\r\n            _;\r\n            return;\r\n        }\r\n        require(isOwner(msg.sender));\r\n\r\n        uint ownerIndex = ownersIndices[msg.sender] - 1;\r\n        bytes32 operation = keccak256(msg.data);\r\n        \r\n        if (votesMaskByOperation[operation] == 0) {\r\n            allOperationsIndicies[operation] = allOperations.length;\r\n            allOperations.push(operation);\r\n        }\r\n        require((votesMaskByOperation[operation] & (2 ** ownerIndex)) == 0);\r\n        votesMaskByOperation[operation] |= (2 ** ownerIndex);\r\n        votesCountByOperation[operation] += 1;\r\n\r\n        // If all owners confirm same operation\r\n        if (votesCountByOperation[operation] == howManyOwnersDecide) {\r\n            deleteOperation(operation);\r\n            insideOnlyManyOwners = msg.sender;\r\n            _;\r\n            insideOnlyManyOwners = address(0);\r\n        }\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n\r\n    function Multiownable() public {\r\n        owners.push(msg.sender);\r\n        ownersIndices[msg.sender] = 1;\r\n        howManyOwnersDecide = 1;\r\n    }\r\n\r\n    // INTERNAL METHODS\r\n\r\n    /**\r\n    * @dev Used to delete cancelled or performed operation\r\n    * @param operation defines which operation to delete\r\n    */\r\n    function deleteOperation(bytes32 operation) internal {\r\n        uint index = allOperationsIndicies[operation];\r\n        if (allOperations.length > 1) {\r\n            allOperations[index] = allOperations[allOperations.length - 1];\r\n            allOperationsIndicies[allOperations[index]] = index;\r\n        }\r\n        allOperations.length--;\r\n        \r\n        delete votesMaskByOperation[operation];\r\n        delete votesCountByOperation[operation];\r\n        delete allOperationsIndicies[operation];\r\n    }\r\n\r\n    // PUBLIC METHODS\r\n\r\n    /**\r\n    * @dev Allows owners to change their mind by cacnelling votesMaskByOperation operations\r\n    * @param operation defines which operation to delete\r\n    */\r\n    function cancelPending(bytes32 operation) public onlyAnyOwner {\r\n        uint ownerIndex = ownersIndices[msg.sender] - 1;\r\n        require((votesMaskByOperation[operation] & (2 ** ownerIndex)) != 0);\r\n        \r\n        votesMaskByOperation[operation] &= ~(2 ** ownerIndex);\r\n        votesCountByOperation[operation]--;\r\n        if (votesCountByOperation[operation] == 0) {\r\n            deleteOperation(operation);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Allows owners to change ownership\r\n    * @param newOwners defines array of addresses of new owners\r\n    */\r\n    function transferOwnership(address[] newOwners) public {\r\n        transferOwnershipWithHowMany(newOwners, newOwners.length);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows owners to change ownership\r\n    * @param newOwners defines array of addresses of new owners\r\n    * @param newHowManyOwnersDecide defines how many owners can decide\r\n    */\r\n    function transferOwnershipWithHowMany(address[] newOwners, uint256 newHowManyOwnersDecide) public onlyManyOwners {\r\n        require(newOwners.length > 0);\r\n        require(newOwners.length <= 256);\r\n        require(newHowManyOwnersDecide > 0);\r\n        require(newHowManyOwnersDecide <= newOwners.length);\r\n        for (uint i = 0; i < newOwners.length; i++) {\r\n            require(newOwners[i] != address(0));\r\n        }\r\n\r\n        OwnershipTransferred(owners, newOwners);\r\n\r\n        // Reset owners array and index reverse lookup table\r\n        for (i = 0; i < owners.length; i++) {\r\n            delete ownersIndices[owners[i]];\r\n        }\r\n        for (i = 0; i < newOwners.length; i++) {\r\n            require(ownersIndices[newOwners[i]] == 0);\r\n            ownersIndices[newOwners[i]] = i + 1;\r\n        }\r\n        owners = newOwners;\r\n        howManyOwnersDecide = newHowManyOwnersDecide;\r\n\r\n        // Discard all pendign operations\r\n        for (i = 0; i < allOperations.length; i++) {\r\n            delete votesMaskByOperation[allOperations[i]];\r\n            delete votesCountByOperation[allOperations[i]];\r\n            delete allOperationsIndicies[allOperations[i]];\r\n        }\r\n        allOperations.length = 0;\r\n    }\r\n\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract PELOExtensionInterface is owned {\r\n\r\n    event ExtensionCalled(bytes32[8] params);\r\n\r\n    address public ownerContract;\r\n\r\n    function PELOExtensionInterface(address _ownerContract) public {\r\n        ownerContract = _ownerContract;\r\n    }\r\n    \r\n    function ChangeOwnerContract(address _ownerContract) onlyOwner public {\r\n        ownerContract = _ownerContract;\r\n    }\r\n    \r\n    function Operation(uint8 opCode, bytes32[8] params) public returns (bytes32[8] result) {}\r\n}\r\n\r\ncontract PELOExtension1 is PELOExtensionInterface {\r\n\r\n    function PELOExtension1(address _ownerContract) PELOExtensionInterface(_ownerContract) public {} \r\n    \r\n    function Operation(uint8 opCode, bytes32[8] params) public returns (bytes32[8] result) {\r\n        if(opCode == 1) {\r\n            ExtensionCalled(params);\r\n            return result;\r\n        }\r\n        else if(opCode == 2) {\r\n            ExtensionCalled(params);\r\n            return result;\r\n        }\r\n        else {\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract TokenERC20 {\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function TokenERC20(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n/******************************************/\r\n/*       ADVANCED TOKEN STARTS HERE       */\r\n/******************************************/\r\n\r\ncontract PELOCoinToken is Multiownable, TokenERC20 {\r\n\r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n    \r\n    bool public userInitialized = false;\r\n    \r\n    PELOExtensionInterface public peloExtenstion;\r\n    \r\n    struct PELOMember {\r\n        uint32 id;\r\n        bytes32 nickname;\r\n        address ethAddr;\r\n\r\n        /* peloAmount should be specified without decimals. ex: 10000PELO should be specified as 10000 not 10000 * 10^18 */\r\n        uint peloAmount;\r\n\r\n        /* peloBonus should be specified without decimals. ex: 10000PELO should be specified as 10000 not 10000 * 10^18 */\r\n        uint peloBonus;\r\n\r\n        /* 1: infinite members, 2: limited member(has expairation date), 4: xxx, 8: xxx, 16: xxx, 32 ... 65536 ... 2^255 */\r\n        uint bitFlag;\r\n\r\n        uint32 expire;\r\n        bytes32 extraData1;\r\n        bytes32 extraData2;\r\n        bytes32 extraData3;\r\n    }\r\n    \r\n    uint8 public numMembers;\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    mapping (address => PELOMember) public PELOMemberMap;\r\n    mapping (uint32 => address) public PELOMemberIDMap;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function PELOCoinToken(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\r\n\r\n    function GetUserNickName(address _addr) constant public returns(bytes32) {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n        PELOMember memory data = PELOMemberMap[_addr]; \r\n        \r\n        return data.nickname;\r\n    }\r\n\r\n    function GetUserID(address _addr) constant public returns(uint32) {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n        PELOMember memory data = PELOMemberMap[_addr]; \r\n        \r\n        return data.id;\r\n    }\r\n\r\n    function GetUserPELOAmount(address _addr) constant public returns(uint) {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n        PELOMember memory data = PELOMemberMap[_addr]; \r\n        \r\n        return data.peloAmount;\r\n    }\r\n\r\n    function GetUserPELOBonus(address _addr) constant public returns(uint) {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n        PELOMember memory data = PELOMemberMap[_addr]; \r\n        \r\n        return data.peloBonus;\r\n    }\r\n\r\n    function GetUserBitFlag(address _addr) constant public returns(uint) {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n        PELOMember memory data = PELOMemberMap[_addr]; \r\n        \r\n        return data.bitFlag;\r\n    }\r\n\r\n    function TestUserBitFlag(address _addr, uint _flag) constant public returns(bool) {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n        PELOMember memory data = PELOMemberMap[_addr]; \r\n        \r\n        return (data.bitFlag & _flag) == _flag;\r\n    }\r\n    \r\n    function GetUserExpire(address _addr) constant public returns(uint32) {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n        PELOMember memory data = PELOMemberMap[_addr]; \r\n        \r\n        return data.expire;\r\n    }\r\n    \r\n    function GetUserExtraData1(address _addr) constant public returns(bytes32) {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n        PELOMember memory data = PELOMemberMap[_addr]; \r\n        \r\n        return data.extraData1;\r\n    }\r\n    \r\n    function GetUserExtraData2(address _addr) constant public returns(bytes32) {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n        PELOMember memory data = PELOMemberMap[_addr]; \r\n        \r\n        return data.extraData2;\r\n    }\r\n    \r\n    function GetUserExtraData3(address _addr) constant public returns(bytes32) {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n        PELOMember memory data = PELOMemberMap[_addr]; \r\n        \r\n        return data.extraData3;\r\n    }\r\n\r\n    function UpdateUserNickName(address _addr, bytes32 _newNickName) onlyManyOwners public {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n        PELOMember storage data = PELOMemberMap[_addr]; \r\n        \r\n        data.nickname = _newNickName;\r\n    }\r\n\r\n    function UpdateUserPELOAmount(address _addr, uint _newValue) onlyManyOwners public {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n        PELOMember storage data = PELOMemberMap[_addr]; \r\n        \r\n        data.peloAmount = _newValue;\r\n    }\r\n\r\n    function UpdateUserPELOBonus(address _addr, uint _newValue) onlyManyOwners public {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n        PELOMember storage data = PELOMemberMap[_addr]; \r\n        \r\n        data.peloBonus = _newValue;\r\n    }\r\n\r\n    function UpdateUserBitFlag(address _addr, uint _newValue) onlyManyOwners public {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n        PELOMember storage data = PELOMemberMap[_addr]; \r\n        \r\n        data.bitFlag = _newValue;\r\n    }\r\n\r\n    function UpdateUserExpire(address _addr, uint32 _newValue) onlyManyOwners public {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n        PELOMember storage data = PELOMemberMap[_addr]; \r\n        \r\n        data.expire = _newValue;\r\n    }\r\n\r\n    function UpdateUserExtraData1(address _addr, bytes32 _newValue) onlyManyOwners public {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n        PELOMember storage data = PELOMemberMap[_addr]; \r\n        \r\n        data.extraData1 = _newValue;\r\n    }\r\n\r\n    function UpdateUserExtraData2(address _addr, bytes32 _newValue) onlyManyOwners public {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n        PELOMember storage data = PELOMemberMap[_addr]; \r\n        \r\n        data.extraData2 = _newValue;\r\n    }\r\n\r\n    function UpdateUserExtraData3(address _addr, bytes32 _newValue) onlyManyOwners public {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n        PELOMember storage data = PELOMemberMap[_addr]; \r\n        \r\n        data.extraData3 = _newValue;\r\n    }\r\n\r\n    function DeleteUserByAddr(address _addr) onlyManyOwners public {\r\n        require(PELOMemberMap[_addr].id > 0);\r\n\r\n        delete PELOMemberIDMap[PELOMemberMap[_addr].id];\r\n        delete PELOMemberMap[_addr];\r\n\r\n        numMembers--;\r\n        assert(numMembers >= 0);\r\n    }\r\n\r\n    function DeleteUserByID(uint32 _id) onlyManyOwners public {\r\n        require(PELOMemberIDMap[_id] != 0x0);\r\n        address addr = PELOMemberIDMap[_id];\r\n        require(PELOMemberMap[addr].id > 0);\r\n\r\n        delete PELOMemberMap[addr];\r\n        delete PELOMemberIDMap[_id];\r\n        \r\n        numMembers--;\r\n        assert(numMembers >= 0);\r\n    }\r\n\r\n    function initializeUsers() onlyManyOwners public {\r\n        if(!userInitialized) {\r\n\r\n            userInitialized = true;\r\n        }\r\n    }\r\n            \r\n    function insertNewUser(uint32 _id, bytes32 _nickname, address _ethAddr, uint _peloAmount, uint _peloBonus, uint _bitFlag, uint32 _expire, bool fWithTransfer) onlyManyOwners public {\r\n\r\n        PELOMember memory data; \r\n\r\n        require(_id > 0);\r\n        require(PELOMemberMap[_ethAddr].id == 0);\r\n        require(PELOMemberIDMap[_id] == 0x0);\r\n\r\n        data.id = _id;\r\n        data.nickname = _nickname;\r\n        data.ethAddr = _ethAddr;\r\n        data.peloAmount = _peloAmount;\r\n        data.peloBonus = _peloBonus;\r\n        data.bitFlag = _bitFlag;\r\n        data.expire = _expire;\r\n\r\n        PELOMemberMap[_ethAddr] = data;\r\n        PELOMemberIDMap[_id] = _ethAddr;\r\n        \r\n        if(fWithTransfer) {\r\n            require(_peloAmount > 0);\r\n            uint256 amount = (_peloAmount + _peloBonus) * 10 ** uint256(decimals);\r\n            _transfer(msg.sender, _ethAddr, amount);\r\n            \r\n            assert(balanceOf[_ethAddr] == amount);\r\n        }\r\n        numMembers++;\r\n    }\r\n    \r\n    function updatePeloExtenstionContract(PELOExtensionInterface _peloExtension) onlyManyOwners public {\r\n        peloExtenstion = _peloExtension;\r\n    }\r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balanceOf[_from] >= _value);                // Check if the sender has enough\r\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\r\n        if(peloExtenstion != PELOExtensionInterface(0x0))\r\n            peloExtenstion.Operation(1, [bytes32(_from), bytes32(_to), bytes32(_value), bytes32(balanceOf[_from]), bytes32(balanceOf[_to]), bytes32(0), bytes32(0), bytes32(0)]);\r\n        \r\n        balanceOf[_from] -= _value;                         // Subtract from the sender\r\n        balanceOf[_to] += _value;                           // Add the same to the recipient\r\n        Transfer(_from, _to, _value);\r\n\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n        \r\n        if(peloExtenstion != PELOExtensionInterface(0x0))\r\n            peloExtenstion.Operation(2, [bytes32(_from), bytes32(_to), bytes32(_value), bytes32(balanceOf[_from]), bytes32(balanceOf[_to]), bytes32(0), bytes32(0), bytes32(0)]);\r\n    }\r\n\r\n    /// @notice Create `mintedAmount` tokens and send it to `target`\r\n    /// @param target Address to receive the tokens\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n    function mintToken(address target, uint256 mintedAmount) onlyManyOwners public {\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        Transfer(0, this, mintedAmount);\r\n        Transfer(this, target, mintedAmount);\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    function freezeAccount(address target, bool freeze) onlyManyOwners public {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n    \r\n    /**\r\n     * Transfer tokens from other address forcibly(for dealing with illegal usage, etc)\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFromForcibly(address _from, address _to, uint256 _value) onlyManyOwners public returns (bool success) {\r\n\r\n        if(allowance[_from][msg.sender] > _value)\r\n            allowance[_from][msg.sender] -= _value;\r\n        else \r\n            allowance[_from][msg.sender] = 0;\r\n\r\n        assert(allowance[_from][msg.sender] >= 0);\r\n\r\n        _transfer(_from, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Transfer all the tokens from other address forcibly(for dealing with illegal usage, etc)\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     */\r\n    function transferAllFromForcibly(address _from, address _to) onlyManyOwners public returns (bool success) {\r\n\r\n        uint256 _value = balanceOf[_from];\r\n        require (_value >= 0);\r\n        return transferFromForcibly(_from, _to, _value);\r\n    }     \r\n\r\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\r\n    /// @param newSellPrice Price the users can sell to the contract\r\n    /// @param newBuyPrice Price users can buy from the contract\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyManyOwners public {\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n\r\n    /// @notice Buy tokens from contract by sending ether\r\n    function buy() payable public {\r\n        uint amount = msg.value / buyPrice;               // calculates the amount\r\n        _transfer(this, msg.sender, amount);              // makes the transfers\r\n    }\r\n\r\n    /// @notice Sell `amount` tokens to contract\r\n    /// @param amount amount of tokens to be sold\r\n    function sell(uint256 amount) public {\r\n        require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\r\n        _transfer(msg.sender, this, amount);              // makes the transfers\r\n        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_newValue\",\"type\":\"bytes32\"}],\"name\":\"UpdateUserExtraData3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwners\",\"type\":\"address[]\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_newValue\",\"type\":\"bytes32\"}],\"name\":\"UpdateUserExtraData2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allOperationsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"PELOMemberMap\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint32\"},{\"name\":\"nickname\",\"type\":\"bytes32\"},{\"name\":\"ethAddr\",\"type\":\"address\"},{\"name\":\"peloAmount\",\"type\":\"uint256\"},{\"name\":\"peloBonus\",\"type\":\"uint256\"},{\"name\":\"bitFlag\",\"type\":\"uint256\"},{\"name\":\"expire\",\"type\":\"uint32\"},{\"name\":\"extraData1\",\"type\":\"bytes32\"},{\"name\":\"extraData2\",\"type\":\"bytes32\"},{\"name\":\"extraData3\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"howManyOwnersDecide\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferAllFromForcibly\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"GetUserExpire\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allOperations\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initializeUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votesMaskByOperation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateUserBitFlag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"DeleteUserByID\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"GetUserNickName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"GetUserExtraData2\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"DeleteUserByAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_newNickName\",\"type\":\"bytes32\"}],\"name\":\"UpdateUserNickName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operation\",\"type\":\"bytes32\"}],\"name\":\"cancelPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votesCountByOperation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"GetUserExtraData3\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_newValue\",\"type\":\"uint32\"}],\"name\":\"UpdateUserExpire\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"},{\"name\":\"_nickname\",\"type\":\"bytes32\"},{\"name\":\"_ethAddr\",\"type\":\"address\"},{\"name\":\"_peloAmount\",\"type\":\"uint256\"},{\"name\":\"_peloBonus\",\"type\":\"uint256\"},{\"name\":\"_bitFlag\",\"type\":\"uint256\"},{\"name\":\"_expire\",\"type\":\"uint32\"},{\"name\":\"fWithTransfer\",\"type\":\"bool\"}],\"name\":\"insertNewUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"PELOMemberIDMap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"GetUserBitFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"GetUserPELOBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromForcibly\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"GetUserPELOAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"GetUserID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_flag\",\"type\":\"uint256\"}],\"name\":\"TestUserBitFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"GetUserExtraData1\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateUserPELOAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwners\",\"type\":\"address[]\"},{\"name\":\"newHowManyOwnersDecide\",\"type\":\"uint256\"}],\"name\":\"transferOwnershipWithHowMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_newValue\",\"type\":\"bytes32\"}],\"name\":\"UpdateUserExtraData1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_peloExtension\",\"type\":\"address\"}],\"name\":\"updatePeloExtenstionContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateUserPELOBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"peloExtenstion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwners\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"newOwners\",\"type\":\"address[]\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PELOCoinToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000c845880000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000950454c4f20436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000450454c4f00000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://62fbd8c381bb81890396f0aebea60d11cbad9fc9f87f6600d6590023a3129c56"}]}