{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Ownable{\r\n    address public owner;\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract CryptoChamps is Ownable{\r\n    \r\n    struct Person {\r\n        uint32 id;\r\n        string name;\r\n        uint16 txCount;\r\n        bool discounted;\r\n    }\r\n    \r\n    event Birth(uint32 _id, uint _startingPrice);\r\n    event Discount(uint32 _id, uint _newPrice);\r\n    event Purchase(uint32 indexed _id, address indexed _by, address indexed _from, uint _price, uint _nextPrice);\r\n    event Transfer(address indexed _from, address indexed _to, uint32 _id);\r\n    \r\n    uint public totalSupply = 0;\r\n    string public name = \"CryptoChamps\";\r\n    string public symbol = \"CCH\";\r\n    address store;\r\n    mapping (uint32 => Person) private people;\r\n    mapping (uint32 => address) private personToOwner;\r\n    mapping (uint32 => uint256) public personToPrice;\r\n    mapping (uint32 => uint256) public personToOldPrice;\r\n    mapping (address => uint) private noOfPersonsOwned;\r\n    mapping (address => bool) private isUserAdded;\r\n    \r\n    address[] private users;\r\n    \r\n    uint8 BELOW_FIVE = 200;\r\n    uint8 BELOW_TEN = 150;\r\n    uint8 BELOW_FIFTEEN = 130;\r\n    uint8 BELOW_TWENTY = 120;\r\n    uint8 TWENTY_ABOVE = 110;\r\n    \r\n    function CryptoChamps() public{\r\n        store = msg.sender;\r\n    }\r\n    \r\n    function createPerson (uint32 _id, string _name, uint256 _startingPrice) external onlyOwner {\r\n        require(people[_id].id == 0);\r\n        Person memory person = Person(_id, _name, 0, false);\r\n        people[_id] = person;\r\n        personToOwner[_id] = owner;\r\n        personToPrice[_id] = _startingPrice;\r\n        totalSupply++;\r\n        Birth(_id, _startingPrice);\r\n    }\r\n    \r\n    function getPerson(uint32 _id) external view returns (string, uint256, uint256) {\r\n       Person memory person = people[_id];\r\n       require(person.id != 0);\r\n       return (person.name, personToPrice[_id], person.txCount);\r\n    }\r\n    \r\n    function purchase(uint32 _id) payable public{\r\n        uint price = personToPrice[_id] ;\r\n        address personOwner = personToOwner[_id];\r\n        \r\n        require(msg.sender != 0x0);\r\n        require(msg.sender != personOwner);\r\n        require(price <= msg.value);\r\n        \r\n        \r\n        Person storage person = people[_id];\r\n        \r\n        if(price < msg.value){\r\n            msg.sender.transfer(msg.value - price);\r\n        }\r\n        \r\n        _handlePurchase(person, personOwner, price);\r\n        uint newPrice = _onPersonSale(person);\r\n        \r\n        if(!isUserAdded[msg.sender]){\r\n            users.push(msg.sender);\r\n            isUserAdded[msg.sender] = true;\r\n        }\r\n        \r\n        Purchase(_id, msg.sender, personOwner, price, newPrice);\r\n    }\r\n    \r\n    function discount(uint32 _id, uint _newPrice) external ownsPerson(_id) returns (bool){\r\n        uint price = personToPrice[_id];\r\n        require(price > _newPrice);\r\n        \r\n        Person storage person = people[_id];\r\n        person.discounted = true;\r\n        \r\n        personToPrice[_id] = _newPrice;\r\n        \r\n        Discount(_id, _newPrice);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function _handlePurchase(Person storage _person, address _owner, uint _price) internal {\r\n        uint oldPrice = personToOldPrice[_person.id];\r\n        \r\n        if(_person.discounted){\r\n            _shareDiscountPrice(_price, _owner);\r\n        }else{\r\n            _shareProfit(_price, oldPrice, _owner);\r\n        }\r\n        \r\n        personToOwner[_person.id] = msg.sender;\r\n        \r\n        noOfPersonsOwned[_owner]--;\r\n        noOfPersonsOwned[msg.sender]++;\r\n    }\r\n    \r\n    function _shareDiscountPrice(uint _price, address _target) internal {\r\n        uint commision = _price * 10 / 100;\r\n        \r\n        _target.transfer(_price - commision);\r\n        \r\n        owner.transfer(commision);\r\n    }\r\n    \r\n    function _shareProfit(uint _price, uint _oldPrice, address _target) internal {\r\n        uint profit = _price - _oldPrice;\r\n        \r\n        uint commision = profit * 30 / 100;\r\n        \r\n        _target.transfer(_price - commision);\r\n        \r\n        owner.transfer(commision);\r\n    }\r\n    \r\n    function _onPersonSale(Person storage _person) internal returns (uint) {\r\n        uint currentPrice = personToPrice[_person.id];\r\n        uint percent = 0;\r\n        \r\n        if(currentPrice >= 6.25 ether){\r\n            percent = TWENTY_ABOVE;\r\n        }else if(currentPrice >= 2.5 ether){\r\n            percent = BELOW_TWENTY;\r\n        }else if(currentPrice >=  1 ether){\r\n            percent = BELOW_FIFTEEN;\r\n        }else if(currentPrice >= 0.1 ether){\r\n            percent = BELOW_TEN;\r\n        }else{\r\n            percent = BELOW_FIVE;\r\n        }\r\n        \r\n        personToOldPrice[_person.id] = currentPrice;\r\n        uint newPrice = _approx((currentPrice * percent) / 100);\r\n        personToPrice[_person.id] = newPrice;\r\n        \r\n        _person.txCount++;\r\n        if(_person.discounted){\r\n            _person.discounted = false;\r\n        }\r\n        \r\n        return newPrice;\r\n    }\r\n    \r\n    function _approx(uint _price) internal pure returns (uint){\r\n        uint product = _price / 10 ** 14;\r\n        return product * 10 ** 14;\r\n    }\r\n    \r\n    function transfer(address _to, uint32 _id) external ownsPerson(_id){\r\n        personToOwner[_id] = _to;\r\n        noOfPersonsOwned[_to]++;\r\n        noOfPersonsOwned[msg.sender]--;\r\n        Transfer(msg.sender, _to, _id);\r\n    }\r\n    \r\n    function ownerOf(uint32 _id) external view returns (address) {\r\n        return personToOwner[_id];\r\n    }\r\n    \r\n    function priceOf(uint32 _id) external view returns (uint256) {\r\n        return personToPrice[_id];\r\n    }\r\n    \r\n    function balanceOf(address _owner) external view returns (uint){\r\n        return noOfPersonsOwned[_owner];\r\n    }\r\n    \r\n    function getStore() external view onlyOwner returns (address){\r\n        return store;\r\n    }\r\n    \r\n    function setStore(address _store) external onlyOwner returns (bool) {\r\n        require(_store != 0);\r\n        store = _store;\r\n        return true;\r\n    }\r\n    \r\n    function getUsers() external view returns (address[]) {\r\n        return users;\r\n    }\r\n    \r\n    function withdraw() external onlyOwner returns (bool){\r\n        owner.transfer(this.balance);\r\n        return true;\r\n    }\r\n    \r\n    modifier ownsPerson(uint32 _id){\r\n        require(personToOwner[_id] == msg.sender);\r\n        _;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStore\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"},{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"discount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"}],\"name\":\"createPerson\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getPerson\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"personToPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"personToOldPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_startingPrice\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"Discount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CryptoChamps","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ddd93dc7641706a5db9ab52dcc4ce848ae28ea556a834ce5ba8f581aede31bb9"}]}