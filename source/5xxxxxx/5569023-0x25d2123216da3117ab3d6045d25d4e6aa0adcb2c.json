{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\ncontract IcoData{\r\n/////////////////////////////////////////////////////////    \r\n///////(c)2017 tokenchanger.io -all rights reserved////// \r\n \r\n/*SUPER ADMINS*/\r\naddress Mars = 0x1947f347B6ECf1C3D7e1A58E3CDB2A15639D48Be;\r\naddress Mercury = 0x00795263bdca13104309Db70c11E8404f81576BE;\r\naddress Europa = 0x00e4E3eac5b520BCa1030709a5f6f3dC8B9e1C37;\r\naddress Jupiter = 0x2C76F260707672e240DC639e5C9C62efAfB59867;\r\naddress Neptune = 0xEB04E1545a488A5018d2b5844F564135211d3696;\r\n\r\n/*CONTRACT ADDRESS*/\r\nfunction GetContractAddr() public constant returns (address){\r\nreturn this;\r\n}\t\r\naddress ContractAddr = GetContractAddr();\r\n\r\nstruct State{\r\nbool PrivateSale;\r\nbool PreSale;\r\nbool MainSale; \r\nbool End;\r\n}\r\n\r\nstruct Market{\r\nuint256 EtherPrice;    \r\nuint256 TocPrice;    \r\nuint256 Commission;    \r\n} \r\n\r\nstruct Admin{\r\nbool Authorised; \r\nuint256 Level;\r\n}\r\n\r\n/*contract state*/\r\nmapping (address => State) public state;\r\n/*market storage*/\r\nmapping (address => Market) public market;\r\n/*authorised admins*/\r\nmapping (address => Admin) public admin;\r\n\r\n/*AUTHORISE ADMIN*/\r\nfunction AuthAdmin(address _admin, bool _authority, uint256 _level) external \r\nreturns(bool) {\r\nif((msg.sender != Mars) && (msg.sender != Mercury) && (msg.sender != Europa)\r\n&& (msg.sender != Jupiter) && (msg.sender != Neptune)) revert();  \r\nadmin[_admin].Authorised = _authority; \r\nadmin[_admin].Level = _level;\r\nreturn true;\r\n} \r\n\r\n/*GENERAL PRICE UPDATE*/\r\nfunction GeneralUpdate(uint256 _etherprice, uint256 _tocprice, uint256 _commission) \r\nexternal returns(bool){\r\n/*integrity checks*/    \r\nif(admin[msg.sender].Authorised == false) revert();\r\nif(admin[msg.sender].Level < 5 ) revert();\r\n/*update market record*/\r\nmarket[ContractAddr].EtherPrice = _etherprice; \r\nmarket[ContractAddr].TocPrice = _tocprice;\r\nmarket[ContractAddr].Commission = _commission;\r\nreturn true;\r\n}\r\n\r\n/*UPDATE ETHER PRICE*/\r\nfunction EtherPriceUpdate(uint256 _etherprice)external returns(bool){\r\n/*integrity checks*/    \r\nif(admin[msg.sender].Authorised == false) revert();\r\nif(admin[msg.sender].Level < 5 ) revert();\r\n/*update market record*/\r\nmarket[ContractAddr].EtherPrice = _etherprice; \r\nreturn true;\r\n}\r\n\r\n/*UPDATE STATE*/\r\nfunction UpdateState(uint256 _state) external returns(bool){\r\n/*integrity checks*/    \r\nif(admin[msg.sender].Authorised == false) revert();\r\nif(admin[msg.sender].Level < 5 ) revert();\r\n/*private sale state*/\r\nif(_state == 1){\r\nstate[ContractAddr].PrivateSale = true; \r\nstate[ContractAddr].PreSale = false;\r\nstate[ContractAddr].MainSale = false;\r\nstate[ContractAddr].End = false;\r\n}\r\n/*presale state*/\r\nif(_state == 2){\r\nstate[ContractAddr].PrivateSale = false; \r\nstate[ContractAddr].PreSale = true;\r\nstate[ContractAddr].MainSale = false;\r\nstate[ContractAddr].End = false;\r\n}\r\n/*main sale state*/\r\nif(_state == 3){\r\nstate[ContractAddr].PrivateSale = false; \r\nstate[ContractAddr].PreSale = false;\r\nstate[ContractAddr].MainSale = true;\r\nstate[ContractAddr].End = false;\r\n}\r\n/*end state*/\r\nif(_state == 4){\r\nstate[ContractAddr].PrivateSale = false; \r\nstate[ContractAddr].PreSale = false;\r\nstate[ContractAddr].MainSale = false;\r\nstate[ContractAddr].End = true;\r\n}\r\nreturn true;\r\n}\r\n\r\n/*GETTERS*/\r\n\r\n/*get private sale state*/\r\nfunction GetPrivateSale() public view returns (bool){\r\nreturn state[ContractAddr].PrivateSale;\r\n}\r\n/*get pre sale state*/\r\nfunction GetPreSale() public view returns (bool){\r\nreturn state[ContractAddr].PreSale;\r\n}\r\n/*get main sale state*/\r\nfunction GetMainSale() public view returns (bool){\r\nreturn state[ContractAddr].MainSale;\r\n}\r\n/*get end state*/\r\nfunction GetEnd() public view returns (bool){\r\nreturn state[ContractAddr].End;\r\n}\r\n/*get ether price*/\r\nfunction GetEtherPrice() public view returns (uint256){\r\nreturn market[ContractAddr].EtherPrice;\r\n}\r\n/*get toc price*/\r\nfunction GetTocPrice() public view returns (uint256){\r\nreturn market[ContractAddr].TocPrice;\r\n}\r\n/*get commission*/\r\nfunction GetCommission() public view returns (uint256){\r\nreturn market[ContractAddr].Commission;\r\n}\r\n\r\n}///////////////////////////////////end of icodata contract\r\n\r\n\r\n\r\npragma solidity ^0.4.16;\r\ncontract IcoDapp{\r\n/////////////////////////////////////////////////////////    \r\n///////(c)2017 tokenchanger.io -all rights reserved////// \r\n \r\n/*SUPER ADMINS*/\r\naddress Mars = 0x1947f347B6ECf1C3D7e1A58E3CDB2A15639D48Be;\r\naddress Mercury = 0x00795263bdca13104309Db70c11E8404f81576BE;\r\naddress Europa = 0x00e4E3eac5b520BCa1030709a5f6f3dC8B9e1C37;\r\naddress Jupiter = 0x2C76F260707672e240DC639e5C9C62efAfB59867;\r\naddress Neptune = 0xEB04E1545a488A5018d2b5844F564135211d3696;\r\n\r\n/*GLOBAL VARIABLES*/\r\nuint256 Converter = 10000;\r\n\r\n/*CONTRACT ADDRESS*/\r\nfunction GetContractAddr() public constant returns (address){\r\nreturn this;\r\n}\t\r\naddress ContractAddr = GetContractAddr();\r\n\r\nstruct Buyer{\r\nbool Withdrawn;    \r\nuint256 TocBalance;\r\nuint256 WithdrawalBlock;\r\nuint256 Num;\r\n}\r\n\r\nstruct Transaction{\r\nuint256 Amount;\r\nuint256 EtherPrice;\r\nuint256 TocPrice;\r\nuint256 Block;\r\n}    \r\n\r\nstruct AddressBook{\r\naddress TOCAddr;\r\naddress DataAddr;\r\naddress Banker;\r\n}\r\n\r\nstruct Admin{\r\nbool Authorised; \r\nuint256 Level;\r\n}\r\n\r\nstruct OrderBooks{\r\nuint256 PrivateSupply;\r\nuint256 PreSupply;\r\nuint256 MainSupply;\r\n}\r\n\r\nstruct Promoters{\r\nbool Registered;    \r\nuint256 TotalCommission; \r\n}\r\n\r\nstruct PromoAdmin{\r\nuint256 CurrentNum;\r\nuint256 Max;    \r\n}\r\n\r\n\r\n/*buyer account*/\r\nmapping (address => Buyer) public buyer;\r\n/*buyer transactions*/\r\nmapping(address => mapping(uint256 => Transaction)) public transaction;\r\n/*order books store*/\r\nmapping (address => OrderBooks) public orderbooks;\r\n/*promoter store*/\r\nmapping (address => Promoters) public promoters;\r\n/*server address book*/\r\nmapping (address => AddressBook) public addressbook;\r\n/*administration of promoters*/\r\nmapping (address => PromoAdmin) public promoadmin;\r\n/*authorised admins*/\r\nmapping (address => Admin) public admin;\r\n\r\nstruct TA{\r\nuint256 n1;\r\nuint256 n2;\r\nuint256 n3;\r\nuint256 n4;\r\nuint256 n5;\r\nuint256 n6;\r\nuint256 n7;\r\nuint256 n8;\r\nuint256 n9;\r\nuint256 n10;\r\nuint256 n11;\r\n}\r\n\r\nstruct LA{\r\nbool l1;\r\nbool l2;\r\nbool l3;\r\n}\r\n\r\n/*initialise process variables*/\r\nTA ta;\r\nLA la;\r\n\r\n/*AUTHORISE ADMIN*/\r\nfunction AuthAdmin(address _admin, bool _authority, uint256 _level) external \r\nreturns(bool) {\r\nif((msg.sender != Mars) && (msg.sender != Mercury) && (msg.sender != Europa)\r\n&& (msg.sender != Jupiter) && (msg.sender != Neptune)) revert();  \r\nadmin[_admin].Authorised = _authority; \r\nadmin[_admin].Level = _level;\r\nreturn true;\r\n} \r\n\r\n/*ADD ADDRESSES TO ADDRESS BOOK*/\r\nfunction AuthAddr(address _tocaddr, address _dataddr, address _banker) \r\nexternal returns(bool){\r\n/*integrity checks*/      \r\nif(admin[msg.sender].Authorised == false) revert();\r\nif(admin[msg.sender].Level < 5 ) revert();\r\n/*update address record*/\r\naddressbook[ContractAddr].TOCAddr = _tocaddr;\r\naddressbook[ContractAddr].DataAddr = _dataddr;\r\naddressbook[ContractAddr].Banker = _banker;\r\nreturn true;\r\n}\r\n\r\n/*CONFIGURE PROMOTERS*/\r\nfunction ConfigPromoter(uint256 _max) external returns (bool){\r\n/*integrity checks*/    \r\nif(admin[msg.sender].Authorised == false) revert();\r\nif(admin[msg.sender].Level < 5 ) revert();    \r\n/*create promoter record*/    \r\npromoadmin[ContractAddr].Max = _max; \r\nreturn true;\r\n}\r\n\r\n/*ADD PROMOTER*/\r\nfunction AddPromoter(address _addpromoter) external returns (bool){\r\n/*integrity checks*/    \r\nif(admin[msg.sender].Authorised == false) revert();\r\nif(admin[msg.sender].Level < 5 ) revert(); \r\n/*create promoter records*/    \r\npromoters[_addpromoter].Registered = true;\r\npromoters[_addpromoter].TotalCommission = 0;\r\npromoadmin[ContractAddr].CurrentNum += 1;\r\nreturn true;\r\n}\r\n\r\n/*REGISTER AS A PROMOTER*/\r\nfunction Register(address _referrer) external returns (bool){\r\n/*integrity checks*/ \r\nif(promoters[_referrer].Registered == false) revert();\r\nif(promoters[msg.sender].Registered == true) revert();\r\nif(promoadmin[ContractAddr].CurrentNum >= promoadmin[ContractAddr].Max) revert();\r\n/*create promoter records*/    \r\npromoters[msg.sender].Registered = true;\r\npromoters[msg.sender].TotalCommission = 0; \r\npromoadmin[ContractAddr].CurrentNum += 1;\r\nreturn true;\r\n}\r\n\r\n/*INCREASE PRIVATE SALE SUPPLY*/\r\nfunction IncPrivateSupply(uint256 _privatesupply) external returns (bool){\r\n/*integrity checks*/    \r\nif(admin[msg.sender].Authorised == false) revert();\r\nif(admin[msg.sender].Level < 5 ) revert();    \r\n/*update private supply record*/    \r\norderbooks[ContractAddr].PrivateSupply += _privatesupply; \r\nreturn true;\r\n}\r\n\r\n/*INCREASE PRESALE SUPPLY*/\r\nfunction IncPreSupply(uint256 _presupply) external returns (bool){\r\n/*integrity checks*/    \r\nif(admin[msg.sender].Authorised == false) revert();\r\nif(admin[msg.sender].Level < 5 ) revert();    \r\n/*update presale supply record*/    \r\norderbooks[ContractAddr].PreSupply += _presupply;\r\nreturn true;\r\n}\r\n\r\n/*INCREASE MAINSALE SUPPLY*/\r\nfunction IncMainSupply(uint256 _mainsupply) external returns (bool){\r\n/*integrity checks*/    \r\nif(admin[msg.sender].Authorised == false) revert();\r\nif(admin[msg.sender].Level < 5 ) revert();    \r\n/*update main sale supply record*/    \r\norderbooks[ContractAddr].MainSupply += _mainsupply;\r\nreturn true;\r\n}\r\n\r\n/*CALCULATE COMMISSION*/\r\nfunction RefCommission(uint256 _amount, uint256 _com) internal returns (uint256){\r\nta.n1 = mul(_amount, _com);\r\nta.n2 = div(ta.n1,Converter);\r\nreturn ta.n2;\r\n}\r\n\r\n/*CALCULATE TOC PURCHASED*/\r\nfunction CalcToc(uint256 _etherprice, uint256 _tocprice, uint256 _deposit) \r\ninternal returns (uint256){    \r\nta.n3 = mul(_etherprice, _deposit);\r\nta.n4 = div(ta.n3,_tocprice);\r\nreturn ta.n4;\r\n}\r\n\r\n/*PRIVATE SALE*/\r\nfunction PrivateSaleBuy(address _referrer) payable external returns (bool){\r\n/*integrity checks*/    \r\nif(promoters[_referrer].Registered == false) revert();\r\nif(msg.value <= 0) revert();\r\n/*connect to ico data contract*/\r\nIcoData\r\nDataCall = IcoData(addressbook[ContractAddr].DataAddr);\r\n/*get transaction information*/\r\nla.l1 = DataCall.GetEnd();\r\nla.l2 = DataCall.GetPrivateSale();\r\nta.n5 = DataCall.GetEtherPrice();    \r\nta.n6 = DataCall.GetTocPrice();    \r\nta.n7 = DataCall.GetCommission();    \r\n/*intergrity checks*/    \r\nif(la.l1 == true) revert();\r\nif(la.l2 == false) revert();\r\n/*calculate toc purchased & determine supply avaliability*/\r\nta.n8 = CalcToc(ta.n5, ta.n6, msg.value);\r\nif(ta.n8 > orderbooks[ContractAddr].PrivateSupply) revert();\r\n/*calculate referrer commission*/\r\nta.n9 = RefCommission(msg.value, ta.n7);\r\n/*calculate net revenue*/\r\nta.n10 = sub(msg.value, ta.n9);\r\n/*payments and delivery*/\r\naddressbook[ContractAddr].Banker.transfer(ta.n10);\r\n_referrer.transfer(ta.n9);\r\n/*update transaction records*/\r\norderbooks[ContractAddr].PrivateSupply -= ta.n8;\r\nbuyer[msg.sender].TocBalance += ta.n8;\r\nbuyer[msg.sender].Num += 1;\r\nta.n11 = buyer[msg.sender].Num; \r\ntransaction[msg.sender][ta.n11].Amount = ta.n8;\r\ntransaction[msg.sender][ta.n11].EtherPrice = ta.n5;\r\ntransaction[msg.sender][ta.n11].TocPrice = ta.n6;\r\ntransaction[msg.sender][ta.n11].Block = block.number;\r\npromoters[_referrer].TotalCommission += ta.n9;\r\nreturn true;\r\n}    \r\n\r\n/*PRESALE*/\r\nfunction PreSaleBuy(address _referrer) payable external returns (bool){\r\n/*integrity checks*/    \r\nif(promoters[_referrer].Registered == false) revert();\r\nif(msg.value <= 0) revert();\r\n/*connect to ico data contract*/\r\nIcoData\r\nDataCall = IcoData(addressbook[ContractAddr].DataAddr);\r\n/*get transaction information*/\r\nla.l1 = DataCall.GetEnd();\r\nla.l2 = DataCall.GetPreSale();\r\nta.n5 = DataCall.GetEtherPrice();    \r\nta.n6 = DataCall.GetTocPrice();    \r\nta.n7 = DataCall.GetCommission();    \r\n/*intergrity checks*/    \r\nif(la.l1 == true) revert();\r\nif(la.l2 == false) revert();\r\n/*calculate toc purchased & determine supply avaliability*/\r\nta.n8 = CalcToc(ta.n5, ta.n6, msg.value);\r\nif(ta.n8 > orderbooks[ContractAddr].PreSupply) revert();\r\n/*calculate referrer commission*/\r\nta.n9 = RefCommission(msg.value, ta.n7);\r\n/*calculate net revenue*/\r\nta.n10 = sub(msg.value, ta.n9);\r\n/*payments and delivery*/\r\naddressbook[ContractAddr].Banker.transfer(ta.n10);\r\n_referrer.transfer(ta.n9);\r\n/*update transaction records*/\r\norderbooks[ContractAddr].PreSupply -= ta.n8;\r\nbuyer[msg.sender].TocBalance += ta.n8;\r\nbuyer[msg.sender].Num += 1;\r\nta.n11 = buyer[msg.sender].Num; \r\ntransaction[msg.sender][ta.n11].Amount = ta.n8;\r\ntransaction[msg.sender][ta.n11].EtherPrice = ta.n5;\r\ntransaction[msg.sender][ta.n11].TocPrice = ta.n6;\r\ntransaction[msg.sender][ta.n11].Block = block.number;\r\npromoters[_referrer].TotalCommission += ta.n9;\r\nreturn true;\r\n}    \r\n\r\n\r\n/*MAIN SALE*/\r\nfunction MainSaleBuy() payable external returns (bool){\r\n/*integrity checks*/    \r\nif(msg.value <= 0) revert();\r\n/*connect to ico data contract*/\r\nIcoData\r\nDataCall = IcoData(addressbook[ContractAddr].DataAddr);\r\n/*get transaction information*/\r\nla.l1 = DataCall.GetEnd();\r\nla.l2 = DataCall.GetMainSale();\r\nta.n5 = DataCall.GetEtherPrice();    \r\nta.n6 = DataCall.GetTocPrice();    \r\nta.n7 = DataCall.GetCommission();    \r\n/*intergrity checks*/    \r\nif(la.l1 == true) revert();\r\nif(la.l2 == false) revert();\r\n/*calculate toc purchased & determine supply avaliability*/\r\nta.n8 = CalcToc(ta.n5, ta.n6, msg.value);\r\nif(ta.n8 > orderbooks[ContractAddr].MainSupply) revert();\r\n/*payments and delivery*/\r\naddressbook[ContractAddr].Banker.transfer(msg.value);\r\n/*update transaction records*/\r\norderbooks[ContractAddr].MainSupply -= ta.n8;\r\nbuyer[msg.sender].TocBalance += ta.n8;\r\nbuyer[msg.sender].Num += 1;\r\nta.n9 = buyer[msg.sender].Num; \r\ntransaction[msg.sender][ta.n9].Amount = ta.n8;\r\ntransaction[msg.sender][ta.n11].EtherPrice = ta.n5;\r\ntransaction[msg.sender][ta.n11].TocPrice = ta.n6;\r\ntransaction[msg.sender][ta.n9].Block = block.number;\r\nreturn true;\r\n}    \r\n\r\n/*WITHDRAW TOC TOKENS*/\r\nfunction Withdraw() external returns (bool){\r\n/*connect to ico data contract*/\r\nIcoData\r\nDataCall = IcoData(addressbook[ContractAddr].DataAddr);\r\n/*get ico cycle information*/\r\nla.l3 = DataCall.GetEnd();\r\n/*integrity checks*/ \r\nif(la.l3 == false) revert();\r\nif(buyer[msg.sender].TocBalance <= 0) revert();\r\nif(buyer[msg.sender].Withdrawn == true) revert();\r\n/*update buyer record*/\r\nbuyer[msg.sender].Withdrawn = true;\r\nbuyer[msg.sender].WithdrawalBlock = block.number;\r\n/*connect to toc contract*/\r\nTOC\r\nTOCCall = TOC(addressbook[ContractAddr].TOCAddr);\r\n/*check integrity before sending tokens*/\r\nassert(buyer[msg.sender].Withdrawn == true);\r\n/*send toc to message sender*/\r\nTOCCall.transfer(msg.sender,buyer[msg.sender].TocBalance);\r\n/*check integrity after sending tokens*/\r\nassert(buyer[msg.sender].Withdrawn == true);\r\nreturn true;\r\n}  \r\n\r\n/*RECEIVE APPROVAL & WITHDRAW TOC TOKENS*/\r\nfunction receiveApproval(address _from, uint256 _value, \r\naddress _token, bytes _extraData) external returns(bool){ \r\nTOC\r\nTOCCall = TOC(_token);\r\nTOCCall.transferFrom(_from,this,_value);\r\nreturn true;\r\n}\r\n\r\n/*INVALID TRANSACTIONS*/\r\nfunction () payable external{\r\nrevert();  \r\n}\r\n\r\n/*SAFE MATHS*/\r\nfunction mul(uint256 a, uint256 b) public pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\nfunction div(uint256 a, uint256 b) public pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }  \r\nfunction sub(uint256 a, uint256 b) public pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\nfunction add(uint256 a, uint256 b) public pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}///////////////////////////////////end of icodapp contract\r\n\r\n\r\npragma solidity ^0.4.16;\r\n\r\n/*SPEND APPROVAL ALERT INTERFACE*/\r\ninterface tokenRecipient { \r\nfunction receiveApproval(address _from, uint256 _value, \r\naddress _token, bytes _extraData) external; \r\n}\r\n\r\ncontract TOC {\r\n/*tokenchanger.io*/\r\n\r\n/*TOC TOKEN*/\r\nstring public name;\r\nstring public symbol;\r\nuint8 public decimals;\r\nuint256 public totalSupply;\r\n\r\n/*user coin balance*/\r\nmapping (address => uint256) public balances;\r\n/*user coin allowances*/\r\nmapping(address => mapping (address => uint256)) public allowed;\r\n\r\n/*EVENTS*/\t\t\r\n/*broadcast token transfers on the blockchain*/\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n/*broadcast token spend approvals on the blockchain*/\r\nevent Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n/*MINT TOKEN*/\r\nconstructor() public {\r\nname = \"TokenChanger\";\r\nsymbol = \"TOC\";\r\ndecimals = 18;\r\n/*one billion base units*/\r\ntotalSupply = 10**27;\r\nbalances[msg.sender] = totalSupply; \r\n}\r\n\r\n/*INTERNAL TRANSFER*/\r\nfunction _transfer(address _from, address _to, uint _value) internal {    \r\n/*prevent transfer to invalid address*/    \r\nif(_to == 0x0) revert();\r\n/*check if the sender has enough value to send*/\r\nif(balances[_from] < _value) revert(); \r\n/*check for overflows*/\r\nif(balances[_to] + _value < balances[_to]) revert();\r\n/*compute sending and receiving balances before transfer*/\r\nuint PreviousBalances = balances[_from] + balances[_to];\r\n/*substract from sender*/\r\nbalances[_from] -= _value;\r\n/*add to the recipient*/\r\nbalances[_to] += _value; \r\n/*check integrity of transfer operation*/\r\nassert(balances[_from] + balances[_to] == PreviousBalances);\r\n/*broadcast transaction*/\r\nemit Transfer(_from, _to, _value); \r\n}\r\n\r\n/*PUBLIC TRANSFERS*/\r\nfunction transfer(address _to, uint256 _value) external returns (bool){\r\n_transfer(msg.sender, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/*APPROVE THIRD PARTY SPENDING*/\r\nfunction approve(address _spender, uint256 _value) public returns (bool success){\r\n/*update allowance record*/    \r\nallowed[msg.sender][_spender] = _value;\r\n/*broadcast approval*/\r\nemit Approval(msg.sender, _spender, _value); \r\nreturn true;                                        \r\n}\r\n\r\n/*THIRD PARTY TRANSFER*/\r\nfunction transferFrom(address _from, address _to, uint256 _value) \r\nexternal returns (bool success) {\r\n/*check if the message sender can spend*/\r\nrequire(_value <= allowed[_from][msg.sender]); \r\n/*substract from message sender's spend allowance*/\r\nallowed[_from][msg.sender] -= _value;\r\n/*transfer tokens*/\r\n_transfer(_from, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/*APPROVE SPEND ALLOWANCE AND CALL SPENDER*/\r\nfunction approveAndCall(address _spender, uint256 _value, \r\n bytes _extraData) external returns (bool success) {\r\ntokenRecipient \r\nspender = tokenRecipient(_spender);\r\nif(approve(_spender, _value)) {\r\nspender.receiveApproval(msg.sender, _value, this, _extraData);\r\n}\r\nreturn true;\r\n}\r\n\r\n/*INVALID TRANSACTIONS*/\r\nfunction () payable external{\r\nrevert();  \r\n}\r\n}/////////////////////////////////end of toc token contract","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressbook\",\"outputs\":[{\"name\":\"TOCAddr\",\"type\":\"address\"},{\"name\":\"DataAddr\",\"type\":\"address\"},{\"name\":\"Banker\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_presupply\",\"type\":\"uint256\"}],\"name\":\"IncPreSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"PrivateSaleBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"ConfigPromoter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tocaddr\",\"type\":\"address\"},{\"name\":\"_dataddr\",\"type\":\"address\"},{\"name\":\"_banker\",\"type\":\"address\"}],\"name\":\"AuthAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_privatesupply\",\"type\":\"uint256\"}],\"name\":\"IncPrivateSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"name\":\"Authorised\",\"type\":\"bool\"},{\"name\":\"Level\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_authority\",\"type\":\"bool\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"AuthAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"MainSaleBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"promoters\",\"outputs\":[{\"name\":\"Registered\",\"type\":\"bool\"},{\"name\":\"TotalCommission\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transaction\",\"outputs\":[{\"name\":\"Amount\",\"type\":\"uint256\"},{\"name\":\"EtherPrice\",\"type\":\"uint256\"},{\"name\":\"TocPrice\",\"type\":\"uint256\"},{\"name\":\"Block\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"div\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"orderbooks\",\"outputs\":[{\"name\":\"PrivateSupply\",\"type\":\"uint256\"},{\"name\":\"PreSupply\",\"type\":\"uint256\"},{\"name\":\"MainSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"sub\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyer\",\"outputs\":[{\"name\":\"Withdrawn\",\"type\":\"bool\"},{\"name\":\"TocBalance\",\"type\":\"uint256\"},{\"name\":\"WithdrawalBlock\",\"type\":\"uint256\"},{\"name\":\"Num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"promoadmin\",\"outputs\":[{\"name\":\"CurrentNum\",\"type\":\"uint256\"},{\"name\":\"Max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"mul\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"PreSaleBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetContractAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addpromoter\",\"type\":\"address\"}],\"name\":\"AddPromoter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"Register\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mainsupply\",\"type\":\"uint256\"}],\"name\":\"IncMainSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"IcoDapp","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1a4f8fde2e0e8a08574f26fba33237574d99ad47971d2d3481fd975f1ffd6309"}]}