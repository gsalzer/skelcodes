{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\ncontract Necropolis {\r\n    function addDragon(address _lastDragonOwner, uint256 _dragonID, uint256 _deathReason) external;\r\n}\r\n\r\n\r\ncontract GenRNG {\r\n    function getNewGens(address _from, uint256 _dragonID) external returns (uint256[2] resultGen);\r\n}\r\n\r\n\r\ncontract DragonSelectFight2Death {\r\n    function addSelctFight2Death(\r\n        address _dragonOwner, \r\n        uint256 _yourDragonID, \r\n        uint256 _oppDragonID, \r\n        uint256 _endBlockNumber, \r\n        uint256 _priceSelectFight2Death\r\n    ) \r\n        external;\r\n}\r\n\r\n\r\ncontract DragonsRandomFight2Death {\r\n    function addRandomFight2Death(address _dragonOwner, uint256 _DragonID) external;\r\n}\r\n\r\n\r\ncontract FixMarketPlace {\r\n    function add2MarketPlace(address _dragonOwner, uint256 _dragonID, uint256 _dragonPrice, uint256 _endBlockNumber) external returns (bool);\r\n}\r\n\r\n\r\ncontract Auction {\r\n    function add2Auction(\r\n        address _dragonOwner, \r\n        uint256 _dragonID, \r\n        uint256 _startPrice, \r\n        uint256 _step, \r\n        uint256 _endPrice, \r\n        uint256 _endBlockNumber\r\n    ) \r\n        external \r\n        returns (bool);\r\n}\r\n\r\n\r\ncontract DragonStats {\r\n    function setParents(uint256 _dragonID, uint256 _parentOne, uint256 _parentTwo) external;\r\n    function setBirthBlock(uint256 _dragonID) external;\r\n    function incChildren(uint256 _dragonID) external;\r\n    function setDeathBlock(uint256 _dragonID) external;\r\n    function getDragonFight(uint256 _dragonID) external view returns (uint256);\r\n}\r\n\r\n\r\ncontract SuperContract {\r\n    function checkDragon(uint256 _dragonID) external returns (bool);\r\n}\r\n\r\n\r\ncontract Mutagen2Face {\r\n    function addDragon(address _dragonOwner, uint256 _dragonID, uint256 mutagenCount) external;\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\n\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address addr, string roleName);\r\n  event RoleRemoved(address addr, string roleName);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address addr, string roleName)\r\n    view\r\n    public\r\n  {\r\n    roles[roleName].check(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address addr, string roleName)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[roleName].has(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function addRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].add(addr);\r\n    emit RoleAdded(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function removeRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].remove(addr);\r\n    emit RoleRemoved(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string roleName)\r\n  {\r\n    checkRole(msg.sender, roleName);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param roleNames the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] roleNames) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < roleNames.length; i++) {\r\n  //         if (hasRole(msg.sender, roleNames[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n\r\ncontract RBACWithAdmin is RBAC {\r\n  /**\r\n   * A constant role name for indicating admins.\r\n   */\r\n  string public constant ROLE_ADMIN = \"admin\";\r\n  string public constant ROLE_PAUSE_ADMIN = \"pauseAdmin\";\r\n\r\n  /**\r\n   * @dev modifier to scope access to admins\r\n   * // reverts\r\n   */\r\n  modifier onlyAdmin()\r\n  {\r\n    checkRole(msg.sender, ROLE_ADMIN);\r\n    _;\r\n  }\r\n  modifier onlyPauseAdmin()\r\n  {\r\n    checkRole(msg.sender, ROLE_PAUSE_ADMIN);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev constructor. Sets msg.sender as admin by default\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    addRole(msg.sender, ROLE_ADMIN);\r\n    addRole(msg.sender, ROLE_PAUSE_ADMIN);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function adminAddRole(address addr, string roleName)\r\n    onlyAdmin\r\n    public\r\n  {\r\n    addRole(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function adminRemoveRole(address addr, string roleName)\r\n    onlyAdmin\r\n    public\r\n  {\r\n    removeRole(addr, roleName);\r\n  }\r\n}\r\n\r\n\r\ncontract ERC721Basic {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public payable;\r\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public payable;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public payable;\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public payable;\r\n}\r\n\r\n\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) external view returns (string);\r\n}\r\n\r\n\r\ncontract ERC721BasicToken is ERC721Basic {\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /**\r\n  * @dev Guarantees msg.sender is owner of the given token\r\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n  */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n  * @param _tokenId uint256 ID of the token to validate\r\n  */\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address\r\n  * @param _owner address to query the balance of\r\n  * @return uint256 representing the amount owned by the passed address\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the owner of the specified token ID\r\n  * @param _tokenId uint256 ID of the token to query the owner of\r\n  * @return owner address currently marked as the owner of the given token ID\r\n  */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns whether the specified token exists\r\n  * @param _tokenId uint256 ID of the token to query the existance of\r\n  * @return whether the token exists\r\n  */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n  * @dev Approves another address to transfer the given token ID\r\n  * @dev The zero address indicates there is no approved address.\r\n  * @dev There can only be one approved address per token at a given time.\r\n  * @dev Can only be called by the token owner or an approved operator.\r\n  * @param _to address to be approved for the given token ID\r\n  * @param _tokenId uint256 ID of the token to be approved\r\n  */\r\n  function approve(address _to, uint256 _tokenId) public payable{\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\r\n      tokenApprovals[_tokenId] = _to;\r\n        if (msg.value > 0 && _to != address(0))  _to.transfer(msg.value);\r\n        if (msg.value > 0 && _to == address(0))  owner.transfer(msg.value);\r\n        \r\n      emit Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for a the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n  * @dev Sets or unsets the approval of a given operator\r\n  * @dev An operator is allowed to transfer all tokens of the sender on their behalf\r\n  * @param _to operator address to set the approval\r\n  * @param _approved representing the status of the approval to be set\r\n  */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfers the ownership of a given token ID to another address\r\n  * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n  * @dev Requires the msg sender to be the owner, approved, or operator\r\n  * @param _from current owner of the token\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public payable canTransfer(_tokenId) {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n    if (msg.value > 0) _to.transfer(msg.value);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Safely transfers the ownership of a given token ID to another address\r\n  * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n  *  which is called upon a safe transfer, and return the magic value\r\n  *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n  *  the transfer is reverted.\r\n  * @dev Requires the msg sender to be the owner, approved, or operator\r\n  * @param _from current owner of the token\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    payable\r\n    canTransfer(_tokenId)\r\n  {\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n  * @dev Safely transfers the ownership of a given token ID to another address\r\n  * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n  *  which is called upon a safe transfer, and return the magic value\r\n  *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n  *  the transfer is reverted.\r\n  * @dev Requires the msg sender to be the owner, approved, or operator\r\n  * @param _from current owner of the token\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  * @param _data bytes data to send along with a safe transfer check\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    payable\r\n    canTransfer(_tokenId)\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(address _spender, uint256 _tokenId) public view returns (bool) {\r\n    address owner = ownerOf(_tokenId);\r\n    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to mint a new token\r\n  * @dev Reverts if the given token ID already exists\r\n  * @param _to The address that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to burn a specific token\r\n  * @dev Reverts if the token does not exist\r\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval of a given token ID\r\n  * @dev Reverts if the given address is not indeed the owner of the token\r\n  * @param _owner owner of the token\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n      emit Approval(_owner, address(0), _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to invoke `onERC721Received` on a target address\r\n  * @dev The call is not executed if the target address is not a contract\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _to target address that will receive the tokens\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  * @param _data bytes optional data to send along with the call\r\n  * @return whether the call correctly returned the expected magic value\r\n  */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\r\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\r\n   *  than the magic value MUST result in the transaction being reverted.\r\n   *  Note: the contract address is always the message sender.\r\n   * @param _from The sending address\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\r\n}\r\n\r\n\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n\r\ncontract ERC721Token is ERC721, ERC721BasicToken {\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  // mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n  * @dev Constructor function\r\n  */\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token name\r\n  * @return string representing the token name\r\n  */\r\n  function name() public view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token symbol\r\n  * @return string representing the token symbol\r\n  */\r\n  function symbol() public view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns an URI for a given token ID\r\n  * @dev Throws if the token ID does not exist. May return an empty string.\r\n  * @param _tokenId uint256 ID of the token to query\r\n  */\r\n   bytes constant firstPartURI = \"https://www.dragonseth.com/image/\";\r\n    \r\n    function tokenURI(uint256  _tokenId) external view returns (string) {\r\n        require(exists(_tokenId));\r\n        bytes memory tmpBytes = new bytes(96);\r\n        uint256 i = 0;\r\n        uint256 tokenId = _tokenId;\r\n        // for same use case need \"if (tokenId == 0)\" \r\n        while (tokenId != 0) {\r\n            uint256 remainderDiv = tokenId % 10;\r\n            tokenId = tokenId / 10;\r\n            tmpBytes[i++] = byte(48 + remainderDiv);\r\n        }\r\n \r\n        bytes memory resaultBytes = new bytes(firstPartURI.length + i);\r\n        \r\n        for (uint256 j = 0; j < firstPartURI.length; j++) {\r\n            resaultBytes[j] = firstPartURI[j];\r\n        }\r\n        \r\n        i--;\r\n        \r\n        for (j = 0; j <= i; j++) {\r\n            resaultBytes[j + firstPartURI.length] = tmpBytes[i - j];\r\n        }\r\n        \r\n        return string(resaultBytes);\r\n        \r\n    }\r\n/*    \r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n*/\r\n  /**\r\n  * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n  * @param _owner address owning the tokens list to be accessed\r\n  * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n  * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n  */\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the total amount of tokens stored by the contract\r\n  * @return uint256 representing the total amount of tokens\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token ID at a given index of all the tokens in this contract\r\n  * @dev Reverts if the index is greater or equal to the total number of tokens\r\n  * @param _index uint256 representing the index to be accessed of the tokens list\r\n  * @return uint256 token ID at the given index of the tokens list\r\n  */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to set the token URI for a given token\r\n  * @dev Reverts if the token ID does not exist\r\n  * @param _tokenId uint256 ID of the token to set its URI\r\n  * @param _uri string URI to assign\r\n  */\r\n/*\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n*/\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to mint a new token\r\n  * @dev Reverts if the given token ID already exists\r\n  * @param _to address the beneficiary that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to burn a specific token\r\n  * @dev Reverts if the token does not exist\r\n  * @param _owner owner of the token to burn\r\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n/*    \r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n*/\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n       /**\r\n  * @dev Gets the list of tokens owned by a given address\r\n  * @param _owner address to query the tokens of\r\n  * @return uint256[] representing the list of tokens owned by the passed address\r\n  */\r\n  function tokensOf(address _owner) external view returns (uint256[]) {\r\n    return ownedTokens[_owner];\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\ncontract DragonsETH_GC is RBACWithAdmin {\r\n    GenRNG public genRNGContractAddress;\r\n    FixMarketPlace public fmpContractAddress;\r\n    DragonStats public dragonsStatsContract;\r\n    Necropolis public necropolisContract;\r\n    Auction public auctionContract;\r\n    SuperContract public superContract;\r\n    DragonSelectFight2Death public selectFight2DeathContract;\r\n    DragonsRandomFight2Death public randomFight2DeathContract;\r\n    Mutagen2Face public mutagen2FaceContract;\r\n    \r\n    address wallet;\r\n    \r\n    uint8 adultDragonStage = 3;\r\n    bool stageThirdBegin = false;\r\n    uint256 constant UINT256_MAX = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n    uint256 public secondsInBlock = 15;\r\n    uint256 public priceDecraseTime2Action = 0.000005 ether; //  1 block\r\n    uint256 public priceRandomFight2Death = 0.02 ether;\r\n    uint256 public priceSelectFight2Death = 0.03 ether;\r\n    uint256 public priceChangeName = 0.01 ether;\r\n    uint256 public needFightToAdult = 100;\r\n    \r\n    function changeGenRNGcontractAddress(address _genRNGContractAddress) external onlyAdmin {\r\n        genRNGContractAddress = GenRNG(_genRNGContractAddress);\r\n    }\r\n\r\n    function changeFMPcontractAddress(address _fmpContractAddress) external onlyAdmin {\r\n        fmpContractAddress = FixMarketPlace(_fmpContractAddress);\r\n    }\r\n\r\n    function changeDragonsStatsContract(address _dragonsStatsContract) external onlyAdmin {\r\n        dragonsStatsContract = DragonStats(_dragonsStatsContract);\r\n    }\r\n\r\n    function changeAuctionContract(address _auctionContract) external onlyAdmin {\r\n        auctionContract = Auction(_auctionContract);\r\n    }\r\n\r\n    function changeSelectFight2DeathContract(address _selectFight2DeathContract) external onlyAdmin {\r\n        selectFight2DeathContract = DragonSelectFight2Death(_selectFight2DeathContract);\r\n    }\r\n\r\n    function changeRandomFight2DeathContract(address _randomFight2DeathContract) external onlyAdmin {\r\n        randomFight2DeathContract = DragonsRandomFight2Death(_randomFight2DeathContract);\r\n    }\r\n\r\n    function changeMutagen2FaceContract(address _mutagen2FaceContract) external onlyAdmin {\r\n        mutagen2FaceContract = Mutagen2Face(_mutagen2FaceContract);\r\n    }\r\n\r\n    function changeSuperContract(address _superContract) external onlyAdmin {\r\n        superContract = SuperContract(_superContract);\r\n    }\r\n\r\n    function changeWallet(address _wallet) external onlyAdmin {\r\n        wallet = _wallet;\r\n    }\r\n\r\n    function changePriceDecraseTime2Action(uint256 _priceDecraseTime2Action) external onlyAdmin {\r\n        priceDecraseTime2Action = _priceDecraseTime2Action;\r\n    }\r\n\r\n    function changePriceRandomFight2Death(uint256 _priceRandomFight2Death) external onlyAdmin {\r\n        priceRandomFight2Death = _priceRandomFight2Death;\r\n    }\r\n\r\n    function changePriceSelectFight2Death(uint256 _priceSelectFight2Death) external onlyAdmin {\r\n        priceSelectFight2Death = _priceSelectFight2Death;\r\n    }\r\n\r\n    function changePriceChangeName(uint256 _priceChangeName) external onlyAdmin {\r\n        priceChangeName = _priceChangeName;\r\n    }\r\n\r\n    function changeSecondsInBlock(uint256 _secondsInBlock) external onlyAdmin {\r\n        secondsInBlock = _secondsInBlock;\r\n    }\r\n    function changeNeedFightToAdult(uint256 _needFightToAdult) external onlyAdmin {\r\n        needFightToAdult = _needFightToAdult;\r\n    }\r\n\r\n    function changeAdultDragonStage(uint8 _adultDragonStage) external onlyAdmin {\r\n        adultDragonStage = _adultDragonStage;\r\n    }\r\n\r\n    function setStageThirdBegin() external onlyAdmin {\r\n        stageThirdBegin = true;\r\n    }\r\n\r\n    function withdrawAllEther() external onlyAdmin {\r\n        require(wallet != 0);\r\n        wallet.transfer(address(this).balance);\r\n    }\r\n    \r\n    // EIP-165 and EIP-721\r\n    bytes4 constant ERC165_Signature = 0x01ffc9a7;\r\n    bytes4 constant ERC721_Signature = 0x80ac58cd;\r\n    bytes4 constant ERC721Metadata_Signature = 0x5b5e139f;\r\n    bytes4 constant ERC721Enumerable_Signature = 0x780e9d63;\r\n    \r\n    function supportsInterface(bytes4 _interfaceID) external pure returns (bool) {\r\n        return (\r\n            (_interfaceID == ERC165_Signature) || \r\n            (_interfaceID == ERC721_Signature) || \r\n            (_interfaceID == ERC721Metadata_Signature) || \r\n            (_interfaceID == ERC721Enumerable_Signature)\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private reentrancyLock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!reentrancyLock);\r\n    reentrancyLock = true;\r\n    _;\r\n    reentrancyLock = false;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract DragonsETH is ERC721Token(\"DragonsETH.com Dragon\", \"DragonsETH\"), DragonsETH_GC, ReentrancyGuard {\r\n    uint256 public totalDragons;\r\n    uint256 public liveDragons;\r\n    struct Dragon {\r\n        uint256 gen1;\r\n        uint8 stage; // 0 - Dead, 1 - Egg, 2 - Young Dragon ... \r\n        uint8 currentAction;\r\n        // 0 - free, 1 - fight place, 2 - random fight, 3 - breed market, 4 - breed auction, 5 - random breed ... 0xFF - Necropolis\r\n        uint240 gen2;\r\n        uint256 nextBlock2Action;\r\n    }\r\n\r\n    Dragon[] public dragons;\r\n    mapping(uint256 => string) public dragonName;\r\n    \r\n   \r\n    constructor(address _wallet, address _necropolisContract, address _dragonsStatsContract) public {\r\n        \r\n        _mint(msg.sender, 0);\r\n        Dragon memory _dragon = Dragon({\r\n            gen1: 0,\r\n            stage: 0,\r\n            currentAction: 0,\r\n            gen2: 0,\r\n            nextBlock2Action: UINT256_MAX\r\n        });\r\n        dragons.push(_dragon);\r\n        transferFrom(msg.sender, _necropolisContract, 0);\r\n        dragonsStatsContract = DragonStats(_dragonsStatsContract);\r\n        necropolisContract = Necropolis(_necropolisContract);\r\n        wallet = _wallet;\r\n    }\r\n   \r\n    function add2MarketPlace(uint256 _dragonID, uint256 _dragonPrice, uint256 _endBlockNumber) external canTransfer(_dragonID)  {\r\n        require(dragons[_dragonID].stage != 0); // dragon not dead\r\n        if (dragons[_dragonID].stage >= 2) {\r\n            checkDragonStatus(_dragonID, 2);\r\n        }\r\n        address dragonOwner = ownerOf(_dragonID);\r\n        if (fmpContractAddress.add2MarketPlace(dragonOwner, _dragonID, _dragonPrice, _endBlockNumber)) {\r\n            transferFrom(dragonOwner, fmpContractAddress, _dragonID);\r\n        }\r\n    }\r\n\r\n    function add2Auction(\r\n        uint256 _dragonID, \r\n        uint256 _startPrice, \r\n        uint256 _step, \r\n        uint256 _endPrice, \r\n        uint256 _endBlockNumber\r\n    ) \r\n        external \r\n        canTransfer(_dragonID) \r\n    {\r\n        require(dragons[_dragonID].stage != 0); // dragon not dead\r\n        if (dragons[_dragonID].stage >= 2) {\r\n            checkDragonStatus(_dragonID, 2);\r\n        }\r\n        address dragonOwner = ownerOf(_dragonID);\r\n        if (auctionContract.add2Auction(dragonOwner, _dragonID, _startPrice, _step, _endPrice, _endBlockNumber)) {\r\n            transferFrom(dragonOwner, auctionContract, _dragonID);\r\n        }\r\n    }\r\n    \r\n    function addRandomFight2Death(uint256 _dragonID) external payable nonReentrant canTransfer(_dragonID)   {\r\n        checkDragonStatus(_dragonID, adultDragonStage);\r\n        if (priceRandomFight2Death > 0) {\r\n            require(msg.value >= priceRandomFight2Death);\r\n            wallet.transfer(priceRandomFight2Death);\r\n            if (msg.value - priceRandomFight2Death > 0) \r\n                msg.sender.transfer(msg.value - priceRandomFight2Death);\r\n        } else {\r\n            if (msg.value > 0) \r\n                msg.sender.transfer(msg.value);\r\n        }\r\n        address dragonOwner = ownerOf(_dragonID);\r\n        transferFrom(dragonOwner, randomFight2DeathContract, _dragonID);\r\n        randomFight2DeathContract.addRandomFight2Death(dragonOwner, _dragonID);\r\n    }\r\n    \r\n    function addSelctFight2Death(uint256 _yourDragonID, uint256 _oppDragonID, uint256 _endBlockNumber) \r\n        external \r\n        payable \r\n        nonReentrant \r\n        canTransfer(_yourDragonID) \r\n    {\r\n        checkDragonStatus(_yourDragonID, adultDragonStage);\r\n        if (priceSelectFight2Death > 0) {\r\n            require(msg.value >= priceSelectFight2Death);\r\n            address(selectFight2DeathContract).transfer(priceSelectFight2Death);\r\n            if (msg.value - priceSelectFight2Death > 0) msg.sender.transfer(msg.value - priceSelectFight2Death);\r\n        } else {\r\n            if (msg.value > 0) \r\n                msg.sender.transfer(msg.value);\r\n        }\r\n        address dragonOwner = ownerOf(_yourDragonID);\r\n        transferFrom(dragonOwner, selectFight2DeathContract, _yourDragonID);\r\n        selectFight2DeathContract.addSelctFight2Death(dragonOwner, _yourDragonID, _oppDragonID, _endBlockNumber, priceSelectFight2Death);\r\n        \r\n    }\r\n    \r\n    function mutagen2Face(uint256 _dragonID, uint256 _mutagenCount) external canTransfer(_dragonID)   {\r\n        checkDragonStatus(_dragonID, 2);\r\n        address dragonOwner = ownerOf(_dragonID);\r\n        transferFrom(dragonOwner, mutagen2FaceContract, _dragonID);\r\n        mutagen2FaceContract.addDragon(dragonOwner, _dragonID, _mutagenCount);\r\n    }\r\n\r\n    function createDragon(\r\n        address _to, \r\n        uint256 _timeToBorn, \r\n        uint256 _parentOne, \r\n        uint256 _parentTwo, \r\n        uint256 _gen1, \r\n        uint240 _gen2\r\n    ) \r\n        external \r\n        onlyRole(\"CreateContract\") \r\n    {\r\n        totalDragons++;\r\n        liveDragons++;\r\n        _mint(_to, totalDragons);\r\n        uint256[2] memory twoGen;\r\n        if (_parentOne == 0 && _parentTwo == 0 && _gen1 == 0 && _gen2 == 0) {\r\n            twoGen = genRNGContractAddress.getNewGens(_to, totalDragons);\r\n        } else {\r\n            twoGen[0] = _gen1;\r\n            twoGen[1] = uint256(_gen2);\r\n        }\r\n        Dragon memory _dragon = Dragon({\r\n            gen1: twoGen[0],\r\n            stage: 1,\r\n            currentAction: 0,\r\n            gen2: uint240(twoGen[1]),\r\n            nextBlock2Action: _timeToBorn \r\n        });\r\n        dragons.push(_dragon);\r\n        if (_parentOne != 0) {\r\n            dragonsStatsContract.setParents(totalDragons,_parentOne,_parentTwo);\r\n            dragonsStatsContract.incChildren(_parentOne);\r\n            dragonsStatsContract.incChildren(_parentTwo);\r\n        }\r\n        dragonsStatsContract.setBirthBlock(totalDragons);\r\n    }\r\n    \r\n    function changeDragonGen(uint256 _dragonID, uint256 _gen, uint8 _which) external onlyRole(\"ChangeContract\") {\r\n        require(dragons[_dragonID].stage >= 2); // dragon not dead and not egg\r\n        if (_which == 0) {\r\n            dragons[_dragonID].gen1 = _gen;\r\n        } else {\r\n            dragons[_dragonID].gen2 = uint240(_gen);\r\n        }\r\n    }\r\n    \r\n    function birthDragon(uint256 _dragonID) external canTransfer(_dragonID) {\r\n        require(dragons[_dragonID].stage != 0); // dragon not dead\r\n        require(dragons[_dragonID].nextBlock2Action <= block.number);\r\n        dragons[_dragonID].stage = 2;\r\n    }\r\n    \r\n    function matureDragon(uint256 _dragonID) external canTransfer(_dragonID) {\r\n        require(stageThirdBegin);\r\n        checkDragonStatus(_dragonID, 2);\r\n        require(dragonsStatsContract.getDragonFight(_dragonID) >= needFightToAdult);\r\n        dragons[_dragonID].stage = 3;\r\n        \r\n    }\r\n    \r\n    function superDragon(uint256 _dragonID) external canTransfer(_dragonID) {\r\n        checkDragonStatus(_dragonID, 3);\r\n        require(superContract.checkDragon(_dragonID));\r\n        dragons[_dragonID].stage = 4;\r\n    }\r\n    \r\n    function killDragon(uint256 _dragonID) external onlyOwnerOf(_dragonID) {\r\n        checkDragonStatus(_dragonID, 2);\r\n        dragons[_dragonID].stage = 0;\r\n        dragons[_dragonID].currentAction = 0xFF;\r\n        dragons[_dragonID].nextBlock2Action = UINT256_MAX;\r\n        necropolisContract.addDragon(ownerOf(_dragonID), _dragonID, 1);\r\n        transferFrom(ownerOf(_dragonID), necropolisContract, _dragonID);\r\n        dragonsStatsContract.setDeathBlock(_dragonID);\r\n        liveDragons--;\r\n    }\r\n    \r\n    function killDragonDeathContract(address _lastOwner, uint256 _dragonID, uint256 _deathReason) \r\n        external \r\n        canTransfer(_dragonID) \r\n        onlyRole(\"DeathContract\") \r\n    {\r\n        checkDragonStatus(_dragonID, 2);\r\n        dragons[_dragonID].stage = 0;\r\n        dragons[_dragonID].currentAction = 0xFF;\r\n        dragons[_dragonID].nextBlock2Action = UINT256_MAX;\r\n        necropolisContract.addDragon(_lastOwner, _dragonID, _deathReason);\r\n        transferFrom(ownerOf(_dragonID), necropolisContract, _dragonID);\r\n        dragonsStatsContract.setDeathBlock(_dragonID);\r\n        liveDragons--;\r\n        \r\n    }\r\n    \r\n    function decraseTimeToAction(uint256 _dragonID) external payable nonReentrant canTransfer(_dragonID) {\r\n        require(dragons[_dragonID].stage != 0); // dragon not dead\r\n        require(msg.value >= priceDecraseTime2Action);\r\n        require(dragons[_dragonID].nextBlock2Action > block.number);\r\n        uint256 maxBlockCount = dragons[_dragonID].nextBlock2Action - block.number;\r\n        if (msg.value > maxBlockCount * priceDecraseTime2Action) {\r\n            msg.sender.transfer(msg.value - maxBlockCount * priceDecraseTime2Action);\r\n            wallet.transfer(maxBlockCount * priceDecraseTime2Action);\r\n            dragons[_dragonID].nextBlock2Action = 0;\r\n        } else {\r\n            if (priceDecraseTime2Action == 0) {\r\n                dragons[_dragonID].nextBlock2Action = 0;\r\n            } else {\r\n                wallet.transfer(msg.value);\r\n                dragons[_dragonID].nextBlock2Action = dragons[_dragonID].nextBlock2Action - msg.value / priceDecraseTime2Action - 1;\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    function addDragonName(uint256 _dragonID,string _newName) external payable nonReentrant canTransfer(_dragonID) {\r\n        checkDragonStatus(_dragonID, 2);\r\n        if (bytes(dragonName[_dragonID]).length == 0) {\r\n            dragonName[_dragonID] = _newName;\r\n            if (msg.value > 0) \r\n                msg.sender.transfer(msg.value);\r\n        } else {\r\n            if (priceChangeName == 0) {\r\n                dragonName[_dragonID] = _newName;\r\n                if (msg.value > 0) \r\n                    msg.sender.transfer(msg.value);\r\n            } else {\r\n                require(msg.value >= priceChangeName);\r\n                wallet.transfer(priceChangeName);\r\n                if (msg.value - priceChangeName > 0) \r\n                    msg.sender.transfer(msg.value - priceChangeName);\r\n                dragonName[_dragonID] = _newName;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function checkDragonStatus(uint256 _dragonID, uint8 _stage) public view {\r\n        require(dragons[_dragonID].stage != 0); // dragon not dead\r\n        // dragon not in action and not in rest  and not egg\r\n        require(\r\n            dragons[_dragonID].nextBlock2Action <= block.number && \r\n            dragons[_dragonID].currentAction == 0 && \r\n            dragons[_dragonID].stage >= _stage\r\n        );\r\n    }\r\n    \r\n    function setCurrentAction(uint256 _dragonID, uint8 _currentAction) external onlyRole(\"ActionContract\") {\r\n        dragons[_dragonID].currentAction = _currentAction;\r\n    }\r\n    \r\n    function setTime2Rest(uint256 _dragonID, uint256 _addNextBlock2Action) external onlyRole(\"ActionContract\") {\r\n        dragons[_dragonID].nextBlock2Action = block.number + _addNextBlock2Action;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalDragons\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"},{\"name\":\"_dragonPrice\",\"type\":\"uint256\"},{\"name\":\"_endBlockNumber\",\"type\":\"uint256\"}],\"name\":\"add2MarketPlace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_priceSelectFight2Death\",\"type\":\"uint256\"}],\"name\":\"changePriceSelectFight2Death\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genRNGContractAddress\",\"type\":\"address\"}],\"name\":\"changeGenRNGcontractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lastOwner\",\"type\":\"address\"},{\"name\":\"_dragonID\",\"type\":\"uint256\"},{\"name\":\"_deathReason\",\"type\":\"uint256\"}],\"name\":\"killDragonDeathContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceDecraseTime2Action\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fmpContractAddress\",\"type\":\"address\"}],\"name\":\"changeFMPcontractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dragonName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_needFightToAdult\",\"type\":\"uint256\"}],\"name\":\"changeNeedFightToAdult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"},{\"name\":\"_mutagenCount\",\"type\":\"uint256\"}],\"name\":\"mutagen2Face\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsInBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_timeToBorn\",\"type\":\"uint256\"},{\"name\":\"_parentOne\",\"type\":\"uint256\"},{\"name\":\"_parentTwo\",\"type\":\"uint256\"},{\"name\":\"_gen1\",\"type\":\"uint256\"},{\"name\":\"_gen2\",\"type\":\"uint240\"}],\"name\":\"createDragon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mutagen2FaceContract\",\"type\":\"address\"}],\"name\":\"changeMutagen2FaceContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"},{\"name\":\"_newName\",\"type\":\"string\"}],\"name\":\"addDragonName\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_PAUSE_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionContract\",\"type\":\"address\"}],\"name\":\"changeAuctionContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceChangeName\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"}],\"name\":\"addRandomFight2Death\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fmpContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceSelectFight2Death\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_priceChangeName\",\"type\":\"uint256\"}],\"name\":\"changePriceChangeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_randomFight2DeathContract\",\"type\":\"address\"}],\"name\":\"changeRandomFight2DeathContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"}],\"name\":\"birthDragon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"}],\"name\":\"superDragon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liveDragons\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"},{\"name\":\"_addNextBlock2Action\",\"type\":\"uint256\"}],\"name\":\"setTime2Rest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonsStatsContract\",\"type\":\"address\"}],\"name\":\"changeDragonsStatsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dragonsStatsContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_priceRandomFight2Death\",\"type\":\"uint256\"}],\"name\":\"changePriceRandomFight2Death\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"adminRemoveRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_step\",\"type\":\"uint256\"},{\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"name\":\"_endBlockNumber\",\"type\":\"uint256\"}],\"name\":\"add2Auction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"needFightToAdult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomFight2DeathContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setStageThirdBegin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"}],\"name\":\"decraseTimeToAction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"},{\"name\":\"_currentAction\",\"type\":\"uint8\"}],\"name\":\"setCurrentAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_superContract\",\"type\":\"address\"}],\"name\":\"changeSuperContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"},{\"name\":\"_gen\",\"type\":\"uint256\"},{\"name\":\"_which\",\"type\":\"uint8\"}],\"name\":\"changeDragonGen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"adminAddRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceRandomFight2Death\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mutagen2FaceContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"necropolisContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_selectFight2DeathContract\",\"type\":\"address\"}],\"name\":\"changeSelectFight2DeathContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_yourDragonID\",\"type\":\"uint256\"},{\"name\":\"_oppDragonID\",\"type\":\"uint256\"},{\"name\":\"_endBlockNumber\",\"type\":\"uint256\"}],\"name\":\"addSelctFight2Death\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adultDragonStage\",\"type\":\"uint8\"}],\"name\":\"changeAdultDragonStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_priceDecraseTime2Action\",\"type\":\"uint256\"}],\"name\":\"changePriceDecraseTime2Action\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dragons\",\"outputs\":[{\"name\":\"gen1\",\"type\":\"uint256\"},{\"name\":\"stage\",\"type\":\"uint8\"},{\"name\":\"currentAction\",\"type\":\"uint8\"},{\"name\":\"gen2\",\"type\":\"uint240\"},{\"name\":\"nextBlock2Action\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genRNGContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selectFight2DeathContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secondsInBlock\",\"type\":\"uint256\"}],\"name\":\"changeSecondsInBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"}],\"name\":\"matureDragon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"},{\"name\":\"_stage\",\"type\":\"uint8\"}],\"name\":\"checkDragonStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dragonID\",\"type\":\"uint256\"}],\"name\":\"killDragon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_necropolisContract\",\"type\":\"address\"},{\"name\":\"_dragonsStatsContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"DragonsETH","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef000000000000000000000000c8157b670c89f4efdc9b6f00a208036ba1cf8dee0000000000000000000000003cd20d014384c16537a9ac945d7c39e470183e790000000000000000000000003c29ef59bebe160bbc59c02130b8f637fa11a978","Library":"","SwarmSource":"bzzr://13edb9b776421732d127c5f4ce31c561e00bbef5b047989e7192b2d84131ecca"}]}