{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: zeppelin-solidity\\contracts\\ownership\\Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts\\lib\\PreSignedContract.sol\r\n\r\ncontract PreSignedContract is Ownable {\r\n  mapping (uint8 => bytes) internal _prefixPreSignedFirst;\r\n  mapping (uint8 => bytes) internal _prefixPreSignedSecond;\r\n\r\n  function upgradePrefixPreSignedFirst(uint8 _version, bytes _prefix) public onlyOwner {\r\n    _prefixPreSignedFirst[_version] = _prefix;\r\n  }\r\n\r\n  function upgradePrefixPreSignedSecond(uint8 _version, bytes _prefix) public onlyOwner {\r\n    _prefixPreSignedSecond[_version] = _prefix;\r\n  }\r\n\r\n  /**\r\n   * @dev Recover signer address from a message by using their signature\r\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\r\n   */\r\n  function recover(bytes32 hash, bytes sig) public pure returns (address) {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    // Check the signature length\r\n    if (sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    // ecrecover takes the signature parameters, and the only way to get them\r\n    // currently is to use assembly.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      // solium-disable-next-line arg-overflow\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n\r\n  function messagePreSignedHashing(\r\n    bytes8 _mode,\r\n    address _token,\r\n    address _to,\r\n    uint256 _value,\r\n    uint256 _fee,\r\n    uint256 _nonce,\r\n    uint8 _version\r\n  ) public view returns (bytes32 hash) {\r\n    if (_version <= 2) {\r\n      hash = keccak256(\r\n        _mode,\r\n        _token,\r\n        _to,\r\n        _value,\r\n        _fee,\r\n        _nonce\r\n      );\r\n    } else {\r\n      // Support SignTypedData flexibly\r\n      hash = keccak256(\r\n        _prefixPreSignedFirst[_version],\r\n        _mode,\r\n        _token,\r\n        _to,\r\n        _value,\r\n        _fee,\r\n        _nonce\r\n      );\r\n    }\r\n  }\r\n\r\n  function preSignedHashing(\r\n    bytes8 _mode,\r\n    address _token,\r\n    address _to,\r\n    uint256 _value,\r\n    uint256 _fee,\r\n    uint256 _nonce,\r\n    uint8 _version\r\n  ) public view returns (bytes32) {\r\n    bytes32 hash = messagePreSignedHashing(\r\n      _mode,\r\n      _token,\r\n      _to,\r\n      _value,\r\n      _fee,\r\n      _nonce,\r\n      _version\r\n    );\r\n\r\n    if (_version <= 2) {\r\n      if (_version == 0) {\r\n        return hash;\r\n      } else if (_version == 1) {\r\n        return keccak256(\r\n          '\\x19Ethereum Signed Message:\\n32',\r\n          hash\r\n        );\r\n      } else {\r\n        // Support Standard Prefix (Trezor)\r\n        return keccak256(\r\n          '\\x19Ethereum Signed Message:\\n\\x20',\r\n          hash\r\n        );\r\n      }\r\n    } else {\r\n      // Support SignTypedData flexibly\r\n      if (_prefixPreSignedSecond[_version].length > 0) {\r\n        return keccak256(\r\n          _prefixPreSignedSecond[_version],\r\n          hash\r\n        );\r\n      } else {\r\n        return hash;\r\n      }\r\n    }\r\n  }\r\n\r\n  function preSignedCheck(\r\n    bytes8 _mode,\r\n    address _token,\r\n    address _to,\r\n    uint256 _value,\r\n    uint256 _fee,\r\n    uint256 _nonce,\r\n    uint8 _version,\r\n    bytes _sig\r\n  ) public view returns (address) {\r\n    bytes32 hash = preSignedHashing(\r\n      _mode,\r\n      _token,\r\n      _to,\r\n      _value,\r\n      _fee,\r\n      _nonce,\r\n      _version\r\n    );\r\n\r\n    address _from = recover(hash, _sig);\r\n    require(_from != address(0));\r\n\r\n    return _from;\r\n  }\r\n\r\n  function transferPreSignedCheck(\r\n    address _token,\r\n    address _to,\r\n    uint256 _value,\r\n    uint256 _fee,\r\n    uint256 _nonce,\r\n    uint8 _version,\r\n    bytes _sig\r\n  ) external view returns (address) {\r\n    return preSignedCheck('Transfer', _token, _to, _value, _fee, _nonce, _version, _sig);\r\n  }\r\n\r\n  function approvePreSignedCheck(\r\n    address _token,\r\n    address _to,\r\n    uint256 _value,\r\n    uint256 _fee,\r\n    uint256 _nonce,\r\n    uint8 _version,\r\n    bytes _sig\r\n  ) external view returns (address) {\r\n    return preSignedCheck('Approval', _token, _to, _value, _fee, _nonce, _version, _sig);\r\n  }\r\n\r\n  function increaseApprovalPreSignedCheck(\r\n    address _token,\r\n    address _to,\r\n    uint256 _value,\r\n    uint256 _fee,\r\n    uint256 _nonce,\r\n    uint8 _version,\r\n    bytes _sig\r\n  ) external view returns (address) {\r\n    return preSignedCheck('IncApprv', _token, _to, _value, _fee, _nonce, _version, _sig);\r\n  }\r\n\r\n  function decreaseApprovalPreSignedCheck(\r\n    address _token,\r\n    address _to,\r\n    uint256 _value,\r\n    uint256 _fee,\r\n    uint256 _nonce,\r\n    uint8 _version,\r\n    bytes _sig\r\n  ) external view returns (address) {\r\n    return preSignedCheck('DecApprv', _token, _to, _value, _fee, _nonce, _version, _sig);\r\n  }\r\n}\r\n\r\n// File: contracts\\token\\MuzikaCoin.sol\r\n\r\ncontract MuzikaCoin is MintableToken, Pausable {\r\n  string public name = 'MUZIKA COIN';\r\n  string public symbol = 'MZK';\r\n  uint8 public decimals = 18;\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  event FreezeAddress(address indexed target);\r\n  event UnfreezeAddress(address indexed target);\r\n\r\n  event TransferPreSigned(\r\n    address indexed from,\r\n    address indexed to,\r\n    address indexed delegate,\r\n    uint256 value,\r\n    uint256 fee\r\n  );\r\n  event ApprovalPreSigned(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    address indexed delegate,\r\n    uint256 value,\r\n    uint256 fee\r\n  );\r\n\r\n  mapping (address => bool) public frozenAddress;\r\n\r\n  mapping (bytes => bool) internal _signatures;\r\n\r\n  PreSignedContract internal _preSignedContract = PreSignedContract(0xE55b5f4fAd5cD3923C392e736F58dEF35d7657b8);\r\n\r\n  modifier onlyNotFrozenAddress(address _target) {\r\n    require(!frozenAddress[_target]);\r\n    _;\r\n  }\r\n\r\n  modifier onlyFrozenAddress(address _target) {\r\n    require(frozenAddress[_target]);\r\n    _;\r\n  }\r\n\r\n  constructor(uint256 initialSupply) public {\r\n    totalSupply_ = initialSupply;\r\n    balances[msg.sender] = initialSupply;\r\n    emit Transfer(address(0), msg.sender, initialSupply);\r\n  }\r\n\r\n  /**\r\n   * @dev Freeze account(address)\r\n   *\r\n   * @param _target The address to freeze\r\n   */\r\n  function freezeAddress(address _target)\r\n    public\r\n    onlyOwner\r\n    onlyNotFrozenAddress(_target)\r\n  {\r\n    frozenAddress[_target] = true;\r\n\r\n    emit FreezeAddress(_target);\r\n  }\r\n\r\n  /**\r\n   * @dev Unfreeze account(address)\r\n   *\r\n   * @param _target The address to unfreeze\r\n   */\r\n  function unfreezeAddress(address _target)\r\n    public\r\n    onlyOwner\r\n    onlyFrozenAddress(_target)\r\n  {\r\n    delete frozenAddress[_target];\r\n\r\n    emit UnfreezeAddress(_target);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public onlyOwner {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    onlyNotFrozenAddress(msg.sender)\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    onlyNotFrozenAddress(_from)\r\n    onlyNotFrozenAddress(msg.sender)\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    onlyNotFrozenAddress(msg.sender)\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    onlyNotFrozenAddress(msg.sender)\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    onlyNotFrozenAddress(msg.sender)\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n\r\n  /**\r\n   * @dev Be careful to use delegateTransfer.\r\n   * @dev If attacker whose balance is less than sum of fee and amount\r\n   * @dev requests constantly transferring using delegateTransfer/delegateApprove to someone,\r\n   * @dev he or she may lose all ether to process these requests.\r\n   */\r\n  function transferPreSigned(\r\n    address _to,\r\n    uint256 _value,\r\n    uint256 _fee,\r\n    uint256 _nonce,\r\n    uint8 _version,\r\n    bytes _sig\r\n  )\r\n    public\r\n    onlyNotFrozenAddress(msg.sender)\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_signatures[_sig] == false);\r\n\r\n    address _from = _preSignedContract.transferPreSignedCheck(\r\n      address(this),\r\n      _to,\r\n      _value,\r\n      _fee,\r\n      _nonce,\r\n      _version,\r\n      _sig\r\n    );\r\n    require(!frozenAddress[_from]);\r\n\r\n    uint256 _burden = _value.add(_fee);\r\n    require(_burden <= balances[_from]);\r\n\r\n    balances[_from] = balances[_from].sub(_burden);\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[msg.sender] = balances[msg.sender].add(_fee);\r\n    emit Transfer(_from, _to, _value);\r\n    emit Transfer(_from, msg.sender, _fee);\r\n\r\n    _signatures[_sig] = true;\r\n    emit TransferPreSigned(_from, _to, msg.sender, _value, _fee);\r\n\r\n    return true;\r\n  }\r\n\r\n  function approvePreSigned(\r\n    address _to,\r\n    uint256 _value,\r\n    uint256 _fee,\r\n    uint256 _nonce,\r\n    uint8 _version,\r\n    bytes _sig\r\n  )\r\n    public\r\n    onlyNotFrozenAddress(msg.sender)\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    require(_signatures[_sig] == false);\r\n\r\n    address _from = _preSignedContract.approvePreSignedCheck(\r\n      address(this),\r\n      _to,\r\n      _value,\r\n      _fee,\r\n      _nonce,\r\n      _version,\r\n      _sig\r\n    );\r\n\r\n    require(!frozenAddress[_from]);\r\n    require(_fee <= balances[_from]);\r\n\r\n    allowed[_from][_to] = _value;\r\n    emit Approval(_from, _to, _value);\r\n\r\n    if (_fee > 0) {\r\n      balances[_from] = balances[_from].sub(_fee);\r\n      balances[msg.sender] = balances[msg.sender].add(_fee);\r\n      emit Transfer(_from, msg.sender, _fee);\r\n    }\r\n\r\n    _signatures[_sig] = true;\r\n    emit ApprovalPreSigned(_from, _to, msg.sender, _value, _fee);\r\n\r\n    return true;\r\n  }\r\n\r\n  function increaseApprovalPreSigned(\r\n    address _to,\r\n    uint256 _value,\r\n    uint256 _fee,\r\n    uint256 _nonce,\r\n    uint8 _version,\r\n    bytes _sig\r\n  )\r\n    public\r\n    onlyNotFrozenAddress(msg.sender)\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    require(_signatures[_sig] == false);\r\n\r\n    address _from = _preSignedContract.increaseApprovalPreSignedCheck(\r\n      address(this),\r\n      _to,\r\n      _value,\r\n      _fee,\r\n      _nonce,\r\n      _version,\r\n      _sig\r\n    );\r\n\r\n    require(!frozenAddress[_from]);\r\n    require(_fee <= balances[_from]);\r\n\r\n    allowed[_from][_to] = allowed[_from][_to].add(_value);\r\n    emit Approval(_from, _to, allowed[_from][_to]);\r\n\r\n    if (_fee > 0) {\r\n      balances[_from] = balances[_from].sub(_fee);\r\n      balances[msg.sender] = balances[msg.sender].add(_fee);\r\n      emit Transfer(_from, msg.sender, _fee);\r\n    }\r\n\r\n    _signatures[_sig] = true;\r\n    emit ApprovalPreSigned(_from, _to, msg.sender, allowed[_from][_to], _fee);\r\n\r\n    return true;\r\n  }\r\n\r\n  function decreaseApprovalPreSigned(\r\n    address _to,\r\n    uint256 _value,\r\n    uint256 _fee,\r\n    uint256 _nonce,\r\n    uint8 _version,\r\n    bytes _sig\r\n  )\r\n    public\r\n    onlyNotFrozenAddress(msg.sender)\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    require(_signatures[_sig] == false);\r\n\r\n    address _from = _preSignedContract.decreaseApprovalPreSignedCheck(\r\n      address(this),\r\n      _to,\r\n      _value,\r\n      _fee,\r\n      _nonce,\r\n      _version,\r\n      _sig\r\n    );\r\n    require(!frozenAddress[_from]);\r\n\r\n    require(_fee <= balances[_from]);\r\n\r\n    uint256 oldValue = allowed[_from][_to];\r\n    if (_value > oldValue) {\r\n      oldValue = 0;\r\n    } else {\r\n      oldValue = oldValue.sub(_value);\r\n    }\r\n\r\n    allowed[_from][_to] = oldValue;\r\n    emit Approval(_from, _to, oldValue);\r\n\r\n    if (_fee > 0) {\r\n      balances[_from] = balances[_from].sub(_fee);\r\n      balances[msg.sender] = balances[msg.sender].add(_fee);\r\n      emit Transfer(_from, msg.sender, _fee);\r\n    }\r\n\r\n    _signatures[_sig] = true;\r\n    emit ApprovalPreSigned(_from, _to, msg.sender, oldValue, _fee);\r\n\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_version\",\"type\":\"uint8\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"transferPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"freezeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_version\",\"type\":\"uint8\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"increaseApprovalPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_version\",\"type\":\"uint8\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"decreaseApprovalPreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"unfreezeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_version\",\"type\":\"uint8\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"approvePreSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"FreezeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"UnfreezeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TransferPreSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ApprovalPreSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MuzikaCoin","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"15000","ConstructorArguments":"00000000000000000000000000000000000000000052b7d2dcc80cd2e4000000","Library":"","SwarmSource":"bzzr://99d6804b0d99919ce4897f7ea6eb5e5b16df2bd5527f50b228152792e906dfed"}]}