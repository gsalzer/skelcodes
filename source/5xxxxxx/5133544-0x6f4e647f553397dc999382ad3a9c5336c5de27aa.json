{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Owned {\r\n  // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n  address public ceoAddress;\r\n  address public cooAddress;\r\n  address private newCeoAddress;\r\n  address private newCooAddress;\r\n\r\n  function Owned() public {\r\n      ceoAddress = msg.sender;\r\n      cooAddress = msg.sender;\r\n  }\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n\r\n  /// @dev Access modifier for COO-only functionality\r\n  modifier onlyCOO() {\r\n    require(msg.sender == cooAddress);\r\n    _;\r\n  }\r\n\r\n  /// Access modifier for contract owner only functionality\r\n  modifier onlyCLevel() {\r\n    require(\r\n      msg.sender == ceoAddress ||\r\n      msg.sender == cooAddress\r\n    );\r\n    _;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n    newCeoAddress = _newCEO;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\r\n  /// @param _newCOO The address of the new COO\r\n  function setCOO(address _newCOO) public onlyCEO {\r\n    require(_newCOO != address(0));\r\n    newCooAddress = _newCOO;\r\n  }\r\n\r\n  function acceptCeoOwnership() public {\r\n      require(msg.sender == newCeoAddress);\r\n      require(address(0) != newCeoAddress);\r\n      ceoAddress = newCeoAddress;\r\n      newCeoAddress = address(0);\r\n  }\r\n\r\n  function acceptCooOwnership() public {\r\n      require(msg.sender == newCooAddress);\r\n      require(address(0) != newCooAddress);\r\n      cooAddress = newCooAddress;\r\n      newCooAddress = address(0);\r\n  }\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol\r\n// ----------------------------------------------------------------------------\r\ncontract YouCollectBase is Owned {\r\n  using SafeMath for uint256;\r\n\r\n  /*** CONSTANTS ***/\r\n  string public constant NAME = \"Crypto - YouCollect\";\r\n  string public constant SYMBOL = \"CYC\";\r\n  uint8 public constant DECIMALS = 18;  \r\n\r\n  uint256 public totalSupply;\r\n  uint256 constant private MAX_UINT256 = 2**256 - 1;\r\n  mapping (address => uint256) public balances;\r\n  mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  /// @dev Required for ERC-20 compliance.\r\n  function name() public pure returns (string) {\r\n    return NAME;\r\n  }\r\n\r\n  /// @dev Required for ERC-20 compliance.\r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n  /// @dev Required for ERC-20 compliance.\r\n  function decimals() public pure returns (uint8) {\r\n    return DECIMALS;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {\r\n      require(balances[msg.sender] >= _value);\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n      uint256 allowance = allowed[_from][msg.sender];\r\n      require(balances[_from] >= _value && allowance >= _value);\r\n      balances[_to] += _value;\r\n      balances[_from] -= _value;\r\n      if (allowance < MAX_UINT256) {\r\n          allowed[_from][msg.sender] -= _value;\r\n      }\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n      return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool success) {\r\n      allowed[msg.sender][_spender] = _value;\r\n      Approval(msg.sender, _spender, _value);\r\n      return true;\r\n  }\r\n\r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n      allowed[msg.sender][_spender] = _value;\r\n      Approval(msg.sender, _spender, _value);\r\n\r\n      require(_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\r\n      return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n  }   \r\n\r\n\r\n  // Payout\r\n  function payout(address _to) public onlyCLevel {\r\n    _payout(_to, this.balance);\r\n  }\r\n  function payout(address _to, uint amount) public onlyCLevel {\r\n    if (amount>this.balance)\r\n      amount = this.balance;\r\n    _payout(_to, amount);\r\n  }\r\n  function _payout(address _to, uint amount) private {\r\n    if (_to == address(0)) {\r\n      ceoAddress.transfer(amount);\r\n    } else {\r\n      _to.transfer(amount);\r\n    }\r\n  }\r\n}\r\n\r\ncontract ERC721YC is YouCollectBase {\r\n  /*** STORAGE ***/\r\n  uint256[] public tokens;\r\n  mapping (uint => bool) public unlocked;\r\n\r\n  /// @dev A mapping from collectible IDs to the address that owns them. All collectibles have\r\n  ///  some valid owner address.\r\n  mapping (uint256 => address) public tokenIndexToOwner;\r\n\r\n  /// @dev A mapping from CollectibleIDs to an address that has been approved to call\r\n  ///  transferFrom(). Each Collectible can only have one approved address for transfer\r\n  ///  at any time. A zero value means no approval is outstanding.\r\n  mapping (uint256 => address) public tokenIndexToApproved;\r\n\r\n  // @dev A mapping from CollectibleIDs to the price of the token.\r\n  mapping (uint256 => uint256) public tokenIndexToPrice;\r\n\r\n  /*** EVENTS ***/\r\n  /// @dev The Birth event is fired whenever a new collectible comes into existence.\r\n  event Birth(uint256 tokenId, uint256 startPrice);\r\n  /// @dev The TokenSold event is fired whenever a token is sold.\r\n  event TokenSold(uint256 indexed tokenId, uint256 price, address prevOwner, address winner);\r\n  // ERC721 Transfer\r\n  event TransferToken(address indexed from, address indexed to, uint256 tokenId);\r\n  // ERC721 Approval\r\n  event ApprovalToken(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n  /*** PUBLIC FUNCTIONS ***/\r\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n  ///  clear all approvals.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function approveToken(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    // Caller must own token.\r\n    require(_ownsToken(msg.sender, _tokenId));\r\n\r\n    tokenIndexToApproved[_tokenId] = _to;\r\n\r\n    ApprovalToken(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n\r\n  function getTotalTokenSupply() public view returns (uint) {\r\n    return tokens.length;\r\n  }\r\n\r\n  function implementsERC721YC() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n\r\n  /// For querying owner of token\r\n  /// @param _tokenId The tokenID for owner inquiry\r\n  /// @dev Required for ERC-721 compliance.\r\n  function ownerOf(uint256 _tokenId)\r\n    public\r\n    view\r\n    returns (address owner)\r\n  {\r\n    owner = tokenIndexToOwner[_tokenId];\r\n  }\r\n\r\n\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    price = tokenIndexToPrice[_tokenId];\r\n    if (price == 0)\r\n      price = getInitialPriceOfToken(_tokenId);\r\n  }\r\n\r\n\r\n  /// @notice Allow pre-approved user to take ownership of a token\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = tokenIndexToOwner[_tokenId];\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transferToken(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  /// Owner initates the transfer of the token to another account\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transferToken(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_ownsToken(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transferToken(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// Third-party initiates transfer of token from address _from to address _to\r\n  /// @param _from The address for the token to be transferred from.\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transferTokenFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_ownsToken(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transferToken(_from, _to, _tokenId);\r\n  }\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// For checking approval of transfer for address _to\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return tokenIndexToApproved[_tokenId] == _to;\r\n  }\r\n\r\n  /// For creating Collectible\r\n  function _createCollectible(uint256 tokenId, uint256 _price) internal {\r\n    tokenIndexToPrice[tokenId] = _price;\r\n    Birth(tokenId, _price);\r\n    tokens.push(tokenId);\r\n    unlocked[tokenId] = true;\r\n  }\r\n\r\n  /// Check for token ownership\r\n  function _ownsToken(address claimant, uint256 _tokenId) public view returns (bool) {\r\n    return claimant == tokenIndexToOwner[_tokenId];\r\n  }\r\n\r\n\r\n  // allows owners of tokens to decrease the price of them or if there is no owner the coo can do it\r\n  bool isTokenChangePriceLocked = true;\r\n  function changeTokenPrice(uint256 newPrice, uint256 _tokenId) public {\r\n    require((_ownsToken(msg.sender, _tokenId) && !isTokenChangePriceLocked) || (_ownsToken(address(0), _tokenId) && msg.sender == cooAddress));\r\n    require(newPrice<tokenIndexToPrice[_tokenId]);\r\n    tokenIndexToPrice[_tokenId] = newPrice;\r\n  }\r\n  function unlockToken(uint tokenId) public onlyCOO {\r\n    unlocked[tokenId] = true;\r\n  }\r\n  function unlockTokenPriceChange() public onlyCOO {\r\n    isTokenChangePriceLocked = false;\r\n  }\r\n  function isChangePriceLocked() public view returns (bool) {\r\n    return isTokenChangePriceLocked;\r\n  }\r\n\r\n\r\n  /// create Tokens for Token Owners in alpha Game\r\n  function createPromoCollectible(uint256 tokenId, address _owner, uint256 _price) public onlyCOO {\r\n    require(tokenIndexToOwner[tokenId]==address(0));\r\n\r\n    address collectibleOwner = _owner;\r\n    if (collectibleOwner == address(0)) {\r\n      collectibleOwner = cooAddress;\r\n    }\r\n\r\n    if (_price <= 0) {\r\n      _price = getInitialPriceOfToken(tokenId);\r\n    }\r\n\r\n    _createCollectible(tokenId, _price);\r\n    // This will assign ownership, and also emit the Transfer event as\r\n    // per ERC721 draft\r\n    _transferToken(address(0), collectibleOwner, tokenId);\r\n\r\n  }\r\n\r\n\r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  function tokenBalanceOf(address _owner) public view returns (uint256 result) {\r\n      uint256 totalTokens = tokens.length;\r\n      uint256 tokenIndex;\r\n      uint256 tokenId;\r\n      result = 0;\r\n      for (tokenIndex = 0; tokenIndex < totalTokens; tokenIndex++) {\r\n        tokenId = tokens[tokenIndex];\r\n        if (tokenIndexToOwner[tokenId] == _owner) {\r\n          result = result.add(1);\r\n        }\r\n      }\r\n      return result;\r\n  }\r\n\r\n  /// @dev Assigns ownership of a specific Collectible to an address.\r\n  function _transferToken(address _from, address _to, uint256 _tokenId) internal {\r\n    //transfer ownership\r\n    tokenIndexToOwner[_tokenId] = _to;\r\n\r\n    // When creating new collectibles _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      // clear any previously approved ownership exchange\r\n      delete tokenIndexToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    TransferToken(_from, _to, _tokenId);\r\n  }\r\n\r\n\r\n   /// @param _owner The owner whose celebrity tokens we are interested in.\r\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n  ///  expensive (it walks the entire tokens array looking for tokens belonging to owner),\r\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n  ///  not contract-to-contract calls.\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalTokens = getTotalTokenSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 tokenIndex;\r\n      uint256 tokenId;\r\n      for (tokenIndex = 0; tokenIndex < totalTokens; tokenIndex++) {\r\n        tokenId = tokens[tokenIndex];\r\n        if (tokenIndexToOwner[tokenId] == _owner) {\r\n          result[resultIndex] = tokenId;\r\n          resultIndex = resultIndex.add(1);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /// @dev returns an array with all token ids\r\n  function getTokenIds() public view returns(uint256[]) {\r\n    return tokens;\r\n  }\r\n\r\n  function getInitialPriceOfToken(uint tokenId) public pure returns (uint);\r\n}\r\n\r\ncontract CollectibleToken is ERC721YC {\r\n\r\n  uint256 private constant STARTING_PRICE = 0.001 ether;\r\n\r\n  uint256 private constant FIRST_STEP_LIMIT =  0.053613 ether;\r\n  uint256 private constant SECOND_STEP_LIMIT = 0.564957 ether;\r\n\r\n  uint private constant MASTER_TOKEN_ID = 0;\r\n\r\n  function CollectibleToken() public {\r\n    balances[msg.sender] = 10000000000000000000;\r\n    totalSupply = 10000000000000000000;\r\n\r\n  }\r\n\r\n  function getInitialPriceOfToken(uint _tokenId) public pure returns (uint) {\r\n    if (_tokenId > 0)\r\n      return STARTING_PRICE;\r\n    return 10 ether;\r\n  }\r\n\r\n\r\n  function getNextPrice(uint sellingPrice) public pure returns (uint) {\r\n    if (sellingPrice < FIRST_STEP_LIMIT) {\r\n      return sellingPrice.mul(200).div(93);\r\n    } else if (sellingPrice < SECOND_STEP_LIMIT) {\r\n      return sellingPrice.mul(120).div(93);\r\n    } else {\r\n      return sellingPrice.mul(115).div(93);\r\n    }\r\n  }\r\n\r\n  /// @notice Returns all the relevant information about a specific collectible.\r\n  /// @param _tokenId The tokenId of the collectible of interest.\r\n  function getCollectible(uint256 _tokenId) public view returns (uint256 tokenId,\r\n    uint256 sellingPrice,\r\n    address owner,\r\n    uint256 nextSellingPrice\r\n  ) {\r\n    tokenId = _tokenId;\r\n    sellingPrice = tokenIndexToPrice[_tokenId];\r\n    owner = tokenIndexToOwner[_tokenId];\r\n\r\n    if (sellingPrice == 0)\r\n      sellingPrice = getInitialPriceOfToken(_tokenId);\r\n\r\n    nextSellingPrice = getNextPrice(sellingPrice);\r\n  }\r\n\r\n  // Allows someone to send ether and obtain the token\r\n  function purchase(uint256 _tokenId) public payable {\r\n    address oldOwner = tokenIndexToOwner[_tokenId];\r\n    uint256 sellingPrice = tokenIndexToPrice[_tokenId];\r\n    require(oldOwner!=msg.sender || sellingPrice > 1 ether);\r\n\r\n    if (sellingPrice == 0) {\r\n      sellingPrice = getInitialPriceOfToken(_tokenId);\r\n    }\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(msg.sender != address(0));\r\n\r\n    require(msg.value >= sellingPrice);\r\n    uint256 purchaseExcess = msg.value.sub(sellingPrice);\r\n\r\n    uint256 payment = sellingPrice.mul(93).div(100);\r\n    uint256 feeOnce = sellingPrice.sub(payment).div(7);\r\n\r\n    tokenIndexToPrice[_tokenId] = getNextPrice(sellingPrice);\r\n\r\n    // Transfers the Token\r\n    tokenIndexToOwner[_tokenId] = msg.sender;\r\n    TokenSold(_tokenId, sellingPrice, oldOwner, msg.sender);\r\n    TransferToken(oldOwner, msg.sender, _tokenId);\r\n\r\n    if (oldOwner != address(0)) {\r\n      // clear any previously approved ownership exchange\r\n      delete tokenIndexToApproved[_tokenId];\r\n      // Payment for old owner and new owner\r\n      _payoutMining(_tokenId, oldOwner, msg.sender);\r\n      if (sellingPrice > 3 ether)\r\n        levelUpMining(_tokenId);\r\n      oldOwner.transfer(payment);\r\n    } else {\r\n      require(unlocked[_tokenId]);\r\n      Birth(_tokenId, sellingPrice);\r\n      tokens.push(_tokenId);\r\n      createMineForToken(_tokenId);\r\n    }\r\n\r\n    if (_tokenId > 0 && tokenIndexToOwner[MASTER_TOKEN_ID]!=address(0)) {\r\n      // Taxes for YouCollect-Token owner\r\n      tokenIndexToOwner[MASTER_TOKEN_ID].transfer(feeOnce);\r\n    }\r\n    // refund when paid too much\r\n    if (purchaseExcess>0)\r\n      msg.sender.transfer(purchaseExcess);\r\n  }\r\n  \r\n  \r\n  //\r\n  //  Mining\r\n  //\r\n    event MiningUpgrade(address indexed sender, uint indexed token, uint amount);\r\n    event MiningLevelup(address indexed sender, uint indexed token, uint power);\r\n    event MiningPayout(address indexed sender, uint indexed token, uint amount);\r\n    event MiningStolenPayout(address indexed sender, address indexed oldOwner, uint indexed token, uint amount);\r\n\r\n    mapping (uint => uint) miningPower;\r\n    mapping (uint => uint) miningPushed;\r\n    mapping (uint => uint) miningNextLevelBreak;\r\n    mapping (uint => uint) miningLastPayoutBlock;\r\n\r\n    uint earningsEachBlock = 173611111111111;\r\n    uint FIRST_MINING_LEVEL_COST = 1333333333333333333;\r\n\r\n    function changeEarnings(uint amount) public onlyCOO {\r\n      earningsEachBlock = amount;\r\n      require(earningsEachBlock>0);\r\n    }\r\n\r\n    function createMineForToken(uint tokenId) private {\r\n      miningPower[tokenId] = 1;\r\n      miningNextLevelBreak[tokenId] = FIRST_MINING_LEVEL_COST;\r\n      miningLastPayoutBlock[tokenId] = block.number;\r\n    }\r\n    function createMineForToken(uint tokenId, uint power, uint xp, uint nextLevelBreak) public onlyCOO {\r\n      miningPower[tokenId] = power;\r\n      miningPushed[tokenId] = xp;\r\n      miningNextLevelBreak[tokenId] = nextLevelBreak;\r\n      miningLastPayoutBlock[tokenId] = block.number;\r\n    }\r\n\r\n    function upgradeMining(uint tokenId, uint coins) public {\r\n      require(balanceOf(msg.sender)>=coins);\r\n      uint nextLevelBreak = miningNextLevelBreak[tokenId];\r\n      balances[msg.sender] -= coins;\r\n      uint xp = miningPushed[tokenId]+coins;\r\n      if (xp>nextLevelBreak) {\r\n        uint power = miningPower[tokenId];\r\n        if (miningLastPayoutBlock[tokenId] < block.number) {\r\n          _payoutMining(tokenId, ownerOf(tokenId));\r\n        }\r\n        while (xp>nextLevelBreak) {\r\n          nextLevelBreak = nextLevelBreak.mul(13).div(4);\r\n          power = power.mul(2);\r\n          MiningLevelup(msg.sender, tokenId, power);\r\n        }\r\n        miningNextLevelBreak[tokenId] = nextLevelBreak;\r\n        miningPower[tokenId] = power;\r\n      }\r\n      miningPushed[tokenId] = xp;\r\n      Transfer(msg.sender, this, coins);\r\n      MiningUpgrade(msg.sender, tokenId, coins);\r\n    }\r\n\r\n    function levelUpMining(uint tokenId) private {\r\n      uint diffToNextLevel = getCostToNextLevel(tokenId);\r\n      miningNextLevelBreak[tokenId] = miningNextLevelBreak[tokenId].mul(13).div(4);\r\n      miningPushed[tokenId] = miningNextLevelBreak[tokenId].sub(diffToNextLevel);\r\n      miningPower[tokenId] = miningPower[tokenId].mul(2);\r\n      MiningLevelup(msg.sender, tokenId, miningPower[tokenId]);\r\n    }\r\n\r\n    function payoutMining(uint tokenId) public {\r\n      require(_ownsToken(msg.sender, tokenId));\r\n      require(miningLastPayoutBlock[tokenId] < block.number);\r\n      _payoutMining(tokenId, msg.sender);\r\n    }\r\n\r\n    function _payoutMining(uint tokenId, address owner) private {\r\n      uint coinsMined = block.number.sub(miningLastPayoutBlock[tokenId]).mul(earningsEachBlock).mul(miningPower[tokenId]);\r\n      miningLastPayoutBlock[tokenId] = block.number;\r\n      balances[owner] = balances[owner].add(coinsMined);\r\n      totalSupply = totalSupply.add(coinsMined);\r\n      MiningPayout(owner, tokenId, coinsMined);\r\n    }\r\n    function _payoutMining(uint tokenId, address owner, address newOwner) private {\r\n      uint coinsMinedHalf = block.number.sub(miningLastPayoutBlock[tokenId]).mul(earningsEachBlock).mul(miningPower[tokenId]).div(2);\r\n      miningLastPayoutBlock[tokenId] = block.number;\r\n      balances[owner] = balances[owner].add(coinsMinedHalf);\r\n      balances[newOwner] = balances[newOwner].add(coinsMinedHalf);\r\n      totalSupply = totalSupply.add(coinsMinedHalf.mul(2));\r\n      MiningStolenPayout(newOwner, owner, tokenId, coinsMinedHalf);\r\n    }\r\n\r\n    function getCostToNextLevel(uint tokenId) public view returns (uint) {\r\n      return miningNextLevelBreak[tokenId]-miningPushed[tokenId];\r\n    }\r\n\r\n    function getMiningMeta(uint tokenId) public view returns (uint earnEachBlock, uint mined, uint xp, uint nextLevelUp, uint lastPayoutBlock, uint power) {\r\n      earnEachBlock = miningPower[tokenId].mul(earningsEachBlock);\r\n      mined = block.number.sub(miningLastPayoutBlock[tokenId]).mul(earningsEachBlock).mul(miningPower[tokenId]);\r\n      xp = miningPushed[tokenId];\r\n      nextLevelUp = miningNextLevelBreak[tokenId];\r\n      lastPayoutBlock = miningLastPayoutBlock[tokenId];\r\n      power = miningPower[tokenId];\r\n    }\r\n\r\n    function getCollectibleWithMeta(uint256 tokenId) public view returns (uint256 _tokenId, uint256 sellingPrice, address owner, uint256 nextSellingPrice, uint earnEachBlock, uint mined, uint xp, uint nextLevelUp, uint lastPayoutBlock, uint power) {\r\n      _tokenId = tokenId;\r\n      sellingPrice = tokenIndexToPrice[tokenId];\r\n      owner = tokenIndexToOwner[tokenId];\r\n      if (sellingPrice == 0)\r\n        sellingPrice = getInitialPriceOfToken(tokenId);\r\n\r\n      nextSellingPrice = getNextPrice(sellingPrice);\r\n      earnEachBlock = miningPower[tokenId].mul(earningsEachBlock);\r\n      uint lastMinedBlock = miningLastPayoutBlock[tokenId];\r\n      mined = block.number.sub(lastMinedBlock).mul(earningsEachBlock).mul(miningPower[tokenId]);\r\n      xp = miningPushed[tokenId];\r\n      nextLevelUp = miningNextLevelBreak[tokenId];\r\n      lastPayoutBlock = miningLastPayoutBlock[tokenId];\r\n      power = miningPower[tokenId];\r\n    }\r\n    function getEarnEachBlock() public view returns (uint) {\r\n      return earningsEachBlock;\r\n    }\r\n\r\n    /// create Tokens for Token Owners in alpha Game\r\n    function createPromoCollectibleWithMining(uint256 tokenId, address _owner, uint256 _price, uint256 power, uint256 xp, uint256 nextLevelBreak) public onlyCOO {\r\n      require(tokenIndexToOwner[tokenId]==address(0));\r\n\r\n      address collectibleOwner = _owner;\r\n      if (collectibleOwner == address(0)) {\r\n        collectibleOwner = cooAddress;\r\n      }\r\n\r\n      if (_price <= 0) {\r\n        _price = getInitialPriceOfToken(tokenId);\r\n      }\r\n\r\n      _createCollectible(tokenId, _price);\r\n      createMineForToken(tokenId, power, xp, nextLevelBreak);\r\n      // This will assign ownership, and also emit the Transfer event as\r\n      // per ERC721 draft\r\n      _transferToken(address(0), collectibleOwner, tokenId);\r\n\r\n    }\r\n\r\n    /// create Tokens for Token Owners in alpha Game\r\n    function createPromoCollectiblesWithMining(uint256[] tokenId, address[] _owner, uint256[] _price, uint256[] power, uint256[] xp, uint256[] nextLevelBreak) public onlyCOO {\r\n      address collectibleOwner;\r\n      for (uint i = 0; i < tokenId.length; i++) {\r\n        require(tokenIndexToOwner[tokenId[i]]==address(0));\r\n\r\n        collectibleOwner = _owner[i];\r\n        if (collectibleOwner == address(0)) {\r\n          collectibleOwner = cooAddress;\r\n        }\r\n\r\n        if (_price[i] <= 0) {\r\n          _createCollectible(tokenId[i], getInitialPriceOfToken(tokenId[i]));\r\n        } else {\r\n          _createCollectible(tokenId[i], _price[i]);\r\n        }\r\n\r\n        createMineForToken(tokenId[i], power[i], xp[i], nextLevelBreak[i]);\r\n        // This will assign ownership, and also emit the Transfer event as\r\n        // per ERC721 draft\r\n        _transferToken(address(0), collectibleOwner, tokenId[i]);\r\n      }\r\n\r\n    }\r\n  //\r\n  //  Mining end\r\n  //\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"coins\",\"type\":\"uint256\"}],\"name\":\"upgradeMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTokenPriceChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"power\",\"type\":\"uint256\"},{\"name\":\"xp\",\"type\":\"uint256\"},{\"name\":\"nextLevelBreak\",\"type\":\"uint256\"}],\"name\":\"createPromoCollectibleWithMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getInitialPriceOfToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"claimant\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_ownsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEarnEachBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721YC\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"changeTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"payoutMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isChangePriceLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMiningMeta\",\"outputs\":[{\"name\":\"earnEachBlock\",\"type\":\"uint256\"},{\"name\":\"mined\",\"type\":\"uint256\"},{\"name\":\"xp\",\"type\":\"uint256\"},{\"name\":\"nextLevelUp\",\"type\":\"uint256\"},{\"name\":\"lastPayoutBlock\",\"type\":\"uint256\"},{\"name\":\"power\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCollectible\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"nextSellingPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"name\":\"_owner\",\"type\":\"address[]\"},{\"name\":\"_price\",\"type\":\"uint256[]\"},{\"name\":\"power\",\"type\":\"uint256[]\"},{\"name\":\"xp\",\"type\":\"uint256[]\"},{\"name\":\"nextLevelBreak\",\"type\":\"uint256[]\"}],\"name\":\"createPromoCollectiblesWithMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptCooOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"power\",\"type\":\"uint256\"},{\"name\":\"xp\",\"type\":\"uint256\"},{\"name\":\"nextLevelBreak\",\"type\":\"uint256\"}],\"name\":\"createMineForToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sellingPrice\",\"type\":\"uint256\"}],\"name\":\"getNextPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeEarnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferTokenFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createPromoCollectible\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unlockToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCollectibleWithMeta\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"nextSellingPrice\",\"type\":\"uint256\"},{\"name\":\"earnEachBlock\",\"type\":\"uint256\"},{\"name\":\"mined\",\"type\":\"uint256\"},{\"name\":\"xp\",\"type\":\"uint256\"},{\"name\":\"nextLevelUp\",\"type\":\"uint256\"},{\"name\":\"lastPayoutBlock\",\"type\":\"uint256\"},{\"name\":\"power\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptCeoOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCostToNextLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MiningUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"MiningLevelup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MiningPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MiningStolenPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TransferToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ApprovalToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CollectibleToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://583403ae15ccd3fbdd40c6ae79041eb95bd3a28f2f6574186d56e21f468fd407"}]}