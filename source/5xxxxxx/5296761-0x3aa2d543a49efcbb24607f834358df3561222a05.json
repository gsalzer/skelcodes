{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    mapping(address => uint256) balances;\r\n}\r\ncontract AthTokenInterface is ERC20{\r\n\r\n  function delivery( address _to, uint256 _amount ) public returns( bool );\r\n  function afterIco( uint256 _redemptionPrice ) public  returns( bool );\r\n  function currentBalance() public returns( uint256 );\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Crowdsale is Ownable{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    bool _initialize = false;\r\n    \r\n    AthTokenInterface token;\r\n\r\n    enum CrowdsaleStates { Disabled, Presale, ICO1, ICO2, ICO3, ICO4, Finished }\r\n    \r\n    uint256 public presale                  = 750000  ether;\r\n    uint256 public bounty                   = 500000  ether;\r\n    uint256 public constant price           = 0.00024 ether;\r\n    uint256 public constant threshold       = 50000 ether;\r\n    uint256 public constant min             = price * 500;\r\n    uint256 public constant hardcap         = 1000 ether; \r\n    uint256 public          totalEth        = 0;\r\n    \r\n    uint256 public constant affiliatThreshold1 = 1 * min;\r\n    uint256 public constant affiliatThreshold2 = 10 * min;\r\n    uint256 public constant affiliatThreshold3 = 50 * min;\r\n    uint256 public constant affiliatThreshold4 = 100 * min;\r\n    \r\n    uint256 public icoTimeStart          = 0;\r\n    uint256 public ICO1Period            = 1 days;\r\n    uint256 public ICO2Period            = 7 days + ICO1Period;\r\n    uint256 public ICO3Period            = 10 days + ICO2Period;\r\n    uint256 public ICO4Period            = 12 days + ICO3Period;\r\n    \r\n    \r\n    address[] owners;\r\n    \r\n    \r\n    CrowdsaleStates public CrowdsaleState = CrowdsaleStates.Disabled;\r\n    \r\n    modifier icoActive {\r\n        require( \r\n               getCrowdsaleState() == CrowdsaleStates.Presale \r\n            || getCrowdsaleState() == CrowdsaleStates.ICO1 \r\n            || getCrowdsaleState() == CrowdsaleStates.ICO2 \r\n            || getCrowdsaleState() == CrowdsaleStates.ICO3\r\n            || getCrowdsaleState() == CrowdsaleStates.ICO4\r\n            );\r\n        _;\r\n    }\r\n    \r\n    modifier Finished {\r\n        require( getCrowdsaleState() == CrowdsaleStates.Finished );\r\n        _;\r\n    }\r\n    modifier notFinished {\r\n        require( getCrowdsaleState() != CrowdsaleStates.Finished );\r\n        _;\r\n    }\r\n    \r\n    modifier Initialized {\r\n        require( _initialize );\r\n        _;\r\n    }\r\n    \r\n    \r\n    \r\n    event NewInvestor( address );\r\n    event NewReferrer( address );\r\n    event Referral( address, address, uint256, uint256 );\r\n    event Bounty( address, uint256 );\r\n    event Swap( address, address, uint256 );\r\n    event NewSwapToken( address );\r\n    event Delivery( address, uint256 );\r\n    \r\n    \r\n    \r\n    mapping( address => uint256 ) investorsTotalBalances;\r\n    mapping( address => uint256 ) investorsStock;\r\n    mapping( address => bool ) investorsCheck;\r\n    address[] public investors;\r\n    \r\n    \r\n    \r\n    mapping( address => bool ) referrers;\r\n    address[] public referrersList;\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function initialize( address _a, address[] _owners ) public onlyOwner returns( bool )\r\n    {\r\n        require( _a != address(0) && _owners.length == 2 && _owners[0] != address(0) && _owners[1] != address(0) && !_initialize );\r\n        \r\n        \r\n        token = AthTokenInterface( _a );\r\n        owners = _owners;\r\n        _initialize = true;\r\n    }\r\n\r\n    \r\n    function getOwners(uint8 _i) public constant returns( address )\r\n    {\r\n        return owners[_i];\r\n    }\r\n    \r\n   \r\n    \r\n    function referrersCount() public constant returns( uint256 )\r\n    {\r\n        return referrersList.length;\r\n    }\r\n    \r\n    \r\n    \r\n    function regReferrer( address _a ) public onlyOwner Initialized returns( bool )\r\n    {\r\n        if( referrers[_a] != true ) {\r\n            \r\n            referrers[_a] = true;\r\n            referrersList.push( _a );\r\n            \r\n            NewReferrer( _a );\r\n            \r\n        }\r\n    }\r\n    function regReferrers( address[] _a ) public onlyOwner Initialized returns( bool )\r\n    {\r\n        for( uint256 i = 0; i <= _a.length - 1; i++ ){\r\n            \r\n            if( referrers[_a[i]] != true ) {\r\n            \r\n                referrers[_a[i]] = true;\r\n                referrersList.push( _a[i] );\r\n                \r\n                NewReferrer( _a[i] );\r\n                \r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    function referralBonusCalculate( uint256 _amount, uint256 _amountTokens ) public pure returns( uint256 )\r\n    {\r\n        uint256 amount = 0;\r\n        \r\n        if( _amount < affiliatThreshold2  )  amount =  _amountTokens.mul( 7 ).div( 100 );\r\n        if( _amount < affiliatThreshold3  )  amount =  _amountTokens.mul( 10 ).div( 100 );\r\n        if( _amount < affiliatThreshold4  )  amount =  _amountTokens.mul( 15 ).div( 100 );\r\n        if( _amount >= affiliatThreshold4  ) amount =  _amountTokens.mul( 20 ).div( 100 );\r\n        \r\n        return amount;\r\n    }\r\n    \r\n    function referrerBonusCalculate( uint256 _amount ) public pure returns( uint256 )\r\n    {\r\n        uint256 amount = 0;\r\n        \r\n        if( _amount < affiliatThreshold2  )  amount =  _amount.mul( 3 ).div( 100 );\r\n        if( _amount < affiliatThreshold3  )  amount =  _amount.mul( 7 ).div( 100 );\r\n        if( _amount < affiliatThreshold4  )  amount =  _amount.mul( 10 ).div( 100 );\r\n        if( _amount >= affiliatThreshold4  ) amount =  _amount.mul( 15 ).div( 100 );\r\n        \r\n        return amount;\r\n    }\r\n    \r\n    \r\n    function redemptionPriceCalculate( uint256 _ath ) public pure returns( uint256 )\r\n    {\r\n        if( _ath >= 3333333 ether ) return price.mul( 150 ).div( 100 );\r\n        if( _ath >= 2917777 ether ) return price.mul( 145 ).div( 100 );\r\n        if( _ath >= 2500000 ether ) return price.mul( 140 ).div( 100 );\r\n        if( _ath >= 2083333 ether ) return price.mul( 135 ).div( 100 );\r\n        if( _ath >= 1700000 ether ) return price.mul( 130 ).div( 100 );\r\n        if( _ath >= 1250000 ether ) return price.mul( 125 ).div( 100 );  \r\n        \r\n        return price;\r\n    }\r\n    \r\n   \r\n    function() public payable\r\n    {\r\n        buy( address(0) );\r\n    }\r\n    \r\n\r\n    \r\n    function buy( address _referrer ) public payable icoActive Initialized\r\n    {\r\n        \r\n        \r\n        \r\n      require( msg.value >= min );\r\n      \r\n\r\n      uint256 _amount = crowdsaleBonus( msg.value.div( price ) * 1 ether );\r\n      uint256 toReferrer = 0;\r\n      \r\n      if( referrers[_referrer] ){\r\n          \r\n        toReferrer = referrerBonusCalculate( msg.value );\r\n        _referrer.transfer( toReferrer );\r\n        _amount = _amount.add( referralBonusCalculate( msg.value, _amount ) );\r\n        \r\n        Referral( _referrer, msg.sender, msg.value, _amount );\r\n        \r\n      }\r\n      \r\n      \r\n      \r\n       \r\n       \r\n      token.delivery( msg.sender, _amount );\r\n      totalEth = totalEth.add( msg.value );\r\n      \r\n      Delivery( msg.sender, _amount );\r\n      \r\n       \r\n        \r\n      if( getCrowdsaleState() == CrowdsaleStates.Presale ) {\r\n          \r\n          presale = presale.sub( _amount );\r\n          \r\n          for( uint256 i = 0; i <= owners.length - 1; i++ ){\r\n              \r\n            owners[i].transfer( ( msg.value.sub( toReferrer ) ).div( owners.length ) );\r\n            \r\n          }\r\n      \r\n      }\r\n      \r\n      \r\n      investorsTotalBalances[msg.sender]  = investorsTotalBalances[msg.sender].add( _amount );\r\n       \r\n      if( investorsTotalBalances[msg.sender] >= threshold && investorsCheck[msg.sender] == false ){\r\n          investors.push( msg.sender );\r\n          investorsCheck[msg.sender] = true;\r\n          \r\n          NewInvestor( msg.sender );\r\n      }\r\n       \r\n       \r\n      \r\n       \r\n    }\r\n    \r\n\r\n    \r\n\r\n    \r\n    function getCrowdsaleState() public constant returns( CrowdsaleStates )\r\n    {\r\n        if( CrowdsaleState == CrowdsaleStates.Disabled ) return CrowdsaleStates.Disabled;\r\n        if( CrowdsaleState == CrowdsaleStates.Finished ) return CrowdsaleStates.Finished;\r\n        \r\n        if( CrowdsaleState == CrowdsaleStates.Presale ){\r\n            if( presale > 0 ) \r\n                return CrowdsaleStates.Presale;\r\n            else\r\n                return CrowdsaleStates.Disabled;\r\n        }\r\n        \r\n        if( CrowdsaleState == CrowdsaleStates.ICO1 ){\r\n            \r\n            if( token.currentBalance() <= 0 || totalEth >= hardcap ) return CrowdsaleStates.Finished; \r\n            \r\n            if( now.sub( icoTimeStart ) <= ICO1Period)  return CrowdsaleStates.ICO1;\r\n            if( now.sub( icoTimeStart ) <= ICO2Period ) return CrowdsaleStates.ICO2;\r\n            if( now.sub( icoTimeStart ) <= ICO3Period ) return CrowdsaleStates.ICO3;\r\n            if( now.sub( icoTimeStart ) <= ICO4Period ) return CrowdsaleStates.ICO4;\r\n            if( now.sub( icoTimeStart ) >  ICO4Period ) return CrowdsaleStates.Finished;\r\n            \r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    function crowdsaleBonus( uint256 _amount ) internal constant  returns ( uint256 )\r\n    {\r\n        uint256 bonus = 0;\r\n        \r\n        if( getCrowdsaleState() == CrowdsaleStates.Presale ){\r\n            bonus = _amount.mul( 50 ).div( 100 );\r\n        }\r\n        \r\n        if( getCrowdsaleState() == CrowdsaleStates.ICO1 ){\r\n            bonus = _amount.mul( 35 ).div( 100 );\r\n        }\r\n        if( getCrowdsaleState() == CrowdsaleStates.ICO2 ){\r\n            bonus = _amount.mul( 25 ).div( 100 );\r\n        }\r\n        if( getCrowdsaleState() == CrowdsaleStates.ICO3 ){\r\n            bonus = _amount.mul( 15 ).div( 100 );\r\n        }\r\n        \r\n        return _amount.add( bonus );\r\n        \r\n    }\r\n    \r\n    \r\n    function startPresale() public onlyOwner notFinished Initialized returns ( bool )\r\n    {\r\n        CrowdsaleState = CrowdsaleStates.Presale;\r\n        return true;\r\n    }\r\n    \r\n    function startIco() public onlyOwner notFinished Initialized returns ( bool )\r\n    {\r\n        CrowdsaleState = CrowdsaleStates.ICO1;\r\n        icoTimeStart = now;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function completeIcoPart1() public onlyOwner Finished Initialized returns( bool )\r\n    {\r\n        //stop ico\r\n        CrowdsaleState = CrowdsaleStates.Finished;\r\n        \r\n        uint256 sales = token.totalSupply() - token.currentBalance();\r\n        \r\n        \r\n        uint256 i;\r\n        \r\n        //burn\r\n        if( totalEth >= hardcap ) {\r\n            \r\n            for( i = 0; i <= owners.length - 1; i++ ){\r\n                token.delivery( owners[i], bounty.div( owners.length ) );\r\n            }\r\n            \r\n        } else {\r\n            \r\n            uint256 tmp = sales.mul( 20 ).div( 100 ).add( bounty );\r\n            for( i = 0; i <= owners.length - 1; i++ ){\r\n                token.delivery( owners[i], tmp.div( owners.length ) );\r\n            }  \r\n            \r\n        }\r\n        \r\n        uint b = address(this).balance;\r\n         for( i = 0; i <= owners.length - 1; i++ ){\r\n            owners[i].transfer(  b.div( owners.length ) );\r\n        }\r\n        \r\n        token.afterIco(  redemptionPriceCalculate( sales )  );\r\n    }\r\n    \r\n    function completeIcoPart2() public onlyOwner Finished Initialized returns( bool )\r\n    {\r\n        uint256 sum = 0;\r\n        uint256 i = 0;\r\n        for( i = 0; i <= investors.length - 1; i++ ) {\r\n            sum = sum.add( investorsTotalBalances[ investors[i] ] );\r\n        }\r\n        for( i = 0; i <= investors.length - 1; i++ ) {\r\n            investorsStock[ investors[i] ] = investorsTotalBalances[ investors[i] ].mul( 100 ).div( sum );\r\n        }\r\n    }\r\n    \r\n    \r\n    function investorsCount() public constant returns( uint256 )\r\n    {\r\n        return investors.length ;\r\n    }\r\n    \r\n    function investorsAddress( uint256 _i ) public constant returns( address )\r\n    {\r\n        return investors[_i] ;\r\n    }\r\n    \r\n    function investorsInfo( address _a ) public constant returns( uint256, uint256 )\r\n    {\r\n        return ( investorsTotalBalances[_a], investorsStock[_a] );\r\n    }\r\n    \r\n    function investorsStockInfo( address _a)  public constant returns(uint256)\r\n    {\r\n        return  investorsStock[_a];\r\n    }\r\n    \r\n    \r\n\r\n    \r\n    function bountyTransfer( address _to, uint256 amount) public onlyOwner Initialized returns( bool )\r\n    {\r\n        \r\n        \r\n        require( bounty >= amount && token.currentBalance() >= amount );\r\n        \r\n        \r\n        token.delivery( _to, amount );\r\n        bounty = bounty.sub( amount );\r\n        \r\n        Delivery( _to, amount );\r\n        Bounty( _to, amount );\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    bool public swapActivity = true;\r\n    address[] tokenList;\r\n    mapping( address => uint256 ) tokenRateAth;\r\n    mapping( address => uint256 ) tokenRateToken;\r\n    mapping( address => uint256 ) tokenLimit;\r\n    mapping( address => uint256 ) tokenMinAmount;\r\n    mapping( address => bool ) tokenActivity;\r\n    mapping( address => bool ) tokenFirst;\r\n    mapping ( address => uint256 ) tokenSwapped;\r\n    \r\n    \r\n    function swapActivityHandler() public onlyOwner\r\n    {\r\n        swapActivity = !swapActivity;\r\n    }\r\n    \r\n    \r\n    function setSwapToken( address _a, uint256 _rateAth, uint256 _rateToken, uint256 _limit, uint256 _minAmount,  bool _activity ) public onlyOwner returns( bool )\r\n    {\r\n       if( tokenFirst[_a] == false ) {\r\n           tokenFirst[_a] = true;\r\n           \r\n           NewSwapToken( _a );\r\n       }\r\n       \r\n       tokenRateAth[_a]     = _rateAth;\r\n       tokenRateToken[_a]   = _rateToken;\r\n       tokenLimit[_a]       = _limit;\r\n       tokenMinAmount[_a]   = _minAmount;\r\n       tokenActivity[_a]    = _activity;\r\n    }\r\n    \r\n\r\n    function swapTokenInfo( address _a) public constant returns( uint256, uint256, uint256, uint256,  bool )\r\n    {\r\n        return ( tokenRateAth[_a], tokenRateToken[_a], tokenLimit[_a], tokenMinAmount[_a], tokenActivity[_a] );\r\n    }\r\n    \r\n    function swap( address _a, uint256 _amount ) public returns( bool )\r\n    {\r\n        require( swapActivity && tokenActivity[_a] && ( _amount >= tokenMinAmount[_a] ) );\r\n        \r\n        uint256 ath = tokenRateAth[_a].mul( _amount ).div( tokenRateToken[_a] );\r\n        tokenSwapped[_a] = tokenSwapped[_a].add( ath );\r\n        \r\n        require( ath > 0 && bounty >= ath && tokenSwapped[_a] <= tokenLimit[_a] );\r\n        \r\n        ERC20 ercToken = ERC20( _a );\r\n        ercToken.transferFrom( msg.sender, address(this), _amount );\r\n        \r\n        for( uint256 i = 0; i <= owners.length - 1; i++ )\r\n          ercToken.transfer( owners[i], _amount.div( owners.length ) );\r\n          \r\n        token.delivery( msg.sender, ath );\r\n        bounty = bounty.sub( ath );\r\n        \r\n        Delivery( msg.sender, ath );\r\n        Swap( msg.sender, _a, ath );\r\n        \r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTimeStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_amountTokens\",\"type\":\"uint256\"}],\"name\":\"referralBonusCalculate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referrersList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bountyTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"referrerBonusCalculate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCrowdsaleState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapActivity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliatThreshold4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CrowdsaleState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO4Period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"investorsInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"swapActivityHandler\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"},{\"name\":\"_owners\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"},{\"name\":\"_rateAth\",\"type\":\"uint256\"},{\"name\":\"_rateToken\",\"type\":\"uint256\"},{\"name\":\"_limit\",\"type\":\"uint256\"},{\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"name\":\"_activity\",\"type\":\"bool\"}],\"name\":\"setSwapToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"investorsStockInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"completeIcoPart1\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address[]\"}],\"name\":\"regReferrers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliatThreshold3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"completeIcoPart2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliatThreshold1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO1Period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"swapTokenInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ath\",\"type\":\"uint256\"}],\"name\":\"redemptionPriceCalculate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"investorsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"regReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO2Period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_i\",\"type\":\"uint8\"}],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO3Period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliatThreshold2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"min\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"NewInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"NewReferrer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Bounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"}],\"name\":\"NewSwapToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Delivery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8da8d15cd130087f85ee16ffa96fcccf2d5a125d0af1d54e8eb1627d622a2792"}]}