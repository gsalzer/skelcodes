{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC721 {\r\n    function implementsERC721() public pure returns (bool);\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n}\r\n\r\ncontract SampleStorage is Ownable {\r\n    \r\n    struct Sample {\r\n        string ipfsHash;\r\n        uint rarity;\r\n    }\r\n    \r\n    mapping (uint => Sample) sampleTypes;\r\n    \r\n    uint public numOfSampleTypes;\r\n    \r\n    uint public numOfCommon;\r\n    uint public numOfRare;\r\n    uint public numOfLegendary;\r\n    uint public numOfMythical;\r\n    \r\n    function addNewSampleType(string _ipfsHash, uint _rarityType) public onlyOwner {\r\n        \r\n        if (_rarityType == 0) {\r\n            numOfCommon++;\r\n        } else if (_rarityType == 1) {\r\n            numOfRare++;\r\n        } else if(_rarityType == 2) {\r\n            numOfLegendary++;\r\n        } else if(_rarityType == 3) {\r\n            numOfMythical++;\r\n        }\r\n        \r\n        sampleTypes[numOfSampleTypes] = Sample({\r\n           ipfsHash: _ipfsHash,\r\n           rarity: _rarityType\r\n        });\r\n        \r\n        numOfSampleTypes++;\r\n    }\r\n    \r\n    function getType(uint _randomNum) public view returns (uint) {\r\n        uint range = 0;\r\n        \r\n        if (_randomNum > 0 && _randomNum < 600) {\r\n            range = 600 / numOfCommon;\r\n            return _randomNum / range;\r\n            \r\n        } else if(_randomNum >= 600 && _randomNum < 900) {\r\n            range = 300 / numOfRare;\r\n            return _randomNum / range;\r\n        } else {\r\n            range = 100 / numOfLegendary;\r\n            return _randomNum / range;\r\n        }\r\n    }\r\n    \r\n}\r\n\r\ncontract Jingle is Ownable, ERC721 {\r\n    \r\n    struct MetaInfo {\r\n        string name;\r\n        string author;\r\n    }\r\n    \r\n    mapping (uint => address) internal tokensForOwner;\r\n    mapping (uint => address) internal tokensForApproved;\r\n    mapping (address => uint[]) internal tokensOwned;\r\n    mapping (uint => uint) internal tokenPosInArr;\r\n    \r\n    mapping(uint => uint[]) internal samplesInJingle;\r\n    mapping(uint => MetaInfo) public jinglesInfo;\r\n    \r\n    mapping(bytes32 => bool) public uniqueJingles;\r\n    \r\n    mapping(uint => uint[]) public soundEffects;\r\n    \r\n    uint public numOfJingles;\r\n    \r\n    address public cryptoJingles;\r\n    Marketplace public marketplaceContract;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event EffectAdded(uint indexed jingleId, uint[] effectParams);\r\n    event Composed(uint indexed jingleId, address indexed owner, \r\n                uint[5] samples, uint[5] jingleTypes, string name, string author);\r\n    \r\n    modifier onlyCryptoJingles() {\r\n        require(msg.sender == cryptoJingles);\r\n        _;\r\n    }\r\n    \r\n    function Jingle() public {\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _jingleId) public {\r\n        require(tokensForOwner[_jingleId] != 0x0);\r\n        require(tokensForOwner[_jingleId] == msg.sender);\r\n        \r\n        tokensForApproved[_jingleId] = 0x0;\r\n        \r\n        removeJingle(msg.sender, _jingleId);\r\n        addJingle(_to, _jingleId);\r\n        \r\n        Approval(msg.sender, 0, _jingleId);\r\n        Transfer(msg.sender, _to, _jingleId);\r\n    }\r\n    \r\n    \r\n    function approve(address _to, uint256 _jingleId) public {\r\n        require(tokensForOwner[_jingleId] != 0x0);\r\n        require(ownerOf(_jingleId) == msg.sender);\r\n        require(_to != msg.sender);\r\n        \r\n        if (_getApproved(_jingleId) != 0x0 || _to != 0x0) {\r\n            tokensForApproved[_jingleId] = _to;\r\n            Approval(msg.sender, _to, _jingleId);\r\n        }\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _jingleId) public {\r\n        require(tokensForOwner[_jingleId] != 0x0);\r\n        require(_getApproved(_jingleId) == msg.sender);\r\n        require(ownerOf(_jingleId) == _from);\r\n        require(_to != 0x0);\r\n        \r\n        tokensForApproved[_jingleId] = 0x0;\r\n        \r\n        removeJingle(_from, _jingleId);\r\n        addJingle(_to, _jingleId);\r\n        \r\n        Approval(_from, 0, _jingleId);\r\n        Transfer(_from, _to, _jingleId);\r\n        \r\n    }\r\n    \r\n    function approveAndSell(uint _jingleId, uint _amount) public {\r\n        approve(address(marketplaceContract), _jingleId);\r\n        \r\n        marketplaceContract.sell(msg.sender, _jingleId, _amount);\r\n    }\r\n    \r\n    function composeJingle(address _owner, uint[5] jingles, \r\n            uint[5] jingleTypes, string name, string author) public onlyCryptoJingles {\r\n        \r\n        uint _jingleId = numOfJingles;\r\n        \r\n        uniqueJingles[keccak256(jingles)] = true;\r\n        \r\n        tokensForOwner[_jingleId] = _owner;\r\n        \r\n        tokensOwned[_owner].push(_jingleId);\r\n        \r\n        samplesInJingle[_jingleId] = jingles;\r\n        \r\n        tokenPosInArr[_jingleId] = tokensOwned[_owner].length - 1;\r\n        \r\n        if (bytes(author).length == 0) {\r\n            author = \"Soundtoshi Nakajingles\";\r\n        }\r\n        \r\n        jinglesInfo[numOfJingles] = MetaInfo({\r\n            name: name,\r\n            author: author\r\n        });\r\n        \r\n        Composed(numOfJingles, _owner, jingles, jingleTypes, name, author);\r\n        \r\n        numOfJingles++;\r\n    }\r\n    \r\n    function addSoundEffect(uint _jingleId, uint[] _effectParams) external {\r\n        require(msg.sender == ownerOf(_jingleId));\r\n        \r\n        soundEffects[_jingleId] = _effectParams;\r\n        \r\n        EffectAdded(_jingleId, _effectParams);\r\n    }\r\n    \r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return numOfJingles;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return tokensOwned[_owner].length;\r\n    }\r\n    \r\n    function ownerOf(uint256 _jingleId) public view returns (address) {\r\n        return tokensForOwner[_jingleId];\r\n    }\r\n    \r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\r\n        return tokensOwned[_owner][_index];\r\n    }\r\n    \r\n    function getSamplesForJingle(uint _jingleId) external view returns(uint[]) {\r\n        return samplesInJingle[_jingleId];\r\n    }\r\n    \r\n    function getAllJingles(address _owner) external view returns(uint[]) {\r\n        return tokensOwned[_owner];\r\n    }\r\n    \r\n    function getMetaInfo(uint _jingleId) external view returns(string, string) {\r\n        return (jinglesInfo[_jingleId].name, jinglesInfo[_jingleId].author);\r\n    }\r\n    \r\n    function _getApproved(uint _jingleId) internal view returns (address) {\r\n        return tokensForApproved[_jingleId];\r\n    }\r\n    \r\n     // Internal functions of the contract\r\n    \r\n    function addJingle(address _owner, uint _jingleId) internal {\r\n        tokensForOwner[_jingleId] = _owner;\r\n        \r\n        tokensOwned[_owner].push(_jingleId);\r\n        \r\n        tokenPosInArr[_jingleId] = tokensOwned[_owner].length - 1;\r\n    }\r\n    \r\n    // find who owns that jingle and at what position is it in the owners arr \r\n    // Swap that token with the last one in arr and delete the end of arr\r\n    function removeJingle(address _owner, uint _jingleId) internal {\r\n        uint length = tokensOwned[_owner].length;\r\n        uint index = tokenPosInArr[_jingleId];\r\n        uint swapToken = tokensOwned[_owner][length - 1];\r\n\r\n        tokensOwned[_owner][index] = swapToken;\r\n        tokenPosInArr[swapToken] = index;\r\n\r\n        delete tokensOwned[_owner][length - 1];\r\n        tokensOwned[_owner].length--;\r\n    }\r\n    \r\n    // Owner functions \r\n    function setCryptoJinglesContract(address _cryptoJingles) public onlyOwner {\r\n        require(cryptoJingles == 0x0);\r\n        \r\n        cryptoJingles = _cryptoJingles;\r\n    }\r\n    \r\n    function setMarketplaceContract(address _marketplace) public onlyOwner {\r\n        require(address(marketplaceContract) == 0x0);\r\n        \r\n        marketplaceContract = Marketplace(_marketplace);\r\n    }\r\n}\r\n\r\ncontract Sample is Ownable {\r\n    \r\n    mapping (uint => address) internal tokensForOwner;\r\n    mapping (address => uint[]) internal tokensOwned;\r\n    mapping (uint => uint) internal tokenPosInArr;\r\n    \r\n    mapping (uint => uint) public tokenType;\r\n    \r\n    uint public numOfSamples;\r\n    \r\n    address public cryptoJingles;\r\n\r\n    SampleStorage public sampleStorage;\r\n    \r\n    event Mint(address indexed _to, uint256 indexed _tokenId);\r\n    \r\n    modifier onlyCryptoJingles() {\r\n        require(msg.sender == cryptoJingles);\r\n        _;\r\n    }\r\n    \r\n    function Sample(address _sampleStorage) public {\r\n        sampleStorage = SampleStorage(_sampleStorage);\r\n    }\r\n    \r\n    function mint(address _owner, uint _randomNum) public onlyCryptoJingles {\r\n        \r\n        uint sampleType = sampleStorage.getType(_randomNum);\r\n        \r\n        addSample(_owner, sampleType, numOfSamples);\r\n        \r\n        Mint(_owner, numOfSamples);\r\n        \r\n        numOfSamples++;\r\n    }\r\n    \r\n    //TODO: check this again\r\n    // find who owns that sample and at what position is it in the owners arr \r\n    // Swap that token with the last one in arr and delete the end of arr\r\n    function removeSample(address _owner, uint _sampleId) public onlyCryptoJingles {\r\n        uint length = tokensOwned[_owner].length;\r\n        uint index = tokenPosInArr[_sampleId];\r\n        uint swapToken = tokensOwned[_owner][length - 1];\r\n\r\n        tokensOwned[_owner][index] = swapToken;\r\n        tokenPosInArr[swapToken] = index;\r\n\r\n        delete tokensOwned[_owner][length - 1];\r\n        tokensOwned[_owner].length--;\r\n        \r\n        tokensForOwner[_sampleId] = 0x0;\r\n        \r\n    }\r\n    \r\n    function getSamplesForOwner(address _owner) public constant returns (uint[]) {\r\n        return tokensOwned[_owner];\r\n    }\r\n    \r\n    function getTokenType(uint _sampleId) public constant returns (uint) {\r\n        return tokenType[_sampleId];\r\n    }\r\n    \r\n    function isTokenOwner(uint _tokenId, address _user) public constant returns(bool) {\r\n        return tokensForOwner[_tokenId] == _user;\r\n    }\r\n    \r\n    function getAllSamplesForOwner(address _owner) public constant returns(uint[]) {\r\n        uint[] memory samples = tokensOwned[_owner];\r\n        \r\n        uint[] memory usersSamples = new uint[](samples.length * 2);\r\n        \r\n        uint j = 0;\r\n        \r\n        for(uint i = 0; i < samples.length; ++i) {\r\n            usersSamples[j] = samples[i];\r\n            usersSamples[j + 1] = tokenType[samples[i]];\r\n            j += 2;\r\n        }\r\n        \r\n        return usersSamples;\r\n    }\r\n    \r\n    // Internal functions of the contract\r\n    \r\n    function addSample(address _owner, uint _sampleType, uint _sampleId) internal {\r\n        tokensForOwner[_sampleId] = _owner;\r\n        \r\n        tokensOwned[_owner].push(_sampleId);\r\n        \r\n        tokenType[_sampleId] = _sampleType;\r\n        \r\n        tokenPosInArr[_sampleId] = tokensOwned[_owner].length - 1;\r\n    }\r\n    \r\n     // Owner functions \r\n    // Set the crypto jingles contract can \r\n    function setCryptoJinglesContract(address _cryptoJingles) public onlyOwner {\r\n        require(cryptoJingles == 0x0);\r\n        \r\n        cryptoJingles = _cryptoJingles;\r\n    }\r\n}\r\n\r\ncontract CryptoJingles is Ownable {\r\n    \r\n    struct Purchase {\r\n        address user;\r\n        uint blockNumber;\r\n        bool revealed;\r\n        uint numSamples;\r\n        bool exists;\r\n    }\r\n    \r\n    event Purchased(address indexed user, uint blockNumber, uint numJingles, uint numOfPurchases);\r\n    event JinglesOpened(address byWhom, address jingleOwner, uint currBlockNumber);\r\n    \r\n    mapping (uint => bool) public isAlreadyUsed;\r\n    \r\n    mapping(address => string) public authors;\r\n\r\n    uint numOfPurchases;\r\n    \r\n    uint MAX_SAMPLES_PER_PURCHASE = 15;\r\n    uint SAMPLE_PRICE = 10 ** 15;\r\n    uint SAMPLES_PER_JINGLE = 5;\r\n    uint NUM_SAMPLE_RANGE = 1000;\r\n    \r\n    Sample public sampleContract;\r\n    Jingle public jingleContract;\r\n    \r\n    function CryptoJingles(address _sample, address _jingle) public {\r\n        numOfPurchases = 0;\r\n        sampleContract = Sample(_sample);\r\n        jingleContract = Jingle(_jingle);\r\n    }\r\n    \r\n    function buySamples(uint _numSamples, address _to) public payable {\r\n        require(_numSamples <= MAX_SAMPLES_PER_PURCHASE);\r\n        require(msg.value >= (SAMPLE_PRICE * _numSamples));\r\n        \r\n         for (uint i = 0; i < _numSamples; ++i) {\r\n            \r\n            bytes32 blockHash = block.blockhash(block.number - 1);\r\n            \r\n            uint randomNum = randomGen(blockHash, i);\r\n            sampleContract.mint(_to, randomNum);\r\n        }\r\n        \r\n        Purchased(_to, block.number, _numSamples, numOfPurchases);\r\n        \r\n        numOfPurchases++;\r\n    }\r\n    \r\n    function composeJingle(string name, uint[5] samples) public {\r\n        require(jingleContract.uniqueJingles(keccak256(samples)) == false);\r\n        \r\n        //check if you own all the 5 samples \r\n        for (uint i = 0; i < SAMPLES_PER_JINGLE; ++i) {\r\n            bool isOwner = sampleContract.isTokenOwner(samples[i], msg.sender);\r\n            \r\n            require(isOwner == true && isAlreadyUsed[samples[i]] == false);\r\n            \r\n            isAlreadyUsed[samples[i]] = true;\r\n        }\r\n        \r\n        uint[5] memory sampleTypes;\r\n        \r\n        // remove all the samples from your Ownership\r\n        for (uint j = 0; j < SAMPLES_PER_JINGLE; ++j) {\r\n            sampleTypes[j] = sampleContract.tokenType(samples[j]);\r\n            sampleContract.removeSample(msg.sender, samples[j]);\r\n        }\r\n        \r\n        //create a new jingle containing those 5 samples\r\n        jingleContract.composeJingle(msg.sender, samples, sampleTypes, name, authors[msg.sender]);\r\n    }\r\n    \r\n    // Addresses can set their name when composing jingles\r\n    function setAuthorName(string _name) public {\r\n        authors[msg.sender] = _name;\r\n    }\r\n    \r\n    function randomGen(bytes32 blockHash, uint seed) constant public returns (uint randomNumber) {\r\n        return (uint(keccak256(blockHash, block.timestamp, numOfPurchases, seed )) % NUM_SAMPLE_RANGE);\r\n    }\r\n    \r\n    // The only ether kept on this contract are owner money for samples\r\n    function withdraw(uint _amount) public onlyOwner {\r\n        require(_amount <= this.balance);\r\n        \r\n        msg.sender.transfer(_amount);\r\n    }\r\n    \r\n}\r\n\r\ncontract Marketplace is Ownable {\r\n    \r\n    modifier onlyJingle() {\r\n        require(msg.sender == address(jingleContract));\r\n        _;\r\n    }\r\n    \r\n    struct Order {\r\n        uint price;\r\n        address seller;\r\n        uint timestamp;\r\n        bool exists;\r\n    }\r\n    \r\n    event SellOrder(address owner, uint jingleId, uint price);\r\n    event Bought(uint jingleId, address buyer, uint price);\r\n    event Canceled(address owner, uint jingleId);\r\n    \r\n    uint public numOrders;\r\n    uint public ownerBalance;\r\n    \r\n    uint OWNERS_CUT = 3; // 3 percent of every sale goes to owner\r\n    \r\n    mapping (uint => Order) public sellOrders;\r\n    mapping(uint => uint) public positionOfJingle;\r\n    \r\n    uint[] public jinglesOnSale;\r\n    \r\n    Jingle public jingleContract;\r\n    \r\n    function Marketplace(address _jingle) public {\r\n        jingleContract = Jingle(_jingle);\r\n        ownerBalance = 0;\r\n    }\r\n\r\n    function sell(address _owner, uint _jingleId, uint _amount) public onlyJingle {\r\n        require(_amount > 100);\r\n        require(sellOrders[_jingleId].exists == false);\r\n        \r\n        sellOrders[_jingleId] = Order({\r\n           price: _amount,\r\n           seller: _owner,\r\n           timestamp: now,\r\n           exists: true\r\n        });\r\n        \r\n        numOrders++;\r\n        \r\n        // set for iterating\r\n        jinglesOnSale.push(_jingleId);\r\n        positionOfJingle[_jingleId] = jinglesOnSale.length - 1;\r\n        \r\n        //transfer ownership \r\n        jingleContract.transferFrom(_owner, this, _jingleId);\r\n        \r\n        //Fire an sell event\r\n        SellOrder(_owner, _jingleId, _amount);\r\n    }\r\n    \r\n    function buy(uint _jingleId) public payable {\r\n        require(sellOrders[_jingleId].exists == true);\r\n        require(msg.value >= sellOrders[_jingleId].price);\r\n        \r\n        sellOrders[_jingleId].exists = false;\r\n        \r\n        numOrders--;\r\n        \r\n        //delete stuff for iterating \r\n        removeOrder(_jingleId);\r\n        \r\n        //transfer ownership \r\n        jingleContract.transfer(msg.sender, _jingleId);\r\n        \r\n        // transfer money to seller\r\n        uint price = sellOrders[_jingleId].price;\r\n        \r\n        uint threePercent = (price / 100) * OWNERS_CUT;\r\n        \r\n        sellOrders[_jingleId].seller.transfer(price - threePercent);\r\n        \r\n        ownerBalance += threePercent;\r\n        \r\n        //fire and event\r\n        Bought(_jingleId, msg.sender, msg.value);\r\n    }\r\n    \r\n    function cancel(uint _jingleId) public {\r\n        require(sellOrders[_jingleId].exists == true);\r\n        require(sellOrders[_jingleId].seller == msg.sender);\r\n        \r\n        sellOrders[_jingleId].exists = false;\r\n        \r\n        numOrders--;\r\n        \r\n        //delete stuff for iterating \r\n        removeOrder(_jingleId);\r\n        \r\n        jingleContract.transfer(msg.sender, _jingleId);\r\n        \r\n        //fire and event\r\n        Canceled(msg.sender, _jingleId);\r\n    }\r\n    \r\n    function removeOrder(uint _jingleId) internal {\r\n        uint length = jinglesOnSale.length;\r\n        uint index = positionOfJingle[_jingleId];\r\n        uint lastOne = jinglesOnSale[length - 1];\r\n\r\n        jinglesOnSale[index] = lastOne;\r\n        positionOfJingle[lastOne] = index;\r\n\r\n        delete jinglesOnSale[length - 1];\r\n        jinglesOnSale.length--;\r\n    }\r\n    \r\n    //Owners functions \r\n    function withdraw(uint _amount) public onlyOwner {\r\n        require(_amount <= ownerBalance);\r\n        \r\n        msg.sender.transfer(_amount);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_jingleId\",\"type\":\"uint256\"}],\"name\":\"getSamplesForJingle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_jingleId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketplace\",\"type\":\"address\"}],\"name\":\"setMarketplaceContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOfJingles\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_jingleId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptoJingles\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"soundEffects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAllJingles\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"jingles\",\"type\":\"uint256[5]\"},{\"name\":\"jingleTypes\",\"type\":\"uint256[5]\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"author\",\"type\":\"string\"}],\"name\":\"composeJingle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jingleId\",\"type\":\"uint256\"},{\"name\":\"_effectParams\",\"type\":\"uint256[]\"}],\"name\":\"addSoundEffect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_jingleId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jingleId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveAndSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_jingleId\",\"type\":\"uint256\"}],\"name\":\"getMetaInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_jingleId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jinglesInfo\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"author\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cryptoJingles\",\"type\":\"address\"}],\"name\":\"setCryptoJinglesContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"uniqueJingles\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketplaceContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"jingleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"effectParams\",\"type\":\"uint256[]\"}],\"name\":\"EffectAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"jingleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"samples\",\"type\":\"uint256[5]\"},{\"indexed\":false,\"name\":\"jingleTypes\",\"type\":\"uint256[5]\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"author\",\"type\":\"string\"}],\"name\":\"Composed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Jingle","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6fca65b952a9e3998264743663b8396d0a4eb2e6b7580ab4ca78c0e485ae40ab"}]}