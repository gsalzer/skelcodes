{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract TycoonPresale {\r\n    event HHH(address bidder, uint amount); // Event\r\n\r\n    address public owner; // Minor management of game\r\n    bool public isPresaleEnd;\r\n    uint256 private constant price = 0.0666 ether;\r\n    uint8 private constant maxNumbersPerPlayer = 10;\r\n    mapping (address => mapping (uint8 => bool)) private doihave;\r\n    mapping (address => uint8[]) private last; // [choumode][idx1][idx2][...]\r\n    uint256 private constant FACTOR = 1157920892373161954235709850086879078532699846656405640394575840079131296399;\r\n    uint256 private constant MAGICNUMBER = 6666666666666666666666666666666666666666666666666666666666666666666666666666;\r\n    struct Level {\r\n        uint8[] GaoIdx;\r\n        uint8 passProb;\r\n    }\r\n    Level[] private levels;\r\n    /*** CONSTRUCTOR ***/\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        Level memory _level;\r\n        _level.GaoIdx = new uint8[](5);\r\n        _level.GaoIdx[0] = 2;\r\n        _level.GaoIdx[1] = 3;\r\n        _level.GaoIdx[2] = 5;\r\n        _level.GaoIdx[3] = 6;\r\n        _level.GaoIdx[4] = 7;\r\n        _level.passProb = 55;\r\n        levels.push(_level);\r\n        _level.GaoIdx = new uint8[](4);\r\n        _level.GaoIdx[0] = 9;\r\n        _level.GaoIdx[1] = 10;\r\n        _level.GaoIdx[2] = 12;\r\n        _level.GaoIdx[3] = 13;\r\n        _level.passProb = 65;\r\n        levels.push(_level);\r\n        //\r\n        _level.GaoIdx = new uint8[](11);\r\n        _level.GaoIdx[0] = 16;\r\n        _level.GaoIdx[1] = 18;\r\n        _level.GaoIdx[2] = 19;\r\n        _level.GaoIdx[3] = 20;\r\n        _level.GaoIdx[4] = 21;\r\n        _level.GaoIdx[5] = 23;\r\n        _level.GaoIdx[6] = 24;\r\n        _level.GaoIdx[7] = 25;\r\n        _level.GaoIdx[8] = 26;\r\n        _level.GaoIdx[9] = 28;\r\n        _level.GaoIdx[10] = 29;\r\n        _level.passProb = 0;\r\n        levels.push(_level);\r\n    }\r\n    function MyGaoguans() public view returns (uint8[]){\r\n        return last[msg.sender];\r\n    }\r\n    function Chou(uint8 seChou) public payable {\r\n        require(!isPresaleEnd);\r\n        require(_goodAddress(msg.sender));\r\n        require(seChou > 0 && seChou < 6);\r\n        uint8 owndCount = 0;\r\n        if (last[msg.sender].length != 0){\r\n            owndCount = last[msg.sender][0];\r\n        }\r\n        require(owndCount + seChou <= maxNumbersPerPlayer);\r\n        require(msg.value >= (price * seChou));\r\n\r\n        if (last[msg.sender].length < 2){\r\n            last[msg.sender].push(seChou);\r\n            last[msg.sender].push(seChou);\r\n        }else{\r\n            last[msg.sender][0] += seChou;\r\n            last[msg.sender][1] = seChou;\r\n        }\r\n\r\n        uint256 zhaoling = msg.value - (price * seChou);\r\n        assert(zhaoling <= msg.value); // safe math\r\n        // multi-chou\r\n        for (uint _seChouidx = 0; _seChouidx != seChou; _seChouidx++){\r\n            uint randN = _rand(_seChouidx + MAGICNUMBER); // only generate once for saving gas\r\n            for (uint idx = 0; idx != levels.length; idx++) {\r\n                bool levelPass = true;\r\n                uint8 chosenIdx;\r\n                for (uint jdx = 0; jdx != levels[idx].GaoIdx.length; jdx++) {\r\n                    if (!_Doihave(levels[idx].GaoIdx[(jdx+randN)%levels[idx].GaoIdx.length])){\r\n                        levelPass = false;\r\n                        chosenIdx = levels[idx].GaoIdx[(jdx+randN)%levels[idx].GaoIdx.length];\r\n                        break;\r\n                    }\r\n                }\r\n                if (!levelPass){\r\n                    if (randN % 100 >= levels[idx].passProb) { // this level right, and the last chosenIdx is chosenIdx\r\n                        _own(chosenIdx);\r\n                        break;\r\n                    }\r\n                    randN = randN + MAGICNUMBER;\r\n                }\r\n            }\r\n        }\r\n        msg.sender.transfer(zhaoling);\r\n    }\r\n    \r\n    // private\r\n    function _Doihave(uint8 gaoIdx) private view returns (bool) {\r\n        return doihave[msg.sender][gaoIdx];\r\n    }\r\n    function _own(uint8 gaoIdx) private {\r\n        last[msg.sender].push(gaoIdx);\r\n        doihave[msg.sender][gaoIdx] = true;\r\n    }\r\n    function _rand(uint exNumber) private constant returns (uint){\r\n        uint lastBlockNumber = block.number - 1;\r\n        uint hashVal = uint256(blockhash(lastBlockNumber));\r\n        uint result = uint(keccak256(exNumber, msg.sender, hashVal));\r\n        return result;\r\n    }\r\n    function _goodAddress(address add) private pure returns (bool) {\r\n        return add != address(0);\r\n    }\r\n    function _payout(address _to) private {\r\n        if (_to == address(0)) {\r\n            owner.transfer(address(this).balance);\r\n        } else {\r\n            _to.transfer(address(this).balance);\r\n        }\r\n    }\r\n    // business use only for owner\r\n    modifier ensureOwner() {\r\n        require(\r\n            msg.sender == owner\r\n        );\r\n        _;\r\n    }\r\n    function payout() external ensureOwner {\r\n        _payout(address(0));\r\n    }\r\n    function B() external ensureOwner constant returns (uint256){\r\n        return address(this).balance;\r\n    }\r\n    // presale control\r\n    function End() external ensureOwner {\r\n         require(!isPresaleEnd);\r\n         isPresaleEnd = true;\r\n    }\r\n    function Gaoguans(address player) public ensureOwner view returns (uint8[]){\r\n        return last[player];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"End\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"Gaoguans\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"B\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPresaleEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seChou\",\"type\":\"uint8\"}],\"name\":\"Chou\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MyGaoguans\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HHH\",\"type\":\"event\"}]","ContractName":"TycoonPresale","CompilerVersion":"v0.4.24-nightly.2018.4.22+commit.2fae248d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2eafc4bbf8b178bb6361d19e23d2ea43e4e6c72d7806a9c88bc665ec221ce2d7"}]}