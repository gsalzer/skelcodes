{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      if (a == 0) {\r\n          return 0;\r\n      }\r\n      uint256 c = a * b;\r\n      assert(c / a == b);\r\n      return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a / b;\r\n      return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function Ownable() public {\r\n      owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      require(newOwner != address(0));\r\n\r\n      OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Authorizable {\r\n    mapping(address => bool) authorizers;\r\n\r\n    modifier onlyAuthorized {\r\n      require(isAuthorized(msg.sender));\r\n      _;\r\n    }\r\n\r\n    function Authorizable() public {\r\n      authorizers[msg.sender] = true;\r\n    }\r\n\r\n\r\n    function isAuthorized(address _addr) public constant returns(bool) {\r\n      require(_addr != address(0));\r\n\r\n      bool result = bool(authorizers[_addr]);\r\n      return result;\r\n    }\r\n\r\n    function addAuthorized(address _addr) external onlyAuthorized {\r\n      require(_addr != address(0));\r\n\r\n      authorizers[_addr] = true;\r\n    }\r\n\r\n    function delAuthorized(address _addr) external onlyAuthorized {\r\n      require(_addr != address(0));\r\n      require(_addr != msg.sender);\r\n\r\n      //authorizers[_addr] = false;\r\n      delete authorizers[_addr];\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    //modifier onlyPayloadSize(uint size) {\r\n    //  require(msg.data.length < size + 4);\r\n    //  _;\r\n    //}\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n      return totalSupply_;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n      //requeres in FrozenToken\r\n      //require(_to != address(0));\r\n      //require(_value <= balances[msg.sender]);\r\n\r\n      balances[msg.sender] = balances[msg.sender].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n      return balances[_owner];\r\n    }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n      //requires in FrozenToken\r\n      //require(_to != address(0));\r\n      //require(_value <= balances[_from]);\r\n      //require(_value <= allowed[_from][msg.sender]);\r\n\r\n      balances[_from] = balances[_from].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n      require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n      allowed[msg.sender][_spender] = _value;\r\n      Approval(msg.sender, _spender, _value);\r\n      return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n      allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n      uint oldValue = allowed[msg.sender][_spender];\r\n      if (_subtractedValue > oldValue) {\r\n        allowed[msg.sender][_spender] = 0;\r\n      } else {\r\n        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n      }\r\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract FrozenToken is StandardToken, Ownable {\r\n    mapping(address => bool) frozens;\r\n    mapping(address => uint256) frozenTokens;\r\n\r\n    event FrozenAddress(address addr);\r\n    event UnFrozenAddress(address addr);\r\n    event FrozenTokenEvent(address addr, uint256 amount);\r\n    event UnFrozenTokenEvent(address addr, uint256 amount);\r\n\r\n    modifier isNotFrozen() {\r\n      require(frozens[msg.sender] == false);\r\n      _;\r\n    }\r\n\r\n    function frozenAddress(address _addr) onlyOwner public returns (bool) {\r\n      require(_addr != address(0));\r\n\r\n      frozens[_addr] = true;\r\n      FrozenAddress(_addr);\r\n      return frozens[_addr];\r\n    }\r\n\r\n    function unFrozenAddress(address _addr) onlyOwner public returns (bool) {\r\n      require(_addr != address(0));\r\n\r\n      delete frozens[_addr];\r\n      //frozens[_addr] = false;\r\n      UnFrozenAddress(_addr);\r\n      return frozens[_addr];\r\n    }\r\n\r\n    function isFrozenByAddress(address _addr) public constant returns(bool) {\r\n      require(_addr != address(0));\r\n\r\n      bool result = bool(frozens[_addr]);\r\n      return result;\r\n    }\r\n\r\n    function balanceFrozenTokens(address _addr) public constant returns(uint256) {\r\n      require(_addr != address(0));\r\n\r\n      uint256 result = uint256(frozenTokens[_addr]);\r\n      return result;\r\n    }\r\n\r\n    function balanceAvailableTokens(address _addr) public constant returns(uint256) {\r\n      require(_addr != address(0));\r\n\r\n      uint256 frozen = uint256(frozenTokens[_addr]);\r\n      uint256 balance = uint256(balances[_addr]);\r\n      require(balance >= frozen);\r\n\r\n      uint256 result = balance.sub(frozen);\r\n\r\n      return result;\r\n    }\r\n\r\n    function frozenToken(address _addr, uint256 _amount) onlyOwner public returns(bool) {\r\n      require(_addr != address(0));\r\n      require(_amount > 0);\r\n\r\n      uint256 balance = uint256(balances[_addr]);\r\n      require(balance >= _amount);\r\n\r\n      frozenTokens[_addr] = frozenTokens[_addr].add(_amount);\r\n      FrozenTokenEvent(_addr, _amount);\r\n      return true;\r\n    }\r\n    \r\n\r\n    function unFrozenToken(address _addr, uint256 _amount) onlyOwner public returns(bool) {\r\n      require(_addr != address(0));\r\n      require(_amount > 0);\r\n      require(frozenTokens[_addr] >= _amount);\r\n\r\n      frozenTokens[_addr] = frozenTokens[_addr].sub(_amount);\r\n      UnFrozenTokenEvent(_addr, _amount);\r\n      return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) isNotFrozen() public returns (bool) {\r\n      require(_to != address(0));\r\n      require(_value <= balances[msg.sender]);\r\n\r\n      uint256 balance = balances[msg.sender];\r\n      uint256 frozen = frozenTokens[msg.sender];\r\n      uint256 availableBalance = balance.sub(frozen);\r\n      require(availableBalance >= _value);\r\n\r\n      return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) isNotFrozen() public returns (bool) {\r\n      require(_to != address(0));\r\n      require(_value <= balances[_from]);\r\n      require(_value <= allowed[_from][msg.sender]);\r\n\r\n      uint256 balance = balances[_from];\r\n      uint256 frozen = frozenTokens[_from];\r\n      uint256 availableBalance = balance.sub(frozen);\r\n      require(availableBalance >= _value);\r\n\r\n      return super.transferFrom(_from ,_to, _value);\r\n    }\r\n}\r\n\r\ncontract MallcoinToken is FrozenToken, Authorizable {\r\n      string public constant name = \"Mallcoin Token\";\r\n      string public constant symbol = \"MLC\";\r\n      uint8 public constant decimals = 18;\r\n      uint256 public MAX_TOKEN_SUPPLY = 250000000 * 1 ether;\r\n\r\n      event CreateToken(address indexed to, uint256 amount);\r\n      event CreateTokenByAtes(address indexed to, uint256 amount, string data);\r\n\r\n      modifier onlyOwnerOrAuthorized {\r\n        require(msg.sender == owner || isAuthorized(msg.sender));\r\n        _;\r\n      }\r\n\r\n      function createToken(address _to, uint256 _amount) onlyOwnerOrAuthorized public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_amount > 0);\r\n        require(MAX_TOKEN_SUPPLY >= totalSupply_ + _amount);\r\n\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        // KYC\r\n        frozens[_to] = true;\r\n        FrozenAddress(_to);\r\n\r\n        CreateToken(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n      }\r\n\r\n      function createTokenByAtes(address _to, uint256 _amount, string _data) onlyOwnerOrAuthorized public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_amount > 0);\r\n        require(bytes(_data).length > 0);\r\n        require(MAX_TOKEN_SUPPLY >= totalSupply_ + _amount);\r\n\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        // KYC\r\n        frozens[_to] = true;\r\n        FrozenAddress(_to);\r\n\r\n        CreateTokenByAtes(_to, _amount, _data);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n      }\r\n} \r\n\r\ncontract MallcoinCrowdSale is Ownable, Authorizable {\r\n      using SafeMath for uint256;\r\n\r\n      MallcoinToken public token;\r\n      address public wallet; \r\n\r\n      uint256 public PRE_ICO_START_TIME = 1519297200; // Thursday, 22 February 2018, 11:00:00 GMT\r\n      uint256 public PRE_ICO_END_TIME = 1520550000; // Thursday, 8 March 2018, 23:00:00 GMT\r\n      uint256 public PRE_ICO_BONUS_TIME_1 =  1519556400; // Sunday, 25 February 2018, 11:00:00 GMT\r\n      uint256 public PRE_ICO_BONUS_TIME_2 =  1519988400; // Friday, 2 March 2018, 11:00:00 GMT\r\n      uint256 public PRE_ICO_BONUS_TIME_3 =  1520334000; // Tuesday, 6 March 2018, 11:00:00 GMT\r\n      uint256 public PRE_ICO_RATE = 3000 * 1 ether; // 1 Ether = 3000 MLC\r\n      uint256 public PRE_ICO_BONUS_RATE = 75 * 1 ether; // 75 MLC = 2.5%\r\n      uint256 public preIcoTokenSales;\r\n\r\n      uint256 public ICO_START_TIME = 1521716400; // Thursday, 22 March 2018, 11:00:00 GMT\r\n      uint256 public ICO_END_TIME = 1523574000; // Thursday, 12 April 2018, 23:00:00 GMT\r\n      uint256 public ICO_BONUS_TIME_1 = 1521975600; // Sunday, 25 March 2018, 11:00:00 GMT\r\n      uint256 public ICO_BONUS_TIME_2 = 1522839600; // Wednesday, 4 April 2018, 11:00:00 GMT\r\n      uint256 public ICO_BONUS_TIME_3 = 1523358000; // Tuesday, 10 April 2018, 11:00:00 GMT\r\n      uint256 public ICO_RATE = 2000 * 1 ether; // 1 Ether = 2000 MLC\r\n      uint256 public ICO_BONUS_RATE = 50 * 1 ether; // 50 MLC = 2.5%\r\n      uint256 public icoTokenSales;\r\n\r\n      uint256 public SECRET_BONUS_FACTOR = 0;\r\n\r\n      bool public crowdSaleStop = false;\r\n\r\n      uint256 public MAX_TOKEN_SUPPLY = 250000000 * 1 ether;\r\n      uint256 public MAX_CROWD_SALE_TOKENS = 185000000 * 1 ether;\r\n      uint256 public weiRaised;\r\n      uint256 public tokenSales;\r\n      uint256 public bountyTokenFund;\r\n      uint256 public reserveTokenFund;\r\n      uint256 public teamTokenFund;\r\n\r\n\r\n      event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n      event ChangeCrowdSaleDate(uint8 period, uint256 unixtime);\r\n\r\n      modifier onlyOwnerOrAuthorized {\r\n        require(msg.sender == owner || isAuthorized(msg.sender));\r\n        _;\r\n      }\r\n\r\n      function MallcoinCrowdSale() public {\r\n        wallet = owner;\r\n        preIcoTokenSales = 0;\r\n        icoTokenSales = 0;\r\n        weiRaised = 0;\r\n        tokenSales = 0;\r\n\r\n        bountyTokenFund = 0;\r\n        reserveTokenFund = 0;\r\n        teamTokenFund = 0;\r\n      \r\n      }\r\n\r\n   function () external payable {\r\n     buyTokens(msg.sender);\r\n   }\r\n\r\n    function buyTokens(address beneficiary) public payable {\r\n      require(beneficiary != address(0));\r\n      require(validPurchase());\r\n\r\n      uint256 weiAmount = msg.value;\r\n      uint256 _buyTokens = 0;\r\n      uint256 rate = 0;\r\n      if (now >= PRE_ICO_START_TIME && now <= PRE_ICO_END_TIME) {\r\n        rate = PRE_ICO_RATE.add(getPreIcoBonusRate());\r\n        _buyTokens = rate.mul(weiAmount).div(1 ether);\r\n        preIcoTokenSales = preIcoTokenSales.add(_buyTokens);\r\n      } else if (now >= ICO_START_TIME && now <= ICO_END_TIME) {\r\n        rate = ICO_RATE.add(getIcoBonusRate());\r\n        _buyTokens = rate.mul(weiAmount).div(1 ether);\r\n        icoTokenSales = icoTokenSales.add(_buyTokens);\r\n      }\r\n\r\n      require(MAX_CROWD_SALE_TOKENS >= tokenSales.add(_buyTokens));\r\n\r\n      tokenSales = tokenSales.add(_buyTokens);\r\n      weiRaised = weiRaised.add(weiAmount);\r\n      wallet.transfer(msg.value);\r\n      token.createToken(beneficiary, _buyTokens);\r\n      TokenPurchase(msg.sender, beneficiary, weiAmount, _buyTokens);\r\n    }\r\n\r\n    function buyTokensByAtes(address addr_, uint256 amount_, string data_) onlyOwnerOrAuthorized  public returns (bool) {\r\n      require(addr_ != address(0));\r\n      require(amount_ > 0);\r\n      require(bytes(data_).length > 0);\r\n      require(validPurchase());\r\n\r\n      uint256 _buyTokens = 0;\r\n      uint256 rate = 0;\r\n      if (now >= PRE_ICO_START_TIME && now <= PRE_ICO_END_TIME) {\r\n        rate = PRE_ICO_RATE.add(getPreIcoBonusRate());\r\n        _buyTokens = rate.mul(amount_).div(1\r\n\r\nether);\r\n        preIcoTokenSales = preIcoTokenSales.add(_buyTokens);\r\n      } else if (now >= ICO_START_TIME && now <= ICO_END_TIME) {\r\n        rate = ICO_RATE.add(getIcoBonusRate());\r\n        _buyTokens = rate.mul(amount_).div(1 ether);\r\n        icoTokenSales = icoTokenSales.add(_buyTokens);\r\n      }\r\n\r\n      require(MAX_CROWD_SALE_TOKENS >= tokenSales.add(_buyTokens));\r\n\r\n      tokenSales = tokenSales.add(_buyTokens);\r\n      weiRaised = weiRaised.add(amount_);\r\n      token.createTokenByAtes(addr_, _buyTokens, data_);\r\n      TokenPurchase(msg.sender, addr_, amount_, _buyTokens);\r\n\r\n      return true;\r\n    }\r\n\r\n    function getPreIcoBonusRate() private view returns (uint256 bonus) {\r\n      bonus = 0;\r\n      uint256 factorBonus = getFactorBonus();\r\n\r\n      if (factorBonus > 0) {\r\n        if (now >= PRE_ICO_START_TIME && now < PRE_ICO_BONUS_TIME_1) { // Sunday, 25 February 2018, 11:00:00 GMT\r\n          factorBonus = factorBonus.add(7);\r\n          bonus = PRE_ICO_BONUS_RATE.mul(factorBonus); // add 600-750 MLC\r\n        } else if (now >= PRE_ICO_BONUS_TIME_1 && now < PRE_ICO_BONUS_TIME_2) { // Friday, 2 March 2018, 11:00:00 GMT\r\n          factorBonus = factorBonus.add(5);\r\n          bonus = PRE_ICO_BONUS_RATE.mul(factorBonus); // add 450-600 MLC\r\n        } else if (now >= PRE_ICO_BONUS_TIME_2 && now < PRE_ICO_BONUS_TIME_3) { // Tuesday, 6 March 2018, 11:00:00 GMT\r\n          factorBonus = factorBonus.add(1);\r\n          bonus = PRE_ICO_BONUS_RATE.mul(factorBonus); // add 150-300 MLC\r\n        } \r\n      }\r\n\r\n      return bonus;\r\n    }\r\n\r\n    function getIcoBonusRate() private view returns (uint256 bonus) {\r\n      bonus = 0;\r\n      uint256 factorBonus = getFactorBonus();\r\n\r\n      if (factorBonus > 0) {\r\n        if (now >= ICO_START_TIME && now < ICO_BONUS_TIME_1) { // Sunday, 25 March 2018, 11:00:00 GMT\r\n          factorBonus = factorBonus.add(7);\r\n          bonus = ICO_BONUS_RATE.mul(factorBonus); // add 400-500 MLC\r\n        } else if (now >= ICO_BONUS_TIME_1 && now < ICO_BONUS_TIME_2) { // Wednesday, 4 April 2018, 11:00:00 GMT\r\n          factorBonus = factorBonus.add(5);\r\n          bonus = ICO_BONUS_RATE.mul(factorBonus); // add 300-400 MLC\r\n        } else if (now >= ICO_BONUS_TIME_2 && now < ICO_BONUS_TIME_3) { // Tuesday, 10 April 2018, 11:00:00 GMT\r\n          factorBonus = factorBonus.add(1);\r\n          bonus = ICO_BONUS_RATE.mul(factorBonus); // add 100-200 MLC\r\n        } else if (now >= ICO_BONUS_TIME_3 && now < ICO_END_TIME) { // Secret bonus dates\r\n          factorBonus = factorBonus.add(SECRET_BONUS_FACTOR);\r\n          bonus = ICO_BONUS_RATE.mul(factorBonus); // add 150-300 MLC\r\n        } \r\n      }\r\n\r\n      return bonus;\r\n    }\r\n\r\n    function getFactorBonus() private view returns (uint256 factor) {\r\n      factor = 0;\r\n      if (msg.value >= 5 ether && msg.value < 10 ether) {\r\n        factor = 1;\r\n      } else if (msg.value >= 10 ether && msg.value < 100 ether) {\r\n        factor = 2;\r\n      } else if (msg.value >= 100 ether) {\r\n        factor = 3;\r\n      }\r\n      return factor;\r\n    }\r\n\r\n   function validPurchase() internal view returns (bool) {\r\n      bool withinPeriod = false;\r\n     if (now >= PRE_ICO_START_TIME && now <= PRE_ICO_END_TIME && !crowdSaleStop) {\r\n        withinPeriod = true;\r\n      } else if (now >= ICO_START_TIME && now <= ICO_END_TIME && !crowdSaleStop) {\r\n        withinPeriod = true;\r\n      }\r\n     bool nonZeroPurchase = msg.value > 0;\r\n      \r\n     return withinPeriod && nonZeroPurchase;\r\n   }\r\n\r\n    function stopCrowdSale() onlyOwner public {\r\n      crowdSaleStop = true;\r\n    }\r\n\r\n    function startCrowdSale() onlyOwner public {\r\n      crowdSaleStop = false;\r\n    }\r\n\r\n    function changeCrowdSaleDates(uint8 _period, uint256 _unixTime) onlyOwner public {\r\n      require(_period > 0 && _unixTime > 0);\r\n\r\n      if (_period == 1) {\r\n        PRE_ICO_START_TIME = _unixTime;\r\n        ChangeCrowdSaleDate(_period, _unixTime);\r\n      } else if (_period == 2) {\r\n        PRE_ICO_END_TIME = _unixTime;\r\n        ChangeCrowdSaleDate(_period, _unixTime);\r\n      } else if (_period == 3) {\r\n        PRE_ICO_BONUS_TIME_1 = _unixTime;\r\n        ChangeCrowdSaleDate(_period, _unixTime);\r\n      } else if (_period == 4) {\r\n\r\nPRE_ICO_BONUS_TIME_2 = _unixTime;\r\n        ChangeCrowdSaleDate(_period, _unixTime);\r\n      } else if (_period == 5) {\r\n        PRE_ICO_BONUS_TIME_3 = _unixTime;\r\n        ChangeCrowdSaleDate(_period, _unixTime);\r\n      } else if (_period == 6) {\r\n        ICO_START_TIME = _unixTime;\r\n        ChangeCrowdSaleDate(_period, _unixTime);\r\n      } else if (_period == 7) {\r\n        ICO_END_TIME = _unixTime;\r\n        ChangeCrowdSaleDate(_period, _unixTime);\r\n      } else if (_period == 8) {\r\n        ICO_BONUS_TIME_1 = _unixTime;\r\n        ChangeCrowdSaleDate(_period, _unixTime);\r\n      } else if (_period == 9) {\r\n        ICO_BONUS_TIME_2 = _unixTime;\r\n        ChangeCrowdSaleDate(_period, _unixTime);\r\n      } else if (_period == 10) {\r\n        ICO_BONUS_TIME_3 = _unixTime;\r\n        ChangeCrowdSaleDate(_period, _unixTime);\r\n      } \r\n    }\r\n\r\n    function setSecretBonusFactor(uint256 _factor) onlyOwner public {\r\n      require(_factor >= 0);\r\n\r\n      SECRET_BONUS_FACTOR = _factor;\r\n    }\r\n    \r\n    function changeMallcoinTokenAddress(address _token) onlyOwner public {\r\n      require(_token != address(0));\r\n\r\n      token = MallcoinToken(_token);\r\n    }\r\n\r\n    function finishCrowdSale() onlyOwner public returns (bool) {\r\n      crowdSaleStop = true;\r\n      teamTokenFund = tokenSales.div(100).mul(10); // Team fund 10%\r\n      bountyTokenFund = tokenSales.div(100).mul(7); // Bounty fund 7%;\r\n      reserveTokenFund = tokenSales.div(100).mul(9); // Reserve fund 9%;\r\n\r\n      uint256 tokensFund = teamTokenFund.add(bountyTokenFund).add(reserveTokenFund);\r\n      wallet.transfer(this.balance);\r\n      token.createToken(wallet, tokensFund);\r\n\r\n      return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ICO_END_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveTokenFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTokenSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CROWD_SALE_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"delAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokenFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_BONUS_TIME_1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_BONUS_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTokenFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_BONUS_TIME_1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factor\",\"type\":\"uint256\"}],\"name\":\"setSecretBonusFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoTokenSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"changeMallcoinTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_BONUS_TIME_3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_BONUS_TIME_2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_BONUS_TIME_3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint8\"},{\"name\":\"_unixTime\",\"type\":\"uint256\"}],\"name\":\"changeCrowdSaleDates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECRET_BONUS_FACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_BONUS_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleStop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopCrowdSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCrowdSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_END_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOKEN_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_BONUS_TIME_2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCrowdSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"},{\"name\":\"data_\",\"type\":\"string\"}],\"name\":\"buyTokensByAtes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"period\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"unixtime\",\"type\":\"uint256\"}],\"name\":\"ChangeCrowdSaleDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MallcoinCrowdSale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c5bf3d78bca1eebb06f2da989af01b13f4e4d015e6c4391dec390e410e76cc53"}]}