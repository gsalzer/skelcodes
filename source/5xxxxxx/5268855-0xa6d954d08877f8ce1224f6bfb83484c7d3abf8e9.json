{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title PullPayment\r\n * @dev Base contract supporting async send for pull payments. Inherit from this\r\n * contract and use asyncSend instead of send.\r\n */\r\ncontract PullPayment {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) public payments;\r\n  uint256 public totalPayments;\r\n\r\n  /**\r\n  * @dev withdraw accumulated balance, called by payee.\r\n  */\r\n  function withdrawPayments() public {\r\n    address payee = msg.sender;\r\n    uint256 payment = payments[payee];\r\n\r\n    require(payment != 0);\r\n    require(this.balance >= payment);\r\n\r\n    totalPayments = totalPayments.sub(payment);\r\n    payments[payee] = 0;\r\n\r\n    assert(payee.send(payment));\r\n  }\r\n\r\n  /**\r\n  * @dev Called by the payer to store the sent amount as credit to be pulled.\r\n  * @param dest The destination address of the funds.\r\n  * @param amount The amount to transfer.\r\n  */\r\n  function asyncSend(address dest, uint256 amount) internal {\r\n    payments[dest] = payments[dest].add(amount);\r\n    totalPayments = totalPayments.add(amount);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC721 interface\r\n * @dev see https://github.com/ethereum/eips/issues/721\r\n */\r\ncontract ERC721 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\n/**\r\n * @title ERC721Token\r\n * Generic implementation for the required functionality of the ERC721 standard\r\n */\r\ncontract ERC721Token is ERC721 {\r\n  using SafeMath for uint256;\r\n\r\n  // Total amount of tokens\r\n  uint256 private totalTokens;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) private tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) private tokenApprovals;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) private ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) private ownedTokensIndex;\r\n\r\n  /**\r\n  * @dev Guarantees msg.sender is owner of the given token\r\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n  */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the total amount of tokens stored by the contract\r\n  * @return uint256 representing the total amount of tokens\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalTokens;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address\r\n  * @param _owner address to query the balance of\r\n  * @return uint256 representing the amount owned by the passed address\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return ownedTokens[_owner].length;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the list of tokens owned by a given address\r\n  * @param _owner address to query the tokens of\r\n  * @return uint256[] representing the list of tokens owned by the passed address\r\n  */\r\n  function tokensOf(address _owner) public view returns (uint256[]) {\r\n    return ownedTokens[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the owner of the specified token ID\r\n  * @param _tokenId uint256 ID of the token to query the owner of\r\n  * @return owner address currently marked as the owner of the given token ID\r\n  */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address to take ownership of a given token ID\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved to take ownership of the given token ID\r\n   */\r\n  function approvedFor(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfers the ownership of a given token ID to another address\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Approves another address to claim for the ownership of the given token ID\r\n  * @param _to address to be approved for the given token ID\r\n  * @param _tokenId uint256 ID of the token to be approved\r\n  */\r\n  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Claims the ownership of a given token ID\r\n  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\r\n  */\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    require(isApprovedFor(msg.sender, _tokenId));\r\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Mint token function\r\n  * @param _to The address that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addToken(_to, _tokenId);\r\n    Transfer(0x0, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Burns a specific token\r\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\r\n    if (approvedFor(_tokenId) != 0) {\r\n      clearApproval(msg.sender, _tokenId);\r\n    }\r\n    removeToken(msg.sender, _tokenId);\r\n    Transfer(msg.sender, 0x0, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether the msg.sender is approved for the given token ID or not\r\n   * This function is not private so it can be extended in further implementations like the operatable ERC721\r\n   * @param _owner address of the owner to query the approval of\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return bool whether the msg.sender is approved for the given token ID or not\r\n   */\r\n  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\r\n    return approvedFor(_tokenId) == _owner;\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\r\n  * @param _from address which you want to send tokens from\r\n  * @param _to address which you want to transfer the token to\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    require(_to != ownerOf(_tokenId));\r\n    require(ownerOf(_tokenId) == _from);\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeToken(_from, _tokenId);\r\n    addToken(_to, _tokenId);\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval of a given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApproval(address _owner, uint256 _tokenId) private {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    tokenApprovals[_tokenId] = 0;\r\n    Approval(_owner, 0, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addToken(address _to, uint256 _tokenId) private {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    uint256 length = balanceOf(_to);\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n    totalTokens = totalTokens.add(1);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeToken(address _from, uint256 _tokenId) private {\r\n    require(ownerOf(_tokenId) == _from);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = balanceOf(_from).sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    tokenOwner[_tokenId] = 0;\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n    totalTokens = totalTokens.sub(1);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Composable\r\n * Composable - a contract to mint compositions\r\n */\r\n\r\ncontract Composable is ERC721Token, Ownable, PullPayment, Pausable {\r\n   \r\n    // Max number of layers for a composition token\r\n    uint public constant MAX_LAYERS = 100;\r\n\r\n    // The minimum composition fee for an ethmoji\r\n    uint256 public minCompositionFee = 0.001 ether;\r\n\r\n    // Mapping from token ID to composition price\r\n    mapping (uint256 => uint256) public tokenIdToCompositionPrice;\r\n    \r\n    // Mapping from token ID to layers representing it\r\n    mapping (uint256 => uint256[]) public tokenIdToLayers;\r\n\r\n    // Hash of all layers to track uniqueness of ethmojis\r\n    mapping (bytes32 => bool) public compositions;\r\n\r\n    // Image hashes to track uniquenes of ethmoji images.\r\n    mapping (uint256 => uint256) public imageHashes;\r\n\r\n    // Event for emitting new base token created \r\n    event BaseTokenCreated(uint256 tokenId);\r\n    \r\n    // Event for emitting new composition token created \r\n    event CompositionTokenCreated(uint256 tokenId, uint256[] layers, address indexed owner);\r\n    \r\n    // Event for emitting composition price changing for a token\r\n    event CompositionPriceChanged(uint256 tokenId, uint256 price, address indexed owner);\r\n\r\n    // Whether or not this contract accepts making compositions with other compositions\r\n    bool public isCompositionOnlyWithBaseLayers;\r\n    \r\n// ----- EXPOSED METHODS --------------------------------------------------------------------------\r\n\r\n    /**\r\n    * @dev Mints a base token to an address with a given composition price\r\n    * @param _to address of the future owner of the token\r\n    * @param _compositionPrice uint256 composition price for the new token\r\n    */\r\n    function mintTo(address _to, uint256 _compositionPrice, uint256 _imageHash) public onlyOwner {\r\n        uint256 newTokenIndex = _getNextTokenId();\r\n        _mint(_to, newTokenIndex);\r\n        tokenIdToLayers[newTokenIndex] = [newTokenIndex];\r\n        require(_isUnique(tokenIdToLayers[newTokenIndex], _imageHash));\r\n        compositions[keccak256([newTokenIndex])] = true;\r\n        imageHashes[_imageHash] = newTokenIndex;      \r\n        BaseTokenCreated(newTokenIndex);\r\n        _setCompositionPrice(newTokenIndex, _compositionPrice);\r\n    }\r\n\r\n    /**\r\n    * @dev Mints a composition emoji\r\n    * @param _tokenIds uint256[] the array of layers that will make up the composition\r\n    */\r\n    function compose(uint256[] _tokenIds,  uint256 _imageHash) public payable whenNotPaused {\r\n        uint256 price = getTotalCompositionPrice(_tokenIds);\r\n        require(msg.sender != address(0) && msg.value >= price);\r\n        require(_tokenIds.length <= MAX_LAYERS);\r\n\r\n        uint256[] memory layers = new uint256[](MAX_LAYERS);\r\n        uint actualSize = 0; \r\n\r\n        for (uint i = 0; i < _tokenIds.length; i++) { \r\n            uint256 compositionLayerId = _tokenIds[i];\r\n            require(_tokenLayersExist(compositionLayerId));\r\n            uint256[] memory inheritedLayers = tokenIdToLayers[compositionLayerId];\r\n            if (isCompositionOnlyWithBaseLayers) { \r\n                require(inheritedLayers.length == 1);\r\n            }\r\n            require(inheritedLayers.length < MAX_LAYERS);\r\n            for (uint j = 0; j < inheritedLayers.length; j++) { \r\n                require(actualSize < MAX_LAYERS);\r\n                for (uint k = 0; k < layers.length; k++) { \r\n                    require(layers[k] != inheritedLayers[j]);\r\n                    if (layers[k] == 0) { \r\n                        break;\r\n                    }\r\n                }\r\n                layers[actualSize] = inheritedLayers[j];\r\n                actualSize += 1;\r\n            }\r\n            require(ownerOf(compositionLayerId) != address(0));\r\n            asyncSend(ownerOf(compositionLayerId), tokenIdToCompositionPrice[compositionLayerId]);\r\n        }\r\n    \r\n        uint256 newTokenIndex = _getNextTokenId();\r\n        \r\n        tokenIdToLayers[newTokenIndex] = _trim(layers, actualSize);\r\n        require(_isUnique(tokenIdToLayers[newTokenIndex], _imageHash));\r\n        compositions[keccak256(tokenIdToLayers[newTokenIndex])] = true;\r\n        imageHashes[_imageHash] = newTokenIndex;\r\n    \r\n        _mint(msg.sender, newTokenIndex);\r\n\r\n        if (msg.value > price) {\r\n            uint256 purchaseExcess = SafeMath.sub(msg.value, price);\r\n            msg.sender.transfer(purchaseExcess);          \r\n        }\r\n\r\n        if (!isCompositionOnlyWithBaseLayers) { \r\n            _setCompositionPrice(newTokenIndex, minCompositionFee);\r\n        }\r\n   \r\n        CompositionTokenCreated(newTokenIndex, tokenIdToLayers[newTokenIndex], msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev allows an address to withdraw its balance in the contract\r\n    * @param _tokenId uint256 the token ID\r\n    * @return uint256[] list of layers for a token\r\n    */\r\n    function getTokenLayers(uint256 _tokenId) public view returns(uint256[]) {\r\n        return tokenIdToLayers[_tokenId];\r\n    }\r\n\r\n    /**\r\n    * @dev given an array of ids, returns whether or not this composition is valid and unique\r\n    * does not assume the layers array is flattened \r\n    * @param _tokenIds uint256[] an array of token IDs\r\n    * @return bool whether or not the composition is unique\r\n    */\r\n    function isValidComposition(uint256[] _tokenIds, uint256 _imageHash) public view returns (bool) { \r\n        if (isCompositionOnlyWithBaseLayers) { \r\n            return _isValidBaseLayersOnly(_tokenIds, _imageHash);\r\n        } else { \r\n            return _isValidWithCompositions(_tokenIds, _imageHash);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev returns composition price of a given token ID\r\n    * @param _tokenId uint256 token ID\r\n    * @return uint256 composition price\r\n    */\r\n    function getCompositionPrice(uint256 _tokenId) public view returns(uint256) { \r\n        return tokenIdToCompositionPrice[_tokenId];\r\n    }\r\n\r\n    /**\r\n    * @dev get total price for minting a composition given the array of desired layers\r\n    * @param _tokenIds uint256[] an array of token IDs\r\n    * @return uint256 price for minting a composition with the desired layers\r\n    */\r\n    function getTotalCompositionPrice(uint256[] _tokenIds) public view returns(uint256) {\r\n        uint256 totalCompositionPrice = 0;\r\n        for (uint i = 0; i < _tokenIds.length; i++) {\r\n            require(_tokenLayersExist(_tokenIds[i]));\r\n            totalCompositionPrice = SafeMath.add(totalCompositionPrice, tokenIdToCompositionPrice[_tokenIds[i]]);\r\n        }\r\n\r\n        totalCompositionPrice = SafeMath.div(SafeMath.mul(totalCompositionPrice, 105), 100);\r\n\r\n        return totalCompositionPrice;\r\n    }\r\n\r\n    /**\r\n    * @dev sets the composition price for a token ID. \r\n    * Cannot be lower than the current composition fee\r\n    * @param _tokenId uint256 the token ID\r\n    * @param _price uint256 the new composition price\r\n    */\r\n    function setCompositionPrice(uint256 _tokenId, uint256 _price) public onlyOwnerOf(_tokenId) {\r\n        _setCompositionPrice(_tokenId, _price);\r\n    }\r\n\r\n// ----- PRIVATE FUNCTIONS ------------------------------------------------------------------------\r\n\r\n    /**\r\n    * @dev given an array of ids, returns whether or not this composition is valid and unique\r\n    * for when only base layers are allowed\r\n    * does not assume the layers array is flattened \r\n    * @param _tokenIds uint256[] an array of token IDs\r\n    * @return bool whether or not the composition is unique\r\n    */\r\n    function _isValidBaseLayersOnly(uint256[] _tokenIds, uint256 _imageHash) private view returns (bool) { \r\n        require(_tokenIds.length <= MAX_LAYERS);\r\n        uint256[] memory layers = new uint256[](_tokenIds.length);\r\n\r\n        for (uint i = 0; i < _tokenIds.length; i++) { \r\n            if (!_tokenLayersExist(_tokenIds[i])) {\r\n                return false;\r\n            }\r\n\r\n            if (tokenIdToLayers[_tokenIds[i]].length != 1) {\r\n                return false;\r\n            }\r\n\r\n            for (uint k = 0; k < layers.length; k++) { \r\n                if (layers[k] == tokenIdToLayers[_tokenIds[i]][0]) {\r\n                    return false;\r\n                }\r\n                if (layers[k] == 0) { \r\n                    layers[k] = tokenIdToLayers[_tokenIds[i]][0];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    \r\n        return _isUnique(layers, _imageHash);\r\n    }\r\n\r\n    /**\r\n    * @dev given an array of ids, returns whether or not this composition is valid and unique\r\n    * when compositions are allowed\r\n    * does not assume the layers array is flattened \r\n    * @param _tokenIds uint256[] an array of token IDs\r\n    * @return bool whether or not the composition is unique\r\n    */\r\n    function _isValidWithCompositions(uint256[] _tokenIds, uint256 _imageHash) private view returns (bool) { \r\n        uint256[] memory layers = new uint256[](MAX_LAYERS);\r\n        uint actualSize = 0; \r\n        if (_tokenIds.length > MAX_LAYERS) { \r\n            return false;\r\n        }\r\n\r\n        for (uint i = 0; i < _tokenIds.length; i++) { \r\n            uint256 compositionLayerId = _tokenIds[i];\r\n            if (!_tokenLayersExist(compositionLayerId)) { \r\n                return false;\r\n            }\r\n            uint256[] memory inheritedLayers = tokenIdToLayers[compositionLayerId];\r\n            require(inheritedLayers.length < MAX_LAYERS);\r\n            for (uint j = 0; j < inheritedLayers.length; j++) { \r\n                require(actualSize < MAX_LAYERS);\r\n                for (uint k = 0; k < layers.length; k++) { \r\n                    if (layers[k] == inheritedLayers[j]) {\r\n                        return false;\r\n                    }\r\n                    if (layers[k] == 0) { \r\n                        break;\r\n                    }\r\n                }\r\n                layers[actualSize] = inheritedLayers[j];\r\n                actualSize += 1;\r\n            }\r\n        }\r\n        return _isUnique(_trim(layers, actualSize), _imageHash);\r\n    }\r\n\r\n    /**\r\n    * @dev trims the given array to a given size\r\n    * @param _layers uint256[] the array of layers that will make up the composition\r\n    * @param _size uint the array of layers that will make up the composition\r\n    * @return uint256[] array trimmed to given size\r\n    */\r\n    function _trim(uint256[] _layers, uint _size) private pure returns(uint256[]) { \r\n        uint256[] memory trimmedLayers = new uint256[](_size);\r\n        for (uint i = 0; i < _size; i++) { \r\n            trimmedLayers[i] = _layers[i];\r\n        }\r\n\r\n        return trimmedLayers;\r\n    }\r\n\r\n    /**\r\n    * @dev checks if a token is an existing token by checking if it has non-zero layers\r\n    * @param _tokenId uint256 token ID\r\n    * @return bool whether or not the given tokenId exists according to its layers\r\n    */\r\n    function _tokenLayersExist(uint256 _tokenId) private view returns (bool) { \r\n        return tokenIdToLayers[_tokenId].length != 0;\r\n    }\r\n\r\n    /**\r\n    * @dev set composition price for a token\r\n    * @param _tokenId uint256 token ID\r\n    * @param _price uint256 new composition price\r\n    */\r\n    function _setCompositionPrice(uint256 _tokenId, uint256 _price) private {\r\n        require(_price >= minCompositionFee);\r\n        tokenIdToCompositionPrice[_tokenId] = _price;\r\n        CompositionPriceChanged(_tokenId, _price, msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev calculates the next token ID based on totalSupply\r\n    * @return uint256 for the next token ID\r\n    */\r\n    function _getNextTokenId() private view returns (uint256) {\r\n        return totalSupply().add(1); \r\n    }\r\n\r\n    /**\r\n    * @dev given an array of ids, returns whether or not this composition is unique\r\n    * assumes the layers are all base layers (flattened)\r\n    * @param _layers uint256[] an array of token IDs\r\n    * @param _imageHash uint256 image hash for the composition\r\n    * @return bool whether or not the composition is unique\r\n    */\r\n    function _isUnique(uint256[] _layers, uint256 _imageHash) private view returns (bool) { \r\n        return compositions[keccak256(_layers)] == false && imageHashes[_imageHash] == 0;\r\n    }\r\n\r\n// ----- ONLY OWNER FUNCTIONS ---------------------------------------------------------------------\r\n\r\n    /**\r\n    * @dev payout method for the contract owner to payout contract profits to a given address\r\n    * @param _to address for the payout \r\n    */\r\n    function payout (address _to) public onlyOwner { \r\n        totalPayments = 0;\r\n        _to.transfer(this.balance);\r\n    }\r\n\r\n    /**\r\n    * @dev sets global default composition fee for all new tokens\r\n    * @param _price uint256 new default composition price\r\n    */\r\n    function setGlobalCompositionFee(uint256 _price) public onlyOwner { \r\n        minCompositionFee = _price;\r\n    }\r\n}\r\n\r\ncontract Ethmoji is Composable {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant NAME = \"Ethmoji\";\r\n    string public constant SYMBOL = \"EMJ\";\r\n\r\n    // Mapping from address to emoji representing avatar\r\n    mapping (address => uint256) public addressToAvatar;\r\n\r\n    function Ethmoji() public { \r\n        isCompositionOnlyWithBaseLayers = true;\r\n    }\r\n\r\n    /**\r\n    * @dev Mints a base token to an address with a given composition price\r\n    * @param _to address of the future owner of the token\r\n    * @param _compositionPrice uint256 composition price for the new token\r\n    */\r\n    function mintTo(address _to, uint256 _compositionPrice, uint256 _imageHash) public onlyOwner {\r\n        Composable.mintTo(_to, _compositionPrice, _imageHash);\r\n        _setAvatarIfNoAvatarIsSet(_to, tokensOf(_to)[0]);\r\n    }\r\n\r\n    /**\r\n    * @dev Mints a composition emoji\r\n    * @param _tokenIds uint256[] the array of layers that will make up the composition\r\n    */\r\n    function compose(uint256[] _tokenIds,  uint256 _imageHash) public payable whenNotPaused {\r\n        Composable.compose(_tokenIds, _imageHash);\r\n        _setAvatarIfNoAvatarIsSet(msg.sender, tokensOf(msg.sender)[0]);\r\n\r\n\r\n        // Immediately pay out to layer owners\r\n        for (uint8 i = 0; i < _tokenIds.length; i++) {\r\n            _withdrawTo(ownerOf(_tokenIds[i]));\r\n        }\r\n    }\r\n\r\n// ----- EXPOSED METHODS --------------------------------------------------------------------------\r\n\r\n    /**\r\n    * @dev returns the name ETHMOJI\r\n    * @return string ETHMOJI\r\n    */\r\n    function name() public pure returns (string) {\r\n        return NAME;\r\n    }\r\n\r\n    /**\r\n    * @dev returns the name EMJ\r\n    * @return string EMJ\r\n    */\r\n    function symbol() public pure returns (string) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    /**\r\n    * @dev sets avatar for an address\r\n    * @param _tokenId uint256 token ID\r\n    */\r\n    function setAvatar(uint256 _tokenId) public onlyOwnerOf(_tokenId) whenNotPaused {\r\n        addressToAvatar[msg.sender] = _tokenId;\r\n    }\r\n\r\n    /**\r\n    * @dev returns the ID representing the avatar of the address\r\n    * @param _owner address\r\n    * @return uint256 token ID of the avatar associated with that address\r\n    */\r\n    function getAvatar(address _owner) public view returns(uint256) {\r\n        return addressToAvatar[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev transfer ownership of token. keeps track of avatar logic\r\n    * @param _to address to whom the token is being transferred to\r\n    * @param _tokenId uint256 the ID of the token being transferred\r\n    */\r\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) whenNotPaused {\r\n        // If the transferred token was previous owner's avatar, remove it\r\n        if (addressToAvatar[msg.sender] == _tokenId) {\r\n            _removeAvatar(msg.sender);\r\n        }\r\n\r\n        ERC721Token.transfer(_to, _tokenId);\r\n    }\r\n\r\n// ----- PRIVATE FUNCTIONS ------------------------------------------------------------------------\r\n\r\n    /**\r\n    * @dev sets avatar if no avatar was previously set\r\n    * @param _owner address of the new vatara owner\r\n    * @param _tokenId uint256 token ID\r\n    */\r\n    function _setAvatarIfNoAvatarIsSet(address _owner, uint256 _tokenId) private {\r\n        if (addressToAvatar[_owner] == 0) {\r\n            addressToAvatar[_owner] = _tokenId;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev removes avatar for address\r\n    * @param _owner address of the avatar owner\r\n    */\r\n    function _removeAvatar(address _owner) private {\r\n        addressToAvatar[_owner] = 0;\r\n    }\r\n\r\n    /**\r\n    * @dev withdraw accumulated balance to the payee\r\n    * @param _payee address to which to withdraw to\r\n    */\r\n    function _withdrawTo(address _payee) private {\r\n        uint256 payment = payments[_payee];\r\n\r\n        if (payment != 0 && this.balance >= payment) {\r\n            totalPayments = totalPayments.sub(payment);\r\n            payments[_payee] = 0;\r\n\r\n            _payee.transfer(payment);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_imageHash\",\"type\":\"uint256\"}],\"name\":\"compose\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setGlobalCompositionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getTotalCompositionPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCompositionPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_compositionPrice\",\"type\":\"uint256\"},{\"name\":\"_imageHash\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToCompositionPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToLayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"compositions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"imageHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenLayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCompositionOnlyWithBaseLayers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCompositionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_LAYERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAvatar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_imageHash\",\"type\":\"uint256\"}],\"name\":\"isValidComposition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setCompositionPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setAvatar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAvatar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BaseTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"layers\",\"type\":\"uint256[]\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CompositionTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CompositionPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Ethmoji","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://141ae1431bc54f4b294a2dab8a704f005fd0a7a16714bd35243d958796a54c9c"}]}