{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.20;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n  \r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\ncontract JackpotAccessControl is Claimable, Pausable, CanReclaimToken {\r\n    address public cfoAddress;\r\n    \r\n    function JackpotAccessControl() public {\r\n        cfoAddress = msg.sender;\r\n    }\r\n    \r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    function setCFO(address _newCFO) external onlyOwner {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n}\r\n\r\ncontract JackpotBase is JackpotAccessControl {\r\n    using SafeMath for uint256;\r\n \r\n    bool public gameStarted;\r\n    \r\n    address public gameStarter;\r\n    address public lastPlayer;\r\n\taddress public player2;\r\n\taddress public player3;\r\n\taddress public player4;\r\n\taddress public player5;\r\n\t\r\n    uint256 public lastWagerTimeoutTimestamp;\r\n\tuint256 public player2Timestamp;\r\n\tuint256 public player3Timestamp;\r\n\tuint256 public player4Timestamp;\r\n\tuint256 public player5Timestamp;\r\n\t\r\n    uint256 public timeout;\r\n    uint256 public nextTimeout;\r\n    uint256 public minimumTimeout;\r\n    uint256 public nextMinimumTimeout;\r\n    uint256 public numberOfWagersToMinimumTimeout;\r\n    uint256 public nextNumberOfWagersToMinimumTimeout;\r\n\t\r\n\tuint256 currentTimeout;\r\n\t\r\n    uint256 public wagerIndex = 0;\r\n    \r\n\tuint256 public currentBalance;\r\n\t\r\n    function calculateTimeout() public view returns(uint256) {\r\n        if (wagerIndex >= numberOfWagersToMinimumTimeout || numberOfWagersToMinimumTimeout == 0) {\r\n            return minimumTimeout;\r\n        } else {\r\n            uint256 difference = timeout - minimumTimeout;\r\n            \r\n            uint256 decrease = difference.mul(wagerIndex).div(numberOfWagersToMinimumTimeout);\r\n                   \r\n            return (timeout - decrease);\r\n        }\r\n    }\r\n}\r\n\r\ncontract PullPayment {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) public payments;\r\n  uint256 public totalPayments;\r\n\r\n  function withdrawPayments() public {\r\n    address payee = msg.sender;\r\n    uint256 payment = payments[payee];\r\n\r\n    require(payment != 0);\r\n    require(this.balance >= payment);\r\n\t\r\n    totalPayments = totalPayments.sub(payment);\r\n    payments[payee] = 0;\r\n\r\n    assert(payee.send(payment));\r\n  }\r\n\r\n  function asyncSend(address dest, uint256 amount) internal {\r\n    payments[dest] = payments[dest].add(amount);\r\n    totalPayments = totalPayments.add(amount);\r\n  }\r\n}\r\n\r\ncontract JackpotFinance is JackpotBase, PullPayment {\r\n    uint256 public feePercentage = 2500;\r\n    \r\n    uint256 public gameStarterDividendPercentage = 2500;\r\n    \r\n    uint256 public price;\r\n    \r\n    uint256 public nextPrice;\r\n    \r\n    uint256 public prizePool;\r\n    \r\n    // The current 5th wager pool (in wei).\r\n    uint256 public wagerPool5;\r\n\t\r\n\t// The current 13th wager pool (in wei).\r\n\tuint256 public wagerPool13;\r\n    \r\n    function setGameStarterDividendPercentage(uint256 _gameStarterDividendPercentage) external onlyCFO {\r\n        require(_gameStarterDividendPercentage <= 4000);\r\n        \r\n        gameStarterDividendPercentage = _gameStarterDividendPercentage;\r\n    }\r\n    \r\n    function _sendFunds(address beneficiary, uint256 amount) internal {\r\n        if (!beneficiary.send(amount)) {\r\n            asyncSend(beneficiary, amount);\r\n        }\r\n    }\r\n    \r\n    function withdrawFreeBalance() external onlyCFO {\r\n\t\t\r\n        uint256 freeBalance = this.balance.sub(totalPayments).sub(prizePool).sub(wagerPool5).sub(wagerPool13);\r\n        \r\n        cfoAddress.transfer(freeBalance);\r\n\t\tcurrentBalance = this.balance;\r\n    }\r\n}\r\n\r\ncontract JackpotCore is JackpotFinance {\r\n    \r\n    function JackpotCore(uint256 _price, uint256 _timeout, uint256 _minimumTimeout, uint256 _numberOfWagersToMinimumTimeout) public {\r\n        require(_timeout >= _minimumTimeout);\r\n        \r\n        nextPrice = _price;\r\n        nextTimeout = _timeout;\r\n        nextMinimumTimeout = _minimumTimeout;\r\n        nextNumberOfWagersToMinimumTimeout = _numberOfWagersToMinimumTimeout;\r\n        //NextGame(nextPrice, nextTimeout, nextMinimumTimeout, nextNumberOfWagersToMinimumTimeout);\r\n    }\r\n    \r\n    //event NextGame(uint256 price, uint256 timeout, uint256 minimumTimeout, uint256 numberOfWagersToMinimumTimeout);\r\n    event Start(address indexed starter, uint256 timestamp, uint256 price, uint256 timeout, uint256 minimumTimeout, uint256 numberOfWagersToMinimumTimeout);\r\n    event End(address indexed winner, uint256 timestamp, uint256 prize);\r\n    event Bet(address player, uint256 timestamp, uint256 timeoutTimestamp, uint256 wagerIndex, uint256 newPrizePool);\r\n    event TopUpPrizePool(address indexed donater, uint256 ethAdded, string message, uint256 newPrizePool);\r\n    \r\n    function bet(bool startNewGameIfIdle) external payable {\r\n\t\trequire(msg.value >= price);\r\n\t\t\r\n        _processGameEnd();\r\n\t\t\r\n        if (!gameStarted) {\r\n            require(!paused);\r\n\r\n            require(startNewGameIfIdle);\r\n            \r\n            price = nextPrice;\r\n            timeout = nextTimeout;\r\n            minimumTimeout = nextMinimumTimeout;\r\n            numberOfWagersToMinimumTimeout = nextNumberOfWagersToMinimumTimeout;\r\n            \r\n            gameStarted = true;\r\n            \r\n            gameStarter = msg.sender;\r\n            \r\n            Start(msg.sender, now, price, timeout, minimumTimeout, numberOfWagersToMinimumTimeout);\r\n        }\r\n        \r\n        // Calculate the fees and dividends.\r\n        uint256 fee = price.mul(feePercentage).div(100000);\r\n        uint256 dividend = price.mul(gameStarterDividendPercentage).div(100000);\r\n\t\t\r\n        uint256 wagerPool5Part;\r\n\t\tuint256 wagerPool13Part;\r\n        \r\n\t\t// Calculate the wager pool part.\r\n        wagerPool5Part = price.mul(2).div(10);\r\n\t\twagerPool13Part = price.mul(3).div(26);\r\n            \r\n        // Add funds to the wager pool.\r\n        wagerPool5 = wagerPool5.add(wagerPool5Part);\r\n\t\twagerPool13 = wagerPool13.add(wagerPool13Part);\r\n\t\t\r\n\t\tprizePool = prizePool.add(price);\r\n\t\tprizePool = prizePool.sub(fee);\r\n\t\tprizePool = prizePool.sub(dividend);\r\n\t\tprizePool = prizePool.sub(wagerPool5Part);\r\n\t\tprizePool = prizePool.sub(wagerPool13Part);\r\n\t\t\r\n\t\tif (wagerIndex % 5 == 4) {\r\n            // On every 5th wager, give 2x back\r\n\t\t\t\r\n            uint256 wagerPrize5 = price.mul(2);\r\n            \r\n            // Calculate the missing wager pool part, remove earlier added wagerPool5Part\r\n            uint256 difference5 = wagerPrize5.sub(wagerPool5);\r\n\t\t\tprizePool = prizePool.sub(difference5);\r\n        \r\n            msg.sender.transfer(wagerPrize5);\r\n            \r\n            wagerPool5 = 0;\r\n        }\r\n\t\t\r\n\t\tif (wagerIndex % 13 == 12) {\r\n\t\t\t// On every 13th wager, give 3x back\r\n\t\t\t\r\n\t\t\tuint256 wagerPrize13 = price.mul(3);\r\n\t\t\t\r\n\t\t\tuint256 difference13 = wagerPrize13.sub(wagerPool13);\r\n\t\t\tprizePool = prizePool.sub(difference13);\r\n\t\t\t\r\n\t\t\tmsg.sender.transfer(wagerPrize13);\r\n\t\t\t\r\n\t\t\twagerPool13 = 0;\r\n\t\t}\r\n\r\n\t\tplayer5 = player4;\r\n\t\tplayer4 = player3;\r\n\t\tplayer3 = player2;\r\n\t\tplayer2 = lastPlayer;\r\n\t\t\r\n\t\tplayer5Timestamp = player4Timestamp;\r\n\t\tplayer4Timestamp = player3Timestamp;\r\n\t\tplayer3Timestamp = player2Timestamp;\r\n\t\t\r\n\t\tif (lastWagerTimeoutTimestamp > currentTimeout) {\r\n\t\t\tplayer2Timestamp = lastWagerTimeoutTimestamp.sub(currentTimeout);\r\n\t\t}\r\n\t\t\r\n\t\tcurrentTimeout = calculateTimeout();\r\n\t\t\r\n        lastPlayer = msg.sender;\r\n        lastWagerTimeoutTimestamp = now + currentTimeout;\r\n        \r\n\t\twagerIndex = wagerIndex.add(1);\r\n\t\t\r\n        Bet(msg.sender, now, lastWagerTimeoutTimestamp, wagerIndex, prizePool);\r\n        \r\n        _sendFunds(gameStarter, dividend);\r\n\t\t//_sendFunds(cfoAddress, fee);\r\n        \r\n        uint256 excess = msg.value - price;\r\n        \r\n        if (excess > 0) {\r\n            msg.sender.transfer(excess);\r\n        }\r\n\t\t\r\n\t\tcurrentBalance = this.balance;\r\n    }\r\n    \r\n    function topUp(string message) external payable {\r\n        require(gameStarted || !paused);\r\n        \r\n        require(msg.value > 0);\r\n        \r\n        prizePool = prizePool.add(msg.value);\r\n        \r\n        TopUpPrizePool(msg.sender, msg.value, message, prizePool);\r\n    }\r\n    \r\n    function setNextGame(uint256 _price, uint256 _timeout, uint256 _minimumTimeout, uint256 _numberOfWagersToMinimumTimeout) external onlyCFO {\r\n        require(_timeout >= _minimumTimeout);\r\n    \r\n        nextPrice = _price;\r\n        nextTimeout = _timeout;\r\n        nextMinimumTimeout = _minimumTimeout;\r\n        nextNumberOfWagersToMinimumTimeout = _numberOfWagersToMinimumTimeout;\r\n        //NextGame(nextPrice, nextTimeout, nextMinimumTimeout, nextNumberOfWagersToMinimumTimeout);\r\n    } \r\n    \r\n    function endGame() external {\r\n        require(_processGameEnd());\r\n    }\r\n    \r\n    function _processGameEnd() internal returns(bool) {\r\n        if (!gameStarted) {\r\n            return false;\r\n        }\r\n    \r\n        if (now <= lastWagerTimeoutTimestamp) {\r\n            return false;\r\n        }\r\n        \r\n\t\t// gameStarted AND past the time limit\r\n        uint256 excessPool = wagerPool5.add(wagerPool13);\r\n        \r\n        _sendFunds(lastPlayer, prizePool);\r\n\t\t_sendFunds(cfoAddress, excessPool);\r\n        \r\n        End(lastPlayer, lastWagerTimeoutTimestamp, prizePool);\r\n        \r\n        gameStarted = false;\r\n        gameStarter = 0x0;\r\n        lastPlayer = 0x0;\r\n\t\tplayer2 = 0x0;\r\n\t\tplayer3 = 0x0;\r\n\t\tplayer4 = 0x0;\r\n\t\tplayer5 = 0x0;\r\n        lastWagerTimeoutTimestamp = 0;\r\n\t\tplayer2Timestamp = 0;\r\n\t\tplayer3Timestamp = 0;\r\n\t\tplayer4Timestamp = 0;\r\n\t\tplayer5Timestamp = 0;\r\n        wagerIndex = 0;\r\n        prizePool = 0;\r\n        wagerPool5 = 0;\r\n\t\twagerPool13 = 0;\r\n\t\tcurrentBalance = this.balance;\r\n        \r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"player5Timestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"topUp\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"player4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameStarterDividendPercentage\",\"type\":\"uint256\"}],\"name\":\"setGameStarterDividendPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wagerIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"player2Timestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"player3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startNewGameIfIdle\",\"type\":\"bool\"}],\"name\":\"bet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wagerPool5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"player4Timestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameStarter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"player2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextNumberOfWagersToMinimumTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"player5\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastWagerTimeoutTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextMinimumTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wagerPool13\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfWagersToMinimumTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_timeout\",\"type\":\"uint256\"},{\"name\":\"_minimumTimeout\",\"type\":\"uint256\"},{\"name\":\"_numberOfWagersToMinimumTimeout\",\"type\":\"uint256\"}],\"name\":\"setNextGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"player3Timestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFreeBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameStarterDividendPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_timeout\",\"type\":\"uint256\"},{\"name\":\"_minimumTimeout\",\"type\":\"uint256\"},{\"name\":\"_numberOfWagersToMinimumTimeout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"starter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minimumTimeout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"numberOfWagersToMinimumTimeout\",\"type\":\"uint256\"}],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"End\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeoutTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wagerIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrizePool\",\"type\":\"uint256\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"donater\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newPrizePool\",\"type\":\"uint256\"}],\"name\":\"TopUpPrizePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"JackpotCore","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000000000000000000000000000000000000000025800000000000000000000000000000000000000000000000000000000000000b40000000000000000000000000000000000000000000000000000000000000064","Library":"","SwarmSource":"bzzr://5fc1ccb6d847c13b62a6a2bbeff51e3fc88fd9efbcbf87a8c59ef206ed7bf4ab"}]}