{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/// @title Loopring Refund Program\r\n/// @author Kongliang Zhong - <kongliang@loopring.org>.\r\n/// For more information, please visit https://loopring.org.\r\ncontract BatchTransferContract {\r\n    using SafeMath for uint;\r\n    using Math for uint;\r\n\r\n    address public owner;\r\n\r\n    function BatchTransferContract(address _owner) public {\r\n        owner = _owner;\r\n    }\r\n\r\n    function () payable {\r\n        // do nothing.\r\n    }\r\n\r\n    function batchRefund(address[] investors, uint[] ethAmounts) public payable {\r\n        require(msg.sender == owner);\r\n        require(investors.length > 0);\r\n        require(investors.length == ethAmounts.length);\r\n\r\n        uint total = 0;\r\n        for (uint i = 0; i < investors.length; i++) {\r\n            total += ethAmounts[i];\r\n        }\r\n\r\n        require(total <= this.balance);\r\n\r\n        for (i = 0; i < investors.length; i++) {\r\n            if (ethAmounts[i] > 0) {\r\n                investors[i].transfer(ethAmounts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function batchRefundzFixed(address[] investors, uint ethAmount) public payable {\r\n        require(msg.sender == owner);\r\n        require(investors.length > 0);\r\n        for (uint i = 0; i < investors.length; i++) {\r\n            investors[i].transfer(ethAmount);\r\n        }\r\n    }\r\n\r\n    function drain(uint ethAmount) public payable {\r\n        require(msg.sender == owner);\r\n\r\n        uint amount = ethAmount.min256(this.balance);\r\n        if (amount > 0) {\r\n          owner.transfer(amount);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"investors\",\"type\":\"address[]\"},{\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"batchRefundzFixed\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investors\",\"type\":\"address[]\"},{\"name\":\"ethAmounts\",\"type\":\"uint256[]\"}],\"name\":\"batchRefund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"drain\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BatchTransferContract","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000064dac787a5a4fa7d7e337ee8adf77c73db257e3b","Library":"","SwarmSource":"bzzr://69bfe86fa18981e769bc32a517fa84d40a25c619b6e0c7930350825d6a9967a4"}]}