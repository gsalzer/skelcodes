{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.15;\r\n\r\ncontract Ambi2 {\r\n    function claimFor(address _address, address _owner) returns(bool);\r\n    function hasRole(address _from, bytes32 _role, address _to) constant returns(bool);\r\n    function isOwner(address _node, address _owner) constant returns(bool);\r\n}\r\n\r\ncontract Ambi2Enabled {\r\n    Ambi2 ambi2;\r\n\r\n    modifier onlyRole(bytes32 _role) {\r\n        if (address(ambi2) != 0x0 && ambi2.hasRole(this, _role, msg.sender)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    // Perform only after claiming the node, or claim in the same tx.\r\n    function setupAmbi2(Ambi2 _ambi2) returns(bool) {\r\n        if (address(ambi2) != 0x0) {\r\n            return false;\r\n        }\r\n\r\n        ambi2 = _ambi2;\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract Ambi2EnabledFull is Ambi2Enabled {\r\n    // Setup and claim atomically.\r\n    function setupAmbi2(Ambi2 _ambi2) returns(bool) {\r\n        if (address(ambi2) != 0x0) {\r\n            return false;\r\n        }\r\n        if (!_ambi2.claimFor(this, msg.sender) && !_ambi2.isOwner(this, msg.sender)) {\r\n            return false;\r\n        }\r\n\r\n        ambi2 = _ambi2;\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract AssetProxyInterface {\r\n    function transferFromWithReference(address _from, address _to, uint _value, string _reference) returns(bool);\r\n}\r\n\r\ncontract DeviceActivationInterface {\r\n    function isActivated(address _device) public constant returns (bool);\r\n}\r\n\r\ncontract DeviceReputationInterface {\r\n    function getReputationProblems(address _device, string _description) public constant returns(bool);\r\n}\r\n\r\ncontract Statuses is Ambi2EnabledFull {\r\n\r\n    DeviceActivationInterface public activation;\r\n    DeviceReputationInterface public reputation;\r\n\r\n    function _isValidStatus(address _sender, string _reference) internal returns(bool) {\r\n        if (!activation.isActivated(_sender)) {\r\n            return false;\r\n        }\r\n        if (reputation.getReputationProblems(_sender, _reference)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setActivation(DeviceActivationInterface _activation) onlyRole('admin') returns(bool) {\r\n        activation = DeviceActivationInterface(_activation);\r\n        return true;\r\n    }\r\n\r\n    function setReputation(DeviceReputationInterface _reputation) onlyRole('admin') returns(bool) {\r\n        reputation = DeviceReputationInterface(_reputation);\r\n        return true;\r\n    }\r\n\r\n    function checkStatus(address _to, uint _value, string _reference, address _sender) returns(bool) {\r\n        return _isValidStatus(_sender, _reference);\r\n    }\r\n\r\n    function checkStatusICAP(bytes32 _icap, uint _value, string _reference, address _sender) returns(bool) {\r\n        return _isValidStatus(_sender, _reference);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"activation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"checkStatusICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"checkStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_activation\",\"type\":\"address\"}],\"name\":\"setActivation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ambi2\",\"type\":\"address\"}],\"name\":\"setupAmbi2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reputation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reputation\",\"type\":\"address\"}],\"name\":\"setReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"}]","ContractName":"Statuses","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5ecd1dbc64f74d4aa63fcb52edac3f483a46705003481058af70b3807d08103c"}]}