{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Rescue compatible ERC20Basic Token\r\n     *\r\n     * @param _token ERC20Basic The address of the token contract\r\n     */\r\n    function rescueTokens(ERC20Basic _token) external onlyOwner {\r\n        uint256 balance = _token.balanceOf(this);\r\n        assert(_token.transfer(owner, balance));\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw Ether\r\n     */\r\n    function withdrawEther() external onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Sell ERC20Basic Tokens\r\n */\r\ncontract SellERC20BasicTokens is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // Token\r\n    ERC20Basic public token;\r\n    uint256 etherDecimals = 18;\r\n    uint256 tokenDecimals;\r\n    uint256 decimalDiff;\r\n\r\n    // Ether Minimum\r\n    uint256 public etherMinimum;\r\n\r\n    // RATE\r\n    uint256 public rate;\r\n    uint256 public depositRate;\r\n\r\n    // Deposit\r\n    uint256 public deposit;\r\n    \r\n    // Wallet\r\n    address public wallet;\r\n\r\n\r\n    /**\r\n     * @dev Constructor\r\n     *\r\n     * @param _token address\r\n     * @param _tokenDecimals uint256\r\n     * @param _etherMinimum uint256\r\n     * @param _rate uint256\r\n     * @param _depositRate uint256\r\n     * @param _wallet address\r\n     */\r\n    constructor(ERC20Basic _token, uint256 _tokenDecimals, uint256 _etherMinimum, uint256 _rate, uint256 _depositRate, address _wallet) public {\r\n        token = _token;\r\n        tokenDecimals = _tokenDecimals;\r\n        decimalDiff = etherDecimals.sub(_tokenDecimals);\r\n        etherMinimum = _etherMinimum;\r\n        rate = _rate;\r\n        depositRate = _depositRate;\r\n        wallet = _wallet;\r\n    }\r\n\r\n    /**\r\n     * @dev receive ETH and send tokens\r\n     */\r\n    function () public payable {\r\n        // minimum limit\r\n        uint256 weiAmount = msg.value;\r\n        require(weiAmount >= etherMinimum.mul(10 ** etherDecimals));\r\n\r\n        // make sure: onsale > 0\r\n        uint256 balance = token.balanceOf(address(this));\r\n        uint256 onsale = balance.sub(deposit);\r\n        require(onsale > 0);\r\n\r\n        // token amount\r\n        uint256 tokenBought = weiAmount.mul(rate).div(10 ** decimalDiff);\r\n        uint256 tokenDeposit = weiAmount.mul(depositRate).div(10 ** decimalDiff);\r\n        uint256 tokenAmount = tokenBought.add(tokenDeposit);\r\n        require(tokenAmount > 0);\r\n\r\n        // transfer tokens\r\n        if (tokenAmount <= onsale) {\r\n            assert(token.transfer(msg.sender, tokenBought));\r\n        } else {\r\n            uint256 weiExpense = onsale.div(rate + depositRate);\r\n            tokenBought = weiExpense.mul(rate);\r\n            tokenDeposit = onsale.sub(tokenBought);\r\n\r\n            // transfer tokens\r\n            assert(token.transfer(msg.sender, tokenBought));\r\n\r\n            // refund\r\n            msg.sender.transfer(weiAmount - weiExpense.mul(10 ** decimalDiff));\r\n        }\r\n\r\n        // deposit +\r\n        deposit = deposit.add(tokenDeposit);\r\n\r\n        // onsale -\r\n        onsale = token.balanceOf(address(this)).sub(deposit);\r\n\r\n        // transfer eth back to owner\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Send Token\r\n     * \r\n     * @param _receiver address\r\n     * @param _amount uint256\r\n     */\r\n    function sendToken(address _receiver, uint256 _amount) external {\r\n        require(msg.sender == wallet);\r\n        require(_amount <= deposit);\r\n        assert(token.transfer(_receiver, _amount));\r\n        deposit = deposit.sub(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Set Rate\r\n     * \r\n     * @param _rate uint256\r\n     * @param _depositRate uint256\r\n     */\r\n    function setRate(uint256 _rate, uint256 _depositRate) external onlyOwner {\r\n        rate = _rate;\r\n        depositRate = _depositRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Set Wallet\r\n     * \r\n     * @param _wallet address\r\n     */\r\n    function setWallet(address _wallet) external onlyOwner {\r\n        wallet = _wallet;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_depositRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenDecimals\",\"type\":\"uint256\"},{\"name\":\"_etherMinimum\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_depositRate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SellERC20BasicTokens","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003f13a8039d33fbf19467183e3b4249e7a4c212f500000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000001d4c0000000000000000000000000000000000000000000000000000000000000ea60000000000000000000000000688a701ffd1d03b7d28133054e3f8dc7de8762d4","Library":"","SwarmSource":"bzzr://14c08286153e0c0119fcb42de61a2eb4b57c12bc66bc6d74c43715c5b911d3c1"}]}