{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Interface\r\n * @dev Standard version of ERC20 interface\r\n */\r\ncontract ERC20Interface {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` \r\n     * of the contract to the sender account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the current owner\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner\r\n     * @param newOwner The address to transfer ownership to\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title RHEM\r\n * @dev Implemantation of the RHEM token\r\n */\r\ncontract RHEM is Ownable, ERC20Interface {\r\n    string public constant symbol = \"RHEM\";\r\n    string public constant name = \"RHEM\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public _unmintedTokens = 3000000000000*uint(10)**decimals;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n      \r\n    /**\r\n     * @dev Gets the balance of the specified address\r\n     * @param _owner The address to query the the balance of\r\n     * @return An uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer token to a specified address\r\n     * @param _to The address to transfer to\r\n     * @param _value The amount to be transferred\r\n     */  \r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[msg.sender] >= _value);\r\n        assert(balances[_to] + _value >= balances[_to]);\r\n   \r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Transfer tokens from one address to another \r\n     * @param _from The address which you want to send tokens from\r\n     * @param _to The address which you want to transfer to\r\n     * @param _value The amout of tokens to be transfered\r\n     */    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        assert(balances[_to] + _value >= balances[_to]);\r\n        \r\n        balances[_from] = balances[_from] - _value;\r\n        balances[_to] = balances[_to] + _value;\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender\r\n     * @param _spender The address which will spend the funds\r\n     * @param _value The amount of tokens to be spent\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Function to check the amount of tokens than an owner allowed to a spender\r\n     * @param _owner The address which owns the funds\r\n     * @param _spender The address which will spend the funds\r\n     * @return A uint specifing the amount of tokens still avaible for the spender\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Mint RHEM tokens. No more than 3,000,000,000,000 RHEM can be minted\r\n     * @param _target The address to which new tokens will be minted\r\n     * @param _mintedAmount The amout of tokens to be minted\r\n     */    \r\n    function mintTokens(address _target, uint256 _mintedAmount) public onlyOwner returns (bool success){\r\n        require(_mintedAmount <= _unmintedTokens);\r\n        balances[_target] += _mintedAmount;\r\n        _unmintedTokens -= _mintedAmount;\r\n        totalSupply += _mintedAmount;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Mint RHEM tokens and aproves the passed address to spend the minted amount of tokens\r\n     * No more than 3,000,000,000,000 RHEM can be minted\r\n     * @param _target The address to which new tokens will be minted\r\n     * @param _mintedAmount The amout of tokens to be minted\r\n     * @param _spender The address which will spend minted funds\r\n     */ \r\n    function mintTokensWithApproval(address _target, uint256 _mintedAmount, address _spender) public onlyOwner returns (bool success){\r\n        require(_mintedAmount <= _unmintedTokens);\r\n        balances[_target] += _mintedAmount;\r\n        _unmintedTokens -= _mintedAmount;\r\n        totalSupply += _mintedAmount;\r\n        allowed[_target][_spender] += _mintedAmount;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Decrease amount of RHEM tokens that can be minted\r\n     * @param _burnedAmount The amount of unminted tokens to be burned\r\n     */ \r\n    function burnUnmintedTokens(uint256 _burnedAmount) public onlyOwner returns (bool success){\r\n        require(_burnedAmount <= _unmintedTokens);\r\n        _unmintedTokens -= _burnedAmount;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer token back to owner\r\n     * @param _from the address transfer from\r\n     * @param _value The amount to be transferred\r\n     */  \r\n    function transferBack(address _from, uint256 _value) public onlyOwner returns (uint256 unmintedTokens) {\r\n        require(_from != address(0));\r\n        require(balances[_from] >= _value);\r\n        \r\n        _unmintedTokens += _value;\r\n        balances[_from] -= _value;  \r\n        Transfer(_from, msg.sender, _value);\r\n        return _unmintedTokens;\r\n    }\r\n    \r\n      /**\r\n     * @dev Add to unminted\r\n     * @param _value The amount to be add\r\n     */  \r\n    function addToUnminted(uint256 _value) public onlyOwner returns (uint256 unmintedTokens) {\r\n        \r\n        _unmintedTokens += _value;\r\n\r\n        return _unmintedTokens;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_unmintedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"mintTokensWithApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferBack\",\"outputs\":[{\"name\":\"unmintedTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnedAmount\",\"type\":\"uint256\"}],\"name\":\"burnUnmintedTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addToUnminted\",\"outputs\":[{\"name\":\"unmintedTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"RHEM","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0899841c4b20f41fa608e7d77593a97fcb084bd26e3d104854d4c97b00199c80"}]}