{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address public contractOwner;\r\n\r\n  event ContractOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    contractOwner = msg.sender;\r\n  }\r\n\r\n  modifier onlyContractOwner() {\r\n    require(msg.sender == contractOwner);\r\n    _;\r\n  }\r\n\r\n  function transferContractOwnership(address _newOwner) public onlyContractOwner {\r\n    require(_newOwner != address(0));\r\n    ContractOwnershipTransferred(contractOwner, _newOwner);\r\n    contractOwner = _newOwner;\r\n  }\r\n  \r\n  function payoutFromContract() public onlyContractOwner {\r\n      contractOwner.transfer(this.balance);\r\n  }  \r\n\r\n}\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n  // Optional\r\n  // function name() public view returns (string name);\r\n  // function symbol() public view returns (string symbol);\r\n  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\ncontract KiddyToys is ERC721, Ownable {\r\n\r\n  event ToyCreated(uint256 tokenId, string name, address owner);\r\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n  string public constant NAME = \"KiddyToys\";\r\n  string public constant SYMBOL = \"ToyToken\";\r\n\r\n  uint256 private startingPrice = 0.01 ether;\r\n\r\n  mapping (uint256 => address) public toyIdToOwner;\r\n\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  mapping (uint256 => address) public toyIdToApproved;\r\n\r\n  mapping (uint256 => uint256) private toyIdToPrice;\r\n\r\n  /*** DATATYPES ***/\r\n  struct Toy {\r\n    string name;\r\n  }\r\n\r\n  Toy[] private toys;\r\n\r\n  function approve(address _to, uint256 _tokenId) public { //ERC721\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n    toyIdToApproved[_tokenId] = _to;\r\n    Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) { //ERC721\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  function createContractToy(string _name) public onlyContractOwner {\r\n    _createToy(_name, address(this), startingPrice);\r\n  }\r\n\r\n  function create20ContractToy() public onlyContractOwner {\r\n     uint256 totalToys = totalSupply();\r\n\t \r\n     require (totalToys < 1);\r\n\t \r\n \t _createToy(\"Sandy train\", address(this), startingPrice);\r\n \t _createToy(\"Red Teddy\", address(this), startingPrice);\r\n\t _createToy(\"Brown Teddy\", address(this), startingPrice);\r\n\t _createToy(\"White Horsy\", address(this), startingPrice);\r\n\t _createToy(\"Blue rocking Horsy\", address(this), startingPrice);\r\n\t _createToy(\"Arch pyramid\", address(this), startingPrice);\r\n\t _createToy(\"Sandy rocking Horsy\", address(this), startingPrice);\r\n\t _createToy(\"Letter cubes\", address(this), startingPrice);\r\n\t _createToy(\"Ride carousel\", address(this), startingPrice);\r\n\t _createToy(\"Town car\", address(this), startingPrice);\r\n\t _createToy(\"Nighty train\", address(this), startingPrice);\r\n\t _createToy(\"Big circles piramid\", address(this), startingPrice);\r\n\t _createToy(\"Small circles piramid\", address(this), startingPrice);\r\n\t _createToy(\"Red lamp\", address(this), startingPrice);\r\n\t _createToy(\"Ducky\", address(this), startingPrice);\r\n\t _createToy(\"Small ball\", address(this), startingPrice);\r\n\t _createToy(\"Big ball\", address(this), startingPrice);\r\n\t _createToy(\"Digital cubes\", address(this), startingPrice);\r\n\t _createToy(\"Small Dolly\", address(this), startingPrice);\r\n\t _createToy(\"Big Dolly\", address(this), startingPrice);\r\n  }\r\n  \r\n  function getToy(uint256 _tokenId) public view returns (string toyName, uint256 sellingPrice, address owner) {\r\n    Toy storage toy = toys[_tokenId];\r\n    toyName = toy.name;\r\n    sellingPrice = toyIdToPrice[_tokenId];\r\n    owner = toyIdToOwner[_tokenId];\r\n  }\r\n\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  function name() public pure returns (string) { //ERC721\r\n    return NAME;\r\n  }\r\n\r\n  function ownerOf(uint256 _tokenId) public view returns (address owner) { //ERC721\r\n    owner = toyIdToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  // Allows someone to send ether and obtain the token\r\n  function purchase(uint256 _tokenId) public payable {\r\n    address oldOwner = toyIdToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n\r\n    uint256 sellingPrice = toyIdToPrice[_tokenId];\r\n\r\n    require(oldOwner != newOwner);\r\n    require(_addressNotNull(newOwner));\r\n    require(msg.value >= sellingPrice);\r\n\r\n    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 9), 10)); //90% to previous owner\r\n    uint256 win_payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 9), 180)); //5% to random owner\r\n\r\n    uint256 randomToyId = uint256(block.blockhash(block.number-1))%20;\r\n\taddress winner = toyIdToOwner[randomToyId];\r\n\t\r\n    // Next price will in 2 times more.\r\n    toyIdToPrice[_tokenId] = SafeMath.mul(sellingPrice, 2);\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(payment); //\r\n    }\r\n\r\n    // Pay winner tokenOwner if owner is not contract\r\n    if (winner != address(this)) {\r\n      winner.transfer(win_payment); //\r\n    }\r\n\r\n    TokenSold(_tokenId, sellingPrice, toyIdToPrice[_tokenId], oldOwner, newOwner, toys[_tokenId].name);\r\n\t\r\n    if (msg.value > sellingPrice) { //if excess pay\r\n\t    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n\t\tmsg.sender.transfer(purchaseExcess);\r\n\t}\r\n  }\r\n\r\n\r\n  function symbol() public pure returns (string) { //ERC721\r\n    return SYMBOL;\r\n  }\r\n\r\n\r\n  function takeOwnership(uint256 _tokenId) public { //ERC721\r\n    address newOwner = msg.sender;\r\n    address oldOwner = toyIdToOwner[_tokenId];\r\n\r\n    require(_addressNotNull(newOwner));\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) { //for web site view\r\n    return toyIdToPrice[_tokenId];\r\n  }\r\n  \r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) { //for web site view\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalToys = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 toyId;\r\n      for (toyId = 0; toyId <= totalToys; toyId++) {\r\n        if (toyIdToOwner[toyId] == _owner) {\r\n          result[resultIndex] = toyId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256 total) { //ERC721\r\n    return toys.length;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _tokenId) public { //ERC721\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n\t_transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public { //ERC721\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n\r\n  /* PRIVATE FUNCTIONS */\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return toyIdToApproved[_tokenId] == _to;\r\n  }\r\n\r\n  function _createToy(string _name, address _owner, uint256 _price) private {\r\n    Toy memory _toy = Toy({\r\n      name: _name\r\n    });\r\n    uint256 newToyId = toys.push(_toy) - 1;\r\n\r\n    require(newToyId == uint256(uint32(newToyId))); //check maximum limit of tokens\r\n\r\n    ToyCreated(newToyId, _name, _owner);\r\n\r\n    toyIdToPrice[newToyId] = _price;\r\n\r\n    _transfer(address(0), _owner, newToyId);\r\n  }\r\n\r\n  function _owns(address _checkedAddr, uint256 _tokenId) private view returns (bool) {\r\n    return _checkedAddr == toyIdToOwner[_tokenId];\r\n  }\r\n\r\nfunction _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    ownershipTokenCount[_to]++;\r\n    toyIdToOwner[_tokenId] = _to;\r\n\r\n    // When creating new toys _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete toyIdToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"toyIdToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"create20ContractToy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createContractToy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payoutFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferContractOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getToy\",\"outputs\":[{\"name\":\"toyName\",\"type\":\"string\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"toyIdToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ToyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ContractOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"KiddyToys","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d720b82354e520f678ecdacaf7e472aca390a360dc8d081e752d547c600cda75"}]}