{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n    // Required methods for ERC-721 Compatibility.\r\n    function approve(address _to, uint256 _tokenId) external;\r\n\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    function ownerOf(uint256 _tokenId) external view returns(address _owner);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    function supportsInterface(bytes4 _interfaceID) external view returns(bool);\r\n\r\n    function totalSupply() public view returns(uint256 total);\r\n\r\n    function balanceOf(address _owner) public view returns(uint256 _balance);\r\n}\r\n\r\ncontract AnimecardAccessControl {\r\n    /// @dev Event is fired when contract is forked.\r\n    event ContractFork(address newContract);\r\n\r\n    /// - CEO: The CEO can reassign other roles, change the addresses of dependent smart contracts,\r\n    /// and pause/unpause the AnimecardCore contract.\r\n    /// - CFO: The CFO can withdraw funds from its auction and sale contracts.\r\n    /// - Manager: The Animator can create regular and promo AnimeCards.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public animatorAddress;\r\n\r\n    /// @dev Keeps track whether the contract is paused. When that is true, most actions are blocked.\r\n    bool public paused = false;\r\n\r\n    /// @dev Access-modifier for CEO-only functionality.\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access-modifier for CFO-only functionality.\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access-modifier for Animator-only functionality.\r\n    modifier onlyAnimator() {\r\n        require(msg.sender == animatorAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access-modifier for C-level-only functionality.\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == animatorAddress ||\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cfoAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// Assigns a new address to the CEO role. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// Assigns a new address to act as the CFO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new CFO\r\n    function setCFO(address _newCFO) external onlyCEO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    /// Assigns a new address to the Animator role. Only available to the current CEO.\r\n    /// @param _newAnimator The address of the new Animator\r\n    function setAnimator(address _newAnimator) external onlyCEO {\r\n        require(_newAnimator != address(0));\r\n\r\n        animatorAddress = _newAnimator;\r\n    }\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() external onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause() public onlyCEO whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n\r\n    /*** Destructible functionality adapted from OpenZeppelin ***/\r\n    /**\r\n     * @dev Transfers the current balance to the owner and terminates the contract.\r\n     */\r\n    function destroy() onlyCEO public {\r\n        selfdestruct(ceoAddress);\r\n    }\r\n\r\n    function destroyAndSend(address _recipient) onlyCEO public {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\ncontract AnimecardBase is AnimecardAccessControl {\r\n    using SafeMath\r\n    for uint256;\r\n\r\n    /*** DATA TYPES ***/\r\n\r\n    /// The main anime card struct\r\n    struct Animecard {\r\n        /// Name of the character\r\n        string characterName;\r\n        /// Name of designer & studio that created the character\r\n        string studioName;\r\n\r\n        /// AWS S3-CDN URL for character image\r\n        string characterImageUrl;\r\n        /// IPFS hash of character details\r\n        string characterImageHash;\r\n        /// The timestamp from the block when this anime card was created\r\n        uint64 creationTime;\r\n    }\r\n\r\n\r\n    /*** EVENTS ***/\r\n    /// The Birth event is fired whenever a new anime card comes into existence.\r\n    event Birth(address owner, uint256 tokenId, string cardName, string studio);\r\n    /// Transfer event as defined in current draft of ERC721. Fired every time animecard\r\n    /// ownership is assigned, including births.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    /// The TokenSold event is fired whenever a token is sold.\r\n    event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 price, address prevOwner, address owner, string cardName);\r\n\r\n    /*** STORAGE ***/\r\n    /// An array containing all AnimeCards in existence. The id of each animecard\r\n    /// is an index in this array.\r\n    Animecard[] animecards;\r\n\r\n    /// @dev A mapping from anime card ids to the address that owns them.\r\n    mapping(uint256 => address) public animecardToOwner;\r\n\r\n    /// @dev A mapping from owner address to count of anime cards that address owns.\r\n    /// Used internally inside balanceOf() to resolve ownership count.\r\n    mapping(address => uint256) public ownerAnimecardCount;\r\n\r\n    /// @dev A mapping from anime card ids to an address that has been approved to call\r\n    ///  transferFrom(). Each anime card can only have 1 approved address for transfer\r\n    ///  at any time. A 0 value means no approval is outstanding.\r\n    mapping(uint256 => address) public animecardToApproved;\r\n\r\n    // @dev A mapping from anime card ids to their price.\r\n    mapping(uint256 => uint256) public animecardToPrice;\r\n\r\n    // @dev Previous sale price of anime card\r\n    mapping(uint256 => uint256) public animecardPrevPrice;\r\n\r\n    /// @dev Assigns ownership of a specific anime card to an address.\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        // Transfer ownership and update owner anime card counts.\r\n        // ownerAnimecardCount[_to] = ownerAnimecardCount[_to].add(1);\r\n        ownerAnimecardCount[_to]++;\r\n        animecardToOwner[_tokenId] = _to;\r\n        // When creating new tokens _from is 0x0, but we can't account that address.\r\n        if (_from != address(0)) {\r\n            // ownerAnimecardCount[_from] = ownerAnimecardCount[_from].sub(1);\r\n            ownerAnimecardCount[_from]--;\r\n            // clear any previously approved ownership exchange\r\n            delete animecardToApproved[_tokenId];\r\n        }\r\n        // Fire the transfer event.\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev An internal method that creates a new anime card and stores it.\r\n    /// @param _characterName The name of the character\r\n    /// @param _studioName The studio that created this character\r\n    /// @param _characterImageUrl AWS S3-CDN URL for character image\r\n    /// @param _characterImageHash IPFS hash for character image\r\n    /// @param _price of animecard character\r\n    /// @param _owner The initial owner of this anime card\r\n    function _createAnimecard(\r\n        string _characterName,\r\n        string _studioName,\r\n        string _characterImageUrl,\r\n        string _characterImageHash,\r\n        uint256 _price,\r\n        address _owner\r\n    )\r\n    internal\r\n    returns(uint) {\r\n\r\n        Animecard memory _animecard = Animecard({\r\n            characterName: _characterName,\r\n            studioName: _studioName,\r\n            characterImageUrl: _characterImageUrl,\r\n            characterImageHash: _characterImageHash,\r\n            creationTime: uint64(now)\r\n        });\r\n        uint256 newAnimecardId = animecards.push(_animecard);\r\n        newAnimecardId = newAnimecardId.sub(1);\r\n\r\n        // Fire the birth event.\r\n        Birth(\r\n            _owner,\r\n            newAnimecardId,\r\n            _animecard.characterName,\r\n            _animecard.studioName\r\n        );\r\n\r\n        // Set the price for the animecard.\r\n        animecardToPrice[newAnimecardId] = _price;\r\n\r\n        // This will assign ownership, and also fire the Transfer event as per ERC-721 draft.\r\n        _transfer(0, _owner, newAnimecardId);\r\n\r\n        return newAnimecardId;\r\n\r\n    }\r\n}\r\n\r\ncontract AnimecardPricing is AnimecardBase {\r\n\r\n    /*** CONSTANTS ***/\r\n    // Pricing steps.\r\n    uint256 private constant first_step_limit = 0.05 ether;\r\n    uint256 private constant second_step_limit = 0.5 ether;\r\n    uint256 private constant third_step_limit = 2.0 ether;\r\n    uint256 private constant fourth_step_limit = 5.0 ether;\r\n\r\n\r\n    // Cut for studio & platform for each sale transaction\r\n    uint256 public platformFee = 50; // 50%\r\n\r\n    /// @dev Set Studio Fee. Can only be called by the Animator address. \r\n    function setPlatformFee(uint256 _val) external onlyAnimator {\r\n        platformFee = _val;\r\n    }\r\n\r\n    /// @dev Computes next price of token given the current sale price.\r\n    function computeNextPrice(uint256 _salePrice)\r\n    internal\r\n    pure\r\n    returns(uint256) {\r\n        if (_salePrice < first_step_limit) {\r\n            return SafeMath.div(SafeMath.mul(_salePrice, 200), 100);\r\n        } else if (_salePrice < second_step_limit) {\r\n            return SafeMath.div(SafeMath.mul(_salePrice, 135), 100);\r\n        } else if (_salePrice < third_step_limit) {\r\n            return SafeMath.div(SafeMath.mul(_salePrice, 125), 100);\r\n        } else if (_salePrice < fourth_step_limit) {\r\n            return SafeMath.div(SafeMath.mul(_salePrice, 120), 100);\r\n        } else {\r\n            return SafeMath.div(SafeMath.mul(_salePrice, 115), 100);\r\n        }\r\n    }\r\n\r\n    /// @dev Computes the payment for the token, which is the sale price of the token\r\n    /// minus the house's cut.\r\n    function computePayment(\r\n        uint256 _tokenId,\r\n        uint256 _salePrice)\r\n    internal\r\n    view\r\n    returns(uint256) {\r\n        uint256 prevSalePrice = animecardPrevPrice[_tokenId];\r\n\r\n        uint256 profit = _salePrice - prevSalePrice;\r\n\r\n        uint256 ownerCut = SafeMath.sub(100, platformFee);\r\n        uint256 ownerProfitShare = SafeMath.div(SafeMath.mul(profit, ownerCut), 100);\r\n\r\n        return prevSalePrice + ownerProfitShare;\r\n    }\r\n}\r\n\r\ncontract AnimecardOwnership is AnimecardPricing, ERC721 {\r\n    /// Name of the collection of NFTs managed by this contract, as defined in ERC721.\r\n    string public constant NAME = \"CryptoAnime\";\r\n    /// Symbol referencing the entire collection of NFTs managed in this contract, as\r\n    /// defined in ERC721.\r\n    string public constant SYMBOL = \"ANM\";\r\n\r\n    bytes4 public constant INTERFACE_SIGNATURE_ERC165 =\r\n        bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n\r\n    bytes4 public constant INTERFACE_SIGNATURE_ERC721 =\r\n        bytes4(keccak256(\"name()\")) ^\r\n        bytes4(keccak256(\"symbol()\")) ^\r\n        bytes4(keccak256(\"totalSupply()\")) ^\r\n        bytes4(keccak256(\"balanceOf(address)\")) ^\r\n        bytes4(keccak256(\"ownerOf(uint256)\")) ^\r\n        bytes4(keccak256(\"approve(address,uint256)\")) ^\r\n        bytes4(keccak256(\"transfer(address,uint256)\")) ^\r\n        bytes4(keccak256(\"transferFrom(address,address,uint256)\")) ^\r\n        bytes4(keccak256(\"tokensOfOwner(address)\")) ^\r\n        bytes4(keccak256(\"tokenMetadata(uint256,string)\"));\r\n\r\n    /*** EVENTS ***/\r\n    /// Approval event as defined in the current draft of ERC721. Fired every time\r\n    /// animecard approved owners is updated. When Transfer event is emitted, this \r\n    /// also indicates that approved address is reset to none.\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\r\n    ///  ERC-165 (obviously!) and ERC-721.\r\n    function supportsInterface(bytes4 _interfaceID)\r\n    external\r\n    view\r\n    returns(bool) {\r\n        return ((_interfaceID == INTERFACE_SIGNATURE_ERC165) || (_interfaceID == INTERFACE_SIGNATURE_ERC721));\r\n    }\r\n\r\n    // @notice Optional for ERC-20 compliance.\r\n    function name() external pure returns(string) {\r\n        return NAME;\r\n    }\r\n\r\n    // @notice Optional for ERC-20 compliance.\r\n    function symbol() external pure returns(string) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    /// @dev Returns the total number of Animecards currently in existence.\r\n    /// @notice Required for ERC-20 and ERC-721 compliance.\r\n    function totalSupply() public view returns(uint) {\r\n        return animecards.length;\r\n    }\r\n\r\n    /// @dev Returns the number of Animecards owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @notice Required for ERC-20 and ERC-721 compliance.\r\n    function balanceOf(address _owner)\r\n    public\r\n    view\r\n    returns(uint256 count) {\r\n        return ownerAnimecardCount[_owner];\r\n    }\r\n\r\n    /// @dev Returns the address currently assigned ownership of a given Animecard.\r\n    /// @notice Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns(address _owner) {\r\n        _owner = animecardToOwner[_tokenId];\r\n        require(_owner != address(0));\r\n    }\r\n\r\n    /// @dev Grant another address the right to transfer a specific Anime card via\r\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the Animecard that can be transferred if this call succeeds.\r\n    /// @notice Required for ERC-20 and ERC-721 compliance.\r\n    function approve(address _to, uint256 _tokenId)\r\n    external\r\n    whenNotPaused {\r\n        // Only an owner can grant transfer approval.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Register the approval (replacing any previous approval).\r\n        _approve(_tokenId, _to);\r\n\r\n        // Fire approval event upon successful approval.\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Transfers a Animecard to another address. If transferring to a smart\r\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 or else your\r\n    /// Animecard may be lost forever.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the Animecard to transfer.\r\n    /// @notice Required for ERC-20 and ERC-721 compliance.\r\n    function transfer(address _to, uint256 _tokenId)\r\n    external\r\n    whenNotPaused {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any animecard (except very briefly\r\n        // after a Anime card is created).\r\n        require(_to != address(this));\r\n\r\n        // You can only transfer your own Animecard.\r\n        require(_owns(msg.sender, _tokenId));\r\n        // TODO - Disallow transfer to self\r\n\r\n        // Reassign ownership, clear pending approvals, fire Transfer event.\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Transfer a Animecard owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the Animecard to be transfered.\r\n    /// @param _to The address that should take ownership of the Animecard. Can be any\r\n    /// address, including the caller.\r\n    /// @param _tokenId The ID of the Animecard to be transferred.\r\n    /// @notice Required for ERC-20 and ERC-721 compliance.\r\n    function transferFrom(address _from, address _to, uint256 _tokenId)\r\n    external\r\n    whenNotPaused {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any animecard (except very briefly\r\n        // after an animecard is created).\r\n        require(_to != address(this));\r\n\r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n\r\n        // Reassign ownership (also clears pending approvals and fires Transfer event).\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Returns a list of all Animecard IDs assigned to an address.\r\n    /// @param _owner The owner whose Animecards we are interested in.\r\n    ///  This method MUST NEVER be called by smart contract code. First, it is fairly\r\n    ///  expensive (it walks the entire Animecard array looking for Animecard belonging\r\n    /// to owner), but it also returns a dynamic array, which is only supported for web3\r\n    /// calls, and not contract-to-contract calls. Thus, this method is external rather\r\n    /// than public.\r\n    function tokensOfOwner(address _owner)\r\n    external\r\n    view\r\n    returns(uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            // Returns an empty array\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalAnimecards = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            uint256 animecardId;\r\n            for (animecardId = 0; animecardId <= totalAnimecards; animecardId++) {\r\n                if (animecardToOwner[animecardId] == _owner) {\r\n                    result[resultIndex] = animecardId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /// @dev Checks if a given address is the current owner of a particular Animecard.\r\n    /// @param _claimant the address we are validating against.\r\n    /// @param _tokenId Animecard id, only valid when > 0\r\n    function _owns(address _claimant, uint256 _tokenId)\r\n    internal\r\n    view\r\n    returns(bool) {\r\n        return animecardToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\r\n    /// approval. Setting _approved to address(0) clears all transfer approval.\r\n    /// NOTE: _approve() does NOT send the Approval event. This is intentional because\r\n    /// _approve() and transferFrom() are used together for putting Animecards on sale and,\r\n    /// there is no value in spamming the log with Approval events in that case.\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        animecardToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular \r\n    /// Animecard.\r\n    /// @param _claimant the address we are confirming Animecard is approved for.\r\n    /// @param _tokenId Animecard id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint256 _tokenId)\r\n    internal\r\n    view\r\n    returns(bool) {\r\n        return animecardToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n    function _addressNotNull(address _to) internal pure returns(bool) {\r\n        return _to != address(0);\r\n    }\r\n\r\n}\r\n\r\ncontract AnimecardSale is AnimecardOwnership {\r\n\r\n    // Allows someone to send ether and obtain the token\r\n    function purchase(uint256 _tokenId)\r\n    public\r\n    payable\r\n    whenNotPaused {\r\n        address newOwner = msg.sender;\r\n        address oldOwner = animecardToOwner[_tokenId];\r\n        uint256 salePrice = animecardToPrice[_tokenId];\r\n\r\n        // Require that the owner of the token is not sending to self.\r\n        require(oldOwner != newOwner);\r\n\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_addressNotNull(newOwner));\r\n\r\n        // Check that sent amount is greater than or equal to the sale price\r\n        require(msg.value >= salePrice);\r\n\r\n        uint256 payment = uint256(computePayment(_tokenId, salePrice));\r\n        uint256 purchaseExcess = SafeMath.sub(msg.value, salePrice);\r\n\r\n        // Set next listing price.\r\n        animecardPrevPrice[_tokenId] = animecardToPrice[_tokenId];\r\n        animecardToPrice[_tokenId] = computeNextPrice(salePrice);\r\n\r\n        // Transfer the Animecard to the buyer.\r\n        _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n        // Pay seller of the Animecard if they are not this contract.\r\n        if (oldOwner != address(this)) {\r\n            oldOwner.transfer(payment);\r\n        }\r\n\r\n        TokenSold(_tokenId, salePrice, animecardToPrice[_tokenId], oldOwner, newOwner, animecards[_tokenId].characterName);\r\n\r\n        // Reimburse the buyer of any excess paid.\r\n        msg.sender.transfer(purchaseExcess);\r\n    }\r\n\r\n    function priceOf(uint256 _tokenId)\r\n    public\r\n    view\r\n    returns(uint256 price) {\r\n        return animecardToPrice[_tokenId];\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract AnimecardMinting is AnimecardSale {\r\n    /*** CONSTANTS ***/\r\n    /// @dev Starting price of a regular Animecard.\r\n    // uint128 private constant STARTING_PRICE = 0.01 ether;\r\n\r\n    /// @dev Creates a new Animecard\r\n    function createAnimecard(\r\n        string _characterName,\r\n        string _studioName,\r\n        string _characterImageUrl,\r\n        string _characterImageHash,\r\n        uint256 _price\r\n    )\r\n    public\r\n    onlyAnimator\r\n    returns(uint) {\r\n        uint256 animecardId = _createAnimecard(\r\n            _characterName, _studioName,\r\n            _characterImageUrl, _characterImageHash,\r\n            _price, address(this)\r\n        );\r\n\r\n        return animecardId;\r\n    }\r\n}\r\n\r\n// Cryptoanime: Anime collectibles on blockchain\r\ncontract AnimecardCore is AnimecardMinting {\r\n    // contract AnimecardCore is AnimecardMinting {\r\n    // Set in case the core contract is broken and a fork is required\r\n    address public newContractAddress;\r\n\r\n    function AnimecardCore() public {\r\n        // Starts paused.\r\n        paused = true;\r\n\r\n        // The creator of the contract is the initial CEO\r\n        ceoAddress = msg.sender;\r\n\r\n        // The creator of the contract is also the initial Animator\r\n        animatorAddress = msg.sender;\r\n    }\r\n\r\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\r\n    ///  breaking bug. This method does nothing but keep track of the new contract and\r\n    ///  emit a message indicating that the new address is set. It's up to clients of this\r\n    ///  contract to update to the new contract address in that case. (This contract will\r\n    ///  be paused indefinitely if such an upgrade takes place.)\r\n    /// @param _v2Address new address\r\n    function setNewAddress(address _v2Address)\r\n    external\r\n    onlyCEO\r\n    whenPaused {\r\n        newContractAddress = _v2Address;\r\n        ContractFork(_v2Address);\r\n    }\r\n\r\n    /// @dev Withdraw all Ether from the contract. This includes both the studio fee\r\n    /// and blockpunk fee on every animecard sold and any Ether sent directly to\r\n    /// contract address.\r\n    /// Only the CFO can withdraw the balance or specify the address to send\r\n    /// the balance to.\r\n    function withdrawBalance(address _to) external onlyCFO {\r\n        // We are using this boolean method to make sure that even if one fails it will still work\r\n        if (_to == address(0)) {\r\n            cfoAddress.transfer(this.balance);\r\n        } else {\r\n            _to.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    /// @notice Returns all the relevant information about a specific animecard.\r\n    /// @param _tokenId The tokenId of the animecard of interest.\r\n    function getAnimecard(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns(\r\n        string characterName,\r\n        string studioName,\r\n        string characterImageUrl,\r\n        string characterImageHash,\r\n        uint256 sellingPrice,\r\n        address owner) {\r\n        Animecard storage animecard = animecards[_tokenId];\r\n        characterName = animecard.characterName;\r\n        studioName = animecard.studioName;\r\n        characterImageUrl = animecard.characterImageUrl;\r\n        characterImageHash = animecard.characterImageHash;\r\n        sellingPrice = animecardToPrice[_tokenId];\r\n        owner = animecardToOwner[_tokenId];\r\n    }\r\n\r\n\r\n    /// @dev Override unpause so it requires all external contract addresses\r\n    ///  to be set before contract can be unpaused. Also, we can't have\r\n    ///  newContractAddress set either, because then the contract was upgraded.\r\n    /// @notice This is public rather than external so we can call super.unpause\r\n    ///  without using an expensive call.\r\n    function unpause()\r\n    public\r\n    onlyCEO\r\n    whenPaused {\r\n        require(newContractAddress == address(0));\r\n\r\n        // Actually unpause the contract.\r\n        super.unpause();\r\n    }\r\n\r\n    /// @notice Direct donations\r\n    function () external payable {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_characterName\",\"type\":\"string\"},{\"name\":\"_studioName\",\"type\":\"string\"},{\"name\":\"_characterImageUrl\",\"type\":\"string\"},{\"name\":\"_characterImageHash\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createAnimecard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"animecardToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAnimecard\",\"outputs\":[{\"name\":\"characterName\",\"type\":\"string\"},{\"name\":\"studioName\",\"type\":\"string\"},{\"name\":\"characterImageUrl\",\"type\":\"string\"},{\"name\":\"characterImageHash\",\"type\":\"string\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INTERFACE_SIGNATURE_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"animecardToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"animecardPrevPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAnimator\",\"type\":\"address\"}],\"name\":\"setAnimator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"animatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerAnimecardCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"animecardToPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INTERFACE_SIGNATURE_ERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cardName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"studio\",\"type\":\"string\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cardName\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractFork\",\"type\":\"event\"}]","ContractName":"AnimecardCore","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f56bbefc5663e0fa5c8f27af5522f764f8b14b8531819dde333a03b7a81d180b"}]}