{"status":"1","message":"OK","result":[{"SourceCode":"contract ERC20 {\r\n    function totalSupply() constant returns (uint totalSupply);\r\n    function balanceOf(address _owner) constant returns (uint balance);\r\n    function transfer(address _to, uint _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\r\n    function approve(address _spender, uint _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract ERC20dex {\r\n    int constant SELL = 0;\r\n    int constant BUY  = 1;\r\n    \r\n    byte constant COIN_DEAD         = 0;\r\n    byte constant COIN_NON_APPROVED = 1;\r\n    byte constant COIN_APPROVED     = 2;\r\n    \r\n    address owner = 0;\r\n    address trader = 0;\r\n    uint256 maker_fee = 0;\r\n    uint256 taker_fee = 0;\r\n    uint256 deploy_fee = 0;\r\n    int stopped = 0;\r\n    uint256 main_fee = 0;\r\n    \r\n    struct order_t {\r\n        int buy_sell;\r\n        address owner;\r\n        uint256 amount;\r\n        uint256 price;\r\n        uint256 block;\r\n    }\r\n    \r\n    struct coin_t {\r\n        string ticker;\r\n        string name;\r\n        address base;\r\n        uint8 digits;\r\n        address requestor;\r\n        uint256 minimum_trade;\r\n        byte state;\r\n        uint256 fee;\r\n        uint256 price;\r\n    }\r\n    \r\n    // List of registered coins\r\n    coin_t[] shitcoins;\r\n    \r\n    // Minimum value of a trade\r\n    uint256 minimum_trade;\r\n    \r\n    // Indexing for shitcoins array\r\n    mapping(string => uint16) shitcoin_index;\r\n\r\n    // Order book\r\n    mapping(string => order_t[]) order_book;\r\n    \r\n    // Balances\r\n    mapping(address => uint256) etx_balances;\r\n\r\n    function ERC20dex() {\r\n        owner = msg.sender;\r\n        trader = msg.sender;\r\n    }\r\n    \r\n    function set_owner(address new_owner) {\r\n        require(msg.sender == owner);\r\n        owner = new_owner;\r\n    }\r\n    function set_trader(address new_trader) {\r\n        require(msg.sender == owner);\r\n        trader = new_trader;\r\n    }\r\n    \r\n    function require(bool condition) constant private {\r\n        if (condition == false) {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function assert(bool condition) constant private {\r\n        if (condition == false) {\r\n            throw;\r\n        }\r\n    }\r\n    \r\n    function safe_mul(uint256 a, uint256 b) constant returns (uint256 c) {\r\n        c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        \r\n        return c;\r\n    }\r\n    \r\n    function safe_add(uint256 a, uint256 b) constant returns (uint256 c) {\r\n        require(a + b >= a);\r\n        return a + b;\r\n    }\r\n    \r\n    function safe_sub(uint256 a, uint256 b) constant returns (uint256 c) {\r\n        require(a >= b);\r\n        return a - b;\r\n    }\r\n    \r\n    function stop() public {\r\n        require(msg.sender == owner);\r\n        stopped = 1;\r\n    }\r\n\r\n    function add_coin(string coin, string name, address base, uint8 digits) public {\r\n        require(msg.sender == owner);\r\n        require(shitcoin_index[coin] == 0);\r\n        \r\n        // Register a new coin\r\n        shitcoins.push(coin_t(coin, name, base, digits, msg.sender, 0, COIN_APPROVED, 0, 0));\r\n        shitcoin_index[coin] = uint16(shitcoins.length);\r\n    }\r\n    \r\n    function createToken(string symbol, string name, address coin_address, uint8 decimals) public {\r\n        // Check if sender included enough ETC for creation\r\n        require(msg.value == deploy_fee);\r\n        require(shitcoin_index[symbol] == 0);\r\n\r\n        // Pass fee to the owner\r\n        require(owner.send(msg.value));\r\n\r\n        // Register a new coin, but do not approve it\r\n        shitcoins.push(coin_t(symbol, name, coin_address, decimals, msg.sender, 0, COIN_NON_APPROVED, 0, 0));\r\n        shitcoin_index[symbol] = uint16(shitcoins.length);\r\n    }\r\n    \r\n    function approve_coin(string coin, bool approved) public {\r\n        require(msg.sender == owner);\r\n        if (approved) {\r\n            shitcoins[shitcoin_index[coin] - 1].state = COIN_APPROVED;\r\n        } else {\r\n            shitcoins[shitcoin_index[coin] - 1].state = COIN_NON_APPROVED;\r\n        }\r\n    }\r\n    \r\n    function remove_coin(uint index) public {\r\n        require(msg.sender == owner);\r\n        require(index < shitcoins.length);\r\n        \r\n        shitcoin_index[shitcoins[index].ticker] = 0;\r\n        shitcoins[index].state = COIN_DEAD;\r\n    }\r\n    \r\n    function set_fee(uint256 the_maker_fee, uint256 the_taker_fee, uint256 the_deploy_fee) public {\r\n        require(msg.sender == owner);\r\n        \r\n        maker_fee = the_maker_fee;\r\n        taker_fee = the_taker_fee;\r\n        deploy_fee = the_deploy_fee;\r\n    }\r\n    \r\n    function set_minimum_trade(uint256 the_minimum_trade) public {\r\n        require(msg.sender == owner);\r\n        minimum_trade = the_minimum_trade;\r\n    }\r\n    \r\n    function get_minimum_trade() constant returns (uint256) {\r\n        return minimum_trade;\r\n    }\r\n    \r\n    function set_coin_minimum_trade(string token, uint256 the_minimum_trade) public {\r\n        require(msg.sender == owner);\r\n        shitcoins[shitcoin_index[token] - 1].minimum_trade = the_minimum_trade;\r\n    }\r\n\r\n    function get_maker_fee() constant returns (uint256) {\r\n        return maker_fee;\r\n    }\r\n    \r\n    function get_taker_fee() constant returns (uint256) {\r\n        return taker_fee;\r\n    }\r\n    \r\n    function get_deploy_fee() constant returns (uint256) {\r\n        return deploy_fee;\r\n    }\r\n    \r\n    function get_coins_count() constant returns (uint256 length) {\r\n        length = shitcoins.length;\r\n    }\r\n    \r\n    function get_coin(uint index) constant returns (string, string, address, byte, uint8, address, uint256) {\r\n        coin_t coin = shitcoins[index];\r\n        return (coin.ticker, coin.name, coin.base, coin.state, coin.digits, coin.requestor, coin.minimum_trade);\r\n    }\r\n    \r\n    function get_balance(address a, string token) constant returns (uint256 balance) {\r\n        coin_t coin = shitcoins[shitcoin_index[token] - 1];\r\n        \r\n        if (coin.state != COIN_DEAD) {\r\n            // Get ERC20 contract and check how many coins we can use for selling\r\n            ERC20 shitcoin = ERC20(shitcoins[shitcoin_index[token] - 1].base);\r\n            balance = shitcoin.allowance(a, this);\r\n        }\r\n    }\r\n    \r\n    function get_etc_balance(address a) constant returns (uint256 balance) {\r\n        return etx_balances[a];\r\n    }\r\n    \r\n    function get_order_book_length(string token) constant returns (uint256 length) {\r\n        return order_book[token].length;\r\n    }\r\n    \r\n    function get_order(string token, uint256 index) constant returns (int, address, uint256, uint256, uint256) {\r\n        order_t order = order_book[token][index];\r\n        return (order.buy_sell, order.owner, order.amount, order.price, order.block);\r\n    }\r\n    \r\n    function get_price(string token) constant returns (uint256) {\r\n        return shitcoins[shitcoin_index[token] - 1].price;\r\n    }\r\n    \r\n    function total_amount(string token, uint256 amount, uint256 price) constant returns (uint256) {\r\n        return safe_mul(amount, price) / 10**uint256(shitcoins[shitcoin_index[token] - 1].digits);\r\n    }\r\n    \r\n    function sell(string token, uint256 amount, uint256 price) public {\r\n        // Basic checks\r\n        require(stopped == 0);\r\n        require(total_amount(token, amount, price) >= minimum_trade);\r\n        \r\n        // Get coin\r\n        coin_t coin = shitcoins[shitcoin_index[token] - 1];\r\n        \r\n        // Validate coin\r\n        require(coin.state == COIN_APPROVED);\r\n        require(amount >= coin.minimum_trade);\r\n        \r\n        // Check if we are allowed to secure coins for a deal\r\n        ERC20 shitcoin = ERC20(coin.base);\r\n        require(shitcoin.allowance(msg.sender, this) >= amount);\r\n        \r\n        // Secure tokens for a deal\r\n        require(shitcoin.transferFrom(msg.sender, this, amount));\r\n\r\n        // Register an order for further processing by matcher\r\n        order_book[token].push(order_t(SELL, msg.sender, amount, price, block.number));\r\n    }\r\n    \r\n    function buy(string token, uint256 amount, uint256 price) public {\r\n        // Basic checks\r\n        require(stopped == 0);\r\n        require(total_amount(token, amount, price) == msg.value);\r\n        require(msg.value >= minimum_trade);\r\n        \r\n        // Get coin\r\n        coin_t coin = shitcoins[shitcoin_index[token] - 1];\r\n        \r\n        // Validate coin\r\n        require(coin.state == COIN_APPROVED);\r\n        require(amount >= coin.minimum_trade);\r\n\r\n        // Credit ETX to the holder account\r\n        etx_balances[msg.sender] += msg.value;\r\n\r\n        // Register an order for further processing by matcher\r\n        order_book[token].push(order_t(BUY, msg.sender, amount, price, block.number));\r\n    }\r\n    \r\n    function trade(string token, uint maker, uint taker) public {\r\n        // Basic checks\r\n        require(msg.sender == trader);\r\n        require(maker < order_book[token].length);\r\n        require(taker < order_book[token].length);\r\n        \r\n        // Get coin\r\n        coin_t coin = shitcoins[shitcoin_index[token] - 1];\r\n        \r\n        // Validate coin\r\n        require(coin.state == COIN_APPROVED);\r\n\r\n        order_t make = order_book[token][maker];\r\n        order_t take = order_book[token][taker];\r\n        uint256 makerFee = 0;\r\n        uint256 takerFee = 0;\r\n        uint256 send_to_maker = 0;\r\n        uint256 send_to_taker = 0;\r\n        ERC20 shitcoin = ERC20(coin.base);\r\n        \r\n        // Check how many coins go into the deal\r\n        uint256 deal_amount = 0;\r\n        if (take.amount < make.amount) {\r\n            deal_amount = take.amount;\r\n        } else {\r\n            deal_amount = make.amount;\r\n        }\r\n        uint256 total_deal = total_amount(token, deal_amount, make.price);\r\n        \r\n        // If maker buys something\r\n        if (make.buy_sell == BUY) {\r\n            // Sanity check\r\n            require(take.price <= make.price);\r\n            \r\n            // Calculate fees\r\n            makerFee = safe_mul(deal_amount, maker_fee) / 10000;\r\n            takerFee = safe_mul(total_deal, taker_fee) / 10000;\r\n            \r\n            // Update accessible fees\r\n            coin.fee = coin.fee + makerFee;\r\n            main_fee = main_fee + takerFee;\r\n            \r\n            send_to_maker = safe_sub(deal_amount, makerFee);\r\n            send_to_taker = safe_sub(total_deal, takerFee);\r\n                \r\n            // Move shitcoin to maker\r\n            require(shitcoin.transfer(make.owner, send_to_maker));\r\n                \r\n            // Deduct from avaialble ETC balance\r\n            etx_balances[make.owner] = safe_sub(etx_balances[make.owner], total_deal);\r\n                \r\n            // Move funds to taker\r\n            require(take.owner.send(send_to_taker));\r\n                \r\n        } else {\r\n            // Sanity check\r\n            require(take.price >= make.price);\r\n            \r\n            // Calculate fees\r\n            makerFee = safe_mul(total_deal, maker_fee) / 10000;\r\n            takerFee = safe_mul(deal_amount, taker_fee) / 10000;\r\n            \r\n            // Update accessible fees\r\n            main_fee = main_fee + makerFee;\r\n            coin.fee = coin.fee + takerFee;\r\n            \r\n            send_to_maker = safe_sub(total_deal, makerFee);\r\n            send_to_taker = safe_sub(deal_amount, takerFee);\r\n                \r\n            // Move shitcoin to taker\r\n            require(shitcoin.transfer(take.owner, send_to_taker));\r\n                \r\n            // Deduct from avaialble ETC balance\r\n            etx_balances[take.owner] = safe_sub(etx_balances[take.owner], total_deal);\r\n                \r\n            // Move funds to maker\r\n            require(make.owner.send(send_to_maker));\r\n        }\r\n        \r\n        // Reduce order size\r\n        make.amount = safe_sub(make.amount, deal_amount);\r\n        take.amount = safe_sub(take.amount, deal_amount);\r\n        \r\n        // Update price\r\n        coin.price = make.price;\r\n    }\r\n    \r\n    function cancel(string token, uint256 index) public {\r\n        // Coin checks\r\n        coin_t coin = shitcoins[shitcoin_index[token] - 1];\r\n        order_t order = order_book[token][index];\r\n\r\n        require(coin.state == COIN_APPROVED);\r\n        require((msg.sender == order.owner) || (msg.sender == owner));\r\n        require(order.amount > 0);\r\n        \r\n        // Null the order\r\n        uint256 old_amount = order.amount;\r\n        order.amount = 0;\r\n\r\n        // Return coins\r\n        if (order.buy_sell == BUY) {\r\n            // Return back ETC\r\n            uint256 total_deal = total_amount(token, old_amount, order.price);\r\n            etx_balances[msg.sender] = safe_sub(etx_balances[msg.sender], total_deal);\r\n            require(order.owner.send(total_deal));\r\n        } else {\r\n            // Return shitcoins back \r\n            ERC20 shitcoin = ERC20(coin.base);\r\n            shitcoin.transfer(order.owner, old_amount);\r\n        }\r\n    }\r\n    \r\n    function collect_fee(string token) public {\r\n        require(msg.sender == owner);\r\n\r\n        // Send shitcoins\r\n        coin_t coin = shitcoins[shitcoin_index[token] - 1];\r\n        if (coin.fee > 0) {\r\n            ERC20 shitcoin = ERC20(coin.base);\r\n            shitcoin.transfer(owner, coin.fee);\r\n            coin.fee = 0;\r\n        }\r\n    }\r\n    \r\n    function collect_main_fee() public {\r\n        require(msg.sender == owner);\r\n\r\n        // Send main currency\r\n        require(owner.send(main_fee));\r\n        main_fee = 0;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safe_mul\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"get_etc_balance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"string\"},{\"name\":\"maker\",\"type\":\"uint256\"},{\"name\":\"taker\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"total_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get_coin\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes1\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_coins_count\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"string\"}],\"name\":\"get_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_taker_fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_minimum_trade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"the_maker_fee\",\"type\":\"uint256\"},{\"name\":\"the_taker_fee\",\"type\":\"uint256\"},{\"name\":\"the_deploy_fee\",\"type\":\"uint256\"}],\"name\":\"set_fee\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"set_owner\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"string\"}],\"name\":\"get_order_book_length\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_deploy_fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_maker_fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collect_main_fee\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_trader\",\"type\":\"address\"}],\"name\":\"set_trader\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"string\"}],\"name\":\"get_balance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coin\",\"type\":\"string\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"approve_coin\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safe_sub\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"coin_address\",\"type\":\"address\"},{\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"createToken\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get_order\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"string\"}],\"name\":\"collect_fee\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"string\"},{\"name\":\"the_minimum_trade\",\"type\":\"uint256\"}],\"name\":\"set_coin_minimum_trade\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"the_minimum_trade\",\"type\":\"uint256\"}],\"name\":\"set_minimum_trade\",\"outputs\":[],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"remove_coin\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safe_add\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coin\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"base\",\"type\":\"address\"},{\"name\":\"digits\",\"type\":\"uint8\"}],\"name\":\"add_coin\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"ERC20dex","CompilerVersion":"v0.3.6+commit.3fc68da","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}