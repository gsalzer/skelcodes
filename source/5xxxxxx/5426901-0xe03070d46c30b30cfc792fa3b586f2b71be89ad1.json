{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ninterface itoken {\r\n    function freezeAccount(address _target, bool _freeze) external;\r\n    function freezeAccountPartialy(address _target, uint256 _value) external;\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    // function transferOwnership(address newOwner) external;\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function frozenAccount(address _account) external view returns (bool);\r\n    function frozenAmount(address _account) external view returns (uint256);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract OwnerContract is Claimable {\r\n    Claimable public ownedContract;\r\n    address internal origOwner;\r\n\r\n    /**\r\n     * @dev bind a contract as its owner\r\n     *\r\n     * @param _contract the contract address that will be binded by this Owner Contract\r\n     */\r\n    function bindContract(address _contract) onlyOwner public returns (bool) {\r\n        require(_contract != address(0));\r\n        ownedContract = Claimable(_contract);\r\n        origOwner = ownedContract.owner();\r\n\r\n        // take ownership of the owned contract\r\n        ownedContract.claimOwnership();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev change the owner of the contract from this contract address to the original one.\r\n     *\r\n     */\r\n    function transferOwnershipBack() onlyOwner public {\r\n        ownedContract.transferOwnership(origOwner);\r\n        ownedContract = Claimable(address(0));\r\n        origOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev change the owner of the contract from this contract address to another one.\r\n     *\r\n     * @param _nextOwner the contract address that will be next Owner of the original Contract\r\n     */\r\n    function changeOwnershipto(address _nextOwner)  onlyOwner public {\r\n        ownedContract.transferOwnership(_nextOwner);\r\n        ownedContract = Claimable(address(0));\r\n        origOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract ReleaseToken is OwnerContract {\r\n    using SafeMath for uint256;\r\n\r\n    // record lock time period and related token amount\r\n    struct TimeRec {\r\n        uint256 amount;\r\n        uint256 remain;\r\n        uint256 endTime;\r\n        uint256 releasePeriodEndTime;\r\n    }\r\n\r\n    itoken internal owned;\r\n\r\n    address[] public frozenAccounts;\r\n    mapping (address => TimeRec[]) frozenTimes;\r\n    // mapping (address => uint256) releasedAmounts;\r\n    mapping (address => uint256) preReleaseAmounts;\r\n\r\n    event ReleaseFunds(address _target, uint256 _amount);\r\n\r\n    /**\r\n     * @dev bind a contract as its owner\r\n     *\r\n     * @param _contract the contract address that will be binded by this Owner Contract\r\n     */\r\n    function bindContract(address _contract) onlyOwner public returns (bool) {\r\n        require(_contract != address(0));\r\n        owned = itoken(_contract);\r\n        return super.bindContract(_contract);\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account from the frozen accounts list\r\n     *\r\n     * @param _ind the index of the account in the list\r\n     */\r\n    function removeAccount(uint _ind) internal returns (bool) {\r\n        require(_ind < frozenAccounts.length);\r\n\r\n        uint256 i = _ind;\r\n        while (i < frozenAccounts.length.sub(1)) {\r\n            frozenAccounts[i] = frozenAccounts[i.add(1)];\r\n            i = i.add(1);\r\n        }\r\n\r\n        delete frozenAccounts[frozenAccounts.length.sub(1)];\r\n        frozenAccounts.length = frozenAccounts.length.sub(1);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove a time records from the time records list of one account\r\n     *\r\n     * @param _target the account that holds a list of time records which record the freeze period\r\n     */\r\n    function removeLockedTime(address _target, uint _ind) internal returns (bool) {\r\n        require(_target != address(0));\r\n\r\n        TimeRec[] storage lockedTimes = frozenTimes[_target];\r\n        require(_ind < lockedTimes.length);\r\n\r\n        uint256 i = _ind;\r\n        while (i < lockedTimes.length.sub(1)) {\r\n            lockedTimes[i] = lockedTimes[i.add(1)];\r\n            i = i.add(1);\r\n        }\r\n\r\n        delete lockedTimes[lockedTimes.length.sub(1)];\r\n        lockedTimes.length = lockedTimes.length.sub(1);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev get total remain locked tokens of an account\r\n     *\r\n     * @param _account the owner of some amount of tokens\r\n     */\r\n    function getRemainLockedOf(address _account) public view returns (uint256) {\r\n        require(_account != address(0));\r\n\r\n        uint256 totalRemain = 0;\r\n        uint256 len = frozenAccounts.length;\r\n        uint256 i = 0;\r\n        while (i < len) {\r\n            address frozenAddr = frozenAccounts[i];\r\n            if (frozenAddr == _account) {\r\n                uint256 timeRecLen = frozenTimes[frozenAddr].length;\r\n                uint256 j = 0;\r\n                while (j < timeRecLen) {\r\n                    TimeRec storage timePair = frozenTimes[frozenAddr][j];\r\n                    totalRemain = totalRemain.add(timePair.remain);\r\n\r\n                    j = j.add(1);\r\n                }\r\n            }\r\n\r\n            i = i.add(1);\r\n        }\r\n\r\n        return totalRemain;\r\n    }\r\n\r\n    /**\r\n     * judge whether we need to release some of the locked token\r\n     *\r\n     */\r\n    function needRelease() public view returns (bool) {\r\n        uint256 len = frozenAccounts.length;\r\n        uint256 i = 0;\r\n        while (i < len) {\r\n            address frozenAddr = frozenAccounts[i];\r\n            uint256 timeRecLen = frozenTimes[frozenAddr].length;\r\n            uint256 j = 0;\r\n            while (j < timeRecLen) {\r\n                TimeRec storage timePair = frozenTimes[frozenAddr][j];\r\n                if (now >= timePair.endTime) {\r\n                    return true;\r\n                }\r\n\r\n                j = j.add(1);\r\n            }\r\n\r\n            i = i.add(1);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev freeze the amount of tokens of an account\r\n     *\r\n     * @param _target the owner of some amount of tokens\r\n     * @param _value the amount of the tokens\r\n     * @param _frozenEndTime the end time of the lock period, unit is second\r\n     * @param _releasePeriod the locking period, unit is second\r\n     */\r\n    function freeze(address _target, uint256 _value, uint256 _frozenEndTime, uint256 _releasePeriod) onlyOwner public returns (bool) {\r\n        //require(_tokenAddr != address(0));\r\n        require(_target != address(0));\r\n        require(_value > 0);\r\n        require(_frozenEndTime > 0);\r\n\r\n        uint256 len = frozenAccounts.length;\r\n\r\n        uint256 i = 0;\r\n        for (; i < len; i = i.add(1)) {\r\n            if (frozenAccounts[i] == _target) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (i >= len) {\r\n            frozenAccounts.push(_target); // add new account\r\n        }\r\n\r\n        // each time the new locked time will be added to the backend\r\n        frozenTimes[_target].push(TimeRec(_value, _value, _frozenEndTime, _frozenEndTime.add(_releasePeriod)));\r\n        if (owned.frozenAccount(_target)) {\r\n            uint256 preFrozenAmount = owned.frozenAmount(_target);\r\n            owned.freezeAccountPartialy(_target, _value.add(preFrozenAmount));\r\n        } else {\r\n            owned.freezeAccountPartialy(_target, _value);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev transfer an amount of tokens to an account, and then freeze the tokens\r\n     *\r\n     * @param _target the account address that will hold an amount of the tokens\r\n     * @param _value the amount of the tokens which has been transferred\r\n     * @param _frozenEndTime the end time of the lock period, unit is second\r\n     * @param _releasePeriod the locking period, unit is second\r\n     */\r\n    function transferAndFreeze(address _target, uint256 _value, uint256 _frozenEndTime, uint256 _releasePeriod) onlyOwner public returns (bool) {\r\n        //require(_tokenOwner != address(0));\r\n        require(_target != address(0));\r\n        require(_value > 0);\r\n        require(_frozenEndTime > 0);\r\n\r\n        // check firstly that the allowance of this contract has been set\r\n        require(owned.allowance(msg.sender, this) > 0);\r\n\r\n        // now we need transfer the funds before freeze them\r\n        require(owned.transferFrom(msg.sender, _target, _value));\r\n\r\n        // freeze the account after transfering funds\r\n        if (!freeze(_target, _value, _frozenEndTime, _releasePeriod)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * release the token which are locked for once and will be total released at once\r\n     * after the end point of the lock period\r\n     */\r\n    function releaseAllOnceLock() onlyOwner public returns (bool) {\r\n        //require(_tokenAddr != address(0));\r\n\r\n        uint256 len = frozenAccounts.length;\r\n        uint256 i = 0;\r\n        while (i < len) {\r\n            address target = frozenAccounts[i];\r\n            if (frozenTimes[target].length == 1 && frozenTimes[target][0].endTime == frozenTimes[target][0].releasePeriodEndTime && frozenTimes[target][0].endTime > 0 && now >= frozenTimes[target][0].endTime) {\r\n                uint256 releasedAmount = frozenTimes[target][0].amount;\r\n\r\n                // remove current release period time record\r\n                if (!removeLockedTime(target, 0)) {\r\n                    return false;\r\n                }\r\n\r\n                // remove the froze account\r\n                if (!removeAccount(i)) {\r\n                    return false;\r\n                }\r\n\r\n                uint256 preFrozenAmount = owned.frozenAmount(target);\r\n                if (preFrozenAmount > releasedAmount) {\r\n                    owned.freezeAccountPartialy(target, preFrozenAmount.sub(releasedAmount));\r\n                } else {\r\n                    owned.freezeAccount(target, false);\r\n                }\r\n\r\n                ReleaseFunds(target, releasedAmount);\r\n                len = len.sub(1);\r\n            } else {\r\n                // no account has been removed\r\n                i = i.add(1);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev release the locked tokens owned by an account, which only have only one locked time\r\n     * and don't have release stage.\r\n     *\r\n     * @param _target the account address that hold an amount of locked tokens\r\n     */\r\n    function releaseAccount(address _target) onlyOwner public returns (bool) {\r\n        //require(_tokenAddr != address(0));\r\n        require(_target != address(0));\r\n\r\n        uint256 len = frozenAccounts.length;\r\n        uint256 i = 0;\r\n        while (i < len) {\r\n            address destAddr = frozenAccounts[i];\r\n            if (destAddr == _target) {\r\n                if (frozenTimes[destAddr].length == 1 && frozenTimes[destAddr][0].endTime == frozenTimes[destAddr][0].releasePeriodEndTime && frozenTimes[destAddr][0].endTime > 0 && now >= frozenTimes[destAddr][0].endTime) {\r\n                    uint256 releasedAmount = frozenTimes[destAddr][0].amount;\r\n\r\n                    // remove current release period time record\r\n                    if (!removeLockedTime(destAddr, 0)) {\r\n                        return false;\r\n                    }\r\n\r\n                    // remove the froze account\r\n                    if (!removeAccount(i)) {\r\n                        return false;\r\n                    }\r\n\r\n                    uint256 preFrozenAmount = owned.frozenAmount(destAddr);\r\n                    if (preFrozenAmount > releasedAmount) {\r\n                        owned.freezeAccountPartialy(destAddr, preFrozenAmount.sub(releasedAmount));\r\n                    } else {\r\n                        owned.freezeAccount(destAddr, false);\r\n                    }\r\n\r\n                    ReleaseFunds(destAddr, releasedAmount);\r\n                }\r\n\r\n                // if the account are not locked for once, we will do nothing here\r\n                return true;\r\n            }\r\n\r\n            i = i.add(1);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev release the locked tokens owned by an account with several stages\r\n     * this need the contract get approval from the account by call approve() in the token contract\r\n     *\r\n     * @param _target the account address that hold an amount of locked tokens\r\n     */\r\n    function releaseWithStage(address _target/*, address _dest*/) onlyOwner public returns (bool) {\r\n        //require(_tokenaddr != address(0));\r\n        require(_target != address(0));\r\n        // require(_dest != address(0));\r\n        // require(_value > 0);\r\n\r\n        // check firstly that the allowance of this contract from _target account has been set\r\n        // require(owned.allowance(_target, this) > 0);\r\n\r\n        uint256 len = frozenAccounts.length;\r\n        uint256 i = 0;\r\n        while (i < len) {\r\n            // firstly find the target address\r\n            address frozenAddr = frozenAccounts[i];\r\n            if (frozenAddr == _target) {\r\n                uint256 timeRecLen = frozenTimes[frozenAddr].length;\r\n\r\n                bool released = false;\r\n                uint256 nowTime = now;\r\n                for (uint256 j = 0; j < timeRecLen; released = false) {\r\n                    // iterate every time records to caculate how many tokens need to be released.\r\n                    TimeRec storage timePair = frozenTimes[frozenAddr][j];\r\n                    if (nowTime > timePair.endTime && timePair.endTime > 0 && timePair.releasePeriodEndTime > timePair.endTime) {\r\n                        uint256 lastReleased = timePair.amount.sub(timePair.remain);\r\n                        uint256 value = (timePair.amount * nowTime.sub(timePair.endTime) / timePair.releasePeriodEndTime.sub(timePair.endTime)).sub(lastReleased);\r\n                        if (value > timePair.remain) {\r\n                            value = timePair.remain;\r\n                        }\r\n\r\n                        // timePair.endTime = nowTime;\r\n                        timePair.remain = timePair.remain.sub(value);\r\n                        ReleaseFunds(frozenAddr, value);\r\n                        preReleaseAmounts[frozenAddr] = preReleaseAmounts[frozenAddr].add(value);\r\n                        if (timePair.remain < 1e8) {\r\n                            if (!removeLockedTime(frozenAddr, j)) {\r\n                                return false;\r\n                            }\r\n                            released = true;\r\n                            timeRecLen = timeRecLen.sub(1);\r\n                        }\r\n                    } else if (nowTime >= timePair.endTime && timePair.endTime > 0 && timePair.releasePeriodEndTime == timePair.endTime) {\r\n                        timePair.remain = 0;\r\n                        ReleaseFunds(frozenAddr, timePair.amount);\r\n                        preReleaseAmounts[frozenAddr] = preReleaseAmounts[frozenAddr].add(timePair.amount);\r\n                        if (!removeLockedTime(frozenAddr, j)) {\r\n                            return false;\r\n                        }\r\n                        released = true;\r\n                        timeRecLen = timeRecLen.sub(1);\r\n                    }\r\n\r\n                    if (!released) {\r\n                        j = j.add(1);\r\n                    }\r\n                }\r\n\r\n                // we got some amount need to be released\r\n                if (preReleaseAmounts[frozenAddr] > 0) {\r\n                    uint256 preReleasedAmount = preReleaseAmounts[frozenAddr];\r\n                    uint256 preFrozenAmount = owned.frozenAmount(frozenAddr);\r\n\r\n                    // set the pre-release amount to 0 for next time\r\n                    preReleaseAmounts[frozenAddr] = 0;\r\n                    if (preFrozenAmount > preReleasedAmount) {\r\n                        owned.freezeAccountPartialy(frozenAddr, preFrozenAmount.sub(preReleasedAmount));\r\n                    } else {\r\n                        owned.freezeAccount(frozenAddr, false);\r\n                    }\r\n                    // if (!owned.transferFrom(_target, _dest, preReleaseAmounts[frozenAddr])) {\r\n                    //     return false;\r\n                    // }\r\n                }\r\n\r\n                // if all the frozen amounts had been released, then unlock the account finally\r\n                if (frozenTimes[frozenAddr].length == 0) {\r\n                    if (!removeAccount(i)) {\r\n                        return false;\r\n                    }\r\n                } /*else {\r\n                    // still has some tokens need to be released in future\r\n                    owned.freezeAccount(frozenAddr, true);\r\n                }*/\r\n\r\n                return true;\r\n            }\r\n\r\n            i = i.add(1);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev set the new endtime of the released time of an account\r\n     *\r\n     * @param _target the owner of some amount of tokens\r\n     * @param _oldEndTime the original endtime for the lock period\r\n     * @param _newEndTime the new endtime for the lock period\r\n     */\r\n    function setNewEndtime(address _target, uint256 _oldEndTime, uint256 _newEndTime) onlyOwner public returns (bool) {\r\n        require(_target != address(0));\r\n        require(_oldEndTime > 0 && _newEndTime > 0);\r\n\r\n        uint256 len = frozenAccounts.length;\r\n        uint256 i = 0;\r\n        while (i < len) {\r\n            address frozenAddr = frozenAccounts[i];\r\n            if (frozenAddr == _target) {\r\n                uint256 timeRecLen = frozenTimes[frozenAddr].length;\r\n                uint256 j = 0;\r\n                while (j < timeRecLen) {\r\n                    TimeRec storage timePair = frozenTimes[frozenAddr][j];\r\n                    if (_oldEndTime == timePair.endTime) {\r\n                        uint256 duration = timePair.releasePeriodEndTime.sub(timePair.endTime);\r\n                        timePair.endTime = _newEndTime;\r\n                        timePair.releasePeriodEndTime = timePair.endTime.add(duration);\r\n\r\n                        return true;\r\n                    }\r\n\r\n                    j = j.add(1);\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            i = i.add(1);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev set the new released period length of an account\r\n     *\r\n     * @param _target the owner of some amount of tokens\r\n     * @param _origEndTime the original endtime for the lock period\r\n     * @param _duration the new releasing period\r\n     */\r\n    function setNewReleasePeriod(address _target, uint256 _origEndTime, uint256 _duration) onlyOwner public returns (bool) {\r\n        require(_target != address(0));\r\n        require(_origEndTime > 0 && _duration > 0);\r\n\r\n        uint256 len = frozenAccounts.length;\r\n        uint256 i = 0;\r\n        while (i < len) {\r\n            address frozenAddr = frozenAccounts[i];\r\n            if (frozenAddr == _target) {\r\n                uint256 timeRecLen = frozenTimes[frozenAddr].length;\r\n                uint256 j = 0;\r\n                while (j < timeRecLen) {\r\n                    TimeRec storage timePair = frozenTimes[frozenAddr][j];\r\n                    if (_origEndTime == timePair.endTime) {\r\n                        timePair.releasePeriodEndTime = _origEndTime.add(_duration);\r\n                        return true;\r\n                    }\r\n\r\n                    j = j.add(1);\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            i = i.add(1);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev get the locked stages of an account\r\n     *\r\n     * @param _target the owner of some amount of tokens\r\n     */\r\n    function getLockedStages(address _target) public view returns (uint) {\r\n        require(_target != address(0));\r\n\r\n        uint256 len = frozenAccounts.length;\r\n        uint256 i = 0;\r\n        while (i < len) {\r\n            address frozenAddr = frozenAccounts[i];\r\n            if (frozenAddr == _target) {\r\n                return frozenTimes[frozenAddr].length;\r\n            }\r\n\r\n            i = i.add(1);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev get the endtime of the locked stages of an account\r\n     *\r\n     * @param _target the owner of some amount of tokens\r\n     * @param _num the stage number of the releasing period\r\n     */\r\n    function getEndTimeOfStage(address _target, uint _num) public view returns (uint256) {\r\n        require(_target != address(0));\r\n\r\n        uint256 len = frozenAccounts.length;\r\n        uint256 i = 0;\r\n        while (i < len) {\r\n            address frozenAddr = frozenAccounts[i];\r\n            if (frozenAddr == _target) {\r\n                TimeRec storage timePair = frozenTimes[frozenAddr][_num];\r\n                return timePair.endTime;\r\n            }\r\n\r\n            i = i.add(1);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev get the remain unrleased tokens of the locked stages of an account\r\n     *\r\n     * @param _target the owner of some amount of tokens\r\n     * @param _num the stage number of the releasing period\r\n     */\r\n    function getRemainOfStage(address _target, uint _num) public view returns (uint256) {\r\n        require(_target != address(0));\r\n\r\n        uint256 len = frozenAccounts.length;\r\n        uint256 i = 0;\r\n        while (i < len) {\r\n            address frozenAddr = frozenAccounts[i];\r\n            if (frozenAddr == _target) {\r\n                TimeRec storage timePair = frozenTimes[frozenAddr][_num];\r\n                return timePair.remain;\r\n            }\r\n\r\n            i = i.add(1);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev get the remain releasing period of an account\r\n     *\r\n     * @param _target the owner of some amount of tokens\r\n     * @param _num the stage number of the releasing period\r\n     */\r\n    function getRemainReleaseTimeOfStage(address _target, uint _num) public view returns (uint256) {\r\n        require(_target != address(0));\r\n\r\n        uint256 len = frozenAccounts.length;\r\n        uint256 i = 0;\r\n        while (i < len) {\r\n            address frozenAddr = frozenAccounts[i];\r\n            if (frozenAddr == _target) {\r\n                TimeRec storage timePair = frozenTimes[frozenAddr][_num];\r\n                uint256 nowTime = now;\r\n                if (timePair.releasePeriodEndTime == timePair.endTime || nowTime <= timePair.endTime ) {\r\n                    return (timePair.releasePeriodEndTime.sub(timePair.endTime));\r\n                }\r\n\r\n                if (timePair.releasePeriodEndTime < nowTime) {\r\n                    return 0;\r\n                }\r\n\r\n                return (timePair.releasePeriodEndTime.sub(nowTime));\r\n            }\r\n\r\n            i = i.add(1);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev release the locked tokens owned by a number of accounts\r\n     *\r\n     * @param _targets the accounts list that hold an amount of locked tokens\r\n     */\r\n    function releaseMultiAccounts(address[] _targets) onlyOwner public returns (bool) {\r\n        //require(_tokenAddr != address(0));\r\n        require(_targets.length != 0);\r\n\r\n        bool res = false;\r\n        uint256 i = 0;\r\n        while (i < _targets.length) {\r\n            res = releaseAccount(_targets[i]) || res;\r\n            i = i.add(1);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * @dev release the locked tokens owned by an account\r\n     *\r\n     * @param _targets the account addresses list that hold amounts of locked tokens\r\n     */\r\n    function releaseMultiWithStage(address[] _targets) onlyOwner public returns (bool) {\r\n        require(_targets.length != 0);\r\n\r\n        bool res = false;\r\n        uint256 i = 0;\r\n        while (i < _targets.length) {\r\n            require(_targets[i] != address(0));\r\n\r\n            res = releaseWithStage(_targets[i]) || res; // as long as there is one true transaction, then the result will be true\r\n            i = i.add(1);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n     /**\r\n     * @dev freeze multiple of the accounts\r\n     *\r\n     * @param _targets the owners of some amount of tokens\r\n     * @param _values the amounts of the tokens\r\n     * @param _frozenEndTimes the list of the end time of the lock period, unit is second\r\n     * @param _releasePeriods the list of the locking period, unit is second\r\n     */\r\n    function freezeMulti(address[] _targets, uint256[] _values, uint256[] _frozenEndTimes, uint256[] _releasePeriods) onlyOwner public returns (bool) {\r\n        require(_targets.length != 0);\r\n        require(_values.length != 0);\r\n        require(_frozenEndTimes.length != 0);\r\n        require(_releasePeriods.length != 0);\r\n        require(_targets.length == _values.length && _values.length == _frozenEndTimes.length && _frozenEndTimes.length == _releasePeriods.length);\r\n\r\n        bool res = true;\r\n        for (uint256 i = 0; i < _targets.length; i = i.add(1)) {\r\n            require(_targets[i] != address(0));\r\n            res = freeze(_targets[i], _values[i], _frozenEndTimes[i], _releasePeriods[i]) && res;\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * @dev transfer a list of amounts of tokens to a list of accounts, and then freeze the tokens\r\n     *\r\n     * @param _targets the account addresses that will hold a list of amounts of the tokens\r\n     * @param _values the amounts of the tokens which have been transferred\r\n     * @param _frozenEndTimes the end time list of the locked periods, unit is second\r\n     * @param _releasePeriods the list of locking periods, unit is second\r\n     */\r\n    function transferAndFreezeMulti(address[] _targets, uint256[] _values, uint256[] _frozenEndTimes, uint256[] _releasePeriods) onlyOwner public returns (bool) {\r\n        require(_targets.length != 0);\r\n        require(_values.length != 0);\r\n        require(_frozenEndTimes.length != 0);\r\n        require(_releasePeriods.length != 0);\r\n        require(_targets.length == _values.length && _values.length == _frozenEndTimes.length && _frozenEndTimes.length == _releasePeriods.length);\r\n\r\n        bool res = true;\r\n        for (uint256 i = 0; i < _targets.length; i = i.add(1)) {\r\n            require(_targets[i] != address(0));\r\n            res = transferAndFreeze(_targets[i], _values[i], _frozenEndTimes[i], _releasePeriods[i]) && res;\r\n        }\r\n\r\n        return res;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"getRemainReleaseTimeOfStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseAllOnceLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferOwnershipBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_frozenEndTime\",\"type\":\"uint256\"},{\"name\":\"_releasePeriod\",\"type\":\"uint256\"}],\"name\":\"transferAndFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"}],\"name\":\"releaseMultiWithStage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"releaseWithStage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_origEndTime\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setNewReleasePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"}],\"name\":\"releaseMultiAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_frozenEndTimes\",\"type\":\"uint256[]\"},{\"name\":\"_releasePeriods\",\"type\":\"uint256[]\"}],\"name\":\"freezeMulti\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"needRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_frozenEndTime\",\"type\":\"uint256\"},{\"name\":\"_releasePeriod\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"bindContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"releaseAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_frozenEndTimes\",\"type\":\"uint256[]\"},{\"name\":\"_releasePeriods\",\"type\":\"uint256[]\"}],\"name\":\"transferAndFreezeMulti\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_oldEndTime\",\"type\":\"uint256\"},{\"name\":\"_newEndTime\",\"type\":\"uint256\"}],\"name\":\"setNewEndtime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"getRemainOfStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownedContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"frozenAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getRemainLockedOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"getEndTimeOfStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getLockedStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextOwner\",\"type\":\"address\"}],\"name\":\"changeOwnershipto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ReleaseToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c0860917add625aaa1ba745b442a2878fa5ebf033c960cc8bfc1cfb842c61a21"}]}