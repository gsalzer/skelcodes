{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\ncontract CryptoStrippers{\r\n\r\n    uint256 public COINS_TO_HATCH_1STRIPPERS = 86400;\r\n    uint256 public STARTING_STRIPPERS = 500;\r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    bool public initialized = true;\r\n    address public ceoAddress;\r\n    mapping (address => uint256) public hatcheryStrippers;\r\n    mapping (address => uint256) public claimedCoins;\r\n    mapping (address => uint256) public lastHatch;\r\n    mapping (address => address) public referrals;\r\n    uint256 public marketCoins;\r\n\r\n\r\n    function CryptoStrippers() public{\r\n        ceoAddress = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev hatchCoins produce coins\r\n    */\r\n    function hatchCoins(address ref) public{\r\n        require(initialized);\r\n        if(referrals[msg.sender] == 0 && referrals[msg.sender] != msg.sender){\r\n            referrals[msg.sender] = ref;\r\n        }\r\n        uint256 coinsUsed = getMyCoins();\r\n        uint256 newStrippers = SafeMath.div(coinsUsed,COINS_TO_HATCH_1STRIPPERS);\r\n        hatcheryStrippers[msg.sender] = SafeMath.add(hatcheryStrippers[msg.sender],newStrippers);\r\n        claimedCoins[msg.sender] = 0;\r\n        lastHatch[msg.sender] = now;\r\n        claimedCoins[referrals[msg.sender]] = SafeMath.add(claimedCoins[referrals[msg.sender]],SafeMath.div(coinsUsed,5));\r\n        marketCoins = SafeMath.add(marketCoins,SafeMath.div(coinsUsed,10));\r\n    }\r\n\r\n    function sellCoins() public{\r\n        require(initialized);\r\n        uint256 hasCoins = getMyCoins();\r\n        uint256 coinValue = calculateCoinSell(hasCoins);\r\n        uint256 fee = devFee(coinValue);\r\n        claimedCoins[msg.sender] = 0;\r\n        lastHatch[msg.sender] = now;\r\n        marketCoins = SafeMath.add(marketCoins,hasCoins);\r\n        ceoAddress.transfer(fee);\r\n        msg.sender.transfer(SafeMath.sub(coinValue,fee));\r\n    }\r\n\r\n    function buyCoins() public payable{\r\n        require(initialized);\r\n        uint256 coinsBought = calculateCoinBuy(msg.value,SafeMath.sub(this.balance,msg.value));\r\n        coinsBought = SafeMath.sub(coinsBought,devFee(coinsBought));\r\n        ceoAddress.transfer(devFee(msg.value));\r\n        claimedCoins[msg.sender] = SafeMath.add(claimedCoins[msg.sender],coinsBought);\r\n    }\r\n\r\n    /**\r\n    * @dev Computational cost\r\n    */\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n\r\n    function calculateCoinSell(uint256 coins) public view returns(uint256){\r\n        return calculateTrade(coins,marketCoins,this.balance);\r\n    }\r\n\r\n    function calculateCoinBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth,contractBalance,marketCoins);\r\n    }\r\n\r\n    function calculateCoinBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateCoinBuy(eth,this.balance);\r\n    }\r\n\r\n    function devFee(uint256 amount) public view returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,4),100);\r\n    }\r\n\r\n    function seedMarket(uint256 coins) public payable{\r\n        require(marketCoins==0);\r\n        initialized=true;\r\n        marketCoins=coins;\r\n    }\r\n\r\n    function getFreeStrippers() public{\r\n        require(initialized);\r\n        require(hatcheryStrippers[msg.sender]==0);\r\n        lastHatch[msg.sender]=now;\r\n        hatcheryStrippers[msg.sender]=STARTING_STRIPPERS;\r\n    }\r\n\r\n    function getBalance() public view returns(uint256){\r\n        return this.balance;\r\n    }\r\n\r\n    function getMyStrippers() public view returns(uint256){\r\n        return hatcheryStrippers[msg.sender];\r\n    }\r\n\r\n    function getMyCoins() public view returns(uint256){\r\n        return SafeMath.add(claimedCoins[msg.sender],getCoinsSinceLastHatch(msg.sender));\r\n    }\r\n\r\n    function getCoinsSinceLastHatch(address adr) public view returns(uint256){\r\n        uint256 secondsPassed=min(COINS_TO_HATCH_1STRIPPERS,SafeMath.sub(now,lastHatch[adr]));\r\n        return SafeMath.mul(secondsPassed,hatcheryStrippers[adr]);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"getFreeStrippers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcheryStrippers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyStrippers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"coins\",\"type\":\"uint256\"}],\"name\":\"calculateCoinSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coins\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyCoins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getCoinsSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COINS_TO_HATCH_1STRIPPERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateCoinBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyCoins\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_STRIPPERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedCoins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateCoinBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketCoins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CryptoStrippers","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1d14247a3f4a8b3fc8db5e483fef602ca5fe623cc145e52cabfcd4669d2c94ce"}]}