{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract SmzTradingContract\r\n{\r\n    address public constant RECEIVER_ADDRESS = 0xf3eB3CA356c111ECb418D457e55A3A3D185faf61;\r\n    uint256 public constant ACCEPTED_AMOUNT = 3 ether;\r\n    uint256 public RECEIVER_PAYOUT_THRESHOLD = 10 ether;\r\n    \r\n    address public constant END_ADDRESS = 0x3559e34004b944906Bc727a40d7568a98bDc42d3;\r\n    uint256 public constant END_AMOUNT = 0.39 ether;\r\n    \r\n    bool public ended = false;\r\n    \r\n    mapping(address => bool) public addressesAllowed;\r\n    mapping(address => bool) public addressesDeposited;\r\n    \r\n    // The manager can allow and disallow addresses to deposit\r\n    address public manager;\r\n    \r\n    function SmzTradingContract() public\r\n    {\r\n        manager = msg.sender;\r\n    }\r\n    function setManager(address _newManager) external\r\n    {\r\n        require(msg.sender == manager);\r\n        manager = _newManager;\r\n    }\r\n    \r\n    function () payable external\r\n    {\r\n        // If the ending address sends the ending amount, block all deposits\r\n        if (msg.sender == END_ADDRESS && msg.value == END_AMOUNT)\r\n        {\r\n            ended = true;\r\n            RECEIVER_ADDRESS.transfer(this.balance);\r\n            return;\r\n        }\r\n        \r\n        // Only allow deposits if the process has not been ended yet\r\n        require(!ended);\r\n        \r\n        // Only allow deposits of one exact amount\r\n        require(msg.value == ACCEPTED_AMOUNT);\r\n        \r\n        // Only explicitly allowed addresses can deposit\r\n        require(addressesAllowed[msg.sender] == true);\r\n        \r\n        // Each address can only despoit once\r\n        require(addressesDeposited[msg.sender] == false);\r\n        addressesDeposited[msg.sender] = true;\r\n        \r\n        // When an address has deposited, we set their allowed state to 0.\r\n        // This refunds approximately 15000 gas.\r\n        addressesAllowed[msg.sender] = false;\r\n        \r\n        // If we have crossed the payout threshold,\r\n        // transfer all the deposited amounts to the receiver address\r\n        if (this.balance >= RECEIVER_PAYOUT_THRESHOLD)\r\n        {\r\n            RECEIVER_ADDRESS.transfer(this.balance);\r\n        }\r\n    }\r\n    \r\n    // The receiver may add and remove each address' permission to deposit\r\n    function addAllowedAddress(address _allowedAddress) public\r\n    {\r\n        require(msg.sender == manager);\r\n        addressesAllowed[_allowedAddress] = true;\r\n    }\r\n    function removeAllowedAddress(address _disallowedAddress) public\r\n    {\r\n        require(msg.sender == manager);\r\n        addressesAllowed[_disallowedAddress] = false;\r\n    }\r\n    \r\n    function addMultipleAllowedAddresses(address[] _allowedAddresses) external\r\n    {\r\n        require(msg.sender == manager);\r\n        for (uint256 i=0; i<_allowedAddresses.length; i++)\r\n        {\r\n            addressesAllowed[_allowedAddresses[i]] = true;\r\n        }\r\n    }\r\n    function removeMultipleAllowedAddresses(address[] _disallowedAddresses) external\r\n    {\r\n        require(msg.sender == manager);\r\n        for (uint256 i=0; i<_disallowedAddresses.length; i++)\r\n        {\r\n            addressesAllowed[_disallowedAddresses[i]] = false;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressesDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disallowedAddresses\",\"type\":\"address[]\"}],\"name\":\"removeMultipleAllowedAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RECEIVER_PAYOUT_THRESHOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disallowedAddress\",\"type\":\"address\"}],\"name\":\"removeAllowedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowedAddresses\",\"type\":\"address[]\"}],\"name\":\"addMultipleAllowedAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCEPTED_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowedAddress\",\"type\":\"address\"}],\"name\":\"addAllowedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RECEIVER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressesAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"SmzTradingContract","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://35df14925c377b598fbe115f41d936c95f5d3d8c7bcb83255dffc3b96caa46e9"}]}