{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------\r\n// SencTokenSale - SENC Token Sale Contract\r\n//\r\n// Copyright (c) 2018 InfoCorp Technologies Pte Ltd.\r\n// http://www.sentinel-chain.org/\r\n//\r\n// The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// The SENC Token Sale is organised as follows:\r\n// 1. 10% (50,000,000) of total supply will be minted and sent to founding team weallet.\r\n// 2. 20% (100,000,000) of total supply will be minted and sent to early supporter wallet.\r\n// 3. 20% (100,000,000) of total supply will be minted and sent to presale wallet.\r\n// 4. 20% (100,000,000) of total supply will be available for minting and purchase by public.\r\n// 5. 30% (150,000,000) of total supply will be minted and sent to treaury wallet.\r\n// 6. Public sale is designed to be made available in batches.\r\n// \r\n// Tokens can only be purchased by contributors depending on the batch that\r\n// contributors are assigned to in the WhiteListed smart contract to prevent a\r\n// gas war. Each batch will be assigned a timestamp. Contributors can only \r\n// make purchase once the current timestamp on the main net is above the \r\n// batch's assigned timestamp.\r\n//    - batch 0: start_date 00:01   (guaranteed allocations)\r\n//    - batch 1: start_date+1 00:01 (guaranteed allocations)\r\n//    - batch 2: start_date+2 00:01 (guaranteed and non-guaranteed allocations)\r\n//    - batch 3: start_date+2 12:01 (guaranteed and non-guaranteed allocations)\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n \r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract OperatableBasic {\r\n    function setPrimaryOperator (address addr) public;\r\n    function setSecondaryOperator (address addr) public;\r\n    function isPrimaryOperator(address addr) public view returns (bool);\r\n    function isSecondaryOperator(address addr) public view returns (bool);\r\n}\r\n\r\ncontract Operatable is Ownable, OperatableBasic {\r\n    address public primaryOperator;\r\n    address public secondaryOperator;\r\n\r\n    modifier canOperate() {\r\n        require(msg.sender == primaryOperator || msg.sender == secondaryOperator || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function Operatable() public {\r\n        primaryOperator = owner;\r\n        secondaryOperator = owner;\r\n    }\r\n\r\n    function setPrimaryOperator (address addr) public onlyOwner {\r\n        primaryOperator = addr;\r\n    }\r\n\r\n    function setSecondaryOperator (address addr) public onlyOwner {\r\n        secondaryOperator = addr;\r\n    }\r\n\r\n    function isPrimaryOperator(address addr) public view returns (bool) {\r\n        return (addr == primaryOperator);\r\n    }\r\n\r\n    function isSecondaryOperator(address addr) public view returns (bool) {\r\n        return (addr == secondaryOperator);\r\n    }\r\n}\r\n\r\ncontract Salvageable is Operatable {\r\n    // Salvage other tokens that are accidentally sent into this token\r\n    function emergencyERC20Drain(ERC20 oddToken, uint amount) public canOperate {\r\n        if (address(oddToken) == address(0)) {\r\n            owner.transfer(amount);\r\n            return;\r\n        }\r\n        oddToken.transfer(owner, amount);\r\n    }\r\n}\r\n\r\ncontract WhiteListedBasic is OperatableBasic {\r\n    function addWhiteListed(address[] addrs, uint[] batches, uint[] weiAllocation) external;\r\n    function getAllocated(address addr) public view returns (uint);\r\n    function getBatchNumber(address addr) public view returns (uint);\r\n    function getWhiteListCount() public view returns (uint);\r\n    function isWhiteListed(address addr) public view returns (bool);\r\n    function removeWhiteListed(address addr) public;\r\n    function setAllocation(address[] addrs, uint[] allocation) public;\r\n    function setBatchNumber(address[] addrs, uint[] batch) public;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract SencTokenConfig {\r\n    string public constant NAME = \"Sentinel Chain Token\";\r\n    string public constant SYMBOL = \"SENC\";\r\n    uint8 public constant DECIMALS = 18;\r\n    uint public constant DECIMALSFACTOR = 10 ** uint(DECIMALS);\r\n    uint public constant TOTALSUPPLY = 500000000 * DECIMALSFACTOR;\r\n}\r\n\r\ncontract SencToken is PausableToken, SencTokenConfig, Salvageable {\r\n    using SafeMath for uint;\r\n\r\n    string public name = NAME;\r\n    string public symbol = SYMBOL;\r\n    uint8 public decimals = DECIMALS;\r\n    bool public mintingFinished = false;\r\n\r\n    event Mint(address indexed to, uint amount);\r\n    event MintFinished();\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    function SencToken() public {\r\n        paused = true;\r\n    }\r\n\r\n    function pause() onlyOwner public {\r\n        revert();\r\n    }\r\n\r\n    function unpause() onlyOwner public {\r\n        super.unpause();\r\n    }\r\n\r\n    function mint(address _to, uint _amount) onlyOwner canMint public returns (bool) {\r\n        require(totalSupply_.add(_amount) <= TOTALSUPPLY);\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n\r\n    // Airdrop tokens from bounty wallet to contributors as long as there are enough balance\r\n    function airdrop(address bountyWallet, address[] dests, uint[] values) public onlyOwner returns (uint) {\r\n        require(dests.length == values.length);\r\n        uint i = 0;\r\n        while (i < dests.length && balances[bountyWallet] >= values[i]) {\r\n            this.transferFrom(bountyWallet, dests[i], values[i]);\r\n            i += 1;\r\n        }\r\n        return(i);\r\n    }\r\n}\r\n\r\ncontract SencTokenSaleConfig is SencTokenConfig {\r\n    uint public constant TOKEN_FOUNDINGTEAM =  50000000 * DECIMALSFACTOR;\r\n    uint public constant TOKEN_EARLYSUPPORTERS = 100000000 * DECIMALSFACTOR;\r\n    uint public constant TOKEN_PRESALE = 100000000 * DECIMALSFACTOR;\r\n    uint public constant TOKEN_TREASURY = 150000000 * DECIMALSFACTOR;\r\n    uint public constant MILLION = 1000000;\r\n    uint public constant PUBLICSALE_USD_PER_MSENC =  80000;\r\n    uint public constant PRIVATESALE_USD_PER_MSENC =  64000;\r\n    uint public constant MIN_CONTRIBUTION      = 120 finney;\r\n}\r\n\r\ncontract SencTokenSale is SencTokenSaleConfig, Ownable, Pausable, Salvageable {\r\n    using SafeMath for uint;\r\n    bool public isFinalized = false;\r\n\r\n    SencToken public token;\r\n    uint[] public batchStartTimes;\r\n    uint public endTime;\r\n    uint public startTime;\r\n    address public agTechWallet;        // InfoCorp AgTech Wallet Address to receive ETH\r\n    uint public usdPerMEth;             // USD per million ETH. E.g. ETHUSD 844.81 is specified as 844,810,000\r\n    uint public publicSaleSencPerMEth;  // Amount of token 1 million ETH can buy in public sale\r\n    uint public privateSaleSencPerMEth; // Amount of token 1 million ETH can buy in private sale\r\n    uint public weiRaised;              // Amount of raised money in WEI\r\n    WhiteListedBasic public whiteListed;\r\n    uint public numContributors;        // Discrete number of contributors\r\n\r\n    mapping (address => uint) public contributions; // to allow them to have multiple spends\r\n\r\n    event Finalized();\r\n    event TokenPurchase(address indexed beneficiary, uint value, uint amount);\r\n    event TokenPresale(address indexed purchaser, uint amount);\r\n    event TokenFoundingTeam(address purchaser, uint amount);\r\n    event TokenTreasury(address purchaser, uint amount);\r\n    event EarlySupporters(address purchaser, uint amount);\r\n\r\n    function SencTokenSale(uint[] _batchStartTimes, uint _endTime, uint _usdPerMEth, uint _presaleWei,\r\n        WhiteListedBasic _whiteListed, address _agTechWallet,  address _foundingTeamWallet,\r\n        address _earlySupportersWallet, address _treasuryWallet, address _presaleWallet, address _tokenIssuer\r\n    ) public {\r\n        require(_batchStartTimes.length > 0);\r\n        // require (now < batchStartTimes[0]);\r\n        for (uint i = 0; i < _batchStartTimes.length - 1; i++) {\r\n            require(_batchStartTimes[i+1] > _batchStartTimes[i]);\r\n        }\r\n        require(_endTime >= _batchStartTimes[_batchStartTimes.length - 1]);\r\n        require(_usdPerMEth > 0);\r\n        require(_whiteListed != address(0));\r\n        require(_agTechWallet != address(0));\r\n        require(_foundingTeamWallet != address(0));\r\n        require(_earlySupportersWallet != address(0));\r\n        require(_presaleWallet != address(0));\r\n        require(_treasuryWallet != address(0));\r\n        owner = _tokenIssuer;\r\n\r\n        batchStartTimes = _batchStartTimes;\r\n        startTime = _batchStartTimes[0];\r\n        endTime = _endTime;\r\n        agTechWallet = _agTechWallet;\r\n        whiteListed = _whiteListed;\r\n        weiRaised = _presaleWei;\r\n        usdPerMEth = _usdPerMEth;\r\n        publicSaleSencPerMEth = usdPerMEth.mul(MILLION).div(PUBLICSALE_USD_PER_MSENC);\r\n        privateSaleSencPerMEth = usdPerMEth.mul(MILLION).div(PRIVATESALE_USD_PER_MSENC);\r\n\r\n        // Let the token stuff begin\r\n        token = new SencToken();\r\n\r\n        // Mint initial tokens\r\n        mintEarlySupportersTokens(_earlySupportersWallet, TOKEN_EARLYSUPPORTERS);\r\n        mintPresaleTokens(_presaleWallet, TOKEN_PRESALE);\r\n        mintTreasuryTokens(_treasuryWallet, TOKEN_TREASURY);\r\n        mintFoundingTeamTokens(_foundingTeamWallet, TOKEN_FOUNDINGTEAM);\r\n    }\r\n\r\n    function getBatchStartTimesLength() public view returns (uint) {\r\n        return batchStartTimes.length;\r\n    }\r\n\r\n    function updateBatchStartTime(uint _batchNumber, uint _batchStartTime) public canOperate {\r\n        batchStartTimes[_batchNumber] = _batchStartTime;\r\n\tfor (uint i = 0; i < batchStartTimes.length - 1; i++) {\r\n            require(batchStartTimes[i+1] > batchStartTimes[i]);\r\n        }\r\n    }\r\n\r\n    function updateEndTime(uint _endTime) public canOperate {\r\n\trequire(_endTime >= batchStartTimes[batchStartTimes.length - 1]);\r\n        endTime = _endTime;\r\n    }\r\n\r\n    function updateUsdPerMEth(uint _usdPerMEth) public canOperate {\r\n        require(now < batchStartTimes[0]);\r\n        usdPerMEth = _usdPerMEth;\r\n        publicSaleSencPerMEth = usdPerMEth.mul(MILLION).div(PUBLICSALE_USD_PER_MSENC);\r\n        privateSaleSencPerMEth = usdPerMEth.mul(MILLION).div(PRIVATESALE_USD_PER_MSENC);\r\n    }\r\n\r\n    function mintEarlySupportersTokens(address addr, uint amount) internal {\r\n        token.mint(addr, amount);\r\n        EarlySupporters(addr, amount);\r\n    }\r\n\r\n    function mintTreasuryTokens(address addr, uint amount) internal {\r\n        token.mint(addr, amount);\r\n        TokenTreasury(addr, amount);\r\n    }\r\n\r\n    function mintFoundingTeamTokens(address addr, uint amount) internal {\r\n        token.mint(addr, amount);\r\n        TokenFoundingTeam(addr, amount);\r\n    }\r\n\r\n    function mintPresaleTokens(address addr, uint amount) internal {\r\n        token.mint(addr, amount);\r\n        TokenPresale(addr, amount);\r\n    }\r\n\r\n    // Only fallback function can be used to buy tokens\r\n    function () external payable {\r\n        buyTokens(msg.sender, msg.value);\r\n    }\r\n\r\n    function buyTokens(address beneficiary, uint weiAmount) internal whenNotPaused {\r\n        require(beneficiary != address(0));\r\n        require(isWhiteListed(beneficiary));\r\n        require(isWithinPeriod(beneficiary));\r\n        require(isWithinAllocation(beneficiary, weiAmount));\r\n\r\n        uint tokens = weiAmount.mul(publicSaleSencPerMEth).div(MILLION);\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        if (contributions[beneficiary] == 0) {\r\n            numContributors++;\r\n        }\r\n\r\n        contributions[beneficiary] = contributions[beneficiary].add(weiAmount);\r\n        token.mint(beneficiary, tokens);\r\n        TokenPurchase(beneficiary, weiAmount, tokens);\r\n\r\n        forwardFunds();\r\n    }\r\n\r\n    function ethRaised() public view returns(uint) {\r\n        return weiRaised.div(10 ** 18);\r\n    }\r\n\r\n    function usdRaised() public view returns(uint) {\r\n        return weiRaised.mul(usdPerMEth).div(MILLION);\r\n    }\r\n\r\n    function sencSold() public view returns(uint) {\r\n        return token.totalSupply();\r\n    }\r\n\r\n    function sencBalance() public view returns(uint) {\r\n        return token.TOTALSUPPLY().sub(token.totalSupply());\r\n    }\r\n\r\n    // This can be used after the sale is over and tokens are unpaused\r\n    function reclaimTokens() external canOperate {\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(owner, balance);\r\n    }\r\n\r\n    // Batch is in 0..n-1 format\r\n    function isBatchActive(uint batch) public view returns (bool) {\r\n        if (now > endTime) {\r\n            return false;\r\n        }\r\n        if (uint(batch) >= batchStartTimes.length) {\r\n            return false;\r\n        }\r\n        if (now > batchStartTimes[batch]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Returns\r\n    // 0                           - not started\r\n    // 1..batchStartTimes.length   - batch plus 1\r\n    // batchStartTimes.length + 1  - ended\r\n    function batchActive() public view returns (uint) {\r\n        if (now > endTime) {\r\n            return batchStartTimes.length + 1;\r\n        }\r\n        for (uint i = batchStartTimes.length; i > 0; i--) {\r\n            if (now > batchStartTimes[i-1]) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    // Return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return now > endTime;\r\n    }\r\n\r\n    // Send ether to the fund collection wallet\r\n    function forwardFunds() internal {\r\n        agTechWallet.transfer(msg.value);\r\n    }\r\n\r\n    // Buyer must be whitelisted\r\n    function isWhiteListed(address beneficiary) internal view returns (bool) {\r\n        return whiteListed.isWhiteListed(beneficiary);\r\n    }\r\n\r\n    // Buyer must by within assigned batch period\r\n    function isWithinPeriod(address beneficiary) internal view returns (bool) {\r\n        uint batchNumber = whiteListed.getBatchNumber(beneficiary);\r\n        return now >= batchStartTimes[batchNumber] && now <= endTime;\r\n    }\r\n\r\n    // Buyer must by withint allocated amount\r\n    function isWithinAllocation(address beneficiary, uint weiAmount) internal view returns (bool) {\r\n        uint allocation = whiteListed.getAllocated(beneficiary);\r\n        return (weiAmount >= MIN_CONTRIBUTION) && (weiAmount.add(contributions[beneficiary]) <= allocation);\r\n    }\r\n\r\n    // Must be called after crowdsale ends, to do some extra finalization\r\n    function finalize() onlyOwner public {\r\n        require(!isFinalized);\r\n        require(hasEnded());\r\n\r\n        finalization();\r\n        Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    // Stops the minting and transfer token ownership to sale owner. Mints unsold tokens to owner\r\n    function finalization() internal {\r\n        token.mint(owner,sencBalance());\r\n        token.finishMinting();\r\n        token.transferOwnership(owner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PRIVATESALE_USD_PER_MSENC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"batch\",\"type\":\"uint256\"}],\"name\":\"isBatchActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isSecondaryOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSaleSencPerMEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isPrimaryOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MILLION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sencBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBatchStartTimesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CONTRIBUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PUBLICSALE_USD_PER_MSENC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sencSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"batchActive\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setSecondaryOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_TREASURY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"updateEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchStartTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALSFACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numContributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_FOUNDINGTEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PRESALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTALSUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSaleSencPerMEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setPrimaryOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdPerMEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_batchNumber\",\"type\":\"uint256\"},{\"name\":\"_batchStartTime\",\"type\":\"uint256\"}],\"name\":\"updateBatchStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_usdPerMEth\",\"type\":\"uint256\"}],\"name\":\"updateUsdPerMEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"primaryOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oddToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_EARLYSUPPORTERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"agTechWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondaryOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_batchStartTimes\",\"type\":\"uint256[]\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_usdPerMEth\",\"type\":\"uint256\"},{\"name\":\"_presaleWei\",\"type\":\"uint256\"},{\"name\":\"_whiteListed\",\"type\":\"address\"},{\"name\":\"_agTechWallet\",\"type\":\"address\"},{\"name\":\"_foundingTeamWallet\",\"type\":\"address\"},{\"name\":\"_earlySupportersWallet\",\"type\":\"address\"},{\"name\":\"_treasuryWallet\",\"type\":\"address\"},{\"name\":\"_presaleWallet\",\"type\":\"address\"},{\"name\":\"_tokenIssuer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenFoundingTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EarlySupporters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SencTokenSale","CompilerVersion":"v0.4.21-nightly.2018.3.1+commit.cf6720ea","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000005aa1ce7f00000000000000000000000000000000000000000000000000000000325ac71000000000000000000000000000000000000000000000019aad8314b9e0cfa000000000000000000000000000f4a26409f3f60f14e6e1c62ca4c2f4cbefa34084000000000000000000000000673743519efec90ea8d726a2c5699b1788c5d21f000000000000000000000000c444dc02a6035c66301f7f3841bb9773fcef0000000000000000000000000000a36dcd41cb4ccaa2dead395045f9c04572b6c4e5000000000000000000000000b9de51b5552c5edf892e5779030fe863cebc2b390000000000000000000000002a4fac8c82786c974d9f85b087e892c6975822dc000000000000000000000000e33fce835f2ca50a2b0fa59469bd12b7fdcd10df0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000005a9dda00000000000000000000000000000000000000000000000000000000005a9f2b80000000000000000000000000000000000000000000000000000000005aa07d00000000000000000000000000000000000000000000000000000000005aa125c0","Library":"","SwarmSource":"bzzr://2d13c6499ad03473cef8878cad8f33382c417d3e0726215c995b362f16e01aab"}]}