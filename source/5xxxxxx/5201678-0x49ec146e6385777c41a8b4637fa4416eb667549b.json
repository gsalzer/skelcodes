{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\ncontract MembranaDeals {\r\n  address public be = 0x873A2832898b17b5C12355769A7E2DAe6c2f92f7;\r\n  enum state { paid, verified, halted, finished}\r\n  enum currencyType { USDT, BTC, ETH}\r\n  struct Deal {\r\n    state  currentState;\r\n    uint  start;\r\n    uint  deadline;\r\n    uint  maxLoss;\r\n    uint  startBalance;\r\n    uint  targetBalance;\r\n    uint  amount;\r\n    currencyType  currency;\r\n    string  investor;\r\n    address  investorAddress;\r\n    string  trader;\r\n    address  traderAddress;\r\n  }\r\n  Deal[] public deals;\r\n  function MercatusDeals() public payable{\r\n    revert();\r\n  }\r\n  modifier onlyBe() {\r\n   require(msg.sender == be);\r\n   _;\r\n }\r\n  modifier inState(uint dealId, state s) {\r\n   require(deals[dealId].currentState == s);\r\n   _;\r\n }\r\n function getState(uint dealId) public constant returns (uint)  {\r\n   return uint(deals[dealId].currentState);\r\n }\r\n function getStart(uint dealId) public constant returns (uint)  {\r\n   return deals[dealId].start;\r\n }\r\n function setVerified(uint dealId) public  onlyBe inState(dealId, state.paid) {\r\n     deals[dealId].currentState = state.verified;\r\n}\r\n\r\n function setHalted(uint dealId) public  onlyBe {\r\n     require(deals[dealId].currentState == state.paid || deals[dealId].currentState == state.verified);\r\n     require(deals[dealId].amount != 0);\r\n     deals[dealId].amount = 0;\r\n     deals[dealId].traderAddress.transfer(deals[dealId].amount);\r\n     deals[dealId].currentState = state.halted;\r\n}\r\nfunction getSplit(uint finishAmount, uint startBalance, uint targetBalance, uint amount) public pure returns (uint) {\r\n    return ((finishAmount - startBalance) * amount) / ((targetBalance - startBalance) );\r\n}\r\n function setFinished(uint dealId, uint finishAmount) public  onlyBe inState(dealId, state.verified) {\r\n     require(deals[dealId].amount != 0);\r\n     deals[dealId].amount = 0;\r\n     if(finishAmount <= deals[dealId].startBalance){\r\n       deals[dealId].investorAddress.transfer(deals[dealId].amount);\r\n     }else if(finishAmount>deals[dealId].targetBalance){\r\n       deals[dealId].traderAddress.transfer(deals[dealId].amount);\r\n     }\r\n     else{\r\n        uint split = getSplit(finishAmount, deals[dealId].startBalance, deals[dealId].targetBalance, deals[dealId].amount);\r\n        deals[dealId].traderAddress.transfer(split);\r\n        deals[dealId].investorAddress.transfer(deals[dealId].amount - split);\r\n     }\r\n     deals[dealId].currentState = state.finished;\r\n}\r\n    function getDealsCount() public constant returns (uint){\r\n        return deals.length;\r\n    }\r\nfunction () external payable  {\r\n  revert();\r\n}\r\n    function makeDeal(uint _duration, uint _maxLoss, uint _startBalance, uint _targetBalance, uint _amount,  string _investor, address _investorAddress, string _trader, address _traderAddress, uint offer, uint _currency)\r\n    payable public {\r\n      require( _currency >= 0 &&  _currency < 3  );\r\n      require(msg.value == _amount);\r\n        deals.push(Deal({\r\n            currentState: state.paid,\r\n            start: now,\r\n            deadline: 0,\r\n            maxLoss: _maxLoss,\r\n            startBalance: _startBalance,\r\n            targetBalance: _targetBalance,\r\n            amount: _amount,\r\n            currency: currencyType(_currency),\r\n            investor: _investor,\r\n            investorAddress: _investorAddress,\r\n            trader: _trader,\r\n            traderAddress: _traderAddress\r\n          }));\r\n          deals[deals.length-1].deadline = now +  _duration * 86400;\r\n        spawnInstance(msg.sender,deals.length-1, now, offer);\r\n    }\r\n    event spawnInstance(address indexed from, uint indexed dealId, uint start, uint offer);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deals\",\"outputs\":[{\"name\":\"currentState\",\"type\":\"uint8\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\"},{\"name\":\"maxLoss\",\"type\":\"uint256\"},{\"name\":\"startBalance\",\"type\":\"uint256\"},{\"name\":\"targetBalance\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"currency\",\"type\":\"uint8\"},{\"name\":\"investor\",\"type\":\"string\"},{\"name\":\"investorAddress\",\"type\":\"address\"},{\"name\":\"trader\",\"type\":\"string\"},{\"name\":\"traderAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"setHalted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"MercatusDeals\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"setVerified\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dealId\",\"type\":\"uint256\"},{\"name\":\"finishAmount\",\"type\":\"uint256\"}],\"name\":\"setFinished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"be\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDealsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"getStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_maxLoss\",\"type\":\"uint256\"},{\"name\":\"_startBalance\",\"type\":\"uint256\"},{\"name\":\"_targetBalance\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_investor\",\"type\":\"string\"},{\"name\":\"_investorAddress\",\"type\":\"address\"},{\"name\":\"_trader\",\"type\":\"string\"},{\"name\":\"_traderAddress\",\"type\":\"address\"},{\"name\":\"offer\",\"type\":\"uint256\"},{\"name\":\"_currency\",\"type\":\"uint256\"}],\"name\":\"makeDeal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"finishAmount\",\"type\":\"uint256\"},{\"name\":\"startBalance\",\"type\":\"uint256\"},{\"name\":\"targetBalance\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSplit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"offer\",\"type\":\"uint256\"}],\"name\":\"spawnInstance\",\"type\":\"event\"}]","ContractName":"MembranaDeals","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://944dd7f006318b64bdc27cfce0c2ae0bc6c943702469dd301ac11d9641112fc9"}]}