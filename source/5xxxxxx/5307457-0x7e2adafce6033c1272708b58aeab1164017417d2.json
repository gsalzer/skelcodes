{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract CryptoflipCar {\r\n\r\naddress ownerAddress = 0x3177Abbe93422c9525652b5d4e1101a248A99776;\r\naddress foundTeamAddress = 0x30A38029bEd78159B0342FF9722C3B56479328D8;\r\n\r\nstruct WhaleCard {\r\n   address ownerAddress;\r\n   uint256 curPrice;\r\n}\r\n\r\nstruct Company {\r\nstring name;\r\naddress ownerAddress;\r\nuint256 curPrice;\r\nbool is_released;\r\n}\r\n\r\nstruct Make {\r\nstring name;\r\naddress ownerAddress;\r\nuint256 curPrice;\r\nuint256 companyId;\r\nbool is_released;\r\n}\r\n\r\nstruct Car {\r\nstring name;\r\naddress[] ownerAddresses;\r\nuint256 curPrice;\r\nuint256 companyId;\r\nuint256 makeId;\r\nbool is_released;\r\n}\r\n\r\nstruct Adv {\r\nstring text;\r\nstring link;\r\nuint256 card_type;  /* 0: company 1: makes 2: car*/\r\nuint256 curPrice;\r\naddress ownerAddress;\r\nuint256 cardId;\r\n}\r\n\r\nCompany[] companies;\r\nMake[] makes;\r\nCar[] cars;\r\nAdv[] advs;\r\nWhaleCard whalecard;\r\nmodifier onlyOwner() {\r\nrequire (msg.sender == ownerAddress);\r\n_;\r\n}\r\n\r\nbool companiesAreInitiated = false;\r\nbool makesAreInitiated = false;\r\nbool carsAreInitiated = false;\r\nbool whalecardAreInitiated = false;\r\nbool isPaused = false;\r\n\r\n/*\r\nWe use the following functions to pause and unpause the game.\r\n*/\r\nfunction pauseGame() public onlyOwner {\r\n  isPaused = true;\r\n}\r\n\r\nfunction playGame() public onlyOwner {\r\n  isPaused = false;\r\n}\r\n\r\nfunction GetIsPauded() public view returns(bool) {\r\n  return(isPaused);\r\n}\r\n\r\nfunction purchaseAdv(uint256 _cardType, uint256 _cardId, string _text, string _link) public payable {\r\n  require(msg.value >= advs[_advId].curPrice);\r\n  require(isPaused == false);\r\n  uint256 _advId;\r\n  bool is_adv = false;\r\n  for (uint i=0; i < advs.length; i++) {\r\n    if (advs[i].card_type == _cardType && advs[i].cardId == _cardId){\r\n        _advId = i;\r\n        is_adv = true;\r\n    }\r\n  }    \r\n  require(is_adv == true);\r\n  uint256 totalpercent = 160;\r\n\r\n  uint256 commission5percent = (msg.value * 5 / totalpercent);\r\n  foundTeamAddress.transfer(commission5percent);\r\n\r\n  uint256 commissionOwner = msg.value - commission5percent;\r\n    \r\n  if (advs[_advId].card_type == 0){\r\n    companies[advs[_advId].cardId].ownerAddress.transfer(commission5percent);\r\n    commissionOwner = commissionOwner - commission5percent;\r\n  } else if (advs[_advId].card_type == 1) {\r\n    makes[advs[_advId].cardId].ownerAddress.transfer(commission5percent);\r\n    commissionOwner = commissionOwner - commission5percent;\r\n  } else if (advs[_advId].card_type == 2) {\r\n    makes[advs[_advId].cardId].ownerAddress.transfer(commission5percent);\r\n    commissionOwner = commissionOwner - commission5percent;\r\n  }\r\n\r\n  advs[_advId].ownerAddress.transfer(commissionOwner);\r\n  advs[_advId].ownerAddress = msg.sender;\r\n  advs[_advId].curPrice = div(mul(advs[_advId].curPrice, totalpercent), 100);\r\n  advs[_advId].text = _text;\r\n  advs[_advId].link = _link;  \r\n}\r\n\r\nfunction purchaseWhaleCard() public payable {\r\n    require(msg.value >= whalecard.curPrice);\r\n    require(isPaused == false);\r\n    require(whalecardAreInitiated == true);\r\n    uint256 totalpercent = 155;\r\n    uint256 commission5percent = div(mul(msg.value, 5) , totalpercent);\r\n    foundTeamAddress.transfer(commission5percent);    \r\n    uint256 commissionOwner = msg.value - commission5percent;\r\n    whalecard.ownerAddress.transfer(commissionOwner);    \r\n    whalecard.ownerAddress = msg.sender;\r\n    whalecard.curPrice = div(mul(whalecard.curPrice, totalpercent), 100);\r\n}\r\n\r\nfunction purchaseCard(uint256 _cardType, uint256 _cardId) public payable {\r\n  require(isPaused == false);   \r\n  uint256 totalpercent = 150;\r\n  uint256 ownercount = 0;\r\n  if (_cardType == 0){\r\n      require(companies[_cardId].is_released == true);\r\n      require(msg.value >= companies[_cardId].curPrice);\r\n      totalpercent = totalpercent + 5;\r\n  } else if (_cardType == 1) {\r\n      require(makes[_cardId].is_released == true);\r\n      require(msg.value >= makes[_cardId].curPrice);      \r\n      totalpercent = totalpercent + 5 + 2;\r\n  } else if (_cardType == 2) {\r\n      require(cars[_cardId].is_released == true);\r\n      require(msg.value >= cars[_cardId].curPrice);            \r\n      uint256 len = cars[_cardId].ownerAddresses.length;\r\n      ownercount = 1;\r\n      if (cars[_cardId].ownerAddresses.length > 4){\r\n        ownercount = 3;\r\n      } else {\r\n        ownercount = len-1;\r\n      }\r\n      totalpercent = 150 + 5 + 2 + 2 + mul(ownercount, 2);\r\n  }\r\n\r\n  uint256 commissionOwner = msg.value;\r\n  uint256 commission1percent = div(mul(msg.value, 1) , totalpercent);  \r\n  if (whalecardAreInitiated == true){\r\n    totalpercent = totalpercent + 1;\r\n\r\n    whalecard.ownerAddress.transfer(commission1percent);\r\n    commissionOwner = commissionOwner - commission1percent;    \r\n  }\r\n  \r\n  uint256 commission5percent = mul(commission1percent, 5);\r\n  foundTeamAddress.transfer(commission5percent);\r\n\r\n  commissionOwner = commissionOwner - commission5percent;\r\n  uint256 commission2percent = mul(commission1percent, 2);\r\n\r\n  if (_cardType == 0){\r\n    companies[_cardId].ownerAddress.transfer(commissionOwner);\r\n    companies[_cardId].ownerAddress = msg.sender;\r\n    companies[_cardId].curPrice = div(mul(companies[_cardId].curPrice, totalpercent), 100);\r\n  } else if (_cardType == 1) {\r\n    uint256 companyId = makes[_cardId].companyId;\r\n    companies[companyId].ownerAddress.transfer(commission2percent);\r\n    commissionOwner = commissionOwner - commission5percent;\r\n    makes[_cardId].ownerAddress.transfer(commissionOwner);\r\n    makes[_cardId].ownerAddress = msg.sender;\r\n    makes[_cardId].curPrice = div(mul(makes[_cardId].curPrice, totalpercent), 100);\r\n  } else if (_cardType == 2){\r\n    companyId = makes[_cardId].companyId;\r\n    companies[companyId].ownerAddress.transfer(commission2percent);\r\n    commissionOwner = commissionOwner - commission2percent;\r\n    \r\n    uint256 makeId = cars[_cardId].makeId;\r\n\r\n    makes[makeId].ownerAddress.transfer(commission2percent);\r\n    commissionOwner = commissionOwner - commission2percent;\r\n\r\n    if (len > 1){\r\n        for (uint i=len-2; i>=0; i--) {\r\n            if (i > len-5){\r\n                cars[_cardId].ownerAddresses[i].transfer(commission2percent);\r\n                commissionOwner = commissionOwner - commission2percent;\r\n            }\r\n        }\r\n    }\r\n\r\n    cars[_cardId].ownerAddresses[len-1].transfer(commissionOwner);\r\n    cars[_cardId].ownerAddresses.push(msg.sender);\r\n    if (ownercount < 3) totalpercent = totalpercent + 2;\r\n    cars[_cardId].curPrice = div(mul(cars[_cardId].curPrice, totalpercent), 100);\r\n  }\r\n}\r\n\r\n// This function will return all of the details of our company\r\nfunction getCompanyCount() public view returns (uint) {\r\n  return companies.length;\r\n}\r\n\r\nfunction getMakeCount() public view returns (uint) {\r\n  return makes.length;\r\n}\r\n\r\nfunction getCarCount() public view returns (uint) {\r\n  return cars.length;\r\n}\r\n\r\nfunction getWhaleCard() public view returns (\r\naddress ownerAddress1,\r\nuint256 curPrice\r\n){\r\n    ownerAddress1 = whalecard.ownerAddress;\r\n    curPrice = whalecard.curPrice;    \r\n}\r\n\r\n// This function will return all of the details of our company\r\nfunction getCompany(uint256 _companyId) public view returns (\r\nstring name,\r\naddress ownerAddress1,\r\nuint256 curPrice,\r\nbool is_released,\r\nuint id\r\n) {\r\n  Company storage _company = companies[_companyId];\r\n  name = _company.name;\r\n  ownerAddress1 = _company.ownerAddress;\r\n  curPrice = _company.curPrice;\r\n  is_released = _company.is_released;\r\n  id = _companyId;\r\n}\r\n\r\nfunction getMake(uint _makeId) public view returns (\r\nstring name,\r\naddress ownerAddress1,\r\nuint256 curPrice,\r\nuint256 companyId,\r\nbool is_released,\r\nuint id\r\n) {\r\n  Make storage _make = makes[_makeId];\r\n  name = _make.name;\r\n  ownerAddress1 = _make.ownerAddress;\r\n  curPrice = _make.curPrice;\r\n  companyId = _make.companyId;\r\n  is_released = _make.is_released;\r\n  id = _makeId;\r\n}\r\n\r\nfunction getCar(uint _carId) public view returns (\r\nstring name,\r\naddress[] ownerAddresses,\r\nuint256 curPrice,\r\nuint256 companyId,\r\nuint256 makeId,\r\nbool is_released,\r\nuint id\r\n) {\r\n  Car storage _car = cars[_carId];\r\n  name = _car.name;\r\n  ownerAddresses = _car.ownerAddresses;\r\n  curPrice = _car.curPrice;\r\n  makeId = _car.makeId;\r\n  companyId = _car.companyId;\r\n  is_released = _car.is_released;\r\n  id = _carId;\r\n}\r\n\r\n\r\nfunction getAdv(uint _cardType, uint _cardId) public view returns (\r\nstring text,\r\nstring link,\r\nuint256 card_type,\r\naddress ownerAddress1,\r\nuint256 curPrice,\r\nuint256 cardId\r\n) {\r\n  Adv storage _adv = advs[0];\r\n  for (uint i=0; i < advs.length; i++) {\r\n    if (advs[i].card_type == _cardType && advs[i].cardId == _cardId){\r\n        _adv = advs[i];\r\n    }\r\n  }\r\n  text = _adv.text;\r\n  link = _adv.link;\r\n  ownerAddress1 = _adv.ownerAddress;\r\n  curPrice = _adv.curPrice;\r\n  cardId = _adv.cardId;\r\n  card_type = _adv.card_type;\r\n}\r\n\r\n/**\r\n@dev Multiplies two numbers, throws on overflow. => From the SafeMath library\r\n*/\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nuint256 c = a * b;\r\nreturn c;\r\n}\r\n\r\n/**\r\n@dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\r\n*/\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\nuint c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\nreturn c;\r\n}\r\n\r\n\r\n\r\nfunction InitiateCompanies() public onlyOwner {\r\n  require(companiesAreInitiated == false);\r\n  addCompany('Aston Martin',ownerAddress, 100000000000000000);\r\n  addCompany('BMW',ownerAddress, 100000000000000000);\r\n  addCompany('Ferrari',ownerAddress, 100000000000000000);\r\n  addCompany('Honda',ownerAddress, 100000000000000000);\r\n  companiesAreInitiated = true;\r\n}\r\n\r\nfunction addCompany(string name, address address1, uint256 price) public onlyOwner {\r\n  uint companyId = companies.length++;\r\n  companies[companyId].name = name;\r\n  companies[companyId].curPrice   = price;\r\n  companies[companyId].ownerAddress = address1;\r\n  companies[companyId].is_released   = true;\r\n\r\n  uint advId = advs.length++;\r\n  advs[advId].text = 'Your Ad here';\r\n  advs[advId].link = 'http://cryptoflipcars.site/';\r\n  advs[advId].curPrice   = 5000000000000000;\r\n  advs[advId].card_type   = 0;\r\n  advs[advId].ownerAddress = address1;\r\n  advs[advId].cardId = companyId;\r\n}\r\n\r\nfunction setReleaseCompany(uint256 _companyId, bool is_released) public onlyOwner {\r\n  companies[_companyId].is_released = is_released;\r\n}\r\n\r\nfunction InitiateMakes() public onlyOwner {\r\n  require(makesAreInitiated == false);\r\n  addMake('DB5',ownerAddress,0,10000000000000000);\r\n  addMake('DB6',ownerAddress,0,10000000000000000);\r\n  addMake('DB9',ownerAddress,0,10000000000000000);\r\n  addMake('One-77',ownerAddress,0,10000000000000000);\r\n  makesAreInitiated = true;\r\n}\r\n\r\nfunction addMake(string name, address address1, uint256 companyId, uint256 price) public onlyOwner {\r\n  uint makeId = makes.length++;\r\n  makes[makeId].name = name;\r\n  makes[makeId].curPrice   = price;\r\n  makes[makeId].ownerAddress = address1;\r\n  makes[makeId].companyId   = companyId;\r\n  makes[makeId].is_released   = true;\r\n\r\n  uint advId = advs.length++;\r\n  advs[advId].text = 'Your Ad here';\r\n  advs[advId].link = 'http://cryptoflipcars.site/';\r\n  advs[advId].curPrice   = 5000000000000000;\r\n  advs[advId].card_type   = 1;\r\n  advs[advId].ownerAddress = address1;\r\n  advs[advId].cardId = makeId;\r\n}\r\n\r\n\r\n\r\nfunction InitiateCars() public onlyOwner {\r\n  require(carsAreInitiated == false);\r\n  addCar('1964 DB5 James Bond Edition',ownerAddress, 0, 0, 5000000000000000);\r\n  addCar('Blue 1965 ',ownerAddress, 0, 0, 5000000000000000);\r\n  addCar('1964 DB5 James Bond Edition',ownerAddress,0,0,5000000000000000);\r\n  addCar('Blue 1965 ',ownerAddress,0,0,5000000000000000);\r\n  carsAreInitiated = true;\r\n}\r\n\r\nfunction InitiateWhaleCard() public onlyOwner {\r\n    require(whalecardAreInitiated == false);\r\n    whalecard.ownerAddress = ownerAddress;\r\n    whalecard.curPrice = 100000000000000000;\r\n    whalecardAreInitiated = true;\r\n}\r\n\r\nfunction addCar(string name, address address1, uint256 companyId, uint256 makeId, uint256 price ) public onlyOwner {\r\n  uint carId = cars.length++;\r\n  cars[carId].name = name;\r\n  cars[carId].curPrice   = price;\r\n  cars[carId].ownerAddresses.push(address1);\r\n  cars[carId].companyId   = companyId;\r\n  cars[carId].makeId   = makeId;\r\n  cars[carId].is_released   = true;\r\n\r\n  uint advId = advs.length++;\r\n  advs[advId].text = 'Your Ad here';\r\n  advs[advId].link = 'http://cryptoflipcars.site/';\r\n  advs[advId].curPrice   = 5000000000000000;\r\n  advs[advId].card_type   = 2;\r\n  advs[advId].ownerAddress = address1;\r\n  advs[advId].cardId = carId;\r\n}\r\n\r\nfunction setReleaseCar(uint256 _carId, bool is_released) public onlyOwner {\r\n  cars[_carId].is_released = is_released;\r\n}\r\n\r\nfunction setReleaseMake(uint256 _makeId, bool is_released) public onlyOwner {\r\n  makes[_makeId].is_released = is_released;\r\n}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCarCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"InitiateWhaleCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"InitiateCars\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_companyId\",\"type\":\"uint256\"}],\"name\":\"getCompany\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"ownerAddress1\",\"type\":\"address\"},{\"name\":\"curPrice\",\"type\":\"uint256\"},{\"name\":\"is_released\",\"type\":\"bool\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_carId\",\"type\":\"uint256\"}],\"name\":\"getCar\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"ownerAddresses\",\"type\":\"address[]\"},{\"name\":\"curPrice\",\"type\":\"uint256\"},{\"name\":\"companyId\",\"type\":\"uint256\"},{\"name\":\"makeId\",\"type\":\"uint256\"},{\"name\":\"is_released\",\"type\":\"bool\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"InitiateCompanies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardType\",\"type\":\"uint256\"},{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"purchaseCard\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"address1\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"addCompany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhaleCard\",\"outputs\":[{\"name\":\"ownerAddress1\",\"type\":\"address\"},{\"name\":\"curPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_makeId\",\"type\":\"uint256\"}],\"name\":\"getMake\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"ownerAddress1\",\"type\":\"address\"},{\"name\":\"curPrice\",\"type\":\"uint256\"},{\"name\":\"companyId\",\"type\":\"uint256\"},{\"name\":\"is_released\",\"type\":\"bool\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_makeId\",\"type\":\"uint256\"},{\"name\":\"is_released\",\"type\":\"bool\"}],\"name\":\"setReleaseMake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetIsPauded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardType\",\"type\":\"uint256\"},{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"getAdv\",\"outputs\":[{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"link\",\"type\":\"string\"},{\"name\":\"card_type\",\"type\":\"uint256\"},{\"name\":\"ownerAddress1\",\"type\":\"address\"},{\"name\":\"curPrice\",\"type\":\"uint256\"},{\"name\":\"cardId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_carId\",\"type\":\"uint256\"},{\"name\":\"is_released\",\"type\":\"bool\"}],\"name\":\"setReleaseCar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"playGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_companyId\",\"type\":\"uint256\"},{\"name\":\"is_released\",\"type\":\"bool\"}],\"name\":\"setReleaseCompany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMakeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardType\",\"type\":\"uint256\"},{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_text\",\"type\":\"string\"},{\"name\":\"_link\",\"type\":\"string\"}],\"name\":\"purchaseAdv\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"address1\",\"type\":\"address\"},{\"name\":\"companyId\",\"type\":\"uint256\"},{\"name\":\"makeId\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"addCar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCompanyCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"InitiateMakes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchaseWhaleCard\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"address1\",\"type\":\"address\"},{\"name\":\"companyId\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"addMake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CryptoflipCar","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://93098c05634a206a00b46974516aea01be5bc5d883d420a7c6ea22ef481244dc"}]}