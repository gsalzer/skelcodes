{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n//Announcement of an interface for recipient approving\r\ninterface tokenRecipient { \r\n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData)public; \r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract ShareXERC20 is Ownable{\r\n\t\r\n\t//===================public variables definition start==================\r\n    string public name;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Name of your Token\r\n    string public symbol;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Symbol of your Token\r\n    uint8 public decimals;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Decimals of your Token\r\n    uint256 public totalSupply;\t\t\t\t\t\t\t\t\t\t\t\t\t//Maximum amount of Token supplies\r\n\r\n    //define dictionaries of balance\r\n    mapping (address => uint256) public balanceOf;\t\t\t\t\t\t\t\t//Announce the dictionary of account's balance\r\n    mapping (address => mapping (address => uint256)) public allowance;\t\t\t//Announce the dictionary of account's available balance\r\n\t//===================public variables definition end==================\r\n\r\n\t\r\n\t//===================events definition start==================    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\t//Event on blockchain which notify client\r\n\t//===================events definition end==================\r\n\t\r\n\t\r\n\t//===================Contract Initialization Sequence Definition start===================\r\n    function ShareXERC20 () public {\r\n\t\tdecimals=8;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Assignment of Token's decimals\r\n\t\ttotalSupply = 1000000000 * 10 ** uint256(decimals);  \t\t\t\t//Assignment of Token's total supply with decimals\r\n        balanceOf[owner] = totalSupply;                \t\t\t\t\t\t//Assignment of Token's creator initial tokens\r\n        name = \"ShareX\";                                   \t\t\t\t\t//Set the name of Token\r\n        symbol = \"SEXC\";                               \t\t\t\t\t\t//Set the symbol of  Token\r\n        \r\n    }\r\n\t//===================Contract Initialization Sequence definition end===================\r\n\t\r\n\t//===================Contract behavior & funtions definition start===================\r\n\t\r\n\t/*\r\n\t*\tFuntion: Transfer funtions\r\n\t*\tType:Internal\r\n\t*\tParameters:\r\n\t\t\t@_from:\taddress of sender's account\r\n\t\t\t@_to:\taddress of recipient's account\r\n\t\t\t@_value:transaction amount\r\n\t*/\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n\t\t//Fault-tolerant processing\r\n\t\trequire(_to != 0x0);\t\t\t\t\t\t//\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n\r\n        //Execute transaction\r\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n\t\t\r\n\t\t//Verify transaction\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n        \r\n    }\r\n\t\r\n\t\r\n\t/*\r\n\t*\tFuntion: Transfer tokens\r\n\t*\tType:Public\r\n\t*\tParameters:\r\n\t\t\t@_to:\taddress of recipient's account\r\n\t\t\t@_value:transaction amount\r\n\t*/\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n\t\t\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\t\r\n\t\r\n\t/*\r\n\t*\tFuntion: Transfer tokens from other address\r\n\t*\tType:Public\r\n\t*\tParameters:\r\n\t\t\t@_from:\taddress of sender's account\r\n\t\t\t@_to:\taddress of recipient's account\r\n\t\t\t@_value:transaction amount\r\n\t*/\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public \r\n\treturns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     \t\t\t\t\t//Allowance verification\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n\t/*\r\n\t*\tFuntion: Approve usable amount for an account\r\n\t*\tType:Public\r\n\t*\tParameters:\r\n\t\t\t@_spender:\taddress of spender's account\r\n\t\t\t@_value:\tapprove amount\r\n\t*/\r\n    function approve(address _spender, uint256 _value) public \r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n        }\r\n\r\n\t/*\r\n\t*\tFuntion: Approve usable amount for other address and then notify the contract\r\n\t*\tType:Public\r\n\t*\tParameters:\r\n\t\t\t@_spender:\taddress of other account\r\n\t\t\t@_value:\tapprove amount\r\n\t\t\t@_extraData:additional information to send to the approved contract\r\n\t*/\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public \r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n    /*\r\n\t*\tFuntion: Transfer owner's authority and account balance\r\n\t*\tType:Public and onlyOwner\r\n\t*\tParameters:\r\n\t\t\t@newOwner:\taddress of newOwner\r\n\t*/\r\n    function transferOwnershipWithBalance(address newOwner) onlyOwner public{\r\n\t\tif (newOwner != address(0)) {\r\n\t\t    _transfer(owner,newOwner,balanceOf[owner]);\r\n\t\t    owner = newOwner;\r\n\t\t}\r\n\t}\r\n   //===================Contract behavior & funtions definition end===================\r\n}\r\n\r\n\r\n\r\ncontract ShareXTokenVault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    //Wallet Addresses for allocation\r\n    address public teamReserveWallet = 0x78e27c0347fa3afcc31e160b0fbc6f90186fd2b6;\r\n    address public firstReserveWallet = 0xef2ab7226c1a3d274caad2dec6d79a4db5d5799e;\r\n    \r\n    address public CEO = 0x2Fc7607CE5f6c36979CC63aFcDA6D62Df656e4aE;\r\n    address public COO = 0x08465f80A28E095DEE4BE0692AC1bA1A2E3EEeE9;\r\n    address public CTO = 0xB22E5Ac6C3a9427C48295806a34f7a3C0FD21443;\r\n    address public CMO = 0xf34C06cd907AD036b75cee40755b6937176f24c3;\r\n    address public CPO = 0xa33da3654d5fdaBC4Dd49fB4e6c81C58D28aA74a;\r\n    address public CEO_TEAM =0xc0e3294E567e965C3Ff3687015fCf88eD3CCC9EA;\r\n    address public AWD = 0xc0e3294E567e965C3Ff3687015fCf88eD3CCC9EA;\r\n    \r\n    uint256 public CEO_SHARE = 45;\r\n    uint256 public COO_SHARE = 12;\r\n    uint256 public CTO_SHARE = 9;\r\n    uint256 public CMO_SHARE = 9;\r\n    uint256 public CPO_SHARE = 9;\r\n    uint256 public CEO_TEAM_SHARE =6;\r\n    uint256 public AWD_SHARE =10;\r\n    \r\n    uint256 public DIV = 100;\r\n\r\n    //Token Allocations\r\n    uint256 public teamReserveAllocation = 16 * (10 ** 7) * (10 ** 8);\r\n    uint256 public firstReserveAllocation = 4 * (10 ** 7) * (10 ** 8);\r\n    \r\n\r\n    //Total Token Allocations\r\n    uint256 public totalAllocation = 2 * (10 ** 8) * (10 ** 8);\r\n\r\n    uint256 public teamVestingStages = 8;\r\n    //first unlocked Token \r\n    uint256 public firstTime =1531584000;  //2018-07-15 00:00:00\r\n    \r\n    //teamTimeLock\r\n    uint256 public teamTimeLock = 2 * 365 days;\r\n    //team unlocked over\r\n    uint256 public secondTime =firstTime.add(teamTimeLock);\r\n\r\n\r\n    /** Reserve allocations */\r\n    mapping(address => uint256) public allocations;\r\n\r\n    /** When timeLocks are over (UNIX Timestamp)  */  \r\n    mapping(address => uint256) public timeLocks;\r\n\r\n    /** How many tokens each reserve wallet has claimed */\r\n    mapping(address => uint256) public claimed;\r\n\r\n    /** When this vault was locked (UNIX Timestamp)*/\r\n    uint256 public lockedAt = 0;\r\n\r\n    ShareXERC20 public token;\r\n\r\n    /** Allocated reserve tokens */\r\n    event Allocated(address wallet, uint256 value);\r\n\r\n    /** Distributed reserved tokens */\r\n    event Distributed(address wallet, uint256 value);\r\n\r\n    /** Tokens have been locked */\r\n    event Locked(uint256 lockTime);\r\n\r\n    //Any of the two reserve wallets\r\n    modifier onlyReserveWallets {\r\n        require(allocations[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n    //Only ShareX team reserve wallet\r\n    modifier onlyTeamReserve {\r\n        require(msg.sender == teamReserveWallet);\r\n        require(allocations[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n    //Only first and second token reserve wallets\r\n    modifier onlyTokenReserve {\r\n        require(msg.sender == firstReserveWallet );\r\n        require(allocations[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n    //Has not been locked yet\r\n    modifier notLocked {\r\n        require(lockedAt == 0);\r\n        _;\r\n    }\r\n\r\n    modifier locked {\r\n        require(lockedAt > 0);\r\n        _;\r\n    }\r\n\r\n    //Token allocations have not been set\r\n    modifier notAllocated {\r\n        require(allocations[teamReserveWallet] == 0);\r\n        require(allocations[firstReserveWallet] == 0);\r\n        _;\r\n    }\r\n\r\n    function ShareXTokenVault(ERC20 _token) public {\r\n\r\n        owner = msg.sender;\r\n        token = ShareXERC20(_token);\r\n        \r\n    }\r\n\r\n    function allocate() public notLocked notAllocated onlyOwner {\r\n\r\n        //Makes sure Token Contract has the exact number of tokens\r\n        require(token.balanceOf(address(this)) == totalAllocation);\r\n        \r\n        allocations[teamReserveWallet] = teamReserveAllocation;\r\n        allocations[firstReserveWallet] = firstReserveAllocation;\r\n\r\n        Allocated(teamReserveWallet, teamReserveAllocation);\r\n        Allocated(firstReserveWallet, firstReserveAllocation);\r\n\r\n        lock();\r\n    }\r\n\r\n    //Lock the vault for the two wallets\r\n    function lock() internal notLocked onlyOwner {\r\n\r\n        lockedAt = block.timestamp;\r\n\r\n        // timeLocks[teamReserveWallet] = lockedAt.add(teamTimeLock);\r\n        timeLocks[teamReserveWallet] = secondTime;\r\n        \r\n        // timeLocks[firstReserveWallet] = lockedAt.add(firstReserveTimeLock);\r\n        timeLocks[firstReserveWallet] = firstTime;\r\n\r\n        Locked(lockedAt);\r\n    }\r\n\r\n    //In the case locking failed, then allow the owner to reclaim the tokens on the contract.\r\n    //Recover Tokens in case incorrect amount was sent to contract.\r\n    function recoverFailedLock() external notLocked notAllocated onlyOwner {\r\n\r\n        // Transfer all tokens on this contract back to the owner\r\n        require(token.transfer(owner, token.balanceOf(address(this))));\r\n    }\r\n\r\n    // Total number of tokens currently in the vault\r\n    function getTotalBalance() public view returns (uint256 tokensCurrentlyInVault) {\r\n\r\n        return token.balanceOf(address(this));\r\n\r\n    }\r\n\r\n    // Number of tokens that are still locked\r\n    function getLockedBalance() public view onlyReserveWallets returns (uint256 tokensLocked) {\r\n\r\n        return allocations[msg.sender].sub(claimed[msg.sender]);\r\n\r\n    }\r\n\r\n    //Claim tokens for first reserve wallets\r\n    function claimTokenReserve() onlyTokenReserve locked public {\r\n\r\n        address reserveWallet = msg.sender;\r\n\r\n        // Can't claim before Lock ends\r\n        require(block.timestamp > timeLocks[reserveWallet]);\r\n\r\n        // Must Only claim once\r\n        require(claimed[reserveWallet] == 0);\r\n\r\n        uint256 amount = allocations[reserveWallet];\r\n\r\n        claimed[reserveWallet] = amount;\r\n\r\n        require(token.transfer(CEO,amount.mul(CEO_SHARE).div(DIV)));\r\n        require(token.transfer(COO,amount.mul(COO_SHARE).div(DIV)));\r\n        require(token.transfer(CTO,amount.mul(CTO_SHARE).div(DIV)));\r\n        require(token.transfer(CMO,amount.mul(CMO_SHARE).div(DIV)));\r\n        require(token.transfer(CPO,amount.mul(CPO_SHARE).div(DIV)));\r\n        require(token.transfer(CEO_TEAM,amount.mul(CEO_TEAM_SHARE).div(DIV)));\r\n        require(token.transfer(AWD,amount.mul(AWD_SHARE).div(DIV)));\r\n\r\n        Distributed(CEO, amount.mul(CEO_SHARE).div(DIV));\r\n        Distributed(COO, amount.mul(COO_SHARE).div(DIV));\r\n        Distributed(CTO, amount.mul(CTO_SHARE).div(DIV));\r\n        Distributed(CMO, amount.mul(CMO_SHARE).div(DIV));\r\n        Distributed(CPO, amount.mul(CPO_SHARE).div(DIV));\r\n        Distributed(CEO_TEAM, amount.mul(CEO_TEAM_SHARE).div(DIV));\r\n        Distributed(AWD, amount.mul(AWD_SHARE).div(DIV));\r\n    }\r\n\r\n    //Claim tokens for ShareX team reserve wallet\r\n    function claimTeamReserve() onlyTeamReserve locked public {\r\n\r\n        uint256 vestingStage = teamVestingStage();\r\n\r\n        //Amount of tokens the team should have at this vesting stage\r\n        uint256 totalUnlocked = vestingStage.mul(allocations[teamReserveWallet]).div(teamVestingStages);\r\n\r\n        require(totalUnlocked <= allocations[teamReserveWallet]);\r\n\r\n        //Previously claimed tokens must be less than what is unlocked\r\n        require(claimed[teamReserveWallet] < totalUnlocked);\r\n\r\n        uint256 payment = totalUnlocked.sub(claimed[teamReserveWallet]);\r\n\r\n        claimed[teamReserveWallet] = totalUnlocked;\r\n\r\n        // require(token.transfer(teamReserveWallet, payment));\r\n        \r\n        require(token.transfer(AWD,payment));\r\n        \r\n        Distributed(AWD, payment);\r\n    }\r\n  \r\n    //Current Vesting stage for ShareX team \r\n    function teamVestingStage() public view onlyTeamReserve returns(uint256){\r\n        \r\n        // Every 3 months\r\n        uint256 vestingMonths = teamTimeLock.div(teamVestingStages); \r\n\r\n        // uint256 stage = (block.timestamp.sub(lockedAt)).div(vestingMonths);\r\n        uint256 stage  = (block.timestamp).sub(firstTime).div(vestingMonths);\r\n\r\n        //Ensures team vesting stage doesn't go past teamVestingStages\r\n        if(stage > teamVestingStages){\r\n            stage = teamVestingStages;\r\n        }\r\n\r\n        return stage;\r\n\r\n    }\r\n\r\n    // Checks if msg.sender can collect tokens\r\n    function canCollect() public view onlyReserveWallets returns(bool) {\r\n\r\n        return block.timestamp > timeLocks[msg.sender] && claimed[msg.sender] == 0;\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"name\":\"tokensCurrentlyInVault\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CMO_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLockedBalance\",\"outputs\":[{\"name\":\"tokensLocked\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CTO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CEO_TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTeamReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AWD\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CPO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CMO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstReserveAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CPO_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamVestingStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamVestingStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CTO_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeLocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COO_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokenReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CEO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AWD_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstReserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DIV\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCollect\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CEO_TEAM_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CEO_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recoverFailedLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Allocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ShareXTokenVault","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002567c677473d110d75a8360c35309e63b1d52429","Library":"","SwarmSource":"bzzr://3a1a1b66f2aca9633cc98054cbdbe0dfdc2b634f381ab55cbbc586fe311f9724"}]}