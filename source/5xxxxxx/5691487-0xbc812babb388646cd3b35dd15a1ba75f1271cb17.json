{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  // transfer ownership event\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Bitwords \r\n * \r\n * @dev The Bitwords smart contract that allows advertisers and publishers to\r\n * safetly deposit/receive ether and interact with the Bitwords platform.\r\n */ \r\ncontract Bitwords is Ownable {\r\n    mapping(address => uint) public advertiserBalances;\r\n    \r\n    // The bitwords address, where all the 30% cut is received ETH\r\n    address public bitwordsWithdrawlAddress = 0xe4eecf51618e1ec3c07837e8bee39f0a33d1eb2b;\r\n\r\n    // How much cut out of 100 Bitwords takes. By default 30%\r\n    uint public bitwordsCutOutof100 = 30;\r\n      \r\n    \r\n    function() public payable {\r\n        advertiserBalances[msg.sender] += msg.value;\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Used by the owner to set the withdrawal address.\r\n     */\r\n    function setBitwordsWithdrawlAddress (address newAddress) onlyOwner public {\r\n        bitwordsWithdrawlAddress = newAddress;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Change the cut that Bitwords takes.\r\n     * @param cut   the amount of cut that Bitwords takes.\r\n     */\r\n    function setBitwordsCut (uint cut) onlyOwner public {\r\n        require(cut <= 30, \"cut cannot be more than 30%\");\r\n        bitwordsCutOutof100 = cut;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Charge the advertiser with whatever clicks have been served by the ad engine.\r\n     * \r\n     * @param advertiser    The address of the advertiser from whom we should debit ether\r\n     * @param clicks        The number of clicks that has been served\r\n     * @param cpc           The cost-per-click\r\n     * @param publisher     The address of the publisher from whom we should credit ether\r\n     * \r\n     * TODO: have the advertiser's signature also involved.\r\n     */ \r\n    function chargeAdvertiser (address advertiser, uint clicks, uint cpc, address publisher) onlyOwner public {\r\n        uint cost = clicks * cpc;\r\n        \r\n        // Bail if the advertiser does not have enough balance.\r\n        if (advertiserBalances[advertiser] - cost <= 0) return;\r\n        \r\n        // Bail if bitwords takes more than a 30% cut.\r\n        if (bitwordsCutOutof100 > 30) return;\r\n        \r\n        advertiserBalances[advertiser] -= cost;\r\n        \r\n        uint publisherCut = cost * (100 - bitwordsCutOutof100) / 100;\r\n        uint bitwordsCut = cost - publisherCut;\r\n        \r\n        // Send the ether to the publisher and to Bitwords\r\n        publisher.transfer(publisherCut);\r\n        bitwordsWithdrawlAddress.transfer(bitwordsCut);\r\n        \r\n        // Emit events\r\n        emit PayoutToPublisher(publisher, publisherCut);\r\n        emit DeductFromAdvertiser(advertiser, cost);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Called by an advertiser when he/she would like to get a refund.\r\n     * \r\n     * @param amount    The amount the advertiser would like to withdraw\r\n     */\r\n    function refundAdveriser (uint amount) public {\r\n        // Ensure that the advertiser has enough balance to refund the smart \r\n        // contract\r\n        require(advertiserBalances[msg.sender] - amount >= 0, \"Insufficient balance\");\r\n        \r\n        // deduct balance and send the ether\r\n        advertiserBalances[msg.sender] -= amount;\r\n        msg.sender.transfer(amount);\r\n        \r\n        // Emit events\r\n        emit RefundAdvertiser(msg.sender, amount);\r\n    }\r\n    \r\n    /** Events */\r\n    event Deposit(address indexed _from, uint _value);\r\n    event DeductFromAdvertiser(address indexed _to, uint _value);\r\n    event PayoutToPublisher(address indexed _to, uint _value);\r\n    event RefundAdvertiser(address indexed _from, uint _value);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"advertiser\",\"type\":\"address\"},{\"name\":\"clicks\",\"type\":\"uint256\"},{\"name\":\"cpc\",\"type\":\"uint256\"},{\"name\":\"publisher\",\"type\":\"address\"}],\"name\":\"chargeAdvertiser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setBitwordsWithdrawlAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refundAdveriser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bitwordsWithdrawlAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bitwordsCutOutof100\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cut\",\"type\":\"uint256\"}],\"name\":\"setBitwordsCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"advertiserBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"DeductFromAdvertiser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"PayoutToPublisher\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"RefundAdvertiser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Bitwords","CompilerVersion":"v0.4.25-nightly.2018.5.28+commit.c223b03","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c12ebf11ac5502fdb0bf094d93b07d5326acb578b515e5210aeff31014c986ff"}]}