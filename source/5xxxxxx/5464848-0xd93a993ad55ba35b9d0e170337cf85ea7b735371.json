{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ERC223.sol\r\n\r\n/**\r\n * ERC20-compatible version of ERC223\r\n * https://github.com/Dexaran/ERC223-token-standard/tree/ERC20_compatible\r\n */\r\ncontract ERC223Basic is StandardToken {\r\n    function transfer(address to, uint value, bytes data) public;\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\n/**\r\n * Contract that is working with ERC223 tokens\r\n */\r\ncontract ERC223ReceivingContract {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n/**\r\n * ERC20-compatible version of ERC223\r\n * https://github.com/Dexaran/ERC223-token-standard/tree/ERC20_compatible\r\n */\r\ncontract ERC223BasicToken is ERC223Basic {\r\n    using SafeMath for uint;\r\n\r\n    /**\r\n     * @dev Fix for the ERC20 short address attack.\r\n     */\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    // Function that is called when a user or another contract wants to transfer funds .\r\n    function transfer(address to, uint value, bytes data) onlyPayloadSize(2 * 32) public {\r\n        // Standard function transfer similar to ERC20 transfer with no _data .\r\n        // Added due to backwards compatibility reasons .\r\n        uint codeLength;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(to)\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        if(codeLength > 0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(to);\r\n            receiver.tokenFallback(msg.sender, value, data);\r\n        }\r\n        Transfer(msg.sender, to, value);  // ERC20 transfer event\r\n        Transfer(msg.sender, to, value, data);  // ERC223 transfer event\r\n    }\r\n\r\n    // Standard function transfer similar to ERC20 transfer with no _data .\r\n    // Added due to backwards compatibility reasons .\r\n    function transfer(address to, uint256 value) onlyPayloadSize(2 * 32)  public returns (bool) {\r\n        uint codeLength;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(to)\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        if(codeLength > 0) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(to);\r\n            bytes memory empty;\r\n            receiver.tokenFallback(msg.sender, value, empty);\r\n        }\r\n        Transfer(msg.sender, to, value);  // ERC20 transfer event\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/DogRacingToken.sol\r\n\r\n/**\r\n * DogRacing Token\r\n */\r\ncontract DogRacingToken is ERC223BasicToken {\r\n  using SafeMath for uint256;\r\n\r\n  string constant public name = \"Dog Racing\";\r\n  string constant public symbol = \"DGR\";\r\n  uint8 constant public decimals = 3;\r\n  uint256 constant public totalSupply \t= 326250000 * 1000;\t// Supply is in the smallest units\r\n\r\n  address public owner;   // owner address\r\n\r\n  modifier onlyOwner {\r\n    require(owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  function DogRacingToken() public {\r\n    owner = msg.sender;\r\n    balances[owner] = totalSupply;   // All tokens are assigned to the owner\r\n  }\r\n\r\n  // Owner may burn own tokens\r\n  function burnTokens(uint256 amount) onlyOwner external {\r\n    balances[owner] = balances[owner].sub(amount);\r\n  }\r\n}\r\n\r\n// File: contracts/DogRacingCrowdsale.sol\r\n\r\n/**\r\n * DogRacing Crowdsale\r\n */\r\ncontract DogRacingCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  DogRacingToken public token;\t\t// Token contract address\r\n\r\n  uint256 public stage1_start;\t\t// Crowdsale timing\r\n  uint256 public stage2_start;\r\n  uint256 public stage3_start;\r\n  uint256 public stage4_start;\r\n  uint256 public crowdsale_end;\r\n\r\n  uint256 public stage1_price;\t\t// Prices in token millis / ETH\r\n  uint256 public stage2_price;\t\t\r\n  uint256 public stage3_price;\t\t\r\n  uint256 public stage4_price;\r\n\r\n  uint256 public hard_cap_wei;\t\t// Crowdsale hard cap in wei\r\n\r\n  address public owner;   \t\t\t// Owner address\r\n\r\n  uint256 public wei_raised;\t\t// Total Wei raised by crowdsale\r\n\r\n  event TokenPurchase(address buyer, uint256 weiAmount, uint256 tokensAmount);\r\n\r\n  modifier onlyOwner {\r\n    require(owner == msg.sender);\r\n   _;\r\n  }\r\n\r\n  modifier withinCrowdsaleTime {\r\n\trequire(now >= stage1_start && now < crowdsale_end);\r\n\t_;\r\n  }\r\n\r\n  modifier afterCrowdsale {\r\n\trequire(now >= crowdsale_end);\r\n\t_;\r\n  }\r\n\r\n  modifier withinCap {\r\n  \trequire(wei_raised < hard_cap_wei);\r\n\t_;\r\n  }\r\n\r\n  // Constructor\r\n  function DogRacingCrowdsale(DogRacingToken _token,\r\n  \t\t\t\t\t\t\t  uint256 _stage1_start, uint256 _stage2_start, uint256 _stage3_start, uint256 _stage4_start, uint256 _crowdsale_end,\r\n  \t\t\t\t\t\t\t  uint256 _stage1_price, uint256 _stage2_price, uint256 _stage3_price, uint256 _stage4_price,\r\n  \t\t\t\t\t\t\t  uint256 _hard_cap_wei) public {\r\n  \trequire(_stage1_start > now);\r\n  \trequire(_stage2_start > _stage1_start);\r\n  \trequire(_stage3_start > _stage2_start);\r\n  \trequire(_stage4_start > _stage3_start);\r\n  \trequire(_crowdsale_end > _stage4_start);\r\n  \trequire(_stage1_price > 0);\r\n  \trequire(_stage2_price < _stage1_price);\r\n  \trequire(_stage3_price < _stage2_price);\r\n  \trequire(_stage4_price < _stage3_price);\r\n  \trequire(_hard_cap_wei > 0);\r\n    require(_token != address(0));\r\n\r\n  \towner = msg.sender;\r\n\r\n  \ttoken = _token;\r\n\r\n  \tstage1_start = _stage1_start;\r\n  \tstage2_start = _stage2_start;\r\n  \tstage3_start = _stage3_start;\r\n  \tstage4_start = _stage4_start;\r\n  \tcrowdsale_end = _crowdsale_end;\r\n\r\n  \tstage1_price = _stage1_price;\r\n  \tstage2_price = _stage2_price;\r\n  \tstage3_price = _stage3_price;\r\n  \tstage4_price = _stage4_price;\r\n\r\n  \thard_cap_wei = _hard_cap_wei;\r\n  }\r\n\r\n  // get current price in token millis / ETH\r\n  function getCurrentPrice() public view withinCrowdsaleTime returns (uint256) {\r\n  \tif (now < stage2_start) {\r\n  \t\treturn stage1_price;\r\n  \t} else if (now < stage3_start) {\r\n  \t\treturn stage2_price;\r\n  \t} else if (now < stage4_start) {\r\n  \t\treturn stage3_price;\r\n  \t} else {\r\n  \t\treturn stage4_price;\r\n  \t}\r\n  }\r\n\r\n  // get amount in token millis for amount in wei\r\n  function getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n    uint256 price = getCurrentPrice();\r\n    return weiAmount.mul(price).div(1 ether);\r\n  }\r\n\r\n  // fallback function\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // tokens fallback function\r\n  function tokenFallback(address, uint256, bytes) external pure {\r\n  }\r\n\r\n  // tokens purchase\r\n  function buyTokens(address beneficiary) public withinCrowdsaleTime withinCap payable {\r\n   \tuint256 wei_amount = msg.value;\r\n    \r\n    require(beneficiary != address(0));\r\n    require(wei_amount != 0);\r\n \r\n    // calculate token amount to be sold\r\n    uint256 tokens = getTokenAmount(wei_amount);\r\n\r\n    // update state\r\n    wei_raised = wei_raised.add(wei_amount);\r\n    require(wei_raised <= hard_cap_wei);\r\n\r\n    // deliver tokens\r\n    token.transfer(beneficiary, tokens);\r\n\r\n    TokenPurchase(beneficiary, wei_amount, tokens);\r\n\r\n    // deliver ether\r\n    owner.transfer(msg.value);\r\n  }\r\n\r\n  // Remaining tokens withdrawal\r\n  function withdrawTokens() external onlyOwner afterCrowdsale {\r\n  \tuint256 tokens_remaining = token.balanceOf(address(this));\r\n  \ttoken.transfer(owner, tokens_remaining);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale_end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage3_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage2_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage2_start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wei_raised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage4_start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage1_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage4_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hard_cap_wei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage1_start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage3_start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_stage1_start\",\"type\":\"uint256\"},{\"name\":\"_stage2_start\",\"type\":\"uint256\"},{\"name\":\"_stage3_start\",\"type\":\"uint256\"},{\"name\":\"_stage4_start\",\"type\":\"uint256\"},{\"name\":\"_crowdsale_end\",\"type\":\"uint256\"},{\"name\":\"_stage1_price\",\"type\":\"uint256\"},{\"name\":\"_stage2_price\",\"type\":\"uint256\"},{\"name\":\"_stage3_price\",\"type\":\"uint256\"},{\"name\":\"_stage4_price\",\"type\":\"uint256\"},{\"name\":\"_hard_cap_wei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"DogRacingCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000079d94f11aad2dca6c7b4fc6cec8e0fb384eb5328000000000000000000000000000000000000000000000000000000005ad92d80000000000000000000000000000000000000000000000000000000005adfc500000000000000000000000000000000000000000000000000000000005aea5100000000000000000000000000000000000000000000000000000000005afb7480000000000000000000000000000000000000000000000000000000005b04af000000000000000000000000000000000000000000000000000000000001650e40000000000000000000000000000000000000000000000000000000000149970000000000000000000000000000000000000000000000000000000000012e1fc0000000000000000000000000000000000000000000000000000000000112a8800000000000000000000000000000000000000000000001ed4fde7a2236b00000","Library":"","SwarmSource":"bzzr://65ce398e4c6005df3db32a2f328093ea563e940b4c29e75af0ac54133a0c77dd"}]}