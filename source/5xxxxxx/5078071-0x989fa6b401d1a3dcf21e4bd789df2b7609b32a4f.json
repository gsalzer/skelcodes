{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract BbillerBallot is Ownable {\r\n    BbillerToken public token;\r\n    mapping(uint => Issue) public issues;\r\n\r\n    uint issueDoesNotExistFlag = 0;\r\n    uint issueVotingFlag = 1;\r\n    uint issueAcceptedFlag = 2;\r\n    uint issueRejectedFlag = 3;\r\n\r\n    struct Issue {\r\n        uint votingStartDate;\r\n        uint votingEndDate;\r\n        mapping(address => bool) isVoted;\r\n        uint forCounter;\r\n        uint againstCounter;\r\n        uint flag;\r\n    }\r\n\r\n    event CreateIssue(uint _issueId, uint _votingStartDate, uint _votingEndDate, address indexed creator);\r\n    event Vote(uint issueId, bool forVote, address indexed voter);\r\n    event IssueAccepted(uint issueId);\r\n    event IssueRejected(uint issueId);\r\n\r\n    function BbillerBallot(BbillerToken _token) public {\r\n        token = _token;\r\n    }\r\n\r\n    function createIssue(uint issueId, uint _votingStartDate, uint _votingEndDate) public onlyOwner {\r\n        require(issues[issueId].flag == issueDoesNotExistFlag);\r\n\r\n        Issue memory issue = Issue(\r\n            {votingEndDate : _votingEndDate,\r\n            votingStartDate : _votingStartDate,\r\n            forCounter : 0,\r\n            againstCounter : 0,\r\n            flag : issueVotingFlag});\r\n        issues[issueId] = issue;\r\n\r\n        CreateIssue(issueId, _votingStartDate, _votingEndDate, msg.sender);\r\n    }\r\n\r\n    function vote(uint issueId, bool forVote) public {\r\n        require(token.isTokenUser(msg.sender));\r\n\r\n        Issue storage issue = issues[issueId];\r\n        require(!issue.isVoted[msg.sender]);\r\n        require(issue.flag == issueVotingFlag);\r\n        require(issue.votingEndDate > now);\r\n        require(issue.votingStartDate < now);\r\n\r\n        issue.isVoted[msg.sender] = true;\r\n        if (forVote) {\r\n            issue.forCounter++;\r\n        }\r\n        else {\r\n            issue.againstCounter++;\r\n        }\r\n        Vote(issueId, forVote, msg.sender);\r\n\r\n        uint tokenUserCounterHalf = getTokenUserCounterHalf();\r\n        if (issue.forCounter >= tokenUserCounterHalf) {\r\n            issue.flag = issueAcceptedFlag;\r\n            IssueAccepted(issueId);\r\n        }\r\n        if (issue.againstCounter >= tokenUserCounterHalf) {\r\n            issue.flag = issueRejectedFlag;\r\n            IssueRejected(issueId);\r\n        }\r\n    }\r\n\r\n    function getVoteResult(uint issueId) public view returns (string) {\r\n        Issue storage issue = issues[issueId];\r\n        if (issue.flag == issueVotingFlag) {\r\n            return 'Voting';\r\n        }\r\n        if (issue.flag == issueAcceptedFlag) {\r\n            return 'Accepted';\r\n        }\r\n        if (issue.flag == issueRejectedFlag) {\r\n            return 'Rejected';\r\n        }\r\n        if (issue.flag == issueDoesNotExistFlag) {\r\n            return 'DoesNotExist';\r\n        }\r\n    }\r\n\r\n    function getTokenUserCounterHalf() internal returns (uint) {\r\n        // for division must be of uint type\r\n        uint half = 2;\r\n        uint tokenUserCounter = token.getTokenUserCounter();\r\n        uint tokenUserCounterHalf = tokenUserCounter / half;\r\n        if (tokenUserCounterHalf * half != tokenUserCounter) {\r\n            // odd case\r\n            tokenUserCounterHalf++;\r\n        }\r\n        return tokenUserCounterHalf;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed _to, uint256 _amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract BbillerToken is MintableToken {\r\n    string public symbol = 'BBILLER';\r\n    uint public decimals = 18;\r\n    uint public tokenUserCounter;  // number of users that owns this token\r\n\r\n    mapping(address => bool) public isTokenUser;\r\n\r\n    event CountTokenUser(address _tokenUser, uint _tokenUserCounter, bool increment);\r\n\r\n    function getTokenUserCounter() public view returns (uint) {\r\n        return tokenUserCounter;\r\n    }\r\n\r\n    function countTokenUser(address tokenUser) internal {\r\n        if (!isTokenUser[tokenUser]) {\r\n            isTokenUser[tokenUser] = true;\r\n            tokenUserCounter++;\r\n        }\r\n        CountTokenUser(tokenUser, tokenUserCounter, true);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        bool res = super.transfer(to, value);\r\n        countTokenUser(to);\r\n        return res;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        bool res = super.transferFrom(from, to, value);\r\n        countTokenUser(to);\r\n        if (balanceOf(from) <= 0) {\r\n            isTokenUser[from] = false;\r\n            tokenUserCounter--;\r\n            CountTokenUser(from, tokenUserCounter, false);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        bool res = super.mint(_to, _amount);\r\n        countTokenUser(_to);\r\n        return res;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"issues\",\"outputs\":[{\"name\":\"votingStartDate\",\"type\":\"uint256\"},{\"name\":\"votingEndDate\",\"type\":\"uint256\"},{\"name\":\"forCounter\",\"type\":\"uint256\"},{\"name\":\"againstCounter\",\"type\":\"uint256\"},{\"name\":\"flag\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"issueId\",\"type\":\"uint256\"},{\"name\":\"_votingStartDate\",\"type\":\"uint256\"},{\"name\":\"_votingEndDate\",\"type\":\"uint256\"}],\"name\":\"createIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"issueId\",\"type\":\"uint256\"}],\"name\":\"getVoteResult\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"issueId\",\"type\":\"uint256\"},{\"name\":\"forVote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_issueId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_votingStartDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_votingEndDate\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreateIssue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"issueId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"forVote\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"issueId\",\"type\":\"uint256\"}],\"name\":\"IssueAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"issueId\",\"type\":\"uint256\"}],\"name\":\"IssueRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BbillerBallot","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005cc61caad7db681207325c504104b080e8963da9","Library":"","SwarmSource":"bzzr://ad6ca21c470e1ee1760fc502fa8f4573d772cdf4a4d0875d37e0064ad8989922"}]}