{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n    * @dev Math operations with safety checks that throw on error\r\n       */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n    * @dev The Ownable contract has an owner address, and provides basic authorization control \r\n       * functions, this simplifies the implementation of \"user permissions\". \r\n          */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n        * account.\r\n             */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n        */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n        * @param newOwner The address to transfer ownership to. \r\n             */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n    *\r\n      * @dev Implementation of the basic standard token.\r\n         * @dev https://github.com/ethereum/EIPs/issues/20\r\n            * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n               */\r\ncontract StandardToken {\r\n  using SafeMath for uint256;\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n  mapping(address => uint256) balances;\r\n  mapping(address => bool) preICO_address;\r\n  uint256 public totalSupply;\r\n  uint256 public endDate;\r\n  /**\r\n  * @dev transfer token for a specified address\r\n      * @param _to The address to transfer to.\r\n          * @param _value The amount to be transferred.\r\n              */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n\r\n    if( preICO_address[msg.sender] ) require( now > endDate + 120 days ); //Lock coin\r\n    else require( now > endDate ); //Lock coin\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n      * @param _owner The address to query the the balance of. \r\n          * @return An uint256 representing the amount owned by the passed address.\r\n              */\r\n  function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n        * @param _from address The address which you want to send tokens from\r\n             * @param _to address The address which you want to transfer to\r\n                  * @param _value uint256 the amout of tokens to be transfered\r\n                       */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    if( preICO_address[_from] ) require( now > endDate + 120 days ); //Lock coin\r\n    else require( now > endDate ); //Lock coin\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n        * @param _spender The address which will spend the funds.\r\n             * @param _value The amount of tokens to be spent.\r\n                  */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    if( preICO_address[msg.sender] ) require( now > endDate + 120 days ); //Lock coin\r\n    else require( now > endDate ); //Lock coin\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n        * @param _owner address The address which owns the funds.\r\n             * @param _spender address The address which will spend the funds.\r\n                  * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n                       */\r\n  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract TBCoin is StandardToken, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // Token Info.\r\n    string  public constant name = \"TimeBox Coin\";\r\n    string  public constant symbol = \"TB\";\r\n    uint8   public constant decimals = 18;\r\n\r\n    // Sale period.\r\n    uint256 public startDate;\r\n    // uint256 public endDate;\r\n\r\n    // Token Cap for each rounds\r\n    uint256 public saleCap;\r\n\r\n    // Address where funds are collected.\r\n    address public wallet;\r\n\r\n    // Amount of raised money in wei.\r\n    uint256 public weiRaised;\r\n\r\n    // Event\r\n    event TokenPurchase(address indexed purchaser, uint256 value,\r\n                        uint256 amount);\r\n    event PreICOTokenPushed(address indexed buyer, uint256 amount);\r\n\r\n    // Modifiers\r\n    modifier uninitialized() {\r\n        require(wallet == 0x0);\r\n        _;\r\n    }\r\n\r\n    function TBCoin() public{\r\n    }\r\n// \r\n    function initialize(address _wallet, uint256 _start, uint256 _end,\r\n                        uint256 _saleCap, uint256 _totalSupply)\r\n                        public onlyOwner uninitialized {\r\n        require(_start >= getCurrentTimestamp());\r\n        require(_start < _end);\r\n        require(_wallet != 0x0);\r\n        require(_totalSupply > _saleCap);\r\n\r\n        startDate = _start;\r\n        endDate = _end;\r\n        saleCap = _saleCap;\r\n        wallet = _wallet;\r\n        totalSupply = _totalSupply;\r\n\r\n        balances[wallet] = _totalSupply.sub(saleCap);\r\n        balances[0xb1] = saleCap;\r\n    }\r\n\r\n    function supply() internal view returns (uint256) {\r\n        return balances[0xb1];\r\n    }\r\n\r\n    function getCurrentTimestamp() internal view returns (uint256) {\r\n        return now;\r\n    }\r\n\r\n    function getRateAt(uint256 at) public constant returns (uint256) {\r\n        if (at < startDate) {\r\n            return 0;\r\n        } else if (at < (startDate + 3 days)) {\r\n            return 1500;\r\n        } else if (at < (startDate + 9 days)) {\r\n            return 1440;\r\n        } else if (at < (startDate + 15 days)) {\r\n            return 1380;\r\n        } else if (at < (startDate + 21 days)) {\r\n            return 1320;\r\n        } else if (at < (startDate + 27 days)) {\r\n            return 1260;\r\n        } else if (at <= endDate) {\r\n            return 1200;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // Fallback function can be used to buy tokens\r\n    function () public payable {\r\n        buyTokens(msg.sender, msg.value);\r\n    }\r\n\r\n    // For pushing pre-ICO records\r\n    function push(address buyer, uint256 amount) public onlyOwner { //b753a98c\r\n        require(balances[wallet] >= amount);\r\n        require(now < startDate);\r\n        require(buyer != wallet);\r\n\r\n        preICO_address[ buyer ] = true;\r\n\r\n        // Transfer\r\n        balances[wallet] = balances[wallet].sub(amount);\r\n        balances[buyer] = balances[buyer].add(amount);\r\n        PreICOTokenPushed(buyer, amount);\r\n    }\r\n\r\n    function buyTokens(address sender, uint256 value) internal {\r\n        require(saleActive());\r\n\r\n        uint256 weiAmount = value;\r\n        uint256 updatedWeiRaised = weiRaised.add(weiAmount);\r\n\r\n        // Calculate token amount to be purchased\r\n        uint256 actualRate = getRateAt(getCurrentTimestamp());\r\n        uint256 amount = weiAmount.mul(actualRate);\r\n\r\n        // We have enough token to sale\r\n        require(supply() >= amount);\r\n\r\n        // Transfer\r\n        balances[0xb1] = balances[0xb1].sub(amount);\r\n        balances[sender] = balances[sender].add(amount);\r\n        TokenPurchase(sender, weiAmount, amount);\r\n\r\n        // Update state.\r\n        weiRaised = updatedWeiRaised;\r\n\r\n        // Forward the fund to fund collection wallet.\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    function finalize() public onlyOwner {\r\n        require(!saleActive());\r\n\r\n        // Transfer the rest of token to TB team\r\n        balances[wallet] = balances[wallet].add(balances[0xb1]);\r\n        balances[0xb1] = 0;\r\n    }\r\n\r\n    function saleActive() public constant returns (bool) {\r\n        return (getCurrentTimestamp() >= startDate &&\r\n                getCurrentTimestamp() < endDate && supply() > 0);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"getRateAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"},{\"name\":\"_saleCap\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PreICOTokenPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TBCoin","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f220a709b73f5992a3619a8fcde07ddfbb249be82f6f439cd7760377160dfb02"}]}