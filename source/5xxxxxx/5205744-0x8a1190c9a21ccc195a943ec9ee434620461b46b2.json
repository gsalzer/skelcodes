{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract HeroAccessControl {\r\n    event ContractUpgrade(address newContract);\r\n    address public leaderAddress;\r\n    address public opmAddress;\r\n    \r\n    bool public paused = false;\r\n\r\n    modifier onlyLeader() {\r\n        require(msg.sender == leaderAddress);\r\n        _;\r\n    }\r\n    modifier onlyOPM() {\r\n        require(msg.sender == opmAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMLevel() {\r\n        require(\r\n            msg.sender == opmAddress ||\r\n            msg.sender == leaderAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setLeader(address _newLeader) public onlyLeader {\r\n        require(_newLeader != address(0));\r\n        leaderAddress = _newLeader;\r\n    }\r\n\r\n    function setOPM(address _newOPM) public onlyLeader {\r\n        require(_newOPM != address(0));\r\n        opmAddress = _newOPM;\r\n    }\r\n\r\n    function withdrawBalance() external onlyLeader {\r\n        leaderAddress.transfer(this.balance);\r\n    }\r\n\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyMLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() public onlyLeader whenPaused {\r\n        paused = false;\r\n    }\r\n    \r\n    \r\n}\r\n\r\n\r\ncontract ERC20{\r\n\r\nbool public isERC20 = true;\r\n\r\nfunction balanceOf(address who) constant returns (uint256);\r\n\r\nfunction transfer(address _to, uint256 _value) returns (bool);\r\n\r\nfunction transferFrom(address _from, address _to, uint256 _value) returns (bool);\r\n\r\nfunction approve(address _spender, uint256 _value) returns (bool);\r\n\r\nfunction allowance(address _owner, address _spender) constant returns (uint256);\r\n\r\n}\r\n\r\n\r\ncontract HeroLedger is HeroAccessControl{\r\n    ERC20 public erc20;\r\n    \r\n    mapping (address => uint256) public ownerIndexToERC20Balance;  \r\n    mapping (address => uint256) public ownerIndexToERC20Used;  \r\n    uint256 public totalBalance;\r\n    uint256 public totalUsed;\r\n    \r\n    uint256 public totalPromo;\r\n    uint256 public candy;\r\n        \r\n    function setERC20Address(address _address,uint256 _totalPromo,uint256 _candy) public onlyLeader {\r\n        ERC20 candidateContract = ERC20(_address);\r\n        require(candidateContract.isERC20());\r\n        erc20 = candidateContract; \r\n        uint256 realTotal = erc20.balanceOf(this); \r\n        require(realTotal >= _totalPromo);\r\n        totalPromo=_totalPromo;\r\n        candy=_candy;\r\n    }\r\n    \r\n    function setERC20TotalPromo(uint256 _totalPromo,uint256 _candy) public onlyLeader {\r\n        uint256 realTotal = erc20.balanceOf(this);\r\n        totalPromo +=_totalPromo;\r\n        require(realTotal - totalBalance >= totalPromo); \r\n        \r\n        candy=_candy;\r\n    }\r\n \r\n    function charge(uint256 amount) public {\r\n    \t\tif(erc20.transferFrom(msg.sender, this, amount)){\r\n    \t\t\t\townerIndexToERC20Balance[msg.sender] += amount;\r\n    \t\t\t\ttotalBalance +=amount;\r\n    \t\t}\r\n    }\t\r\n\t\t\r\n\t\tfunction collect(uint256 amount) public {\r\n\t\t\t\trequire(ownerIndexToERC20Balance[msg.sender] >= amount);\r\n    \t\tif(erc20.transfer(msg.sender, amount)){\r\n    \t\t\t\townerIndexToERC20Balance[msg.sender] -= amount;\r\n    \t\t\t\ttotalBalance -=amount;\r\n    \t\t}\r\n    }\r\n    \r\n    function withdrawERC20Balance(uint256 amount) external onlyLeader {\r\n        uint256 realTotal = erc20.balanceOf(this);\r\n     \t\trequire((realTotal -  (totalPromo  + totalBalance- totalUsed ) )  >=amount);\r\n        erc20.transfer(leaderAddress, amount);\r\n        totalBalance -=amount;\r\n        totalUsed -=amount;\r\n    }\r\n    \r\n    \r\n    function withdrawOtherERC20Balance(uint256 amount, address _address) external onlyLeader {\r\n    \t\trequire(_address != address(erc20));\r\n    \t\trequire(_address != address(this));\r\n        ERC20 candidateContract = ERC20(_address);\r\n        uint256 realTotal = candidateContract.balanceOf(this);\r\n        require( realTotal >= amount );\r\n        candidateContract.transfer(leaderAddress, amount);\r\n    }\r\n    \r\n\r\n}\r\n\r\ncontract HeroBase is  HeroLedger{\r\n    event Recruitment(address indexed owner, uint256 heroId, uint256 yinId, uint256 yangId, uint256 talent);\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event ItmesChange(uint256 indexed tokenId, uint256 items);\r\n    \r\n    address public magicStore;\r\n\r\n    struct Hero {\r\n        uint256 talent;\r\n        uint64 recruitmentTime;\r\n        uint64 cooldownEndTime;\r\n        uint32 yinId;\r\n        uint32 yangId;\r\n        uint16 cooldownIndex;\r\n        uint16 generation;        \r\n        uint256 belongings;       \r\n        uint32 items;\r\n    }    \r\n    \r\n    uint32[14] public cooldowns = [\r\n    \r\n        uint32(1 minutes),\r\n        uint32(2 minutes),\r\n        uint32(5 minutes),\r\n        uint32(10 minutes),\r\n        uint32(30 minutes),\r\n        uint32(1 hours),\r\n        uint32(2 hours),\r\n        uint32(4 hours),\r\n        uint32(8 hours),\r\n        uint32(16 hours),\r\n        uint32(1 days),\r\n        uint32(2 days),\r\n        uint32(4 days),\r\n        uint32(7 days)\r\n    ];\r\n        \r\n    uint128 public cdFee = 118102796674000; \r\n\r\n    Hero[] heroes;\r\n    mapping (uint256 => address) public heroIndexToOwner;\r\n    mapping (address => uint256) ownershipTokenCount;\r\n\r\n    mapping (uint256 => address) public heroIndexToApproved;   \r\n    mapping (uint256 => uint32) public heroIndexToWin;   \r\n    mapping (uint256 => uint32) public heroIndexToLoss;\r\n  \r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        ownershipTokenCount[_to]++;\r\n        heroIndexToOwner[_tokenId] = _to;\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            delete heroIndexToApproved[_tokenId];\r\n        }\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _createHero(\r\n        uint256 _yinId,\r\n        uint256 _yangId,\r\n        uint256 _generation,\r\n        uint256 _talent,\r\n        address _owner\r\n\t)\r\n        internal\r\n        returns (uint)\r\n    {\r\n        require(_generation <= 65535);\r\n       \r\n        \r\n        uint16 _cooldownIndex = uint16(_generation/2);\r\n        if(_cooldownIndex > 13){\r\n        \t_cooldownIndex =13;\r\n        }   \r\n        Hero memory _hero = Hero({\r\n            talent: _talent,\r\n            recruitmentTime: uint64(now),\r\n            cooldownEndTime: 0,\r\n            yinId: uint32(_yinId),\r\n            yangId: uint32(_yangId),\r\n            cooldownIndex: _cooldownIndex,\r\n            generation: uint16(_generation),\r\n            belongings: _talent,\r\n            items: uint32(0)\r\n        });\r\n        uint256 newHeroId = heroes.push(_hero) - 1;\r\n        require(newHeroId <= 4294967295);\r\n        Recruitment(\r\n            _owner,\r\n            newHeroId,\r\n            uint256(_hero.yinId),\r\n            uint256(_hero.yangId),\r\n            _hero.talent\r\n        );\r\n        _transfer(0, _owner, newHeroId);\r\n\r\n        return newHeroId;\r\n    } \r\n    \r\n    function setMagicStore(address _address) public onlyOPM{\r\n       magicStore = _address;\r\n    }\r\n \r\n}\r\n\r\ncontract ERC721 {\r\n    function implementsERC721() public pure returns (bool);\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n}\r\n\r\ncontract HeroOwnership is HeroBase, ERC721 {\r\n\r\n    string public name = \"MyHero\";\r\n    string public symbol = \"MH\";\r\n\r\n    function implementsERC721() public pure returns (bool)\r\n    {\r\n        return true;\r\n    }\r\n    \r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return heroIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return heroIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        heroIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    function rescueLostHero(uint256 _heroId, address _recipient) public onlyOPM whenNotPaused {\r\n        require(_owns(this, _heroId));\r\n        _transfer(this, _recipient, _heroId);\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n    {\r\n        require(_to != address(0));\r\n        require(_owns(msg.sender, _tokenId));\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function approve(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _tokenId));\r\n        _approve(_tokenId, _to);\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n    {\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return heroes.length - 1;\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (address owner)\r\n    {\r\n        owner = heroIndexToOwner[_tokenId];\r\n\r\n        require(owner != address(0));\r\n    }\r\n\r\n    function tokensOfOwnerByIndex(address _owner, uint256 _index)\r\n        external\r\n        view\r\n        returns (uint256 tokenId)\r\n    {\r\n        uint256 count = 0;\r\n        for (uint256 i = 1; i <= totalSupply(); i++) {\r\n            if (heroIndexToOwner[i] == _owner) {\r\n                if (count == _index) {\r\n                    return i;\r\n                } else {\r\n                    count++;\r\n                }\r\n            }\r\n        }\r\n        revert();\r\n    }\r\n\r\n}\r\n\r\ncontract MasterRecruitmentInterface {\r\n    function isMasterRecruitment() public pure returns (bool);   \r\n    function fightMix(uint256 belongings1, uint256 belongings2) public returns (bool,uint256,uint256,uint256);    \r\n}\r\n\r\n\r\ncontract HeroFighting is HeroOwnership {\r\n  \r\n    MasterRecruitmentInterface public masterRecruitment;\r\n    function setMasterRecruitmentAddress(address _address) public onlyLeader {\r\n        MasterRecruitmentInterface candidateContract = MasterRecruitmentInterface(_address);\r\n        require(candidateContract.isMasterRecruitment());\r\n        masterRecruitment = candidateContract;\r\n    }\r\n\r\n    function _triggerCooldown(Hero storage _newHero) internal {\r\n        _newHero.cooldownEndTime = uint64(now + cooldowns[_newHero.cooldownIndex]);\r\n        if (_newHero.cooldownIndex < 13) {\r\n            _newHero.cooldownIndex += 1;\r\n        }\r\n    }\r\n\r\n    function isReadyToFight(uint256 _heroId)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(_heroId > 0);\r\n\t      Hero memory hero = heroes[_heroId];\r\n        return (hero.cooldownEndTime <= now);\r\n    }\r\n\r\n    function _fight(uint32 _yinId, uint32 _yangId)\r\n        internal \r\n        whenNotPaused\r\n        returns(uint256)\r\n    {\r\n        Hero storage yin = heroes[_yinId];\r\n        require(yin.recruitmentTime != 0);\r\n        Hero storage yang = heroes[_yangId];\r\n        uint16 parentGen = yin.generation;\r\n        if (yang.generation > yin.generation) {\r\n            parentGen = yang.generation;\r\n        }        \r\n        var (flag, childTalent, belongings1,  belongings2) = masterRecruitment.fightMix(yin.belongings,yang.belongings);\r\n        yin.belongings = belongings1;\r\n        yang.belongings = belongings2;                \r\n\t      if(!flag){      \r\n           (_yinId,_yangId) = (_yangId,_yinId);\r\n        }    \r\n        address owner = heroIndexToOwner[_yinId];\r\n        heroIndexToWin[_yinId] +=1;\r\n        heroIndexToLoss[_yangId] +=1;\r\n        uint256 newHeroId = _createHero(_yinId, _yangId, parentGen + 1, childTalent, owner); \r\n        _triggerCooldown(yang);\r\n        _triggerCooldown(yin);\r\n        return (newHeroId );\r\n    }\r\n    \r\n    \r\n   \r\n    \r\n     function reduceCDFee(uint256 heroId) \r\n         public \r\n         view \r\n         returns (uint256 fee)\r\n    {\r\n    \t\tHero memory hero = heroes[heroId];\r\n    \t\trequire(hero.cooldownEndTime > now);\r\n    \t\tuint64 cdTime = uint64(hero.cooldownEndTime-now);\r\n    \t\tfee= uint256(cdTime * cdFee * (hero.cooldownIndex+1));\r\n    \t\t\r\n    }\r\n    \r\n    \r\n    \r\n}\r\n\r\n\r\ncontract ClockAuction {\r\n    //bool public isClockAuction = true;\r\n    \r\n    function withdrawBalance() external ;\r\n      \r\n    function order(uint256 _tokenId, uint256 orderAmount ,address buyer)\r\n        public  returns (bool);\r\n    \r\n     function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _startingPriceEth,\r\n        uint256 _endingPriceEth,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n        public;\r\n    \r\n    function getSeller(uint256 _tokenId)\r\n        public\r\n        returns\r\n    (\r\n        address seller\r\n    ); \r\n    \r\n     function getCurrentPrice(uint256 _tokenId, uint8 ccy)\r\n        public\r\n        view\r\n        returns (uint256);\r\n        \r\n}\r\n\r\ncontract FightClockAuction is ClockAuction {\r\n    bool public isFightClockAuction = true;\r\n}\r\n\r\ncontract SaleClockAuction is ClockAuction {\r\n    bool public isSaleClockAuction = true;\r\n    function averageGen0SalePrice() public view returns (uint256);\r\n}\r\n\r\ncontract HeroAuction is HeroFighting {\r\n\r\n\t\tSaleClockAuction public saleAuction;\r\n    FightClockAuction public fightAuction;\r\n    uint256 public ownerCut =500;    \r\n    \r\n    function setSaleAuctionAddress(address _address) public onlyLeader {\r\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\r\n        require(candidateContract.isSaleClockAuction());\r\n        saleAuction = candidateContract;\r\n    }\r\n\r\n    function setFightAuctionAddress(address _address) public onlyLeader {\r\n        FightClockAuction candidateContract = FightClockAuction(_address);\r\n        require(candidateContract.isFightClockAuction());\r\n        fightAuction = candidateContract;\r\n    }\r\n    \r\n\r\n    function createSaleAuction(\r\n        uint256 _heroId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _startingPriceEth,\r\n        uint256 _endingPriceEth,\r\n        uint256 _duration\r\n    )\r\n        public\r\n    {\r\n        require(_owns(msg.sender, _heroId));\r\n        _approve(_heroId, saleAuction);\r\n        saleAuction.createAuction(\r\n            _heroId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _startingPriceEth,\r\n            _endingPriceEth,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n    \r\n    function orderOnSaleAuction(\r\n        uint256 _heroId,\r\n        uint256 orderAmount\r\n    )\r\n        public\r\n    {\r\n        require(ownerIndexToERC20Balance[msg.sender] >= orderAmount); \r\n        address saller = saleAuction.getSeller(_heroId);\r\n        uint256 price = saleAuction.getCurrentPrice(_heroId,1);\r\n        require( price <= orderAmount && saller != address(0));\r\n       \r\n        if(saleAuction.order(_heroId, orderAmount, msg.sender)  &&orderAmount >0 ){\r\n         \r\n\t          ownerIndexToERC20Balance[msg.sender] -= orderAmount;\r\n\t    \t\t  ownerIndexToERC20Used[msg.sender] += orderAmount;  \r\n\t    \t\t  \r\n\t    \t\t  if( saller == address(this)){\r\n\t    \t\t     totalUsed +=orderAmount;\r\n\t    \t\t  }else{\r\n\t    \t\t     uint256 cut = _computeCut(price);\r\n\t    \t\t     totalUsed += (orderAmount - price +cut);\r\n\t    \t\t     ownerIndexToERC20Balance[saller] += price -cut;\r\n\t    \t\t  }\t\r\n         } \r\n          \r\n        \r\n    }\r\n    \r\n\r\n    function createFightAuction(\r\n        uint256 _heroId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _heroId));\r\n        require(isReadyToFight(_heroId));\r\n        _approve(_heroId, fightAuction);\r\n        fightAuction.createAuction(\r\n            _heroId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            0,\r\n            0,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }    \r\n\r\n    function orderOnFightAuction(\r\n        uint256 _yangId,\r\n        uint256 _yinId,\r\n        uint256 orderAmount\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _yinId));\r\n        require(isReadyToFight(_yinId));\r\n        require(_yinId !=_yangId);\r\n        require(ownerIndexToERC20Balance[msg.sender] >= orderAmount);\r\n        \r\n        address saller= fightAuction.getSeller(_yangId);\r\n        uint256 price = fightAuction.getCurrentPrice(_yangId,1);\r\n      \r\n        require( price <= orderAmount && saller != address(0));\r\n        \r\n        if(fightAuction.order(_yangId, orderAmount, msg.sender)){\r\n\t         _fight(uint32(_yinId), uint32(_yangId));\r\n\t        ownerIndexToERC20Balance[msg.sender] -= orderAmount;\r\n\t    \t\townerIndexToERC20Used[msg.sender] += orderAmount;  \r\n\t    \t\t\r\n    \t\t  if( saller == address(this)){\r\n    \t\t     totalUsed +=orderAmount;\r\n    \t\t  }else{\r\n    \t\t     uint256 cut = _computeCut(price);\r\n    \t\t     totalUsed += (orderAmount - price+cut);\r\n    \t\t     ownerIndexToERC20Balance[saller] += price-cut;\r\n    \t\t  }\t  \r\n\t        \r\n        }\r\n    }\r\n\r\n    function withdrawAuctionBalances() external onlyOPM {\r\n        saleAuction.withdrawBalance();\r\n        fightAuction.withdrawBalance();\r\n    }\r\n    \r\n    function setCut(uint256 newCut) public onlyOPM{\r\n        ownerCut = newCut;\r\n    }\r\n    \r\n    \r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        return _price * ownerCut / 10000;\r\n    }  \r\n    \r\n    \r\n    function promoBun(address _address) public {\r\n        require(msg.sender == address(saleAuction));\r\n        if(totalPromo >= candy && candy > 0){\r\n          ownerIndexToERC20Balance[_address] += candy;\r\n          totalPromo -=candy;\r\n         }\r\n    } \r\n\r\n}\r\n\r\ncontract HeroMinting is HeroAuction {\r\n\r\n    uint256 public promoCreationLimit = 5000;\r\n    uint256 public gen0CreationLimit = 50000;\r\n    \r\n    uint256 public gen0StartingPrice = 100000000000000000;\r\n    uint256 public gen0AuctionDuration = 1 days;\r\n\r\n    uint256 public promoCreatedCount;\r\n    uint256 public gen0CreatedCount;\r\n\r\n    function createPromoHero(uint256 _talent, address _owner) public onlyOPM {\r\n        if (_owner == address(0)) {\r\n             _owner = opmAddress;\r\n        }\r\n        require(promoCreatedCount < promoCreationLimit);\r\n        require(gen0CreatedCount < gen0CreationLimit);\r\n\r\n        promoCreatedCount++;\r\n        gen0CreatedCount++;\r\n        _createHero(0, 0, 0, _talent, _owner);\r\n    }\r\n\r\n    function createGen0Auction(uint256 _talent,uint256 price) public onlyOPM {\r\n        require(gen0CreatedCount < gen0CreationLimit);\r\n        require(price < 340282366920938463463374607431768211455);\r\n\r\n        uint256 heroId = _createHero(0, 0, 0, _talent, address(this));\r\n        _approve(heroId, saleAuction);\r\n\t\t\t\tif(price == 0 ){\r\n\t\t\t\t     price = _computeNextGen0Price();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n        saleAuction.createAuction(\r\n            heroId,\r\n            price *1000,\r\n            0,\r\n            price,\r\n            0,\r\n            gen0AuctionDuration,\r\n            address(this)\r\n        );\r\n\r\n        gen0CreatedCount++;\r\n    }\r\n\r\n    function _computeNextGen0Price() internal view returns (uint256) {\r\n        uint256 avePrice = saleAuction.averageGen0SalePrice();\r\n\r\n        require(avePrice < 340282366920938463463374607431768211455);\r\n\r\n        uint256 nextPrice = avePrice + (avePrice / 2);\r\n\r\n        if (nextPrice < gen0StartingPrice) {\r\n            nextPrice = gen0StartingPrice;\r\n        }\r\n\r\n        return nextPrice;\r\n    }\r\n    \r\n    \r\n}\r\n\r\ncontract HeroCore is HeroMinting {\r\n\r\n    address public newContractAddress;\r\n\r\n    function HeroCore() public {\r\n\r\n        paused = true;\r\n\r\n        leaderAddress = msg.sender;\r\n\r\n        opmAddress = msg.sender;\r\n\r\n        _createHero(0, 0, 0, uint256(-1), address(0));\r\n    }\r\n\r\n    function setNewAddress(address _v2Address) public onlyLeader whenPaused {\r\n        newContractAddress = _v2Address;\r\n        ContractUpgrade(_v2Address);\r\n    }\r\n\r\n    function() external payable {\r\n        require(\r\n            msg.sender != address(0)\r\n        );\r\n    }\r\n    \r\n    function getHero(uint256 _id)\r\n        public\r\n        view\r\n        returns (\r\n        bool isReady,\r\n        uint256 cooldownIndex,\r\n        uint256 nextActionAt,\r\n        uint256 recruitmentTime,\r\n        uint256 yinId,\r\n        uint256 yangId,\r\n        uint256 generation,\r\n\t      uint256 talent,\r\n\t      uint256 belongings,\r\n\t      uint32 items\r\n\t    \r\n    ) {\r\n        Hero storage her = heroes[_id];\r\n        isReady = (her.cooldownEndTime <= now);\r\n        cooldownIndex = uint256(her.cooldownIndex);\r\n        nextActionAt = uint256(her.cooldownEndTime);\r\n        recruitmentTime = uint256(her.recruitmentTime);\r\n        yinId = uint256(her.yinId);\r\n        yangId = uint256(her.yangId);\r\n        generation = uint256(her.generation);\r\n\t      talent = her.talent;\r\n\t      belongings = her.belongings;\r\n\t      items = her.items;\r\n    }\r\n\r\n    function unpause() public onlyLeader whenPaused {\r\n        require(saleAuction != address(0));\r\n        require(fightAuction != address(0));\r\n        require(masterRecruitment != address(0));\r\n        require(erc20 != address(0));\r\n        require(newContractAddress == address(0));\r\n\r\n        super.unpause();\r\n    }\r\n    \r\n    \r\n     function setNewCdFee(uint128 _cdFee) public onlyOPM {\r\n        cdFee = _cdFee;\r\n    }\r\n     \r\n    function reduceCD(uint256 heroId,uint256 reduceAmount) \r\n         public  \r\n         whenNotPaused \r\n    {\r\n    \t\tHero storage hero = heroes[heroId];\r\n    \t\trequire(hero.cooldownEndTime > now);\r\n    \t\trequire(ownerIndexToERC20Balance[msg.sender] >= reduceAmount);\r\n    \t\t\r\n    \t\tuint64 cdTime = uint64(hero.cooldownEndTime-now);\r\n    \t\trequire(reduceAmount >= uint256(cdTime * cdFee * (hero.cooldownIndex+1)));\r\n    \t\t\r\n    \t\townerIndexToERC20Balance[msg.sender] -= reduceAmount;\r\n    \t\townerIndexToERC20Used[msg.sender] += reduceAmount;  \r\n        totalUsed +=reduceAmount;\r\n    \t\thero.cooldownEndTime = uint64(now);\r\n    }\r\n    \r\n    function useItems(uint32 _items, uint256 tokenId, address owner, uint256 fee) public returns (bool flag){\r\n      require(msg.sender == magicStore);\r\n      require(owner == heroIndexToOwner[tokenId]);        \r\n         heroes[tokenId].items=_items;\r\n         ItmesChange(tokenId,_items);      \r\n      ownerIndexToERC20Balance[owner] -= fee;\r\n    \townerIndexToERC20Used[owner] += fee;  \r\n      totalUsed +=fee;\r\n      \r\n      flag = true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_heroId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createFightAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leaderAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_yangId\",\"type\":\"uint256\"},{\"name\":\"_yinId\",\"type\":\"uint256\"},{\"name\":\"orderAmount\",\"type\":\"uint256\"}],\"name\":\"orderOnFightAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMagicStore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getHero\",\"outputs\":[{\"name\":\"isReady\",\"type\":\"bool\"},{\"name\":\"cooldownIndex\",\"type\":\"uint256\"},{\"name\":\"nextActionAt\",\"type\":\"uint256\"},{\"name\":\"recruitmentTime\",\"type\":\"uint256\"},{\"name\":\"yinId\",\"type\":\"uint256\"},{\"name\":\"yangId\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"talent\",\"type\":\"uint256\"},{\"name\":\"belongings\",\"type\":\"uint256\"},{\"name\":\"items\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerIndexToERC20Used\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFightAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreationLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLeader\",\"type\":\"address\"}],\"name\":\"setLeader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerByIndex\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_heroId\",\"type\":\"uint256\"},{\"name\":\"orderAmount\",\"type\":\"uint256\"}],\"name\":\"orderOnSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerIndexToERC20Balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalPromo\",\"type\":\"uint256\"},{\"name\":\"_candy\",\"type\":\"uint256\"}],\"name\":\"setERC20TotalPromo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_heroId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_startingPriceEth\",\"type\":\"uint256\"},{\"name\":\"_endingPriceEth\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMasterRecruitmentAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_totalPromo\",\"type\":\"uint256\"},{\"name\":\"_candy\",\"type\":\"uint256\"}],\"name\":\"setERC20Address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterRecruitment\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOPM\",\"type\":\"address\"}],\"name\":\"setOPM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCut\",\"type\":\"uint256\"}],\"name\":\"setCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_heroId\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueLostHero\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"magicStore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"heroIndexToWin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fightAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_talent\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPromoHero\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cdFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cdFee\",\"type\":\"uint128\"}],\"name\":\"setNewCdFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"heroIndexToLoss\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"heroIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"heroId\",\"type\":\"uint256\"}],\"name\":\"reduceCDFee\",\"outputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20Balance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0StartingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawOtherERC20Balance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"heroId\",\"type\":\"uint256\"},{\"name\":\"reduceAmount\",\"type\":\"uint256\"}],\"name\":\"reduceCD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreationLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"promoBun\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPromo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"opmAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"heroIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_items\",\"type\":\"uint32\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"useItems\",\"outputs\":[{\"name\":\"flag\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"charge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0AuctionDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_heroId\",\"type\":\"uint256\"}],\"name\":\"isReadyToFight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"candy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_talent\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"createGen0Auction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"heroId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"yinId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"yangId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"talent\",\"type\":\"uint256\"}],\"name\":\"Recruitment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"items\",\"type\":\"uint256\"}],\"name\":\"ItmesChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]","ContractName":"HeroCore","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://11073786b327879ce802072c7b348bf92767485e90c6a14dcfc41a22911132cf"}]}