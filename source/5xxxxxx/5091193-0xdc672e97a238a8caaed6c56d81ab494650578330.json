{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\taddress public owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\t * account.\r\n\t */\r\n\tfunction Ownable() public {\r\n\t\trequire(msg.sender != address(0));\r\n\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\t * @param newOwner The address to transfer ownership to.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\trequire(newOwner != address(0));\r\n\t\tOwnershipTransferred(owner, newOwner);\r\n\t\towner = newOwner;\r\n\t}\r\n\r\n}\r\n\r\ncontract EthernalBridge is Ownable {\r\n\r\n\t/// Buy is emitted when a lock is bought\r\n\tevent Buy(\r\n\t\tuint indexed id,\r\n\t\taddress owner,\r\n\t\tuint x,\r\n\t\tuint y,\r\n\t\tuint sizeSkin,\r\n\t\tbytes16 names,\r\n\t\tbytes32 message\r\n\t);\r\n\r\n\t/// We reserve 1 thousand skins per type until premium\r\n\r\n\t// 0-1000 CHEAP_TYPE\r\n\tuint constant MEDIUM_TYPE = 1001;\r\n\tuint constant PREMIUM_TYPE = 2001;\r\n\r\n\t/// Bridge max width & height: This can be increased later to make the bridge bigger\r\n\tuint public maxBridgeHeight = 24; // 480px\r\n\tuint public maxBridgeWidth = 400; // 8000px\r\n\r\n\t/// Price by size\r\n\tuint public smallPrice = 3 finney;\r\n\tuint public mediumPrice = 7 finney;\r\n\tuint public bigPrice = 14 finney;\r\n\r\n\t/// Price modifiers\r\n\tuint8 public mediumMod = 2;\r\n\tuint8 public premiumMod = 3;\r\n\r\n\t/// Locks position\r\n\tmapping (uint => uint) public grid;\r\n\r\n\r\n\t/// withdrawWallet is the fixed destination of funds to withdraw. It might\r\n\t/// differ from owner address to allow for a cold storage address.\r\n\taddress public withdrawWallet;\r\n\r\n\tstruct Lock {\r\n\t\taddress owner;\r\n\r\n\t\tuint32 x;\r\n\t\tuint16 y;\r\n\r\n\t\t// last digit is lock size\r\n\t\tuint32 sizeSkin;\r\n\r\n\t\tbytes16 names;\r\n\t\tbytes32 message;\r\n\t\tuint time;\r\n\r\n\t}\r\n\r\n\t/// All bought locks\r\n\tLock[] public locks;\r\n\r\n\tfunction () public payable { }\r\n\r\n\tfunction EthernalBridge() public {\r\n\t\trequire(msg.sender != address(0));\r\n\r\n\t\twithdrawWallet = msg.sender;\r\n\t}\r\n\r\n\t/// @dev Set address withdaw wallet\r\n\t/// @param _address The address where the balance will be withdrawn\r\n\tfunction setWithdrawWallet(address _address) external onlyOwner {\r\n\t\twithdrawWallet = _address;\r\n\t}\r\n\r\n\t/// @dev Set small lock price\r\n\t/// This will be used if ether value increase a lot\r\n\t/// @param _price The new small lock price\r\n\tfunction setSmallPrice(uint _price) external onlyOwner {\r\n\t\tsmallPrice = _price;\r\n\t}\r\n\r\n\t/// @dev Set medium lock price\r\n\t/// This will be used if ether value increase a lot\r\n\t/// @param _price The new medium lock price\r\n\tfunction setMediumPrice(uint _price) external onlyOwner {\r\n\t\tmediumPrice = _price;\r\n\t}\r\n\r\n\t/// @dev Set big lock price\r\n\t/// This will be used if ether value increase a lot\r\n\t/// @param _price The new big lock price\r\n\tfunction setBigPrice(uint _price) external onlyOwner {\r\n\t\tbigPrice = _price;\r\n\t}\r\n\r\n\t/// @dev Set new bridge height\r\n\t/// @param _height The bridge height\r\n\tfunction setBridgeHeight(uint _height) external onlyOwner {\r\n\t\tmaxBridgeHeight = _height;\r\n\t}\r\n\r\n\t/// @dev Set new bridge width\r\n\t/// @param _width The bridge width\r\n\tfunction setBridgeWidth(uint _width) external onlyOwner {\r\n\t\tmaxBridgeWidth = _width;\r\n\t}\r\n\r\n\t/// Withdraw out the balance of the contract to the given withdraw wallet.\r\n\tfunction withdraw() external onlyOwner {\r\n\t\trequire(withdrawWallet != address(0));\r\n\r\n\t\twithdrawWallet.transfer(this.balance);\r\n\t}\r\n\r\n\t/// @notice The the total number of locks\r\n\tfunction getLocksLength() external view returns (uint) {\r\n\t\treturn locks.length;\r\n\t}\r\n\r\n\t/// @notice Get a lock by its id\r\n\t/// @param id The lock id\r\n\tfunction getLockById(uint id) external view returns (uint, uint, uint, uint, bytes16, bytes32, address) {\r\n\t\treturn (\r\n\t\t\tlocks[id].x,\r\n\t\t\tlocks[id].y,\r\n\t\t\tlocks[id].sizeSkin,\r\n\t\t\tlocks[id].time,\r\n\t\t\tlocks[id].names,\r\n\t\t\tlocks[id].message,\r\n\t\t\tlocks[id].owner\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t/// @notice Locks must be purchased in 20x20 pixel blocks.\r\n\t/// Each coordinate represents 20 pixels. So _x=15, _y=10, _width=1, _height=1\r\n\t/// Represents a 20x20 pixel lock at 300x, 200y\r\n\tfunction buy(\r\n\t\tuint32 _x,\r\n\t\tuint16 _y,\r\n\t\tuint32 _sizeSkin,\r\n\t\tbytes16 _names,\r\n\t\tbytes32 _message\r\n\t)\r\n\t\texternal\r\n\t\tpayable\r\n\t\treturns (uint)\r\n\t{\r\n\r\n\t\t_checks(_x, _y, _sizeSkin);\r\n\r\n\t\tuint id = locks.push(\r\n\t\t\tLock(msg.sender, _x, _y, _sizeSkin, _names, _message, block.timestamp)\r\n\t\t) - 1;\r\n\r\n\t\t// Trigger buy event\r\n\t\tBuy(id, msg.sender, _x, _y, _sizeSkin, _names, _message);\r\n\r\n\t\treturn id;\r\n\t}\r\n\r\n\r\n\tfunction _checks(uint _x, uint _y, uint _sizeSkin) private {\r\n\r\n\t\tuint _size = _sizeSkin % 10; // Size & skin are packed together. Last digit is the size. (1, 2, 3)\r\n\t\tuint _skin = (_sizeSkin - _size) / 10;\r\n\r\n\t\t/// Size must be 20 / 40 / 60 pixels\r\n\t\trequire(_size == 1 || _size == 2 || _size == 3);\r\n\r\n\t\trequire(maxBridgeHeight >= (_y + _size) && maxBridgeWidth >= (_x + _size));\r\n\r\n\t\trequire(msg.value >= calculateCost(_size, _skin));\r\n\r\n\t\t// Check if lock position is available\r\n\t\t_checkGrid(_x, _y, _size);\r\n\t}\r\n\r\n\t/// @dev calculate the cost of the lock by its size and skin\r\n\t/// @param _size The lock size\r\n\t/// @param _skin The lock skin\r\n\tfunction calculateCost(uint _size, uint _skin) public view returns (uint cost) {\r\n\t\t// Calculate cost by size\r\n\r\n\t\tif(_size == 2)\r\n\t\t\tcost = mediumPrice;\r\n\t\telse if(_size == 3)\r\n\t\t\tcost = bigPrice;\r\n\t\telse\r\n\t\t\tcost = smallPrice;\r\n\r\n\t\t// Apply price modifiers\r\n\t\tif(_skin >= PREMIUM_TYPE)\r\n\t\t\tcost = cost * premiumMod;\r\n\t\telse if(_skin >= MEDIUM_TYPE)\r\n\t\t\tcost = cost * mediumMod;\r\n\r\n\t\treturn cost;\r\n\t}\r\n\r\n\r\n\t/// @dev check if a lock can be set in the given positions\r\n\t/// @param _x The x coord\r\n\t/// @param _y The y coord\r\n\t/// @param _size The lock size\r\n\tfunction _checkGrid(uint _x, uint _y, uint _size) public {\r\n\r\n\t\tfor(uint i = 0; i < _size; i++) {\r\n\r\n\t\t\tuint row = grid[_x + i];\r\n\r\n\t\t\tfor(uint j = 0; j < _size; j++) {\r\n\r\n\t\t\t\t// if (_y + j) bit is set in row\r\n\t\t\t\tif((row >> (_y + j)) & uint(1) == uint(1)) {\r\n\t\t\t\t\t// lock exists in this slot\r\n\t\t\t\t\trevert();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// set bit (_y + j)\r\n\t\t\t\trow = row | (uint(1) << (_y + j));\r\n\t\t\t}\r\n\r\n\t\t\tgrid[_x + i] = row;\r\n\t\t}\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getLockById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes16\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"},{\"name\":\"_y\",\"type\":\"uint256\"},{\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"_checkGrid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setMediumPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_width\",\"type\":\"uint256\"}],\"name\":\"setBridgeWidth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint32\"},{\"name\":\"_y\",\"type\":\"uint16\"},{\"name\":\"_sizeSkin\",\"type\":\"uint32\"},{\"name\":\"_names\",\"type\":\"bytes16\"},{\"name\":\"_message\",\"type\":\"bytes32\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bigPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLocksLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mediumPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"setBridgeHeight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setBigPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"premiumMod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBridgeWidth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setWithdrawWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mediumMod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setSmallPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_size\",\"type\":\"uint256\"},{\"name\":\"_skin\",\"type\":\"uint256\"}],\"name\":\"calculateCost\",\"outputs\":[{\"name\":\"cost\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBridgeHeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smallPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locks\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"x\",\"type\":\"uint32\"},{\"name\":\"y\",\"type\":\"uint16\"},{\"name\":\"sizeSkin\",\"type\":\"uint32\"},{\"name\":\"names\",\"type\":\"bytes16\"},{\"name\":\"message\",\"type\":\"bytes32\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sizeSkin\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"names\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"bytes32\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EthernalBridge","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7b5de8cf530bc5e17df51f1c181232959cb5b1fc64646cd583c83d985007e31a"}]}