{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(burner, _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract UBOCOIN is BurnableToken, Ownable\r\n{\r\n    // ERC20 token parameters\r\n    string public constant name = \"UBOCOIN\";\r\n    string public constant symbol = \"UBO\";\r\n    uint8 public constant decimals = 18;\r\n    \r\n    \r\n    // Crowdsale base price (before bonuses): 0.001 ETH per UBO\r\n    uint256 private UBO_per_ETH = 1000 * (uint256(10) ** decimals);\r\n    \r\n    // 14 days with 43% bonus for purchases of at least 1000 UBO (19 february - 5 march)\r\n    uint256 private constant pre_ICO_duration = 15 days;\r\n    uint256 private constant pre_ICO_bonus_percentage = 43;\r\n    uint256 private constant pre_ICO_bonus_minimum_purchased_UBO = 1000 * (uint256(10) ** decimals);\r\n    \r\n    // 21 days with 15% bonus (6 march - 26 march)\r\n    uint256 private constant first_bonus_sale_duration = 21 days;\r\n    uint256 private constant first_bonus_sale_bonus = 15;\r\n    \r\n    // 15 days with 10% bonus (27 march - 10 april)\r\n    uint256 private constant second_bonus_sale_duration = 15 days;\r\n    uint256 private constant second_bonus_sale_bonus = 10;\r\n    \r\n    // 8 days with 6% bonus (11 april - 18 april)\r\n    uint256 private constant third_bonus_sale_duration = 8 days;\r\n    uint256 private constant third_bonus_sale_bonus = 6;\r\n    \r\n    // 7 days with 3% bonus (19 april - 25 april)\r\n    uint256 private constant fourth_bonus_sale_duration = 7 days;\r\n    uint256 private constant fourth_bonus_sale_bonus = 3;\r\n    \r\n    // 5 days with no bonus (26 april - 30 april)\r\n    uint256 private constant final_sale_duration = 5 days;\r\n    \r\n    \r\n    // The target of the crowdsale is 3500000 UBICOINS.\r\n    // If the crowdsale has finished, and the target has not been reached,\r\n    // all crowdsale participants will be able to call refund() and get their\r\n    // ETH back. The refundMany() function can be used to refund multiple\r\n    // participants in one transaction.\r\n    uint256 public constant crowdsaleTargetUBO = 3500000 * (uint256(10) ** decimals);\r\n    \r\n    \r\n    // Variables that remember the start times of the various crowdsale periods\r\n    uint256 private pre_ICO_start_timestamp;\r\n    uint256 private first_bonus_sale_start_timestamp;\r\n    uint256 private second_bonus_sale_start_timestamp;\r\n    uint256 private third_bonus_sale_start_timestamp;\r\n    uint256 private fourth_bonus_sale_start_timestamp;\r\n    uint256 private final_sale_start_timestamp;\r\n    uint256 private crowdsale_end_timestamp;\r\n    \r\n    \r\n    // Publicly accessible trackers that indicate how much UBO is left\r\n    // in each category\r\n    uint256 public crowdsaleAmountLeft;\r\n    uint256 public foundersAmountLeft;\r\n    uint256 public earlyBackersAmountLeft;\r\n    uint256 public teamAmountLeft;\r\n    uint256 public bountyAmountLeft;\r\n    uint256 public reservedFundLeft;\r\n    \r\n    // Keep track of all participants, how much they bought and how much they spent.\r\n    address[] public allParticipants;\r\n    mapping(address => uint256) public participantToEtherSpent;\r\n    mapping(address => uint256) public participantToUBObought;\r\n    \r\n    \r\n    function crowdsaleTargetReached() public view returns (bool)\r\n    {\r\n        return amountOfUBOsold() >= crowdsaleTargetUBO;\r\n    }\r\n    \r\n    function crowdsaleStarted() public view returns (bool)\r\n    {\r\n        return pre_ICO_start_timestamp > 0 && now >= pre_ICO_start_timestamp;\r\n    }\r\n    \r\n    function crowdsaleFinished() public view returns (bool)\r\n    {\r\n        return pre_ICO_start_timestamp > 0 && now >= crowdsale_end_timestamp;\r\n    }\r\n    \r\n    function amountOfParticipants() external view returns (uint256)\r\n    {\r\n        return allParticipants.length;\r\n    }\r\n    \r\n    function amountOfUBOsold() public view returns (uint256)\r\n    {\r\n        return totalSupply_ * 70 / 100 - crowdsaleAmountLeft;\r\n    }\r\n    \r\n    // If the crowdsale target has not been reached, or the crowdsale has not finished,\r\n    // don't allow the transfer of tokens purchased in the crowdsale.\r\n    function transfer(address _to, uint256 _amount) public returns (bool)\r\n    {\r\n        if (!crowdsaleTargetReached() || !crowdsaleFinished())\r\n        {\r\n            require(balances[msg.sender] - participantToUBObought[msg.sender] >= _amount);\r\n        }\r\n        \r\n        return super.transfer(_to, _amount);\r\n    }\r\n    \r\n    \r\n    // Constructor function\r\n    function UBOCOIN() public\r\n    {\r\n        totalSupply_ = 300000000 * (uint256(10) ** decimals);\r\n        balances[this] = totalSupply_;\r\n        Transfer(0x0, this, totalSupply_);\r\n        \r\n        crowdsaleAmountLeft = totalSupply_ * 70 / 100;   // 70%\r\n        foundersAmountLeft = totalSupply_ * 10 / 100;    // 10%\r\n        earlyBackersAmountLeft = totalSupply_ * 5 / 100; // 5%\r\n        teamAmountLeft = totalSupply_ * 5 / 100;         // 5%\r\n        bountyAmountLeft = totalSupply_ * 5 / 100;       // 5%\r\n        reservedFundLeft = totalSupply_ * 5 / 100;       // 5%\r\n        \r\n        setPreICOStartTime(1518998400); // This timstamp indicates 2018-02-19 00:00 UTC\r\n    }\r\n    \r\n    function setPreICOStartTime(uint256 _timestamp) public onlyOwner\r\n    {\r\n        // If the crowdsale has already started, don't allow re-scheduling it.\r\n        require(!crowdsaleStarted());\r\n        \r\n        pre_ICO_start_timestamp = _timestamp;\r\n        first_bonus_sale_start_timestamp = pre_ICO_start_timestamp + pre_ICO_duration;\r\n        second_bonus_sale_start_timestamp = first_bonus_sale_start_timestamp + first_bonus_sale_duration;\r\n        third_bonus_sale_start_timestamp = second_bonus_sale_start_timestamp + second_bonus_sale_duration;\r\n        fourth_bonus_sale_start_timestamp = third_bonus_sale_start_timestamp + third_bonus_sale_duration;\r\n        final_sale_start_timestamp = fourth_bonus_sale_start_timestamp + fourth_bonus_sale_duration;\r\n        crowdsale_end_timestamp = final_sale_start_timestamp + final_sale_duration;\r\n    }\r\n    \r\n    function startPreICOnow() external onlyOwner\r\n    {\r\n        setPreICOStartTime(now);\r\n    }\r\n    \r\n    function destroyUnsoldTokens() external\r\n    {\r\n        require(crowdsaleStarted() && crowdsaleFinished());\r\n        \r\n        uint256 amountToBurn = crowdsaleAmountLeft;\r\n        crowdsaleAmountLeft = 0;\r\n        this.burn(amountToBurn);\r\n    }\r\n    \r\n    // If someone sends ETH to the contract address,\r\n    // assume that they are trying to buy tokens.\r\n    function () payable external\r\n    {\r\n        buyTokens();\r\n    }\r\n    \r\n    function buyTokens() payable public\r\n    {\r\n        uint256 amountOfUBOpurchased = msg.value * UBO_per_ETH / (1 ether);\r\n        \r\n        // Only allow buying tokens if the ICO has started, and has not finished\r\n        require(crowdsaleStarted());\r\n        require(!crowdsaleFinished());\r\n        \r\n        // If the pre-ICO hasn't started yet, cancel the transaction\r\n        if (now < pre_ICO_start_timestamp)\r\n        {\r\n            revert();\r\n        }\r\n        \r\n        // If we are in the pre-ICO...\r\n        else if (now >= pre_ICO_start_timestamp && now < first_bonus_sale_start_timestamp)\r\n        {\r\n            // If they purchased enough to be eligible for the pre-ICO bonus,\r\n            // then give them the bonus\r\n            if (amountOfUBOpurchased >= pre_ICO_bonus_minimum_purchased_UBO)\r\n            {\r\n                amountOfUBOpurchased = amountOfUBOpurchased * (100 + pre_ICO_bonus_percentage) / 100;\r\n            }\r\n        }\r\n        \r\n        // If we are in the first bonus sale...\r\n        else if (now >= first_bonus_sale_start_timestamp && now < second_bonus_sale_start_timestamp)\r\n        {\r\n            amountOfUBOpurchased = amountOfUBOpurchased * (100 + first_bonus_sale_bonus) / 100;\r\n        }\r\n        \r\n        // If we are in the second bonus sale...\r\n        else if (now >= second_bonus_sale_start_timestamp && now < third_bonus_sale_start_timestamp)\r\n        {\r\n            amountOfUBOpurchased = amountOfUBOpurchased * (100 + second_bonus_sale_bonus) / 100;\r\n        }\r\n        \r\n        // If we are in the third bonus sale...\r\n        else if (now >= third_bonus_sale_start_timestamp && now < fourth_bonus_sale_start_timestamp)\r\n        {\r\n            amountOfUBOpurchased = amountOfUBOpurchased * (100 + third_bonus_sale_bonus) / 100;\r\n        }\r\n        \r\n        // If we are in the fourth bonus sale...\r\n        else if (now >= fourth_bonus_sale_start_timestamp && now < final_sale_start_timestamp)\r\n        {\r\n            amountOfUBOpurchased = amountOfUBOpurchased * (100 + fourth_bonus_sale_bonus) / 100;\r\n        }\r\n        \r\n        // If we are in the final sale...\r\n        else if (now >= final_sale_start_timestamp && now < crowdsale_end_timestamp)\r\n        {\r\n            // No bonus\r\n        }\r\n        \r\n        // If we are passed the final sale, cancel the transaction.\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n        \r\n        // Make sure the crowdsale has enough UBO left\r\n        require(amountOfUBOpurchased <= crowdsaleAmountLeft);\r\n        \r\n        // Remove the tokens from this contract and the crowdsale tokens,\r\n        // add them to the buyer\r\n        crowdsaleAmountLeft -= amountOfUBOpurchased;\r\n        balances[this] -= amountOfUBOpurchased;\r\n        balances[msg.sender] += amountOfUBOpurchased;\r\n        Transfer(this, msg.sender, amountOfUBOpurchased);\r\n        \r\n        // Track statistics\r\n        if (participantToEtherSpent[msg.sender] == 0)\r\n        {\r\n            allParticipants.push(msg.sender);\r\n        }\r\n        participantToUBObought[msg.sender] += amountOfUBOpurchased;\r\n        participantToEtherSpent[msg.sender] += msg.value;\r\n    }\r\n    \r\n    function refund() external\r\n    {\r\n        // If the crowdsale has not started yet, don't allow refund\r\n        require(crowdsaleStarted());\r\n        \r\n        // If the crowdsale has not finished yet, don't allow refund\r\n        require(crowdsaleFinished());\r\n        \r\n        // If the target was reached, don't allow refund\r\n        require(!crowdsaleTargetReached());\r\n        \r\n        _refundParticipant(msg.sender);\r\n    }\r\n    \r\n    function refundMany(uint256 _startIndex, uint256 _endIndex) external\r\n    {\r\n        // If the crowdsale has not started yet, don't allow refund\r\n        require(crowdsaleStarted());\r\n        \r\n        // If the crowdsale has not finished yet, don't allow refund\r\n        require(crowdsaleFinished());\r\n        \r\n        // If the target was reached, don't allow refund\r\n        require(!crowdsaleTargetReached());\r\n        \r\n        for (uint256 i=_startIndex; i<=_endIndex && i<allParticipants.length; i++)\r\n        {\r\n            _refundParticipant(allParticipants[i]);\r\n        }\r\n    }\r\n    \r\n    function _refundParticipant(address _participant) internal\r\n    {\r\n        if (participantToEtherSpent[_participant] > 0)\r\n        {\r\n            // Return the UBO they bought into the crowdsale funds\r\n            uint256 refundUBO = participantToUBObought[_participant];\r\n            participantToUBObought[_participant] = 0;\r\n            balances[_participant] -= refundUBO;\r\n            balances[this] += refundUBO;\r\n            crowdsaleAmountLeft += refundUBO;\r\n            Transfer(_participant, this, refundUBO);\r\n            \r\n            // Return the ETH they spent to buy them\r\n            uint256 refundETH = participantToEtherSpent[_participant];\r\n            participantToEtherSpent[_participant] = 0;\r\n            _participant.transfer(refundETH);\r\n        }\r\n    }\r\n    \r\n    function distributeFounderTokens(address _founderAddress, uint256 _amount) external onlyOwner\r\n    {\r\n        require(_amount <= foundersAmountLeft);\r\n        foundersAmountLeft -= _amount;\r\n        this.transfer(_founderAddress, _amount);\r\n    }\r\n    \r\n    function distributeEarlyBackerTokens(address _earlyBackerAddress, uint256 _amount) external onlyOwner\r\n    {\r\n        require(_amount <= earlyBackersAmountLeft);\r\n        earlyBackersAmountLeft -= _amount;\r\n        this.transfer(_earlyBackerAddress, _amount);\r\n    }\r\n    \r\n    function distributeTeamTokens(address _teamMemberAddress, uint256 _amount) external onlyOwner\r\n    {\r\n        require(_amount <= teamAmountLeft);\r\n        teamAmountLeft -= _amount;\r\n        this.transfer(_teamMemberAddress, _amount);\r\n    }\r\n    \r\n    function distributeBountyTokens(address _bountyReceiverAddress, uint256 _amount) external onlyOwner\r\n    {\r\n        require(_amount <= bountyAmountLeft);\r\n        bountyAmountLeft -= _amount;\r\n        this.transfer(_bountyReceiverAddress, _amount);\r\n    }\r\n    \r\n    function distributeReservedTokens(address _to, uint256 _amount) external onlyOwner\r\n    {\r\n        require(_amount <= reservedFundLeft);\r\n        reservedFundLeft -= _amount;\r\n        this.transfer(_to, _amount);\r\n    }\r\n    \r\n    function distributeCrowdsaleTokens(address _to, uint256 _amount) external onlyOwner\r\n    {\r\n        require(_amount <= crowdsaleAmountLeft);\r\n        crowdsaleAmountLeft -= _amount;\r\n        this.transfer(_to, _amount);\r\n    }\r\n    \r\n    function ownerWithdrawETH() external onlyOwner\r\n    {\r\n        // Only allow the owner to withdraw if the crowdsale target has been reached\r\n        require(crowdsaleTargetReached());\r\n        \r\n        owner.transfer(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_earlyBackerAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeEarlyBackerTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerWithdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeCrowdsaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyAmountLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bountyReceiverAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeBountyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participantToUBObought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAmountLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_teamMemberAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeTeamTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroyUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"name\":\"_endIndex\",\"type\":\"uint256\"}],\"name\":\"refundMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedFundLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfUBOsold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAmountLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersAmountLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleTargetReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleTargetUBO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_founderAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeFounderTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyBackersAmountLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeReservedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participantToEtherSpent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setPreICOStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPreICOnow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"UBOCOIN","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8446f8d36d9fb349349fdb428d423b2eab99b7898a416386dc17410bd64d5633"}]}