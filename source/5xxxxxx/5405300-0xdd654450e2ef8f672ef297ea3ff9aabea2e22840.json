{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract ABXToken \r\n{\r\n  mapping(address => uint256) public balanceOf;\r\n  function transfer(address newTokensHolder, uint256 tokensNumber) \r\n    public \r\n    returns(bool);\r\n}\r\n\r\ncontract VestingContractABX\r\n{\r\n  //structures\r\n  struct AccountData\r\n  {\r\n    uint original_balance;\r\n    uint limit_per_period;\r\n    uint current_balance;\r\n    uint current_limit;\r\n    uint current_transferred;\r\n  }\r\n\r\n  //storage\r\n  address public owner;\r\n  ABXToken public abx_token;\r\n  mapping (address => AccountData) public account_data;\r\n  uint public current_period;\r\n  uint[] public periods;\r\n  address[] public accounts;\r\n\r\n  //modifiers\r\n  modifier onlyOwner\r\n  {\r\n    require(owner == msg.sender);\r\n    _;\r\n  }\r\n  \r\n  //Events\r\n  event Transfer(address indexed to, uint indexed value);\r\n  event OwnerTransfer(address indexed to, uint indexed value);\r\n  event OwnerChanged(address indexed owner);\r\n  event CurrentPeriodChanged(uint indexed current_period);\r\n\r\n  //functions\r\n\r\n  //debug functions\r\n  function setPeriod(uint i, uint v)\r\n    public\r\n  {\r\n    periods[i] = v;\r\n  }\r\n\r\n  //constructor\r\n  function VestingContractABX(ABXToken _abx_token)\r\n    public\r\n  {\r\n    owner = msg.sender;\r\n    abx_token = _abx_token;\r\n    \r\n    periods.push(1524355200);  //2018-04-22\r\n    periods.push(1526947200);  //2018-05-22\r\n    periods.push(2**256 - 1);  //very far future\r\n    current_period = 0;\r\n    \r\n    initData(0xB99f9Ff7349A74f74Ee78bA76F692381925B4372, 192998805 * 10**16);\r\n    initData(0x6f15F81d3726dEc1c7D8db7c7C139de5B8a5DCdA, 50000 * 10**18);\r\n    initData(0x0339Db6d5827cFf0271a5bd3EEe991bE1DCe2AD9, 50000 * 10**18);\r\n    initData(0x4477A5b0Bd59E4661008D07938293e61A95cbC9D, 25725 * 10**18);\r\n    initData(0x1c8dBee998C6B905B46e517Cf5A6E935673b7c8F, 33650 * 10**18);\r\n    initData(0xF3E33Ee85414Cb9b2D1EcFf9508BD24285fD3194, 46350 * 10**18);\r\n    initData(0x70d370528cd58A2531Db49e477964D760cf9fE56, 413950 * 10**18);\r\n    initData(0xd2A64d99025b1b0B0Eb8C65d7a89AD6444842E60, 500000 * 10**18);\r\n    initData(0xf8767ced61c1f86f5572e64289247b1c86083ef1, 33333333 * 10**16);\r\n  }\r\n  \r\n  /// @dev Fallback function: don't accept ETH\r\n  function()\r\n    public\r\n    payable\r\n  {\r\n    revert();\r\n  }\r\n\r\n  /// @dev Get current balance of the contract\r\n  function getBalance()\r\n    constant\r\n    public\r\n    returns(uint)\r\n  {\r\n    return abx_token.balanceOf(this);\r\n  }\r\n\r\n  function initData(address a, uint v) \r\n    private\r\n  {\r\n    accounts.push(a);\r\n    account_data[a].original_balance = v;\r\n    account_data[a].current_balance = account_data[a].original_balance;\r\n    account_data[a].limit_per_period = account_data[a].original_balance / 3;\r\n    account_data[a].current_limit = account_data[a].limit_per_period;\r\n    account_data[a].current_transferred = 0;\r\n  }\r\n\r\n  function setOwner(address _owner) \r\n    public \r\n    onlyOwner \r\n  {\r\n    require(_owner != 0);\r\n    \r\n    owner = _owner;\r\n    emit OwnerChanged(owner);\r\n  }\r\n  \r\n  //allow owner to transfer surplus\r\n  function ownerTransfer(address to, uint value)\r\n    public\r\n    onlyOwner\r\n  {\r\n    uint current_balance_all = 0;\r\n    for (uint i = 0; i < accounts.length; i++)\r\n      current_balance_all += account_data[accounts[i]].current_balance;\r\n    require(getBalance() > current_balance_all && value <= getBalance() - current_balance_all);\r\n    if (abx_token.transfer(to, value))\r\n      emit OwnerTransfer(to, value);\r\n  }\r\n  \r\n  function updateCurrentPeriod()\r\n    public\r\n  {\r\n    require(account_data[msg.sender].original_balance > 0 || msg.sender == owner);\r\n    \r\n    uint new_period = current_period;\r\n    for (uint i = current_period; i < periods.length; i++)\r\n      if (periods[i] > now)\r\n      {\r\n        new_period = i;\r\n        break;\r\n      }\r\n    if (new_period != current_period)\r\n    {\r\n      current_period = new_period;\r\n      for (i = 0; i < accounts.length; i++)\r\n      {\r\n        account_data[accounts[i]].current_transferred = 0;\r\n        account_data[accounts[i]].current_limit = account_data[accounts[i]].limit_per_period;\r\n        if (current_period == periods.length - 1)\r\n          account_data[accounts[i]].current_limit = 2**256 - 1;  //unlimited\r\n      }\r\n      emit CurrentPeriodChanged(current_period);\r\n    }\r\n  }\r\n\r\n  function transfer(address to, uint value) \r\n    public\r\n  {\r\n    updateCurrentPeriod();\r\n    require(value <= abx_token.balanceOf(this) \r\n      && value <= account_data[msg.sender].current_balance \r\n      && account_data[msg.sender].current_transferred + value <= account_data[msg.sender].current_limit);\r\n\r\n    if (abx_token.transfer(to, value)) \r\n    {\r\n      account_data[msg.sender].current_transferred += value;\r\n      account_data[msg.sender].current_balance -= value;\r\n      emit Transfer(to, value);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"account_data\",\"outputs\":[{\"name\":\"original_balance\",\"type\":\"uint256\"},{\"name\":\"limit_per_period\",\"type\":\"uint256\"},{\"name\":\"current_balance\",\"type\":\"uint256\"},{\"name\":\"current_limit\",\"type\":\"uint256\"},{\"name\":\"current_transferred\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateCurrentPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ownerTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"abx_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periods\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_abx_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OwnerTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"current_period\",\"type\":\"uint256\"}],\"name\":\"CurrentPeriodChanged\",\"type\":\"event\"}]","ContractName":"VestingContractABX","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009a794dc1939f1d78fa48613b89b8f9d0a20da00e","Library":"","SwarmSource":"bzzr://fbc80831a6da7ba3a907577db49bd3f2a5cb84cc020667d88d64adbeab055f74"}]}