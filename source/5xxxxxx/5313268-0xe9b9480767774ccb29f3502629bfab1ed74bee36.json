{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n   @title ERC827 interface, an extension of ERC20 token standard\r\n\r\n   Interface of a ERC827 token, following the ERC20 standard with extra\r\n   methods to transfer value and data and execute calls in transfers and\r\n   approvals.\r\n */\r\ncontract ERC827 is ERC20 {\r\n\r\n  function approve( address _spender, uint256 _value, bytes _data ) public returns (bool);\r\n  function transfer( address _to, uint256 _value, bytes _data ) public returns (bool);\r\n  function transferFrom( address _from, address _to, uint256 _value, bytes _data ) public returns (bool);\r\n\r\n}\r\n\r\ncontract AccessControl {\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == cooAddress || \r\n            msg.sender == ceoAddress || \r\n            msg.sender == cfoAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new CFO\r\n    function setCFO(address _newCFO) external onlyCEO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) external onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() external onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause() public onlyCEO whenPaused {\r\n        paused = false;\r\n    }\r\n}\r\n\r\n/// @title \r\ncontract TournamentInterface {\r\n    /// @dev simply a boolean to indicate this is the contract we expect to be\r\n    function isTournament() public pure returns (bool);\r\n    function isPlayerIdle(address _owner, uint256 _playerId) public view returns (bool);\r\n}\r\n\r\n/// @title Base contract for BS. Holds all common structs, events and base variables.\r\ncontract BSBase is AccessControl {\r\n    /*** EVENTS ***/\r\n\r\n    /// @dev The Birth event is fired whenever a new player comes into existence. \r\n    event Birth(address owner, uint32 playerId, uint16 typeId, uint8 attack, uint8 defense, uint8 stamina, uint8 xp, uint8 isKeeper, uint16 skillId);\r\n\r\n    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a player\r\n    ///  ownership is assigned, including births.\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n\r\n    struct Player {\r\n        uint16 typeId;\r\n        uint8 attack;\r\n        uint8 defense;\r\n        uint8 stamina;\r\n        uint8 xp;\r\n        uint8 isKeeper;\r\n        uint16 skillId;\r\n        uint8 isSkillOn;\r\n    }\r\n\r\n    Player[] players;\r\n    uint256 constant commonPlayerCount = 10;\r\n    uint256 constant totalPlayerSupplyLimit = 80000000;\r\n    mapping (uint256 => address) public playerIndexToOwner;\r\n    mapping (address => uint256) ownershipTokenCount;\r\n    mapping (uint256 => address) public playerIndexToApproved;\r\n    /// SaleClockAuction public saleAuction;\r\n    ERC827 public joyTokenContract;\r\n    TournamentInterface public tournamentContract;\r\n\r\n    /// @dev Assigns ownership of a specific Player to an address.\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        // since the number of players is capped to 2^32\r\n        // there is no way to overflow this\r\n        ownershipTokenCount[_to]++;\r\n        // transfer ownership\r\n        playerIndexToOwner[_tokenId] = _to;\r\n        // When creating new player _from is 0x0, but we can't account that address.\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            // clear any previously approved ownership exchange\r\n            delete playerIndexToApproved[_tokenId];\r\n        }\r\n        // Emit the transfer event.\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _createPlayer(\r\n        address _owner,\r\n        uint256 _typeId,\r\n        uint256 _attack,\r\n        uint256 _defense,\r\n        uint256 _stamina,\r\n        uint256 _xp,\r\n        uint256 _isKeeper,\r\n        uint256 _skillId\r\n    )\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        Player memory _player = Player({\r\n            typeId: uint16(_typeId), \r\n            attack: uint8(_attack), \r\n            defense: uint8(_defense), \r\n            stamina: uint8(_stamina),\r\n            xp: uint8(_xp),\r\n            isKeeper: uint8(_isKeeper),\r\n            skillId: uint16(_skillId),\r\n            isSkillOn: 0\r\n        });\r\n        uint256 newPlayerId = players.push(_player) - 1;\r\n\r\n        require(newPlayerId <= totalPlayerSupplyLimit);\r\n\r\n        // emit the birth event\r\n        Birth(\r\n            _owner,\r\n            uint32(newPlayerId),\r\n            _player.typeId,\r\n            _player.attack,\r\n            _player.defense,\r\n            _player.stamina,\r\n            _player.xp,\r\n            _player.isKeeper,\r\n            _player.skillId\r\n        );\r\n\r\n        // This will assign ownership, and also emit the Transfer event as\r\n        // per ERC721 draft\r\n        _transfer(0, _owner, newPlayerId);\r\n\r\n        return newPlayerId;\r\n    }\r\n}\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    function supportsInterface(bytes4 _interfaceID) public view returns (bool);\r\n}\r\n\r\n/// @title The facet of the BS core contract that manages ownership, ERC-721 (draft) compliant.\r\ncontract BSOwnership is BSBase, ERC721 {\r\n\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public constant name = \"BitSoccer Player\";\r\n    string public constant symbol = \"BSP\";\r\n\r\n    bytes4 constant InterfaceSignature_ERC165 =\r\n        bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n\r\n    bytes4 constant InterfaceSignature_ERC721 =\r\n        bytes4(keccak256(\"name()\")) ^\r\n        bytes4(keccak256(\"symbol()\")) ^\r\n        bytes4(keccak256(\"totalSupply()\")) ^\r\n        bytes4(keccak256(\"balanceOf(address)\")) ^\r\n        bytes4(keccak256(\"ownerOf(uint256)\")) ^\r\n        bytes4(keccak256(\"approve(address,uint256)\")) ^\r\n        bytes4(keccak256(\"transfer(address,uint256)\")) ^\r\n        bytes4(keccak256(\"transferFrom(address,address,uint256)\")) ^\r\n        bytes4(keccak256(\"tokensOfOwner(address)\"));\r\n\r\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\r\n    ///  ERC-165 (obviously!) and ERC-721.\r\n    function supportsInterface(bytes4 _interfaceID) public view returns (bool)\r\n    {\r\n        // DEBUG ONLY\r\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9f40b779));\r\n\r\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\r\n    }\r\n\r\n    // Internal utility functions: These functions all assume that their input arguments\r\n    // are valid. We leave it to public methods to sanitize their inputs and follow\r\n    // the required logic.\r\n\r\n    /// @dev Checks if a given address is the current owner of a particular Player.\r\n    /// @param _claimant the address we are validating against.\r\n    /// @param _tokenId player id, only valid when > 0\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return playerIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    function _isIdle(address _owner, uint256 _tokenId) internal view returns (bool) {\r\n        return (tournamentContract == address(0) || tournamentContract.isPlayerIdle(_owner, _tokenId));\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular Player.\r\n    /// @param _claimant the address we are confirming player is approved for.\r\n    /// @param _tokenId player id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return playerIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\r\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\r\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\r\n    ///  _approve() and transferFrom() are used together for putting players on auction, and\r\n    ///  there is no value in spamming the log with Approval events in that case.\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        playerIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    /// @notice Returns the number of players owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @dev Required for ERC-721 compliance\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    /// @notice Transfers a Player to another address. If transferring to a smart\r\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\r\n    ///  BSPlayers specifically) or your Player may be lost forever. Seriously.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the player to transfer.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        require(_to != address(this));\r\n\r\n        // Disallow transfers to the auction contracts to prevent accidental\r\n        // misuse. Auction contracts should only take ownership of players\r\n        // through the allow + transferFrom flow.\r\n        // require(_to != address(saleAuction));\r\n\r\n        // You can only send your own player.\r\n        require(_owns(msg.sender, _tokenId));\r\n        require(_isIdle(msg.sender, _tokenId));\r\n\r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Grant another address the right to transfer a specific Player via\r\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the Player that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approve(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        // Only an owner can grant transfer approval.\r\n        require(_owns(msg.sender, _tokenId));\r\n        require(_isIdle(msg.sender, _tokenId));\r\n\r\n        // Register the approval (replacing any previous approval).\r\n        _approve(_tokenId, _to);\r\n\r\n        // Emit approval event.\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Transfer a Player owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the Player to be transfered.\r\n    /// @param _to The address that should take ownership of the Player. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the player to be transferred.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        require(_to != address(this));\r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n        require(_isIdle(_from, _tokenId));\r\n\r\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Returns the total number of Players currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint) {\r\n        return players.length;\r\n    }\r\n\r\n    /// @notice Returns the address currently assigned ownership of a given Player.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId)\r\n        public\r\n        view\r\n        returns (address owner)\r\n    {\r\n        owner = playerIndexToOwner[_tokenId];\r\n\r\n        require(owner != address(0));\r\n    }\r\n\r\n    /// @notice Returns a list of all Player IDs assigned to an address.\r\n    /// @param _owner The owner whose Players we are interested in.\r\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n    ///  expensive (it walks the entire Player array looking for players belonging to owner),\r\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n    ///  not contract-to-contract calls.\r\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        uint256[] memory result = new uint256[](tokenCount+commonPlayerCount);\r\n        uint256 resultIndex = 0;\r\n\r\n        uint256 playerId;\r\n        for (playerId = 1; playerId <= commonPlayerCount; playerId++) {\r\n            result[resultIndex] = playerId;\r\n            resultIndex++;\r\n        }\r\n\r\n        if (tokenCount == 0) {\r\n            return result;\r\n        } else {\r\n            uint256 totalPlayers = totalSupply();\r\n\r\n            for (; playerId < totalPlayers; playerId++) {\r\n                if (playerIndexToOwner[playerId] == _owner) {\r\n                    result[resultIndex] = playerId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\n/// @title \r\ninterface RandomPlayerInterface {\r\n    /// @dev simply a boolean to indicate this is the contract we expect to be\r\n    function isRandomPlayer() public pure returns (bool);\r\n\r\n    /// @return a random player\r\n    function gen() public returns (uint256 typeId, uint256 attack, uint256 defense, uint256 stamina, uint256 xp, uint256 isKeeper, uint256 skillId);\r\n}\r\n\r\ncontract BSMinting is BSOwnership {\r\n        /// @dev The address of the sibling contract that is used to generate player\r\n    ///  genetic combination algorithm.\r\n    using SafeMath for uint256;\r\n    RandomPlayerInterface public randomPlayer;\r\n\r\n    uint256 constant public exchangePlayerTokenCount = 100 * (10**18);\r\n\r\n    uint256 constant promoCreationPlayerLimit = 50000;\r\n\r\n    uint256 public promoCreationPlayerCount;\r\n\r\n    uint256 public promoEndTime;\r\n    mapping (address => uint256) public userToken2PlayerCount;\r\n\r\n    event ExchangePlayer(address indexed user, uint256 count);\r\n\r\n    function BSMinting() public {\r\n        promoEndTime = now + 2 weeks;\r\n    }\r\n\r\n    function setPromoEndTime(uint256 _endTime) external onlyCOO {\r\n        promoEndTime = _endTime;\r\n    }\r\n\r\n    /// @dev Update the address of the generator contract, can only be called by the CEO.\r\n    /// @param _address An address of a contract instance to be used from this point forward.\r\n    function setRandomPlayerAddress(address _address) external onlyCEO {\r\n        RandomPlayerInterface candidateContract = RandomPlayerInterface(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\r\n        require(candidateContract.isRandomPlayer());\r\n\r\n        // Set the new contract address\r\n        randomPlayer = candidateContract;\r\n    }\r\n\r\n    function createPromoPlayer(address _owner, uint256 _typeId, uint256 _attack, uint256 _defense,\r\n            uint256 _stamina, uint256 _xp, uint256 _isKeeper, uint256 _skillId) external onlyCOO {\r\n        address sender = _owner;\r\n        if (sender == address(0)) {\r\n             sender = cooAddress;\r\n        }\r\n\r\n        require(promoCreationPlayerCount < promoCreationPlayerLimit);\r\n        promoCreationPlayerCount++;\r\n        _createPlayer(sender, _typeId, _attack, _defense, _stamina, _xp, _isKeeper, _skillId);\r\n    }\r\n\r\n    function token2Player(address _sender, uint256 _count) public whenNotPaused returns (bool) {\r\n        require(msg.sender == address(joyTokenContract) || msg.sender == _sender);\r\n        require(_count > 0);\r\n        uint256 totalTokenCount = _count.mul(exchangePlayerTokenCount);\r\n        require(joyTokenContract.transferFrom(_sender, cfoAddress, totalTokenCount));\r\n\r\n        uint256 typeId;\r\n        uint256 attack;\r\n        uint256 defense;\r\n        uint256 stamina;\r\n        uint256 xp;\r\n        uint256 isKeeper;\r\n        uint256 skillId;\r\n        for (uint256 i = 0; i < _count; i++) {\r\n            (typeId, attack, defense, stamina, xp, isKeeper, skillId) = randomPlayer.gen();\r\n            _createPlayer(_sender, typeId, attack, defense, stamina, xp, isKeeper, skillId);\r\n        }\r\n\r\n        if (now < promoEndTime) {\r\n            _onPromo(_sender, _count);\r\n        }\r\n        ExchangePlayer(_sender, _count);\r\n        return true;\r\n    }\r\n\r\n    function _onPromo(address _sender, uint256 _count) internal {\r\n        uint256 userCount = userToken2PlayerCount[_sender];\r\n        uint256 userCountNow = userCount.add(_count);\r\n        userToken2PlayerCount[_sender] = userCountNow;\r\n        if (userCount == 0) {\r\n            _createPlayer(_sender, 14, 88, 35, 58, 1, 0, 56);\r\n        }\r\n        if (userCount < 5 && userCountNow >= 5) {\r\n            _createPlayer(_sender, 13, 42, 80, 81, 1, 0, 70);\r\n        }\r\n    }\r\n\r\n    function createCommonPlayer() external onlyCOO returns (uint256)\r\n    {\r\n        require(players.length == 0);\r\n        players.length++;\r\n\r\n        uint16 commonTypeId = 1;\r\n        address commonAdress = address(0);\r\n\r\n        _createPlayer(commonAdress, commonTypeId++, 40, 12, 25, 1, 0, 0);\r\n        _createPlayer(commonAdress, commonTypeId++, 16, 32, 39, 3, 0, 0);\r\n        _createPlayer(commonAdress, commonTypeId++, 30, 35, 13, 3, 0, 0);\r\n        _createPlayer(commonAdress, commonTypeId++, 22, 30, 24, 5, 0, 0);\r\n        _createPlayer(commonAdress, commonTypeId++, 25, 14, 43, 3, 0, 0);\r\n        _createPlayer(commonAdress, commonTypeId++, 15, 40, 22, 5, 0, 0);\r\n        _createPlayer(commonAdress, commonTypeId++, 17, 39, 25, 3, 0, 0);\r\n        _createPlayer(commonAdress, commonTypeId++, 41, 22, 13, 3, 0, 0);\r\n        _createPlayer(commonAdress, commonTypeId++, 30, 31, 28, 1, 0, 0);\r\n        _createPlayer(commonAdress, commonTypeId++, 13, 45, 11, 3, 1, 0);\r\n\r\n        require(commonPlayerCount+1 == players.length);\r\n        return commonPlayerCount;\r\n    }\r\n}\r\n\r\n/// @title \r\ncontract SaleClockAuctionInterface {\r\n    /// @dev simply a boolean to indicate this is the contract we expect to be\r\n    function isSaleClockAuction() public pure returns (bool);\r\n    function createAuction(uint256 _tokenId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration, address _seller) external;\r\n}\r\n\r\n/// @title Handles creating auctions for sale and siring of players.\r\n///  This wrapper of ReverseAuction exists only so that users can create\r\n///  auctions with only one transaction.\r\ncontract BSAuction is BSMinting {\r\n\r\n    /// @dev The address of the ClockAuction contract that handles sales of players. \r\n    SaleClockAuctionInterface public saleAuction;\r\n\r\n    /// @dev Sets the reference to the sale auction.\r\n    /// @param _address - Address of sale contract.\r\n    function setSaleAuctionAddress(address _address) public onlyCEO {\r\n        SaleClockAuctionInterface candidateContract = SaleClockAuctionInterface(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\r\n        require(candidateContract.isSaleClockAuction());\r\n\r\n        // Set the new contract address\r\n        saleAuction = candidateContract;\r\n    }\r\n\r\n    /// @dev Put a player up for auction.\r\n    ///  Does some ownership trickery to create auctions in one tx.\r\n    function createSaleAuction(\r\n        uint256 _playerId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration\r\n    )\r\n        public\r\n        whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        // If player is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(msg.sender, _playerId));\r\n        _approve(_playerId, saleAuction);\r\n        // Sale auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the player.\r\n        saleAuction.createAuction(\r\n            _playerId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n}\r\n\r\ncontract GlobalDefines {\r\n    uint8 constant TYPE_SKILL_ATTRI_ATTACK = 0;\r\n    uint8 constant TYPE_SKILL_ATTRI_DEFENSE = 1;\r\n    uint8 constant TYPE_SKILL_ATTRI_STAMINA = 2;\r\n    uint8 constant TYPE_SKILL_ATTRI_GOALKEEPER = 3;\r\n}\r\n\r\n/// @title Interface for PlayerInterface\r\ncontract PlayerInterface {\r\n    function checkOwner(address _owner, uint32[11] _ids) public view returns (bool);\r\n    function queryPlayerType(uint32[11] _ids) public view returns (uint32[11] playerTypes);\r\n    function queryPlayer(uint32 _id) public view returns (uint16[8]);\r\n    function queryPlayerUnAwakeSkillIds(uint32[11] _playerIds) public view returns (uint16[11] playerUnAwakeSkillIds);\r\n    function tournamentResult(uint32[3][11][32] _playerAwakeSkills) public;\r\n}\r\n\r\ncontract BSCore is GlobalDefines, BSAuction, PlayerInterface {\r\n\r\n    // This is the main BS contract.\r\n\r\n    /// @notice Creates the main BS smart contract instance.\r\n    function BSCore() public {\r\n        // Starts paused.\r\n        paused = true;\r\n\r\n        // the creator of the contract is the initial CEO\r\n        ceoAddress = msg.sender;\r\n\r\n        // the creator of the contract is also the initial COO\r\n        cooAddress = msg.sender;\r\n    }\r\n\r\n    /// @dev Sets the reference to the JOY token contract.\r\n    /// @param _address - Address of JOY token contract.\r\n    function setJOYTokenAddress(address _address) external onlyCOO {\r\n        // Set the new contract address\r\n        joyTokenContract = ERC827(_address);\r\n    }\r\n\r\n    /// @dev Sets the reference to the Tournament token contract.\r\n    /// @param _address - Address of Tournament token contract.\r\n    function setTournamentAddress(address _address) external onlyCOO {\r\n        TournamentInterface candidateContract = TournamentInterface(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\r\n        require(candidateContract.isTournament());\r\n\r\n        // Set the new contract address\r\n        tournamentContract = candidateContract;\r\n    }\r\n\r\n    function() external {\r\n        revert();\r\n    }\r\n\r\n    function withdrawJOYTokens() external onlyCFO {\r\n        uint256 value = joyTokenContract.balanceOf(address(this));\r\n        joyTokenContract.transfer(cfoAddress, value);\r\n    }\r\n\r\n    /// @notice Returns all the relevant information about a specific player.\r\n    /// @param _id The ID of the player of interest.\r\n    function getPlayer(uint256 _id)\r\n        external\r\n        view\r\n        returns (\r\n        uint256 typeId,\r\n        uint256 attack,\r\n        uint256 defense,\r\n        uint256 stamina,\r\n        uint256 xp,\r\n        uint256 isKeeper,\r\n        uint256 skillId,\r\n        uint256 isSkillOn\r\n    ) {\r\n        Player storage player = players[_id];\r\n\r\n        typeId = uint256(player.typeId);\r\n        attack = uint256(player.attack);\r\n        defense = uint256(player.defense);\r\n        stamina = uint256(player.stamina);\r\n        xp = uint256(player.xp);\r\n        isKeeper = uint256(player.isKeeper);\r\n        skillId = uint256(player.skillId);\r\n        isSkillOn = uint256(player.isSkillOn);\r\n    }\r\n\r\n    function checkOwner(address _owner, uint32[11] _ids) public view returns (bool) {\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            uint256 _id = _ids[i];\r\n            if ((_id <= 0 || _id > commonPlayerCount) && !_owns(_owner, _id)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function queryPlayerType(uint32[11] _ids) public view returns (uint32[11] playerTypes) {\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            uint256 _id = _ids[i];\r\n            Player storage player = players[_id];\r\n            playerTypes[i] = player.typeId;\r\n        }\r\n    }\r\n\r\n    function queryPlayer(uint32 _id)\r\n        public\r\n        view\r\n        returns (\r\n        uint16[8]\r\n    ) {\r\n        Player storage player = players[_id];\r\n        return [player.typeId, player.attack, player.defense, player.stamina, player.xp, player.isKeeper, player.skillId, player.isSkillOn];\r\n    }\r\n\r\n    function queryPlayerUnAwakeSkillIds(uint32[11] _playerIds)\r\n        public\r\n        view\r\n        returns (\r\n        uint16[11] playerUnAwakeSkillIds\r\n    ) {\r\n        for (uint256 i = 0; i < _playerIds.length; i++) {\r\n            Player storage player = players[_playerIds[i]];\r\n            if (player.skillId > 0 && player.isSkillOn == 0)\r\n            {\r\n                playerUnAwakeSkillIds[i] = player.skillId;\r\n            }\r\n        }\r\n    }\r\n\r\n    function tournamentResult(uint32[3][11][32] _playerAwakeSkills) public {\r\n        require(msg.sender == address(tournamentContract));\r\n\r\n        for (uint8 i = 0; i < 32; i++) {\r\n            for (uint8 j = 0; j < 11; j++) {\r\n                uint32 _id = _playerAwakeSkills[i][j][0];\r\n                Player storage player = players[_id];\r\n                if (player.skillId > 0 && player.isSkillOn == 0) {\r\n                    uint32 skillType = _playerAwakeSkills[i][j][1];\r\n                    uint8 skillAddAttri = uint8(_playerAwakeSkills[i][j][2]);\r\n\r\n                    if (skillType == TYPE_SKILL_ATTRI_ATTACK) {\r\n                        player.attack += skillAddAttri;\r\n                        player.isSkillOn = 1;\r\n                    }\r\n\r\n                    if (skillType == TYPE_SKILL_ATTRI_DEFENSE) {\r\n                        player.defense += skillAddAttri;\r\n                        player.isSkillOn = 1;\r\n                    }\r\n\r\n                    if (skillType == TYPE_SKILL_ATTRI_STAMINA) {\r\n                        player.stamina += skillAddAttri;\r\n                        player.isSkillOn = 1;\r\n                    }\r\n\r\n                    if (skillType == TYPE_SKILL_ATTRI_GOALKEEPER && player.isKeeper == 0) {\r\n                        player.isKeeper = 1;\r\n                        player.isSkillOn = 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_ids\",\"type\":\"uint32[11]\"}],\"name\":\"checkOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"queryPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16[8]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToken2PlayerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setJOYTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"joyTokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"token2Player\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreationPlayerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangePlayerTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setPromoEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createCommonPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ids\",\"type\":\"uint32[11]\"}],\"name\":\"queryPlayerType\",\"outputs\":[{\"name\":\"playerTypes\",\"type\":\"uint32[11]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawJOYTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_typeId\",\"type\":\"uint256\"},{\"name\":\"_attack\",\"type\":\"uint256\"},{\"name\":\"_defense\",\"type\":\"uint256\"},{\"name\":\"_stamina\",\"type\":\"uint256\"},{\"name\":\"_xp\",\"type\":\"uint256\"},{\"name\":\"_isKeeper\",\"type\":\"uint256\"},{\"name\":\"_skillId\",\"type\":\"uint256\"}],\"name\":\"createPromoPlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"name\":\"typeId\",\"type\":\"uint256\"},{\"name\":\"attack\",\"type\":\"uint256\"},{\"name\":\"defense\",\"type\":\"uint256\"},{\"name\":\"stamina\",\"type\":\"uint256\"},{\"name\":\"xp\",\"type\":\"uint256\"},{\"name\":\"isKeeper\",\"type\":\"uint256\"},{\"name\":\"skillId\",\"type\":\"uint256\"},{\"name\":\"isSkillOn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTournamentAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerIds\",\"type\":\"uint32[11]\"}],\"name\":\"queryPlayerUnAwakeSkillIds\",\"outputs\":[{\"name\":\"playerUnAwakeSkillIds\",\"type\":\"uint16[11]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRandomPlayerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tournamentContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAwakeSkills\",\"type\":\"uint32[3][11][32]\"}],\"name\":\"tournamentResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"ExchangePlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"typeId\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"attack\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"defense\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"stamina\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"xp\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"isKeeper\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"skillId\",\"type\":\"uint16\"}],\"name\":\"Birth\",\"type\":\"event\"}]","ContractName":"BSCore","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5e0d434e130b1552ddcd8c334df444accf955d02cf33391cd261c4b7d4555627"}]}