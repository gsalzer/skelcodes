{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\ncontract Managble {\r\n    address public manager;\r\n\r\n    function Managble() {\r\n        manager = msg.sender;\r\n    }\r\n\r\n    modifier onlyManager {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    function changeManager(address newManager) onlyManager {\r\n        if (newManager != address(0)) {\r\n            manager = newManager;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Pausable is Managble {\r\n    \r\n    bool public paused = false;\r\n\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() onlyManager whenNotPaused returns (bool) {\r\n        paused = true;\r\n        Pause();\r\n        return true;\r\n    }\r\n\r\n    function unpause() onlyManager whenPaused returns (bool) {\r\n        paused = false;\r\n        Unpause();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract SafeMath {\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) throw;\r\n  }\r\n\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract RedPocket is Pausable, SafeMath {\r\n\r\n    // FIELDS \r\n    uint public minReward = 20000000000000000; // to make sure what claimants get can overcome the gas they paid. unit in wei\r\n    uint public promotionCommisionPercent = 1; // unit in percent\r\n    \r\n    Promotion[] public allPromotions;\r\n    mapping (uint256 => address) public promotionIndexToHost; // For host: A mapping from promotion IDs to the address that owns them.\r\n    mapping (address => uint256) hostingCount; // For host: A mapping from host address to count of promotion that address owns. (ownershipTokenCount)\r\n    mapping (uint256 => address) public promotionIndexToClaimant; // For claimant: A mapping from promotion IDs to the address that did the claim.\r\n    mapping (address => uint256) claimedCount; // For claimant: A mapping from claimant address to count of promotion that address claimed. (ownershipTokenCount)\r\n\r\n    // apply cooldowns to claimant to prevent individual claim-spam (might not apply)\r\n    uint32[14] public cooldowns = [\r\n        uint32(1 minutes),\r\n        uint32(2 minutes),\r\n        uint32(5 minutes),\r\n        uint32(10 minutes),\r\n        uint32(30 minutes),\r\n        uint32(1 hours),\r\n        uint32(2 hours),\r\n        uint32(4 hours),\r\n        uint32(8 hours),\r\n        uint32(16 hours),\r\n        uint32(1 days),\r\n        uint32(2 days),\r\n        uint32(4 days),\r\n        uint32(7 days)\r\n    ];\r\n\r\n\r\n    // uint public numOfAllPromotions; // this is for the ease of showing value in the contract directly.\r\n    uint[] public finishedPromotionIDs;\r\n    uint public numOfFinishedPromotions;\r\n\r\n    // uint public totalNumOfClaimants;\r\n    // uint public totalEtherGivenOut;\r\n\r\n    // EVENETS\r\n\r\n    // STRUCT\r\n    struct Promotion {\r\n        uint id;\r\n        address host; // each promotion hosted by an address\r\n        string name; // promotion title\r\n        string msg; // promotion's promoting message\r\n        string url;\r\n\r\n        uint eachRedPocketAmt; // the amount of reward in each red pocket. Unit in msg.value / wei\r\n        uint maxRedPocketNum; \r\n        uint claimedNum;\r\n        uint moneyPool;\r\n\r\n        uint startBlock; // the starting represent in blocks\r\n        uint blockLast; // duration of the promotion, count in blocks\r\n\r\n        bool finished;\r\n    }\r\n\r\n    // constructor\r\n    function RedPocket() { }\r\n\r\n    // when a host create an promotion event\r\n    function newPromotion(\r\n        string _name, \r\n        string _msg, \r\n        string _url,\r\n        uint _eachAmt,\r\n        uint _maxNum,\r\n        uint _blockStart,\r\n        uint _blockLast\r\n    ) \r\n        whenNotPaused\r\n        payable\r\n        returns (uint)\r\n    {\r\n        // check min reward requirement\r\n        require(_eachAmt > minReward); // unit in wei\r\n\r\n        // check if the deposit amount is enough for the input \r\n        uint256 inputAmt = _eachAmt * _maxNum; // unit in wei\r\n        require(inputAmt <= msg.value); \r\n\r\n        // service charging\r\n        require (manager.send(safeDiv(safeMul(msg.value, promotionCommisionPercent), 100)));\r\n        uint deposit = safeDiv(safeMul(msg.value, 100 - promotionCommisionPercent), 100);\r\n\r\n        Promotion memory _promotion = Promotion({\r\n            id: allPromotions.length,\r\n            host: msg.sender,\r\n            name: _name,\r\n            msg: _msg,\r\n            url: _url,\r\n            eachRedPocketAmt: safeDiv(deposit, _maxNum),\r\n            maxRedPocketNum: _maxNum,\r\n            claimedNum: 0,\r\n            moneyPool: deposit,\r\n            startBlock: _blockStart,\r\n            blockLast: _blockLast,\r\n            finished: false\r\n        });\r\n        uint256 newPromotionId = allPromotions.push(_promotion) - 1; // set promotion ID\r\n\r\n        promotionIndexToHost[newPromotionId] = msg.sender;\r\n        hostingCount[msg.sender]++;\r\n\r\n        return newPromotionId;\r\n    }\r\n\r\n    // this is the 'grab red pocket' function\r\n    function claimReward(uint _promoteID, uint _moneyPool) whenNotPaused {\r\n        Promotion storage p = allPromotions[_promoteID];\r\n\r\n        // prevent direct try and claim\r\n        require(p.moneyPool == _moneyPool); \r\n\r\n        // check if promotion is closed\r\n        require(p.finished == false);\r\n\r\n        // prevent same claimant claimed twice in same promotion\r\n        require(!_claims(msg.sender, _promoteID));\r\n\r\n        // send red pocket\r\n        if (msg.sender.send(p.eachRedPocketAmt)) {\r\n            p.moneyPool -= p.eachRedPocketAmt;\r\n            p.claimedNum++;\r\n            promotionIndexToClaimant[_promoteID] = msg.sender;\r\n            claimedCount[msg.sender]++;\r\n        }\r\n\r\n        // set promotion finish if moneyPool run out of money / event run out of pocket / timeout\r\n        if (p.moneyPool < p.eachRedPocketAmt || p.claimedNum >= p.maxRedPocketNum || (block.number - p.startBlock >= p.blockLast)) {\r\n            p.finished = true;\r\n            finishedPromotionIDs.push(_promoteID);\r\n            numOfFinishedPromotions++;\r\n        }\r\n    }\r\n\r\n    // Returns the total number of promotions\r\n    function totalPromotions() public view returns (uint) {\r\n        return allPromotions.length;\r\n    }\r\n\r\n    // Checks if a given address already claimed in a promotion\r\n    function _claims(address _claimant, uint256 _promotionId) internal returns (bool) {\r\n        return promotionIndexToHost[_promotionId] == _claimant;\r\n    }\r\n\r\n    // For host: Returns the number of promotions hosted by a specific address.\r\n    function numberOfHosting(address _host) public returns (uint256 count) {\r\n        return hostingCount[_host];\r\n    }\r\n\r\n    // For host: returns an array of promotion IDs that an address hosts\r\n    function promotionsOfHost(address _host) external view returns(uint256[] promotionIDs) {\r\n        uint256 count = numberOfHosting(_host);\r\n\r\n        if (count == 0) {\r\n            return new uint256[](0); // Return an empty array\r\n        } else {\r\n            uint256[] memory result = new uint256[](count);\r\n            uint256 resultIndex = 0;\r\n            uint256 promotionId;\r\n\r\n            for (promotionId = 0; promotionId < allPromotions.length; promotionId++) {\r\n                if (promotionIndexToHost[promotionId] == _host) {\r\n                    result[resultIndex] = promotionId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    // For claimant: Returns the number of promotions claimed by a specific address.\r\n    function numberOfClaimed(address _claimant) public returns (uint256 count) {\r\n        return claimedCount[_claimant];\r\n    }\r\n\r\n    // For claimant: returns an array of promotion IDs that an address claimed\r\n    function promotionsOfClaimant(address _claimant) external view returns(uint256[] promotionIDs) {\r\n        uint256 count = numberOfClaimed(_claimant);\r\n\r\n        if (count == 0) {\r\n            return new uint256[](0); // Return an empty array\r\n        } else {\r\n            uint256[] memory result = new uint256[](count);\r\n            uint256 resultIndex = 0;\r\n            uint256 promotionId;\r\n\r\n            for (promotionId = 0; promotionId < allPromotions.length; promotionId++) {\r\n                if (promotionIndexToClaimant[promotionId] == _claimant) {\r\n                    result[resultIndex] = promotionId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    // // Returns all the relevant information about a specific promotion.\r\n    function getPromotion(uint256 _id)\r\n        external\r\n        view\r\n        returns (\r\n        uint id,\r\n        address host,\r\n        string name,\r\n        string msg,\r\n        string url,\r\n        uint eachRedPocketAmt,\r\n        uint maxRedPocketNum,\r\n        uint claimedNum,\r\n        uint moneyPool,\r\n        uint startBlock,\r\n        uint blockLast,\r\n        bool finished\r\n    ) {\r\n        Promotion storage p = allPromotions[_id];\r\n\r\n        id = p.id;\r\n        host = p.host;\r\n        name = p.name;\r\n        msg = p.msg;\r\n        url = p.url;\r\n        eachRedPocketAmt = p.eachRedPocketAmt;\r\n        maxRedPocketNum = p.maxRedPocketNum;\r\n        claimedNum = p.claimedNum;\r\n        moneyPool = p.moneyPool;\r\n        startBlock = p.startBlock;\r\n        blockLast = p.blockLast;\r\n        finished = p.finished;\r\n    }\r\n\r\n    // The host is able to withdraw the fund when the promotion is finished\r\n    function safeWithdraw(uint _promoteID) whenNotPaused {\r\n        Promotion storage p = allPromotions[_promoteID];\r\n        require(p.finished == true);\r\n        \r\n        if (msg.sender.send(p.moneyPool)) {\r\n            p.moneyPool = 0;\r\n        }\r\n    }\r\n\r\n    // either host or manager can end the promotion if needed\r\n    function endPromotion(uint _promoteID) {\r\n        Promotion storage p = allPromotions[_promoteID];\r\n        require(msg.sender == p.host || msg.sender == manager);\r\n        p.finished = true;\r\n\t}\r\n\r\n    function updateCommission(uint _newPercent) whenNotPaused onlyManager {\r\n        promotionCommisionPercent = _newPercent;\r\n    }\r\n\r\n    function updateMinReward(uint _newReward) whenNotPaused onlyManager {\r\n        minReward = _newReward;\r\n    }\r\n\r\n    function drain() whenPaused onlyManager {\r\n\t\tif (!manager.send(this.balance)) throw;\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"numOfFinishedPromotions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPromotion\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"host\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"msg\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"eachRedPocketAmt\",\"type\":\"uint256\"},{\"name\":\"maxRedPocketNum\",\"type\":\"uint256\"},{\"name\":\"claimedNum\",\"type\":\"uint256\"},{\"name\":\"moneyPool\",\"type\":\"uint256\"},{\"name\":\"startBlock\",\"type\":\"uint256\"},{\"name\":\"blockLast\",\"type\":\"uint256\"},{\"name\":\"finished\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_claimant\",\"type\":\"address\"}],\"name\":\"numberOfClaimed\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_host\",\"type\":\"address\"}],\"name\":\"numberOfHosting\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"promotionIndexToHost\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPromotions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promotionCommisionPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPromotions\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"host\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"msg\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"eachRedPocketAmt\",\"type\":\"uint256\"},{\"name\":\"maxRedPocketNum\",\"type\":\"uint256\"},{\"name\":\"claimedNum\",\"type\":\"uint256\"},{\"name\":\"moneyPool\",\"type\":\"uint256\"},{\"name\":\"startBlock\",\"type\":\"uint256\"},{\"name\":\"blockLast\",\"type\":\"uint256\"},{\"name\":\"finished\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_promoteID\",\"type\":\"uint256\"},{\"name\":\"_moneyPool\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"promotionIndexToClaimant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPercent\",\"type\":\"uint256\"}],\"name\":\"updateCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"changeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_msg\",\"type\":\"string\"},{\"name\":\"_url\",\"type\":\"string\"},{\"name\":\"_eachAmt\",\"type\":\"uint256\"},{\"name\":\"_maxNum\",\"type\":\"uint256\"},{\"name\":\"_blockStart\",\"type\":\"uint256\"},{\"name\":\"_blockLast\",\"type\":\"uint256\"}],\"name\":\"newPromotion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"finishedPromotionIDs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_promoteID\",\"type\":\"uint256\"}],\"name\":\"safeWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_promoteID\",\"type\":\"uint256\"}],\"name\":\"endPromotion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_claimant\",\"type\":\"address\"}],\"name\":\"promotionsOfClaimant\",\"outputs\":[{\"name\":\"promotionIDs\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_host\",\"type\":\"address\"}],\"name\":\"promotionsOfHost\",\"outputs\":[{\"name\":\"promotionIDs\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newReward\",\"type\":\"uint256\"}],\"name\":\"updateMinReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"RedPocket","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5a43a044d893b8dbfed0f051efbc9e946fd62d33e92fc382d563b94739f10515"}]}