{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n    \r\n    \r\n    /**\r\n     * @title ERC20Basic\r\n     * @dev Simpler version of ERC20 interface\r\n     * @dev see https://github.com/ethereum/EIPs/issues/179\r\n     */\r\n    contract ERC20Basic {\r\n      function totalSupply() public view returns (uint256);\r\n      function balanceOf(address who) public view returns (uint256);\r\n      function transfer(address to, uint256 value) public returns (bool);\r\n      event Transfer(address indexed from, address indexed to, uint256 value);\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * @title Ownable\r\n     * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n     * functions, this simplifies the implementation of \"user permissions\".\r\n     */\r\n    contract Ownable {\r\n      address public owner;\r\n    \r\n    \r\n      event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    \r\n      /**\r\n       * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n       * account.\r\n       */\r\n      function Ownable() public {\r\n        owner = msg.sender;\r\n      }\r\n    \r\n      /**\r\n       * @dev Throws if called by any account other than the owner.\r\n       */\r\n      modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n      }\r\n    \r\n      /**\r\n       * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n       * @param newOwner The address to transfer ownership to.\r\n       */\r\n      function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n      }\r\n    \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    /**\r\n     * @title SafeMath\r\n     * @dev Math operations with safety checks that throw on error\r\n     */\r\n    library SafeMath {\r\n    \r\n      /**\r\n      * @dev Multiplies two numbers, throws on overflow.\r\n      */\r\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n      }\r\n    \r\n      /**\r\n      * @dev Integer division of two numbers, truncating the quotient.\r\n      */\r\n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n      }\r\n    \r\n      /**\r\n      * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n      */\r\n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n      }\r\n    \r\n      /**\r\n      * @dev Adds two numbers, throws on overflow.\r\n      */\r\n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n      }\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * @title Crowdsale\r\n     * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n     * Crowdsales have a start and end timestamps, where investors can make\r\n     * token purchases and the crowdsale will assign them tokens based\r\n     * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n     * as they arrive.\r\n     */\r\n    contract Crowdsale is Ownable {\r\n        using SafeMath for uint256;\r\n    \r\n        // The token being sold\r\n        MintableToken public token;\r\n    \r\n        // start and end timestamps where investments are allowed (both inclusive)\r\n        uint256 public preIcoStartTime;\r\n        uint256 public icoStartTime;\r\n        uint256 public preIcoEndTime;\r\n        uint256 public icoEndTime;\r\n    \r\n        // address where funds are collected\r\n        address public wallet;\r\n    \r\n        // how many token units a buyer gets per wei\r\n        uint256 public preIcoRate;\r\n        uint256 public icoRate;\r\n    \r\n        // amount of raised money in wei\r\n        uint256 public weiRaised;\r\n    \r\n        /**\r\n         * event for token purchase logging\r\n         * @param purchaser who paid for the tokens\r\n         * @param beneficiary who got the tokens\r\n         * @param value weis paid for purchase\r\n         * @param amount amount of tokens purchased\r\n         */\r\n        event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    \r\n    \r\n        function Crowdsale(uint256 _preIcoStartTime, uint256 _preIcoEndTime, uint256 _preIcoRate, uint256 _icoStartTime, uint256 _icoEndTime, uint256 _icoRate, address _wallet) public {\r\n            require(_preIcoStartTime >= now);\r\n            require(_preIcoEndTime >= _preIcoStartTime);\r\n    \r\n            require(_icoStartTime >= _preIcoEndTime);\r\n            require(_icoEndTime >= _icoStartTime);\r\n    \r\n            require(_preIcoRate > 0);\r\n            require(_icoRate > 0);\r\n    \r\n            require(_wallet != address(0));\r\n    \r\n            token = createTokenContract();\r\n            preIcoStartTime = _preIcoStartTime;\r\n            icoStartTime = _icoStartTime;\r\n    \r\n            preIcoEndTime = _preIcoEndTime;\r\n            icoEndTime = _icoEndTime;\r\n    \r\n            preIcoRate = _preIcoRate;\r\n            icoRate = _icoRate;\r\n    \r\n            wallet = _wallet;\r\n        }\r\n    \r\n        // fallback function can be used to buy tokens\r\n        function () external payable {\r\n            buyTokens(msg.sender);\r\n        }\r\n    \r\n        // low level token purchase function\r\n        function buyTokens(address beneficiary) public payable {\r\n            require(beneficiary != address(0));\r\n            require(validPurchase());\r\n    \r\n            uint256 weiAmount = msg.value;\r\n    \r\n            // calculate token amount to be created\r\n            uint256 tokens = getTokenAmount(weiAmount);\r\n    \r\n            // update state\r\n            weiRaised = weiRaised.add(weiAmount);\r\n    \r\n            //send tokens to beneficiary.\r\n            token.mint(beneficiary, tokens);\r\n    \r\n            //send same amount of tokens to owner.\r\n            token.mint(wallet, tokens);\r\n    \r\n            TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    \r\n            forwardFunds();\r\n        }\r\n    \r\n        // @return true if pre-ico crowdsale event has ended\r\n        function preIcoHasEnded() public view returns (bool) {\r\n            return now > preIcoEndTime;\r\n        }\r\n    \r\n        // @return true if ico crowdsale event has ended\r\n        function icoHasEnded() public view returns (bool) {\r\n            return now > icoEndTime;\r\n        }\r\n    \r\n        // creates the token to be sold.\r\n        // override this method to have crowdsale of a specific mintable token.\r\n        function createTokenContract() internal returns (MintableToken) {\r\n            return new MintableToken();\r\n        }\r\n    \r\n        // Override this method to have a way to add business logic to your crowdsale when buying\r\n        function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\r\n            if(!preIcoHasEnded()){\r\n                return weiAmount.mul(preIcoRate);\r\n            }else{\r\n                return weiAmount.mul(icoRate);\r\n            }\r\n        }\r\n    \r\n        // send ether to the fund collection wallet\r\n        // override to create custom fund forwarding mechanisms\r\n        function forwardFunds() internal {\r\n            wallet.transfer(msg.value);\r\n        }\r\n    \r\n        // @return true if the transaction can buy tokens\r\n        function validPurchase() internal view returns (bool) {\r\n            bool withinPeriod = now >= preIcoStartTime && now <= preIcoEndTime || now >= icoStartTime && now <= icoEndTime;\r\n            bool nonZeroPurchase = msg.value != 0;\r\n            return withinPeriod && nonZeroPurchase;\r\n        }\r\n    \r\n        // allows transfer of token to new owner\r\n        function transferTokenOwnership(address _newOwner) public {\r\n            require(msg.sender == owner); // Only the owner of the crowdsale contract should be able to call this function.\r\n            //Now lets reference the token that we created....\r\n            token.transferOwnership(_newOwner);\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    /**\r\n     * @title ERC20 interface\r\n     * @dev see https://github.com/ethereum/EIPs/issues/20\r\n     */\r\n    contract ERC20 is ERC20Basic {\r\n      function allowance(address owner, address spender) public view returns (uint256);\r\n      function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n      function approve(address spender, uint256 value) public returns (bool);\r\n      event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n    \r\n    /**\r\n     * @title Basic token\r\n     * @dev Basic version of StandardToken, with no allowances.\r\n     */\r\n    contract BasicToken is ERC20Basic {\r\n      using SafeMath for uint256;\r\n    \r\n      mapping(address => uint256) balances;\r\n    \r\n      uint256 totalSupply_;\r\n    \r\n      /**\r\n      * @dev total number of tokens in existence\r\n      */\r\n      function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n      }\r\n    \r\n      /**\r\n      * @dev transfer token for a specified address\r\n      * @param _to The address to transfer to.\r\n      * @param _value The amount to be transferred.\r\n      */\r\n      function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n    \r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      }\r\n    \r\n      /**\r\n      * @dev Gets the balance of the specified address.\r\n      * @param _owner The address to query the the balance of.\r\n      * @return An uint256 representing the amount owned by the passed address.\r\n      */\r\n      function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n      }\r\n    \r\n    }\r\n    \r\n    \r\n    /**\r\n     * @title Standard ERC20 token\r\n     *\r\n     * @dev Implementation of the basic standard token.\r\n     * @dev https://github.com/ethereum/EIPs/issues/20\r\n     * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n     */\r\n    contract StandardToken is ERC20, BasicToken {\r\n    \r\n      mapping (address => mapping (address => uint256)) internal allowed;\r\n    \r\n    \r\n      /**\r\n       * @dev Transfer tokens from one address to another\r\n       * @param _from address The address which you want to send tokens from\r\n       * @param _to address The address which you want to transfer to\r\n       * @param _value uint256 the amount of tokens to be transferred\r\n       */\r\n      function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n    \r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      }\r\n    \r\n      /**\r\n       * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n       *\r\n       * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n       * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n       * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n       * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n       * @param _spender The address which will spend the funds.\r\n       * @param _value The amount of tokens to be spent.\r\n       */\r\n      function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n      }\r\n    \r\n      /**\r\n       * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n       * @param _owner address The address which owns the funds.\r\n       * @param _spender address The address which will spend the funds.\r\n       * @return A uint256 specifying the amount of tokens still available for the spender.\r\n       */\r\n      function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n      }\r\n    \r\n      /**\r\n       * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n       *\r\n       * approve should be called when allowed[_spender] == 0. To increment\r\n       * allowed value is better to use this function to avoid 2 calls (and wait until\r\n       * the first transaction is mined)\r\n       * From MonolithDAO Token.sol\r\n       * @param _spender The address which will spend the funds.\r\n       * @param _addedValue The amount of tokens to increase the allowance by.\r\n       */\r\n      function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n      }\r\n    \r\n      /**\r\n       * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n       *\r\n       * approve should be called when allowed[_spender] == 0. To decrement\r\n       * allowed value is better to use this function to avoid 2 calls (and wait until\r\n       * the first transaction is mined)\r\n       * From MonolithDAO Token.sol\r\n       * @param _spender The address which will spend the funds.\r\n       * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n       */\r\n      function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n          allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n          allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n      }\r\n    \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    /**\r\n     * @title Mintable token\r\n     * @dev Simple ERC20 Token example, with mintable token creation\r\n     * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n     * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n     */\r\n    contract MintableToken is StandardToken, Ownable {\r\n      event Mint(address indexed to, uint256 amount);\r\n      event MintFinished();\r\n    \r\n      bool public mintingFinished = false;\r\n    \r\n    \r\n      modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n      }\r\n    \r\n      /**\r\n       * @dev Function to mint tokens\r\n       * @param _to The address that will receive the minted tokens.\r\n       * @param _amount The amount of tokens to mint.\r\n       * @return A boolean that indicates if the operation was successful.\r\n       */\r\n      function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n      }\r\n    \r\n      /**\r\n       * @dev Function to stop minting new tokens.\r\n       * @return True if the operation was successful.\r\n       */\r\n      function finishMinting() onlyOwner canMint public returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    /**\r\n     * @title Burnable Token\r\n     * @dev Token that can be irreversibly burned (destroyed).\r\n     */\r\n    contract BurnableToken is BasicToken {\r\n    \r\n      event Burn(address indexed burner, uint256 value);\r\n    \r\n      /**\r\n       * @dev Burns a specific amount of tokens.\r\n       * @param _value The amount of token to be burned.\r\n       */\r\n      function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n    \r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        Burn(burner, _value);\r\n      }\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * @title SocialMediaIncomeCrowdsaleToken\r\n     * @dev ERC20 Token that can be minted.\r\n     * It is meant to be used in a crowdsale contract.\r\n     */\r\n    contract SocialMediaIncomeCrowdsaleToken is MintableToken, BurnableToken {\r\n    \r\n        string public constant name = \"Social Media Income\"; // solium-disable-line uppercase\r\n        string public constant symbol = \"SMI\"; // solium-disable-line uppercase\r\n        uint8 public constant decimals = 18; // solium-disable-line uppercase\r\n    \r\n    }\r\n    \r\n    \r\n    /**\r\n     * @title SocialMediaIncomeCrowdsale\r\n     * @dev This is a fully fledged crowdsale.\r\n     * The way to add new features to a base crowdsale is by multiple inheritance.\r\n     *\r\n     * After adding multiple features it's good practice to run integration tests\r\n     * to ensure that subcontracts works together as intended.\r\n     */\r\n    contract SocialMediaIncomeCrowdsale is Crowdsale {\r\n    \r\n        function SocialMediaIncomeCrowdsale(uint256 _preIcoStartTime, uint256 _preIcoEndTime, uint256 _preIcoRate, uint256 _icoStartTime, uint256 _icoEndTime, uint256 _icoRate, address _wallet) public\r\n        Crowdsale(_preIcoStartTime, _preIcoEndTime, _preIcoRate, _icoStartTime, _icoEndTime, _icoRate, _wallet)\r\n        {\r\n    \r\n        }\r\n    \r\n        function createTokenContract() internal returns (MintableToken) {\r\n            return new SocialMediaIncomeCrowdsaleToken();\r\n        }\r\n    }","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoHasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoHasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_preIcoStartTime\",\"type\":\"uint256\"},{\"name\":\"_preIcoEndTime\",\"type\":\"uint256\"},{\"name\":\"_preIcoRate\",\"type\":\"uint256\"},{\"name\":\"_icoStartTime\",\"type\":\"uint256\"},{\"name\":\"_icoEndTime\",\"type\":\"uint256\"},{\"name\":\"_icoRate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SocialMediaIncomeCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005aa4a58f000000000000000000000000000000000000000000000000000000005aab3d0f0000000000000000000000000000000000000000000000000000000000001388000000000000000000000000000000000000000000000000000000005aab3d0f000000000000000000000000000000000000000000000000000000005ad9618f0000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000004ea86df224bab2b4e95eb2fe1b6e3bb1a348cc7f","Library":"","SwarmSource":"bzzr://9ae394a89a903da76fac89b5d199f681283e3222e750150c6c7967d7b9843fd8"}]}