{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// SafeMath is a part of Zeppelin Solidity library\r\n// licensed under MIT License\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/LICENSE\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// https://github.com/OpenZeppelin/zeppelin-solidity\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev Protection from short address attack\r\n    */\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length == size + 4);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        _postTransferHook(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Hook for custom actions to be executed after transfer has completed\r\n    * @param _from Transferred from\r\n    * @param _to Transferred to\r\n    * @param _value Value transferred\r\n    */\r\n    function _postTransferHook(address _from, address _to, uint256 _value) internal;\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        _postTransferHook(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract Owned {\r\n    address owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /// @dev Contract constructor\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n}\r\n\r\n\r\ncontract AcceptsTokens {\r\n    ETToken public tokenContract;\r\n\r\n    function AcceptsTokens(address _tokenContract) public {\r\n        tokenContract = ETToken(_tokenContract);\r\n    }\r\n\r\n    modifier onlyTokenContract {\r\n        require(msg.sender == address(tokenContract));\r\n        _;\r\n    }\r\n\r\n    function acceptTokens(address _from, uint256 _value, uint256 param1, uint256 param2, uint256 param3) external;\r\n}\r\n\r\ncontract ETToken is Owned, StandardToken {\r\n    using SafeMath for uint;\r\n\r\n    string public name = \"ETH.TOWN Token\";\r\n    string public symbol = \"ETIT\";\r\n    uint8 public decimals = 18;\r\n\r\n    address public beneficiary;\r\n    address public oracle;\r\n    address public heroContract;\r\n    modifier onlyOracle {\r\n        require(msg.sender == oracle);\r\n        _;\r\n    }\r\n\r\n    mapping (uint32 => address) public floorContracts;\r\n    mapping (address => bool) public canAcceptTokens;\r\n\r\n    mapping (address => bool) public isMinter;\r\n\r\n    modifier onlyMinters {\r\n        require(msg.sender == owner || isMinter[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    event Dividend(uint256 value);\r\n    event Withdrawal(address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    function ETToken() public {\r\n        oracle = owner;\r\n        beneficiary = owner;\r\n\r\n        totalSupply_ = 0;\r\n    }\r\n\r\n    function setOracle(address _oracle) external onlyOwner {\r\n        oracle = _oracle;\r\n    }\r\n    function setBeneficiary(address _beneficiary) external onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n    function setHeroContract(address _heroContract) external onlyOwner {\r\n        heroContract = _heroContract;\r\n    }\r\n\r\n    function _mintTokens(address _user, uint256 _amount) private {\r\n        require(_user != 0x0);\r\n\r\n        balances[_user] = balances[_user].add(_amount);\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n\r\n        emit Transfer(address(this), _user, _amount);\r\n    }\r\n\r\n    function authorizeFloor(uint32 _index, address _floorContract) external onlyOwner {\r\n        floorContracts[_index] = _floorContract;\r\n    }\r\n\r\n    function _acceptDividends(uint256 _value) internal {\r\n        uint256 beneficiaryShare = _value / 5;\r\n        uint256 poolShare = _value.sub(beneficiaryShare);\r\n\r\n        beneficiary.transfer(beneficiaryShare);\r\n\r\n        emit Dividend(poolShare);\r\n    }\r\n\r\n    function acceptDividends(uint256 _value, uint32 _floorIndex) external {\r\n        require(floorContracts[_floorIndex] == msg.sender);\r\n\r\n        _acceptDividends(_value);\r\n    }\r\n\r\n    function rewardTokensFloor(address _user, uint256 _tokens, uint32 _floorIndex) external {\r\n        require(floorContracts[_floorIndex] == msg.sender);\r\n\r\n        _mintTokens(_user, _tokens);\r\n    }\r\n\r\n    function rewardTokens(address _user, uint256 _tokens) external onlyMinters {\r\n        _mintTokens(_user, _tokens);\r\n    }\r\n\r\n    function() payable public {\r\n        // Intentionally left empty, for use by floors\r\n    }\r\n\r\n    function payoutDividends(address _user, uint256 _value) external onlyOracle {\r\n        _user.transfer(_value);\r\n\r\n        emit Withdrawal(_user, _value);\r\n    }\r\n\r\n    function accountAuth(uint256 /*_challenge*/) external {\r\n        // Does nothing by design\r\n    }\r\n\r\n    function burn(uint256 _amount) external {\r\n        require(balances[msg.sender] >= _amount);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        totalSupply_ = totalSupply_.sub(_amount);\r\n\r\n        emit Burn(msg.sender, _amount);\r\n    }\r\n\r\n    function setCanAcceptTokens(address _address, bool _value) external onlyOwner {\r\n        canAcceptTokens[_address] = _value;\r\n    }\r\n\r\n    function setIsMinter(address _address, bool _value) external onlyOwner {\r\n        isMinter[_address] = _value;\r\n    }\r\n\r\n    function _invokeTokenRecipient(address _from, address _to, uint256 _value, uint256 _param1, uint256 _param2, uint256 _param3) internal {\r\n        if (!canAcceptTokens[_to]) {\r\n            return;\r\n        }\r\n\r\n        AcceptsTokens recipient = AcceptsTokens(_to);\r\n\r\n        recipient.acceptTokens(_from, _value, _param1, _param2, _param3);\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address and forward the parameters to token recipient if any\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    * @param _param1 Parameter 1 for the token recipient\r\n    * @param _param2 Parameter 2 for the token recipient\r\n    * @param _param3 Parameter 3 for the token recipient\r\n    */\r\n    function transferWithParams(address _to, uint256 _value, uint256 _param1, uint256 _param2, uint256 _param3) onlyPayloadSize(5 * 32) external returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        _invokeTokenRecipient(msg.sender, _to, _value, _param1, _param2, _param3);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Hook for custom actions to be executed after transfer has completed\r\n    * @param _from Transferred from\r\n    * @param _to Transferred to\r\n    * @param _value Value transferred\r\n    */\r\n    function _postTransferHook(address _from, address _to, uint256 _value) internal {\r\n        _invokeTokenRecipient(_from, _to, _value, 0, 0, 0);\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract PresaleContract is Owned {\r\n    ETToken public tokenContract;\r\n\r\n    /// @dev Contract constructor\r\n    function PresaleContract(address _tokenContract) public {\r\n        tokenContract = ETToken(_tokenContract);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract ETPotatoPresale is PresaleContract {\r\n    using SafeMath for uint;\r\n\r\n    uint256 public auctionEnd;\r\n    uint256 public itemType;\r\n\r\n    address public highestBidder;\r\n    uint256 public highestBid = 0.001 ether;\r\n    bool public ended;\r\n\r\n    event Bid(address from, uint256 amount);\r\n    event AuctionEnded(address winner, uint256 amount);\r\n\r\n    function ETPotatoPresale(address _presaleToken, uint256 _auctionEnd, uint256 _itemType)\r\n        PresaleContract(_presaleToken)\r\n        public\r\n    {\r\n        auctionEnd = _auctionEnd;\r\n        itemType = _itemType;\r\n    }\r\n\r\n    function _isContract(address _user) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(_user) }\r\n        return size > 0;\r\n    }\r\n\r\n    function auctionExpired() public view returns (bool) {\r\n        return now > auctionEnd;\r\n    }\r\n\r\n    function nextBid() public view returns (uint256) {\r\n        if (highestBid < 0.1 ether) {\r\n            return highestBid.add(highestBid / 2);\r\n        } else if (highestBid < 1 ether) {\r\n            return highestBid.add(highestBid.mul(15).div(100));\r\n        } else {\r\n            return highestBid.add(highestBid.mul(8).div(100));\r\n        }\r\n    }\r\n\r\n    function() public payable {\r\n        require(!_isContract(msg.sender));\r\n        require(!auctionExpired());\r\n\r\n        uint256 requiredBid = nextBid();\r\n\r\n        require(msg.value >= requiredBid);\r\n\r\n        uint256 change = msg.value.sub(requiredBid);\r\n\r\n        uint256 difference = requiredBid.sub(highestBid);\r\n        uint256 reward = difference / 4;\r\n\r\n        if (highestBidder != 0x0) {\r\n            highestBidder.transfer(highestBid.add(reward));\r\n        }\r\n\r\n        if (change > 0) {\r\n            msg.sender.transfer(change);\r\n        }\r\n\r\n        highestBidder = msg.sender;\r\n        highestBid = requiredBid;\r\n\r\n        emit Bid(msg.sender, requiredBid);\r\n    }\r\n\r\n    function endAuction() public onlyOwner {\r\n        require(auctionExpired());\r\n        require(!ended);\r\n\r\n        ended = true;\r\n        emit AuctionEnded(highestBidder, highestBid);\r\n        tokenContract.rewardTokens(highestBidder, highestBid * 200);\r\n\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"itemType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_presaleToken\",\"type\":\"address\"},{\"name\":\"_auctionEnd\",\"type\":\"uint256\"},{\"name\":\"_itemType\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"}]","ContractName":"ETPotatoPresale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008fe19c447821b4cdcdd5012bca1b5469ca96d80d000000000000000000000000000000000000000000000000000000005ab5a3100000000000000000000000000000000000000000000000000000000000000003","Library":"","SwarmSource":"bzzr://8955545c9a8c2a50fa441f05c4892d1f3263e4ffd96583d6c19692f4ad33fa86"}]}