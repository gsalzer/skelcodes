{"status":"1","message":"OK","result":[{"SourceCode":"/*! eft.sol | (c) 2018 Develop by BelovITLab LLC (smartcontract.ru), author @stupidlovejoy | License: MIT */\r\n\r\npragma solidity 0.4.21;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if(a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() { require(msg.sender == owner); _; }\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n        OwnershipTransferred(owner, newOwner);\r\n    }\r\n}\r\n\r\ncontract Manageable is Ownable {\r\n    address[] public managers;\r\n\r\n    event ManagerAdded(address indexed manager);\r\n    event ManagerRemoved(address indexed manager);\r\n\r\n    modifier onlyManager() { require(isManager(msg.sender)); _; }\r\n\r\n    function countManagers() view public returns(uint) {\r\n        return managers.length;\r\n    }\r\n\r\n    function getManagers() view public returns(address[]) {\r\n        return managers;\r\n    }\r\n\r\n    function isManager(address _manager) view public returns(bool) {\r\n        for(uint i = 0; i < managers.length; i++) {\r\n            if(managers[i] == _manager) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function addManager(address _manager) onlyOwner public {\r\n        require(_manager != address(0));\r\n        require(!isManager(_manager));\r\n\r\n        managers.push(_manager);\r\n\r\n        ManagerAdded(_manager);\r\n    }\r\n\r\n    function removeManager(address _manager) onlyOwner public {\r\n        require(isManager(_manager));\r\n\r\n        uint index = 0;\r\n        for(uint i = 0; i < managers.length; i++) {\r\n            if(managers[i] == _manager) {\r\n                index = i;\r\n            }\r\n        }\r\n\r\n        for(; index < managers.length - 1; index++) {\r\n            managers[index] = managers[index + 1];\r\n        }\r\n        \r\n        managers.length--;\r\n        ManagerRemoved(_manager);\r\n    }\r\n}\r\n\r\ncontract Withdrawable is Ownable {\r\n    function withdrawEther(address _to, uint _value) onlyOwner public returns(bool) {\r\n        require(_to != address(0));\r\n        require(this.balance >= _value);\r\n\r\n        _to.transfer(_value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdrawTokens(ERC20 _token, address _to, uint _value) onlyOwner public returns(bool) {\r\n        require(_to != address(0));\r\n\r\n        return _token.transfer(_to, _value);\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    bool public paused = false;\r\n\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    modifier whenNotPaused() { require(!paused); _; }\r\n    modifier whenPaused() { require(paused); _; }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function balanceOf(address who) public view returns(uint256);\r\n    function transfer(address to, uint256 value) public returns(bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns(bool);\r\n    function allowance(address owner, address spender) public view returns(uint256);\r\n    function approve(address spender, uint256 value) public returns(bool);\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function StandardToken(string _name, string _symbol, uint8 _decimals) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\r\n        require(_to.length == _value.length);\r\n\r\n        for(uint i = 0; i < _to.length; i++) {\r\n            transfer(_to[i], _value[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns(uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n\r\n        if(_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() { require(!mintingFinished); _; }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function finishMinting() onlyOwner canMint public returns(bool) {\r\n        mintingFinished = true;\r\n\r\n        MintFinished();\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract CappedToken is MintableToken {\r\n    uint256 public cap;\r\n\r\n    function CappedToken(uint256 _cap) public {\r\n        require(_cap > 0);\r\n        cap = _cap;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\r\n        require(totalSupply.add(_amount) <= cap);\r\n\r\n        return super.mint(_to, _amount);\r\n    }\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        address burner = msg.sender;\r\n\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\n/*\r\n    Exit Factory Token\r\n*/\r\ncontract Token is CappedToken, BurnableToken, Withdrawable {\r\n    uint public mintingFinishedTime;\r\n\r\n    function Token() CappedToken(2000000000 ether) StandardToken(\"Exit Factory Token\", \"EXIT\", 18) public {\r\n        \r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        require(mintingFinishedTime > 0 && now + 2 weeks >= mintingFinishedTime);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n        require(mintingFinishedTime > 0 && now + 2 weeks >= mintingFinishedTime);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function finishMinting() onlyOwner canMint public returns(bool) {\r\n        mintingFinishedTime = now;\r\n        return super.finishMinting();\r\n    }\r\n}\r\n\r\ncontract Crowdsale is Manageable, Withdrawable, Pausable {\r\n    using SafeMath for uint;\r\n\r\n    Token public token;\r\n    uint public timeEnd;\r\n    bool public crowdsaleClosed = false;\r\n\r\n    uint public commandTookAway;\r\n\r\n    event ExternalPurchase(address indexed holder, string tx, string currency, uint256 currencyAmount, uint256 rateToEther, uint256 tokenAmount);\r\n    event CrowdsaleClose();\r\n   \r\n    function Crowdsale() public {\r\n        token = new Token();\r\n\r\n        token.mint(0x8871147bbF3f664e086F6F9f49F493Fcead5a8a9, 240000000 ether);     // Reserve Fund\r\n        token.mint(0x1e2aD7B66914bf432F66295604A66a3279DDEB1D, 200000000 ether);     // Founders\r\n        token.mint(0x235112Ca8A7c6c143b0E0902564f992955894BB1, 20000000 ether);      // Bounty\r\n        token.mint(0x9246714faF8781c5D896eBBC0D09F93B6Ca6807e, 20000000 ether);      // IT Security\r\n        token.mint(0xBB197831f6A2EA90cEff94Cf94A23aA16fdB77a4, 20000000 ether);      // Legal Compliance\r\n\r\n        token.mint(this, 300000000 ether);                                           // Team, Advisors, Affiliate program\r\n\r\n        addManager(0x3915029Dc964F32b7dE52cefd859Eb66A5f80c96);\r\n    }\r\n\r\n    function externalPurchase(address _to, string _tx, string _currency, uint _value, uint256 _rate, uint256 _tokens) whenNotPaused onlyManager public {\r\n        token.mint(_to, _tokens);\r\n        ExternalPurchase(_to, _tx, _currency, _value, _rate, _tokens);\r\n    }\r\n\r\n    function closeCrowdsale(address _to) onlyOwner public {\r\n        require(!crowdsaleClosed);\r\n\r\n        token.finishMinting();\r\n        token.transferOwnership(_to);\r\n\r\n        crowdsaleClosed = true;\r\n        timeEnd = now;\r\n\r\n        CrowdsaleClose();\r\n    }\r\n    \r\n    function getCommandTokens() onlyOwner public {\r\n        require(crowdsaleClosed);\r\n\r\n        uint months = now.sub(timeEnd).div(30 days);\r\n\r\n        require(months > 0);\r\n\r\n        uint right = months.mul(12500000 ether);\r\n        uint send = right.sub(commandTookAway);\r\n\r\n        require(send > 0);\r\n        \r\n        commandTookAway = commandTookAway.add(send);\r\n\r\n        token.transfer(0x7Ba026aBb24c55fFFfaE612E498efb1a22c12438, send.div(3));                    // Advisors\r\n        token.transfer(0x1763D74a1B3c3C8844336Be3DC302ff77012aC81, send.div(3));                    // Team\r\n        token.transfer(0xe1de68015AD6dCB0f79c34a6CaD58Dc097C76023, send.sub(send.div(3).mul(2)));   // Affiliate program\r\n    }\r\n    \r\n    function withdrawTokens(ERC20 _token, address _to, uint _value) onlyOwner public returns(bool) {\r\n        require(_token != token || commandTookAway >= 300000000 ether);\r\n        \r\n        return super.withdrawTokens(_token, _to, _value);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"closeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countManagers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commandTookAway\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tx\",\"type\":\"string\"},{\"name\":\"_currency\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"externalPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManagers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getCommandTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tx\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"currencyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rateToEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ExternalPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdsaleClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9b4834a3c8213cda7fe97b3eb0973d0a15baa430dd078c6db9defd1112f10b65"}]}