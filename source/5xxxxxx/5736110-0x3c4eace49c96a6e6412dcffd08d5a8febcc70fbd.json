{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nCopyright 2018 Ethecom.com\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Utils {\r\n    function sqrt(uint256 x) public pure returns (uint256 y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\r\n    function lowerCase(bytes32 value) public pure returns (bytes32) {\r\n        bytes32 result = value;\r\n        for (uint i = 0; i < 32; i++) {\r\n            if (uint(value[i]) >= 65 && uint(value[i]) <= 90) {\r\n                result |= bytes32(0x20) << (31-i)*8;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    function validateCompanyName(bytes32 name) public pure returns (bool) {\r\n        for (uint i = 0; i < 32; i++) {\r\n            if (uint(name[i]) != 0 && (uint(name[i]) < 32 || uint(name[i]) > 126)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract CompanyCostInterface is Ownable {\r\n    function getCreationCost() public view returns (uint256); // in ECOM without decimals\r\n    function getCompanyCount() public view returns (uint256);\r\n    function getOffsaleCount() public view returns (uint256);\r\n    function increaseCompanyCountByOne() public;\r\n    function increaseOffsaleCountByOne() public;\r\n    function decreaseOffsaleCountByOne() public;\r\n\r\n    function calculateNextPrice(uint256 oldPrice) public view returns (uint256);\r\n    function calculatePreviousPrice(uint256 newPrice) public view returns (uint256);\r\n}\r\n\r\ncontract RandomGeneratorInterface {\r\n    function rand(address sender) public returns (uint256);\r\n}\r\n\r\ncontract TopCompanyFactoryInterface is Ownable {\r\n    struct TopCompany {\r\n        bytes32 name;\r\n        uint256 performance;\r\n        bytes32 logoUrl;\r\n    }\r\n\r\n    uint256 public startPrice; // First available value of a top company (In wei)\r\n    int256 public startBlock;\r\n    uint256 public initialAvailableCount;\r\n\r\n    // Release a new company every 2 hours (given that a block is generated every 15 seconds)\r\n    uint256 public blocksBetweenNewCompany;\r\n\r\n    uint256 public companyCount;\r\n    TopCompany[] public companies;\r\n    mapping(bytes32 => uint256) public companiesIndex;\r\n    function canBuyCompany(bytes32 nameLowercase) public view returns (bool);\r\n    function getCompanyByName(bytes32 nameLowercase) public view returns (bytes32 name, uint256 performance, bytes32 logoUrl);\r\n    function getCompany(uint256 index) public view returns (bytes32 name, uint256 performance, bytes32 logoUrl);\r\n    function removeCompany(bytes32 nameLowercase) public returns (uint256);\r\n}\r\n\r\ncontract ECOMTokenInterface is Ownable {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function ownerApprove(address _sender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Ethecom is Ownable {\r\n    struct Company {\r\n        bytes32 name;\r\n        bytes32 logoUrl;\r\n        uint performance;\r\n        address owner;\r\n        uint price;\r\n        uint lastPrice;\r\n        bool isOnsale;\r\n    }\r\n\r\n    event CompanyCreated(bytes32 name, bytes32 logoUrl,uint256 performance, uint256 price, address owner);\r\n    event CompanyTransferred(bytes32 name, uint256 newPrice, address oldOwner, address owner);\r\n    event CompanyLogoUpdated(bytes32 name, bytes32 logoUrl, address owner);\r\n    event CompanySaleStatusChanged(bytes32 name, bool saleStatus, uint256 lastPrice, address owner);\r\n    event SuperPrivilegeLuckyDrawResult(uint256 resultValue, bool status, address owner);\r\n\r\n    ECOMTokenInterface public tokenContract;\r\n    TopCompanyFactoryInterface public factoryContract;\r\n    RandomGeneratorInterface public randContract;\r\n    CompanyCostInterface public costContract;\r\n    Utils private utils;\r\n    uint ECOMDecimal = 100000000;\r\n\r\n    // Owner can update this value\r\n    uint256 public blocksPerDay = 5000;\r\n\r\n    // Map company name to company object\r\n    mapping(bytes32 => Company) public companies;\r\n\r\n    // Total performance of all companies owned by a user\r\n    mapping(address => uint256) public ownedPerformance;\r\n\r\n    // The last time a user claim their ECOM token so that it will be transferred to their eth account\r\n    mapping(address => uint256) public lastTokenClaimedBlock;\r\n\r\n    // Number of super privileges an account has \r\n    mapping (address => uint256) public superPrivilegeCount;\r\n\r\n    // Minimum random value required to get a super privilege\r\n    uint256 public minRandomPrivilegeValue = 90;\r\n    uint256 public superPrivilegeCost = 30; // in ECOM token\r\n\r\n    uint256 public maxUserCreatedPerformance = 35;// Max performance of a user created company\r\n    uint256 public oldOwnerProfit = 80;\r\n    uint256 public logoFee = 10; // In ECOM\r\n    uint256 public minCompanyValue = 1000000000000000; // in wei\r\n    uint256 public maxCompanyValue = 100000000000000000000; // in wei\r\n\r\n    constructor(address ECOMToken, address topCompanyFactory, address randomGenerator, address companyCost) public {\r\n        factoryContract = TopCompanyFactoryInterface(topCompanyFactory);\r\n        randContract = RandomGeneratorInterface(randomGenerator);\r\n        costContract = CompanyCostInterface(companyCost);\r\n        tokenContract = ECOMTokenInterface(ECOMToken);\r\n\r\n        utils = new Utils();\r\n    }\r\n\r\n    /**\r\n     *  For configurations\r\n     */\r\n\r\n    function updateBlocksPerDay(uint256 value) public onlyOwner {\r\n        blocksPerDay = value;\r\n    }\r\n\r\n    function updateSuperPrivilegeParams(uint256 minRandom, uint256 cost) public onlyOwner {\r\n        minRandomPrivilegeValue = minRandom;\r\n        superPrivilegeCost = cost;\r\n    }\r\n\r\n    function updateUserCreatedPerformance(uint256 max) public onlyOwner {\r\n        maxUserCreatedPerformance = max;\r\n    }\r\n\r\n    function updateLogoFee(uint256 newFee) public onlyOwner {\r\n        logoFee = newFee;\r\n    }\r\n\r\n    function updateOldOwnerProfit(uint256 newProfit) public onlyOwner {\r\n        oldOwnerProfit = newProfit;\r\n    }\r\n\r\n    function updateMinCompanyValue(uint256 minValue) public onlyOwner {\r\n        minCompanyValue = minValue;\r\n    }\r\n\r\n    /**\r\n     * Core methods\r\n     * ------------------------------------------------------------------------------------------\r\n     */\r\n\r\n    function purchaseCompany(bytes32 nameFromUser, bool superPrivilege) public payable {\r\n        bytes32 nameLowercase = utils.lowerCase(nameFromUser);\r\n        Company storage c = companies[nameLowercase];\r\n        require(c.owner != address(0));\r\n        require(c.owner != msg.sender);\r\n        require(c.price == msg.value);\r\n        require(c.isOnsale == true);\r\n        if (superPrivilege) {\r\n            require(superPrivilegeCount[msg.sender] > 0);\r\n        }\r\n\r\n        address oldOwner = c.owner;\r\n        uint256 profit = c.price - c.lastPrice;\r\n        oldOwner.transfer(c.lastPrice + profit * 8/10);\r\n\r\n        c.owner = msg.sender;\r\n        c.lastPrice = c.price;\r\n        c.price = costContract.calculateNextPrice(c.price);\r\n        \r\n        emit CompanyTransferred(c.name, c.price, oldOwner, msg.sender);\r\n\r\n        claimToken(oldOwner);\r\n        ownedPerformance[oldOwner] -= c.performance;\r\n\r\n        claimToken(msg.sender);\r\n        ownedPerformance[msg.sender] += c.performance;\r\n\r\n        if (superPrivilege) {\r\n            c.isOnsale = false;\r\n            superPrivilegeCount[msg.sender]--;\r\n            emit CompanySaleStatusChanged(c.name, c.isOnsale, c.price, msg.sender);\r\n        }\r\n    }\r\n\r\n    function purchaseTopCompany(bytes32 nameFromUser, bool superPrivilege) public payable {\r\n        // Check for sending enough eth\r\n        uint256 startPrice = factoryContract.startPrice();\r\n        require(msg.value == startPrice);\r\n\r\n        bytes32 nameLowercase = utils.lowerCase(nameFromUser);\r\n        // uint256 index = factoryContract.companiesIndex(nameLowercase);\r\n\r\n        // Check for company name availability\r\n        // require(index != 0);\r\n        require(companies[nameLowercase].owner == address(0));\r\n\r\n        // Check if it is avaialble for purchase\r\n        require(factoryContract.canBuyCompany(nameLowercase));\r\n        if (superPrivilege) {\r\n            require(superPrivilegeCount[msg.sender] > 0);\r\n        }\r\n\r\n        bytes32 name;\r\n        uint256 performance;\r\n        bytes32 logoUrl;\r\n        (name, performance, logoUrl) = factoryContract.getCompanyByName(nameLowercase);\r\n        uint256 price = costContract.calculateNextPrice(startPrice);\r\n        Company memory c = Company(name, logoUrl, performance, msg.sender, price, startPrice, !superPrivilege);\r\n        companies[nameLowercase] = c;\r\n\r\n        claimToken(msg.sender);\r\n        ownedPerformance[msg.sender] += performance;\r\n\r\n        factoryContract.removeCompany(nameLowercase);\r\n        //emit CompanyCreated(name, logoUrl, performance, price, msg.sender);\r\n        emit CompanyTransferred(name, price, address(0), msg.sender);\r\n\r\n        if (superPrivilege) {\r\n            superPrivilegeCount[msg.sender]--;\r\n            emit CompanySaleStatusChanged(c.name, c.isOnsale, c.price, msg.sender);\r\n        }\r\n    }\r\n\r\n    // Anyone with enough ECOM token can create a company\r\n    // Companies are unique by name\r\n    // User can set the inital value for their company (without knowing it performance)\r\n    // Newly created company will be put on sale immediately\r\n    function createCompany(bytes32 name, bytes32 logoUrl, uint256 value) public {\r\n        require(value >= minCompanyValue);\r\n        require(value <= maxCompanyValue);\r\n        require(utils.validateCompanyName(name) == true);\r\n\r\n        bytes32 nameLowercase = utils.lowerCase(name);\r\n\r\n        // If company doesn't exists, owner address will be address 0\r\n        require(factoryContract.companiesIndex(nameLowercase) == 0);\r\n        require(companies[nameLowercase].owner == address(0));\r\n\r\n        uint256 cost = costContract.getCreationCost() * ECOMDecimal;\r\n        claimToken(msg.sender);\r\n        transferECOMTokenToContract(cost);\r\n\r\n        uint256 performance = generateRandomPerformance();\r\n        Company memory c = Company(name, logoUrl, performance, msg.sender, value, costContract.calculatePreviousPrice(value), true);\r\n        companies[nameLowercase] = c;\r\n\r\n        ownedPerformance[msg.sender] += performance;\r\n\r\n        costContract.increaseCompanyCountByOne();\r\n        emit CompanyCreated(name, logoUrl, performance, value, msg.sender);\r\n    }\r\n\r\n    // Use 1 super privilege to permanently own a company\r\n    function permanentlyOwnMyCompany(bytes32 nameFromUser) public {\r\n        bytes32 nameLowercase = utils.lowerCase(nameFromUser);\r\n        Company storage c = companies[nameLowercase];\r\n        require(superPrivilegeCount[msg.sender] > 0);\r\n        require(c.owner != address(0));\r\n        require(c.owner == msg.sender);\r\n        require(c.isOnsale == true);\r\n        \r\n        c.isOnsale = false;\r\n        superPrivilegeCount[msg.sender]--;\r\n\r\n        emit CompanySaleStatusChanged(c.name, false, c.price, msg.sender);\r\n    }\r\n\r\n    // Put a permanently owned company on sale again\r\n    function putCompanyOnsale(bytes32 nameFromUser, uint256 startPrice) public {\r\n        require(startPrice >= minCompanyValue);\r\n        require(startPrice <= maxCompanyValue);\r\n        bytes32 nameLowercase = utils.lowerCase(nameFromUser);\r\n        Company storage c = companies[nameLowercase];\r\n        require(c.owner != address(0));\r\n        require(c.owner == msg.sender);\r\n        require(c.isOnsale == false);\r\n\r\n        c.price = startPrice;\r\n        c.lastPrice = costContract.calculatePreviousPrice(c.price);\r\n        c.isOnsale = true;\r\n\r\n        emit CompanySaleStatusChanged(c.name, c.isOnsale, c.price, msg.sender);\r\n    }\r\n\r\n    // Anyone can call to this method to try to get a super privileged\r\n    function runSuperPrivilegeLuckyDraw() public {\r\n        claimToken(msg.sender);\r\n        transferECOMTokenToContract(superPrivilegeCost*ECOMDecimal);\r\n        uint256 rand = randContract.rand(msg.sender);\r\n        rand = rand % 100;\r\n        bool status = false;\r\n        if (rand >= minRandomPrivilegeValue) {\r\n            superPrivilegeCount[msg.sender] = superPrivilegeCount[msg.sender] + 1;\r\n            status = true;\r\n        }\r\n\r\n        emit SuperPrivilegeLuckyDrawResult(rand, status, msg.sender);\r\n    }\r\n\r\n    // Anyone who owned some companies can claim their token\r\n    function claimMyToken() public {\r\n        require(ownedPerformance[msg.sender] > 0);\r\n\r\n        claimToken(msg.sender);\r\n    }\r\n\r\n    function updateLogoUrl(bytes32 companyName, bytes32 logoUrl) public {\r\n        bytes32 nameLowercase = utils.lowerCase(companyName);\r\n        Company storage c = companies[nameLowercase];\r\n        require(c.owner == msg.sender);\r\n        claimToken(msg.sender);\r\n        transferECOMTokenToContract(logoFee * ECOMDecimal);\r\n        c.logoUrl = logoUrl;\r\n        emit CompanyLogoUpdated(c.name, c.logoUrl, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * End core methods\r\n     * ------------------------------------------------------------------------------------------\r\n     */\r\n\r\n     /**\r\n     *  For migration\r\n     */\r\n\r\n    function updateTokenContract(address addr) public onlyOwner {\r\n        tokenContract = ECOMTokenInterface(addr);\r\n    }\r\n\r\n    function updateRandContract(address addr) public onlyOwner {\r\n        randContract = RandomGeneratorInterface(addr);\r\n    }\r\n\r\n    function updateCostContract(address addr) public onlyOwner {\r\n        costContract = CompanyCostInterface(addr);\r\n    }\r\n\r\n    function updateFactoryContract(address addr) public onlyOwner {\r\n        factoryContract = TopCompanyFactoryInterface(addr);\r\n    }\r\n\r\n    function transferSubcontractsOwnership(address addr) public onlyOwner {\r\n        tokenContract.transferOwnership(addr);\r\n        costContract.transferOwnership(addr);\r\n        factoryContract.transferOwnership(addr);\r\n\r\n        // Random generator contract doesn't need to be transferred\r\n    }\r\n\r\n    /**\r\n     * For owner\r\n     */\r\n    function withdraw(uint256 amount) public onlyOwner {\r\n        if (amount == 0) {\r\n            owner.transfer(address(this).balance);\r\n        } else {\r\n            owner.transfer(amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * View methods\r\n     */\r\n\r\n    function getTopCompanyStartPrice() public view returns (uint256) {\r\n        return factoryContract.startPrice();\r\n    }\r\n\r\n    function getTopCompanyStartBlock() public view returns (int256) {\r\n        return factoryContract.startBlock();\r\n    }\r\n\r\n    function getTopCompanyBlocksInBetween() public view returns (uint256) {\r\n        return factoryContract.blocksBetweenNewCompany();\r\n    }\r\n\r\n    function getTopCompanyCount() public view returns (uint256) {\r\n        return factoryContract.companyCount();\r\n    }\r\n\r\n    function getTopCompanyAtIndex(uint256 index) public view returns (bytes32 name, uint256 performance, bytes32 logoUrl) {\r\n        return factoryContract.getCompany(index);\r\n    }\r\n\r\n    function getCompanyCreationCost() public view returns (uint256) {\r\n        return costContract.getCreationCost();\r\n    }\r\n\r\n    function checkCompanyNameAvailability(bytes32 name) public view returns (uint256) {\r\n        uint256 result = 1;\r\n        bytes32 nameLowercase = utils.lowerCase(name);\r\n        if (utils.validateCompanyName(name) != true) {\r\n            result = 0;\r\n        } else if (factoryContract.companiesIndex(nameLowercase) != 0) {\r\n            result = 0;\r\n        } else if (companies[nameLowercase].owner != address(0)) {\r\n            result = 0;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Private methods\r\n    function transferECOMTokenToContract(uint256 amount) private {\r\n        require(tokenContract.balanceOf(msg.sender) >= amount);\r\n        tokenContract.ownerApprove(msg.sender, amount);\r\n        tokenContract.transferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    function generateRandomPerformance() private returns (uint256) {\r\n        uint256 rand = randContract.rand(msg.sender);\r\n        rand = rand % (maxUserCreatedPerformance * maxUserCreatedPerformance);\r\n        rand = utils.sqrt(rand);\r\n        return maxUserCreatedPerformance - rand;\r\n    }\r\n\r\n    function claimToken(address receiver) private {\r\n        uint256 numBlock = block.number - lastTokenClaimedBlock[receiver];\r\n        uint256 profitPerBlock = ownedPerformance[receiver] * ECOMDecimal / blocksPerDay;\r\n        uint256 profit = numBlock * profitPerBlock;\r\n        if (profit > 0) {\r\n            tokenContract.transfer(receiver, profit);\r\n        }\r\n        lastTokenClaimedBlock[receiver] = block.number;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getTopCompanyStartPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superPrivilegeCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateLogoFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"updateCostContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nameFromUser\",\"type\":\"bytes32\"},{\"name\":\"startPrice\",\"type\":\"uint256\"}],\"name\":\"putCompanyOnsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nameFromUser\",\"type\":\"bytes32\"},{\"name\":\"superPrivilege\",\"type\":\"bool\"}],\"name\":\"purchaseTopCompany\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCompanyCreationCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"costContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"checkCompanyNameAvailability\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCompanyValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nameFromUser\",\"type\":\"bytes32\"},{\"name\":\"superPrivilege\",\"type\":\"bool\"}],\"name\":\"purchaseCompany\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxUserCreatedPerformance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"updateRandContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"superPrivilegeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTopCompanyCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferSubcontractsOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minRandomPrivilegeValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newProfit\",\"type\":\"uint256\"}],\"name\":\"updateOldOwnerProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTopCompanyBlocksInBetween\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownedPerformance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nameFromUser\",\"type\":\"bytes32\"}],\"name\":\"permanentlyOwnMyCompany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"companyName\",\"type\":\"bytes32\"},{\"name\":\"logoUrl\",\"type\":\"bytes32\"}],\"name\":\"updateLogoUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTokenClaimedBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"companies\",\"outputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"logoUrl\",\"type\":\"bytes32\"},{\"name\":\"performance\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"lastPrice\",\"type\":\"uint256\"},{\"name\":\"isOnsale\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"updateUserCreatedPerformance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minValue\",\"type\":\"uint256\"}],\"name\":\"updateMinCompanyValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"logoFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"updateTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimMyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runSuperPrivilegeLuckyDraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldOwnerProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"updateFactoryContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateBlocksPerDay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCompanyValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"logoUrl\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"createCompany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTopCompanyStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factoryContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minRandom\",\"type\":\"uint256\"},{\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"updateSuperPrivilegeParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTopCompanyAtIndex\",\"outputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"performance\",\"type\":\"uint256\"},{\"name\":\"logoUrl\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ECOMToken\",\"type\":\"address\"},{\"name\":\"topCompanyFactory\",\"type\":\"address\"},{\"name\":\"randomGenerator\",\"type\":\"address\"},{\"name\":\"companyCost\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"logoUrl\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"performance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CompanyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CompanyTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"logoUrl\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CompanyLogoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"saleStatus\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"lastPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CompanySaleStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"resultValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SuperPrivilegeLuckyDrawResult\",\"type\":\"event\"}]","ContractName":"Ethecom","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000092625b0f3f72886a1574a949384ad40f127d2a180000000000000000000000001354ffae968cfa8079a4887c173aede79e738ebf0000000000000000000000009f6ddc4e4f43078e85560b1f9d07f7ca04c69c740000000000000000000000002f1f944aefd26ee779a6bcc1dfaf929341a7b908","Library":"","SwarmSource":"bzzr://3b28b2d4787282b442f770f0519958f1d741e57cdd170c9005caf5d20dc61194"}]}