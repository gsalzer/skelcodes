{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n//standart library for uint\r\nlibrary SafeMath { \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0 || b == 0){\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function pow(uint256 a, uint256 b) internal pure returns (uint256){ //power function\r\n    if (b == 0){\r\n      return 1;\r\n    }\r\n    uint256 c = a**b;\r\n    assert (c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n//standart contract to identify owner\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  address public newOwner;\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() public {\r\n    if (msg.sender == newOwner) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\ncontract DatareumToken is Ownable { //ERC - 20 token contract\r\n  using SafeMath for uint;\r\n  // Triggered when tokens are transferred.\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  string public constant symbol = \"DTN\";\r\n  string public constant name = \"Datareum\";\r\n  uint8 public constant decimals = 18;\r\n  uint256 _totalSupply = 1000000000 ether;\r\n\r\n  // Owner of this contract\r\n  address public owner;\r\n\r\n  // Balances for each account\r\n  mapping(address => uint256) balances;\r\n\r\n  // Owner of account approves the transfer of an amount to another account\r\n  mapping(address => mapping (address => uint256)) allowed;\r\n\r\n  function totalSupply() public view returns (uint256) { //standart ERC-20 function\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address _address) public view returns (uint256 balance) {//standart ERC-20 function\r\n    return balances[_address];\r\n  }\r\n  \r\n  bool public locked = true;\r\n  bool public canChangeLocked = true;\r\n\r\n  function changeLockTransfer (bool _request) public onlyOwner {\r\n    require(canChangeLocked);\r\n    locked = _request;\r\n  }\r\n\r\n  function finalUnlockTransfer () public {\r\n    require (now > finishDate + 4 weeks);\r\n    locked = false;\r\n    canChangeLocked = false;\r\n  }\r\n  \r\n  //standart ERC-20 function\r\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n    require(this != _to);\r\n    require (_to != address(0));\r\n    require(!locked);\r\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Transfer(msg.sender,_to,_amount);\r\n    return true;\r\n  }\r\n\r\n  //standart ERC-20 function\r\n  function transferFrom(address _from, address _to, uint256 _amount) public returns(bool success){\r\n    require(this != _to);\r\n    require (_to != address(0));\r\n    require(!locked);\r\n    balances[_from] = balances[_from].sub(_amount);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Transfer(_from,_to,_amount);\r\n    return true;\r\n  }\r\n  //standart ERC-20 function\r\n  function approve(address _spender, uint256 _amount)public returns (bool success) { \r\n    allowed[msg.sender][_spender] = _amount;\r\n    emit Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  //standart ERC-20 function\r\n  function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  //Constructor\r\n  function DatareumToken() public {\r\n    owner = 0x6563Cc78478Df92097F7A666Db7f70EeA9481C2e;\r\n    balances[this] = _totalSupply;\r\n  }\r\n\r\n  address public crowdsaleContract;\r\n\r\n  function setCrowdsaleContract (address _address) public{\r\n    require(crowdsaleContract == address(0));\r\n\r\n    crowdsaleContract = _address;\r\n  }\r\n\r\n  function endICO (uint _date) public {\r\n    require(msg.sender == crowdsaleContract);\r\n    balances[this] = balances[this].sub(crowdsaleBalance);\r\n    emit Transfer(this,0,crowdsaleBalance);\r\n    \r\n    crowdsaleBalance = 0;\r\n    finishDate = _date;\r\n  }\r\n\r\n  uint public finishDate = 1893456000;\r\n  \r\n  uint public crowdsaleBalance = 600000000 ether;\r\n  \r\n  function sendCrowdsaleTokens (address _address, uint _value) public {\r\n    require(msg.sender == crowdsaleContract);\r\n\r\n    balances[this] = balances[this].sub(_value);\r\n    balances[_address] = balances[_address].add(_value);\r\n    \r\n    crowdsaleBalance = crowdsaleBalance.sub(_value);\r\n    \r\n    emit Transfer(this,_address,_value);    \r\n  }\r\n\r\n  uint public advisorsBalance = 200000000 ether;\r\n  uint public foundersBalance = 100000000 ether;\r\n  uint public futureFundingBalance = 50000000 ether;\r\n  uint public bountyBalance = 50000000 ether;\r\n\r\n  function sendAdvisorsBalance (address[] _addresses, uint[] _values) external onlyOwner {\r\n    require(crowdsaleBalance == 0);\r\n    uint buffer = 0;\r\n    for(uint i = 0; i < _addresses.length; i++){\r\n      balances[_addresses[i]] = balances[_addresses[i]].add(_values[i]);\r\n      buffer = buffer.add(_values[i]);\r\n      emit Transfer(this,_addresses[i],_values[i]);\r\n    }\r\n    advisorsBalance = advisorsBalance.sub(buffer);\r\n    balances[this] = balances[this].sub(buffer);\r\n  }\r\n  \r\n  function sendFoundersBalance (address[] _addresses, uint[] _values) external onlyOwner {\r\n    require(crowdsaleBalance == 0);\r\n    require(now > finishDate + 1 years);\r\n\r\n    uint buffer = 0;\r\n    for(uint i = 0; i < _addresses.length; i++){\r\n      balances[_addresses[i]] = balances[_addresses[i]].add(_values[i]);\r\n      buffer = buffer.add(_values[i]);\r\n      emit Transfer(this,_addresses[i],_values[i]);\r\n    }\r\n    foundersBalance = foundersBalance.sub(buffer);\r\n    balances[this] = balances[this].sub(buffer);\r\n  }\r\n\r\n  function sendFutureFundingBalance (address[] _addresses, uint[] _values) external onlyOwner {\r\n    require(crowdsaleBalance == 0);\r\n    require(now > finishDate + 2 years);\r\n\r\n    uint buffer = 0;\r\n    for(uint i = 0; i < _addresses.length; i++){\r\n      balances[_addresses[i]] = balances[_addresses[i]].add(_values[i]);\r\n      buffer = buffer.add(_values[i]);\r\n      emit Transfer(this,_addresses[i],_values[i]);\r\n    }\r\n    futureFundingBalance = futureFundingBalance.sub(buffer);\r\n    balances[this] = balances[this].sub(buffer);\r\n  }\r\n\r\n  uint public constant PRE_ICO_FINISH = 1525737540;\r\n\r\n  mapping (address => bool) public bountyAddresses;\r\n\r\n  function addBountyAddresses (address[] _addresses) external onlyOwner {\r\n    for (uint i = 0; i < _addresses.length; i++){\r\n      bountyAddresses[_addresses[i]] = true;\r\n    }\r\n  }\r\n\r\n  function removeBountyAddresses (address[] _addresses) external onlyOwner {\r\n    for (uint i = 0; i < _addresses.length; i++){\r\n      bountyAddresses[_addresses[i]] = false;\r\n    }\r\n  }\r\n\r\n  function sendBountyBalance (address[] _addresses, uint[] _values) external {\r\n    require(now >= PRE_ICO_FINISH);\r\n    require (bountyAddresses[msg.sender]);\r\n\r\n    uint buffer = 0;\r\n    for(uint i = 0; i < _addresses.length; i++){\r\n      balances[_addresses[i]] = balances[_addresses[i]].add(_values[i]);\r\n      buffer = buffer.add(_values[i]);\r\n      emit Transfer(this,_addresses[i],_values[i]);\r\n    }\r\n    bountyBalance = bountyBalance.sub(buffer);\r\n    balances[this] = balances[this].sub(buffer);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"sendFutureFundingBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"futureFundingBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addBountyAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_request\",\"type\":\"bool\"}],\"name\":\"changeLockTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCrowdsaleContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"sendFoundersBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendCrowdsaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRE_ICO_FINISH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"sendAdvisorsBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalUnlockTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bountyAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"endICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canChangeLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"sendBountyBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeBountyAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DatareumToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c96b9d680a079476173431a9a84bc8896c0f62cb23c5f8a9a099c79a7fa163f0"}]}