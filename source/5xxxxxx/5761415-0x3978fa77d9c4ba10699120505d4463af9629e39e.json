{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() onlyOwner public {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) onlyOwner public {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\ncontract Adminable is Ownable {\r\n  mapping(address => bool) public admins;\r\n\r\n  modifier onlyAdmin() {\r\n    require(admins[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  function addAdmin(address user) onlyOwner public {\r\n    require(user != address(0));\r\n    admins[user] = true;\r\n  }\r\n\r\n  function removeAdmin(address user) onlyOwner public {\r\n    require(user != address(0));\r\n    admins[user] = false;\r\n  }\r\n}\r\n\r\ncontract WorldCup2018Betsman is Destructible, Adminable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  struct Bet {\r\n    uint256 amount;\r\n    uint8 result;\r\n    bool isReverted;\r\n    bool isFree;\r\n    bool isClaimed;\r\n  }\r\n\r\n  struct Game {\r\n    string team1;\r\n    string team2;\r\n    uint date;\r\n    bool ended;\r\n    uint256 firstWinResultSum;\r\n    uint256 drawResultSum;\r\n    uint256 secondWinResultSum;\r\n    uint8 result;\r\n  }\r\n\r\n  struct User {\r\n    uint freeBets;\r\n    uint totalGames;\r\n    uint256[] games;\r\n    uint statisticBets;\r\n    uint statisticBetsSum;\r\n  }\r\n\r\n  mapping (uint => Game) public games;\r\n  mapping (uint => uint[]) public gamesByDayOfYear;\r\n  \r\n  mapping (address => mapping(uint => Bet)) public bets;\r\n  mapping (address => User) public users;\r\n  \r\n\r\n  uint public lastGameId = 0;\r\n\r\n  uint public minBet = 0.001 ether;\r\n  uint public maxBet = 1 ether;\r\n  uint public betsCountToUseFreeBet = 3;\r\n\r\n  Game game;\r\n  Bet bet;\r\n  \r\n  modifier biggerMinBet() { \r\n    require (msg.value >= minBet, \"Bet value is lower min bet value.\"); \r\n    _; \r\n  }\r\n\r\n  modifier lowerMaxBet() { \r\n    require (msg.value <= maxBet, \"Bet value is bigger max bet value.\");\r\n    _; \r\n  }\r\n\r\n  function hasBet(uint256 _gameId) view internal returns(bool){\r\n    return bets[msg.sender][_gameId].amount > 0;\r\n  }\r\n  \r\n  modifier hasUserBet(uint256 _gameId) { \r\n    require (hasBet(_gameId), \"User did not bet this game.\"); \r\n    _; \r\n  }\r\n  \r\n  modifier hasNotUserBet(uint256 _gameId) { \r\n    require(!hasBet(_gameId), \"User has already bet this game.\");\r\n    _; \r\n  }\r\n\r\n  modifier hasFreeBets() { \r\n    require (users[msg.sender].freeBets > 0, \"User does not have free bets.\"); \r\n    _; \r\n  }\r\n\r\n  modifier isGameExist(uint256 _gameId) { \r\n    require(!(games[_gameId].ended), \"Game does not exist.\");\r\n    _; \r\n  }\r\n\r\n  modifier isGameNotStarted(uint256 _gameId) { \r\n    // stop making bets when 5 minutes till game start \r\n    // 300000 = 1000 * 60 * 5 - 5 minutes\r\n    require(games[_gameId].date > now + 300000, \"Game has started.\");\r\n    _; \r\n  }\r\n\r\n  modifier isRightBetResult(uint8 _betResult) { \r\n    require (_betResult > 0 && _betResult < 4);\r\n    _; \r\n  }\r\n  \r\n  function setMinBet(uint256 _minBet) external onlyAdmin {\r\n    minBet = _minBet;\r\n  }\r\n\r\n  function setMaxBet(uint256 _maxBet) external onlyAdmin {\r\n    maxBet = _maxBet;\r\n  }\r\n\r\n  function addFreeBet(address _gambler, uint _count) external onlyAdmin  {\r\n    users[_gambler].freeBets += _count;\r\n  }\r\n\r\n  function addGame(string _team1, string _team2, uint _date, uint _dayOfYear) \r\n    external\r\n    onlyAdmin\r\n  {\r\n    lastGameId += 1;\r\n    games[lastGameId] = Game(_team1, _team2, _date, false, 0, 0, 0, 0);\r\n    gamesByDayOfYear[_dayOfYear].push(lastGameId);\r\n  }\r\n\r\n  function setGameResult(uint _gameId, uint8 _result)\r\n    external\r\n    isGameExist(_gameId)\r\n    isRightBetResult(_result)\r\n    onlyAdmin\r\n  {\r\n    games[_gameId].ended = true;\r\n    games[_gameId].result = _result;\r\n  }\r\n\r\n  function addBet(uint _gameId, uint8 _betResult, uint256 _amount, bool _isFree) internal{\r\n    bets[msg.sender][_gameId] = Bet(_amount, _betResult, false, _isFree, false);\r\n    if(_betResult == 1){\r\n      games[_gameId].firstWinResultSum += _amount;\r\n    } else if(_betResult == 2) {\r\n      games[_gameId].drawResultSum += _amount;\r\n    } else if(_betResult == 3) {\r\n      games[_gameId].secondWinResultSum += _amount;\r\n    }\r\n    users[msg.sender].games.push(_gameId);\r\n    users[msg.sender].totalGames += 1;\r\n  }\r\n  \r\n  function betGame (\r\n    uint _gameId,\r\n    uint8 _betResult\r\n  ) \r\n    external\r\n    biggerMinBet\r\n    lowerMaxBet\r\n    isGameExist(_gameId)\r\n    isGameNotStarted(_gameId)\r\n    hasNotUserBet(_gameId)\r\n    isRightBetResult(_betResult)\r\n    payable\r\n  {\r\n    addBet(_gameId, _betResult, msg.value, false);\r\n    users[msg.sender].statisticBets += 1;\r\n    users[msg.sender].statisticBetsSum += msg.value;\r\n  }\r\n\r\n  function betFreeGame(\r\n    uint _gameId,\r\n    uint8 _betResult\r\n  ) \r\n    hasFreeBets\r\n    isGameExist(_gameId)\r\n    isGameNotStarted(_gameId)\r\n    hasNotUserBet(_gameId)\r\n    isRightBetResult(_betResult)\r\n    external \r\n  {\r\n    require(users[msg.sender].statisticBets >= betsCountToUseFreeBet, \"You need more bets to use free bet\");\r\n    users[msg.sender].statisticBets -= betsCountToUseFreeBet;\r\n    users[msg.sender].freeBets -= 1;\r\n    addBet(_gameId, _betResult, minBet, true);\r\n  }\r\n\r\n  function revertBet(uint _gameId)\r\n    hasUserBet(_gameId)\r\n    isGameNotStarted(_gameId)\r\n    external \r\n  {\r\n    bool isFree = bets[msg.sender][_gameId].isFree;\r\n    require(!isFree, \"You can not revert free bet\");\r\n    bool isReverted = bets[msg.sender][_gameId].isReverted;\r\n    require(!isReverted, \"You can not revert already reverted bet\");\r\n    uint256 amount = bets[msg.sender][_gameId].amount;\r\n    uint256 betResult = bets[msg.sender][_gameId].result;\r\n    if(betResult == 1){\r\n      games[_gameId].firstWinResultSum -= amount;\r\n    } else if(betResult == 2) {\r\n      games[_gameId].drawResultSum -= amount;\r\n    } else if(betResult == 3) {\r\n      games[_gameId].secondWinResultSum -= amount;\r\n    }\r\n    bets[msg.sender][_gameId].isReverted = true;\r\n    msg.sender.transfer(amount.mul(9).div(10)); // return 90% of bet\r\n  }\r\n\r\n  function claimPrize(uint _gameId) \r\n    hasUserBet(_gameId)\r\n    public\r\n  {\r\n    address gambler = msg.sender;\r\n    game = games[_gameId];\r\n    bet = bets[gambler][_gameId];\r\n    require(game.ended, \"Game has not ended yet.\");\r\n    require(bet.result == game.result, \"You did not win this game\");\r\n    require(!bet.isReverted, \"You can not claim reverted bet\");\r\n    require(!bet.isClaimed, \"You can not claim already claimed bet\");\r\n    bets[gambler][_gameId].isClaimed = true;\r\n    uint winResultSum = 0;\r\n    uint prize = 0;\r\n    if(game.result == 1){\r\n      winResultSum = game.firstWinResultSum;\r\n      prize = game.drawResultSum + game.secondWinResultSum;\r\n    } else if(game.result == 2) {\r\n      winResultSum = game.drawResultSum;\r\n      prize = game.firstWinResultSum + game.secondWinResultSum;\r\n    } else if(game.result == 3) {\r\n      winResultSum = game.secondWinResultSum;\r\n      prize = game.firstWinResultSum + game.drawResultSum;\r\n    }\r\n    // prize = bet amount + (prize * (total result amount / bet amount)) * 80 %;\r\n    uint gamblerPrize = prize.mul(bet.amount).mul(8).div(10).div(winResultSum);\r\n    if(!bet.isFree){\r\n      gamblerPrize = bet.amount + gamblerPrize;\r\n    }\r\n    gambler.transfer(gamblerPrize);\r\n    winResultSum = 0;\r\n    prize = 0;\r\n    gamblerPrize = 0;\r\n    delete game;\r\n    delete bet;\r\n  }\r\n\r\n  function getGamblerGameIds(address _gambler) public constant returns (uint256[]){\r\n    return users[_gambler].games;\r\n  }\r\n\r\n  function getGamesByDay(uint _dayOfYear) public constant returns (uint256[]){\r\n    return gamesByDayOfYear[_dayOfYear];\r\n  }\r\n\r\n  function getGamblerBet(address _gambler, uint _gameId) public constant returns(uint, uint256, uint8, bool, bool, bool){\r\n    Bet storage tempBet = bets[_gambler][_gameId];\r\n    return (\r\n      _gameId,\r\n      tempBet.amount,\r\n      tempBet.result,\r\n      tempBet.isReverted,\r\n      tempBet.isFree,\r\n      tempBet.isClaimed\r\n    );\r\n  }\r\n\r\n  function withdraw(uint amount) public onlyOwner {\r\n    owner.transfer(amount);\r\n  }\r\n  \r\n  constructor() public payable {\r\n    addAdmin(msg.sender);\r\n    games[1] = Game(\"RUS\", \"SAU\", 1528984800000, false, 0, 0, 0, 0);\r\n    gamesByDayOfYear[165] = [1];\r\n    games[2] = Game(\"EGY\", \"URG\", 1529060400000, false, 0, 0, 0, 0);\r\n    games[3] = Game(\"MAR\", \"IRN\", 1529071200000, false, 0, 0, 0, 0);\r\n    games[4] = Game(\"POR\", \"SPA\", 1529082000000, false, 0, 0, 0, 0);\r\n    gamesByDayOfYear[166] = [2,3,4];\r\n    games[5] = Game(\"FRA\", \"AUS\", 1529139600000, false, 0, 0, 0, 0);\r\n    games[6] = Game(\"ARG\", \"ISL\", 1529150400000, false, 0, 0, 0, 0);\r\n    games[7] = Game(\"PER\", \"DAN\", 1529161200000, false, 0, 0, 0, 0);\r\n    games[8] = Game(\"CRO\", \"NIG\", 1529172000000, false, 0, 0, 0, 0);\r\n    gamesByDayOfYear[167] = [5,6,7,8];\r\n    lastGameId = 8;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_result\",\"type\":\"uint8\"}],\"name\":\"setGameResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gambler\",\"type\":\"address\"},{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getGamblerBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gamesByDayOfYear\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"team1\",\"type\":\"string\"},{\"name\":\"team2\",\"type\":\"string\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"bool\"},{\"name\":\"firstWinResultSum\",\"type\":\"uint256\"},{\"name\":\"drawResultSum\",\"type\":\"uint256\"},{\"name\":\"secondWinResultSum\",\"type\":\"uint256\"},{\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"revertBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastGameId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_betResult\",\"type\":\"uint8\"}],\"name\":\"betFreeGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"result\",\"type\":\"uint8\"},{\"name\":\"isReverted\",\"type\":\"bool\"},{\"name\":\"isFree\",\"type\":\"bool\"},{\"name\":\"isClaimed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxBet\",\"type\":\"uint256\"}],\"name\":\"setMaxBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBet\",\"type\":\"uint256\"}],\"name\":\"setMinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_betResult\",\"type\":\"uint8\"}],\"name\":\"betGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_team1\",\"type\":\"string\"},{\"name\":\"_team2\",\"type\":\"string\"},{\"name\":\"_date\",\"type\":\"uint256\"},{\"name\":\"_dayOfYear\",\"type\":\"uint256\"}],\"name\":\"addGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betsCountToUseFreeBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"freeBets\",\"type\":\"uint256\"},{\"name\":\"totalGames\",\"type\":\"uint256\"},{\"name\":\"statisticBets\",\"type\":\"uint256\"},{\"name\":\"statisticBetsSum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gambler\",\"type\":\"address\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"addFreeBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"claimPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gambler\",\"type\":\"address\"}],\"name\":\"getGamblerGameIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_dayOfYear\",\"type\":\"uint256\"}],\"name\":\"getGamesByDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]","ContractName":"WorldCup2018Betsman","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://907f489502ccda1178be1f56419d129d53930e5d8e37d4eadcc10306a5f900dd"}]}