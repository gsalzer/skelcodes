{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  // function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  // function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  // function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  // function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  // event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  // event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n  // Optional\r\n  // function name() public view returns (string name);\r\n  // function symbol() public view returns (string symbol);\r\n  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n\r\ncontract DailyEtherToken is ERC721 {\r\n\r\n  /*** EVENTS ***/\r\n\r\n  /// @dev Birth event fired whenever a new token is created\r\n  event Birth(uint256 tokenId, string name, address owner);\r\n\r\n  /// @dev TokenSold event fired whenever a token is sold\r\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\r\n\r\n  /// @dev Transfer event as defined in ERC721. Ownership is assigned, including births.\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n  /*** CONSTANTS ***/\r\n\r\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n  string public constant NAME = \"DailyEther\"; // solhint-disable-line\r\n  string public constant SYMBOL = \"DailyEtherToken\"; // solhint-disable-line\r\n\r\n  uint256 private ticketPrice = 0.2 ether;\r\n  string private betTitle = \"\";     // Title of bet\r\n  uint256 private answerID = 0;     // The correct answer id, set when the bet is closed\r\n\r\n  // A bet can have the following states:\r\n  // Opened -- Accepting new bets\r\n  // Locked -- Not accepting new bets, waiting for final results\r\n  // Closed -- Bet completed, results announced and payout completed for winners\r\n  bool isLocked = false;\r\n  bool isClosed = false;\r\n\r\n  /*** STORAGE ***/\r\n\r\n  // Used to implement proper ERC721 implementation\r\n  mapping (address => uint256) private addressToBetCount;\r\n\r\n  // Holds the number of participants who placed a bet on specific answer\r\n  mapping (uint256 => uint256) private answerIdToParticipantsCount;\r\n\r\n  // Addresses of the accounts (or contracts) that can execute actions within each roles.\r\n  address public roleAdminAddress;\r\n\r\n  /*** DATATYPES ***/\r\n  struct Participant {\r\n    address user_address;\r\n    uint256 answer_id;\r\n  }\r\n  Participant[] private participants;\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n\r\n  /// @dev Access modifier for Admin-only\r\n  modifier onlyAdmin() {\r\n    require(msg.sender == roleAdminAddress);\r\n    _;\r\n  }\r\n\r\n  /*** CONSTRUCTOR ***/\r\n\r\n  function DailyEtherToken() public {\r\n    roleAdminAddress = msg.sender;\r\n  }\r\n\r\n  /*** PUBLIC FUNCTIONS ***/\r\n\r\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n  ///  clear all approvals.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function approve(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    // Caller must own token.\r\n    require(false);\r\n  }\r\n\r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return addressToBetCount[_owner];\r\n  }\r\n\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function name() public pure returns (string) {\r\n    return NAME;\r\n  }\r\n\r\n  function payout(address _to) public onlyAdmin {\r\n    _payout(_to);\r\n  }\r\n\r\n\r\n  /// @notice Returns all the relevant information about a specific participant.\r\n  function getParticipant(uint256 _index) public view returns (\r\n    address participantAddress,\r\n    uint256 participantAnswerId\r\n  ) {\r\n    Participant storage p = participants[_index];\r\n    participantAddress = p.user_address;\r\n    participantAnswerId = p.answer_id;\r\n  }\r\n\r\n\r\n  // Called to close the bet. Sets the correct bet answer and sends payouts to\r\n  // the bet winners\r\n  function closeBet(uint256 _answerId) public onlyAdmin {\r\n\r\n    // Make sure bet is Locked\r\n    require(isLocked == true);\r\n\r\n    // Make sure bet was not closed already\r\n    require(isClosed == false);\r\n\r\n    // Store correct answer id\r\n    answerID = _answerId;\r\n\r\n    // Calculate total earnings to send winners\r\n    uint256 totalPrize = uint256(SafeMath.div(SafeMath.mul((ticketPrice * participants.length), 94), 100));\r\n\r\n    // Calculate the prize we need to transfer per winner\r\n    uint256 paymentPerParticipant = uint256(SafeMath.div(totalPrize, answerIdToParticipantsCount[_answerId]));\r\n\r\n    // Mark contract as closed so we won't close it again\r\n    isClosed = true;\r\n\r\n    // Transfer the winning amount to each of the winners\r\n    for(uint i=0; i<participants.length; i++)\r\n    {\r\n        if (participants[i].answer_id == _answerId) {\r\n            if (participants[i].user_address != address(this)) {\r\n                participants[i].user_address.transfer(paymentPerParticipant);\r\n            }\r\n        }\r\n    }\r\n  }\r\n\r\n  // Allows someone to send ether and obtain the token\r\n  function bet(uint256 _answerId) public payable {\r\n\r\n    // Make sure bet accepts new bets\r\n    require(isLocked == false);\r\n\r\n    // Answer ID not allowed to be 0, check it is 1 or greater\r\n    require(_answerId >= 1);\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= ticketPrice);\r\n\r\n    // Store new bet\r\n    Participant memory _p = Participant({\r\n      user_address: msg.sender,\r\n      answer_id: _answerId\r\n    });\r\n    participants.push(_p);\r\n\r\n    addressToBetCount[msg.sender]++;\r\n\r\n    // Increase the count of participants who placed their bet on this answer\r\n    answerIdToParticipantsCount[_answerId]++;\r\n  }\r\n\r\n  // Returns the ticket price for the bet\r\n  function getTicketPrice() public view returns (uint256 price) {\r\n    return ticketPrice;\r\n  }\r\n\r\n  // Returns the bet title\r\n  function getBetTitle() public view returns (string title) {\r\n    return betTitle;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the Admin\r\n  /// @param _newAdmin The address of the new Admin\r\n  function setAdmin(address _newAdmin) public onlyAdmin {\r\n    require(_newAdmin != address(0));\r\n    roleAdminAddress = _newAdmin;\r\n  }\r\n\r\n  // Inits the bet data\r\n  function initBet(uint256 _ticketPriceWei, string _betTitle) public onlyAdmin {\r\n    ticketPrice = _ticketPriceWei;\r\n    betTitle = _betTitle;\r\n  }\r\n\r\n  // Called to lock bet, new participants can no longer join\r\n  function lockBet() public onlyAdmin {\r\n    isLocked = true;\r\n  }\r\n\r\n  // Called to lock bet, new participants can no longer join\r\n  function isBetLocked() public view returns (bool) {\r\n    return isLocked;\r\n  }\r\n\r\n  // Called to lock bet, new participants can no longer join\r\n  function isBetClosed() public view returns (bool) {\r\n    return isClosed;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  /// Returns the total of bets in contract\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return participants.length;\r\n  }\r\n\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n\r\n  /// For paying out balance on contract\r\n  function _payout(address _to) private {\r\n    if (_to == address(0)) {\r\n      roleAdminAddress.transfer(this.balance);\r\n    } else {\r\n      _to.transfer(this.balance);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBetLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getParticipant\",\"outputs\":[{\"name\":\"participantAddress\",\"type\":\"address\"},{\"name\":\"participantAnswerId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_answerId\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ticketPriceWei\",\"type\":\"uint256\"},{\"name\":\"_betTitle\",\"type\":\"string\"}],\"name\":\"initBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTicketPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_answerId\",\"type\":\"uint256\"}],\"name\":\"closeBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roleAdminAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBetTitle\",\"outputs\":[{\"name\":\"title\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBetClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DailyEtherToken","CompilerVersion":"v0.4.20-nightly.2018.1.26+commit.bbad48bb","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8b6a8b9cb28852f5d052dae78188fedbaa2dfcb7c73cc547f8bb63df3e26c338"}]}