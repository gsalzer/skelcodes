{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address owner) public constant returns (uint256 balance);\r\n  function transfer(address to, uint256 value) public returns (bool success);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n \r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256 remaining);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n  function approve(address spender, uint256 value) public returns (bool success);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n \r\n  mapping (address => uint256) public balances;\r\n \r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to] && _value > 0 && _to != address(this) && _to != address(0)) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    } else { return false; }\r\n  }\r\n\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n \r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to] && _value > 0 && _to != address(this) && _to != address(0)) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    } else { return false; }\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n      if (((_value == 0) || (allowed[msg.sender][_spender] == 0)) && _spender != address(this) && _spender != address(0)) {\r\n          allowed[msg.sender][_spender] = _value;\r\n          Approval(msg.sender, _spender, _value);\r\n          return true;\r\n      } else { return false; }\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n \r\n}\r\n\r\ncontract UNICToken is owned, StandardToken {\r\n    \r\n    string public constant name = 'UNICToken';\r\n    string public constant symbol = 'UNIC';\r\n    uint8 public constant decimals = 18;\r\n    \r\n    uint256 public initialSupply = 250000000 * 10 ** uint256(decimals);\r\n    \r\n    address public icoManager;\r\n    \r\n    mapping (address => uint256) public WhiteList;\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == icoManager);\r\n        _;\r\n    }\r\n\r\n    function UNICToken() public onlyOwner {\r\n      totalSupply = initialSupply;\r\n      balances[msg.sender] = initialSupply;\r\n    }\r\n\r\n    function setICOManager(address _newIcoManager) public onlyOwner returns (bool) {\r\n      assert(_newIcoManager != 0x0);\r\n      icoManager = _newIcoManager;\r\n    }\r\n    \r\n    function setWhiteList(address _contributor) public onlyManager {\r\n      if(_contributor != 0x0){\r\n        WhiteList[_contributor] = 1;\r\n      }\r\n    }\r\n}\r\n\r\ncontract Crowdsale is owned, UNICToken {\r\n    \r\n  using SafeMath for uint;\r\n  \r\n  UNICToken public token = new UNICToken();\r\n  \r\n  address constant multisig = 0xDE4951a749DE77874ee72778512A2bA1e9032e7a;\r\n  uint constant rate = 3400 * 1000000000000000000;\r\n  \r\n  uint public constant presaleStart = 1518084000;   /** 08.02 */\r\n  uint public presaleEnd = 1520244000;              /** 05.03 */\r\n  uint public presaleDiscount = 30;\r\n  uint public presaleTokensLimit = 4250000 * 1000000000000000000;\r\n  uint public presaleWhitelistDiscount = 40;\r\n  uint public presaleWhitelistTokensLimit = 750000 * 1000000000000000000;\r\n\r\n  uint public firstRoundICOStart = 1520848800;      /** 12.03 */\r\n  uint public firstRoundICOEnd = 1522058400;        /** 26.03 */\r\n  uint public firstRoundICODiscount = 15;\r\n  uint public firstRoundICOTokensLimit = 6250000 * 1000000000000000000;\r\n\r\n  uint public secondRoundICOStart = 1522922400;     /** 05.04 */\r\n  uint public secondRoundICOEnd = 1524736800;       /** 26.04 */\r\n  uint public secondRoundICOTokensLimit = 43750000 * 1000000000000000000;\r\n\r\n  uint public etherRaised;\r\n  uint public tokensSold;\r\n  uint public tokensSoldWhitelist;\r\n\r\n  modifier saleIsOn() {\r\n    require((now >= presaleStart && now <= presaleEnd) ||\r\n      (now >= firstRoundICOStart && now <= firstRoundICOEnd)\r\n      || (now >= secondRoundICOStart && now <= secondRoundICOEnd)\r\n      );\r\n    _;\r\n  }\r\n\r\n  function Crowdsale() public onlyOwner {\r\n    etherRaised = 0;\r\n    tokensSold = 0;\r\n    tokensSoldWhitelist = 0;\r\n  }\r\n  \r\n  function() external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  function buyTokens(address _buyer) saleIsOn public payable {\r\n    assert(_buyer != 0x0);\r\n    if(msg.value > 0){\r\n\r\n      uint tokens = rate.mul(msg.value).div(1 ether);\r\n      uint discountTokens = 0;\r\n      if(now >= presaleStart && now <= presaleEnd) {\r\n          if(WhiteList[_buyer]==1) {\r\n              discountTokens = tokens.mul(presaleWhitelistDiscount).div(100);\r\n          }else{\r\n              discountTokens = tokens.mul(presaleDiscount).div(100);\r\n          }\r\n      }\r\n      if(now >= firstRoundICOStart && now <= firstRoundICOEnd) {\r\n          discountTokens = tokens.mul(firstRoundICODiscount).div(100);\r\n      }\r\n\r\n      uint tokensWithBonus = tokens.add(discountTokens);\r\n      \r\n      if(\r\n          (now >= presaleStart && now <= presaleEnd && presaleTokensLimit > tokensSold + tokensWithBonus &&\r\n            ((WhiteList[_buyer]==1 && presaleWhitelistTokensLimit > tokensSoldWhitelist + tokensWithBonus) || WhiteList[_buyer]!=1)\r\n          ) ||\r\n          (now >= firstRoundICOStart && now <= firstRoundICOEnd && firstRoundICOTokensLimit > tokensSold + tokensWithBonus) ||\r\n          (now >= secondRoundICOStart && now <= secondRoundICOEnd && secondRoundICOTokensLimit > tokensSold + tokensWithBonus)\r\n      ){\r\n      \r\n        multisig.transfer(msg.value);\r\n        etherRaised = etherRaised.add(msg.value);\r\n        token.transfer(msg.sender, tokensWithBonus);\r\n        tokensSold = tokensSold.add(tokensWithBonus);\r\n        if(WhiteList[_buyer]==1) {\r\n          tokensSoldWhitelist = tokensSoldWhitelist.add(tokensWithBonus);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"WhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newIcoManager\",\"type\":\"address\"}],\"name\":\"setICOManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"UNICToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://66c8b22ae2a32073f25ba23a6274e042d76995d035881fd7dcb6419004d654ac"}]}