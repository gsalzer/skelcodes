{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) onlyOwner public returns (bool _success) {\r\n        require(_newOwner != address(0));\r\n        owner = _newOwner;\r\n        OwnershipTransferred(owner, _newOwner);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function isPaused() public view returns (bool _is_paused) {\r\n        return paused;\r\n    }\r\n\r\n    function pause() onlyOwner whenNotPaused public returns (bool _success) {\r\n        paused = true;\r\n        Pause();\r\n        return true;\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public returns (bool _success) {\r\n        paused = false;\r\n        Unpause();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ERC223 {\r\n    uint public totalSupply;\r\n\r\n    function balanceOf(address who) public view returns (uint _balance);\r\n    function totalSupply() public view returns (uint256 _totalSupply);\r\n    function transfer(address to, uint value) public returns (bool _success);\r\n    function transfer(address to, uint value, bytes data) public returns (bool _success);\r\n    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool _success);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n\r\n    function name() public view returns (string _name);\r\n    function symbol() public view returns (string _symbol);\r\n    function decimals() public view returns (uint8 _decimals);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success);\r\n    function approve(address _spender, uint256 _value) public returns (bool _success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 _remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\ncontract ContractReceiver {\r\n    struct TKN {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n\r\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\r\n        TKN memory tkn;\r\n        tkn.sender = _from;\r\n        tkn.value = _value;\r\n        tkn.data = _data;\r\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n        tkn.sig = bytes4(u);\r\n    }\r\n}\r\n\r\ncontract FETCOIN is ERC223, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Offering {\r\n        uint256 amount;\r\n        uint256 locktime;\r\n    }\r\n\r\n    string public name = \"fetish coin\";\r\n    string public symbol = \"FET\";\r\n    uint8 public decimals = 6;\r\n    uint256 public totalSupply = 10e10 * 1e6;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping(address => bool) public frozenAccount;\r\n\r\n    mapping(address => mapping(address => Offering)) public offering;\r\n\r\n    event Freeze(address indexed target, uint256 value);\r\n    event Unfreeze(address indexed target, uint256 value);\r\n    event Burn(address indexed from, uint256 amount);\r\n    event Rain(address indexed from, uint256 amount);\r\n\r\n    function FETCOIN() public {\r\n        owner = msg.sender;\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 _balance) {\r\n        return balanceOf[_owner];\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 _totalSupply) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) whenNotPaused public returns (bool _success) {\r\n        require(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false);\r\n\r\n        if (isContract(_to)) {\r\n            require(balanceOf[msg.sender] >= _value);\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n            balanceOf[_to] = balanceOf[_to].add(_value);\r\n            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n            Transfer(msg.sender, _to, _value, _data);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint _value, bytes _data) whenNotPaused public returns (bool _success) {\r\n        require(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false);\r\n\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, _data);\r\n        } else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint _value) whenNotPaused public returns (bool _success) {\r\n        require(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false);\r\n\r\n        bytes memory empty;\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, empty);\r\n        } else {\r\n            return transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n\r\n    function name() public view returns (string _name) {\r\n        return name;\r\n    }\r\n\r\n    function symbol() public view returns (string _symbol) {\r\n        return symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8 _decimals) {\r\n        return decimals;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool _success) {\r\n        require(_to != address(0)\r\n            && _value > 0\r\n            && balanceOf[_from] >= _value\r\n            && allowance[_from][msg.sender] >= _value\r\n            && frozenAccount[_from] == false && frozenAccount[_to] == false);\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) whenNotPaused public returns (bool _success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 _remaining) {\r\n        return allowance[_owner][_spender];\r\n    }\r\n\r\n    function freezeAccounts(address[] _targets) onlyOwner whenNotPaused public returns (bool _success) {\r\n        require(_targets.length > 0);\r\n\r\n        for (uint j = 0; j < _targets.length; j++) {\r\n            require(_targets[j] != 0x0);\r\n            frozenAccount[_targets[j]] = true;\r\n            Freeze(_targets[j], balanceOf[_targets[j]]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function unfreezeAccounts(address[] _targets) onlyOwner whenNotPaused public returns (bool _success) {\r\n        require(_targets.length > 0);\r\n\r\n        for (uint j = 0; j < _targets.length; j++) {\r\n            require(_targets[j] != 0x0);\r\n            frozenAccount[_targets[j]] = false;\r\n            Unfreeze(_targets[j], balanceOf[_targets[j]]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function isFrozenAccount(address _target) public view returns (bool _is_frozen){\r\n        return frozenAccount[_target] == true;\r\n    }\r\n\r\n    function isContract(address _target) private view returns (bool _is_contract) {\r\n        uint length;\r\n        assembly {\r\n            length := extcodesize(_target)\r\n        }\r\n        return (length > 0);\r\n    }\r\n\r\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool _success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value, _data);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool _success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        ContractReceiver receiver = ContractReceiver(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        Transfer(msg.sender, _to, _value, _data);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function burn(address _from, uint256 _amount) onlyOwner whenNotPaused public returns (bool _success) {\r\n        require(_amount > 0 && balanceOf[_from] >= _amount);\r\n        _amount = _amount.mul(1e6);\r\n        balanceOf[_from] = balanceOf[_from].sub(_amount);\r\n        totalSupply = totalSupply.sub(_amount);\r\n        Burn(_from, _amount);\r\n        return true;\r\n    }\r\n\r\n    function rain(address[] _addresses, uint256 _amount) onlyOwner whenNotPaused public returns (bool _success) {\r\n        require(_amount > 0 && _addresses.length > 0 && frozenAccount[msg.sender] == false);\r\n\r\n        _amount = _amount.mul(1e6);\r\n        uint256 totalAmount = _amount.mul(_addresses.length);\r\n        require(balanceOf[msg.sender] >= totalAmount);\r\n\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\r\n\r\n        for (uint j = 0; j < _addresses.length; j++) {\r\n            require(_addresses[j] != 0x0 && frozenAccount[_addresses[j]] == false);\r\n\r\n            balanceOf[_addresses[j]] = balanceOf[_addresses[j]].add(_amount);\r\n            Transfer(msg.sender, _addresses[j], _amount);\r\n        }\r\n        Rain(msg.sender, totalAmount);\r\n        return true;\r\n    }\r\n\r\n    function collectTokens(address[] _addresses, uint[] _amounts) onlyOwner whenNotPaused public returns (bool _success) {\r\n        require(_addresses.length > 0 && _addresses.length == _amounts.length);\r\n\r\n        uint256 totalAmount = 0;\r\n\r\n        for (uint j = 0; j < _addresses.length; j++) {\r\n            require(_amounts[j] > 0 && _addresses[j] != 0x0 && frozenAccount[_addresses[j]] == false);\r\n            _amounts[j] = _amounts[j].mul(1e6);\r\n            require(balanceOf[_addresses[j]] >= _amounts[j]);\r\n            balanceOf[_addresses[j]] = balanceOf[_addresses[j]].sub(_amounts[j]);\r\n            totalAmount = totalAmount.add(_amounts[j]);\r\n            Transfer(_addresses[j], msg.sender, _amounts[j]);\r\n        }\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(totalAmount);\r\n        return true;\r\n    }\r\n\r\n    function() payable public {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"}],\"name\":\"unfreezeAccounts\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"isFrozenAccount\",\"outputs\":[{\"name\":\"_is_frozen\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rain\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"offering\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"locktime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"}],\"name\":\"freezeAccounts\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"_is_paused\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"_remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"collectTokens\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Rain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FETCOIN","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2f50d15ef14948c2b56d4781fdbf7112c457eb75cb67e5f5573e4b45aa6074e0"}]}