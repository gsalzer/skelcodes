{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    string public name;\r\n    string public symbol;\r\n    uint32 public decimals;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  function transfer(address _to, uint256 _amount) public returns (bool) {\r\n    uint256 _value = _amount;\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n  \r\n    \r\n\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require( newOwner != address(0) );\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AthCrowdsaleInterface\r\n{\r\n    function investorsCount() public constant returns( uint256 );\r\n    \r\n    function investorsAddress( uint256 _i ) public constant returns( address );\r\n    \r\n    function investorsInfo( address _a ) public constant returns( uint256, uint256 );\r\n    \r\n    function investorsStockInfo( address _a ) public constant returns( uint256 );\r\n    \r\n    function getOwners(uint8) public constant returns( address );\r\n}\r\n \r\n \r\n\r\n\r\ncontract AthTokenBase is Ownable, StandardToken{\r\n    \r\n    address crowdsale;\r\n    AthCrowdsaleInterface crowdsaleInterface;\r\n    \r\n    \r\n    uint256 public redemptionFund = 0;\r\n    uint256 public redemptionFundTotal = 0;\r\n    uint256 public redemptionPrice = 0;\r\n    \r\n    modifier onlyCrowdsale() {\r\n        require(msg.sender == crowdsale);\r\n        _;\r\n    }\r\n    \r\n    function AthTokenBase() public \r\n    {\r\n        name                    = \"Ethereum Anonymizer\";\r\n        symbol                  = \"ATH\";\r\n        decimals                = 18;\r\n        totalSupply             = 21000000 ether;\r\n        balances[address(this)] = totalSupply;\r\n    }\r\n    \r\n    \r\n    \r\n    function setCrowdsale( address _a ) public onlyOwner returns( bool )\r\n    {\r\n        crowdsale = _a;\r\n        crowdsaleInterface = AthCrowdsaleInterface( _a );\r\n    }\r\n    \r\n\r\n    function delivery( address _to, uint256 _amount ) public onlyCrowdsale returns( bool )\r\n    {\r\n        require( _to != address(0) );\r\n        require(_amount <= balances[address(this)] );\r\n        balances[address(this)] = balances[address(this)].sub( _amount );\r\n        balances[_to] = balances[_to].add( _amount );\r\n        \r\n        emit Transfer( address(this), _to, _amount );\r\n        \r\n    }\r\n    \r\n    function currentBalance() public constant returns( uint256 )\r\n    {\r\n        return balances[ address(this) ];\r\n    }\r\n    \r\n    function afterIco( uint256 _redemptionPrice ) public onlyCrowdsale returns( bool )\r\n    {\r\n        totalSupply = totalSupply.sub( balances[ address(this) ] );\r\n        balances[address(this)] = 0;\r\n        redemptionPrice = _redemptionPrice;\r\n    }\r\n    \r\n\r\n   \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Helper{\r\n    function generatePASS1( address ) public pure returns( bytes32 );\r\n    function generatePASS2( bytes32, address ) public pure returns( bytes32 );\r\n    function generatePASS3( bytes32 ) public pure returns( bytes32 );\r\n    function generateNUMERIC(uint) public constant returns( uint );\r\n    function encryptCounter( uint count ) public constant returns( uint );\r\n    function encodeAmount(uint, uint) public constant returns( uint );\r\n    function decodeAmount(uint, uint) public constant returns( uint );\r\n}\r\n\r\n\r\n\r\ncontract AthToken is AthTokenBase{\r\n    \r\n    Helper helper;\r\n    \r\n    \r\n    \r\n    uint256 private _encryptCounter = 1;\r\n    \r\n    uint8 public ethPriceIn  = 98;\r\n    // uint8 public tokenPriceIn  = 98;\r\n    \r\n    uint256 public ransom = 0;\r\n    \r\n    mapping( address => uint256 ) ethBalances;\r\n    mapping( address => mapping( address => uint256 ) ) tokenBalances;\r\n    \r\n    \r\n    struct Invoice{\r\n        address buyer;\r\n        address seller;\r\n        uint256 tokenNumeric;\r\n        uint256 tokens;\r\n        bytes1 state;\r\n        bytes1 method;\r\n        address token;\r\n    }\r\n    \r\n    \r\n    \r\n    uint constant invoicesStackLimit = 50;\r\n    bytes32[50] invoicesStack;\r\n    uint public invoicesStackCount;\r\n    \r\n    \r\n    \r\n    mapping( bytes32 => Invoice ) invoices;\r\n    mapping( address => bytes32 ) buyersPASS1;\r\n    mapping( address => bytes32 ) buyersPASS3;\r\n    mapping( bytes32 => bytes32 ) PASS3toPASS1;\r\n    mapping( bytes32 => bytes32 ) sellersPASS2;\r\n    \r\n    \r\n    \r\n   \r\n   \r\n   function sellAth( uint256 _amount ) public returns( bool )\r\n   {    //investors\r\n      require( redemptionFund >= _amount && redemptionPrice > 0 && crowdsaleInterface.investorsStockInfo( msg.sender ) > 0 );\r\n       \r\n       uint256 tmp =  _amount.mul( redemptionPrice ) ;\r\n       msg.sender.transfer( tmp );\r\n       balances[ msg.sender ] = balances[ msg.sender ].sub( _amount );\r\n       \r\n       redemptionFund = redemptionFund.sub( tmp );\r\n       \r\n      balances[crowdsaleInterface.getOwners( 0 )] = balances[crowdsaleInterface.getOwners( 0 )].add( _amount.div(2) );\r\n      balances[crowdsaleInterface.getOwners( 1 )] = balances[crowdsaleInterface.getOwners( 1 )].add( _amount.div(2) );\r\n   }\r\n   \r\n   \r\n   \r\n   function replenishEth() public payable\r\n   {\r\n    \r\n       uint tmp = msg.value.mul( ethPriceIn ).div( 100 );\r\n       \r\n       ethBalances[msg.sender]+= tmp;\r\n       \r\n       uint256 remainder = msg.value.sub( tmp );\r\n       \r\n       \r\n       if( redemptionFundTotal < totalSupply ){\r\n           \r\n           redemptionFund = redemptionFund.add( remainder );\r\n           redemptionFundTotal = redemptionFundTotal.add( remainder );\r\n           \r\n       } else {\r\n           \r\n           for( uint256 i = 0; i <= crowdsaleInterface.investorsCount() - 1; i++ ){\r\n               crowdsaleInterface.investorsAddress(i).transfer(  remainder.mul( crowdsaleInterface.investorsStockInfo(crowdsaleInterface.investorsAddress(i)) ).div( 200 )  );\r\n           }\r\n           \r\n           crowdsaleInterface.getOwners( 0 ).transfer( remainder.div( 4 ) );\r\n           crowdsaleInterface.getOwners( 1 ).transfer( remainder.div( 4 ) );\r\n           \r\n       }\r\n       \r\n       \r\n       \r\n       \r\n       \r\n   }\r\n   \r\n\r\n   \r\n   function replenishTokens(address _a, uint256 _amount) public\r\n   {\r\n       StandardToken token = StandardToken( _a );\r\n       require( _amount <= token.balanceOf( msg.sender ) );\r\n       token.transferFrom( msg.sender, this, _amount);\r\n       \r\n       tokenBalances[msg.sender][_a] = tokenBalances[msg.sender][_a].add( _amount );\r\n       \r\n   }\r\n   \r\n   function tokenBalance(address _a) public constant returns(uint256)\r\n   {\r\n       return ( tokenBalances[msg.sender][_a] );\r\n   }\r\n   \r\n   function ethBalance(address _a) public constant returns(uint256)\r\n   {\r\n       return ( ethBalances[_a] );\r\n   }\r\n   function ethContractBalance() public constant returns(uint256)\r\n   {\r\n       return address(this).balance;\r\n   }\r\n   function ethBaseBalance(address _a) public constant returns(uint256)\r\n   {\r\n       return ( _a.balance );\r\n   }\r\n   function withdrawEth( uint256 _amount ) public\r\n   {\r\n       require( _amount <= ethBalances[msg.sender] );\r\n       \r\n       ethBalances[msg.sender] = ethBalances[msg.sender].sub( _amount );\r\n       msg.sender.transfer( _amount );\r\n   }\r\n\r\n    function withdrawToken( address _a, uint256 _amount ) public\r\n   {\r\n       require( _amount <= tokenBalances[msg.sender][_a] );\r\n       \r\n       StandardToken token = StandardToken( _a );\r\n       \r\n       tokenBalances[msg.sender][_a] = tokenBalances[msg.sender][_a].sub( _amount );\r\n       token.transfer( msg.sender, _amount );\r\n   }\r\n    \r\n   function setEthPricies(uint8 _in) public onlyOwner\r\n   {\r\n       ethPriceIn  = _in;\r\n   }\r\n    \r\n    \r\n    \r\n    function SELLER_STEP_1_OPEN() public returns( bool )\r\n    {\r\n        address sender = msg.sender;\r\n        \r\n        _encryptCounter = helper.encryptCounter( _encryptCounter );\r\n        \r\n        bytes32 PASS1 = helper.generatePASS1( sender );\r\n        bytes32 PASS3 = helper.generatePASS3( PASS1 );\r\n        \r\n        invoicesStack[invoicesStackCount] = PASS1;\r\n    \r\n        \r\n        invoicesStackCount++;\r\n        if( invoicesStackCount >= invoicesStackLimit ) invoicesStackCount = 0;\r\n        \r\n        invoices[ PASS1 ].seller     = sender;\r\n        invoices[ PASS1 ].state      = 0x1;\r\n        buyersPASS1[sender]          = PASS1;\r\n        buyersPASS3[sender]          = PASS3;\r\n        PASS3toPASS1[PASS3]          = PASS1;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function SELLER_STEP_2_GET_PASS() public constant returns( bytes32,bytes32 )\r\n    {\r\n        return ( buyersPASS1[msg.sender], buyersPASS3[msg.sender]);\r\n    }\r\n    \r\n\r\n\r\n\r\n\r\n\r\n    \r\n    function SELLER_STEP_4_ACCEPT( bytes32 PASS3 ) public\r\n    {\r\n        require( invoices[ PASS3toPASS1[ PASS3 ] ].seller == msg.sender );\r\n        \r\n        if( invoices[ PASS3toPASS1[ PASS3 ] ].method == 0x1 ) {\r\n            \r\n            balances[msg.sender] = balances[msg.sender].add( invoices[ PASS3toPASS1[ PASS3 ] ].tokens );\r\n            invoices[ PASS3toPASS1[ PASS3 ] ].tokens = 0;\r\n            invoices[ PASS3toPASS1[ PASS3 ] ].state = 0x5;\r\n            \r\n        }\r\n            \r\n        if( invoices[ PASS3toPASS1[ PASS3 ] ].method == 0x2 ) {\r\n            \r\n            msg.sender.transfer( invoices[ PASS3toPASS1[ PASS3 ] ].tokens );\r\n            invoices[ PASS3toPASS1[ PASS3 ] ].tokens = 0;\r\n            invoices[ PASS3toPASS1[ PASS3 ] ].state = 0x5;\r\n            \r\n        }\r\n        \r\n        if( invoices[ PASS3toPASS1[ PASS3 ] ].method == 0x3 ) {\r\n            \r\n            tokenBalances[msg.sender][invoices[ PASS3toPASS1[ PASS3 ] ].token] = tokenBalances[msg.sender][invoices[ PASS3toPASS1[ PASS3 ] ].token].add( invoices[ PASS3toPASS1[ PASS3 ] ].tokens );\r\n            invoices[ PASS3toPASS1[ PASS3 ] ].tokens = 0;\r\n            invoices[ PASS3toPASS1[ PASS3 ] ].state = 0x5;\r\n            \r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    \r\n    function BUYER_STEP_1( bytes32 PASS1 ) public constant returns( bytes32 )\r\n    {\r\n        return helper.generatePASS2( PASS1, msg.sender );\r\n    }\r\n    \r\n    \r\n    function BUYER_STEP_2( bytes32 PASS2 ) public\r\n    {\r\n        address buyer = msg.sender;\r\n        bool find = false;\r\n        \r\n        for( uint i = 0; i < invoicesStack.length; i++ ){\r\n            if( helper.generatePASS2( invoicesStack[i], buyer ) == PASS2 ) {\r\n                find = true;\r\n                break;\r\n            }\r\n        }\r\n        require( find );\r\n        \r\n        sellersPASS2[ PASS2 ] = invoicesStack[i];\r\n        invoices[ sellersPASS2[ PASS2 ] ].tokenNumeric = helper.generateNUMERIC( _encryptCounter );\r\n        invoices[ sellersPASS2[ PASS2 ] ].buyer = buyer;\r\n        invoices[ sellersPASS2[ PASS2 ] ].state = 0x2;\r\n    }\r\n    \r\n    \r\n    function BUYER_STEP_3( bytes32 PASS2, uint _amount) public constant returns( uint )\r\n    {\r\n        require( invoices[ sellersPASS2[ PASS2 ] ].buyer == msg.sender );\r\n        \r\n        return ( helper.encodeAmount( invoices[ sellersPASS2[ PASS2 ] ].tokenNumeric, _amount ) );\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function BUYER_STEP_4( bytes32 PASS2, uint _amount, bytes1 _method, address _token ) public payable\r\n    {\r\n        require( invoices[ sellersPASS2[ PASS2 ] ].buyer == msg.sender );\r\n        \r\n        uint amount = helper.decodeAmount( _amount, invoices[ sellersPASS2[ PASS2 ] ].tokenNumeric );\r\n        \r\n        //ath\r\n        if( _method == 0x1 ) {\r\n            \r\n            require( amount <= balances[msg.sender] );\r\n            balances[msg.sender] = balances[msg.sender].sub(amount);\r\n            invoices[ sellersPASS2[ PASS2 ] ].tokens = amount;\r\n            invoices[ sellersPASS2[ PASS2 ] ].method = 0x1;\r\n        }\r\n        \r\n        //ether\r\n        if( _method == 0x2 ) {\r\n            \r\n            require( amount <= ethBalances[msg.sender] );\r\n            ethBalances[msg.sender] = ethBalances[msg.sender].sub(amount);\r\n            invoices[ sellersPASS2[ PASS2 ] ].tokens = amount;\r\n            invoices[ sellersPASS2[ PASS2 ] ].method = 0x2;\r\n            \r\n        }\r\n        \r\n        //any token\r\n        if( _method == 0x3 ) {\r\n            \r\n            require( amount <= tokenBalances[msg.sender][_token] );\r\n            tokenBalances[msg.sender][_token] = tokenBalances[msg.sender][_token].sub(amount);\r\n            invoices[ sellersPASS2[ PASS2 ] ].tokens = amount;\r\n            invoices[ sellersPASS2[ PASS2 ] ].token = _token;\r\n            invoices[ sellersPASS2[ PASS2 ] ].method = 0x3;\r\n            \r\n        }\r\n        \r\n        invoices[ sellersPASS2[ PASS2 ] ].state = 0x3;\r\n        \r\n    }\r\n\r\n    \r\n    function BUYER_STEP_5_CANCEL( bytes32 PASS2 ) public\r\n    {\r\n        require( invoices[ sellersPASS2[ PASS2 ] ].buyer == msg.sender );\r\n        \r\n        if( invoices[ sellersPASS2[ PASS2 ] ].method == 0x1 ){\r\n            \r\n            balances[msg.sender] = balances[msg.sender].add( invoices[ sellersPASS2[ PASS2 ] ].tokens );\r\n            \r\n        }\r\n        if( invoices[ sellersPASS2[ PASS2 ] ].method == 0x2 ){\r\n            \r\n            ethBalances[msg.sender] = ethBalances[msg.sender].add(invoices[ sellersPASS2[ PASS2 ] ].tokens);\r\n            \r\n        }\r\n        if( invoices[ sellersPASS2[ PASS2 ] ].method == 0x3 ){\r\n            \r\n            tokenBalances[msg.sender][invoices[ sellersPASS2[ PASS2 ] ].token] = tokenBalances[msg.sender][invoices[ sellersPASS2[ PASS2 ] ].token].add(invoices[ sellersPASS2[ PASS2 ] ].tokens);\r\n            \r\n        }\r\n        invoices[ sellersPASS2[ PASS2 ] ].tokens = 0;\r\n        invoices[ sellersPASS2[ PASS2 ] ].state = 0x4;\r\n    }\r\n    \r\n    function SELLER_CHECK_STEP( bytes32 PASS3 ) public constant returns( bytes1, bytes1, address, uint256 )\r\n    {\r\n        require( invoices[ PASS3toPASS1[ PASS3 ] ].seller == msg.sender );\r\n        return ( invoices[ PASS3toPASS1[ PASS3 ] ].state, invoices[ PASS3toPASS1[ PASS3 ] ].method, invoices[ PASS3toPASS1[ PASS3 ] ].token, invoices[ PASS3toPASS1[ PASS3 ] ].tokens ); \r\n    }\r\n    \r\n    function BUYER_CHECK_STEP( bytes32 PASS2 ) public constant returns( bytes1, bytes1, address, uint256  )\r\n    {\r\n        require( invoices[ sellersPASS2[ PASS2 ] ].buyer == msg.sender );\r\n        return ( invoices[ sellersPASS2[ PASS2 ] ].state, invoices[ sellersPASS2[ PASS2 ] ].method, invoices[ sellersPASS2[ PASS2 ] ].token, invoices[ sellersPASS2[ PASS2 ] ].tokens );\r\n    }\r\n    \r\n    \r\n    function setEncryptContract( address _a ) public onlyOwner\r\n    {\r\n         helper = Helper( _a );\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"PASS2\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BUYER_STEP_3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ransom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"replenishTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"PASS2\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_method\",\"type\":\"bytes1\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"BUYER_STEP_4\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellAth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"setCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_redemptionPrice\",\"type\":\"uint256\"}],\"name\":\"afterIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"PASS2\",\"type\":\"bytes32\"}],\"name\":\"BUYER_STEP_2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SELLER_STEP_1_OPEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"PASS2\",\"type\":\"bytes32\"}],\"name\":\"BUYER_STEP_5_CANCEL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_in\",\"type\":\"uint8\"}],\"name\":\"setEthPricies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPriceIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redemptionFundTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"delivery\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"ethBaseBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redemptionPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"PASS1\",\"type\":\"bytes32\"}],\"name\":\"BUYER_STEP_1\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invoicesStackCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"replenishEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"ethBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SELLER_STEP_2_GET_PASS\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redemptionFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"PASS3\",\"type\":\"bytes32\"}],\"name\":\"SELLER_CHECK_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"},{\"name\":\"\",\"type\":\"bytes1\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"PASS3\",\"type\":\"bytes32\"}],\"name\":\"SELLER_STEP_4_ACCEPT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"setEncryptContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"PASS2\",\"type\":\"bytes32\"}],\"name\":\"BUYER_CHECK_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes1\"},{\"name\":\"\",\"type\":\"bytes1\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AthToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://51b7f45fca3146e81f44f9787cc32a69ff108cc1e8c98b8aa5feb02f398138c3"}]}