{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/// @title Ownable contract\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n/// @title Ownable contract\r\ncontract Ownable {\r\n  \r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /// @dev Change ownership\r\n  /// @param newOwner Address of the new owner\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/// @title RateSetter contract\r\ncontract RateSetter {\r\n  \r\n  address public rateSetter;\r\n  event RateSetterChanged(address indexed previousRateSetter, address indexed newRateSetter);\r\n\r\n  function RateSetter() public {\r\n    rateSetter = msg.sender;\r\n  }\r\n\r\n  modifier onlyRateSetter() {\r\n    require(msg.sender == rateSetter);\r\n    _;\r\n  }\r\n\r\n  function changeRateSetter(address newRateSetter) onlyRateSetter public {\r\n    require(newRateSetter != address(0));\r\n    RateSetterChanged(rateSetter, newRateSetter);\r\n    rateSetter = newRateSetter;\r\n  }\r\n\r\n}\r\n\r\n/// @title ERC20 contract\r\n/// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint);\r\n  function transfer(address to, uint value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  \r\n  function allowance(address owner, address spender) public constant returns (uint);\r\n  function transferFrom(address from, address to, uint value) public returns (bool);\r\n  function approve(address spender, uint value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/// @title CCWhitelist contract\r\ncontract CCWhitelist {\r\n  function isWhitelisted(address addr) public constant returns (bool);\r\n}\r\n\r\n/// @title Crowdsale contract\r\ncontract Crowdsale is Ownable, RateSetter {\r\n  using SafeMath for uint256;\r\n\r\n  /// Token reference\r\n  ERC20 public token;\r\n  /// Whitelist reference\r\n  CCWhitelist public whitelist;\r\n  /// Presale start time (inclusive)\r\n  uint256 public startTimePre;\r\n  /// Presale end time (inclusive)\r\n  uint256 public endTimePre;\r\n  /// ICO start time (inclusive)\r\n  uint256 public startTimeIco;\r\n  /// ICO end time (inclusive)\r\n  uint256 public endTimeIco;\r\n  /// Address where the funds will be collected\r\n  address public wallet;\r\n  /// EUR per 1 ETH rate\r\n  uint32 public ethEurRate;\r\n  /// ETH per 1 BTC rate (multiplied by 100)\r\n  uint32 public btcEthRate;\r\n  /// Amount of tokens sold in presale\r\n  uint256 public tokensSoldPre;\r\n  /// Amount of tokens sold in ICO\r\n  uint256 public tokensSoldIco;\r\n  /// Amount of raised ethers expressed in weis\r\n  uint256 public weiRaised;\r\n  /// Amount of raised EUR\r\n  uint256 public eurRaised;\r\n  /// Number of contributions\r\n  uint256 public contributions;\r\n  /// Presale cap\r\n  uint256 public preCap;\r\n  /// Presale discount percentage\r\n  uint8 public preDiscountPercentage;\r\n\r\n  /// Amount of tokens in each phase\r\n  uint256 public icoPhaseAmount1;\r\n  uint256 public icoPhaseAmount2;\r\n  uint256 public icoPhaseAmount3;\r\n  uint256 public icoPhaseAmount4;\r\n\r\n  /// Discount percentages in each phase\r\n  uint8 public icoPhaseDiscountPercentage1;\r\n  uint8 public icoPhaseDiscountPercentage2;\r\n  uint8 public icoPhaseDiscountPercentage3;\r\n  uint8 public icoPhaseDiscountPercentage4;\r\n\r\n  /// Hard cap in EUR\r\n  uint32 public HARD_CAP_EUR = 19170000; // 19 170 000 EUR\r\n  /// Soft cap in EUR\r\n  uint32 public SOFT_CAP_EUR = 2000000; // 2 000 000 EUR\r\n  /// Hard cap in tokens\r\n  uint256 public HARD_CAP_IN_TOKENS = 810 * 10**24; //810m CC tokens\r\n\r\n  /// Mapping for contributors - to limit max contribution and possibly to extract info for refund if soft cap is not reached\r\n  mapping (address => uint) public contributors;\r\n\r\n  function Crowdsale(uint256 _startTimePre, uint256 _endTimePre, uint256 _startTimeIco, uint256 _endTimeIco, uint32 _ethEurRate, uint32 _btcEthRate, address _wallet, address _tokenAddress, address _whitelistAddress) {\r\n    require(_startTimePre >= now);\r\n    require(_endTimePre >= _startTimePre);\r\n    require(_startTimeIco >= _endTimePre);\r\n    require(_endTimeIco >= _startTimeIco);\r\n    require(_ethEurRate > 0 && _btcEthRate > 0);\r\n    require(_wallet != address(0));\r\n    require(_tokenAddress != address(0));\r\n    require(_whitelistAddress != address(0));\r\n\r\n    startTimePre = _startTimePre;\r\n    endTimePre = _endTimePre;\r\n    startTimeIco = _startTimeIco;\r\n    endTimeIco = _endTimeIco;\r\n    ethEurRate = _ethEurRate;\r\n    btcEthRate = _btcEthRate;\r\n    wallet = _wallet;\r\n    token = ERC20(_tokenAddress);\r\n    whitelist = CCWhitelist(_whitelistAddress);\r\n    preCap = 90 * 10**24;             // 90m tokens\r\n    preDiscountPercentage = 50;       // 50% discount\r\n    icoPhaseAmount1 = 135 * 10**24;   // 135m tokens \r\n    icoPhaseAmount2 = 450 * 10**24;   // 450m tokens\r\n    icoPhaseAmount3 = 135 * 10**24;   // 135m tokens\r\n    icoPhaseAmount4 = 90 * 10**24;    // 90m tokens\r\n    icoPhaseDiscountPercentage1 = 40; // 40% discount\r\n    icoPhaseDiscountPercentage2 = 30; // 30% discount\r\n    icoPhaseDiscountPercentage3 = 20; // 20% discount\r\n    icoPhaseDiscountPercentage4 = 0;  // 0% discount\r\n  }\r\n\r\n\r\n  function setRates(uint32 _ethEurRate, uint32 _btcEthRate) public onlyRateSetter {\r\n    require(_ethEurRate > 0 && _btcEthRate > 0);\r\n    ethEurRate = _ethEurRate;\r\n    btcEthRate = _btcEthRate;\r\n    RatesChanged(rateSetter, ethEurRate, btcEthRate);\r\n  }\r\n\r\n  /// @dev Fallback function for crowdsale contribution\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /// @dev Buy tokens function\r\n  /// @param beneficiary Address which will receive the tokens\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(whitelist.isWhitelisted(beneficiary));\r\n    uint256 weiAmount = msg.value;\r\n    require(weiAmount > 0);\r\n    require(contributors[beneficiary].add(weiAmount) <= 200 ether);\r\n    uint256 tokenAmount = 0;\r\n    if (isPresale()) {\r\n      /// Minimum contribution of 1 ether during presale\r\n      require(weiAmount >= 1 ether); \r\n      tokenAmount = getTokenAmount(weiAmount, preDiscountPercentage);\r\n      uint256 newTokensSoldPre = tokensSoldPre.add(tokenAmount);\r\n      require(newTokensSoldPre <= preCap);\r\n      tokensSoldPre = newTokensSoldPre;\r\n    } else if (isIco()) {\r\n      uint8 discountPercentage = getIcoDiscountPercentage();\r\n      tokenAmount = getTokenAmount(weiAmount, discountPercentage);\r\n      /// Minimum contribution 1 token during ICO\r\n      require(tokenAmount >= 10**18); \r\n      uint256 newTokensSoldIco = tokensSoldIco.add(tokenAmount); \r\n      require(newTokensSoldIco <= HARD_CAP_IN_TOKENS);\r\n      tokensSoldIco = newTokensSoldIco;\r\n    } else {\r\n      /// Stop execution and return remaining gas\r\n      require(false);\r\n    }\r\n    executeTransaction(beneficiary, weiAmount, tokenAmount);\r\n  }\r\n\r\n  /// @dev Internal function used for calculating ICO discount percentage depending on levels\r\n  function getIcoDiscountPercentage() internal constant returns (uint8) {\r\n    if (tokensSoldIco <= icoPhaseAmount1) {\r\n      return icoPhaseDiscountPercentage1;\r\n    } else if (tokensSoldIco <= icoPhaseAmount1.add(icoPhaseAmount2)) {\r\n      return icoPhaseDiscountPercentage2;\r\n    } else if (tokensSoldIco <= icoPhaseAmount1.add(icoPhaseAmount2).add(icoPhaseAmount3)) { \r\n      return icoPhaseDiscountPercentage3;\r\n    } else {\r\n      return icoPhaseDiscountPercentage4;\r\n    }\r\n  }\r\n\r\n  /// @dev Internal function used to calculate amount of tokens based on discount percentage\r\n  function getTokenAmount(uint256 weiAmount, uint8 discountPercentage) internal constant returns (uint256) {\r\n    /// Less than 100 to avoid division with zero\r\n    require(discountPercentage >= 0 && discountPercentage < 100); \r\n    uint256 baseTokenAmount = weiAmount.mul(ethEurRate);\r\n    uint256 denominator = 3 * (100 - discountPercentage);\r\n    uint256 tokenAmount = baseTokenAmount.mul(10000).div(denominator);\r\n    return tokenAmount;\r\n  }\r\n\r\n   \r\n  /// point out that it works for the last block\r\n  /// @dev This method is used to get the current amount user can receive for 1ETH -- Used by frontend for easier calculation\r\n  /// @return Amount of CC tokens\r\n  function getCurrentTokenAmountForOneEth() public constant returns (uint256) {\r\n    if (isPresale()) {\r\n      return getTokenAmount(1 ether, preDiscountPercentage);\r\n    } else if (isIco()) {\r\n      uint8 discountPercentage = getIcoDiscountPercentage();\r\n      return getTokenAmount(1 ether, discountPercentage);\r\n    } \r\n    return 0;\r\n  }\r\n  \r\n  /// @dev This method is used to get the current amount user can receive for 1BTC -- Used by frontend for easier calculation\r\n  /// @return Amount of CC tokens\r\n  function getCurrentTokenAmountForOneBtc() public constant returns (uint256) {\r\n    uint256 amountForOneEth = getCurrentTokenAmountForOneEth();\r\n    return amountForOneEth.mul(btcEthRate).div(100);\r\n  }\r\n\r\n  /// @dev Internal function for execution of crowdsale transaction and proper logging used by payable functions\r\n  function executeTransaction(address beneficiary, uint256 weiAmount, uint256 tokenAmount) internal {\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    uint256 eurAmount = weiAmount.mul(ethEurRate).div(10**18);\r\n    eurRaised = eurRaised.add(eurAmount);\r\n    token.transfer(beneficiary, tokenAmount);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokenAmount);\r\n\t  contributions = contributions.add(1);\r\n    contributors[beneficiary] = contributors[beneficiary].add(weiAmount);\r\n    wallet.transfer(weiAmount);\r\n  }\r\n\r\n  function changeIcoPhaseAmounts(uint256[] icoPhaseAmounts) public onlyOwner {\r\n    require(icoPhaseAmounts.length == 4);\r\n    uint256 sum = 0;\r\n    for (uint i = 0; i < icoPhaseAmounts.length; i++) {\r\n      sum = sum.add(icoPhaseAmounts[i]);\r\n    }\r\n    require(sum == HARD_CAP_IN_TOKENS);\r\n    icoPhaseAmount1 = icoPhaseAmounts[0];\r\n    icoPhaseAmount2 = icoPhaseAmounts[1];\r\n    icoPhaseAmount3 = icoPhaseAmounts[2];\r\n    icoPhaseAmount4 = icoPhaseAmounts[3];\r\n    IcoPhaseAmountsChanged(icoPhaseAmount1, icoPhaseAmount2, icoPhaseAmount3, icoPhaseAmount4);\r\n  }\r\n\r\n  /// @dev Check if presale is active\r\n  function isPresale() public constant returns (bool) {\r\n    return now >= startTimePre && now <= endTimePre;\r\n  }\r\n\r\n  /// @dev Check if ICO is active\r\n  function isIco() public constant returns (bool) {\r\n    return now >= startTimeIco && now <= endTimeIco;\r\n  }\r\n\r\n  /// @dev Check if presale has ended\r\n  function hasPresaleEnded() public constant returns (bool) {\r\n    return now > endTimePre;\r\n  }\r\n\r\n  /// @dev Check if ICO has ended\r\n  function hasIcoEnded() public constant returns (bool) {\r\n    return now > endTimeIco;\r\n  }\r\n\r\n  /// @dev Amount of tokens that have been sold during both presale and ICO phase\r\n  function cummulativeTokensSold() public constant returns (uint256) {\r\n    return tokensSoldPre + tokensSoldIco;\r\n  }\r\n\r\n  /// @dev Function to extract mistakenly sent ERC20 tokens sent to Crowdsale contract and to extract unsold CC tokens\r\n  /// @param _token Address of token we want to extract\r\n  function claimTokens(address _token) public onlyOwner {\r\n    if (_token == address(0)) { \r\n         owner.transfer(this.balance);\r\n         return;\r\n    }\r\n\r\n    ERC20 erc20Token = ERC20(_token);\r\n    uint balance = erc20Token.balanceOf(this);\r\n    erc20Token.transfer(owner, balance);\r\n    ClaimedTokens(_token, owner, balance);\r\n  }\r\n\r\n  /// Events\r\n  event TokenPurchase(address indexed _purchaser, address indexed _beneficiary, uint256 _value, uint256 _amount);\r\n  event ClaimedTokens(address indexed _token, address indexed _owner, uint _amount);\r\n  event IcoPhaseAmountsChanged(uint256 _icoPhaseAmount1, uint256 _icoPhaseAmount2, uint256 _icoPhaseAmount3, uint256 _icoPhaseAmount4);\r\n  event RatesChanged(address indexed _rateSetter, uint32 _ethEurRate, uint32 _btcEthRate);\r\n\r\n}\r\n\r\n/// @title CulturalCoinCrowdsale contract\r\ncontract CulturalCoinCrowdsale is Crowdsale {\r\n\r\n  function CulturalCoinCrowdsale(uint256 _startTimePre, uint256 _endTimePre, uint256 _startTimeIco, uint256 _endTimeIco, uint32 _ethEurRate, uint32 _btcEthRate, address _wallet, address _tokenAddress, address _whitelistAddress) \r\n  Crowdsale(_startTimePre, _endTimePre, _startTimeIco, _endTimeIco, _ethEurRate, _btcEthRate, _wallet, _tokenAddress, _whitelistAddress) public {\r\n\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP_EUR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhaseAmount4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhaseAmount2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimePre\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhaseDiscountPercentage3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eurRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimeIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhaseAmount3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldPre\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP_IN_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimeIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhaseAmount1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasPresaleEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOFT_CAP_EUR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSoldIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRateSetter\",\"type\":\"address\"}],\"name\":\"changeRateSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"btcEthRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasIcoEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimePre\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethEurRate\",\"type\":\"uint32\"},{\"name\":\"_btcEthRate\",\"type\":\"uint32\"}],\"name\":\"setRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"icoPhaseAmounts\",\"type\":\"uint256[]\"}],\"name\":\"changeIcoPhaseAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTokenAmountForOneEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhaseDiscountPercentage1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cummulativeTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhaseDiscountPercentage2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhaseDiscountPercentage4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preDiscountPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTokenAmountForOneBtc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethEurRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateSetter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIco\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTimePre\",\"type\":\"uint256\"},{\"name\":\"_endTimePre\",\"type\":\"uint256\"},{\"name\":\"_startTimeIco\",\"type\":\"uint256\"},{\"name\":\"_endTimeIco\",\"type\":\"uint256\"},{\"name\":\"_ethEurRate\",\"type\":\"uint32\"},{\"name\":\"_btcEthRate\",\"type\":\"uint32\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_whitelistAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_icoPhaseAmount1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_icoPhaseAmount2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_icoPhaseAmount3\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_icoPhaseAmount4\",\"type\":\"uint256\"}],\"name\":\"IcoPhaseAmountsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_rateSetter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ethEurRate\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_btcEthRate\",\"type\":\"uint32\"}],\"name\":\"RatesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousRateSetter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRateSetter\",\"type\":\"address\"}],\"name\":\"RateSetterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CulturalCoinCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a93e8b0000000000000000000000000000000000000000000000000000000005a9c887f000000000000000000000000000000000000000000000000000000005a9c8880000000000000000000000000000000000000000000000000000000005ac6b87f00000000000000000000000000000000000000000000000000000000000002b9000000000000000000000000000000000000000000000000000000000000046a0000000000000000000000001b6b58b7d8226cc5242e57864519b8310055a1eb0000000000000000000000003c159c0b03974f4b2befdde6f9f4ef09fd8d697b00000000000000000000000080199cf8cf5292458e8a6f56499b6de69c240e9d","Library":"","SwarmSource":"bzzr://571aaafeaff94bac5a74c813eb7a0945db260cf2aab79f7ab4c50a2058897fbd"}]}