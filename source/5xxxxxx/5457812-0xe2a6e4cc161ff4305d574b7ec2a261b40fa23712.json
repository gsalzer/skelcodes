{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n// ----------------------------------------------------------------------------\r\n// CSE ICO contract\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe math\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Ownership contract\r\n// _newOwner is address of new owner\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    \r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // transfer Ownership to other address\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0x0));\r\n        emit OwnershipTransferred(owner,_newOwner);\r\n        owner = _newOwner;\r\n    }\r\n    \r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// CesaireToken interface\r\n// ----------------------------------------------------------------------------\r\ncontract CesaireToken {\r\n    \r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    \r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// CesaireICO smart contract\r\n// ----------------------------------------------------------------------------\r\ncontract CesaireICO is Owned {\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    enum State {\r\n        PrivatePreSale,\r\n        PreICO,\r\n        ICORound1,\r\n        ICORound2,\r\n        ICORound3,\r\n        ICORound4,\r\n        ICORound5,\r\n        Successful\r\n    }\r\n    \r\n    //public variables\r\n    State public state; //Set initial stage\r\n    uint256 public totalRaised; //eth in wei\r\n    uint256 public totalDistributed; //tokens distributed\r\n    CesaireToken public CSE; // CSE token address\r\n    \r\n    mapping(address => bool) whitelist; // whitelisting for KYC verified users\r\n\r\n    // events for log\r\n    event LogWhiteListed(address _addr);\r\n    event LogBlackListed(address _addr);\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFunderInitialized(address _creator);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n    \r\n    // To determine whether the ICO is running or stopped\r\n    modifier onlyIfNotFinished {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n    \r\n    // To determine whether the user is whitelisted \r\n    modifier onlyIfWhiteListedOnPreSale {\r\n        if(state == State.PrivatePreSale) {\r\n          require(whitelist[msg.sender]);\r\n        } \r\n        _;\r\n    }\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // CesaireICO constructor\r\n    // _addressOfToken is the token totalDistributed\r\n    // ----------------------------------------------------------------------------\r\n    function CesaireICO (CesaireToken _addressOfToken) public {\r\n        require(_addressOfToken != address(0)); // should have valid address\r\n        CSE = CesaireToken(_addressOfToken);\r\n        state = State.PrivatePreSale;\r\n        emit LogFunderInitialized(owner);\r\n    }\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Function to handle eth transfers\r\n    // It invokes when someone sends ETH to this contract address.\r\n    // Requires enough gas for the execution otherwise it'll throw out of gas error.\r\n    // tokens are transferred to user\r\n    // ETH are transferred to current owner\r\n    // minimum 1 ETH investment\r\n    // maxiumum 10 ETH investment\r\n    // ----------------------------------------------------------------------------\r\n    function() public payable {\r\n        contribute();\r\n    }\r\n\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Acceptes ETH and send equivalent CSE with bonus if any.\r\n    // NOTE: Add user to whitelist by invoking addToWhiteList() function.\r\n    // Only whitelisted users can buy tokens.\r\n    // For Non-whitelisted/Blacklisted users transaction will be reverted. \r\n    // ----------------------------------------------------------------------------\r\n    function contribute() onlyIfNotFinished onlyIfWhiteListedOnPreSale public payable {\r\n        \r\n        uint256 tokenBought; // Variable to store amount of tokens bought\r\n        uint256 bonus; // Variable to store bonus if any\r\n        uint256 tokenPrice;\r\n        \r\n        //Token allocation calculation\r\n        if (state == State.PrivatePreSale){\r\n            require(msg.value >= 2 ether); // min 2 ETH investment\r\n            tokenPrice = 160000;\r\n            tokenBought = msg.value.mul(tokenPrice);\r\n            bonus = tokenBought; // 100 % bonus\r\n        } \r\n        else if (state == State.PreICO){\r\n            require(msg.value >= 1 ether); // min 1 ETH investment\r\n            tokenPrice = 160000;\r\n            tokenBought = msg.value.mul(tokenPrice);\r\n            bonus = tokenBought.mul(50).div(100); // 50 % bonus\r\n        } \r\n        else if (state == State.ICORound1){\r\n            require(msg.value >= 0.7 ether); // min 0.7 ETH investment\r\n            tokenPrice = 140000;\r\n            tokenBought = msg.value.mul(tokenPrice);\r\n            bonus = tokenBought.mul(40).div(100); // 40 % bonus\r\n        } \r\n        else if (state == State.ICORound2){\r\n            require(msg.value >= 0.5 ether); // min 0.5 ETH investment\r\n            tokenPrice = 120000;\r\n            tokenBought = msg.value.mul(tokenPrice);\r\n            bonus = tokenBought.mul(30).div(100); // 30 % bonus\r\n        } \r\n        else if (state == State.ICORound3){\r\n            require(msg.value >= 0.3 ether); // min 0.3 ETH investment\r\n            tokenPrice = 100000;\r\n            tokenBought = msg.value.mul(tokenPrice);\r\n            bonus = tokenBought.mul(20).div(100); // 20 % bonus\r\n        } \r\n        else if (state == State.ICORound4){\r\n            require(msg.value >= 0.2 ether); // min 0.2 ETH investment\r\n            tokenPrice = 80000;\r\n            tokenBought = msg.value.mul(tokenPrice);\r\n            bonus = tokenBought.mul(10).div(100); // 10 % bonus\r\n        } \r\n        else if (state == State.ICORound5){\r\n            require(msg.value >= 0.1 ether); // min 0.1 ETH investment\r\n            tokenPrice = 60000;\r\n            tokenBought = msg.value.mul(tokenPrice);\r\n            bonus = 0; // 0 % bonus\r\n        } \r\n\r\n        tokenBought = tokenBought.add(bonus); // add bonus to the tokenBought\r\n        \r\n        // this smart contract should have enough tokens to distribute\r\n        require(CSE.balanceOf(this) >= tokenBought);\r\n        \r\n        totalRaised = totalRaised.add(msg.value); // Save the total eth totalRaised (in wei)\r\n        totalDistributed = totalDistributed.add(tokenBought); //Save to total tokens distributed\r\n        \r\n        CSE.transfer(msg.sender,tokenBought); //Send Tokens to user\r\n        owner.transfer(msg.value); // Send ETH to owner\r\n        \r\n        //LOGS\r\n        emit LogContributorsPayout(msg.sender,tokenBought); // Log investor paid event\r\n        emit LogBeneficiaryPaid(owner); // Log owner paid event\r\n        emit LogFundingReceived(msg.sender, msg.value, totalRaised); // Log funding event\r\n    }\r\n    \r\n    \r\n    function finished() onlyOwner public { \r\n        \r\n        uint256 remainder = CSE.balanceOf(this); //Remaining tokens on contract\r\n        \r\n        //Funds send to creator if any\r\n        if(address(this).balance > 0) {\r\n            owner.transfer(address(this).balance);\r\n            emit LogBeneficiaryPaid(owner);\r\n        }\r\n \r\n        CSE.transfer(owner,remainder); //remainder tokens send to creator\r\n        emit LogContributorsPayout(owner, remainder);\r\n        \r\n        state = State.Successful; // updating the state\r\n    }\r\n    \r\n    \r\n    function nextState() onlyOwner public {\r\n        require(state != State.ICORound5);\r\n        state = State(uint(state) + 1);\r\n    }\r\n    \r\n    \r\n    function previousState() onlyOwner public {\r\n        require(state != State.PrivatePreSale);\r\n        state = State(uint(state) - 1);\r\n    }\r\n\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // function to whitelist user if KYC verified\r\n    // returns true if whitelisting is successful else returns false\r\n    // ----------------------------------------------------------------------------\r\n    function addToWhiteList(address _userAddress) onlyOwner public returns(bool) {\r\n        require(_userAddress != address(0)); // user address must be valid\r\n        // if not already in the whitelist\r\n        if (!whitelist[_userAddress]) {\r\n            whitelist[_userAddress] = true;\r\n            emit LogWhiteListed(_userAddress); // Log whitelist event\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // function to remove user from whitelist\r\n    // ----------------------------------------------------------------------------\r\n    function removeFromWhiteList(address _userAddress) onlyOwner public returns(bool) {\r\n        require(_userAddress != address(0)); // user address must be valid\r\n        // if in the whitelist\r\n        if(whitelist[_userAddress]) {\r\n           whitelist[_userAddress] = false; \r\n           emit LogBlackListed(_userAddress); // Log blacklist event\r\n           return true;\r\n        } else {\r\n            return false;\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // function to check if user is whitelisted\r\n    // ----------------------------------------------------------------------------\r\n    function checkIfWhiteListed(address _userAddress) view public returns(bool) {\r\n        return whitelist[_userAddress];\r\n    }\r\n    \r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Function to claim any token stuck on contract\r\n    // ----------------------------------------------------------------------------\r\n    function claimTokens() onlyOwner public {\r\n        uint256 remainder = CSE.balanceOf(this); //Check remainder tokens\r\n        CSE.transfer(owner,remainder); //Transfer tokens to owner\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"previousState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"checkIfWhiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CSE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressOfToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"LogWhiteListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"LogBlackListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CesaireICO","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000768e9957945cffdb70e7c242dc99ae3edee8d833","Library":"","SwarmSource":"bzzr://33c2ae7e1df5a51a567271da26cc15f9bc01f778965458e13f248c63a143182c"}]}