{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: zeppelin/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Certification.sol\r\n\r\ncontract Certification is Ownable {\r\n\r\n  struct Certifier {\r\n    bool valid;\r\n    string id;\r\n  }\r\n\r\n  mapping (address => Certifier) public certifiers;\r\n\r\n  event Certificate(bytes32 indexed certHash, bytes32 innerHash, address indexed certifier);\r\n  event Revocation(bytes32 indexed certHash, bool invalid);\r\n\r\n  function setCertifierInfo(address certifier, bool valid, string id)\r\n  onlyOwner public {\r\n    certifiers[certifier] = Certifier({\r\n      valid: valid,\r\n      id: id\r\n    });\r\n  }\r\n\r\n  function computeCertHash(address certifier, bytes32 innerHash) pure public returns (bytes32) {\r\n    return keccak256(certifier, innerHash);\r\n  }\r\n\r\n  function certify(bytes32 innerHash) public {\r\n    require(certifiers[msg.sender].valid);\r\n    Certificate(\r\n      computeCertHash(msg.sender, innerHash),\r\n      innerHash, msg.sender\r\n    );\r\n  }\r\n\r\n  function revoke(bytes32 innerHash, address certifier, bool invalid) public {\r\n    require(msg.sender == owner\r\n      || (certifiers[msg.sender].valid && msg.sender == certifier)\r\n    );\r\n    Revocation(computeCertHash(certifier, innerHash), invalid);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"certifier\",\"type\":\"address\"},{\"name\":\"valid\",\"type\":\"bool\"},{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"setCertifierInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"innerHash\",\"type\":\"bytes32\"}],\"name\":\"certify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"certifiers\",\"outputs\":[{\"name\":\"valid\",\"type\":\"bool\"},{\"name\":\"id\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"certifier\",\"type\":\"address\"},{\"name\":\"innerHash\",\"type\":\"bytes32\"}],\"name\":\"computeCertHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"innerHash\",\"type\":\"bytes32\"},{\"name\":\"certifier\",\"type\":\"address\"},{\"name\":\"invalid\",\"type\":\"bool\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"certHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"innerHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"certifier\",\"type\":\"address\"}],\"name\":\"Certificate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"certHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"invalid\",\"type\":\"bool\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Certification","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ce3daf5492cab1a0fc6eca5417676c7710beef8a7f894770253c26a65e5aa3a3"}]}