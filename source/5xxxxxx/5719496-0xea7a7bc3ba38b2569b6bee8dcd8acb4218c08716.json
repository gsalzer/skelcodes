{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender; \r\n    }\r\n\r\n    /**\r\n        @dev Transfers the ownership of the contract.\r\n\r\n        @param _owner Address of the new owner\r\n    */\r\n    function setOwner(address _owner) public onlyOwner returns (bool) {\r\n        require(_owner != address(0));\r\n        owner = _owner;\r\n        return true;\r\n    } \r\n}\r\n\r\n\r\ncontract HasWorkers is Ownable {\r\n    mapping(address => uint256) private workerToIndex;    \r\n    address[] private workers;\r\n\r\n    event AddedWorker(address _worker);\r\n    event RemovedWorker(address _worker);\r\n\r\n    constructor() public {\r\n        workers.length++;\r\n    }\r\n\r\n    modifier onlyWorker() {\r\n        require(isWorker(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier workerOrOwner() {\r\n        require(isWorker(msg.sender) || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function isWorker(address _worker) public view returns (bool) {\r\n        return workerToIndex[_worker] != 0;\r\n    }\r\n\r\n    function allWorkers() public view returns (address[] memory result) {\r\n        result = new address[](workers.length - 1);\r\n        for (uint256 i = 1; i < workers.length; i++) {\r\n            result[i - 1] = workers[i];\r\n        }\r\n    }\r\n\r\n    function addWorker(address _worker) public onlyOwner returns (bool) {\r\n        require(!isWorker(_worker));\r\n        uint256 index = workers.push(_worker) - 1;\r\n        workerToIndex[_worker] = index;\r\n        emit AddedWorker(_worker);\r\n        return true;\r\n    }\r\n\r\n    function removeWorker(address _worker) public onlyOwner returns (bool) {\r\n        require(isWorker(_worker));\r\n        uint256 index = workerToIndex[_worker];\r\n        address lastWorker = workers[workers.length - 1];\r\n        workerToIndex[lastWorker] = index;\r\n        workers[index] = lastWorker;\r\n        workers.length--;\r\n        delete workerToIndex[_worker];\r\n        emit RemovedWorker(_worker);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ControllerStorage {\r\n    address public walletsDelegate;\r\n    address public controllerDelegate;\r\n    address public forward;\r\n    uint256 public createdWallets;\r\n    mapping(bytes32 => bytes32) public gStorage;\r\n}\r\n\r\ncontract DelegateProxy {\r\n  /**\r\n   * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\r\n   * @param _dst Destination address to perform the delegatecall\r\n   * @param _calldata Calldata for the delegatecall\r\n   */\r\n  function delegatedFwd(address _dst, bytes _calldata) internal {\r\n    assembly {\r\n      let result := delegatecall(sub(gas, 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\r\n      let size := returndatasize\r\n\r\n      let ptr := mload(0x40)\r\n      returndatacopy(ptr, 0, size)\r\n\r\n      // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\r\n      // if the call returned error data, forward it\r\n      switch result case 0 { revert(ptr, size) }\r\n      default { return(ptr, size) }\r\n    }\r\n  }\r\n}\r\n\r\ncontract DelegateProvider {\r\n    function getDelegate() public view returns (address delegate);\r\n}\r\n\r\ncontract ControllerProxy is ControllerStorage, Ownable, HasWorkers, DelegateProvider, DelegateProxy {\r\n    function getDelegate() public view returns (address delegate) {\r\n        delegate = walletsDelegate;\r\n    }\r\n\r\n    function setWalletsDelegate(address _delegate) public onlyOwner returns (bool) {\r\n        walletsDelegate = _delegate;\r\n        return true;\r\n    }\r\n\r\n    function setControllerDelegate(address _delegate) public onlyOwner returns (bool) {\r\n        controllerDelegate = _delegate;\r\n        return true;\r\n    }\r\n\r\n    function() public payable {\r\n        if (gasleft() > 2400) {\r\n            delegatedFwd(controllerDelegate, msg.data);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"gStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setWalletsDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"addWorker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"isWorker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDelegate\",\"outputs\":[{\"name\":\"delegate\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"removeWorker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allWorkers\",\"outputs\":[{\"name\":\"result\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createdWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletsDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setControllerDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"AddedWorker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"RemovedWorker\",\"type\":\"event\"}]","ContractName":"ControllerProxy","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ebd22247a8ef2ac3ae92893e66f4bb4e72eddd556ff5c51a6127438e4205100d"}]}