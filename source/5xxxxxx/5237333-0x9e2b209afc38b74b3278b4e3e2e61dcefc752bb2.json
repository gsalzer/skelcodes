{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/*\r\n\r\n  Copyright 2018 AICT Foundation.\r\n  https://www.aict.io/\r\n\r\n*/\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ICTA is ERC20,Ownable{\r\n\tusing SafeMath for uint256;\r\n\tstring public constant name=\"ICTA\";\r\n\tstring public constant symbol=\"ICTA\";\r\n\tstring public constant version = \"0\";\r\n\tuint256 public constant decimals = 9;\r\n\tuint256 public constant MAX_SUPPLY=500000000*10**decimals;\r\n\tuint256 public airdropSupply;\r\n    struct epoch  {\r\n        uint256 lockEndTime;\r\n        uint256 lockAmount;\r\n    }\r\n\r\n    mapping(address=>epoch[]) public lockEpochsMap;\r\n    mapping(address => uint256) balances;\r\n\tmapping (address => mapping (address => uint256)) allowed;\r\n\t\r\n\r\n\tfunction ICTA()public{\r\n\t\ttotalSupply = 500000000 ;\r\n\t\tairdropSupply = 0;\r\n\t\ttotalSupply=MAX_SUPPLY;\r\n\t\tbalances[msg.sender] = MAX_SUPPLY;\r\n\t\tTransfer(0x0, msg.sender, MAX_SUPPLY);\r\n\t}\r\n\r\n\r\n\tmodifier notReachTotalSupply(uint256 _value,uint256 _rate){\r\n\t\tassert(MAX_SUPPLY>=totalSupply.add(_value.mul(_rate)));\r\n\t\t_;\r\n\t}\r\n\r\n  \tfunction transfer(address _to, uint256 _value) public  returns (bool)\r\n \t{\r\n\t\trequire(_to != address(0));\r\n\r\n\t\tepoch[] storage epochs = lockEpochsMap[msg.sender];\r\n\t\tuint256 needLockBalance = 0;\r\n\t\tfor(uint256 i = 0;i<epochs.length;i++)\r\n\t\t{\r\n\t\t\tif( now < epochs[i].lockEndTime )\r\n\t\t\t{\r\n\t\t\t\tneedLockBalance=needLockBalance.add(epochs[i].lockAmount);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trequire(balances[msg.sender].sub(_value)>=needLockBalance);\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n  \t}\r\n\r\n  \tfunction balanceOf(address _owner) public constant returns (uint256 balance) \r\n  \t{\r\n\t\treturn balances[_owner];\r\n  \t}\r\n\r\n  \tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) \r\n  \t{\r\n\t\trequire(_to != address(0));\r\n\r\n\t\tepoch[] storage epochs = lockEpochsMap[_from];\r\n\t\tuint256 needLockBalance = 0;\r\n\t\tfor(uint256 i = 0;i<epochs.length;i++)\r\n\t\t{\r\n\r\n\t\t\tif( now < epochs[i].lockEndTime )\r\n\t\t\t{\r\n\t\t\t\tneedLockBalance = needLockBalance.add(epochs[i].lockAmount);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trequire(balances[_from].sub(_value)>=needLockBalance);\r\n\r\n\t\tuint256 _allowance = allowed[_from][msg.sender];\r\n\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\r\n\t\tTransfer(_from, _to, _value);\r\n\t\treturn true;\r\n  \t}\r\n\r\n  \tfunction approve(address _spender, uint256 _value) public returns (bool) \r\n  \t{\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n  \t}\r\n\r\n  \tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) \r\n  \t{\r\n\t\treturn allowed[_owner][_spender];\r\n  \t}\r\n\r\n\tfunction lockBalance(address user, uint256 lockAmount,uint256 lockEndTime) internal\r\n\t{\r\n\t\t epoch[] storage epochs = lockEpochsMap[user];\r\n\t\t epochs.push(epoch(lockEndTime,lockAmount));\r\n\t}\r\n\r\n    function airdrop(address [] _holders,uint256 paySize) external\r\n    \tonlyOwner \r\n\t{\r\n\t\tuint256 unfreezeAmount=paySize.div(5);\r\n        uint256 count = _holders.length;\r\n        assert(paySize.mul(count) <= balanceOf(msg.sender));\r\n        for (uint256 i = 0; i < count; i++) {\r\n            transfer(_holders [i], paySize);\r\n\r\n            lockBalance(_holders [i],unfreezeAmount,now+10368000);\r\n\r\n            lockBalance(_holders [i],unfreezeAmount,now+10368000+2592000);\r\n\r\n            lockBalance(_holders [i],unfreezeAmount,now+10368000+2592000+2592000);\r\n\r\n            lockBalance(_holders [i],unfreezeAmount,now+10368000+2592000+2592000+2592000);\r\n\r\n            lockBalance(_holders [i],unfreezeAmount,now+10368000+2592000+2592000+2592000+2592000);\r\n            \r\n\t\t\tairdropSupply = airdropSupply.add(paySize);\r\n        }\r\n    }\r\n\r\n    function airdrop2(address [] _holders,uint256 paySize) external\r\n    \tonlyOwner \r\n\t{\r\n\t\tuint256 unfreezeAmount=paySize.div(10);\r\n        uint256 count = _holders.length;\r\n        assert(paySize.mul(count) <= balanceOf(msg.sender));\r\n        for (uint256 i = 0; i < count; i++) {\r\n            transfer(_holders [i], paySize);\r\n\r\n            lockBalance(_holders [i],unfreezeAmount,now+5184000);\r\n\r\n            lockBalance(_holders [i],unfreezeAmount,now+5184000+2592000);\r\n\r\n            lockBalance(_holders [i],unfreezeAmount,now+5184000+2592000+2592000);\r\n\r\n            lockBalance(_holders [i],unfreezeAmount,now+5184000+2592000+2592000+2592000);\r\n\r\n            lockBalance(_holders [i],unfreezeAmount,now+5184000+2592000+2592000+2592000+2592000);\r\n\r\n            lockBalance(_holders [i],unfreezeAmount,now+5184000+2592000+2592000+2592000+2592000+2592000);\r\n\r\n            lockBalance(_holders [i],unfreezeAmount,now+5184000+2592000+2592000+2592000+2592000+2592000+2592000);\r\n\r\n            lockBalance(_holders [i],unfreezeAmount,now+5184000+2592000+2592000+2592000+2592000+2592000+2592000+2592000);\r\n\r\n            lockBalance(_holders [i],unfreezeAmount,now+5184000+2592000+2592000+2592000+2592000+2592000+2592000+2592000+2592000);\r\n\r\n            lockBalance(_holders [i],unfreezeAmount,now+5184000+2592000+2592000+2592000+2592000+2592000+2592000+2592000+2592000+2592000);\r\n            \r\n\t\t\tairdropSupply = airdropSupply.add(paySize);\r\n        }\r\n    }    \r\n\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n    }\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockEpochsMap\",\"outputs\":[{\"name\":\"lockEndTime\",\"type\":\"uint256\"},{\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holders\",\"type\":\"address[]\"},{\"name\":\"paySize\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holders\",\"type\":\"address[]\"},{\"name\":\"paySize\",\"type\":\"uint256\"}],\"name\":\"airdrop2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ICTA","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://14df0e89fdd5489275e479a3519a48c2f17630163b5c95f233eecca519aab8f1"}]}