{"status":"1","message":"OK","result":[{"SourceCode":"//author : dm & w\r\npragma solidity ^0.4.23;\r\n\r\nlibrary SafeMath {\r\n  \tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n  \tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \tuint256 c = a / b;\r\n    \treturn c;\r\n  \t}\r\n\r\n  \tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \tassert(b <= a);\r\n    \treturn a - b;\r\n  \t}\r\n\r\n  \tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \tuint256 c = a + b;\r\n    \tassert(c >= a);\r\n    \treturn c;\r\n  \t}\r\n}\r\n\r\ncontract ERC20 {\r\n  \tfunction transfer(address _to, uint256 _value) public returns (bool success);\r\n  \tfunction balanceOf(address _owner) public constant returns (uint256 balance);\r\n}\r\n\r\ncontract Controller {\r\n\r\n\taddress public owner;\r\n\r\n\tmodifier onlyOwner {\r\n    \trequire(msg.sender == owner);\r\n    \t_;\r\n  \t}\r\n\r\n  \tfunction change_owner(address new_owner) onlyOwner {\r\n    \trequire(new_owner != 0x0);\r\n    \towner = new_owner;\r\n  \t}\r\n\r\n  \tfunction Controller() {\r\n    \towner = msg.sender;\r\n  \t}\r\n}\r\n\r\ncontract Contract is Controller {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n  \tstruct Contributor {\r\n\t\tuint256 balance;\r\n\t    uint256 fee_owner;\r\n\t\tuint256 fee_devs;\r\n\t    uint8 rounds;\r\n\t    bool whitelisted;\r\n  \t}\r\n\r\n\tstruct Snapshot {\r\n\t\tuint256 tokens_balance;\r\n\t\tuint256 eth_balance;\r\n\t}\r\n\r\n  \tmodifier underMaxAmount {\r\n    \trequire(max_amount == 0 || this.balance <= max_amount);\r\n    \t_;\r\n  \t}\r\n\r\n\taddress constant public DEVELOPER1 = 0x8C006d807EBAe91F341a4308132Fd756808e0126;\r\n\taddress constant public DEVELOPER2 = 0x63F7547Ac277ea0B52A0B060Be6af8C5904953aa;\r\n\tuint256 constant public FEE_DEV = 670;\r\n\r\n\tuint256 public FEE_OWNER;\r\n\tuint256 public max_amount;\r\n\tuint256 public individual_cap;\r\n\tuint256 public gas_price_max;\r\n\tuint8 public rounds;\r\n\tbool public whitelist_enabled;\r\n\r\n\tmapping (address => Contributor) public contributors;\r\n\tSnapshot[] public snapshots;\r\n\tuint256[] public total_fees;\r\n\r\n\tuint256 public const_contract_eth_value;\r\n\tuint256 public percent_reduction;\r\n\r\n\taddress public sale;\r\n\tERC20 public token;\r\n\tbool public bought_tokens;\r\n\tbool public owner_supplied_eth;\r\n\tbool public allow_contributions = true;\r\n\tbool public allow_refunds;\r\n  //============================\r\n\r\n\tconstructor(\r\n\t\tuint256 _max_amount,\r\n\t\tbool _whitelist,\r\n\t\tuint256 _owner_fee_divisor\r\n\t\t) {\r\n\t\t\tFEE_OWNER = _owner_fee_divisor;\r\n\t\t\tmax_amount = calculate_with_fees(_max_amount);\r\n\t\t  \twhitelist_enabled = _whitelist;\r\n\t\t  \tContributor storage contributor = contributors[msg.sender];\r\n\t\t  \tcontributor.whitelisted = true;\r\n\t\t\ttotal_fees.length = 2;\r\n  \t\t}\r\n\r\n\r\n\tfunction buy_the_tokens(bytes _data) onlyOwner {\r\n\t\trequire(!bought_tokens && sale != 0x0);\r\n\t\tbought_tokens = true;\r\n\t\tconst_contract_eth_value = this.balance;\r\n\t\ttake_fees_eth_dev();\r\n\t\ttake_fees_eth_owner();\r\n\t\tconst_contract_eth_value = this.balance;\r\n\t\trequire(sale.call.gas(msg.gas).value(this.balance)(_data));\r\n\t}\r\n\r\n\tfunction whitelist_addys(address[] _addys, bool _state) onlyOwner {\r\n\t\tfor (uint256 i = 0; i < _addys.length; i++) {\r\n\t\t\tContributor storage contributor = contributors[_addys[i]];\r\n\t\t\tcontributor.whitelisted = _state;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction force_refund(address _addy) onlyOwner {\r\n\t\trefund(_addy);\r\n\t}\r\n\r\n\tfunction force_partial_refund(address _addy) onlyOwner {\r\n\t\tpartial_refund(_addy);\r\n\t}\r\n\r\n\tfunction set_gas_price_max(uint256 _gas_price) onlyOwner {\r\n\t\tgas_price_max = _gas_price;\r\n\t}\r\n\r\n\tfunction set_sale_address(address _sale) onlyOwner {\r\n\t\trequire(_sale != 0x0);\r\n\t\tsale = _sale;\r\n\t}\r\n\r\n\tfunction set_token_address(address _token) onlyOwner {\r\n\t\trequire(_token != 0x0);\r\n\t\ttoken = ERC20(_token);\r\n\t}\r\n\r\n\tfunction set_allow_contributions(bool _boolean) onlyOwner {\r\n\t\tallow_contributions = _boolean;\r\n\t}\r\n\r\n\tfunction set_allow_refunds(bool _boolean) onlyOwner {\r\n\t\tallow_refunds = _boolean;\r\n\t}\r\n\r\n\tfunction set_tokens_received() onlyOwner {\r\n\t\ttokens_received();\r\n\t}\r\n\r\n\tfunction set_percent_reduction(uint256 _reduction) onlyOwner payable {\r\n\t\trequire(bought_tokens && rounds == 0 && _reduction <= 100);\r\n\t\tpercent_reduction = _reduction;\r\n\t\tif (msg.value > 0) {\r\n\t\t\towner_supplied_eth = true;\r\n\t\t}\r\n\t\tconst_contract_eth_value = const_contract_eth_value.sub((const_contract_eth_value.mul(_reduction)).div(100));\r\n\t}\r\n\r\n\tfunction set_whitelist_enabled(bool _boolean) onlyOwner {\r\n\t\twhitelist_enabled = _boolean;\r\n\t}\r\n\r\n\tfunction change_individual_cap(uint256 _cap) onlyOwner {\r\n\t\tindividual_cap = _cap;\r\n\t}\r\n\r\n\tfunction change_max_amount(uint256 _amount) onlyOwner {\r\n\t\t//ATTENTION! The new amount should be in wei\r\n\t\t//Use https://etherconverter.online/\r\n\t\tmax_amount = calculate_with_fees(_amount);\r\n\t}\r\n\r\n\tfunction change_fee(uint256 _fee) onlyOwner {\r\n\t\tFEE_OWNER = _fee;\r\n\t}\r\n\r\n\tfunction emergency_token_withdraw(address _address) onlyOwner {\r\n\t \tERC20 temp_token = ERC20(_address);\r\n\t\trequire(temp_token.transfer(msg.sender, temp_token.balanceOf(this)));\r\n\t}\r\n\r\n\tfunction emergency_eth_withdraw() onlyOwner {\r\n\t\tmsg.sender.transfer(this.balance);\r\n\t}\r\n\r\n\tfunction withdraw(address _user) internal {\r\n\t\trequire(bought_tokens);\r\n\t\tuint256 contract_token_balance = token.balanceOf(address(this));\r\n\t\trequire(contract_token_balance != 0);\r\n\t\tContributor storage contributor = contributors[_user];\r\n\t\tif (contributor.rounds < rounds) {\r\n\t\t\tSnapshot storage snapshot = snapshots[contributor.rounds];\r\n            uint256 tokens_to_withdraw = contributor.balance.mul(snapshot.tokens_balance).div(snapshot.eth_balance);\r\n\t\t\tsnapshot.tokens_balance = snapshot.tokens_balance.sub(tokens_to_withdraw);\r\n\t\t\tsnapshot.eth_balance = snapshot.eth_balance.sub(contributor.balance);\r\n            contributor.rounds++;\r\n            require(token.transfer(_user, tokens_to_withdraw));\r\n        }\r\n\t}\r\n\r\n\tfunction refund(address _user) internal {\r\n\t\trequire(!bought_tokens && allow_refunds && percent_reduction == 0);\r\n\t\tContributor storage contributor = contributors[_user];\r\n\t\ttotal_fees[0] -= contributor.fee_owner;\r\n\t\ttotal_fees[1] -= contributor.fee_devs;\r\n\t\tuint256 eth_to_withdraw = contributor.balance.add(contributor.fee_owner).add(contributor.fee_devs);\r\n\t\tcontributor.balance = 0;\r\n\t\tcontributor.fee_owner = 0;\r\n\t\tcontributor.fee_devs = 0;\r\n\t\t_user.transfer(eth_to_withdraw);\r\n\t}\r\n\r\n\tfunction partial_refund(address _user) internal {\r\n\t\trequire(bought_tokens && allow_refunds && rounds == 0 && percent_reduction > 0);\r\n\t\tContributor storage contributor = contributors[_user];\r\n\t\trequire(contributor.rounds == 0);\r\n\t\tuint256 eth_to_withdraw = contributor.balance.mul(percent_reduction).div(100);\r\n\t\tcontributor.balance = contributor.balance.sub(eth_to_withdraw);\r\n\t\tif (owner_supplied_eth) {\r\n\t\t\tuint256 fee = contributor.fee_owner.mul(percent_reduction).div(100);\r\n\t\t\teth_to_withdraw = eth_to_withdraw.add(fee);\r\n\t\t}\r\n\t\t_user.transfer(eth_to_withdraw);\r\n\t}\r\n\r\n\tfunction take_fees_eth_dev() internal {\r\n\t\tif (FEE_DEV != 0) {\r\n\t\t\tDEVELOPER1.transfer(total_fees[1]);\r\n\t\t\tDEVELOPER2.transfer(total_fees[1]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction take_fees_eth_owner() internal {\r\n\t\tif (FEE_OWNER != 0) {\r\n\t\t\towner.transfer(total_fees[0]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction calculate_with_fees(uint256 _amount) internal returns (uint256) {\r\n\t\tuint256 temp = _amount;\r\n\t\tif (FEE_DEV != 0) {\r\n\t\t\ttemp = temp.add(_amount.div(FEE_DEV/2));\r\n\t\t}\r\n\t\tif (FEE_OWNER != 0) {\r\n\t\t\ttemp = temp.add(_amount.div(FEE_OWNER));\r\n\t\t}\r\n\t\treturn temp;\r\n\t}\r\n\r\n\tfunction tokens_received() internal {\r\n\t\tuint256 previous_balance;\r\n\t\tfor (uint8 i = 0; i < snapshots.length; i++) {\r\n\t\t\tprevious_balance = previous_balance.add(snapshots[i].tokens_balance);\r\n\t\t}\r\n\t\tsnapshots.push(Snapshot(token.balanceOf(address(this)).sub(previous_balance), const_contract_eth_value));\r\n\t\trounds++;\r\n\t}\r\n\r\n\r\n  function tokenFallback(address _from, uint _value, bytes _data) {\r\n\t\tif (ERC20(msg.sender) == token) {\r\n\t\t\ttokens_received();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction withdraw_my_tokens() {\r\n\t\tfor (uint8 i = contributors[msg.sender].rounds; i < rounds; i++) {\r\n\t\t\twithdraw(msg.sender);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction withdraw_tokens_for(address _addy) {\r\n\t\tfor (uint8 i = contributors[_addy].rounds; i < rounds; i++) {\r\n\t\t\twithdraw(_addy);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction refund_my_ether() {\r\n\t\trefund(msg.sender);\r\n\t}\r\n\r\n\tfunction partial_refund_my_ether() {\r\n\t\tpartial_refund(msg.sender);\r\n\t}\r\n\r\n\tfunction provide_eth() payable {}\r\n\r\n\tfunction () payable underMaxAmount {\r\n\t\trequire(!bought_tokens && allow_contributions && (gas_price_max == 0 || tx.gasprice <= gas_price_max));\r\n\t\tContributor storage contributor = contributors[msg.sender];\r\n\t\tif (whitelist_enabled) {\r\n\t\t\trequire(contributor.whitelisted);\r\n\t\t}\r\n\t\tuint256 fee = 0;\r\n\t\tif (FEE_OWNER != 0) {\r\n\t\t\tfee = SafeMath.div(msg.value, FEE_OWNER);\r\n\t\t\tcontributor.fee_owner += fee;\r\n\t\t\ttotal_fees[0] += fee;\r\n\t\t}\r\n\t\tuint256 fees = fee;\r\n\t\tif (FEE_DEV != 0) {\r\n\t\t\tfee = msg.value.div(FEE_DEV);\r\n\t\t\ttotal_fees[1] += fee;\r\n\t\t\tcontributor.fee_devs += fee*2;\r\n\t\t\tfees = fees.add(fee*2);\r\n\t\t}\r\n\t\tcontributor.balance = contributor.balance.add(msg.value.sub(fees));\r\n\r\n\t\trequire(individual_cap == 0 || contributor.balance <= individual_cap);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"allow_contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boolean\",\"type\":\"bool\"}],\"name\":\"set_whitelist_enabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"individual_cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_my_tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"force_refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"fee_owner\",\"type\":\"uint256\"},{\"name\":\"fee_devs\",\"type\":\"uint256\"},{\"name\":\"rounds\",\"type\":\"uint8\"},{\"name\":\"whitelisted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allow_refunds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"change_owner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"change_individual_cap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"change_max_amount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund_my_ether\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_token_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"set_tokens_received\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"withdraw_tokens_for\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"const_contract_eth_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"partial_refund_my_ether\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEVELOPER2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bought_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boolean\",\"type\":\"bool\"}],\"name\":\"set_allow_contributions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reduction\",\"type\":\"uint256\"}],\"name\":\"set_percent_reduction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"emergency_token_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_supplied_eth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"change_fee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"force_partial_refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gas_price_max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergency_eth_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEVELOPER1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addys\",\"type\":\"address[]\"},{\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"whitelist_addys\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"buy_the_tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist_enabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"provide_eth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percent_reduction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_DEV\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"snapshots\",\"outputs\":[{\"name\":\"tokens_balance\",\"type\":\"uint256\"},{\"name\":\"eth_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gas_price\",\"type\":\"uint256\"}],\"name\":\"set_gas_price_max\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boolean\",\"type\":\"bool\"}],\"name\":\"set_allow_refunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"total_fees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sale\",\"type\":\"address\"}],\"name\":\"set_sale_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_max_amount\",\"type\":\"uint256\"},{\"name\":\"_whitelist\",\"type\":\"bool\"},{\"name\":\"_owner_fee_divisor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Contract","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000ad78ebc5ac620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000053","Library":"","SwarmSource":"bzzr://673054824dddb8f71de9481e6d9cd36a28447317c70e1578a58091e607fa1480"}]}