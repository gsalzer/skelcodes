{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n /* Standard SafeMath implementation from Zeppelin */\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n /* Standard Claimable implementation from Zeppelin */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard Burnable Token\r\n * @dev Adds burnFrom method to ERC20 implementations\r\n */\r\ncontract StandardBurnableToken is BurnableToken, StandardToken {\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _value uint256 The amount of token to be burned\r\n   */\r\n  function burnFrom(address _from, uint256 _value) public {\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    _burn(_from, _value);\r\n  }\r\n}\r\n // Standard burnable token implementation from Zeppelin\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n // PausableToken implementation from Zeppelin\r\n // Claimable implementation from Zeppelin\r\n\r\ninterface CrowdsaleContract {\r\n  function isActive() public view returns(bool);\r\n}\r\n\r\ncontract BulleonToken is StandardBurnableToken, PausableToken, Claimable {\r\n  /* Additional events */\r\n  event AddedToWhitelist(address wallet);\r\n  event RemoveWhitelist(address wallet);\r\n\r\n  /* Base params */\r\n  string public constant name = \"Bulleon\"; /* solium-disable-line uppercase */\r\n  string public constant symbol = \"BUL\"; /* solium-disable-line uppercase */\r\n  uint8 public constant decimals = 18; /* solium-disable-line uppercase */\r\n  uint256 constant exchangersBalance = 39991750231582759746295 + 14715165984103328399573 + 1846107707643607869274; // YoBit + Etherdelta + IDEX\r\n\r\n  /* Premine and start balance settings */\r\n  address constant premineWallet = 0x286BE9799488cA4543399c2ec964e7184077711C;\r\n  uint256 constant premineAmount = 178420 * (10 ** uint256(decimals));\r\n\r\n  /* Additional params */\r\n  address public CrowdsaleAddress;\r\n  CrowdsaleContract crowdsale;\r\n  mapping(address=>bool) whitelist; // Users that may transfer tokens before ICO ended\r\n\r\n  /**\r\n   * @dev Constructor that gives msg.sender all availabel of existing tokens.\r\n   */\r\n  constructor() public {\r\n    totalSupply_ = 7970000 * (10 ** uint256(decimals));\r\n    balances[msg.sender] = totalSupply_;\r\n    transfer(premineWallet, premineAmount.add(exchangersBalance));\r\n\r\n    addToWhitelist(msg.sender);\r\n    addToWhitelist(premineWallet);\r\n    paused = true; // Lock token at start\r\n  }\r\n\r\n  /**\r\n   * @dev Sets crowdsale contract address (used for checking ICO status)\r\n   */\r\n  function setCrowdsaleAddress(address _ico) public onlyOwner {\r\n    CrowdsaleAddress = _ico;\r\n    crowdsale = CrowdsaleContract(CrowdsaleAddress);\r\n    addToWhitelist(CrowdsaleAddress);\r\n  }\r\n\r\n  /**\r\n   * @dev called by user the to pause, triggers stopped state\r\n   * not actualy used\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    revert();\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused or when sender is whitelisted.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused || whitelist[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the user to unpause at ICO end or by owner, returns token to unlocked state\r\n   */\r\n  function unpause() whenPaused public {\r\n    require(!crowdsale.isActive() || msg.sender == owner); // Checks that ICO is ended\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n\r\n  /**\r\n   * @dev Add wallet address to transfer whitelist (may transfer tokens before ICO ended)\r\n   */\r\n  function addToWhitelist(address wallet) public onlyOwner {\r\n    require(!whitelist[wallet]);\r\n    whitelist[wallet] = true;\r\n    emit AddedToWhitelist(wallet);\r\n  }\r\n\r\n  /**\r\n   * @dev Delete wallet address to transfer whitelist (may transfer tokens before ICO ended)\r\n   */\r\n  function delWhitelist(address wallet) public onlyOwner {\r\n    require(whitelist[wallet]);\r\n    whitelist[wallet] = false;\r\n    emit RemoveWhitelist(wallet);\r\n  }\r\n}\r\n /* Bulleon Token Contract */\r\n\r\n\r\ncontract BulleonCrowdsale is Claimable {\r\n    using SafeMath for uint256;\r\n    /* Additionals events */\r\n    event AddedToBlacklist(address wallet);\r\n    event RemovedFromBlacklist(address wallet);\r\n    event Log(uint256 value);\r\n\r\n    /* Infomational vars */\r\n    string public name = \"Bulleon Crowdsale\";\r\n    string public version = \"2.0\";\r\n\r\n    /* ICO params */\r\n    address public withdrawWallet = 0xAd74Bd38911fE4C19c95D14b5733372c3978C2D9;\r\n    uint256 public endDate = 1546300799; // Monday, 31-Dec-18 23:59:59 UTC\r\n    BulleonToken public rewardToken;\r\n    // Tokens rate (BUL / ETH) on stage\r\n    uint256[] public tokensRate = [\r\n      1000, // stage 1\r\n      800, // stage 2\r\n      600, // stage 3\r\n      400, // stage 4\r\n      200, // stage 5\r\n      100, // stage 6\r\n      75, // stage 7\r\n      50, // stage 8\r\n      25, // stage 9\r\n      10 // stage 10\r\n    ];\r\n    // Tokens cap (max sold tokens) on stage\r\n    uint256[] public tokensCap = [\r\n      760000, // stage 1\r\n      760000, // stage 2\r\n      760000, // stage 3\r\n      760000, // stage 4\r\n      760000, // stage 5\r\n      760000, // stage 6\r\n      760000, // stage 7\r\n      760000, // stage 8\r\n      760000, // stage 9\r\n      759000  // stage 10\r\n    ];\r\n    mapping(address=>bool) public isBlacklisted;\r\n\r\n    /* ICO stats */\r\n    uint256 public totalSold = 329406072304513072322000; // ! Update on publish\r\n    uint256 public soldOnStage = 329406072304513072322000; // ! Update on publish\r\n    uint8 public currentStage = 0;\r\n\r\n    /* Bonus params */\r\n    uint256 public bonus = 0;\r\n    uint256 constant BONUS_COEFF = 1000; // Values should be 10x percents, value 1000 = 100%\r\n    mapping(address=>uint256) public investmentsOf; // Investments made by wallet\r\n\r\n\r\n\r\n   /**\r\n    * @dev Returns crowdsale status (if active returns true).\r\n    */\r\n    function isActive() public view returns (bool) {\r\n      return !(availableTokens() == 0 || now > endDate);\r\n    }\r\n\r\n    /* ICO stats methods */\r\n\r\n    /**\r\n     * @dev Returns tokens amount cap for current stage.\r\n     */\r\n    function stageCap() public view returns(uint256) {\r\n      return tokensCap[currentStage].mul(1 ether);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns tokens amount available to sell at current stage.\r\n     */\r\n    function availableOnStage() public view returns(uint256) {\r\n        return stageCap().sub(soldOnStage) > availableTokens() ? availableTokens() : stageCap().sub(soldOnStage);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns base rate (BUL/ETH) of current stage.\r\n     */\r\n    function stageBaseRate() public view returns(uint256) {\r\n      return tokensRate[currentStage];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns actual (base + bonus %) rate (BUL/ETH) of current stage.\r\n     */\r\n    function stageRate() public view returns(uint256) {\r\n      return stageBaseRate().mul(BONUS_COEFF.add(getBonus())).div(BONUS_COEFF);\r\n    }\r\n\r\n    constructor(address token) public {\r\n        require(token != 0x0);\r\n        rewardToken = BulleonToken(token);\r\n    }\r\n\r\n    function () payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Main token puchase function\r\n     */\r\n    function buyTokens(address beneficiary) public payable {\r\n      bool validPurchase = beneficiary != 0x0 && msg.value != 0 && !isBlacklisted[msg.sender];\r\n      uint256 currentTokensAmount = availableTokens();\r\n      // Check that ICO is Active and purchase tx is valid\r\n      require(isActive() && validPurchase);\r\n      investmentsOf[msg.sender] = investmentsOf[msg.sender].add(msg.value);\r\n      uint256 boughtTokens;\r\n      uint256 refundAmount = 0;\r\n\r\n      // Calculate tokens and refund amount at multiple stage\r\n      uint256[2] memory tokensAndRefund = calcMultiStage();\r\n      boughtTokens = tokensAndRefund[0];\r\n      refundAmount = tokensAndRefund[1];\r\n      // Check that bought tokens amount less then current\r\n      require(boughtTokens <= currentTokensAmount);\r\n\r\n      totalSold = totalSold.add(boughtTokens); // Increase stats variable\r\n\r\n      if(soldOnStage >= stageCap()) {\r\n        toNextStage();\r\n      }\r\n\r\n      rewardToken.transfer(beneficiary, boughtTokens);\r\n\r\n      if (refundAmount > 0)\r\n          refundMoney(refundAmount);\r\n\r\n      withdrawFunds(this.balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Forcibility withdraw contract ETH balance.\r\n     */\r\n    function forceWithdraw() public onlyOwner {\r\n      withdrawFunds(this.balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate tokens amount and refund amount at purchase procedure.\r\n     */\r\n    function calcMultiStage() internal returns(uint256[2]) {\r\n      uint256 stageBoughtTokens;\r\n      uint256 undistributedAmount = msg.value;\r\n      uint256 _boughtTokens = 0;\r\n      uint256 undistributedTokens = availableTokens();\r\n\r\n      while(undistributedAmount > 0 && undistributedTokens > 0) {\r\n        bool needNextStage = false;\r\n\r\n        stageBoughtTokens = getTokensAmount(undistributedAmount);\r\n\r\n        if (stageBoughtTokens > availableOnStage()) {\r\n          stageBoughtTokens = availableOnStage();\r\n          needNextStage = true;\r\n        }\r\n\r\n        _boughtTokens = _boughtTokens.add(stageBoughtTokens);\r\n        undistributedTokens = undistributedTokens.sub(stageBoughtTokens);\r\n        undistributedAmount = undistributedAmount.sub(getTokensCost(stageBoughtTokens));\r\n        soldOnStage = soldOnStage.add(stageBoughtTokens);\r\n        if (needNextStage)\r\n          toNextStage();\r\n      }\r\n      return [_boughtTokens,undistributedAmount];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets withdraw wallet address. (called by owner)\r\n     */\r\n    function setWithdraw(address _withdrawWallet) public onlyOwner {\r\n        require(_withdrawWallet != 0x0);\r\n        withdrawWallet = _withdrawWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Make partical refund at purchasing procedure\r\n     */\r\n    function refundMoney(uint256 refundAmount) internal {\r\n      msg.sender.transfer(refundAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Give owner ability to burn some tokens amount at ICO contract\r\n     */\r\n    function burnTokens(uint256 amount) public onlyOwner {\r\n      rewardToken.burn(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns costs of given tokens amount\r\n     */\r\n    function getTokensCost(uint256 _tokensAmount) public view returns(uint256) {\r\n      return _tokensAmount.div(stageRate());\r\n    }\r\n\r\n    function getTokensAmount(uint256 _amountInWei) public view returns(uint256) {\r\n      return _amountInWei.mul(stageRate());\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Switch contract to next stage and reset stage stats\r\n     */\r\n    function toNextStage() internal {\r\n        if (\r\n          currentStage < tokensRate.length &&\r\n          currentStage < tokensCap.length\r\n        ) {\r\n          currentStage++;\r\n          soldOnStage = 0;\r\n        }\r\n    }\r\n\r\n    function availableTokens() public view returns(uint256) {\r\n        return rewardToken.balanceOf(address(this));\r\n    }\r\n\r\n    function withdrawFunds(uint256 amount) internal {\r\n        withdrawWallet.transfer(amount);\r\n    }\r\n\r\n    function kill() public onlyOwner {\r\n      require(!isActive()); // Check that ICO is Ended (!= Active)\r\n      rewardToken.burn(availableTokens()); // Burn tokens\r\n      selfdestruct(owner); // Destruct ICO contract\r\n    }\r\n\r\n    function setBonus(uint256 bonusAmount) public onlyOwner {\r\n      require(\r\n        bonusAmount < 100 * BONUS_COEFF &&\r\n        bonusAmount >= 0\r\n      );\r\n      bonus = bonusAmount;\r\n    }\r\n\r\n    function getBonus() public view returns(uint256) {\r\n      uint256 _bonus = bonus;\r\n      uint256 investments = investmentsOf[msg.sender];\r\n      if(investments > 50 ether)\r\n        _bonus += 250; // 25%\r\n      else\r\n      if(investments > 20 ether)\r\n        _bonus += 200; // 20%\r\n      else\r\n      if(investments > 10 ether)\r\n        _bonus += 150; // 15%\r\n      else\r\n      if(investments > 5 ether)\r\n        _bonus += 100; // 10%\r\n      else\r\n      if(investments > 1 ether)\r\n        _bonus += 50; // 5%\r\n\r\n      return _bonus;\r\n    }\r\n\r\n    function addBlacklist(address wallet) public onlyOwner {\r\n      require(!isBlacklisted[wallet]);\r\n      isBlacklisted[wallet] = true;\r\n      emit AddedToBlacklist(wallet);\r\n    }\r\n\r\n    function delBlacklist(address wallet) public onlyOwner {\r\n      require(isBlacklisted[wallet]);\r\n      isBlacklisted[wallet] = false;\r\n      emit RemovedFromBlacklist(wallet);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageBaseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableOnStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investmentsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"delBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"getTokensCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amountInWei\",\"type\":\"uint256\"}],\"name\":\"getTokensAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldOnStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"addBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawWallet\",\"type\":\"address\"}],\"name\":\"setWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AddedToBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"RemovedFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BulleonCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a67148353b4c2042d82ff34393e5503f9d849788","Library":"","SwarmSource":"bzzr://9b12ad98b9bd887abb6ea90ada9b4c1ada9f310e067e0877816024ec0c20e6d1"}]}