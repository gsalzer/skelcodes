{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title Maths\r\n * A library to make working with numbers in Solidity hurt your brain less.\r\n */\r\nlibrary Maths {\r\n  /**\r\n   * @dev Adds two addends together, returns the sum\r\n   * @param addendA the first addend\r\n   * @param addendB the second addend\r\n   * @return sum the sum of the equation (e.g. addendA + addendB)\r\n   */\r\n  function plus(\r\n    uint256 addendA,\r\n    uint256 addendB\r\n  ) public pure returns (uint256 sum) {\r\n    sum = addendA + addendB;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts the minuend from the subtrahend, returns the difference\r\n   * @param minuend the minuend\r\n   * @param subtrahend the subtrahend\r\n   * @return difference the difference (e.g. minuend - subtrahend)\r\n   */\r\n  function minus(\r\n    uint256 minuend,\r\n    uint256 subtrahend\r\n  ) public pure returns (uint256 difference) {\r\n    assert(minuend >= subtrahend);\r\n    difference = minuend - subtrahend;\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two factors, returns the product\r\n   * @param factorA the first factor\r\n   * @param factorB the second factor\r\n   * @return product the product of the equation (e.g. factorA * factorB)\r\n   */\r\n  function mul(\r\n    uint256 factorA,\r\n    uint256 factorB\r\n  ) public pure returns (uint256 product) {\r\n    if (factorA == 0 || factorB == 0) return 0;\r\n    product = factorA * factorB;\r\n    assert(product / factorA == factorB);\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two factors, returns the product\r\n   * @param factorA the first factor\r\n   * @param factorB the second factor\r\n   * @return product the product of the equation (e.g. factorA * factorB)\r\n   */\r\n  function times(\r\n    uint256 factorA,\r\n    uint256 factorB\r\n  ) public pure returns (uint256 product) {\r\n    return mul(factorA, factorB);\r\n  }\r\n\r\n  /**\r\n   * @dev Divides the dividend by divisor, returns the truncated quotient\r\n   * @param dividend the dividend\r\n   * @param divisor the divisor\r\n   * @return quotient the quotient of the equation (e.g. dividend / divisor)\r\n   */\r\n  function div(\r\n    uint256 dividend,\r\n    uint256 divisor\r\n  ) public pure returns (uint256 quotient) {\r\n    quotient = dividend / divisor;\r\n    assert(quotient * divisor == dividend);\r\n  }\r\n\r\n  /**\r\n   * @dev Divides the dividend by divisor, returns the truncated quotient\r\n   * @param dividend the dividend\r\n   * @param divisor the divisor\r\n   * @return quotient the quotient of the equation (e.g. dividend / divisor)\r\n   */\r\n  function dividedBy(\r\n    uint256 dividend,\r\n    uint256 divisor\r\n  ) public pure returns (uint256 quotient) {\r\n    return div(dividend, divisor);\r\n  }\r\n\r\n  /**\r\n   * @dev Divides the dividend by divisor, returns the quotient and remainder\r\n   * @param dividend the dividend\r\n   * @param divisor the divisor\r\n   * @return quotient the quotient of the equation (e.g. dividend / divisor)\r\n   * @return remainder the remainder of the equation (e.g. dividend % divisor)\r\n   */\r\n  function divideSafely(\r\n    uint256 dividend,\r\n    uint256 divisor\r\n  ) public pure returns (uint256 quotient, uint256 remainder) {\r\n    quotient = div(dividend, divisor);\r\n    remainder = dividend % divisor;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the lesser of two values.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return result the lesser of the two values\r\n   */\r\n  function min(\r\n    uint256 a,\r\n    uint256 b\r\n  ) public pure returns (uint256 result) {\r\n    result = a <= b ? a : b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the greater of two values.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return result the greater of the two values\r\n   */\r\n  function max(\r\n    uint256 a,\r\n    uint256 b\r\n  ) public pure returns (uint256 result) {\r\n    result = a >= b ? a : b;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines whether a value is less than another.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return isTrue whether a is less than b\r\n   */\r\n  function isLessThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\r\n    isTrue = a < b;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines whether a value is equal to or less than another.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return isTrue whether a is less than or equal to b\r\n   */\r\n  function isAtMost(uint256 a, uint256 b) public pure returns (bool isTrue) {\r\n    isTrue = a <= b;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines whether a value is greater than another.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return isTrue whether a is greater than b\r\n   */\r\n  function isGreaterThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\r\n    isTrue = a > b;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines whether a value is equal to or greater than another.\r\n   * @param a the first value\r\n   * @param b the second value\r\n   * @return isTrue whether a is less than b\r\n   */\r\n  function isAtLeast(uint256 a, uint256 b) public pure returns (bool isTrue) {\r\n    isTrue = a >= b;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"isAtMost\",\"outputs\":[{\"name\":\"isTrue\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"factorA\",\"type\":\"uint256\"},{\"name\":\"factorB\",\"type\":\"uint256\"}],\"name\":\"times\",\"outputs\":[{\"name\":\"product\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dividend\",\"type\":\"uint256\"},{\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"divideSafely\",\"outputs\":[{\"name\":\"quotient\",\"type\":\"uint256\"},{\"name\":\"remainder\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addendA\",\"type\":\"uint256\"},{\"name\":\"addendB\",\"type\":\"uint256\"}],\"name\":\"plus\",\"outputs\":[{\"name\":\"sum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"max\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"min\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dividend\",\"type\":\"uint256\"},{\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"div\",\"outputs\":[{\"name\":\"quotient\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"isAtLeast\",\"outputs\":[{\"name\":\"isTrue\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"factorA\",\"type\":\"uint256\"},{\"name\":\"factorB\",\"type\":\"uint256\"}],\"name\":\"mul\",\"outputs\":[{\"name\":\"product\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"isGreaterThan\",\"outputs\":[{\"name\":\"isTrue\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dividend\",\"type\":\"uint256\"},{\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"dividedBy\",\"outputs\":[{\"name\":\"quotient\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"isLessThan\",\"outputs\":[{\"name\":\"isTrue\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"minuend\",\"type\":\"uint256\"},{\"name\":\"subtrahend\",\"type\":\"uint256\"}],\"name\":\"minus\",\"outputs\":[{\"name\":\"difference\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Maths","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://61607da6c2c94f6a8c4052d075a5f0c14d7d50697ab58a23ddd1a60c87d55ed5"}]}