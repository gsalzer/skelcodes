{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    mapping(address => uint256) public balances;\r\n\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Freezing tokens\r\n */\r\ncontract Freezing is Ownable, ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    address tokenManager;\r\n\r\n    bool freezingActive = true;\r\n\r\n    event Freeze(address _holder, uint256 _amount);\r\n    event Unfreeze(address _holder, uint256 _amount);\r\n\r\n    // all freezing sum for every holder\r\n    mapping(address => uint256) public freezeBalances;\r\n\r\n    modifier onlyTokenManager() {\r\n        assert(msg.sender == tokenManager);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Check freezing balance\r\n     */\r\n    modifier checkFreezing(address _holder, uint _value) {\r\n        if (freezingActive) {\r\n            require(balances[_holder].sub(_value) >= freezeBalances[_holder]);\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    function setTokenManager(address _newManager) onlyOwner public {\r\n        tokenManager = _newManager;\r\n    }\r\n\r\n    /**\r\n     * @dev Enable freezing for contract\r\n     */\r\n    function onFreezing() onlyTokenManager public {\r\n        freezingActive = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Disable freezing for contract\r\n     */\r\n    function offFreezing() onlyTokenManager public {\r\n        freezingActive = false;\r\n    }\r\n\r\n    function Freezing() public {\r\n        tokenManager = owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns freezing balance of _holder\r\n     */\r\n    function freezingBalanceOf(address _holder) public view returns (uint256) {\r\n        return freezeBalances[_holder];\r\n    }\r\n\r\n    /**\r\n     * @dev Freeze amount for user\r\n     */\r\n    function freeze(address _holder, uint _amount) public onlyTokenManager {\r\n        assert(balances[_holder].sub(_amount.add(freezeBalances[_holder])) >= 0);\r\n\r\n        freezeBalances[_holder] = freezeBalances[_holder].add(_amount);\r\n        emit Freeze(_holder, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Unfreeze amount for user\r\n     */\r\n    function unfreeze(address _holder, uint _amount) public onlyTokenManager {\r\n        assert(freezeBalances[_holder].sub(_amount) >= 0);\r\n\r\n        freezeBalances[_holder] = freezeBalances[_holder].sub(_amount);\r\n        emit Unfreeze(_holder, _amount);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles of users\r\n */\r\ncontract VerificationStatus {\r\n    enum Statuses {None, Self, Video, Agent, Service}\r\n    Statuses constant defaultStatus = Statuses.None;\r\n\r\n    event StatusChange(bytes32 _property, address _user, Statuses _status, address _caller);\r\n}\r\n\r\n\r\n/**\r\n * @title Roles of users\r\n *\r\n * @dev User roles for KYC Contract\r\n */\r\ncontract Roles is Ownable {\r\n\r\n    // 0, 1, 2\r\n    enum RoleItems {Person, Agent, Administrator}\r\n    RoleItems constant defaultRole = RoleItems.Person;\r\n\r\n    mapping (address => RoleItems) private roleList;\r\n\r\n    /**\r\n     * @dev Event for every change of role\r\n     */\r\n    event RoleChange(address _user, RoleItems _role, address _caller);\r\n\r\n    /**\r\n     * @dev for agent function\r\n     */\r\n    modifier onlyAgent() {\r\n        assert(roleList[msg.sender] == RoleItems.Agent);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev for administrator function\r\n     */\r\n    modifier onlyAdministrator() {\r\n        assert(roleList[msg.sender] == RoleItems.Administrator || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Save role for user\r\n     */\r\n    function _setRole(address _user, RoleItems _role) internal {\r\n        emit RoleChange(_user, _role, msg.sender);\r\n        roleList[_user] = _role;\r\n    }\r\n\r\n    /**\r\n     * @dev reset role\r\n     */\r\n    function resetRole(address _user) onlyAdministrator public {\r\n        _setRole(_user, RoleItems.Person);\r\n    }\r\n\r\n    /**\r\n     * @dev Appointing agent by administrator or owner\r\n     */\r\n    function appointAgent(address _user) onlyAdministrator public {\r\n        _setRole(_user, RoleItems.Agent);\r\n    }\r\n\r\n    /**\r\n     * @dev Appointing administrator by owner\r\n     */\r\n    function appointAdministrator(address _user) onlyOwner public returns (bool) {\r\n        _setRole(_user, RoleItems.Administrator);\r\n        return true;\r\n    }\r\n\r\n    function getRole(address _user) public view returns (RoleItems) {\r\n        return roleList[_user];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Storage for users data\r\n */\r\ncontract PropertyStorage is Roles, VerificationStatus {\r\n\r\n    struct Property {\r\n    Statuses status;\r\n    bool exist;\r\n    uint16 code;\r\n    }\r\n\r\n    mapping(address => mapping(bytes32 => Property)) private propertyStorage;\r\n\r\n    // agent => property => status\r\n    mapping(address => mapping(bytes32 => bool)) agentSign;\r\n\r\n    event NewProperty(bytes32 _property, address _user, address _caller);\r\n\r\n    modifier propertyExist(bytes32 _property, address _user) {\r\n        assert(propertyStorage[_user][_property].exist);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  @dev Compute hash for property before write into storage\r\n     *\r\n     *  @param _name Name of property (such as full_name, birthday, address etc.)\r\n     *  @param _data Value of property\r\n     */\r\n    function computePropertyHash(string _name, string _data) pure public returns (bytes32) {\r\n        return sha256(_name, _data);\r\n    }\r\n\r\n    function _addPropertyValue(bytes32 _property, address _user) internal {\r\n        propertyStorage[_user][_property] = Property(\r\n        Statuses.None,\r\n        true,\r\n        0\r\n        );\r\n        emit NewProperty(_property, _user, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Add data for any user by administrator\r\n     */\r\n    function addPropertyForUser(bytes32 _property, address _user) public onlyAdministrator returns (bool) {\r\n        _addPropertyValue(_property, _user);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *  @dev Add property for sender\r\n     */\r\n    function addProperty(bytes32 _property) public returns (bool) {\r\n        _addPropertyValue(_property, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns status of user data (may be self 1, video 2, agent 3 or Service 4)\r\n     * @dev If verification is empty then it returns 0 (None)\r\n     */\r\n    function getPropertyStatus(bytes32 _property, address _user) public view propertyExist(_property, _user) returns (Statuses) {\r\n        return propertyStorage[_user][_property].status;\r\n    }\r\n\r\n    /**\r\n     * @dev when user upload documents administrator will call this function\r\n     */\r\n    function setPropertyStatus(bytes32 _property, address _user, Statuses _status) public onlyAdministrator returns (bool){\r\n        _setPropertyStatus(_property, _user, _status);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Agent sign on user data by agent\r\n     */\r\n    function setAgentVerificationByAgent(bytes32 _property, address _user) public onlyAgent {\r\n        _setPropertyStatus(_property, _user, Statuses.Agent);\r\n        _signPropertyByAgent(msg.sender, _user, _property);\r\n    }\r\n\r\n    /**\r\n     * @dev Agent sign on user data by Admin\r\n     */\r\n    function setAgentVerificationByAdmin(address _agent, address _user, bytes32 _property) public onlyOwner {\r\n        _setPropertyStatus(_property, _user, Statuses.Agent);\r\n        _signPropertyByAgent(_agent, _user, _property);\r\n    }\r\n\r\n    /**\r\n     * @dev Set verification status for user data\r\n     */\r\n    function _setPropertyStatus(bytes32 _property, address _user, Statuses _status) internal propertyExist(_property, _user) {\r\n        propertyStorage[_user][_property].status = _status;\r\n        emit StatusChange(_property, _user, _status, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Agent sign on user data\r\n     */\r\n    function _signPropertyByAgent(address _agent, address _user, bytes32 _property) internal {\r\n        bytes32 _hash = _getHash(_user, _property);\r\n        agentSign[_agent][_hash] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev To make sure that the agent has signed the user property\r\n     */\r\n    function checkAgentSign(address _agent, address _user, bytes32 _property) public view returns (bool) {\r\n        bytes32 _hash = _getHash(_user, _property);\r\n        return agentSign[_agent][_hash];\r\n    }\r\n\r\n    /**\r\n     * @dev Get hash sum for property\r\n     */\r\n    function _getHash(address _user, bytes32 _property) public pure returns (bytes32) {\r\n        return sha256(_user, _property);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract ERC20BasicToken is ERC20Basic, Freezing {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) checkFreezing(msg.sender, _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract KYCToken is ERC20BasicToken, ERC20, PropertyStorage {\r\n\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n    uint256 public totalSupply = 42000000000000000000000000;\r\n    string public name = \"KYC.Legal token\";\r\n    uint8 public decimals = 18;\r\n    string public symbol = \"KYC\";\r\n\r\n    function balanceOf(address _owner) view public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function KYCToken() public {\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) checkFreezing(_from, _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_property\",\"type\":\"bytes32\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addPropertyForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_property\",\"type\":\"bytes32\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPropertyStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"appointAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_property\",\"type\":\"bytes32\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"setPropertyStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"onFreezing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_property\",\"type\":\"bytes32\"}],\"name\":\"setAgentVerificationByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRole\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"appointAdministrator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_property\",\"type\":\"bytes32\"}],\"name\":\"_getHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_property\",\"type\":\"bytes32\"}],\"name\":\"checkAgentSign\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"offFreezing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_property\",\"type\":\"bytes32\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setAgentVerificationByAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_property\",\"type\":\"bytes32\"}],\"name\":\"addProperty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"computePropertyHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"freezingBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"resetRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_property\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"NewProperty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_property\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"StatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_role\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"RoleChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"KYCToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6b409675657a52f21c2e73b502940cf915d10441d29aaf14d87da5fda84a2eb3"}]}