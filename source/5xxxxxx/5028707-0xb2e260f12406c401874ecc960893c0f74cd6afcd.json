{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\ncontract BitUPToken is ERC20, Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n/*----------------- Token Information -----------------*/\r\n\r\n    string public constant name = \"BitUP Token\";\r\n    string public constant symbol = \"BUT\";\r\n\r\n    uint8 public decimals = 18;                            // (ERC20 API) Decimal precision, factor is 1e18\r\n    \r\n    mapping (address => uint256) balances;                 // User's balances table\r\n    mapping (address => mapping (address => uint256)) allowed; // User's allowances table\r\n\r\n/*----------------- Alloc Information -----------------*/\r\n\r\n    uint256 public totalSupply;\r\n    \r\n    uint256 public presaleSupply;                          // Pre-sale supply\r\n    uint256 public angelSupply;                          // Angel supply\r\n    uint256 public marketingSupply;                           // marketing supply\r\n    uint256 public foundationSupply;                       // /Foundation supply\r\n    uint256 public teamSupply;                          //  Team supply\r\n    uint256 public communitySupply;                 //  Community supply\r\n    \r\n    uint256 public teamSupply6Months;                          //Amount of Team supply could be released after 6 months\r\n    uint256 public teamSupply12Months;                          //Amount of Team supply could be released after 12 months\r\n    uint256 public teamSupply18Months;                          //Amount of Team supply could be released after 18 months\r\n    uint256 public teamSupply24Months;                          //Amount of Team supply could be released after 24 months\r\n\r\n    uint256 public TeamLockingPeriod6Months;                  // Locking period for team's supply, release 1/4 per 6 months\r\n    uint256 public TeamLockingPeriod12Months;                  // Locking period for team's supply, release 1/4 per 6 months\r\n    uint256 public TeamLockingPeriod18Months;                  // Locking period for team's supply, release 1/4 per 6 months\r\n    uint256 public TeamLockingPeriod24Months;                  // Locking period for team's supply, release 1/4 per 6 months\r\n    \r\n    address public presaleAddress;                       // Presale address\r\n    address public angelAddress;                        // Angel address\r\n    address public marketingAddress;                       // marketing address\r\n    address public foundationAddress;                      // Foundation address\r\n    address public teamAddress;                         // Team address\r\n    address public communityAddress;                         // Community address    \r\n\r\n    function () {\r\n         //if ether is sent to this address, send it back.\r\n         //throw;\r\n         require(false);\r\n    }\r\n\r\n/*----------------- Modifiers -----------------*/\r\n\r\n    modifier nonZeroAddress(address _to) {                 // Ensures an address is provided\r\n        require(_to != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroAmount(uint _amount) {                 // Ensures a non-zero amount\r\n        require(_amount > 0);\r\n        _;\r\n    }\r\n\r\n    modifier nonZeroValue() {                              // Ensures a non-zero value is passed\r\n        require(msg.value > 0);\r\n        _;\r\n    }\r\n\r\n    modifier checkTeamLockingPeriod6Months() {                 // Ensures locking period is over\r\n        assert(now >= TeamLockingPeriod6Months);\r\n        _;\r\n    }\r\n    \r\n    modifier checkTeamLockingPeriod12Months() {                 // Ensures locking period is over\r\n        assert(now >= TeamLockingPeriod12Months);\r\n        _;\r\n    }\r\n    \r\n    modifier checkTeamLockingPeriod18Months() {                 // Ensures locking period is over\r\n        assert(now >= TeamLockingPeriod18Months);\r\n        _;\r\n    }\r\n    \r\n    modifier checkTeamLockingPeriod24Months() {                 // Ensures locking period is over\r\n        assert(now >= TeamLockingPeriod24Months);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyTeam() {                             // Ensures only team can call the function\r\n        require(msg.sender == teamAddress);\r\n        _;\r\n    }\r\n    \r\n/*----------------- Burn -----------------*/\r\n    \r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        // balances[burner] = balances[burner].sub(_value);\r\n        decrementBalance(burner, _value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n\r\n/*----------------- Token API -----------------*/\r\n\r\n    // -------------------------------------------------\r\n    // Total supply\r\n    // -------------------------------------------------\r\n    function totalSupply() constant returns (uint256){\r\n        return totalSupply;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Transfers amount to address\r\n    // -------------------------------------------------\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        require(balanceOf(msg.sender) >= _amount);\r\n        uint previousBalances = balances[msg.sender] + balances[_to];\r\n        addToBalance(_to, _amount);\r\n        decrementBalance(msg.sender, _amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        assert(balances[msg.sender] + balances[_to] == previousBalances);\r\n        return true;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Transfers from one address to another (need allowance to be called first)\r\n    // -------------------------------------------------\r\n    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\r\n        require(balanceOf(_from) >= _amount);\r\n        require(allowance(_from, msg.sender) >= _amount);\r\n        uint previousBalances = balances[_from] + balances[_to];\r\n        decrementBalance(_from, _amount);\r\n        addToBalance(_to, _amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        assert(balances[_from] + balances[_to] == previousBalances);\r\n        return true;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Approves another address a certain amount of FUEL\r\n    // -------------------------------------------------\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        require((_value == 0) || (allowance(msg.sender, _spender) == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Gets an address's FUEL allowance\r\n    // -------------------------------------------------\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Gets the FUEL balance of any address\r\n    // -------------------------------------------------\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Contract's constructor\r\n    // -------------------------------------------------\r\n    function BitUPToken() {\r\n        totalSupply  =    1000000000 * 1e18;               // 100% - 1 billion total BUT with 18 decimals\r\n\r\n        presaleSupply =    400000000 * 1e18;               //  40% -  400 million BUT pre-crowdsale\r\n        angelSupply =       50000000 * 1e18;               //  5% - 50 million BUT for the angel crowdsale\r\n        teamSupply =       200000000 * 1e18;               //  20% -  200 million BUT for team. 1/4 part released per 6 months\r\n        foundationSupply = 150000000 * 1e18;               //  15% -  300 million BUT for foundation/incentivising efforts\r\n        marketingSupply =  100000000 * 1e18;       //  10% -  100 million BUT for \r\n        communitySupply =  100000000 * 1e18;       //  10% -  100 million BUT for      \r\n        \r\n        teamSupply6Months = 50000000 * 1e18;               // team supply release 1/4 per 6 months\r\n        teamSupply12Months = 50000000 * 1e18;               // team supply release 1/4 per 6 months\r\n        teamSupply18Months = 50000000 * 1e18;               // team supply release 1/4 per 6 months\r\n        teamSupply24Months = 50000000 * 1e18;               // team supply release 1/4 per 6 months\r\n        \r\n        angelAddress    = 0xeF01453A730486d262D0b490eF1aDBBF62C2Fe00;                         // Angel address\r\n        presaleAddress = 0x2822332F63a6b80E21cEA5C8c43Cb6f393eb5703;                         // Presale address\r\n        teamAddress = 0x8E199e0c1DD38d455815E11dc2c9A64D6aD893B7;                         // Team address\r\n        foundationAddress = 0xcA972ac76F4Db643C30b86E4A9B54EaBB88Ce5aD;                         // Foundation address\r\n        marketingAddress = 0xd2631280F7f0472271Ae298aF034eBa549d792EA;                         // marketing address\r\n        communityAddress = 0xF691e8b2B2293D3d3b06ecdF217973B40258208C;                         //Community address\r\n        \r\n        \r\n        TeamLockingPeriod6Months = now.add(180 * 1 days); // 180 days locking period\r\n        TeamLockingPeriod12Months = now.add(360 * 1 days); // 360 days locking period\r\n        TeamLockingPeriod18Months = now.add(450 * 1 days); // 450 days locking period\r\n        TeamLockingPeriod24Months = now.add(730 * 1 days); // 730 days locking period\r\n        \r\n        addToBalance(foundationAddress, foundationSupply);\r\n        foundationSupply = 0;\r\n        addToBalance(marketingAddress, marketingSupply);\r\n        marketingSupply = 0;\r\n        addToBalance(communityAddress, communitySupply);\r\n        communitySupply = 0;\r\n        addToBalance(presaleAddress, presaleSupply);\r\n        presaleSupply = 0;\r\n        addToBalance(angelAddress, angelSupply);\r\n        angelSupply = 0;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Releases 1/4 of team supply after 6 months\r\n    // -------------------------------------------------\r\n    function releaseTeamTokensAfter6Months() checkTeamLockingPeriod6Months onlyTeam returns(bool success) {\r\n        require(teamSupply6Months > 0);\r\n        addToBalance(teamAddress, teamSupply6Months);\r\n        Transfer(0x0, teamAddress, teamSupply6Months);\r\n        teamSupply6Months = 0;\r\n        teamSupply.sub(teamSupply6Months);\r\n        return true;\r\n    }\r\n    \r\n    // -------------------------------------------------\r\n    // Releases 1/4 of team supply after 12 months\r\n    // -------------------------------------------------\r\n    function releaseTeamTokensAfter12Months() checkTeamLockingPeriod12Months onlyTeam returns(bool success) {\r\n        require(teamSupply12Months > 0);\r\n        addToBalance(teamAddress, teamSupply12Months);\r\n        Transfer(0x0, teamAddress, teamSupply12Months);\r\n        teamSupply12Months = 0;\r\n        teamSupply.sub(teamSupply12Months);\r\n        return true;\r\n    }\r\n    \r\n    // -------------------------------------------------\r\n    // Releases 1/4 of team supply after 18 months\r\n    // -------------------------------------------------\r\n    function releaseTeamTokensAfter18Months() checkTeamLockingPeriod18Months onlyTeam returns(bool success) {\r\n        require(teamSupply18Months > 0);\r\n        addToBalance(teamAddress, teamSupply18Months);\r\n        Transfer(0x0, teamAddress, teamSupply18Months);\r\n        teamSupply18Months = 0;\r\n        teamSupply.sub(teamSupply18Months);\r\n        return true;\r\n    }\r\n    \r\n    // -------------------------------------------------\r\n    // Releases 1/4 of team supply after 24 months\r\n    // -------------------------------------------------\r\n    function releaseTeamTokensAfter24Months() checkTeamLockingPeriod24Months onlyTeam returns(bool success) {\r\n        require(teamSupply24Months > 0);\r\n        addToBalance(teamAddress, teamSupply24Months);\r\n        Transfer(0x0, teamAddress, teamSupply24Months);\r\n        teamSupply24Months = 0;\r\n        teamSupply.sub(teamSupply24Months);\r\n        return true;\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Adds to balance\r\n    // -------------------------------------------------\r\n    function addToBalance(address _address, uint _amount) internal {\r\n        balances[_address] = SafeMath.add(balances[_address], _amount);\r\n    }\r\n\r\n    // -------------------------------------------------\r\n    // Removes from balance\r\n    // -------------------------------------------------\r\n    function decrementBalance(address _address, uint _amount) internal {\r\n        balances[_address] = SafeMath.sub(balances[_address], _amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TeamLockingPeriod6Months\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"angelAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTeamTokensAfter6Months\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply12Months\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTeamTokensAfter24Months\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TeamLockingPeriod24Months\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTeamTokensAfter12Months\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply18Months\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTeamTokensAfter18Months\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TeamLockingPeriod18Months\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply24Months\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply6Months\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TeamLockingPeriod12Months\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"angelSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communitySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BitUPToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6b57c158928b5e848ba3caaccbd84a0a8faa36e09d8600f14c1451d98bc0720a"}]}