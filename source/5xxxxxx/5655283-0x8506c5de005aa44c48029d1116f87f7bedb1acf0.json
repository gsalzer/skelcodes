{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract TimeLapse {\r\n  uint256 public openingTime;\r\n  uint256 public closingTime;\r\n\r\n  uint256 public constructionTime;\r\n\r\n  modifier onlyWhileOpen {\r\n    require(now >= openingTime && now <= closingTime);\r\n    _;\r\n  }\r\n  modifier onlyAfterClosed {\r\n    require(now > closingTime);\r\n    _;\r\n  }\r\n\r\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\r\n    require(_openingTime >= now);\r\n    require(_closingTime >= _openingTime);\r\n\r\n    constructionTime = now;\r\n    openingTime = _openingTime;\r\n    closingTime = _closingTime;\r\n  }\r\n\r\n  function hasClosed() public view returns (bool) {\r\n    return now > closingTime;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Erc20Wallet {\r\n  mapping (address => uint) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\r\n\r\n  event DepositReceived(address from, uint256 value);\r\n  address token;\r\n\r\n  uint256 public totalDeposited;\r\n\r\n  constructor(address _token) public {\r\n    token = _token;\r\n  }\r\n\r\n  function () public payable {\r\n    revert();\r\n  }\r\n\r\n  function depositToken(uint amount) public {\r\n    //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\r\n    require (ERC20(token).transferFrom(msg.sender, this, amount));\r\n    totalDeposited += amount;\r\n    tokens[msg.sender] += amount;\r\n    emit DepositReceived(msg.sender, amount);\r\n  }\r\n\r\n  function withdrawToken(address payee, uint256 payment) internal{\r\n    totalDeposited -= payment;\r\n    tokens[payee] -= payment;\r\n    require (ERC20(token).transfer(payee, payment));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SplitERC20Payment\r\n * @dev Base contract that supports multiple payees claiming funds sent to this contract\r\n * according to the proportion they own.\r\n */\r\ncontract SplitErc20Payment is Erc20Wallet{\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public totalShares = 0;\r\n  uint256 public totalReleased = 0;\r\n\r\n  mapping(address => uint256) public shares;\r\n  mapping(address => uint256) public released;\r\n  address[] public payees;\r\n\r\n  constructor(address _token)\r\n  Erc20Wallet(_token) public{\r\n  }\r\n\r\n  function depositToken(uint amount) public{\r\n    super.depositToken(amount);\r\n    if (shares[msg.sender] == 0)\r\n      addPayee(msg.sender, amount);\r\n    else\r\n      addToPayeeBalance(msg.sender, amount);\r\n  }\r\n  /**\r\n   * @dev Claim your share of the balance.\r\n   */\r\n  function claim() public {\r\n    address payee = msg.sender;\r\n\r\n    require(shares[payee] > 0);\r\n\r\n    uint256 totalReceived = totalDeposited + totalReleased;\r\n    uint256 payment = (totalReceived * shares[payee] / totalShares) - released[payee];\r\n\r\n    require(payment != 0);\r\n    require(totalDeposited >= payment);\r\n\r\n    released[payee] = released[payee] + payment;\r\n    totalReleased = totalReleased + payment;\r\n\r\n    super.withdrawToken(payee, payment);\r\n  }\r\n\r\n  /**\r\n   * @dev Add a new payee to the contract.\r\n   * @param _payee The address of the payee to add.\r\n   * @param _shares The number of shares owned by the payee.\r\n   */\r\n  function addPayee(address _payee, uint256 _shares) internal {\r\n    require(_payee != address(0));\r\n    require(_shares > 0);\r\n    require(shares[_payee] == 0);\r\n\r\n    payees.push(_payee);\r\n    shares[_payee] = _shares;\r\n    totalShares = totalShares.add(_shares);\r\n  }\r\n  /**\r\n   * @dev Add to payee balance\r\n   * @param _payee The address of the payee to add.\r\n   * @param _shares The number of shares to add to the payee.\r\n   */\r\n  function addToPayeeBalance(address _payee, uint256 _shares) internal {\r\n  require(_payee != address(0));\r\n  require(_shares > 0);\r\n  require(shares[_payee] > 0);\r\n\r\n  shares[_payee] += _shares;\r\n  totalShares = totalShares.add(_shares);\r\n  }\r\n}\r\n\r\n\r\ncontract ERC20Vault is TimeLapse, SplitErc20Payment{\r\n  constructor(address _token, uint256 _openingTime, uint256 _closingTime)\r\n  SplitErc20Payment(_token)\r\n  TimeLapse(_openingTime, _closingTime)\r\n  public{\r\n  }\r\n\r\n  function claim() public onlyAfterClosed{\r\n    super.claim();\r\n  }\r\n\r\n  function depositToken(uint amount) public onlyWhileOpen{\r\n    super.depositToken(amount);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payees\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"constructionTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"}]","ContractName":"ERC20Vault","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b561fef0d624c0826ff869946f6076b7c4f2ba42000000000000000000000000000000000000000000000000000000005b381980000000000000000000000000000000000000000000000000000000005c2aad80","Library":"","SwarmSource":"bzzr://ae79646623ca9d43866ebdd4f6f22a771d909a9f0475a0e7b3ef9b223ba164bd"}]}