{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: contracts/zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Acceptable.sol\r\n\r\n// @title Acceptable\r\n// @author Takayuki Jimba\r\n// @dev Provide basic access control.\r\ncontract Acceptable is Ownable {\r\n    address public sender;\r\n\r\n    // @dev Throws if called by any address other than the sender.\r\n    modifier onlyAcceptable {\r\n        require(msg.sender == sender);\r\n        _;\r\n    }\r\n\r\n    // @dev Change acceptable address\r\n    // @param _sender The address to new sender\r\n    function setAcceptable(address _sender) public onlyOwner {\r\n        sender = _sender;\r\n    }\r\n}\r\n\r\n// File: contracts/ExchangeBase.sol\r\n\r\n// @title ExchangeBase\r\n// @author Takayuki Jimba\r\n// @dev create, remove and succeed are supposed to be called from CryptoCrystal contract only.\r\ncontract ExchangeBase is Acceptable {\r\n    struct Exchange {\r\n        address owner;\r\n        uint256 tokenId;\r\n        uint8 kind;\r\n        uint128 weight;\r\n        uint64 createdAt;\r\n    }\r\n\r\n    Exchange[] exchanges;\r\n\r\n    mapping(uint256 => Exchange) tokenIdToExchange;\r\n\r\n    event ExchangeCreated(\r\n        uint256 indexed id,\r\n        address owner,\r\n        uint256 ownerTokenId,\r\n        uint256 ownerTokenGene,\r\n        uint256 ownerTokenKind,\r\n        uint256 ownerTokenWeight,\r\n        uint256 kind,\r\n        uint256 weight,\r\n        uint256 createdAt\r\n    );\r\n    event ExchangeRemoved(uint256 indexed id, uint256 removedAt);\r\n\r\n    function create(\r\n        address _owner,\r\n        uint256 _ownerTokenId,\r\n        uint256 _ownerTokenGene,\r\n        uint256 _ownerTokenKind,\r\n        uint256 _ownerTokenWeight,\r\n        uint256 _kind,\r\n        uint256 _weight,\r\n        uint256 _createdAt\r\n    ) public onlyAcceptable returns(uint256) {\r\n        require(!isOnExchange(_ownerTokenId));\r\n        require(_ownerTokenWeight > 0);\r\n        require(_weight > 0);\r\n        require(_createdAt > 0);\r\n        require(_weight <= 1384277343750);\r\n\r\n        Exchange memory _exchange = Exchange({\r\n            owner: _owner,\r\n            tokenId: _ownerTokenId,\r\n            kind: uint8(_kind),\r\n            weight: uint128(_weight),\r\n            createdAt: uint64(_createdAt)\r\n            });\r\n        uint256 _id = exchanges.push(_exchange) - 1;\r\n        tokenIdToExchange[_ownerTokenId] = _exchange;\r\n        emit ExchangeCreated(\r\n            _id,\r\n            _owner,\r\n            _ownerTokenId,\r\n            _ownerTokenGene,\r\n            _ownerTokenKind,\r\n            _ownerTokenWeight,\r\n            _kind,\r\n            _weight,\r\n            _createdAt\r\n        );\r\n        return _id;\r\n    }\r\n\r\n    function remove(uint256 _id) public onlyAcceptable {\r\n        require(isOnExchangeById(_id));\r\n\r\n        Exchange memory _exchange = exchanges[_id];\r\n        delete tokenIdToExchange[_exchange.tokenId];\r\n        delete exchanges[_id];\r\n\r\n        emit ExchangeRemoved(_id, now);\r\n    }\r\n\r\n    function getExchange(uint256 _id) public view returns(\r\n        address owner,\r\n        uint256 tokenId,\r\n        uint256 kind,\r\n        uint256 weight,\r\n        uint256 createdAt\r\n    ) {\r\n        require(isOnExchangeById(_id));\r\n\r\n        Exchange memory _exchange = exchanges[_id];\r\n        owner = _exchange.owner;\r\n        tokenId = _exchange.tokenId;\r\n        kind = _exchange.kind;\r\n        weight = _exchange.weight;\r\n        createdAt = _exchange.createdAt;\r\n    }\r\n\r\n    function getTokenId(uint256 _id) public view returns(uint256) {\r\n        require(isOnExchangeById(_id));\r\n\r\n        Exchange memory _exchange = exchanges[_id];\r\n        return _exchange.tokenId;\r\n    }\r\n\r\n    function ownerOf(uint256 _id) public view returns(address) {\r\n        require(isOnExchangeById(_id));\r\n\r\n        return exchanges[_id].owner;\r\n    }\r\n\r\n    function isOnExchange(uint256 _tokenId) public view returns(bool) {\r\n        return tokenIdToExchange[_tokenId].createdAt > 0;\r\n    }\r\n\r\n    function isOnExchangeById(uint256 _id) public view returns(bool) {\r\n        return (_id < exchanges.length) && (exchanges[_id].createdAt > 0);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"setAcceptable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getExchange\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"kind\",\"type\":\"uint256\"},{\"name\":\"weight\",\"type\":\"uint256\"},{\"name\":\"createdAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_ownerTokenId\",\"type\":\"uint256\"},{\"name\":\"_ownerTokenGene\",\"type\":\"uint256\"},{\"name\":\"_ownerTokenKind\",\"type\":\"uint256\"},{\"name\":\"_ownerTokenWeight\",\"type\":\"uint256\"},{\"name\":\"_kind\",\"type\":\"uint256\"},{\"name\":\"_weight\",\"type\":\"uint256\"},{\"name\":\"_createdAt\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isOnExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isOnExchangeById\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ownerTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownerTokenGene\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownerTokenKind\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownerTokenWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"kind\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"createdAt\",\"type\":\"uint256\"}],\"name\":\"ExchangeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"removedAt\",\"type\":\"uint256\"}],\"name\":\"ExchangeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ExchangeBase","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cab7a0183a7e26acecb552c33d11a6472b053c869d372965664b968678b0e735"}]}