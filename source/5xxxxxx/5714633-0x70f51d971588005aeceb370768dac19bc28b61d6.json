{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n// File: contracts/ExchangeHandler.sol\r\n\r\n/// @title Interface for all exchange handler contracts\r\ninterface ExchangeHandler {\r\n\r\n    /// @dev Get the available amount left to fill for an order\r\n    /// @param orderAddresses Array of address values needed for this DEX order\r\n    /// @param orderValues Array of uint values needed for this DEX order\r\n    /// @param exchangeFee Value indicating the fee for this DEX order\r\n    /// @param v ECDSA signature parameter v\r\n    /// @param r ECDSA signature parameter r\r\n    /// @param s ECDSA signature parameter s\r\n    /// @return Available amount left to fill for this order\r\n    function getAvailableAmount(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256 exchangeFee,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256);\r\n\r\n    /// @dev Perform a buy order at the exchange\r\n    /// @param orderAddresses Array of address values needed for each DEX order\r\n    /// @param orderValues Array of uint values needed for each DEX order\r\n    /// @param exchangeFee Value indicating the fee for this DEX order\r\n    /// @param amountToFill Amount to fill in this order\r\n    /// @param v ECDSA signature parameter v\r\n    /// @param r ECDSA signature parameter r\r\n    /// @param s ECDSA signature parameter s\r\n    /// @return Amount filled in this order\r\n    function performBuy(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256 exchangeFee,\r\n        uint256 amountToFill,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable returns (uint256);\r\n\r\n    /// @dev Perform a sell order at the exchange\r\n    /// @param orderAddresses Array of address values needed for each DEX order\r\n    /// @param orderValues Array of uint values needed for each DEX order\r\n    /// @param exchangeFee Value indicating the fee for this DEX order\r\n    /// @param amountToFill Amount to fill in this order\r\n    /// @param v ECDSA signature parameter v\r\n    /// @param r ECDSA signature parameter r\r\n    /// @param s ECDSA signature parameter s\r\n    /// @return Amount filled in this order\r\n    function performSell(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256 exchangeFee,\r\n        uint256 amountToFill,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract Token is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/Kyber.sol\r\n\r\ninterface Kyber {\r\n    function trade(Token src, uint srcAmount, Token dest, address destAddress, uint maxDestAmount, uint minConversionRate, address walletId) public payable returns (uint);\r\n}\r\n\r\ncontract KyberHandler is ExchangeHandler {\r\n    // State variables\r\n    Kyber public exchange;\r\n    Token constant public ETH_TOKEN_ADDRESS = Token(0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n\r\n    // Constructor\r\n    function KyberHandler(address _exchange) public {\r\n        exchange = Kyber(_exchange);\r\n    }\r\n\r\n    // Public functions\r\n    function getAvailableAmount(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256 exchangeFee,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256) {\r\n        // return amountToGive\r\n        return orderValues[0];\r\n    }\r\n\r\n    function performBuy(\r\n        address[8] orderAddresses, // 0: tokenToGet (dest), 1: destAddress (primary), 2: walletId\r\n        uint256[6] orderValues, // 0: srcAmount (amountToGive), 1: dstAmount (amountToGet), 2: maxDestAmount, 3: minConversionRate\r\n        uint256 exchangeFee, // ignore\r\n        uint256 amountToFill, // ignore\r\n        uint8 v, // ignore\r\n        bytes32 r, // ignore\r\n        bytes32 s // ignore\r\n    ) external payable returns (uint256) {\r\n        require(msg.value == orderValues[0]);\r\n\r\n        uint256 tokenAmountObtained = trade(\r\n            ETH_TOKEN_ADDRESS, // ERC20 src\r\n            orderValues[0],    // uint srcAmount\r\n            Token(orderAddresses[0]), // ERC20 dest\r\n            orderAddresses[1], // address destAddress (where tokens are sent to after trade)\r\n            orderValues[2],    // uint maxDestAmount\r\n            orderValues[3],    // uint minConversionRate\r\n            orderAddresses[2]  // address walletId\r\n        );\r\n\r\n        // If Kyber has sent us back some excess ether\r\n        if(this.balance > 0) {\r\n            msg.sender.transfer(this.balance);\r\n        }\r\n\r\n        return tokenAmountObtained;\r\n    }\r\n\r\n    function performSell(\r\n        address[8] orderAddresses, // 0: tokenToGive (src), 1: destAddress (primary), 2: walletId\r\n        uint256[6] orderValues, // 0: srcAmount (amountToGive), 1: dstAmount (amountToGet), 2: maxDestAmount, 3: minConversionRate\r\n        uint256 exchangeFee, // ignore\r\n        uint256 amountToFill, // ignore\r\n        uint8 v, // ignore\r\n        bytes32 r, // ignore\r\n        bytes32 s // ignore\r\n    ) external returns (uint256) {\r\n\r\n        require(Token(orderAddresses[0]).approve(address(exchange), orderValues[0]));\r\n\r\n        uint256 etherAmountObtained = trade(\r\n            Token(orderAddresses[0]), // ERC20 src\r\n            orderValues[0],    // uint srcAmount\r\n            ETH_TOKEN_ADDRESS, // ERC20 dest\r\n            orderAddresses[1], // address destAddress (where tokens are sent to after trade)\r\n            orderValues[2],    // uint maxDestAmount\r\n            orderValues[3],    // uint minConversionRate\r\n            orderAddresses[2]  // address walletId\r\n        );\r\n\r\n        return etherAmountObtained;\r\n    }\r\n\r\n    function trade(\r\n        Token src,\r\n        uint srcAmount,\r\n        Token dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId\r\n    ) internal returns (uint256) {\r\n        uint256 valToSend = 0;\r\n        if(src == ETH_TOKEN_ADDRESS) {\r\n            valToSend = srcAmount;\r\n        }\r\n\r\n        return exchange.trade.value(valToSend)(\r\n            src,\r\n            srcAmount,\r\n            dest,\r\n            destAddress,\r\n            maxDestAmount,\r\n            minConversionRate,\r\n            walletId\r\n        );\r\n    }\r\n\r\n    function() public payable {\r\n        require(msg.sender == address(exchange));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ETH_TOKEN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[8]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6]\"},{\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"getAvailableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[8]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6]\"},{\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"name\":\"amountToFill\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"performSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[8]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6]\"},{\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"name\":\"amountToFill\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"performBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_exchange\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"KyberHandler","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000964f35fae36d75b1e72770e244f6595b68508cf5","Library":"","SwarmSource":"bzzr://93effcfe49b64f79c0d25947125d5253770a3e5b946e54718ba6bf3e91737a86"}]}