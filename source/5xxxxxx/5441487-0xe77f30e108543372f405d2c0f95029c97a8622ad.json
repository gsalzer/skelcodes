{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n    function approve(address spender, uint256 tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\n/*\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n*/\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and an\r\n// initial fixed supply\r\n// ----------------------------------------------------------------------------\r\ncontract StandardToken is ERC20Interface, Owned {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant symbol = \"ast\";\r\n    string public constant name = \"AllStocks Token\";\r\n    uint256 public constant decimals = 18;\r\n    uint256 public _totalSupply;\r\n\r\n    bool public isFinalized;              // switched to true in operational state\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    mapping(address => uint256) refunds;\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    function StandardToken() public {\r\n\r\n        //_totalSupply = 1000000 * 10**uint(decimals);\r\n        //balances[owner] = _totalSupply;\r\n        //Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public constant returns (uint256) {\r\n        return _totalSupply - balances[address(0)];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public constant returns (uint256 balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint256 tokens) public returns (bool success) {\r\n        \r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(to != 0x0);\r\n        \r\n        //allow trading in tokens only if sale fhined or by token creator (for bounty program)\r\n        if (msg.sender != owner)\r\n            require(isFinalized);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces \r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint256 tokens) public returns (bool success) {\r\n        //allow trading in token only if sale fhined \r\n        require(isFinalized);\r\n\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {\r\n        //allow trading in token only if sale fhined \r\n        require(isFinalized);\r\n\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining) {\r\n        //allow trading in token only if sale fhined \r\n        require(isFinalized);\r\n        \r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n}\r\n\r\n// note introduced onlyPayloadSize in StandardToken.sol to protect against short address attacks\r\n\r\ncontract AllstocksToken is StandardToken {\r\n    string public version = \"1.0\";\r\n\r\n    // contracts\r\n    address public ethFundDeposit;        // deposit address for ETH for Allstocks Fund\r\n\r\n    // crowdsale parameters\r\n    bool public isActive;                 // switched to true in after setup\r\n    uint256 public fundingStartTime = 0;\r\n    uint256 public fundingEndTime = 0;\r\n    uint256 public allstocksFund = 25 * (10**6) * 10**decimals;     // 25m reserved for Allstocks use\r\n    uint256 public tokenExchangeRate = 625;                         // 625 Allstocks tokens per 1 ETH\r\n    uint256 public tokenCreationCap =  50 * (10**6) * 10**decimals; // 50m hard cap\r\n    \r\n    //this is for production\r\n    uint256 public tokenCreationMin =  25 * (10**5) * 10**decimals; // 2.5m minimum\r\n\r\n\r\n    // events\r\n    event LogRefund(address indexed _to, uint256 _value);\r\n    event CreateAllstocksToken(address indexed _to, uint256 _value);\r\n\r\n    // constructor\r\n    function AllstocksToken() public {\r\n      isFinalized = false;                         //controls pre through crowdsale state\r\n      owner = msg.sender;\r\n      _totalSupply = allstocksFund;\r\n      balances[owner] = allstocksFund;             // Deposit Allstocks share\r\n      CreateAllstocksToken(owner, allstocksFund);  // logs Allstocks fund\r\n    }\r\n\r\n    function setup (\r\n        uint256 _fundingStartTime,\r\n        uint256 _fundingEndTime) onlyOwner external\r\n    {\r\n      require (isActive == false); \r\n      require (isFinalized == false); \t\t\t        \t   \r\n      require (msg.sender == owner);                 // locks finalize to the ultimate ETH owner\r\n      require (fundingStartTime == 0);              //run once\r\n      require (fundingEndTime == 0);                //first time \r\n      require(_fundingStartTime > 0);\r\n      require(_fundingEndTime > 0 && _fundingEndTime > _fundingStartTime);\r\n\r\n      isFinalized = false;                          //controls pre through crowdsale state\r\n      isActive = true;\r\n      ethFundDeposit = owner;                       // set ETH wallet owner \r\n      fundingStartTime = _fundingStartTime;\r\n      fundingEndTime = _fundingEndTime;\r\n    }\r\n\r\n    function () public payable {       \r\n      createTokens(msg.value);\r\n    }\r\n\r\n    /// @dev Accepts ether and creates new Allstocks tokens.\r\n    function createTokens(uint256 _value)  internal {\r\n      require(isFinalized == false);    \r\n      require(now >= fundingStartTime);\r\n      require(now < fundingEndTime); \r\n      require(msg.value > 0);         \r\n\r\n      uint256 tokens = _value.mul(tokenExchangeRate); // check that we're not over totals\r\n      uint256 checkedSupply = _totalSupply.add(tokens);\r\n\r\n      require(checkedSupply <= tokenCreationCap);\r\n\r\n      _totalSupply = checkedSupply;\r\n      balances[msg.sender] += tokens;  // safeAdd not needed\r\n\r\n      //add sent eth to refunds list\r\n      refunds[msg.sender] = _value.add(refunds[msg.sender]);  // safeAdd \r\n\r\n      CreateAllstocksToken(msg.sender, tokens);  // logs token creation\r\n      Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\t\r\n\t//method for manageing bonus phases \r\n\tfunction setRate(uint256 _value) external onlyOwner {\r\n      require (isFinalized == false);\r\n      require (isActive == true);\r\n      require (_value > 0);\r\n      require(msg.sender == owner); // Allstocks double chack \r\n      tokenExchangeRate = _value;\r\n\r\n    }\r\n\r\n    /// @dev Ends the funding period and sends the ETH home\r\n    function finalize() external onlyOwner {\r\n      require (isFinalized == false);\r\n      require(msg.sender == owner); // Allstocks double chack  \r\n      require(_totalSupply >= tokenCreationMin + allstocksFund);  // have to sell minimum to move to operational\r\n      require(_totalSupply > 0);\r\n\r\n      if (now < fundingEndTime) {    //if try to close before end time, check that we reach target\r\n        require(_totalSupply >= tokenCreationCap);\r\n      }\r\n      else \r\n        require(now >= fundingEndTime);\r\n      \r\n\t    // move to operational\r\n      isFinalized = true;\r\n      ethFundDeposit.transfer(this.balance);  // send the eth to Allstocks\r\n    }\r\n\r\n    /// @dev send funding to safe wallet if minimum is reached \r\n    function vaultFunds() external onlyOwner {\r\n      require(msg.sender == owner);            // Allstocks double chack\r\n      require(_totalSupply >= tokenCreationMin + allstocksFund); // have to sell minimum to move to operational\r\n      ethFundDeposit.transfer(this.balance);  // send the eth to Allstocks\r\n    }\r\n\r\n    /// @dev Allows contributors to recover their ether in the case of a failed funding campaign.\r\n    function refund() external {\r\n      require (isFinalized == false);  // prevents refund if operational\r\n      require (isActive == true);\r\n      require (now > fundingEndTime); // prevents refund until sale period is over\r\n     \r\n      require(_totalSupply < tokenCreationMin + allstocksFund);  // no refunds if we sold enough\r\n      require(msg.sender != owner); // Allstocks not entitled to a refund\r\n      \r\n      uint256 allstocksVal = balances[msg.sender];\r\n      uint256 ethValRefund = refunds[msg.sender];\r\n     \r\n      require(allstocksVal > 0);   \r\n      require(ethValRefund > 0);  \r\n     \r\n      balances[msg.sender] = 0;\r\n      refunds[msg.sender] = 0;\r\n      \r\n      _totalSupply = _totalSupply.sub(allstocksVal); // extra safe\r\n      \r\n      uint256 ethValToken = allstocksVal / tokenExchangeRate;     // should be safe; previous throws covers edges\r\n\r\n      require(ethValRefund <= ethValToken);\r\n      msg.sender.transfer(ethValRefund);                 // if you're using a contract; make sure it works with .send gas limits\r\n      LogRefund(msg.sender, ethValRefund);               // log it\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundingStartTime\",\"type\":\"uint256\"},{\"name\":\"_fundingEndTime\",\"type\":\"uint256\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"vaultFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allstocksFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCreationMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"CreateAllstocksToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AllstocksToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ab53186eafdcf39ae4a94e2f9c967e1584f5ce36040be1e7dad5c335bc498893"}]}