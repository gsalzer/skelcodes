{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\ncontract Likedapp{\r\n\r\n    //state variables\r\n\r\n    //like options: 1 - I love you-heart!, 2 - like-smile, 3 - youre cool-glasses, 4 - ok-regular, 5 -I dislike-angry you, 0 - welcome :)\r\n\r\n    //Model Raction\r\n    struct Reactions{\r\n        int8 action;\r\n        string message;\r\n    }\r\n\r\n    //Model User\r\n    struct User {\r\n        uint id;\r\n        uint userReactionCount;\r\n        address user_address;\r\n        string username;\r\n        Reactions[] reactions;\r\n    }\r\n\r\n    //Store User\r\n    User[] userStore;\r\n\r\n    //Fetch User\r\n    //TO:do we need id or address to reference user\r\n    mapping(address => User) public users;\r\n    //Store User Count\r\n    uint public userCount;\r\n\r\n    //message price\r\n    uint price = 0.00015 ether;\r\n\r\n    //my own\r\n    address public iown;\r\n\r\n    //event declaration\r\n    event UserCreated(uint indexed id);\r\n    event SentReaction(address user_address);\r\n\r\n    //Constructor\r\n    constructor() public{\r\n        iown = msg.sender;\r\n    }\r\n\r\n    function addUser(string _username) public {\r\n\r\n        //check string length\r\n        require(bytes(_username).length > 1);\r\n\r\n        //TO DO: Check if username exist\r\n        require(users[msg.sender].id == 0);\r\n\r\n        userCount++;\r\n        userStore.length++;\r\n        User storage u = userStore[userStore.length - 1];\r\n        Reactions memory react = Reactions(0, \"Welcome to LikeDapp! :D\");\r\n        u.reactions.push(react);\r\n        u.id = userCount;\r\n        u.user_address = msg.sender;\r\n        u.username = _username;\r\n        u.userReactionCount++;\r\n        users[msg.sender] = u;\r\n\r\n        //UserCreated(userCount);\r\n    }\r\n\r\n\r\n    function getUserReaction(uint _i) external view returns (int8,string){\r\n        require(_i >= 0);\r\n        return (users[msg.sender].reactions[_i].action, users[msg.sender].reactions[_i].message);\r\n    }\r\n\r\n    function sendReaction(address _a, int8 _l, string _m) public payable {\r\n         require(_l >= 1 && _l <= 5);\r\n         require(users[_a].id > 0);\r\n\r\n        if(bytes(_m).length >= 1){\r\n            buyMessage();\r\n        }\r\n\r\n        users[_a].reactions.push(Reactions(_l, _m));\r\n        users[_a].userReactionCount++;\r\n\r\n        //SentReaction(_a);\r\n    }\r\n\r\n    function getUserCount() external view returns (uint){\r\n        return userCount;\r\n    }\r\n\r\n    function getUsername() external view returns (string){\r\n        return users[msg.sender].username;\r\n    }\r\n\r\n    function getUserReactionCount() external view returns (uint){\r\n        return users[msg.sender].userReactionCount;\r\n    }\r\n\r\n    //Payments\r\n    function buyMessage() public payable{\r\n        require(msg.value >= price);\r\n    }\r\n\r\n    function withdraw() external{\r\n        require(msg.sender == iown);\r\n        iown.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawAmount(uint amount) external{\r\n        require(msg.sender == iown);\r\n        iown.transfer(amount);\r\n    }\r\n\r\n    //check accounts\r\n    function checkAccount(address _a) external view returns (bool){\r\n        if(users[_a].id == 0){\r\n         return false;\r\n       }\r\n       else{\r\n         return true;\r\n       }\r\n    }\r\n\r\n    function amIin() external view returns (bool){\r\n        if(users[msg.sender].id == 0){\r\n            return false;\r\n        }\r\n        else{\r\n            return true;\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"addUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"checkAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserReactionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amIin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iown\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"userReactionCount\",\"type\":\"uint256\"},{\"name\":\"user_address\",\"type\":\"address\"},{\"name\":\"username\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"getUserReaction\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"},{\"name\":\"_l\",\"type\":\"int8\"},{\"name\":\"_m\",\"type\":\"string\"}],\"name\":\"sendReaction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyMessage\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"UserCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user_address\",\"type\":\"address\"}],\"name\":\"SentReaction\",\"type\":\"event\"}]","ContractName":"Likedapp","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4d15cf55052d3cd262e11c23ad2e9319c7976e00a258f83fabff1cd567a71830"}]}