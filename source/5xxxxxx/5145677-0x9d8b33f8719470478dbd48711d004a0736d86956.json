{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\n\r\n/// @dev Implements access control to the MetaGame contract.\r\ncontract MetaGameAccessControl is Claimable, Pausable, CanReclaimToken {\r\n    address public cfoAddress;\r\n    \r\n    function MetaGameAccessControl() public {\r\n        // The creator of the contract is the initial CFO.\r\n        cfoAddress = msg.sender;\r\n    }\r\n    \r\n    /// @dev Access modifier for CFO-only functionality.\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CFO. Only available to the current contract owner.\r\n    /// @param _newCFO The address of the new CFO.\r\n    function setCFO(address _newCFO) external onlyOwner {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n}\r\n\r\n\r\n/// @dev Defines base data structures for MetaGame.\r\ncontract MetaGameBase is MetaGameAccessControl {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (uint256 => address) identifierToOwner;\r\n    mapping (uint256 => address) identifierToApproved;\r\n    mapping (address => uint256) ownershipDeedCount;\r\n    \r\n    mapping (uint256 => uint256) identifierToParentIdentifier;\r\n    \r\n    /// @dev All existing identifiers.\r\n    uint256[] public identifiers;\r\n    \r\n    /// @notice Get all minted identifiers;\r\n    function getAllIdentifiers() external view returns(uint256[]) {\r\n        return identifiers;\r\n    }\r\n    \r\n    /// @notice Returns the identifier of the parent of an identifier.\r\n    /// The parent identifier is 0 if the identifier has no parent.\r\n    /// @param identifier The identifier to get the parent identifier of.\r\n    function parentOf(uint256 identifier) external view returns (uint256 parentIdentifier) {\r\n        parentIdentifier = identifierToParentIdentifier[identifier];\r\n    }\r\n}\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Deed Standard\r\n/// @author William Entriken (https://phor.net), et al.\r\n/// @dev Specification at https://github.com/ethereum/EIPs/pull/841 (DRAFT)\r\ninterface ERC721 {\r\n\r\n    // COMPLIANCE WITH ERC-165 (DRAFT) /////////////////////////////////////////\r\n\r\n    /// @dev ERC-165 (draft) interface signature for itself\r\n    // bytes4 internal constant INTERFACE_SIGNATURE_ERC165 = // 0x01ffc9a7\r\n    //     bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    /// @dev ERC-165 (draft) interface signature for ERC721\r\n    // bytes4 internal constant INTERFACE_SIGNATURE_ERC721 = // 0xda671b9b\r\n    //     bytes4(keccak256('ownerOf(uint256)')) ^\r\n    //     bytes4(keccak256('countOfDeeds()')) ^\r\n    //     bytes4(keccak256('countOfDeedsByOwner(address)')) ^\r\n    //     bytes4(keccak256('deedOfOwnerByIndex(address,uint256)')) ^\r\n    //     bytes4(keccak256('approve(address,uint256)')) ^\r\n    //     bytes4(keccak256('takeOwnership(uint256)'));\r\n\r\n    /// @notice Query a contract to see if it supports a certain interface\r\n    /// @dev Returns `true` the interface is supported and `false` otherwise,\r\n    ///  returns `true` for INTERFACE_SIGNATURE_ERC165 and\r\n    ///  INTERFACE_SIGNATURE_ERC721, see ERC-165 for other interface signatures.\r\n    function supportsInterface(bytes4 _interfaceID) external pure returns (bool);\r\n\r\n    // PUBLIC QUERY FUNCTIONS //////////////////////////////////////////////////\r\n\r\n    /// @notice Find the owner of a deed\r\n    /// @param _deedId The identifier for a deed we are inspecting\r\n    /// @dev Deeds assigned to zero address are considered destroyed, and\r\n    ///  queries about them do throw.\r\n    /// @return The non-zero address of the owner of deed `_deedId`, or `throw`\r\n    ///  if deed `_deedId` is not tracked by this contract\r\n    function ownerOf(uint256 _deedId) external view returns (address _owner);\r\n\r\n    /// @notice Count deeds tracked by this contract\r\n    /// @return A count of the deeds tracked by this contract, where each one of\r\n    ///  them has an assigned and queryable owner\r\n    function countOfDeeds() public view returns (uint256 _count);\r\n\r\n    /// @notice Count all deeds assigned to an owner\r\n    /// @dev Throws if `_owner` is the zero address, representing destroyed deeds.\r\n    /// @param _owner An address where we are interested in deeds owned by them\r\n    /// @return The number of deeds owned by `_owner`, possibly zero\r\n    function countOfDeedsByOwner(address _owner) public view returns (uint256 _count);\r\n\r\n    /// @notice Enumerate deeds assigned to an owner\r\n    /// @dev Throws if `_index` >= `countOfDeedsByOwner(_owner)` or if\r\n    ///  `_owner` is the zero address, representing destroyed deeds.\r\n    /// @param _owner An address where we are interested in deeds owned by them\r\n    /// @param _index A counter between zero and `countOfDeedsByOwner(_owner)`,\r\n    ///  inclusive\r\n    /// @return The identifier for the `_index`th deed assigned to `_owner`,\r\n    ///   (sort order not specified)\r\n    function deedOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 _deedId);\r\n\r\n    // TRANSFER MECHANISM //////////////////////////////////////////////////////\r\n\r\n    /// @dev This event emits when ownership of any deed changes by any\r\n    ///  mechanism. This event emits when deeds are created (`from` == 0) and\r\n    ///  destroyed (`to` == 0). Exception: during contract creation, any\r\n    ///  transfers may occur without emitting `Transfer`.\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed deedId);\r\n\r\n    /// @dev This event emits on any successful call to\r\n    ///  `approve(address _spender, uint256 _deedId)`. Exception: does not emit\r\n    ///  if an owner revokes approval (`_to` == 0x0) on a deed with no existing\r\n    ///  approval.\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed deedId);\r\n\r\n    /// @notice Approve a new owner to take your deed, or revoke approval by\r\n    ///  setting the zero address. You may `approve` any number of times while\r\n    ///  the deed is assigned to you, only the most recent approval matters.\r\n    /// @dev Throws if `msg.sender` does not own deed `_deedId` or if `_to` ==\r\n    ///  `msg.sender`.\r\n    /// @param _deedId The deed you are granting ownership of\r\n    function approve(address _to, uint256 _deedId) external;\r\n\r\n    /// @notice Become owner of a deed for which you are currently approved\r\n    /// @dev Throws if `msg.sender` is not approved to become the owner of\r\n    ///  `deedId` or if `msg.sender` currently owns `_deedId`.\r\n    /// @param _deedId The deed that is being transferred\r\n    function takeOwnership(uint256 _deedId) external;\r\n    \r\n    // SPEC EXTENSIONS /////////////////////////////////////////////////////////\r\n    \r\n    /// @notice Transfer a deed to a new owner.\r\n    /// @dev Throws if `msg.sender` does not own deed `_deedId` or if\r\n    ///  `_to` == 0x0.\r\n    /// @param _to The address of the new owner.\r\n    /// @param _deedId The deed you are transferring.\r\n    function transfer(address _to, uint256 _deedId) external;\r\n}\r\n\r\n\r\n/// @title Metadata extension to ERC-721 interface\r\n/// @author William Entriken (https://phor.net)\r\n/// @dev Specification at https://github.com/ethereum/EIPs/pull/841 (DRAFT)\r\ninterface ERC721Metadata {\r\n\r\n    /// @dev ERC-165 (draft) interface signature for ERC721\r\n    // bytes4 internal constant INTERFACE_SIGNATURE_ERC721Metadata = // 0x2a786f11\r\n    //     bytes4(keccak256('name()')) ^\r\n    //     bytes4(keccak256('symbol()')) ^\r\n    //     bytes4(keccak256('deedUri(uint256)'));\r\n\r\n    /// @notice A descriptive name for a collection of deeds managed by this\r\n    ///  contract\r\n    /// @dev Wallets and exchanges MAY display this to the end user.\r\n    function name() public pure returns (string _deedName);\r\n\r\n    /// @notice An abbreviated name for deeds managed by this contract\r\n    /// @dev Wallets and exchanges MAY display this to the end user.\r\n    function symbol() public pure returns (string _deedSymbol);\r\n\r\n    /// @notice A distinct URI (RFC 3986) for a given token.\r\n    /// @dev If:\r\n    ///  * The URI is a URL\r\n    ///  * The URL is accessible\r\n    ///  * The URL points to a valid JSON file format (ECMA-404 2nd ed.)\r\n    ///  * The JSON base element is an object\r\n    ///  then these names of the base element SHALL have special meaning:\r\n    ///  * \"name\": A string identifying the item to which `_deedId` grants\r\n    ///    ownership\r\n    ///  * \"description\": A string detailing the item to which `_deedId` grants\r\n    ///    ownership\r\n    ///  * \"image\": A URI pointing to a file of image/* mime type representing\r\n    ///    the item to which `_deedId` grants ownership\r\n    ///  Wallets and exchanges MAY display this to the end user.\r\n    ///  Consider making any images at a width between 320 and 1080 pixels and\r\n    ///  aspect ratio between 1.91:1 and 4:5 inclusive.\r\n    function deedUri(uint256 _deedId) external pure returns (string _uri);\r\n}\r\n\r\n\r\n/// @dev Holds deed functionality such as approving and transferring. Implements ERC721.\r\ncontract MetaGameDeed is MetaGameBase, ERC721, ERC721Metadata {\r\n    \r\n    /// @notice Name of the collection of deeds (non-fungible token), as defined in ERC721Metadata.\r\n    function name() public pure returns (string _deedName) {\r\n        _deedName = \"MetaGame\";\r\n    }\r\n    \r\n    /// @notice Symbol of the collection of deeds (non-fungible token), as defined in ERC721Metadata.\r\n    function symbol() public pure returns (string _deedSymbol) {\r\n        _deedSymbol = \"MG\";\r\n    }\r\n    \r\n    /// @dev ERC-165 (draft) interface signature for itself\r\n    bytes4 internal constant INTERFACE_SIGNATURE_ERC165 = // 0x01ffc9a7\r\n        bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    /// @dev ERC-165 (draft) interface signature for ERC721\r\n    bytes4 internal constant INTERFACE_SIGNATURE_ERC721 = // 0xda671b9b\r\n        bytes4(keccak256('ownerOf(uint256)')) ^\r\n        bytes4(keccak256('countOfDeeds()')) ^\r\n        bytes4(keccak256('countOfDeedsByOwner(address)')) ^\r\n        bytes4(keccak256('deedOfOwnerByIndex(address,uint256)')) ^\r\n        bytes4(keccak256('approve(address,uint256)')) ^\r\n        bytes4(keccak256('takeOwnership(uint256)'));\r\n        \r\n    /// @dev ERC-165 (draft) interface signature for ERC721\r\n    bytes4 internal constant INTERFACE_SIGNATURE_ERC721Metadata = // 0x2a786f11\r\n        bytes4(keccak256('name()')) ^\r\n        bytes4(keccak256('symbol()')) ^\r\n        bytes4(keccak256('deedUri(uint256)'));\r\n    \r\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n    /// Returns true for any standardized interfaces implemented by this contract.\r\n    /// (ERC-165 and ERC-721.)\r\n    function supportsInterface(bytes4 _interfaceID) external pure returns (bool) {\r\n        return (\r\n            (_interfaceID == INTERFACE_SIGNATURE_ERC165)\r\n            || (_interfaceID == INTERFACE_SIGNATURE_ERC721)\r\n            || (_interfaceID == INTERFACE_SIGNATURE_ERC721Metadata)\r\n        );\r\n    }\r\n    \r\n    /// @dev Checks if a given address owns a particular deed.\r\n    /// @param _owner The address of the owner to check for.\r\n    /// @param _deedId The deed identifier to check for.\r\n    function _owns(address _owner, uint256 _deedId) internal view returns (bool) {\r\n        return identifierToOwner[_deedId] == _owner;\r\n    }\r\n    \r\n    /// @dev Approve a given address to take ownership of a deed.\r\n    /// @param _from The address approving taking ownership.\r\n    /// @param _to The address to approve taking ownership.\r\n    /// @param _deedId The identifier of the deed to give approval for.\r\n    function _approve(address _from, address _to, uint256 _deedId) internal {\r\n        identifierToApproved[_deedId] = _to;\r\n        \r\n        // Emit event.\r\n        Approval(_from, _to, _deedId);\r\n    }\r\n    \r\n    /// @dev Checks if a given address has approval to take ownership of a deed.\r\n    /// @param _claimant The address of the claimant to check for.\r\n    /// @param _deedId The identifier of the deed to check for.\r\n    function _approvedFor(address _claimant, uint256 _deedId) internal view returns (bool) {\r\n        return identifierToApproved[_deedId] == _claimant;\r\n    }\r\n    \r\n    /// @dev Assigns ownership of a specific deed to an address.\r\n    /// @param _from The address to transfer the deed from.\r\n    /// @param _to The address to transfer the deed to.\r\n    /// @param _deedId The identifier of the deed to transfer.\r\n    function _transfer(address _from, address _to, uint256 _deedId) internal {\r\n        // The number of deeds is capped at rows * cols, so this cannot\r\n        // be overflowed if those parameters are sensible.\r\n        ownershipDeedCount[_to]++;\r\n        \r\n        // Transfer ownership.\r\n        identifierToOwner[_deedId] = _to;\r\n        \r\n        // When a new deed is minted, the _from address is 0x0, but we\r\n        // do not track deed ownership of 0x0.\r\n        if (_from != address(0)) {\r\n            ownershipDeedCount[_from]--;\r\n            \r\n            // Clear taking ownership approval.\r\n            delete identifierToApproved[_deedId];\r\n        }\r\n        \r\n        // Emit the transfer event.\r\n        Transfer(_from, _to, _deedId);\r\n    }\r\n    \r\n    // ERC 721 implementation\r\n    \r\n    /// @notice Returns the total number of deeds currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function countOfDeeds() public view returns (uint256) {\r\n        return identifiers.length;\r\n    }\r\n    \r\n    /// @notice Returns the number of deeds owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @dev Required for ERC-721 compliance\r\n    function countOfDeedsByOwner(address _owner) public view returns (uint256) {\r\n        return ownershipDeedCount[_owner];\r\n    }\r\n    \r\n    /// @notice Returns the address currently assigned ownership of a given deed.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _deedId) external view returns (address _owner) {\r\n        _owner = identifierToOwner[_deedId];\r\n\r\n        require(_owner != address(0));\r\n    }\r\n    \r\n    /// @notice Approve a given address to take ownership of a deed.\r\n    /// @param _to The address to approve taking owernship.\r\n    /// @param _deedId The identifier of the deed to give approval for.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approve(address _to, uint256 _deedId) external whenNotPaused {\r\n        uint256[] memory _deedIds = new uint256[](1);\r\n        _deedIds[0] = _deedId;\r\n        \r\n        approveMultiple(_to, _deedIds);\r\n    }\r\n    \r\n    /// @notice Approve a given address to take ownership of multiple deeds.\r\n    /// @param _to The address to approve taking ownership.\r\n    /// @param _deedIds The identifiers of the deeds to give approval for.\r\n    function approveMultiple(address _to, uint256[] _deedIds) public whenNotPaused {\r\n        // Ensure the sender is not approving themselves.\r\n        require(msg.sender != _to);\r\n    \r\n        for (uint256 i = 0; i < _deedIds.length; i++) {\r\n            uint256 _deedId = _deedIds[i];\r\n            \r\n            // Require the sender is the owner of the deed.\r\n            require(_owns(msg.sender, _deedId));\r\n            \r\n            // Perform the approval.\r\n            _approve(msg.sender, _to, _deedId);\r\n        }\r\n    }\r\n    \r\n    /// @notice Transfer a deed to another address. If transferring to a smart\r\n    /// contract be VERY CAREFUL to ensure that it is aware of ERC-721, or your\r\n    /// deed may be lost forever.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _deedId The identifier of the deed to transfer.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(address _to, uint256 _deedId) external whenNotPaused {\r\n        uint256[] memory _deedIds = new uint256[](1);\r\n        _deedIds[0] = _deedId;\r\n        \r\n        transferMultiple(_to, _deedIds);\r\n    }\r\n    \r\n    /// @notice Transfers multiple deeds to another address. If transferring to\r\n    /// a smart contract be VERY CAREFUL to ensure that it is aware of ERC-721,\r\n    /// or your deeds may be lost forever.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _deedIds The identifiers of the deeds to transfer.\r\n    function transferMultiple(address _to, uint256[] _deedIds) public whenNotPaused {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        \r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        require(_to != address(this));\r\n    \r\n        for (uint256 i = 0; i < _deedIds.length; i++) {\r\n            uint256 _deedId = _deedIds[i];\r\n            \r\n            // One can only transfer their own deeds.\r\n            require(_owns(msg.sender, _deedId));\r\n\r\n            // Transfer ownership\r\n            _transfer(msg.sender, _to, _deedId);\r\n        }\r\n    }\r\n    \r\n    /// @notice Transfer a deed owned by another address, for which the calling\r\n    /// address has previously been granted transfer approval by the owner.\r\n    /// @param _deedId The identifier of the deed to be transferred.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function takeOwnership(uint256 _deedId) external whenNotPaused {\r\n        uint256[] memory _deedIds = new uint256[](1);\r\n        _deedIds[0] = _deedId;\r\n        \r\n        takeOwnershipMultiple(_deedIds);\r\n    }\r\n    \r\n    /// @notice Transfer multiple deeds owned by another address, for which the\r\n    /// calling address has previously been granted transfer approval by the owner.\r\n    /// @param _deedIds The identifier of the deed to be transferred.\r\n    function takeOwnershipMultiple(uint256[] _deedIds) public whenNotPaused {\r\n        for (uint256 i = 0; i < _deedIds.length; i++) {\r\n            uint256 _deedId = _deedIds[i];\r\n            address _from = identifierToOwner[_deedId];\r\n            \r\n            // Check for transfer approval\r\n            require(_approvedFor(msg.sender, _deedId));\r\n\r\n            // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n            _transfer(_from, msg.sender, _deedId);\r\n        }\r\n    }\r\n    \r\n    /// @notice Returns a list of all deed identifiers assigned to an address.\r\n    /// @param _owner The owner whose deeds we are interested in.\r\n    /// @dev This method MUST NEVER be called by smart contract code. It's very\r\n    /// expensive and is not supported in contract-to-contract calls as it returns\r\n    /// a dynamic array (only supported for web3 calls).\r\n    function deedsOfOwner(address _owner) external view returns(uint256[]) {\r\n        uint256 deedCount = countOfDeedsByOwner(_owner);\r\n\r\n        if (deedCount == 0) {\r\n            // Return an empty array.\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](deedCount);\r\n            uint256 totalDeeds = countOfDeeds();\r\n            uint256 resultIndex = 0;\r\n            \r\n            for (uint256 deedNumber = 0; deedNumber < totalDeeds; deedNumber++) {\r\n                uint256 identifier = identifiers[deedNumber];\r\n                if (identifierToOwner[identifier] == _owner) {\r\n                    result[resultIndex] = identifier;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n    \r\n    /// @notice Returns a deed identifier of the owner at the given index.\r\n    /// @param _owner The address of the owner we want to get a deed for.\r\n    /// @param _index The index of the deed we want.\r\n    function deedOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\r\n        // The index should be valid.\r\n        require(_index < countOfDeedsByOwner(_owner));\r\n\r\n        // Loop through all deeds, accounting the number of deeds of the owner we've seen.\r\n        uint256 seen = 0;\r\n        uint256 totalDeeds = countOfDeeds();\r\n        \r\n        for (uint256 deedNumber = 0; deedNumber < totalDeeds; deedNumber++) {\r\n            uint256 identifier = identifiers[deedNumber];\r\n            if (identifierToOwner[identifier] == _owner) {\r\n                if (seen == _index) {\r\n                    return identifier;\r\n                }\r\n                \r\n                seen++;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// @notice Returns an (off-chain) metadata url for the given deed.\r\n    /// @param _deedId The identifier of the deed to get the metadata\r\n    /// url for.\r\n    /// @dev Implementation of optional ERC-721 functionality.\r\n    function deedUri(uint256 _deedId) external pure returns (string uri) {\r\n        // Assume a maximum deed id length.\r\n        require (_deedId < 1000000);\r\n        \r\n        uri = \"https://meta.quazr.io/card/xxxxxxx\";\r\n        bytes memory _uri = bytes(uri);\r\n        \r\n        for (uint256 i = 0; i < 7; i++) {\r\n            _uri[33 - i] = byte(48 + (_deedId / 10 ** i) % 10);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title PullPayment\r\n * @dev Base contract supporting async send for pull payments. Inherit from this\r\n * contract and use asyncSend instead of send.\r\n */\r\ncontract PullPayment {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) public payments;\r\n  uint256 public totalPayments;\r\n\r\n  /**\r\n  * @dev withdraw accumulated balance, called by payee.\r\n  */\r\n  function withdrawPayments() public {\r\n    address payee = msg.sender;\r\n    uint256 payment = payments[payee];\r\n\r\n    require(payment != 0);\r\n    require(this.balance >= payment);\r\n\r\n    totalPayments = totalPayments.sub(payment);\r\n    payments[payee] = 0;\r\n\r\n    assert(payee.send(payment));\r\n  }\r\n\r\n  /**\r\n  * @dev Called by the payer to store the sent amount as credit to be pulled.\r\n  * @param dest The destination address of the funds.\r\n  * @param amount The amount to transfer.\r\n  */\r\n  function asyncSend(address dest, uint256 amount) internal {\r\n    payments[dest] = payments[dest].add(amount);\r\n    totalPayments = totalPayments.add(amount);\r\n  }\r\n}\r\n\r\n\r\n/// @dev Defines base data structures for MetaGame.\r\ncontract MetaGameFinance is MetaGameDeed, PullPayment {\r\n    /// @notice The dividend given to all parents of a deed, \r\n    /// in 1/1000th of a percentage.\r\n    uint256 public dividendParentsPercentage = 1000;\r\n    \r\n    /// @notice The minimum fee for the contract in 1/1000th\r\n    /// of a percentage.\r\n    uint256 public minimumFeePercentage = 2500;\r\n    \r\n    /// @notice The minimum total paid in fees and dividends.\r\n    /// If there are (almost) no dividends to be paid, the fee\r\n    /// for the contract is higher. This happens for deeds at\r\n    /// or near the top of the hierarchy. In 1/1000th of a\r\n    /// percentage.\r\n    uint256 public minimumFeePlusDividendsPercentage = 8000;\r\n    \r\n    /// @notice Most-recent card buyers. These will be given\r\n    /// dividends on the next sale. Then, the buyers will be\r\n    /// shifted, the least recent buyer dropped, and the buyer\r\n    /// of this sale is added as the most recent buyer.\r\n    address[] public recentBuyers = new address[](6);\r\n    \r\n    /// @notice The dividend given to the most recent buyers,\r\n    /// in 1/1000th of a percentage. The dividend decreases by\r\n    /// the given factor for subsequent levels of recent buyers.\r\n    uint256 public dividendRecentBuyersPercentage = 1000;\r\n    uint256 public dividendRecentBuyersPercentageDecreaseFactor = 2;\r\n    \r\n    // @dev A mapping from deed identifiers to the buyout price.\r\n    mapping (uint256 => uint256) public identifierToPrice;\r\n    \r\n    /// @notice The threshold for a payment to be sent directly,\r\n    /// instead of added to a beneficiary's balance.\r\n    uint256 public directPaymentThreshold = 0 ether;\r\n    \r\n    /// @notice Boolean indicating whether deed price can be changed\r\n    /// manually.\r\n    bool public allowChangePrice = false;\r\n    \r\n    /// @notice The maximum depth for which dividends will be paid to parents.\r\n    uint256 public maxDividendDepth = 6;\r\n    \r\n    /// @dev This event is emitted when a deed's buyout price is initially set or changed.\r\n    event Price(uint256 indexed identifier, uint256 price, uint256 nextPrice);\r\n    \r\n    /// @dev This event is emitted when a deed is bought out.\r\n    event Buy(address indexed oldOwner, address indexed newOwner, uint256 indexed identifier, uint256 price, uint256 ownerWinnings);\r\n    \r\n    /// @dev This event is emitted when a dividend is paid.\r\n    event DividendPaid(address indexed beneficiary, uint256 indexed identifierBought, uint256 indexed identifier, uint256 dividend);\r\n    \r\n    /// @notice Set the threshold for a payment to be sent directly.\r\n    /// @param threshold The threshold for a payment to be sent directly.\r\n    function setDirectPaymentThreshold(uint256 threshold) external onlyCFO {\r\n        directPaymentThreshold = threshold;\r\n    }\r\n    \r\n    /// @notice Set whether prices can be changed manually.\r\n    /// @param _allowChangePrice Bool indiciating wether prices can be changed manually.\r\n    function setAllowChangePrice(bool _allowChangePrice) external onlyCFO {\r\n        allowChangePrice = _allowChangePrice;\r\n    }\r\n    \r\n    /// @notice Set the maximum dividend depth.\r\n    /// @param _maxDividendDepth The maximum dividend depth.\r\n    function setMaxDividendDepth(uint256 _maxDividendDepth) external onlyCFO {\r\n        maxDividendDepth = _maxDividendDepth;\r\n    }\r\n    \r\n    /// @notice Calculate the next price given the current price.\r\n    /// @param currentPrice The current price.\r\n    function nextPrice(uint256 currentPrice) public pure returns(uint256) {\r\n        if (currentPrice < 1 ether) {\r\n            return currentPrice.mul(200).div(100); // 100% increase\r\n        } else if (currentPrice < 5 ether) {\r\n            return currentPrice.mul(150).div(100); // 50% increase\r\n        } else {\r\n            return currentPrice.mul(135).div(100); // 35% increase\r\n        }\r\n    }\r\n    \r\n    /// @notice Set the price of a deed.\r\n    /// @param identifier The identifier of the deed to change the price of.\r\n    /// @param newPrice The new price of the deed.\r\n    function changeDeedPrice(uint256 identifier, uint256 newPrice) public {\r\n        // The message sender must be the deed owner.\r\n        require(identifierToOwner[identifier] == msg.sender);\r\n        \r\n        // Price changes must be enabled.\r\n        require(allowChangePrice);\r\n        \r\n        // The new price must be lower than the current price.\r\n        require(newPrice < identifierToPrice[identifier]);\r\n        \r\n        // Set the new price.\r\n        identifierToPrice[identifier] = newPrice;\r\n        Price(identifier, newPrice, nextPrice(newPrice));\r\n    }\r\n    \r\n    /// @notice Set the initial price of a deed.\r\n    /// @param identifier The identifier of the deed to change the price of.\r\n    /// @param newPrice The new price of the deed.\r\n    function changeInitialPrice(uint256 identifier, uint256 newPrice) public onlyCFO {        \r\n        // The deed must be owned by the contract.\r\n        require(identifierToOwner[identifier] == address(this));\r\n        \r\n        // Set the new price.\r\n        identifierToPrice[identifier] = newPrice;\r\n        Price(identifier, newPrice, nextPrice(newPrice));\r\n    }\r\n    \r\n    /// @dev Pay dividends to parents of a deed.\r\n    /// @param identifierBought The identifier of the deed that was bought.\r\n    /// @param identifier The identifier of the deed to pay its parents dividends for (recursed).\r\n    /// @param dividend The dividend to be paid to parents of the deed.\r\n    /// @param depth The depth of this dividend.\r\n    function _payParentDividends(uint256 identifierBought, uint256 identifier, uint256 dividend, uint256 depth)\r\n        internal\r\n        returns(uint256 totalDividendsPaid)\r\n    {\r\n        uint256 parentIdentifier = identifierToParentIdentifier[identifier];\r\n        \r\n        if (parentIdentifier != 0 && depth < maxDividendDepth) {\r\n            address parentOwner = identifierToOwner[parentIdentifier];\r\n        \r\n            if (parentOwner != address(this)) {            \r\n                // Send dividend to the owner of the parent.\r\n                _sendFunds(parentOwner, dividend);\r\n                DividendPaid(parentOwner, identifierBought, parentIdentifier, dividend);\r\n            }\r\n            \r\n            totalDividendsPaid = dividend;\r\n        \r\n            // Recursively pay dividends to parents of parents.\r\n            uint256 dividendsPaid = _payParentDividends(identifierBought, parentIdentifier, dividend, depth + 1);\r\n            \r\n            totalDividendsPaid = totalDividendsPaid.add(dividendsPaid);\r\n        } else {\r\n            // Not strictly necessary to set this to 0 explicitly... but makes\r\n            // it clearer to see what happens.\r\n            totalDividendsPaid = 0;\r\n        }\r\n    }\r\n    \r\n    /// @dev Pay dividends to recent buyers.\r\n    /// @param price The price of the card that was bought.\r\n    function _payRecentBuyerDividends(uint256 price)\r\n        internal\r\n        returns(uint256 totalDividendsPaid)\r\n    {\r\n        uint256 dividend = price.mul(dividendRecentBuyersPercentage).div(100000);\r\n        \r\n        // Pay first dividend.\r\n        if (recentBuyers[0] != 0x0) {\r\n            _sendFunds(recentBuyers[0], dividend);\r\n        }\r\n        totalDividendsPaid = dividend;\r\n        \r\n        // Pay second dividend.\r\n        dividend = dividend.div(dividendRecentBuyersPercentageDecreaseFactor);\r\n        if (recentBuyers[1] != 0x0) {\r\n            _sendFunds(recentBuyers[1], dividend);\r\n        }\r\n        totalDividendsPaid = totalDividendsPaid.add(dividend);\r\n        \r\n        // Pay third dividend.\r\n        dividend = dividend.div(dividendRecentBuyersPercentageDecreaseFactor);\r\n        if (recentBuyers[2] != 0x0) {\r\n            _sendFunds(recentBuyers[2], dividend);\r\n        }\r\n        totalDividendsPaid = totalDividendsPaid.add(dividend);\r\n        \r\n        // Pay fourth dividend.\r\n        dividend = dividend.div(dividendRecentBuyersPercentageDecreaseFactor);\r\n        if (recentBuyers[3] != 0x0) {\r\n            _sendFunds(recentBuyers[3], dividend);\r\n        }\r\n        totalDividendsPaid = totalDividendsPaid.add(dividend);\r\n        \r\n        // Pay fifth dividend.\r\n        dividend = dividend.div(dividendRecentBuyersPercentageDecreaseFactor);\r\n        if (recentBuyers[4] != 0x0) {\r\n            _sendFunds(recentBuyers[4], dividend);\r\n        }\r\n        totalDividendsPaid = totalDividendsPaid.add(dividend);\r\n        \r\n        // Pay sixth dividend.\r\n        dividend = dividend.div(dividendRecentBuyersPercentageDecreaseFactor);\r\n        if (recentBuyers[5] != 0x0) {\r\n            _sendFunds(recentBuyers[5], dividend);\r\n        }\r\n        totalDividendsPaid = totalDividendsPaid.add(dividend);\r\n    }\r\n    \r\n    /// @dev Pay trade dividends.\r\n    /// @param price The identifier of the card that was bought.\r\n    /// @param price The price of the card that was bought.\r\n    function _payDividends(uint256 identifier, uint256 price)\r\n        internal\r\n        returns(uint256 totalDividendsPaid)\r\n    {\r\n        // Pay parent dividends.\r\n        uint256 parentDividend = price.mul(dividendParentsPercentage).div(100000);\r\n        totalDividendsPaid = _payParentDividends(identifier, identifier, parentDividend, 0);\r\n        \r\n        // Pay recent buyer dividends.\r\n        totalDividendsPaid = totalDividendsPaid.add(_payRecentBuyerDividends(price));\r\n    }\r\n    \r\n    /// @dev Calculate the contract fee.\r\n    /// @param price The price of the buyout.\r\n    /// @param dividendsPaid The total amount paid in dividends.\r\n    function calculateFee(uint256 price, uint256 dividendsPaid) public view returns(uint256 fee) {\r\n        // Calculate the absolute minimum fee.\r\n        fee = price.mul(minimumFeePercentage).div(100000);\r\n        \r\n        // Calculate the minimum fee plus dividends payable.\r\n        // See also the explanation at the definition of\r\n        // minimumFeePlusDividends.\r\n        uint256 _minimumFeePlusDividends = price.mul(minimumFeePlusDividendsPercentage).div(100000);\r\n        \r\n        if (_minimumFeePlusDividends > dividendsPaid) {\r\n            uint256 feeMinusDividends = _minimumFeePlusDividends.sub(dividendsPaid);\r\n        \r\n            // The minimum total paid in 'fees plus dividends', minus dividends, is\r\n            // greater than the minimum fee. Set the fee to this value.\r\n            if (feeMinusDividends > fee) {\r\n                fee = feeMinusDividends;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// @dev Shift the 6 most recent buyers, and add the new buyer\r\n    /// to the front.\r\n    /// @param newBuyer The buyer to add to the front of the recent\r\n    /// buyers list.\r\n    function _shiftRecentBuyers(address newBuyer) internal {\r\n        recentBuyers[5] = recentBuyers[4];\r\n        recentBuyers[4] = recentBuyers[3];\r\n        recentBuyers[3] = recentBuyers[2];\r\n        recentBuyers[2] = recentBuyers[1];\r\n        recentBuyers[1] = recentBuyers[0];\r\n        recentBuyers[0] = newBuyer;\r\n    }\r\n    \r\n    /// @dev Send funds to a beneficiary. If sending fails, assign\r\n    /// funds to the beneficiary's balance for manual withdrawal.\r\n    /// @param beneficiary The beneficiary's address to send funds to\r\n    /// @param amount The amount to send.\r\n    function _sendFunds(address beneficiary, uint256 amount) internal {\r\n        if (amount < directPaymentThreshold) {\r\n            // Amount is under send threshold. Send funds asynchronously\r\n            // for manual withdrawal by the beneficiary.\r\n            asyncSend(beneficiary, amount);\r\n        } else if (!beneficiary.send(amount)) {\r\n            // Failed to send funds. This can happen due to a failure in\r\n            // fallback code of the beneficiary, or because of callstack\r\n            // depth.\r\n            // Send funds asynchronously for manual withdrawal by the\r\n            // beneficiary.\r\n            asyncSend(beneficiary, amount);\r\n        }\r\n    }\r\n    \r\n    /// @notice Withdraw (unowed) contract balance.\r\n    function withdrawFreeBalance() external onlyCFO {\r\n        // Calculate the free (unowed) balance. This never underflows, as\r\n        // totalPayments is guaranteed to be less than or equal to the\r\n        // contract balance.\r\n        uint256 freeBalance = this.balance - totalPayments;\r\n        \r\n        cfoAddress.transfer(freeBalance);\r\n    }\r\n}\r\n\r\n\r\n/// @dev Defines core MetaGame functionality.\r\ncontract MetaGameCore is MetaGameFinance {\r\n    \r\n    function MetaGameCore() public {\r\n        // Start the contract paused.\r\n        paused = true;\r\n    }\r\n    \r\n    /// @notice Create a collectible.\r\n    /// @param identifier The identifier of the collectible that is to be created.\r\n    /// @param owner The address of the initial owner. Blank if this contract should\r\n    /// be the initial owner.\r\n    /// @param parentIdentifier The identifier of the parent of the collectible, which\r\n    /// receives dividends when this collectible trades.\r\n    /// @param price The initial price of the collectible.\r\n    function createCollectible(uint256 identifier, address owner, uint256 parentIdentifier, uint256 price) external onlyCFO {\r\n        // The identifier must be valid. Identifier 0 is reserved\r\n        // to mark a collectible as having no parent.\r\n        require(identifier >= 1);\r\n    \r\n        // The identifier must not exist yet.\r\n        require(identifierToOwner[identifier] == 0x0);\r\n        \r\n        // Add the identifier to the list of existing identifiers.\r\n        identifiers.push(identifier);\r\n        \r\n        address initialOwner = owner;\r\n        \r\n        if (initialOwner == 0x0) {\r\n            // Set the initial owner to be the contract itself.\r\n            initialOwner = address(this);\r\n        }\r\n        \r\n        // Transfer the collectible to the initial owner.\r\n        _transfer(0x0, initialOwner, identifier);\r\n        \r\n        // Set the parent identifier.\r\n        identifierToParentIdentifier[identifier] = parentIdentifier;\r\n        \r\n        // Set the initial price.\r\n        identifierToPrice[identifier] = price;\r\n        \r\n        // Emit price event.\r\n        Price(identifier, price, nextPrice(price));\r\n    }\r\n    \r\n    /// @notice Set the parent collectible of a collectible.\r\n    function setParent(uint256 identifier, uint256 parentIdentifier) external onlyCFO {\r\n        // The deed must exist.\r\n        require(identifierToOwner[identifier] != 0x0);\r\n        \r\n        identifierToParentIdentifier[identifier] = parentIdentifier;\r\n    }\r\n    \r\n    /// @notice Buy a collectible.\r\n    function buy(uint256 identifier) external payable whenNotPaused {\r\n        // The collectible must exist.\r\n        require(identifierToOwner[identifier] != 0x0);\r\n        \r\n        address oldOwner = identifierToOwner[identifier];\r\n        uint256 price = identifierToPrice[identifier];\r\n        \r\n        // The old owner must not be the same as the buyer.\r\n        require(oldOwner != msg.sender);\r\n        \r\n        // Enough ether must be provided.\r\n        require(msg.value >= price);\r\n        \r\n        // Set the new price.\r\n        uint256 newPrice = nextPrice(price);\r\n        identifierToPrice[identifier] = newPrice;\r\n        \r\n        // Transfer the collectible.\r\n        _transfer(oldOwner, msg.sender, identifier);\r\n        \r\n        // Emit price change event.\r\n        Price(identifier, newPrice, nextPrice(newPrice));\r\n        \r\n        // Emit buy event.\r\n        Buy(oldOwner, msg.sender, identifier, price, oldOwnerWinnings);\r\n        \r\n        // Pay dividends.\r\n        uint256 dividendsPaid = _payDividends(identifier, price);\r\n        \r\n        // Calculate the contract fee.\r\n        uint256 fee = calculateFee(price, dividendsPaid);\r\n        \r\n        // Calculate the winnings for the previous owner.\r\n        uint256 oldOwnerWinnings = price.sub(dividendsPaid).sub(fee);\r\n        \r\n        // Add the buyer to the recent buyer list.\r\n        _shiftRecentBuyers(msg.sender);\r\n        \r\n        if (oldOwner != address(this)) {\r\n            // The old owner is not this contract itself.\r\n            // Pay the old owner.\r\n            _sendFunds(oldOwner, oldOwnerWinnings);\r\n        }\r\n        \r\n        // Calculate overspent ether. This cannot underflow, as the require\r\n        // guarantees price to be greater than or equal to msg.value.\r\n        uint256 excess = msg.value - price;\r\n        \r\n        if (excess > 0) {\r\n            // Refund overspent Ether.\r\n            msg.sender.transfer(excess);\r\n        }\r\n    }\r\n    \r\n    /// @notice Return a collectible's details.\r\n    /// @param identifier The identifier of the collectible to get details for.\r\n    function getDeed(uint256 identifier)\r\n        external\r\n        view\r\n        returns(uint256 deedId, address owner, uint256 buyPrice, uint256 nextBuyPrice)\r\n    {\r\n        deedId = identifier;\r\n        owner = identifierToOwner[identifier];\r\n        buyPrice = identifierToPrice[identifier];\r\n        nextBuyPrice = nextPrice(buyPrice);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_deedName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"identifier\",\"type\":\"uint256\"},{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeInitialPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"identifier\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"parentIdentifier\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"createCollectible\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_deedIds\",\"type\":\"uint256[]\"}],\"name\":\"transferMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_deedIds\",\"type\":\"uint256[]\"}],\"name\":\"approveMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setDirectPaymentThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"identifier\",\"type\":\"uint256\"},{\"name\":\"parentIdentifier\",\"type\":\"uint256\"}],\"name\":\"setParent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"name\":\"nextPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"identifiers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"deedsOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"dividendsPaid\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxDividendDepth\",\"type\":\"uint256\"}],\"name\":\"setMaxDividendDepth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"deedOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumFeePlusDividendsPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllIdentifiers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recentBuyers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"identifier\",\"type\":\"uint256\"}],\"name\":\"getDeed\",\"outputs\":[{\"name\":\"deedId\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"name\":\"nextBuyPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendRecentBuyersPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendParentsPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxDividendDepth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"directPaymentThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"countOfDeedsByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_deedSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"identifierToPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"identifier\",\"type\":\"uint256\"},{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeDeedPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowChangePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumFeePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowChangePrice\",\"type\":\"bool\"}],\"name\":\"setAllowChangePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"deedUri\",\"outputs\":[{\"name\":\"uri\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfDeeds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"identifier\",\"type\":\"uint256\"}],\"name\":\"parentOf\",\"outputs\":[{\"name\":\"parentIdentifier\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"identifier\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deedIds\",\"type\":\"uint256[]\"}],\"name\":\"takeOwnershipMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendRecentBuyersPercentageDecreaseFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFreeBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identifier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nextPrice\",\"type\":\"uint256\"}],\"name\":\"Price\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"identifier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ownerWinnings\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"identifierBought\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"identifier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dividend\",\"type\":\"uint256\"}],\"name\":\"DividendPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"deedId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"deedId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MetaGameCore","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://11fb9c4be84d0722d97b2b0434655c711a7623dd3e9cff3faf810a92f467daa5"}]}