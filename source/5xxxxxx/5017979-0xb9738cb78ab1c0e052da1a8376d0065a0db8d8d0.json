{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title StandardCrowdsale \r\n * @dev StandardCrowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract StandardCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    StandardToken public token; \r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // how many token units a buyer gets per wei\r\n    uint256 public rate;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n\r\n    function StandardCrowdsale(\r\n        uint256 _startTime, \r\n        uint256 _endTime, \r\n        uint256 _rate, \r\n        address _wallet) \r\n    {\r\n        require(_startTime >= now);\r\n        require(_endTime >= _startTime);\r\n        require(_rate > 0);\r\n        require(_wallet != 0x0);\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n        \r\n        token = createTokenContract(); \r\n    }\r\n\r\n    // creates the token to be sold.\r\n    // override this method to have crowdsale of a specific mintable token.\r\n    function createTokenContract() \r\n        internal \r\n        returns(StandardToken) \r\n    {\r\n        return new StandardToken();\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () \r\n       payable \r\n    {\r\n        buyTokens();\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens() \r\n       public \r\n       payable \r\n    {\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(rate);\r\n        tokens += getBonus(tokens);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        require(token.transfer(msg.sender, tokens)); \r\n        TokenPurchase(msg.sender, weiAmount, tokens);\r\n\r\n        forwardFunds();\r\n\r\n        postBuyTokens();\r\n    }\r\n\r\n    // Action after buying tokens\r\n    function postBuyTokens ()\r\n        internal\r\n    {\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() \r\n       internal \r\n    {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() \r\n        internal \r\n        returns(bool) \r\n    {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() \r\n        public \r\n        constant \r\n        returns(bool) \r\n    {\r\n        return now > endTime;\r\n    }\r\n\r\n    modifier onlyBeforeSale() {\r\n        require(now < startTime);\r\n        _;\r\n    }\r\n\r\n    modifier only24HBeforeSale() {\r\n        require(now < startTime.sub(1 days));\r\n        _;\r\n    }\r\n\r\n    function getBonus(uint256 _tokens) constant returns (uint256 bonus) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Extension of Crowdsale with a max amount of funds raised\r\n */\r\ncontract CappedCrowdsale is StandardCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n\r\n  function CappedCrowdsale(uint256 _cap) {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title The MINDToken contract\r\n * @dev The MINDToken Token contract\r\n * @dev inherite from StandardToken and Ownable by Zeppelin\r\n */\r\ncontract MINDToken is StandardToken, Ownable {\r\n    string  public  constant name = \"MIND Token\";\r\n    string  public  constant symbol = \"MIND\";\r\n    uint8    public  constant decimals = 18;\r\n\r\n    uint    public  transferableStartTime;\r\n\r\n    address public  tokenSaleContract;\r\n    address public  fullTokenWallet;\r\n\r\n    function gettransferableStartTime() constant returns (uint){return now - transferableStartTime;}\r\n\r\n    modifier onlyWhenTransferEnabled() \r\n    {\r\n        if ( now < transferableStartTime ) {\r\n            require(msg.sender == tokenSaleContract || msg.sender == fullTokenWallet || msg.sender == owner);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier validDestination(address to) \r\n    {\r\n        require(to != address(this));\r\n        _;\r\n    }\r\n\r\n    modifier onlySaleContract()\r\n    {\r\n        require(msg.sender == tokenSaleContract);\r\n        _;\r\n    }\r\n\r\n    function MINDToken(\r\n        uint tokenTotalAmount, \r\n        uint _transferableStartTime, \r\n        address _admin, \r\n        address _fullTokenWallet) \r\n    {\r\n        \r\n        // Mint all tokens. Then disable minting forever.\r\n        totalSupply = tokenTotalAmount * (10 ** uint256(decimals));\r\n\r\n        balances[msg.sender] = totalSupply;\r\n        Transfer(address(0x0), msg.sender, totalSupply);\r\n\r\n        transferableStartTime = _transferableStartTime;\r\n        tokenSaleContract = msg.sender;\r\n        fullTokenWallet = _fullTokenWallet;\r\n\r\n        transferOwnership(_admin); // admin could drain tokens and eth that were sent here by mistake\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev override transfer token for a specified address to add onlyWhenTransferEnabled and validDestination\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint _value)\r\n        public\r\n        validDestination(_to)\r\n        onlyWhenTransferEnabled\r\n        returns (bool) \r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev override transferFrom token for a specified address to add onlyWhenTransferEnabled and validDestination\r\n     * @param _from The address to transfer from.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        public\r\n        validDestination(_to)\r\n        onlyWhenTransferEnabled\r\n        returns (bool) \r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    event Burn(address indexed _burner, uint _value);\r\n\r\n    /**\r\n     * @dev burn tokens\r\n     * @param _value The amount to be burned.\r\n     * @return always true (necessary in case of override)\r\n     */\r\n    function burn(uint _value) \r\n        public\r\n        onlyWhenTransferEnabled\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(msg.sender, _value);\r\n        Transfer(msg.sender, address(0x0), _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev burn tokens in the behalf of someone\r\n     * @param _from The address of the owner of the token.\r\n     * @param _value The amount to be burned.\r\n     * @return always true (necessary in case of override)\r\n     */\r\n    function burnFrom(address _from, uint256 _value) \r\n        public\r\n        onlyWhenTransferEnabled\r\n        onlyOwner\r\n        returns(bool) \r\n    {\r\n        assert(transferFrom(_from, msg.sender, _value));\r\n        return burn(_value);\r\n    }\r\n\r\n    /** \r\n    * enable transfer earlier (only presale contract can enable the sale earlier)\r\n    */\r\n    function enableTransferEarlier ()\r\n        public\r\n        onlySaleContract\r\n    {\r\n        transferableStartTime = now + 3 days;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev transfer to owner any tokens send by mistake on this contracts\r\n     * @param token The address of the token to transfer.\r\n     * @param amount The amount to be transfered.\r\n     */\r\n    function emergencyERC20Drain(ERC20 token, uint amount )\r\n        public\r\n        onlyOwner \r\n    {\r\n        token.transfer(owner, amount);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title MINDTokenCrowdSale\r\n * @dev \r\n * We add new features to a base crowdsale using multiple inheritance.\r\n * We are using the following extensions:\r\n * CappedCrowdsale - sets a max boundary for raised funds\r\n *\r\n * The code is based on the contracts of Open Zeppelin and we add our contracts : MINDTokenCrowdSale and the MIND Token\r\n *\r\n */\r\ncontract MINDTokenCrowdSale is Ownable, CappedCrowdsale {\r\n\r\n    // hard cap of the token pre-sale in ether\r\n    uint private constant HARD_CAP_IN_WEI = 2000 ether;\r\n    \r\n    // Token sale rate from ETH to MIND\r\n    uint private constant RATE_ETH_MIND = 10000;\r\n\r\n    // wallet use also to gather the ether of the token sale\r\n    address private constant MIND_CROWDSALE_WALLET = 0x942b56E5A6e92B39643dCB5F232EF583680F0B01;\r\n\r\n    event CrowdSaleTokenSoldout();\r\n\r\n    function MINDTokenCrowdSale(uint256 _startTime, uint256 _endTime, address _tokenAddr)\r\n      CappedCrowdsale(HARD_CAP_IN_WEI)\r\n      StandardCrowdsale(_startTime, _endTime, RATE_ETH_MIND, MIND_CROWDSALE_WALLET)\r\n    {\r\n        token = MINDToken(_tokenAddr);\r\n    }\r\n\r\n    function getToken() constant returns (address){\r\n      return token;\r\n    }\r\n\r\n    /**\r\n     * @dev Create the MIND token (override createTokenContract of StandardCrowdsale)\r\n     * @return the StandardToken created\r\n     */\r\n    function createTokenContract () \r\n      internal \r\n      returns(StandardToken) \r\n    {\r\n        return MINDToken(0x0); // No token is created\r\n    }\r\n\r\n    /**\r\n      * @dev Get the bonus based on the buy time (override getBonus of StandardCrowdsale)\r\n      * @return the number of bonus token\r\n    */\r\n    function getBonus(uint256 _tokens) constant returns (uint256 bonus) {\r\n        require(_tokens != 0);\r\n        if (startTime <= now && now < startTime + 1 days) {\r\n            // 20% bonus\r\n            return _tokens.div(5);\r\n        } else if (startTime + 1 days <= now && now < startTime + 2 days ) {\r\n            // 15% bonus\r\n            return _tokens.mul(3).div(20);\r\n        } else if (startTime + 2 days <= now && now < startTime + 3 days ) {\r\n            // 10% bonus\r\n            return _tokens.div(10);\r\n        } else if (startTime + 3 days <= now && now < startTime + 4 days ) {\r\n            // 5% bonus\r\n            return _tokens.div(20);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer the unsold tokens to the MIND Foundation multisign wallet \r\n     * @dev Only for owner\r\n     * @return the StandardToken created\r\n     */\r\n    function drainRemainingToken () \r\n      public\r\n      onlyOwner\r\n    {\r\n        require(hasEnded());\r\n        token.transfer(MIND_CROWDSALE_WALLET, token.balanceOf(this));\r\n    }\r\n\r\n\r\n    /**\r\n      * @dev Action after buying tokens: check if all sold out and enable transfer immediately\r\n      */\r\n    function postBuyTokens ()\r\n        internal\r\n    {\r\n        if ( token.balanceOf(this) == 0 ) \r\n        {\r\n            CrowdSaleTokenSoldout();\r\n        }\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() \r\n        internal \r\n        returns(bool) \r\n    {\r\n        return super.validPurchase() && msg.value >= 0.1 ether;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drainRemainingToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CrowdSaleTokenSoldout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MINDTokenCrowdSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a787170000000000000000000000000000000000000000000000000000000005a9eacf0000000000000000000000000222728c202e7164dfbd127181d46409338c4328e","Library":"","SwarmSource":"bzzr://e24442fcfdd08365bf6f6378348967cddab2b0a32e11c30d0792ff145dba1e18"}]}