{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract usingOwnership {\r\n  address public contract_owner;\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == contract_owner);\r\n    _;\r\n  }\r\n\r\n  function usingOwnership() internal {\r\n    contract_owner = msg.sender;\r\n  }\r\n\r\n  function Withdraw(uint _amount) onlyOwner public {\r\n    if (_amount > this.balance)\r\n      _amount = this.balance;\r\n    contract_owner.transfer(_amount);\r\n  }\r\n\r\n  function TransferOwnership(address _new_owner) onlyOwner public {\r\n    require(_new_owner != address(0));\r\n    contract_owner = _new_owner;\r\n  }\r\n}\r\n\r\ncontract usingCanvasBoundaries {\r\n  uint private g_block;\r\n  uint private max_max_index;\r\n  uint private max_block_number;\r\n  uint[] private halving;\r\n   \r\n  function usingCanvasBoundaries() internal {\r\n    g_block = block.number;\r\n    max_max_index = 4198401;\r\n    max_block_number = g_block + 3330049;\r\n    halving = [g_block + 16384, g_block + 81920, g_block + 770048];\r\n  }\r\n\r\n  function max_index() internal view returns(uint m_index) {\r\n    if (block.number > max_block_number)\r\n      return max_max_index;\r\n    uint delta = block.number - g_block;\r\n    return delta +\r\n    ((block.number <= halving[0]) ? delta : halving[0] - g_block) +\r\n    ((block.number <= halving[1]) ? delta : halving[1] - g_block) +\r\n    ((block.number <= halving[2]) ? delta : halving[2] - g_block);\r\n  }\r\n\r\n  function HalvingInfo() public view returns(uint genesis_block, uint[] halving_array) {\r\n    return (g_block, halving);\r\n  }\r\n}\r\n\r\ncontract Etherpixels is usingOwnership, usingCanvasBoundaries {\r\n  uint private starting_price = 5000000000000; /* 5000 gwei */\r\n\r\n  /* packed to 32 bytes */\r\n  struct Pixel {\r\n    uint96 price;\r\n    address owner;\r\n  }\r\n  \r\n  mapping(uint => Pixel) private pixels;\r\n\r\n  event PixelPainted(uint i, address new_owner, address old_owner, uint price, bytes3 new_color);\r\n  event PixelUnavailable(uint i, address new_owner, uint price, bytes3 new_color);\r\n  \r\n  function Paint(uint _index, bytes3 _color) public payable {\r\n    require(_index <= max_index());\r\n    paint_pixel(_index, _color, msg.value);\r\n  }\r\n\r\n  function BatchPaint(uint8 _batch_size, uint[] _index, bytes3[] _color, uint[] _paid) public payable {\r\n    uint remaining = msg.value;\r\n    uint m_i = max_index();\r\n    for(uint8 i = 0; i < _batch_size; i++) {\r\n      require(remaining >= _paid[i] && _index[i] <= m_i);\r\n      paint_pixel(_index[i], _color[i], _paid[i]);\r\n      remaining -= _paid[i];\r\n    }\r\n  }\r\n\r\n  function StartingPrice() public view returns(uint price) {\r\n    return starting_price;\r\n  }\r\n\r\n  function LowerStartingPrice(uint _new_starting_price) onlyOwner public {\r\n    require(_new_starting_price < starting_price);\r\n    starting_price = _new_starting_price;\r\n  }\r\n  \r\n  function paint_pixel(uint _index, bytes3 _color, uint _paid) private {\r\n    Pixel storage p = pixels[_index];\r\n    if (msg.sender == p.owner) {\r\n      PixelPainted(_index, msg.sender, msg.sender, p.price, _color);\r\n    }\r\n    else {\r\n      uint current_price = p.price == 0 ? starting_price : uint(p.price);\r\n      if (_paid < current_price * 11 / 10)\r\n        PixelUnavailable(_index, msg.sender, current_price, _color);\r\n      else {\r\n        if (_paid > current_price * 2)\r\n          _paid = current_price * 2;\r\n        p.price = uint96(_paid);\r\n        require(p.price == _paid); /* casting guard */ \r\n        address old_owner = p.owner;\r\n        p.owner = msg.sender;\r\n        PixelPainted(_index, msg.sender, old_owner, p.price, _color);\r\n        if (old_owner != address(0))\r\n          old_owner.send(_paid * 98 / 100); /* not using transfer to avoid old_owner locking pixel by buying it from a contract that reverts when receiving funds */\r\n      }\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_new_starting_price\",\"type\":\"uint256\"}],\"name\":\"LowerStartingPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HalvingInfo\",\"outputs\":[{\"name\":\"genesis_block\",\"type\":\"uint256\"},{\"name\":\"halving_array\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"StartingPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_batch_size\",\"type\":\"uint8\"},{\"name\":\"_index\",\"type\":\"uint256[]\"},{\"name\":\"_color\",\"type\":\"bytes3[]\"},{\"name\":\"_paid\",\"type\":\"uint256[]\"}],\"name\":\"BatchPaint\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_owner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_color\",\"type\":\"bytes3\"}],\"name\":\"Paint\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"i\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"new_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"old_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"new_color\",\"type\":\"bytes3\"}],\"name\":\"PixelPainted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"i\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"new_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"new_color\",\"type\":\"bytes3\"}],\"name\":\"PixelUnavailable\",\"type\":\"event\"}]","ContractName":"Etherpixels","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://57b58ad2db7476897e8bb22868d1b9f60e5cf99d49fdcd3dc5efd5a931807855"}]}