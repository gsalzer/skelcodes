{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * An interface providing the necessary Beercoin functionality\r\n */\r\ninterface Beercoin {\r\n    function transfer(address _to, uint256 _amount) external;\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function decimals() external pure returns (uint8);\r\n}\r\n\r\n\r\n/**\r\n * A contract that defines owner and guardians of the ICO\r\n */\r\ncontract GuardedBeercoinICO {\r\n    address public owner;\r\n\r\n    address public constant guardian1 = 0x7d54aD7DA2DE1FD3241e1c5e8B5Ac9ACF435070A;\r\n    address public constant guardian2 = 0x065a6D3c1986E608354A8e7626923816734fc468;\r\n    address public constant guardian3 = 0x1c387D6FDCEF351Fc0aF5c7cE6970274489b244B;\r\n\r\n    address public guardian1Vote = 0x0;\r\n    address public guardian2Vote = 0x0;\r\n    address public guardian3Vote = 0x0;\r\n\r\n    /**\r\n     * Restrict to the owner only\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Restrict to guardians only\r\n     */\r\n    modifier onlyGuardian() {\r\n        require(msg.sender == guardian1 || msg.sender == guardian2 || msg.sender == guardian3);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Construct the GuardedBeercoinICO contract\r\n     * and make the sender the owner\r\n     */\r\n    function GuardedBeercoinICO() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Declare a new owner\r\n     *\r\n     * @param newOwner the new owner's address\r\n     */\r\n    function setOwner(address newOwner) onlyGuardian public {\r\n        if (msg.sender == guardian1) {\r\n            if (newOwner == guardian2Vote || newOwner == guardian3Vote) {\r\n                owner = newOwner;\r\n                guardian1Vote = 0x0;\r\n                guardian2Vote = 0x0;\r\n                guardian3Vote = 0x0;\r\n            } else {\r\n                guardian1Vote = newOwner;\r\n            }\r\n        } else if (msg.sender == guardian2) {\r\n            if (newOwner == guardian1Vote || newOwner == guardian3Vote) {\r\n                owner = newOwner;\r\n                guardian1Vote = 0x0;\r\n                guardian2Vote = 0x0;\r\n                guardian3Vote = 0x0;\r\n            } else {\r\n                guardian2Vote = newOwner;\r\n            }\r\n        } else if (msg.sender == guardian3) {\r\n            if (newOwner == guardian1Vote || newOwner == guardian2Vote) {\r\n                owner = newOwner;\r\n                guardian1Vote = 0x0;\r\n                guardian2Vote = 0x0;\r\n                guardian3Vote = 0x0;\r\n            } else {\r\n                guardian3Vote = newOwner;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * A contract that defines the Beercoin ICO\r\n */\r\ncontract BeercoinICO is GuardedBeercoinICO {\r\n    Beercoin internal beercoin = Beercoin(0x7367A68039d4704f30BfBF6d948020C3B07DFC59);\r\n\r\n    uint public constant price = 0.000006 ether;\r\n    uint public constant softCap = 48 ether;\r\n    uint public constant begin = 1526637600; // 2018-05-18 12:00:00 (UTC+01:00)\r\n    uint public constant end = 1530395999;   // 2018-06-30 23:59:59 (UTC+01:00)\r\n    \r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n   \r\n    mapping(address => uint256) public balanceOf;\r\n    uint public soldBeercoins = 0;\r\n    uint public raisedEther = 0 ether;\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * Restrict to the time when the ICO is open\r\n     */\r\n    modifier isOpen {\r\n        require(now >= begin && now <= end && !paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Restrict to the state of enough Ether being gathered\r\n     */\r\n    modifier goalReached {\r\n        require(raisedEther >= softCap);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Restrict to the state of not enough Ether\r\n     * being gathered after the time is up\r\n     */\r\n    modifier goalNotReached {\r\n        require(raisedEther < softCap && now > end);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Transfer Beercoins to a user who sent Ether to this contract\r\n     */\r\n    function() payable isOpen public {\r\n        uint etherAmount = msg.value;\r\n        balanceOf[msg.sender] += etherAmount;\r\n\r\n        uint beercoinAmount = (etherAmount * 10**uint(beercoin.decimals())) / price;\r\n        beercoin.transfer(msg.sender, beercoinAmount);\r\n\r\n        soldBeercoins += beercoinAmount;        \r\n        raisedEther += etherAmount;\r\n        emit FundTransfer(msg.sender, etherAmount, true);\r\n    }\r\n\r\n    /**\r\n     * Transfer Beercoins to a user who purchased via other payment methods\r\n     *\r\n     * @param to the address of the recipient\r\n     * @param beercoinAmount the amount of Beercoins to send\r\n     */\r\n    function transfer(address to, uint beercoinAmount) isOpen onlyOwner public {        \r\n        beercoin.transfer(to, beercoinAmount);\r\n\r\n        uint etherAmount = beercoinAmount * price;        \r\n        raisedEther += etherAmount;\r\n\r\n        emit FundTransfer(msg.sender, etherAmount, true);\r\n    }\r\n\r\n    /**\r\n     * Withdraw the sender's contributed Ether in case the goal has not been reached\r\n     */\r\n    function withdraw() goalNotReached public {\r\n        uint amount = balanceOf[msg.sender];\r\n        require(amount > 0);\r\n\r\n        balanceOf[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n\r\n        emit FundTransfer(msg.sender, amount, false);\r\n    }\r\n\r\n    /**\r\n     * Withdraw the contributed Ether stored in this contract\r\n     * if the funding goal has been reached.\r\n     */\r\n    function claimFunds() onlyOwner goalReached public {\r\n        uint etherAmount = address(this).balance;\r\n        owner.transfer(etherAmount);\r\n\r\n        emit FundTransfer(owner, etherAmount, false);\r\n    }\r\n\r\n    /**\r\n     * Withdraw the remaining Beercoins in this contract\r\n     */\r\n    function claimBeercoins() onlyOwner public {\r\n        uint beercoinAmount = beercoin.balanceOf(address(this));\r\n        beercoin.transfer(owner, beercoinAmount);\r\n    }\r\n\r\n    /**\r\n     * Pause the token sale\r\n     */\r\n    function pause() onlyOwner public {\r\n        paused = true;\r\n    }\r\n\r\n    /**\r\n     * Resume the token sale\r\n     */\r\n    function resume() onlyOwner public {\r\n        paused = false;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardian2Vote\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"begin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardian2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardian1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardian3Vote\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldBeercoins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"beercoinAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBeercoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardian1Vote\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardian3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"BeercoinICO","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://983c616b09f992a8c7531806735f67b86e60e1bc913c2c805648a938b27fcfb0"}]}