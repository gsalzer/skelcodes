{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract DAO {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  ERC20 public typeToken;\r\n  address public owner;\r\n  address public burnAddress = 0x0000000000000000000000000000000000000000;\r\n  uint256 public tokenDecimals;\r\n  uint256 public unburnedTypeTokens;\r\n  uint256 public weiPerWholeToken = 0.1 ether;\r\n\r\n  event LogLiquidation(address indexed _to, uint256 _typeTokenAmount, uint256 _ethAmount, uint256 _newTotalSupply);\r\n\r\n  modifier onlyOwner () {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function DAO (address _typeToken, uint256 _tokenDecimals) public {\r\n    typeToken = ERC20(_typeToken);\r\n    tokenDecimals = _tokenDecimals;\r\n    unburnedTypeTokens = typeToken.totalSupply();\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function exchangeTokens (uint256 _amount) public {\r\n    require(typeToken.transferFrom(msg.sender, address(this), _amount));\r\n    uint256 percentageOfPotToSend = _percent(_amount, unburnedTypeTokens, 8);\r\n    uint256 ethToSend = (address(this).balance.div(100000000)).mul(percentageOfPotToSend);\r\n    msg.sender.transfer(ethToSend);\r\n    _byrne(_amount);\r\n    emit LogLiquidation(msg.sender, _amount, ethToSend, unburnedTypeTokens);\r\n  }\r\n\r\n  function _byrne(uint256 _amount) internal {\r\n    require(typeToken.transfer(burnAddress, _amount));\r\n    unburnedTypeTokens = unburnedTypeTokens.sub(_amount);\r\n  }\r\n\r\n  function updateWeiPerWholeToken (uint256 _newRate) public onlyOwner {\r\n    weiPerWholeToken = _newRate;\r\n  }\r\n\r\n  function changeOwner (address _newOwner) public onlyOwner {\r\n    owner = _newOwner;\r\n  }\r\n\r\n  function _percent(uint256 numerator, uint256 denominator, uint256 precision) internal returns(uint256 quotient) {\r\n    uint256 _numerator = numerator.mul((10 ** (precision+1)));\r\n    uint256 _quotient = ((_numerator / denominator) + 5) / 10;\r\n    return ( _quotient);\r\n  }\r\n\r\n  function () public payable {}\r\n\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply() public constant returns (uint256 supply);\r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n  function approve(address _spender, uint256 _value) public returns (bool success);\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"unburnedTypeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"exchangeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiPerWholeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"typeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"updateWeiPerWholeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_typeToken\",\"type\":\"address\"},{\"name\":\"_tokenDecimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_typeTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"LogLiquidation\",\"type\":\"event\"}]","ContractName":"DAO","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ee235b5d64c636b13b12d1741c242b7048cf57fa0000000000000000000000000000000000000000000000000000000000000012","Library":"","SwarmSource":"bzzr://d01f54c0721e7fc15ba9fb3335c8f98565cae1aedcc2067d7109efba5002c31f"}]}