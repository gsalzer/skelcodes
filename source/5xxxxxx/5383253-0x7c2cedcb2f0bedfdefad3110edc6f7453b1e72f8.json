{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n// File: contracts/includes/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/includes/Claimable.sol\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    // emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n// File: contracts/includes/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/CelebsPartyGate.sol\r\n\r\ncontract CelebsPartyGate is Claimable, Pausable {\r\n  address public cfoAddress;\r\n  \r\n  function CelebsPartyGate() public {\r\n    cfoAddress = msg.sender;\r\n  }\r\n\r\n  modifier onlyCFO() {\r\n    require(msg.sender == cfoAddress);\r\n    _;\r\n  }\r\n\r\n  function setCFO(address _newCFO) external onlyOwner {\r\n    require(_newCFO != address(0));\r\n    cfoAddress = _newCFO;\r\n  }\r\n}\r\n\r\n// File: contracts/includes/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/CelebsParty.sol\r\n\r\ncontract CelebsParty is CelebsPartyGate {\r\n    using SafeMath for uint256;\r\n\r\n    event AgentHired(uint256 identifier, address player, bool queued);\r\n    event Birth(uint256 identifier, string name, address owner, bool queued);\r\n    event CategoryCreated(uint256 indexed identifier, string name);\r\n    event CelebrityBought(uint256 indexed identifier, address indexed oldOwner, address indexed newOwner, uint256 price);\r\n    event CelebrityReleased(uint256 indexed identifier, address player);\r\n    event FameAcquired(uint256 indexed identifier, address player, uint256 fame);\r\n    event PriceUpdated(uint256 indexed identifier, uint256 price);\r\n    event PrizeAwarded(address player, uint256 amount, string reason);\r\n    event UsernameUpdated(address player, string username);\r\n\r\n    struct Category {\r\n        uint256 identifier;\r\n        string name;\r\n    }\r\n\r\n    struct Celebrity {\r\n        uint256 identifier;\r\n        uint256[] categories;\r\n        string name;\r\n        uint256 price;\r\n        address owner;\r\n        bool isQueued;\r\n        uint256 lastQueueBlock;\r\n        address agent;\r\n        uint256 agentAwe;\r\n        uint256 famePerBlock;\r\n        uint256 lastFameBlock;\r\n    }\r\n\r\n    mapping(uint256 => Category) public categories;\r\n    mapping(uint256 => Celebrity) public celebrities;\r\n    mapping(address => uint256) public fameBalance;\r\n    mapping(address => string) public usernames;\r\n    \r\n    uint256 public categoryCount;\r\n    uint256 public circulatingFame;\r\n    uint256 public celebrityCount;\r\n    uint256 public devBalance;\r\n    uint256 public prizePool;\r\n\r\n    uint256 public minRequiredBlockQueueTime;\r\n\r\n    function CelebsParty() public {\r\n        _initializeGame();\r\n    }\r\n\r\n    function acquireFame(uint256 _identifier) external {\r\n        Celebrity storage celeb = celebrities[_identifier];\r\n        address player = msg.sender;\r\n        require(celeb.owner == player);\r\n        uint256 acquiredFame = SafeMath.mul((block.number - celeb.lastFameBlock), celeb.famePerBlock);\r\n        fameBalance[player] = SafeMath.add(fameBalance[player], acquiredFame);\r\n        celeb.lastFameBlock = block.number;\r\n        // increase the supply of the fame\r\n        circulatingFame = SafeMath.add(circulatingFame, acquiredFame);\r\n        FameAcquired(_identifier, player, acquiredFame);\r\n    }\r\n\r\n    function becomeAgent(uint256 _identifier, uint256 _agentAwe) public whenNotPaused {\r\n        Celebrity storage celeb = celebrities[_identifier];\r\n        address newAgent = msg.sender;\r\n        address oldAgent = celeb.agent;\r\n        uint256 currentAgentAwe = celeb.agentAwe;\r\n        // ensure current agent is not the current player\r\n        require(oldAgent != newAgent);\r\n        // ensure the player can afford to become the agent\r\n        require(fameBalance[newAgent] >= _agentAwe);\r\n        // ensure the sent fame is more than the current agent sent\r\n        require(_agentAwe > celeb.agentAwe);\r\n        // if we are pre-drop, reset timer and give some fame back to previous bidder\r\n        if (celeb.isQueued) {\r\n            // reset the queue block timer\r\n            celeb.lastQueueBlock = block.number;\r\n            // give the old agent 50% of their fame back (this is a fame burn)\r\n            if(oldAgent != address(this)) {\r\n                uint256 halfOriginalFame = SafeMath.div(currentAgentAwe, 2);\r\n                circulatingFame = SafeMath.add(circulatingFame, halfOriginalFame);\r\n                fameBalance[oldAgent] = SafeMath.add(fameBalance[oldAgent], halfOriginalFame);\r\n            }\r\n        }\r\n        // set the celebrity's agent to the current player\r\n        celeb.agent = newAgent;\r\n        // set the new min required bid\r\n        celeb.agentAwe = _agentAwe;\r\n        // deduct the sent fame amount from the current player's balance\r\n        circulatingFame = SafeMath.sub(circulatingFame, _agentAwe);\r\n        fameBalance[newAgent] = SafeMath.sub(fameBalance[newAgent], _agentAwe);\r\n        AgentHired(_identifier, newAgent, celeb.isQueued);\r\n    }\r\n\r\n    function buyCelebrity(uint256 _identifier) public payable whenNotPaused {\r\n        Celebrity storage celeb = celebrities[_identifier];\r\n        // ensure that the celebrity is on the market and not queued\r\n        require(!celeb.isQueued);\r\n        address oldOwner = celeb.owner;\r\n        uint256 salePrice = celeb.price;\r\n        address newOwner = msg.sender;\r\n        // ensure the current player is not the current owner\r\n        require(oldOwner != newOwner);\r\n        // ensure the current player can actually afford to buy the celebrity\r\n        require(msg.value >= salePrice);\r\n        address agent = celeb.agent;\r\n        // determine how much fame the celebrity has generated\r\n        uint256 generatedFame = uint256(SafeMath.mul((block.number - celeb.lastFameBlock), celeb.famePerBlock));\r\n        // 91% of the sale will go the previous owner\r\n        uint256 payment = uint256(SafeMath.div(SafeMath.mul(salePrice, 91), 100));\r\n        // 4% of the sale will go to the celebrity's agent\r\n        uint256 agentFee = uint256(SafeMath.div(SafeMath.mul(salePrice, 4), 100));\r\n        // 3% of the sale will go to the developer of the game\r\n        uint256 devFee = uint256(SafeMath.div(SafeMath.mul(salePrice, 3), 100));\r\n        // 2% of the sale will go to the prize pool\r\n        uint256 prizeFee = uint256(SafeMath.div(SafeMath.mul(salePrice, 2), 100));\r\n        // calculate any excess wei that should be refunded\r\n        uint256 purchaseExcess = SafeMath.sub(msg.value, salePrice);\r\n        if (oldOwner != address(this)) {\r\n            // only transfer the funds if the contract doesn't own the celebrity (no pre-mine)\r\n            oldOwner.transfer(payment);\r\n        } else {\r\n            // if this is the first sale, main proceeds go to the prize pool\r\n            prizePool = SafeMath.add(prizePool, payment);\r\n        }\r\n        if (agent != address(this)) {\r\n            // send the agent their cut of the sale\r\n            agent.transfer(agentFee);\r\n        }\r\n        // new owner gets half of the unacquired, generated fame on the celebrity\r\n        uint256 spoils = SafeMath.div(generatedFame, 2);\r\n        circulatingFame = SafeMath.add(circulatingFame, spoils);\r\n        fameBalance[newOwner] = SafeMath.add(fameBalance[newOwner], spoils);\r\n        // don't send the dev anything, but make a note of it\r\n        devBalance = SafeMath.add(devBalance, devFee);\r\n        // increase the prize pool balance\r\n        prizePool = SafeMath.add(prizePool, prizeFee);\r\n        // set the new owner of the celebrity\r\n        celeb.owner = newOwner;\r\n        // set the new price of the celebrity\r\n        celeb.price = _nextPrice(salePrice);\r\n        // destroy all unacquired fame by resetting the block number\r\n        celeb.lastFameBlock = block.number;\r\n        // the fame acquired per block increases by 1 every time the celebrity is purchased\r\n        // this is capped at 100 fpb\r\n        if(celeb.famePerBlock < 100) {\r\n            celeb.famePerBlock = SafeMath.add(celeb.famePerBlock, 1);\r\n        }\r\n        // let the world know the celebrity has been purchased\r\n        CelebrityBought(_identifier, oldOwner, newOwner, salePrice);\r\n        // send the new owner any excess wei\r\n        newOwner.transfer(purchaseExcess);\r\n    }\r\n\r\n    function createCategory(string _name) external onlyOwner {\r\n        _mintCategory(_name);\r\n    }\r\n\r\n    function createCelebrity(string _name, address _owner, address _agent, uint256 _agentAwe, uint256 _price, bool _queued, uint256[] _categories) public onlyOwner {\r\n        require(celebrities[celebrityCount].price == 0);\r\n        address newOwner = _owner;\r\n        address newAgent = _agent;\r\n        if (newOwner == 0x0) {\r\n            newOwner = address(this);\r\n        }\r\n        if (newAgent == 0x0) {\r\n            newAgent = address(this);\r\n        }\r\n        uint256 newIdentifier = celebrityCount;\r\n        Celebrity memory celeb = Celebrity({\r\n            identifier: newIdentifier,\r\n            owner: newOwner,\r\n            price: _price,\r\n            name: _name,\r\n            famePerBlock: 0,\r\n            lastQueueBlock: block.number,\r\n            lastFameBlock: block.number,\r\n            agent: newAgent,\r\n            agentAwe: _agentAwe,\r\n            isQueued: _queued,\r\n            categories: _categories\r\n        });\r\n        celebrities[newIdentifier] = celeb;\r\n        celebrityCount = SafeMath.add(celebrityCount, 1);\r\n        Birth(newIdentifier, _name, _owner, _queued);\r\n    }\r\n    \r\n    function getCelebrity(uint256 _identifier) external view returns\r\n    (uint256 id, string name, uint256 price, uint256 nextPrice, address agent, uint256 agentAwe, address owner, uint256 fame, uint256 lastFameBlock, uint256[] cats, bool queued, uint256 lastQueueBlock)\r\n    {\r\n        Celebrity storage celeb = celebrities[_identifier];\r\n        id = celeb.identifier;\r\n        name = celeb.name;\r\n        owner = celeb.owner;\r\n        agent = celeb.agent;\r\n        price = celeb.price;\r\n        fame = celeb.famePerBlock;\r\n        lastFameBlock = celeb.lastFameBlock;\r\n        nextPrice = _nextPrice(price);\r\n        cats = celeb.categories;\r\n        agentAwe = celeb.agentAwe;\r\n        queued = celeb.isQueued;\r\n        lastQueueBlock = celeb.lastQueueBlock;\r\n    }\r\n\r\n    function getFameBalance(address _player) external view returns(uint256) {\r\n        return fameBalance[_player];\r\n    }\r\n\r\n    function getUsername(address _player) external view returns(string) {\r\n        return usernames[_player];\r\n    }\r\n\r\n    function releaseCelebrity(uint256 _identifier) public whenNotPaused {\r\n        Celebrity storage celeb = celebrities[_identifier];\r\n        address player = msg.sender;\r\n        // ensure that enough blocks have been mined (no one has bid within this time period)\r\n        require(block.number - celeb.lastQueueBlock >= minRequiredBlockQueueTime);\r\n        // ensure the celebrity isn't already released!\r\n        require(celeb.isQueued);\r\n        // ensure current agent is the current player\r\n        require(celeb.agent == player);\r\n        // celebrity is no longer queued and can be displayed on the market\r\n        celeb.isQueued = false;\r\n        CelebrityReleased(_identifier, player);\r\n    }\r\n\r\n    function setCelebrityPrice(uint256 _identifier, uint256 _price) public whenNotPaused {\r\n        Celebrity storage celeb = celebrities[_identifier];\r\n        // ensure the current player is the owner of the celebrity\r\n        require(msg.sender == celeb.owner);\r\n        // the player can only set a price that is lower than the current asking price\r\n        require(_price < celeb.price);\r\n        // set the new price \r\n        celeb.price = _price;\r\n        PriceUpdated(_identifier, _price);\r\n    }\r\n\r\n    function setRequiredBlockQueueTime(uint256 _blocks) external onlyOwner {\r\n        minRequiredBlockQueueTime = _blocks;\r\n    }\r\n\r\n    function setUsername(address _player, string _username) public {\r\n        // ensure the player to be changed is the current player\r\n        require(_player == msg.sender);\r\n        // set the username\r\n        usernames[_player] = _username;\r\n        UsernameUpdated(_player, _username);\r\n    }\r\n\r\n    function sendPrize(address _player, uint256 _amount, string _reason) external onlyOwner {\r\n        uint256 newPrizePoolAmount = prizePool - _amount;\r\n        require(prizePool >= _amount);\r\n        require(newPrizePoolAmount >= 0);\r\n        prizePool = newPrizePoolAmount;\r\n        _player.transfer(_amount);\r\n        PrizeAwarded(_player, _amount, _reason);\r\n    }\r\n\r\n    function withdrawDevBalance() external onlyOwner {\r\n        require(devBalance > 0);\r\n        uint256 withdrawAmount = devBalance;\r\n        devBalance = 0;\r\n        owner.transfer(withdrawAmount);\r\n    }\r\n\r\n    /**************************\r\n        internal funcs\r\n    ***************************/\r\n\r\n    function _nextPrice(uint256 currentPrice) internal pure returns(uint256) {\r\n        if (currentPrice < .1 ether) {\r\n            return currentPrice.mul(200).div(100);\r\n        } else if (currentPrice < 1 ether) {\r\n            return currentPrice.mul(150).div(100);\r\n        } else if (currentPrice < 10 ether) {\r\n            return currentPrice.mul(130).div(100);\r\n        } else {\r\n            return currentPrice.mul(120).div(100);\r\n        }\r\n    }\r\n\r\n    function _mintCategory(string _name) internal {\r\n        uint256 newIdentifier = categoryCount;\r\n        categories[newIdentifier] = Category(newIdentifier, _name);\r\n        CategoryCreated(newIdentifier, _name);\r\n        categoryCount = SafeMath.add(categoryCount, 1);\r\n    }\r\n\r\n    function _initializeGame() internal {\r\n        categoryCount = 0;\r\n        celebrityCount = 0;\r\n        minRequiredBlockQueueTime = 1000;\r\n        paused = true;\r\n        _mintCategory(\"business\");\r\n        _mintCategory(\"film/tv\");\r\n        _mintCategory(\"music\");\r\n        _mintCategory(\"personality\");\r\n        _mintCategory(\"tech\");\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"sendPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"uint256\"},{\"name\":\"_agentAwe\",\"type\":\"uint256\"}],\"name\":\"becomeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"celebrities\",\"outputs\":[{\"name\":\"identifier\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"isQueued\",\"type\":\"bool\"},{\"name\":\"lastQueueBlock\",\"type\":\"uint256\"},{\"name\":\"agent\",\"type\":\"address\"},{\"name\":\"agentAwe\",\"type\":\"uint256\"},{\"name\":\"famePerBlock\",\"type\":\"uint256\"},{\"name\":\"lastFameBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"setRequiredBlockQueueTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"uint256\"}],\"name\":\"buyCelebrity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"uint256\"}],\"name\":\"getCelebrity\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"nextPrice\",\"type\":\"uint256\"},{\"name\":\"agent\",\"type\":\"address\"},{\"name\":\"agentAwe\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"fame\",\"type\":\"uint256\"},{\"name\":\"lastFameBlock\",\"type\":\"uint256\"},{\"name\":\"cats\",\"type\":\"uint256[]\"},{\"name\":\"queued\",\"type\":\"bool\"},{\"name\":\"lastQueueBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"categoryCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_agent\",\"type\":\"address\"},{\"name\":\"_agentAwe\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_queued\",\"type\":\"bool\"},{\"name\":\"_categories\",\"type\":\"uint256[]\"}],\"name\":\"createCelebrity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulatingFame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"uint256\"}],\"name\":\"releaseCelebrity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fameBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getFameBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"categories\",\"outputs\":[{\"name\":\"identifier\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getUsername\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"uint256\"}],\"name\":\"acquireFame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setCelebrityPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createCategory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"setUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"usernames\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"celebrityCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDevBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minRequiredBlockQueueTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"identifier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"queued\",\"type\":\"bool\"}],\"name\":\"AgentHired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"identifier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"queued\",\"type\":\"bool\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identifier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"CategoryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identifier\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"CelebrityBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identifier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"}],\"name\":\"CelebrityReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identifier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fame\",\"type\":\"uint256\"}],\"name\":\"FameAcquired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"identifier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"PrizeAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"username\",\"type\":\"string\"}],\"name\":\"UsernameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CelebsParty","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0e918f34474840e46f860a7b21b49a449477826afc6539fdb3ae29a34020ecb0"}]}