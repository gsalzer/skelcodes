{"status":"1","message":"OK","result":[{"SourceCode":"//File: contracts/common/Controlled.sol\r\npragma solidity ^0.4.21;\r\n\r\ncontract Controlled {\r\n    modifier onlyController { require(msg.sender == controller); _; }\r\n\r\n    address public controller;\r\n\r\n    function Controlled() public { controller = msg.sender;}\r\n\r\n    function changeController(address _newController) public onlyController {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\n//File: contracts/common/TokenController.sol\r\npragma solidity ^0.4.21;\r\n\r\ncontract TokenController {\r\n    function proxyPayment(address _owner) public payable returns(bool);\r\n\r\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\r\n\r\n    function onApprove(address _owner, address _spender, uint _amount) public returns(bool);\r\n}\r\n\r\n//File: contracts/common/ApproveAndCallFallBack.sol\r\npragma solidity ^0.4.21;\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\r\n}\r\n\r\n//File: contracts/Token.sol\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Token is Controlled {\r\n\r\n    string public name = \"ShineCoin\";\r\n    uint8 public decimals = 9;\r\n    string public symbol = \"SHINE\";\r\n\r\n    struct  Checkpoint {\r\n        uint128 fromBlock;\r\n        uint128 value;\r\n    }\r\n\r\n    uint public creationBlock;\r\n\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    bool public transfersEnabled = true;\r\n\r\n    address public frozenReserveTeamWallet;\r\n\r\n    uint public unfreezeTeamWalletBlock;\r\n\r\n    function Token(address _frozenReserveTeamWallet) public {\r\n        creationBlock = block.number;\r\n        frozenReserveTeamWallet = _frozenReserveTeamWallet;\r\n        unfreezeTeamWalletBlock = block.number + ((365 * 24 * 3600) / 15); // ~ 396 days\r\n    }\r\n\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        if (address(msg.sender) == frozenReserveTeamWallet) {\r\n            require(block.number > unfreezeTeamWalletBlock);\r\n        }\r\n\r\n        doTransfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n        if (msg.sender != controller) {\r\n            require(transfersEnabled);\r\n\r\n            require(allowed[_from][msg.sender] >= _amount);\r\n            allowed[_from][msg.sender] -= _amount;\r\n        }\r\n        doTransfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function doTransfer(address _from, address _to, uint _amount) internal {\r\n\r\n           if (_amount <= 0) {\r\n               emit Transfer(_from, _to, _amount);\r\n               return;\r\n           }\r\n\r\n           require((_to != 0) && (_to != address(this)));\r\n\r\n           uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\r\n\r\n           require(previousBalanceFrom >= _amount);\r\n\r\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n\r\n           uint256 previousBalanceTo = balanceOfAt(_to, block.number);\r\n           require(previousBalanceTo + _amount >= previousBalanceTo);\r\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n\r\n           emit Transfer(_from, _to, _amount);\r\n\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        if (isContract(controller)) {\r\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\r\n    ) public returns (bool success) {\r\n        require(approve(_spender, _amount));\r\n\r\n        ApproveAndCallFallBack(_spender).receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            this,\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\r\n\r\n        if ((balances[_owner].length == 0)\r\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            return 0;\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\r\n\r\n        if ((totalSupplyHistory.length == 0)\r\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            return 0;\r\n\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n    function generateTokens(address _owner, uint _amount) public onlyController returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint previousBalanceTo = balanceOf(_owner);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        emit Transfer(0, _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n    function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint previousBalanceFrom = balanceOf(_owner);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        emit Transfer(_owner, 0, _amount);\r\n        return true;\r\n    }\r\n\r\n    function enableTransfers(bool _transfersEnabled) public onlyController {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {\r\n        if (checkpoints.length == 0) return 0;\r\n\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock) return 0;\r\n\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1)/ 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal  {\r\n        if ((checkpoints.length == 0)\r\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\r\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\r\n               newCheckPoint.fromBlock =  uint128(block.number);\r\n               newCheckPoint.value = uint128(_value);\r\n           } else {\r\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n               oldCheckPoint.value = uint128(_value);\r\n           }\r\n    }\r\n\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint size;\r\n        if (_addr == 0) return false;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size>0;\r\n    }\r\n\r\n    function min(uint a, uint b) pure internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function () public payable {\r\n        require(isContract(controller));\r\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n}\r\n//File: ./contracts/PreCrowdFunder.sol\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n\r\ncontract PreCrowdFunder is Controlled {\r\n    address public creator;\r\n    address public fundRecipient;\r\n    uint public currentBalance;\r\n    uint public tokensIssued;\r\n    uint public capTokenAmount;\r\n    uint public tokenExchangeRate;\r\n    Token public exchangeToken;\r\n    enum State {\r\n        Wait,\r\n        Fundraising,\r\n        Successful,\r\n        Closed\r\n    }\r\n    State public state = State.Wait;\r\n\r\n    // Events\r\n    event GoalReached(address fundRecipient, uint amountRaised);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n    event FrozenFunds(address target, bool frozen);\r\n    event LogFundingReceived(address addr, uint amount, uint currentTotal);\r\n\r\n    // Maps\r\n    mapping (address => uint256) private balanceOf;\r\n    mapping (address => bool) private frozenAccount;\r\n\r\n    // Modifiers\r\n    modifier inState(State _state) {\r\n        require(state == _state);\r\n        _;\r\n    }\r\n    modifier accountNotFrozen() {\r\n        require(!(frozenAccount[msg.sender] == true));\r\n        _;\r\n    }\r\n    modifier minInvestment() {\r\n        // User has to send at least 0.01 Eth\r\n        require(msg.value >= 10 ** 16);\r\n        _;\r\n    }\r\n\r\n    // Constructor\r\n    function PreCrowdFunder(address _fundRecipient, Token _addressOfExchangeToken) public {\r\n        creator = msg.sender;\r\n        fundRecipient = _fundRecipient;\r\n        capTokenAmount = 10000000 * 10 ** 9;\r\n        state = State.Wait;\r\n        currentBalance = 0;\r\n        tokensIssued = 0;\r\n        tokenExchangeRate = 1000 * 10 ** 9;\r\n        exchangeToken = Token(_addressOfExchangeToken);\r\n    }\r\n\r\n    function startFundraising() public inState(State.Wait) onlyController {\r\n        state = State.Fundraising;\r\n        tokensIssued = exchangeToken.totalSupply();\r\n    }\r\n\r\n    function endFundraising() public onlyController {\r\n        require(state == State.Fundraising || state == State.Successful);\r\n        fundRecipient.transfer(currentBalance);\r\n        currentBalance = 0;\r\n        state = State.Closed;\r\n        exchangeToken.changeController(controller);\r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze) public onlyController {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n    function getExchangeRate(uint amount) public constant returns (uint) {\r\n        return tokenExchangeRate * amount / 1 ether;\r\n    }\r\n\r\n    function investment() public inState(State.Fundraising) accountNotFrozen minInvestment payable returns (uint)  {\r\n        uint amount = msg.value;\r\n\r\n        balanceOf[msg.sender] += amount;\r\n        currentBalance += amount;\r\n\r\n        uint tokenAmount = getExchangeRate(amount);\r\n        exchangeToken.generateTokens(msg.sender, tokenAmount);\r\n        tokensIssued += tokenAmount;\r\n\r\n        emit FundTransfer(msg.sender, amount, true);\r\n        emit LogFundingReceived(msg.sender, tokenAmount, tokensIssued);\r\n\r\n        if (tokensIssued >= capTokenAmount) {\r\n            state = State.Successful;\r\n            emit GoalReached(fundRecipient, currentBalance);\r\n        }\r\n\r\n        return balanceOf[msg.sender];\r\n    }\r\n\r\n    function removeContract() public inState(State.Closed) onlyController {\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n    function() inState(State.Fundraising) public accountNotFrozen minInvestment payable {\r\n        investment();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"investment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endFundraising\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensIssued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startFundraising\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fundRecipient\",\"type\":\"address\"},{\"name\":\"_addressOfExchangeToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fundRecipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"}]","ContractName":"PreCrowdFunder","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006db9b85b37ba0df497684a45d6352261a065f192000000000000000000000000b7ca96345f44e8b6c5b18c94dedb742803a20809","Library":"","SwarmSource":"bzzr://88eaa61162c05478276b9472e0ca86fe3a357237f6ccd50bf53e74bb6869c74a"}]}