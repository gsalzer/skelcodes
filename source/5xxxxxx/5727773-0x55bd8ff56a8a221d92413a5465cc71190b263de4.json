{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ReferContractInterface {\r\n    function decrement(address _who) public;\r\n    function mint(address _to, uint _value) public;\r\n    function getBalance(address _who) public view returns(uint);\r\n}\r\n\r\ncontract ReferConstants {\r\n    uint public constant FIRST_USER_CUT = 40;\r\n    uint public constant SECOND_USER_CUT = 25;\r\n    uint public constant THIRD_USER_CUT = 15;\r\n    uint public constant FOURTH_USER_CUT = 10;\r\n    uint public constant OWNER_CUT = 10;\r\n    event Bought(address user, address directParent, address indirectParent, uint money, uint tokens, uint level);\r\n    event LevelUpdated(address user, uint money, uint level);\r\n    \r\n    using SafeMath for uint;\r\n}\r\n\r\ncontract ReferContract is ReferConstants, Ownable {\r\n    ReferContractInterface referContractInterface;\r\n    uint public baseRate;\r\n    \r\n    mapping (address => uint) public etherBalance;\r\n    mapping (address => address) public userReferrer;\r\n    mapping (address => uint8) public userLevel;\r\n    mapping (address => uint) public tokensBought;\r\n    \r\n    constructor(address _tokenAddress) public {\r\n        referContractInterface = ReferContractInterface(_tokenAddress);\r\n        baseRate = 3000000000000000;\r\n        // to be consistent with game\r\n        userReferrer[owner] = owner;\r\n        userLevel[owner] = 4;\r\n    }\r\n    \r\n     // Update only if contract is not getting traction or got more\r\n     // traction that initially thought.\r\n     // increase the price if there is huge traffic to compensate more people\r\n     // decrease the price if there is less traffic to attract more users.\r\n    function updateRate(uint _newRate) onlyOwner public {\r\n        require(baseRate != 0);\r\n        // rate shouldn't be less than half or more than twice.\r\n        require(_newRate.mul(2) > baseRate && baseRate.mul(2) > _newRate);\r\n        baseRate = _newRate;\r\n    }\r\n    \r\n    function getRate(uint level) public view returns (uint) {\r\n        if (level == 4) {\r\n            return baseRate.mul(6);\r\n        } else if (level == 3) {\r\n            return baseRate.mul(5);\r\n        } else if (level == 2) {\r\n            return baseRate.mul(3);\r\n        } else if (level == 1) {\r\n            return baseRate.mul(2);\r\n        } else {\r\n            return baseRate.mul(6);\r\n        } \r\n    }\r\n    \r\n    function fundAccount(address ref, uint eth, uint level) internal {\r\n        if (ref != address(0x0) && userLevel[ref] >= level) {\r\n            etherBalance[ref] += eth;\r\n        } else {\r\n            etherBalance[owner] += eth;\r\n        }\r\n    }\r\n    \r\n    function distributeMoney(address ref, address parent1, uint money) internal {\r\n        // since we are calculating percentage which will be \r\n        // (money * x)/100\r\n        money = money.div(100);\r\n        \r\n        fundAccount(ref, money.mul(FIRST_USER_CUT), 1);\r\n        fundAccount(parent1, money.mul(SECOND_USER_CUT), 2);\r\n        fundAccount(userReferrer[parent1], money.mul(THIRD_USER_CUT), 3);\r\n        fundAccount(userReferrer[userReferrer[parent1]], money.mul(FOURTH_USER_CUT), 4);\r\n        fundAccount(owner, money.mul(OWNER_CUT), 0);\r\n    }\r\n    \r\n    function buyReferTokens(address ref, uint8 level) payable public {\r\n        require(level > 0 && level < 5);\r\n        \r\n        if (userLevel[msg.sender] == 0) { // new user\r\n            userLevel[msg.sender] = level;\r\n            if (getTokenBalance(ref) < 1) {  // The referee doesn't have a token \r\n                ref = owner; // change referee\r\n            }\r\n            userReferrer[msg.sender] = ref; // permanently set owner as the referrer\r\n            referContractInterface.decrement(userReferrer[msg.sender]);\r\n        } else { // old user\r\n            require(userLevel[msg.sender] == level);\r\n            if (getTokenBalance(userReferrer[msg.sender]) < 1) { // The referee doesn't have a token\r\n                ref = owner; // only change the parent but don't change gradparents\r\n            } else {\r\n                ref = userReferrer[msg.sender];\r\n            }\r\n            referContractInterface.decrement(ref);\r\n        }\r\n        \r\n        uint tokens = msg.value.div(getRate(level));\r\n        require(tokens >= 5);\r\n        referContractInterface.mint(msg.sender, tokens);\r\n        distributeMoney(ref, userReferrer[userReferrer[msg.sender]] , msg.value);\r\n        tokensBought[msg.sender] += tokens;\r\n        emit Bought(msg.sender, ref, userReferrer[userReferrer[msg.sender]], msg.value, tokens, level);\r\n    }\r\n    \r\n    function upgradeLevel(uint8 level) payable public {\r\n        require(level <= 4);\r\n        require(userLevel[msg.sender] != 0 && userLevel[msg.sender] < level);\r\n        uint rateDiff = getRate(level).sub(getRate(userLevel[msg.sender]));\r\n        uint toBePaid = rateDiff.mul(tokensBought[msg.sender]);\r\n        require(msg.value >= toBePaid);\r\n        userLevel[msg.sender] = level;\r\n        distributeMoney(userReferrer[msg.sender], userReferrer[userReferrer[msg.sender]] , msg.value);\r\n        emit LevelUpdated(msg.sender, msg.value, level);\r\n    }\r\n    \r\n    function getAmountToUpdate(uint8 level) view public returns (uint) {\r\n        uint rate = getRate(level).mul(tokensBought[msg.sender]);\r\n        uint ratePaid = getRate(userLevel[msg.sender]).mul(tokensBought[msg.sender]);\r\n        return rate.sub(ratePaid);\r\n    }\r\n    \r\n    function withdraw() public {\r\n        uint amount = etherBalance[msg.sender];\r\n        etherBalance[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n    }\r\n    \r\n    function getTokenBalance(address _who) public view returns(uint) {\r\n        return referContractInterface.getBalance(_who);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyReferTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECOND_USER_CUT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"upgradeLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_CUT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOURTH_USER_CUT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"THIRD_USER_CUT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"etherBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FIRST_USER_CUT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"getAmountToUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"directParent\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"indirectParent\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"LevelUpdated\",\"type\":\"event\"}]","ContractName":"ReferContract","CompilerVersion":"v0.4.25-nightly.2018.6.3+commit.ef8fb63b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000032698ed8f0eb200f84bbb7879e0f2fd5fa73dd56","Library":"","SwarmSource":"bzzr://673ce1fae2614f94c12ba39a0744e6ad8563b8ef8e41be168bcf2f701a564258"}]}