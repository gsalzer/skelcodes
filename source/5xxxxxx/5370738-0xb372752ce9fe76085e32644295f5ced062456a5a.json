{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract LotteryRecharge\r\n{\r\n    address private contractAddress;\r\n    uint256 public nPlatCurTotalEth;            // calculate all Recharges to contractAddress, unit wei\r\n    uint256 public constant nCanOpenRewardMinEth = 10 ether;\r\n    uint256 private constant leastRecharge = 0.1 ether;          // 100000000000000000 wei\r\n    uint256 private constant OpenRewardClockSeconds = 1*3600;    // no permit greater than 24 * 3600\r\n    uint256 private constant MaxClockSeconds = 24*3600;          // means 24*3600\r\n    uint256 private constant MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n    \r\n    address public constant OfficialWalletAddr = 0x12961096767E28fFEB63180B83e946F45D16c4f8;\r\n    \r\n    // find player recharge at this contract, key=address,value=uint256\r\n    mapping(address => uint256) private mapSenderAddr2Recharge;\r\n    address[]  private ArrayAddress;\r\n    uint256 public LatestRechargeTime;\r\n\r\n    // contract construct function\r\n    function LotteryRecharge() public\r\n    {\r\n        contractAddress = this;\r\n    }\r\n\r\n    function () public payable\r\n    {\r\n        transfer(contractAddress, msg.value);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) private returns (bool bTranferSuccess)\r\n    {\r\n        require( _to != address(0) && (_to == contractAddress) && (_value >= leastRecharge));\r\n        uint256 nRetFlag = CheckTime(OpenRewardClockSeconds);\r\n        \r\n        require(nRetFlag != 1);     //1 means can not open reward and recharge\r\n        if( (nRetFlag == 2 ) && (IsCanAllotAward() == true)) \r\n        {\r\n            // open reward time\r\n            AllotAward();\r\n        }\r\n        return transferToContractAddr(_to, _value);\r\n    }\r\n\r\n    event TransferToContractAddrEvent(address _from, address _to, uint256 nValue, bytes _dataRet);\r\n    function transferToContractAddr(address _to, uint256 _value) private returns (bool success)\r\n    {\r\n        require(_to != address(0) );\r\n        require(mapSenderAddr2Recharge[msg.sender] <= MAX_UINT256 - _value);\r\n        if(mapSenderAddr2Recharge[msg.sender] == 0)\r\n        {\r\n            ArrayAddress.push(msg.sender);\r\n        }\r\n\r\n        bytes memory empty;\r\n        mapSenderAddr2Recharge[msg.sender] += _value;\r\n        nPlatCurTotalEth += _value;\r\n        LatestRechargeTime = now;\r\n        TransferToContractAddrEvent(msg.sender, _to, _value, empty);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance)\r\n    {\r\n        require(_owner != address(0) );\r\n        return mapSenderAddr2Recharge[_owner];\r\n    }\r\n\r\n    function IsCanAllotAward() private constant returns(bool CanAllotAward)\r\n    {\r\n        if (nPlatCurTotalEth >= nCanOpenRewardMinEth)\r\n        {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    event AllotAwardEvent(bool AllotAwardSuccess);\r\n    function AllotAward() private returns(bool AllotAwardSuccess)\r\n    {\r\n        require(nPlatCurTotalEth >= nCanOpenRewardMinEth);\r\n        bytes32 byteHashValue = block.blockhash(block.number-1);\r\n        uint256 nIntHash = uint256(byteHashValue);\r\n        uint256 nRandomValue= (nIntHash + now) % (nPlatCurTotalEth);\r\n\r\n        uint256 nSum = 0;\r\n        for(uint256 i = 0; i < ArrayAddress.length; i++)\r\n        {\r\n            if( nSum <= nRandomValue && nRandomValue < nSum + mapSenderAddr2Recharge[ArrayAddress[i]] )\r\n            {\r\n                uint256 nOfficalGetEth = nPlatCurTotalEth/10;\r\n                uint256 nParticipantGetEth = nPlatCurTotalEth - nOfficalGetEth;\r\n\r\n                OfficialWalletAddr.transfer(nOfficalGetEth);\r\n                ArrayAddress[i].transfer(nParticipantGetEth);\r\n\r\n                for(uint256 j = 0; j < ArrayAddress.length; j++)\r\n                {   //clear mapping\r\n                    mapSenderAddr2Recharge[ArrayAddress[j] ]= 0;\r\n                }\r\n                LatestRechargeTime = 0;\r\n                nPlatCurTotalEth = 0;\r\n                ArrayAddress.length = 0;\r\n                AllotAwardEvent(true);\r\n                return true;\r\n            }\r\n            nSum += mapSenderAddr2Recharge[ArrayAddress[i]];\r\n        }\r\n    }\r\n\r\n    function CheckTime(uint256 startTimeSeconds) private constant returns(uint256 nFlag)\r\n    {\r\n        if( LatestRechargeTime != 0 && (now % MaxClockSeconds > OpenRewardClockSeconds || (LatestRechargeTime + (MaxClockSeconds-OpenRewardClockSeconds) + 300 <= now)) )\r\n        {\r\n            //open reward time\r\n            return 2;\r\n        }\r\n        else if ( (startTimeSeconds <= (now % MaxClockSeconds + 300) ) && (now % MaxClockSeconds <= startTimeSeconds ) )\r\n        {\r\n            //no permit recharge\r\n            return 1;\r\n        }\r\n        //recharge time\r\n        return 3;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"nCanOpenRewardMinEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nPlatCurTotalEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OfficialWalletAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LatestRechargeTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_dataRet\",\"type\":\"bytes\"}],\"name\":\"TransferToContractAddrEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"AllotAwardSuccess\",\"type\":\"bool\"}],\"name\":\"AllotAwardEvent\",\"type\":\"event\"}]","ContractName":"LotteryRecharge","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0566ca3653a998549a10db09490499189e3d9a7a00f2449b59f25ef772425959"}]}