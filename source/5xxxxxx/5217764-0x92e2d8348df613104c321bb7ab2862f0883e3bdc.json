{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\ncontract CryptoNumismat \r\n{\r\n    address owner;\r\n\r\n    string public standard = 'CryptoNumismat';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    struct Buy \r\n    {\r\n        uint cardIndex;\r\n        address seller;\r\n        uint minValue;  // in wei\r\n    }\r\n\r\n    mapping (uint => Buy) public cardsForSale;\r\n    mapping (address => bool) public admins;\r\n\r\n    event Assign(uint indexed _cardIndex, address indexed _seller, uint256 _value);\r\n    event Transfer(address indexed _from, address indexed _to, uint _cardIndex, uint256 _value);\r\n    \r\n    function CryptoNumismat() public payable \r\n    {\r\n        owner = msg.sender;\r\n        admins[owner] = true;\r\n        \r\n        totalSupply = 1000;                         // Update total supply\r\n        name = \"cryptonumismat\";                    // Set the name for display purposes\r\n        symbol = \"$\";                               // Set the symbol for display purposes\r\n        decimals = 0;                               // Amount of decimals for display purposes\r\n    }\r\n    \r\n    modifier onlyOwner() \r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAdmins() \r\n    {\r\n        require(admins[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    function setOwner(address _owner) onlyOwner() public \r\n    {\r\n        owner = _owner;\r\n    }\r\n    \r\n    function addAdmin(address _admin) onlyOwner() public\r\n    {\r\n        admins[_admin] = true;\r\n    }\r\n    \r\n    function removeAdmin(address _admin) onlyOwner() public\r\n    {\r\n        delete admins[_admin];\r\n    }\r\n    \r\n    function withdrawAll() onlyOwner() public \r\n    {\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    function withdrawAmount(uint256 _amount) onlyOwner() public \r\n    {\r\n        require(_amount <= this.balance);\r\n        \r\n        owner.transfer(_amount);\r\n    }\r\n\r\n    function addCard(uint _cardIndex, uint256 _value) public onlyAdmins()\r\n    {\r\n        require(_cardIndex <= 1000);\r\n        require(_cardIndex > 0);\r\n        \r\n        require(cardsForSale[_cardIndex].cardIndex != _cardIndex);\r\n        \r\n        address seller = msg.sender;\r\n        uint256 _value2 = (_value * 1000000000);\r\n        \r\n        cardsForSale[_cardIndex] = Buy(_cardIndex, seller, _value2);\r\n        Assign(_cardIndex, seller, _value2);\r\n    }\r\n    \r\n    function displayCard(uint _cardIndex) public constant returns(uint, address, uint256) \r\n    {\r\n        require(_cardIndex <= 1000);\r\n        require(_cardIndex > 0);\r\n        \r\n        require (cardsForSale[_cardIndex].cardIndex == _cardIndex);\r\n            \r\n        return(cardsForSale[_cardIndex].cardIndex, \r\n        cardsForSale[_cardIndex].seller,\r\n        cardsForSale[_cardIndex].minValue);\r\n    }\r\n    \r\n    \r\n    uint256 private limit1 = 0.05 ether;\r\n    uint256 private limit2 = 0.5 ether;\r\n    uint256 private limit3 = 5 ether;\r\n    uint256 private limit4 = 50 ether;\r\n    \r\n    function calculateNextPrice(uint256 _startPrice) public constant returns (uint256 _finalPrice)\r\n    {\r\n        if (_startPrice < limit1)\r\n            return _startPrice * 10 / 4;\r\n        else if (_startPrice < limit2)\r\n            return _startPrice * 10 / 5;\r\n        else if (_startPrice < limit3)\r\n            return _startPrice * 10 / 6;\r\n        else if (_startPrice < limit4)\r\n            return _startPrice * 10 / 7;\r\n        else\r\n            return _startPrice * 10 / 8;\r\n    }\r\n    \r\n    function calculateDevCut(uint256 _startPrice) public constant returns (uint256 _cut)\r\n    {\r\n        if (_startPrice < limit2)\r\n            return _startPrice * 5 / 100;\r\n        else if (_startPrice < limit3)\r\n            return _startPrice * 4 / 100;\r\n        else if (_startPrice < limit4)\r\n            return _startPrice * 3 / 100;\r\n        else\r\n            return _startPrice * 2 / 100;\r\n    }\r\n    \r\n    function buy(uint _cardIndex) public payable\r\n    {\r\n        require(_cardIndex <= 1000);\r\n        require(_cardIndex > 0);\r\n        require(cardsForSale[_cardIndex].cardIndex == _cardIndex);\r\n        require(cardsForSale[_cardIndex].seller != msg.sender);\r\n        require(msg.sender != address(0));\r\n        require(msg.sender != owner);\r\n        require(cardsForSale[_cardIndex].minValue > 0);\r\n        require(msg.value >= cardsForSale[_cardIndex].minValue);\r\n        \r\n        address _buyer = msg.sender;\r\n        address _seller = cardsForSale[_cardIndex].seller;\r\n        uint256 _price = cardsForSale[_cardIndex].minValue;\r\n        uint256 _nextPrice = calculateNextPrice(_price);\r\n        uint256 _totalPrice = _price - calculateDevCut(_price);\r\n        uint256 _extra = msg.value - _price;\r\n        \r\n        cardsForSale[_cardIndex].seller = _buyer;\r\n        cardsForSale[_cardIndex].minValue = _nextPrice;\r\n        \r\n        Transfer(_buyer, _seller, _cardIndex, _totalPrice);\r\n        Assign(_cardIndex, _buyer, _nextPrice);////////////////////////////////\r\n        \r\n        _seller.transfer(_totalPrice);\r\n        \r\n        if (_extra > 0)\r\n        {\r\n            Transfer(_buyer, _buyer, _cardIndex, _extra);\r\n            \r\n            _buyer.transfer(_extra);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_startPrice\",\"type\":\"uint256\"}],\"name\":\"calculateDevCut\",\"outputs\":[{\"name\":\"_cut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardsForSale\",\"outputs\":[{\"name\":\"cardIndex\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"minValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardIndex\",\"type\":\"uint256\"}],\"name\":\"displayCard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardIndex\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_startPrice\",\"type\":\"uint256\"}],\"name\":\"calculateNextPrice\",\"outputs\":[{\"name\":\"_finalPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardIndex\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cardIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Assign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_cardIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CryptoNumismat","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0e839bc25ccde633cfb528b9a50461eafeb448b0ac1d848457d0b672d25aaa12"}]}