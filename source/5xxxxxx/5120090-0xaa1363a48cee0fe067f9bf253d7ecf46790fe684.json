{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract token {\r\n    string public standard = 'https://www.tntoo.com';\r\n    string public name = 'Transaction Network';\r\n    string public symbol = 'TNTOO';\r\n    uint8 public decimals = 18;\r\n    uint public totalSupply = 0;\r\n\r\n    mapping (address => uint) public balanceOf;\r\n    mapping (address => mapping (address => uint)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);  \r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract TNTOO is owned, token {\r\n    uint public allEther;\r\n    uint public ratio = 10000;\r\n    uint public ratioUpdateTime = now;\r\n    uint public windowPeriod = now + 180 days;\r\n    bool public windowPeriodEnd;\r\n    address[] public investors;\r\n    uint _seed = now;\r\n\r\n    struct Good {\r\n        bytes32 preset;\r\n        uint price;\r\n        uint time;\r\n        address seller;\r\n    }\r\n\r\n    mapping (bytes32 => Good) public goods;\r\n    // withdraw quota\r\n    mapping (address => uint) public quotaOf; \r\n    // trade decision result\r\n    mapping (bytes32 => address) public decisionOf; \r\n\r\n    event WindowPeriodClosed(address target, uint time);\r\n    event Decision(uint result, address finalAddress, address[] buyers, uint[] amounts);\r\n    event Withdraw(address from, address target, uint ethAmount, uint amount, uint fee);\r\n\r\n    function _random (uint _upper) internal returns (uint randomNumber) {\r\n        _seed = uint(keccak256(keccak256(block.blockhash(block.number), _seed), now));\r\n        return _seed % _upper;\r\n    }\r\n\r\n    function _stringToBytes32(string memory _source) internal pure returns (bytes32 result) {\r\n        bytes memory tempEmptyStringTest = bytes(_source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n        assembly {\r\n            result := mload(add(_source, 32))\r\n        }\r\n    }\r\n\r\n    // get decision result address\r\n    function _getFinalAddress(uint[] _amounts, address[] _buyers, uint result) internal pure returns (address finalAddress) {\r\n        uint congest = 0;\r\n        address _finalAddress = 0x0;\r\n        for (uint j = 0; j < _amounts.length; j++) {\r\n            congest += _amounts[j];\r\n            if (result <= congest && _finalAddress == 0x0) {\r\n                _finalAddress = _buyers[j];\r\n            }\r\n        }\r\n        return _finalAddress;\r\n    }\r\n\r\n    // try to update ratio,  15 days limit\r\n    function _checkRatio() internal {\r\n        if (ratioUpdateTime <= now - 15 days && allEther != 0) {\r\n            ratioUpdateTime = now;\r\n            ratio = uint(totalSupply / allEther);\r\n        }\r\n    }\r\n\r\n    // 500ETH investors, everyone 5%\r\n    function _shareOut(uint feeAmount) internal {\r\n        uint shareAmount;\r\n        address investor;\r\n        for (uint k = 0; k < investors.length; k++) {\r\n            shareAmount = feeAmount * 5 / 100;\r\n            investor = investors[k];\r\n            balanceOf[investor] += shareAmount;\r\n            quotaOf[investor] += shareAmount;\r\n            balanceOf[owner] -= shareAmount;\r\n            quotaOf[owner] -= shareAmount;\r\n        }\r\n    }\r\n\r\n    // try to close window period\r\n    function _checkWindowPeriod() internal {\r\n        if (now >= windowPeriod) {\r\n            windowPeriodEnd = true;\r\n            WindowPeriodClosed(msg.sender, now);\r\n        }\r\n    }\r\n\r\n    // mall application delegate transfer\r\n    function delegateTransfer(address _from, address _to, uint _value, uint _fee) onlyOwner public {\r\n        if (_fee > 0) {\r\n            require(_fee < 100 * 10 ** uint256(decimals));\r\n            quotaOf[owner] += _fee;\r\n        }\r\n        if (_from != owner && _to != owner) {\r\n            _transfer(_from, owner, _fee);\r\n        }\r\n        _transfer(_from, _to, _value - _fee);\r\n    }\r\n\r\n    function postTrade(bytes32 _preset, uint _price, address _seller) onlyOwner public {\r\n        // execute it only once\r\n        require(goods[_preset].preset == \"\");\r\n        goods[_preset] = Good({preset: _preset, price: _price, seller: _seller, time: now});\r\n    }\r\n\r\n    function decision(bytes32 _preset, string _presetSrc, address[] _buyers, uint[] _amounts) onlyOwner public {\r\n        \r\n        // execute it only once\r\n        require(decisionOf[_preset] == 0x0);\r\n\r\n        Good storage good = goods[_preset];\r\n        // preset authenticity\r\n        require(sha256(_presetSrc) == good.preset);\r\n\r\n        // address added, parameter 1\r\n        uint160 allAddress;\r\n        for (uint i = 0; i < _buyers.length; i++) {\r\n            allAddress += uint160(_buyers[i]);\r\n        }\r\n        \r\n        // random, parameter 2\r\n        uint random = _random(allAddress);\r\n\r\n        // preset is parameter 3, add and take the remainder\r\n        uint result = uint(uint(_stringToBytes32(_presetSrc)) + allAddress + random) % good.price;\r\n\r\n        address finalAddress = _getFinalAddress(_amounts, _buyers, result);\r\n        \r\n        // save decision result\r\n        decisionOf[_preset] = finalAddress;\r\n        Decision(result, finalAddress, _buyers, _amounts);\r\n        \r\n        uint finalAmount = uint(good.price * 98 / 100);\r\n        uint feeAmount = uint(good.price * 1 / 100);\r\n        if (good.seller != 0x0) {\r\n            // quota for seller\r\n            quotaOf[good.seller] += finalAmount;\r\n        } else {\r\n            // quota for buyer\r\n            quotaOf[finalAddress] += finalAmount;\r\n            _transfer(owner, finalAddress, finalAmount); \r\n        }\r\n\r\n        // destroy tokens\r\n        balanceOf[owner] -= feeAmount;\r\n        totalSupply -= feeAmount;\r\n        quotaOf[owner] += feeAmount;\r\n        \r\n        _shareOut(feeAmount);\r\n        \r\n        _checkRatio();\r\n    }\r\n\r\n    // TNTOO withdraw as ETH\r\n    function withdraw(address _target, uint _amount, uint _fee) public {\r\n        require(_amount <= quotaOf[_target]);\r\n        uint finalAmount = _amount - _fee;         \r\n        uint ethAmount = finalAmount / ratio;\r\n        require(ethAmount <= allEther);\r\n        // fee\r\n        if (msg.sender == owner && _target != owner) {\r\n            require(_fee < 100 * 10 ** uint256(decimals));\r\n            quotaOf[owner] += _fee;\r\n        } else {\r\n            require(msg.sender == _target);\r\n        }\r\n        quotaOf[_target] -= _amount;\r\n        // destroy tokens\r\n        totalSupply -= finalAmount;\r\n        balanceOf[owner] -= finalAmount;\r\n        // transfer ether\r\n        _target.transfer(ethAmount);\r\n        allEther -= ethAmount;\r\n        Withdraw(msg.sender, _target, ethAmount, _amount, _fee);\r\n    }\r\n\r\n    function () payable public {\r\n        // ethers\r\n        uint etherAmount = msg.value;\r\n        uint tntooAmount = etherAmount * ratio;\r\n        allEther += etherAmount;\r\n        // investors\r\n        if (!windowPeriodEnd && investors.length < 5 && etherAmount >= 500 ether) {\r\n            quotaOf[owner] += tntooAmount;\r\n            investors.push(msg.sender);\r\n        }\r\n        totalSupply += tntooAmount;\r\n        // unified management by the application\r\n        balanceOf[owner] += tntooAmount;\r\n        _checkWindowPeriod();\r\n\r\n        Transfer(this, owner, tntooAmount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"windowPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratioUpdateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"decisionOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preset\",\"type\":\"bytes32\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"postTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preset\",\"type\":\"bytes32\"},{\"name\":\"_presetSrc\",\"type\":\"string\"},{\"name\":\"_buyers\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"decision\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"goods\",\"outputs\":[{\"name\":\"preset\",\"type\":\"bytes32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"windowPeriodEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"delegateTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"quotaOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"WindowPeriodClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finalAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyers\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Decision\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TNTOO","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://990ef4c92f6a8479ec3e9bb2fc3e6b96b8c40540b4f4d29b541cdbff32fe90e7"}]}