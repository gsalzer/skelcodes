{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract Election{\r\n    \r\n    address public manager; // contract manager\r\n    \r\n    bool public isActive;\r\n    mapping(uint256 => address[]) public users; // all votes\r\n    mapping(address => uint256[]) public votes; // to fetch one user's votes\r\n    uint256 public totalUsers; // total users participated (not unique user count)\r\n    uint256 public totalVotes; // for calculating avg vote guess on client side. (stats only)\r\n    address[] public winners; // winner list. will be set after manager calls finalizeContract function\r\n    uint256 public winnerPrice; // reward per user for successfull guess.\r\n    uint256 public voteResult; // candidate's vote result will be set after election.\r\n    \r\n    \r\n    // minimum reqired ether to enter competition.\r\n    modifier mRequiredValue(){\r\n        require(msg.value == .01 ether);\r\n        _;\r\n    }\r\n    \r\n    // manager only functions: pause, finalizeContract\r\n    modifier mManagerOnly(){\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n    \r\n    // contract will be manually paused before on election day by manager.\r\n    modifier mIsActive(){\r\n        require(isActive);\r\n        _;\r\n    }\r\n    \r\n    // constructor\r\n    function Election() public{\r\n        manager = msg.sender;\r\n        isActive = true;\r\n    }\r\n    \r\n    /**\r\n    * user can join competition with this function.\r\n    * user's guess multiplied with 10 before calling this function for not using decimal numbers.\r\n    * ex: user guess: 40.2 -> 402\r\n    **/\r\n    function voteRequest(uint256 guess) public payable mIsActive mRequiredValue {\r\n        require(guess > 0);\r\n        require(guess <= 1000);\r\n        address[] storage list = users[guess];\r\n        list.push(msg.sender);\r\n        votes[msg.sender].push(guess);\r\n        totalUsers++;\r\n        totalVotes += guess;\r\n    }\r\n    \r\n    // get user's vote history.\r\n    function getUserVotes() public view returns(uint256[]){\r\n        return votes[msg.sender];\r\n    }\r\n\r\n    // stats only function\r\n    function getSummary() public returns(uint256, uint256, uint256) {\r\n        return(\r\n            totalVotes,\r\n            totalUsers,\r\n            this.balance\r\n        );\r\n    }\r\n    \r\n    // for pausing contract. contract will be paused on election day. new users can't join competition after contract paused.\r\n    function pause() public mManagerOnly {\r\n        isActive = !isActive;\r\n    }\r\n    \r\n    /** send ether to winners.(5% manager fee.)\r\n     * if there is no winner choose closest estimates will get rewards.\r\n     * manager will call this function after official results announced by YSK.\r\n     * winners will receive rewards instantly.\r\n     * election results will be rounded to one decimal only.\r\n     * if result is 40.52 then winner is who guessed 40.5\r\n     * if result is 40.56 then winner is who guessed 40.6\r\n     **/\r\n    function finalizeContract(uint256 winningNumber) public mManagerOnly {\r\n        voteResult = winningNumber;\r\n        address[] memory list = users[winningNumber];\r\n        address[] memory secondaryList;\r\n        uint256 winnersCount = list.length;\r\n\r\n        if(winnersCount == 0){\r\n            // if there is no winner choose closest estimates.\r\n            bool loop = true;\r\n            uint256 index = 1;\r\n            while(loop == true){\r\n                list = users[winningNumber-index];\r\n                secondaryList = users[winningNumber+index];\r\n                winnersCount = list.length + secondaryList.length;\r\n\r\n                if(winnersCount > 0){\r\n                    loop = false;\r\n                }\r\n                else{\r\n                    index++;\r\n                }\r\n            }\r\n        }\r\n        \r\n        uint256 managerFee = (this.balance/100)*5; // manager fee %5\r\n        uint256 reward = (this.balance - managerFee) / winnersCount; // reward for per winner.\r\n        winnerPrice = reward;\r\n        \r\n        // set winner list\r\n        winners = list;\r\n        // transfer eth to winners.\r\n        for (uint256 i = 0; i < list.length; i++) {\r\n            list[i].transfer(reward);\r\n        }\r\n                \r\n        // if anyone guessed the correct percent secondaryList will be empty array.\r\n        for (uint256 j = 0; j < secondaryList.length; j++) {\r\n            // transfer eth to winners.\r\n            secondaryList[j].transfer(reward);\r\n            winners.push(secondaryList[j]); // add to winners\r\n        }\r\n        \r\n        // transfer fee to manager\r\n        manager.transfer(this.balance);\r\n        \r\n        \r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"voteResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"winningNumber\",\"type\":\"uint256\"}],\"name\":\"finalizeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getSummary\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guess\",\"type\":\"uint256\"}],\"name\":\"voteRequest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winnerPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Election","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://de4881d8245220f97b531be968fae5877b2ad45b02ae8c9c951d71c0ad8aab05"}]}