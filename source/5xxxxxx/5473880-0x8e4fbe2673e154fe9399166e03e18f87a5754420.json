{"status":"1","message":"OK","result":[{"SourceCode":"// Bubble token air drop smart contract.\r\n// Developed by Phenom.Team <info@phenom.team>\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n *   @title SafeMath\r\n *   @dev Math operations with safety checks that throw on error\r\n */\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint a, uint b) internal constant returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal constant returns(uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal constant returns(uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal constant returns(uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n *   @title ERC20\r\n *   @dev Standart ERC20 token interface\r\n */\r\n\r\ncontract ERC20 {\r\n    uint public totalSupply = 0;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping (address => uint)) allowed;\r\n\r\n    function balanceOf(address _owner) constant returns (uint);\r\n    function transfer(address _to, uint _value) returns (bool);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool);\r\n    function approve(address _spender, uint _value) returns (bool);\r\n    function allowance(address _owner, address _spender) constant returns (uint);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n}\r\n\r\n/**\r\n *   @title BubbleToneToken\r\n *   @dev Universal Bonus Token contract\r\n */\r\ncontract BubbleToneToken is ERC20 {\r\n    using SafeMath for uint;\r\n    string public name = \"Universal Bonus Token | t.me/bubbletonebot\";\r\n    string public symbol = \"UBT\";\r\n    uint public decimals = 18;  \r\n\r\n    // Smart-contract owner address\r\n    address public owner;\r\n    \r\n    //events\r\n    event Burn(address indexed _from, uint _value);\r\n    event Mint(address indexed _to, uint _value);\r\n    event ManagerAdded(address _manager);\r\n    event ManagerRemoved(address _manager);\r\n    event Defrosted(uint timestamp);\r\n    event Frosted(uint timestamp);\r\n\r\n    // Tokens transfer ability status\r\n    bool public tokensAreFrozen = true;\r\n\r\n    // mapping of user permissions\r\n    mapping(address => bool) public isManager;\r\n\r\n\r\n    // Allows execution by the owner only\r\n    modifier onlyOwner { \r\n        require(msg.sender == owner); \r\n        _; \r\n    }\r\n\r\n    // Allows execution by the managers only\r\n    modifier onlyManagers { \r\n        require(isManager[msg.sender]); \r\n        _; \r\n    }\r\n\r\n\r\n   /**\r\n    *   @dev Contract constructor function sets owner address\r\n    *   @param _owner        owner address\r\n    */\r\n    function BubbleToneToken(address _owner) public {\r\n       owner = _owner;\r\n       isManager[_owner] = true;\r\n    }\r\n\r\n   /**\r\n    *   @dev Get balance of tokens holder\r\n    *   @param _holder        holder's address\r\n    *   @return               balance of investor\r\n    */\r\n    function balanceOf(address _holder) constant returns (uint) {\r\n         return balances[_holder];\r\n    }\r\n\r\n   /**\r\n    *   @dev Send coins\r\n    *   throws on any error rather then return a false flag to minimize\r\n    *   user errors\r\n    *   @param _to           target address\r\n    *   @param _amount       transfer amount\r\n    *\r\n    *   @return true if the transfer was successful\r\n    */\r\n    function transfer(address _to, uint _amount) public returns (bool) {\r\n        require(!tokensAreFrozen);\r\n        require(_to != address(0) && _to != address(this));\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    *   @dev An account/contract attempts to get the coins\r\n    *   throws on any error rather then return a false flag to minimize user errors\r\n    *\r\n    *   @param _from         source address\r\n    *   @param _to           target address\r\n    *   @param _amount       transfer amount\r\n    *\r\n    *   @return true if the transfer was successful\r\n    */\r\n    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\r\n        require(!tokensAreFrozen);\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Transfer(_from, _to, _amount);\r\n        return true;\r\n     }\r\n\r\n\r\n   /**\r\n    *   @dev Allows another account/contract to spend some tokens on its behalf\r\n    *   throws on any error rather then return a false flag to minimize user errors\r\n    *\r\n    *   also, to minimize the risk of the approve/transferFrom attack vector\r\n    *   approve has to be called twice in 2 separate transactions - once to\r\n    *   change the allowance to 0 and secondly to change it to the new allowance\r\n    *   value\r\n    *\r\n    *   @param _spender      approved address\r\n    *   @param _amount       allowance amount\r\n    *\r\n    *   @return true if the approval was successful\r\n    */\r\n    function approve(address _spender, uint _amount) public returns (bool) {\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    *\r\n    *   @param _owner        the address which owns the funds\r\n    *   @param _spender      the address which will spend the funds\r\n    *\r\n    *   @return              the amount of tokens still avaible for the spender\r\n    */\r\n    function allowance(address _owner, address _spender) constant returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n\r\n  /**\r\n   * @dev Function to add an address to the managers\r\n   * @param _manager         an address that will be added to managers list\r\n   */\r\n    function addManager(address _manager) onlyOwner external {\r\n        require(!isManager[_manager]);\r\n        isManager[_manager] = true;\r\n        ManagerAdded(_manager);\r\n    }\r\n\r\n  /**\r\n   * @dev Function to remove an address to the managers\r\n   * @param _manager         an address that will be removed from managers list\r\n   */\r\n    function removeManager(address _manager) onlyOwner external {\r\n        require(isManager[_manager]);\r\n        isManager[_manager] = false;\r\n        ManagerRemoved(_manager);\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to enable token transfers\r\n    */\r\n    function unfreeze() external onlyOwner {\r\n       tokensAreFrozen = false;\r\n       Defrosted(now);\r\n    }\r\n\r\n\r\n   /**\r\n    *   @dev Function to enable token transfers\r\n    */\r\n    function freeze() external onlyOwner {\r\n       tokensAreFrozen = true;\r\n       Frosted(now);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Function to batch mint tokens\r\n     * @param                _holders an array of addresses that will receive the promo tokens.\r\n     * @param                _amount an array with the amounts of tokens each address will get minted.\r\n     */\r\n    function batchMint(\r\n        address[] _holders, \r\n        uint[] _amount) \r\n        external\r\n        onlyManagers {\r\n        require(_holders.length == _amount.length);\r\n        for (uint i = 0; i < _holders.length; i++) {\r\n            require(_mint(_holders[i], _amount[i]));\r\n        }\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to burn Tokens\r\n    *   @param _holder       token holder address which the tokens will be burnt\r\n    *   @param _value        number of tokens to burn\r\n    */\r\n    function burnTokens(address _holder, uint _value) external onlyManagers {\r\n        require(balances[_holder] > 0);\r\n        totalSupply = totalSupply.sub(_value);\r\n        balances[_holder] = balances[_holder].sub(_value);\r\n        Burn(_holder, _value);\r\n    }\r\n\r\n\r\n\r\n    /** \r\n    *   @dev Allows owner to transfer out any accidentally sent ERC20 tokens\r\n    *\r\n    *   @param _token        token address\r\n    *   @param _amount       transfer amount\r\n    *\r\n    *\r\n    */\r\n    function withdraw(address _token, uint _amount) \r\n        external\r\n        onlyOwner \r\n        returns (bool success) {\r\n        return ERC20(_token).transfer(owner, _amount);\r\n    }\r\n\r\n   /**\r\n    *   @dev Function to mint tokens\r\n    *   @param _holder       beneficiary address the tokens will be issued to\r\n    *   @param _value        amount of tokens to issue\r\n    */\r\n    function _mint(address _holder, uint _value) private returns (bool) {\r\n        require(_value > 0);\r\n        require(_holder != address(0) && _holder != address(this));\r\n        balances[_holder] = balances[_holder].add(_value);\r\n        totalSupply = totalSupply.add(_value);\r\n        Transfer(address(0), _holder, _value);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holders\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAreFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"ManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Defrosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Frosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BubbleToneToken","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c2db6e5b96dd22d9870a5ca0909cceac6604e21d","Library":"","SwarmSource":"bzzr://9663ca475eb47d5558be8c0ea9209f6d831bc6b364ea3cd470a75077c4db2081"}]}