{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\ncontract DelegateProxy {\r\n\r\n    /**\r\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\r\n    * @param _dst Destination address to perform the delegatecall\r\n    * @param _calldata Calldata for the delegatecall\r\n    */\r\n    function delegatedFwd(address _dst, bytes _calldata) internal {\r\n        assembly {\r\n            let result := delegatecall(sub(gas, 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\r\n            let size := returndatasize\r\n\r\n            let ptr := mload(0x40)\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\r\n            // if the call returned error data, forward it\r\n            switch result case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Delegatable {\r\n  address empty1; // unknown slot\r\n  address empty2; // unknown slot\r\n  address empty3;  // unknown slot\r\n  address public owner;  // matches owner slot in controller\r\n  address public delegation; // matches thisAddr slot in controller\r\n\r\n  event DelegationTransferred(address indexed previousDelegate, address indexed newDelegation);\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows owner to transfer delegation of the contract to a newDelegation.\r\n   * @param newDelegation The address to transfer delegation to.\r\n   */\r\n  function transferDelegation(address newDelegation) public onlyOwner {\r\n    require(newDelegation != address(0));\r\n    DelegationTransferred(delegation, newDelegation);\r\n    delegation = newDelegation;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Parsec\r\n * Basic proxy implementation to controller\r\n */\r\ncontract Parsec is Delegatable, DelegateProxy {\r\n\r\n  /**\r\n   * @dev Function to invoke all function that are implemented in controler\r\n   */\r\n  function () public {\r\n    delegatedFwd(delegation, msg.data);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to initialize storage of proxy\r\n   * @param _controller The address of the controller to load the code from\r\n   * @param _cap Max amount of tokens that should be mintable\r\n   */\r\n  function initialize(address _controller, uint256 _cap) public {\r\n    require(owner == 0);\r\n    owner = msg.sender;\r\n    delegation = _controller;\r\n    delegatedFwd(_controller, msg.data);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newDelegation\",\"type\":\"address\"}],\"name\":\"transferDelegation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"},{\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delegation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousDelegate\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newDelegation\",\"type\":\"address\"}],\"name\":\"DelegationTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Parsec","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://65346412b2474ba13a993e2e16974b98f217beb1db18c9a5804e3583064fb14a"}]}