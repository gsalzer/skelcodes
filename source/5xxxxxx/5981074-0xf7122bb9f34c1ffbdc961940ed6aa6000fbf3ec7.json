{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n/**\r\n * @title ERC827 interface, an extension of ERC20 token standard\r\n *\r\n * @dev Interface of a ERC827 token, following the ERC20 standard with extra\r\n * methods to transfer value and data and execute calls in transfers and\r\n * approvals.\r\n */\r\ncontract ERC827 is ERC20 {\r\n\r\n    function approveAndCall(address _spender,uint256 _value,bytes _data) public payable returns(bool);\r\n\r\n    function transferAndCall(address _to,uint256 _value,bytes _data) public payable returns(bool);\r\n\r\n    function transferFromAndCall(address _from,address _to,uint256 _value,bytes _data) public payable returns(bool);\r\n\r\n}\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    hasMintPermission\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC827, an extension of ERC20 token standard\r\n *\r\n * @dev Implementation the ERC827, following the ERC20 standard with extra\r\n * methods to transfer value and data and execute calls in transfers and\r\n * approvals. Uses OpenZeppelin StandardToken.\r\n */\r\ncontract ERC827Token is ERC827, StandardToken {\r\n\r\n  /**\r\n   * @dev Addition to ERC20 token methods. It allows to\r\n   * approve the transfer of value and execute a call with the sent data.\r\n   * Beware that changing an allowance with this method brings the risk that\r\n   * someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race condition\r\n   * is to first reduce the spender's allowance to 0 and set the desired value\r\n   * afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address that will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   * @param _data ABI-encoded contract call to call `_spender` address.\r\n   * @return true if the call function was executed successfully\r\n   */\r\n    function approveAndCall(\r\n        address _spender,\r\n        uint256 _value,\r\n        bytes _data\r\n    )\r\n    public\r\n    payable\r\n    returns (bool)\r\n    {\r\n        require(_spender != address(this));\r\n\r\n        super.approve(_spender, _value);\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        require(_spender.call.value(msg.value)(_data));\r\n\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\r\n   * address and execute a call with the sent data on the same transaction\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   * @param _data ABI-encoded contract call to call `_to` address.\r\n   * @return true if the call function was executed successfully\r\n   */\r\n    function transferAndCall(\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data\r\n    )\r\n    public\r\n    payable\r\n    returns (bool)\r\n    {\r\n        require(_to != address(this));\r\n\r\n        super.transfer(_to, _value);\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        require(_to.call.value(msg.value)(_data));\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Addition to ERC20 token methods. Transfer tokens from one address to\r\n   * another and make a contract call on the same transaction\r\n   * @param _from The address which you want to send tokens from\r\n   * @param _to The address which you want to transfer to\r\n   * @param _value The amout of tokens to be transferred\r\n   * @param _data ABI-encoded contract call to call `_to` address.\r\n   * @return true if the call function was executed successfully\r\n   */\r\n    function transferFromAndCall(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data\r\n    )\r\n    public payable returns (bool)\r\n    {\r\n        require(_to != address(this));\r\n\r\n        super.transferFrom(_from, _to, _value);\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        require(_to.call.value(msg.value)(_data));\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Addition to StandardToken methods. Increase the amount of tokens that\r\n   * an owner allowed to a spender and execute a call with the sent data.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   * @param _data ABI-encoded contract call to call `_spender` address.\r\n   */\r\n    function increaseApprovalAndCall(\r\n        address _spender,\r\n        uint _addedValue,\r\n        bytes _data\r\n    )\r\n    public\r\n    payable\r\n    returns (bool)\r\n    {\r\n        require(_spender != address(this));\r\n\r\n        super.increaseApproval(_spender, _addedValue);\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        require(_spender.call.value(msg.value)(_data));\r\n\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\r\n   * an owner allowed to a spender and execute a call with the sent data.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   * @param _data ABI-encoded contract call to call `_spender` address.\r\n   */\r\n    function decreaseApprovalAndCall(\r\n        address _spender,\r\n        uint _subtractedValue,\r\n        bytes _data\r\n    )\r\n    public\r\n    payable\r\n    returns (bool)\r\n    {\r\n        require(_spender != address(this));\r\n\r\n        super.decreaseApproval(_spender, _subtractedValue);\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        require(_spender.call.value(msg.value)(_data));\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n/**\r\n * @title DAOToken, base on zeppelin contract.\r\n * @dev ERC20 compatible token. It is a mintable, destructible, burnable token.\r\n */\r\n\r\ncontract DAOToken is ERC827Token,MintableToken,BurnableToken {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    // solium-disable-next-line uppercase\r\n    uint8 public constant decimals = 18;\r\n    uint public cap;\r\n\r\n    /**\r\n    * @dev Constructor\r\n    * @param _name - token name\r\n    * @param _symbol - token symbol\r\n    * @param _cap - token cap - 0 value means no cap\r\n    */\r\n    constructor(string _name, string _symbol,uint _cap) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        cap = _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n        if (cap > 0)\r\n            require(totalSupply_.add(_amount) <= cap);\r\n        return super.mint(_to, _amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Reputation system\r\n * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\r\n * A reputation is use to assign influence measure to a DAO'S peers.\r\n * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\r\n * The Reputation contract maintain a map of address to reputation value.\r\n * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\r\n */\r\n\r\ncontract Reputation is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    mapping (address => uint256) public balances;\r\n    uint256 public totalSupply;\r\n    uint public decimals = 18;\r\n\r\n    // Event indicating minting of reputation to an address.\r\n    event Mint(address indexed _to, uint256 _amount);\r\n    // Event indicating burning of reputation for an address.\r\n    event Burn(address indexed _from, uint256 _amount);\r\n\r\n    /**\r\n    * @dev return the reputation amount of a given owner\r\n    * @param _owner an address of the owner which we want to get his reputation\r\n    */\r\n    function reputationOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Generates `_amount` of reputation that are assigned to `_to`\r\n    * @param _to The address that will be assigned the new reputation\r\n    * @param _amount The quantity of reputation to be generated\r\n    * @return True if the reputation are generated correctly\r\n    */\r\n    function mint(address _to, uint _amount)\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n    {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Burns `_amount` of reputation from `_from`\r\n    * if _amount tokens to burn > balances[_from] the balance of _from will turn to zero.\r\n    * @param _from The address that will lose the reputation\r\n    * @param _amount The quantity of reputation to burn\r\n    * @return True if the reputation are burned correctly\r\n    */\r\n    function burn(address _from, uint _amount)\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n    {\r\n        uint amountMinted = _amount;\r\n        if (balances[_from] < _amount) {\r\n            amountMinted = balances[_from];\r\n        }\r\n        totalSupply = totalSupply.sub(amountMinted);\r\n        balances[_from] = balances[_from].sub(amountMinted);\r\n        emit Burn(_from, amountMinted);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title An Avatar holds tokens, reputation and ether for a controller\r\n */\r\ncontract Avatar is Ownable {\r\n    bytes32 public orgName;\r\n    DAOToken public nativeToken;\r\n    Reputation public nativeReputation;\r\n\r\n    event GenericAction(address indexed _action, bytes32[] _params);\r\n    event SendEther(uint _amountInWei, address indexed _to);\r\n    event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint _value);\r\n    event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint _value);\r\n    event ExternalTokenIncreaseApproval(StandardToken indexed _externalToken, address _spender, uint _addedValue);\r\n    event ExternalTokenDecreaseApproval(StandardToken indexed _externalToken, address _spender, uint _subtractedValue);\r\n    event ReceiveEther(address indexed _sender, uint _value);\r\n\r\n    /**\r\n    * @dev the constructor takes organization name, native token and reputation system\r\n    and creates an avatar for a controller\r\n    */\r\n    constructor(bytes32 _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {\r\n        orgName = _orgName;\r\n        nativeToken = _nativeToken;\r\n        nativeReputation = _nativeReputation;\r\n    }\r\n\r\n    /**\r\n    * @dev enables an avatar to receive ethers\r\n    */\r\n    function() public payable {\r\n        emit ReceiveEther(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract's address to call\r\n    * @param _data ABI-encoded contract call to call `_contract` address.\r\n    * @return the return bytes of the called contract's function.\r\n    */\r\n    function genericCall(address _contract,bytes _data) public onlyOwner {\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        bool result = _contract.call(_data);\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n        // Copy the returned data.\r\n        returndatacopy(0, 0, returndatasize)\r\n\r\n        switch result\r\n        // call returns 0 on error.\r\n        case 0 { revert(0, returndatasize) }\r\n        default { return(0, returndatasize) }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev send ethers from the avatar's wallet\r\n    * @param _amountInWei amount to send in Wei units\r\n    * @param _to send the ethers to this address\r\n    * @return bool which represents success\r\n    */\r\n    function sendEther(uint _amountInWei, address _to) public onlyOwner returns(bool) {\r\n        _to.transfer(_amountInWei);\r\n        emit SendEther(_amountInWei, _to);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev external token transfer\r\n    * @param _externalToken the token contract\r\n    * @param _to the destination address\r\n    * @param _value the amount of tokens to transfer\r\n    * @return bool which represents success\r\n    */\r\n    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value)\r\n    public onlyOwner returns(bool)\r\n    {\r\n        _externalToken.transfer(_to, _value);\r\n        emit ExternalTokenTransfer(_externalToken, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev external token transfer from a specific account\r\n    * @param _externalToken the token contract\r\n    * @param _from the account to spend token from\r\n    * @param _to the destination address\r\n    * @param _value the amount of tokens to transfer\r\n    * @return bool which represents success\r\n    */\r\n    function externalTokenTransferFrom(\r\n        StandardToken _externalToken,\r\n        address _from,\r\n        address _to,\r\n        uint _value\r\n    )\r\n    public onlyOwner returns(bool)\r\n    {\r\n        _externalToken.transferFrom(_from, _to, _value);\r\n        emit ExternalTokenTransferFrom(_externalToken, _from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev increase approval for the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue)\r\n    public onlyOwner returns(bool)\r\n    {\r\n        _externalToken.increaseApproval(_spender, _addedValue);\r\n        emit ExternalTokenIncreaseApproval(_externalToken, _spender, _addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev decrease approval for the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue )\r\n    public onlyOwner returns(bool)\r\n    {\r\n        _externalToken.decreaseApproval(_spender, _subtractedValue);\r\n        emit ExternalTokenDecreaseApproval(_externalToken,_spender, _subtractedValue);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract UniversalSchemeInterface {\r\n\r\n    function updateParameters(bytes32 _hashedParameters) public;\r\n\r\n    function getParametersFromController(Avatar _avatar) internal view returns(bytes32);\r\n}\r\n\r\n\r\n/**\r\n * @title Controller contract\r\n * @dev A controller controls the organizations tokens ,reputation and avatar.\r\n * It is subject to a set of schemes and constraints that determine its behavior.\r\n * Each scheme has it own parameters and operation permissions.\r\n */\r\ninterface ControllerInterface {\r\n\r\n    /**\r\n     * @dev Mint `_amount` of reputation that are assigned to `_to` .\r\n     * @param  _amount amount of reputation to mint\r\n     * @param _to beneficiary address\r\n     * @return bool which represents a success\r\n    */\r\n    function mintReputation(uint256 _amount, address _to,address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev Burns `_amount` of reputation from `_from`\r\n     * @param _amount amount of reputation to burn\r\n     * @param _from The address that will lose the reputation\r\n     * @return bool which represents a success\r\n     */\r\n    function burnReputation(uint256 _amount, address _from,address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev mint tokens .\r\n     * @param  _amount amount of token to mint\r\n     * @param _beneficiary beneficiary address\r\n     * @param _avatar address\r\n     * @return bool which represents a success\r\n     */\r\n    function mintTokens(uint256 _amount, address _beneficiary,address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n  /**\r\n   * @dev register or update a scheme\r\n   * @param _scheme the address of the scheme\r\n   * @param _paramsHash a hashed configuration of the usage of the scheme\r\n   * @param _permissions the permissions the new scheme will have\r\n   * @param _avatar address\r\n   * @return bool which represents a success\r\n   */\r\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions,address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev unregister a scheme\r\n     * @param _avatar address\r\n     * @param _scheme the address of the scheme\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterScheme(address _scheme,address _avatar)\r\n    external\r\n    returns(bool);\r\n    /**\r\n     * @dev unregister the caller's scheme\r\n     * @param _avatar address\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterSelf(address _avatar) external returns(bool);\r\n\r\n    function isSchemeRegistered( address _scheme,address _avatar) external view returns(bool);\r\n\r\n    function getSchemeParameters(address _scheme,address _avatar) external view returns(bytes32);\r\n\r\n    function getGlobalConstraintParameters(address _globalConstraint,address _avatar) external view returns(bytes32);\r\n\r\n    function getSchemePermissions(address _scheme,address _avatar) external view returns(bytes4);\r\n\r\n    /**\r\n     * @dev globalConstraintsCount return the global constraint pre and post count\r\n     * @return uint globalConstraintsPre count.\r\n     * @return uint globalConstraintsPost count.\r\n     */\r\n    function globalConstraintsCount(address _avatar) external view returns(uint,uint);\r\n\r\n    function isGlobalConstraintRegistered(address _globalConstraint,address _avatar) external view returns(bool);\r\n\r\n    /**\r\n     * @dev add or update Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be added.\r\n     * @param _params the constraint parameters hash.\r\n     * @param _avatar the avatar of the organization\r\n     * @return bool which represents a success\r\n     */\r\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params,address _avatar)\r\n    external returns(bool);\r\n\r\n    /**\r\n     * @dev remove Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be remove.\r\n     * @param _avatar the organization avatar.\r\n     * @return bool which represents a success\r\n     */\r\n    function removeGlobalConstraint (address _globalConstraint,address _avatar)\r\n    external  returns(bool);\r\n\r\n  /**\r\n    * @dev upgrade the Controller\r\n    *      The function will trigger an event 'UpgradeController'.\r\n    * @param  _newController the address of the new controller.\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function upgradeController(address _newController,address _avatar)\r\n    external returns(bool);\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract's address to call\r\n    * @param _data ABI-encoded contract call to call `_contract` address.\r\n    * @param _avatar the controller's avatar address\r\n    * @return bytes32  - the return value of the called _contract's function.\r\n    */\r\n    function genericCall(address _contract,bytes _data,address _avatar)\r\n    external\r\n    returns(bytes32);\r\n\r\n  /**\r\n   * @dev send some ether\r\n   * @param _amountInWei the amount of ether (in Wei) to send\r\n   * @param _to address of the beneficiary\r\n   * @param _avatar address\r\n   * @return bool which represents a success\r\n   */\r\n    function sendEther(uint _amountInWei, address _to,address _avatar)\r\n    external returns(bool);\r\n\r\n    /**\r\n    * @dev send some amount of arbitrary ERC20 Tokens\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value,address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n    * @dev transfer token \"from\" address \"to\" address\r\n    *      One must to approve the amount of tokens which can be spend from the\r\n    *      \"from\" account.This can be done using externalTokenApprove.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _from address of the account to send from\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransferFrom(StandardToken _externalToken, address _from, address _to, uint _value,address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n    * @dev increase approval for the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue,address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n    * @dev decrease approval for the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue,address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev getNativeReputation\r\n     * @param _avatar the organization avatar.\r\n     * @return organization native reputation\r\n     */\r\n    function getNativeReputation(address _avatar)\r\n    external\r\n    view\r\n    returns(address);\r\n}\r\n\r\ncontract UniversalScheme is Ownable, UniversalSchemeInterface {\r\n    bytes32 public hashedParameters; // For other parameters.\r\n\r\n    function updateParameters(\r\n        bytes32 _hashedParameters\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        hashedParameters = _hashedParameters;\r\n    }\r\n\r\n    /**\r\n    *  @dev get the parameters for the current scheme from the controller\r\n    */\r\n    function getParametersFromController(Avatar _avatar) internal view returns(bytes32) {\r\n        return ControllerInterface(_avatar.owner()).getSchemeParameters(this,address(_avatar));\r\n    }\r\n}\r\ncontract ExecutableInterface {\r\n    function execute(bytes32 _proposalId, address _avatar, int _param) public returns(bool);\r\n}\r\n\r\ninterface IntVoteInterface {\r\n    //When implementing this interface please do not only override function and modifier,\r\n    //but also to keep the modifiers on the overridden functions.\r\n    modifier onlyProposalOwner(bytes32 _proposalId) {revert(); _;}\r\n    modifier votable(bytes32 _proposalId) {revert(); _;}\r\n\r\n    event NewProposal(bytes32 indexed _proposalId, address indexed _avatar, uint _numOfChoices, address _proposer, bytes32 _paramsHash);\r\n    event ExecuteProposal(bytes32 indexed _proposalId, address indexed _avatar, uint _decision, uint _totalReputation);\r\n    event VoteProposal(bytes32 indexed _proposalId, address indexed _avatar, address indexed _voter, uint _vote, uint _reputation);\r\n    event CancelProposal(bytes32 indexed _proposalId, address indexed _avatar );\r\n    event CancelVoting(bytes32 indexed _proposalId, address indexed _avatar, address indexed _voter);\r\n\r\n    /**\r\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\r\n     * generated by calculating keccak256 of a incremented counter.\r\n     * @param _numOfChoices number of voting choices\r\n     * @param _proposalParameters defines the parameters of the voting machine used for this proposal\r\n     * @param _avatar an address to be sent as the payload to the _executable contract.\r\n     * @param _executable This contract will be executed when vote is over.\r\n     * @param _proposer address\r\n     * @return proposal's id.\r\n     */\r\n    function propose(\r\n        uint _numOfChoices,\r\n        bytes32 _proposalParameters,\r\n        address _avatar,\r\n        ExecutableInterface _executable,\r\n        address _proposer\r\n        ) external returns(bytes32);\r\n\r\n    // Only owned proposals and only the owner:\r\n    function cancelProposal(bytes32 _proposalId) external returns(bool);\r\n\r\n    // Only owned proposals and only the owner:\r\n    function ownerVote(bytes32 _proposalId, uint _vote, address _voter) external returns(bool);\r\n\r\n    function vote(bytes32 _proposalId, uint _vote) external returns(bool);\r\n\r\n    function voteWithSpecifiedAmounts(\r\n        bytes32 _proposalId,\r\n        uint _vote,\r\n        uint _rep,\r\n        uint _token) external returns(bool);\r\n\r\n    function cancelVote(bytes32 _proposalId) external;\r\n\r\n    //@dev execute check if the proposal has been decided, and if so, execute the proposal\r\n    //@param _proposalId the id of the proposal\r\n    //@return bool true - the proposal has been executed\r\n    //             false - otherwise.\r\n    function execute(bytes32 _proposalId) external returns(bool);\r\n\r\n    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint);\r\n\r\n    function isVotable(bytes32 _proposalId) external view returns(bool);\r\n\r\n    /**\r\n     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _choice the index in the\r\n     * @return voted reputation for the given choice\r\n     */\r\n    function voteStatus(bytes32 _proposalId,uint _choice) external view returns(uint);\r\n\r\n    /**\r\n     * @dev isAbstainAllow returns if the voting machine allow abstain (0)\r\n     * @return bool true or false\r\n     */\r\n    function isAbstainAllow() external pure returns(bool);\r\n\r\n    /**\r\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\r\n     * @return min - minimum number of choices\r\n               max - maximum number of choices\r\n     */\r\n    function getAllowedRangeOfChoices() external pure returns(uint min,uint max);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title A registrar for Schemes for organizations\r\n * @dev The SchemeRegistrar is used for registering and unregistering schemes at organizations\r\n */\r\n\r\ncontract SchemeRegistrar is UniversalScheme {\r\n    event NewSchemeProposal(\r\n        address indexed _avatar,\r\n        bytes32 indexed _proposalId,\r\n        address indexed _intVoteInterface,\r\n        address _scheme,\r\n        bytes32 _parametersHash,\r\n        bytes4 _permissions\r\n    );\r\n    event RemoveSchemeProposal(address indexed _avatar,\r\n        bytes32 indexed _proposalId,\r\n        address indexed _intVoteInterface,\r\n        address _scheme\r\n    );\r\n    event ProposalExecuted(address indexed _avatar, bytes32 indexed _proposalId,int _param);\r\n    event ProposalDeleted(address indexed _avatar, bytes32 indexed _proposalId);\r\n\r\n    // a SchemeProposal is a  proposal to add or remove a scheme to/from the an organization\r\n    struct SchemeProposal {\r\n        address scheme; //\r\n        bytes32 parametersHash;\r\n        uint proposalType; // 1: add a scheme, 2: remove a scheme.\r\n        bytes4 permissions;\r\n    }\r\n\r\n    // A mapping from the organization (Avatar) address to the saved data of the organization:\r\n    mapping(address=>mapping(bytes32=>SchemeProposal)) public organizationsProposals;\r\n\r\n    // A mapping from hashes to parameters (use to store a particular configuration on the controller)\r\n    struct Parameters {\r\n        bytes32 voteRegisterParams;\r\n        bytes32 voteRemoveParams;\r\n        IntVoteInterface intVote;\r\n    }\r\n    mapping(bytes32=>Parameters) public parameters;\r\n\r\n\r\n    /**\r\n    * @dev execute a  proposal\r\n    * This method can only be called by the voting machine in which the vote is held.\r\n    * @param _proposalId the ID of the proposal in the voting machine\r\n    * @param _avatar address of the controller\r\n    * @param _param identifies the action to be taken\r\n    */\r\n    // TODO: this call can be simplified if we save the _avatar together with the proposal\r\n    function execute(bytes32 _proposalId, address _avatar, int _param) external returns(bool) {\r\n          // Check the caller is indeed the voting machine:\r\n        require(parameters[getParametersFromController(Avatar(_avatar))].intVote == msg.sender);\r\n        SchemeProposal memory proposal = organizationsProposals[_avatar][_proposalId];\r\n        require(proposal.scheme != address(0));\r\n        delete organizationsProposals[_avatar][_proposalId];\r\n        emit ProposalDeleted(_avatar,_proposalId);\r\n        if (_param == 1) {\r\n\r\n          // Define controller and get the params:\r\n            ControllerInterface controller = ControllerInterface(Avatar(_avatar).owner());\r\n\r\n          // Add a scheme:\r\n            if (proposal.proposalType == 1) {\r\n                require(controller.registerScheme(proposal.scheme, proposal.parametersHash, proposal.permissions,_avatar));\r\n            }\r\n          // Remove a scheme:\r\n            if ( proposal.proposalType == 2 ) {\r\n                require(controller.unregisterScheme(proposal.scheme,_avatar));\r\n            }\r\n          }\r\n        emit ProposalExecuted(_avatar, _proposalId,_param);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev hash the parameters, save them if necessary, and return the hash value\r\n    */\r\n    function setParameters(\r\n        bytes32 _voteRegisterParams,\r\n        bytes32 _voteRemoveParams,\r\n        IntVoteInterface _intVote\r\n    ) public returns(bytes32)\r\n    {\r\n        bytes32 paramsHash = getParametersHash(_voteRegisterParams, _voteRemoveParams, _intVote);\r\n        parameters[paramsHash].voteRegisterParams = _voteRegisterParams;\r\n        parameters[paramsHash].voteRemoveParams = _voteRemoveParams;\r\n        parameters[paramsHash].intVote = _intVote;\r\n        return paramsHash;\r\n    }\r\n\r\n    function getParametersHash(\r\n        bytes32 _voteRegisterParams,\r\n        bytes32 _voteRemoveParams,\r\n        IntVoteInterface _intVote\r\n    ) public pure returns(bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(_voteRegisterParams, _voteRemoveParams, _intVote));\r\n    }\r\n\r\n    /**\r\n    * @dev create a proposal to register a scheme\r\n    * @param _avatar the address of the organization the scheme will be registered for\r\n    * @param _scheme the address of the scheme to be registered\r\n    * @param _parametersHash a hash of the configuration of the _scheme\r\n    * @param _permissions the permission of the scheme to be registered\r\n    * @return a proposal Id\r\n    * @dev NB: not only proposes the vote, but also votes for it\r\n    */\r\n    function proposeScheme(\r\n        Avatar _avatar,\r\n        address _scheme,\r\n        bytes32 _parametersHash,\r\n        bytes4 _permissions\r\n    )\r\n    public\r\n    returns(bytes32)\r\n    {\r\n        // propose\r\n        require(_scheme != address(0));\r\n        Parameters memory controllerParams = parameters[getParametersFromController(_avatar)];\r\n\r\n        bytes32 proposalId = controllerParams.intVote.propose(\r\n            2,\r\n            controllerParams.voteRegisterParams,\r\n            _avatar,\r\n            ExecutableInterface(this),\r\n            msg.sender\r\n        );\r\n\r\n        SchemeProposal memory proposal = SchemeProposal({\r\n            scheme: _scheme,\r\n            parametersHash: _parametersHash,\r\n            proposalType: 1,\r\n            permissions: _permissions\r\n        });\r\n        emit NewSchemeProposal(\r\n            _avatar,\r\n            proposalId,\r\n            controllerParams.intVote,\r\n            _scheme, _parametersHash,\r\n            _permissions\r\n        );\r\n        organizationsProposals[_avatar][proposalId] = proposal;\r\n\r\n        // vote for this proposal\r\n        controllerParams.intVote.ownerVote(proposalId, 1, msg.sender); // Automatically votes `yes` in the name of the opener.\r\n        return proposalId;\r\n    }\r\n\r\n    /**\r\n    * @dev propose to remove a scheme for a controller\r\n    * @param _avatar the address of the controller from which we want to remove a scheme\r\n    * @param _scheme the address of the scheme we want to remove\r\n    *\r\n    * NB: not only registers the proposal, but also votes for it\r\n    */\r\n    function proposeToRemoveScheme(Avatar _avatar, address _scheme)\r\n    public\r\n    returns(bytes32)\r\n    {\r\n        bytes32 paramsHash = getParametersFromController(_avatar);\r\n        Parameters memory params = parameters[paramsHash];\r\n\r\n        IntVoteInterface intVote = params.intVote;\r\n        bytes32 proposalId = intVote.propose(2, params.voteRemoveParams, _avatar, ExecutableInterface(this),msg.sender);\r\n\r\n        organizationsProposals[_avatar][proposalId].proposalType = 2;\r\n        organizationsProposals[_avatar][proposalId].scheme = _scheme;\r\n        emit RemoveSchemeProposal(_avatar, proposalId, intVote, _scheme);\r\n        // vote for this proposal\r\n        intVote.ownerVote(proposalId, 1, msg.sender); // Automatically votes `yes` in the name of the opener.\r\n        return proposalId;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"parameters\",\"outputs\":[{\"name\":\"voteRegisterParams\",\"type\":\"bytes32\"},{\"name\":\"voteRemoveParams\",\"type\":\"bytes32\"},{\"name\":\"intVote\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"organizationsProposals\",\"outputs\":[{\"name\":\"scheme\",\"type\":\"address\"},{\"name\":\"parametersHash\",\"type\":\"bytes32\"},{\"name\":\"proposalType\",\"type\":\"uint256\"},{\"name\":\"permissions\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voteRegisterParams\",\"type\":\"bytes32\"},{\"name\":\"_voteRemoveParams\",\"type\":\"bytes32\"},{\"name\":\"_intVote\",\"type\":\"address\"}],\"name\":\"setParameters\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_avatar\",\"type\":\"address\"},{\"name\":\"_scheme\",\"type\":\"address\"},{\"name\":\"_parametersHash\",\"type\":\"bytes32\"},{\"name\":\"_permissions\",\"type\":\"bytes4\"}],\"name\":\"proposeScheme\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hashedParameters\",\"type\":\"bytes32\"}],\"name\":\"updateParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"name\":\"_avatar\",\"type\":\"address\"},{\"name\":\"_param\",\"type\":\"int256\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_avatar\",\"type\":\"address\"},{\"name\":\"_scheme\",\"type\":\"address\"}],\"name\":\"proposeToRemoveScheme\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voteRegisterParams\",\"type\":\"bytes32\"},{\"name\":\"_voteRemoveParams\",\"type\":\"bytes32\"},{\"name\":\"_intVote\",\"type\":\"address\"}],\"name\":\"getParametersHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hashedParameters\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_intVoteInterface\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_scheme\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_parametersHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_permissions\",\"type\":\"bytes4\"}],\"name\":\"NewSchemeProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_intVoteInterface\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_scheme\",\"type\":\"address\"}],\"name\":\"RemoveSchemeProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_param\",\"type\":\"int256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_avatar\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"ProposalDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SchemeRegistrar","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f7f835529dd59fe3f653869ea745b05bb93a44e3ad880d9444b155491e647b2e"}]}