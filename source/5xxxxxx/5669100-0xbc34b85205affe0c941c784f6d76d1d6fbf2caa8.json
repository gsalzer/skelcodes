{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public ownerAddress;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    ownerAddress = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == ownerAddress);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(ownerAddress, newOwner);\r\n    ownerAddress = newOwner;\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath32\r\n * @dev SafeMath library implemented for uint32\r\n */\r\nlibrary SafeMath32 {\r\n\r\n  function mul(uint32 a, uint32 b) internal pure returns (uint32) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint32 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint32 a, uint32 b) internal pure returns (uint32) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint32 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint32 a, uint32 b) internal pure returns (uint32) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint32 a, uint32 b) internal pure returns (uint32) {\r\n    uint32 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath16\r\n * @dev SafeMath library implemented for uint16\r\n */\r\nlibrary SafeMath16 {\r\n\r\n  function mul(uint16 a, uint16 b) internal pure returns (uint16) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint16 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint16 a, uint16 b) internal pure returns (uint16) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint16 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint16 a, uint16 b) internal pure returns (uint16) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint16 a, uint16 b) internal pure returns (uint16) {\r\n    uint16 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract ERC721 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\n\r\ncontract Solethium is Ownable, ERC721 {\r\n\r\n    uint16 private devCutPromille = 25;\r\n\r\n    /**\r\n    ** @dev EVENTS\r\n    **/\r\n    event EventSolethiumObjectCreated(uint256 tokenId, string name);\r\n    event EventSolethiumObjectBought(address oldOwner, address newOwner, uint price);\r\n\r\n    // @dev use SafeMath for the following uints\r\n    using SafeMath for uint256; // 1,15792E+77\r\n    using SafeMath for uint32; // 4294967296\r\n    using SafeMath for uint16; // 65536\r\n\r\n    //  @dev an object - CrySolObject ( dev expression for Solethium Object)- contains relevant attributes only\r\n    struct CrySolObject {\r\n        string name;\r\n        uint256 price;\r\n        uint256 id;\r\n        uint16 parentID;\r\n        uint16 percentWhenParent;\r\n        address owner;\r\n        uint8 specialPropertyType; // 0=NONE, 1=PARENT_UP\r\n        uint8 specialPropertyValue; // example: 5 meaning 0,5 %\r\n    }\r\n    \r\n\r\n    //  @dev an array of all CrySolObject objects in the game\r\n    CrySolObject[] public crySolObjects;\r\n    //  @dev integer - total number of CrySol Objects\r\n    uint16 public numberOfCrySolObjects;\r\n    //  @dev Total number of CrySol ETH worth in the game\r\n    uint256 public ETHOfCrySolObjects;\r\n\r\n    mapping (address => uint) public ownerCrySolObjectsCount; // for owner address, track number on tokens owned\r\n    mapping (address => uint) public ownerAddPercentToParent; // adding additional percents to owners of some Objects when they have PARENT objects\r\n    mapping (address => string) public ownerToNickname; // for owner address, track his nickname\r\n\r\n\r\n    /**\r\n    ** @dev MODIFIERS\r\n    **/\r\n    modifier onlyOwnerOf(uint _id) {\r\n        require(msg.sender == crySolObjects[_id].owner);\r\n        _;\r\n    } \r\n\r\n    /**\r\n    ** @dev NEXT PRICE CALCULATIONS\r\n    **/\r\n\r\n    uint256 private nextPriceTreshold1 = 0.05 ether;\r\n    uint256 private nextPriceTreshold2 = 0.3 ether;\r\n    uint256 private nextPriceTreshold3 = 1.0 ether;\r\n    uint256 private nextPriceTreshold4 = 5.0 ether;\r\n    uint256 private nextPriceTreshold5 = 10.0 ether;\r\n\r\n    function calculateNextPrice (uint256 _price) public view returns (uint256 _nextPrice) {\r\n        if (_price <= nextPriceTreshold1) {\r\n            return _price.mul(200).div(100);\r\n        } else if (_price <= nextPriceTreshold2) {\r\n            return _price.mul(170).div(100);\r\n        } else if (_price <= nextPriceTreshold3) {\r\n            return _price.mul(150).div(100);\r\n        } else if (_price <= nextPriceTreshold4) {\r\n            return _price.mul(140).div(100);\r\n        } else if (_price <= nextPriceTreshold5) {\r\n            return _price.mul(130).div(100);\r\n        } else {\r\n            return _price.mul(120).div(100);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    ** @dev this method is used to create CrySol Object\r\n    **/\r\n    function createCrySolObject(string _name, uint _price, uint16 _parentID, uint16 _percentWhenParent, uint8 _specialPropertyType, uint8 _specialPropertyValue) external onlyOwner() {\r\n        uint256 _id = crySolObjects.length;\r\n        crySolObjects.push(CrySolObject(_name, _price, _id, _parentID, _percentWhenParent, msg.sender, _specialPropertyType, _specialPropertyValue)) ; //insert into array\r\n        ownerCrySolObjectsCount[msg.sender] = ownerCrySolObjectsCount[msg.sender].add(1); // increase count for OWNER\r\n        numberOfCrySolObjects = (uint16)(numberOfCrySolObjects.add(1)); // increase count for Total number\r\n        ETHOfCrySolObjects = ETHOfCrySolObjects.add(_price); // increase total ETH worth of all tokens\r\n        EventSolethiumObjectCreated(_id, _name);\r\n\r\n    }\r\n\r\n    /**\r\n    ** @dev this method is used to GET CrySol Objects from one OWNER\r\n    **/\r\n    function getCrySolObjectsByOwner(address _owner) external view returns(uint[]) {\r\n        uint256 tokenCount = ownerCrySolObjectsCount[_owner];\r\n        if (tokenCount == 0) {\r\n            return new uint256[](0);\r\n        } else {\r\n            uint[] memory result = new uint[](tokenCount);\r\n            uint counter = 0;\r\n            for (uint i = 0; i < numberOfCrySolObjects; i++) {\r\n            if (crySolObjects[i].owner == _owner) {\r\n                    result[counter] = i;\r\n                    counter++;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    ** @dev this method is used to GET ALL CrySol Objects in the game\r\n    **/\r\n    function getAllCrySolObjects() external view returns(uint[]) {\r\n        uint[] memory result = new uint[](numberOfCrySolObjects);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < numberOfCrySolObjects; i++) {\r\n                result[counter] = i;\r\n                counter++;\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    /**\r\n    ** @dev this method is used to calculate Developer's Cut in the game\r\n    **/\r\n    function returnDevelopersCut(uint256 _price) private view returns(uint) {\r\n            return _price.mul(devCutPromille).div(1000);\r\n    }\r\n\r\n    /**\r\n    ** @dev this method is used to calculate Parent Object's Owner Cut in the game\r\n    ** owner of PARENT objects will get : percentWhenParent % from his Objects + any additional bonuses he may have from SPECIAL trade objects\r\n    ** that are increasing PARENT percentage\r\n    **/\r\n    function returnParentObjectCut( CrySolObject storage _obj, uint256 _price ) private view returns(uint) {\r\n        uint256 _percentWhenParent = crySolObjects[_obj.parentID].percentWhenParent + (ownerAddPercentToParent[crySolObjects[_obj.parentID].owner]).div(10);\r\n        return _price.mul(_percentWhenParent).div(100); //_parentCut\r\n    }\r\n\r\n    \r\n     /**\r\n    ** @dev this method is used to TRANSFER OWNERSHIP of the CrySol Objects in the game on the BUY event\r\n    **/\r\n    function _transferOwnershipOnBuy(address _oldOwner, uint _id, address _newOwner) private {\r\n            // decrease count for original OWNER\r\n            ownerCrySolObjectsCount[_oldOwner] = ownerCrySolObjectsCount[_oldOwner].sub(1); \r\n\r\n            // new owner gets ownership\r\n            crySolObjects[_id].owner = _newOwner;  \r\n            ownerCrySolObjectsCount[_newOwner] = ownerCrySolObjectsCount[_newOwner].add(1); // increase count for the new OWNER\r\n\r\n            ETHOfCrySolObjects = ETHOfCrySolObjects.sub(crySolObjects[_id].price);\r\n            crySolObjects[_id].price = calculateNextPrice(crySolObjects[_id].price); // now, calculate and update next price\r\n            ETHOfCrySolObjects = ETHOfCrySolObjects.add(crySolObjects[_id].price);\r\n    }\r\n    \r\n\r\n\r\n\r\n    /**\r\n    ** @dev this method is used to BUY CrySol Objects in the game, defining what will happen with the next price\r\n    **/\r\n    function buyCrySolObject(uint _id) external payable {\r\n\r\n            CrySolObject storage _obj = crySolObjects[_id];\r\n            uint256 price = _obj.price;\r\n            address oldOwner = _obj.owner; // seller\r\n            address newOwner = msg.sender; // buyer\r\n\r\n            require(msg.value >= price);\r\n            require(msg.sender != _obj.owner); // can't buy again the same thing!\r\n\r\n            uint256 excess = msg.value.sub(price);\r\n            \r\n            // calculate if percentage will go to parent Object owner \r\n            crySolObjects[_obj.parentID].owner.transfer(returnParentObjectCut(_obj, price));\r\n\r\n            // Transfer payment to old owner minus the developer's cut, parent owner's cut and any special Object's cut.\r\n             uint256 _oldOwnerCut = 0;\r\n            _oldOwnerCut = price.sub(returnDevelopersCut(price));\r\n            _oldOwnerCut = _oldOwnerCut.sub(returnParentObjectCut(_obj, price));\r\n            oldOwner.transfer(_oldOwnerCut);\r\n\r\n            // if there was excess in payment, return that to newOwner buying Object!\r\n            if (excess > 0) {\r\n                newOwner.transfer(excess);\r\n            }\r\n\r\n            //if the sell object has special property, we have to update ownerAddPercentToParent for owners addresses\r\n            // 0=NONE, 1=PARENT_UP\r\n            if (_obj.specialPropertyType == 1) {\r\n                if (oldOwner != ownerAddress) {\r\n                    ownerAddPercentToParent[oldOwner] = ownerAddPercentToParent[oldOwner].sub(_obj.specialPropertyValue);\r\n                }\r\n                ownerAddPercentToParent[newOwner] = ownerAddPercentToParent[newOwner].add(_obj.specialPropertyValue);\r\n            } \r\n\r\n            _transferOwnershipOnBuy(oldOwner, _id, newOwner);\r\n            \r\n            // fire event\r\n            EventSolethiumObjectBought(oldOwner, newOwner, price);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n    ** @dev this method is used to SET user's nickname\r\n    **/\r\n    function setOwnerNickName(address _owner, string _nickName) external {\r\n        require(msg.sender == _owner);\r\n        ownerToNickname[_owner] = _nickName; // set nickname\r\n    }\r\n\r\n    /**\r\n    ** @dev this method is used to GET user's nickname\r\n    **/\r\n    function getOwnerNickName(address _owner) external view returns(string) {\r\n        return ownerToNickname[_owner];\r\n    }\r\n\r\n    /**\r\n    ** @dev some helper / info getter functions\r\n    **/\r\n    function getContractOwner() external view returns(address) {\r\n        return ownerAddress; \r\n    }\r\n    function getBalance() external view returns(uint) {\r\n        return this.balance;\r\n    }\r\n    function getNumberOfCrySolObjects() external view returns(uint16) {\r\n        return numberOfCrySolObjects;\r\n    }\r\n\r\n\r\n    /*\r\n        @dev Withdraw All or part of contract balance to Contract Owner address\r\n    */\r\n    function withdrawAll() onlyOwner() public {\r\n        ownerAddress.transfer(this.balance);\r\n    }\r\n    function withdrawAmount(uint256 _amount) onlyOwner() public {\r\n        ownerAddress.transfer(_amount);\r\n    }\r\n\r\n\r\n    /**\r\n    ** @dev this method is used to modify parentID if needed later;\r\n    **      For this game it is very important to keep intended hierarchy; you never know WHEN exactly transaction will be confirmed in the blockchain\r\n    **      Every Object creation is transaction; if by some accident Objects get \"wrong\" ID in the crySolObjects array, this is the method where we can adjust parentId\r\n    **      for objects orbiting it (we don't want for Moon to end up orbiting Mars :) )\r\n    **/\r\n    function setParentID (uint _crySolObjectID, uint16 _parentID) external onlyOwner() {\r\n        crySolObjects[_crySolObjectID].parentID = _parentID;\r\n    }\r\n\r\n\r\n   /**\r\n   **  @dev ERC-721 compliant methods;\r\n   ** Another contracts can simply talk to us without needing to know anything about our internal contract implementation \r\n   **/\r\n\r\n     mapping (uint => address) crySolObjectsApprovals;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _id);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _id);\r\n\r\n    function name() public pure returns (string _name) {\r\n        return \"Solethium\";\r\n    }\r\n\r\n    function symbol() public pure returns (string _symbol) {\r\n        return \"SOL\";\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 _totalSupply) {\r\n        return crySolObjects.length;\r\n    } \r\n\r\n    function balanceOf(address _owner) public view returns (uint256 _balance) {\r\n        return ownerCrySolObjectsCount[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _id) public view returns (address _owner) {\r\n        return crySolObjects[_id].owner;\r\n    }\r\n\r\n    function _transferHelper(address _from, address _to, uint256 _id) private {\r\n        ownerCrySolObjectsCount[_to] = ownerCrySolObjectsCount[_to].add(1);\r\n        ownerCrySolObjectsCount[_from] = ownerCrySolObjectsCount[_from].sub(1);\r\n        crySolObjects[_id].owner = _to;\r\n        Transfer(_from, _to, _id); // fire event\r\n    }\r\n\r\n      function transfer(address _to, uint256 _id) public onlyOwnerOf(_id) {\r\n        _transferHelper(msg.sender, _to, _id);\r\n    }\r\n\r\n    function approve(address _to, uint256 _id) public onlyOwnerOf(_id) {\r\n        require(msg.sender != _to);\r\n        crySolObjectsApprovals[_id] = _to;\r\n        Approval(msg.sender, _to, _id); // fire event\r\n    }\r\n\r\n    function takeOwnership(uint256 _id) public {\r\n        require(crySolObjectsApprovals[_id] == msg.sender);\r\n        _transferHelper(ownerOf(_id), msg.sender, _id);\r\n    }\r\n\r\n   \r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerCrySolObjectsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_nickName\",\"type\":\"string\"}],\"name\":\"setOwnerNickName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"buyCrySolObject\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfCrySolObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerAddPercentToParent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerNickName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getCrySolObjectsByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllCrySolObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_parentID\",\"type\":\"uint16\"},{\"name\":\"_percentWhenParent\",\"type\":\"uint16\"},{\"name\":\"_specialPropertyType\",\"type\":\"uint8\"},{\"name\":\"_specialPropertyValue\",\"type\":\"uint8\"}],\"name\":\"createCrySolObject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerToNickname\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfCrySolObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateNextPrice\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crySolObjectID\",\"type\":\"uint256\"},{\"name\":\"_parentID\",\"type\":\"uint16\"}],\"name\":\"setParentID\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHOfCrySolObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crySolObjects\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"parentID\",\"type\":\"uint16\"},{\"name\":\"percentWhenParent\",\"type\":\"uint16\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"specialPropertyType\",\"type\":\"uint8\"},{\"name\":\"specialPropertyValue\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"EventSolethiumObjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"EventSolethiumObjectBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Solethium","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c9194a4ba85575f521920251006ceca55b8448ba5540386bcbb0b141d838beb4"}]}