{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ethercrowdfund {\r\n\r\nIdea[] public ideas;\r\n\r\nuint256 public PROPOSED_STATUS;\r\nuint256 public UNDERWAY_STATUS;\r\nuint256 public SUFFICIENT_STATUS;\r\nuint256 public FAILED_STATUS;\r\nuint256 public REQUEST_CANCELED_BY_CREATOR;\r\nuint256 public REQUEST_REJECTED_BY_HOST; \r\nuint256 public DISTRIBUTED_STATUS; \r\n\r\nuint256 public MAX_FUNDING_AMOUNT;\r\nuint256 public MAX_HOST_PERCENT;\r\n\r\nevent ProposalCreatedAtIndex(uint256 index);\r\nevent SetNewCreator(address newCreator,uint256 index);\r\nevent ProposalCanceledByCreatorAtIndex(uint256 index);\r\nevent ProposalCanceledByHostAtIndex(uint256 index);\r\nevent ProposalAcceptedAtIndex(uint256 index);\r\nevent UserPledgedAmountAtIndex(address user,uint256 amount,uint256 index);\r\nevent ProposalAtIndexFailed(uint256 index);\r\nevent UserRegainedAmountAtIndex(address user,uint256 amount,uint256 index);\r\nevent EthDistributed(uint256 hostCut,uint256 creatorCut,uint256 index);\r\nevent MaxGoalReachedAtIndex(uint256 hostCut,uint256 creatorCut,uint256 index);\r\nevent SufficientFundingReached(uint256 index);\r\n\r\nstruct Idea {\r\n\tstring title;\r\n\tuint256 minGoal;\r\n\tuint256 maxGoal;\r\n\tuint256 hostCut;\r\n\tuint256 duration;\r\n\tuint256 startTime;\r\n\tuint256 status;\r\n\tuint256 amountRaisedSoFar;\r\n\taddress host;\r\n\taddress creator;\r\n\tmapping(address => uint256) amountPledged;\r\n\tmapping(address => bool) reclaimed;\r\n}\r\n\r\nfunction ethercrowdfund() {\r\n\tPROPOSED_STATUS=1;\r\n\tUNDERWAY_STATUS=2;\r\n\tSUFFICIENT_STATUS=3;\r\n\tFAILED_STATUS=4;\r\n\tREQUEST_CANCELED_BY_CREATOR=5;\r\n\tREQUEST_REJECTED_BY_HOST=6;\r\n\tDISTRIBUTED_STATUS=7;\r\n\r\n\tMAX_FUNDING_AMOUNT = 100000000000000000000000000000;\r\n\tMAX_HOST_PERCENT=100000000000000000000;\r\n}\r\n\r\nfunction makeProposal(string title,uint256 minGoal,uint256 maxGoal,uint256 hostCut,uint256 duration,address host) public returns(uint256)\t{\r\n\r\n\tif (maxGoal==0 || minGoal==0 || maxGoal>MAX_FUNDING_AMOUNT) revert(); \r\n\tif (minGoal>maxGoal) revert();\r\n\tif (hostCut>MAX_HOST_PERCENT) revert();\r\n\tif (duration<5 || duration>225257142) revert(); \r\n\t\r\n\tuint256 status=PROPOSED_STATUS;\r\n\taddress creator=msg.sender;\r\n\t\r\n\tIdea memory newIdea=Idea(title,minGoal,maxGoal,hostCut,duration,0,status,0,host,creator);\r\n\tideas.push(newIdea);\r\n\t\r\n\temit ProposalCreatedAtIndex(ideas.length-1);\r\n\treturn ideas.length-1; \r\n}\r\n\r\nfunction setNewCreator(address newCreator,uint256 index) public returns(bool)\t{\r\n\tif (ideas[index].creator==msg.sender && ideas[index].status==PROPOSED_STATUS)\t{\r\n\t\tideas[index].creator=newCreator;\r\n\t\temit SetNewCreator(newCreator,index);\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nfunction cancelProposalByCreator(uint256 index) public\t{\r\n \tif (msg.sender==ideas[index].creator && ideas[index].status==PROPOSED_STATUS)\t{\r\n \t\tideas[index].status=REQUEST_CANCELED_BY_CREATOR;\r\n \t\temit ProposalCanceledByCreatorAtIndex(index);\r\n \t}\r\n}\r\n\r\nfunction rejectProposalAsHost(uint256 index) public\t{\r\n\tif (msg.sender==ideas[index].host && ideas[index].status==PROPOSED_STATUS)\t{\r\n\t\tideas[index].status=REQUEST_REJECTED_BY_HOST;\r\n\t\temit ProposalCanceledByHostAtIndex(index);\r\n\t}\r\n}\r\n\r\nfunction acceptProposal(uint256 index,address currCreator) public returns(bool)\t{\r\n\tif (ideas[index].status==PROPOSED_STATUS && msg.sender==ideas[index].host && currCreator==ideas[index].creator)\t{\r\n\t\tideas[index].status=UNDERWAY_STATUS;\r\n\t\tideas[index].startTime=block.number;\r\n\t\temit ProposalAcceptedAtIndex(index);\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nfunction maxGoalReached(uint256 index) private {\r\n\tideas[index].status=DISTRIBUTED_STATUS;\r\n\tuint256 hostCut;\r\n\tuint256 creatorCut;\r\n\t(hostCut, creatorCut) = returnHostAndCreatorCut(index);\r\n\temit MaxGoalReachedAtIndex(hostCut,creatorCut,index);\r\n\tideas[index].host.transfer(hostCut);\r\n\tideas[index].creator.transfer(creatorCut);\r\n}\r\n\r\nfunction distributeSuccessfulCampaignEth(uint256 index) public\t{\r\n\tif ((msg.sender==ideas[index].creator) || (msg.sender==ideas[index].host))\t{\r\n\t\tif (ideas[index].status==SUFFICIENT_STATUS && block.number> SafeMath.add(ideas[index].startTime,ideas[index].duration) )\t{\r\n\t\t\tuint256 hostCut;\r\n\t\t\tuint256 creatorCut;\r\n\t\t\t(hostCut, creatorCut) = returnHostAndCreatorCut(index);\r\n\t\t\tideas[index].status=DISTRIBUTED_STATUS;\r\n\t\t\temit EthDistributed(hostCut,creatorCut,index);\r\n\t\t\tideas[index].host.transfer(hostCut);\r\n\t\t\tideas[index].creator.transfer(creatorCut);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction returnHostAndCreatorCut(uint256 index) private returns(uint256, uint256)\t{\r\n\tuint256 hostCut = SafeMath.div( SafeMath.mul(ideas[index].amountRaisedSoFar, ideas[index].hostCut), MAX_HOST_PERCENT );\r\n\tuint256 creatorCut = SafeMath.sub(ideas[index].amountRaisedSoFar, hostCut );\r\n\treturn ( hostCut, creatorCut );\r\n}\r\n\r\nfunction stateFail(uint256 index) public\t{\r\n\tif (block.number> SafeMath.add(ideas[index].startTime,ideas[index].duration) && ideas[index].amountRaisedSoFar<ideas[index].minGoal && ideas[index].status==UNDERWAY_STATUS) {\r\n\t\tideas[index].status=FAILED_STATUS;\r\n\t\temit ProposalAtIndexFailed(index);\r\n\t}\r\n}\r\n\r\nfunction reclaimEth(uint256 index) public\t{\r\n\tif (ideas[index].status==FAILED_STATUS)\t{\r\n\t    if (!ideas[index].reclaimed[msg.sender])    { \r\n\t        uint256 reclaimAmount=ideas[index].amountPledged[msg.sender];\r\n\t\t    if (reclaimAmount>0)    { \r\n\t\t    \tideas[index].reclaimed[msg.sender]=true; \r\n\t\t        emit UserRegainedAmountAtIndex(msg.sender,reclaimAmount,index);\r\n\t\t        msg.sender.transfer(reclaimAmount);\r\n\t\t    }\r\n\t    }\r\n\t}\r\n}\r\n\r\nfunction redistributeEthForAddresses(uint256 index,address[] addresses) public\t{\r\n\tif ((msg.sender==ideas[index].creator) || (msg.sender==ideas[index].host))\t{\r\n\t\tif (ideas[index].status==FAILED_STATUS)\t{\r\n\t\t\tfor(uint256 i = 0; i < addresses.length; i++) {\r\n\t\t\t\taddress addr=addresses[i];\r\n\t    \t\tif (!ideas[index].reclaimed[addr])    { \r\n\t        \t\tuint256 reclaimAmount=ideas[index].amountPledged[addr];\r\n\t\t    \t\tif (reclaimAmount>0)    { \r\n\t\t    \t\t\tideas[index].reclaimed[addr]=true; \r\n\t\t        \t\temit UserRegainedAmountAtIndex(addr,reclaimAmount,index);\r\n\t\t        \t\taddr.transfer(reclaimAmount);\r\n\t\t    \t\t}\r\n\t    \t\t}\r\n\t    \t}    \r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction pledgeEth(uint256 index) payable returns(bool)\t{\r\n\tuint256 amount=msg.value;\r\n    if (msg.sender==ideas[index].creator || msg.sender==ideas[index].host) revert(); \r\n    if (amount==0 || amount>MAX_FUNDING_AMOUNT) revert(); \r\n\tif ((ideas[index].status==UNDERWAY_STATUS) || (ideas[index].status==SUFFICIENT_STATUS))\t{ \r\n\t    if (block.number<= SafeMath.add(ideas[index].startTime, ideas[index].duration))   { \r\n\t        uint256 amountAvailable= SafeMath.sub(ideas[index].maxGoal, ideas[index].amountRaisedSoFar); \r\n\t\t\tif (amount>amountAvailable)\trevert(); \r\n\t\t\tideas[index].amountRaisedSoFar = SafeMath.add(ideas[index].amountRaisedSoFar, amount); \r\n\t\t\tideas[index].amountPledged[msg.sender] = SafeMath.add(ideas[index].amountPledged[msg.sender], amount); \r\n\t\t\tif (ideas[index].amountRaisedSoFar==ideas[index].maxGoal)  { \r\n\t\t\t    maxGoalReached(index); \r\n\t\t\t}\r\n\t\t\telse if ((ideas[index].amountRaisedSoFar>=ideas[index].minGoal) && (ideas[index].status==UNDERWAY_STATUS))   { \r\n\t\t\t   ideas[index].status=SUFFICIENT_STATUS;\r\n\t\t\t   emit SufficientFundingReached(index);\r\n\t\t\t}\r\n\t\t\temit UserPledgedAmountAtIndex(msg.sender,amount,index);\r\n\t\t\treturn true;\r\n\t    } \r\n\t}\r\n\treturn false;\r\n}\r\n\r\nfunction returnMinGoal(uint256 index) public returns(uint256)\t{\r\n\treturn ideas[index].minGoal;\r\n}\r\n\r\nfunction returnMaxGoal(uint256 index) public returns(uint256)\t{\r\n\treturn ideas[index].maxGoal;\r\n}\r\n\r\nfunction returnHostCut(uint256 index) public returns(uint256)\t{\r\n\treturn ideas[index].hostCut;\r\n}\r\n\r\nfunction returnDuration(uint256 index) public returns(uint256)\t{\r\n\treturn ideas[index].duration;\r\n}\r\n\r\nfunction returnStartTime(uint256 index) public returns(uint256)\t{\r\n\treturn ideas[index].startTime;\r\n}\r\n\r\nfunction returnStatus(uint256 index) public returns(uint256)\t{\r\n\treturn ideas[index].status;\r\n}\r\n\r\nfunction returnAmountRaisedSoFar(uint256 index) public returns(uint256)\t{\r\n\treturn ideas[index].amountRaisedSoFar;\r\n}\r\n\r\nfunction returnHost(uint256 index) public returns(address)\t{\r\n\treturn ideas[index].host;\r\n}\r\n\r\nfunction returnCreator(uint256 index) public returns(address)\t{\r\n\treturn ideas[index].creator;\r\n}\r\n\r\nfunction returnAmountPledged(uint256 index,address addr) public returns(uint256)\t{\r\n\treturn ideas[index].amountPledged[addr];\r\n}\r\n\r\nfunction returnReclaimed(uint256 index,address addr) public returns(bool)\t{\r\n\treturn ideas[index].reclaimed[addr];\r\n}\t\r\n\r\nfunction getProposalsCount() public returns(uint256) {\r\n    return ideas.length;\r\n}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"DISTRIBUTED_STATUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REQUEST_CANCELED_BY_CREATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"pledgeEth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"returnHost\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUFFICIENT_STATUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_HOST_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"returnStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"stateFail\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FAILED_STATUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"returnDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"returnCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"returnReclaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"returnMaxGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"returnHostCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROPOSED_STATUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"minGoal\",\"type\":\"uint256\"},{\"name\":\"maxGoal\",\"type\":\"uint256\"},{\"name\":\"hostCut\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"host\",\"type\":\"address\"}],\"name\":\"makeProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ideas\",\"outputs\":[{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"minGoal\",\"type\":\"uint256\"},{\"name\":\"maxGoal\",\"type\":\"uint256\"},{\"name\":\"hostCut\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint256\"},{\"name\":\"amountRaisedSoFar\",\"type\":\"uint256\"},{\"name\":\"host\",\"type\":\"address\"},{\"name\":\"creator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getProposalsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"setNewCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"cancelProposalByCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_FUNDING_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"distributeSuccessfulCampaignEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"rejectProposalAsHost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"returnAmountPledged\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"currCreator\",\"type\":\"address\"}],\"name\":\"acceptProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"reclaimEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"returnMinGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"redistributeEthForAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"returnStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REQUEST_REJECTED_BY_HOST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNDERWAY_STATUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"returnAmountRaisedSoFar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ProposalCreatedAtIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newCreator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"SetNewCreator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceledByCreatorAtIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceledByHostAtIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ProposalAcceptedAtIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"UserPledgedAmountAtIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ProposalAtIndexFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"UserRegainedAmountAtIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hostCut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creatorCut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"EthDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hostCut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creatorCut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"MaxGoalReachedAtIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"SufficientFundingReached\",\"type\":\"event\"}]","ContractName":"ethercrowdfund","CompilerVersion":"v0.4.25-nightly.2018.6.27+commit.b67dfa15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fd5b923c97ec586405185c7b7a6032eda04477bcf8119f61ea162460dd8a0922"}]}