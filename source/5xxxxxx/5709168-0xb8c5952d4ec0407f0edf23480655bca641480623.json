{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    event LogNew(address indexed old, address indexed current);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) onlyOwner public {\r\n        emit LogNew(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract IMoneyManager {\r\n    function payTo(address _participant, uint256 _revenue) payable public returns(bool);\r\n}\r\n\r\ncontract Game is Owned {\r\n    using SafeMath for uint256;\r\n    \r\n    // The address of the owner \r\n    address public ownerWallet;\r\n    // The address of the activator\r\n    mapping(address => bool) internal activator;\r\n    \r\n    // Constants\r\n    uint256 public constant BET = 10 finney; //0.01 ETH\r\n    uint8 public constant ODD = 1;\r\n    uint8 public constant EVEN = 2;\r\n    uint8 public constant noBets = 3;\r\n    uint256 public constant COMMISSION_PERCENTAGE = 10;\r\n    uint256 public constant END_DURATION_BETTING_BLOCK = 5520;\r\n    uint256 public constant TARGET_DURATION_BETTING_BLOCK = 5760;\r\n\t\r\n\tuint256 public constant CONTRACT_VERSION = 201805311200;\r\n    \r\n    // The address of the moneyManager\r\n    address public moneyManager;\r\n    \r\n    // Array which stores the target blocks\r\n    uint256[] targetBlocks;\r\n    \r\n    // Mappings\r\n    mapping(address => Participant) public participants;\r\n\r\n    mapping(uint256 => mapping(uint256 => uint256)) oddAndEvenBets; // Stores the msg.value for the block and the bet (odd or even)\r\n\r\n    mapping(uint256 => uint256) blockResult; // Stores if the blockhash's last char is odd or even\r\n    mapping(uint256 => bytes32) blockHash; // Stores the hash of block (block.number)\r\n\r\n    mapping(uint256 => uint256) blockRevenuePerTicket; // Stores the amount of the revenue per person for given block\r\n    mapping(uint256 => bool) isBlockRevenueCalculated; // Stores if the blocks revenue is calculated\r\n\r\n    mapping(uint256 => uint256) comissionsAtBlock; // Stores the commision amount for given block\r\n    \r\n    // Public variables\r\n    uint256 public _startBetBlock;\r\n    uint256 public _endBetBlock;\r\n\r\n    uint256 public _targetBlock;\r\n    \r\n    // Modifiers\r\n    modifier afterBlock(uint256 _blockNumber) {\r\n        require(block.number >= _blockNumber);\r\n        _;\r\n    }\r\n\r\n    modifier onlyActivator(address _activator) {\r\n        require(activator[_activator] == true);\r\n        _;\r\n    }\r\n    \r\n    // Structures\r\n    struct Participant {\r\n        mapping(uint256 => Bet) bets;\r\n        bool isParticipated;\r\n    }\r\n\r\n    struct Bet {\r\n        uint256 ODDBets;\r\n\t\tuint256 EVENBets;\r\n        bool isRevenuePaid;\r\n    }\r\n    \r\n    /** @dev Constructor \r\n      * @param _moneyManager The address of the money manager.\r\n      * @param _ownerWallet The address of the owner.\r\n      * \r\n      */\r\n    constructor(address _moneyManager, address _ownerWallet) public {\r\n        setMoneyManager(_moneyManager);\r\n        setOwnerWallet(_ownerWallet);\r\n    }\r\n    \r\n    /** @dev Fallback function.\r\n      * Provides functionality for person to bet.\r\n      */\r\n    function() payable public {\r\n        bet(getBlockHashOddOrEven(block.number - 128), msg.value.div(BET));\r\n    }\r\n    \r\n    /** @dev Function which activates the cycle. \r\n      * Only the activator can call the function.\r\n      * @param _startBlock The starting block of the game.\r\n      * Set the starting block from which the participants can start to bet for target block.\r\n      * Set the end block to which the participants can bet fot target block. \r\n      * Set the target block for which the participants will bet.\r\n      * @return success Is the activation of the cycle successful.\r\n      */\r\n    function activateCycle(uint256 _startBlock) public onlyActivator(msg.sender) returns (bool _success) {\r\n        if (_startBlock == 0) {\r\n            _startBlock = block.number;\r\n        }\r\n        require(block.number >= _endBetBlock);\r\n\r\n        _startBetBlock = _startBlock;\r\n        _endBetBlock = _startBetBlock.add(END_DURATION_BETTING_BLOCK);\r\n\r\n        _targetBlock = _startBetBlock.add(TARGET_DURATION_BETTING_BLOCK);\r\n        targetBlocks.push(_targetBlock);\r\n\r\n        return true;\r\n    }\r\n    \r\n    // Events\r\n    event LogBet(address indexed participant, uint256 blockNumber, uint8 oddOrEven, uint256 betAmount);\r\n    event LogNewParticipant(address indexed _newParticipant);\r\n    \r\n    /** @dev Function from which everyone can bet \r\n      * @param oddOrEven The number on which the participant want to bet (it is 1 - ODD or 2 - EVEN).\r\n      * @param betsAmount The amount of tickets the participant want to buy.\r\n      * @return success Is the bet successful.\r\n      */\r\n    function bet(uint8 oddOrEven, uint256 betsAmount) public payable returns (bool _success) {\r\n\t\trequire(betsAmount > 0);\r\n\t\tuint256 participantBet = betsAmount.mul(BET);\r\n\t\trequire(msg.value == participantBet);\r\n        require(oddOrEven == ODD || oddOrEven == EVEN);\r\n        require(block.number <= _endBetBlock && block.number >= _startBetBlock);\r\n\r\n\t\t// @dev - check if participant already betted\r\n\t\tif (participants[msg.sender].isParticipated == false) {\r\n\t\t\t// create new participant in memory\r\n\t\t\tParticipant memory newParticipant;\r\n\t\t\tnewParticipant.isParticipated = true;\r\n\t\t\t//save the participant to state\r\n\t\t\tparticipants[msg.sender] = newParticipant;\r\n\t\t\temit LogNewParticipant(msg.sender);\r\n\t\t}\r\n\t\t\r\n\t\tuint256 betTillNowODD = participants[msg.sender].bets[_targetBlock].ODDBets;\r\n\t\tuint256 betTillNowEVEN = participants[msg.sender].bets[_targetBlock].EVENBets;\r\n\t\tif(oddOrEven == ODD) {\r\n\t\t\tbetTillNowODD = betTillNowODD.add(participantBet);\r\n\t\t} else {\r\n\t\t\tbetTillNowEVEN = betTillNowEVEN.add(participantBet);\r\n\t\t}\r\n\t\tBet memory newBet = Bet({ODDBets : betTillNowODD, EVENBets: betTillNowEVEN, isRevenuePaid : false});\r\n\t\r\n        //save the bet\r\n        participants[msg.sender].bets[_targetBlock] = newBet;\r\n        // save the bet for the block\r\n        oddAndEvenBets[_targetBlock][oddOrEven] = oddAndEvenBets[_targetBlock][oddOrEven].add(msg.value);\r\n        address(moneyManager).transfer(msg.value);\r\n        emit LogBet(msg.sender, _targetBlock, oddOrEven, msg.value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    /** @dev Function which calculates the revenue for block.\r\n      * @param _blockNumber The block for which the revenie will be calculated.\r\n      */\r\n    function calculateRevenueAtBlock(uint256 _blockNumber) public afterBlock(_blockNumber) {\r\n        require(isBlockRevenueCalculated[_blockNumber] == false);\r\n        if(oddAndEvenBets[_blockNumber][ODD] > 0 || oddAndEvenBets[_blockNumber][EVEN] > 0) {\r\n            blockResult[_blockNumber] = getBlockHashOddOrEven(_blockNumber);\r\n            require(blockResult[_blockNumber] == ODD || blockResult[_blockNumber] == EVEN);\r\n            if (blockResult[_blockNumber] == ODD) {\r\n                calculateRevenue(_blockNumber, ODD, EVEN);\r\n            } else if (blockResult[_blockNumber] == EVEN) {\r\n                calculateRevenue(_blockNumber, EVEN, ODD);\r\n            }\r\n        } else {\r\n            isBlockRevenueCalculated[_blockNumber] = true;\r\n            blockResult[_blockNumber] = noBets;\r\n        }\r\n    }\r\n\r\n    event LogOddOrEven(uint256 blockNumber, bytes32 blockHash, uint256 oddOrEven);\r\n    \r\n    /** @dev Function which calculates the hash of the given block.\r\n      * @param _blockNumber The block for which the hash will be calculated.\r\n      * The function is called by the calculateRevenueAtBlock()\r\n      * @return oddOrEven\r\n      */\r\n    function getBlockHashOddOrEven(uint256 _blockNumber) internal returns (uint8 oddOrEven) {\r\n        blockHash[_blockNumber] = blockhash(_blockNumber);\r\n        uint256 result = uint256(blockHash[_blockNumber]);\r\n        uint256 lastChar = (result * 2 ** 252) / (2 ** 252);\r\n        uint256 _oddOrEven = lastChar % 2;\r\n\r\n        emit LogOddOrEven(_blockNumber, blockHash[_blockNumber], _oddOrEven);\r\n\r\n        if (_oddOrEven == 1) {\r\n            return ODD;\r\n        } else if (_oddOrEven == 0) {\r\n            return EVEN;\r\n        }\r\n    }\r\n\r\n    event LogRevenue(uint256 blockNumber, uint256 winner, uint256 revenue);\r\n    \r\n    /** @dev Function which calculates the revenue of given block.\r\n      * @param _blockNumber The block for which the revenue will be calculated.\r\n      * @param winner The winner bet (1 - odd or 2 - even).\r\n      * @param loser The loser bet (2 even or 1 - odd).\r\n      * The function is called by the calculateRevenueAtBlock()\r\n      */\r\n    function calculateRevenue(uint256 _blockNumber, uint256 winner, uint256 loser) internal {\r\n        uint256 revenue = oddAndEvenBets[_blockNumber][loser];\r\n        if (oddAndEvenBets[_blockNumber][ODD] != 0 && oddAndEvenBets[_blockNumber][EVEN] != 0) {\r\n            uint256 comission = (revenue.div(100)).mul(COMMISSION_PERCENTAGE);\r\n            revenue = revenue.sub(comission);\r\n            comissionsAtBlock[_blockNumber] = comission;\r\n            IMoneyManager(moneyManager).payTo(ownerWallet, comission);\r\n            uint256 winners = oddAndEvenBets[_blockNumber][winner].div(BET);\r\n            blockRevenuePerTicket[_blockNumber] = revenue.div(winners);\r\n        }\r\n        isBlockRevenueCalculated[_blockNumber] = true;\r\n        emit LogRevenue(_blockNumber, winner, revenue);\r\n    }\r\n\r\n    event LogpayToRevenue(address indexed participant, uint256 blockNumber, bool revenuePaid);\r\n    \r\n    /** @dev Function which allows the participants to withdraw their revenue.\r\n      * @param _blockNumber The block for which the participants will withdraw their revenue.\r\n      * @return _success Is the revenue withdrawn successfully.\r\n      */\r\n    function withdrawRevenue(uint256 _blockNumber) public returns (bool _success) {\r\n        require(participants[msg.sender].bets[_blockNumber].ODDBets > 0 || participants[msg.sender].bets[_blockNumber].EVENBets > 0);\r\n        require(participants[msg.sender].bets[_blockNumber].isRevenuePaid == false);\r\n        require(isBlockRevenueCalculated[_blockNumber] == true);\r\n\r\n        if (oddAndEvenBets[_blockNumber][ODD] == 0 || oddAndEvenBets[_blockNumber][EVEN] == 0) {\r\n\t\t\tif(participants[msg.sender].bets[_blockNumber].ODDBets > 0) {\r\n\t\t\t\tIMoneyManager(moneyManager).payTo(msg.sender, participants[msg.sender].bets[_blockNumber].ODDBets);\r\n\t\t\t}else{\r\n\t\t\t\tIMoneyManager(moneyManager).payTo(msg.sender, participants[msg.sender].bets[_blockNumber].EVENBets);\r\n\t\t\t}\r\n            participants[msg.sender].bets[_blockNumber].isRevenuePaid = true;\r\n            emit LogpayToRevenue(msg.sender, _blockNumber, participants[msg.sender].bets[_blockNumber].isRevenuePaid);\r\n\r\n            return participants[msg.sender].bets[_blockNumber].isRevenuePaid;\r\n        }\r\n        // @dev - initial revenue to be paid\r\n        uint256 _revenue = 0;\r\n        uint256 counter = 0;\r\n\t\tuint256 totalPayment = 0;\r\n        if (blockResult[_blockNumber] == ODD) {\r\n\t\t\tcounter = (participants[msg.sender].bets[_blockNumber].ODDBets).div(BET);\r\n            _revenue = _revenue.add(blockRevenuePerTicket[_blockNumber].mul(counter));\r\n        } else if (blockResult[_blockNumber] == EVEN) {\r\n\t\t\tcounter = (participants[msg.sender].bets[_blockNumber].EVENBets).div(BET);\r\n           _revenue = _revenue.add(blockRevenuePerTicket[_blockNumber].mul(counter));\r\n        }\r\n\t\ttotalPayment = _revenue.add(BET.mul(counter));\r\n        // pay the revenue\r\n        IMoneyManager(moneyManager).payTo(msg.sender, totalPayment);\r\n        participants[msg.sender].bets[_blockNumber].isRevenuePaid = true;\r\n\r\n        emit LogpayToRevenue(msg.sender, _blockNumber, participants[msg.sender].bets[_blockNumber].isRevenuePaid);\r\n        return participants[msg.sender].bets[_blockNumber].isRevenuePaid;\r\n    }\r\n    \r\n    /** @dev Function which set the activator of the cycle.\r\n      * Only owner can call the function.\r\n      */\r\n    function setActivator(address _newActivator) onlyOwner public returns(bool) {\r\n        require(activator[_newActivator] == false);\r\n        activator[_newActivator] = true;\r\n        return activator[_newActivator];\r\n    }\r\n    \r\n    /** @dev Function which remove the activator.\r\n      * Only owner can call the function.\r\n      */\r\n    function removeActivator(address _Activator) onlyOwner public returns(bool) {\r\n        require(activator[_Activator] == true);\r\n        activator[_Activator] = false;\r\n        return true;\r\n    }\r\n    \r\n    /** @dev Function which set the owner of the wallet.\r\n      * Only owner can call the function.\r\n      * Called when the contract is deploying.\r\n      */\r\n    function setOwnerWallet(address _newOwnerWallet) public onlyOwner {\r\n        emit LogNew(ownerWallet, _newOwnerWallet);\r\n        ownerWallet = _newOwnerWallet;\r\n    }\r\n    \r\n    /** @dev Function which set the money manager.\r\n      * Only owner can call the function.\r\n      * Called when contract is deploying.\r\n      */\r\n    function setMoneyManager(address _moneyManager) public onlyOwner {\r\n        emit LogNew(moneyManager, _moneyManager);\r\n        moneyManager = _moneyManager;\r\n    }\r\n    \r\n    function getActivator(address _isActivator) public view returns(bool) {\r\n        return activator[_isActivator];\r\n    }\r\n    \r\n    /** @dev Function for getting the current block.\r\n      * @return _blockNumber\r\n      */\r\n    function getblock() public view returns (uint256 _blockNumber){\r\n        return block.number;\r\n    }\r\n\r\n    /** @dev Function for getting the current cycle info\r\n      * @return startBetBlock, endBetBlock, targetBlock\r\n      */\r\n    function getCycleInfo() public view returns (uint256 startBetBlock, uint256 endBetBlock, uint256 targetBlock){\r\n        return (\r\n        _startBetBlock,\r\n        _endBetBlock,\r\n        _targetBlock);\r\n    }\r\n    \r\n    /** @dev Function for getting the given block hash\r\n      * @param _blockNumber The block number of which you want to check hash.\r\n      * @return _blockHash\r\n      */\r\n    function getBlockHash(uint256 _blockNumber) public view returns (bytes32 _blockHash) {\r\n        return blockHash[_blockNumber];\r\n    }\r\n    \r\n    /** @dev Function for getting the bets for ODD and EVEN.\r\n      * @param _participant The address of the participant whose bets you want to check.\r\n      * @param _blockNumber The block for which you want to check.\r\n      * @return _oddBets, _evenBets\r\n      */\r\n    function getBetAt(address _participant, uint256 _blockNumber) public view returns (uint256 _oddBets, uint256 _evenBets){\r\n        return (participants[_participant].bets[_blockNumber].ODDBets, participants[_participant].bets[_blockNumber].EVENBets);\r\n    }\r\n    \r\n    /** @dev Function for getting the block result if it is ODD or EVEN.\r\n      * @param _blockNumber The block for which you want to get the result.\r\n      * @return _oddOrEven\r\n      */\r\n    function getBlockResult(uint256 _blockNumber) public view returns (uint256 _oddOrEven){\r\n        return blockResult[_blockNumber];\r\n    }\r\n    \r\n    /** @dev Function for getting the wei amount for given block.\r\n      * @param _blockNumber The block for which you want to get wei amount.\r\n      * @param _blockOddOrEven The block which is odd or even.\r\n      * @return _weiAmountAtStage\r\n      */\r\n    function getoddAndEvenBets(uint256 _blockNumber, uint256 _blockOddOrEven) public view returns (uint256 _weiAmountAtStage) {\r\n        return oddAndEvenBets[_blockNumber][_blockOddOrEven];\r\n    }\r\n    \r\n    /** @dev Function for checking if the given address participated in given block.\r\n      * @param _participant The participant whose participation we are going to check.\r\n      * @param _blockNumber The block for which we will check the participation.\r\n      * @return _isParticipate\r\n      */\r\n    function getIsParticipate(address _participant, uint256 _blockNumber) public view returns (bool _isParticipate) {\r\n        return (participants[_participant].bets[_blockNumber].ODDBets > 0 || participants[_participant].bets[_blockNumber].EVENBets > 0);\r\n    }\r\n    \r\n     /** @dev Function for getting the block revenue per ticket.\r\n      * @param _blockNumber The block for which we will calculate revenue per ticket.\r\n      * @return _revenue\r\n      */\r\n    function getblockRevenuePerTicket(uint256 _blockNumber) public view returns (uint256 _revenue) {\r\n        return blockRevenuePerTicket[_blockNumber];\r\n    }\r\n    \r\n    /** @dev Function which tells us is the revenue for given block is calculated.\r\n      * @param _blockNumber The block for which we will check.\r\n      * @return _isCalculated\r\n      */\r\n    function getIsBlockRevenueCalculated(uint256 _blockNumber) public view returns (bool _isCalculated) {\r\n        return isBlockRevenueCalculated[_blockNumber];\r\n    }\r\n    \r\n    /** @dev Function which tells us is the revenue for given block is paid.\r\n      * @param _blockNumber The block for which we will check.\r\n      * @return _isPaid\r\n      */\r\n    function getIsRevenuePaid(address _participant, uint256 _blockNumber) public view returns (bool _isPaid) {\r\n        return participants[_participant].bets[_blockNumber].isRevenuePaid;\r\n    }\r\n    \r\n    /** @dev Function which will return the block commission.\r\n      * @param _blockNumber The block for which we will get the commission.\r\n      * @return _comission\r\n      */\r\n    function getBlockComission(uint256 _blockNumber) public view returns (uint256 _comission) {\r\n        return comissionsAtBlock[_blockNumber];\r\n    }\r\n    \r\n    /** @dev Function which will return the ODD and EVEN bets.\r\n      * @param _blockNumber The block for which we will get the commission.\r\n      * @return _ODDBets, _EVENBets\r\n      */\r\n    function getBetsEvenAndODD(uint256 _blockNumber) public view returns (uint256 _ODDBets, uint256 _EVENBets) {\r\n        return (oddAndEvenBets[_blockNumber][ODD], oddAndEvenBets[_blockNumber][EVEN]);\r\n    }\r\n\r\n    /** @dev Function which will return the count of target blocks.\r\n      * @return _targetBlockLenght\r\n      */\r\n    function getTargetBlockLength() public view returns (uint256 _targetBlockLenght) {\r\n        return targetBlocks.length;\r\n    }\r\n    \r\n    /** @dev Function which will return the whole target blocks.\r\n      * @return _targetBlocks Array of target blocks\r\n      */\r\n    function getTargetBlocks() public view returns (uint256[] _targetBlocks) {\r\n        return targetBlocks;\r\n    }\r\n    \r\n    /** @dev Function which will return a specific target block at index.\r\n      * @param _index The index of the target block which we want to get.\r\n      * @return _targetBlockNumber\r\n      */\r\n    function getTargetBlock(uint256 _index) public view returns (uint256 _targetBlockNumber) {\r\n        return targetBlocks[_index];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getTargetBlockLength\",\"outputs\":[{\"name\":\"_targetBlockLenght\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ODD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participants\",\"outputs\":[{\"name\":\"isParticipated\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"withdrawRevenue\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_moneyManager\",\"type\":\"address\"}],\"name\":\"setMoneyManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMISSION_PERCENTAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getblockRevenuePerTicket\",\"outputs\":[{\"name\":\"_revenue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getIsParticipate\",\"outputs\":[{\"name\":\"_isParticipate\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getIsBlockRevenueCalculated\",\"outputs\":[{\"name\":\"_isCalculated\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVEN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"name\":\"_blockOddOrEven\",\"type\":\"uint256\"}],\"name\":\"getoddAndEvenBets\",\"outputs\":[{\"name\":\"_weiAmountAtStage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Activator\",\"type\":\"address\"}],\"name\":\"removeActivator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockResult\",\"outputs\":[{\"name\":\"_oddOrEven\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTargetBlocks\",\"outputs\":[{\"name\":\"_targetBlocks\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END_DURATION_BETTING_BLOCK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_endBetBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTargetBlock\",\"outputs\":[{\"name\":\"_targetBlockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newActivator\",\"type\":\"address\"}],\"name\":\"setActivator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oddOrEven\",\"type\":\"uint8\"},{\"name\":\"betsAmount\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCycleInfo\",\"outputs\":[{\"name\":\"startBetBlock\",\"type\":\"uint256\"},{\"name\":\"endBetBlock\",\"type\":\"uint256\"},{\"name\":\"targetBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockComission\",\"outputs\":[{\"name\":\"_comission\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moneyManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"activateCycle\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerWallet\",\"type\":\"address\"}],\"name\":\"setOwnerWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBetsEvenAndODD\",\"outputs\":[{\"name\":\"_ODDBets\",\"type\":\"uint256\"},{\"name\":\"_EVENBets\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_targetBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBetAt\",\"outputs\":[{\"name\":\"_oddBets\",\"type\":\"uint256\"},{\"name\":\"_evenBets\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_isActivator\",\"type\":\"address\"}],\"name\":\"getActivator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"noBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getblock\",\"outputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"calculateRevenueAtBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"name\":\"_blockHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TARGET_DURATION_BETTING_BLOCK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_startBetBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getIsRevenuePaid\",\"outputs\":[{\"name\":\"_isPaid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_moneyManager\",\"type\":\"address\"},{\"name\":\"_ownerWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oddOrEven\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"LogBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newParticipant\",\"type\":\"address\"}],\"name\":\"LogNewParticipant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"oddOrEven\",\"type\":\"uint256\"}],\"name\":\"LogOddOrEven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"revenue\",\"type\":\"uint256\"}],\"name\":\"LogRevenue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"revenuePaid\",\"type\":\"bool\"}],\"name\":\"LogpayToRevenue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"LogNew\",\"type\":\"event\"}]","ContractName":"Game","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005e7c0707beeb16ba3e5eb16248bc590abce8675c000000000000000000000000ca442489a0570a58fb2da8a64f1b331d4634ae10","Library":"","SwarmSource":"bzzr://69b0346067611f04d42b5bc63226df980df9cc97d56ef4946899edd622bf0843"}]}