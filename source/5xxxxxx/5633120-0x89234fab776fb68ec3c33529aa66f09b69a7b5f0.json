{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  // уточниьт у МЕноскоп про этот функционал  - убрали  передачу владения (по итогам встречи 20171128)\r\n  /*\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n  */\r\n}\r\n\r\n//Abstract contract for Calling ERC20 contract\r\ncontract AbstractCon {\r\n    function allowance(address _owner, address _spender)  public pure returns (uint256 remaining);\r\n    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\r\n    function token_rate() public returns (uint256);\r\n    function minimum_token_sell() public returns (uint16);\r\n    function decimals() public returns (uint8);\r\n    //function approve(address _spender, uint256 _value) public returns (bool); //test\r\n    //function transfer(address _to, uint256 _value) public returns (bool); //test\r\n    \r\n}\r\n\r\n//ProxyDeposit\r\ncontract SynergisProxyDeposit is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    ///////////////////////\r\n    // DATA STRUCTURES  ///\r\n    ///////////////////////\r\n    enum Role {Fund, Team, Adviser}\r\n    struct Partner {\r\n        Role roleInProject;\r\n        address account;\r\n        uint256  amount;\r\n    }\r\n\r\n    mapping (int16 => Partner)  public partners; //public for dubug only\r\n    mapping (address => uint8) public special_offer;// % of discount\r\n\r\n\r\n    /////////////////////////////////////////\r\n    // STAKE for partners    - fixed !!!   //\r\n    /////////////////////////////////////////\r\n    uint8 constant Stake_Team = 10;\r\n    uint8 constant Stake_Adv = 5;\r\n\r\n    string public constant name = \"SYNERGIS_TOKEN_CHANGE\";\r\n\r\n\r\n    uint8 public numTeamDeposits = 0; //public for dubug only\r\n    uint8 public numAdviserDeposits = 0; //public for dubug only\r\n    int16 public maxId = 1;// public for dubug only\r\n    uint256 public notDistributedAmount = 0;\r\n    uint256 public weiRaised; //All raised ether\r\n    address public ERC20address;\r\n\r\n    ///////////////////////\r\n    /// EVENTS     ///////\r\n    //////////////////////\r\n    event Income(address from, uint256 amount);\r\n    event NewDepositCreated(address _acc, Role _role, int16 _maxid);\r\n    event DeletedDeposit(address _acc, Role _role, int16 _maxid, uint256 amount);\r\n    event DistributeIncome(address who, uint256 notDistrAm, uint256 distrAm);\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 weivalue, uint256 tokens);\r\n    event FundsWithdraw(address indexed who, uint256 amount );\r\n    event DepositIncome(address indexed _deposit, uint256 _amount );\r\n    event SpecialOfferAdd(address _acc, uint16 _discount);\r\n    event SpecialOfferRemove(address _acc);\r\n     \r\n\r\n    //!!!! Fund Account address must be defind and provided in constructor\r\n    constructor (address fundAcc) public {\r\n        //costructor\r\n        require(fundAcc != address(0)); //Fund must exist\r\n        partners[0]=Partner(Role.Fund, fundAcc, 0);// Always must be Fund\r\n    }\r\n\r\n    function() public payable {\r\n        emit Income(msg.sender, msg.value);\r\n        sellTokens(msg.sender);\r\n    }\r\n\r\n        // low level token purchase function\r\n    function sellTokens(address beneficiary) internal  {  //public payable modificatros- for truffle tests only\r\n        uint256 weiAmount = msg.value; //local\r\n        notDistributedAmount = notDistributedAmount.add(weiAmount);//\r\n        AbstractCon ac = AbstractCon(ERC20address);\r\n        //calculate token amount for sell -!!!! must check on minimum_token_sell\r\n        uint256 tokens = weiAmount.mul(ac.token_rate()*(100+uint256(special_offer[beneficiary])))/100;\r\n        require(beneficiary != address(0));\r\n        require(ac.token_rate() > 0);//implicit enabling/disabling sell\r\n        require(tokens >= ac.minimum_token_sell()*(10 ** uint256(ac.decimals())));\r\n        require(ac.transferFrom(ERC20address, beneficiary, tokens));//!!!token sell/change\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        emit TokenPurchase(msg.sender, beneficiary, msg.value, tokens);\r\n    }\r\n\r\n    //set   erc20 address for token process  with check of allowance \r\n    function setERC20address(address currentERC20contract)  public onlyOwner {\r\n        require(address(currentERC20contract) != 0);\r\n        AbstractCon ac = AbstractCon(currentERC20contract);\r\n        require(ac.allowance(currentERC20contract, address(this))>0);\r\n        ERC20address = currentERC20contract;\r\n    }    \r\n\r\n    /////////////////////////////////////////\r\n    // PARTNERS DEPOSIT MANAGE          /////\r\n    /////////////////////////////////////////\r\n    //Create new deposit account\r\n    function newDeposit(Role _role, address _dep) public onlyOwner returns (int16){\r\n        require(getDepositID(_dep)==-1);//chek double\r\n        require(_dep != address(0));\r\n        require(_dep != address(this));\r\n        int16 depositID = maxId++;//first=, then ++\r\n        partners[depositID]=Partner(_role, _dep, 0);//new deposit with 0 ether\r\n        //We need to know number of deposits per Role\r\n        if (_role==Role.Team) {\r\n            numTeamDeposits++; // For quick calculate stake\r\n        }\r\n        if (_role==Role.Adviser) {\r\n            numAdviserDeposits++; // For quick calculate stake\r\n        }\r\n        emit NewDepositCreated(_dep, _role, depositID);\r\n        return depositID;\r\n    }\r\n\r\n    //Delete Team or Adviser accounts\r\n    function deleteDeposit(address dep) public onlyOwner {\r\n        int16 depositId = getDepositID(dep);\r\n        require(depositId>0);\r\n        //can`t delete Fund deposit account\r\n        require(partners[depositId].roleInProject != Role.Fund);\r\n        //Decrease deposits number befor deleting\r\n        if (partners[depositId].roleInProject==Role.Team) {\r\n            numTeamDeposits--;\r\n        }\r\n        if (partners[depositId].roleInProject==Role.Adviser) {\r\n            numAdviserDeposits--;\r\n        }\r\n        //return current Amount of deleting Deposit  to  notDistributedAmount\r\n        notDistributedAmount = notDistributedAmount.add(partners[depositId].amount);\r\n        emit DeletedDeposit(dep, partners[depositId].roleInProject, depositId, partners[depositId].amount);\r\n        delete(partners[depositId]);\r\n\r\n    }\r\n\r\n    function getDepositID(address dep) internal constant returns (int16 id){\r\n        //id = -1; //not found\r\n        for (int16 i=0; i<=maxId; i++) {\r\n            if (dep==partners[i].account){\r\n                //id=i;\r\n                //return id;\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    //withdraw with pull payee patern\r\n    function withdraw() external {\r\n        int16 id = getDepositID(msg.sender);\r\n        require(id >=0);\r\n        uint256 amount = partners[id].amount;\r\n        // set to zero the pending refund before\r\n        // sending to prevent re-entrancy attacks\r\n        partners[id].amount = 0;\r\n        msg.sender.transfer(amount);\r\n        emit FundsWithdraw(msg.sender, amount);\r\n    }\r\n\r\n\r\n    function distributeIncomeEther() public onlyOwner { \r\n        require(notDistributedAmount !=0);\r\n        uint256 distributed;\r\n        uint256 sum;\r\n        uint256 _amount;\r\n        for (int16 i=0; i<=maxId; i++) {\r\n            if  (partners[i].account != address(0) ){\r\n                sum = 0;\r\n                if  (partners[i].roleInProject==Role.Team) {\r\n                    sum = notDistributedAmount/100*Stake_Team/numTeamDeposits;\r\n                    emit DepositIncome(partners[i].account, uint256(sum));\r\n                }\r\n                if  (partners[i].roleInProject==Role.Adviser) {\r\n                    sum = notDistributedAmount/100*Stake_Adv/numAdviserDeposits;\r\n                    emit DepositIncome(partners[i].account, uint256(sum));\r\n                }\r\n                if  (partners[i].roleInProject==Role.Fund) {\r\n                    int16 fundAccountId=i; //just Remember last id\r\n                } else {\r\n                    partners[i].amount = partners[i].amount.add(sum);\r\n                    distributed = distributed.add(sum);\r\n                }\r\n            }\r\n        }\r\n        //And now Amount for Fund = notDistributedAmount - distributed\r\n        emit DistributeIncome(msg.sender, notDistributedAmount, distributed);\r\n        _amount = notDistributedAmount.sub(distributed);\r\n        partners[fundAccountId].amount =\r\n                 partners[fundAccountId].amount.add(_amount);\r\n        emit DepositIncome(partners[fundAccountId].account, uint256(_amount));         \r\n        notDistributedAmount = 0;\r\n        //проверить  на  ошибку   округления.\r\n    }\r\n\r\n\r\n    //Check of red_balance\r\n    function checkBalance() public constant returns (uint256 red_balance) {\r\n        // this.balance = notDistributedAmount + Sum(all deposits)\r\n        uint256 allDepositSum;\r\n        for (int16 i=0; i<=maxId; i++) {\r\n            allDepositSum = allDepositSum.add(partners[i].amount);\r\n        }\r\n        red_balance = address(this).balance.sub(notDistributedAmount).sub(allDepositSum);\r\n        return red_balance;\r\n    }\r\n\r\n    //общая практика,  но уменьшает прозрачность и доверие -убрали destroy (по итогам встречи 20171128)\r\n    /*\r\n    function destroy() onlyOwner public {\r\n        selfdestruct(owner);\r\n    }\r\n    */\r\n\r\n    //////////////////////////////////////////////////////////////////////\r\n    /////  SPECIAL OFFER MANAGE - DISCOUNTS        ///////////////////////\r\n    //////////////////////////////////////////////////////////////////////\r\n\r\n        //For add percent discount for some purchaser - see WhitePaper\r\n    function addSpecialOffer (address vip, uint8 discount_percent) public onlyOwner {\r\n        require(discount_percent>0 && discount_percent<100);\r\n        special_offer[vip] = discount_percent;\r\n        emit SpecialOfferAdd(vip, discount_percent);\r\n    }\r\n\r\n    //For remove discount for some purchaser - see WhitePaper\r\n    function removeSpecialOffer(address was_vip) public onlyOwner {\r\n        special_offer[was_vip] = 0;\r\n        emit SpecialOfferRemove(was_vip);\r\n    }\r\n  //***************************************************************\r\n  //Token Change Contract Design by IBERGroup, email:maxsizmobile@iber.group; \r\n  //     Telegram: https://t.me/msmobile\r\n  //\r\n  ////**************************************************************\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"numAdviserDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vip\",\"type\":\"address\"},{\"name\":\"discount_percent\",\"type\":\"uint8\"}],\"name\":\"addSpecialOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dep\",\"type\":\"address\"}],\"name\":\"deleteDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numTeamDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"currentERC20contract\",\"type\":\"address\"}],\"name\":\"setERC20address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_role\",\"type\":\"uint8\"},{\"name\":\"_dep\",\"type\":\"address\"}],\"name\":\"newDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"int16\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeIncomeEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"special_offer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxId\",\"outputs\":[{\"name\":\"\",\"type\":\"int16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"red_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"int16\"}],\"name\":\"partners\",\"outputs\":[{\"name\":\"roleInProject\",\"type\":\"uint8\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"notDistributedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"was_vip\",\"type\":\"address\"}],\"name\":\"removeSpecialOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"fundAcc\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Income\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_acc\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_role\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_maxid\",\"type\":\"int16\"}],\"name\":\"NewDepositCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_acc\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_role\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_maxid\",\"type\":\"int16\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DeletedDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"notDistrAm\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"distrAm\",\"type\":\"uint256\"}],\"name\":\"DistributeIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weivalue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_deposit\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_acc\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_discount\",\"type\":\"uint16\"}],\"name\":\"SpecialOfferAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_acc\",\"type\":\"address\"}],\"name\":\"SpecialOfferRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SynergisProxyDeposit","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d8a898657ec6ebca6f7673487b52cefc78b60bc3","Library":"","SwarmSource":"bzzr://1c6326aec3286774bb660b75d84ddd1c7ca8172daccc06eb3a16517ef86d9eda"}]}