{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19; // solhint-disable-line\r\n\r\n/**\r\n  * Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n  * @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\n  */\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n  // Optional\r\n  // function name() public view returns (string name);\r\n  // function symbol() public view returns (string symbol);\r\n  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract LibraryToken is ERC721 {\r\n  using SafeMath for uint256;\r\n\r\n  /*** EVENTS ***/\r\n\r\n  /**\r\n    * @dev The Created event is fired whenever a new library comes into existence.\r\n    */\r\n  event Created(uint256 indexed _tokenId, string _language, string _name, address indexed _owner);\r\n\r\n  /**\r\n    * @dev The Sold event is fired whenever a token is sold.\r\n    */\r\n  event Sold(uint256 indexed _tokenId, address indexed _owner, uint256 indexed _price);\r\n\r\n  /**\r\n    * @dev The Bought event is fired whenever a token is bought.\r\n    */\r\n  event Bought(uint256 indexed _tokenId, address indexed _owner, uint256 indexed _price);\r\n\r\n  /**\r\n    * @dev Transfer event as defined in current draft of ERC721.\r\n    */\r\n  event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n\r\n  /**\r\n    * @dev Approval event as defined in current draft of ERC721.\r\n    */\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n\r\n  /**\r\n    * @dev FounderSet event fired when founder is set.\r\n    */\r\n  event FounderSet(address indexed _founder, uint256 indexed _tokenId);\r\n\r\n\r\n\r\n\r\n  /*** CONSTANTS ***/\r\n\r\n  /**\r\n    * @notice Name and symbol of the non-fungible token, as defined in ERC721.\r\n    */\r\n  string public constant NAME = \"CryptoLibraries\"; // solhint-disable-line\r\n  string public constant SYMBOL = \"CL\"; // solhint-disable-line\r\n\r\n  /**\r\n    * @dev Increase tiers to deterine how much price have to be changed\r\n    */\r\n  uint256 private startingPrice = 0.002 ether;\r\n  uint256 private developersCut = 0 ether;\r\n  uint256 private TIER1 = 0.02 ether;\r\n  uint256 private TIER2 = 0.5 ether;\r\n  uint256 private TIER3 = 2.0 ether;\r\n  uint256 private TIER4 = 5.0 ether;\r\n\r\n  /*** STORAGE ***/\r\n\r\n  /**\r\n    * @dev A mapping from library IDs to the address that owns them.\r\n    * All libraries have some valid owner address.\r\n    */\r\n  mapping (uint256 => address) public libraryIndexToOwner;\r\n\r\n  /**\r\n    * @dev A mapping from library IDs to the address that founder of library.\r\n    */\r\n  mapping (uint256 => address) public libraryIndexToFounder;\r\n\r\n  /**\r\n    * @dev A mapping from founder address to token count.\r\n  */\r\n  mapping (address => uint256) public libraryIndexToFounderCount;\r\n\r\n  /**\r\n    * @dev A mapping from owner address to count of tokens that address owns.\r\n    * Used internally inside balanceOf() to resolve ownership count.\r\n    */\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  /**\r\n    * @dev A mapping from LibraryIDs to an address that has been approved to call\r\n    * transferFrom(). Each Library can only have one approved address for transfer\r\n    * at any time. A zero value means no approval is outstanding.\r\n    */\r\n  mapping (uint256 => address) public libraryIndexToApproved;\r\n\r\n  /**\r\n    * @dev A mapping from LibraryIDs to the price of the token.\r\n    */\r\n  mapping (uint256 => uint256) private libraryIndexToPrice;\r\n\r\n  /**\r\n    * @dev A mapping from LibraryIDs to the funds avaialble for founder.\r\n    */\r\n  mapping (uint256 => uint256) private libraryIndexToFunds;\r\n\r\n  /**\r\n    * The addresses of the owner that can execute actions within each roles.\r\n    */\r\n  address public owner;\r\n\r\n\r\n\r\n  /*** DATATYPES ***/\r\n  struct Library {\r\n    string language;\r\n    string name;\r\n  }\r\n\r\n  Library[] private libraries;\r\n\r\n\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n\r\n  /**\r\n    * @dev Access modifier for owner functionality.\r\n    */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n    * @dev Access modifier for founder of library.\r\n    */\r\n  modifier onlyFounder(uint256 _tokenId) {\r\n    require(msg.sender == founderOf(_tokenId));\r\n    _;\r\n  }\r\n\r\n\r\n\r\n  /*** CONSTRUCTOR ***/\r\n\r\n  function LibraryToken() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n\r\n  /*** PUBLIC FUNCTIONS ERC-721 COMPILANCE ***/\r\n\r\n  /**\r\n    * @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n    * @param _to The address to be granted transfer approval. Pass address(0) to\r\n    * clear all approvals.\r\n    * @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    */\r\n  function approve(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    // Caller can't be approver of request\r\n    require(msg.sender != _to);\r\n\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    libraryIndexToApproved[_tokenId] = _to;\r\n\r\n    Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n    * For querying balance of a particular account\r\n    * @param _owner The address for balance query\r\n    * @return balance The number of tokens owned by owner\r\n    */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  /**\r\n    * @dev Required for ERC-721 compliance.\r\n    * @return bool\r\n    */\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * For querying owner of token\r\n    * @dev Required for ERC-721 compliance.\r\n    * @param _tokenId The tokenID for owner inquiry\r\n    * @return tokenOwner address of token owner\r\n    */\r\n  function ownerOf(uint256 _tokenId) public view returns (address tokenOwner) {\r\n    tokenOwner = libraryIndexToOwner[_tokenId];\r\n    require(tokenOwner != address(0));\r\n  }\r\n\r\n  /**\r\n    * @notice Allow pre-approved user to take ownership of a token\r\n    * @dev Required for ERC-721 compliance.\r\n    * @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    */\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    address newOwner = msg.sender;\r\n    address oldOwner = libraryIndexToOwner[_tokenId];\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  /**\r\n    * totalSupply\r\n    * For querying total numbers of tokens\r\n    * @return total The total supply of tokens\r\n    */\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return libraries.length;\r\n  }\r\n\r\n  /**\r\n    * transferFro\r\n    * Third-party initiates transfer of token from address _from to address _to\r\n    * @param _from The address for the token to be transferred from.\r\n    * @param _to The address for the token to be transferred to.\r\n    * @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n    * Owner initates the transfer of the token to another account\r\n    * @param _to The address for the token to be transferred to.\r\n    * @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    */\r\n  function transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n    * @dev Required for ERC-721 compliance.\r\n    */\r\n  function name() public pure returns (string) {\r\n    return NAME;\r\n  }\r\n\r\n  /**\r\n    * @dev Required for ERC-721 compliance.\r\n    */\r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n\r\n\r\n\r\n  /*** PUBLIC FUNCTIONS ***/\r\n\r\n  /**\r\n    * @dev Creates a new Library with the given language and name.\r\n    * @param _language The library language\r\n    * @param _name The name of library/framework\r\n    */\r\n  function createLibrary(string _language, string _name) public onlyOwner {\r\n    _createLibrary(_language, _name, address(this), address(0), 0, startingPrice);\r\n  }\r\n\r\n  /**\r\n    * @dev Creates a new Library with the given language and name and founder address.\r\n    * @param _language The library language\r\n    * @param _name The name of library/framework\r\n    * @param _founder The founder of library/framework\r\n    */\r\n  function createLibraryWithFounder(string _language, string _name, address _founder) public onlyOwner {\r\n    require(_addressNotNull(_founder));\r\n    _createLibrary(_language, _name, address(this), _founder, 0, startingPrice);\r\n  }\r\n\r\n  /**\r\n    * @dev Creates a new Library with the given language and name and owner address and starting price.\r\n    * Itd be used for various bounties prize.\r\n    * @param _language The library language\r\n    * @param _name The name of library/framework\r\n    * @param _owner The owner of library token\r\n    * @param _startingPrice The starting price of library token\r\n    */\r\n  function createLibraryBounty(string _language, string _name, address _owner, uint256 _startingPrice) public onlyOwner {\r\n    require(_addressNotNull(_owner));\r\n    _createLibrary(_language, _name, _owner, address(0), 0, _startingPrice);\r\n  }\r\n\r\n  /**\r\n    * @notice Returns all the relevant information about a specific library.\r\n    * @param _tokenId The tokenId of the library of interest.\r\n    */\r\n  function getLibrary(uint256 _tokenId) public view returns (\r\n    string language,\r\n    string libraryName,\r\n    uint256 tokenPrice,\r\n    uint256 funds,\r\n    address tokenOwner,\r\n    address founder\r\n  ) {\r\n    Library storage x = libraries[_tokenId];\r\n    libraryName = x.name;\r\n    language = x.language;\r\n    founder = libraryIndexToFounder[_tokenId];\r\n    funds = libraryIndexToFunds[_tokenId];\r\n    tokenPrice = libraryIndexToPrice[_tokenId];\r\n    tokenOwner = libraryIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /**\r\n    * For querying price of token\r\n    * @param _tokenId The tokenID for owner inquiry\r\n    * @return _price The current price of token\r\n    */\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 _price) {\r\n    return libraryIndexToPrice[_tokenId];\r\n  }\r\n\r\n  /**\r\n    * For querying next price of token\r\n    * @param _tokenId The tokenID for owner inquiry\r\n    * @return _nextPrice The next price of token\r\n    */\r\n  function nextPriceOf(uint256 _tokenId) public view returns (uint256 _nextPrice) {\r\n    return calculateNextPrice(priceOf(_tokenId));\r\n  }\r\n\r\n  /**\r\n    * For querying founder of library\r\n    * @param _tokenId The tokenID for founder inquiry\r\n    * @return _founder The address of library founder\r\n    */\r\n  function founderOf(uint256 _tokenId) public view returns (address _founder) {\r\n    _founder = libraryIndexToFounder[_tokenId];\r\n    require(_founder != address(0));\r\n  }\r\n\r\n  /**\r\n    * For querying founder funds of library\r\n    * @param _tokenId The tokenID for founder inquiry\r\n    * @return _funds The funds availale for a fo\r\n    */\r\n  function fundsOf(uint256 _tokenId) public view returns (uint256 _funds) {\r\n    _funds = libraryIndexToFunds[_tokenId];\r\n  }\r\n\r\n  /**\r\n    * For querying next price of token\r\n    * @param _price The token actual price\r\n    * @return _nextPrice The next price\r\n    */\r\n  function calculateNextPrice (uint256 _price) public view returns (uint256 _nextPrice) {\r\n    if (_price < TIER1) {\r\n      return _price.mul(200).div(95);\r\n    } else if (_price < TIER2) {\r\n      return _price.mul(135).div(96);\r\n    } else if (_price < TIER3) {\r\n      return _price.mul(125).div(97);\r\n    } else if (_price < TIER4) {\r\n      return _price.mul(117).div(97);\r\n    } else {\r\n      return _price.mul(115).div(98);\r\n    }\r\n  }\r\n\r\n  /**\r\n    * For querying developer's cut which is left in the contract by `purchase`\r\n    * @param _price The token actual price\r\n    * @return _devCut The developer's cut\r\n    */\r\n  function calculateDevCut (uint256 _price) public view returns (uint256 _devCut) {\r\n    if (_price < TIER1) {\r\n      return _price.mul(5).div(100); // 5%\r\n    } else if (_price < TIER2) {\r\n      return _price.mul(4).div(100); // 4%\r\n    } else if (_price < TIER3) {\r\n      return _price.mul(3).div(100); // 3%\r\n    } else if (_price < TIER4) {\r\n      return _price.mul(3).div(100); // 3%\r\n    } else {\r\n      return _price.mul(2).div(100); // 2%\r\n    }\r\n  }\r\n\r\n  /**\r\n    * For querying founder cut which is left in the contract by `purchase`\r\n    * @param _price The token actual price\r\n    */\r\n  function calculateFounderCut (uint256 _price) public pure returns (uint256 _founderCut) {\r\n    return _price.mul(1).div(100);\r\n  }\r\n\r\n  /**\r\n    * @dev This function withdrawing all of developer's cut which is left in the contract by `purchase`.\r\n    * User funds are immediately sent to the old owner in `purchase`, no user funds are left in the contract\r\n    * expect funds that stay in the contract that are waiting to be sent to a founder of a library when we would assign him.\r\n    */\r\n  function withdrawAll () onlyOwner() public {\r\n    owner.transfer(developersCut);\r\n    // Set developersCut to 0 to reset counter of possible funds\r\n    developersCut = 0;\r\n  }\r\n\r\n  /**\r\n    * @dev This function withdrawing selected amount of developer's cut which is left in the contract by `purchase`.\r\n    * User funds are immediately sent to the old owner in `purchase`, no user funds are left in the contract\r\n    * expect funds that stay in the contract that are waiting to be sent to a founder of a library when we would assign him.\r\n    * @param _amount The amount to withdraw\r\n    */\r\n  function withdrawAmount (uint256 _amount) onlyOwner() public {\r\n    require(_amount >= developersCut);\r\n\r\n    owner.transfer(_amount);\r\n    developersCut = developersCut.sub(_amount);\r\n  }\r\n\r\n    /**\r\n    * @dev This function withdrawing selected amount of developer's cut which is left in the contract by `purchase`.\r\n    * User funds are immediately sent to the old owner in `purchase`, no user funds are left in the contract\r\n    * expect funds that stay in the contract that are waiting to be sent to a founder of a library when we would assign him.\r\n    */\r\n  function withdrawFounderFunds (uint256 _tokenId) onlyFounder(_tokenId) public {\r\n    address founder = founderOf(_tokenId);\r\n    uint256 funds = fundsOf(_tokenId);\r\n    founder.transfer(funds);\r\n\r\n    // Set funds to 0 after transfer since founder can only withdraw all funts\r\n    libraryIndexToFunds[_tokenId] = 0;\r\n  }\r\n\r\n  /*\r\n     Purchase a library directly from the contract for the calculated price\r\n     which ensures that the owner gets a profit.  All libraries that\r\n     have been listed can be bought by this method. User funds are sent\r\n     directly to the previous owner and are never stored in the contract.\r\n  */\r\n  function purchase(uint256 _tokenId) public payable {\r\n    address oldOwner = libraryIndexToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    uint256 price = libraryIndexToPrice[_tokenId];\r\n    require(msg.value >= price);\r\n\r\n    uint256 excess = msg.value.sub(price);\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n    libraryIndexToPrice[_tokenId] = nextPriceOf(_tokenId);\r\n\r\n    Bought(_tokenId, newOwner, price);\r\n    Sold(_tokenId, oldOwner, price);\r\n\r\n    // Devevloper's cut which is left in contract and accesed by\r\n    // `withdrawAll` and `withdrawAmount` methods.\r\n    uint256 devCut = calculateDevCut(price);\r\n    developersCut = developersCut.add(devCut);\r\n\r\n    // Founders cut which is left in contract and accesed by\r\n    // `withdrawFounderFunds` methods.\r\n    uint256 founderCut = calculateFounderCut(price);\r\n    libraryIndexToFunds[_tokenId] = libraryIndexToFunds[_tokenId].add(founderCut);\r\n\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(price.sub(devCut.add(founderCut)));\r\n    }\r\n\r\n    if (excess > 0) {\r\n      newOwner.transfer(excess);\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n    * expensive (it walks the entire Cities array looking for cities belonging to owner),\r\n    * but it also returns a dynamic array, which is only supported for web3 calls, and\r\n    * not contract-to-contract calls.\r\n    * @param _owner The owner whose library tokens we are interested in.\r\n    * @return []ownerTokens The tokens of owner\r\n    */\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalLibraries = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 libraryId;\r\n      for (libraryId = 0; libraryId <= totalLibraries; libraryId++) {\r\n        if (libraryIndexToOwner[libraryId] == _owner) {\r\n          result[resultIndex] = libraryId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n    /**\r\n    * @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n    * expensive (it walks the entire Cities array looking for cities belonging to owner),\r\n    * but it also returns a dynamic array, which is only supported for web3 calls, and\r\n    * not contract-to-contract calls.\r\n    * @param _founder The owner whose library tokens we are interested in.\r\n    * @return []founderTokens The tokens of owner\r\n    */\r\n  function tokensOfFounder(address _founder) public view returns(uint256[] founderTokens) {\r\n    uint256 tokenCount = libraryIndexToFounderCount[_founder];\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalLibraries = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 libraryId;\r\n      for (libraryId = 0; libraryId <= totalLibraries; libraryId++) {\r\n        if (libraryIndexToFounder[libraryId] == _founder) {\r\n          result[resultIndex] = libraryId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n\r\n    /**\r\n    * @dev \r\n    * @return []_libraries All tokens\r\n    */\r\n  function allTokens() public pure returns(Library[] _libraries) {\r\n    return _libraries;\r\n  }\r\n\r\n  /**\r\n    * @dev Assigns a new address to act as the Owner. Only available to the current Owner.\r\n    * @param _newOwner The address of the new owner\r\n    */\r\n  function setOwner(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n\r\n    owner = _newOwner;\r\n  }\r\n\r\n    /**\r\n    * @dev Assigns a new address to act as the founder of library to let him withdraw collected funds of his library.\r\n    * @param _tokenId The id of a Token\r\n    * @param _newFounder The address of the new owner\r\n    */\r\n  function setFounder(uint256 _tokenId, address _newFounder) public onlyOwner {\r\n    require(_newFounder != address(0));\r\n\r\n    address oldFounder = founderOf(_tokenId);\r\n\r\n    libraryIndexToFounder[_tokenId] = _newFounder;\r\n    FounderSet(_newFounder, _tokenId);\r\n\r\n    libraryIndexToFounderCount[_newFounder] = libraryIndexToFounderCount[_newFounder].add(1);\r\n    libraryIndexToFounderCount[oldFounder] = libraryIndexToFounderCount[oldFounder].sub(1);\r\n  }\r\n\r\n\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n\r\n  /**\r\n    * Safety check on _to address to prevent against an unexpected 0x0 default.\r\n    * @param _to The address to validate if not null\r\n    * @return bool The result of check\r\n    */\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /**\r\n    * For checking approval of transfer for address _to\r\n    * @param _to The address to validate if approved\r\n    * @param _tokenId The token id to validate if approved\r\n    * @return bool The result of validation\r\n    */\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return libraryIndexToApproved[_tokenId] == _to;\r\n  }\r\n\r\n  /**\r\n    * Function to create a new Library\r\n    * @param _language The language (etc. Python, JavaScript) of library\r\n    * @param _name The name of library/framework (etc. Anguar, Redux, Flask)\r\n    * @param _owner The current owner of Token\r\n    * @param _founder The founder of library/framework\r\n    * @param _funds The funds available to founder of library/framework\r\n    * @param _price The current price of a Token\r\n    */\r\n  function _createLibrary(\r\n    string _language,\r\n    string _name,\r\n    address _owner,\r\n    address _founder,\r\n    uint256 _funds,\r\n    uint256 _price\r\n  )\r\n    private\r\n  {\r\n    Library memory _library = Library({\r\n      name: _name,\r\n      language: _language\r\n    });\r\n    uint256 newLibraryId = libraries.push(_library) - 1;\r\n\r\n    Created(newLibraryId, _language, _name, _owner);\r\n\r\n    libraryIndexToPrice[newLibraryId] = _price;\r\n    libraryIndexToFounder[newLibraryId] = _founder;\r\n    libraryIndexToFunds[newLibraryId] = _funds;\r\n\r\n    // This will assign ownership, and also emit the Transfer event as per ERC721 draft\r\n    _transfer(address(0), _owner, newLibraryId);\r\n  }\r\n\r\n  /**\r\n    * Check for token ownership\r\n    * @param claimant The claimant\r\n    * @param _tokenId The token id to check claim\r\n    * @return bool The result of validation\r\n    */\r\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n    return claimant == libraryIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /**\r\n    * @dev Assigns ownership of a specific Library to an address.\r\n    * @param _from The old owner of token\r\n    * @param _to The new owner of token\r\n    * @param _tokenId The id of token to change owner\r\n    */\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    // Since the number of library is capped to 2^32 we can't overflow this\r\n    ownershipTokenCount[_to] = ownershipTokenCount[_to].add(1);\r\n\r\n    //transfer ownership\r\n    libraryIndexToOwner[_tokenId] = _to;\r\n\r\n    // When creating new libraries _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from] = ownershipTokenCount[_from].sub(1);\r\n\r\n      // clear any previously approved ownership exchange\r\n      delete libraryIndexToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawFounderFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_language\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createLibrary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"libraryIndexToFounder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_language\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"}],\"name\":\"createLibraryBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"founderOf\",\"outputs\":[{\"name\":\"_founder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_language\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_founder\",\"type\":\"address\"}],\"name\":\"createLibraryWithFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"nextPriceOf\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateDevCut\",\"outputs\":[{\"name\":\"_devCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"libraryIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allTokens\",\"outputs\":[{\"components\":[{\"name\":\"language\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"_libraries\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"libraryIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_newFounder\",\"type\":\"address\"}],\"name\":\"setFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"libraryIndexToFounderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateFounderCut\",\"outputs\":[{\"name\":\"_founderCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"fundsOf\",\"outputs\":[{\"name\":\"_funds\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_founder\",\"type\":\"address\"}],\"name\":\"tokensOfFounder\",\"outputs\":[{\"name\":\"founderTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLibrary\",\"outputs\":[{\"name\":\"language\",\"type\":\"string\"},{\"name\":\"libraryName\",\"type\":\"string\"},{\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"name\":\"funds\",\"type\":\"uint256\"},{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"founder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateNextPrice\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_language\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_founder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"FounderSet\",\"type\":\"event\"}]","ContractName":"LibraryToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e060e0fd5eee49fab0857a67063dbc4e1b8544940369c6a6f0b1f3c30a726bea"}]}