{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract CryptoLandmarks {\r\n    using SafeMath for uint256;\r\n\r\n    // ERC721 required events\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    // Event fired whenever landmark is sold\r\n    event LandmarkSold(uint256 tokenId, uint256 price, uint256 nextPrice, address prevOwner, address owner);\r\n    \r\n    // Event fired when price of landmark changes\r\n    event PriceChanged(uint256 tokenId, uint256 price);\r\n\r\n    // Event fired for every new landmark created\r\n    event LandmarkCreated(uint256 tokenId, uint256 groupId, uint256 price, address owner);\r\n\r\n   \r\n    string public constant NAME = \"CryptoLandmarks.co Landmarks\"; \r\n    string public constant SYMBOL = \"LANDMARK\"; \r\n\r\n    // Initial price of new Landmark\r\n    uint256 private startingPrice = 0.03 ether;\r\n    // Initial price of new Ambassador\r\n    uint256 private ambassadorStartingPrice = 3 ether;\r\n\r\n    // count transactions after every withdrawal\r\n    uint256 public transactions = 0;\r\n\r\n    // Contract roles\r\n    address public ceo;\r\n    address public coo;\r\n\r\n    uint256[] private landmarks;\r\n    \r\n    // landmark to prices\r\n    mapping (uint256 => uint256) landmarkToMaxPrice;\r\n    mapping (uint256 => uint256) landmarkToPrice;\r\n    \r\n    // landmark to owner\r\n    mapping (uint256 => address) landmarkToOwner;\r\n    \r\n    // landmark to ambassador id\r\n    // ambassador is also landmark token\r\n    // every ambassador belongs to self\r\n    mapping (uint256 => uint256) landmarkToAmbassador;\r\n    \r\n    // ambassadors's landmarks count\r\n    mapping (uint256 => uint256) groupLandmarksCount;\r\n\r\n    // withdraw cooldown date of landmark owner\r\n    mapping (address => uint256) public withdrawCooldown;\r\n\r\n    mapping (uint256 => address) landmarkToApproved;\r\n    mapping (address => uint256) landmarkOwnershipCount;\r\n\r\n\r\n    function CryptoLandmarks() public {\r\n        ceo = msg.sender;\r\n        coo = msg.sender;\r\n    }\r\n\r\n    function calculateNextPrice (uint256 _price) public view returns (uint256 _nextPrice) {\r\n        if (_price < 0.2 ether)\r\n            return _price.mul(2); // 200%\r\n        if (_price < 4 ether)\r\n            return _price.mul(17).div(10); // 170%\r\n        if (_price < 15 ether)\r\n            return _price.mul(141).div(100); // 141%\r\n        else\r\n            return _price.mul(134).div(100); // 134%\r\n    }\r\n\r\n    function calculateDevCut (uint256 _price) public view returns (uint256 _devCut) {\r\n        if (_price < 0.2 ether)\r\n            return 5; // 5%\r\n        if (_price < 4 ether)\r\n            return 4; // 4%\r\n        if (_price < 15 ether)\r\n            return 3; // 3%\r\n        else\r\n            return 2; // 2%\r\n    }   \r\n\r\n    /*\r\n        Buy Landmark or Ambassador from contract for calculated price that ensures that:\r\n         - previous owner gets a profit\r\n         - specific Ambassador gets his/her fee\r\n         - every owner of Landmark in an Ambassador group gets a cut\r\n        All funds are sent directly to players and are never stored in the contract.\r\n\r\n        Ambassador -> _tokenId < 1000\r\n        Landmark -> _tokenId >= 1000\r\n\r\n    */\r\n    function buy(uint256 _tokenId) public payable {\r\n        address oldOwner = landmarkToOwner[_tokenId];\r\n        require(oldOwner != msg.sender);\r\n        require(msg.sender != address(0));\r\n        uint256 sellingPrice = priceOfLandmark(_tokenId);\r\n        require(msg.value >= sellingPrice);\r\n\r\n        // excess that will be refunded\r\n        uint256 excess = msg.value.sub(sellingPrice);\r\n\r\n        // id of a group = ambassador id\r\n        uint256 groupId = landmarkToAmbassador[_tokenId];\r\n\r\n        // number of Landmarks in the group\r\n        uint256 groupMembersCount = groupLandmarksCount[groupId];\r\n\r\n        // developer's cut in % (2-5)\r\n        uint256 devCut = calculateDevCut(sellingPrice);\r\n\r\n        // for previous owner\r\n        uint256 payment;\r\n        \r\n        if (_tokenId < 1000) {\r\n            // Buying Ambassador\r\n            payment = sellingPrice.mul(SafeMath.sub(95, devCut)).div(100);\r\n        } else {\r\n            // Buying Landmark\r\n            payment = sellingPrice.mul(SafeMath.sub(90, devCut)).div(100);\r\n        }\r\n\r\n        // 5% splitted per all group memebrs\r\n        uint256 feeGroupMember = (sellingPrice.mul(5).div(100)).div(groupMembersCount);\r\n\r\n\r\n        for (uint i = 0; i < totalSupply(); i++) {\r\n            uint id = landmarks[i];\r\n            if ( landmarkToAmbassador[id] == groupId ) {\r\n                if ( _tokenId == id) {\r\n                    // Transfer payment to previous owner\r\n                    oldOwner.transfer(payment);\r\n                }\r\n                if (groupId == id && _tokenId >= 1000) {\r\n                    // Transfer 5% to Ambassador\r\n                    landmarkToOwner[id].transfer(sellingPrice.mul(5).div(100));\r\n                }\r\n\r\n                // Transfer cut to every member of a group\r\n                // since ambassador and old owner are also members they get a cut again too\r\n                landmarkToOwner[id].transfer(feeGroupMember);\r\n            }\r\n        }\r\n        \r\n        uint256 nextPrice = calculateNextPrice(sellingPrice);\r\n\r\n        // Set new price\r\n        landmarkToPrice[_tokenId] = nextPrice;\r\n\r\n        // Set new maximum price\r\n        landmarkToMaxPrice[_tokenId] = nextPrice;\r\n\r\n        // Transfer token\r\n        _transfer(oldOwner, msg.sender, _tokenId);\r\n\r\n        // if overpaid, transfer excess back to sender\r\n        if (excess > 0) {\r\n            msg.sender.transfer(excess);\r\n        }\r\n\r\n        // increment transactions counter\r\n        transactions++;\r\n\r\n        // emit event\r\n        LandmarkSold(_tokenId, sellingPrice, nextPrice, oldOwner, msg.sender);\r\n    }\r\n\r\n\r\n    // owner can change price\r\n    function changePrice(uint256 _tokenId, uint256 _price) public {\r\n        // only owner can change price\r\n        require(landmarkToOwner[_tokenId] == msg.sender);\r\n\r\n        // price cannot be higher than maximum price\r\n        require(landmarkToMaxPrice[_tokenId] >= _price);\r\n\r\n        // set new price\r\n        landmarkToPrice[_tokenId] = _price;\r\n        \r\n        // emit event\r\n        PriceChanged(_tokenId, _price);\r\n    }\r\n\r\n    function createLandmark(uint256 _tokenId, uint256 _groupId, address _owner, uint256 _price) public onlyCOO {\r\n        // token with id below 1000 is a Ambassador\r\n        if (_price <= 0 && _tokenId >= 1000) {\r\n            _price = startingPrice;\r\n        } else if (_price <= 0 && _tokenId < 1000) {\r\n            _price = ambassadorStartingPrice;\r\n        }\r\n        if (_owner == address(0)) {\r\n            _owner = coo;\r\n        }\r\n\r\n        if (_tokenId < 1000) {\r\n            _groupId == _tokenId;\r\n        }\r\n\r\n        landmarkToPrice[_tokenId] = _price;\r\n        landmarkToMaxPrice[_tokenId] = _price;\r\n        landmarkToAmbassador[_tokenId] = _groupId;\r\n        groupLandmarksCount[_groupId]++;\r\n        _transfer(address(0), _owner, _tokenId);\r\n\r\n        landmarks.push(_tokenId);\r\n\r\n        LandmarkCreated(_tokenId, _groupId, _price, _owner);\r\n    }\r\n\r\n    function getLandmark(uint256 _tokenId) public view returns (\r\n        uint256 ambassadorId,\r\n        uint256 sellingPrice,\r\n        uint256 maxPrice,\r\n        uint256 nextPrice,\r\n        address owner\r\n    ) {\r\n        ambassadorId = landmarkToAmbassador[_tokenId];\r\n        sellingPrice = landmarkToPrice[_tokenId];\r\n        maxPrice = landmarkToMaxPrice[_tokenId];\r\n        nextPrice = calculateNextPrice(sellingPrice);\r\n        owner = landmarkToOwner[_tokenId];\r\n    }\r\n\r\n    function priceOfLandmark(uint256 _tokenId) public view returns (uint256) {\r\n        return landmarkToPrice[_tokenId];\r\n    }\r\n\r\n\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceo);\r\n        _;\r\n    }\r\n    modifier onlyCOO() {\r\n        require(msg.sender == coo);\r\n        _;\r\n    }\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == ceo ||\r\n            msg.sender == coo\r\n        );\r\n        _;\r\n    }\r\n    modifier notCLevel() {\r\n        require(\r\n            msg.sender != ceo ||\r\n            msg.sender != coo\r\n        );\r\n        _;\r\n    }\r\n\r\n    /*\r\n        Transfer 0.3% per token to sender\r\n        This function can be invoked by anyone who:\r\n         - has at least 3 tokens\r\n         - waited at least 1 week from previous withdrawal\r\n         - is not a ceo/coo\r\n        Additionally it can be invoked only:\r\n         - when total balance is greater than 1 eth\r\n         - after 10 transactions from previous withdrawal\r\n\r\n\r\n    */\r\n    function withdrawBalance() external notCLevel {\r\n        // only person owning more than 3 tokens can whitdraw\r\n        require(landmarkOwnershipCount[msg.sender] >= 3);\r\n        \r\n        // player can withdraw only week after his previous withdrawal\r\n        require(withdrawCooldown[msg.sender] <= now);\r\n\r\n        // can be invoked after any 10 purchases from previous withdrawal\r\n        require(transactions >= 10);\r\n\r\n        uint256 balance = this.balance;\r\n\r\n        // balance must be greater than 0.3 ether\r\n        require(balance >= 0.3 ether);\r\n\r\n        uint256 senderCut = balance.mul(3).div(1000).mul(landmarkOwnershipCount[msg.sender]);\r\n        \r\n        // transfer 0.3% per Landmark or Ambassador to sender\r\n        msg.sender.transfer(senderCut);\r\n\r\n        // set sender withdraw cooldown\r\n        withdrawCooldown[msg.sender] = now + 1 weeks;\r\n\r\n        // transfer rest to CEO \r\n        ceo.transfer(balance.sub(senderCut));\r\n\r\n        // set transactions counter to 0\r\n        transactions = 0;\r\n\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyCEO {\r\n        if (newOwner != address(0)) {\r\n            ceo = newOwner;\r\n        }\r\n    }\r\n\r\n    function setCOO(address newCOO) public onlyCOO {\r\n        if (newCOO != address(0)) {\r\n            coo = newCOO;\r\n        }\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n        landmarkOwnershipCount[_to]++;\r\n        landmarkToOwner[_tokenId] = _to;\r\n\r\n        if (_from != address(0)) {\r\n            landmarkOwnershipCount[_from]--;\r\n            delete landmarkToApproved[_tokenId];\r\n        }\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    //ERC721 methods\r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return landmarks.length;\r\n    }\r\n\r\n    function name() public pure returns (string) {\r\n        return NAME;\r\n    }\r\n\r\n    function symbol() public pure returns (string) {\r\n        return SYMBOL;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return landmarkOwnershipCount[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\r\n        owner = landmarkToOwner[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n    function transfer(address _to, uint256 _tokenId) public {\r\n        require(_to != address(0));\r\n        require(landmarkToOwner[_tokenId] == msg.sender);\r\n\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n    function approve(address _to, uint256 _tokenId) public {\r\n        require(landmarkToOwner[_tokenId] == msg.sender);\r\n        landmarkToApproved[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n        require(landmarkToApproved[_tokenId] == _to);\r\n        require(_to != address(0));\r\n        require(landmarkToOwner[_tokenId] == _from);\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function tokensOfOwner(address _owner) public view returns(uint256[]) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        uint256[] memory result = new uint256[](tokenCount);\r\n        uint256 total = totalSupply();\r\n        uint256 resultIndex = 0;\r\n\r\n        for(uint256 i = 0; i <= total; i++) {\r\n            if (landmarkToOwner[i] == _owner) {\r\n                result[resultIndex] = i;\r\n                resultIndex++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateDevCut\",\"outputs\":[{\"name\":\"_devCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_groupId\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createLandmark\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOfLandmark\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLandmark\",\"outputs\":[{\"name\":\"ambassadorId\",\"type\":\"uint256\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"name\":\"nextPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawCooldown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateNextPrice\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nextPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LandmarkSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"groupId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LandmarkCreated\",\"type\":\"event\"}]","ContractName":"CryptoLandmarks","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://382a4c326fbe7f09048f56ec3896488e1e9f6fc27d7eccd607aac067740d9fb6"}]}