{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n        assert(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        assert(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        assert(token.approve(spender, value));\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Discountable is Ownable {\r\n    struct DiscStruct {\r\n        uint256 amount;\r\n        uint256 disc;\r\n    }\r\n    uint256 descPrecision = 1e2;\r\n    uint256 defaultCoef = 200;\r\n    DiscStruct[] public discounts;\r\n\r\n    function addDiscount(uint256 _amount, uint256 _disc) onlyOwner public{\r\n        discounts.push(DiscStruct(_amount, _disc));\r\n    }\r\n\r\n    function editDiscount(uint256 num, uint256 _amount, uint256 _disc) onlyOwner public{\r\n        discounts[num] = DiscStruct(_amount, _disc);\r\n    }\r\n\r\n    function getDiscountsAmount() public view returns(uint256 amount_){\r\n        return discounts.length;\r\n    }\r\n\r\n    function getDiscountByAmount(uint256 amount) internal view returns(uint256 disc_){\r\n        uint256 arrayLength = discounts.length;\r\n        if (amount < discounts[0].amount){\r\n            return defaultCoef;\r\n        }\r\n        for (uint8 i=0; i<arrayLength; i++) {\r\n            if(i == arrayLength - 1){\r\n                return discounts[arrayLength - 1].disc;\r\n            }\r\n            if (amount < discounts[i+1].amount){\r\n                return discounts[i].disc;\r\n            }\r\n        }\r\n        return defaultCoef;\r\n    }\r\n\r\n}\r\n\r\ncontract TransferStatistics {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private stat_tokensBoughtBack = 0;\r\n    uint256 private stat_timesBoughtBack = 0;\r\n    uint256 private stat_tokensPurchased = 0;\r\n    uint256 private stat_timesPurchased = 0;\r\n\r\n    uint256 private stat_ethSent = 0;\r\n    uint256 private stat_ethReceived = 0;\r\n\r\n    uint256 private stat_tokensSpend = 0;\r\n    uint256 private stat_timesSpend = 0;\r\n\r\n    uint256 private oddSent = 0;\r\n    uint256 private feeSent = 0;\r\n\r\n    function trackPurchase(uint256 tokens, uint256 sum) internal {\r\n        stat_tokensPurchased = stat_tokensPurchased.add(tokens);\r\n        stat_timesPurchased = stat_timesPurchased.add(1);\r\n        stat_ethSent = stat_ethSent.add(sum);\r\n    }\r\n\r\n    function trackBuyBack(uint256 tokens, uint256 sum) internal {\r\n        stat_tokensBoughtBack = stat_tokensBoughtBack.add(tokens);\r\n        stat_timesBoughtBack = stat_timesBoughtBack.add(1);\r\n        stat_ethReceived = stat_ethReceived.add(sum);\r\n    }\r\n\r\n    function trackSpend(uint256 tokens) internal{\r\n        stat_tokensSpend = stat_tokensSpend.add(tokens);\r\n        stat_timesSpend = stat_timesSpend.add(1);\r\n    }\r\n\r\n    function trackOdd(uint256 odd) internal {\r\n        oddSent = oddSent.add(odd);\r\n    }\r\n\r\n    function trackFee(uint256 fee) internal {\r\n        feeSent = feeSent.add(fee);\r\n    }\r\n\r\n    function getStatistics() internal view returns(\r\n        uint256 tokensBoughtBack_, uint256 timesBoughtBack_,\r\n        uint256 tokensPurchased_, uint256 timesPurchased_,\r\n        uint256 ethSent_, uint256 ethReceived_,\r\n        uint256 tokensSpend_, uint256 timesSpend_,\r\n        uint256 oddSent_, uint256 feeSent_) {\r\n        return (stat_tokensBoughtBack, stat_timesBoughtBack,\r\n        stat_tokensPurchased, stat_timesPurchased,\r\n        stat_ethSent, stat_ethReceived,\r\n        stat_tokensSpend, stat_timesSpend,\r\n        oddSent, feeSent);\r\n    }\r\n}\r\n\r\ncontract Haltable is Ownable {\r\n    bool public halted;\r\n\r\n    modifier stopInEmergency {\r\n        require(!halted);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlyInEmergency {\r\n        require(halted);\r\n        _;\r\n    }\r\n\r\n\r\n    /// @dev called by the owner on emergency, triggers stopped state\r\n    function halt() external onlyOwner {\r\n        halted = true;\r\n    }\r\n\r\n\r\n    /// @dev called by the owner on end of emergency, returns to normal state\r\n    function unhalt() external onlyOwner onlyInEmergency {\r\n        halted = false;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is BasicToken, Ownable {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public onlyOwner{\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(burner, _value);\r\n  }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract OMPxContract is BasicToken, Haltable, Discountable, TransferStatistics {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20Basic;\r\n    using SafeERC20 for OMPxToken;\r\n    /// @dev Token\r\n    OMPxToken public token;\r\n    Distribution public feeReceiverContract;    \r\n    uint256 private feeBalance = 0;\r\n\r\n    event TransferMoneyBack(address indexed to, uint256 value);\r\n    event Donation(address indexed donator, uint256 value);\r\n    event Spend(address indexed spender, uint256 tokensAmount, bytes32 indexed orderId);\r\n    event Purchase(address indexed received, uint256 tokensAmount, uint256 value);\r\n    event BuyBack(address indexed received, uint256 tokensAmount, uint256 value);\r\n    event NewReceiverSet(address newReceiver);\r\n\r\n    function OMPxContract() public payable{\r\n        addDiscount(1000 * 1e18,198);\r\n        addDiscount(5000 * 1e18,190);\r\n        addDiscount(20000 * 1e18,180);\r\n        addDiscount(100000 * 1e18,150);\r\n\r\n        token = new OMPxToken();\r\n        token.mint(owner, token.initialSupply());\r\n    }\r\n\r\n    // payable fallback\r\n\r\n    function() public payable {\r\n        emit Donation(msg.sender, msg.value);\r\n    }\r\n\r\n    function setFeeReceiver(address newReceiver) public onlyOwner {\r\n        require(newReceiver != address(0));\r\n        feeReceiverContract = Distribution(newReceiver);\r\n        emit NewReceiverSet(newReceiver);\r\n    }\r\n\r\n    function getFee() public {\r\n        if(feeBalance > 1e15){\r\n            feeReceiverContract.receiveFunds.value(feeBalance).gas(150000)();\r\n            trackFee(feeBalance);\r\n            feeBalance = 0;\r\n        }\r\n    }\r\n\r\n    function totalTokenSupply() public view returns(uint256 totalSupply_) {\r\n        return token.totalSupply();\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance_) {\r\n        return token.balanceOf(_owner);\r\n    }\r\n\r\n    // base price. How much eth-wui for 1e18 of wui-tokens (1 real token).\r\n    function getBuyBackPrice(uint256 buyBackValue) public view returns(uint256 price_) {\r\n        if (address(this).balance==0) {\r\n            return 0;\r\n        }\r\n        uint256 eth;\r\n        uint256 tokens = token.totalSupply();\r\n        if (buyBackValue > 0) {\r\n            eth = address(this).balance.sub(buyBackValue);\r\n        } else {\r\n            eth = address(this).balance;\r\n        }\r\n        return (eth.sub(feeBalance)).mul(1e18).div(tokens);\r\n    }\r\n\r\n\r\n    function getPurchasePrice(uint256 purchaseValue, uint256 amount) public view returns(uint256 price_) {\r\n        require(purchaseValue >= 0);\r\n        require(amount >= 0);\r\n        uint256 buyerContributionCoefficient = getDiscountByAmount(amount);\r\n        uint256 price = getBuyBackPrice(purchaseValue).mul(buyerContributionCoefficient).div(descPrecision);\r\n        if (price <= 0) {price = 1e11;}\r\n        return price;\r\n    }\r\n\r\n\r\n    // Purchase tokens to user.\r\n    // Money back should happens if current price is lower, then expected\r\n    function purchase(uint256 tokensToPurchase, uint256 maxPrice) public payable returns(uint256 tokensBought_) {\r\n        require(tokensToPurchase > 0);\r\n        require(msg.value > 0);\r\n        return purchaseSafe(tokensToPurchase, maxPrice);\r\n    }\r\n\r\n    function purchaseSafe(uint256 tokensToPurchase, uint256 maxPrice) internal returns(uint256 tokensBought_){\r\n        require(maxPrice >= 0);\r\n\r\n        uint256 currentPrice = getPurchasePrice(msg.value, tokensToPurchase);\r\n        require(currentPrice <= maxPrice);\r\n\r\n        uint256 tokensWuiAvailableByCurrentPrice = msg.value.mul(1e18).div(currentPrice);\r\n        if(tokensWuiAvailableByCurrentPrice > tokensToPurchase) {\r\n            tokensWuiAvailableByCurrentPrice = tokensToPurchase;\r\n        }\r\n        uint256 totalDealPrice = currentPrice.mul(tokensWuiAvailableByCurrentPrice).div(1e18);\r\n        require(msg.value >= tokensToPurchase.mul(maxPrice).div(1e18));\r\n        require(msg.value >= totalDealPrice);\r\n\r\n        // 9% system support fee\r\n        feeBalance = feeBalance + totalDealPrice.div(9);\r\n\r\n        //mint tokens to sender\r\n        uint256 availableTokens = token.balanceOf(this);\r\n        if (availableTokens < tokensWuiAvailableByCurrentPrice) {\r\n            uint256 tokensToMint = tokensWuiAvailableByCurrentPrice.sub(availableTokens);\r\n            token.mint(this, tokensToMint);\r\n        }\r\n        token.safeTransfer(msg.sender, tokensWuiAvailableByCurrentPrice);\r\n\r\n        // money back\r\n        if (totalDealPrice < msg.value) {\r\n            //            uint256 tokensToRefund = tokensToPurchase.sub(tokensWuiAvailableByCurrentPrice);\r\n            uint256 oddEthers = msg.value.sub(totalDealPrice);\r\n            if (oddEthers > 0) {\r\n                require(oddEthers < msg.value);\r\n                emit TransferMoneyBack(msg.sender, oddEthers);\r\n                msg.sender.transfer(oddEthers);\r\n                trackOdd(oddEthers);\r\n            }\r\n        }\r\n        emit Purchase(msg.sender, tokensToPurchase, totalDealPrice);\r\n        trackPurchase(tokensWuiAvailableByCurrentPrice, totalDealPrice);\r\n        return tokensWuiAvailableByCurrentPrice;\r\n    }\r\n\r\n    // buyback tokens from user\r\n    function buyBack(uint256 tokensToBuyBack, uint256 minPrice) public {\r\n        uint currentPrice = getBuyBackPrice(0);\r\n        require(currentPrice >= minPrice);\r\n        uint256 totalPrice = tokensToBuyBack.mul(currentPrice).div(1e18);\r\n        require(tokensToBuyBack > 0);\r\n        require(tokensToBuyBack <= token.balanceOf(msg.sender));\r\n\r\n        token.safeTransferFrom(msg.sender, this, tokensToBuyBack);\r\n\r\n        emit BuyBack(msg.sender, tokensToBuyBack, totalPrice);\r\n        trackBuyBack(tokensToBuyBack, totalPrice);\r\n        // send out eth\r\n        msg.sender.transfer(totalPrice);\r\n    }\r\n\r\n    // spend available tokens\r\n    function spend(uint256 tokensToSpend, bytes32 orderId) public {\r\n        token.safeTransferFrom(msg.sender, this, tokensToSpend);\r\n        token.burn(tokensToSpend);\r\n        trackSpend(tokensToSpend);\r\n        emit Spend(msg.sender, tokensToSpend, orderId);\r\n    }\r\n\r\n    // spend available and purchase up more if not enough\r\n    function purchaseUpAndSpend(uint256 tokensToSpend, uint256 maxPrice, bytes32 orderId) public payable returns(uint256 tokensSpent_){\r\n        uint256 tokensToPurchaseUp = tokensToSpend.sub(token.balanceOf(msg.sender));\r\n        uint256 currentPrice = getPurchasePrice(msg.value, tokensToPurchaseUp);\r\n        uint256 tokensAvailableByCurrentPrice = msg.value.mul(1e18).div(currentPrice);\r\n        require(tokensToPurchaseUp <= tokensAvailableByCurrentPrice);\r\n\r\n        if (tokensToPurchaseUp>0) {\r\n            purchase(tokensToPurchaseUp, maxPrice);\r\n        }\r\n        spend(tokensToSpend, orderId);\r\n        return tokensToSpend;\r\n    }\r\n\r\n    function getStat() onlyOwner public view returns(\r\n        uint256 tokensBoughtBack_, uint256 timesBoughtBack_,\r\n        uint256 tokensPurchased_, uint256 timesPurchased_,\r\n        uint256 ethSent_, uint256 ethReceived_,\r\n        uint256 tokensSpend_, uint256 timesSpend_,\r\n        uint256 oddSent_, uint256 feeSent_) {\r\n        return getStatistics();\r\n    }\r\n}\r\n\r\ncontract Distribution is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Recipient {\r\n        address addr;\r\n        uint256 share;\r\n        uint256 balance;\r\n        uint256 received;\r\n    }\r\n\r\n    uint256 sharesSum;\r\n    uint8 constant maxRecsAmount = 12;\r\n    mapping(address => Recipient) public recs;\r\n    address[maxRecsAmount] public recsLookUpTable; //to iterate\r\n\r\n    event Payment(address indexed to, uint256 value);\r\n    event AddShare(address to, uint256 value);\r\n    event ChangeShare(address to, uint256 value);\r\n    event DeleteShare(address to);\r\n    event ChangeAddessShare(address newAddress);\r\n    event FoundsReceived(uint256 value);\r\n\r\n    function Distribution() public {\r\n        sharesSum = 0;\r\n    }\r\n\r\n    function receiveFunds() public payable {\r\n        emit FoundsReceived(msg.value);\r\n        for (uint8 i = 0; i < maxRecsAmount; i++) {\r\n            Recipient storage rec = recs[recsLookUpTable[i]];\r\n            uint ethAmount = (rec.share.mul(msg.value)).div(sharesSum);\r\n            rec.balance = rec.balance + ethAmount;\r\n        }\r\n    }\r\n\r\n    modifier onlyMembers(){\r\n        require(recs[msg.sender].addr != address(0));\r\n        _;\r\n    }\r\n\r\n    function doPayments() public {\r\n        Recipient storage rec = recs[msg.sender];\r\n        require(rec.balance >= 1e12);\r\n        rec.addr.transfer(rec.balance);\r\n        emit Payment(rec.addr, rec.balance);\r\n        rec.received = (rec.received).add(rec.balance);\r\n        rec.balance = 0;\r\n    }\r\n\r\n    function addShare(address _rec, uint256 share) public onlyOwner {\r\n        require(_rec != address(0));\r\n        require(share > 0);\r\n        require(recs[_rec].addr == address(0));\r\n        recs[_rec].addr = _rec;\r\n        recs[_rec].share = share;\r\n        recs[_rec].received = 0;\r\n        for(uint8 i = 0; i < maxRecsAmount; i++ ) {\r\n            if (recsLookUpTable[i] == address(0)) {\r\n                recsLookUpTable[i] = _rec;\r\n                break;\r\n            }\r\n        }\r\n        sharesSum = sharesSum.add(share);\r\n        emit AddShare(_rec, share);\r\n    }\r\n\r\n    function changeShare(address _rec, uint share) public onlyOwner {\r\n        require(_rec != address(0));\r\n        require(share > 0);\r\n        require(recs[_rec].addr != address(0));\r\n        Recipient storage rec = recs[_rec];\r\n        sharesSum = sharesSum.sub(rec.share).add(share);\r\n        rec.share = share;\r\n        emit ChangeShare(_rec, share);\r\n    }\r\n\r\n    function deleteShare(address _rec) public onlyOwner {\r\n        require(_rec != address(0));\r\n        require(recs[_rec].addr != address(0));\r\n        sharesSum = sharesSum.sub(recs[_rec].share);\r\n        for(uint8 i = 0; i < maxRecsAmount; i++ ) {\r\n            if (recsLookUpTable[i] == recs[_rec].addr) {\r\n                recsLookUpTable[i] = address(0);\r\n                break;\r\n            }\r\n        }\r\n        delete recs[_rec];\r\n        emit DeleteShare(msg.sender);\r\n    }\r\n\r\n    function changeRecipientAddress(address _newRec) public {\r\n        require(msg.sender != address(0));\r\n        require(_newRec != address(0));\r\n        require(recs[msg.sender].addr != address(0));\r\n        require(recs[_newRec].addr == address(0));\r\n        require(recs[msg.sender].addr != _newRec);\r\n\r\n        Recipient storage rec = recs[msg.sender];\r\n        uint256 prevBalance = rec.balance;\r\n        addShare(_newRec, rec.share);\r\n        emit ChangeAddessShare(_newRec);\r\n        deleteShare(msg.sender);\r\n        recs[_newRec].balance = prevBalance;\r\n        emit DeleteShare(msg.sender);\r\n\r\n    }\r\n\r\n    function getMyBalance() public view returns(uint256) {\r\n        return recs[msg.sender].balance;\r\n    }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n  address internal owner;\r\n\r\n  function StandardToken() public {\r\n    // tokens available to sale\r\n    owner = msg.sender;\r\n  }\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender] || msg.sender == owner);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    if (msg.sender != owner) {\r\n      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    }\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract OMPxToken is BurnableToken, MintableToken{\r\n    using SafeMath for uint256;\r\n    uint32 public constant decimals = 18;\r\n    uint256 public constant initialSupply = 1e24;\r\n\r\n    string public constant name = \"OMPx Token\";\r\n    string public constant symbol = \"OMPX\";\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_disc\",\"type\":\"uint256\"}],\"name\":\"addDiscount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_disc\",\"type\":\"uint256\"}],\"name\":\"editDiscount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDiscountsAmount\",\"outputs\":[{\"name\":\"amount_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buyBackValue\",\"type\":\"uint256\"}],\"name\":\"getBuyBackPrice\",\"outputs\":[{\"name\":\"price_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStat\",\"outputs\":[{\"name\":\"tokensBoughtBack_\",\"type\":\"uint256\"},{\"name\":\"timesBoughtBack_\",\"type\":\"uint256\"},{\"name\":\"tokensPurchased_\",\"type\":\"uint256\"},{\"name\":\"timesPurchased_\",\"type\":\"uint256\"},{\"name\":\"ethSent_\",\"type\":\"uint256\"},{\"name\":\"ethReceived_\",\"type\":\"uint256\"},{\"name\":\"tokensSpend_\",\"type\":\"uint256\"},{\"name\":\"timesSpend_\",\"type\":\"uint256\"},{\"name\":\"oddSent_\",\"type\":\"uint256\"},{\"name\":\"feeSent_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokensToBuyBack\",\"type\":\"uint256\"},{\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"buyBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"purchaseValue\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPurchasePrice\",\"outputs\":[{\"name\":\"price_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokensToSpend\",\"type\":\"uint256\"},{\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"purchaseUpAndSpend\",\"outputs\":[{\"name\":\"tokensSpent_\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokensToPurchase\",\"type\":\"uint256\"},{\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[{\"name\":\"tokensBought_\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeReceiverContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"discounts\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"disc\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokensToSpend\",\"type\":\"uint256\"},{\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"spend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferMoneyBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"donator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"Spend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"received\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"received\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BuyBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"NewReceiverSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"OMPxContract","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3c43e679a287bd7f0838b6ea5ffea39af8d2a72b376d563f08f44e317c840a5c"}]}