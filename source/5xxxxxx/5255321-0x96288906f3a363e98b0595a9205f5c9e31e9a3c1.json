{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n\r\ncontract InterfaceDeusETH {\r\n    bool public gameOver;\r\n    bool public gameOverByUser;\r\n    function totalSupply() public view returns (uint256);\r\n    function livingSupply() public view returns (uint256);\r\n    function getState(uint256 _id) public returns (uint256);\r\n    function getHolder(uint256 _id) public returns (address);\r\n}\r\n\r\n\r\ncontract FundsKeeper {\r\n    using SafeMath for uint256;\r\n    InterfaceDeusETH public deusETH = InterfaceDeusETH(0x0);\r\n    bool public started = false;\r\n\r\n    uint256 public weiReceived;\r\n\r\n    // address of team\r\n    address public owner;\r\n    bool public salarySent = false;\r\n\r\n    uint256 public totalPayments = 0;\r\n\r\n    mapping(uint256 => bool) public payments;\r\n\r\n    event Bank(uint256 indexed _sum, uint256 indexed _add);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function FundsKeeper(address _owner) public {\r\n        require(_owner != address(0));\r\n        owner = _owner;\r\n    }\r\n\r\n    function () external payable {\r\n        weiReceive();\r\n    }\r\n\r\n    function getGain(uint256 _id) public {\r\n        require((deusETH.gameOver() && salarySent) || deusETH.gameOverByUser());\r\n        require(deusETH.getHolder(_id) == msg.sender);\r\n        require(deusETH.getState(_id) == 1); //living token only\r\n        require(payments[_id] == false);\r\n\r\n        address winner = msg.sender;\r\n\r\n        uint256 gain = calcGain();\r\n\r\n        require(gain != 0);\r\n        require(this.balance >= gain);\r\n\r\n        totalPayments = totalPayments.add(gain);\r\n        payments[_id] = true;\r\n\r\n        winner.transfer(gain);\r\n    }\r\n\r\n    function setLottery(address _deusETH) public onlyOwner {\r\n        require(!started);\r\n        deusETH = InterfaceDeusETH(_deusETH);\r\n        started = true;\r\n    }\r\n\r\n    function getTeamSalary() public onlyOwner returns (bool) {\r\n        require(!salarySent);\r\n        require(deusETH.gameOver());\r\n        require(!deusETH.gameOverByUser());\r\n        salarySent = true;\r\n        weiReceived = this.balance;\r\n        uint256 salary = weiReceived/10;\r\n        weiReceived = weiReceived.sub(salary);\r\n        owner.transfer(salary);\r\n        return true;\r\n    }\r\n\r\n    function changeLottery(address _deusETH) onlyOwner public {\r\n        deusETH = InterfaceDeusETH(_deusETH);\r\n    }\r\n\r\n    function checkPayments(uint _id) public view returns (bool) {\r\n        return payments[_id];\r\n    }\r\n\r\n    function changeOwner(address _newOwner) public onlyOwner returns (bool) {\r\n        require(_newOwner != address(0));\r\n        owner = _newOwner;\r\n        return true;\r\n    }\r\n\r\n    function weiReceive() internal {\r\n        Bank(this.balance, msg.value);\r\n    }\r\n\r\n    function calcGain() internal returns (uint256) {\r\n        if (deusETH.gameOverByUser() && (weiReceived == 0)) {\r\n            weiReceived = this.balance;\r\n        }\r\n        return weiReceived/deusETH.livingSupply();\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getGain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deusETH\",\"type\":\"address\"}],\"name\":\"changeLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deusETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"checkPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTeamSalary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"salarySent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deusETH\",\"type\":\"address\"}],\"name\":\"setLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sum\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_add\",\"type\":\"uint256\"}],\"name\":\"Bank\",\"type\":\"event\"}]","ContractName":"FundsKeeper","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b8579b19da2108249d4391d73430abba665515ca","Library":"","SwarmSource":"bzzr://dd60154e5037a1021a846d60fb89bb09848b3021b1ea7ec5e73d3f196bfb595d"}]}