{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract DinoToken is StandardToken, Pausable {\r\n    string public constant name = \"DINO Token\";\r\n    string public constant symbol = \"DINO\";\r\n    uint8  public constant decimals = 18;\r\n\r\n    address public  tokenSaleContract;\r\n\r\n    modifier validDestination(address to) {\r\n        require(to != address(this));\r\n        _;\r\n    }\r\n\r\n    function DinoToken(uint _tokenTotalAmount) public {\r\n        totalSupply = _tokenTotalAmount * (10 ** uint256(decimals));\r\n\r\n        balances[msg.sender] = totalSupply;\r\n        Transfer(address(0x0), msg.sender, totalSupply);\r\n\r\n        tokenSaleContract = msg.sender;\r\n    }\r\n\r\n    function transfer(address _to, uint _value)\r\n        public\r\n        validDestination(_to)\r\n        whenNotPaused\r\n        returns (bool) \r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        public\r\n        validDestination(_to)\r\n        whenNotPaused\r\n        returns (bool) \r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\ncontract DinoTokenSale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n\t// token allocation\r\n    uint public constant TOTAL_DINOTOKEN_SUPPLY  = 200000000;\r\n    uint public constant ALLOC_FOUNDATION       = 40000000e18; // 20%\r\n    uint public constant ALLOC_TEAM             = 30000000e18; // 15%\r\n    uint public constant ALLOC_MARKETING        = 30000000e18; // 15%\r\n    uint public constant ALLOC_ADVISOR          = 10000000e18; // 5%\r\n    uint public constant ALLOC_SALE             = 90000000e18; // 45%\r\n\r\n    // sale stage\r\n    uint public constant STAGE1_TIME_END  = 9 days; \r\n    uint public constant STAGE2_TIME_END  = 20 days; \r\n    uint public constant STAGE3_TIME_END  = 35 days; \r\n\r\n    // Token sale rate from ETH to DINO\r\n    uint public constant RATE_PRESALE      = 4000; // +25%\r\n    uint public constant RATE_CROWDSALE_S1 = 3680; // +15%\r\n    uint public constant RATE_CROWDSALE_S2 = 3424; // +7%\r\n    uint public constant RATE_CROWDSALE_S3 = 3200; // +0%\r\n\r\n\t// For token transfer\r\n    address public constant WALLET_FOUNDATION = 0x9bd5ae7400ce11b418a4ef9e9310fbd0c2f5e503; \r\n    address public constant WALLET_TEAM       = 0x9bb148948a75a5b205b4d13efb9fe893c8c8fb7b; \r\n    address public constant WALLET_MARKETING  = 0x83e5e7f8f90c90a0b8948dc2c1116f8c0dcf10d8; \r\n    address public constant WALLET_ADVISOR    = 0x5c166aa48503fbec223fa06d2757af01850d60f7; \r\n\r\n    // For ether transfer\r\n    address private constant WALLET_ETH_DINO  = 0x191B29ADbCA5Ecb285005Cff15441F8411DF5f72; \r\n    address private constant WALLET_ETH_ADMIN = 0xAba33f3a098f7f0AC9B60614e395A40406e97915; \r\n\r\n    DinoToken public dinoToken; \r\n\r\n    uint256 public presaleStartTime = 1528416000; // 2018-6-8 8:00 (UTC+8) 1528416000\r\n    uint256 public startTime        = 1528848000; // 2018-6-13 8:00 (UTC+8) 1528848000\r\n    uint256 public endTime          = 1531872000; // 2018-7-18 8:00 (UTC+8) 1531872000\r\n    bool public halted;\r\n\r\n    mapping(address=>bool) public whitelisted_Presale;\r\n\r\n    // stats\r\n    uint256 public totalDinoSold;\r\n    uint256 public weiRaised;\r\n    mapping(address => uint256) public weiContributions;\r\n\r\n    // EVENTS\r\n    event updatedPresaleWhitelist(address target, bool isWhitelisted);\r\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n\r\n    function DinoTokenSale() public {\r\n        dinoToken = new DinoToken(TOTAL_DINOTOKEN_SUPPLY);\r\n        dinoToken.transfer(WALLET_FOUNDATION, ALLOC_FOUNDATION);\r\n        dinoToken.transfer(WALLET_TEAM, ALLOC_TEAM);\r\n        dinoToken.transfer(WALLET_MARKETING, ALLOC_MARKETING);\r\n        dinoToken.transfer(WALLET_ADVISOR, ALLOC_ADVISOR);\r\n\r\n        dinoToken.transferOwnership(owner);\r\n    }\r\n\r\n    function updatePresaleWhitelist(address[] _targets, bool _isWhitelisted)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint i = 0; i < _targets.length; i++) {\r\n            whitelisted_Presale[_targets[i]] = _isWhitelisted;\r\n            emit updatedPresaleWhitelist(_targets[i], _isWhitelisted);\r\n        }\r\n    }\r\n\r\n    function validPurchase() \r\n        internal \r\n        returns(bool) \r\n    {\r\n        bool withinPeriod = now >= presaleStartTime && now <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return withinPeriod && nonZeroPurchase && !halted;\r\n    }\r\n\r\n    function getPriceRate()\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        if (now <= startTime) return 0;\r\n        if (now <= startTime + STAGE1_TIME_END) return RATE_CROWDSALE_S1;\r\n        if (now <= startTime + STAGE2_TIME_END) return RATE_CROWDSALE_S2;\r\n        if (now <= startTime + STAGE3_TIME_END) return RATE_CROWDSALE_S3;\r\n        return 0;\r\n    }\r\n\r\n    function ()\r\n        public \r\n        payable \r\n    {\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n        uint256 purchaseTokens;\r\n\r\n        if (whitelisted_Presale[msg.sender]) \r\n            purchaseTokens = weiAmount.mul(RATE_PRESALE); \r\n        else\r\n            purchaseTokens = weiAmount.mul(getPriceRate()); \r\n\r\n        require(purchaseTokens > 0 && ALLOC_SALE - totalDinoSold >= purchaseTokens); // supply check\r\n        require(dinoToken.transfer(msg.sender, purchaseTokens));\r\n        emit TokenPurchase(msg.sender, weiAmount, purchaseTokens);\r\n\r\n        totalDinoSold = totalDinoSold.add(purchaseTokens); \r\n        weiRaised = weiRaised.add(weiAmount);\r\n        weiContributions[msg.sender] = weiContributions[msg.sender].add(weiAmount);\r\n        \r\n        forwardFunds();\r\n    }\r\n\r\n    function forwardFunds() \r\n        internal \r\n    {\r\n        WALLET_ETH_DINO.transfer((msg.value).mul(91).div(100));\r\n        WALLET_ETH_ADMIN.transfer((msg.value).mul(9).div(100));\r\n    }\r\n\r\n    function hasEnded() \r\n        public \r\n        view\r\n        returns(bool) \r\n    {\r\n        return now > endTime;\r\n    }\r\n\r\n    function toggleHalt(bool _halted)\r\n        public\r\n        onlyOwner\r\n    {\r\n        halted = _halted;\r\n    }\r\n\r\n    function drainToken(address _to, uint256 _amount) \r\n        public\r\n        onlyOwner\r\n    {\r\n        require(dinoToken.balanceOf(this) >= _amount);\r\n        dinoToken.transfer(_to, _amount);\r\n    }\r\n\r\n    function drainRemainingToken(address _to) \r\n        public\r\n        onlyOwner\r\n    {\r\n        require(hasEnded());\r\n        dinoToken.transfer(_to, dinoToken.balanceOf(this));\r\n    }\r\n\r\n    function safeDrain() \r\n        public\r\n        onlyOwner\r\n    {\r\n        WALLET_ETH_ADMIN.transfer(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"RATE_CROWDSALE_S2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weiContributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_CROWDSALE_S3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_MARKETING\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_CROWDSALE_S1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"drainRemainingToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_FOUNDATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted_Presale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE2_TIME_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_MARKETING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE1_TIME_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_FOUNDATION\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_halted\",\"type\":\"bool\"}],\"name\":\"toggleHalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_DINOTOKEN_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDinoSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE_PRESALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"drainToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_ADVISOR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"updatePresaleWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ALLOC_ADVISOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE3_TIME_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeDrain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dinoToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"updatedPresaleWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DinoTokenSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6f271863463cec2626f2b8c10f56ba6a849d028c72a39e4c0f5959e65eb9a9de"}]}