{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract StandardToken {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Issuance(address indexed to, uint256 value);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint public totalSupply;\r\n}\r\n\r\ncontract MintableToken is StandardToken {\r\n    address public owner;\r\n\r\n    bool public isMinted = false;\r\n\r\n    function mint(address _to) public {\r\n        assert(msg.sender == owner && !isMinted);\r\n\r\n        balances[_to] = totalSupply;\r\n        isMinted = true;\r\n    }\r\n}\r\n\r\ncontract SafeNetToken is MintableToken {\r\n    string public name = 'SafeNet Token';\r\n    string public symbol = 'SNT';\r\n    uint8 public decimals = 18;\r\n\r\n    function SafeNetToken(uint _totalSupply) public {\r\n        owner = msg.sender;\r\n        totalSupply = _totalSupply;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Treaties {\r\n    using SafeMath for uint;\r\n\r\n    SafeNetToken public token; \r\n\r\n    address public creator;\r\n    bool public creatorInited = false;\r\n\r\n    address public wallet;\r\n\r\n    uint public walletPercentage = 100;\r\n\r\n    address[] public owners;\r\n    address[] public teams;\r\n    address[] public investors;\r\n\r\n    mapping (address => bool) public inList;\r\n\r\n    uint public tokensInUse = 0;\r\n\r\n    mapping (address => uint) public refunds;\r\n\r\n    struct Request {\r\n        uint8 rType; // 0 - owner, 1 - team, 2 - investor(eth), 3 - investor(fiat), 4 - new percentage\r\n        address beneficiary;\r\n        string treatyHash;\r\n        uint tokensAmount;\r\n        uint ethAmount;\r\n        uint percentage;\r\n\r\n        uint8 isConfirmed; // 0 - pending, 1 - declined, 2 - accepted\r\n        address[] ownersConfirm;\r\n    }\r\n\r\n    Request[] public requests;\r\n\r\n    modifier onlyOwner() {\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            if (owners[i] == msg.sender) {\r\n                _;\r\n            }\r\n        }\r\n    }   \r\n\r\n    event NewRequest(uint8 rType, address beneficiary, string treatyHash, uint tokensAmount, uint ethAmount, uint percentage, uint id);\r\n    event RequestConfirmed(uint id);\r\n    event RequestDeclined(uint id);\r\n    event RefundsCalculated();\r\n\r\n    function Treaties(address _wallet, SafeNetToken _token) public {\r\n        creator = msg.sender;\r\n        token = _token;\r\n        wallet = _wallet;\r\n    }\r\n\r\n    function() external payable {\r\n        splitProfit(msg.value);\r\n    }\r\n\r\n    // after mint\r\n    function initCreator(uint _tokensAmount) public {\r\n        assert(msg.sender == creator && !creatorInited);\r\n\r\n        owners.push(creator);\r\n        assert(token.transfer(creator, _tokensAmount));\r\n        tokensInUse += _tokensAmount;\r\n        inList[creator] = true;\r\n        creatorInited = true;\r\n    }\r\n\r\n\r\n    function createTreatyRequest(uint8 _rType, string _treatyHash, uint _tokensAmount) public {\r\n        require(_rType <= 1);\r\n\r\n        requests.push(Request({\r\n            rType: _rType,\r\n            beneficiary: msg.sender,\r\n            treatyHash: _treatyHash,\r\n            tokensAmount: _tokensAmount,\r\n            ethAmount: 0,\r\n            percentage: 0,\r\n            isConfirmed: 0,\r\n            ownersConfirm: new address[](0)\r\n            }));\r\n\r\n        emit NewRequest(_rType, msg.sender, _treatyHash, _tokensAmount, 0, 0, requests.length - 1);\r\n    }\r\n\r\n    function createEthInvestorRequest(uint _tokensAmount) public payable {\r\n        assert(msg.value > 0);\r\n\r\n        requests.push(Request({\r\n            rType: 2,\r\n            beneficiary: msg.sender,\r\n            treatyHash: '',\r\n            tokensAmount: _tokensAmount,\r\n            ethAmount: msg.value,\r\n            percentage: 0,\r\n            isConfirmed: 0,\r\n            ownersConfirm: new address[](0)\r\n            }));\r\n\r\n        emit NewRequest(2, msg.sender, \"\", _tokensAmount, msg.value, 0, requests.length - 1);\r\n    }\r\n\r\n    function removeEthInvestorRequest(uint id) public {\r\n        require(id < requests.length);\r\n        assert(requests[id].isConfirmed == 0 && requests[id].rType == 2);\r\n        assert(requests[id].beneficiary == msg.sender);\r\n\r\n        requests[id].isConfirmed = 1;\r\n        assert(msg.sender.send(requests[id].ethAmount));\r\n        emit RequestDeclined(id);\r\n    }\r\n\r\n    function createFiatInvestorRequest(uint _tokensAmount) public {\r\n        requests.push(Request({\r\n            rType: 3,\r\n            beneficiary: msg.sender,\r\n            treatyHash: '',\r\n            tokensAmount: _tokensAmount,\r\n            ethAmount: 0,\r\n            percentage: 0,\r\n            isConfirmed: 0,\r\n            ownersConfirm: new address[](0)\r\n            }));\r\n\r\n        emit NewRequest(3, msg.sender, \"\", _tokensAmount, 0, 0, requests.length - 1);\r\n    }\r\n\r\n    function createPercentageRequest(uint _percentage) public onlyOwner {\r\n        require(_percentage <= 100);\r\n\r\n        requests.push(Request({\r\n            rType: 4,\r\n            beneficiary: msg.sender,\r\n            treatyHash: '',\r\n            tokensAmount: 0,\r\n            ethAmount: 0,\r\n            percentage: _percentage,\r\n            isConfirmed: 0,\r\n            ownersConfirm: new address[](0)\r\n            }));\r\n\r\n        emit NewRequest(4, msg.sender, \"\", 0, 0, _percentage, requests.length - 1);\r\n    }\r\n\r\n\r\n    function confirmRequest(uint id) public onlyOwner {\r\n        require(id < requests.length);\r\n        assert(requests[id].isConfirmed == 0);\r\n\r\n        uint tokensConfirmed = 0;\r\n        for (uint i = 0; i < requests[id].ownersConfirm.length; i++) {\r\n            assert(requests[id].ownersConfirm[i] != msg.sender);\r\n            tokensConfirmed += token.balanceOf(requests[id].ownersConfirm[i]);\r\n        }\r\n\r\n        requests[id].ownersConfirm.push(msg.sender);\r\n        tokensConfirmed += token.balanceOf(msg.sender);\r\n\r\n        uint tokensInOwners = 0;\r\n        for (i = 0; i < owners.length; i++) {\r\n            tokensInOwners += token.balanceOf(owners[i]);\r\n        }\r\n\r\n        if (tokensConfirmed > tokensInOwners / 2) {\r\n            if (requests[id].rType == 4) {\r\n                walletPercentage = requests[id].percentage;\r\n\r\n            } else {\r\n                if (!inList[requests[id].beneficiary]) {\r\n                    if (requests[id].rType == 0) {\r\n                        owners.push(requests[id].beneficiary);\r\n                        token.transfer(creator, requests[id].tokensAmount / 10);\r\n                    }\r\n                    if (requests[id].rType == 1) {\r\n                        teams.push(requests[id].beneficiary);\r\n                    }\r\n                    if (requests[id].rType == 2 || requests[id].rType == 3) {\r\n                        investors.push(requests[id].beneficiary);\r\n                    }\r\n                    inList[requests[id].beneficiary] = true;\r\n                }\r\n\r\n                if (requests[id].rType == 2) {\r\n                    assert(wallet.send(requests[id].ethAmount));\r\n                }\r\n\r\n                token.transfer(requests[id].beneficiary, requests[id].tokensAmount);\r\n                tokensInUse += requests[id].tokensAmount;\r\n            }\r\n\r\n            requests[id].isConfirmed = 2;\r\n            emit RequestConfirmed(id);\r\n        }\r\n    }\r\n\r\n    function rejectRequest(uint id) public onlyOwner {\r\n        require(id < requests.length);\r\n        assert(requests[id].isConfirmed == 0);\r\n\r\n        for (uint i = 0; i < requests[id].ownersConfirm.length; i++) {\r\n            if (requests[id].ownersConfirm[i] == msg.sender) {\r\n                requests[id].ownersConfirm[i] = requests[id].ownersConfirm[requests[id].ownersConfirm.length - 1];\r\n                requests[id].ownersConfirm.length--;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function splitProfit(uint profit) internal {\r\n        uint rest = profit;\r\n        uint refund;\r\n        address addr;\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            addr = owners[i];\r\n            refund = profit.mul(token.balanceOf(addr)).mul(100 - walletPercentage).div(100).div(tokensInUse);\r\n            refunds[addr] += refund;\r\n            rest -= refund;\r\n        }\r\n        for (i = 0; i < teams.length; i++) {\r\n            addr = teams[i];\r\n            refund = profit.mul(token.balanceOf(addr)).mul(100 - walletPercentage).div(100).div(tokensInUse);\r\n            refunds[addr] += refund;\r\n            rest -= refund;\r\n        }\r\n        for (i = 0; i < investors.length; i++) {\r\n            addr = investors[i];\r\n            refund = profit.mul(token.balanceOf(addr)).mul(100 - walletPercentage).div(100).div(tokensInUse);\r\n            refunds[addr] += refund;\r\n            rest -= refund;\r\n        }\r\n\r\n        assert(wallet.send(rest));\r\n        emit RefundsCalculated();\r\n    }\r\n\r\n    function withdrawRefunds() public {\r\n        assert(refunds[msg.sender] > 0);\r\n        uint refund = refunds[msg.sender];\r\n        refunds[msg.sender] = 0;\r\n        assert(msg.sender.send(refund));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"inList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"rejectRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teams\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"createPercentageRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"initCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"createFiatInvestorRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"name\":\"rType\",\"type\":\"uint8\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"treatyHash\",\"type\":\"string\"},{\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"},{\"name\":\"isConfirmed\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"createEthInvestorRequest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"confirmRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorInited\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rType\",\"type\":\"uint8\"},{\"name\":\"_treatyHash\",\"type\":\"string\"},{\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"createTreatyRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensInUse\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"removeEthInvestorRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"treatyHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percentage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"NewRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RequestConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RequestDeclined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RefundsCalculated\",\"type\":\"event\"}]","ContractName":"Treaties","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000089f030d0390f8994177cf2536b18c62d67a29cfe00000000000000000000000012b4528c5457183dd3fa651a0628a086256d4797","Library":"","SwarmSource":"bzzr://2a9566a3b15042dfd069f8b4456d0bbaffcd3d387032f10bf0c058ed29765da4"}]}