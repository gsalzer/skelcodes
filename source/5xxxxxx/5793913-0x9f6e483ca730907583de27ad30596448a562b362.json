{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address internal newOwner;\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    event updateOwner(address _oldOwner, address _newOwner);\r\n      ///change the owner\r\n    function changeOwner(address _newOwner) public onlyOwner returns(bool) {\r\n        require(owner != _newOwner);\r\n        newOwner = _newOwner;\r\n        return true;\r\n    }\r\n    \r\n    /// accept the ownership\r\n    function acceptNewOwner() public returns(bool) {\r\n        require(msg.sender == newOwner);\r\n        emit updateOwner(owner, newOwner);\r\n        owner = newOwner;\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20Token {\r\n\r\n    uint256  internal _totalSupply;\r\n\r\n    mapping (address => uint256) public balances;\r\n\r\n    function totalSupply() constant public returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\ncontract Controlled is Owned {\r\n    using SafeMath for uint;\r\n    uint256 oneMonth = 3600 * 24 * 30; //2592000\r\n\r\n    uint256 public releaseStartTime = 1527910441;  //20180602 11:35 default  date +%s\r\n    bool  public emergencyStop = false;\r\n    uint256 internal _lockValue;\r\n    \r\n    event reportCalc(address _user,uint transferValue,uint256 releaseValue);\r\n    struct userToken {\r\n        uint256 OCE;\r\n        uint256 addrLockType;\r\n    }\r\n    mapping (address => userToken) userReleaseToken;\r\n\r\n    modifier canTransfer {\r\n        require(emergencyStop == false);\r\n        _;\r\n    }\r\n\r\n    function setTransferOCE(bool _bool) public onlyOwner{\r\n        emergencyStop = !_bool;\r\n    }\r\n\r\n\r\n    function setRealseTime(uint256 _time) public onlyOwner {\r\n        releaseStartTime = _time;\r\n    }\r\n\r\n    modifier releaseTokenValid(address _user, uint256 _value) {\r\n        uint256 _lockTypeIndex = userReleaseToken[_user].addrLockType;\r\n        if(_lockTypeIndex != 0) {\r\n            uint256 lockValue = userReleaseToken[_user].OCE.sub(calcReleaseToken(_user));\r\n            emit reportCalc(_user,_value,lockValue);\r\n            require (_value >= lockValue);\r\n        }\r\n        _;\r\n    }\r\n\r\n    function getLockBalance(address _user) constant public returns (uint256)\r\n    {\r\n        _lockValue = 0;\r\n        uint256 _lockTypeIndex = userReleaseToken[_user].addrLockType;\r\n        if(_lockTypeIndex != 0) {\r\n            _lockValue = userReleaseToken[_user].OCE.sub(calcReleaseToken(_user));\r\n            emit reportCalc(_user,_lockTypeIndex,_lockValue);\r\n        }\r\n        return _lockValue;\r\n    }\r\n\r\n    function calcReleaseToken(address _user) internal view returns (uint256) {\r\n        uint256 _lockTypeIndex = userReleaseToken[_user].addrLockType;\r\n        uint256 _timeDifference = now.sub(releaseStartTime);\r\n        uint256 _whichPeriod = getPeriod(_lockTypeIndex, _timeDifference);\r\n\r\n        // lock type 1, 75% lock 3 months\r\n        // lock type 2, 90% lock 6 months\r\n        // lock type 3, 75% lock 3 years remove it\r\n\r\n        if(_lockTypeIndex == 1) {\r\n            return (percent(userReleaseToken[_user].OCE, 25).add( percent(userReleaseToken[_user].OCE, _whichPeriod.mul(25))));\r\n        }\r\n        if(_lockTypeIndex == 2) {\r\n            return (percent(userReleaseToken[_user].OCE, 10).add(percent(userReleaseToken[_user].OCE, _whichPeriod.mul(25))));\r\n        }\r\n        if(_lockTypeIndex == 3) {\r\n            return (percent(userReleaseToken[_user].OCE, 25).add(percent(userReleaseToken[_user].OCE, _whichPeriod.mul(15))));\r\n        }\r\n        revert();\r\n    }\r\n\r\n\r\n    function getPeriod(uint256 _lockTypeIndex, uint256 _timeDifference) internal view returns (uint256) {        \r\n\r\n        if(_lockTypeIndex == 1) {           //The lock for medium investment\r\n            uint256 _period2 = _timeDifference.div(oneMonth);\r\n            if(_period2 >= 3){\r\n                _period2 = 3;\r\n            }\r\n            return _period2;\r\n        }\r\n        if(_lockTypeIndex == 2) {           //The lock for massive investment\r\n            uint256 _period3 = _timeDifference.div(oneMonth);\r\n            if(_period3 >= 6){\r\n                _period3 = 6;\r\n            }\r\n            return _period3;\r\n        }\r\n        if(_lockTypeIndex == 3) {           //The lock for the usechain coreTeamSupply\r\n            uint256 _period1 = (_timeDifference.div(oneMonth)).div(12);\r\n            if(_period1 >= 3){\r\n                _period1 = 3;\r\n            }\r\n            return _period1;\r\n        }\r\n        revert();\r\n    }\r\n\r\n    function percent(uint _token, uint _percentage) internal pure returns (uint) {\r\n        return _percentage.mul(_token).div(100);\r\n    }\r\n\r\n}\r\n\r\ncontract standardToken is ERC20Token, Controlled {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    function totalSupply() constant public returns (uint256 ){\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value)\r\n        public\r\n        canTransfer\r\n        releaseTokenValid(msg.sender, balances[msg.sender].sub(_value))\r\n        returns (bool)\r\n    {\r\n        require (balances[msg.sender] >= _value);           // Throw if sender has insufficient balance\r\n        require(_to != address(0));\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);                     // Deduct senders balance\r\n        balances[_to] = balances[_to].add(_value);                            // Add recivers balance\r\n        emit Transfer(msg.sender, _to, _value);             // Raise Transfer event\r\n        return true;\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;          // Set allowance\r\n        emit Approval(msg.sender, _spender, _value);             // Raise Approval event\r\n        return true;\r\n    }\r\n\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        approve(_spender, _value);                          // Set approval to contract for _value\r\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n        if(!_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { \r\n            revert();\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        canTransfer\r\n        releaseTokenValid(msg.sender, balances[msg.sender].sub(_value))\r\n        returns (bool success)\r\n   {\r\n        require(_to != address(0));\r\n        require (_value <= balances[_from]);                // Throw if sender does not have enough balance\r\n        require (_value <= allowed[_from][msg.sender]);  // Throw if you do not have allowance\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);                       // Raise Transfer event\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract LTE is Owned, standardToken {\r\n\r\n    string constant public name   = \"LTEChainToken\";\r\n    string constant public symbol = \"LTE\";\r\n    uint constant public decimals = 18;\r\n\r\n    mapping(address => uint256) public ethBalances;\r\n    uint256 public ethCrowdsale = 0;\r\n    uint256 public rate = 1;\r\n    bool public crowdsaleClosed = false;\r\n\r\n    uint256 constant public topTotalSupply = 1 * 10**9 * 10**decimals;\r\n\r\n    event fallbackTrigged(address addr,uint256 amount);\r\n\r\n    function() payable {//decimals same as eth decimals\r\n        require(!crowdsaleClosed);\r\n        uint ethAmount = msg.value;\r\n        ethBalances[msg.sender] = ethBalances[msg.sender].add(ethAmount);\r\n        ethCrowdsale = ethCrowdsale.add(ethAmount);\r\n        uint256 rewardAmount = ethAmount.mul(rate);\r\n        require (_totalSupply.add(rewardAmount)<=topTotalSupply);\r\n        _totalSupply = _totalSupply.add(rewardAmount);\r\n        balances[msg.sender] = balances[msg.sender].add(rewardAmount);\r\n        emit fallbackTrigged(msg.sender,rewardAmount);\r\n    }\r\n\r\n    function setCrowdsaleClosed(bool _bool) public onlyOwner {\r\n        crowdsaleClosed = _bool;\r\n    }\r\n\r\n    function setRate(uint256 _value) public onlyOwner {\r\n        rate = _value;\r\n    }\r\n\r\n    function getBalance() constant onlyOwner returns(uint){\r\n        return this.balance;\r\n    }\r\n\r\n    event SendEvent(address to, uint256 value, bool result);\r\n    \r\n    function sendEther(address addr,uint256 _value) public onlyOwner {\r\n        bool result = false;\r\n        require (_value < this.balance);     \r\n        result = addr.send(_value);\r\n        emit SendEvent(addr, _value, result);\r\n    }\r\n\r\n    function kill(address _addr) public onlyOwner {\r\n        selfdestruct(_addr);\r\n    }\r\n\r\n    function allocateToken(address[] _owners, uint256[] _values, uint256[] _addrLockType) public onlyOwner {\r\n        require ((_owners.length == _values.length) && ( _values.length == _addrLockType.length));\r\n\r\n        for(uint i = 0; i < _owners.length ; i++){\r\n            uint256 value = _values[i] * 10**decimals ;\r\n            require (_totalSupply.add(value)<=topTotalSupply);\r\n            _totalSupply = _totalSupply.add(value);\r\n            balances[_owners[i]] = balances[_owners[i]].add(value);             // Set minted coins to target\r\n            emit Transfer(0x0, _owners[i], value);\r\n            userReleaseToken[_owners[i]].OCE = userReleaseToken[_owners[i]].OCE.add(value);\r\n            userReleaseToken[_owners[i]].addrLockType = _addrLockType[i];\r\n        }\r\n    }\r\n\r\n\r\n    function allocateCandyToken(address[] _owners, uint256[] _values) public onlyOwner {\r\n        require (_owners.length == _values.length);\r\n        for(uint i = 0; i < _owners.length ; i++){\r\n            uint256 value = _values[i]* 10**decimals;\r\n            require (_totalSupply.add(value)<=topTotalSupply);\r\n            _totalSupply = _totalSupply.add(value);\r\n            balances[_owners[i]] = balances[_owners[i]].add(value);\r\n            emit Transfer(0x0, _owners[i], value);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLockBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"topTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setRealseTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"_addrLockType\",\"type\":\"uint256[]\"}],\"name\":\"allocateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"allocateCandyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setCrowdsaleClosed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setTransferOCE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptNewOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fallbackTrigged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"SendEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transferValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseValue\",\"type\":\"uint256\"}],\"name\":\"reportCalc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LTE","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ad4675dd3c59d0c70be7769d3d93cb06f1f229cf28e99925ff07cee556b3ce4c"}]}