{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.14;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ninterface GlobexSci {\r\n  function totalSupply() constant returns (uint256 totalSupply);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n  function approve(address _spender, uint256 _value) returns (bool success);\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n}\r\n\r\n\r\n/**\r\n * @title  \r\n * @dev DatCrowdSale is a contract for managing a token crowdsale.\r\n * GlobexSciCrowdSale have a start and end date, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a refundable valut \r\n * as they arrive.\r\n */\r\ncontract GlobexSciICO is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  GlobexSci public token = GlobexSci(0x88dBd3f9E6809FC24d27B9403371Af1cC089ba9e);\r\n\r\n  // start and end date where investments are allowed (both inclusive)\r\n  uint256 public startDate = 1524182400; //Wed, 20 Apr 2018 00:00:00 +0000\r\n  \r\n  // Minimum amount to participate\r\n  uint256 public minimumParticipationAmount = 100000000000000000 wei; //0.1 ether\r\n\r\n  // address where funds are collected\r\n  address wallet;\r\n\r\n  // how many token units a buyer gets per ether\r\n  uint256 rate = 500;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  //flag for final of crowdsale\r\n  bool public isFinalized = false;\r\n\r\n  //cap for the sale\r\n  uint256 public cap = 60000000000000000000000 wei; //60000 ether\r\n \r\n    uint week1 = 1 * 7 * 1 days;\r\n    uint week2 = 2 * 7 * 1 days;\r\n    uint week3 = 3 * 7 * 1 days;\r\n    uint week4 = 4 * 7 * 1 days;\r\n    uint week5 = 5 * 7 * 1 days;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */ \r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  /**\r\n  * @notice Log an event for each funding contributed during the public phase\r\n  * @notice Events are not logged when the constructor is being executed during\r\n  *         deployment, so the preallocations will not be logged\r\n  */\r\n  event LogParticipation(address indexed sender, uint256 value, uint256 timestamp);\r\n\r\n\r\n  \r\n  function GlobexSciICO() {\r\n    wallet = msg.sender;\r\n  }\r\n\r\n    //When a user buys our token they will recieve:,\r\n    //    - Week 1 - they will recieve 25% bonus\r\n    //    - Week 2 - they will revieve 15% bonus\r\n    //    - Week 3 - They will recieve 10% bonus\r\n    //    - Week 4 - they will recieve no bonus\r\n    //    - Week 5 - they will recieve no bonus\r\n  function getBonus() constant returns (uint256 price) {\r\n        uint currentDate = now;\r\n\r\n        if (currentDate < startDate + week1) {\r\n            return 25;\r\n        }\r\n\r\n        if (currentDate > startDate + week1 && currentDate < startDate + week2) {\r\n            return 20;\r\n        }\r\n\r\n        if (currentDate > startDate + week2 && currentDate < startDate + week3) {\r\n            return 15;\r\n        }\r\n        if (currentDate > startDate + week3 && currentDate < startDate + week4) {\r\n            return 10;\r\n        }\r\n        if (currentDate > startDate + week4 && currentDate < startDate + week5) {\r\n            return 5;\r\n        }\r\n        return 0; \r\n    }\r\n  \r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    //get ammount in wei\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n    uint bonus = getBonus();\r\n    tokens = tokens + tokens * bonus / 100;\r\n\r\n    //purchase tokens and transfer to beneficiary\r\n    token.transfer(beneficiary, tokens);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    //Token purchase event\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    //forward funds to wallet\r\n    forwardFunds();\r\n  }\r\n\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // should be called after crowdsale ends or to emergency stop the sale\r\n  function finalize() onlyOwner {\r\n    require(!isFinalized);\r\n    uint256 unsoldTokens = token.balanceOf(this);\r\n    token.transfer(wallet, unsoldTokens);\r\n    isFinalized = true;\r\n    Finalized();\r\n  }\r\n\r\n\r\n  // @return true if the transaction can buy tokens\r\n  // check for valid time period, min amount and within cap\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = startDate <= now;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    bool minAmount = msg.value >= minimumParticipationAmount;\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n\r\n    return withinPeriod && nonZeroPurchase && minAmount && !isFinalized && withinCap;\r\n  }\r\n\r\n    // @return true if the goal is reached\r\n  function capReached() public constant returns (bool) {\r\n    return weiRaised >= cap;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return isFinalized;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"minimumParticipationAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogParticipation\",\"type\":\"event\"}]","ContractName":"GlobexSciICO","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://483d4033ab3279e7f721993c45a1a0791f8fdf6f707e74d8e5a0ba2bc01b4b2c"}]}