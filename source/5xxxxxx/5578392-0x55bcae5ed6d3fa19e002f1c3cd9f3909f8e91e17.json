{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n//1,45 left. -*-*-*-*- 45 55 programmer. -*-*-*-*-*-upper 35 right.\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Cryptoraces {\r\n\r\n\r\n  using SafeMath for uint;\r\n  uint256 maximumBalance;\r\n  uint256 rewardnumber;\r\n  address private manager;\r\n  uint minimumBet;\r\n  //address public listofwinners;\r\n  //address public listoflosers;\r\n\r\n  struct raceDetails {\r\n      uint time;\r\n      uint luckNumber;\r\n      uint horseType;\r\n  }\r\n\r\n  mapping (address => raceDetails) members;\r\n\r\n  address[] private listofUsers;\r\n\r\n\r\n  constructor() public {\r\n      manager = msg.sender;\r\n  }\r\n\r\n\r\n    function random() private view returns (uint) {\r\n        return uint(keccak256(block.difficulty, block.timestamp, now));\r\n    }\r\n\r\n\r\n\r\n  function enter(uint256 leftorright) public payable {\r\n\r\n      if(leftorright == 1) {\r\n        maximumBalance = getMaximumBetRate();\r\n        require(msg.value < maximumBalance && msg.value > .001 ether,\"Your bet is too high!\");\r\n\r\n        rewardnumber = randomtests();\r\n        if(rewardnumber < 45){\r\n            msg.sender.transfer(msg.value.mul(2));\r\n            members[msg.sender].time = now;\r\n            members[msg.sender].luckNumber = rewardnumber;\r\n            members[msg.sender].horseType = leftorright;\r\n            listofUsers.push(msg.sender) -1;\r\n        } else {\r\n\r\n          members[msg.sender].time = now;\r\n          members[msg.sender].luckNumber = rewardnumber;\r\n          members[msg.sender].horseType = leftorright;\r\n          listofUsers.push(msg.sender) -1;\r\n        }\r\n      } else {\r\n        maximumBalance = getMaximumBetRate();\r\n        require(msg.value < maximumBalance && msg.value > .001 ether,\"Your bet is too high or low\");\r\n\r\n        rewardnumber = randomtests();\r\n        if(rewardnumber > 55){\r\n            msg.sender.transfer(msg.value.mul(2));\r\n\r\n            members[msg.sender].time = now;\r\n            members[msg.sender].horseType = leftorright;\r\n            members[msg.sender].luckNumber = rewardnumber;\r\n            listofUsers.push(msg.sender) -1;\r\n        } else {\r\n\r\n          members[msg.sender].time = now;\r\n          members[msg.sender].horseType = leftorright;\r\n          members[msg.sender].luckNumber = rewardnumber;\r\n          listofUsers.push(msg.sender) -1;\r\n        }\r\n      }\r\n    }\r\n\r\nfunction getMaximumBetRate() public view returns(uint256){\r\n    return address(this).balance.div(20);\r\n  }\r\n\r\n\r\n  function randomtests() private view returns(uint256){\r\n    uint256 index = random() % 100;\r\n    return index;\r\n  }\r\n\r\n  function getAccounts() view public returns(address[]) {\r\n      return listofUsers;\r\n  }\r\n\r\n  function numberofGamePlay() view public returns (uint) {\r\n      return listofUsers.length;\r\n  }\r\n\r\n  function uint2str(uint i) internal pure returns (string){\r\n    if (i == 0) return \"0\";\r\n    uint j = i;\r\n    uint length;\r\n    while (j != 0){\r\n        length++;\r\n        j /= 10;\r\n    }\r\n    bytes memory bstr = new bytes(length);\r\n    uint k = length - 1;\r\n    while (i != 0){\r\n        bstr[k--] = byte(48 + i % 10);\r\n        i /= 10;\r\n    }\r\n    return string(bstr);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n  function getAccDetails(address _address) view public returns (string, string, string ,string) {\r\n\r\n\r\n    if(members[_address].time == 0){\r\n            return (\"0\", \"0\", \"0\", \"You have never played this game before\");\r\n    } else {\r\n\r\n      if(members[_address].horseType == 1) {\r\n\r\n       if(rewardnumber < 45){\r\n           return (uint2str(members[_address].time), uint2str(members[_address].luckNumber), uint2str(members[_address].horseType), \"You Win because your number smaller than 45\");\r\n\r\n       } else {\r\n           return (uint2str(members[_address].time), uint2str(members[_address].luckNumber),uint2str(members[_address].horseType), \"youre lose  because your number bigger than 45\");\r\n       }\r\n     } else {\r\n\r\n       if(rewardnumber > 55){\r\n           return (uint2str(members[_address].time), uint2str(members[_address].luckNumber),uint2str(members[_address].horseType), \"You win, because your number bigger than 55\");\r\n       } else {\r\n         return (uint2str(members[_address].time), uint2str(members[_address].luckNumber),uint2str(members[_address].horseType), \"You lose because your number smaller than 55\");\r\n       }\r\n     }\r\n\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  function getEthBalance() public view returns(uint) {\r\n    return address(this).balance;\r\n }\r\n\r\n\r\n  function depositEther() public payable returns(uint256){\r\n     require(msg.sender == manager,\"only manager can reach  here\");\r\n    return address(this).balance;\r\n  }\r\n\r\n  function withDrawalether(uint amount) public payable returns(uint256){\r\n      require(msg.sender == manager,\"only manager can reach  here\");\r\n      manager.transfer(amount*1000000000000000); // 1 etherin 1000' de birini g√∂nderebilir.\r\n      return address(this).balance;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAccDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberofGamePlay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leftorright\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withDrawalether\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaximumBetRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Cryptoraces","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://869c8b5436eb802d41fb558d1b5efdb6b3723f10d4ee79811e69b2eab71709ae"}]}