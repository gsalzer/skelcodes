{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title CryptoEmojis\r\n * @author CryptoEmojis\r\n */\r\ncontract CryptoEmojis {\r\n    // Using SafeMath\r\n    using SafeMath for uint256;    \r\n\r\n    // The developer's address\r\n    address dev;\r\n\r\n    // Contract information\r\n    string constant private tokenName = \"CryptoEmojis\";\r\n    string constant private tokenSymbol = \"EMO\";\r\n\r\n    // Our beloved emojis\r\n    struct Emoji {\r\n        string codepoints;\r\n        string name;\r\n        uint256 price;\r\n        address owner;\r\n        bool exists;\r\n    }\r\n\r\n    Emoji[] emojis;\r\n    \r\n    // For storing the username and balance of every user\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => bytes16) private usernames;\r\n\r\n    // Needed events for represententing of every possible action\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _id, uint256 _price);\r\n    event PriceChange(uint256 indexed _id, uint256 _price);\r\n    event UsernameChange(address indexed _owner, bytes16 _username);\r\n\r\n\r\n    function CryptoEmojis() public {\r\n        dev = msg.sender;\r\n    }\r\n    \r\n    \r\n    modifier onlyDev() {\r\n        require(msg.sender == dev);\r\n        _;\r\n    }\r\n\r\n   function name() public pure returns(string) {\r\n       return tokenName;\r\n   }\r\n\r\n   function symbol() public pure returns(string) {\r\n       return tokenSymbol;\r\n   }\r\n\r\n    /** @dev Get the total supply */\r\n    function totalSupply() public view returns(uint256) {\r\n        return emojis.length;\r\n    }\r\n\r\n    /** @dev Get the balance of a user */\r\n   function balanceOf(address _owner) public view returns(uint256 balance) {\r\n       return balances[_owner];\r\n   }\r\n\r\n    /** @dev Get the username of a user */\r\n    function usernameOf(address _owner) public view returns (bytes16) {\r\n       return usernames[_owner];\r\n    }\r\n    \r\n    /** @dev Set the username of sender user  */\r\n    function setUsername(bytes16 _username) public {\r\n        usernames[msg.sender] = _username;\r\n        emit UsernameChange(msg.sender, _username);\r\n    }\r\n\r\n    /** @dev Get the owner of an emoji */\r\n    function ownerOf(uint256 _id) public constant returns (address) {\r\n       return emojis[_id].owner;\r\n    }\r\n    \r\n    /** @dev Get the codepoints of an emoji */\r\n    function codepointsOf(uint256 _id) public view returns (string) {\r\n       return emojis[_id].codepoints;\r\n    }\r\n\r\n    /** @dev Get the name of an emoji */\r\n    function nameOf(uint256 _id) public view returns (string) {\r\n       return emojis[_id].name;\r\n    }\r\n\r\n    /** @dev Get the price of an emoji */\r\n    function priceOf(uint256 _id) public view returns (uint256 price) {\r\n       return emojis[_id].price;\r\n    }\r\n\r\n    /** @dev Ceate a new emoji for the first time */\r\n    function create(string _codepoints, string _name, uint256 _price) public onlyDev() {\r\n        Emoji memory _emoji = Emoji({\r\n            codepoints: _codepoints,\r\n            name: _name,\r\n            price: _price,\r\n            owner: dev,\r\n            exists: true\r\n        });\r\n        emojis.push(_emoji);\r\n        balances[dev]++;\r\n    }\r\n\r\n    /** @dev Edit emoji information to maintain confirming for Unicode standard, we can't change the price or the owner */\r\n    function edit(uint256 _id, string _codepoints, string _name) public onlyDev() {\r\n        require(emojis[_id].exists);\r\n        emojis[_id].codepoints = _codepoints;\r\n        emojis[_id].name = _name;\r\n    }\r\n\r\n    /** @dev Buy an emoji */\r\n    function buy(uint256 _id) payable public {\r\n        require(emojis[_id].exists && emojis[_id].owner != msg.sender && msg.value >= emojis[_id].price);\r\n        address oldOwner = emojis[_id].owner;\r\n        uint256 oldPrice = emojis[_id].price;\r\n        emojis[_id].owner = msg.sender;\r\n        emojis[_id].price = oldPrice.div(100).mul(115);\r\n        balances[oldOwner]--;\r\n        balances[msg.sender]++;\r\n        oldOwner.transfer(oldPrice.div(100).mul(96));\r\n        if (msg.value > oldPrice) msg.sender.transfer(msg.value.sub(oldPrice));\r\n        emit Transfer(oldOwner, msg.sender, _id, oldPrice);\r\n        emit PriceChange(_id, emojis[_id].price);\r\n    }\r\n\r\n    /** @dev Changing the price by the owner of the emoji */\r\n    function setPrice(uint256 _id, uint256 _price) public {\r\n        require(emojis[_id].exists && emojis[_id].owner == msg.sender);\r\n        emojis[_id].price =_price;\r\n        emit PriceChange(_id, _price);\r\n    }\r\n\r\n    /** @dev Withdraw all balance. This doesn't transfer users' money since the contract pay them instantly and doesn't hold anyone's money */\r\n    function withdraw() public onlyDev() {\r\n        dev.transfer(address(this).balance);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"nameOf\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"codepointsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_codepoints\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"edit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_codepoints\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"usernameOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_username\",\"type\":\"bytes16\"}],\"name\":\"setUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"PriceChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_username\",\"type\":\"bytes16\"}],\"name\":\"UsernameChange\",\"type\":\"event\"}]","ContractName":"CryptoEmojis","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://520e94868f2edb562df3fa7dc7faee41870f9fd2d16eb3762872297db7e82a95"}]}