{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n// Global Storage Multi id\r\n// Author: Juan Livingston @ Ethernity.live\r\n\r\ncontract GlobalStorageMultiId {\r\n    \r\n    uint256 public totalUsers;\r\n    uint256 public regPrice;\r\n    uint256 public totalCollected;\r\n    address public admin;\r\n\r\n    // mapping(address => bytes32) ids;\r\n    mapping(bytes32 => address) users;\r\n    mapping(bytes32 => mapping(bytes32 => uint256)) dataUint;\r\n    mapping(bytes32 => mapping(bytes32 => bytes32)) dataBytes32;\r\n    mapping(bytes32 => mapping(bytes32 => string)) dataString;\r\n    mapping(bytes32 => mapping(bytes32 => address)) dataAddress; \r\n\r\n    event Error(string _string);\r\n    event RegisteredUser(address _address , bytes32 _id);\r\n    event ChangedAdd(bytes32 _id , address _old , address _new);\r\n\r\n\r\n    modifier onlyOwner(bytes32 _id) {\r\n        require(msg.sender == users[_id]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n\r\n    function GlobalStorageMultiId() {\r\n        regPrice = 0.005 ether; // Promotional price - will change in the future\r\n        admin = msg.sender;\r\n    }\r\n\r\n\r\n    // User's admin functions\r\n\r\n    function registerUser(bytes32 _id) payable returns(bool) {\r\n\r\n        require(msg.value >= regPrice);\r\n\r\n        if ( users[_id] != 0x0 ) {\r\n            Error(\"ID already exists\");\r\n            msg.sender.send(msg.value);\r\n            return false;\r\n        }\r\n\r\n        users[_id] = msg.sender;\r\n        // ids[msg.sender] = _id;\r\n        totalUsers += 1;\r\n        totalCollected += msg.value;\r\n        admin.send(msg.value);\r\n        RegisteredUser(msg.sender , _id);\r\n        return true;\r\n    }\r\n    \r\n\r\n    function changeAddress(bytes32 _id , address _newAddress) onlyOwner(_id) returns(bool) {\r\n        users[_id] = _newAddress;\r\n        ChangedAdd(_id , msg.sender , _newAddress);\r\n        return true;\r\n    }\r\n    \r\n    function checkId(bytes32 _id) constant returns(address _address) {\r\n        return users[_id];\r\n    }\r\n\r\n\r\n    // Users's data storage\r\n\r\n    // Uint\r\n\r\n    function setUint(bytes32 _id , bytes32 _key , uint256 _data , bool _overwrite) onlyOwner(_id) returns(bool) {\r\n        if (dataUint[_id][_key] == 0 ||  _overwrite) {\r\n            dataUint[_id][_key] = _data;\r\n            return true;\r\n        } else {\r\n            Error(\"Data exists\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function getUint(bytes32 _id , bytes32 _key) constant returns(uint _data) {\r\n        return dataUint[_id][_key];\r\n    }\r\n\r\n\r\n    // String\r\n\r\n    function setString(bytes32 _id , bytes32 _key , string _data , bool _overwrite) onlyOwner(_id) returns(bool) {\r\n        if (bytes(dataString[_id][_key]).length == 0  ||  _overwrite) {\r\n            dataString[_id][_key] = _data;\r\n            return true;\r\n        } else {\r\n            Error(\"Data exists\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function getString(bytes32 _id , bytes32 _key) constant returns(string _data) {\r\n        return dataString[_id][_key];\r\n    }\r\n\r\n    // Address\r\n\r\n    function setAddress(bytes32 _id , bytes32 _key , address _data , bool _overwrite) onlyOwner(_id) returns(bool) {\r\n        if (dataAddress[_id][_key] == 0x0  ||  _overwrite) {\r\n            dataAddress[_id][_key] = _data;\r\n            return true;\r\n        } else {\r\n            Error(\"Data exists\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function getAddress(bytes32 _id , bytes32 _key) constant returns(address _data) {\r\n        return dataAddress[_id][_key];\r\n    }\r\n\r\n    // Bytes32\r\n    \r\n    function setBytes32(bytes32 _id , bytes32 _key , bytes32 _data , bool _overwrite) onlyOwner(_id) returns(bool) {\r\n        if (dataBytes32[_id][_key] == 0x0  ||  _overwrite) {\r\n            dataBytes32[_id][_key] = _data;\r\n            return true;\r\n        } else {\r\n            Error(\"Data exists\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function getBytes32(bytes32 _id , bytes32 _key) constant returns(bytes32 _data) {\r\n        return dataBytes32[_id][_key];\r\n    }\r\n\r\n\r\n    // Admin functions\r\n\r\n    function changePrice(uint _newPrice) onlyAdmin {\r\n        regPrice = _newPrice;\r\n    }\r\n\r\n    function changeAdmin(address _newAdmin) onlyAdmin {\r\n        admin = _newAdmin;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"checkId\",\"outputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_data\",\"type\":\"string\"},{\"name\":\"_overwrite\",\"type\":\"bool\"}],\"name\":\"setString\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"regPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"registerUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getString\",\"outputs\":[{\"name\":\"_data\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getBytes32\",\"outputs\":[{\"name\":\"_data\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_data\",\"type\":\"bytes32\"},{\"name\":\"_overwrite\",\"type\":\"bool\"}],\"name\":\"setBytes32\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getUint\",\"outputs\":[{\"name\":\"_data\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"_data\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_data\",\"type\":\"address\"},{\"name\":\"_overwrite\",\"type\":\"bool\"}],\"name\":\"setAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_data\",\"type\":\"uint256\"},{\"name\":\"_overwrite\",\"type\":\"bool\"}],\"name\":\"setUint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_string\",\"type\":\"string\"}],\"name\":\"Error\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"RegisteredUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangedAdd\",\"type\":\"event\"}]","ContractName":"GlobalStorageMultiId","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8e533966d93c26b1611e9cc315e26512574d6a9295b6bf048cd3b77483dbfd25"}]}