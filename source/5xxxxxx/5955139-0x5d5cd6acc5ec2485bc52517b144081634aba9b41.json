{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/////設定管理者/////\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}    \r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns(bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/////遊戲合約/////\r\n\r\ncontract game is owned{\r\n    \r\n//初始設定\r\n    address public tokenAddress = 0x340e85491c5F581360811d0cE5CC7476c72900Ba;\r\n    \r\n    mapping (address => uint) readyTime;\r\n    uint public amount = 1000*10**18 ;  //*100為10^2，幣為兩位小數\r\n    uint public cooldown = 300;  //冷卻時間(秒)\r\n    mapping (address => uint8) record;\r\n\r\n//管理權限\r\n    function set_amount(uint new_amount)onlyOwner{\r\n        amount = new_amount*10**18;\r\n    }\r\n    \r\n    function set_address(address new_address)onlyOwner{\r\n        tokenAddress = new_address;\r\n    }\r\n    \r\n    function set_cooldown(uint new_cooldown)onlyOwner{\r\n        cooldown = new_cooldown;\r\n    }\r\n    \r\n    function withdraw(uint _amount)onlyOwner{\r\n        require(ERC20Basic(tokenAddress).transfer(owner, _amount*10**18));\r\n    }\r\n    \r\n//來猜拳!!! \r\n    function (){\r\n        play_game(0);\r\n    }\r\n    \r\n    function play_paper(){\r\n        play_game(0);\r\n    }\r\n    \r\n    function play_scissors(){\r\n        play_game(1);\r\n    }\r\n    \r\n    function play_stone(){\r\n        play_game(2);\r\n    }\r\n    \r\n    function play_game(uint8 play) internal{\r\n        require(readyTime[msg.sender] < block.timestamp);\r\n        require(play <= 2);\r\n        \r\n        uint8 comp=uint8(uint(keccak256(block.difficulty, block.timestamp))%3);\r\n        uint8 result = compare(play, comp);\r\n        \r\n        record[msg.sender] = result * 9 + play * 3 + comp ;\r\n        \r\n        if (result == 2){ //玩家贏\r\n            require(ERC20Basic(tokenAddress).transfer(msg.sender, amount));\r\n        }\r\n        \r\n        else if(result == 1){ //平手\r\n        }\r\n        \r\n        else if(result == 0) //玩家輸\r\n            readyTime[msg.sender] = block.timestamp + cooldown;\r\n    }\r\n    \r\n    function compare(uint8 player,uint computer) internal returns(uint8 result){\r\n        // input     0 => 布   1 => 剪刀   2 => 石頭\r\n        // output    0 => 輸   1 => 平手   2 => 贏\r\n        uint8 _result;\r\n        \r\n        if (player==0 && computer==2){  //布贏石頭 (玩家贏)\r\n            _result = 2;\r\n        }\r\n        \r\n        else if(player==2 && computer==0){ //石頭輸布(玩家輸)\r\n            _result = 0;\r\n        }\r\n        \r\n        else if(player == computer){ //平手\r\n            _result = 1;\r\n        }\r\n        \r\n        else{\r\n            if (player > computer){ //玩家贏 (玩家贏)\r\n                _result = 2;\r\n            }\r\n            else{ //玩家輸\r\n                _result = 0;\r\n            }\r\n        }\r\n        return _result;\r\n    }\r\n    \r\n//判斷function\r\n\r\n    function judge(uint8 orig) internal returns(uint8 result, uint8 play, uint8 comp){\r\n        uint8 _result = orig/9;\r\n        uint8 _play = (orig%9)/3;\r\n        uint8 _comp = orig%3;\r\n        return(_result, _play, _comp);\r\n    }\r\n    \r\n    function mora(uint8 orig) internal returns(string _mora){\r\n        // 0 => 布   1 => 剪刀   2 => 石頭\r\n            if (orig == 0){\r\n                return \"paper\";\r\n            }\r\n            else if (orig == 1){\r\n                return \"scissors\";\r\n            }\r\n            else if (orig == 2){\r\n                return \"stone\";\r\n            }\r\n            else {\r\n                return \"error\";\r\n            }\r\n        }\r\n        \r\n    function win(uint8 _result) internal returns(string result){\r\n        // 0 => 輸   1 => 平手   2 => 贏\r\n        if (_result == 0){\r\n                return \"lose!!\";\r\n            }\r\n            else if (_result == 1){\r\n                return \"draw~~\";\r\n            }\r\n            else if (_result == 2){\r\n                return \"win!!!\";\r\n            }\r\n            else {\r\n                return \"error\";\r\n            }\r\n    }\r\n    \r\n    function resolve(uint8 orig) internal returns(string result, string play, string comp){\r\n        (uint8 _result, uint8 _play, uint8 _comp) = judge(orig);\r\n        return(win(_result), mora(_play), mora(_comp));\r\n    }\r\n    \r\n//查詢\r\n\r\n    function view_last_result(address _address) view public returns(string result, string player, string computer){\r\n        return resolve(record[_address]);\r\n    }\r\n        \r\n    function self_last_result() view public returns(string result, string player, string computer){\r\n        view_last_result(msg.sender);\r\n    }\r\n    \r\n    function view_readyTime(address _address) view public returns(uint _readyTime){\r\n        if (block.timestamp >= readyTime[_address]){\r\n        return 0 ;\r\n        }\r\n        else{\r\n        return readyTime[_address] - block.timestamp ;\r\n        }\r\n    }\r\n    \r\n    function self_readyTime() view public returns(uint _readyTime){\r\n        view_readyTime(msg.sender);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"new_address\",\"type\":\"address\"}],\"name\":\"set_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"self_last_result\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"},{\"name\":\"player\",\"type\":\"string\"},{\"name\":\"computer\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"play_stone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"view_readyTime\",\"outputs\":[{\"name\":\"_readyTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"play_paper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"play_scissors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_amount\",\"type\":\"uint256\"}],\"name\":\"set_amount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"view_last_result\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"},{\"name\":\"player\",\"type\":\"string\"},{\"name\":\"computer\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_cooldown\",\"type\":\"uint256\"}],\"name\":\"set_cooldown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"self_readyTime\",\"outputs\":[{\"name\":\"_readyTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","ContractName":"game","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5564170f7143cdc35a44516125d54f05ea720264d7936c2e3956c09a9845f81f"}]}