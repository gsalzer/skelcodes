{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract PrivateSale {\r\n  using SafeMath for uint256;\r\n\r\n  // Address of owner\r\n  address public owner;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  // Flag to accept or reject payments\r\n  bool public isAcceptingPayments;\r\n\r\n  // List of admins who can edit the whitelist\r\n  mapping (address => bool) public whitelistAdmins;\r\n\r\n  // List of addresses that are whitelisted for private sale\r\n  mapping (address => bool) public whitelist;\r\n  uint256 public whitelistCount;\r\n\r\n  // List of addresses that have made payments\r\n  mapping (address => uint256) public weiPaid;\r\n\r\n  uint256 public HARD_CAP = 6666 ether;\r\n\r\n  // modifier to check owner\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  // modifier to check whitelist admin status\r\n  modifier onlyWhitelistAdmin() {\r\n    require(whitelistAdmins[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  // modifier to check if whitelisted address\r\n  modifier isWhitelisted() {\r\n    require(whitelist[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  // modifier to check if payments being accepted\r\n  modifier acceptingPayments() {\r\n    require(isAcceptingPayments);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Constructor\r\n   * @param _wallet Address where collected funds will be forwarded to\r\n   */\r\n  function PrivateSale(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    owner = msg.sender;\r\n    wallet = _wallet;\r\n    whitelistAdmins[msg.sender] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev fallback function\r\n   */\r\n  function () isWhitelisted acceptingPayments payable public {\r\n    require(msg.value >= 0.2 ether);\r\n    require(msg.value <= 500 ether);\r\n    require(msg.sender != address(0));\r\n    \r\n    uint256 contribution = msg.value;\r\n    // add to sender's weiPaid record\r\n    weiPaid[msg.sender] += msg.value;\r\n\r\n    // add to amount raised\r\n    weiRaised = weiRaised.add(msg.value);\r\n\r\n    if (weiRaised > HARD_CAP) {\r\n      uint256 refundAmount = weiRaised.sub(HARD_CAP);\r\n      msg.sender.transfer(refundAmount);\r\n      contribution = contribution.sub(refundAmount);\r\n      refundAmount = 0;\r\n      weiRaised = HARD_CAP;\r\n      isAcceptingPayments = false;\r\n    }\r\n\r\n    // transfer funds to external wallet\r\n    wallet.transfer(contribution);\r\n  }\r\n\r\n  /**\r\n   * @dev Start accepting payments\r\n   */\r\n  function acceptPayments() onlyOwner public  {\r\n    isAcceptingPayments = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Stop accepting payments\r\n   */\r\n  function rejectPayments() onlyOwner public  {\r\n    isAcceptingPayments = false;\r\n  }\r\n\r\n  /**\r\n   *  @dev Add a user to the whitelist admins\r\n   */\r\n  function addWhitelistAdmin(address _admin) onlyOwner public {\r\n    whitelistAdmins[_admin] = true;\r\n  }\r\n\r\n  /**\r\n   *  @dev Remove a user from the whitelist admins\r\n   */\r\n  function removeWhitelistAdmin(address _admin) onlyOwner public {\r\n    whitelistAdmins[_admin] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Add an address to the whitelist\r\n   * @param _user The address of the contributor\r\n   */\r\n  function whitelistAddress(address _user) onlyWhitelistAdmin public  {\r\n    whitelist[_user] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Add multiple addresses to the whitelist\r\n   * @param _users The addresses of the contributor\r\n   */\r\n  function whitelistAddresses(address[] _users) onlyWhitelistAdmin public {\r\n    for (uint256 i = 0; i < _users.length; i++) {\r\n      whitelist[_users[i]] = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Remove an addresses from the whitelist\r\n   * @param _user The addresses of the contributor\r\n   */\r\n  function unWhitelistAddress(address _user) onlyWhitelistAdmin public  {\r\n    whitelist[_user] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Remove multiple addresses from the whitelist\r\n   * @param _users The addresses of the contributor\r\n   */\r\n  function unWhitelistAddresses(address[] _users) onlyWhitelistAdmin public {\r\n    for (uint256 i = 0; i < _users.length; i++) {\r\n      whitelist[_users[i]] = false;\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"whitelistAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weiPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rejectPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAcceptingPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unWhitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"unWhitelistAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"PrivateSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007a2fc74ec1e18b536870eb72d69722c1c3a71a13","Library":"","SwarmSource":"bzzr://8ee51aa1c96b8f30502792a156eb44813d08823aca3643a0692380b67b1091fb"}]}