{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/grapevine/crowdsale/TokenTimelockController.sol\r\n\r\n/**\r\n * @title TokenTimelock Controller\r\n * @dev This contract allows to create/read/revoke TokenTimelock contracts and to claim the amounts vested.\r\n **/\r\ncontract TokenTimelockController is Ownable {\r\n  using SafeMath for uint;\r\n\r\n  struct TokenTimelock {\r\n    uint256 amount;\r\n    uint256 releaseTime;\r\n    bool released;\r\n    bool revocable;\r\n    bool revoked;\r\n  }\r\n\r\n  event TokenTimelockCreated(\r\n    address indexed beneficiary, \r\n    uint256 releaseTime, \r\n    bool revocable, \r\n    uint256 amount\r\n  );\r\n\r\n  event TokenTimelockRevoked(\r\n    address indexed beneficiary\r\n  );\r\n\r\n  event TokenTimelockBeneficiaryChanged(\r\n    address indexed previousBeneficiary, \r\n    address indexed newBeneficiary\r\n  );\r\n  \r\n  event TokenTimelockReleased(\r\n    address indexed beneficiary,\r\n    uint256 amount\r\n  );\r\n\r\n  uint256 public constant TEAM_LOCK_DURATION_PART1 = 1 * 365 days;\r\n  uint256 public constant TEAM_LOCK_DURATION_PART2 = 2 * 365 days;\r\n  uint256 public constant INVESTOR_LOCK_DURATION = 6 * 30 days;\r\n\r\n  mapping (address => TokenTimelock[]) tokenTimeLocks;\r\n  \r\n  ERC20 public token;\r\n  address public crowdsale;\r\n  bool public activated;\r\n\r\n  /// @notice Constructor for TokenTimelock Controller\r\n  constructor(ERC20 _token) public {\r\n    token = _token;\r\n  }\r\n\r\n  modifier onlyCrowdsale() {\r\n    require(msg.sender == crowdsale);\r\n    _;\r\n  }\r\n  \r\n  modifier onlyWhenActivated() {\r\n    require(activated);\r\n    _;\r\n  }\r\n\r\n  modifier onlyValidTokenTimelock(address _beneficiary, uint256 _id) {\r\n    require(_beneficiary != address(0));\r\n    require(_id < tokenTimeLocks[_beneficiary].length);\r\n    require(!tokenTimeLocks[_beneficiary][_id].revoked);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to set the crowdsale address\r\n   * @param _crowdsale address The address of the crowdsale.\r\n   */\r\n  function setCrowdsale(address _crowdsale) external onlyOwner {\r\n    require(_crowdsale != address(0));\r\n    crowdsale = _crowdsale;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to activate the controller.\r\n   * It can be called only by the crowdsale address.\r\n   */\r\n  function activate() external onlyCrowdsale {\r\n    activated = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Creates a lock for the provided _beneficiary with the provided amount\r\n   * The creation can be peformed only if:\r\n   * - the sender is the address of the crowdsale;\r\n   * - the _beneficiary and _tokenHolder are valid addresses;\r\n   * - the _amount is greater than 0 and was appoved by the _tokenHolder prior to the transaction.\r\n   * The investors will have a lock with a lock period of 6 months.\r\n   * @param _beneficiary Address that will own the lock.\r\n   * @param _amount the amount of the locked tokens.\r\n   * @param _start when the lock should start.\r\n   * @param _tokenHolder the account that approved the amount for this contract.\r\n   */\r\n  function createInvestorTokenTimeLock(\r\n    address _beneficiary,\r\n    uint256 _amount, \r\n    uint256 _start,\r\n    address _tokenHolder\r\n  ) external onlyCrowdsale returns (bool)\r\n    {\r\n    require(_beneficiary != address(0) && _amount > 0);\r\n    require(_tokenHolder != address(0));\r\n\r\n    TokenTimelock memory tokenLock = TokenTimelock(\r\n      _amount,\r\n      _start.add(INVESTOR_LOCK_DURATION),\r\n      false,\r\n      false,\r\n      false\r\n    );\r\n    tokenTimeLocks[_beneficiary].push(tokenLock);\r\n    require(token.transferFrom(_tokenHolder, this, _amount));\r\n    \r\n    emit TokenTimelockCreated(\r\n      _beneficiary,\r\n      tokenLock.releaseTime,\r\n      false,\r\n      _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Creates locks for the provided _beneficiary with the provided amount\r\n   * The creation can be peformed only if:\r\n   * - the sender is the owner of the contract;\r\n   * - the _beneficiary and _tokenHolder are valid addresses;\r\n   * - the _amount is greater than 0 and was appoved by the _tokenHolder prior to the transaction.\r\n   * The team members will have two locks with 1 and 2 years lock period, each having half of the amount.\r\n   * @param _beneficiary Address that will own the lock.\r\n   * @param _amount the amount of the locked tokens.\r\n   * @param _start when the lock should start.\r\n   * @param _tokenHolder the account that approved the amount for this contract.\r\n   */\r\n  function createTeamTokenTimeLock(\r\n    address _beneficiary,\r\n    uint256 _amount, \r\n    uint256 _start,\r\n    address _tokenHolder\r\n  ) external onlyOwner returns (bool)\r\n    {\r\n    require(_beneficiary != address(0) && _amount > 0);\r\n    require(_tokenHolder != address(0));\r\n\r\n    uint256 amount = _amount.div(2);\r\n    TokenTimelock memory tokenLock1 = TokenTimelock(\r\n      amount,\r\n      _start.add(TEAM_LOCK_DURATION_PART1),\r\n      false,\r\n      true,\r\n      false\r\n    );\r\n    tokenTimeLocks[_beneficiary].push(tokenLock1);\r\n\r\n    TokenTimelock memory tokenLock2 = TokenTimelock(\r\n      amount,\r\n      _start.add(TEAM_LOCK_DURATION_PART2),\r\n      false,\r\n      true,\r\n      false\r\n    );\r\n    tokenTimeLocks[_beneficiary].push(tokenLock2);\r\n\r\n    require(token.transferFrom(_tokenHolder, this, _amount));\r\n    \r\n    emit TokenTimelockCreated(\r\n      _beneficiary,\r\n      tokenLock1.releaseTime,\r\n      true,\r\n      amount);\r\n    emit TokenTimelockCreated(\r\n      _beneficiary,\r\n      tokenLock2.releaseTime,\r\n      true,\r\n      amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Revokes the lock for the provided _beneficiary and _id.\r\n   * The revoke can be peformed only if:\r\n   * - the sender is the owner of the contract;\r\n   * - the controller was activated by the crowdsale contract;\r\n   * - the _beneficiary and _id reference a valid lock;\r\n   * - the lock was not revoked;\r\n   * - the lock is revokable;\r\n   * - the lock was not released.\r\n   * @param _beneficiary Address owning the lock.\r\n   * @param _id id of the lock.\r\n   */\r\n  function revokeTokenTimelock(\r\n    address _beneficiary,\r\n    uint256 _id) \r\n    external onlyWhenActivated onlyOwner onlyValidTokenTimelock(_beneficiary, _id)\r\n  {\r\n    require(tokenTimeLocks[_beneficiary][_id].revocable);\r\n    require(!tokenTimeLocks[_beneficiary][_id].released);\r\n    TokenTimelock storage tokenLock = tokenTimeLocks[_beneficiary][_id];\r\n    tokenLock.revoked = true;\r\n    require(token.transfer(owner, tokenLock.amount));\r\n    emit TokenTimelockRevoked(_beneficiary);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number locks of the provided _beneficiary.\r\n   * @param _beneficiary Address owning the locks.\r\n   */\r\n  function getTokenTimelockCount(address _beneficiary) view external returns (uint) {\r\n    return tokenTimeLocks[_beneficiary].length;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the details of the lock referenced by the provided _beneficiary and _id.\r\n   * @param _beneficiary Address owning the lock.\r\n   * @param _id id of the lock.\r\n   */\r\n  function getTokenTimelockDetails(address _beneficiary, uint256 _id) view external returns (\r\n    uint256 _amount,\r\n    uint256 _releaseTime,\r\n    bool _released,\r\n    bool _revocable,\r\n    bool _revoked) \r\n    {\r\n    require(_id < tokenTimeLocks[_beneficiary].length);\r\n    _amount = tokenTimeLocks[_beneficiary][_id].amount;\r\n    _releaseTime = tokenTimeLocks[_beneficiary][_id].releaseTime;\r\n    _released = tokenTimeLocks[_beneficiary][_id].released;\r\n    _revocable = tokenTimeLocks[_beneficiary][_id].revocable;\r\n    _revoked = tokenTimeLocks[_beneficiary][_id].revoked;\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the beneficiary of the _id'th lock of the sender with the provided newBeneficiary.\r\n   * The release can be peformed only if:\r\n   * - the controller was activated by the crowdsale contract;\r\n   * - the sender and _id reference a valid lock;\r\n   * - the lock was not revoked;\r\n   * @param _id id of the lock.\r\n   * @param _newBeneficiary Address of the new beneficiary.\r\n   */\r\n  function changeBeneficiary(uint256 _id, address _newBeneficiary) external onlyWhenActivated onlyValidTokenTimelock(msg.sender, _id) {\r\n    tokenTimeLocks[_newBeneficiary].push(tokenTimeLocks[msg.sender][_id]);\r\n    if (tokenTimeLocks[msg.sender].length > 1) {\r\n      tokenTimeLocks[msg.sender][_id] = tokenTimeLocks[msg.sender][tokenTimeLocks[msg.sender].length.sub(1)];\r\n      delete(tokenTimeLocks[msg.sender][tokenTimeLocks[msg.sender].length.sub(1)]);\r\n    }\r\n    tokenTimeLocks[msg.sender].length--;\r\n    emit TokenTimelockBeneficiaryChanged(msg.sender, _newBeneficiary);\r\n  }\r\n\r\n  /**\r\n   * @dev Releases the tokens for the calling sender and _id.\r\n   * The release can be peformed only if:\r\n   * - the controller was activated by the crowdsale contract;\r\n   * - the sender and _id reference a valid lock;\r\n   * - the lock was not revoked;\r\n   * - the lock was not released before;\r\n   * - the lock period has passed.\r\n   * @param _id id of the lock.\r\n   */\r\n  function release(uint256 _id) external {\r\n    releaseFor(msg.sender, _id);\r\n  }\r\n\r\n   /**\r\n   * @dev Releases the tokens for the provided _beneficiary and _id.\r\n   * The release can be peformed only if:\r\n   * - the controller was activated by the crowdsale contract;\r\n   * - the _beneficiary and _id reference a valid lock;\r\n   * - the lock was not revoked;\r\n   * - the lock was not released before;\r\n   * - the lock period has passed.\r\n   * @param _beneficiary Address owning the lock.\r\n   * @param _id id of the lock.\r\n   */\r\n  function releaseFor(address _beneficiary, uint256 _id) public onlyWhenActivated onlyValidTokenTimelock(_beneficiary, _id) {\r\n    TokenTimelock storage tokenLock = tokenTimeLocks[_beneficiary][_id];\r\n    require(!tokenLock.released);\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp >= tokenLock.releaseTime);\r\n    tokenLock.released = true;\r\n    require(token.transfer(_beneficiary, tokenLock.amount));\r\n    emit TokenTimelockReleased(_beneficiary, tokenLock.amount);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVESTOR_LOCK_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getTokenTimelockCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTokenTimelockDetails\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"},{\"name\":\"_released\",\"type\":\"bool\"},{\"name\":\"_revocable\",\"type\":\"bool\"},{\"name\":\"_revoked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"name\":\"setCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"createInvestorTokenTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_LOCK_DURATION_PART1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"createTeamTokenTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_LOCK_DURATION_PART2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_newBeneficiary\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"releaseFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"revokeTokenTimelock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"revocable\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTimelockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"TokenTimelockRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousBeneficiary\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"TokenTimelockBeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTimelockReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenTimelockController","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000088b94602c71e0206694c8911e4c176799786d578","Library":"","SwarmSource":"bzzr://b2a4482304c886f5e3aa6024430a26b294b25b0f64667958eebfa1db05a88a41"}]}