{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\ninterface Whitelist {\r\n    function add(address _wlAddress) public;\r\n    function addBulk(address[] _wlAddresses) public;\r\n    function remove(address _wlAddresses) public;\r\n    function removeBulk(address[] _wlAddresses) public;\r\n    function getAll() public constant returns(address[]);\r\n    function isInList(address _checkAddress) public constant returns(bool);\r\n}\r\n\r\ncontract Administrated {\r\n    address public administrator;\r\n\r\n    modifier onlyAdministrator() {\r\n        require(administrator == tx.origin);\r\n        _;\r\n    }\r\n\r\n    modifier notAdministrator() {\r\n        require(administrator != tx.origin);\r\n        _;\r\n    }\r\n\r\n    function setAdministrator(address _administrator)\r\n        internal\r\n    {\r\n        administrator = _administrator;\r\n    }\r\n}\r\n\r\ncontract BasicWhitelist is Whitelist, Administrated {\r\n    address[] public whitelist;\r\n\r\n    //Up to 65536 users in list\r\n    mapping(address => uint16) public wlIndex;\r\n\r\n\r\n    function BasicWhitelist()\r\n        public\r\n    {\r\n        setAdministrator(tx.origin);\r\n    }\r\n\r\n    //Add whitelist\r\n    function add(address _wlAddress)\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        if ( !isInList(_wlAddress) ) {\r\n            wlIndex[_wlAddress] = uint16(whitelist.length);\r\n            whitelist.push(_wlAddress);\r\n        }\r\n    }\r\n\r\n    //Bulk add\r\n    function addBulk(address[] _wlAddresses)\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        require(_wlAddresses.length <= 256);\r\n\r\n        for (uint8 i = 0; i < _wlAddresses.length; i++) {\r\n            add(_wlAddresses[i]);\r\n        }\r\n    }\r\n\r\n    //Remove address from whitelist\r\n    function remove(address _wlAddress)\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        if ( isInList(_wlAddress) ) {\r\n            uint16 index = wlIndex[_wlAddress];\r\n            wlIndex[_wlAddress] = 0;\r\n\r\n            for ( uint16 i = index; i < ( whitelist.length - 1 ); i++) {\r\n                whitelist[i] = whitelist[i + 1];\r\n            }\r\n\r\n            delete whitelist[whitelist.length - 1];\r\n            whitelist.length--;\r\n        }\r\n    }\r\n\r\n    //Bulk remove\r\n    function removeBulk(address[] _wlAddresses)\r\n        public\r\n        onlyAdministrator\r\n    {\r\n        require(_wlAddresses.length <= 256);\r\n\r\n        for (uint8 i = 0; i < _wlAddresses.length; i++) {\r\n            remove(_wlAddresses[i]);\r\n        }\r\n    }\r\n\r\n    //Get list\r\n    function getAll()\r\n        public\r\n        constant\r\n        returns(address[])\r\n    {\r\n        return whitelist;\r\n    }\r\n\r\n    //\r\n    function isInList(address _checkAddress)\r\n        public\r\n        constant\r\n        returns(bool)\r\n    {\r\n        return whitelist.length > 0\r\n                && (\r\n                    wlIndex[_checkAddress] > 0\r\n                    || whitelist[wlIndex[_checkAddress]] == _checkAddress\r\n                   );\r\n    }\r\n}\r\n\r\ncontract UNITTransferWhiteList is BasicWhitelist {\r\n    function UNITTransferWhiteList()\r\n        public\r\n    {\r\n        setAdministrator(tx.origin);\r\n\r\n        add(0x77660795BD361Cd43c3627eAdad44dDc2026aD17); //Advisors\r\n        add(0x794EF9c680bDD0bEf48Bef46bA68471e449D67Fb); //BountyWe accept different cryptocurrencies. You should have ETH wallet to get UNIT Tokens\r\n\r\n        //Team\r\n        add(0x40e3D8fFc46d73Ab5DF878C751D813a4cB7B388D);\r\n        add(0x5E065a80f6635B6a46323e3383057cE6051aAcA0);\r\n        add(0x0cF3585FbAB2a1299F8347a9B87CF7B4fcdCE599);\r\n        add(0x5fDd3BA5B6Ff349d31eB0a72A953E454C99494aC);\r\n        add(0xC9be9818eE1B2cCf2E4f669d24eB0798390Ffb54);\r\n        add(0xd13289203889bD898d49e31a1500388441C03663);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_wlAddress\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wlAddress\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"wlIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAll\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wlAddresses\",\"type\":\"address[]\"}],\"name\":\"removeBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_checkAddress\",\"type\":\"address\"}],\"name\":\"isInList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wlAddresses\",\"type\":\"address[]\"}],\"name\":\"addBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"UNITTransferWhiteList","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://909e1af14f31bdf21dd63b89397a9a5a0121444e3946375d8497732f49f5dd4e"}]}