{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n\r\ncontract EthPyramid {\r\n\r\n\t// scaleFactor is used to convert Ether into tokens and vice-versa: they're of different\r\n\t// orders of magnitude, hence the need to bridge between the two.\r\n\tuint256 constant scaleFactor = 0x10000000000000000;  // 2^64\r\n\r\n\t// CRR = 50%\r\n\t// CRR is Cash Reserve Ratio (in this case Crypto Reserve Ratio).\r\n\t// For more on this: check out https://en.wikipedia.org/wiki/Reserve_requirement\r\n\tint constant crr_n = 1; // CRR numerator\r\n\tint constant crr_d = 2; // CRR denominator\r\n\r\n\t// The price coefficient. Chosen such that at 1 token total supply\r\n\t// the amount in reserve is 0.5 ether and token price is 1 Ether.\r\n\tint constant price_coeff = -0x296ABF784A358468C;\r\n\r\n\t// Typical values that we have to declare.\r\n\tstring constant public name = \"EthPyramid\";\r\n\tstring constant public symbol = \"EPY\";\r\n\tuint8 constant public decimals = 18;\r\n\r\n\t// Array between each address and their number of tokens.\r\n\tmapping(address => uint256) public tokenBalance;\r\n\t\t\r\n\t// Array between each address and how much Ether has been paid out to it.\r\n\t// Note that this is scaled by the scaleFactor variable.\r\n\tmapping(address => int256) public payouts;\r\n\r\n\t// Variable tracking how many tokens are in existence overall.\r\n\tuint256 public totalSupply;\r\n\r\n\t// Aggregate sum of all payouts.\r\n\t// Note that this is scaled by the scaleFactor variable.\r\n\tint256 totalPayouts;\r\n\r\n\t// Variable tracking how much Ether each token is currently worth.\r\n\t// Note that this is scaled by the scaleFactor variable.\r\n\tuint256 earningsPerToken;\r\n\t\r\n\t// Current contract balance in Ether\r\n\tuint256 public contractBalance;\r\n\r\n\tfunction EthPyramid() public {}\r\n\r\n\t// The following functions are used by the front-end for display purposes.\r\n\r\n\t// Returns the number of tokens currently held by _owner.\r\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance) {\r\n\t\treturn tokenBalance[_owner];\r\n\t}\r\n\r\n\t// Withdraws all dividends held by the caller sending the transaction, updates\r\n\t// the requisite global variables, and transfers Ether back to the caller.\r\n\tfunction withdraw() public {\r\n\t\t// Retrieve the dividends associated with the address the request came from.\r\n\t\tvar balance = dividends(msg.sender);\r\n\t\t\r\n\t\t// Update the payouts array, incrementing the request address by `balance`.\r\n\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\r\n\t\t\r\n\t\t// Increase the total amount that's been paid out to maintain invariance.\r\n\t\ttotalPayouts += (int256) (balance * scaleFactor);\r\n\t\t\r\n\t\t// Send the dividends to the address that requested the withdraw.\r\n\t\tcontractBalance = sub(contractBalance, balance);\r\n\t\tmsg.sender.transfer(balance);\r\n\t}\r\n\r\n\t// Converts the Ether accrued as dividends back into EPY tokens without having to\r\n\t// withdraw it first. Saves on gas and potential price spike loss.\r\n\tfunction reinvestDividends() public {\r\n\t\t// Retrieve the dividends associated with the address the request came from.\r\n\t\tvar balance = dividends(msg.sender);\r\n\t\t\r\n\t\t// Update the payouts array, incrementing the request address by `balance`.\r\n\t\t// Since this is essentially a shortcut to withdrawing and reinvesting, this step still holds.\r\n\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\r\n\t\t\r\n\t\t// Increase the total amount that's been paid out to maintain invariance.\r\n\t\ttotalPayouts += (int256) (balance * scaleFactor);\r\n\t\t\r\n\t\t// Assign balance to a new variable.\r\n\t\tuint value_ = (uint) (balance);\r\n\t\t\r\n\t\t// If your dividends are worth less than 1 szabo, or more than a million Ether\r\n\t\t// (in which case, why are you even here), abort.\r\n\t\tif (value_ < 0.000001 ether || value_ > 1000000 ether)\r\n\t\t\trevert();\r\n\t\t\t\r\n\t\t// msg.sender is the address of the caller.\r\n\t\tvar sender = msg.sender;\r\n\t\t\r\n\t\t// A temporary reserve variable used for calculating the reward the holder gets for buying tokens.\r\n\t\t// (Yes, the buyer receives a part of the distribution as well!)\r\n\t\tvar res = reserve() - balance;\r\n\r\n\t\t// 10% of the total Ether sent is used to pay existing holders.\r\n\t\tvar fee = div(value_, 10);\r\n\t\t\r\n\t\t// The amount of Ether used to purchase new tokens for the caller.\r\n\t\tvar numEther = value_ - fee;\r\n\t\t\r\n\t\t// The number of tokens which can be purchased for numEther.\r\n\t\tvar numTokens = calculateDividendTokens(numEther, balance);\r\n\t\t\r\n\t\t// The buyer fee, scaled by the scaleFactor variable.\r\n\t\tvar buyerFee = fee * scaleFactor;\r\n\t\t\r\n\t\t// Check that we have tokens in existence (this should always be true), or\r\n\t\t// else you're gonna have a bad time.\r\n\t\tif (totalSupply > 0) {\r\n\t\t\t// Compute the bonus co-efficient for all existing holders and the buyer.\r\n\t\t\t// The buyer receives part of the distribution for each token bought in the\r\n\t\t\t// same way they would have if they bought each token individually.\r\n\t\t\tvar bonusCoEff =\r\n\t\t\t    (scaleFactor - (res + numEther) * numTokens * scaleFactor / (totalSupply + numTokens) / numEther)\r\n\t\t\t    * (uint)(crr_d) / (uint)(crr_d-crr_n);\r\n\t\t\t\t\r\n\t\t\t// The total reward to be distributed amongst the masses is the fee (in Ether)\r\n\t\t\t// multiplied by the bonus co-efficient.\r\n\t\t\tvar holderReward = fee * bonusCoEff;\r\n\t\t\t\r\n\t\t\tbuyerFee -= holderReward;\r\n\r\n\t\t\t// Fee is distributed to all existing token holders before the new tokens are purchased.\r\n\t\t\t// rewardPerShare is the amount gained per token thanks to this buy-in.\r\n\t\t\tvar rewardPerShare = holderReward / totalSupply;\r\n\t\t\t\r\n\t\t\t// The Ether value per token is increased proportionally.\r\n\t\t\tearningsPerToken += rewardPerShare;\r\n\t\t}\r\n\t\t\r\n\t\t// Add the numTokens which were just created to the total supply. We're a crypto central bank!\r\n\t\ttotalSupply = add(totalSupply, numTokens);\r\n\t\t\r\n\t\t// Assign the tokens to the balance of the buyer.\r\n\t\ttokenBalance[sender] = add(tokenBalance[sender], numTokens);\r\n\t\t\r\n\t\t// Update the payout array so that the buyer cannot claim dividends on previous purchases.\r\n\t\t// Also include the fee paid for entering the scheme.\r\n\t\t// First we compute how much was just paid out to the buyer...\r\n\t\tvar payoutDiff  = (int256) ((earningsPerToken * numTokens) - buyerFee);\r\n\t\t\r\n\t\t// Then we update the payouts array for the buyer with this amount...\r\n\t\tpayouts[sender] += payoutDiff;\r\n\t\t\r\n\t\t// And then we finally add it to the variable tracking the total amount spent to maintain invariance.\r\n\t\ttotalPayouts    += payoutDiff;\r\n\t\t\r\n\t}\r\n\r\n\t// Sells your tokens for Ether. This Ether is assigned to the callers entry\r\n\t// in the tokenBalance array, and therefore is shown as a dividend. A second\r\n\t// call to withdraw() must be made to invoke the transfer of Ether back to your address.\r\n\tfunction sellMyTokens() public {\r\n\t\tvar balance = balanceOf(msg.sender);\r\n\t\tsell(balance);\r\n\t}\r\n\r\n\t// The slam-the-button escape hatch. Sells the callers tokens for Ether, then immediately\r\n\t// invokes the withdraw() function, sending the resulting Ether to the callers address.\r\n    function getMeOutOfHere() public {\r\n\t\tsellMyTokens();\r\n        withdraw();\r\n\t}\r\n\r\n\t// Gatekeeper function to check if the amount of Ether being sent isn't either\r\n\t// too small or too large. If it passes, goes direct to buy().\r\n\tfunction fund() payable public {\r\n\t\t// Don't allow for funding if the amount of Ether sent is less than 1 szabo.\r\n\t\tif (msg.value > 0.000001 ether) {\r\n\t\t    contractBalance = add(contractBalance, msg.value);\r\n\t\t\tbuy();\r\n\t\t} else {\r\n\t\t\trevert();\r\n\t\t}\r\n    }\r\n\r\n\t// Function that returns the (dynamic) price of buying a finney worth of tokens.\r\n\tfunction buyPrice() public constant returns (uint) {\r\n\t\treturn getTokensForEther(1 finney);\r\n\t}\r\n\r\n\t// Function that returns the (dynamic) price of selling a single token.\r\n\tfunction sellPrice() public constant returns (uint) {\r\n        var eth = getEtherForTokens(1 finney);\r\n        var fee = div(eth, 10);\r\n        return eth - fee;\r\n    }\r\n\r\n\t// Calculate the current dividends associated with the caller address. This is the net result\r\n\t// of multiplying the number of tokens held by their current value in Ether and subtracting the\r\n\t// Ether that has already been paid out.\r\n\tfunction dividends(address _owner) public constant returns (uint256 amount) {\r\n\t\treturn (uint256) ((int256)(earningsPerToken * tokenBalance[_owner]) - payouts[_owner]) / scaleFactor;\r\n\t}\r\n\r\n\t// Version of withdraw that extracts the dividends and sends the Ether to the caller.\r\n\t// This is only used in the case when there is no transaction data, and that should be\r\n\t// quite rare unless interacting directly with the smart contract.\r\n\tfunction withdrawOld(address to) public {\r\n\t\t// Retrieve the dividends associated with the address the request came from.\r\n\t\tvar balance = dividends(msg.sender);\r\n\t\t\r\n\t\t// Update the payouts array, incrementing the request address by `balance`.\r\n\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\r\n\t\t\r\n\t\t// Increase the total amount that's been paid out to maintain invariance.\r\n\t\ttotalPayouts += (int256) (balance * scaleFactor);\r\n\t\t\r\n\t\t// Send the dividends to the address that requested the withdraw.\r\n\t\tcontractBalance = sub(contractBalance, balance);\r\n\t\tto.transfer(balance);\t\t\r\n\t}\r\n\r\n\t// Internal balance function, used to calculate the dynamic reserve value.\r\n\tfunction balance() internal constant returns (uint256 amount) {\r\n\t\t// msg.value is the amount of Ether sent by the transaction.\r\n\t\treturn contractBalance - msg.value;\r\n\t}\r\n\r\n\tfunction buy() internal {\r\n\t\t// Any transaction of less than 1 szabo is likely to be worth less than the gas used to send it.\r\n\t\tif (msg.value < 0.000001 ether || msg.value > 1000000 ether)\r\n\t\t\trevert();\r\n\t\t\t\t\t\t\r\n\t\t// msg.sender is the address of the caller.\r\n\t\tvar sender = msg.sender;\r\n\t\t\r\n\t\t// 10% of the total Ether sent is used to pay existing holders.\r\n\t\tvar fee = div(msg.value, 10);\r\n\t\t\r\n\t\t// The amount of Ether used to purchase new tokens for the caller.\r\n\t\tvar numEther = msg.value - fee;\r\n\t\t\r\n\t\t// The number of tokens which can be purchased for numEther.\r\n\t\tvar numTokens = getTokensForEther(numEther);\r\n\t\t\r\n\t\t// The buyer fee, scaled by the scaleFactor variable.\r\n\t\tvar buyerFee = fee * scaleFactor;\r\n\t\t\r\n\t\t// Check that we have tokens in existence (this should always be true), or\r\n\t\t// else you're gonna have a bad time.\r\n\t\tif (totalSupply > 0) {\r\n\t\t\t// Compute the bonus co-efficient for all existing holders and the buyer.\r\n\t\t\t// The buyer receives part of the distribution for each token bought in the\r\n\t\t\t// same way they would have if they bought each token individually.\r\n\t\t\tvar bonusCoEff =\r\n\t\t\t    (scaleFactor - (reserve() + numEther) * numTokens * scaleFactor / (totalSupply + numTokens) / numEther)\r\n\t\t\t    * (uint)(crr_d) / (uint)(crr_d-crr_n);\r\n\t\t\t\t\r\n\t\t\t// The total reward to be distributed amongst the masses is the fee (in Ether)\r\n\t\t\t// multiplied by the bonus co-efficient.\r\n\t\t\tvar holderReward = fee * bonusCoEff;\r\n\t\t\t\r\n\t\t\tbuyerFee -= holderReward;\r\n\r\n\t\t\t// Fee is distributed to all existing token holders before the new tokens are purchased.\r\n\t\t\t// rewardPerShare is the amount gained per token thanks to this buy-in.\r\n\t\t\tvar rewardPerShare = holderReward / totalSupply;\r\n\t\t\t\r\n\t\t\t// The Ether value per token is increased proportionally.\r\n\t\t\tearningsPerToken += rewardPerShare;\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\t// Add the numTokens which were just created to the total supply. We're a crypto central bank!\r\n\t\ttotalSupply = add(totalSupply, numTokens);\r\n\r\n\t\t// Assign the tokens to the balance of the buyer.\r\n\t\ttokenBalance[sender] = add(tokenBalance[sender], numTokens);\r\n\r\n\t\t// Update the payout array so that the buyer cannot claim dividends on previous purchases.\r\n\t\t// Also include the fee paid for entering the scheme.\r\n\t\t// First we compute how much was just paid out to the buyer...\r\n\t\tvar payoutDiff = (int256) ((earningsPerToken * numTokens) - buyerFee);\r\n\t\t\r\n\t\t// Then we update the payouts array for the buyer with this amount...\r\n\t\tpayouts[sender] += payoutDiff;\r\n\t\t\r\n\t\t// And then we finally add it to the variable tracking the total amount spent to maintain invariance.\r\n\t\ttotalPayouts    += payoutDiff;\r\n\t\t\r\n\t}\r\n\r\n\t// Sell function that takes tokens and converts them into Ether. Also comes with a 10% fee\r\n\t// to discouraging dumping, and means that if someone near the top sells, the fee distributed\r\n\t// will be *significant*.\r\n\tfunction sell(uint256 amount) internal {\r\n\t    // Calculate the amount of Ether that the holders tokens sell for at the current sell price.\r\n\t\tvar numEthersBeforeFee = getEtherForTokens(amount);\r\n\t\t\r\n\t\t// 10% of the resulting Ether is used to pay remaining holders.\r\n        var fee = div(numEthersBeforeFee, 10);\r\n\t\t\r\n\t\t// Net Ether for the seller after the fee has been subtracted.\r\n        var numEthers = numEthersBeforeFee - fee;\r\n\t\t\r\n\t\t// *Remove* the numTokens which were just sold from the total supply. We're /definitely/ a crypto central bank.\r\n\t\ttotalSupply = sub(totalSupply, amount);\r\n\t\t\r\n        // Remove the tokens from the balance of the buyer.\r\n\t\ttokenBalance[msg.sender] = sub(tokenBalance[msg.sender], amount);\r\n\r\n        // Update the payout array so that the seller cannot claim future dividends unless they buy back in.\r\n\t\t// First we compute how much was just paid out to the seller...\r\n\t\tvar payoutDiff = (int256) (earningsPerToken * amount + (numEthers * scaleFactor));\r\n\t\t\r\n        // We reduce the amount paid out to the seller (this effectively resets their payouts value to zero,\r\n\t\t// since they're selling all of their tokens). This makes sure the seller isn't disadvantaged if\r\n\t\t// they decide to buy back in.\r\n\t\tpayouts[msg.sender] -= payoutDiff;\t\t\r\n\t\t\r\n\t\t// Decrease the total amount that's been paid out to maintain invariance.\r\n        totalPayouts -= payoutDiff;\r\n\t\t\r\n\t\t// Check that we have tokens in existence (this is a bit of an irrelevant check since we're\r\n\t\t// selling tokens, but it guards against division by zero).\r\n\t\tif (totalSupply > 0) {\r\n\t\t\t// Scale the Ether taken as the selling fee by the scaleFactor variable.\r\n\t\t\tvar etherFee = fee * scaleFactor;\r\n\t\t\t\r\n\t\t\t// Fee is distributed to all remaining token holders.\r\n\t\t\t// rewardPerShare is the amount gained per token thanks to this sell.\r\n\t\t\tvar rewardPerShare = etherFee / totalSupply;\r\n\t\t\t\r\n\t\t\t// The Ether value per token is increased proportionally.\r\n\t\t\tearningsPerToken = add(earningsPerToken, rewardPerShare);\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Dynamic value of Ether in reserve, according to the CRR requirement.\r\n\tfunction reserve() internal constant returns (uint256 amount) {\r\n\t\treturn sub(balance(),\r\n\t\t\t ((uint256) ((int256) (earningsPerToken * totalSupply) - totalPayouts) / scaleFactor));\r\n\t}\r\n\r\n\t// Calculates the number of tokens that can be bought for a given amount of Ether, according to the\r\n\t// dynamic reserve and totalSupply values (derived from the buy and sell prices).\r\n\tfunction getTokensForEther(uint256 ethervalue) public constant returns (uint256 tokens) {\r\n\t\treturn sub(fixedExp(fixedLog(reserve() + ethervalue)*crr_n/crr_d + price_coeff), totalSupply);\r\n\t}\r\n\r\n\t// Semantically similar to getTokensForEther, but subtracts the callers balance from the amount of Ether returned for conversion.\r\n\tfunction calculateDividendTokens(uint256 ethervalue, uint256 subvalue) public constant returns (uint256 tokens) {\r\n\t\treturn sub(fixedExp(fixedLog(reserve() - subvalue + ethervalue)*crr_n/crr_d + price_coeff), totalSupply);\r\n\t}\r\n\r\n\t// Converts a number tokens into an Ether value.\r\n\tfunction getEtherForTokens(uint256 tokens) public constant returns (uint256 ethervalue) {\r\n\t\t// How much reserve Ether do we have left in the contract?\r\n\t\tvar reserveAmount = reserve();\r\n\r\n\t\t// If you're the Highlander (or bagholder), you get The Prize. Everything left in the vault.\r\n\t\tif (tokens == totalSupply)\r\n\t\t\treturn reserveAmount;\r\n\r\n\t\t// If there would be excess Ether left after the transaction this is called within, return the Ether\r\n\t\t// corresponding to the equation in Dr Jochen Hoenicke's original Ponzi paper, which can be found\r\n\t\t// at https://test.jochen-hoenicke.de/eth/ponzitoken/ in the third equation, with the CRR numerator \r\n\t\t// and denominator altered to 1 and 2 respectively.\r\n\t\treturn sub(reserveAmount, fixedExp((fixedLog(totalSupply - tokens) - price_coeff) * crr_d/crr_n));\r\n\t}\r\n\r\n\t// You don't care about these, but if you really do they're hex values for \r\n\t// co-efficients used to simulate approximations of the log and exp functions.\r\n\tint256  constant one        = 0x10000000000000000;\r\n\tuint256 constant sqrt2      = 0x16a09e667f3bcc908;\r\n\tuint256 constant sqrtdot5   = 0x0b504f333f9de6484;\r\n\tint256  constant ln2        = 0x0b17217f7d1cf79ac;\r\n\tint256  constant ln2_64dot5 = 0x2cb53f09f05cc627c8;\r\n\tint256  constant c1         = 0x1ffffffffff9dac9b;\r\n\tint256  constant c3         = 0x0aaaaaaac16877908;\r\n\tint256  constant c5         = 0x0666664e5e9fa0c99;\r\n\tint256  constant c7         = 0x049254026a7630acf;\r\n\tint256  constant c9         = 0x038bd75ed37753d68;\r\n\tint256  constant c11        = 0x03284a0c14610924f;\r\n\r\n\t// The polynomial R = c1*x + c3*x^3 + ... + c11 * x^11\r\n\t// approximates the function log(1+x)-log(1-x)\r\n\t// Hence R(s) = log((1+s)/(1-s)) = log(a)\r\n\tfunction fixedLog(uint256 a) internal pure returns (int256 log) {\r\n\t\tint32 scale = 0;\r\n\t\twhile (a > sqrt2) {\r\n\t\t\ta /= 2;\r\n\t\t\tscale++;\r\n\t\t}\r\n\t\twhile (a <= sqrtdot5) {\r\n\t\t\ta *= 2;\r\n\t\t\tscale--;\r\n\t\t}\r\n\t\tint256 s = (((int256)(a) - one) * one) / ((int256)(a) + one);\r\n\t\tvar z = (s*s) / one;\r\n\t\treturn scale * ln2 +\r\n\t\t\t(s*(c1 + (z*(c3 + (z*(c5 + (z*(c7 + (z*(c9 + (z*c11/one))\r\n\t\t\t\t/one))/one))/one))/one))/one);\r\n\t}\r\n\r\n\tint256 constant c2 =  0x02aaaaaaaaa015db0;\r\n\tint256 constant c4 = -0x000b60b60808399d1;\r\n\tint256 constant c6 =  0x0000455956bccdd06;\r\n\tint256 constant c8 = -0x000001b893ad04b3a;\r\n\t\r\n\t// The polynomial R = 2 + c2*x^2 + c4*x^4 + ...\r\n\t// approximates the function x*(exp(x)+1)/(exp(x)-1)\r\n\t// Hence exp(x) = (R(x)+x)/(R(x)-x)\r\n\tfunction fixedExp(int256 a) internal pure returns (uint256 exp) {\r\n\t\tint256 scale = (a + (ln2_64dot5)) / ln2 - 64;\r\n\t\ta -= scale*ln2;\r\n\t\tint256 z = (a*a) / one;\r\n\t\tint256 R = ((int256)(2) * one) +\r\n\t\t\t(z*(c2 + (z*(c4 + (z*(c6 + (z*c8/one))/one))/one))/one);\r\n\t\texp = (uint256) (((R + a) * one) / (R - a));\r\n\t\tif (scale >= 0)\r\n\t\t\texp <<= scale;\r\n\t\telse\r\n\t\t\texp >>= -scale;\r\n\t\treturn exp;\r\n\t}\r\n\t\r\n\t// The below are safemath implementations of the four arithmetic operators\r\n\t// designed to explicitly prevent over- and under-flows of integer values.\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t// This allows you to buy tokens by sending Ether directly to the smart contract\r\n\t// without including any transaction data (useful for, say, mobile wallet apps).\r\n\tfunction () payable public {\r\n\t\t// msg.value is the amount of Ether sent by the transaction.\r\n\t\tif (msg.value > 0) {\r\n\t\t\tfund();\r\n\t\t} else {\r\n\t\t\twithdrawOld(msg.sender);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\ncontract DayTrader {\r\n  // Bag sold event\r\n  event BagSold(\r\n    uint256 bagId,\r\n    uint256 multiplier,\r\n    uint256 oldPrice,\r\n    uint256 newPrice,\r\n    address prevOwner,\r\n    address newOwner\r\n  );\r\n    address stocksaddress = 0xc6b5756b2ac3c4c3176ca4b768ae2689ff8b9cee;\r\n    EthPyramid epc = EthPyramid(0xc6b5756b2ac3c4c3176ca4b768ae2689ff8b9cee);\r\n        \r\n    function epcwallet(address _t) public {\r\n        epc = EthPyramid(_t);\r\n    }\r\n    \r\n  // Address of the contract creator\r\n  address public contractOwner;\r\n\r\n  // Default timeout is 4 hours\r\n  uint256 public timeout = 1 hours;\r\n\r\n  // Default starting price is 0.005 ether\r\n  uint256 public startingPrice = 0.005 ether;\r\n\r\n  Bag[] private bags;\r\n\r\n  struct Bag {\r\n    address owner;\r\n    uint256 level;\r\n    uint256 multiplier; // Multiplier must be rate * 100. example: 1.5x == 150\r\n    uint256 purchasedAt;\r\n  }\r\n\r\n  /// Access modifier for contract owner only functionality\r\n  modifier onlyContractOwner() {\r\n    require(msg.sender == contractOwner);\r\n    _;\r\n  }\r\n\r\n\r\n  function DayTrader() public {\r\n    contractOwner = msg.sender;\r\n    createBag(150);\r\n  }\r\n\r\n  function createBag(uint256 multiplier) public onlyContractOwner {\r\n    Bag memory bag = Bag({\r\n      owner: this,\r\n      level: 0,\r\n      multiplier: multiplier,\r\n      purchasedAt: 0\r\n    });\r\n\r\n    bags.push(bag);\r\n  }\r\n\r\n  function setTimeout(uint256 _timeout) public onlyContractOwner {\r\n    timeout = _timeout;\r\n  }\r\n  \r\n  function sendToStocks() public onlyContractOwner {\r\n    stocksaddress.transfer(SafeMath.div(this.balance, 2));\r\n  }\r\n  \r\n  function setStartingPrice(uint256 _startingPrice) public onlyContractOwner {\r\n    startingPrice = _startingPrice;\r\n  }\r\n\r\n  function setBagMultiplier(uint256 bagId, uint256 multiplier) public onlyContractOwner {\r\n    Bag storage bag = bags[bagId];\r\n    bag.multiplier = multiplier;\r\n  }\r\n\r\n  function getBag(uint256 bagId) public view returns (\r\n    address owner,\r\n    uint256 sellingPrice,\r\n    uint256 nextSellingPrice,\r\n    uint256 level,\r\n    uint256 multiplier,\r\n    uint256 purchasedAt\r\n  ) {\r\n    Bag storage bag = bags[bagId];\r\n\r\n    owner = bag.owner;\r\n    level = getBagLevel(bag);\r\n    sellingPrice = getBagSellingPrice(bag);\r\n    nextSellingPrice = getNextBagSellingPrice(bag);\r\n    multiplier = bag.multiplier;\r\n    purchasedAt = bag.purchasedAt;\r\n  }\r\n\r\n  function getBagCount() public view returns (uint256 bagCount) {\r\n    return bags.length;\r\n  }\r\n\r\n  function deleteBag(uint256 bagId) public onlyContractOwner {\r\n    delete bags[bagId];\r\n  }\r\n\r\n  function purchase(uint256 bagId) public payable {\r\n    Bag storage bag = bags[bagId];\r\n\r\n    address oldOwner = bag.owner;\r\n    address newOwner = msg.sender;\r\n\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n    \r\n    uint256 sellingPrice = getBagSellingPrice(bag);\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= sellingPrice);\r\n\r\n    // Take a transaction fee\r\n    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 90), 100));\r\n    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n\r\n    uint256 level = getBagLevel(bag);\r\n    bag.level = SafeMath.add(level, 1);\r\n    bag.owner = newOwner;\r\n    bag.purchasedAt = now;\r\n\r\n    \r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(payment);\r\n    }\r\n\r\n    // Trigger BagSold event\r\n    BagSold(bagId, bag.multiplier, sellingPrice, getBagSellingPrice(bag), oldOwner, newOwner);\r\n\r\n    newOwner.transfer(purchaseExcess);\r\n  }\r\n\r\n  function payout() public onlyContractOwner {\r\n    contractOwner.transfer(this.balance);\r\n  }\r\n  \r\n  function getMeOutOfHereStocks() public onlyContractOwner {\r\n    epc.getMeOutOfHere();\r\n  }\r\n  \r\n  function sellMyTokensStocks() public onlyContractOwner {\r\n    epc.sellMyTokens();\r\n  }\r\n  \r\n  function withdrawStocks() public onlyContractOwner {\r\n    epc.withdraw();\r\n  }\r\n  \r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n\r\n  // If a bag hasn't been purchased in over $timeout,\r\n  // reset its level back to 0 but retain the existing owner\r\n  function getBagLevel(Bag bag) private view returns (uint256) {\r\n    if (now <= (SafeMath.add(bag.purchasedAt, timeout))) {\r\n      return bag.level;\r\n    } else {\r\n      if(bag.level !=0)\r\n        stocksaddress.transfer(SafeMath.div(this.balance, 2));\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function getBagSellingPrice(Bag bag) private view returns (uint256) {\r\n    uint256 level = getBagLevel(bag);\r\n    return getPriceForLevel(bag, level);\r\n  }\r\n\r\n  function getNextBagSellingPrice(Bag bag) private view returns (uint256) {\r\n    uint256 level = SafeMath.add(getBagLevel(bag), 1);\r\n    return getPriceForLevel(bag, level);\r\n  }\r\n\r\n  function getPriceForLevel(Bag bag, uint256 level) private view returns (uint256) {\r\n    uint256 sellingPrice = startingPrice;\r\n\r\n    for (uint256 i = 0; i < level; i++) {\r\n      sellingPrice = SafeMath.div(SafeMath.mul(sellingPrice, bag.multiplier), 100);\r\n    }\r\n\r\n    return sellingPrice;\r\n  }\r\n\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_startingPrice\",\"type\":\"uint256\"}],\"name\":\"setStartingPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bagId\",\"type\":\"uint256\"}],\"name\":\"deleteBag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_t\",\"type\":\"address\"}],\"name\":\"epcwallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendToStocks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"createBag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMeOutOfHereStocks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"setTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bagId\",\"type\":\"uint256\"},{\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"setBagMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bagId\",\"type\":\"uint256\"}],\"name\":\"getBag\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"nextSellingPrice\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"multiplier\",\"type\":\"uint256\"},{\"name\":\"purchasedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellMyTokensStocks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawStocks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bagId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBagCount\",\"outputs\":[{\"name\":\"bagCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bagId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"multiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"BagSold\",\"type\":\"event\"}]","ContractName":"DayTrader","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://059858ee109971126c8d5d5abb980aed0a620d6f4445c021be123fb37d19756a"}]}