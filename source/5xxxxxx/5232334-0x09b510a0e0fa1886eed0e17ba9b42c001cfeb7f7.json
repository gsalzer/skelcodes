{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n \r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n  \r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  address public saleAgent;\r\n  address public partner;\r\n\r\n  modifier onlyAdmin() {\r\n    require(msg.sender == owner || msg.sender == saleAgent || msg.sender == partner);\r\n    _;\r\n  }\r\n\r\n  function setSaleAgent(address newSaleAgent) onlyOwner public {\r\n    require(newSaleAgent != address(0)); \r\n    saleAgent = newSaleAgent;\r\n  }\r\n\r\n  function setPartner(address newPartner) onlyOwner public {\r\n    require(newPartner != address(0)); \r\n    partner = newPartner;\r\n  }\r\n\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic, Pausable {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 public storageTime = 1522749600; // 04/03/2018 @ 10:00am (UTC)\r\n\r\n  modifier checkStorageTime() {\r\n    require(now >= storageTime);\r\n    _;\r\n  }\r\n\r\n  modifier onlyPayloadSize(uint256 numwords) {\r\n    assert(msg.data.length >= numwords * 32 + 4);\r\n    _;\r\n  }\r\n\r\n  function setStorageTime(uint256 _time) public onlyOwner {\r\n    storageTime = _time;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public\r\n  onlyPayloadSize(2) whenNotPaused checkStorageTime returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public \r\n  onlyPayloadSize(3) whenNotPaused checkStorageTime returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public \r\n  onlyPayloadSize(2) whenNotPaused returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n   /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public \r\n  onlyPayloadSize(2)\r\n  returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public \r\n  onlyPayloadSize(2)\r\n  returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken{\r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  \r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) public onlyAdmin whenNotPaused canMint returns  (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(this), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is MintableToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public onlyPayloadSize(1) {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    Burn(burner, _value);\r\n    Transfer(burner, address(0), _value);\r\n  }\r\n\r\n  function burnFrom(address _from, uint256 _value) public \r\n  onlyPayloadSize(2)\r\n  returns (bool success) {\r\n    require(balances[_from] >= _value);// Check if the targeted balance is enough\r\n    require(_value <= allowed[_from][msg.sender]);// Check allowance\r\n    balances[_from] = balances[_from].sub(_value); // Subtract from the targeted balance\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); // Subtract from the sender's allowance\r\n    totalSupply = totalSupply.sub(_value);\r\n    Burn(_from, _value);\r\n    return true;\r\n    }\r\n}\r\n\r\ncontract AlttexToken is BurnableToken {\r\n    string public constant name = \"Alttex\";\r\n    string public constant symbol = \"ALTX\";\r\n    uint8 public constant decimals = 8;\r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n    \r\n    using SafeMath for uint;\r\n    uint256 public startTimeRound1;\r\n    uint256 public endTimeRound1;\r\n\r\n    uint256 public startTimeRound2;\r\n    uint256 public endTimeRound2;\r\n\r\n    // one token per one rate\r\n    uint256 public rateRound1 = 1200;\r\n    uint256 public rateRound2;\r\n\r\n    uint256 constant dec = 10 ** 8;\r\n    uint256 public supply = 50000000 * 10 ** 8;\r\n    uint256 public percentTokensToSale = 60;\r\n    uint256 public tokensToSale = supply.mul(percentTokensToSale).div(100);\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    AlttexToken public token;\r\n    // Amount of raised money in wei\r\n    uint256 public weiRaised = 17472 * 10 ** 16; // 174.72 ETH\r\n    uint256 public minTokensToSale = 45 * dec;\r\n    // Company addresses\r\n    address public TeamAndAdvisors;\r\n    address public Investors;\r\n\r\n    uint256 timeBonus1 = 20;\r\n    uint256 timeBonus2 = 10;\r\n\r\n    // Round bonuses\r\n    uint256 bonus1 = 10;\r\n    uint256 bonus2 = 15;\r\n    uint256 bonus3 = 20;\r\n    uint256 bonus4 = 30;\r\n\r\n    // Amount bonuses\r\n    uint256 amount1 = 500 * dec;\r\n    uint256 amount2 = 1000 * dec;\r\n    uint256 amount3 = 5000 * dec;\r\n    uint256 amount4 = 10000 * dec;\r\n\r\n    bool initalMinted = false;\r\n    bool checkBonus = false;\r\n\r\n    function Crowdsale(\r\n        address _token,\r\n        uint256 _startTimeRound1, // 1520121600 - 03/04/2018 @ 12:00am (UTC)\r\n        uint256 _startTimeRound2, // 1521417600 - 03/19/2018 @ 12:00am (UTC)\r\n        uint256 _endTimeRound1, // 1521417600 - 03/19/2018 @ 12:00am (UTC)\r\n        uint256 _endTimeRound2, // 1525305600 - 05/03/2018 @ 12:00am (UTC)\r\n        address _wallet,\r\n        address _TeamAndAdvisors,\r\n        address _Investors) public {\r\n        require(_token != address(0));\r\n        require(_endTimeRound1 > _startTimeRound1);\r\n        require(_endTimeRound2 > _startTimeRound2);\r\n        require(_wallet != address(0));\r\n        require(_TeamAndAdvisors != address(0));\r\n        require(_Investors != address(0));\r\n        token = AlttexToken(_token);\r\n        startTimeRound1 = _startTimeRound1;\r\n        startTimeRound2 = _startTimeRound2;\r\n        endTimeRound1 = _endTimeRound1;\r\n        endTimeRound2 = _endTimeRound2;\r\n        wallet = _wallet;\r\n        TeamAndAdvisors = _TeamAndAdvisors;\r\n        Investors = _Investors;\r\n    }\r\n\r\n    function initialMint() onlyOwner public {\r\n        require(!initalMinted);\r\n        uint256 _initialRaised = 17472 * 10 ** 16;\r\n        uint256 _tokens = _initialRaised.mul(1500).div(10 ** 10);\r\n        token.mint(Investors, _tokens.add(_tokens.mul(40).div(100)));\r\n        initalMinted = true;\r\n    }\r\n\r\n    modifier saleIsOn() {\r\n        uint tokenSupply = token.totalSupply();\r\n        require(now > startTimeRound1 && now < endTimeRound2);\r\n        require(tokenSupply <= tokensToSale);\r\n        _;\r\n    }\r\n\r\n    function setPercentTokensToSale(\r\n        uint256 _newPercentTokensToSale) onlyOwner public {\r\n        percentTokensToSale = _newPercentTokensToSale;\r\n    }\r\n\r\n    function setMinTokensToSale(\r\n        uint256 _newMinTokensToSale) onlyOwner public {\r\n        minTokensToSale = _newMinTokensToSale;\r\n    }\r\n\r\n    function setCheckBonus(\r\n        bool _newCheckBonus) onlyOwner public {\r\n        checkBonus = _newCheckBonus;\r\n    }\r\n\r\n    function setAmount(\r\n        uint256 _newAmount1,\r\n        uint256 _newAmount2,\r\n        uint256 _newAmount3,\r\n        uint256 _newAmount4) onlyOwner public {\r\n        amount1 = _newAmount1;\r\n        amount2 = _newAmount2;\r\n        amount3 = _newAmount3;\r\n        amount4 = _newAmount4;\r\n    }\r\n\r\n    function setBonuses(\r\n        uint256 _newBonus1,\r\n        uint256 _newBonus2,\r\n        uint256 _newBonus3,\r\n        uint256 _newBonus4) onlyOwner public {\r\n        bonus1 = _newBonus1;\r\n        bonus2 = _newBonus2;\r\n        bonus3 = _newBonus3;\r\n        bonus4 = _newBonus4;\r\n    }\r\n\r\n    function setRoundTime(\r\n      uint256 _newStartTimeRound2,\r\n      uint256 _newEndTimeRound2) onlyOwner public {\r\n      require(_newEndTimeRound2 > _newStartTimeRound2);\r\n        startTimeRound2 = _newStartTimeRound2;\r\n        endTimeRound2 = _newEndTimeRound2;\r\n    }\r\n\r\n    function setRate(uint256 _newRateRound2) public onlyOwner {\r\n        rateRound2 = _newRateRound2;\r\n    }\r\n\r\n    function setTimeBonus(uint256 _newTimeBonus) public onlyOwner {\r\n        timeBonus2 = _newTimeBonus;\r\n    }\r\n \r\n    function setTeamAddress(\r\n        address _newTeamAndAdvisors,\r\n        address _newInvestors,\r\n        address _newWallet) onlyOwner public {\r\n        require(_newTeamAndAdvisors != address(0));\r\n        require(_newInvestors != address(0));\r\n        require(_newWallet != address(0));\r\n        TeamAndAdvisors = _newTeamAndAdvisors;\r\n        Investors = _newInvestors;\r\n        wallet = _newWallet;\r\n    }\r\n\r\n\r\n    function getAmount(uint256 _value) internal view returns (uint256) {\r\n        uint256 amount = 0;\r\n        uint256 all = 100;\r\n        uint256 tokenSupply = token.totalSupply();\r\n        if(now >= startTimeRound1 && now < endTimeRound1) { // Round 1\r\n            amount = _value.mul(rateRound1);\r\n            amount = amount.add(amount.mul(timeBonus1).div(all));\r\n        } else if(now >= startTimeRound2 && now < endTimeRound2) { // Round 2\r\n            amount = _value.mul(rateRound2);\r\n            amount = amount.add(amount.mul(timeBonus2).div(all));\r\n        } \r\n        require(amount >= minTokensToSale);\r\n        require(amount != 0 && amount.add(tokenSupply) < tokensToSale);\r\n        return amount;\r\n    }\r\n\r\n    function getBonus(uint256 _value) internal view returns (uint256) {\r\n        if(_value >= amount1 && _value < amount2) { \r\n            return bonus1;\r\n        } else if(_value >= amount2 && _value < amount3) {\r\n            return bonus2;\r\n        } else if(_value >= amount3 && _value < amount4) {\r\n            return bonus3;\r\n        } else if(_value >= amount4) {\r\n            return bonus4;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * events for token purchase logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param beneficiary who got the tokens\r\n    * @param value weis paid for purchase\r\n    * @param amount amount of tokens purchased\r\n    */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event TokenPartners(address indexed purchaser, address indexed beneficiary, uint256 amount);\r\n\r\n    function buyTokens(address beneficiary) saleIsOn public payable {\r\n        require(beneficiary != address(0));\r\n        uint256 weiAmount = (msg.value).div(10 ** 10);\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = getAmount(weiAmount);\r\n\r\n        if(checkBonus) {\r\n          uint256 bonusNow = getBonus(tokens);\r\n          tokens = tokens.add(tokens.mul(bonusNow).div(100));\r\n        }\r\n        \r\n        weiRaised = weiRaised.add(msg.value);\r\n        token.mint(beneficiary, tokens);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        wallet.transfer(msg.value);\r\n\r\n        uint256 taaTokens = tokens.mul(20).div(100);\r\n        token.mint(TeamAndAdvisors, taaTokens);\r\n        TokenPartners(msg.sender, TeamAndAdvisors, taaTokens);\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // @return true if tokensale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return now > endTimeRound2;\r\n    }\r\n\r\n    function kill() onlyOwner public { selfdestruct(owner); }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateRound2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TeamAndAdvisors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensToSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRateRound2\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimeRound1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTeamAndAdvisors\",\"type\":\"address\"},{\"name\":\"_newInvestors\",\"type\":\"address\"},{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimeRound2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBonus1\",\"type\":\"uint256\"},{\"name\":\"_newBonus2\",\"type\":\"uint256\"},{\"name\":\"_newBonus3\",\"type\":\"uint256\"},{\"name\":\"_newBonus4\",\"type\":\"uint256\"}],\"name\":\"setBonuses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateRound1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTokensToSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPercentTokensToSale\",\"type\":\"uint256\"}],\"name\":\"setPercentTokensToSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAmount1\",\"type\":\"uint256\"},{\"name\":\"_newAmount2\",\"type\":\"uint256\"},{\"name\":\"_newAmount3\",\"type\":\"uint256\"},{\"name\":\"_newAmount4\",\"type\":\"uint256\"}],\"name\":\"setAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCheckBonus\",\"type\":\"bool\"}],\"name\":\"setCheckBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentTokensToSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimeRound1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinTokensToSale\",\"type\":\"uint256\"}],\"name\":\"setMinTokensToSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimeRound2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTimeBonus\",\"type\":\"uint256\"}],\"name\":\"setTimeBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newStartTimeRound2\",\"type\":\"uint256\"},{\"name\":\"_newEndTimeRound2\",\"type\":\"uint256\"}],\"name\":\"setRoundTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_startTimeRound1\",\"type\":\"uint256\"},{\"name\":\"_startTimeRound2\",\"type\":\"uint256\"},{\"name\":\"_endTimeRound1\",\"type\":\"uint256\"},{\"name\":\"_endTimeRound2\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_TeamAndAdvisors\",\"type\":\"address\"},{\"name\":\"_Investors\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPartners\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b1ed41dc1fe9b723a31137afdd1201d17917fe91000000000000000000000000000000000000000000000000000000005a9b3700000000000000000000000000000000000000000000000000000000005aaefd80000000000000000000000000000000000000000000000000000000005aaefd80000000000000000000000000000000000000000000000000000000005aea510000000000000000000000000023ab9e3c243ff7225e472096291629def58df20c0000000000000000000000002f02184b421bfd28cb246adc9db2bda4d6bd6f74000000000000000000000000c11a8ffe57d40dc009df91fb54a110dbb7bed3a6","Library":"","SwarmSource":"bzzr://700ba3154b38cc3b0ee059e2bb3b1c2c241743e5873b4bb221a20a9ec2772149"}]}