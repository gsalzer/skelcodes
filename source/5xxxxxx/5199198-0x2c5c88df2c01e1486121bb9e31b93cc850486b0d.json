{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n///EtherDrugs\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function implementsERC721() public pure returns (bool);\r\n    function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n    function takeOwnership(uint256 _tokenId) public;\r\n    function totalSupply() public view returns (uint256 total);\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n}\r\n\r\ncontract EtherDrugs is ERC721 {\r\n\r\n  /*** EVENTS ***/\r\n  event Birth(uint256 tokenId, bytes32 name, address owner);\r\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, bytes32 name);\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n  /*** STRUCTS ***/\r\n  struct Drug {\r\n    bytes32 name;\r\n    address owner;\r\n    uint256 price;\r\n    uint256 last_price;\r\n    address approve_transfer_to;\r\n  }\r\n\r\n  /*** CONSTANTS ***/\r\n  string public constant NAME = \"EtherDrugs\";\r\n  string public constant SYMBOL = \"DRUG\";\r\n  \r\n  bool public gameOpen = false;\r\n\r\n  /*** STORAGE ***/\r\n  mapping (address => uint256) private ownerCount;\r\n  mapping (uint256 => address) public lastBuyer;\r\n\r\n  address public ceoAddress;\r\n  mapping (uint256 => address) public extra;\r\n  \r\n  uint256 drug_count;\r\n \r\n  mapping (uint256 => Drug) private drugs;\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n  modifier onlyCEO() { require(msg.sender == ceoAddress); _; }\r\n\r\n  /*** ACCESS MODIFIES ***/\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n    ceoAddress = _newCEO;\r\n  }\r\n\r\n  function setLast(uint256 _id, address _newExtra) public onlyCEO {\r\n    require(_newExtra != address(0));\r\n    lastBuyer[_id] = _newExtra;\r\n  }\r\n\r\n  /*** DEFAULT METHODS ***/\r\n  function symbol() public pure returns (string) { return SYMBOL; }\r\n  function name() public pure returns (string) { return NAME; }\r\n  function implementsERC721() public pure returns (bool) { return true; }\r\n\r\n  /*** CONSTRUCTOR ***/\r\n  function EtherDrugs() public {\r\n    ceoAddress = msg.sender;\r\n    lastBuyer[1] = msg.sender;\r\n    lastBuyer[2] = msg.sender;\r\n    lastBuyer[3] = msg.sender;\r\n    lastBuyer[4] = msg.sender;\r\n    lastBuyer[5] = msg.sender;\r\n    lastBuyer[6] = msg.sender;\r\n    lastBuyer[7] = msg.sender;\r\n    lastBuyer[8] = msg.sender;\r\n    lastBuyer[9] = msg.sender;\r\n  }\r\n\r\n  /*** INTERFACE METHODS ***/\r\n\r\n  function createDrug(bytes32 _name, uint256 _price) public onlyCEO {\r\n    require(msg.sender != address(0));\r\n    _create_drug(_name, address(this), _price, 0);\r\n  }\r\n\r\n  function createPromoDrug(bytes32 _name, address _owner, uint256 _price, uint256 _last_price) public onlyCEO {\r\n    require(msg.sender != address(0));\r\n    require(_owner != address(0));\r\n    _create_drug(_name, _owner, _price, _last_price);\r\n  }\r\n\r\n  function openGame() public onlyCEO {\r\n    require(msg.sender != address(0));\r\n    gameOpen = true;\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return drug_count;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownerCount[_owner];\r\n  }\r\n  function priceOf(uint256 _drug_id) public view returns (uint256 price) {\r\n    return drugs[_drug_id].price;\r\n  }\r\n\r\n  function getDrug(uint256 _drug_id) public view returns (\r\n    uint256 id,\r\n    bytes32 drug_name,\r\n    address owner,\r\n    uint256 price,\r\n    uint256 last_price\r\n  ) {\r\n    id = _drug_id;\r\n    drug_name = drugs[_drug_id].name;\r\n    owner = drugs[_drug_id].owner;\r\n    price = drugs[_drug_id].price;\r\n    last_price = drugs[_drug_id].last_price;\r\n  }\r\n  \r\n  function getDrugs() public view returns (uint256[], bytes32[], address[], uint256[]) {\r\n    uint256[] memory ids = new uint256[](drug_count);\r\n    bytes32[] memory names = new bytes32[](drug_count);\r\n    address[] memory owners = new address[](drug_count);\r\n    uint256[] memory prices = new uint256[](drug_count);\r\n    for(uint256 _id = 0; _id < drug_count; _id++){\r\n      ids[_id] = _id;\r\n      names[_id] = drugs[_id].name;\r\n      owners[_id] = drugs[_id].owner;\r\n      prices[_id] = drugs[_id].price;\r\n    }\r\n    return (ids, names, owners, prices);\r\n  }\r\n  \r\n  function purchase(uint256 _drug_id) public payable {\r\n    require(gameOpen == true);\r\n    Drug storage drug = drugs[_drug_id];\r\n\r\n    require(drug.owner != msg.sender);\r\n    require(msg.sender != address(0));  \r\n    require(msg.value >= drug.price);\r\n\r\n    uint256 excess = SafeMath.sub(msg.value, drug.price);\r\n    uint256 half_diff = SafeMath.div(SafeMath.sub(drug.price, drug.last_price), 2);\r\n    uint256 reward = SafeMath.add(half_diff, drug.last_price);\r\n  \r\n    lastBuyer[1].send(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 69))); //69% goes to last buyer\r\n    lastBuyer[6].send(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 2)));  //2% goes to 6th last buyer, else ceo\r\n    lastBuyer[9].send(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 2)));  //2% goes to 9th last buyer, else ceo\r\n\r\n    if(drug.owner == address(this)){\r\n      ceoAddress.send(reward);\r\n    } else {\r\n      drug.owner.send(reward);\r\n    }\r\n    \r\n    \r\n    drug.last_price = drug.price;\r\n    address _old_owner = drug.owner;\r\n    \r\n    if(drug.price < 1690000000000000000){ // 1.69 eth\r\n        drug.price = SafeMath.mul(SafeMath.div(drug.price, 100), 169); // 1.69x\r\n    } else {\r\n        drug.price = SafeMath.mul(SafeMath.div(drug.price, 100), 125); // 1.2x\r\n    }\r\n    drug.owner = msg.sender;\r\n\r\n    lastBuyer[9] = lastBuyer[8];\r\n    lastBuyer[8] = lastBuyer[7];\r\n    lastBuyer[7] = lastBuyer[6];\r\n    lastBuyer[6] = lastBuyer[5];\r\n    lastBuyer[5] = lastBuyer[4];\r\n    lastBuyer[4] = lastBuyer[3];\r\n    lastBuyer[3] = lastBuyer[2];\r\n    lastBuyer[2] = lastBuyer[1];\r\n    lastBuyer[1] = msg.sender;\r\n\r\n    Transfer(_old_owner, drug.owner, _drug_id);\r\n    TokenSold(_drug_id, drug.last_price, drug.price, _old_owner, drug.owner, drug.name);\r\n\r\n    msg.sender.send(excess);\r\n  }\r\n\r\n  function payout() public onlyCEO {\r\n    ceoAddress.send(this.balance);\r\n  }\r\n\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 resultIndex = 0;\r\n      for (uint256 drugId = 0; drugId <= totalSupply(); drugId++) {\r\n        if (drugs[drugId].owner == _owner) {\r\n          result[resultIndex] = drugId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /*** ERC-721 compliance. ***/\r\n\r\n  function approve(address _to, uint256 _drug_id) public {\r\n    require(msg.sender == drugs[_drug_id].owner);\r\n    drugs[_drug_id].approve_transfer_to = _to;\r\n    Approval(msg.sender, _to, _drug_id);\r\n  }\r\n  function ownerOf(uint256 _drug_id) public view returns (address owner){\r\n    owner = drugs[_drug_id].owner;\r\n    require(owner != address(0));\r\n  }\r\n  function takeOwnership(uint256 _drug_id) public {\r\n    address oldOwner = drugs[_drug_id].owner;\r\n    require(msg.sender != address(0));\r\n    require(drugs[_drug_id].approve_transfer_to == msg.sender);\r\n    _transfer(oldOwner, msg.sender, _drug_id);\r\n  }\r\n  function transfer(address _to, uint256 _drug_id) public {\r\n    require(msg.sender != address(0));\r\n    require(msg.sender == drugs[_drug_id].owner);\r\n    _transfer(msg.sender, _to, _drug_id);\r\n  }\r\n  function transferFrom(address _from, address _to, uint256 _drug_id) public {\r\n    require(_from == drugs[_drug_id].owner);\r\n    require(drugs[_drug_id].approve_transfer_to == _to);\r\n    require(_to != address(0));\r\n    _transfer(_from, _to, _drug_id);\r\n  }\r\n\r\n  /*** PRIVATE METHODS ***/\r\n\r\n  function _create_drug(bytes32 _name, address _owner, uint256 _price, uint256 _last_price) private {\r\n    // Params: name, owner, price, is_for_sale, is_public, share_price, increase, fee, share_count,\r\n    drugs[drug_count] = Drug({\r\n      name: _name,\r\n      owner: _owner,\r\n      price: _price,\r\n      last_price: _last_price,\r\n      approve_transfer_to: address(0)\r\n    });\r\n    \r\n    Drug storage drug = drugs[drug_count];\r\n    \r\n    Birth(drug_count, _name, _owner);\r\n    Transfer(address(this), _owner, drug_count);\r\n    drug_count++;\r\n  }\r\n\r\n  function _transfer(address _from, address _to, uint256 _drug_id) private {\r\n    drugs[_drug_id].owner = _to;\r\n    drugs[_drug_id].approve_transfer_to = address(0);\r\n    ownerCount[_from] -= 1;\r\n    ownerCount[_to] += 1;\r\n    Transfer(_from, _to, _drug_id);\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_drug_id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_drug_id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_newExtra\",\"type\":\"address\"}],\"name\":\"setLast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDrugs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_drug_id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extra\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createDrug\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_drug_id\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_drug_id\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_drug_id\",\"type\":\"uint256\"}],\"name\":\"getDrug\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"drug_name\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"last_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_drug_id\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_last_price\",\"type\":\"uint256\"}],\"name\":\"createPromoDrug\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_drug_id\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EtherDrugs","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4f28bef4e7f2526561abace2ac6aaba6e196b6c0d44ebdf3f8d9c2460e91c99d"}]}