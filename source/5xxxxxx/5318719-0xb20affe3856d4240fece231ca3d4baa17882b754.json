{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n\r\ncontract DNCBasic {\r\n    uint256 public totalSupply = 0;\r\n    //function balanceOf(address who) constant returns (uint);\r\n    //function transfer(address _to, uint _value) returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n \r\ncontract DNCReceivingContract {\r\n    function tokenFallback(address _from, uint _value, bytes _data);\r\n}\r\n\r\n/* SafeMath for checking eror*/\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract ERC223BasicToken is DNCBasic{\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    function transfer(address _to, uint _value) returns (bool success) {\r\n        uint codeLength;\r\n        bytes memory empty;\r\n\r\n        assembly {\r\n            // Retrieve the size of the code on target address, this needs assembly .\r\n            codeLength := extcodesize(_to)\r\n        }\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(codeLength>0) {\r\n            DNCReceivingContract receiver = DNCReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, empty);\r\n        }\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\ncontract GoldBank is ERC223BasicToken{\r\n\taddress admin;\r\n\tstring public name = \"DinarCoin\";\r\n    string public symbol = \"DNC\";\r\n    uint public decimals = 18;\r\n\tmapping (address => bool) public mintable;\r\n\r\n\tevent Minted(address indexed recipient, uint256 value);\r\n\tevent Burned(address indexed user, uint256 value);\r\n\r\n\tfunction GoldBank() {\r\n\t\tadmin = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyadmin { if (msg.sender == admin) _; }\r\n\r\n\tfunction changeAdmin(address _newAdminAddr) onlyadmin {\r\n\t\tadmin = _newAdminAddr;\r\n\t}\r\n\r\n\tfunction createNewMintableUser (address newAddr) onlyadmin {\r\n\t\tif(balances[newAddr] == 0)  \r\n    \t\tmintable[newAddr] = true;\r\n\t}\r\n\t\r\n\tfunction deleteMintable (address addr) onlyadmin {\r\n\t    mintable[addr] = false;\r\n\t}\r\n\t\r\n\tfunction adminTransfer(address from, address to, uint256 value) onlyadmin {\r\n        if(mintable[from] == true) {\r\n    \t    balances[from] = balances[from].sub(value);\r\n    \t    balances[to] = balances[to].add(value);\r\n    \t    Transfer(from, to, value);\r\n        }\r\n\t}\r\n\t\r\n\tfunction mintNewDNC(address user, uint256 quantity) onlyadmin {\r\n\t    uint256 correctedQuantity = quantity * (10**(decimals-1));\r\n        if(mintable[user] == true) {\r\n            totalSupply = totalSupply.add(correctedQuantity);\r\n            balances[user] = balances[user].add(correctedQuantity);\r\n            Transfer(0, user, correctedQuantity);\r\n            Minted(user, correctedQuantity);\r\n        }   \r\n\t}\r\n\t\r\n\tfunction burnDNC(address user, uint256 quantity) onlyadmin {\r\n\t    uint256 correctedQuantity = quantity * (10**(decimals-1));\r\n\t    if(mintable[user] == true) {\r\n            balances[user] = balances[user].sub(correctedQuantity);\r\n            totalSupply = totalSupply.sub(correctedQuantity);\r\n            Transfer(user, 0, correctedQuantity);\r\n            Burned(user, correctedQuantity);\r\n\t    }\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DNCBasic","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e5ea41df528f6229450b73018682c7c04a9b2e5b0494d0e6d31f7e8688d85649"}]}