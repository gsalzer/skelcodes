{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n// copyright contact@Etheremon.com\r\n\r\ncontract SafeMath {\r\n\r\n    /* function assert(bool assertion) internal { */\r\n    /*   if (!assertion) { */\r\n    /*     throw; */\r\n    /*   } */\r\n    /* }      // assert no longer needed once solidity is on 0.4.10 */\r\n\r\n    function safeAdd(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = true;\r\n\r\n    function BasicAccessControl() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(msg.sender == owner || moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n\r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\ncontract EtheremonEnum {\r\n\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_TRAINER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT,\r\n        ERROR_OBJ_NOT_FOUND,\r\n        ERROR_OBJ_INVALID_OWNERSHIP\r\n    }\r\n    \r\n    enum ArrayType {\r\n        CLASS_TYPE,\r\n        STAT_STEP,\r\n        STAT_START,\r\n        STAT_BASE,\r\n        OBJ_SKILL\r\n    }\r\n\r\n    enum PropertyType {\r\n        ANCESTOR,\r\n        XFACTOR\r\n    }\r\n    \r\n    enum BattleResult {\r\n        CASTLE_WIN,\r\n        CASTLE_LOSE,\r\n        CASTLE_DESTROYED\r\n    }\r\n    \r\n    enum CacheClassInfoType {\r\n        CLASS_TYPE,\r\n        CLASS_STEP,\r\n        CLASS_ANCESTOR\r\n    }\r\n}\r\n\r\ncontract EtheremonDataBase is EtheremonEnum, BasicAccessControl, SafeMath {\r\n    \r\n    uint64 public totalMonster;\r\n    uint32 public totalClass;\r\n    \r\n    // read\r\n    function getSizeArrayType(ArrayType _type, uint64 _id) constant public returns(uint);\r\n    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);\r\n    function getMonsterClass(uint32 _classId) constant public returns(uint32 classId, uint256 price, uint256 returnPrice, uint32 total, bool catchable);\r\n    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\r\n    function getMonsterName(uint64 _objId) constant public returns(string name);\r\n    function getExtraBalance(address _trainer) constant public returns(uint256);\r\n    function getMonsterDexSize(address _trainer) constant public returns(uint);\r\n    function getMonsterObjId(address _trainer, uint index) constant public returns(uint64);\r\n    function getExpectedBalance(address _trainer) constant public returns(uint256);\r\n    function getMonsterReturn(uint64 _objId) constant public returns(uint256 current, uint256 total);\r\n}\r\n\r\ninterface EtheremonTradeInterface {\r\n    function isOnTrading(uint64 _objId) constant external returns(bool);\r\n}\r\n\r\ninterface EtheremonPaymentInterface {\r\n    function giveBattleBonus(address _trainer, uint _amount) public; \r\n}\r\n\r\ncontract EtheremonGateway is EtheremonEnum, BasicAccessControl {\r\n    // using for battle contract later\r\n    function increaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\r\n    function decreaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;\r\n    \r\n    // read \r\n    function isGason(uint64 _objId) constant external returns(bool);\r\n    function getObjBattleInfo(uint64 _objId) constant external returns(uint32 classId, uint32 exp, bool isGason, \r\n        uint ancestorLength, uint xfactorsLength);\r\n    function getClassPropertySize(uint32 _classId, PropertyType _type) constant external returns(uint);\r\n    function getClassPropertyValue(uint32 _classId, PropertyType _type, uint index) constant external returns(uint32);\r\n}\r\n\r\ncontract EtheremonCastleContract is EtheremonEnum, BasicAccessControl{\r\n\r\n    uint32 public totalCastle = 0;\r\n    uint64 public totalBattle = 0;\r\n    \r\n    function getCastleBasicInfo(address _owner) constant external returns(uint32, uint, uint32);\r\n    function getCastleBasicInfoById(uint32 _castleId) constant external returns(uint, address, uint32);\r\n    function countActiveCastle() constant external returns(uint);\r\n    function getCastleObjInfo(uint32 _castleId) constant external returns(uint64, uint64, uint64, uint64, uint64, uint64);\r\n    function getCastleStats(uint32 _castleId) constant external returns(string, address, uint32, uint32, uint32, uint);\r\n    function isOnCastle(uint32 _castleId, uint64 _objId) constant external returns(bool);\r\n    function getCastleWinLose(uint32 _castleId) constant external returns(uint32, uint32, uint32);\r\n    function getTrainerBrick(address _trainer) constant external returns(uint32);\r\n\r\n    function addCastle(address _trainer, string _name, uint64 _a1, uint64 _a2, uint64 _a3, uint64 _s1, uint64 _s2, uint64 _s3, uint32 _brickNumber) \r\n        onlyModerators external returns(uint32 currentCastleId);\r\n    function renameCastle(uint32 _castleId, string _name) onlyModerators external;\r\n    function removeCastleFromActive(uint32 _castleId) onlyModerators external;\r\n    function deductTrainerBrick(address _trainer, uint32 _deductAmount) onlyModerators external returns(bool);\r\n    \r\n    function addBattleLog(uint32 _castleId, address _attacker, \r\n        uint8 _ran1, uint8 _ran2, uint8 _ran3, uint8 _result, uint32 _castleExp1, uint32 _castleExp2, uint32 _castleExp3) onlyModerators external returns(uint64);\r\n    function addBattleLogMonsterInfo(uint64 _battleId, uint64 _a1, uint64 _a2, uint64 _a3, uint64 _s1, uint64 _s2, uint64 _s3, uint32 _exp1, uint32 _exp2, uint32 _exp3) onlyModerators external;\r\n}\r\n\r\ncontract EtheremonBattle is EtheremonEnum, BasicAccessControl, SafeMath {\r\n    uint8 constant public NO_MONSTER = 3;\r\n    uint8 constant public STAT_COUNT = 6;\r\n    uint8 constant public GEN0_NO = 24;\r\n    \r\n    struct MonsterClassAcc {\r\n        uint32 classId;\r\n        uint256 price;\r\n        uint256 returnPrice;\r\n        uint32 total;\r\n        bool catchable;\r\n    }\r\n\r\n    struct MonsterObjAcc {\r\n        uint64 monsterId;\r\n        uint32 classId;\r\n        address trainer;\r\n        string name;\r\n        uint32 exp;\r\n        uint32 createIndex;\r\n        uint32 lastClaimIndex;\r\n        uint createTime;\r\n    }\r\n    \r\n    struct BattleMonsterData {\r\n        uint64 a1;\r\n        uint64 a2;\r\n        uint64 a3;\r\n        uint64 s1;\r\n        uint64 s2;\r\n        uint64 s3;\r\n    }\r\n\r\n    struct SupporterData {\r\n        uint32 classId1;\r\n        bool isGason1;\r\n        uint8 type1;\r\n        uint32 classId2;\r\n        bool isGason2;\r\n        uint8 type2;\r\n        uint32 classId3;\r\n        bool isGason3;\r\n        uint8 type3;\r\n    }\r\n\r\n    struct AttackData {\r\n        uint64 aa;\r\n        SupporterData asup;\r\n        uint16 aAttackSupport;\r\n        uint64 ba;\r\n        SupporterData bsup;\r\n        uint16 bAttackSupport;\r\n        uint8 index;\r\n    }\r\n    \r\n    struct MonsterBattleLog {\r\n        uint64 objId;\r\n        uint32 exp;\r\n    }\r\n    \r\n    struct BattleLogData {\r\n        address castleOwner;\r\n        uint64 battleId;\r\n        uint32 castleId;\r\n        uint32[3] temp;\r\n        uint castleIndex;\r\n        uint8[6] monsterLevel;\r\n        uint8[3] randoms;\r\n        bool win;\r\n        BattleResult result;\r\n    }\r\n    \r\n    struct CacheClassInfo {\r\n        uint8[] types;\r\n        uint8[] steps;\r\n        uint32[] ancestors;\r\n    }\r\n    \r\n    struct CastleData {\r\n        address trainer;\r\n        string name;\r\n        uint32 brickNumber;\r\n        uint64 a1;\r\n        uint64 a2;\r\n        uint64 a3;\r\n        uint64 s1;\r\n        uint64 s2;\r\n        uint64 s3;\r\n    }\r\n\r\n    // event\r\n    event EventCreateCastle(address indexed owner, uint32 castleId);\r\n    event EventAttackCastle(address indexed attacker, uint32 castleId, uint8 result);\r\n    event EventRemoveCastle(uint32 indexed castleId);\r\n    \r\n    // linked smart contract\r\n    address public worldContract;\r\n    address public dataContract;\r\n    address public tradeContract;\r\n    address public castleContract;\r\n    address public paymentContract;\r\n    \r\n    // global variable\r\n    mapping(uint8 => uint8) typeAdvantages;\r\n    mapping(uint32 => CacheClassInfo) cacheClasses;\r\n    mapping(uint8 => uint32) levelExps;\r\n    uint8 public ancestorBuffPercentage = 10;\r\n    uint8 public gasonBuffPercentage = 10;\r\n    uint8 public typeBuffPercentage = 20;\r\n    uint8 public maxLevel = 100;\r\n    uint16 public maxActiveCastle = 30;\r\n    uint8 public maxRandomRound = 4;\r\n    \r\n    uint8 public winBrickReturn = 8;\r\n    uint32 public castleMinBrick = 5;\r\n    uint8 public castleExpAdjustment = 150; // percentage\r\n    uint8 public attackerExpAdjustment = 50; // percentage\r\n    uint8 public levelExpAdjustment = 3; // level\r\n    uint8 public castleMaxLevelGap = 5;\r\n    uint public brickETHPrice = 0.004 ether;\r\n    uint8 public minHpDeducted = 10;\r\n    uint public winTokenReward = 10 ** 8;\r\n    \r\n    uint256 public totalEarn = 0;\r\n    uint256 public totalWithdraw = 0;\r\n    \r\n    address private lastAttacker = address(0x0);\r\n    \r\n    // modifier\r\n    modifier requireDataContract {\r\n        require(dataContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    modifier requireTradeContract {\r\n        require(tradeContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    modifier requireCastleContract {\r\n        require(castleContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    modifier requireWorldContract {\r\n        require(worldContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    modifier requirePaymentContract {\r\n        require(paymentContract != address(0));\r\n        _;\r\n    }\r\n\r\n\r\n    function EtheremonBattle(address _dataContract, address _worldContract, address _tradeContract, address _castleContract, address _paymentContract) public {\r\n        dataContract = _dataContract;\r\n        worldContract = _worldContract;\r\n        tradeContract = _tradeContract;\r\n        castleContract = _castleContract;\r\n        paymentContract = _paymentContract;\r\n    }\r\n    \r\n     // admin & moderators\r\n    function setTypeAdvantages() onlyModerators external {\r\n        typeAdvantages[1] = 14;\r\n        typeAdvantages[2] = 16;\r\n        typeAdvantages[3] = 8;\r\n        typeAdvantages[4] = 9;\r\n        typeAdvantages[5] = 2;\r\n        typeAdvantages[6] = 11;\r\n        typeAdvantages[7] = 3;\r\n        typeAdvantages[8] = 5;\r\n        typeAdvantages[9] = 15;\r\n        typeAdvantages[11] = 18;\r\n        // skipp 10\r\n        typeAdvantages[12] = 7;\r\n        typeAdvantages[13] = 6;\r\n        typeAdvantages[14] = 17;\r\n        typeAdvantages[15] = 13;\r\n        typeAdvantages[16] = 12;\r\n        typeAdvantages[17] = 1;\r\n        typeAdvantages[18] = 4;\r\n    }\r\n    \r\n    function setTypeAdvantage(uint8 _type1, uint8 _type2) onlyModerators external {\r\n        typeAdvantages[_type1] = _type2;\r\n    }\r\n    \r\n    function setCacheClassInfo(uint32 _classId) onlyModerators requireDataContract requireWorldContract public {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n         EtheremonGateway gateway = EtheremonGateway(worldContract);\r\n        uint i = 0;\r\n        CacheClassInfo storage classInfo = cacheClasses[_classId];\r\n\r\n        // add type\r\n        i = data.getSizeArrayType(ArrayType.CLASS_TYPE, uint64(_classId));\r\n        uint8[] memory aTypes = new uint8[](i);\r\n        for(; i > 0 ; i--) {\r\n            aTypes[i-1] = data.getElementInArrayType(ArrayType.CLASS_TYPE, uint64(_classId), i-1);\r\n        }\r\n        classInfo.types = aTypes;\r\n\r\n        // add steps\r\n        i = data.getSizeArrayType(ArrayType.STAT_STEP, uint64(_classId));\r\n        uint8[] memory steps = new uint8[](i);\r\n        for(; i > 0 ; i--) {\r\n            steps[i-1] = data.getElementInArrayType(ArrayType.STAT_STEP, uint64(_classId), i-1);\r\n        }\r\n        classInfo.steps = steps;\r\n        \r\n        // add ancestor\r\n        i = gateway.getClassPropertySize(_classId, PropertyType.ANCESTOR);\r\n        uint32[] memory ancestors = new uint32[](i);\r\n        for(; i > 0 ; i--) {\r\n            ancestors[i-1] = gateway.getClassPropertyValue(_classId, PropertyType.ANCESTOR, i-1);\r\n        }\r\n        classInfo.ancestors = ancestors;\r\n    }\r\n    \r\n    function fastSetCacheClassInfo(uint32 _classId1, uint32 _classId2, uint32 _classId3, uint32 _classId4, uint32 _classId5, uint32 _classId6, uint32 _classId7, uint32 _classId8) \r\n        onlyModerators requireDataContract requireWorldContract public {\r\n        setCacheClassInfo(_classId1);\r\n        setCacheClassInfo(_classId2);\r\n        setCacheClassInfo(_classId3);\r\n        setCacheClassInfo(_classId4);\r\n        setCacheClassInfo(_classId5);\r\n        setCacheClassInfo(_classId6);\r\n        setCacheClassInfo(_classId7);\r\n        setCacheClassInfo(_classId8);\r\n    }    \r\n     \r\n    function withdrawEther(address _sendTo, uint _amount) onlyModerators external {\r\n        if (_amount > this.balance) {\r\n            revert();\r\n        }\r\n        uint256 validAmount = safeSubtract(totalEarn, totalWithdraw);\r\n        if (_amount > validAmount) {\r\n            revert();\r\n        }\r\n        totalWithdraw += _amount;\r\n        _sendTo.transfer(_amount);\r\n    }\r\n    \r\n    function setContract(address _dataContract, address _worldContract, address _tradeContract, address _castleContract, address _paymentContract) onlyModerators external {\r\n        dataContract = _dataContract;\r\n        worldContract = _worldContract;\r\n        tradeContract = _tradeContract;\r\n        castleContract = _castleContract;\r\n        paymentContract = _paymentContract;\r\n    }\r\n    \r\n    function setConfig(uint8 _ancestorBuffPercentage, uint8 _gasonBuffPercentage, uint8 _typeBuffPercentage, \r\n        uint8 _maxLevel, uint8 _maxRandomRound, uint8 _minHpDeducted, uint _winTokenReward) onlyModerators external{\r\n        ancestorBuffPercentage = _ancestorBuffPercentage;\r\n        gasonBuffPercentage = _gasonBuffPercentage;\r\n        typeBuffPercentage = _typeBuffPercentage;\r\n        maxLevel = _maxLevel;\r\n        maxRandomRound = _maxRandomRound;\r\n        minHpDeducted = _minHpDeducted;\r\n        winTokenReward = _winTokenReward;\r\n    }\r\n    \r\n    function setCastleConfig(uint8 _castleMaxLevelGap, uint16 _maxActiveCastle, uint _brickETHPrice, uint8 _castleExpAdjustment, uint8 _attackerExpAdjustment, uint8 _levelExpAdjustment, uint32 _castleMinBrick) onlyModerators external {\r\n        castleMaxLevelGap = _castleMaxLevelGap;\r\n        maxActiveCastle = _maxActiveCastle;\r\n        brickETHPrice = _brickETHPrice;\r\n        castleExpAdjustment = _castleExpAdjustment;\r\n        attackerExpAdjustment = _attackerExpAdjustment;\r\n        levelExpAdjustment = _levelExpAdjustment;\r\n        castleMinBrick = _castleMinBrick;\r\n    }\r\n    \r\n    function genLevelExp() onlyModerators external {\r\n        uint8 level = 1;\r\n        uint32 requirement = 100;\r\n        uint32 sum = requirement;\r\n        while(level <= 100) {\r\n            levelExps[level] = sum;\r\n            level += 1;\r\n            requirement = (requirement * 11) / 10 + 5;\r\n            sum += requirement;\r\n        }\r\n    }\r\n    \r\n    // public \r\n    function getCacheClassSize(uint32 _classId) constant public returns(uint, uint, uint) {\r\n        CacheClassInfo storage classInfo = cacheClasses[_classId];\r\n        return (classInfo.types.length, classInfo.steps.length, classInfo.ancestors.length);\r\n    }\r\n    \r\n    function getRandom(uint8 maxRan, uint8 index, address priAddress) constant public returns(uint8) {\r\n        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(priAddress);\r\n        for (uint8 i = 0; i < index && i < 6; i ++) {\r\n            genNum /= 256;\r\n        }\r\n        return uint8(genNum % maxRan);\r\n    }\r\n    \r\n    function getLevel(uint32 exp) view public returns (uint8) {\r\n        uint8 minIndex = 1;\r\n        uint8 maxIndex = 100;\r\n        uint8 currentIndex;\r\n     \r\n        while (minIndex < maxIndex) {\r\n            currentIndex = (minIndex + maxIndex) / 2;\r\n            if (exp < levelExps[currentIndex])\r\n                maxIndex = currentIndex;\r\n            else\r\n                minIndex = currentIndex + 1;\r\n        }\r\n\r\n        return minIndex;\r\n    }\r\n    \r\n    function getGainExp(uint8 level2, uint8 level, bool _win) constant public returns(uint32){\r\n        uint8 halfLevel1 = level;\r\n        if (level > level2 + 3) {\r\n            halfLevel1 = (level2 + 3) / 2;\r\n        } else {\r\n            halfLevel1 = level / 2;\r\n        }\r\n        uint32 gainExp = 1;\r\n        uint256 rate = (21 ** uint256(halfLevel1)) * 1000 / (20 ** uint256(halfLevel1));\r\n        rate = rate * rate;\r\n        if ((level > level2 + 3 && level2 + 3 > 2 * halfLevel1) || (level <= level2 + 3 && level > 2 * halfLevel1)) rate = rate * 21 / 20;\r\n        if (_win) {\r\n            gainExp = uint32(30 * rate / 1000000);\r\n        } else {\r\n            gainExp = uint32(10 * rate / 1000000);\r\n        }\r\n        \r\n        if (level2 >= level + levelExpAdjustment) {\r\n            gainExp /= uint32(2) ** ((level2 - level) / levelExpAdjustment);\r\n        }\r\n        return gainExp;\r\n    }\r\n    \r\n    function getMonsterLevel(uint64 _objId) constant external returns(uint32, uint8) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        uint32 _ = 0;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, _, _, obj.createTime) = data.getMonsterObj(_objId);\r\n     \r\n        return (obj.exp, getLevel(obj.exp));\r\n    }\r\n    \r\n    function getMonsterCP(uint64 _objId) constant external returns(uint64) {\r\n        uint16[6] memory stats;\r\n        uint32 classId = 0;\r\n        uint32 exp = 0;\r\n        (classId, exp, stats) = getCurrentStats(_objId);\r\n        \r\n        uint256 total;\r\n        for(uint i=0; i < STAT_COUNT; i+=1) {\r\n            total += stats[i];\r\n        }\r\n        return uint64(total/STAT_COUNT);\r\n    }\r\n    \r\n    function isOnBattle(uint64 _objId) constant external returns(bool) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        EtheremonCastleContract castle = EtheremonCastleContract(castleContract);\r\n        uint32 castleId;\r\n        uint castleIndex = 0;\r\n        uint256 price = 0;\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\r\n        (castleId, castleIndex, price) = castle.getCastleBasicInfo(obj.trainer);\r\n        if (castleId > 0 && castleIndex > 0)\r\n            return castle.isOnCastle(castleId, _objId);\r\n        return false;\r\n    }\r\n    \r\n    function isValidOwner(uint64 _objId, address _owner) constant public returns(bool) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_objId);\r\n        return (obj.trainer == _owner && obj.classId != 21);\r\n    }\r\n    \r\n    function getObjExp(uint64 _objId) constant public returns(uint32, uint32) {\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        MonsterObjAcc memory obj;\r\n        uint32 _ = 0;\r\n        (_objId, obj.classId, obj.trainer, obj.exp, _, _, obj.createTime) = data.getMonsterObj(_objId);\r\n        return (obj.classId, obj.exp);\r\n    }\r\n    \r\n    function getCurrentStats(uint64 _objId) constant public returns(uint32, uint8, uint16[6]){\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        uint16[6] memory stats;\r\n        uint32 classId;\r\n        uint32 exp;\r\n        (classId, exp) = getObjExp(_objId);\r\n        if (classId == 0)\r\n            return (classId, 0, stats);\r\n        \r\n        uint i = 0;\r\n        uint8 level = getLevel(exp);\r\n        for(i=0; i < STAT_COUNT; i+=1) {\r\n            stats[i] = data.getElementInArrayType(ArrayType.STAT_BASE, _objId, i);\r\n        }\r\n        for(i=0; i < cacheClasses[classId].steps.length; i++) {\r\n            stats[i] += uint16(safeMult(cacheClasses[classId].steps[i], level*3));\r\n        }\r\n        return (classId, level, stats);\r\n    }\r\n    \r\n    function safeDeduct(uint16 a, uint16 b) pure private returns(uint16){\r\n        if (a > b) {\r\n            return a - b;\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function calHpDeducted(uint16 _attack, uint16 _specialAttack, uint16 _defense, uint16 _specialDefense, bool _lucky) view public returns(uint16){\r\n        if (_lucky) {\r\n            _attack = _attack * 13 / 10;\r\n            _specialAttack = _specialAttack * 13 / 10;\r\n        }\r\n        uint16 hpDeducted = safeDeduct(_attack, _defense * 3 /4);\r\n        uint16 hpSpecialDeducted = safeDeduct(_specialAttack, _specialDefense* 3 / 4);\r\n        if (hpDeducted < minHpDeducted && hpSpecialDeducted < minHpDeducted)\r\n            return minHpDeducted;\r\n        if (hpDeducted > hpSpecialDeducted)\r\n            return hpDeducted;\r\n        return hpSpecialDeducted;\r\n    }\r\n    \r\n    function getAncestorBuff(uint32 _classId, SupporterData _support) constant private returns(uint16){\r\n        // check ancestors\r\n        uint i =0;\r\n        uint8 countEffect = 0;\r\n        uint ancestorSize = cacheClasses[_classId].ancestors.length;\r\n        if (ancestorSize > 0) {\r\n            uint32 ancestorClass = 0;\r\n            for (i=0; i < ancestorSize; i ++) {\r\n                ancestorClass = cacheClasses[_classId].ancestors[i];\r\n                if (ancestorClass == _support.classId1 || ancestorClass == _support.classId2 || ancestorClass == _support.classId3) {\r\n                    countEffect += 1;\r\n                }\r\n            }\r\n        }\r\n        return countEffect * ancestorBuffPercentage;\r\n    }\r\n    \r\n    function getGasonSupport(uint32 _classId, SupporterData _sup) constant private returns(uint16 defenseSupport) {\r\n        uint i = 0;\r\n        uint8 classType = 0;\r\n        defenseSupport = 0;\r\n        for (i = 0; i < cacheClasses[_classId].types.length; i++) {\r\n            classType = cacheClasses[_classId].types[i];\r\n             if (_sup.isGason1) {\r\n                if (classType == _sup.type1) {\r\n                    defenseSupport += gasonBuffPercentage;\r\n                    continue;\r\n                }\r\n            }\r\n            if (_sup.isGason2) {\r\n                if (classType == _sup.type2) {\r\n                    defenseSupport += gasonBuffPercentage;\r\n                    continue;\r\n                }\r\n            }\r\n            if (_sup.isGason3) {\r\n                if (classType == _sup.type3) {\r\n                    defenseSupport += gasonBuffPercentage;\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getTypeSupport(uint32 _aClassId, uint32 _bClassId) constant private returns (uint16 aAttackSupport, uint16 bAttackSupport) {\r\n        // check types \r\n        bool aHasAdvantage;\r\n        bool bHasAdvantage;\r\n        for (uint i = 0; i < cacheClasses[_aClassId].types.length; i++) {\r\n            for (uint j = 0; j < cacheClasses[_bClassId].types.length; j++) {\r\n                if (typeAdvantages[cacheClasses[_aClassId].types[i]] == cacheClasses[_bClassId].types[j]) {\r\n                    aHasAdvantage = true;\r\n                }\r\n                if (typeAdvantages[cacheClasses[_bClassId].types[j]] == cacheClasses[_aClassId].types[i]) {\r\n                    bHasAdvantage = true;\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (aHasAdvantage)\r\n            aAttackSupport += typeBuffPercentage;\r\n        if (bHasAdvantage)\r\n            bAttackSupport += typeBuffPercentage;\r\n    }\r\n    \r\n    function calculateBattleStats(AttackData att) constant private returns(uint8 aLevel, uint16[6] aStats, uint8 bLevel, uint16[6] bStats) {\r\n        uint32 aClassId = 0;\r\n        (aClassId, aLevel, aStats) = getCurrentStats(att.aa);\r\n        uint32 bClassId = 0;\r\n        (bClassId, bLevel, bStats) = getCurrentStats(att.ba);\r\n        \r\n        // check gasonsupport\r\n        (att.aAttackSupport, att.bAttackSupport) = getTypeSupport(aClassId, bClassId);\r\n        att.aAttackSupport += getAncestorBuff(aClassId, att.asup);\r\n        att.bAttackSupport += getAncestorBuff(bClassId, att.bsup);\r\n        \r\n        uint16 aDefenseBuff = getGasonSupport(aClassId, att.asup);\r\n        uint16 bDefenseBuff = getGasonSupport(bClassId, att.bsup);\r\n        \r\n        // add attack\r\n        aStats[1] += aStats[1] * att.aAttackSupport / 100;\r\n        aStats[3] += aStats[3] * att.aAttackSupport / 100;\r\n        bStats[1] += bStats[1] * att.bAttackSupport / 100;\r\n        bStats[3] += bStats[3] * att.bAttackSupport / 100;\r\n        \r\n        // add offense\r\n        aStats[2] += aStats[2] * aDefenseBuff / 100;\r\n        aStats[4] += aStats[4] * aDefenseBuff / 100;\r\n        bStats[2] += bStats[2] * bDefenseBuff / 100;\r\n        bStats[4] += bStats[4] * bDefenseBuff / 100;\r\n        \r\n    }\r\n    \r\n    function attack(AttackData att) constant private returns(uint8 aLevel, uint8 bLevel, uint8 ran, bool win) {\r\n        uint16[6] memory aStats;\r\n        uint16[6] memory bStats;\r\n        (aLevel, aStats, bLevel, bStats) = calculateBattleStats(att);\r\n        \r\n        ran = getRandom(maxRandomRound+2, att.index, lastAttacker);\r\n        uint16 round = 0;\r\n        while (round < maxRandomRound && aStats[0] > 0 && bStats[0] > 0) {\r\n            if (aStats[5] > bStats[5]) {\r\n                if (round % 2 == 0) {\r\n                    // a attack \r\n                    bStats[0] = safeDeduct(bStats[0], calHpDeducted(aStats[1], aStats[3], bStats[2], bStats[4], round==ran));\r\n                } else {\r\n                    aStats[0] = safeDeduct(aStats[0], calHpDeducted(bStats[1], bStats[3], aStats[2], aStats[4], round==ran));\r\n                }\r\n                \r\n            } else {\r\n                if (round % 2 != 0) {\r\n                    bStats[0] = safeDeduct(bStats[0], calHpDeducted(aStats[1], aStats[3], bStats[2], bStats[4], round==ran));\r\n                } else {\r\n                    aStats[0] = safeDeduct(aStats[0], calHpDeducted(bStats[1], bStats[3], aStats[2], aStats[4], round==ran));\r\n                }\r\n            }\r\n            round+= 1;\r\n        }\r\n        \r\n        win = aStats[0] >= bStats[0];\r\n    }\r\n    \r\n    function updateCastle(uint32 _castleId, address _castleOwner, bool win) requireCastleContract private{\r\n        EtheremonCastleContract castle = EtheremonCastleContract(castleContract);\r\n        uint32 totalWin;\r\n        uint32 totalLose;\r\n        uint32 brickNumber;\r\n        (totalWin, totalLose, brickNumber) = castle.getCastleWinLose(_castleId);\r\n        EtheremonPaymentInterface payment = EtheremonPaymentInterface(paymentContract);\r\n        \r\n        // if castle win, ignore\r\n        if (win) {\r\n            if (totalWin < brickNumber) {\r\n                 payment.giveBattleBonus(_castleOwner, winTokenReward);\r\n            }\r\n        } else {\r\n            if (totalWin/winBrickReturn > brickNumber) {\r\n                brickNumber = 2 * brickNumber;\r\n            } else {\r\n                brickNumber += totalWin/winBrickReturn;\r\n            }\r\n            if (brickNumber <= totalLose + 1) {\r\n                castle.removeCastleFromActive(_castleId);\r\n                // destroy\r\n            }\r\n            payment.giveBattleBonus(msg.sender, winTokenReward);\r\n        }\r\n    }\r\n    \r\n    function hasValidParam(address _trainer, uint64 _a1, uint64 _a2, uint64 _a3, uint64 _s1, uint64 _s2, uint64 _s3) constant public returns(bool) {\r\n        if (_a1 == 0 || _a2 == 0 || _a3 == 0)\r\n            return false;\r\n        if (_a1 == _a2 || _a1 == _a3 || _a1 == _s1 || _a1 == _s2 || _a1 == _s3)\r\n            return false;\r\n        if (_a2 == _a3 || _a2 == _s1 || _a2 == _s2 || _a2 == _s3)\r\n            return false;\r\n        if (_a3 == _s1 || _a3 == _s2 || _a3 == _s3)\r\n            return false;\r\n        if (_s1 > 0 && (_s1 == _s2 || _s1 == _s3))\r\n            return false;\r\n        if (_s2 > 0 && (_s2 == _s3))\r\n            return false;\r\n        \r\n        if (!isValidOwner(_a1, _trainer) || !isValidOwner(_a2, _trainer) || !isValidOwner(_a3, _trainer))\r\n            return false;\r\n        if (_s1 > 0 && !isValidOwner(_s1, _trainer))\r\n            return false;\r\n        if (_s2 > 0 && !isValidOwner(_s2, _trainer))\r\n            return false;\r\n        if (_s3 > 0 && !isValidOwner(_s3, _trainer))\r\n            return false;\r\n        return true;\r\n    }\r\n    \r\n    function createCastleInternal(CastleData _castleData) private {\r\n        EtheremonCastleContract castle = EtheremonCastleContract(castleContract);\r\n        uint32 castleId;\r\n        uint castleIndex = 0;\r\n        uint32 numberBrick = 0;\r\n        (castleId, castleIndex, numberBrick) = castle.getCastleBasicInfo(_castleData.trainer);\r\n        if (castleId > 0 || castleIndex > 0)\r\n            revert();\r\n\r\n        if (castle.countActiveCastle() >= uint(maxActiveCastle))\r\n            revert();\r\n        castleId = castle.addCastle(_castleData.trainer, _castleData.name, _castleData.a1, _castleData.a2, _castleData.a3, \r\n            _castleData.s1, _castleData.s2, _castleData.s3, _castleData.brickNumber);\r\n        EventCreateCastle(_castleData.trainer, castleId);\r\n    }\r\n    \r\n    // public\r\n    \r\n    function createCastle(string _name, uint64 _a1, uint64 _a2, uint64 _a3, uint64 _s1, uint64 _s2, uint64 _s3) isActive requireDataContract \r\n        requireTradeContract requireCastleContract payable external {\r\n        \r\n        if (!hasValidParam(msg.sender, _a1, _a2, _a3, _s1, _s2, _s3))\r\n            revert();\r\n        \r\n        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\r\n        if (trade.isOnTrading(_a1) || trade.isOnTrading(_a2) || trade.isOnTrading(_a3) || \r\n            trade.isOnTrading(_s1) || trade.isOnTrading(_s2) || trade.isOnTrading(_s3))\r\n            revert();\r\n        \r\n        uint32 numberBrick = uint32(msg.value / brickETHPrice);\r\n        if (numberBrick < castleMinBrick) {\r\n            revert();\r\n        }\r\n        \r\n        CastleData memory castleData;\r\n        castleData.trainer = msg.sender;\r\n        castleData.name = _name;\r\n        castleData.brickNumber = numberBrick;\r\n        castleData.a1 = _a1;\r\n        castleData.a2 = _a2;\r\n        castleData.a3 = _a3;\r\n        castleData.s1 = _s1;\r\n        castleData.s2 = _s2;\r\n        castleData.s3 = _s3;\r\n        createCastleInternal(castleData);\r\n        totalEarn += msg.value;\r\n    }\r\n    \r\n    function createCastleWithToken(address _trainer, uint32 _noBrick, string _name, uint64 _a1, uint64 _a2, uint64 _a3, uint64 _s1, uint64 _s2, uint64 _s3) isActive requireDataContract\r\n        requireTradeContract requireCastleContract requirePaymentContract external {\r\n        // only accept request from payment contract\r\n        if (msg.sender != paymentContract)\r\n            revert();\r\n    \r\n        if (!hasValidParam(_trainer, _a1, _a2, _a3, _s1, _s2, _s3))\r\n            revert();\r\n        \r\n        EtheremonTradeInterface trade = EtheremonTradeInterface(tradeContract);\r\n        if (trade.isOnTrading(_a1) || trade.isOnTrading(_a2) || trade.isOnTrading(_a3) || \r\n            trade.isOnTrading(_s1) || trade.isOnTrading(_s2) || trade.isOnTrading(_s3))\r\n            revert();\r\n        \r\n        if (_noBrick < castleMinBrick) {\r\n            revert();\r\n        }\r\n        \r\n        CastleData memory castleData;\r\n        castleData.trainer = _trainer;\r\n        castleData.name = _name;\r\n        castleData.brickNumber = _noBrick;\r\n        castleData.a1 = _a1;\r\n        castleData.a2 = _a2;\r\n        castleData.a3 = _a3;\r\n        castleData.s1 = _s1;\r\n        castleData.s2 = _s2;\r\n        castleData.s3 = _s3;\r\n        createCastleInternal(castleData);\r\n    }\r\n    \r\n    function renameCastle(uint32 _castleId, string _name) isActive requireCastleContract external {\r\n        EtheremonCastleContract castle = EtheremonCastleContract(castleContract);\r\n        uint index;\r\n        address owner;\r\n        uint256 price;\r\n        (index, owner, price) = castle.getCastleBasicInfoById(_castleId);\r\n        if (owner != msg.sender)\r\n            revert();\r\n        castle.renameCastle(_castleId, _name);\r\n    }\r\n    \r\n    function removeCastle(uint32 _castleId) isActive requireCastleContract external {\r\n        EtheremonCastleContract castle = EtheremonCastleContract(castleContract);\r\n        uint index;\r\n        address owner;\r\n        uint256 price;\r\n        (index, owner, price) = castle.getCastleBasicInfoById(_castleId);\r\n        if (owner != msg.sender)\r\n            revert();\r\n        if (index > 0) {\r\n            castle.removeCastleFromActive(_castleId);\r\n        }\r\n        EventRemoveCastle(_castleId);\r\n    }\r\n    \r\n    function getSupporterInfo(uint64 s1, uint64 s2, uint64 s3) constant public returns(SupporterData sData) {\r\n        uint temp;\r\n        uint32 __;\r\n        EtheremonGateway gateway = EtheremonGateway(worldContract);\r\n        if (s1 > 0)\r\n            (sData.classId1, __, sData.isGason1, temp, temp) = gateway.getObjBattleInfo(s1);\r\n        if (s2 > 0)\r\n            (sData.classId2, __, sData.isGason2, temp, temp) = gateway.getObjBattleInfo(s2);\r\n        if (s3 > 0)\r\n            (sData.classId3, __, sData.isGason3, temp, temp) = gateway.getObjBattleInfo(s3);\r\n\r\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\r\n        if (sData.isGason1) {\r\n            sData.type1 = data.getElementInArrayType(ArrayType.CLASS_TYPE, uint64(sData.classId1), 0);\r\n        }\r\n        \r\n        if (sData.isGason2) {\r\n            sData.type2 = data.getElementInArrayType(ArrayType.CLASS_TYPE, uint64(sData.classId2), 0);\r\n        }\r\n        \r\n        if (sData.isGason3) {\r\n            sData.type3 = data.getElementInArrayType(ArrayType.CLASS_TYPE, uint64(sData.classId3), 0);\r\n        }\r\n    }\r\n    \r\n    function attackCastle(uint32 _castleId, uint64 _aa1, uint64 _aa2, uint64 _aa3, uint64 _as1, uint64 _as2, uint64 _as3) isActive requireDataContract \r\n        requireTradeContract requireCastleContract requirePaymentContract external {\r\n        if (!hasValidParam(msg.sender, _aa1, _aa2, _aa3, _as1, _as2, _as3))\r\n            revert();\r\n        \r\n        EtheremonCastleContract castle = EtheremonCastleContract(castleContract);\r\n        BattleLogData memory log;\r\n        (log.castleIndex, log.castleOwner, log.temp[0]) = castle.getCastleBasicInfoById(_castleId);\r\n        if (log.castleIndex == 0 || log.castleOwner == msg.sender)\r\n            revert();\r\n        \r\n        EtheremonGateway gateway = EtheremonGateway(worldContract);\r\n        BattleMonsterData memory b;\r\n        (b.a1, b.a2, b.a3, b.s1, b.s2, b.s3) = castle.getCastleObjInfo(_castleId);\r\n        lastAttacker = msg.sender;\r\n\r\n        // init data\r\n        uint8 countWin = 0;\r\n        AttackData memory att;\r\n        att.asup = getSupporterInfo(b.s1, b.s2, b.s3);\r\n        att.bsup = getSupporterInfo(_as1, _as2, _as3);\r\n        \r\n        att.index = 0;\r\n        att.aa = b.a1;\r\n        att.ba = _aa1;\r\n        (log.monsterLevel[0], log.monsterLevel[3], log.randoms[0], log.win) = attack(att);\r\n        gateway.increaseMonsterExp(att.aa, getGainExp(log.monsterLevel[0], log.monsterLevel[3], log.win)*castleExpAdjustment/100);\r\n        gateway.increaseMonsterExp(att.ba, getGainExp(log.monsterLevel[3], log.monsterLevel[0], !log.win)*attackerExpAdjustment/100);\r\n        if (log.win)\r\n            countWin += 1;\r\n        \r\n        \r\n        att.index = 1;\r\n        att.aa = b.a2;\r\n        att.ba = _aa2;\r\n        (log.monsterLevel[1], log.monsterLevel[4], log.randoms[1], log.win) = attack(att);\r\n        gateway.increaseMonsterExp(att.aa, getGainExp(log.monsterLevel[1], log.monsterLevel[4], log.win)*castleExpAdjustment/100);\r\n        gateway.increaseMonsterExp(att.ba, getGainExp(log.monsterLevel[4], log.monsterLevel[1], !log.win)*attackerExpAdjustment/100);\r\n        if (log.win)\r\n            countWin += 1;   \r\n\r\n        att.index = 2;\r\n        att.aa = b.a3;\r\n        att.ba = _aa3;\r\n        (log.monsterLevel[2], log.monsterLevel[5], log.randoms[2], log.win) = attack(att);\r\n        gateway.increaseMonsterExp(att.aa, getGainExp(log.monsterLevel[2], log.monsterLevel[5], log.win)*castleExpAdjustment/100);\r\n        gateway.increaseMonsterExp(att.ba, getGainExp(log.monsterLevel[5], log.monsterLevel[2], !log.win)*attackerExpAdjustment/100);\r\n        if (log.win)\r\n            countWin += 1; \r\n        \r\n        if ((log.monsterLevel[0] + log.monsterLevel[1] + log.monsterLevel[2])/3 + castleMaxLevelGap < (log.monsterLevel[3] + log.monsterLevel[4] + log.monsterLevel[5])/3)\r\n            revert();\r\n        \r\n        updateCastle(_castleId, log.castleOwner, countWin>1);\r\n        if (countWin>1) {\r\n            log.result = BattleResult.CASTLE_WIN;\r\n        } else {\r\n            log.result = BattleResult.CASTLE_LOSE;\r\n        }\r\n        \r\n        log.temp[0] = levelExps[log.monsterLevel[0]]-1;\r\n        log.temp[1] = levelExps[log.monsterLevel[1]]-1;\r\n        log.temp[2] = levelExps[log.monsterLevel[2]]-1;\r\n        log.battleId = castle.addBattleLog(_castleId, msg.sender, log.randoms[0], log.randoms[1], log.randoms[2], \r\n            uint8(log.result), log.temp[0], log.temp[1], log.temp[2]);\r\n        \r\n        log.temp[0] = levelExps[log.monsterLevel[3]]-1;\r\n        log.temp[1] = levelExps[log.monsterLevel[4]]-1;\r\n        log.temp[2] = levelExps[log.monsterLevel[5]]-1;\r\n        castle.addBattleLogMonsterInfo(log.battleId, _aa1, _aa2, _aa3, _as1, _as2, _as3, log.temp[0], log.temp[1], log.temp[2]);\r\n    \r\n        EventAttackCastle(msg.sender, _castleId, uint8(log.result));\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_castleMaxLevelGap\",\"type\":\"uint8\"},{\"name\":\"_maxActiveCastle\",\"type\":\"uint16\"},{\"name\":\"_brickETHPrice\",\"type\":\"uint256\"},{\"name\":\"_castleExpAdjustment\",\"type\":\"uint8\"},{\"name\":\"_attackerExpAdjustment\",\"type\":\"uint8\"},{\"name\":\"_levelExpAdjustment\",\"type\":\"uint8\"},{\"name\":\"_castleMinBrick\",\"type\":\"uint32\"}],\"name\":\"setCastleConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getMonsterCP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"attackerExpAdjustment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"worldContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trainer\",\"type\":\"address\"},{\"name\":\"_a1\",\"type\":\"uint64\"},{\"name\":\"_a2\",\"type\":\"uint64\"},{\"name\":\"_a3\",\"type\":\"uint64\"},{\"name\":\"_s1\",\"type\":\"uint64\"},{\"name\":\"_s2\",\"type\":\"uint64\"},{\"name\":\"_s3\",\"type\":\"uint64\"}],\"name\":\"hasValidParam\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getObjExp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"levelExpAdjustment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"brickETHPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_attack\",\"type\":\"uint16\"},{\"name\":\"_specialAttack\",\"type\":\"uint16\"},{\"name\":\"_defense\",\"type\":\"uint16\"},{\"name\":\"_specialDefense\",\"type\":\"uint16\"},{\"name\":\"_lucky\",\"type\":\"bool\"}],\"name\":\"calHpDeducted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dataContract\",\"type\":\"address\"},{\"name\":\"_worldContract\",\"type\":\"address\"},{\"name\":\"_tradeContract\",\"type\":\"address\"},{\"name\":\"_castleContract\",\"type\":\"address\"},{\"name\":\"_paymentContract\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ancestorBuffPercentage\",\"type\":\"uint8\"},{\"name\":\"_gasonBuffPercentage\",\"type\":\"uint8\"},{\"name\":\"_typeBuffPercentage\",\"type\":\"uint8\"},{\"name\":\"_maxLevel\",\"type\":\"uint8\"},{\"name\":\"_maxRandomRound\",\"type\":\"uint8\"},{\"name\":\"_minHpDeducted\",\"type\":\"uint8\"},{\"name\":\"_winTokenReward\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type1\",\"type\":\"uint8\"},{\"name\":\"_type2\",\"type\":\"uint8\"}],\"name\":\"setTypeAdvantage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"genLevelExp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setTypeAdvantages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"isOnBattle\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"maxRan\",\"type\":\"uint8\"},{\"name\":\"index\",\"type\":\"uint8\"},{\"name\":\"priAddress\",\"type\":\"address\"}],\"name\":\"getRandom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level2\",\"type\":\"uint8\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"_win\",\"type\":\"bool\"}],\"name\":\"getGainExp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_castleId\",\"type\":\"uint32\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"renameCastle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_castleId\",\"type\":\"uint32\"},{\"name\":\"_aa1\",\"type\":\"uint64\"},{\"name\":\"_aa2\",\"type\":\"uint64\"},{\"name\":\"_aa3\",\"type\":\"uint64\"},{\"name\":\"_as1\",\"type\":\"uint64\"},{\"name\":\"_as2\",\"type\":\"uint64\"},{\"name\":\"_as3\",\"type\":\"uint64\"}],\"name\":\"attackCastle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"castleMinBrick\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_a1\",\"type\":\"uint64\"},{\"name\":\"_a2\",\"type\":\"uint64\"},{\"name\":\"_a3\",\"type\":\"uint64\"},{\"name\":\"_s1\",\"type\":\"uint64\"},{\"name\":\"_s2\",\"type\":\"uint64\"},{\"name\":\"_s3\",\"type\":\"uint64\"}],\"name\":\"createCastle\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"}],\"name\":\"getCacheClassSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"s1\",\"type\":\"uint64\"},{\"name\":\"s2\",\"type\":\"uint64\"},{\"name\":\"s3\",\"type\":\"uint64\"}],\"name\":\"getSupporterInfo\",\"outputs\":[{\"components\":[{\"name\":\"classId1\",\"type\":\"uint32\"},{\"name\":\"isGason1\",\"type\":\"bool\"},{\"name\":\"type1\",\"type\":\"uint8\"},{\"name\":\"classId2\",\"type\":\"uint32\"},{\"name\":\"isGason2\",\"type\":\"bool\"},{\"name\":\"type2\",\"type\":\"uint8\"},{\"name\":\"classId3\",\"type\":\"uint32\"},{\"name\":\"isGason3\",\"type\":\"bool\"},{\"name\":\"type3\",\"type\":\"uint8\"}],\"name\":\"sData\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"castleMaxLevelGap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winBrickReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_NO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NO_MONSTER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getCurrentStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint16[6]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ancestorBuffPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"typeBuffPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"castleExpAdjustment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"}],\"name\":\"setCacheClassInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winTokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxActiveCastle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trainer\",\"type\":\"address\"},{\"name\":\"_noBrick\",\"type\":\"uint32\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_a1\",\"type\":\"uint64\"},{\"name\":\"_a2\",\"type\":\"uint64\"},{\"name\":\"_a3\",\"type\":\"uint64\"},{\"name\":\"_s1\",\"type\":\"uint64\"},{\"name\":\"_s2\",\"type\":\"uint64\"},{\"name\":\"_s3\",\"type\":\"uint64\"}],\"name\":\"createCastleWithToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exp\",\"type\":\"uint32\"}],\"name\":\"getLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId1\",\"type\":\"uint32\"},{\"name\":\"_classId2\",\"type\":\"uint32\"},{\"name\":\"_classId3\",\"type\":\"uint32\"},{\"name\":\"_classId4\",\"type\":\"uint32\"},{\"name\":\"_classId5\",\"type\":\"uint32\"},{\"name\":\"_classId6\",\"type\":\"uint32\"},{\"name\":\"_classId7\",\"type\":\"uint32\"},{\"name\":\"_classId8\",\"type\":\"uint32\"}],\"name\":\"fastSetCacheClassInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minHpDeducted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"}],\"name\":\"getMonsterLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_castleId\",\"type\":\"uint32\"}],\"name\":\"removeCastle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasonBuffPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAT_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_objId\",\"type\":\"uint64\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isValidOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEarn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"castleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxRandomRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dataContract\",\"type\":\"address\"},{\"name\":\"_worldContract\",\"type\":\"address\"},{\"name\":\"_tradeContract\",\"type\":\"address\"},{\"name\":\"_castleContract\",\"type\":\"address\"},{\"name\":\"_paymentContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"castleId\",\"type\":\"uint32\"}],\"name\":\"EventCreateCastle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"attacker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"castleId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"EventAttackCastle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"castleId\",\"type\":\"uint32\"}],\"name\":\"EventRemoveCastle\",\"type\":\"event\"}]","ContractName":"EtheremonBattle","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000abc1c404424bdf24c19a5cc5ef8f47781d18eb3e0000000000000000000000001fc7bd85293f3982f40d52698df8d26be89360d60000000000000000000000004ba72f0f8dad13709ee28a992869e79d0fe4703000000000000000000000000075aa01dc00f6aeefe14bd58a5b6cbb091c6dc57b000000000000000000000000fec769e54c266de2bc3fa5df7d9f0fe2a1e39461","Library":"","SwarmSource":"bzzr://841024e427679ca2d74f51569af34e37935bc4ea55a57b4d83fe9a0e2ddaf3a8"}]}