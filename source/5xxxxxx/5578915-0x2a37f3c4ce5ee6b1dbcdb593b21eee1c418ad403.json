{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/FlightDelayAccessControllerInterface.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description\tAccessControllerInterface\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\ncontract FlightDelayAccessControllerInterface {\r\n\r\n    function setPermissionById(uint8 _perm, bytes32 _id) public;\r\n\r\n    function setPermissionById(uint8 _perm, bytes32 _id, bool _access) public;\r\n\r\n    function setPermissionByAddress(uint8 _perm, address _addr) public;\r\n\r\n    function setPermissionByAddress(uint8 _perm, address _addr, bool _access) public;\r\n\r\n    function checkPermission(uint8 _perm, address _addr) public returns (bool _success);\r\n}\r\n\r\n// File: contracts/FlightDelayConstants.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description\tEvents and Constants\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\ncontract FlightDelayConstants {\r\n\r\n    /*\r\n    * General events\r\n    */\r\n\r\n// --> test-mode\r\n//        event LogUint(string _message, uint _uint);\r\n//        event LogUintEth(string _message, uint ethUint);\r\n//        event LogUintTime(string _message, uint timeUint);\r\n//        event LogInt(string _message, int _int);\r\n//        event LogAddress(string _message, address _address);\r\n//        event LogBytes32(string _message, bytes32 hexBytes32);\r\n//        event LogBytes(string _message, bytes hexBytes);\r\n//        event LogBytes32Str(string _message, bytes32 strBytes32);\r\n//        event LogString(string _message, string _string);\r\n//        event LogBool(string _message, bool _bool);\r\n//        event Log(address);\r\n// <-- test-mode\r\n\r\n    event LogPolicyApplied(\r\n        uint _policyId,\r\n        address _customer,\r\n        bytes32 strCarrierFlightNumber,\r\n        uint ethPremium\r\n    );\r\n    event LogPolicyAccepted(\r\n        uint _policyId,\r\n        uint _statistics0,\r\n        uint _statistics1,\r\n        uint _statistics2,\r\n        uint _statistics3,\r\n        uint _statistics4,\r\n        uint _statistics5\r\n    );\r\n    event LogPolicyPaidOut(\r\n        uint _policyId,\r\n        uint ethAmount\r\n    );\r\n    event LogPolicyExpired(\r\n        uint _policyId\r\n    );\r\n    event LogPolicyDeclined(\r\n        uint _policyId,\r\n        bytes32 strReason\r\n    );\r\n    event LogPolicyManualPayout(\r\n        uint _policyId,\r\n        bytes32 strReason\r\n    );\r\n    event LogSendFunds(\r\n        address _recipient,\r\n        uint8 _from,\r\n        uint ethAmount\r\n    );\r\n    event LogReceiveFunds(\r\n        address _sender,\r\n        uint8 _to,\r\n        uint ethAmount\r\n    );\r\n    event LogSendFail(\r\n        uint _policyId,\r\n        bytes32 strReason\r\n    );\r\n    event LogOraclizeCall(\r\n        uint _policyId,\r\n        bytes32 hexQueryId,\r\n        string _oraclizeUrl,\r\n        uint256 _oraclizeTime\r\n    );\r\n    event LogOraclizeCallback(\r\n        uint _policyId,\r\n        bytes32 hexQueryId,\r\n        string _result,\r\n        bytes hexProof\r\n    );\r\n    event LogSetState(\r\n        uint _policyId,\r\n        uint8 _policyState,\r\n        uint _stateTime,\r\n        bytes32 _stateMessage\r\n    );\r\n    event LogExternal(\r\n        uint256 _policyId,\r\n        address _address,\r\n        bytes32 _externalId\r\n    );\r\n\r\n    /*\r\n    * General constants\r\n    */\r\n    // contracts release version\r\n    uint public constant MAJOR_VERSION = 1;\r\n    uint public constant MINOR_VERSION = 0;\r\n    uint public constant PATCH_VERSION = 2;\r\n\r\n    // minimum observations for valid prediction\r\n    uint constant MIN_OBSERVATIONS = 10;\r\n    // minimum premium to cover costs\r\n    uint constant MIN_PREMIUM = 50 finney;\r\n    // maximum premium\r\n    uint constant MAX_PREMIUM = 1 ether;\r\n    // maximum payout\r\n    uint constant MAX_PAYOUT = 1100 finney;\r\n\r\n    uint constant MIN_PREMIUM_EUR = 1500 wei;\r\n    uint constant MAX_PREMIUM_EUR = 29000 wei;\r\n    uint constant MAX_PAYOUT_EUR = 30000 wei;\r\n\r\n    uint constant MIN_PREMIUM_USD = 1700 wei;\r\n    uint constant MAX_PREMIUM_USD = 34000 wei;\r\n    uint constant MAX_PAYOUT_USD = 35000 wei;\r\n\r\n    uint constant MIN_PREMIUM_GBP = 1300 wei;\r\n    uint constant MAX_PREMIUM_GBP = 25000 wei;\r\n    uint constant MAX_PAYOUT_GBP = 270 wei;\r\n\r\n    // maximum cumulated weighted premium per risk\r\n    uint constant MAX_CUMULATED_WEIGHTED_PREMIUM = 60 ether;\r\n    // 1 percent for DAO, 1 percent for maintainer\r\n    uint8 constant REWARD_PERCENT = 2;\r\n    // reserve for tail risks\r\n    uint8 constant RESERVE_PERCENT = 1;\r\n    // the weight pattern; in future versions this may become part of the policy struct.\r\n    // currently can't be constant because of compiler restrictions\r\n    // WEIGHT_PATTERN[0] is not used, just to be consistent\r\n    uint8[6] WEIGHT_PATTERN = [\r\n        0,\r\n        0,\r\n        0,\r\n        30,\r\n        50,\r\n        50\r\n    ];\r\n\r\n// --> prod-mode\r\n    // DEFINITIONS FOR ROPSTEN AND MAINNET\r\n    // minimum time before departure for applying\r\n    uint constant MIN_TIME_BEFORE_DEPARTURE\t= 24 hours; // for production\r\n    // check for delay after .. minutes after scheduled arrival\r\n    uint constant CHECK_PAYOUT_OFFSET = 15 minutes; // for production\r\n// <-- prod-mode\r\n\r\n// --> test-mode\r\n//        // DEFINITIONS FOR LOCAL TESTNET\r\n//        // minimum time before departure for applying\r\n//        uint constant MIN_TIME_BEFORE_DEPARTURE = 1 seconds; // for testing\r\n//        // check for delay after .. minutes after scheduled arrival\r\n//        uint constant CHECK_PAYOUT_OFFSET = 1 seconds; // for testing\r\n// <-- test-mode\r\n\r\n    // maximum duration of flight\r\n    uint constant MAX_FLIGHT_DURATION = 2 days;\r\n    // Deadline for acceptance of policies: 31.12.2030 (Testnet)\r\n    uint constant CONTRACT_DEAD_LINE = 1922396399;\r\n\r\n    // gas Constants for oraclize\r\n    uint constant ORACLIZE_GAS = 700000;\r\n    uint constant ORACLIZE_GASPRICE = 4000000000;\r\n\r\n\r\n    /*\r\n    * URLs and query strings for oraclize\r\n    */\r\n\r\n// --> prod-mode\r\n    // DEFINITIONS FOR ROPSTEN AND MAINNET\r\n    string constant ORACLIZE_RATINGS_BASE_URL =\r\n        // ratings api is v1, see https://developer.flightstats.com/api-docs/ratings/v1\r\n        \"[URL] json(https://api.flightstats.com/flex/ratings/rest/v1/json/flight/\";\r\n    string constant ORACLIZE_RATINGS_QUERY =\r\n        \"?${[decrypt] BJoM0BfTe82RtghrzzCbNA7b9E9tQIX8LtM+pRRh22RfQ5QhnVAv6Kk4SyaMwQKczC7YtinJ/Xm6PZMgKnWN7+/pFUfI2YcxaAW0vYuXJF4zCTxPYXa6j4shhce60AMBeKoZZsgn6Og+olgSpgpfi4MwkmmytwdCLHqat3gGUPklBhM1HR0x}).ratings[0]['observations','late15','late30','late45','cancelled','diverted','arrivalAirportFsCode','departureAirportFsCode']\";\r\n    string constant ORACLIZE_STATUS_BASE_URL =\r\n        // flight status api is v2, see https://developer.flightstats.com/api-docs/flightstatus/v2/flight\r\n        \"[URL] json(https://api.flightstats.com/flex/flightstatus/rest/v2/json/flight/status/\";\r\n    string constant ORACLIZE_STATUS_QUERY =\r\n        // pattern:\r\n        \"?${[decrypt] BA3YyqF4iMQszBawvgG82bqX3fw7JoWA1thFsboUECR/L8JkBCgvaThg1LcUWbIntosEKs/kvqyzOtvdQfMgjYPV0c6hsq/gKQkmJYILZmLY4SgBebH8g0qbfrrjxF5gEbfCi2qoR6PSxcQzKIjgd4HvAaumlQd4CkJLmY463ymqNN9B8/PL}&utc=true).flightStatuses[0]['status','delays','operationalTimes']\";\r\n// <-- prod-mode\r\n\r\n// --> test-mode\r\n//        // DEFINITIONS FOR LOCAL TESTNET\r\n//        string constant ORACLIZE_RATINGS_BASE_URL =\r\n//            // ratings api is v1, see https://developer.flightstats.com/api-docs/ratings/v1\r\n//            \"[URL] json(https://api-test.etherisc.com/flex/ratings/rest/v1/json/flight/\";\r\n//        string constant ORACLIZE_RATINGS_QUERY =\r\n//            // for testrpc:\r\n//            \").ratings[0]['observations','late15','late30','late45','cancelled','diverted','arrivalAirportFsCode','departureAirportFsCode']\";\r\n//        string constant ORACLIZE_STATUS_BASE_URL =\r\n//            // flight status api is v2, see https://developer.flightstats.com/api-docs/flightstatus/v2/flight\r\n//            \"[URL] json(https://api-test.etherisc.com/flex/flightstatus/rest/v2/json/flight/status/\";\r\n//        string constant ORACLIZE_STATUS_QUERY =\r\n//            // for testrpc:\r\n//            \"?utc=true).flightStatuses[0]['status','delays','operationalTimes']\";\r\n// <-- test-mode\r\n}\r\n\r\n// File: contracts/FlightDelayControllerInterface.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description Contract interface\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock, Stephan Karpischek\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\ncontract FlightDelayControllerInterface {\r\n\r\n    function isOwner(address _addr) public returns (bool _isOwner);\r\n\r\n    function selfRegister(bytes32 _id) public returns (bool result);\r\n\r\n    function getContract(bytes32 _id) public returns (address _addr);\r\n}\r\n\r\n// File: contracts/FlightDelayDatabaseModel.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description Database model\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock, Stephan Karpischek\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\ncontract FlightDelayDatabaseModel {\r\n\r\n    // Ledger accounts.\r\n    enum Acc {\r\n        Premium,      // 0\r\n        RiskFund,     // 1\r\n        Payout,       // 2\r\n        Balance,      // 3\r\n        Reward,       // 4\r\n        OraclizeCosts // 5\r\n    }\r\n\r\n    // policy Status Codes and meaning:\r\n    //\r\n    // 00 = Applied:\t  the customer has payed a premium, but the oracle has\r\n    //\t\t\t\t\t        not yet checked and confirmed.\r\n    //\t\t\t\t\t        The customer can still revoke the policy.\r\n    // 01 = Accepted:\t  the oracle has checked and confirmed.\r\n    //\t\t\t\t\t        The customer can still revoke the policy.\r\n    // 02 = Revoked:\t  The customer has revoked the policy.\r\n    //\t\t\t\t\t        The premium minus cancellation fee is payed back to the\r\n    //\t\t\t\t\t        customer by the oracle.\r\n    // 03 = PaidOut:\t  The flight has ended with delay.\r\n    //\t\t\t\t\t        The oracle has checked and payed out.\r\n    // 04 = Expired:\t  The flight has endet with <15min. delay.\r\n    //\t\t\t\t\t        No payout.\r\n    // 05 = Declined:\t  The application was invalid.\r\n    //\t\t\t\t\t        The premium minus cancellation fee is payed back to the\r\n    //\t\t\t\t\t        customer by the oracle.\r\n    // 06 = SendFailed:\tDuring Revoke, Decline or Payout, sending ether failed\r\n    //\t\t\t\t\t        for unknown reasons.\r\n    //\t\t\t\t\t        The funds remain in the contracts RiskFund.\r\n\r\n\r\n    //                   00       01        02       03        04      05           06\r\n    enum policyState { Applied, Accepted, Revoked, PaidOut, Expired, Declined, SendFailed }\r\n\r\n    // oraclize callback types:\r\n    enum oraclizeState { ForUnderwriting, ForPayout }\r\n\r\n    //               00   01   02   03\r\n    enum Currency { ETH, EUR, USD, GBP }\r\n\r\n    // the policy structure: this structure keeps track of the individual parameters of a policy.\r\n    // typically customer address, premium and some status information.\r\n    struct Policy {\r\n        // 0 - the customer\r\n        address customer;\r\n\r\n        // 1 - premium\r\n        uint premium;\r\n        // risk specific parameters:\r\n        // 2 - pointer to the risk in the risks mapping\r\n        bytes32 riskId;\r\n        // custom payout pattern\r\n        // in future versions, customer will be able to tamper with this array.\r\n        // to keep things simple, we have decided to hard-code the array for all policies.\r\n        // uint8[5] pattern;\r\n        // 3 - probability weight. this is the central parameter\r\n        uint weight;\r\n        // 4 - calculated Payout\r\n        uint calculatedPayout;\r\n        // 5 - actual Payout\r\n        uint actualPayout;\r\n\r\n        // status fields:\r\n        // 6 - the state of the policy\r\n        policyState state;\r\n        // 7 - time of last state change\r\n        uint stateTime;\r\n        // 8 - state change message/reason\r\n        bytes32 stateMessage;\r\n        // 9 - TLSNotary Proof\r\n        bytes proof;\r\n        // 10 - Currency\r\n        Currency currency;\r\n        // 10 - External customer id\r\n        bytes32 customerExternalId;\r\n    }\r\n\r\n    // the risk structure; this structure keeps track of the risk-\r\n    // specific parameters.\r\n    // several policies can share the same risk structure (typically\r\n    // some people flying with the same plane)\r\n    struct Risk {\r\n        // 0 - Airline Code + FlightNumber\r\n        bytes32 carrierFlightNumber;\r\n        // 1 - scheduled departure and arrival time in the format /dep/YYYY/MM/DD\r\n        bytes32 departureYearMonthDay;\r\n        // 2 - the inital arrival time\r\n        uint arrivalTime;\r\n        // 3 - the final delay in minutes\r\n        uint delayInMinutes;\r\n        // 4 - the determined delay category (0-5)\r\n        uint8 delay;\r\n        // 5 - we limit the cumulated weighted premium to avoid cluster risks\r\n        uint cumulatedWeightedPremium;\r\n        // 6 - max cumulated Payout for this risk\r\n        uint premiumMultiplier;\r\n    }\r\n\r\n    // the oraclize callback structure: we use several oraclize calls.\r\n    // all oraclize calls will result in a common callback to __callback(...).\r\n    // to keep track of the different querys we have to introduce this struct.\r\n    struct OraclizeCallback {\r\n        // for which policy have we called?\r\n        uint policyId;\r\n        // for which purpose did we call? {ForUnderwrite | ForPayout}\r\n        oraclizeState oState;\r\n        // time\r\n        uint oraclizeTime;\r\n    }\r\n\r\n    struct Customer {\r\n        bytes32 customerExternalId;\r\n        bool identityConfirmed;\r\n    }\r\n}\r\n\r\n// File: contracts/FlightDelayControlledContract.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description Controlled contract Interface\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\n\r\ncontract FlightDelayControlledContract is FlightDelayDatabaseModel {\r\n\r\n    address public controller;\r\n    FlightDelayControllerInterface FD_CI;\r\n\r\n    modifier onlyController() {\r\n        require(msg.sender == controller);\r\n        _;\r\n    }\r\n\r\n    function setController(address _controller) internal returns (bool _result) {\r\n        controller = _controller;\r\n        FD_CI = FlightDelayControllerInterface(_controller);\r\n        _result = true;\r\n    }\r\n\r\n    function destruct() public onlyController {\r\n        selfdestruct(controller);\r\n    }\r\n\r\n    function setContracts() public onlyController {}\r\n\r\n    function getContract(bytes32 _id) internal returns (address _addr) {\r\n        _addr = FD_CI.getContract(_id);\r\n    }\r\n}\r\n\r\n// File: contracts/FlightDelayDatabaseInterface.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description Database contract interface\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock, Stephan Karpischek\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\ncontract FlightDelayDatabaseInterface is FlightDelayDatabaseModel {\r\n\r\n    uint public MIN_DEPARTURE_LIM;\r\n\r\n    uint public MAX_DEPARTURE_LIM;\r\n\r\n    bytes32[] public validOrigins;\r\n\r\n    bytes32[] public validDestinations;\r\n\r\n    function countOrigins() public constant returns (uint256 _length);\r\n\r\n    function getOriginByIndex(uint256 _i) public constant returns (bytes32 _origin);\r\n\r\n    function countDestinations() public constant returns (uint256 _length);\r\n\r\n    function getDestinationByIndex(uint256 _i) public constant returns (bytes32 _destination);\r\n\r\n    function setAccessControl(address _contract, address _caller, uint8 _perm) public;\r\n\r\n    function setAccessControl(\r\n        address _contract,\r\n        address _caller,\r\n        uint8 _perm,\r\n        bool _access\r\n    ) public;\r\n\r\n    function getAccessControl(address _contract, address _caller, uint8 _perm) public returns (bool _allowed) ;\r\n\r\n    function setLedger(uint8 _index, int _value) public;\r\n\r\n    function getLedger(uint8 _index) public returns (int _value) ;\r\n\r\n    function getCustomerPremium(uint _policyId) public returns (address _customer, uint _premium) ;\r\n\r\n    function getPolicyData(uint _policyId) public returns (address _customer, uint _premium, uint _weight) ;\r\n\r\n    function getPolicyState(uint _policyId) public returns (policyState _state) ;\r\n\r\n    function getRiskId(uint _policyId) public returns (bytes32 _riskId);\r\n\r\n    function createPolicy(address _customer, uint _premium, Currency _currency, bytes32 _customerExternalId, bytes32 _riskId) public returns (uint _policyId) ;\r\n\r\n    function setState(\r\n        uint _policyId,\r\n        policyState _state,\r\n        uint _stateTime,\r\n        bytes32 _stateMessage\r\n    ) public;\r\n\r\n    function setWeight(uint _policyId, uint _weight, bytes _proof) public;\r\n\r\n    function setPayouts(uint _policyId, uint _calculatedPayout, uint _actualPayout) public;\r\n\r\n    function setDelay(uint _policyId, uint8 _delay, uint _delayInMinutes) public;\r\n\r\n    function getRiskParameters(bytes32 _riskId)\r\n        public returns (bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime) ;\r\n\r\n    function getPremiumFactors(bytes32 _riskId)\r\n        public returns (uint _cumulatedWeightedPremium, uint _premiumMultiplier);\r\n\r\n    function createUpdateRisk(bytes32 _carrierFlightNumber, bytes32 _departureYearMonthDay, uint _arrivalTime)\r\n        public returns (bytes32 _riskId);\r\n\r\n    function setPremiumFactors(bytes32 _riskId, uint _cumulatedWeightedPremium, uint _premiumMultiplier) public;\r\n\r\n    function getOraclizeCallback(bytes32 _queryId)\r\n        public returns (uint _policyId, uint _oraclizeTime) ;\r\n\r\n    function getOraclizePolicyId(bytes32 _queryId)\r\n        public returns (uint _policyId) ;\r\n\r\n    function createOraclizeCallback(\r\n        bytes32 _queryId,\r\n        uint _policyId,\r\n        oraclizeState _oraclizeState,\r\n        uint _oraclizeTime\r\n    ) public;\r\n\r\n    function checkTime(bytes32 _queryId, bytes32 _riskId, uint _offset)\r\n        public returns (bool _result) ;\r\n}\r\n\r\n// File: contracts/FlightDelayLedgerInterface.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description\tLedger contract interface\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock, Stephan Karpischek\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\ncontract FlightDelayLedgerInterface is FlightDelayDatabaseModel {\r\n\r\n    function receiveFunds(Acc _to) public payable;\r\n\r\n    function sendFunds(address _recipient, Acc _from, uint _amount) public returns (bool _success);\r\n\r\n    function bookkeeping(Acc _from, Acc _to, uint amount) public;\r\n}\r\n\r\n// File: contracts/FlightDelayLedger.sol\r\n\r\n/**\r\n * FlightDelay with Oraclized Underwriting and Payout\r\n *\r\n * @description\tLedger contract\r\n * @copyright (c) 2017 etherisc GmbH\r\n * @author Christoph Mussenbrock\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract FlightDelayLedger is FlightDelayControlledContract, FlightDelayLedgerInterface, FlightDelayConstants {\r\n\r\n    FlightDelayDatabaseInterface FD_DB;\r\n    FlightDelayAccessControllerInterface FD_AC;\r\n\r\n    function FlightDelayLedger(address _controller) public {\r\n        setController(_controller);\r\n    }\r\n\r\n    function setContracts() public onlyController {\r\n        FD_AC = FlightDelayAccessControllerInterface(getContract(\"FD.AccessController\"));\r\n        FD_DB = FlightDelayDatabaseInterface(getContract(\"FD.Database\"));\r\n\r\n        FD_AC.setPermissionById(101, \"FD.NewPolicy\");\r\n        FD_AC.setPermissionById(101, \"FD.Controller\"); // todo: check!\r\n\r\n        FD_AC.setPermissionById(102, \"FD.Payout\");\r\n        FD_AC.setPermissionById(102, \"FD.NewPolicy\");\r\n        FD_AC.setPermissionById(102, \"FD.Controller\"); // todo: check!\r\n        FD_AC.setPermissionById(102, \"FD.Underwrite\");\r\n        FD_AC.setPermissionById(102, \"FD.Owner\");\r\n\r\n        FD_AC.setPermissionById(103, \"FD.Funder\");\r\n        FD_AC.setPermissionById(103, \"FD.Underwrite\");\r\n        FD_AC.setPermissionById(103, \"FD.Payout\");\r\n        FD_AC.setPermissionById(103, \"FD.Ledger\");\r\n        FD_AC.setPermissionById(103, \"FD.NewPolicy\");\r\n        FD_AC.setPermissionById(103, \"FD.Controller\");\r\n        FD_AC.setPermissionById(103, \"FD.Owner\");\r\n\r\n        FD_AC.setPermissionById(104, \"FD.Funder\");\r\n    }\r\n\r\n    /*\r\n     * @dev Fund contract\r\n     */\r\n    function () public payable {\r\n        require(FD_AC.checkPermission(104, msg.sender));\r\n\r\n        bookkeeping(Acc.Balance, Acc.RiskFund, msg.value);\r\n    }\r\n\r\n    function withdraw(uint256 _amount) {\r\n        require(FD_AC.checkPermission(104, msg.sender));\r\n        require(this.balance >= _amount);\r\n\r\n        bookkeeping(Acc.RiskFund, Acc.Balance, _amount);\r\n\r\n        getContract(\"FD.Funder\").transfer(_amount);\r\n    }\r\n\r\n    function receiveFunds(Acc _to) public payable {\r\n        require(FD_AC.checkPermission(101, msg.sender));\r\n\r\n        LogReceiveFunds(msg.sender, uint8(_to), msg.value);\r\n\r\n        bookkeeping(Acc.Balance, _to, msg.value);\r\n    }\r\n\r\n    function sendFunds(address _recipient, Acc _from, uint _amount) public returns (bool _success) {\r\n        require(FD_AC.checkPermission(102, msg.sender));\r\n\r\n        if (this.balance < _amount) {\r\n            return false; // unsufficient funds\r\n        }\r\n\r\n        LogSendFunds(_recipient, uint8(_from), _amount);\r\n\r\n        bookkeeping(_from, Acc.Balance, _amount); // cash out payout\r\n\r\n        if (!_recipient.send(_amount)) {\r\n            bookkeeping(Acc.Balance, _from, _amount);\r\n            _success = false;\r\n        } else {\r\n            _success = true;\r\n        }\r\n    }\r\n\r\n    // invariant: acc_Premium + acc_RiskFund + acc_Payout + acc_Balance + acc_Reward + acc_OraclizeCosts == 0\r\n\r\n    function bookkeeping(Acc _from, Acc _to, uint256 _amount) public {\r\n        require(FD_AC.checkPermission(103, msg.sender));\r\n\r\n        // check against type cast overflow\r\n        assert(int256(_amount) > 0);\r\n\r\n        // overflow check is done in FD_DB\r\n        FD_DB.setLedger(uint8(_from), -int(_amount));\r\n        FD_DB.setLedger(uint8(_to), int(_amount));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"uint8\"}],\"name\":\"receiveFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"uint8\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendFunds\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PATCH_VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint8\"},{\"name\":\"_to\",\"type\":\"uint8\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bookkeeping\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINOR_VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAJOR_VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"strCarrierFlightNumber\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethPremium\",\"type\":\"uint256\"}],\"name\":\"LogPolicyApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_statistics0\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_statistics1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_statistics2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_statistics3\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_statistics4\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_statistics5\",\"type\":\"uint256\"}],\"name\":\"LogPolicyAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"LogPolicyPaidOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"}],\"name\":\"LogPolicyExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strReason\",\"type\":\"bytes32\"}],\"name\":\"LogPolicyDeclined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strReason\",\"type\":\"bytes32\"}],\"name\":\"LogPolicyManualPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_from\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"LogSendFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"LogReceiveFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strReason\",\"type\":\"bytes32\"}],\"name\":\"LogSendFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hexQueryId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_oraclizeUrl\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_oraclizeTime\",\"type\":\"uint256\"}],\"name\":\"LogOraclizeCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hexQueryId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"hexProof\",\"type\":\"bytes\"}],\"name\":\"LogOraclizeCallback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_policyState\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_stateTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_stateMessage\",\"type\":\"bytes32\"}],\"name\":\"LogSetState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_policyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_externalId\",\"type\":\"bytes32\"}],\"name\":\"LogExternal\",\"type\":\"event\"}]","ContractName":"FlightDelayLedger","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000091eae0f4e0900a77ee24606567f6f32e8afa3c80","Library":"","SwarmSource":"bzzr://34844106205b3e1a255c4b4881fef41e86ceaf9f6f1963278554da6189208de2"}]}