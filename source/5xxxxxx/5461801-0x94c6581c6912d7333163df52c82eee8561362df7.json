{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\nlibrary SafeMath { //standard library for uint\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0 || b == 0){\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  function pow(uint256 a, uint256 b) internal pure returns (uint256){ //power function\r\n    if (b == 0){\r\n      return 1;\r\n    }\r\n    uint256 c = a**b;\r\n    assert (c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract HeliosToken { //ERC - 20 token contract\r\n  using SafeMath for uint;\r\n\r\n  // Triggered when tokens are transferred.\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n\r\n  string public constant symbol = \"HLC\";\r\n  string public constant name = \"Helios\";\r\n\r\n  uint8 public constant decimals = 2;\r\n  uint256 _totalSupply = uint(5000000).mul(uint(10).pow(decimals));\r\n\r\n  function HeliosToken () public {\r\n    balances[address(this)] = _totalSupply;\r\n  }\r\n  \r\n  mapping(address => uint256) balances;\r\n\r\n  // Owner of account approves the transfer of an amount to another account\r\n  mapping(address => mapping (address => uint256)) allowed;\r\n\r\n  function totalSupply() public view returns (uint256) { //standart ERC-20 function\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address _address) public view returns (uint256 balance) {//standart ERC-20 function\r\n    return balances[_address];\r\n  }\r\n\r\n  //standart ERC-20 function\r\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n    require(address(this) != _to && _to != address(0));\r\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Transfer(msg.sender,_to,_amount);\r\n    return true;\r\n  }\r\n  \r\n  address public crowdsaleContract;\r\n\r\n  //connect to crowdsaleContract, can be use once\r\n  function setCrowdsaleContract (address _address) public{\r\n    require(crowdsaleContract == address(0));\r\n    crowdsaleContract = _address;\r\n  }\r\n\r\n  uint public crowdsaleTokens = uint(4126213).mul(uint(10).pow(decimals)); //_totalSupply - distributing\r\n\r\n  function sendCrowdsaleTokens (address _address, uint _value) public {\r\n    require (msg.sender == crowdsaleContract);\r\n    crowdsaleTokens = crowdsaleTokens.sub(_value);\r\n    balances[address(this)] = balances[address(this)].sub(_value);\r\n    balances[_address] = balances[_address].add(_value);\r\n    emit Transfer(address(this),_address,_value); \r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _amount) public returns(bool success){\r\n    require(address(this) != _to && _to != address(0));\r\n    balances[_from] = balances[_from].sub(_amount);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Transfer(_from,_to,_amount);\r\n    return true;\r\n  }\r\n\r\n  //standart ERC-20 function\r\n  function approve(address _spender, uint256 _amount)public returns (bool success) { \r\n    allowed[msg.sender][_spender] = _amount;\r\n    emit Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  //standart ERC-20 function\r\n  function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  address public teamAddress = 0x1367eC0f6f5DEFda7B0f1b7AD234900E23Ee62CF;\r\n  uint public teamDistribute = uint(500000).mul(uint(10).pow(decimals));\r\n  address public reserveAddress = 0xD598350D4D55f72dAb1286Ed0A3a3b7F1A7A54Ce;\r\n  uint public reserveDistribute = uint(250000).mul(uint(10).pow(decimals));\r\n  address public bountyAddress = 0xcBfA29FBe59C83A1130b4957bD41847a2837782E;\r\n\r\n  function endIco() public {  \r\n    require (msg.sender == crowdsaleContract);\r\n    require (balances[address(this)] != 0);\r\n    \r\n    uint tokensSold = _totalSupply.sub(crowdsaleTokens);\r\n\r\n    balances[teamAddress] = balances[teamAddress].add(teamDistribute);\r\n    balances[reserveAddress] = balances[reserveAddress].add(reserveDistribute);\r\n    balances[bountyAddress] = balances[bountyAddress].add(tokensSold*3/100);\r\n\r\n    emit Transfer(address(this), teamAddress, teamDistribute);\r\n    emit Transfer(address(this), reserveAddress, reserveDistribute);\r\n    emit Transfer(address(this), bountyAddress, tokensSold*3/100);\r\n\r\n    uint buffer = tokensSold*3/100 + teamDistribute + reserveDistribute;\r\n\r\n    emit Transfer(address(this), 0, balances[address(this)].sub(buffer));\r\n    balances[address(this)] = 0;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCrowdsaleContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveDistribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendCrowdsaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamDistribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"HeliosToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://313269de8a0ddc9c7bad636b30b4ec1e6d70f43753ac4371c040c1c49ebd9c59"}]}