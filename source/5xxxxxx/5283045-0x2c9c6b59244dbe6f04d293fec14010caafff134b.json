{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\ncontract ibaVoter {\r\n    \r\n    struct Proposal{\r\n        bytes32 name;\r\n    }\r\n    \r\n    struct Ballot{\r\n        bytes32 name;\r\n        address chainperson;\r\n        bool blind;\r\n        bool finished;\r\n    }\r\n    \r\n    struct votedData{\r\n        uint256 proposal;\r\n        bool isVal;\r\n    }\r\n    \r\n    event Vote(\r\n        address votedPerson,\r\n        uint256 proposalIndex\r\n        );\r\n        \r\n    event Finish(\r\n        bool finished\r\n        );\r\n\r\n    mapping (address => mapping(uint256 => mapping(address => votedData))) votedDatas;\r\n    mapping (address => mapping(uint256 => address[])) voted;\r\n    mapping (address => mapping(uint256 => mapping(uint256 => uint256))) voteCount;\r\n    mapping (address => Ballot[]) public ballots;   \r\n    mapping (address => mapping(uint256 => Proposal[])) public proposals;\r\n    \r\n    function getBallotsNum(address chainperson) public constant returns (uint count) {\r\n        return ballots[chainperson].length; \r\n    }\r\n    function getProposalsNum(address chainperson, uint ballot) public constant returns (uint count) {\r\n        return proposals[chainperson][ballot].length;\r\n    }\r\n    \r\n    function getBallotIndex(address chainperson, bytes32 ballotName) public constant returns (uint index){\r\n        for (uint i=0;i<ballots[chainperson].length;i++){\r\n            if (ballots[chainperson][i].name == ballotName){\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    function isVoted(address chainperson, uint ballot) public constant returns (bool result){\r\n        for (uint8 i=0;i<voted[chainperson][ballot].length;i++){\r\n            if (voted[chainperson][ballot][i] == msg.sender){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function startNewBallot(bytes32 ballotName, bool blindParam, bytes32[] proposalNames) external returns (bool success){\r\n        for (uint8 y=0;y<ballots[msg.sender].length;y++){\r\n            if (ballots[msg.sender][i].name == ballotName){\r\n                revert();\r\n            }\r\n        }\r\n        ballots[msg.sender].push(Ballot({\r\n            name: ballotName, \r\n            chainperson: msg.sender, \r\n            blind: blindParam,\r\n            finished: false\r\n        }));\r\n        \r\n        uint ballotsNum = ballots[msg.sender].length;\r\n        for (uint8 i=0;i<proposalNames.length;i++){\r\n            proposals[msg.sender][ballotsNum-1].push(Proposal({name:proposalNames[i]}));\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function getVoted(address chainperson, uint256 ballot) public constant returns (address[]){\r\n        if (ballots[chainperson][ballot].blind == true){\r\n            revert();\r\n        }\r\n        return voted[chainperson][ballot];\r\n    }\r\n    \r\n    function getVotesCount(address chainperson, uint256 ballot, bytes32 proposalName) public constant returns (uint256 count){\r\n        if (ballots[chainperson][ballot].blind == true){\r\n            revert();\r\n        }\r\n        \r\n        for (uint8 i=0;i<proposals[chainperson][ballot].length;i++){\r\n            if (proposals[chainperson][ballot][i].name == proposalName){\r\n                return voteCount[chainperson][ballot][i];\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getVotedData(address chainperson, uint256 ballot, address voter) public constant returns (uint256 proposalNum){\r\n        if (ballots[chainperson][ballot].blind == true){\r\n            revert();\r\n        }\r\n        \r\n        if (votedDatas[chainperson][ballot][voter].isVal == true){\r\n            return votedDatas[chainperson][ballot][voter].proposal;\r\n        }\r\n    }\r\n    \r\n    function vote(address chainperson, uint256 ballot, uint256 proposalNum) external returns (bool success){\r\n        \r\n        if (ballots[chainperson][ballot].finished == true){\r\n            revert();\r\n        }\r\n        for (uint8 i = 0;i<voted[chainperson][ballot].length;i++){\r\n            if (votedDatas[chainperson][ballot][msg.sender].isVal == true){\r\n                revert();\r\n            }\r\n        }\r\n        voted[chainperson][ballot].push(msg.sender);\r\n        voteCount[chainperson][ballot][proposalNum]++;\r\n        votedDatas[chainperson][ballot][msg.sender] = votedData({proposal: proposalNum, isVal: true});\r\n        Vote(msg.sender, proposalNum);\r\n        return true;\r\n    }\r\n    \r\n    function getProposalIndex(address chainperson, uint256 ballot, bytes32 proposalName) public constant returns (uint index){\r\n        for (uint8 i=0;i<proposals[chainperson][ballot].length;i++){\r\n            if (proposals[chainperson][ballot][i].name == proposalName){\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    function finishBallot(bytes32 ballot) external returns (bool success){\r\n        for (uint8 i=0;i<ballots[msg.sender].length;i++){\r\n            if (ballots[msg.sender][i].name == ballot) {\r\n                if (ballots[msg.sender][i].chainperson == msg.sender){\r\n                    ballots[msg.sender][i].finished = true;\r\n                    Finish(true);\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getWinner(address chainperson, uint ballotIndex) public constant returns (bytes32 winnerName){\r\n            if (ballots[chainperson][ballotIndex].finished == false){\r\n                revert();\r\n            }\r\n            uint256 maxVotes;\r\n            bytes32 winner;\r\n            for (uint8 i=0;i<proposals[chainperson][ballotIndex].length;i++){\r\n                if (voteCount[chainperson][ballotIndex][i]>maxVotes){\r\n                    maxVotes = voteCount[chainperson][ballotIndex][i];\r\n                    winner = proposals[chainperson][ballotIndex][i].name;\r\n                }\r\n            }\r\n            return winner;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"chainperson\",\"type\":\"address\"},{\"name\":\"ballot\",\"type\":\"uint256\"}],\"name\":\"getVoted\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"chainperson\",\"type\":\"address\"},{\"name\":\"ballot\",\"type\":\"uint256\"},{\"name\":\"proposalNum\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ballots\",\"outputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"chainperson\",\"type\":\"address\"},{\"name\":\"blind\",\"type\":\"bool\"},{\"name\":\"finished\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ballot\",\"type\":\"bytes32\"}],\"name\":\"finishBallot\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"chainperson\",\"type\":\"address\"},{\"name\":\"ballot\",\"type\":\"uint256\"}],\"name\":\"getProposalsNum\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"chainperson\",\"type\":\"address\"},{\"name\":\"ballot\",\"type\":\"uint256\"}],\"name\":\"isVoted\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"chainperson\",\"type\":\"address\"},{\"name\":\"ballot\",\"type\":\"uint256\"},{\"name\":\"proposalName\",\"type\":\"bytes32\"}],\"name\":\"getProposalIndex\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"chainperson\",\"type\":\"address\"},{\"name\":\"ballotName\",\"type\":\"bytes32\"}],\"name\":\"getBallotIndex\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"chainperson\",\"type\":\"address\"},{\"name\":\"ballotIndex\",\"type\":\"uint256\"}],\"name\":\"getWinner\",\"outputs\":[{\"name\":\"winnerName\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"chainperson\",\"type\":\"address\"},{\"name\":\"ballot\",\"type\":\"uint256\"},{\"name\":\"proposalName\",\"type\":\"bytes32\"}],\"name\":\"getVotesCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"chainperson\",\"type\":\"address\"}],\"name\":\"getBallotsNum\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ballotName\",\"type\":\"bytes32\"},{\"name\":\"blindParam\",\"type\":\"bool\"},{\"name\":\"proposalNames\",\"type\":\"bytes32[]\"}],\"name\":\"startNewBallot\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"chainperson\",\"type\":\"address\"},{\"name\":\"ballot\",\"type\":\"uint256\"},{\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getVotedData\",\"outputs\":[{\"name\":\"proposalNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"votedPerson\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proposalIndex\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"finished\",\"type\":\"bool\"}],\"name\":\"Finish\",\"type\":\"event\"}]","ContractName":"ibaVoter","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a2ce8201ecc8f933485dc969253097bca9ff552a531d33f7d89f86e2438fa8b4"}]}