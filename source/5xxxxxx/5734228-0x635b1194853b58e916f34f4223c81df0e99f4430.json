{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n// copyright contact@emontalliance.com\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = false;\r\n\r\n    function BasicAccessControl() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(msg.sender == owner || moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n\r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}\r\n\r\n\r\ncontract EmontFrenzy is BasicAccessControl {\r\n    uint constant public HIGH = 20;\r\n    uint constant public BASE_POS = 510;\r\n    uint constant public ONE_EMONT = 10 ** 8;\r\n\r\n    struct Fish {\r\n        address player;\r\n        uint weight;\r\n        bool active; // location != 0\r\n    }\r\n\r\n    // private\r\n    uint private seed;\r\n\r\n     // address\r\n    address public tokenContract;\r\n    \r\n    // variable\r\n    uint public addFee = 0.01 ether;\r\n    uint public addWeight = 5 * 10 ** 8; // emont\r\n    uint public moveCharge = 5; // percentage\r\n    uint public cashOutRate = 100; // to EMONT rate\r\n    uint public cashInRate = 50; // from EMONT to fish weight \r\n    uint public width = 50;\r\n    uint public minJump = 2 * 2;\r\n    uint public maxPos = HIGH * width; // valid pos (0 -> maxPos - 1)\r\n    uint public minCashout = 20 * 10 ** 8;\r\n    uint public minEatable = 1 * 10 ** 8;\r\n    \r\n    mapping(uint => Fish) fishMap;\r\n    mapping(uint => uint) ocean; // pos => fish id\r\n    mapping(uint => uint) bonus; // pos => emont amount\r\n    mapping(address => uint) players;\r\n    \r\n    mapping(uint => uint) maxJumps; // weight in EMONT => square length\r\n    \r\n    uint public totalFish = 0;\r\n    \r\n    // event\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n\r\n    event EventCashout(address indexed player, uint fishId, uint weight);\r\n    event EventBonus(uint pos, uint value);\r\n    event EventMove(address indexed player, uint fishId, uint fromPos, uint toPos, uint weight);\r\n    event EventEat(address indexed player, address indexed defender, uint playerFishId, uint defenderFishId, uint fromPos, uint toPos, uint playerWeight);\r\n    event EventFight(address indexed player, address indexed defender, uint playerFishId, uint defenderFishId, uint fromPos, uint toPos, uint playerWeight);\r\n    event EventSuicide(address indexed player, address indexed defender, uint playerFishId, uint defenderFishId, uint fromPos, uint toPos, uint defenderWeight);\r\n    \r\n    \r\n    // modifier\r\n    modifier requireTokenContract {\r\n        require(tokenContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    function EmontFrenzy(address _tokenContract) public {\r\n        tokenContract = _tokenContract;\r\n        seed = getRandom(0);\r\n    }\r\n    \r\n    function setConfig(uint _addFee, uint _addWeight, uint _moveCharge, uint _cashOutRate, uint _cashInRate, uint _width) onlyModerators external {\r\n        addFee = _addFee;\r\n        addWeight = _addWeight;\r\n        moveCharge = _moveCharge;\r\n        cashOutRate = _cashOutRate;\r\n        cashInRate = _cashInRate;\r\n        width = _width;\r\n        maxPos = HIGH * width;\r\n    }\r\n    \r\n    function setExtraConfig(uint _minCashout, uint _minEatable) onlyModerators external {\r\n        minCashout = _minCashout;\r\n        minEatable = _minEatable;\r\n    }\r\n    \r\n    // weight in emont, x*x\r\n    function updateMaxJump(uint _weight, uint _squareLength) onlyModerators external {\r\n        maxJumps[_weight] = _squareLength;\r\n    }\r\n    \r\n    function setDefaultMaxJump() onlyModerators external {\r\n        maxJumps[0] = 50 * 50;\r\n        maxJumps[1] = 30 * 30;\r\n        maxJumps[2] = 20 * 20;\r\n        maxJumps[3] = 15 * 15;\r\n        maxJumps[4] = 12 * 12;\r\n        maxJumps[5] = 9 * 9;\r\n        maxJumps[6] = 7 * 7;\r\n        maxJumps[7] = 7 * 7;\r\n        maxJumps[8] = 6 * 6;\r\n        maxJumps[9] = 6 * 6;\r\n        maxJumps[10] = 6 * 6;\r\n        maxJumps[11] = 5 * 5;\r\n        maxJumps[12] = 5 * 5;\r\n        maxJumps[13] = 5 * 5;\r\n        maxJumps[14] = 5 * 5;\r\n        maxJumps[15] = 4 * 4;\r\n        maxJumps[16] = 4 * 4;\r\n        maxJumps[17] = 4 * 4;\r\n        maxJumps[18] = 4 * 4;\r\n        maxJumps[19] = 4 * 4;\r\n        maxJumps[20] = 3 * 3;\r\n        maxJumps[21] = 3 * 3;\r\n        maxJumps[22] = 3 * 3;\r\n        maxJumps[23] = 3 * 3;\r\n        maxJumps[24] = 3 * 3;\r\n        maxJumps[25] = 3 * 3;\r\n    }\r\n    \r\n    function updateMinJump(uint _minJump) onlyModerators external {\r\n        minJump = _minJump;\r\n    }\r\n    \r\n    // moderators\r\n    \r\n    function withdrawEther(address _sendTo, uint _amount) onlyModerators external {\r\n        // no user money is kept in this contract, only trasaction fee\r\n        if (_amount > address(this).balance) {\r\n            revert();\r\n        }\r\n        _sendTo.transfer(_amount);\r\n    }\r\n    \r\n    function withdrawToken(address _sendTo, uint _amount) onlyModerators requireTokenContract external {\r\n        ERC20Interface token = ERC20Interface(tokenContract);\r\n        if (_amount > token.balanceOf(address(this))) {\r\n            revert();\r\n        }\r\n        token.transfer(_sendTo, _amount);\r\n    }\r\n    \r\n    function addBonus(uint _pos, uint _amount) onlyModerators external {\r\n        bonus[_pos] += _amount;\r\n        EventBonus(_pos, _amount);\r\n    }\r\n    \r\n    // for payment contract to call\r\n    function AddFishByToken(address _player, uint tokens) onlyModerators external {\r\n        uint weight = tokens * cashInRate / 100;\r\n        if (weight != addWeight) \r\n            revert();\r\n        \r\n         // max: one fish per address\r\n        if (fishMap[players[_player]].weight > 0)\r\n            revert();\r\n        \r\n        totalFish += 1;\r\n        Fish storage fish = fishMap[totalFish];\r\n        fish.player = _player;\r\n        fish.weight = addWeight;\r\n        fish.active = false;\r\n        players[_player] = totalFish;\r\n        \r\n        seed = getRandom(seed);\r\n        Transfer(address(0), _player, totalFish);\r\n    }\r\n    \r\n    // public functions\r\n    function getRandom(uint _seed) constant public returns(uint) {\r\n        return uint(keccak256(block.timestamp, block.difficulty)) ^ _seed;\r\n    }\r\n    \r\n    function AddFish() isActive payable external {\r\n        if (msg.value != addFee) revert();\r\n        \r\n        // max: one fish per address\r\n        if (fishMap[players[msg.sender]].weight > 0)\r\n            revert();\r\n        \r\n        totalFish += 1;\r\n        Fish storage fish = fishMap[totalFish];\r\n        fish.player = msg.sender;\r\n        fish.weight = addWeight;\r\n        fish.active = false;\r\n        players[msg.sender] = totalFish;\r\n        \r\n        seed = getRandom(seed);\r\n        Transfer(address(0), msg.sender, totalFish);\r\n    }\r\n    \r\n    function DeductABS(uint _a, uint _b) pure public returns(uint) {\r\n        if (_a > _b) \r\n            return (_a - _b);\r\n        return (_b - _a);\r\n    }\r\n    \r\n    function MoveFish(uint _fromPos, uint _toPos) isActive external {\r\n        // check valid _x, _y\r\n        if (_toPos >= maxPos && _fromPos != _toPos)\r\n            revert();\r\n        \r\n        uint fishId = players[msg.sender];\r\n        Fish storage fish = fishMap[fishId];\r\n        if (fish.weight == 0)\r\n            revert();\r\n        if (!fish.active && _fromPos != BASE_POS)\r\n            revert();\r\n        if (fish.active && ocean[_fromPos] != fishId)\r\n            revert();\r\n        \r\n        // check valid move\r\n        uint tempX = DeductABS(_fromPos / HIGH, _toPos / HIGH);\r\n        uint tempY = DeductABS(_fromPos % HIGH, _toPos % HIGH);\r\n        uint squareLength = maxJumps[fish.weight / ONE_EMONT];\r\n        if (squareLength == 0) squareLength = minJump;\r\n        \r\n        if (tempX * tempX + tempY * tempY > squareLength)\r\n            revert();\r\n        \r\n        // move \r\n        ocean[_fromPos] = 0;\r\n        // charge when swiming except from the base\r\n        if (_fromPos != BASE_POS) {\r\n            tempX = (moveCharge * fish.weight) / 100;\r\n            bonus[_fromPos] += tempX;\r\n            fish.weight -= tempX;\r\n        } else {\r\n            fish.active = true;\r\n        }\r\n\r\n        // go back to base\r\n        if (_toPos == BASE_POS) {\r\n            fish.active = false;\r\n            EventMove(msg.sender, fishId, _fromPos, _toPos, fish.weight);\r\n            return;\r\n        }\r\n\r\n        tempX = ocean[_toPos]; // target fish id\r\n        // no fish at that location\r\n        if (tempX == 0) {\r\n            if (bonus[_toPos] > 0) {\r\n                fish.weight += bonus[_toPos];\r\n                bonus[_toPos] = 0;\r\n            }\r\n            \r\n            // update location\r\n            EventMove(msg.sender, fishId, _fromPos, _toPos, fish.weight);\r\n            ocean[_toPos] = fishId;\r\n        } else {\r\n            // can not attack from the base\r\n            if (_fromPos == BASE_POS) revert();\r\n            \r\n            Fish storage targetFish = fishMap[tempX];\r\n            if (targetFish.weight + minEatable <= fish.weight) {\r\n                // eat the target fish\r\n                fish.weight += targetFish.weight;\r\n                targetFish.weight = 0;\r\n                \r\n                // update location\r\n                ocean[_toPos] = fishId;\r\n                \r\n                EventEat(msg.sender, targetFish.player, fishId, tempX, _fromPos, _toPos, fish.weight);\r\n                Transfer(targetFish.player, address(0), tempX);\r\n            } else if (targetFish.weight <= fish.weight) {\r\n                // fight and win\r\n                // bonus to others\r\n                seed = getRandom(seed);\r\n                tempY = seed % (maxPos - 1);\r\n                if (tempY == BASE_POS) tempY += 1;\r\n                bonus[tempY] = targetFish.weight * 2;\r\n                \r\n                EventBonus(tempY, targetFish.weight * 2);\r\n                \r\n                // fight \r\n                fish.weight -= targetFish.weight;\r\n                targetFish.weight = 0;\r\n                \r\n                // update location\r\n                if (fish.weight > 0) {\r\n                    ocean[_toPos] = fishId;\r\n                } else {\r\n                    ocean[_toPos] = 0;\r\n                    Transfer(msg.sender, address(0), fishId);\r\n                }\r\n                \r\n                EventFight(msg.sender, targetFish.player, fishId, tempX, _fromPos, _toPos, fish.weight);\r\n                Transfer(targetFish.player, address(0), tempX);\r\n            } else {\r\n                // bonus to others\r\n                seed = getRandom(seed);\r\n                tempY = seed % (maxPos - 1);\r\n                if (tempY == BASE_POS) tempY += 1;\r\n                bonus[tempY] = fish.weight * 2;\r\n                \r\n                EventBonus(tempY, fish.weight * 2);\r\n                \r\n                // suicide\r\n                targetFish.weight -= fish.weight;\r\n                fish.weight = 0;\r\n                \r\n                EventSuicide(msg.sender, targetFish.player, fishId, tempX, _fromPos, _toPos, targetFish.weight);\r\n                Transfer(msg.sender, address(0), fishId);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function CashOut() isActive external {\r\n        uint fishId = players[msg.sender];\r\n        Fish storage fish = fishMap[fishId];\r\n        \r\n        if (fish.weight < minCashout)\r\n            revert();\r\n        \r\n        if (fish.weight < addWeight) \r\n            revert();\r\n        \r\n        uint _amount = fish.weight - addWeight;\r\n        fish.weight = addWeight;\r\n        \r\n        ERC20Interface token = ERC20Interface(tokenContract);\r\n        if (_amount > token.balanceOf(address(this))) {\r\n            revert();\r\n        }\r\n        token.transfer(msg.sender, (_amount * cashOutRate) / 100);\r\n        EventCashout(msg.sender, fishId, fish.weight);\r\n    }\r\n    \r\n    // public get \r\n    function getFish(uint32 _fishId) constant public returns(address player, uint weight, bool active) {\r\n        Fish storage fish = fishMap[_fishId];\r\n        return (fish.player, fish.weight, fish.active);\r\n    }\r\n    \r\n    function getFishByAddress(address _player) constant public returns(uint fishId, address player, uint weight, bool active) {\r\n        fishId = players[_player];\r\n        Fish storage fish = fishMap[fishId];\r\n        player = fish.player;\r\n        weight =fish.weight;\r\n        active = fish.active;\r\n    }\r\n    \r\n    function getFishIdByAddress(address _player) constant public returns(uint fishId) {\r\n        return players[_player];\r\n    }\r\n    \r\n    function getFishIdByPos(uint _pos) constant public returns(uint fishId) {\r\n        return ocean[_pos];\r\n    }\r\n    \r\n    function getFishByPos(uint _pos) constant public returns(uint fishId, address player, uint weight) {\r\n        fishId = ocean[_pos];\r\n        Fish storage fish = fishMap[fishId];\r\n        return (fishId, fish.player, fish.weight);\r\n    }\r\n    \r\n    // cell has valid fish or bonus\r\n    function findTargetCell(uint _fromPos, uint _toPos) constant public returns(uint pos, uint fishId, address player, uint weight) {\r\n        for (uint index = _fromPos; index <= _toPos; index+=1) {\r\n            if (ocean[index] > 0) {\r\n                fishId = ocean[index];\r\n                Fish storage fish = fishMap[fishId];\r\n                return (index, fishId, fish.player, fish.weight);\r\n            }\r\n            if (bonus[index] > 0) {\r\n                return (index, 0, address(0), bonus[index]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getStats() constant public returns(uint countFish, uint countBonus) {\r\n        countFish = 0;\r\n        countBonus = 0;\r\n        for (uint index = 0; index < width * HIGH; index++) {\r\n            if (ocean[index] > 0) {\r\n                countFish += 1; \r\n            } else if (bonus[index] > 0) {\r\n                countBonus += 1;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getFishAtBase(uint _fishId) constant public returns(uint fishId, address player, uint weight) {\r\n        for (uint id = _fishId; id <= totalFish; id++) {\r\n            Fish storage fish = fishMap[id];\r\n            if (fish.weight > 0 && !fish.active) {\r\n                return (id, fish.player, fish.weight);\r\n            }\r\n        }\r\n        \r\n        return (0, address(0), 0);\r\n    }\r\n    \r\n    function getMaxJump(uint _weight) constant public returns(uint) {\r\n        return maxJumps[_weight];\r\n    }\r\n    \r\n    // some meta data\r\n    string public constant name = \"EmontFrenzy\";\r\n    string public constant symbol = \"EMONF\";\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalFish;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 _balance) {\r\n        if (fishMap[players[_owner]].weight > 0)\r\n            return 1;\r\n        return 0;\r\n    }\r\n    \r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner) {\r\n        Fish storage fish = fishMap[_tokenId];\r\n        if (fish.weight > 0)\r\n            return fish.player;\r\n        return address(0);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _tokenId) public{\r\n        require(_to != address(0));\r\n        \r\n        uint fishId = players[msg.sender];\r\n        Fish storage fish = fishMap[fishId];\r\n        if (fishId == 0 || fish.weight == 0 || fishId != _tokenId)\r\n            revert();\r\n        \r\n        if (balanceOf(_to) > 0)\r\n            revert();\r\n        \r\n        fish.player = _to;\r\n        players[msg.sender] = 0;\r\n        players[_to] = fishId;\r\n        \r\n        Transfer(msg.sender, _to, _tokenId);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxPos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addFee\",\"type\":\"uint256\"},{\"name\":\"_addWeight\",\"type\":\"uint256\"},{\"name\":\"_moveCharge\",\"type\":\"uint256\"},{\"name\":\"_cashOutRate\",\"type\":\"uint256\"},{\"name\":\"_cashInRate\",\"type\":\"uint256\"},{\"name\":\"_width\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minCashout\",\"type\":\"uint256\"},{\"name\":\"_minEatable\",\"type\":\"uint256\"}],\"name\":\"setExtraConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCashout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"getMaxJump\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_fishId\",\"type\":\"uint32\"}],\"name\":\"getFish\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"weight\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cashOutRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_EMONT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"AddFishByToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_POS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFish\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cashInRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minEatable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromPos\",\"type\":\"uint256\"},{\"name\":\"_toPos\",\"type\":\"uint256\"}],\"name\":\"MoveFish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_fromPos\",\"type\":\"uint256\"},{\"name\":\"_toPos\",\"type\":\"uint256\"}],\"name\":\"findTargetCell\",\"outputs\":[{\"name\":\"pos\",\"type\":\"uint256\"},{\"name\":\"fishId\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"weight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"AddFish\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weight\",\"type\":\"uint256\"},{\"name\":\"_squareLength\",\"type\":\"uint256\"}],\"name\":\"updateMaxJump\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getFishIdByAddress\",\"outputs\":[{\"name\":\"fishId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"width\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CashOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pos\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_fishId\",\"type\":\"uint256\"}],\"name\":\"getFishAtBase\",\"outputs\":[{\"name\":\"fishId\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"weight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HIGH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pos\",\"type\":\"uint256\"}],\"name\":\"getFishIdByPos\",\"outputs\":[{\"name\":\"fishId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moveCharge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"name\":\"countFish\",\"type\":\"uint256\"},{\"name\":\"countBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"getRandom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minJump\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minJump\",\"type\":\"uint256\"}],\"name\":\"updateMinJump\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"uint256\"},{\"name\":\"_b\",\"type\":\"uint256\"}],\"name\":\"DeductABS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pos\",\"type\":\"uint256\"}],\"name\":\"getFishByPos\",\"outputs\":[{\"name\":\"fishId\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"weight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setDefaultMaxJump\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getFishByAddress\",\"outputs\":[{\"name\":\"fishId\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"weight\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fishId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"EventCashout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pos\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EventBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fishId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fromPos\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"toPos\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"EventMove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"defender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerFishId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"defenderFishId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fromPos\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"toPos\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerWeight\",\"type\":\"uint256\"}],\"name\":\"EventEat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"defender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerFishId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"defenderFishId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fromPos\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"toPos\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerWeight\",\"type\":\"uint256\"}],\"name\":\"EventFight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"defender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerFishId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"defenderFishId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fromPos\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"toPos\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"defenderWeight\",\"type\":\"uint256\"}],\"name\":\"EventSuicide\",\"type\":\"event\"}]","ContractName":"EmontFrenzy","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000095daaab98046846bf4b2853e23cba236fa394a31","Library":"","SwarmSource":"bzzr://e0f3c2171323990080f46fe13657bb247c560f925e117e248bd9df8b24e9e4ee"}]}