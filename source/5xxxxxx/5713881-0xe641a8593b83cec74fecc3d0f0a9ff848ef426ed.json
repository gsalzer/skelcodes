{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title QWoodDAOToken\r\n * @dev Token which use as share in QWoodDAO.\r\n */\r\ncontract QWoodDAOToken is ERC20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  string public constant name = \"QWoodDAO\";\r\n  string public constant symbol = \"QOD\";\r\n  uint8 public constant decimals = 18;\r\n  uint256 public constant INITIAL_SUPPLY = 9000000 * (10 ** uint256(decimals));\r\n\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  address public dao;\r\n\r\n  uint public periodOne;\r\n  uint public periodTwo;\r\n  uint public periodThree;\r\n\r\n  event NewDAOContract(address indexed previousDAOContract, address indexed newDAOContract);\r\n\r\n  /**\r\n   * @dev Constructor.\r\n   */\r\n  function QWoodDAOToken(\r\n    uint _periodOne,\r\n    uint _periodTwo,\r\n    uint _periodThree\r\n  ) public {\r\n    owner = msg.sender;\r\n\r\n    periodOne = _periodOne;\r\n    periodTwo = _periodTwo;\r\n    periodThree = _periodThree;\r\n\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n    balances[owner] = INITIAL_SUPPLY;\r\n    Transfer(0x0, owner, INITIAL_SUPPLY);\r\n  }\r\n\r\n\r\n  // PUBLIC\r\n\r\n  // ERC20\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _balance = _balanceOf(msg.sender);\r\n    require(_value <= _balance);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return _balanceOf(_owner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _balance = _balanceOf(_from);\r\n    require(_value <= _balance);\r\n\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  // ERC20 Additional\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  // ERC827\r\n  /**\r\n     * @dev Addition to ERC20 token methods. It allows to\r\n     * @dev approve the transfer of value and execute a call with the sent data.\r\n     *\r\n     * @dev Beware that changing an allowance with this method brings the risk that\r\n     * @dev someone may use both the old and the new allowance by unfortunate\r\n     * @dev transaction ordering. One possible solution to mitigate this race condition\r\n     * @dev is to first reduce the spender's allowance to 0 and set the desired value\r\n     * @dev afterwards:\r\n     * @dev https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * @param _spender The address that will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     * @param _data ABI-encoded contract call to call `_to` address.\r\n     *\r\n     * @return true if the call function was executed successfully\r\n     */\r\n  function approveAndCall(\r\n    address _spender,\r\n    uint256 _value,\r\n    bytes _data\r\n  )\r\n  public\r\n  payable\r\n  returns (bool)\r\n  {\r\n    require(_spender != address(this));\r\n\r\n    approve(_spender, _value);\r\n\r\n    // solium-disable-next-line security/no-call-value\r\n    require(_spender.call.value(msg.value)(_data));\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\r\n   * @dev address and execute a call with the sent data on the same transaction\r\n   *\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   * @param _data ABI-encoded contract call to call `_to` address.\r\n   *\r\n   * @return true if the call function was executed successfully\r\n   */\r\n  function transferAndCall(\r\n    address _to,\r\n    uint256 _value,\r\n    bytes _data\r\n  )\r\n  public\r\n  payable\r\n  returns (bool)\r\n  {\r\n    require(_to != address(this));\r\n\r\n    transfer(_to, _value);\r\n\r\n    // solium-disable-next-line security/no-call-value\r\n    require(_to.call.value(msg.value)(_data));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Addition to ERC20 token methods. Transfer tokens from one address to\r\n   * @dev another and make a contract call on the same transaction\r\n   *\r\n   * @param _from The address which you want to send tokens from\r\n   * @param _to The address which you want to transfer to\r\n   * @param _value The amout of tokens to be transferred\r\n   * @param _data ABI-encoded contract call to call `_to` address.\r\n   *\r\n   * @return true if the call function was executed successfully\r\n   */\r\n  function transferFromAndCall(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    bytes _data\r\n  )\r\n  public payable returns (bool)\r\n  {\r\n    require(_to != address(this));\r\n\r\n    transferFrom(_from, _to, _value);\r\n\r\n    // solium-disable-next-line security/no-call-value\r\n    require(_to.call.value(msg.value)(_data));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Addition to StandardToken methods. Increase the amount of tokens that\r\n   * @dev an owner allowed to a spender and execute a call with the sent data.\r\n   *\r\n   * @dev approve should be called when allowed[_spender] == 0. To increment\r\n   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * @dev the first transaction is mined)\r\n   * @dev From MonolithDAO Token.sol\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   * @param _data ABI-encoded contract call to call `_spender` address.\r\n   */\r\n  function increaseApprovalAndCall(\r\n    address _spender,\r\n    uint _addedValue,\r\n    bytes _data\r\n  )\r\n  public\r\n  payable\r\n  returns (bool)\r\n  {\r\n    require(_spender != address(this));\r\n\r\n    increaseApproval(_spender, _addedValue);\r\n\r\n    // solium-disable-next-line security/no-call-value\r\n    require(_spender.call.value(msg.value)(_data));\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\r\n   * @dev an owner allowed to a spender and execute a call with the sent data.\r\n   *\r\n   * @dev approve should be called when allowed[_spender] == 0. To decrement\r\n   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * @dev the first transaction is mined)\r\n   * @dev From MonolithDAO Token.sol\r\n   *\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   * @param _data ABI-encoded contract call to call `_spender` address.\r\n   */\r\n  function decreaseApprovalAndCall(\r\n    address _spender,\r\n    uint _subtractedValue,\r\n    bytes _data\r\n  )\r\n  public\r\n  payable\r\n  returns (bool)\r\n  {\r\n    require(_spender != address(this));\r\n\r\n    decreaseApproval(_spender, _subtractedValue);\r\n\r\n    // solium-disable-next-line security/no-call-value\r\n    require(_spender.call.value(msg.value)(_data));\r\n\r\n    return true;\r\n  }\r\n\r\n  // Additional\r\n\r\n  function pureBalanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Set new DAO contract address.\r\n   * @param newDao The address of DAO contract.\r\n   */\r\n  function setDAOContract(address newDao) public onlyOwner {\r\n    require(newDao != address(0));\r\n    NewDAOContract(dao, newDao);\r\n    dao = newDao;\r\n  }\r\n\r\n\r\n  // INTERNAL\r\n\r\n  function _balanceOf(address _owner) internal view returns (uint256) {\r\n    if (_owner == dao) {\r\n      uint256 _frozen;\r\n      uint _period = _getPeriodFor(now);\r\n      uint256 _frozenMax = 7000000;\r\n      uint256 _frozenMin = 1000000;\r\n      uint256 _frozenStep = 250000;\r\n\r\n      if (_period == 0) _frozen = _frozenMax;\r\n      if (_period == 1) _frozen = _frozenMax.sub(_frozenStep.mul(_weekFor(now)));\r\n      if (_period == 2) _frozen = _frozenMin;\r\n      if (_period == 3) _frozen = 0;\r\n\r\n      return balances[_owner].sub(_frozen * (10 ** uint256(decimals)));\r\n    }\r\n\r\n    return balances[_owner];\r\n  }\r\n\r\n  function _getPeriodFor(uint ts) internal view returns (uint) {\r\n    if (ts < periodOne) return 0;\r\n    if (ts >= periodThree) return 3;\r\n    if (ts >= periodTwo) return 2;\r\n    if (ts >= periodOne) return 1;\r\n  }\r\n\r\n  function _weekFor(uint ts) internal view returns (uint) {\r\n    return ts < periodOne ? 0 : (ts - periodOne) / 1 weeks + 1;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDao\",\"type\":\"address\"}],\"name\":\"setDAOContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"increaseApprovalAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodThree\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"pureBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"decreaseApprovalAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodOne\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_periodOne\",\"type\":\"uint256\"},{\"name\":\"_periodTwo\",\"type\":\"uint256\"},{\"name\":\"_periodThree\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousDAOContract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newDAOContract\",\"type\":\"address\"}],\"name\":\"NewDAOContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"QWoodDAOToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005b108c80000000000000000000000000000000000000000000000000000000005c01cf00000000000000000000000000000000000000000000000000000000005cf1c000","Library":"","SwarmSource":"bzzr://c1b554012b5caca934cfdfbfbea1f5db00764b1cefc5220dc27e33f918616518"}]}