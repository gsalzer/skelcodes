{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------\r\n// EROS token\r\n//\r\n// Symbol      : ELOVE\r\n// Name        : ELOVE Token for eLOVE Social Network\r\n// Total supply: 200,000,000\r\n// Decimals    : 2\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Burn(address indexed burner, uint256 value);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n// Borrowed from MiniMeToken\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\ncontract Owned {\r\n    \r\n    struct Investor {\r\n        address sender;\r\n        uint amount;\r\n        bool kyced;\r\n    }\r\n    \r\n    // version of this smart contract\r\n    string public version = \"1.10\";\r\n    \r\n    address public owner;\r\n    address public newOwner;\r\n    // reward pool wallet, un-sold tokens will be burned to this address\r\n    address public rewardPoolWallet;\r\n    \r\n    // List of investors with invested amount in ETH\r\n    Investor[] public investors;\r\n    \r\n    mapping(address => uint) public mapInvestors;\r\n    mapping(address => bool) public founders;\r\n    \r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    event TranferETH(address indexed _to, uint amount);\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    // Give KYC status, so token can be traded by this wallet\r\n    function changeKYCStatus(address inv, bool kycStatus) onlyOwner public returns (bool success) {\r\n        require(kycStatus == !investors[mapInvestors[inv]-1].kyced);\r\n        investors[mapInvestors[inv]-1].kyced = kycStatus;\r\n        return true;\r\n    }\r\n    \r\n    function setRewardPoolWallet(address rewardWallet) onlyOwner public returns(bool success) {\r\n        rewardPoolWallet = rewardWallet;\r\n        return true;\r\n    }\r\n    \r\n    function isExistInvestor(address inv) public constant returns (bool exist) {\r\n        return mapInvestors[inv] != 0;\r\n    }\r\n    \r\n    function isExistFounder(address _founder) public constant returns (bool exist) {\r\n        return founders[_founder];\r\n    }\r\n    \r\n    function removeFounder(address _founder) onlyOwner public returns (bool success) {\r\n        require(founders[_founder]);\r\n        founders[_founder] = false;\r\n        return true;\r\n    }\r\n    \r\n    function addFounder(address _founder) onlyOwner public returns (bool success) {\r\n        require(!founders[_founder]);\r\n        founders[_founder] = true;\r\n        return true;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and an\r\n// initial fixed supply\r\n// ----------------------------------------------------------------------------\r\ncontract ELOVEToken is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n    \r\n    uint minInvest = 0.5 ether;\r\n    uint maxInvest = 500 ether;\r\n    \r\n    uint softcap = 5000 ether;\r\n    uint hardcap = 40000 ether;\r\n\r\n    uint public icoStartDate;\r\n    \r\n    uint[4] public roundEnd;\r\n    uint[4] public roundTokenLeft;\r\n    uint[4] public roundBonus;\r\n    \r\n    uint public tokenLockTime;\r\n    uint public tokenFounderLockTime;\r\n    bool icoEnded = false;\r\n    bool kycCompleted = false;\r\n    \r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    uint etherExRate = 2000;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    function ELOVEToken(string tName, string tSymbol) public {\r\n        symbol = tSymbol;\r\n        name = tName;\r\n        decimals = 2;\r\n        _totalSupply = 200000000 * 10**uint(decimals); // 200.000.000 tokens\r\n        \r\n        icoStartDate            = 1518566401;   // 2018/02/14 00:00:01 AM\r\n        \r\n        // Ending time for each round\r\n        // pre-ICO round 1 : ends 28/02/2018, 10M tokens limit, 40% bonus\r\n        // pre-ICO round 2 : ends 15/03/2018, 10M tokens limit, 30% bonus\r\n        // crowdsale round 1 : ends 15/04/2018, 30M tokens limit, 10% bonus\r\n        // crowdsale round 2 : ends 30/04/2018, 30M tokens limit, 0% bonus\r\n        roundEnd = [1519862400, 1521158400, 1523836800, 1525132800];\r\n        roundTokenLeft = [1000000000, 1000000000, 3000000000, 3000000000];\r\n        roundBonus = [40, 30, 10, 0];\r\n        \r\n        // Founder can trade tokens 1 year after ICO ended\r\n        tokenFounderLockTime = roundEnd[3] + 365*24*3600;\r\n        \r\n        // Time to lock all ERC20 transfer \r\n        tokenLockTime = 1572566400;     // 2019/11/01 after 18 months\r\n        \r\n        balances[owner] = _totalSupply;\r\n        Transfer(address(0), owner, _totalSupply);\r\n    }\r\n\r\n    function setRoundEnd(uint round, uint newTime) onlyOwner public returns (bool success)  {\r\n        require(now<newTime);\r\n        if (round>0) {\r\n            require(newTime>roundEnd[round-1]);\r\n        } else {\r\n            require(newTime<roundEnd[1]);\r\n        }\r\n\r\n        roundEnd[round] = newTime;\r\n        // If we change ICO ended time, we change also founder trading lock time\r\n        if (round == 3) {\r\n            tokenFounderLockTime = newTime + 365*24*3600;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    // refund ETH to non-KYCed investors\r\n    function refundNonKYCInvestor() onlyOwner public returns (bool success) {\r\n        require(!kycCompleted);\r\n        for(uint i = 0; i<investors.length; i++) {\r\n            if (!investors[i].kyced) {\r\n                investors[i].sender.transfer(investors[i].amount);    \r\n                investors[i].amount = 0;\r\n            }\r\n        }\r\n        kycCompleted = true;\r\n        return true;\r\n    }\r\n    \r\n    function setSoftCap(uint newSoftCap) onlyOwner public returns (bool success) {\r\n        softcap = newSoftCap;\r\n        return true;\r\n    }\r\n    \r\n    function setEthExRate(uint newExRate) onlyOwner public returns (bool success) {\r\n        etherExRate = newExRate;\r\n        return true;\r\n    }\r\n    \r\n    function setICOStartTime(uint newTime) onlyOwner public returns (bool success) {\r\n        icoStartDate = newTime;\r\n        return true;\r\n    }\r\n    \r\n    function setLockTime(uint newLockTime) onlyOwner public returns (bool success) {\r\n        require(now<newLockTime);\r\n        tokenLockTime = newLockTime;\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply - balances[address(0)];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        require(icoEnded);\r\n        // transaction is in tradable period\r\n        require(now<tokenLockTime);\r\n        // either\r\n        // - is founder and current time > tokenFounderLockTime\r\n        // - is not founder but is rewardPoolWallet or sender was kyc-ed\r\n        require((founders[msg.sender] && now>tokenFounderLockTime) || (!founders[msg.sender] && (msg.sender == rewardPoolWallet || mapInvestors[msg.sender] == 0 || investors[mapInvestors[msg.sender]-1].kyced)));\r\n        // sender either is owner or recipient is not 0x0 address\r\n        require(msg.sender == owner || to != 0x0);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces \r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        require(icoEnded);\r\n        // either\r\n        // - is founder and current time > tokenFounderLockTime\r\n        // - is not founder but is rewardPoolWallet or sender was kyc-ed\r\n        require((founders[from] && now>tokenFounderLockTime) || (!founders[from] && (from == rewardPoolWallet || investors[mapInvestors[from]-1].kyced)));\r\n        \r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account. The `spender` contract function\r\n    // `receiveApproval(...)` is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n    \r\n    function processRound(uint round) internal {\r\n        // Token left for each round must be greater than 0\r\n        require(roundTokenLeft[round]>0);\r\n        // calculate number of tokens can be bought, given number of ether from sender, with discount rate accordingly\r\n        var tokenCanBeBought = (msg.value*10**uint(decimals)*etherExRate*(100+roundBonus[round])).div(100*10**18);\r\n        if (tokenCanBeBought<roundTokenLeft[round]) {\r\n            balances[owner] = balances[owner] - tokenCanBeBought;\r\n            balances[msg.sender] = balances[msg.sender] + tokenCanBeBought;\r\n            roundTokenLeft[round] = roundTokenLeft[round]-tokenCanBeBought;\r\n            \r\n            Transfer(owner, msg.sender, tokenCanBeBought);\r\n            \r\n            if (mapInvestors[msg.sender] > 0) {\r\n                // if investors already existed, add amount to the invested sum\r\n                investors[mapInvestors[msg.sender]-1].amount += msg.value;\r\n            } else {\r\n                uint ind = investors.push(Investor(msg.sender, msg.value, false));                \r\n                mapInvestors[msg.sender] = ind;\r\n            }\r\n        } else {\r\n            var neededEtherToBuy = (10**18*roundTokenLeft[round]*100).div(10**uint(decimals)).div(etherExRate*(100+roundBonus[round]));\r\n            balances[owner] = balances[owner] - roundTokenLeft[round];\r\n            balances[msg.sender] = balances[msg.sender] + roundTokenLeft[round];\r\n            roundTokenLeft[round] = 0;\r\n            \r\n            Transfer(owner, msg.sender, roundTokenLeft[round]);\r\n            \r\n            if (mapInvestors[msg.sender] > 0) {\r\n                // if investors already existed, add amount to the invested sum\r\n                investors[mapInvestors[msg.sender]-1].amount += neededEtherToBuy;\r\n            } else {\r\n                uint index = investors.push(Investor(msg.sender, neededEtherToBuy, false));  \r\n                mapInvestors[msg.sender] = index;\r\n            }\r\n            \r\n            // send back ether to sender \r\n            msg.sender.transfer(msg.value-neededEtherToBuy);\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Accept ETH for this crowdsale\r\n    // ------------------------------------------------------------------------\r\n    function () public payable {\r\n        require(!icoEnded);\r\n        uint currentTime = now;\r\n        require (currentTime>icoStartDate);\r\n        require (msg.value>= minInvest && msg.value<=maxInvest);\r\n        \r\n        if (currentTime<roundEnd[0]) {\r\n            processRound(0);\r\n        } else if (currentTime<roundEnd[1]) {\r\n            processRound(1);\r\n        } else if (currentTime<roundEnd[2]) {\r\n            processRound(2);\r\n        } else if (currentTime<roundEnd[3]) {\r\n            processRound(3);\r\n        } else {\r\n            // crowdsale ends, check success conditions\r\n            if (this.balance<softcap) {\r\n                // time to send back funds to investors\r\n                for(uint i = 0; i<investors.length; i++) {\r\n                    investors[i].sender.transfer(investors[i].amount);\r\n                    TranferETH(investors[i].sender, investors[i].amount);\r\n                }\r\n            } else {\r\n                // send un-sold tokens to reward address\r\n                require(rewardPoolWallet != address(0));\r\n                uint sumToBurn = roundTokenLeft[0] + roundTokenLeft[1] + roundTokenLeft[2] + roundTokenLeft[3];\r\n                balances[owner] = balances[owner] - sumToBurn;\r\n                balances[rewardPoolWallet] += sumToBurn;\r\n                \r\n                Transfer(owner, rewardPoolWallet, sumToBurn);\r\n                \r\n                roundTokenLeft[0] = roundTokenLeft[1] = roundTokenLeft[2] = roundTokenLeft[3] = 0;\r\n            }\r\n            \r\n            // give back ETH to sender\r\n            msg.sender.transfer(msg.value);\r\n            TranferETH(msg.sender, msg.value);\r\n            icoEnded = true;\r\n        }\r\n    }\r\n    \r\n    function withdrawEtherToOwner() onlyOwner public {   \r\n        require(now>roundEnd[3] && this.balance>softcap);\r\n        owner.transfer(this.balance);\r\n        TranferETH(owner, this.balance);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"inv\",\"type\":\"address\"}],\"name\":\"isExistInvestor\",\"outputs\":[{\"name\":\"exist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFounderLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_founder\",\"type\":\"address\"}],\"name\":\"removeFounder\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"kyced\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setICOStartTime\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inv\",\"type\":\"address\"},{\"name\":\"kycStatus\",\"type\":\"bool\"}],\"name\":\"changeKYCStatus\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEtherToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundTokenLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundNonKYCInvestor\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPoolWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setRoundEnd\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newExRate\",\"type\":\"uint256\"}],\"name\":\"setEthExRate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rewardWallet\",\"type\":\"address\"}],\"name\":\"setRewardPoolWallet\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newLockTime\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSoftCap\",\"type\":\"uint256\"}],\"name\":\"setSoftCap\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"founders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenLockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_founder\",\"type\":\"address\"}],\"name\":\"addFounder\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_founder\",\"type\":\"address\"}],\"name\":\"isExistFounder\",\"outputs\":[{\"name\":\"exist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tName\",\"type\":\"string\"},{\"name\":\"tSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TranferETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"ELOVEToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000c454c4f56452e534f4349414c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005454c4f5645000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://5a418fd5587e21d98b84c3b51b92646af4fdb8d9bf8b18d2fd5386feee960ba3"}]}