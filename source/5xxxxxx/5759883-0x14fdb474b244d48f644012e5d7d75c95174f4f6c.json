{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n}\r\n\r\n// File: contracts/ISStop.sol\r\n\r\ncontract ISStop is Ownable {\r\n\r\n    bool public stopped;\r\n\r\n    modifier stoppable {\r\n        assert (!stopped);\r\n        _;\r\n    }\r\n    function stop() public onlyOwner {\r\n        stopped = true;\r\n    }\r\n    function start() public onlyOwner {\r\n        stopped = false;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/InseeCoin.sol\r\n\r\ncontract InseeCoin is ISStop, StandardToken{\r\n    string public name = \"Insee Coin\";\r\n    uint8 public decimals = 18;\r\n    string public symbol = \"SEE\";\r\n    string public version = \"v0.1\";\r\n     /// initial amount of InseeCoin\r\n    uint256 public initialAmount = (10 ** 10) * (10 ** 18);\r\n   \r\n\r\n    event Destroy(address from, uint value);\r\n\r\n    function InseeCoin() public {\r\n        balances[msg.sender] = initialAmount;   // Give the creator all initial balances is defined in StandardToken.sol\r\n        totalSupply_ = initialAmount;              // Update total supply, totalSupply is defined in Tocken.sol\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public stoppable  returns (bool) {\r\n        return super.transfer(dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint wad) public stoppable  returns (bool) {\r\n        return super.transferFrom(src, dst, wad);\r\n    }\r\n    \r\n    function approve(address guy, uint wad) public stoppable  returns (bool) {\r\n        return super.approve(guy, wad);\r\n    }\r\n\r\n    function destroy(uint256 _amount) external onlyOwner stoppable  returns (bool success){\r\n        require(balances[msg.sender] >= _amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        totalSupply_ = totalSupply_.sub(_amount);\r\n        emit Destroy(msg.sender, _amount);\r\n        return true;\r\n    }\r\n\r\n     function setName(string name_) public onlyOwner{\r\n        name = name_;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/TokenLock.sol\r\n\r\ncontract TokenLock {\r\n    using SafeMath for uint256;\r\n\tInseeCoin  public  ISC;     // The InSeeCoin token itself\r\n\r\n    /**\r\n     * Next time lock ID to be used.\r\n     */\r\n    uint256 private nextLockID = 0;\r\n\r\n    /**\r\n     * Maps time lock ID to TokenTimeLockInfo structure encapsulating time lock\r\n     * information.\r\n     */\r\n    mapping (uint256 => TokenTimeLockInfo) public locks;\r\n\r\n    /**\r\n     * Encapsulates information abount time lock.\r\n     */\r\n    struct TokenTimeLockInfo {\r\n\r\n        /**\r\n         * Beneficiary to receive tokens once they are unlocked.\r\n         */\r\n        address beneficiary;\r\n\r\n        /**\r\n         * Amount of locked tokens.\r\n         */\r\n        uint256 amount;\r\n\r\n        /**\r\n         * Unlock time.\r\n         */\r\n        uint256 unlockTime;\r\n    }\r\n\r\n    /**\r\n     * Logged when tokens were time locked.\r\n     *\r\n     * @param id time lock ID\r\n     * @param beneficiary beneficiary to receive tokens once they are unlocked\r\n     * @param amount amount of locked tokens\r\n     * @param lockTime unlock time\r\n     */\r\n    event Lock (uint256 indexed id, address indexed beneficiary,uint256 amount, uint256 lockTime);\r\n      /**\r\n     * Logged when tokens were unlocked and sent to beneficiary.\r\n     *\r\n     * @param id time lock ID\r\n     * @param beneficiary beneficiary to receive tokens once they are unlocked\r\n     * @param amount amount of locked tokens\r\n     * @param unlockTime unlock time\r\n     */\r\n    event Unlock (uint256 indexed id, address indexed beneficiary,uint256 amount, uint256 unlockTime);\r\n\r\n\tfunction TokenLock(InseeCoin isc) public {\r\n        assert(address(isc) != address(0));\r\n\r\n        ISC = isc;\r\n\t}\r\n\r\n\t/**\r\n     * Lock given amount of given EIP-20 tokens until given time arrives, after\r\n     * this time allow the tokens to be transferred to given beneficiary.  This\r\n     * contract should be allowed to transfer at least given amount of tokens\r\n     * from msg.sender.\r\n     *\r\n     * @param _beneficiary beneficiary to receive tokens after unlock time\r\n     * @param _amount amount of tokens to be locked\r\n     * @param _lockTime unlock time\r\n     *\r\n     * @return time lock ID\r\n     */\r\n    function lock (\r\n      address _beneficiary, uint256 _amount,\r\n        uint256 _lockTime) public returns (uint256) {\r\n        require (_amount > 0);\r\n        require (_lockTime > 0);\r\n\r\n        nextLockID = nextLockID.add(1);\r\n        uint256 id = nextLockID;\r\n\r\n        TokenTimeLockInfo storage lockInfo = locks [id];\r\n        require (lockInfo.beneficiary == 0x0);\r\n        require (lockInfo.amount == 0);\r\n        require (lockInfo.unlockTime == 0);\r\n\r\n        lockInfo.beneficiary = _beneficiary;\r\n        lockInfo.amount = _amount;\r\n        lockInfo.unlockTime =  now.add(_lockTime);\r\n\r\n        emit Lock (id, _beneficiary, _amount, _lockTime);\r\n\r\n        require (ISC.transferFrom (msg.sender, this, _amount));\r\n\r\n        return id;\r\n    }\r\n\r\n\r\n    /**\r\n     * Unlock tokens locked under time lock with given ID and transfer them to\r\n     * corresponding beneficiary.\r\n     *\r\n     * @param _id time lock ID to unlock tokens locked under\r\n     */\r\n    function unlock (uint256 _id) public {\r\n        TokenTimeLockInfo memory lockInfo = locks [_id];\r\n        delete locks [_id];\r\n\r\n        require (lockInfo.amount > 0);\r\n        require (lockInfo.unlockTime <= block.timestamp);\r\n\r\n        emit Unlock (_id, lockInfo.beneficiary, lockInfo.amount, lockInfo.unlockTime);\r\n\r\n        require (\r\n            ISC.transfer (\r\n                lockInfo.beneficiary, lockInfo.amount));\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ISC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locks\",\"outputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"isc\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"}]","ContractName":"TokenLock","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000098da3b3da368a23693eb609d5ce2d779896a31b5","Library":"","SwarmSource":"bzzr://92f702ed30302e41ebd9f88fe4dec4fe29a9330a151e7f59e20a2cb382610033"}]}