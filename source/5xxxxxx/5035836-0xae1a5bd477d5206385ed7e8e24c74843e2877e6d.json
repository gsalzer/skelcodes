{"status":"1","message":"OK","result":[{"SourceCode":"{\"CoinBase.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * Base ERC721 token contract\\n */\\ncontract CoinBase is Ownable {\\n  // ERC-721: implementsERC721() public view returns (bool _implementsERC721)\\n  bool public constant implementsERC721 = true;\\n\\n  mapping(address =\\u003e uint256) public coinBalance;\\n  mapping(uint256 =\\u003e address) public coinIdToOwner;\\n  mapping(uint256 =\\u003e address) public coinIdToApprovedAddress;\\n\\n  // Events\\n  event Transfer(address indexed from, address indexed to, uint256 coinId);\\n  event Approval(address indexed owner, address indexed approved, uint256 coinId);\\n\\n  // ERC-20 Compatibility: balanceOf(address walletAddress) public view returns (uint256 balance)\\n  function balanceOf(address walletAddress) public view returns (uint256 balance) {\\n    return coinBalance[walletAddress];\\n  }\\n\\n  // Basic ownership: ownerOf(uint256 coinId) public view returns (address walletAddress)\\n  function ownerOf(uint256 coinId) public view returns (address walletAddress) {\\n    return coinIdToOwner[coinId];\\n  }\\n\\n  // Basic ownership: approve(address newCoinOwner, uint256 coinId) public\\n  function approve(address newCoinOwner, uint256 coinId) public {\\n    require(coinIdToOwner[coinId] == msg.sender);\\n    coinIdToApprovedAddress[coinId] = newCoinOwner;\\n    Approval(msg.sender, newCoinOwner, coinId);\\n  }\\n\\n  // Basic ownership: approveTransfer(address newCoinOwner, uint256 coinId) public\\n  function approveTransfer(address newCoinOwner, uint256 coinId) public {\\n    approve(newCoinOwner, coinId);\\n  }\\n\\n  // Basic ownership: approvedFor(uint256 coinId) public view returns (address approvedWallet)\\n  function approvedFor(uint256 coinId) public view returns (address approvedWallet) {\\n    return coinIdToApprovedAddress[coinId];\\n  }\\n\\n  // Basic ownership: getApproved(uint256 coinId) public view returns (address approvedWallet)\\n  function getApproved(uint256 coinId) public view returns (address approvedWallet) {\\n    return approvedFor(coinId);\\n  }\\n\\n  // Basic ownership: takeOwnership(uint256 coinId) public\\n  function takeOwnership(uint256 coinId) public {\\n    require(coinIdToApprovedAddress[coinId] == msg.sender);\\n    address _from = coinIdToOwner[coinId];\\n\\n    _transfer(_from, msg.sender, coinId);\\n  }\\n\\n  // Basic ownership: transferFrom(address currentCoinOwner, address newCoinOwner, uint256 coinId) public\\n  function transferFrom(address currentCoinOwner, address newCoinOwner, uint256 coinId) public {\\n    require(newCoinOwner != address(0));\\n    require(newCoinOwner != address(this));\\n    require(coinIdToApprovedAddress[coinId] == msg.sender);\\n    require(coinIdToOwner[coinId] == currentCoinOwner);\\n\\n    _transfer(currentCoinOwner, newCoinOwner, coinId);\\n  }\\n\\n  // Basic ownership: transfer(address newCoinOwner, uint256 coinId) public\\n  function transfer(address newCoinOwner, uint256 coinId) public {\\n    require(newCoinOwner != address(0));\\n    require(newCoinOwner != address(this));\\n    require(coinIdToOwner[coinId] == msg.sender);\\n\\n    _transfer(msg.sender, newCoinOwner, coinId);\\n  }\\n\\n  // Basic ownership: _transfer(address currentCoinOwner, address newCoinOwner, uint256 coinId) internal\\n  function _transfer(address currentCoinOwner, address newCoinOwner, uint256 coinId) internal {\\n    if (coinIdToOwner[coinId] != address(0)) {\\n      delete coinIdToApprovedAddress[coinId];\\n      coinBalance[currentCoinOwner] -= 1;\\n    }\\n    coinIdToOwner[coinId] = newCoinOwner;\\n    coinBalance[newCoinOwner] += 1;\\n    Transfer(currentCoinOwner, newCoinOwner, coinId);\\n  }\\n}\\n\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\n\\ncontract Ownable {\\n  address public owner;\\n  address public scriptAddress;\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  function Ownable() public {\\n    owner = msg.sender;\\n    scriptAddress = address(0);\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner or script runner.\\n   */\\n  modifier onlyOwnerOrScript() {\\n    require(msg.sender == owner || msg.sender == scriptAddress);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    require(newOwner != address(0));\\n    owner = newOwner;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer script control of the contract to a newScriptAddress.\\n   * @param newScriptAddress The address to transfer script ownership to.\\n   */\\n  function setScriptAddress(address newScriptAddress) public onlyOwner {\\n    scriptAddress = newScriptAddress;\\n  }\\n}\\n\"},\"TheValentineCoin.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./CoinBase.sol\\\";\\nimport \\\"./TheValentineCoinBase.sol\\\";\\nimport \\\"./TheValentineCoinAdministration.sol\\\";\\n\\n\\ncontract TheValentineCoin is TheValentineCoinAdministration {\\n  uint256 public constant coinPrice = 33 finney;\\n\\n  event ReservedCoin(address to);\\n\\n  function () public payable {\\n    require(reservationActive == true);\\n    require(msg.value \\u003e= coinPrice);\\n    ReservedCoin(msg.sender);\\n  }\\n\\n  function distributeCoin(uint256 coinId, address newCoinOwner, string coinEngraving) public onlyOwnerOrScript {\\n    if (bytes(coinEngraving).length != 0) {\\n      engravings[coinId] = coinEngraving;\\n    }\\n    _transfer(owner, newCoinOwner, coinId);\\n  }\\n\\n  function destruct() public onlyOwner {\\n    selfdestruct(owner);\\n  }\\n}\\n\"},\"TheValentineCoinAdministration.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./CoinBase.sol\\\";\\nimport \\\"./TheValentineCoinBase.sol\\\";\\n\\n\\ncontract TheValentineCoinAdministration is TheValentineCoinBase {\\n  bool public reservationActive;\\n\\n  function TheValentineCoinAdministration() public {\\n    reservationActive = true;\\n  }\\n\\n  // Administration: emergencyCoinErasure(uint256 coinId, string erasureReason) public onlyOwner\\n  function emergencyCoinErasure(uint256 coinId, string erasureReason) public onlyOwner {\\n    require(bytes(engravings[coinId]).length != 0);\\n    engravings[coinId] = erasureReason;\\n  }\\n\\n  // Administration: sendMoneyToScript() public onlyOwner\\n  function sendMoneyToScript() public onlyOwner {\\n    require(scriptAddress != address(0));\\n    require(this.balance \\u003e= 33 finney);\\n    scriptAddress.transfer(33 finney);\\n  }\\n\\n  // Administration: toggleReservationState() public onlyOwnerOrScript\\n  function toggleReservationState() public onlyOwnerOrScript {\\n    reservationActive = !reservationActive;\\n  }\\n\\n  // Administration: withdrawFunds() public onlyOwner\\n  function withdrawFunds() public onlyOwner {\\n    owner.transfer(this.balance);\\n  }\\n}\\n\"},\"TheValentineCoinBase.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./CoinBase.sol\\\";\\n\\n\\n/**\\n * ValentineCoin specific token methods contract\\n */\\ncontract TheValentineCoinBase is CoinBase {\\n  // Constants\\n  // ERC-20 Compatibility: name() constant returns (string name)\\n  string public constant name = \\\"The Valentine Coin\\\";\\n  // ERC-20 Compatibility: symbol() constant returns (string symbol)\\n  string public constant symbol = \\\"VALENTINE\\\";\\n  // ERC-20 Compatibility: totalSupply() constant returns (uint256 _totalSupply)\\n  uint256 public constant totalSupply = 33333;\\n\\n  mapping(uint256 =\\u003e string) public engravings;\\n\\n  function engravingOf(uint256 coinId) public view returns (string coinEngraving) {\\n    return engravings[coinId];\\n  }\\n\\n  // Engrave\\n  function engrave(uint256 coinId, string coinEngraving) public {\\n    require(ownerOf(coinId) == msg.sender);\\n    require(bytes(engravings[coinId]).length == 0);\\n    require(bytes(coinEngraving).length \\u003e 0);\\n    engravings[coinId] = coinEngraving;\\n  }\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"coinId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"approvedWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCoinOwner\",\"type\":\"address\"},{\"name\":\"coinId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coinId\",\"type\":\"uint256\"},{\"name\":\"coinEngraving\",\"type\":\"string\"}],\"name\":\"engrave\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"currentCoinOwner\",\"type\":\"address\"},{\"name\":\"newCoinOwner\",\"type\":\"address\"},{\"name\":\"coinId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"coinId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"approvedWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newScriptAddress\",\"type\":\"address\"}],\"name\":\"setScriptAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"scriptAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coinId\",\"type\":\"uint256\"},{\"name\":\"newCoinOwner\",\"type\":\"address\"},{\"name\":\"coinEngraving\",\"type\":\"string\"}],\"name\":\"distributeCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"coinId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"coinId\",\"type\":\"uint256\"}],\"name\":\"engravingOf\",\"outputs\":[{\"name\":\"coinEngraving\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coinIdToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservationActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCoinOwner\",\"type\":\"address\"},{\"name\":\"coinId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coinId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleReservationState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coinIdToApprovedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendMoneyToScript\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coinId\",\"type\":\"uint256\"},{\"name\":\"erasureReason\",\"type\":\"string\"}],\"name\":\"emergencyCoinErasure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"engravings\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCoinOwner\",\"type\":\"address\"},{\"name\":\"coinId\",\"type\":\"uint256\"}],\"name\":\"approveTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ReservedCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"coinId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"coinId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TheValentineCoin","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9927ed6e3dfd4115e8403435eb56b29427679ef9da7b049f3ec291cbe1bf5a1d"}]}