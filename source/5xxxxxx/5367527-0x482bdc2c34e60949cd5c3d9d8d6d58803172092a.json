{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n/**\r\n* @title ICO CONTRACT\r\n* @dev ERC-20 Token Standard Compliant\r\n* @author Fares A. Akel C. f.antonio.akel@gmail.com\r\n*/\r\n\r\n/**\r\n * @title SafeMath by OpenZeppelin\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract token {\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    }\r\n\r\ncontract DateTimeAPI {\r\n        \r\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public constant returns (uint timestamp);\r\n\r\n}\r\n\r\ncontract ICO {\r\n\r\n    DateTimeAPI dateTimeContract = DateTimeAPI(0x1a6184CD4C5Bea62B0116de7962EE7315B7bcBce);//Main\r\n    //DateTimeAPI dateTimeContract = DateTimeAPI(0x71b6e049E78c75fC61480357CD5aA1B81E1b16E0);//Kovan\r\n    //DateTimeAPI dateTimeContract = DateTimeAPI(0x670b2B167e13b131C491D87bA745dA41f07ecbc3);//Rinkeby\r\n    //DateTimeAPI dateTimeContract = DateTimeAPI(0x1F0a2ba4B115bd3e4007533C52BBd30C17E8B222);//Ropsten\r\n    \r\n    using SafeMath for uint256;\r\n    enum State {\r\n    //This ico have  states\r\n        preSale,\r\n        stage1a,\r\n        stage1b,\r\n        stage2a,\r\n        stage2b,\r\n        stage3a,\r\n        stage3b,\r\n        stage4a,\r\n        stage4b,\r\n        finishing,\r\n        Successful\r\n    }\r\n\r\n    //public variables\r\n    State public state = State.preSale; //Set initial stage\r\n    uint256 public startTime = dateTimeContract.toTimestamp(2018,4,1,0,0); //block-time when it start\r\n    uint256 public totalRaised; //eth in wei\r\n    uint256 public totalDistributed; //tokens distributed\r\n    uint256 public stageDistributed; //tokens distributed per stage\r\n    uint256[10] public rates = [2500,1250,1000,833,714,625,556,500,417,250];\r\n    uint256 public ICOdeadline;\r\n    uint256 public completedAt;\r\n    token public tokenReward;\r\n    address public creator;\r\n    address public beneficiary;\r\n    string public campaignUrl;\r\n    string public version = '1';\r\n\r\n    //events for log\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n    event LogFunderInitialized(\r\n        address _creator,\r\n        string _url,\r\n        uint256 _ICOdeadline);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n    event LogStageDistributed(uint256 _amount, State _stage);\r\n\r\n    modifier notFinished() {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n    /**\r\n    * @notice ICO constructor\r\n    * @param _addressOfTokenUsedAsReward is the token totalDistributed\r\n    * @param _beneficiary is the address that will receive funds collected\r\n    */\r\n    function ICO ( token _addressOfTokenUsedAsReward, address _beneficiary ) public {\r\n\r\n        creator = msg.sender;\r\n        tokenReward = _addressOfTokenUsedAsReward;\r\n        beneficiary = _beneficiary;\r\n\r\n        ICOdeadline = dateTimeContract.toTimestamp(2018,6,30,23,59); //June 30 at 23:59 Unix time\r\n\r\n        emit LogFunderInitialized(\r\n            creator,\r\n            campaignUrl,\r\n            ICOdeadline);\r\n            \r\n    }\r\n\r\n    /**\r\n    * @notice contribution handler\r\n    */\r\n    function contribute() public notFinished payable {\r\n        require(now >= startTime);\r\n\r\n        uint256 tokenBought = 0;\r\n\r\n        totalRaised = totalRaised.add(msg.value);\r\n\r\n        //Rate of exchange depends on stage\r\n        if (state == State.preSale){\r\n\r\n            tokenBought = msg.value.mul(rates[0]);\r\n            require(stageDistributed.add(tokenBought) <= 2000000 * (10**18));\r\n        \r\n        } else if (state == State.stage1a){\r\n        \r\n            tokenBought = msg.value.mul(rates[1]);\r\n            require(stageDistributed.add(tokenBought) <= 1500000 * (10**18));\r\n        \r\n        } else if (state == State.stage1b){\r\n        \r\n            tokenBought = msg.value.mul(rates[2]);\r\n            require(stageDistributed.add(tokenBought) <= 1500000 * (10**18));\r\n        \r\n        } else if (state == State.stage2a){\r\n        \r\n            tokenBought = msg.value.mul(rates[3]);\r\n            require(stageDistributed.add(tokenBought) <= 1500000 * (10**18));\r\n        \r\n        } else if (state == State.stage2b){\r\n        \r\n            tokenBought = msg.value.mul(rates[4]);\r\n            require(stageDistributed.add(tokenBought) <= 1500000 * (10**18));\r\n        \r\n        } else if (state == State.stage3a){\r\n        \r\n            tokenBought = msg.value.mul(rates[5]);\r\n            require(stageDistributed.add(tokenBought) <= 1500000 * (10**18));\r\n        \r\n        } else if (state == State.stage3b){\r\n        \r\n            tokenBought = msg.value.mul(rates[6]);\r\n            require(stageDistributed.add(tokenBought) <= 1500000 * (10**18));\r\n        \r\n        } else if (state == State.stage4a){\r\n        \r\n            tokenBought = msg.value.mul(rates[7]);\r\n            require(stageDistributed.add(tokenBought) <= 1500000 * (10**18));\r\n        \r\n        } else if (state == State.stage4b){\r\n        \r\n            tokenBought = msg.value.mul(rates[8]);\r\n            require(stageDistributed.add(tokenBought) <= 1500000 * (10**18));\r\n        \r\n        } else if (state == State.finishing){\r\n\r\n            tokenBought = msg.value.mul(rates[9]);\r\n\r\n        }\r\n\r\n        stageDistributed = stageDistributed.add(tokenBought);\r\n        totalDistributed = totalDistributed.add(tokenBought);\r\n        \r\n        tokenReward.transfer(msg.sender, tokenBought);\r\n\r\n        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n        emit LogContributorsPayout(msg.sender, tokenBought);\r\n\r\n        checkIfFundingCompleteOrExpired();\r\n    }\r\n\r\n    /**\r\n    * @notice check status\r\n    */\r\n    function checkIfFundingCompleteOrExpired() public {\r\n\r\n        if(state == State.preSale && now > dateTimeContract.toTimestamp(2018,4,30,23,59)){ // Apr 30 2018\r\n\r\n            emit LogStageDistributed(stageDistributed,state);\r\n\r\n            state = State.stage1a;\r\n            stageDistributed = 0;\r\n\r\n        } else if(state == State.stage1a && now > dateTimeContract.toTimestamp(2018,5,7,23,59)){ // May 7 2018\r\n\r\n            emit LogStageDistributed(stageDistributed,state);\r\n\r\n            state = State.stage1b;\r\n            stageDistributed = 0;\r\n            \r\n        } else if(state == State.stage1b && now > dateTimeContract.toTimestamp(2018,5,14,23,59)){ // May 14 2018\r\n\r\n            emit LogStageDistributed(stageDistributed,state);\r\n            \r\n            state = State.stage2a;\r\n            stageDistributed = 0;\r\n            \r\n        } else if(state == State.stage2a && now > dateTimeContract.toTimestamp(2018,5,21,23,59)){ // May 21 2018\r\n\r\n            emit LogStageDistributed(stageDistributed,state);\r\n            \r\n            state = State.stage2b;\r\n            stageDistributed = 0;\r\n            \r\n        } else if(state == State.stage2b && now > dateTimeContract.toTimestamp(2018,5,28,23,59)){ // May 28 2018\r\n\r\n            emit LogStageDistributed(stageDistributed,state);\r\n            \r\n            state = State.stage3a;\r\n            stageDistributed = 0;\r\n            \r\n        } else if(state == State.stage3a && now > dateTimeContract.toTimestamp(2018,6,4,23,59)){ // Jun 4 2018\r\n\r\n            emit LogStageDistributed(stageDistributed,state);\r\n            \r\n            state = State.stage3b;\r\n            stageDistributed = 0;\r\n            \r\n        } else if(state == State.stage3b && now > dateTimeContract.toTimestamp(2018,6,11,23,59)){ // Jun 11 2018\r\n\r\n            emit LogStageDistributed(stageDistributed,state);\r\n            \r\n            state = State.stage4a;\r\n            stageDistributed = 0;\r\n            \r\n        } else if(state == State.stage4a && now > dateTimeContract.toTimestamp(2018,6,18,23,59)){ // Jun 18 2018\r\n\r\n            emit LogStageDistributed(stageDistributed,state);\r\n            \r\n            state = State.stage4b;\r\n            stageDistributed = 0;\r\n            \r\n        } else if(state == State.stage4b && now > dateTimeContract.toTimestamp(2018,6,25,23,59)){ // Jun 25 2018\r\n\r\n            emit LogStageDistributed(stageDistributed,state);\r\n            \r\n            state = State.finishing;\r\n            stageDistributed = 0;\r\n            \r\n        } else if(state == State.finishing && now > ICOdeadline && state!=State.Successful){ // ICOdeadline is Jun 30\r\n\r\n            emit LogStageDistributed(stageDistributed,state);\r\n            \r\n            state = State.Successful; //ico becomes Successful\r\n            completedAt = now; //ICO is complete\r\n\r\n            emit LogFundingSuccessful(totalRaised); //we log the finish\r\n            finished(); //and execute closure\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice closure handler\r\n    */\r\n    function finished() public { //When finished eth and remaining tokens are transfered to beneficiary\r\n\r\n        require(state == State.Successful);\r\n        uint256 remanent = tokenReward.balanceOf(this);\r\n\r\n        require(beneficiary.send(address(this).balance));\r\n        tokenReward.transfer(beneficiary,remanent);\r\n\r\n        emit LogBeneficiaryPaid(beneficiary);\r\n        emit LogContributorsPayout(beneficiary, remanent);\r\n\r\n    }\r\n\r\n    /*\r\n    * @dev direct payments handle\r\n    */\r\n    function () public payable {\r\n        \r\n        contribute();\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOdeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"campaignUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_ICOdeadline\",\"type\":\"uint256\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_stage\",\"type\":\"uint8\"}],\"name\":\"LogStageDistributed\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fae9cd03c11e15cf611fd935bd66026fe6611d390000000000000000000000004c56ab099db8fc7c946b00fae90e2a8a75bcc807","Library":"","SwarmSource":"bzzr://dd1a347f5323b32d79ced2aca18460cda579ef1a29f2c6abb9fa1e6017ddec43"}]}