{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract WineMarket{\r\n\r\n    bool public initialized=false;\r\n    address public ceoAddress;\r\n    address public ceoWallet;\r\n\r\n    uint256 public marketWine;\r\n\r\n    mapping (address => uint256) public totalWineTransferredFromVineyard;\r\n    mapping (address => uint256) public currentWineAmount;\r\n\r\n    address constant public VINEYARD_ADDRESS = 0x66593d57B26Ed56Fd7881a016fcd0AF66636A9F0;\r\n    VineyardInterface vineyardContract;\r\n\r\n    function WineMarket(address _wallet) public{\r\n        require(_wallet != address(0));\r\n        ceoAddress = msg.sender;\r\n        ceoWallet = _wallet;\r\n        vineyardContract = VineyardInterface(VINEYARD_ADDRESS);\r\n    }\r\n\r\n    function transferWalletOwnership(address newWalletAddress) public {\r\n      require(msg.sender == ceoAddress);\r\n      require(newWalletAddress != address(0));\r\n      ceoWallet = newWalletAddress;\r\n    }\r\n\r\n    modifier initializedMarket {\r\n        require(initialized);\r\n        _;\r\n    }\r\n\r\n    function transferWineFromVineyardCellar() initializedMarket public {\r\n        require(vineyardContract.wineInCellar(msg.sender) > totalWineTransferredFromVineyard[msg.sender]);\r\n        // More wine bottles have been produced from Vineyard. Transfer the difference here.\r\n        uint256 wineToTransfer = SafeMath.sub(vineyardContract.wineInCellar(msg.sender),totalWineTransferredFromVineyard[msg.sender]);\r\n        currentWineAmount[msg.sender] = SafeMath.add(currentWineAmount[msg.sender],wineToTransfer);\r\n        totalWineTransferredFromVineyard[msg.sender] = SafeMath.add(totalWineTransferredFromVineyard[msg.sender],wineToTransfer);\r\n    }\r\n\r\n    function consumeWine(uint256 numBottlesToConsume) initializedMarket public returns(uint256) {\r\n        require(currentWineAmount[msg.sender] > 0);\r\n        require(numBottlesToConsume >= currentWineAmount[msg.sender]);\r\n\r\n        // Once wine is consumed, it is gone forever\r\n        currentWineAmount[msg.sender] = SafeMath.sub(currentWineAmount[msg.sender],numBottlesToConsume);\r\n\r\n        // return amount consumed\r\n        return numBottlesToConsume;\r\n    }\r\n\r\n    function sellWine(uint256 numBottlesToSell) initializedMarket public {\r\n        require(numBottlesToSell > 0);\r\n\r\n        uint256 myAvailableWine = currentWineAmount[msg.sender];\r\n        uint256 adjustedNumBottlesToSell = numBottlesToSell;\r\n        if (numBottlesToSell > myAvailableWine) {\r\n          // don't allow sell larger than the owner actually has\r\n          adjustedNumBottlesToSell = myAvailableWine;\r\n        }\r\n        if (adjustedNumBottlesToSell > marketWine) {\r\n          // don't allow sell larger than the current market holdings\r\n          adjustedNumBottlesToSell = marketWine;\r\n        }\r\n\r\n        uint256 wineValue = calculateWineSellSimple(adjustedNumBottlesToSell);\r\n        uint256 fee = devFee(wineValue);\r\n        currentWineAmount[msg.sender] = SafeMath.sub(myAvailableWine, adjustedNumBottlesToSell);\r\n        marketWine = SafeMath.add(marketWine,adjustedNumBottlesToSell);\r\n        ceoWallet.transfer(fee);\r\n        msg.sender.transfer(SafeMath.sub(wineValue, fee));\r\n    }\r\n\r\n    function buyWine() initializedMarket public payable{\r\n        require(msg.value <= SafeMath.sub(this.balance,msg.value));\r\n\r\n        uint256 fee = devFee(msg.value);\r\n        uint256 buyValue = SafeMath.sub(msg.value, fee);\r\n        uint256 wineBought = calculateWineBuy(buyValue, SafeMath.sub(this.balance, buyValue));\r\n        marketWine = SafeMath.sub(marketWine, wineBought);\r\n        ceoWallet.transfer(fee);\r\n        currentWineAmount[msg.sender] = SafeMath.add(currentWineAmount[msg.sender],wineBought);\r\n    }\r\n\r\n    function calculateTrade(uint256 valueIn, uint256 marketInv, uint256 Balance) public pure returns(uint256) {\r\n        return SafeMath.div(SafeMath.mul(Balance, 10000), SafeMath.add(SafeMath.div(SafeMath.add(SafeMath.mul(marketInv,10000), SafeMath.mul(valueIn, 5000)), valueIn), 5000));\r\n    }\r\n\r\n    function calculateWineSell(uint256 wine, uint256 marketWineValue) public view returns(uint256) {\r\n        return calculateTrade(wine, marketWineValue, this.balance);\r\n    }\r\n\r\n    function calculateWineSellSimple(uint256 wine) public view returns(uint256) {\r\n        return calculateTrade(wine, marketWine, this.balance);\r\n    }\r\n\r\n    function calculateWineBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth,contractBalance,marketWine);\r\n    }\r\n\r\n    function calculateWineBuySimple(uint256 eth) public view returns(uint256) {\r\n        return calculateWineBuy(eth,this.balance);\r\n    }\r\n\r\n    function devFee(uint256 amount) public pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,3), 100);\r\n    }\r\n\r\n    function seedMarket(uint256 wineBottles) public payable{\r\n        require(marketWine == 0);\r\n        require(ceoAddress == msg.sender);\r\n        initialized = true;\r\n        marketWine = wineBottles;\r\n    }\r\n\r\n    function getBalance() public view returns(uint256) {\r\n        return this.balance;\r\n    }\r\n\r\n    function getMyWine() public view returns(uint256) {\r\n        return SafeMath.add(SafeMath.sub(vineyardContract.wineInCellar(msg.sender),totalWineTransferredFromVineyard[msg.sender]),currentWineAmount[msg.sender]);\r\n    }\r\n\r\n    function getMyTransferredWine() public view returns(uint256) {\r\n        return totalWineTransferredFromVineyard[msg.sender];\r\n    }\r\n\r\n    function getMyAvailableWine() public view returns(uint256) {\r\n        return currentWineAmount[msg.sender];\r\n    }\r\n}\r\n\r\ncontract VineyardInterface {\r\n    function wineInCellar(address) public returns (uint256);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketWine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"valueIn\",\"type\":\"uint256\"},{\"name\":\"marketInv\",\"type\":\"uint256\"},{\"name\":\"Balance\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyTransferredWine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wineBottles\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalWineTransferredFromVineyard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyWine\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentWineAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateWineBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numBottlesToConsume\",\"type\":\"uint256\"}],\"name\":\"consumeWine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wine\",\"type\":\"uint256\"},{\"name\":\"marketWineValue\",\"type\":\"uint256\"}],\"name\":\"calculateWineSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyAvailableWine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyWine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWalletAddress\",\"type\":\"address\"}],\"name\":\"transferWalletOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferWineFromVineyardCellar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numBottlesToSell\",\"type\":\"uint256\"}],\"name\":\"sellWine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VINEYARD_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wine\",\"type\":\"uint256\"}],\"name\":\"calculateWineSellSimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateWineBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"WineMarket","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009012c8b9fccd553ae3fbdc25719af965669dad87","Library":"","SwarmSource":"bzzr://d4b1502fc7ac97452a0f8f6169bc27bb17cc0e0cb1f00aaa44400e627b59e277"}]}