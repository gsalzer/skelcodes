{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint256 supply);\r\n    function balance() public constant returns (uint256);\r\n    function balanceOf(address _owner) public constant returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ninterface Token { \r\n    function totalSupply() constant public returns (uint256 supply);\r\n    function balanceOf(address _owner) constant public returns (uint256 balance);\r\n}\r\n\r\ninterface EOSToken {\r\n  function balanceOf(address who) constant public returns (uint value);\r\n}\r\n\r\ncontract EOSDRAM is ERC20Interface {\r\n    string public constant symbol = \"DRAM\";\r\n    string public constant name = \"EOS DRAM\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    address EOSContract = 0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0;\r\n\r\n    // 1 DRAM is the equivalent of EOS 1 Kb of RAM\r\n    // total fixed supply is 64 GB of DRAM;\r\n    // total fixed supply = 64 * 1024 *1024 = 67108864\r\n    // unlike the EOS blockchain, 64 GB is a fixed total supply that can never be changed/increased\r\n    // having a fixed supply means that all future RAM increases on the EOS blockchain will have no effect here on DRAM\r\n    \r\n\r\n    uint256 _totalSupply = 67108864e18;\r\n    \r\n    // as per the locked EOS contract 0x86fa049857e0209aa7d9e616f7eb3b3b78ecfdb0 there are 330687 EOS holders\r\n    // 10% of the total supply will be reserved for exchanges/dev and the remaining 90% will be distributed equally among the 330687 EOS holders\r\n    // this means each address receives 182 DRAM\r\n   \r\n   uint256 _airdropAmount = 182e18;\r\n    \r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => bool) initialized;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    address public owner;\r\n    \r\n    modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n    }\r\n\r\n    function EOSDRAM() public {\r\n        owner = msg.sender;\r\n        initialized[msg.sender] = true;\r\n        //~10% reserve for exchanges and dev\r\n        balances[msg.sender] = 6923830e18;\r\n        Transfer(0, owner, 6923830e18);\r\n      }\r\n\r\n    function totalSupply() public constant returns (uint256 supply) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // What's my balance?\r\n    function balance() public constant returns (uint256) {\r\n        return getBalance(msg.sender);\r\n    }\r\n\r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _address) public constant returns (uint256) {\r\n        return getBalance(_address);\r\n    }\r\n\r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        initialize(msg.sender);\r\n\r\n        if (balances[msg.sender] >= _amount\r\n            && _amount > 0) {\r\n            initialize(_to);\r\n            if (balances[_to] + _amount > balances[_to]) {\r\n\r\n                balances[msg.sender] -= _amount;\r\n                balances[_to] += _amount;\r\n\r\n                Transfer(msg.sender, _to, _amount);\r\n\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n        initialize(_from);\r\n\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0) {\r\n            initialize(_to);\r\n            if (balances[_to] + _amount > balances[_to]) {\r\n\r\n                balances[_from] -= _amount;\r\n                allowed[_from][msg.sender] -= _amount;\r\n                balances[_to] += _amount;\r\n\r\n                Transfer(_from, _to, _amount);\r\n\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // internal private functions\r\n    function initialize(address _address) internal returns (bool success) {\r\n       // ensure we only airdrop once per address\r\n        if (!initialized[_address]) {\r\n       \r\n       // we verify the balance of the EOS contract\r\n       EOSToken token = EOSToken(EOSContract);\r\n       uint256 has_eos = token.balanceOf(_address);\r\n       if (has_eos > 0) {\r\n       \t    // if the address has eos, we grant the DRAM airdrop\r\n            initialized[_address] = true;\r\n            balances[_address] = _airdropAmount;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getBalance(address _address) internal returns (uint256) {\r\n        if (!initialized[_address]) {\r\n            EOSToken token = EOSToken(EOSContract);\r\n\t    uint256 has_eos = token.balanceOf(_address);\r\n      \t   \r\n      \t   if (has_eos > 0) {\r\n            return balances[_address] + _airdropAmount;\r\n            }\r\n            else {\r\n            return balances[_address];\r\n            }\r\n        }\r\n        else {\r\n            return balances[_address];\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EOSDRAM","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://aecbc50036617f27431e1fc2e6882760a1c4d423872aa90774119fd588561e05"}]}