{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract ERC223 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public view returns (uint);\r\n  \r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function decimals() public view returns (uint8 _decimals);\r\n  function totalSupply() public view returns (uint256 _supply);\r\n\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\n\r\ncontract ContractReceiver {\r\n\tfunction tokenFallback(address _from, uint _value, bytes _data) public pure;\r\n}\r\n\r\ncontract SafeMath\r\n{\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n      }\r\n    \r\n\tfunction safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\t\r\n\tfunction safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\ncontract protoLEXToken is ERC223, SafeMath{\r\n\tmapping(address => uint) balances;\r\n\tstring public name = \"proto-Limited Exchange Token\";\r\n\tstring public symbol = \"pLEX\";\r\n\tuint8 public decimals = 0; // Using a Satoshi as base for our decimals: 0.00000001;\r\n\tuint256 public totalSupply = 2000000000; // 2,000,000,000 LEX's, not mineable, not mintable;\r\n\t\r\n\taddress admin;\r\n\t\r\n\tmodifier onlyAdmin()\r\n\t{\r\n\t    require(msg.sender == admin);\r\n\t    _;\r\n\t}\r\n\t\r\n\tfunction protoLEXToken() public {\r\n\t\tbalances[msg.sender] = totalSupply;\r\n\t}\r\n\t  \r\n\t// Function to access name of token .\r\n\tfunction name() public view returns (string _name) {\r\n\t\treturn name;\r\n\t}\r\n\t// Function to access symbol of token .\r\n\tfunction symbol() public view returns (string _symbol) {\r\n\t\treturn symbol;\r\n\t}\r\n\t// Function to access decimals of token .\r\n\tfunction decimals() public view returns (uint8 _decimals) {\r\n\t\treturn decimals;\r\n\t}\r\n\t// Function to access total supply of tokens .\r\n\tfunction totalSupply() public view returns (uint256 _totalSupply) {\r\n\t\treturn totalSupply;\r\n\t}\r\n\t  \r\n\t  \r\n\t// Function that is called when a user or another contract wants to transfer funds .\r\n\tfunction transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\r\n\t\tif(isContract(_to)) {\r\n\t\t\tif (balanceOf(msg.sender) < _value) revert();\r\n\t\t\tbalances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n\t\t\tbalances[_to] = safeAdd(balanceOf(_to), _value);\r\n\t\t\tassert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n\t\t\tTransfer(msg.sender, _to, _value, _data);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn transferToAddress(_to, _value, _data);\r\n\t\t}\r\n\t}\r\n\t  \r\n\r\n\t// Function that is called when a user or another contract wants to transfer funds .\r\n\tfunction transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\n\t\tif(isContract(_to)) {\r\n\t\t\treturn transferToContract(_to, _value, _data);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn transferToAddress(_to, _value, _data);\r\n\t\t}\r\n\t}\r\n\t  \r\n\t// Standard function transfer similar to ERC20 transfer with no _data .\r\n\t// Added due to backwards compatibility reasons .\r\n\tfunction transfer(address _to, uint _value) public returns (bool success) {\r\n\t\t//standard function transfer similar to ERC20 transfer with no _data\r\n\t\t//added due to backwards compatibility reasons\r\n\t\tbytes memory empty;\r\n\t\tif(isContract(_to)) {\r\n\t\t\treturn transferToContract(_to, _value, empty);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn transferToAddress(_to, _value, empty);\r\n\t\t}\r\n\t}\r\n\r\n\t//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n\tfunction isContract(address _addr) private view returns (bool is_contract) {\r\n\t\tuint length;\r\n\t\tassembly {\r\n\t\t\t//retrieve the size of the code on target address, this needs assembly\r\n\t\t\tlength := extcodesize(_addr)\r\n\t\t}\r\n\t\treturn (length>0);\r\n\t}\r\n\r\n\t//function that is called when transaction target is an address\r\n\tfunction transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n\t\tif (balanceOf(msg.sender) < _value) revert();\r\n\t\tbalances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n\t\tbalances[_to] = safeAdd(balanceOf(_to), _value);\r\n\t\tTransfer(msg.sender, _to, _value, _data);\r\n\t\treturn true;\r\n\t}\r\n\t  \r\n\t  //function that is called when transaction target is a contract\r\n\tfunction transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n\t\tif (balanceOf(msg.sender) < _value) revert();\r\n\t\tbalances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n\t\tbalances[_to] = safeAdd(balanceOf(_to), _value);\r\n\t\tContractReceiver receiver = ContractReceiver(_to);\r\n\t\treceiver.tokenFallback(msg.sender, _value, _data);\r\n\t\tTransfer(msg.sender, _to, _value, _data);\r\n\t\treturn true;\r\n\t}\r\n\t\t\r\n\tfunction balanceOf(address _owner) public view returns (uint balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\t\r\n\t/*\r\n\t* Prototype functions for the full LEX Token\r\n\t*/\r\n\t\r\n\tfunction AddToWhitelist(address addressToWhitelist) public onlyAdmin\r\n\t{\r\n\t}\r\n\t\r\n\tfunction RegisterContract() public\r\n\t{\r\n\t}\r\n\t\r\n\tfunction RecallTokensFromContract() public onlyAdmin\r\n\t{\r\n\t}\r\n\t\r\n\tfunction supplyAvailable() public view returns (uint supply) {\r\n\t\treturn 0;\r\n\t}\r\n\tfunction supplyInCirculation() public view returns (uint inCirculation) {\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyInCirculation\",\"outputs\":[{\"name\":\"inCirculation\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressToWhitelist\",\"type\":\"address\"}],\"name\":\"AddToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"RecallTokensFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyAvailable\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"RegisterContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"protoLEXToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://018030ef9d535f37acf1e522a9072df7fe9598da08ffb9a766dd8359262aac56"}]}