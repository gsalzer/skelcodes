{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n contract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// @title Register for contract names.\r\ncontract Registry is Ownable {\r\n\tstruct Record {\r\n\t\taddress contractAddress;\r\n\r\n\t\t// note: IPFS hash is stored as Base58 decoded hex value, with the first two bytes removed\r\n\t\t// (0x1220), see https://ethereum.stackexchange.com/questions/17094/how-to-store-ipfs-hash-using-bytes\r\n\t\tbytes32 ipfsHash;\r\n\t}\r\n\t\r\n\t//namelist for exporting mapping\r\n\tbytes32[] public namelist;\r\n\r\n\t// publicly available register\r\n\tmapping (bytes32 => Record) public registry;\r\n\r\n\t// event for update function\r\n\tevent RegistryUpdated(bytes32 _name, address _address, bytes32 _ipfsHash);\r\n\r\n\t// events for getting data into JS\r\n\tevent GetRecord(bytes32 _name, address contractAddress, bytes32 ipfsHash);\r\n\r\n\t// get namelist length for exporting mapping\r\n\tfunction getNamelistLength() public view returns(uint namelistLength) {\r\n\t\treturn namelist.length;\r\n\t}\r\n\t\r\n\t// get addeess from name\r\n\tfunction getAddress(bytes32 _name) public view returns(address) {\r\n\t\tRecord memory record = registry[keccak256(_name)];\r\n\t\t// return event so we can use JS\r\n\t\tGetRecord(_name, record.contractAddress, record.ipfsHash);\r\n\t\treturn record.contractAddress;\r\n\t}\r\n\r\n\t// get ipfs hash from name\r\n\tfunction getIPFSHash(bytes32 _name) public view returns(bytes32) {\r\n\t\tRecord memory record = registry[keccak256(_name)];\r\n\t\t// return event so we can use JS\r\n\t\tGetRecord(_name, record.contractAddress, record.ipfsHash);\r\n\t\treturn record.ipfsHash;\r\n\t}\r\n\r\n\t// update address for name, or create new name->address mapping\r\n\tfunction updateRegistry(bytes32 _name, address _address, bytes32 _ipfsHash) public onlyOwner {\r\n\t\trequire(_address != address(0x0));\r\n\t\tif (registry[keccak256(_name)].contractAddress == 0) {\r\n\t\t\tnamelist.push(_name);\r\n\t\t}\r\n\t\tregistry[keccak256(_name)] = Record(_address, _ipfsHash);\r\n\t\tRegistryUpdated(_name, _address, _ipfsHash);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getIPFSHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNamelistLength\",\"outputs\":[{\"name\":\"namelistLength\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_ipfsHash\",\"type\":\"bytes32\"}],\"name\":\"updateRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"registry\",\"outputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"ipfsHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"namelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ipfsHash\",\"type\":\"bytes32\"}],\"name\":\"RegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ipfsHash\",\"type\":\"bytes32\"}],\"name\":\"GetRecord\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Registry","CompilerVersion":"v0.4.20-nightly.2018.1.6+commit.2548228b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b632addce7e415198dca9d2b857fb10090777e6b72275d694b997e5cdb6b5110"}]}