{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n    Copyright 2018, Vicent Nos\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n\r\n */\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n      owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////\r\n//                                                          //\r\n//  Alt Index, Open End Crypto Fund ERC20                    //\r\n//                                                          //\r\n//////////////////////////////////////////////////////////////\r\n\r\ncontract ALXERC20 is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n    mapping (address => uint256) public balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    mapping (address => mapping (uint256 => timeHold)) internal requestWithdraws;\r\n   \r\n \r\n\r\n    struct timeHold{\r\n        uint256[] amount;\r\n        uint256[] time;\r\n        uint256 length;\r\n    }\r\n   \r\n   function requestOfAmount(address addr, uint256 n) public view returns(uint256){\r\n     return requestWithdraws[addr][n].amount[0];   \r\n    }   \r\n   \r\n    function requestOfTime(address addr, uint256 n) public view returns(uint256){\r\n     return requestWithdraws[addr][n].time[0];   \r\n    }  \r\n    \r\n    uint256 public roundCounter=0;\r\n    \r\n    /* Public variables for the ERC20 token */\r\n    string public constant standard = \"ERC20 ALX\";\r\n    uint8 public constant decimals = 8; // hardcoded to be a constant\r\n    uint256 public totalSupply;\r\n    string public name;\r\n    string public symbol;\r\n\r\n    uint256 public transactionFee = 1;\r\n\r\n    uint256 public icoEnd=0;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    function setTransactionFee(uint256 _value) public onlyOwner{\r\n      transactionFee=_value;\r\n \r\n    }\r\n\r\n    function setIcoEnd(uint256 _value) public onlyOwner{\r\n      icoEnd=_value;\r\n \r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        require(block.timestamp>icoEnd);\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n\r\n        uint256 fee=(_value*transactionFee)/1000;\r\n \r\n        delete requestWithdraws[msg.sender][roundCounter];\r\n\r\n        balances[_to] = balances[_to].add(_value-fee);\r\n        balances[owner]=balances[owner].add(fee);\r\n        \r\n        emit Transfer(msg.sender, _to, _value-fee);\r\n        emit Transfer(msg.sender, owner, fee);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(block.timestamp>icoEnd);\r\n        balances[_from] = balances[_from].sub(_value);\r\n\r\n        uint256 fee=(_value*transactionFee)/1000;\r\n\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n        delete requestWithdraws[msg.sender][roundCounter];\r\n        delete requestWithdraws[_from][roundCounter];\r\n\r\n        balances[_to] = balances[_to].add(_value-fee);\r\n        balances[owner]=balances[owner].add(fee);\r\n        \r\n        emit Transfer(_from, _to, _value-fee);\r\n        emit Transfer(_from, owner, fee);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /* Approve and then communicate the approved contract in a single tx */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface tokenRecipient {\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external ;\r\n}\r\n\r\n\r\ncontract ALX is ALXERC20 {\r\n\r\n    // Contract variables and constants\r\n\r\n\r\n    uint256 public tokenPrice = 30000000000000000;\r\n    uint256 public tokenAmount=0;\r\n\r\n    // constant to simplify conversion of token amounts into integer form\r\n    uint256 public tokenUnit = uint256(10)**decimals;\r\n\r\n    uint256 public holdTime;\r\n    uint256 public holdMax;\r\n    uint256 public maxSupply;\r\n\r\n    //Declare logging events\r\n    event LogDeposit(address sender, uint amount);\r\n\r\n\r\n\r\n    uint256 public withdrawFee = 1;\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n        constructor (\r\n            \r\n            uint256 initialSupply,\r\n            string contractName,\r\n            string tokenSymbol,\r\n            uint256 contractHoldTime,\r\n            uint256 contractHoldMax,\r\n            \r\n            address contractOwner\r\n\r\n        ) public {\r\n\r\n\r\n        totalSupply = initialSupply;  // Update total supply\r\n        name = contractName;             // Set the name for display purposes\r\n        symbol = tokenSymbol;         // Set the symbol for display purposes\r\n        holdTime=contractHoldTime;\r\n        holdMax=contractHoldMax;\r\n        \r\n        owner=contractOwner;\r\n        balances[contractOwner]= balances[contractOwner].add(totalSupply);\r\n\r\n    }\r\n\r\n    function () public payable {\r\n        buy();   // Allow to buy tokens sending ether directly to contract\r\n    }\r\n\r\n\r\n    function deposit() external payable onlyOwner returns(bool success) {\r\n        // Check for overflows;\r\n        //executes event to reflect the changes\r\n        emit LogDeposit(msg.sender, msg.value);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function setWithdrawFee(uint256 _value) public onlyOwner{\r\n      withdrawFee=_value;\r\n \r\n    }\r\n    \r\n\r\n\r\n    function withdrawReward() external {\r\n\r\n        uint i = 0;\r\n        uint256 ethAmount = 0;\r\n\r\n        uint256 tokenM=0;\r\n        \r\n        if (block.timestamp -  requestWithdraws[msg.sender][roundCounter].time[i] > holdTime && block.timestamp -  requestWithdraws[msg.sender][roundCounter].time[i] < holdMax){\r\n                ethAmount += tokenPrice * requestWithdraws[msg.sender][roundCounter].amount[i];\r\n                tokenM +=requestWithdraws[msg.sender][roundCounter].amount[i];\r\n        }\r\n    \r\n        ethAmount=ethAmount/tokenUnit;\r\n        require(ethAmount > 0);\r\n\r\n        emit LogWithdrawal(msg.sender, ethAmount);\r\n\r\n        totalSupply = totalSupply.sub(tokenM);\r\n\r\n        delete requestWithdraws[msg.sender][roundCounter];\r\n\r\n        uint256 fee=ethAmount*withdrawFee/1000;\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(tokenM);\r\n\r\n        msg.sender.transfer(ethAmount-fee);\r\n        owner.transfer(fee);\r\n\r\n    }\r\n\r\n     \r\n    function withdraw(uint256 amount) public onlyOwner{ \r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function setPrice(uint256 _value) public onlyOwner{\r\n      tokenPrice=_value;\r\n      roundCounter++;\r\n\r\n    }\r\n\r\n\r\n\r\n    event LogWithdrawal(address receiver, uint amount);\r\n\r\n    function requestWithdraw(uint256 value) public {\r\n      require(value <= balances[msg.sender]);\r\n\r\n      delete requestWithdraws[msg.sender][roundCounter];\r\n\r\n      requestWithdraws[msg.sender][roundCounter].amount.push(value);\r\n      requestWithdraws[msg.sender][roundCounter].time.push(block.timestamp);\r\n      requestWithdraws[msg.sender][roundCounter].length++;\r\n      //executes event ro register the changes\r\n\r\n    }\r\n    \r\n    uint256 public minPrice=250000000000000000;\r\n    \r\n    function setMinPrice(uint256 value) public onlyOwner{\r\n        minPrice=value;\r\n    }\r\n\r\n    function buy() public payable {\r\n        require(msg.value>=minPrice);\r\n        tokenAmount = (msg.value * tokenUnit) / tokenPrice ;  // calculates the amount\r\n        \r\n        transferBuy(msg.sender, tokenAmount);\r\n        owner.transfer(msg.value);\r\n    }\r\n\r\n    function transferBuy(address _to, uint256 _value) internal returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        // SafeMath.add will throw if there is not enough balance.\r\n        totalSupply = totalSupply.add(_value);\r\n        \r\n        uint256 teamAmount=_value*100/1000;\r\n\r\n        totalSupply = totalSupply.add(teamAmount);\r\n\r\n\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[owner] = balances[owner].add(teamAmount);\r\n\r\n        emit Transfer(this, _to, _value);\r\n        emit Transfer(this, owner, teamAmount);\r\n        return true;\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"requestOfAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTransactionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setIcoEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"requestOfTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"contractHoldTime\",\"type\":\"uint256\"},{\"name\":\"contractHoldMax\",\"type\":\"uint256\"},{\"name\":\"contractOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ALX","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a8c000000000000000000000000000000000000000000000000000000000000151800000000000000000000000002ac995f28183c3c524b4a2da53b4e1384b3a823d0000000000000000000000000000000000000000000000000000000000000008416c74696e6465780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003414c580000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://7fa4628e47bfa876c4ddb539d1f09561cd3708c9702d10c2059ccfc7df52a2f8"}]}