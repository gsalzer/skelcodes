{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ApproveAndCallReceiver {\r\n    function receiveApproval(\r\n    address _from,\r\n    uint256 _amount,\r\n    address _token,\r\n    bytes _data\r\n    ) public;\r\n}\r\n\r\ncontract ERC20Token {\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public totalSupply;\r\n    \r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract TokenI is ERC20Token {\r\n\r\n    string public name;                \r\n    uint8 public decimals;             \r\n    string public symbol;              \r\n\r\n    function approveAndCall(\r\n    address _spender,\r\n    uint256 _amount,\r\n    bytes _extraData\r\n    ) public returns (bool success);\r\n\r\n\r\n    function generateTokens(address _owner, uint _amount) public returns (bool);\r\n\r\n    function destroyTokens(address _owner, uint _amount) public returns (bool);\r\n\r\n}\r\n\r\ncontract Token is TokenI {\r\n\r\n    struct FreezeInfo {\r\n    address user;\r\n    uint256 amount;\r\n    }\r\n    //Key1: step(募资阶段); Key2: user sequence(用户序列)\r\n    mapping (uint8 => mapping (uint8 => FreezeInfo)) public freezeOf; //所有锁仓，key 使用序号向上增加，方便程序查询。\r\n    mapping (uint8 => uint8) public lastFreezeSeq; //最后的 freezeOf 键值。key: step; value: sequence\r\n    mapping (address => uint256) public airdropOf;//空投用户\r\n\r\n    address public owner;\r\n    bool public paused=false;//是否暂停私募\r\n    bool public pauseTransfer=false;//是否允许转账\r\n    uint256 public minFunding = 1 ether;  //最低起投额度\r\n    uint256 public airdropQty=0;//每个账户空投获得的量\r\n    uint256 public airdropTotalQty=0;//总共发放的空投代币数量\r\n    uint256 public tokensPerEther = 10000;//1eth兑换多少代币\r\n    address private vaultAddress;//存储众筹ETH的地址\r\n    uint256 public totalCollected = 0;//已经募到ETH的总数量\r\n\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    event Freeze(address indexed from, uint256 value);\r\n\r\n    event Unfreeze(address indexed from, uint256 value);\r\n\r\n    event Payment(address sender, uint256 _ethAmount, uint256 _tokenAmount);\r\n\r\n    function Token(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol,\r\n        address _vaultAddress\r\n    ) public {\r\n        require(_vaultAddress != 0);\r\n        totalSupply = initialSupply * 10 ** uint256(decimalUnits);\r\n        balanceOf[msg.sender] = totalSupply;\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        decimals = decimalUnits;\r\n        owner = msg.sender;\r\n        vaultAddress=_vaultAddress;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier realUser(address user){\r\n        if(user == 0x0){\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier moreThanZero(uint256 _value){\r\n        if (_value <= 0){\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) realUser(_to) moreThanZero(_value) public returns (bool) {\r\n        require(!pauseTransfer);\r\n        require(balanceOf[msg.sender] >= _value);           // Check if the sender has enough\r\n        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                     // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add(_value);                            // Add the same to the recipient\r\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) moreThanZero(_value) public\r\n    returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender,_spender,_value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\r\n        require(approve(_spender, _amount));\r\n        ApproveAndCallReceiver(_spender).receiveApproval(\r\n        msg.sender,\r\n        _amount,\r\n        this,\r\n        _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) realUser(_from) realUser(_to) moreThanZero(_value) public returns (bool success) {\r\n        require(!pauseTransfer);\r\n        require(balanceOf[_from] >= _value);                 // Check if the sender has enough\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);  // Check for overflows\r\n        require(allowance[_from][msg.sender] >= _value);     // Check allowance\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);                           // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add(_value);                             // Add the same to the recipient\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferMulti(address[] _to, uint256[] _value) onlyOwner public returns (uint256 amount){\r\n        require(_to.length == _value.length);\r\n        uint8 len = uint8(_to.length);\r\n        for(uint8 j; j<len; j++){\r\n            amount = amount.add(_value[j]*10**uint256(decimals));\r\n        }\r\n        require(balanceOf[msg.sender] >= amount);\r\n        for(uint8 i; i<len; i++){\r\n            address _toI = _to[i];\r\n            uint256 _valueI = _value[i]*10**uint256(decimals);\r\n            balanceOf[_toI] = balanceOf[_toI].add(_valueI);\r\n            balanceOf[msg.sender] =balanceOf[msg.sender].sub(_valueI);\r\n            emit Transfer(msg.sender, _toI, _valueI);\r\n        }\r\n    }\r\n\r\n    //冻结账户\r\n    function freeze(address _user, uint256 _value, uint8 _step) moreThanZero(_value) onlyOwner public returns (bool success) {\r\n        _value=_value*10**uint256(decimals);\r\n        return _freeze(_user,_value,_step);\r\n    }\r\n\r\n    function _freeze(address _user, uint256 _value, uint8 _step) moreThanZero(_value) private returns (bool success) {\r\n        //info256(\"balanceOf[_user]\", balanceOf[_user]);\r\n        require(balanceOf[_user] >= _value);\r\n        balanceOf[_user] = balanceOf[_user].sub(_value);\r\n        freezeOf[_step][lastFreezeSeq[_step]] = FreezeInfo({user:_user, amount:_value});\r\n        lastFreezeSeq[_step]++;\r\n        emit Freeze(_user, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    //为用户解锁账户资金\r\n    function unFreeze(uint8 _step) onlyOwner public returns (bool unlockOver) {\r\n        //_end = length of freezeOf[_step]\r\n        uint8 _end = lastFreezeSeq[_step];\r\n        require(_end > 0);\r\n        unlockOver=false;\r\n        uint8  _start=0;\r\n        for(; _end>_start; _end--){\r\n            FreezeInfo storage fInfo = freezeOf[_step][_end-1];\r\n            uint256 _amount = fInfo.amount;\r\n            balanceOf[fInfo.user] += _amount;\r\n            delete freezeOf[_step][_end-1];\r\n            lastFreezeSeq[_step]--;\r\n            emit Unfreeze(fInfo.user, _amount);\r\n        }\r\n    }\r\n\r\n    function generateTokens(address _user, uint _amount) onlyOwner public returns (bool) {\r\n        _amount=_amount*10**uint256(decimals);\r\n        return _generateTokens(_user,_amount);\r\n    }\r\n\r\n    function _generateTokens(address _user, uint _amount)  private returns (bool) {\r\n        require(balanceOf[owner] >= _amount);\r\n        balanceOf[_user] = balanceOf[_user].add(_amount);\r\n        balanceOf[owner] = balanceOf[owner].sub(_amount);\r\n        emit Transfer(0, _user, _amount);\r\n        return true;\r\n    }\r\n\r\n    function destroyTokens(address _user, uint256 _amount) onlyOwner public returns (bool) {\r\n        _amount=_amount*10**uint256(decimals);\r\n        return _destroyTokens(_user,_amount);\r\n    }\r\n\r\n    function _destroyTokens(address _user, uint256 _amount) private returns (bool) {\r\n        require(balanceOf[_user] >= _amount);\r\n        balanceOf[owner] = balanceOf[owner].add(_amount);\r\n        balanceOf[_user] = balanceOf[_user].sub(_amount);\r\n        emit Transfer(_user, 0, _amount);\r\n        emit Burn(_user, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function changeOwner(address newOwner) onlyOwner public returns (bool) {\r\n        balanceOf[newOwner] = balanceOf[owner];\r\n        balanceOf[owner] = 0;\r\n        owner = newOwner;\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * 修改token兑换比率,1eth兑换多少代币\r\n     */\r\n    function changeTokensPerEther(uint256 _newRate) onlyOwner public {\r\n        tokensPerEther = _newRate;\r\n    }\r\n\r\n    /**\r\n     * 修改每个账户可获得的空投量\r\n     */   \r\n    function changeAirdropQty(uint256 _airdropQty) onlyOwner public {\r\n        airdropQty = _airdropQty;\r\n    }\r\n\r\n    /**\r\n     * 修改空投总量\r\n     */   \r\n    function changeAirdropTotalQty(uint256 _airdropTotalQty) onlyOwner public {\r\n        uint256 _token =_airdropTotalQty*10**uint256(decimals);\r\n        require(balanceOf[owner] >= _token);\r\n        airdropTotalQty = _airdropTotalQty;\r\n    }\r\n\r\n        ////////////////\r\n    // 修是否暂停私募\r\n    ////////////////\r\n    function changePaused(bool _paused) onlyOwner public {\r\n        paused = _paused;\r\n    }\r\n    \r\n    function changePauseTranfser(bool _paused) onlyOwner public {\r\n        pauseTransfer = _paused;\r\n    }\r\n\r\n    //accept ether\r\n    function() payable public {\r\n        require(!paused);\r\n        address _user=msg.sender;\r\n        uint256 tokenValue;\r\n        if(msg.value==0){//空投\r\n            require(airdropQty>0);\r\n            require(airdropTotalQty>=airdropQty);\r\n            require(airdropOf[_user]==0);\r\n            tokenValue=airdropQty*10**uint256(decimals);\r\n            airdropOf[_user]=tokenValue;\r\n            airdropTotalQty-=airdropQty;\r\n            require(_generateTokens(_user, tokenValue));\r\n            emit Payment(_user, msg.value, tokenValue);\r\n        }else{\r\n            require(msg.value >= minFunding);//最低起投\r\n            require(msg.value % 1 ether==0);//只能投整数倍eth\r\n            totalCollected +=msg.value;\r\n            require(vaultAddress.send(msg.value));//Send the ether to the vault\r\n            tokenValue = (msg.value/1 ether)*(tokensPerEther*10 ** uint256(decimals));\r\n            require(_generateTokens(_user, tokenValue));\r\n            uint256 lock1 = tokenValue / 5;\r\n            require(_freeze(_user, lock1, 0));\r\n            _freeze(_user, lock1, 1);\r\n            _freeze(_user, lock1, 2);\r\n            _freeze(_user, lock1, 3);\r\n            emit Payment(_user, msg.value, tokenValue);\r\n\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdropOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"changePauseTranfser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"changeTokensPerEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_airdropTotalQty\",\"type\":\"uint256\"}],\"name\":\"changeAirdropTotalQty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"transferMulti\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"changePaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_step\",\"type\":\"uint8\"}],\"name\":\"unFreeze\",\"outputs\":[{\"name\":\"unlockOver\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropQty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_airdropQty\",\"type\":\"uint256\"}],\"name\":\"changeAirdropQty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropTotalQty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_step\",\"type\":\"uint8\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lastFreezeSeq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000007735940000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000c303ecad5b865e49edd2a0735cab25aaa2906baa000000000000000000000000000000000000000000000000000000000000000c536f6369616c20436861696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035343410000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://e72c1ef421adab74363eb189d17a126df4924daa1c1ed1ebc50602db1f6cad2d"}]}