{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/* \r\n    Contract for DeltaBalances.github.io V2\r\n    Check balances for multiple ERC20 tokens in 1 batched request.\r\n    For the previous version, see 0x3150954EAE1a8a5e5EE1F1B8E8444Fe16EA9F94C\r\n    \r\n    // address 0x0 is used to indicate ETH\r\n*/\r\n\r\n// Exchange contract Interface for EtherDelta and forks\r\ncontract Exchange {\r\n  function balanceOf(address /*token*/, address /*user*/) public view returns (uint);\r\n}\r\n\r\n// ERC20 contract interface\r\ncontract Token {\r\n  function balanceOf(address /*tokenOwner*/) public view returns (uint /*balance*/);\r\n  function transfer(address /*to*/, uint /*tokens*/) public returns (bool /*success*/);\r\n}\r\n\r\ncontract DeltaBalances {\r\n    \r\n  address public admin; \r\n\r\n  function DeltaBalances() public {\r\n    admin = msg.sender;\r\n  }\r\n\r\n  // Fallback function, don't accept any ETH\r\n  function() public payable {\r\n    revert();\r\n  }\r\n\r\n  // Limit withdrawals to the contract creator\r\n  modifier isAdmin() {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n  // Backup withdraw, in case ETH gets in here\r\n  function withdraw() external isAdmin {\r\n    admin.transfer(address(this).balance);\r\n  }\r\n\r\n  // Backup withdraw, in case ERC20 tokens get in here\r\n  function withdrawToken(address token, uint amount) external isAdmin {\r\n    require(token != address(0x0) && Token(token).transfer(msg.sender, amount));\r\n  }\r\n\r\n  /* Get multiple token balances on EtherDelta (or similar exchange)\r\n    Possible error throws:\r\n        - invalid exchange contract \r\n        - using an extremely large array (gas cost too high?)\r\n        \r\n    Returns array of token balances in wei units. */\r\n  function deltaBalances(address exchange, address user,  address[] tokens) external view returns (uint[]) {\r\n    Exchange ex = Exchange(exchange);\r\n    uint[] memory balances = new uint[](tokens.length);\r\n    \r\n    for(uint i = 0; i < tokens.length; i++) {\r\n      balances[i] = ex.balanceOf(tokens[i], user);\r\n    }    \r\n    return balances;\r\n  }\r\n\r\n  /* Get multiple token balances on EtherDelta (or similar exchange)\r\n    Possible error throws:\r\n        - invalid exchange contract \r\n        - using extremely large arrays (gas cost too high?)\r\n        \r\n    Returns array of token balances in wei units.\r\n    Balances in token-first order [token0ex0, token0ex1, token0ex2, token1ex0, token1ex1 ...] */\r\n  function multiDeltaBalances(address[] exchanges, address user,  address[] tokens) external view returns (uint[]) {\r\n    uint[] memory balances = new uint[](tokens.length * exchanges.length);\r\n    \r\n    for(uint i = 0; i < exchanges.length; i++) {\r\n      Exchange ex = Exchange(exchanges[i]);\r\n        \r\n      for(uint j = 0; j < tokens.length; j++) {\r\n        balances[(j * exchanges.length) + i] = ex.balanceOf(tokens[j], user);\r\n      }\r\n    }\r\n    return balances;\r\n  }\r\n\r\n /* Check the token balance of a wallet in a token contract\r\n    Avoids possible errors:\r\n    - returns 0 on invalid exchange contract \r\n    - return 0 on non-contract address \r\n    \r\n    Mainly for internal use, but public for anyone who thinks it is useful    */\r\n  function tokenBalance(address user, address token) public view returns (uint) {\r\n    // check if token is actually a contract\r\n    uint256 tokenCode;\r\n    assembly { tokenCode := extcodesize(token) } // contract code size\r\n   \r\n   // is it a contract and does it implement balanceOf\r\n    if(tokenCode > 0 && token.call(bytes4(keccak256(\"balanceOf(address)\")), user)) {\r\n      return Token(token).balanceOf(user);\r\n    } else {\r\n      return 0; // not a valid token, return 0 instead of error\r\n    }\r\n  }\r\n\r\n /* Check the token balances of a wallet for multiple tokens\r\n    Uses tokenBalance() to be able to return, even if a token isn't valid \r\n    Possible error throws:\r\n        - extremely large arrays (gas cost too high) \r\n        \r\n    Returns array of token balances in wei units. */\r\n  function walletBalances(address user,  address[] tokens) external view returns (uint[]) {\r\n    require(tokens.length > 0);\r\n    uint[] memory balances = new uint[](tokens.length);\r\n    \r\n    for(uint i = 0; i < tokens.length; i++) {\r\n      if(tokens[i] != address(0x0)) { \r\n        balances[i] = tokenBalance(user, tokens[i]);\r\n      } else {\r\n        balances[i] = user.balance; // ETH balance    \r\n      }\r\n    }    \r\n    return balances;\r\n  }\r\n\r\n /* Combine walletBalances() and deltaBalances() to get both exchange and wallet balances for multiple tokens.\r\n    Possible error throws:\r\n        - extremely large arrays (gas cost too high) \r\n        \r\n    Returns array of token balances in wei units, 2* input length.\r\n    even index [0] is exchange balance, odd [1] is wallet balance\r\n    [tok0ex, tok0, tok1ex, tok1, .. ] */\r\n  function allBalances(address exchange, address user,  address[] tokens) external view returns (uint[]) {\r\n    Exchange ex = Exchange(exchange);\r\n    uint[] memory balances = new uint[](tokens.length * 2);\r\n    \r\n    for(uint i = 0; i < tokens.length; i++) {\r\n      uint j = i * 2;\r\n      balances[j] = ex.balanceOf(tokens[i], user);\r\n      if(tokens[i] != address(0x0)) {\r\n        balances[j + 1] = tokenBalance(user, tokens[i]);\r\n      } else {\r\n        balances[j + 1] = user.balance; // ETH balance    \r\n      }\r\n    }\r\n    return balances; \r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exchanges\",\"type\":\"address[]\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"multiDeltaBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exchange\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"deltaBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"walletBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"exchange\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"allBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"DeltaBalances","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8bb6b21431bf9e0b503978cfa7c8ce3deccfd8324c34f9bacef6aa93e0e49da0"}]}