{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/*\r\n*   Bug Bounty One\r\n*\r\n*   This contract has a bug in it. Find it.  Use it.  Drain it.\r\n*   \r\n* //*** A Game Developed By:\r\n*   _____       _         _         _ ___ _         \r\n*  |_   _|__ __| |_  _ _ (_)__ __ _| | _ (_)___ ___ \r\n*    | |/ -_) _| ' \\| ' \\| / _/ _` | |   / (_-</ -_)\r\n*    |_|\\___\\__|_||_|_||_|_\\__\\__,_|_|_|_\\_/__/\\___|\r\n*   \r\n*   Â© 2018 TechnicalRise.  Written in March 2018.  \r\n*   All rights reserved.  Do not copy, adapt, or otherwise use without permission.\r\n*   https://www.reddit.com/user/TechnicalRise/\r\n*  \r\n*/\r\n\r\n/*\r\n*  TocSick won this round on Mar-26-2018 04:11:54 AM +UTC\r\n*  You can read the solution source here:\r\n*  https://etherscan.io/address/0x7ec3570f627d1b1d1aac3e0c251a27e94e42babb#code\r\n*  And learn more about BugBounty at https://discord.gg/nbcdJ2m\r\n*/\r\n\r\ncontract secretHolder {\r\n    uint secret;\r\n    function getSecret() public returns(uint) {\r\n        return secret++;\r\n    }\r\n}\r\n\r\ncontract BugBountyOne {\r\n\r\n    mapping(address => bool) public authorizedToDrain;\r\n    mapping(address => bool) public notAllowedToDrain;\r\n    address public TechnicalRise; // TechnicalRise is not allowed to drain\r\n    address public CryptoKitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\r\n    uint private secretSeed;\r\n    secretHolder private s = new secretHolder();\r\n\r\n\tfunction BugBountyOne() public {\r\n\t    TechnicalRise = msg.sender;\r\n\t    notAllowedToDrain[TechnicalRise] = true;\r\n\t    secretSeed = uint(keccak256(now, block.coinbase));\r\n\t}\r\n\t\r\n\tfunction drainMe(uint _guess) public payable {\r\n        if(notAllowedToDrain[msg.sender]) return;\r\n\r\n        if(authorizedToDrain[msg.sender] && msg.value >= 1 finney && _guess == _prand()) {\r\n            TechnicalRise.transfer(address(this).balance / 20);\r\n            msg.sender.transfer(address(this).balance);\r\n            notAllowedToDrain[msg.sender] = true;\r\n        }\r\n    }\r\n    \r\n    function _prand() private returns (uint) {\r\n        uint seed1 = s.getSecret();\r\n        uint seed2 = uint(block.coinbase); // Get Miner's Address\r\n        uint seed3 = now; // Get the timestamp\r\n        uint seed4 = CryptoKitties.balance;\r\n        uint rand = uint(keccak256(seed1, seed2, seed3, seed4));\r\n        seed1 = secretSeed;\r\n\t    return rand;\r\n    }\r\n    \r\n    function authorizeAddress(address _addr) public payable {\r\n        if(msg.value >= 10 finney) {\r\n            authorizedToDrain[_addr] = true;\r\n        }\r\n    }\r\n    \r\n    function getSource() public view returns(string) {\r\n        if(authorizedToDrain[msg.sender]) {\r\n            return \"https://pastebin.com/9X0UreSa\";\r\n        }\r\n    }\r\n    \r\n    function () public payable {\r\n        if(msg.value >= 10 finney) {\r\n            authorizedToDrain[msg.sender] = true;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"TechnicalRise\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CryptoKitties\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"authorizeAddress\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"notAllowedToDrain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedToDrain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_guess\",\"type\":\"uint256\"}],\"name\":\"drainMe\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSource\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BugBountyOne","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7cb1b728604367390fb2170e5949cb970dbb9e55f330c40577a5498a66fcd03f"}]}