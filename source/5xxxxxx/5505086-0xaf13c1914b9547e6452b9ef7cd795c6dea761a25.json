{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner,newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface token {\r\n    function balanceOf(address who) external constant returns (uint256);\r\n\t  function transfer(address to, uint256 value) external returns (bool);\r\n\t  function getTotalSupply() external view returns (uint256);\r\n}\r\n\r\ncontract ApolloSeptemBaseCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    token public tokenReward;\r\n\t\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\t\r\n    // token address\r\n    address public tokenAddress;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n    \r\n    // ICO period (includes holidays)\r\n    uint public constant  ICO_PERIOD = 180 days;\r\n\r\n    /**\r\n    * event for token purchase logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param beneficiary who got the tokens\r\n    * @param value weis paid for purchase\r\n    * @param amount amount of tokens purchased\r\n    */\r\n    event ApolloSeptemTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event ApolloSeptemTokenSpecialPurchase(address indexed purchaser, address indexed beneficiary, uint256 amount);\r\n\r\n    function ApolloSeptemBaseCrowdsale(address _wallet, address _tokens) public{\t\t\r\n        require(_wallet != address(0));\r\n        tokenAddress = _tokens;\r\n        tokenReward = token(tokenAddress);\r\n        wallet = _wallet;\r\n\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () public payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != address(0));\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token to be substracted\r\n        uint256 tokens = computeTokens(weiAmount);\r\n\r\n        require(isWithinTokenAllocLimit(tokens));\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        // send tokens to beneficiary\r\n        tokenReward.transfer(beneficiary, tokens);\r\n\r\n        ApolloSeptemTokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        forwardFunds();\r\n    }\r\n\r\n    //transfer used for special contribuitions\r\n    function specialTransfer(address _to, uint _amount) internal returns(bool){\r\n        require(_to != address(0));\r\n        require(_amount > 0);\r\n      \r\n        // calculate token to be substracted\r\n        uint256 tokens = _amount * (10 ** 18);\r\n      \r\n        tokenReward.transfer(_to, tokens);\t\t\r\n        ApolloSeptemTokenSpecialPurchase(msg.sender, _to, tokens);\r\n      \r\n        return true;\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        return now > endTime;\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal view returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n\t\t\r\n        return withinPeriod && nonZeroPurchase && isWithinICOTimeLimit();\r\n    }\r\n    \r\n    function isWithinICOTimeLimit() internal view returns (bool) {\r\n        return now <= endTime;\r\n    }\r\n\t\r\n    function isWithinICOLimit(uint256 _tokens) internal view returns (bool) {\t\t\t\r\n        return tokenReward.balanceOf(this).sub(_tokens) >= 0;\r\n    }\r\n\r\n    function isWithinTokenAllocLimit(uint256 _tokens) internal view returns (bool) {\r\n        return (isWithinICOTimeLimit() && isWithinICOLimit(_tokens));\r\n    }\r\n\t\r\n    function sendAllToOwner(address beneficiary) internal returns(bool){\r\n        tokenReward.transfer(beneficiary, tokenReward.balanceOf(this));\r\n        return true;\r\n    }\r\n\r\n    function computeTokens(uint256 weiAmount) internal pure returns (uint256) {\r\n\t\t    // 1 ETH = 4200 APO \r\n        return weiAmount.mul(4200);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ApolloSeptemCappedCrowdsale\r\n * @dev Extension of ApolloSeptemBaseCrowdsale with a max amount of funds raised\r\n */\r\ncontract ApolloSeptemCappedCrowdsale is ApolloSeptemBaseCrowdsale{\r\n    using SafeMath for uint256;\r\n\r\n    // HARD_CAP = 30,000 ether \r\n    uint256 public constant HARD_CAP = (3 ether)*(10**4);\r\n\r\n    function ApolloSeptemCappedCrowdsale() public {}\r\n\r\n    // overriding ApolloSeptemBaseCrowdsale#validPurchase to add extra cap logic\r\n    // @return true if investors can buy at the moment\r\n    function validPurchase() internal view returns (bool) {\r\n        bool withinCap = weiRaised.add(msg.value) <= HARD_CAP;\r\n\r\n        return super.validPurchase() && withinCap;\r\n    }\r\n\r\n    // overriding Crowdsale#hasEnded to add cap logic\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        bool capReached = weiRaised >= HARD_CAP;\r\n        return super.hasEnded() || capReached;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ApolloSeptemCrowdsaleExtended\r\n * @dev This is ApolloSeptem's crowdsale contract.\r\n */\r\ncontract ApolloSeptemCrowdsaleExtended is ApolloSeptemCappedCrowdsale, Ownable {\r\n\r\n    bool public isFinalized = false;\r\n    bool public isStarted = false;\r\n\r\n    event ApolloSeptemStarted();\r\n    event ApolloSeptemFinalized();\r\n\r\n    function ApolloSeptemCrowdsaleExtended(address _wallet,address _tokensAddress) public\r\n        ApolloSeptemCappedCrowdsale()\r\n        ApolloSeptemBaseCrowdsale(_wallet,_tokensAddress) \r\n    {}\r\n\t\r\n  \t/**\r\n    * @dev Must be called to start the crowdsale. \r\n    */\r\n    function start(uint256 _weiRaised) onlyOwner public {\r\n        require(!isStarted);\r\n\r\n        starting(_weiRaised);\r\n        ApolloSeptemStarted();\r\n\r\n        isStarted = true;\r\n    }\r\n\r\n    function starting(uint256 _weiRaised) internal {\r\n        startTime = now;\r\n        weiRaised = _weiRaised;\r\n        endTime = startTime + ICO_PERIOD;\r\n    }\r\n\t\r\n    /**\r\n    * @dev Must be called after crowdsale ends, to do some extra finalization\r\n    * work. Calls the contract's finalization function.\r\n    */\r\n    function finalize() onlyOwner public {\r\n        require(!isFinalized);\r\n        require(hasEnded());\r\n\r\n        ApolloSeptemFinalized();\r\n\r\n        isFinalized = true;\r\n    }\t\r\n\t\r\n    /**\r\n    * @dev Must be called only in special cases \r\n    */\r\n    function apolloSpecialTransfer(address _beneficiary, uint _amount) onlyOwner public {\t\t \r\n        specialTransfer(_beneficiary, _amount);\r\n    }\r\n\t\r\n    /**\r\n    *@dev Must be called after the crowdsale ends, to send the remaining tokens back to owner\r\n    **/\r\n    function sendRemaningBalanceToOwner(address _tokenOwner) onlyOwner public {\r\n        require(_tokenOwner != address(0));\r\n        \r\n        sendAllToOwner(_tokenOwner);\t\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"apolloSpecialTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"sendRemaningBalanceToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiRaised\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokensAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ApolloSeptemStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ApolloSeptemFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ApolloSeptemTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ApolloSeptemTokenSpecialPurchase\",\"type\":\"event\"}]","ContractName":"ApolloSeptemCrowdsaleExtended","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000491cfe13e84f28afb385ebbafb7e085d5ef6cf7b000000000000000000000000eeb69fca351cfd49a8b977b28868d7e6edb9cd02","Library":"","SwarmSource":"bzzr://15b79ce23bfda39a337d3a8764a268d2194fe17050f214d48d6370ce05778b6e"}]}