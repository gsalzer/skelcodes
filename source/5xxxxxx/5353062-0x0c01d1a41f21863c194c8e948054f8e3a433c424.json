{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract ERC721 {\r\n    function implementsERC721() public pure returns (bool);\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract TombAccessControl {\r\n    address public ownerAddress;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerAddress);\r\n        _;\r\n    }\r\n\r\n    function withdrawBalance() external onlyOwner {\r\n        address contractAddress = this;\r\n        ownerAddress.transfer(contractAddress.balance);\r\n    }\r\n}\r\n\r\ncontract TombBase is TombAccessControl {\r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    struct Tomb {\r\n        // The timestamp from the block when this tomb came into existence.\r\n        address sculptor;\r\n        string data;\r\n    }\r\n\r\n    // An array containing all existing tomb\r\n    Tomb[] tombs;\r\n    mapping (uint => address) public tombToOwner;\r\n    mapping (address => uint) ownerTombCount;\r\n    mapping (uint => address) tombApprovals;\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        tombToOwner[_tokenId] = _to;\r\n        ownerTombCount[_to] = ownerTombCount[_to].add(1);\r\n        if (_from != address(0)) {\r\n            ownerTombCount[_from] = ownerTombCount[_from].sub(1);\r\n            delete tombApprovals[_tokenId];\r\n        }\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _createTombWithData(address _owner, string givenData) internal returns (uint) {\r\n        Tomb memory _tomb = Tomb({\r\n            data: givenData,\r\n            sculptor: _owner\r\n        });\r\n        uint256 newTombId = (tombs.push(_tomb)).sub(1);\r\n        _transfer(0, _owner, newTombId);\r\n        return newTombId;\r\n    }\r\n\r\n    function getTombByOwner(address _owner) external view returns(uint[]) {\r\n        uint[] memory result = new uint[](ownerTombCount[_owner]);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < tombs.length; i++) {\r\n            if (tombToOwner[i] == _owner) {\r\n                result[counter] = i;\r\n                counter++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getAllTombs() external view returns(uint[]) {\r\n        uint[] memory result = new uint[](tombs.length);\r\n        for (uint i = 0; i < tombs.length; i++) {\r\n            result[i] = i;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getTombDetail(uint index) external view returns(address, address, string) {\r\n        return (tombToOwner[index], tombs[index].sculptor, tombs[index].data);\r\n    }\r\n}\r\n\r\ncontract TombOwnership is ERC721, TombBase {\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public name = \"EtherFen\";\r\n    string public symbol = \"ETF\";\r\n\r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return tombs.length;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 _balance) {\r\n        return ownerTombCount[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner) {\r\n        return tombToOwner[_tokenId];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n        tombApprovals[_tokenId] = _to;\r\n        emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public\r\n    {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        require(tombApprovals[_tokenId] == msg.sender);\r\n        require(tombToOwner[_tokenId] == _from);\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require(tombToOwner[_tokenId] == msg.sender);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract TombAction is TombOwnership {\r\n    uint256 currentPrice;\r\n\r\n    function buyAndCrave(string data) payable external {\r\n        if (msg.value < currentPrice) revert();\r\n        _createTombWithData(msg.sender, data);\r\n    }\r\n \r\n    function changePrice(uint256 newPrice) external onlyOwner {\r\n        //gwei to ether\r\n        uint256 gweiUnit = 1000000000;\r\n        currentPrice = newPrice.mul(gweiUnit);\r\n    }\r\n\r\n    function getPrice() external view returns(uint256) {\r\n        return currentPrice;\r\n    }\r\n}\r\n\r\ncontract TombCore is TombAction {\r\n    function TombCore() public {\r\n        ownerAddress = msg.sender;\r\n        currentPrice = 0.02 ether;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTombDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"buyAndCrave\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tombToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllTombs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTombByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TombCore","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://63eab15e99ce79396ca201dae47531f576081147f4d5cc1d0b88cada254af7ee"}]}