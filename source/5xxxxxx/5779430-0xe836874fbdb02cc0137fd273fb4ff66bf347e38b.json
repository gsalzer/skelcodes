{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\r\n        uint256 z = x + y;\r\n        assert((z >= x) && (z >= y));\r\n        return z;\r\n    }\r\n    function safeSubtract(uint256 x, uint256 y) internal pure returns(uint256) {\r\n        assert(x >= y);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n    function safeMult(uint256 x, uint256 y) internal pure returns(uint256) {\r\n        uint256 z = x * y;\r\n        assert((x == 0)||(z/x == y));\r\n        return z;\r\n    }\r\n    function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x / y;\r\n        return z;\r\n    }\r\n}\r\n\r\ncontract LuckyBaby is Ownable, SafeMath {\r\n\r\n    ERC20 public token;\r\n    bool public activityClosed = false;\r\n    uint public maxGasPrice = 30000000000;\r\n    struct LuckyItem {\r\n        address luckyMan;\r\n        uint amount;\r\n    }\r\n\r\n    LuckyItem[] public history;\r\n\r\n    uint public tokenRewardRate;\r\n\r\n    uint public minTicket;\r\n    uint public maxTicket;\r\n    \r\n    function () payable public {\r\n        if (msg.sender == owner) {\r\n            return;   \r\n        }\r\n        require(!activityClosed);\r\n        require(tx.gasprice <= maxGasPrice);\r\n        require(msg.value >= minTicket);\r\n        require(msg.value <= maxTicket);\r\n        award(msg.value, msg.sender);\r\n    }\r\n    \r\n    function award (uint amount, address add) private {\r\n        uint random_number = (uint(block.blockhash(block.number-1)) - uint(add)) % 100;\r\n        if (random_number == 0) {\r\n            uint reward = safeMult(amount, 100);\r\n            require(address(this).balance >= reward);\r\n            add.transfer(reward);\r\n            LuckyItem memory item = LuckyItem({luckyMan:add, amount:reward});\r\n            history.push(item);\r\n        }\r\n        if (token.balanceOf(this) >= tokenRewardRate) {\r\n            token.transfer(add, tokenRewardRate);\r\n        }\r\n    }\r\n    function LuckyBaby() public {\r\n        token = ERC20(address(0x00));\r\n        tokenRewardRate = 20*10**18;\r\n        minTicket = 10**16;\r\n        maxTicket = 10**17;\r\n    }\r\n    function setToken(ERC20 newToken) onlyOwner public {\r\n        token = newToken;\r\n    }\r\n    function setMaxGasPrice(uint max) onlyOwner public {\r\n        maxGasPrice = max;\r\n    }\r\n    function setActivityState(bool close) onlyOwner public {\r\n        activityClosed = close;\r\n    }\r\n    function setTokenRewardRate(uint rate) onlyOwner public {\r\n        tokenRewardRate = rate;\r\n    }\r\n    function setMaxTicket(uint max) onlyOwner public {\r\n        maxTicket = max;\r\n    }\r\n    function withdrawToken(uint amount) onlyOwner public {\r\n        uint256 leave = token.balanceOf(this);\r\n        if (leave >= amount) {\r\n            token.transfer(owner, amount);\r\n        }\r\n    }\r\n    function withdrawEther(uint amount) onlyOwner public {\r\n       owner.transfer(amount);\r\n    }\r\n    function clear() onlyOwner public {\r\n        uint leave = token.balanceOf(this);\r\n        if (leave > 0) {\r\n            token.transfer(owner, leave);\r\n        }\r\n        uint balance = address(this).balance;\r\n        if (balance > 0) {\r\n            owner.transfer(balance);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clear\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRewardRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activityClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"close\",\"type\":\"bool\"}],\"name\":\"setActivityState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"history\",\"outputs\":[{\"name\":\"luckyMan\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setTokenRewardRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxTicket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LuckyBaby","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d3dff31f42eccb88e5e670e72a6d4c4a748bf66af7d5855c29f338a6da0de3e2"}]}