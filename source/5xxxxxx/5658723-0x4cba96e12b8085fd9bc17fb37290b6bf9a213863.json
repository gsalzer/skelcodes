{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; \r\n\r\n// similar as other games, with two changes:\r\n// A. half of your kebabs expiry date is over when you sell them so they are thrown away\r\n// B. the \"free\" 150 initial cost 0.001 eth (in line with the mining fee)\r\n\r\n// bots should have a harder time\r\n\r\ncontract EtherKebab{\r\n    uint256 public KEBABER_TO_MAKE_1KEBAB=86400;//for final version should be seconds in a day\r\n    uint256 public STARTING_KEBAB=150;\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    bool public initialized=false;\r\n    address public ceoAddress = 0xdf4703369ecE603a01e049e34e438ff74Cd96D66;\r\n    uint public ceoEtherBalance;\r\n    mapping (address => uint256) public workingKebaber;\r\n    mapping (address => uint256) public claimedKebabs;\r\n    mapping (address => uint256) public lastKebab;\r\n    mapping (address => address) public referrals;\r\n    uint256 public marketKebabs;\r\n   \r\n    function makeKebabs(address ref) public\r\n    {\r\n        require(initialized);\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender)\r\n        {\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 kebabUsed=getMyKebabs();\r\n        uint256 newKebaber=SafeMath.div(kebabUsed,KEBABER_TO_MAKE_1KEBAB);\r\n        workingKebaber[msg.sender]=SafeMath.add(workingKebaber[msg.sender],newKebaber);\r\n        claimedKebabs[msg.sender]=0;\r\n        lastKebab[msg.sender]=now;\r\n        \r\n        //send referral kebab\r\n        claimedKebabs[referrals[msg.sender]]=SafeMath.add(claimedKebabs[referrals[msg.sender]],SafeMath.div(kebabUsed,5));\r\n        \r\n        //boost market to nerf shrimp hoarding\r\n        marketKebabs=SafeMath.add(marketKebabs,SafeMath.div(kebabUsed,10));\r\n    }\r\n\r\n    function sellKebabs() public{\r\n        require(initialized);\r\n        uint256 hasKebabs=getMyKebabs();\r\n        uint256 kebabValue=calculateKebabSell(hasKebabs);\r\n        uint256 fee=calculatePercentage(kebabValue,10);\r\n        // kill one half of the owner's snails on egg sale\r\n        workingKebaber[msg.sender] = SafeMath.div(workingKebaber[msg.sender],2);\r\n        claimedKebabs[msg.sender]=0;\r\n        lastKebab[msg.sender]=now;\r\n        marketKebabs=SafeMath.add(marketKebabs,hasKebabs);\r\n        ceoEtherBalance+=fee;\r\n        msg.sender.transfer(SafeMath.sub(kebabValue,fee));\r\n    }\r\n\r\n    function buyKebabs() public payable\r\n    {\r\n        require(initialized);\r\n        uint256 kebabBought=calculateKebabBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));\r\n        kebabBought=SafeMath.sub(kebabBought,calculatePercentage(kebabBought,10));\r\n        ceoEtherBalance+=calculatePercentage(msg.value, 10);\r\n        claimedKebabs[msg.sender]=SafeMath.add(claimedKebabs[msg.sender],kebabBought);\r\n    }\r\n\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256)\r\n    {\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n\r\n    function calculateKebabSell(uint256 kebab) public view returns(uint256)\r\n    {\r\n        return calculateTrade(kebab,marketKebabs,address(this).balance);\r\n    }\r\n\r\n    function calculateKebabBuy(uint256 eth,uint256 contractBalance) public view returns(uint256)\r\n    {\r\n        return calculateTrade(eth,contractBalance,marketKebabs);\r\n    }\r\n\r\n    function calculateKebabBuySimple(uint256 eth) public view returns(uint256)\r\n    {\r\n        return calculateKebabBuy(eth, address(this).balance);\r\n    }\r\n\r\n    function calculatePercentage(uint256 amount, uint percentage) public pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,percentage),100);\r\n    }\r\n\r\n    function seedMarket(uint256 kebab) public payable\r\n    {\r\n        require(marketKebabs==0);\r\n        initialized=true;\r\n        marketKebabs=kebab;\r\n    }\r\n\r\n    function getFreeKebaber() public payable\r\n    {\r\n        require(initialized);\r\n        require(msg.value==0.001 ether); //similar to mining fee, prevents bots\r\n        ceoEtherBalance+=msg.value; //ceo gets this entrance fee\r\n        require(workingKebaber[msg.sender]==0);\r\n        lastKebab[msg.sender]=now;\r\n        workingKebaber[msg.sender]=STARTING_KEBAB;\r\n    }\r\n\r\n    function getBalance() public view returns(uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getMyKebabers() public view returns(uint256)\r\n    {\r\n        return workingKebaber[msg.sender];\r\n    }\r\n\r\n    function withDrawMoney() public { //to prevent fee to get fee\r\n        require(msg.sender == ceoAddress);\r\n        uint256 myBalance = ceoEtherBalance;\r\n        ceoEtherBalance = ceoEtherBalance - myBalance;\r\n        ceoAddress.transfer(myBalance);\r\n    }\r\n\r\n    function getMyKebabs() public view returns(uint256)\r\n    {\r\n        return SafeMath.add(claimedKebabs[msg.sender],getKebabsSincelastKebab(msg.sender));\r\n    }\r\n\r\n    function getKebabsSincelastKebab(address adr) public view returns(uint256)\r\n    {\r\n        uint256 secondsPassed=min(KEBABER_TO_MAKE_1KEBAB,SafeMath.sub(now,lastKebab[adr]));\r\n        return SafeMath.mul(secondsPassed,workingKebaber[adr]);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) \r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n  {\r\n    if (a == 0) \r\n    {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withDrawMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"calculatePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketKebabs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"workingKebaber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"kebab\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyKebabs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoEtherBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_KEBAB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"kebab\",\"type\":\"uint256\"}],\"name\":\"calculateKebabSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KEBABER_TO_MAKE_1KEBAB\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateKebabBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastKebab\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFreeKebaber\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"makeKebabs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateKebabBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyKebabers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellKebabs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedKebabs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getKebabsSincelastKebab\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyKebabs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"EtherKebab","CompilerVersion":"v0.4.25-nightly.2018.5.21+commit.e97f9b6b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://90d75b69f1377ba1a65c88f46c50d57212a6143f83e9eadac3b80af33fd7cd90"}]}