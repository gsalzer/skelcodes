{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract BFEXMini is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  // Start and end timestamps\r\n  uint public startTime;\r\n  /* uint public endTime; */\r\n\r\n  // BFEX Address where funds are collected\r\n  address public wallet;\r\n  address public feeWallet;\r\n\r\n  // Whitelist Enable\r\n  bool public whitelistEnable;\r\n\r\n  // timeLimitEnable Enable\r\n  bool public timeLimitEnable;\r\n\r\n  mapping (address => bool) public whitelist;\r\n  mapping (address => uint256) public bfexAmount; // 18 digits\r\n  mapping (address => uint256) public weiParticipate;\r\n  mapping (address => uint256) public balances;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised = 0;\r\n\r\n  // BFEX price pair with ETH\r\n  uint256 public rate;\r\n  uint256 public rateSecondTier;\r\n\r\n  // Minimum ETH to participate\r\n  uint256 public minimum;\r\n\r\n  // number of contributor\r\n  uint256 public contributor;\r\n\r\n  // Maximun number of contributor\r\n  uint256 public maxContributor;\r\n\r\n  event BFEXParticipate(\r\n    address sender,\r\n    uint256 amount\r\n  );\r\n\r\n  event WhitelistState(\r\n    address beneficiary,\r\n    bool whitelistState\r\n  );\r\n\r\n  event LogWithdrawal(\r\n    address receiver,\r\n    uint amount\r\n  );\r\n\r\n  /* solhint-disable */\r\n  constructor(address _wallet, address _feeWallet, uint256 _rate, uint256 _rateSecondTier, uint256 _minimum) public {\r\n\r\n    require(_wallet != address(0));\r\n\r\n    wallet = _wallet;\r\n    feeWallet = _feeWallet;\r\n    rate = _rate;\r\n    rateSecondTier = _rateSecondTier;\r\n    minimum = _minimum;\r\n    whitelistEnable = true;\r\n    timeLimitEnable = true;\r\n    contributor = 0;\r\n    maxContributor = 10001;\r\n    startTime = 1528625400; // 06/10/2018 @ 10:10am (UTC)\r\n  }\r\n  /* solhint-enable */\r\n\r\n  /**\r\n   * @dev Fallback function that can be used to participate in token generation event.\r\n   */\r\n  function() external payable {\r\n    getBFEX(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev set rate of Token per 1 ETH\r\n   * @param _rate of Token per 1 ETH\r\n   */\r\n  function setRate(uint _rate) public onlyOwner {\r\n    rate = _rate;\r\n  }\r\n\r\n  /**\r\n   * @dev setMinimum amount to participate\r\n   * @param _minimum minimum amount in wei\r\n   */\r\n  function setMinimum(uint256 _minimum) public onlyOwner {\r\n    minimum = _minimum;\r\n  }\r\n\r\n  /**\r\n   * @dev setMinimum amount to participate\r\n   * @param _max Maximum contributor allowed\r\n   */\r\n  function setMaxContributor(uint256 _max) public onlyOwner {\r\n    maxContributor = _max;\r\n  }\r\n\r\n  /**\r\n   * @dev Add single address to whitelist.\r\n   * @param _beneficiary Address to be added to the whitelist\r\n   */\r\n  function addToWhitelist(address _beneficiary) external onlyOwner {\r\n    whitelist[_beneficiary] = true;\r\n    emit WhitelistState(_beneficiary, true);\r\n  }\r\n\r\n  /**\r\n   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\r\n   * @param _beneficiaries Addresses to be added to the whitelist\r\n   */\r\n  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\r\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n      whitelist[_beneficiaries[i]] = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Remove single address from whitelist.\r\n   * @param _beneficiary Address to be removed from the whitelist\r\n   */\r\n  function removeFromWhiteList(address _beneficiary) external onlyOwner {\r\n    whitelist[_beneficiary] = false;\r\n    emit WhitelistState(_beneficiary, false);\r\n  }\r\n\r\n  function isWhitelist(address _beneficiary) public view returns (bool whitelisted) {\r\n    return whitelist[_beneficiary];\r\n  }\r\n\r\n  function checkBenefit(address _beneficiary) public view returns (uint256 bfex) {\r\n    return bfexAmount[_beneficiary];\r\n  }\r\n\r\n  function checkContribution(address _beneficiary) public view returns (uint256 weiContribute) {\r\n    return weiParticipate[_beneficiary];\r\n  }\r\n  /**\r\n  * @dev getBfex function\r\n  * @param _participant Address performing the bfex token participate\r\n  */\r\n  function getBFEX(address _participant) public payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    _preApprove(_participant);\r\n    require(_participant != address(0));\r\n    require(weiAmount >= minimum);\r\n\r\n    // calculate bfex token _participant will recieve\r\n    uint256 bfexToken = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    // update ETH balance\r\n    uint256 raise = weiAmount.div(1000).mul(955);\r\n    uint256 fee = weiAmount.div(1000).mul(45);\r\n    // update contributor count\r\n    contributor += 1;\r\n\r\n    balances[wallet] = balances[wallet].add(raise);\r\n    balances[feeWallet] = balances[feeWallet].add(fee);\r\n\r\n    bfexAmount[_participant] = bfexAmount[_participant].add(bfexToken);\r\n    weiParticipate[_participant] = weiParticipate[_participant].add(weiAmount);\r\n\r\n    emit BFEXParticipate(_participant, weiAmount);\r\n  }\r\n\r\n  /**\r\n  * @dev calculate token amont\r\n  * @param _weiAmount wei amont user are participate\r\n  */\r\n  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n    uint256 _rate;\r\n    if (_weiAmount >= 0.1 ether && _weiAmount < 1 ether ) {\r\n      _rate = rate;\r\n    } else if (_weiAmount >= 1 ether ) {\r\n      _rate = rateSecondTier;\r\n    }\r\n    uint256 bfex = _weiAmount.mul(_rate);\r\n    /* bfex = bfex.div(1 ether); */\r\n    return bfex;\r\n  }\r\n\r\n  /**\r\n  * @dev check if address is on the whitelist\r\n  * @param _participant address\r\n  */\r\n  function _preApprove(address _participant) internal view {\r\n    require (maxContributor >= contributor);\r\n    if (timeLimitEnable == true) {\r\n      require (now >= startTime && now <= startTime + 1 days);\r\n    }\r\n    if (whitelistEnable == true) {\r\n      require(isWhitelist(_participant));\r\n      return;\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev disable whitelist state\r\n  *\r\n  */\r\n  function disableWhitelist() public onlyOwner returns (bool whitelistState) {\r\n    whitelistEnable = false;\r\n    emit WhitelistState(msg.sender, whitelistEnable);\r\n    return whitelistEnable;\r\n  }\r\n\r\n  /**\r\n  * @dev enable whitelist state\r\n  *\r\n  */\r\n  function enableWhitelist() public onlyOwner returns (bool whitelistState) {\r\n    whitelistEnable = true;\r\n    emit WhitelistState(msg.sender, whitelistEnable);\r\n    return whitelistEnable;\r\n  }\r\n\r\n  function withdraw(uint _value) public returns (bool success) {\r\n    require(balances[msg.sender] <= _value);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    msg.sender.transfer(_value);\r\n    emit LogWithdrawal(msg.sender, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function checkBalance(address _account) public view returns (uint256 balance)  {\r\n    return balances[_account];\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"checkBenefit\",\"outputs\":[{\"name\":\"bfex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"setMinimum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"getBFEX\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weiParticipate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addManyToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"checkContribution\",\"outputs\":[{\"name\":\"weiContribute\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxContributor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateSecondTier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"name\":\"whitelisted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableWhitelist\",\"outputs\":[{\"name\":\"whitelistState\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistEnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableWhitelist\",\"outputs\":[{\"name\":\"whitelistState\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bfexAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMaxContributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLimitEnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_feeWallet\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_rateSecondTier\",\"type\":\"uint256\"},{\"name\":\"_minimum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BFEXParticipate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whitelistState\",\"type\":\"bool\"}],\"name\":\"WhitelistState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BFEXMini","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a9f2961cd69d9d23d0cdd0ef8bc7b8488d52079d000000000000000000000000210cc128fd9b8405b13aca5865cedd2cad7b62030000000000000000000000000000000000000000000000000000000000000fcf00000000000000000000000000000000000000000000000000000000000017b6000000000000000000000000000000000000000000000000016345785d8a0000","Library":"","SwarmSource":"bzzr://c6c29ea4f44f5768f2b26179426c284c04ad1f2b092be49bfda90f79f54ff7b1"}]}