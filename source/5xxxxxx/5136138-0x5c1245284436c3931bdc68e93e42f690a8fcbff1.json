{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.9;\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n}\r\n contract ContractReceiver {\r\n\r\n    struct TKN {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n\r\n\r\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\r\n      TKN memory tkn;\r\n      tkn.sender = _from;\r\n      tkn.value = _value;\r\n      tkn.data = _data;\r\n      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n      tkn.sig = bytes4(u);\r\n\r\n      /* tkn variable is analogue of msg variable of Ether transaction\r\n      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\r\n      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\r\n      *  tkn.data is data of token transaction   (analogue of msg.data)\r\n      *  tkn.sig is 4 bytes signature of function\r\n      *  if data of token transaction is a function execution\r\n      */\r\n    }\r\n}\r\ncontract ERC223 {\r\n  uint public totalSupply;\r\n  function getbalance(address who) public view returns (uint);\r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function decimals() public view returns (uint8 _decimals);\r\n  function totalSupply() public view returns (uint256 _supply);\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\ncontract SafeMath {\r\n\t uint256 constant public MAX_UINT256 =\r\n\t 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n\t function safeAdd(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n\t\t\t if (x > MAX_UINT256 - y) revert();\r\n\t\t\t return x + y;\r\n\t }\r\n\r\n\t function safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n\t\t\t if (x < y) revert();\r\n\t\t\t return x - y;\r\n\t }\r\n\r\n\t function safeMul(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n\t\t\t if (y == 0) return 0;\r\n\t\t\t if (x > MAX_UINT256 / y) revert();\r\n\t\t\t return x * y;\r\n\t }\r\n}\r\n\r\ncontract ERC223Token is ERC223, SafeMath , Ownable{\r\n\r\n mapping(address => uint) balances;\r\n mapping(address => bool) whitelist;\r\n\r\n string public name;\r\n string public symbol;\r\n uint8 public decimals = 8;\r\n uint256 public totalSupply;\r\n\r\n function ERC223Token() public {\r\n        totalSupply = 1200000000 * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balances[msg.sender] = 120000000000000000;                // Give the creator all initial tokens\r\n        name = \"Ethereum Lendo Token\";                                   // Set the name for display purposes\r\n        symbol = \"ELT\";                               // Set the symbol for display purposes\r\n        whitelist[owner] = true;\r\n    }\r\n\r\n // Function to access name of token .\r\n function name() public view returns (string _name) {\r\n\t\t return name;\r\n }\r\n // Function to access symbol of token .\r\n function symbol() public view returns (string _symbol) {\r\n\t\t return symbol;\r\n }\r\n // Function to access decimals of token .\r\n function decimals() public view returns (uint8 _decimals) {\r\n\t\t return decimals;\r\n }\r\n // Function to access total supply of tokens .\r\n function totalSupply() public view returns (uint256 _totalSupply) {\r\n\t\t return totalSupply;\r\n }\r\n\r\n\r\n // Function that is called when a user or another contract wants to transfer funds .\r\n function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\r\n\r\n\t if(isContract(_to)) {\r\n\t\t\t if (getbalance(msg.sender) < _value) revert();\r\n\t\t\t balances[msg.sender] = safeSub(getbalance(msg.sender), _value);\r\n\t\t\t balances[_to] = safeAdd(getbalance(_to), _value);\r\n\t\t\t assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\r\n\t\t\t Transfer(msg.sender, _to, _value, _data);\r\n\t\t\t return true;\r\n\t }\r\n\t else {\r\n\t\t\t return transferToAddress(_to, _value, _data);\r\n\t }\r\n}\r\n\r\n\r\n // Function that is called when a user or another contract wants to transfer funds .\r\n function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\n\r\n\t if(isContract(_to)) {\r\n\t\t\t return transferToContract(_to, _value, _data);\r\n\t }\r\n\t else {\r\n\t\t\t return transferToAddress(_to, _value, _data);\r\n\t }\r\n}\r\n\r\n // Standard function transfer similar to ERC20 transfer with no _data .\r\n // Added due to backwards compatibility reasons .\r\n function transfer(address _to, uint _value) public returns (bool success) {\r\n\r\n\t //standard function transfer similar to ERC20 transfer with no _data\r\n\t //added due to backwards compatibility reasons\r\n\t bytes memory empty;\r\n\t if(isContract(_to))\r\n\t {\r\n\t\t\t return transferToContract(_to, _value, empty);\r\n\t }\r\n\t else\r\n\t {\r\n\t\t\t return transferToAddress(_to, _value, empty);\r\n\t }\r\n}\r\n\r\n //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n function isContract(address _addr) private view returns (bool is_contract) {\r\n\t\t uint length;\r\n\t\t assembly {\r\n\t\t\t\t\t //retrieve the size of the code on target address, this needs assembly\r\n\t\t\t\t\t length := extcodesize(_addr)\r\n\t\t }\r\n\t\t return (length>0);\r\n\t }\r\n\r\n //function that is called when transaction target is an address\r\n function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n\t if (getbalance(msg.sender) < _value) revert();\r\n\t balances[msg.sender] = safeSub(getbalance(msg.sender), _value);\r\n\t balances[_to] = safeAdd(getbalance(_to), _value);\r\n\t Transfer(msg.sender, _to, _value, _data);\r\n\t return true;\r\n }\r\n\r\n //function that is called when transaction target is a contract\r\n function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n\t if (getbalance(msg.sender) < _value) revert();\r\n\t balances[msg.sender] = safeSub(getbalance(msg.sender), _value);\r\n\t balances[_to] = safeAdd(getbalance(_to), _value);\r\n\t ContractReceiver receiver = ContractReceiver(_to);\r\n\t receiver.tokenFallback(msg.sender, _value, _data);\r\n\t Transfer(msg.sender, _to, _value, _data);\r\n\t return true;\r\n}\r\n function getbalance(address _ethaddress) public view returns (uint balance) {\r\n\t return balances[_ethaddress];\r\n }\r\n function isWhiteList(address _ethaddress) public view returns (bool iswhitelist) {\r\n\t return whitelist[_ethaddress];\r\n }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethaddress\",\"type\":\"address\"}],\"name\":\"getbalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethaddress\",\"type\":\"address\"}],\"name\":\"isWhiteList\",\"outputs\":[{\"name\":\"iswhitelist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ERC223Token","CompilerVersion":"v0.4.20-nightly.2018.1.6+commit.2548228b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2cb7e5fc5efd14e973344c4e36d2d1a442b187fd98d264ed14cb770c05dedc78"}]}