{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract CellTokens {\r\n  using SafeMath for uint256;\r\n\r\n  uint8 private constant MAX_COLS = 64;\r\n  uint8 private constant MAX_ROWS = 160;\r\n  uint8 private Reserved_upRow = 8;\r\n  uint8 private Reserved_downRow = 39;\r\n  uint8 private max_merge_size = 2;\r\n  \r\n  event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n  event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  address private owner;\r\n  mapping (address => bool) private admins;\r\n  bool private erc721Enabled = false;\r\n  bool private mergeEnabled = false;\r\n  uint256 private increaseLimit1 = 0.02 ether;\r\n  uint256 private increaseLimit2 = 0.5 ether;\r\n  uint256 private increaseLimit3 = 2.0 ether;\r\n  uint256 private increaseLimit4 = 5.0 ether;\r\n  uint256 private startingPrice = 0.001 ether;\r\n  \r\n  uint256[] private listedItems;\r\n  \r\n  mapping (uint256 => address) private ownerOfItem;\r\n  mapping (uint256 => uint256) private priceOfItem;\r\n  mapping (address => string) private usernameOfAddress;\r\n  \r\n  \r\n  function CellTokens () public {\r\n    owner = msg.sender;\r\n    admins[owner] = true;\r\n  }\r\n\r\n  /* Modifiers */\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmins() {\r\n    require(admins[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  modifier onlyERC721() {\r\n    require(erc721Enabled);\r\n    _;\r\n  }\r\n  modifier onlyMergeEnable(){\r\n      require(mergeEnabled);\r\n    _;\r\n  }\r\n\r\n  /* Owner */\r\n  function setOwner (address _owner) onlyOwner() public {\r\n    owner = _owner;\r\n  }\r\n\r\n  function addAdmin (address _admin) onlyOwner() public {\r\n    admins[_admin] = true;\r\n  }\r\n\r\n  function removeAdmin (address _admin) onlyOwner() public {\r\n    delete admins[_admin];\r\n  }\r\n\r\n  // Unlocks ERC721 behaviour, allowing for trading on third party platforms.\r\n  function enableERC721 () onlyOwner() public {\r\n    erc721Enabled = true;\r\n  }\r\n  function enableMerge (bool status) onlyAdmins() public {\r\n    mergeEnabled = status;\r\n  }\r\n  function setReserved(uint8 _up,uint8 _down) onlyAdmins() public{\r\n      Reserved_upRow = _up;\r\n      Reserved_downRow = _down;\r\n  }\r\n  function setMaxMerge(uint8 num)onlyAdmins() external{\r\n      max_merge_size = num;\r\n  }  \r\n  /* Withdraw */\r\n  /*\r\n  */\r\n  function withdrawAll () onlyOwner() public {\r\n    owner.transfer(this.balance);\r\n  }\r\n\r\n  function withdrawAmount (uint256 _amount) onlyOwner() public {\r\n    owner.transfer(_amount);\r\n  }\r\n   /* Buying */\r\n  function calculateNextPrice (uint256 _price) public view returns (uint256 _nextPrice) {\r\n    if (_price < increaseLimit1) {\r\n      return _price.mul(200).div(95);\r\n    } else if (_price < increaseLimit2) {\r\n      return _price.mul(135).div(96);\r\n    } else if (_price < increaseLimit3) {\r\n      return _price.mul(125).div(97);\r\n    } else if (_price < increaseLimit4) {\r\n      return _price.mul(117).div(97);\r\n    } else {\r\n      return _price.mul(115).div(98);\r\n    }\r\n  }\r\n\r\n  function calculateDevCut (uint256 _price) public view returns (uint256 _devCut) {\r\n    if (_price < increaseLimit1) {\r\n      return _price.mul(5).div(100); // 5%\r\n    } else if (_price < increaseLimit2) {\r\n      return _price.mul(4).div(100); // 4%\r\n    } else if (_price < increaseLimit3) {\r\n      return _price.mul(3).div(100); // 3%\r\n    } else if (_price < increaseLimit4) {\r\n      return _price.mul(3).div(100); // 3%\r\n    } else {\r\n      return _price.mul(2).div(100); // 2%\r\n    }\r\n  }\r\n  \r\n  function requestMerge(uint256[] ids)onlyMergeEnable() external {\r\n      require(ids.length == 4);\r\n      require(ids[0]%(10**8)/(10**4)<max_merge_size);\r\n      require(ids[0]%(10**8)/(10**4)<max_merge_size);\r\n      require(ids[0]%(10**8)/(10**4)<max_merge_size);\r\n      require(ids[0]%(10**8)/(10**4)<max_merge_size);\r\n      require(ownerOfItem[ids[0]] == msg.sender);\r\n      require(ownerOfItem[ids[1]] == msg.sender);\r\n      require(ownerOfItem[ids[2]] == msg.sender);\r\n      require(ownerOfItem[ids[3]] == msg.sender);\r\n      require(ids[0]+ (10**12) == ids[1]);\r\n      require(ids[0]+ (10**8) == ids[2]);\r\n      require(ids[0]+ (10**8) + (10**12) == ids[3]);\r\n      \r\n      uint256 newPrice = priceOfItem[ids[0]]+priceOfItem[ids[1]]+priceOfItem[ids[2]]+priceOfItem[ids[3]];\r\n      uint256 newId = ids[0] + ids[0]%(10**8);\r\n      listedItems.push(newId);\r\n      priceOfItem[newId] = newPrice;\r\n      ownerOfItem[newId] = msg.sender;\r\n      ownerOfItem[ids[0]] = address(0);\r\n      ownerOfItem[ids[1]] = address(0);\r\n      ownerOfItem[ids[2]] = address(0);\r\n      ownerOfItem[ids[3]] = address(0);\r\n  } \r\n  \r\n  function checkIsOnSale(uint256 _ypos)public view returns(bool isOnSale){\r\n      if(_ypos<Reserved_upRow||_ypos>Reserved_downRow){\r\n          return false;\r\n      }else{\r\n          return true;\r\n      }\r\n  }\r\n  function generateId(uint256 _xpos,uint256 _ypos,uint256 _size)internal pure returns(uint256 _id){\r\n      uint256 temp= _xpos *  (10**12) + _ypos * (10**8) + _size*(10**4);\r\n      return temp;\r\n  }\r\n  function parseId(uint256 _id)internal pure returns(uint256 _x,uint256 _y,uint256 _size){\r\n      uint256 xpos = _id / (10**12);\r\n      uint256 ypos = (_id-xpos*(10**12)) / (10**8);\r\n      uint256 size = _id % (10**5) / (10**4);\r\n      return (xpos,ypos,size);\r\n  }\r\n\r\n  function setUserName(string _name)payable public{\r\n      require(msg.value >= 0.01 ether);\r\n      usernameOfAddress[msg.sender] = _name;\r\n      uint256 excess = msg.value - 0.01 ether;\r\n      if (excess > 0) {\r\n          msg.sender.transfer(excess);\r\n      }\r\n  }\r\n  function getUserName()public view returns(string name){\r\n      return usernameOfAddress[msg.sender];\r\n  }\r\n  function getUserNameOf(address _user)public view returns(string name){\r\n      return usernameOfAddress[_user];\r\n  }\r\n    function buyOld (uint256 _index) payable public {\r\n        require(_index!=0);\r\n        require(msg.value >= priceOf(_index));\r\n        require(ownerOf(_index) != msg.sender);\r\n        require(ownerOf(_index) != address(0));\r\n\r\n        uint256 price = priceOf(_index);\r\n        address oldOwner = ownerOfItem[_index];\r\n        priceOfItem[_index] = calculateNextPrice(price);\r\n\r\n        uint256 excess = msg.value.sub(price);\r\n        address newOwner = msg.sender;\r\n    \r\n    \townerOfItem[_index] = newOwner;\r\n        uint256 devCut = calculateDevCut(price);\r\n        oldOwner.transfer(price.sub(devCut));\r\n    \r\n        if (excess > 0) {\r\n          newOwner.transfer(excess);\r\n        }\r\n    }\r\n    function buyNew (uint256 _xpos,uint256 _ypos,uint256 _size) payable public {\r\n        require(checkIsOnSale(_ypos) == true);\r\n        require(_size == 1);\r\n        require(_xpos + _size <= MAX_COLS);\r\n        uint256 _itemId = generateId(_xpos,_ypos,_size);\r\n        require(priceOf(_itemId)==0);\r\n        uint256 price =startingPrice;\r\n        address oldOwner = owner;\r\n\r\n        listedItems.push(_itemId);\r\n        priceOfItem[_itemId] = calculateNextPrice(price);\r\n        uint256 excess = msg.value.sub(price);\r\n        address newOwner = msg.sender;\r\n    \r\n    \townerOfItem[_itemId] = newOwner;\r\n        uint256 devCut = calculateDevCut(price);\r\n        oldOwner.transfer(price.sub(devCut));\r\n    \r\n        if (excess > 0) {\r\n          newOwner.transfer(excess);\r\n        }\r\n    }\r\n\r\n    function MergeStatus() public view returns (bool _MergeOpen) {\r\n        return mergeEnabled;\r\n    }\r\n  /* ERC721 */\r\n  function implementsERC721() public view returns (bool _implements) {\r\n    return erc721Enabled;\r\n  }\r\n\r\n  function name() public pure returns (string _name) {\r\n    return \"Crypto10K.io\";\r\n  }\r\n\r\n  function symbol() public pure returns (string _symbol) {\r\n    return \"cells\";\r\n  }\r\n  \r\n  function totalSupply() public view returns (uint256 _totalSupply) {\r\n      uint256 total = 0;\r\n      for(uint8 i=0; i<listedItems.length; i++){\r\n          if(ownerOf(listedItems[i])!=address(0)){\r\n              total++;\r\n          }\r\n      }\r\n    return total;\r\n  }\r\n\r\n  function balanceOf (address _owner) public view returns (uint256 _balance) {\r\n    uint256 counter = 0;\r\n    for (uint8 i = 0; i < listedItems.length; i++) {\r\n      if (ownerOf(listedItems[i]) == _owner) {\r\n          counter++;\r\n      }\r\n    }\r\n    return counter;\r\n  }\r\n  \r\n  function ownerOf (uint256 _itemId) public view returns (address _owner) {\r\n    return ownerOfItem[_itemId];\r\n  }\r\n  \r\n  function cellsOf (address _owner) public view returns (uint256[] _tokenIds) {\r\n    uint256[] memory items = new uint256[](balanceOf(_owner));\r\n    uint256 itemCounter = 0;\r\n    for (uint8 i = 0; i < listedItems.length; i++) {\r\n      if (ownerOf(listedItems[i]) == _owner) {\r\n        items[itemCounter] = listedItems[i];\r\n        itemCounter += 1;\r\n      }\r\n    }\r\n    return items;\r\n  }\r\n    function getAllCellIds () public view returns (uint256[] _tokenIds) {\r\n        uint256[] memory items = new uint256[](totalSupply());\r\n        uint256 itemCounter = 0;\r\n        for (uint8 i = 0; i < listedItems.length; i++) {\r\n            if (ownerOfItem[listedItems[i]] != address(0)) {\r\n                items[itemCounter] = listedItems[i];\r\n                itemCounter += 1;\r\n            }\r\n        }\r\n        return items;\r\n    }\r\n\r\n    /* Read */\r\n    function isAdmin (address _admin) public view returns (bool _isAdmin) {\r\n        return admins[_admin];\r\n    }\r\n    \r\n    function startingPriceOf () public view returns (uint256 _startingPrice) {\r\n        return startingPrice;\r\n    }\r\n    \r\n    function priceOf (uint256 _itemId) public view returns (uint256 _price) {\r\n        return priceOfItem[_itemId];\r\n    }\r\n    \r\n    function nextPriceOf (uint256 _itemId) public view returns (uint256 _nextPrice) {\r\n        return calculateNextPrice(priceOf(_itemId));\r\n    }\r\n\r\n    function allOf (uint256 _itemId) external view returns (address _owner, uint256 _startingPrice, uint256 _price, uint256 _nextPrice, uint256 _xpos, uint256 _ypos, uint256 _size) {\r\n        uint256 xpos;\r\n        uint256 ypos;\r\n        uint256 size;\r\n        (xpos,ypos,size) = parseId(_itemId);\r\n        return (ownerOfItem[_itemId],startingPriceOf(),priceOf(_itemId),nextPriceOf(_itemId),xpos,ypos,size);\r\n    }\r\n    \r\n    function getAllCellInfo()external view returns(uint256[] _tokenIds,uint256[] _prices, address[] _owners){\r\n        uint256[] memory items = new uint256[](totalSupply());\r\n        uint256[] memory prices = new uint256[](totalSupply());\r\n        address[] memory owners = new address[](totalSupply());\r\n        uint256 itemCounter = 0;\r\n        for (uint8 i = 0; i < listedItems.length; i++) {\r\n            if (ownerOf(listedItems[i]) !=address(0)) {\r\n                items[itemCounter] = listedItems[i];\r\n                prices[itemCounter] = priceOf(listedItems[i]);\r\n                owners[itemCounter] = ownerOf(listedItems[i]);\r\n                itemCounter += 1;\r\n            }\r\n        }\r\n        return (items,prices,owners);\r\n    }\r\n    function getMaxMerge()external view returns(uint256 _maxMergeSize){\r\n      return max_merge_size;\r\n    }\r\n    function showBalance () onlyAdmins() public view returns (uint256 _ProfitBalance) {\r\n        return this.balance;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getMaxMerge\",\"outputs\":[{\"name\":\"_maxMergeSize\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"buyOld\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"_implements\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserName\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"enableMerge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"_isAdmin\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setUserName\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"allOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"name\":\"_xpos\",\"type\":\"uint256\"},{\"name\":\"_ypos\",\"type\":\"uint256\"},{\"name\":\"_size\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllCellInfo\",\"outputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"name\":\"_owners\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"nextPriceOf\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_xpos\",\"type\":\"uint256\"},{\"name\":\"_ypos\",\"type\":\"uint256\"},{\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"buyNew\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateDevCut\",\"outputs\":[{\"name\":\"_devCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"cellsOf\",\"outputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableERC721\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_up\",\"type\":\"uint8\"},{\"name\":\"_down\",\"type\":\"uint8\"}],\"name\":\"setReserved\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showBalance\",\"outputs\":[{\"name\":\"_ProfitBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllCellIds\",\"outputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"requestMerge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MergeStatus\",\"outputs\":[{\"name\":\"_MergeOpen\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ypos\",\"type\":\"uint256\"}],\"name\":\"checkIsOnSale\",\"outputs\":[{\"name\":\"isOnSale\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startingPriceOf\",\"outputs\":[{\"name\":\"_startingPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateNextPrice\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserNameOf\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"setMaxMerge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CellTokens","CompilerVersion":"v0.4.21-nightly.2018.3.5+commit.cd6ffbdf","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://563929af06958bade4367114d2bc57d1de097b80a0fd38ae278d3ccd5444e2d3"}]}