{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/// @title DigixDAO Carbon Voting contract\r\n/// @author Digix Holdings\r\n/// @notice NumberCarbonVoting contract, generalized carbon voting contract\r\ncontract NumberCarbonVoting {\r\n    uint256 public start;\r\n    uint256 public end;\r\n    struct VoteItem {\r\n        bytes32 title;\r\n        uint256 minValue;\r\n        uint256 maxValue;\r\n        mapping (address => uint256) votes;\r\n    }\r\n\r\n    mapping(uint256 => VoteItem) public voteItems;\r\n    uint256 public itemCount;\r\n\r\n    mapping(address => bool) public voted;\r\n    address[] public voters;\r\n\r\n    /// @notice Constructor, accept the number of voting items, and their infos\r\n    /// @param _itemCount Number of voting items\r\n    /// @param _titles List of titles of the voting items\r\n    /// @param _minValues List of min values for the voting items\r\n    /// @param _maxValues List of max values for the voting items\r\n    /// @param _start Start time of the voting (UTC)\r\n    /// @param _end End time of the voting (UTC)\r\n    constructor (\r\n        uint256 _itemCount,\r\n        bytes32[] _titles,\r\n        uint256[] _minValues,\r\n        uint256[] _maxValues,\r\n        uint256 _start,\r\n        uint256 _end\r\n    )\r\n        public\r\n    {\r\n        itemCount = _itemCount;\r\n        for (uint256 i=0;i<itemCount;i++) {\r\n            voteItems[i].title = _titles[i];\r\n            voteItems[i].minValue = _minValues[i];\r\n            voteItems[i].maxValue = _maxValues[i];\r\n        }\r\n        start = _start;\r\n        end = _end;\r\n    }\r\n\r\n    /// @notice Function to case vote in this carbon voting\r\n    /// @dev Every item must be voted on. Reverts if number of votes is\r\n    ///      not equal to the itemCount\r\n    /// @param _votes List of votes on the voting items\r\n    function vote(uint256[] _votes) public {\r\n        require(_votes.length == itemCount);\r\n        require(now >= start && now < end);\r\n\r\n        address voter = msg.sender;\r\n        if (!voted[voter]) {\r\n            voted[voter] = true;\r\n            voters.push(voter);\r\n        }\r\n\r\n        for (uint256 i=0;i<itemCount;i++) {\r\n            require(_votes[i] >= voteItems[i].minValue && _votes[i] <= voteItems[i].maxValue);\r\n            voteItems[i].votes[voter] = _votes[i];\r\n        }\r\n    }\r\n\r\n    function getAllVoters() public view\r\n        returns (address[] _voters)\r\n    {\r\n        _voters = voters;\r\n    }\r\n\r\n    function getVotesForItem(uint256 _itemIndex) public view\r\n        returns (address[] _voters, uint256[] _votes)\r\n    {\r\n        uint256 _voterCount = voters.length;\r\n        require(_itemIndex < itemCount);\r\n        _voters = voters;\r\n        _votes = new uint256[](_voterCount);\r\n        for (uint256 i=0;i<_voterCount;i++) {\r\n            _votes[i] = voteItems[_itemIndex].votes[_voters[i]];\r\n        }\r\n    }\r\n\r\n    function getVoteItemDetails(uint256 _itemIndex) public view\r\n        returns (bytes32 _title, uint256 _minValue, uint256 _maxValue)\r\n    {\r\n        _title = voteItems[_itemIndex].title;\r\n        _minValue = voteItems[_itemIndex].minValue;\r\n        _maxValue = voteItems[_itemIndex].maxValue;\r\n    }\r\n\r\n    function getUserVote(address _voter) public view\r\n        returns (uint256[] _votes, bool _voted)\r\n    {\r\n        _voted = voted[_voter];\r\n        _votes = new uint256[](itemCount);\r\n        for (uint256 i=0;i<itemCount;i++) {\r\n            _votes[i] = voteItems[i].votes[_voter];\r\n        }\r\n    }\r\n}\r\n\r\n/// @notice The DigixDAO Carbon Voting contract, this in turn calls the\r\n///         NumberCarbonVoting contract\r\n/// @dev  This contract will be used for carbon voting on\r\n///       minimum DGDs for Moderator status and\r\n///       Rewards pool for Moderators\r\ncontract DigixDaoCarbonVoting is NumberCarbonVoting {\r\n    constructor (\r\n        uint256 _itemCount,\r\n        bytes32[] _titles,\r\n        uint256[] _minValues,\r\n        uint256[] _maxValues,\r\n        uint256 _start,\r\n        uint256 _end\r\n    ) public NumberCarbonVoting(\r\n        _itemCount,\r\n        _titles,\r\n        _minValues,\r\n        _maxValues,\r\n        _start,\r\n        _end\r\n    ) {\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_itemIndex\",\"type\":\"uint256\"}],\"name\":\"getVotesForItem\",\"outputs\":[{\"name\":\"_voters\",\"type\":\"address[]\"},{\"name\":\"_votes\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemIndex\",\"type\":\"uint256\"}],\"name\":\"getVoteItemDetails\",\"outputs\":[{\"name\":\"_title\",\"type\":\"bytes32\"},{\"name\":\"_minValue\",\"type\":\"uint256\"},{\"name\":\"_maxValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllVoters\",\"outputs\":[{\"name\":\"_voters\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"itemCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"voted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteItems\",\"outputs\":[{\"name\":\"title\",\"type\":\"bytes32\"},{\"name\":\"minValue\",\"type\":\"uint256\"},{\"name\":\"maxValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_votes\",\"type\":\"uint256[]\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getUserVote\",\"outputs\":[{\"name\":\"_votes\",\"type\":\"uint256[]\"},{\"name\":\"_voted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_itemCount\",\"type\":\"uint256\"},{\"name\":\"_titles\",\"type\":\"bytes32[]\"},{\"name\":\"_minValues\",\"type\":\"uint256[]\"},{\"name\":\"_maxValues\",\"type\":\"uint256[]\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"DigixDaoCarbonVoting","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000005b616880000000000000000000000000000000000000000000000000000000005b8a470000000000000000000000000000000000000000000000000000000000000000024d6f64657261746f7252657761726473506f6f6c0000000000000000000000004d696e444744466f724d6f64657261746f7200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000003e8","Library":"","SwarmSource":"bzzr://17cf635c087e2109e936152cf157b24f5b65c3f6a8194d016c3641600cc577b2"}]}