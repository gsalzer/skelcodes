{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n//! The owned contract.\r\n//!\r\n//! Copyright 2016 Gavin Wood, Parity Technologies Ltd.\r\n//!\r\n//! Licensed under the Apache License, Version 2.0 (the \"License\");\r\n//! you may not use this file except in compliance with the License.\r\n//! You may obtain a copy of the License at\r\n//!\r\n//!     http://www.apache.org/licenses/LICENSE-2.0\r\n//!\r\n//! Unless required by applicable law or agreed to in writing, software\r\n//! distributed under the License is distributed on an \"AS IS\" BASIS,\r\n//! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n//! See the License for the specific language governing permissions and\r\n//! limitations under the License.\r\n\r\ncontract Owned {\r\n  modifier only_owner { require(msg.sender == owner); _; }\r\n\r\n  event NewOwner(address indexed old, address indexed current);\r\n\r\n  function setOwner(address _new) only_owner public { NewOwner(owner, _new); owner = _new; }\r\n\r\n  address public owner = msg.sender;\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n *  CanYa Coin contract\r\n */\r\n\r\n\r\ncontract ERC20TokenInterface {\r\n\r\n    /// @return The total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply);\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant public returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\ncontract CanYaCoin is ERC20TokenInterface {\r\n\r\n    string public constant name = \"CanYaCoin\";\r\n    string public constant symbol = \"CAN\";\r\n    uint256 public constant decimals = 6;\r\n    uint256 public constant totalTokens = 100000000 * (10 ** decimals);\r\n\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    function CanYaCoin() {\r\n        balances[msg.sender] = totalTokens;\r\n    }\r\n\r\n    function totalSupply() constant returns (uint256) {\r\n        return totalTokens;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        if (balances[msg.sender] >= _value) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value) {\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract AssetSplit is Owned {\r\n  using SafeMath for uint256;\r\n\r\n  CanYaCoin public CanYaCoinToken;\r\n\r\n  address public operationalAddress;\r\n  address public rewardAddress;\r\n  address public charityAddress;\r\n  address public constant burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n  uint256 public constant operationalSplitPercent = 30;\r\n  uint256 public constant rewardSplitPercent = 30;\r\n  uint256 public constant charitySplitPercent = 10;\r\n  uint256 public constant burnSplitPercent = 30;\r\n\r\n  event OperationalSplit(uint256 _split);\r\n  event RewardSplit(uint256 _split);\r\n  event CharitySplit(uint256 _split);\r\n  event BurnSplit(uint256 _split);\r\n\r\n  /// @dev Deploys the asset splitting contract\r\n  /// @param _tokenAddress Address of the CAN token contract\r\n  /// @param _operational Address of the operational holdings\r\n  /// @param _reward Address of the reward holdings\r\n  /// @param _charity Address of the charity holdings\r\n  function AssetSplit (\r\n    address _tokenAddress,\r\n    address _operational,\r\n    address _reward,\r\n    address _charity) public {\r\n    require(_tokenAddress != 0);\r\n    require(_operational != 0);\r\n    require(_reward != 0);\r\n    require(_charity != 0);\r\n    CanYaCoinToken = CanYaCoin(_tokenAddress);\r\n    operationalAddress = _operational;\r\n    rewardAddress = _reward;\r\n    charityAddress = _charity;\r\n  }\r\n\r\n  /// @dev Splits the tokens from the owner address to the defined locations\r\n  /// @param _amountToSplit Amount of tokens to redistribute from the owner\r\n  function split (uint256 _amountToSplit) public only_owner {\r\n    require(_amountToSplit != 0);\r\n    // check that we are going to have enough tokens to transfer\r\n    require(CanYaCoinToken.allowance(owner, this) >= _amountToSplit);\r\n\r\n    // now we get the amounts of tokens for each recipient\r\n    uint256 onePercentOfSplit = _amountToSplit / 100;\r\n    uint256 operationalSplitAmount = onePercentOfSplit.mul(operationalSplitPercent);\r\n    uint256 rewardSplitAmount = onePercentOfSplit.mul(rewardSplitPercent);\r\n    uint256 charitySplitAmount = onePercentOfSplit.mul(charitySplitPercent);\r\n    uint256 burnSplitAmount = onePercentOfSplit.mul(burnSplitPercent);\r\n\r\n    // double check that we're not going to try to send too many tokens\r\n    require(\r\n      operationalSplitAmount\r\n        .add(rewardSplitAmount)\r\n        .add(charitySplitAmount)\r\n        .add(burnSplitAmount)\r\n      <= _amountToSplit\r\n    );\r\n\r\n    // we now should be able to make the transfers\r\n    require(CanYaCoinToken.transferFrom(owner, operationalAddress, operationalSplitAmount));\r\n    require(CanYaCoinToken.transferFrom(owner, rewardAddress, rewardSplitAmount));\r\n    require(CanYaCoinToken.transferFrom(owner, charityAddress, charitySplitAmount));\r\n    require(CanYaCoinToken.transferFrom(owner, burnAddress, burnSplitAmount));\r\n\r\n    OperationalSplit(operationalSplitAmount);\r\n    RewardSplit(rewardSplitAmount);\r\n    CharitySplit(charitySplitAmount);\r\n    BurnSplit(burnSplitAmount);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"CanYaCoinToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardSplitPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnSplitPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operationalAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charitySplitPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountToSplit\",\"type\":\"uint256\"}],\"name\":\"split\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operationalSplitPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_operational\",\"type\":\"address\"},{\"name\":\"_reward\",\"type\":\"address\"},{\"name\":\"_charity\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_split\",\"type\":\"uint256\"}],\"name\":\"OperationalSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_split\",\"type\":\"uint256\"}],\"name\":\"RewardSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_split\",\"type\":\"uint256\"}],\"name\":\"CharitySplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_split\",\"type\":\"uint256\"}],\"name\":\"BurnSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"}]","ContractName":"AssetSplit","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001d462414fe14cf489c7a21cac78509f4bf8cd7c00000000000000000000000008c7c4814d2512af1029719803c42fe7b629d51c8000000000000000000000000685678927216df235a4a5a952efe88ed55e62ff2000000000000000000000000cb6f7fd9a84452d23d44106a8aa3f8c62520bb89","Library":"","SwarmSource":"bzzr://7eac8d6cb7041f5e3b895a44603835debabbcf64bc867069fd6f1237833b8308"}]}