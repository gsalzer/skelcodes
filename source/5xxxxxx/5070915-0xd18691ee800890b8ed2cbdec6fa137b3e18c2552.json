{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns(uint256);\r\n    \r\n    function balanceOf(address who) public view returns(uint256);\r\n    \r\n    function transfer(address to, uint256 value) public returns(bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping(address => uint256) balances;\r\n    \r\n    uint256 totalSupply_;\r\n    \r\n    /**\r\n     * @dev total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns(uint256) {\r\n        return totalSupply_;\r\n    }\r\n    \r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        \r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns(uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns(uint256);\r\n    \r\n    function transferFrom(address from, address to, uint256 value) public returns(bool);\r\n    \r\n    function approve(address spender, uint256 value) public returns(bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n    \r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n    \r\n    \r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        \r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns(uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    \r\n}\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n    \r\n    bool public paused = false;\r\n    \r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n    \r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n    \r\n    bool public mintingFinished = false;\r\n    \r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner canMint public returns(bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n    \r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns(bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns(bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns(bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n    \r\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns(bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n    \r\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns(bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n        assert(token.transfer(to, value));\r\n    }\r\n    \r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        assert(token.transferFrom(from, to, value));\r\n    }\r\n    \r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        assert(token.approve(spender, value));\r\n    }\r\n}\r\n\r\n/**\r\n * @title MavinToken\r\n * @dev ERC20 mintable token\r\n * The token will be minted by the crowdsale contract only\r\n */\r\ncontract MavinToken is MintableToken, PausableToken {\r\n    \r\n    string public constant name = \"Mavin Token\";\r\n    string public constant symbol = \"MVN\";\r\n    uint8 public constant decimals = 18;\r\n    address public creator;\r\n    \r\n    function MavinToken()\r\n    public\r\n    Ownable()\r\n    MintableToken()\r\n    PausableToken() {\r\n        creator = msg.sender;\r\n        paused = true;\r\n    }\r\n    \r\n    function finalize()\r\n    public\r\n    onlyOwner {\r\n        finishMinting(); //this can't be reactivated\r\n        unpause();\r\n    }\r\n    \r\n    \r\n    function ownershipToCreator()\r\n    public {\r\n        require(creator == msg.sender);\r\n        owner = msg.sender;\r\n    }\r\n}\r\n\r\n/**\r\n * @author OpenZeppelin\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\nlibrary Referral {\r\n    \r\n    /**\r\n     * @dev referral tree\r\n     */\r\n    event LogRef(address member, address referrer);\r\n    \r\n    struct Node {\r\n        address referrer;\r\n        bool valid;\r\n    }\r\n    \r\n    /**\r\n     * @dev tree is a collection of nodes\r\n     */\r\n    struct Tree {\r\n        mapping(address => Referral.Node) nodes;\r\n    }\r\n    \r\n    function addMember(\r\n                       Tree storage self,\r\n                       address _member,\r\n                       address _referrer\r\n                       \r\n                       )\r\n    internal\r\n    returns(bool success) {\r\n        Node memory memberNode;\r\n        memberNode.referrer = _referrer;\r\n        memberNode.valid = true;\r\n        self.nodes[_member] = memberNode;\r\n        LogRef(_member, _referrer);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract AffiliateTreeStore is Ownable {\r\n    using SafeMath for uint256;\r\n    using Referral for Referral.Tree;\r\n    \r\n    address public creator;\r\n    \r\n    Referral.Tree affiliateTree;\r\n    \r\n    function AffiliateTreeStore()\r\n    public {\r\n        creator = msg.sender;\r\n    }\r\n    \r\n    function ownershipToCreator()\r\n    public {\r\n        require(creator == msg.sender);\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function getNode(\r\n                     address _node\r\n                     )\r\n    public\r\n    view\r\n    returns(address referrer) {\r\n        Referral.Node memory n = affiliateTree.nodes[_node];\r\n        if (n.valid == true) {\r\n            return _node;\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function getReferrer(\r\n                         address _node\r\n                         )\r\n    public\r\n    view\r\n    returns(address referrer) {\r\n        Referral.Node memory n = affiliateTree.nodes[_node];\r\n        if (n.valid == true) {\r\n            return n.referrer;\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function addMember(\r\n                       address _member,\r\n                       address _referrer\r\n                       )\r\n    \r\n    public\r\n    onlyOwner\r\n    returns(bool success) {\r\n        return affiliateTree.addMember(_member, _referrer);\r\n    }\r\n    \r\n    \r\n    // Fallback Function only ETH with no functionCall\r\n    function() public {\r\n        revert();\r\n    }\r\n    \r\n}\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract TokenVesting is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20Basic;\r\n    \r\n    event Released(uint256 amount);\r\n    event Revoked();\r\n    \r\n    // beneficiary of tokens after they are released\r\n    address public beneficiary;\r\n    \r\n    uint256 public cliff;\r\n    uint256 public start;\r\n    uint256 public duration;\r\n    \r\n    bool public revocable;\r\n    \r\n    mapping(address => uint256) public released;\r\n    mapping(address => bool) public revoked;\r\n    \r\n    /**\r\n     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n     * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\r\n     * of the balance will have vested.\r\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n     * @param _duration duration in seconds of the period in which the tokens will vest\r\n     * @param _revocable whether the vesting is revocable or not\r\n     */\r\n    function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\r\n        require(_beneficiary != address(0));\r\n        require(_cliff <= _duration);\r\n        \r\n        beneficiary = _beneficiary;\r\n        revocable = _revocable;\r\n        duration = _duration;\r\n        cliff = _start.add(_cliff);\r\n        start = _start;\r\n    }\r\n    \r\n    /**\r\n     * @notice Transfers vested tokens to beneficiary.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function release(ERC20Basic token) public {\r\n        uint256 unreleased = releasableAmount(token);\r\n        \r\n        require(unreleased > 0);\r\n        \r\n        released[token] = released[token].add(unreleased);\r\n        \r\n        token.safeTransfer(beneficiary, unreleased);\r\n        \r\n        Released(unreleased);\r\n    }\r\n    \r\n    /**\r\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n     * remain in the contract, the rest are returned to the owner.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function revoke(ERC20Basic token) public onlyOwner {\r\n        require(revocable);\r\n        require(!revoked[token]);\r\n        \r\n        uint256 balance = token.balanceOf(this);\r\n        \r\n        uint256 unreleased = releasableAmount(token);\r\n        uint256 refund = balance.sub(unreleased);\r\n        \r\n        revoked[token] = true;\r\n        \r\n        token.safeTransfer(owner, refund);\r\n        \r\n        Revoked();\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function releasableAmount(ERC20Basic token) public view returns(uint256) {\r\n        return vestedAmount(token).sub(released[token]);\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculates the amount that has already vested.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function vestedAmount(ERC20Basic token) public view returns(uint256) {\r\n        uint256 currentBalance = token.balanceOf(this);\r\n        uint256 totalBalance = currentBalance.add(released[token]);\r\n        \r\n        if (now < cliff) {\r\n            return 0;\r\n        } else if (now >= start.add(duration) || revoked[token]) {\r\n            return totalBalance;\r\n        } else {\r\n            return totalBalance.mul(now.sub(start)).div(duration);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract AffiliateManager is Pausable {\r\n    using SafeMath for uint256;\r\n    \r\n    AffiliateTreeStore public affiliateTree; // treeStorage\r\n    \r\n    // The token being sold\r\n    MavinToken public token;\r\n    // endTime\r\n    uint256 public endTime;\r\n    // hardcap\r\n    uint256 public cap;\r\n    // address where funds are collected\r\n    address public vault;\r\n    // how many token units a buyer gets per eth\r\n    uint256 public mvnpereth;\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n    // min contribution amount\r\n    uint256 public minAmountWei;\r\n    // creator\r\n    address creator;\r\n    \r\n    \r\n    function AffiliateManager(\r\n                              address _token,\r\n                              address _treestore\r\n                              )\r\n    public {\r\n        creator = msg.sender;\r\n        token = MavinToken(_token);\r\n        endTime = 1536969600; // Sat Sep 15 01:00:00 2018 GMT+1\r\n        vault = 0xD0b40D3bfd8DFa6ecC0b357555039C3ee1C11202;\r\n        mvnpereth = 100;\r\n        \r\n        minAmountWei = 0.1 ether;\r\n        cap = 32000 ether;\r\n        \r\n        affiliateTree = AffiliateTreeStore(_treestore);\r\n    }\r\n    \r\n    /// Log buyTokens\r\n    event LogBuyTokens(address owner, uint256 tokens, uint256 tokenprice);\r\n    /// Log LogId\r\n    event LogId(address owner, uint48 id);\r\n    \r\n    modifier onlyNonZeroAddress(address _a) {\r\n        require(_a != address(0));\r\n        _;\r\n    }\r\n    \r\n    modifier onlyDiffAdr(address _referrer, address _sender) {\r\n        require(_referrer != _sender);\r\n        _;\r\n    }\r\n    \r\n    function initAffiliate() public onlyOwner returns(bool) {\r\n        //create first 2 root nodes\r\n        bool success1 = affiliateTree.addMember(vault, 0); //root\r\n        bool success2 = affiliateTree.addMember(msg.sender, vault); //root+1\r\n        return success1 && success2;\r\n    }\r\n    \r\n    \r\n    // execute after all crowdsale tokens are minted\r\n    function finalizeCrowdsale() public onlyOwner returns(bool) {\r\n        \r\n        pause();\r\n        \r\n        uint256 totalSupply = token.totalSupply();\r\n        \r\n        // 6 month cliff, 12 month total\r\n        TokenVesting team = new TokenVesting(vault, now, 24 weeks, 1 years, false);\r\n        uint256 teamTokens = totalSupply.div(60).mul(16);\r\n        token.mint(team, teamTokens);\r\n        \r\n        uint256 reserveTokens = totalSupply.div(60).mul(18);\r\n        token.mint(vault, reserveTokens);\r\n        \r\n        uint256 advisoryTokens = totalSupply.div(60).mul(6);\r\n        token.mint(vault, advisoryTokens);\r\n        \r\n        token.transferOwnership(creator);\r\n    }\r\n    \r\n    function validPurchase() internal constant returns(bool) {\r\n        bool withinCap = weiRaised.add(msg.value) <= cap;\r\n        bool withinTime = endTime > now;\r\n        bool withinMinAmount = msg.value >= minAmountWei;\r\n        return withinCap && withinTime && withinMinAmount;\r\n    }\r\n    \r\n    function presaleMint(\r\n                         address _beneficiary,\r\n                         uint256 _amountmvn,\r\n                         uint256 _mvnpereth\r\n                         \r\n                         )\r\n    public\r\n    onlyOwner\r\n    returns(bool) {\r\n        uint256 _weiAmount = _amountmvn.div(_mvnpereth);\r\n        require(_beneficiary != address(0));\r\n        token.mint(_beneficiary, _amountmvn);\r\n        // update state\r\n        weiRaised = weiRaised.add(_weiAmount);\r\n        \r\n        LogBuyTokens(_beneficiary, _amountmvn, _mvnpereth);\r\n        return true;\r\n    }\r\n    \r\n    function joinManual(\r\n                        address _referrer,\r\n                        uint48 _id\r\n                        )\r\n    public\r\n    payable\r\n    whenNotPaused\r\n    onlyDiffAdr(_referrer, msg.sender) // prevent selfreferal\r\n    onlyDiffAdr(_referrer, this) // prevent reentrancy\r\n    returns(bool) {\r\n        LogId(msg.sender, _id);\r\n        return join(_referrer);\r\n    }\r\n    \r\n    \r\n    function join(\r\n                  address _referrer\r\n                  )\r\n    public\r\n    payable\r\n    whenNotPaused\r\n    onlyDiffAdr(_referrer, msg.sender) // prevent selfreferal\r\n    onlyDiffAdr(_referrer, this) // prevent reentrancy\r\n    returns(bool success)\r\n    \r\n    {\r\n        uint256 weiAmount = msg.value;\r\n        require(_referrer != vault);\r\n        require(validPurchase()); //respect min amount / cap / date\r\n        \r\n        //get existing sender node\r\n        address senderNode = affiliateTree.getNode(msg.sender);\r\n        \r\n        // if senderNode already exists use same referrer\r\n        if (senderNode != address(0)) {\r\n            _referrer =  affiliateTree.getReferrer(msg.sender);\r\n        }\r\n        \r\n        //get referrer\r\n        address referrerNode = affiliateTree.getNode(_referrer);\r\n        //referrer must exist\r\n        require(referrerNode != address(0));\r\n        \r\n        //get referrer of referrer\r\n        address topNode = affiliateTree.getReferrer(_referrer);\r\n        //referrer of referrer must exist\r\n        require(topNode != address(0));\r\n        require(topNode != msg.sender); //selfreferal\r\n        \r\n        \r\n        // Add sender to the tree\r\n        if (senderNode == address(0)) {\r\n            affiliateTree.addMember(msg.sender, _referrer);\r\n        }\r\n        \r\n        success = buyTokens(msg.sender, weiAmount);\r\n        \r\n        uint256 parentAmount = 0;\r\n        uint256 rootAmount = 0;\r\n        \r\n        //p1\r\n        parentAmount = weiAmount.div(100).mul(5); //5% commision for p1\r\n        referrerNode.transfer(parentAmount);\r\n        buyTokens(referrerNode, parentAmount);\r\n        \r\n        //p2\r\n        rootAmount = weiAmount.div(100).mul(3); //3% commision for p2\r\n        buyTokens(topNode, rootAmount);\r\n        topNode.transfer(rootAmount);\r\n        \r\n        vault.transfer(weiAmount.sub(parentAmount).sub(rootAmount)); //rest goes to vault\r\n        \r\n        return success;\r\n    }\r\n    \r\n    function buyTokens(\r\n                       address _beneficiary,\r\n                       uint256 _weiAmount\r\n                       )\r\n    internal\r\n    returns(bool success) {\r\n        require(_beneficiary != address(0));\r\n        uint256 tokens = 0;\r\n        \r\n        tokens = _weiAmount.mul(mvnpereth);\r\n        \r\n        // update state\r\n        weiRaised = weiRaised.add(_weiAmount);\r\n        success = token.mint(_beneficiary, tokens);\r\n        \r\n        LogBuyTokens(_beneficiary, tokens, mvnpereth);\r\n        return success;\r\n    }\r\n    \r\n    function updateMVNRate(uint256 _value) onlyOwner public returns(bool success) {\r\n        mvnpereth = _value;\r\n        return true;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public constant returns(uint256 balance) {\r\n        return token.balanceOf(_owner);\r\n    }\r\n    \r\n    // Fallback Function only ETH with no functionCall\r\n    function() public {\r\n        revert();\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"affiliateTree\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"join\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmountWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateMVNRate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initAffiliate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrer\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint48\"}],\"name\":\"joinManual\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mvnpereth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amountmvn\",\"type\":\"uint256\"},{\"name\":\"_mvnpereth\",\"type\":\"uint256\"}],\"name\":\"presaleMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_treestore\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenprice\",\"type\":\"uint256\"}],\"name\":\"LogBuyTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint48\"}],\"name\":\"LogId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AffiliateManager","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009b147157ca9cbff7e762c96eda51f200af9f24b00000000000000000000000007173485eaf9cafa8d61921e5127e3ebb59eb9119","Library":"","SwarmSource":"bzzr://8dbf189e4143696f59b92ed9f5f9a80038328dc973d945a75a8484979e69cf98"}]}