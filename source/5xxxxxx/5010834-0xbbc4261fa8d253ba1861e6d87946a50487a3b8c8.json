{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) public;\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/*\r\n * Haltable\r\n *\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\r\n *\r\n *\r\n * Originally envisioned in FirstBlood ICO contract.\r\n */\r\ncontract Haltable is Ownable {\r\n    bool public halted;\r\n\r\n    modifier stopInEmergency {\r\n        if (halted) revert();\r\n        _;\r\n    }\r\n\r\n    modifier onlyInEmergency {\r\n        if (!halted) revert();\r\n        _;\r\n    }\r\n\r\n    // called by the owner on emergency, triggers stopped state\r\n    function halt() external onlyOwner {\r\n        halted = true;\r\n    }\r\n\r\n    // called by the owner on end of emergency, returns to normal state\r\n    function unhalt() external onlyOwner onlyInEmergency {\r\n        halted = false;\r\n    }\r\n\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract Crowdsale  is Haltable {\r\n    using SafeMath for uint256;\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n    // Crowdsale end time has been changed\r\n    event EndsAtChanged(uint deadline);\r\n    event CSClosed(bool crowdsaleClosed);\r\n\r\n    address public beneficiary;\r\n    uint public amountRaised;\r\n    uint public amountAvailable;\r\n    uint public deadline;\r\n    uint public price;\r\n    token public tokenReward;\r\n    mapping(address => uint256) public balanceOf;\r\n    bool public crowdsaleClosed = false;\r\n\r\n    uint public numTokensLeft;\r\n    uint public numTokensSold;\r\n    /* the UNIX timestamp end date of the crowdsale */\r\n    //    uint public newDeadline;\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n    function Crowdsale(\r\n        address ifSuccessfulSendTo,\r\n        address addressOfTokenUsedAsReward,\r\n        uint unixTimestampEnd,\r\n        uint initialTokenSupply\r\n    ) public {\r\n        owner = msg.sender;\r\n\r\n        if(unixTimestampEnd == 0) {\r\n            revert();\r\n        }\r\n        uint dec = 1000000000;\r\n        numTokensLeft = initialTokenSupply.mul(dec);\r\n        deadline = unixTimestampEnd;\r\n\r\n        // Don't mess the dates\r\n        if(now >= deadline) {\r\n            revert();\r\n        }\r\n\r\n        beneficiary = ifSuccessfulSendTo;\r\n        price = 0.000000000000166666 ether;\r\n        tokenReward = token(addressOfTokenUsedAsReward);\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () public stopInEmergency payable {\r\n        require(!crowdsaleClosed);\r\n        uint amount = msg.value;\r\n        uint leastAmount = 600000000000;\r\n        uint numTokens = amount.div(price);\r\n\r\n        uint stageOne = 1520856000;// 03/12/2018 @ 12:00pm (UTC) -- 40% bonus before\r\n        uint stageTwo = 1521460800;// 03/19/2018 @ 12:00pm (UTC) -- 20% bonus before\r\n        uint stageThree = 1522065600;// 03/26/2018 @ 12:00pm (UTC) -- 15%  bonus before\r\n        uint stageFour = 1522670400;// 04/02/2018 @ 12:00pm (UTC) -- 10%  bonus before\r\n        // end date -- 1523275199 @ 04/09/2018 @ 11:59am (UTC)  -- 0%   bonus before\r\n\r\n        uint numBonusTokens;\r\n        uint totalNumTokens;\r\n\r\n        /////////////////////////////\r\n        //  Next step is to add in a check to see once the new price goes live\r\n        ////////////////////////////\r\n        if(now < stageOne)\r\n        {\r\n            //  40% Presale bonus\r\n            numBonusTokens = (numTokens.div(100)).mul(40);\r\n            totalNumTokens = numTokens.add(numBonusTokens);\r\n        }\r\n        else if(now < stageTwo)\r\n        {\r\n            //  20% bonus\r\n            numBonusTokens = (numTokens.div(100)).mul(20);\r\n            totalNumTokens = numTokens.add(numBonusTokens);\r\n        }\r\n        else if(now < stageThree){\r\n            //  15% bonus\r\n            numBonusTokens = (numTokens.div(100)).mul(15);\r\n            totalNumTokens = numTokens.add(numBonusTokens);\r\n        }\r\n        else if(now < stageFour){\r\n            //  10% bonus\r\n            numBonusTokens = (numTokens.div(100)).mul(10);\r\n            totalNumTokens = numTokens.add(numBonusTokens);\r\n        }\r\n        else{\r\n            numBonusTokens = 0;\r\n            totalNumTokens = numTokens.add(numBonusTokens);\r\n        }\r\n\r\n        // do not sell less than 100 tokens at a time.\r\n        if (numTokens <= leastAmount) {\r\n            revert();\r\n        } else {\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\r\n            amountRaised = amountRaised.add(amount);\r\n            amountAvailable = amountAvailable.add(amount);\r\n            numTokensSold = numTokensSold.add(totalNumTokens);\r\n            numTokensLeft = numTokensLeft.sub(totalNumTokens);\r\n            tokenReward.transfer(msg.sender, totalNumTokens);\r\n            FundTransfer(msg.sender, amount, true);\r\n        }\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////\r\n    //     * Withdraw received funds\r\n    ///////////////////////////////////////////////////////////\r\n    function safeWithdrawal() public onlyOwner{\r\n        if(amountAvailable < 0)\r\n        {\r\n            revert();\r\n        }\r\n        else\r\n        {\r\n            uint amtA = amountAvailable;\r\n            amountAvailable = 0;\r\n            beneficiary.transfer(amtA);\r\n        }\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////\r\n    // Withdraw tokens\r\n    ///////////////////////////////////////////////////////////\r\n    function withdrawTheUnsoldTokens() public onlyOwner afterDeadline{\r\n        if(numTokensLeft <= 0)\r\n        {\r\n            revert();\r\n        }\r\n        else\r\n        {\r\n            uint ntl = numTokensLeft;\r\n            numTokensLeft=0;\r\n            tokenReward.transfer(beneficiary, ntl);\r\n            crowdsaleClosed = true;\r\n            CSClosed(crowdsaleClosed);\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////\r\n    // give the crowdsale a new newDeadline\r\n    ////////////////////////////////////////////////////////////\r\n\r\n    modifier afterDeadline() { if (now >= deadline) _; }\r\n\r\n    function setDeadline(uint time) public onlyOwner {\r\n        if(now > time || msg.sender==beneficiary)\r\n        {\r\n            revert(); // Don't change past\r\n        }\r\n        deadline = time;\r\n        EndsAtChanged(deadline);\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setDeadline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTheUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numTokensLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ifSuccessfulSendTo\",\"type\":\"address\"},{\"name\":\"addressOfTokenUsedAsReward\",\"type\":\"address\"},{\"name\":\"unixTimestampEnd\",\"type\":\"uint256\"},{\"name\":\"initialTokenSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"EndsAtChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"crowdsaleClosed\",\"type\":\"bool\"}],\"name\":\"CSClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001cf2ec1151b30a997e1a85b299f4a6a9f80a329b000000000000000000000000f444cd92e09cc8b2a23cd2eecb3c1e4cc8da6958000000000000000000000000000000000000000000000000000000005acb55bf0000000000000000000000000000000000000000000000000000000007270e00","Library":"","SwarmSource":"bzzr://9eb5869ef56f589c13425bc57f63ac5719fea8c053960891c668137ae6542f67"}]}