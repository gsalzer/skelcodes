{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SimpleToken\r\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\ncontract OpportyToken is StandardToken {\r\n\r\n  string public constant name = \"OpportyToken\";\r\n  string public constant symbol = \"OPP\";\r\n  uint8 public constant decimals = 18;\r\n\r\n  uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\r\n\r\n  /**\r\n   * @dev Contructor that gives msg.sender all of existing tokens.\r\n   */\r\n  function OpportyToken() public {\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n    Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract OpportyMonthHold is Pausable {\r\n  using SafeMath for uint256;\r\n  OpportyToken public token;\r\n\r\n  uint public holdPeriod;\r\n  address public multisig;\r\n\r\n  // start and end timestamps where investments are allowed\r\n  uint public startDate;\r\n  uint public endDate;\r\n  uint public endSaleDate;\r\n\r\n  uint private price;\r\n\r\n  uint public minimalContribution;\r\n\r\n  // total ETH collected\r\n  uint public ethRaised;\r\n\r\n  enum SaleState { NEW, SALE, ENDED }\r\n  SaleState public state;\r\n\r\n  mapping (uint => address) private assetOwners;\r\n  mapping (address => uint) private assetOwnersIndex;\r\n  uint public assetOwnersIndexes;\r\n\r\n  struct Bonus {\r\n    uint minAmount;\r\n    uint maxAmount;\r\n    uint8 bonus;\r\n  }\r\n\r\n  Bonus[]  bonuses;\r\n\r\n  struct Holder {\r\n    bool isActive;\r\n    uint tokens;\r\n    uint holdPeriodTimestamp;\r\n    bool withdrawed;\r\n  }\r\n\r\n  mapping(address => Holder) public holderList;\r\n  mapping(uint => address) private holderIndexes;\r\n  uint private holderIndex;\r\n\r\n\r\n  event TokensTransfered(address contributor , uint amount);\r\n  event Hold(address sender, address contributor, uint amount, uint8 holdPeriod);\r\n  event ManualChangeStartDate(uint beforeDate, uint afterDate);\r\n  event ManualChangeEndDate(uint beforeDate, uint afterDate);\r\n  event ChangeMinAmount(uint oldMinAmount, uint minAmount);\r\n  event BonusChanged(uint minAmount, uint maxAmount, uint8 newBonus);\r\n  event HolderAdded(address addr, uint contribution, uint tokens, uint holdPeriodTimestamp);\r\n  event FundsTransferredToMultisig(address multisig, uint value);\r\n  event SaleNew();\r\n  event SaleStarted();\r\n  event SaleEnded();\r\n  event ManualPriceChange(uint beforePrice, uint afterPrice);\r\n  event HoldChanged(address holder, uint tokens, uint timest);\r\n  event TokenChanged(address newAddress);\r\n\r\n  modifier onlyAssetsOwners() {\r\n    require(assetOwnersIndex[msg.sender] > 0 || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function OpportyMonthHold(address walletAddress, uint start, uint end, uint endSale) public {\r\n    holdPeriod = 30 days;\r\n    state = SaleState.NEW;\r\n\r\n    startDate = start;\r\n    endDate   = end;\r\n    endSaleDate = endSale;\r\n    price = 0.0002 * 1 ether;\r\n    multisig = walletAddress;\r\n    minimalContribution = 0.3 * 1 ether;\r\n\r\n    bonuses.push(Bonus({minAmount: 0, maxAmount: 50, bonus: 25 }));\r\n    bonuses.push(Bonus({minAmount: 50, maxAmount: 100, bonus: 30 }));\r\n    bonuses.push(Bonus({minAmount: 100, maxAmount: 250, bonus: 35 }));\r\n    bonuses.push(Bonus({minAmount: 250, maxAmount: 500, bonus: 40 }));\r\n    bonuses.push(Bonus({minAmount: 500, maxAmount: 1000, bonus: 45 }));\r\n    bonuses.push(Bonus({minAmount: 1000, maxAmount: 5000, bonus: 55 }));\r\n    bonuses.push(Bonus({minAmount: 5000, maxAmount: 99999999, bonus: 70 }));\r\n  }\r\n\r\n  function changeBonus(uint minAmount, uint maxAmount, uint8 newBonus) public {\r\n    bool find = false;\r\n    for (uint i = 0; i < bonuses.length; ++i) {\r\n      if (bonuses[i].minAmount == minAmount && bonuses[i].maxAmount == maxAmount ) {\r\n        bonuses[i].bonus = newBonus;\r\n        find = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!find) {\r\n      bonuses.push(Bonus({minAmount:minAmount, maxAmount: maxAmount, bonus:newBonus}));\r\n    }\r\n    BonusChanged(minAmount, maxAmount, newBonus);\r\n  }\r\n\r\n  function getBonus(uint am) public view returns(uint8) {\r\n    uint8 bon = 0;\r\n    am /= 10 ** 18;\r\n    \r\n    for (uint i = 0; i < bonuses.length; ++i) {\r\n        if (am >= bonuses[i].minAmount && am<bonuses[i].maxAmount) \r\n          bon = bonuses[i].bonus;\r\n    }\r\n\r\n    return bon;\r\n  }\r\n\r\n  function() public payable {\r\n    require(state == SaleState.SALE);\r\n    require(msg.value >= minimalContribution);\r\n    require(now >= startDate);\r\n\r\n    if (now > endDate) {\r\n      state = SaleState.ENDED;\r\n      msg.sender.transfer(msg.value);\r\n      SaleEnded();\r\n      return ;\r\n    }\r\n\r\n    uint tokenAmount = msg.value.div(price);\r\n    tokenAmount += tokenAmount.mul(getBonus(msg.value)).div(100);\r\n    tokenAmount *= 10 ** 18;\r\n\r\n    uint holdTimestamp = endSaleDate.add(holdPeriod);\r\n    addHolder(msg.sender, tokenAmount, holdTimestamp);\r\n    HolderAdded(msg.sender, msg.value, tokenAmount, holdTimestamp);\r\n    \r\n    forwardFunds();\r\n    \r\n  }\r\n\r\n  function addHolder(address holder, uint tokens, uint timest) internal {\r\n    if (holderList[holder].isActive == false) {\r\n        holderList[holder].isActive = true;\r\n        holderList[holder].tokens = tokens;\r\n        holderList[holder].holdPeriodTimestamp = timest;\r\n        holderIndexes[holderIndex] = holder;\r\n        holderIndex++;\r\n    } else {\r\n        holderList[holder].tokens += tokens;\r\n        holderList[holder].holdPeriodTimestamp = timest;\r\n    }\r\n  }\r\n\r\n  function changeHold(address holder, uint tokens, uint timest) onlyAssetsOwners public {\r\n      if (holderList[holder].isActive == true) {\r\n        holderList[holder].tokens = tokens;\r\n        holderList[holder].holdPeriodTimestamp = timest;\r\n        HoldChanged(holder, tokens, timest);\r\n      }\r\n  }\r\n\r\n  function forwardFunds() internal {\r\n    ethRaised += msg.value;\r\n    multisig.transfer(msg.value);\r\n    FundsTransferredToMultisig(multisig, msg.value);\r\n  }\r\n\r\n  function newPresale() public onlyOwner {\r\n    state = SaleState.NEW;\r\n    SaleNew();\r\n  }\r\n\r\n  function startPresale() public onlyOwner {\r\n    state = SaleState.SALE;\r\n    SaleStarted();\r\n  }\r\n\r\n  function endPresale() public onlyOwner {\r\n    state = SaleState.ENDED;\r\n    SaleEnded();\r\n  }\r\n\r\n  function addAssetsOwner(address _owner) public onlyOwner {\r\n    assetOwnersIndexes++;\r\n    assetOwners[assetOwnersIndexes] = _owner;\r\n    assetOwnersIndex[_owner] = assetOwnersIndexes;\r\n  }\r\n\r\n  function removeAssetsOwner(address _owner) public onlyOwner {\r\n    uint index = assetOwnersIndex[_owner];\r\n    delete assetOwnersIndex[_owner];\r\n    delete assetOwners[index];\r\n    assetOwnersIndexes--;\r\n  }\r\n\r\n  function getAssetsOwners(uint _index) onlyOwner public constant returns (address) {\r\n    return assetOwners[_index];\r\n  }\r\n\r\n  function getBalance() public constant returns (uint) {\r\n    return token.balanceOf(this);\r\n  }\r\n\r\n  function returnTokens(uint nTokens) public onlyOwner returns (bool) {\r\n    require(nTokens <= getBalance());\r\n    token.transfer(msg.sender, nTokens);\r\n    TokensTransfered(msg.sender, nTokens);\r\n    return true;\r\n  }\r\n\r\n  function unlockTokens() public returns (bool) {\r\n    require(holderList[msg.sender].isActive);\r\n    require(!holderList[msg.sender].withdrawed);\r\n    require(now >= holderList[msg.sender].holdPeriodTimestamp);\r\n\r\n    token.transfer(msg.sender, holderList[msg.sender].tokens); \r\n    holderList[msg.sender].withdrawed = true;\r\n    TokensTransfered(msg.sender, holderList[msg.sender].tokens);\r\n    return true;\r\n  }\r\n\r\n  function setStartDate(uint date) public onlyOwner {\r\n    uint oldStartDate = startDate;\r\n    startDate = date;\r\n    ManualChangeStartDate(oldStartDate, date);\r\n  }\r\n\r\n  function setEndSaleDate(uint date) public onlyOwner {\r\n    uint oldEndDate = endSaleDate;\r\n    endSaleDate = date;\r\n    ManualChangeEndDate(oldEndDate, date);\r\n  }\r\n\r\n  function setEndDate(uint date) public onlyOwner {\r\n    uint oldEndDate = endDate;\r\n    endDate = date;\r\n    ManualChangeEndDate(oldEndDate, date);\r\n  }\r\n  \r\n  function setPrice(uint newPrice) public onlyOwner {\r\n    uint oldPrice = price;\r\n    price = newPrice;\r\n    ManualPriceChange(oldPrice, newPrice);\r\n  }\r\n\r\n  function setMinimalContribution(uint minimumAmount) public onlyOwner {\r\n    uint oldMinAmount = minimalContribution;\r\n    minimalContribution = minimumAmount;\r\n    ChangeMinAmount(oldMinAmount, minimalContribution);\r\n  }\r\n\r\n  function batchChangeHoldPeriod(uint holdedPeriod) public onlyAssetsOwners {\r\n    for (uint i = 0; i < holderIndex; ++i) {\r\n        holderList[holderIndexes[i]].holdPeriodTimestamp = holdedPeriod;\r\n        HoldChanged(holderIndexes[i], holderList[holderIndexes[i]].tokens, holdedPeriod);\r\n    }\r\n  }\r\n\r\n  function setToken(address newToken) public onlyOwner {\r\n    token = OpportyToken(newToken);\r\n    TokenChanged(token);\r\n  }\r\n\r\n  function getTokenAmount() public view returns (uint) {\r\n    uint tokens = 0;\r\n    for (uint i = 0; i < holderIndex; ++i) {\r\n        if (!holderList[holderIndexes[i]].withdrawed) {\r\n          tokens += holderList[holderIndexes[i]].tokens;\r\n        }\r\n    }\r\n    return tokens;\r\n  }\r\n\r\n  function getEthRaised() constant external returns (uint) {\r\n    return ethRaised;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderList\",\"outputs\":[{\"name\":\"isActive\",\"type\":\"bool\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"holdPeriodTimestamp\",\"type\":\"uint256\"},{\"name\":\"withdrawed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minimumAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimalContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getAssetsOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"setEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nTokens\",\"type\":\"uint256\"}],\"name\":\"returnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"am\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minAmount\",\"type\":\"uint256\"},{\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"name\":\"newBonus\",\"type\":\"uint8\"}],\"name\":\"changeBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"setEndSaleDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeAssetsOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"setStartDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"newPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetOwnersIndexes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endSaleDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"timest\",\"type\":\"uint256\"}],\"name\":\"changeHold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holdedPeriod\",\"type\":\"uint256\"}],\"name\":\"batchChangeHoldPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addAssetsOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"endSale\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"holdPeriod\",\"type\":\"uint8\"}],\"name\":\"Hold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beforeDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"afterDate\",\"type\":\"uint256\"}],\"name\":\"ManualChangeStartDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beforeDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"afterDate\",\"type\":\"uint256\"}],\"name\":\"ManualChangeEndDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldMinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"ChangeMinAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBonus\",\"type\":\"uint8\"}],\"name\":\"BonusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contribution\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"holdPeriodTimestamp\",\"type\":\"uint256\"}],\"name\":\"HolderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"multisig\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FundsTransferredToMultisig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleNew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beforePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"afterPrice\",\"type\":\"uint256\"}],\"name\":\"ManualPriceChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timest\",\"type\":\"uint256\"}],\"name\":\"HoldChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"TokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"OpportyMonthHold","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a56d47cfa8bdbafb42987ff2d9f5071a1b2583fe000000000000000000000000000000000000000000000000000000005a786360000000000000000000000000000000000000000000000000000000005aa4717f000000000000000000000000000000000000000000000000000000005ada7eff","Library":"","SwarmSource":"bzzr://c0697b67c5550766d2318003314d51b57385cff5c4cde57fbc99981f681d733c"}]}