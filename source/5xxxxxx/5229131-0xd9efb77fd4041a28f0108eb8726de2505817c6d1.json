{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n/**\r\n    ERC20 Interface\r\n    @author DongOk Peter Ryu - <odin@yggdrash.io>\r\n*/\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint supply);\r\n    function balanceOf( address who ) public constant returns (uint value);\r\n    function allowance( address owner, address spender ) public constant returns (uint _allowance);\r\n\r\n    function transfer( address to, uint value) public returns (bool ok);\r\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\r\n    function approve( address spender, uint value ) public returns (bool ok);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n/**\r\n    YGGDRASH SmartContract\r\n    @author Peter Ryu - <odin@yggdrash.io>\r\n*/\r\ncontract YggdrashCrowd {\r\n    using SafeMath for uint;\r\n    ERC20 public yeedToken;\r\n    Stages stage;\r\n    address public wallet;\r\n    address public owner;\r\n    address public tokenOwner;\r\n    uint public totalAmount;    // Contruibute Token amount\r\n    uint public priceFactor; // ratio\r\n    uint public startBlock;\r\n    uint public totalReceived;\r\n    uint public endTime;\r\n\r\n    uint public maxValue; // max ETH\r\n    uint public minValue;\r\n\r\n    uint public maxGasPrice; // Max gasPrice\r\n\r\n    // collect log\r\n    event FundTransfer (address sender, uint amount);\r\n\r\n    struct ContributeAddress {\r\n        bool exists; // set to true\r\n        address account; // sending account\r\n        uint amount; // sending amount\r\n        uint balance; // token value\r\n        bytes data; // sending data\r\n    }\r\n\r\n    mapping(address => ContributeAddress) public _contributeInfo;\r\n    mapping(bytes => ContributeAddress) _contruibuteData;\r\n\r\n    /*\r\n        Check is owner address\r\n    */\r\n    modifier isOwner() {\r\n        // Only owner is allowed to proceed\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n        Check Valid Payload\r\n    */\r\n    modifier isValidPayload() {\r\n        // check Max\r\n        if(maxValue != 0){\r\n            require(msg.value < maxValue + 1);\r\n        }\r\n        // Check Min\r\n        if(minValue != 0){\r\n            require(msg.value > minValue - 1);\r\n        }\r\n        require(wallet != msg.sender);\r\n        // check data value\r\n        require(msg.data.length != 0);\r\n        _;\r\n\r\n    }\r\n\r\n    /*\r\n        Check exists Contribute list\r\n    */\r\n    modifier isExists() {\r\n        require(_contruibuteData[msg.data].exists == false);\r\n        require(_contributeInfo[msg.sender].amount == 0);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     *  Modifiers Stage\r\n     */\r\n    modifier atStage(Stages _stage) {\r\n        require(stage == _stage);\r\n        _;\r\n    }\r\n\r\n\r\n    /*\r\n     *  Enums Stage Status\r\n     */\r\n    enum Stages {\r\n    Deployed,\r\n    SetUp,\r\n    Started,\r\n    Ended\r\n    }\r\n\r\n\r\n    /// init\r\n    /// @param _token token address\r\n    /// @param _tokenOwner token owner wallet address\r\n    /// @param _wallet Send ETH wallet\r\n    /// @param _amount token total value\r\n    /// @param _priceFactor token and ETH ratio\r\n    /// @param _maxValue maximum ETH balance\r\n    /// @param _minValue minimum ETH balance\r\n\r\n    function YggdrashCrowd(address _token, address _tokenOwner, address _wallet, uint _amount, uint _priceFactor, uint _maxValue, uint _minValue)\r\n    public\r\n    {\r\n        require (_tokenOwner != 0 && _wallet != 0 && _amount != 0 && _priceFactor != 0);\r\n        tokenOwner = _tokenOwner;\r\n        owner = msg.sender;\r\n        wallet = _wallet;\r\n        totalAmount = _amount;\r\n        priceFactor = _priceFactor;\r\n        maxValue = _maxValue;\r\n        minValue = _minValue;\r\n        stage = Stages.Deployed;\r\n\r\n        if(_token != 0){ // setup token\r\n            yeedToken = ERC20(_token);\r\n            stage = Stages.SetUp;\r\n        }\r\n        // Max Gas Price is unlimited\r\n        maxGasPrice = 0;\r\n    }\r\n\r\n    // setupToken\r\n    function setupToken(address _token)\r\n    public\r\n    isOwner\r\n    {\r\n        require(_token != 0);\r\n        yeedToken = ERC20(_token);\r\n        stage = Stages.SetUp;\r\n    }\r\n\r\n    /// @dev Start Contruibute\r\n    function startContruibute()\r\n    public\r\n    isOwner\r\n    atStage(Stages.SetUp)\r\n    {\r\n        stage = Stages.Started;\r\n        startBlock = block.number;\r\n    }\r\n\r\n\r\n    /**\r\n        Contributer send to ETH\r\n        Payload Check\r\n        Exist Check\r\n        GasPrice Check\r\n        Stage Check\r\n    */\r\n    function()\r\n    public\r\n    isValidPayload\r\n    isExists\r\n    atStage(Stages.Started)\r\n    payable\r\n    {\r\n        uint amount = msg.value;\r\n        uint maxAmount = totalAmount.div(priceFactor);\r\n        // refund\r\n        if (amount > maxAmount){\r\n            uint refund = amount.sub(maxAmount);\r\n            assert(msg.sender.send(refund));\r\n            amount = maxAmount;\r\n        }\r\n        //  NO MORE GAS WAR!!!\r\n        if(maxGasPrice != 0){\r\n            assert(tx.gasprice < maxGasPrice + 1);\r\n        }\r\n        totalReceived = totalReceived.add(amount);\r\n        // calculate token\r\n        uint token = amount.mul(priceFactor);\r\n        totalAmount = totalAmount.sub(token);\r\n\r\n        // give token to sender\r\n        yeedToken.transferFrom(tokenOwner, msg.sender, token);\r\n        FundTransfer(msg.sender, token);\r\n\r\n        // Set Contribute Account\r\n        ContributeAddress crowdData = _contributeInfo[msg.sender];\r\n        crowdData.exists = true;\r\n        crowdData.account = msg.sender;\r\n        crowdData.data = msg.data;\r\n        crowdData.amount = amount;\r\n        crowdData.balance = token;\r\n        // add contruibuteData\r\n        _contruibuteData[msg.data] = crowdData;\r\n        _contributeInfo[msg.sender] = crowdData;\r\n        // send to wallet\r\n        wallet.transfer(amount);\r\n\r\n        // token sold out\r\n        if (amount == maxAmount)\r\n            finalizeContruibute();\r\n    }\r\n\r\n    /// @dev Changes auction totalAmount and start price factor before auction is started.\r\n    /// @param _totalAmount Updated auction totalAmount.\r\n    /// @param _priceFactor Updated start price factor.\r\n    /// @param _maxValue Maximum balance of ETH\r\n    /// @param _minValue Minimum balance of ETH\r\n    function changeSettings(uint _totalAmount, uint _priceFactor, uint _maxValue, uint _minValue, uint _maxGasPrice)\r\n    public\r\n    isOwner\r\n    {\r\n        require(_totalAmount != 0 && _priceFactor != 0);\r\n        totalAmount = _totalAmount;\r\n        priceFactor = _priceFactor;\r\n        maxValue = _maxValue;\r\n        minValue = _minValue;\r\n        maxGasPrice = _maxGasPrice;\r\n    }\r\n    /**\r\n        Set Max Gas Price by Admin\r\n    */\r\n    function setMaxGasPrice(uint _maxGasPrice)\r\n    public\r\n    isOwner\r\n    {\r\n        maxGasPrice = _maxGasPrice;\r\n    }\r\n\r\n\r\n    // token balance\r\n    // @param src sender wallet address\r\n    function balanceOf(address src) public constant returns (uint256)\r\n    {\r\n        return _contributeInfo[src].balance;\r\n    }\r\n\r\n    // amount ETH value\r\n    // @param src sender wallet address\r\n    function amountOf(address src) public constant returns(uint256)\r\n    {\r\n        return _contributeInfo[src].amount;\r\n    }\r\n\r\n    // contruibute data\r\n    // @param src Yggdrash uuid\r\n    function contruibuteData(bytes src) public constant returns(address)\r\n    {\r\n        return _contruibuteData[src].account;\r\n    }\r\n\r\n    // Check contruibute is open\r\n    function isContruibuteOpen() public constant returns (bool)\r\n    {\r\n        return stage == Stages.Started;\r\n    }\r\n\r\n    // Smartcontract halt\r\n    function halt()\r\n    public\r\n    isOwner\r\n    {\r\n        finalizeContruibute();\r\n    }\r\n\r\n    // END of this Contruibute\r\n    function finalizeContruibute()\r\n    private\r\n    {\r\n        stage = Stages.Ended;\r\n        // remain token send to owner\r\n        totalAmount = 0;\r\n        endTime = now;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"}],\"name\":\"amountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContruibuteOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"name\":\"_priceFactor\",\"type\":\"uint256\"},{\"name\":\"_maxValue\",\"type\":\"uint256\"},{\"name\":\"_minValue\",\"type\":\"uint256\"},{\"name\":\"_maxGasPrice\",\"type\":\"uint256\"}],\"name\":\"changeSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startContruibute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yeedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setupToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_contributeInfo\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxGasPrice\",\"type\":\"uint256\"}],\"name\":\"setMaxGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"bytes\"}],\"name\":\"contruibuteData\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_priceFactor\",\"type\":\"uint256\"},{\"name\":\"_maxValue\",\"type\":\"uint256\"},{\"name\":\"_minValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"YggdrashCrowd","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006f7a4bac3315b5082f793161a22e26666d22717f0000000000000000000000000000c72e03a01cd93b2b68b5e08b7bfd49182b3a000000000000000000000000a17993670e7ac9c4ce79e53ff8f931f02c901dc30000000000000000000000000000000000000000060f02a21734dd1b05d4000000000000000000000000000000000000000000000000000000000000000166eb0000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000000000000000000000000000016345785d8a0000","Library":"","SwarmSource":"bzzr://e848c096c7c1fb55ed811783e7df0806882731c02e6a83f5e93d96bc984bcf84"}]}