{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Ethergarden is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  struct Tree {\r\n    uint256 amount;\r\n    string name;\r\n    string url;\r\n  }\r\n\r\n  event NewTree(uint256 treeId, string name, string url, uint256 amount);\r\n  event TreeWatered(uint256 treeId, uint256 amount);\r\n  event TreeCutted(uint256 treeId, uint256 amount);\r\n  event TreeUpdated(uint256 treeId, string name, string url);\r\n\r\n  Tree[] public forest;\r\n  mapping (uint256 => address) public treeToOwner;\r\n  mapping (address => uint256) internal ownerTreeCount;\r\n\r\n  function _createTree(string _name, string _url, uint256 _amount) private {\r\n    uint256 id = forest.push(Tree(_amount, _name, _url)) - 1;\r\n    treeToOwner[id] = msg.sender;\r\n    ownerTreeCount[msg.sender] = ownerTreeCount[msg.sender].add(1);\r\n\r\n    NewTree(id, _name, _url, _amount);\r\n  }\r\n\r\n  function createTree(string _name, string _url) payable external {\r\n    require(msg.value >= 0.001 ether);\r\n\r\n    _createTree(_name, _url, msg.value);\r\n  }\r\n\r\n  function getForestCount() external view returns(uint256) {\r\n    return forest.length;\r\n  }\r\n\r\n  function changeTreeAttributes(uint256 _treeId, string _name, string _url) external {\r\n    require(msg.sender == treeToOwner[_treeId]);\r\n\r\n    Tree storage myTree = forest[_treeId];\r\n    myTree.name = _name;\r\n    myTree.url = _url;\r\n\r\n    TreeUpdated(_treeId, myTree.name, myTree.url);\r\n  }\r\n\r\n  function dagheAcqua(uint256 _treeId) payable external {\r\n    require(msg.value > 0.0001 ether);\r\n\r\n    Tree storage myTree = forest[_treeId];\r\n    myTree.amount = myTree.amount.add(msg.value);\r\n\r\n    TreeWatered(_treeId, myTree.amount);\r\n  }\r\n\r\n  function cut(uint256 _treeId) payable external {\r\n    require(msg.value > 0.0001 ether);\r\n\r\n    Tree storage myTree = forest[_treeId];\r\n    myTree.amount = myTree.amount.sub(msg.value);\r\n\r\n    TreeCutted(_treeId, myTree.amount);\r\n  }\r\n\r\n  function withdraw() external onlyOwner {\r\n    owner.transfer(this.balance);\r\n  }\r\n  // fallback function for getting eth sent directly to the contract address\r\n  function() public payable {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_treeId\",\"type\":\"uint256\"}],\"name\":\"cut\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forest\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"createTree\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_treeId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"changeTreeAttributes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_treeId\",\"type\":\"uint256\"}],\"name\":\"dagheAcqua\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getForestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"treeToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"treeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewTree\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"treeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TreeWatered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"treeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TreeCutted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"treeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"TreeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Ethergarden","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c4ecd9c969418aa224bf360ae604484c32eb1a595e40fc2282d4bdcc38da8b3e"}]}