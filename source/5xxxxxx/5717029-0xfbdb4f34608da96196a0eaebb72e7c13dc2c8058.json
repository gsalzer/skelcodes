{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract owned {\r\n    address public owner;\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\ncontract ERNToken is owned {\r\n    using SafeMath for uint256;\r\n    string public constant name = \"ERNToken\";\r\n    string public constant symbol = \"ERN\";\r\n    uint public constant decimals = 8;\r\n    uint constant ONETOKEN = 10 ** uint256(decimals);\r\n    uint constant MILLION = 1000000; \r\n    uint public constant Total_TokenSupply = 1000 * MILLION * ONETOKEN; //1B Final Token Supply\r\n    uint public totalSupply;\r\n    uint public Dev_Supply;\r\n    uint public GrowthPool_Supply;\r\n    uint public Rewards_Supply;                                //to be added 45% Rewards \r\n    bool public DevSupply_Released = false;                     //Locked 3% Dev Supply\r\n    bool public GrowthPool_Released = false;                    //Locked 2% Growth Pool Supply\r\n    bool public ICO_Finished = false;                           //ICO Status\r\n    uint public ICO_Tier = 0;                                   //ICO Tier (1,2,3,4)\r\n    uint public ICO_Supply = 0;                                 //ICO Supply will change per Tier\r\n    uint public ICO_TokenValue = 0;                             //Token Value will change per ICO Tier\r\n    bool public ICO_AllowPayment;                               //Control Ether Payment when ICO is On\r\n    bool public Token_AllowTransfer = false;                    //Locked Token Holder for transferring ERN\r\n    uint public Collected_Ether;\r\n    uint public Total_SoldToken;\r\n    uint public Total_ICOSupply;\r\n    address public etherWallet = 0x90C5Daf1Ca815aF29b3a79f72565D02bdB706126;\r\n    \r\n    constructor() public {\r\n        totalSupply = 1000 * MILLION * ONETOKEN;                        //1 Billion Total Supply\r\n        Dev_Supply = totalSupply.mul(3).div(100);                       //3% of Supply -> locked until 01/01/2020\r\n        GrowthPool_Supply = totalSupply.mul(2).div(100);                //2% of Supply -> locked until 01/01/2019\r\n        Rewards_Supply = totalSupply.mul(45).div(100);                  //45% of Supply -> use for rewards, bounty, mining, etc\r\n        totalSupply -= Dev_Supply + GrowthPool_Supply + Rewards_Supply; //50% less for initial token supply \r\n        Total_ICOSupply = totalSupply;                                  //500M ICO supply\r\n        balanceOf[msg.sender] = totalSupply;                            \r\n    }\r\n    \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => bool) public whitelist;\r\n    mapping (address => uint256) public PrivateSale_Cap;\r\n    mapping (address => uint256) public PreIco_Cap;\r\n    mapping (address => uint256) public MainIco_Cap;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event Whitelisted(address indexed target, bool whitelist);\r\n    event IcoFinished(bool finish);\r\n    \r\n    modifier notLocked{\r\n        require(Token_AllowTransfer == true || msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier buyingToken{\r\n        require(ICO_AllowPayment == true);\r\n        require(msg.sender != owner);\r\n        \r\n        if(ICO_Tier == 1)\r\n        {\r\n            require(whitelist[msg.sender]);\r\n        }\r\n        if(ICO_Tier == 2)                                       \r\n        {\r\n            require(whitelist[msg.sender]);\r\n            require(PrivateSale_Cap[msg.sender] + msg.value <= 5 ether); //private sale -> 5 Eth Limit\r\n        }\r\n        if(ICO_Tier == 3)                                       \r\n        {\r\n            require(whitelist[msg.sender]);\r\n            require(PreIco_Cap[msg.sender] + msg.value <= 15 ether);    //pre-ico -> 15 Eth Limit\r\n        }\r\n        if(ICO_Tier == 4)                                       \r\n        {\r\n            require(whitelist[msg.sender]);\r\n            require(MainIco_Cap[msg.sender] + msg.value <= 15 ether);   //main-ico -> 15 Eth Limit\r\n        }\r\n        _;\r\n    }\r\n    function unlockDevTokenSupply() onlyOwner public {\r\n        require(now > 1577836800);                              //can be unlocked only on 1/1/2020\r\n        require(DevSupply_Released == false);       \r\n        balanceOf[owner] += Dev_Supply;\r\n        totalSupply += Dev_Supply;          \r\n        emit Transfer(0, this, Dev_Supply);\r\n        emit Transfer(this, owner, Dev_Supply);\r\n        Dev_Supply = 0;                                         //clear dev supply -> 0\r\n        DevSupply_Released = true;                              //to avoid next execution\r\n    }\r\n    function unlockGrowthPoolTokenSupply() onlyOwner public {\r\n        require(now > 1546300800);                              //can be unlocked only on 1/1/2019\r\n        require(GrowthPool_Released == false);      \r\n        balanceOf[owner] += GrowthPool_Supply;\r\n        totalSupply += GrowthPool_Supply;\r\n        emit Transfer(0, this, GrowthPool_Supply);\r\n        emit Transfer(this, owner, GrowthPool_Supply);\r\n        GrowthPool_Supply = 0;                                  //clear growthpool supply -> 0\r\n        GrowthPool_Released = true;                             //to avoid next execution\r\n    }\r\n    function sendUnsoldTokenToRewardSupply() onlyOwner public {\r\n        require(ICO_Finished == true);    \r\n        uint totalUnsold = Total_ICOSupply - Total_SoldToken;   //get total unsold token on ICO\r\n        Rewards_Supply += totalUnsold;                          //add to rewards / mineable supply\r\n        Total_SoldToken += totalUnsold;\r\n    }\r\n    function giveReward(address target, uint256 reward) onlyOwner public {\r\n        require(Rewards_Supply >= reward);\r\n        balanceOf[target] += reward;\r\n        totalSupply += reward;\r\n        emit Transfer(0, this, reward);\r\n        emit Transfer(this, target, reward);\r\n        Rewards_Supply -= reward;\r\n    }\r\n    function _transferToken(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n    function transfer(address _to, uint256 _value) notLocked public {\r\n        _transferToken(msg.sender, _to, _value);\r\n    }\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   \r\n        balanceOf[msg.sender] -= _value;            \r\n        totalSupply -= _value;                 \r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != 0x0);                               \r\n        require (balanceOf[_from] >= _value); \r\n        require (balanceOf[_to] + _value >= balanceOf[_to]);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n    function() payable buyingToken public {\r\n        uint totalToken = (msg.value.mul(ICO_TokenValue)).div(10 ** 18);\r\n        totalToken = totalToken.mul(ONETOKEN);\r\n        require(ICO_Supply >= totalToken);\r\n        if(ICO_Tier == 2)\r\n        {\r\n            PrivateSale_Cap[msg.sender] += msg.value;\r\n        }\r\n        if(ICO_Tier == 3)\r\n        {\r\n            PreIco_Cap[msg.sender] += msg.value;\r\n        }\r\n        if(ICO_Tier == 4)\r\n        {\r\n            MainIco_Cap[msg.sender] += msg.value;\r\n        }\r\n        ICO_Supply -= totalToken;\r\n        _transfer(owner, msg.sender, totalToken);\r\n        uint256 sendBonus = icoReturnBonus(msg.value);\r\n        if(sendBonus != 0)\r\n        {\r\n            msg.sender.transfer(sendBonus);\r\n        }\r\n        etherWallet.transfer(this.balance);\r\n        Collected_Ether += msg.value - sendBonus;               //divide 18 decimals\r\n        Total_SoldToken += totalToken;                          //divide 8 decimals\r\n    }\r\n    function icoReturnBonus(uint256 amount) internal constant returns (uint256) {\r\n        uint256 bonus = 0;\r\n        if(ICO_Tier == 1)\r\n        {\r\n            bonus = amount.mul(15).div(100);\r\n        }\r\n        if(ICO_Tier == 2)\r\n        {\r\n            bonus = amount.mul(12).div(100);\r\n        }\r\n        if(ICO_Tier == 3)\r\n        {\r\n            bonus = amount.mul(10).div(100);\r\n        }\r\n        if(ICO_Tier == 4)\r\n        {\r\n            bonus = amount.mul(8).div(100);\r\n        }\r\n        return bonus;\r\n    }\r\n    function withdrawEther() onlyOwner public{\r\n        owner.transfer(this.balance);\r\n    }\r\n    function setIcoTier(uint256 newTokenValue) onlyOwner public {\r\n        require(ICO_Finished == false && ICO_Tier < 4);\r\n        ICO_Tier += 1;\r\n        ICO_AllowPayment = true;\r\n        ICO_TokenValue = newTokenValue;\r\n        if(ICO_Tier == 1){\r\n            ICO_Supply = 62500000 * ONETOKEN;               //62.5M supply -> x private sale \r\n        }\r\n        if(ICO_Tier == 2){\r\n            ICO_Supply = 100 * MILLION * ONETOKEN;          //100M supply -> private sale\r\n        }\r\n        if(ICO_Tier == 3){\r\n            ICO_Supply = 150 * MILLION * ONETOKEN;          //150M supply -> pre-ico\r\n        }\r\n        if(ICO_Tier == 4){\r\n            ICO_Supply = 187500000 * ONETOKEN;              //187.5M supply -> main-ico\r\n        }\r\n    }\r\n    function FinishIco() onlyOwner public {\r\n        require(ICO_Tier >= 4);\r\n        ICO_Supply = 0;\r\n        ICO_Tier = 0;\r\n        ICO_TokenValue = 0;\r\n        ICO_Finished = true;\r\n        ICO_AllowPayment = false;\r\n        emit IcoFinished(true);\r\n    }\r\n    function setWhitelistAddress(address addr, bool status) onlyOwner public {\r\n        whitelist[addr] = status;\r\n        emit Whitelisted(addr, status);\r\n    }\r\n    function setIcoPaymentStatus(bool status) onlyOwner public {\r\n        require(ICO_Finished == false);\r\n        ICO_AllowPayment = status;\r\n    }\r\n    function setTokenTransferStatus(bool status) onlyOwner public {\r\n        require(ICO_Finished == true);\r\n        Token_AllowTransfer = status;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendUnsoldTokenToRewardSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"MainIco_Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenValue\",\"type\":\"uint256\"}],\"name\":\"setIcoTier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setWhitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Dev_Supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DevSupply_Released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockGrowthPoolTokenSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_TokenValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GrowthPool_Supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_AllowTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"PrivateSale_Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Collected_Ether\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_Finished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setTokenTransferStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"PreIco_Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_Supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Rewards_Supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_Tier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_AllowPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Total_SoldToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GrowthPool_Released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setIcoPaymentStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"giveReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockDevTokenSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"FinishIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Total_TokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Total_ICOSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"finish\",\"type\":\"bool\"}],\"name\":\"IcoFinished\",\"type\":\"event\"}]","ContractName":"ERNToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://64cb25c53ebd8a5987d73f5f851dad4d3a382c8e336d83ce62ef15913619320b"}]}