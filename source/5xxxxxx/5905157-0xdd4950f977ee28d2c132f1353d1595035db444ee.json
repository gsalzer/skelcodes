{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/*\r\n * @title -Jekyll Island- CORP BANK FORWARDER v0.4.6\r\n * ┌┬┐┌─┐┌─┐┌┬┐   ╦╦ ╦╔═╗╔╦╗  ┌─┐┬─┐┌─┐┌─┐┌─┐┌┐┌┌┬┐┌─┐\r\n *  │ ├┤ ├─┤│││   ║║ ║╚═╗ ║   ├─┘├┬┘├┤ └─┐├┤ │││ │ └─┐\r\n *  ┴ └─┘┴ ┴┴ ┴  ╚╝╚═╝╚═╝ ╩   ┴  ┴└─└─┘└─┘└─┘┘└┘ ┴ └─┘\r\n *                                  _____                      _____\r\n *                                 (, /     /)       /) /)    (, /      /)          /)\r\n *          ┌─┐                      /   _ (/_      // //       /  _   // _   __  _(/\r\n *          ├─┤                  ___/___(/_/(__(_/_(/_(/_   ___/__/_)_(/_(_(_/ (_(_(_\r\n *          ┴ ┴                /   /          .-/ _____   (__ /                               \r\n *                            (__ /          (_/ (, /                                      /)™ \r\n *                                                 /  __  __ __ __  _   __ __  _  _/_ _  _(/\r\n * ┌─┐┬─┐┌─┐┌┬┐┬ ┬┌─┐┌┬┐                          /__/ (_(__(_)/ (_/_)_(_)/ (_(_(_(__(/_(_(_\r\n * ├─┘├┬┘│ │ │││ ││   │                      (__ /              .-/  © Jekyll Island Inc. 2018\r\n * ┴  ┴└─└─┘─┴┘└─┘└─┘ ┴                                        (_/\r\n *====/$$$$$===========/$$=================/$$ /$$====/$$$$$$===========/$$===========================/$$=*\r\n *   |__  $$          | $$                | $$| $$   |_  $$_/          | $$                          | $$\r\n *      | $$  /$$$$$$ | $$   /$$ /$$   /$$| $$| $$     | $$    /$$$$$$$| $$  /$$$$$$  /$$$$$$$   /$$$$$$$\r\n *      | $$ /$$__  $$| $$  /$$/| $$  | $$| $$| $$     | $$   /$$_____/| $$ |____  $$| $$__  $$ /$$__  $$\r\n * /$$  | $$| $$$$$$$$| $$$$$$/ | $$  | $$| $$| $$     | $$  |  $$$$$$ | $$  /$$$$$$$| $$  \\ $$| $$  | $$\r\n *| $$  | $$| $$_____/| $$_  $$ | $$  | $$| $$| $$     | $$   \\____  $$| $$ /$$__  $$| $$  | $$| $$  | $$\r\n *|  $$$$$$/|  $$$$$$$| $$ \\  $$|  $$$$$$$| $$| $$    /$$$$$$ /$$$$$$$/| $$|  $$$$$$$| $$  | $$|  $$$$$$$\r\n * \\______/  \\_______/|__/  \\__/ \\____  $$|__/|__/   |______/|_______/ |__/ \\_______/|__/  |__/ \\_______/\r\n *===============================/$$  | $$ Inc.  ╔═╗╔═╗╦═╗╔═╗  ╔╗ ╔═╗╔╗╔╦╔═  ┌─┐┌─┐┬─┐┬ ┬┌─┐┬─┐┌┬┐┌─┐┬─┐                                 \r\n *                              |  $$$$$$/=======║  ║ ║╠╦╝╠═╝  ╠╩╗╠═╣║║║╠╩╗  ├┤ │ │├┬┘│││├─┤├┬┘ ││├┤ ├┬┘  \r\n *                               \\______/        ╚═╝╚═╝╩╚═╩    ╚═╝╩ ╩╝╚╝╩ ╩  └  └─┘┴└─└┴┘┴ ┴┴└──┴┘└─┘┴└─==*\r\n * ╔═╗┌─┐┌┐┌┌┬┐┬─┐┌─┐┌─┐┌┬┐  ╔═╗┌─┐┌┬┐┌─┐ ┌──────────┐                       \r\n * ║  │ ││││ │ ├┬┘├─┤│   │   ║  │ │ ││├┤  │ Inventor │                      \r\n * ╚═╝└─┘┘└┘ ┴ ┴└─┴ ┴└─┘ ┴   ╚═╝└─┘─┴┘└─┘ └──────────┘                      \r\n *===========================================================================================*\r\n *                                ┌────────────────────┐\r\n *                                │ Setup Instructions │\r\n *                                └────────────────────┘\r\n * (Step 1) import the Jekyll Island Inc Forwarder Interface into your contract\r\n * \r\n *    import \"./JIincForwarderInterface.sol\";\r\n *\r\n * (Step 2) set it to point to the forwarder\r\n * \r\n *    JIincForwarderInterface private Jekyll_Island_Inc = JIincForwarderInterface(0xdd4950F977EE28D2C132f1353D1595035Db444EE);\r\n *                                ┌────────────────────┐\r\n *                                │ Usage Instructions │\r\n *                                └────────────────────┘\r\n * whenever your contract needs to send eth to the corp bank, simply use the \r\n * the following command:\r\n *\r\n *    Jekyll_Island_Inc.deposit.value(amount)()\r\n * \r\n * OPTIONAL:\r\n * if you need to be checking wither the transaction was successful, the deposit function returns \r\n * a bool indicating wither or not it was successful.  so another way to call this function \r\n * would be:\r\n * \r\n *    require(Jekyll_Island_Inc.deposit.value(amount)() == true, \"Jekyll Island deposit failed\");\r\n * \r\n */\r\n\r\ninterface JIincInterfaceForForwarder {\r\n    function deposit(address _addr) external payable returns (bool);\r\n    function migrationReceiver_setup() external returns (bool);\r\n}\r\n\r\ncontract JIincForwarder {\r\n    string public name = \"JIincForwarder\";\r\n    JIincInterfaceForForwarder private currentCorpBank_;\r\n    address private newCorpBank_;\r\n    bool needsBank_ = true;\r\n    \r\n    constructor() \r\n        public\r\n    {\r\n        //constructor does nothing.\r\n    }\r\n    \r\n    function()\r\n        public\r\n        payable\r\n    {\r\n        // done so that if any one tries to dump eth into this contract, we can\r\n        // just forward it to corp bank.\r\n        currentCorpBank_.deposit.value(address(this).balance)(address(currentCorpBank_));\r\n    }\r\n    \r\n    function deposit()\r\n        public \r\n        payable\r\n        returns(bool)\r\n    {\r\n        require(msg.value > 0, \"Forwarder Deposit failed - zero deposits not allowed\");\r\n        require(needsBank_ == false, \"Forwarder Deposit failed - no registered bank\");\r\n        if (currentCorpBank_.deposit.value(msg.value)(msg.sender) == true)\r\n            return(true);\r\n        else\r\n            return(false);\r\n    }\r\n//==============================================================================\r\n//     _ _ . _  _ _ _|_. _  _   .\r\n//    | | ||(_|| (_| | |(_)| |  .\r\n//===========_|=================================================================    \r\n    function status()\r\n        public\r\n        view\r\n        returns(address, address, bool)\r\n    {\r\n        return(address(currentCorpBank_), address(newCorpBank_), needsBank_);\r\n    }\r\n\r\n    function startMigration(address _newCorpBank)\r\n        external\r\n        returns(bool)\r\n    {\r\n        // make sure this is coming from current corp bank\r\n        require(msg.sender == address(currentCorpBank_), \"Forwarder startMigration failed - msg.sender must be current corp bank\");\r\n        \r\n        // communicate with the new corp bank and make sure it has the forwarder \r\n        // registered \r\n        if(JIincInterfaceForForwarder(_newCorpBank).migrationReceiver_setup() == true)\r\n        {\r\n            // save our new corp bank address\r\n            newCorpBank_ = _newCorpBank;\r\n            return (true);\r\n        } else \r\n            return (false);\r\n    }\r\n    \r\n    function cancelMigration()\r\n        external\r\n        returns(bool)\r\n    {\r\n        // make sure this is coming from the current corp bank (also lets us know \r\n        // that current corp bank has not been killed)\r\n        require(msg.sender == address(currentCorpBank_), \"Forwarder cancelMigration failed - msg.sender must be current corp bank\");\r\n        \r\n        // erase stored new corp bank address;\r\n        newCorpBank_ = address(0x0);\r\n        \r\n        return (true);\r\n    }\r\n    \r\n    function finishMigration()\r\n        external\r\n        returns(bool)\r\n    {\r\n        // make sure its coming from new corp bank\r\n        require(msg.sender == newCorpBank_, \"Forwarder finishMigration failed - msg.sender must be new corp bank\");\r\n\r\n        // update corp bank address        \r\n        currentCorpBank_ = (JIincInterfaceForForwarder(newCorpBank_));\r\n        \r\n        // erase new corp bank address\r\n        newCorpBank_ = address(0x0);\r\n        \r\n        return (true);\r\n    }\r\n//==============================================================================\r\n//    . _ ._|_. _ |   _ _ _|_    _   .\r\n//    || || | |(_||  _\\(/_ | |_||_)  .  (this only runs once ever)\r\n//==============================|===============================================\r\n    function setup(address _firstCorpBank)\r\n        external\r\n    {\r\n        require(needsBank_ == true, \"Forwarder setup failed - corp bank already registered\");\r\n        currentCorpBank_ = JIincInterfaceForForwarder(_firstCorpBank);\r\n        needsBank_ = false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelMigration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_firstCorpBank\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMigration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCorpBank\",\"type\":\"address\"}],\"name\":\"startMigration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"JIincForwarder","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"50","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9e9c9b7011b1ed7c80457669c30e63503debf4f3eb624121af60c82f1d71f95b"}]}