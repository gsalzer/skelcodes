{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract token { function transfer(address receiver, uint amount) public ;\r\n                 function mintToken(address target, uint mintedAmount) public ;\r\n                }\r\n\r\ncontract CrowdSale {\r\n    enum State {\r\n        Fundraising,\r\n        Failed,\r\n        Successful,\r\n        Closed\r\n    }\r\n    State public state = State.Fundraising;\r\n\r\n    struct Contribution {\r\n        uint amount;\r\n        address contributor;\r\n    }\r\n    Contribution[] contributions;\r\n\r\n    \r\n    \r\n    uint public totalRaised;\r\n    uint public currentBalance;\r\n    uint public deadline;\r\n    uint public completedAt;\r\n    uint public priceInWei;\r\n    uint public fundingMinimumTargetInWei; \r\n    uint public fundingMaximumTargetInWei; \r\n    token public tokenReward;\r\n    address public creator;\r\n    address public beneficiary; \r\n    string campaignUrl;\r\n    byte constant version = \"1\";\r\n\r\n    \r\n    event LogFundingReceived(address addr, uint amount, uint currentTotal);\r\n    event LogWinnerPaid(address winnerAddress);\r\n    event LogFundingSuccessful(uint totalRaised);\r\n    event LogFunderInitialized(\r\n        address creator,\r\n        address beneficiary,\r\n        string url,\r\n        uint _fundingMaximumTargetInEther, \r\n        uint256 deadline);\r\n\r\n\r\n    modifier inState(State _state) {\r\n        require(state == _state) ;\r\n        _;\r\n    }\r\n\r\n     modifier isMinimum() {\r\n        require(msg.value > priceInWei) ;\r\n        _;\r\n    }\r\n\r\n    modifier inMultipleOfPrice() {\r\n        require(msg.value%priceInWei == 0) ;\r\n        _;\r\n    }\r\n\r\n    modifier isCreator() {\r\n        require(msg.sender == creator) ;\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier atEndOfLifecycle() {\r\n        if(!((state == State.Failed || state == State.Successful) && completedAt + 1 hours < now)) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    \r\n    function CrowdSale(\r\n        uint _timeInMinutesForFundraising,\r\n        string _campaignUrl,\r\n        address _ifSuccessfulSendTo,\r\n        uint _fundingMinimumTargetInEther,\r\n        uint _fundingMaximumTargetInEther,\r\n        token _addressOfTokenUsedAsReward,\r\n        uint _etherCostOfEachToken) public\r\n    {\r\n        creator = msg.sender;\r\n        beneficiary = _ifSuccessfulSendTo;\r\n        campaignUrl = _campaignUrl;\r\n        fundingMinimumTargetInWei = _fundingMinimumTargetInEther * 1 ether; \r\n        fundingMaximumTargetInWei = _fundingMaximumTargetInEther * 1 ether; \r\n        deadline = now + (_timeInMinutesForFundraising * 1 minutes);\r\n        currentBalance = 0;\r\n        tokenReward = token(_addressOfTokenUsedAsReward);\r\n        priceInWei = _etherCostOfEachToken * 1 ether;\r\n        LogFunderInitialized(\r\n            creator,\r\n            beneficiary,\r\n            campaignUrl,\r\n            fundingMaximumTargetInWei,\r\n            deadline);\r\n    }\r\n\r\n    function contribute()\r\n    public\r\n    inState(State.Fundraising) isMinimum() inMultipleOfPrice() payable returns (uint256)\r\n    {\r\n        uint256 amountInWei = msg.value;\r\n\r\n        \r\n        contributions.push(\r\n            Contribution({\r\n                amount: msg.value,\r\n                contributor: msg.sender\r\n                }) \r\n            );\r\n\r\n        totalRaised += msg.value;\r\n        currentBalance = totalRaised;\r\n\r\n\r\n        if(fundingMaximumTargetInWei != 0){\r\n            \r\n            tokenReward.transfer(msg.sender, amountInWei / priceInWei);\r\n        }\r\n        else{\r\n            tokenReward.mintToken(msg.sender, amountInWei / priceInWei);\r\n        }\r\n\r\n        LogFundingReceived(msg.sender, msg.value, totalRaised);\r\n\r\n        \r\n\r\n        checkIfFundingCompleteOrExpired();\r\n        return contributions.length - 1; \r\n    }\r\n\r\n    function checkIfFundingCompleteOrExpired() public {\r\n        \r\n       \r\n        if (fundingMaximumTargetInWei != 0 && totalRaised > fundingMaximumTargetInWei) {\r\n            state = State.Successful;\r\n            LogFundingSuccessful(totalRaised);\r\n            payOut();\r\n            completedAt = now;\r\n            \r\n            } else if ( now > deadline )  {\r\n                if(totalRaised >= fundingMinimumTargetInWei){\r\n                    state = State.Successful;\r\n                    LogFundingSuccessful(totalRaised);\r\n                    payOut();  \r\n                    completedAt = now;\r\n                }\r\n                else{\r\n                    state = State.Failed; \r\n                    completedAt = now;\r\n                }\r\n            } \r\n        \r\n    }\r\n\r\n        function payOut()\r\n        public\r\n        inState(State.Successful)\r\n        {\r\n            \r\n            if(!beneficiary.send(this.balance)) {\r\n                revert();\r\n            }\r\n\r\n            state = State.Closed;\r\n            currentBalance = 0;\r\n            LogWinnerPaid(beneficiary);\r\n        }\r\n\r\n        function getRefund()\r\n        public\r\n        inState(State.Failed) \r\n        returns (bool)\r\n        {\r\n            for(uint i=0; i<=contributions.length; i++)\r\n            {\r\n                if(contributions[i].contributor == msg.sender){\r\n                    uint amountToRefund = contributions[i].amount;\r\n                    contributions[i].amount = 0;\r\n                    if(!contributions[i].contributor.send(amountToRefund)) {\r\n                        contributions[i].amount = amountToRefund;\r\n                        return false;\r\n                    }\r\n                    else{\r\n                        totalRaised -= amountToRefund;\r\n                        currentBalance = totalRaised;\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function removeContract()\r\n        public\r\n        isCreator()\r\n        atEndOfLifecycle()\r\n        {\r\n            selfdestruct(msg.sender);\r\n            \r\n        }\r\n\r\n        function () public { revert(); }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingMinimumTargetInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingMaximumTargetInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_timeInMinutesForFundraising\",\"type\":\"uint256\"},{\"name\":\"_campaignUrl\",\"type\":\"string\"},{\"name\":\"_ifSuccessfulSendTo\",\"type\":\"address\"},{\"name\":\"_fundingMinimumTargetInEther\",\"type\":\"uint256\"},{\"name\":\"_fundingMaximumTargetInEther\",\"type\":\"uint256\"},{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"},{\"name\":\"_etherCostOfEachToken\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winnerAddress\",\"type\":\"address\"}],\"name\":\"LogWinnerPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_fundingMaximumTargetInEther\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"LogFunderInitialized\",\"type\":\"event\"}]","ContractName":"CrowdSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000001fa4000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000076d13c89a574b9960c73dd2fd2c639865892aa4b0000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000008d3b41db8265f3f96ffc68d261a332a6b11ef06c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001368747470733a2f2f746f7073636f696e2e636f00000000000000000000000000","Library":"","SwarmSource":"bzzr://5a6c6d82b29d310209ff9fc1c7f015f48ced3208b823547257db9226fe392ee8"}]}