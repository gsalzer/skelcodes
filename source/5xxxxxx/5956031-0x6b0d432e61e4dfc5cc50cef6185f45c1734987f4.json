{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath\r\n{\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath32\r\n * @dev SafeMath library implemented for uint32\r\n */\r\nlibrary SafeMath32\r\n{\r\n  function mul(uint32 a, uint32 b) internal pure returns (uint32) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint32 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint32 a, uint32 b) internal pure returns (uint32) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint32 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint32 a, uint32 b) internal pure returns (uint32) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint32 a, uint32 b) internal pure returns (uint32) {\r\n    uint32 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath16\r\n * @dev SafeMath library implemented for uint16\r\n */\r\nlibrary SafeMath16\r\n{\r\n  function mul(uint16 a, uint16 b) internal pure returns (uint16) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint16 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint16 a, uint16 b) internal pure returns (uint16) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint16 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint16 a, uint16 b) internal pure returns (uint16) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint16 a, uint16 b) internal pure returns (uint16) {\r\n    uint16 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title DeSocializedAdmin\r\n * @author Chad R. Banks\r\n * @dev This contract provides basic authorization control functions.\r\n */\r\n \r\n\r\ncontract DeSocializedAdmin\r\n{\r\n    using SafeMath for uint256;\r\n    using SafeMath32 for uint32;\r\n    using SafeMath16 for uint16;\r\n\r\n    mapping (address => uint256) admins;\r\n    mapping (string => uint256) options;\r\n    \r\n    address public feewallet;\r\n    \r\n    event AdminOptionChange(address indexed admin, string option, uint256 value);\r\n    event AdminStatusChange(address indexed admin, uint256 newStatus);\r\n    event AdminWalletChange(address indexed admin, address indexed wallet);\r\n    event AdminWithdrawl(address indexed admin, uint256 amount);\r\n  \r\n    /**\r\n    * @dev The DeSocializedAdmin constructor sets the original values.\r\n    */\r\n    constructor() public\r\n    {\r\n        feewallet = msg.sender;\r\n        admins[msg.sender] = 100;\r\n        options[\"likefee\"] = 1000000000000;     // 0.000001 ETH\r\n        options[\"dissfee\"] = 1000000000000;     // 0.000001 ETH\r\n        options[\"minefee\"] = 10000000000000;    // 0.00001 ETH\r\n        options[\"regifee\"] = 10000000000000000; // 0.01 ETH\r\n    }\r\n  \r\n    /**\r\n    * @dev Throws if called by any address other than an admin.\r\n    */\r\n    modifier onlyAdmin()\r\n    {\r\n        require(admins[msg.sender] >= 1);\r\n        _;\r\n    }\r\n  \r\n    /**\r\n    * @dev Allows the current owner to add/remove another admins status.\r\n    */\r\n    function setAdminStatus(address user, uint status) public onlyAdmin\r\n    {\r\n        require(user != address(0));\r\n        require(status <= admins[msg.sender]);\r\n        require(admins[user] <= admins[msg.sender]);\r\n        admins[user] = status;\r\n        emit AdminStatusChange(user, status);\r\n    }\r\n    \r\n    /**\r\n     * @dev Return the admin status for another address.\r\n     */\r\n    function getAdminStatus(address user) public view returns(uint)\r\n    {\r\n        return admins[user];\r\n    }\r\n    \r\n    /**\r\n     * @dev Change the wallet that funds are stored in.\r\n     */\r\n    function setFeeWallet(address _wallet) public onlyAdmin\r\n    {\r\n        feewallet = _wallet;\r\n        emit AdminWalletChange(msg.sender, _wallet);\r\n    }\r\n    \r\n    /**\r\n     * @dev Change an options value.\r\n     */\r\n    function setOption(string option, uint value) public onlyAdmin\r\n    {\r\n        options[option] = value;\r\n        emit AdminOptionChange(msg.sender, option, value);\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the option value for a given key.\r\n     */\r\n    function getOption(string option) public view returns(uint)\r\n    {\r\n        return options[option];\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the eth balance of this wallet\r\n     */\r\n    function getWalletBalance( ) public view returns(uint)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw funds from this contract.\r\n     */\r\n    function withdrawl(uint amt) external onlyAdmin\r\n    {\r\n        require(amt <= address(this).balance);\r\n        msg.sender.transfer(amt);\r\n        emit AdminWithdrawl(msg.sender, amt);\r\n    }\r\n}\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title DeSocializedMain\r\n * @author Chad R. Banks\r\n * @dev The DeSocializedMain will hold the basic social media functionality.\r\n */\r\n\r\n\r\ncontract DeSocializedMain is DeSocializedAdmin\r\n{\r\n    using SafeMath for uint256;\r\n    using SafeMath32 for uint32;\r\n    using SafeMath16 for uint16;\r\n\r\n    struct Block\r\n    {\r\n        address poster;\r\n        string message;\r\n        uint dislikes;\r\n        uint likes;\r\n        uint mined;\r\n        uint id;\r\n    }\r\n\r\n    Block[] public blocks;\r\n    \r\n    mapping (uint => address) public blockToOwner;\r\n    mapping (address => uint) ownerBlockCount;\r\n    \r\n    mapping (string => address) handleToAddress;\r\n    mapping (address => string) public addressToHandle;\r\n    \r\n    event NewBlock(uint pid, address sender);\r\n    event BlockLiked(uint pid, uint value);\r\n    event BlockDisliked(uint pid, uint value);\r\n    event HandleRegistered(address _user, string _handle);\r\n    event AdminHandleRegistered(address _admin, address _user, string _handle);\r\n\r\n    /**\r\n     * @dev saveBlock is how users post new content.\r\n     */\r\n    function saveBlock( string _m ) public payable\r\n    {\r\n        require(msg.value >= options[\"minefee\"]);\r\n        feewallet.transfer(msg.value);\r\n        \r\n        uint id = blocks.push( Block( msg.sender, _m, 0, 0, uint(now), 0 ) ) - 1;\r\n        blocks[id].id = id;\r\n        blockToOwner[id] = msg.sender;\r\n        ownerBlockCount[msg.sender] = ownerBlockCount[msg.sender].add(1);\r\n        \r\n        emit NewBlock(id, msg.sender);\r\n    }\r\n    \r\n    /**\r\n     * @dev Allows a user to like another users block.\r\n     */\r\n    function likeBlock( uint _bid ) public payable\r\n    {\r\n        require(msg.value >= options[\"likefee\"]);\r\n        address owner = blockToOwner[_bid];\r\n        owner.transfer(msg.value);\r\n        \r\n        Block storage b = blocks[_bid];\r\n        b.likes = b.likes.add(1);\r\n        \r\n        emit BlockLiked(_bid, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows a user to dislike another users block.\r\n     */\r\n    function dissBlock( uint _bid ) public payable\r\n    {\r\n        require(msg.value >= options[\"dissfee\"]);\r\n        feewallet.transfer(msg.value);\r\n        \r\n        Block storage b = blocks[_bid];\r\n        b.dislikes = b.dislikes.add(1);\r\n        \r\n        emit BlockDisliked(_bid, msg.value);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev This will allow an admin to register a user.\r\n     */\r\n    function registerUser( address _user, string _handle ) public onlyAdmin\r\n    {\r\n        require( handleToAddress[ _handle ] == 0 );\r\n        _verify( _user, _handle );\r\n        \r\n        emit AdminHandleRegistered(msg.sender, _user, _handle);\r\n    }\r\n    \r\n    /**\r\n     * @dev Allows general users to register their handle.\r\n     */\r\n    function register( string _handle ) public payable\r\n    {\r\n        require( handleToAddress[ _handle ] == 0 );\r\n        \r\n        uint fee = options[\"regifee\"];\r\n        require(msg.value >= fee);\r\n        feewallet.transfer(fee);\r\n        \r\n        _verify( msg.sender, _handle );\r\n        \r\n        emit HandleRegistered(msg.sender, _handle);\r\n    }\r\n    \r\n    /**\r\n     * @dev Internal verify function.\r\n     */\r\n    function _verify( address _user, string _handle ) internal\r\n    {\r\n        if( keccak256( abi.encodePacked(addressToHandle[ _user ]) ) != keccak256( abi.encodePacked(\"\") ) )\r\n        {\r\n            handleToAddress[ addressToHandle[ _user ] ] = 0;\r\n        }\r\n        \r\n        addressToHandle[ _user ] = _handle;\r\n        handleToAddress[ _handle ] = _user;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev Get a certain number of blocks in ascending order.\r\n     */\r\n    function getBlocks(uint _bid, uint _len) external view returns(uint[])\r\n    {\r\n        uint[] memory result = new uint[](_len);\r\n        uint counter = 0;\r\n        for (uint i = _bid; i < (_bid+_len); i++)\r\n        {\r\n            if( blockToOwner[i] != 0 )\r\n            {\r\n                result[counter] = i;\r\n                counter++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Get a certain number of blocks in descending order.\r\n     */\r\n    function getBlocksDesc(uint _bid, uint _len) external view returns(uint[])\r\n    {\r\n        uint[] memory result = new uint[](_len);\r\n        uint counter = 0;\r\n        \r\n        if(_bid == 0)\r\n        {\r\n            for (uint i = blocks.length; i > (blocks.length-_len); i--)\r\n            {\r\n                if( blockToOwner[i] != 0 && counter < _len )\r\n                {\r\n                    result[counter] = i;\r\n                    counter++;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for (uint x = _bid; x > (_bid-_len); x--)\r\n            {\r\n                if( blockToOwner[x] != 0 && counter < _len )\r\n                {\r\n                    result[counter] = x;\r\n                    counter++;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return result;\r\n    }\r\n    \r\n    /**\r\n     * @dev Get a certain number of an addresses blocks in ascending order.\r\n     */\r\n    function getBlocksByOwner(uint _bid, uint _len, address _owner) external view returns(uint[])\r\n    {\r\n        uint[] memory result = new uint[](_len);\r\n        uint counter = 0;\r\n        for (uint i = _bid; i < (_bid+_len); i++)\r\n        {\r\n            if (blockToOwner[i] == _owner)\r\n            {\r\n                result[counter] = i;\r\n                counter++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Get a certain number of an addresses blocks in descending order.\r\n     */\r\n    function getBlocksByOwnerDesc(uint _bid, uint _len, address _owner) external view returns(uint[])\r\n    {\r\n        uint[] memory result = new uint[](_len);\r\n        uint counter = 0;\r\n        \r\n        if(_bid == 0)\r\n        {\r\n            for (uint i = blocks.length; i > (blocks.length-_len); i--)\r\n            {\r\n                if (blockToOwner[i] == _owner && counter < _len )\r\n                {\r\n                    result[counter] = i;\r\n                    counter++;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for (uint x = _bid; x > (_bid-_len); x--)\r\n            {\r\n                if (blockToOwner[x] == _owner && counter < _len )\r\n                {\r\n                    result[counter] = x;\r\n                    counter++;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Get all blocks for a given address.\r\n     */\r\n    function getAllBlocksByOwner(address _owner) external view returns(uint[])\r\n    {\r\n        uint[] memory result = new uint[](ownerBlockCount[_owner]);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < blocks.length; i++)\r\n        {\r\n            if (blockToOwner[i] == _owner)\r\n            {\r\n                result[counter] = i;\r\n                counter++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the number of owners an address has.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 _balance)\r\n    {\r\n        return ownerBlockCount[_owner];\r\n    }\r\n    \r\n    /**\r\n     * @dev Return the address of a blocks owner.\r\n     */\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner)\r\n    {\r\n        return blockToOwner[_tokenId];\r\n    }\r\n    \r\n    /**\r\n     * @dev Return the address of a blocks owner.\r\n     */\r\n    function getUserPair( address _user ) public view returns (address, string)\r\n    {\r\n        return ( _user, addressToHandle[_user] );\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_handle\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAllBlocksByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToHandle\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bid\",\"type\":\"uint256\"}],\"name\":\"dissBlock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWalletBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"option\",\"type\":\"string\"}],\"name\":\"getOption\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_m\",\"type\":\"string\"}],\"name\":\"saveBlock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPair\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bid\",\"type\":\"uint256\"},{\"name\":\"_len\",\"type\":\"uint256\"}],\"name\":\"getBlocksDesc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"option\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setOption\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bid\",\"type\":\"uint256\"},{\"name\":\"_len\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBlocksByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bid\",\"type\":\"uint256\"}],\"name\":\"likeBlock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"setAdminStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAdminStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bid\",\"type\":\"uint256\"},{\"name\":\"_len\",\"type\":\"uint256\"}],\"name\":\"getBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bid\",\"type\":\"uint256\"},{\"name\":\"_len\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBlocksByOwnerDesc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdrawl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feewallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blocks\",\"outputs\":[{\"name\":\"poster\",\"type\":\"address\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"dislikes\",\"type\":\"uint256\"},{\"name\":\"likes\",\"type\":\"uint256\"},{\"name\":\"mined\",\"type\":\"uint256\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_handle\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NewBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BlockLiked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BlockDisliked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_handle\",\"type\":\"string\"}],\"name\":\"HandleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_handle\",\"type\":\"string\"}],\"name\":\"AdminHandleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"option\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AdminOptionChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newStatus\",\"type\":\"uint256\"}],\"name\":\"AdminStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AdminWalletChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminWithdrawl\",\"type\":\"event\"}]","ContractName":"DeSocializedMain","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://62b302edd8f9458107b046f6c95576596c35c3e93255006beb5d245591beaf50"}]}