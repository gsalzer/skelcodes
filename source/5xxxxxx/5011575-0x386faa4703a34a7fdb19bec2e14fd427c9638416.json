{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract owned {\r\n    address public owner;\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\ncontract TokenERC20 is owned {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    \r\n    uint256 public totalSupply;\r\n    uint public amountRaised;\r\n\r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n    bool public lockedSell;\r\n    \r\n    bytes32 public currentChallenge;\r\n    uint public timeOfLastProof;\r\n    uint public difficulty = 10**32;\r\n    \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event Freeze(address from, uint256 amount);\r\n    event UnFreeze(address to, uint256 amount);\r\n        \r\n    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol, uint256 newSellPrice, uint256 newBuyPrice) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  \r\n        balanceOf[msg.sender] = totalSupply;                \r\n        name = tokenName;                                   \r\n        symbol = tokenSymbol;                               \r\n        owner = msg.sender;\r\n        timeOfLastProof = now;\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n        lockedSell = true;\r\n    }\r\n\r\n    function emission(uint256 amount) onlyOwner public {\r\n        totalSupply += amount;\r\n        balanceOf[msg.sender] += amount;\r\n    } \r\n    \r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n    \r\n    function buy() public payable returns (uint amount) {\r\n        amount = (msg.value * 10 ** uint256(decimals)) / buyPrice;\r\n        require(balanceOf[owner] >= amount);               \r\n        balanceOf[msg.sender] += amount;                  \r\n        balanceOf[owner] -= amount;                        \r\n        amountRaised += msg.value;\r\n        Transfer(owner, msg.sender, amount);               \r\n        return amount;                                    \r\n    }\r\n\r\n    function sell(uint amount) public returns (uint revenue) {\r\n        require(!lockedSell);\r\n        require(balanceOf[msg.sender] >= amount);         \r\n        balanceOf[owner] += amount;                        \r\n        balanceOf[msg.sender] -= amount;  \r\n        revenue = amount * sellPrice / 10 ** uint256(decimals);\r\n        amountRaised -= revenue;\r\n        require(msg.sender.send(revenue));                \r\n        Transfer(msg.sender, owner, amount);               \r\n        return revenue;                                   \r\n    }\r\n\r\n    function lockSell(bool value) onlyOwner public {\r\n        lockedSell = value;\r\n    }\r\n\r\n    function proofOfWork(uint nonce) public {\r\n        bytes8 n = bytes8(keccak256(nonce, currentChallenge));    \r\n        require(n >= bytes8(difficulty));                   \r\n\r\n        uint timeSinceLastProof = (now - timeOfLastProof);  \r\n        require(timeSinceLastProof >= 5 seconds);         \r\n        balanceOf[msg.sender] += timeSinceLastProof / 60 seconds;  \r\n\r\n        difficulty = difficulty * 10 minutes / timeSinceLastProof + 1;  \r\n\r\n        timeOfLastProof = now;                              \r\n        currentChallenge = keccak256(nonce, currentChallenge, block.blockhash(block.number - 1));  \r\n    }\r\n    \r\n    function _transfer(address from, address to, uint amount) internal {\r\n        require(to != 0x0);\r\n        require(balanceOf[from] >= amount);\r\n        require(balanceOf[to] + amount > balanceOf[to]);\r\n        uint previousBalances = balanceOf[from] + balanceOf[to];\r\n        balanceOf[from] -= amount;\r\n        balanceOf[to] += amount;\r\n        Transfer(from, to, amount);\r\n        assert(balanceOf[from] + balanceOf[to] == previousBalances);\r\n    }\r\n    \r\n    function transfer(address to, uint256 amount) public {\r\n        _transfer(msg.sender, to, amount);\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) public returns (bool success) {\r\n        require(amount <= allowance[from][msg.sender]);\r\n        allowance[from][msg.sender] -= amount;\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool success) {\r\n        allowance[msg.sender][spender] = amount;\r\n        return true;\r\n    }\r\n    \r\n    function burn(uint256 amount) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= amount);   \r\n        balanceOf[msg.sender] -= amount;            \r\n        totalSupply -= amount;                      \r\n        Burn(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address from, uint256 amount) public returns (bool success) {\r\n        require(balanceOf[from] >= amount);\r\n        require(amount <= allowance[from][msg.sender]);\r\n        balanceOf[from] -= amount;\r\n        allowance[from][msg.sender] -= amount;\r\n        totalSupply -= amount;\r\n        Burn(from, amount);\r\n        return true;\r\n    }\r\n\r\n    function withdrawRaised(uint amount) onlyOwner public {\r\n        require(amountRaised >= amount);\r\n        if (owner.send(amount))\r\n            amountRaised -= amount;\r\n    }\r\n\r\n    function freeze(address from, uint256 amount) onlyOwner public returns (bool success){\r\n        require(amount <= allowance[from][this]);\r\n        allowance[from][this] -= amount;\r\n        _transfer(from, this, amount);\r\n        Freeze(from, amount);\r\n        return true;\r\n    }\r\n\r\n    function unFreeze(address to, uint256 amount) onlyOwner public returns (bool success){\r\n        _transfer(this, to, amount);\r\n        UnFreeze(to, amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"difficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unFreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedSell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"proofOfWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeOfLastProof\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRaised\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"lockSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"revenue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnFreeze\",\"type\":\"event\"}]","ContractName":"TokenERC20","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000bebc20000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000035d792f8800000000000000000000000000000000000000000000000000000006a3a9e82800000000000000000000000000000000000000000000000000000000000000000e446f42657441636365707442657400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034443410000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://c5f1b05de71a96c7a190abe4e8f1a75192056fc3ec2cd491966746c09cc589e4"}]}