{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract CaiShen is Ownable {\r\n    struct Gift {\r\n        bool exists;        // 0 Only true if this exists\r\n        uint giftId;        // 1 The gift ID\r\n        address giver;      // 2 The address of the giver\r\n        address recipient;  // 3 The address of the recipient\r\n        uint expiry;        // 4 The expiry datetime of the timelock as a\r\n                            //   Unix timestamp\r\n        uint amount;        // 5 The amount of ETH\r\n        bool redeemed;      // 6 Whether the funds have already been redeemed\r\n        string giverName;   // 7 The giver's name\r\n        string message;     // 8 A message from the giver to the recipient\r\n        uint timestamp;     // 9 The timestamp of when the gift was given\r\n    }\r\n\r\n    // Total fees gathered since the start of the contract or the last time\r\n    // fees were collected, whichever is latest\r\n    uint public feesGathered;\r\n\r\n    // Each gift has a unique ID. If you increment this value, you will get\r\n    // an unused gift ID.\r\n    uint public nextGiftId;\r\n\r\n    // Maps each recipient address to a list of giftIDs of Gifts they have\r\n    // received.\r\n    mapping (address => uint[]) public recipientToGiftIds;\r\n\r\n    // Maps each gift ID to its associated gift.\r\n    mapping (uint => Gift) public giftIdToGift;\r\n\r\n    event Constructed (address indexed by, uint indexed amount);\r\n\r\n    event CollectedAllFees (address indexed by, uint indexed amount);\r\n\r\n    event DirectlyDeposited(address indexed from, uint indexed amount);\r\n\r\n    event Gave (uint indexed giftId,\r\n                address indexed giver,\r\n                address indexed recipient,\r\n                uint amount, uint expiry);\r\n\r\n    event Redeemed (uint indexed giftId,\r\n                    address indexed giver,\r\n                    address indexed recipient,\r\n                    uint amount);\r\n\r\n    // Constructor\r\n    function CaiShen() public payable {\r\n        Constructed(msg.sender, msg.value);\r\n    }\r\n\r\n    // Fallback function which allows this contract to receive funds.\r\n    function () public payable {\r\n        // Sending ETH directly to this contract does nothing except log an\r\n        // event.\r\n        DirectlyDeposited(msg.sender, msg.value);\r\n    }\r\n\r\n    //// Getter functions:\r\n\r\n    function getGiftIdsByRecipient (address recipient) \r\n    public view returns (uint[]) {\r\n        return recipientToGiftIds[recipient];\r\n    }\r\n\r\n    //// Contract functions:\r\n\r\n    // Call this function while sending ETH to give a gift.\r\n    // @recipient: the recipient's address\r\n    // @expiry: the Unix timestamp of the expiry datetime.\r\n    // @giverName: the name of the giver\r\n    // @message: a personal message\r\n    // Tested in test/test_give.js and test/TestGive.sol\r\n    function give (address recipient, uint expiry, string giverName, string message)\r\n    public payable returns (uint) {\r\n        address giver = msg.sender;\r\n\r\n        // Validate the giver address\r\n        assert(giver != address(0));\r\n\r\n        // The gift must be a positive amount of ETH\r\n        uint amount = msg.value;\r\n        require(amount > 0);\r\n        \r\n        // The expiry datetime must be in the future.\r\n        // The possible drift is only 12 minutes.\r\n        // See: https://consensys.github.io/smart-contract-best-practices/recommendations/#timestamp-dependence\r\n        require(expiry > now);\r\n\r\n        // The giver and the recipient must be different addresses\r\n        require(giver != recipient);\r\n\r\n        // The recipient must be a valid address\r\n        require(recipient != address(0));\r\n\r\n        // Make sure nextGiftId is 0 or positive, or this contract is buggy\r\n        assert(nextGiftId >= 0);\r\n\r\n        // Calculate the contract owner's fee\r\n        uint feeTaken = fee(amount);\r\n        assert(feeTaken >= 0);\r\n\r\n        // Increment feesGathered\r\n        feesGathered = SafeMath.add(feesGathered, feeTaken);\r\n\r\n        // Shave off the fee from the amount\r\n        uint amtGiven = SafeMath.sub(amount, feeTaken);\r\n        assert(amtGiven > 0);\r\n\r\n        // If a gift with this new gift ID already exists, this contract is buggy.\r\n        assert(giftIdToGift[nextGiftId].exists == false);\r\n\r\n        // Update the mappings\r\n        recipientToGiftIds[recipient].push(nextGiftId);\r\n        giftIdToGift[nextGiftId] = \r\n            Gift(true, nextGiftId, giver, recipient, expiry, \r\n            amtGiven, false, giverName, message, now);\r\n\r\n        uint giftId = nextGiftId;\r\n\r\n        // Increment nextGiftId\r\n        nextGiftId = SafeMath.add(giftId, 1);\r\n\r\n        // If a gift with this new gift ID already exists, this contract is buggy.\r\n        assert(giftIdToGift[nextGiftId].exists == false);\r\n\r\n        // Log the event\r\n        Gave(giftId, giver, recipient, amount, expiry);\r\n\r\n        return giftId;\r\n    }\r\n\r\n    // Call this function to redeem a gift of ETH.\r\n    // Tested in test/test_redeem.js\r\n    function redeem (uint giftId) public {\r\n        // The giftID should be 0 or positive\r\n        require(giftId >= 0);\r\n\r\n        // The gift must exist and must not have already been redeemed\r\n        require(isValidGift(giftIdToGift[giftId]));\r\n\r\n        // The recipient must be the caller of this function\r\n        address recipient = giftIdToGift[giftId].recipient;\r\n        require(recipient == msg.sender);\r\n\r\n        // The current datetime must be the same or after the expiry timestamp\r\n        require(now >= giftIdToGift[giftId].expiry);\r\n\r\n        //// If the following assert statements are triggered, this contract is\r\n        //// buggy.\r\n\r\n        // The amount must be positive because this is required in give()\r\n        uint amount = giftIdToGift[giftId].amount;\r\n        assert(amount > 0);\r\n\r\n        // The giver must not be the recipient because this was asserted in give()\r\n        address giver = giftIdToGift[giftId].giver;\r\n        assert(giver != recipient);\r\n\r\n        // Make sure the giver is valid because this was asserted in give();\r\n        assert(giver != address(0));\r\n\r\n        // Update the gift to mark it as redeemed, so that the funds cannot be\r\n        // double-spent\r\n        giftIdToGift[giftId].redeemed = true;\r\n\r\n        // Transfer the funds\r\n        recipient.transfer(amount);\r\n\r\n        // Log the event\r\n        Redeemed(giftId, giftIdToGift[giftId].giver, recipient, amount);\r\n    }\r\n\r\n    // Calculate the contract owner's fee\r\n    // Tested in test/test_fee.js\r\n    function fee (uint amount) public pure returns (uint) {\r\n        if (amount <= 0.01 ether) {\r\n            return 0;\r\n        } else if (amount > 0.01 ether) {\r\n            return SafeMath.div(amount, 100);\r\n        }\r\n    }\r\n\r\n    // Transfer the fees collected thus far to the contract owner.\r\n    // Only the contract owner may invoke this function.\r\n    // Tested in test/test_collect_fees.js\r\n    function collectAllFees () public onlyOwner {\r\n        // Store the fee amount in a temporary variable\r\n        uint amount = feesGathered;\r\n\r\n        // Make sure that the amount is positive\r\n        require(amount > 0);\r\n\r\n        // Set the feesGathered state variable to 0\r\n        feesGathered = 0;\r\n\r\n        // Make the transfer\r\n        owner.transfer(amount);\r\n\r\n        CollectedAllFees(owner, amount);\r\n    }\r\n\r\n    // Returns true only if the gift exists and has not already been\r\n    // redeemed\r\n    function isValidGift(Gift gift) private pure returns (bool) {\r\n        return gift.exists == true && gift.redeemed == false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectAllFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesGathered\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"giftIdToGift\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"giftId\",\"type\":\"uint256\"},{\"name\":\"giver\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"expiry\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"redeemed\",\"type\":\"bool\"},{\"name\":\"giverName\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recipientToGiftIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"expiry\",\"type\":\"uint256\"},{\"name\":\"giverName\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"give\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"giftId\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextGiftId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getGiftIdsByRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Constructed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollectedAllFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DirectlyDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"giftId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"giver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"Gave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"giftId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"giver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CaiShen","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://de6aab0008c82d46dc5438e3a9dd42f88d6e91acaa10bd26ca1028b275f23057"}]}