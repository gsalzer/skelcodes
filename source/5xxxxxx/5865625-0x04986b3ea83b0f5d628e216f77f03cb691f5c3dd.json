{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: @0xcert/ethereum-utils/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Math operations with safety checks that throw on error. This contract is based\r\n * on the source code at https://goo.gl/iyQsmU.\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n   * @dev Multiplies two numbers, throws on overflow.\r\n   * @param _a Factor number.\r\n   * @param _b Factor number.\r\n   */\r\n  function mul(\r\n    uint256 _a,\r\n    uint256 _b\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two numbers, truncating the quotient.\r\n   * @param _a Dividend number.\r\n   * @param _b Divisor number.\r\n   */\r\n  function div(\r\n    uint256 _a,\r\n    uint256 _b\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    uint256 c = _a / _b;\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n   * @param _a Minuend number.\r\n   * @param _b Subtrahend number.\r\n   */\r\n  function sub(\r\n    uint256 _a,\r\n    uint256 _b\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two numbers, throws on overflow.\r\n   * @param _a Number.\r\n   * @param _b Number.\r\n   */\r\n  function add(\r\n    uint256 _a,\r\n    uint256 _b\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    uint256 c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-erc721/contracts/tokens/ERC721Enumerable.sol\r\n\r\n/**\r\n * @dev Optional enumeration extension for ERC-721 non-fungible token standard.\r\n * See https://goo.gl/pc9yoS.\r\n */\r\ninterface ERC721Enumerable {\r\n\r\n  /**\r\n   * @dev Returns a count of valid NFTs tracked by this contract, where each one of them has an\r\n   * assigned and queryable owner not equal to the zero address.\r\n   */\r\n  function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token identifier for the `_index`th NFT. Sort order is not specified.\r\n   * @param _index A counter less than `totalSupply()`.\r\n   */\r\n  function tokenByIndex(\r\n    uint256 _index\r\n  )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token identifier for the `_index`th NFT assigned to `_owner`. Sort order is\r\n   * not specified. It throws if `_index` >= `balanceOf(_owner)` or if `_owner` is the zero address,\r\n   * representing invalid NFTs.\r\n   * @param _owner An address where we are interested in NFTs owned by them.\r\n   * @param _index A counter less than `balanceOf(_owner)`.\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-erc721/contracts/tokens/ERC721.sol\r\n\r\n/**\r\n * @dev ERC-721 non-fungible token standard. See https://goo.gl/pc9yoS.\r\n */\r\ninterface ERC721 {\r\n\r\n  /**\r\n   * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\r\n   * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\r\n   * number of NFTs may be created and assigned without emitting Transfer. At the time of any\r\n   * transfer, the approved address for that NFT (if any) is reset to none.\r\n   */\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n  /**\r\n   * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\r\n   * address indicates there is no approved address. When a Transfer event emits, this also\r\n   * indicates that the approved address for that NFT (if any) is reset to none.\r\n   */\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n  /**\r\n   * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\r\n   * all NFTs of the owner.\r\n   */\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  /**\r\n   * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\r\n   * considered invalid, and this function throws for queries about the zero address.\r\n   * @param _owner Address for whom to query the balance.\r\n   */\r\n  function balanceOf(\r\n    address _owner\r\n  )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\r\n   * invalid, and queries about them do throw.\r\n   * @param _tokenId The identifier for an NFT.\r\n   */\r\n  function ownerOf(\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    view\r\n    returns (address);\r\n\r\n  /**\r\n   * @dev Transfers the ownership of an NFT from one address to another address.\r\n   * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\r\n   * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\r\n   * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\r\n   * function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received`\r\n   * on `_to` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n   * @param _from The current owner of the NFT.\r\n   * @param _to The new owner.\r\n   * @param _tokenId The NFT to transfer.\r\n   * @param _data Additional data with no specified format, sent in call to `_to`.\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    external;\r\n\r\n  /**\r\n   * @dev Transfers the ownership of an NFT from one address to another address.\r\n   * @notice This works identically to the other function with an extra data parameter, except this\r\n   * function just sets data to \"\"\r\n   * @param _from The current owner of the NFT.\r\n   * @param _to The new owner.\r\n   * @param _tokenId The NFT to transfer.\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    external;\r\n\r\n  /**\r\n   * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\r\n   * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\r\n   * address. Throws if `_tokenId` is not a valid NFT.\r\n   * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\r\n   * they mayb be permanently lost.\r\n   * @param _from The current owner of the NFT.\r\n   * @param _to The new owner.\r\n   * @param _tokenId The NFT to transfer.\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    external;\r\n\r\n  /**\r\n   * @dev Set or reaffirm the approved address for an NFT.\r\n   * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\r\n   * the current NFT owner, or an authorized operator of the current owner.\r\n   * @param _approved The new approved NFT controller.\r\n   * @param _tokenId The NFT to approve.\r\n   */\r\n  function approve(\r\n    address _approved,\r\n    uint256 _tokenId\r\n  )\r\n    external;\r\n\r\n  /**\r\n   * @dev Enables or disables approval for a third party (\"operator\") to manage all of\r\n   * `msg.sender`'s assets. It also emits the ApprovalForAll event.\r\n   * @notice The contract MUST allow multiple operators per owner.\r\n   * @param _operator Address to add to the set of authorized operators.\r\n   * @param _approved True if the operators is approved, false to revoke approval.\r\n   */\r\n  function setApprovalForAll(\r\n    address _operator,\r\n    bool _approved\r\n  )\r\n    external;\r\n\r\n  /**\r\n   * @dev Get the approved address for a single NFT.\r\n   * @notice Throws if `_tokenId` is not a valid NFT.\r\n   * @param _tokenId The NFT to find the approved address for.\r\n   */\r\n  function getApproved(\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    view\r\n    returns (address);\r\n\r\n  /**\r\n   * @dev Returns true if `_operator` is an approved operator for `_owner`, false otherwise.\r\n   * @param _owner The address that owns the NFTs.\r\n   * @param _operator The address that acts on behalf of the owner.\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-erc721/contracts/tokens/ERC721TokenReceiver.sol\r\n\r\n/**\r\n * @dev ERC-721 interface for accepting safe transfers. See https://goo.gl/pc9yoS.\r\n */\r\ninterface ERC721TokenReceiver {\r\n\r\n  /**\r\n   * @dev Handle the receipt of a NFT. The ERC721 smart contract calls this function on the\r\n   * recipient after a `transfer`. This function MAY throw to revert and reject the transfer. Return\r\n   * of other than the magic value MUST result in the transaction being reverted.\r\n   * Returns `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))` unless throwing.\r\n   * @notice The contract address is always the message sender. A wallet/broker/auction application\r\n   * MUST implement the wallet interface if it will accept safe transfers.\r\n   * @param _from The sending address.\r\n   * @param _tokenId The NFT identifier which is being transfered.\r\n   * @param _data Additional data with no specified format.\r\n   */\r\n  function onERC721Received(\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    external\r\n    returns(bytes4);\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-utils/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @dev The contract has an owner address, and provides basic authorization control whitch\r\n * simplifies the implementation of user permissions. This contract is based on the source code\r\n * at https://goo.gl/n2ZGVt.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev An event which is triggered when the owner is changed.\r\n   * @param previousOwner The address of the previous owner.\r\n   * @param newOwner The address of the new owner.\r\n   */\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The constructor sets the original `owner` of the contract to the sender account.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(\r\n    address _newOwner\r\n  )\r\n    onlyOwner\r\n    public\r\n  {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-utils/contracts/utils/AddressUtils.sol\r\n\r\n/**\r\n * @dev Utility library of inline functions on addresses.\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * @dev Returns whether the target address is a contract.\r\n   * @param _addr Address to check.\r\n   */\r\n  function isContract(\r\n    address _addr\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    uint256 size;\r\n\r\n    /**\r\n     * XXX Currently there is no better way to check if there is a contract in an address than to\r\n     * check the size of the code at that address.\r\n     * See https://ethereum.stackexchange.com/a/14016/36603 for more details about how this works.\r\n     * TODO: Check this again before the Serenity release, because all addresses will be\r\n     * contracts then.\r\n     */\r\n    assembly { size := extcodesize(_addr) } // solium-disable-line security/no-inline-assembly\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-utils/contracts/utils/ERC165.sol\r\n\r\n/**\r\n * @dev A standard for detecting smart contract interfaces. See https://goo.gl/cxQCse.\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @dev Checks if the smart contract includes a specific interface.\r\n   * @notice This function uses less than 30,000 gas.\r\n   * @param _interfaceID The interface identifier, as specified in ERC-165.\r\n   */\r\n  function supportsInterface(\r\n    bytes4 _interfaceID\r\n  )\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: @0xcert/ethereum-utils/contracts/utils/SupportsInterface.sol\r\n\r\n/**\r\n * @dev Implementation of standard for detect smart contract interfaces.\r\n */\r\ncontract SupportsInterface is ERC165 {\r\n\r\n  /**\r\n   * @dev Mapping of supported intefraces.\r\n   * @notice You must not set element 0xffffffff to true.\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    supportedInterfaces[0x01ffc9a7] = true; // ERC165\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check which interfaces are suported by this contract.\r\n   * @param _interfaceID Id of the interface.\r\n   */\r\n  function supportsInterface(\r\n    bytes4 _interfaceID\r\n  )\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceID];\r\n  }\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-erc721/contracts/tokens/NFToken.sol\r\n\r\n/**\r\n * @dev Implementation of ERC-721 non-fungible token standard.\r\n */\r\ncontract NFToken is\r\n  Ownable,\r\n  ERC721,\r\n  SupportsInterface\r\n{\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  /**\r\n   * @dev A mapping from NFT ID to the address that owns it.\r\n   */\r\n  mapping (uint256 => address) internal idToOwner;\r\n\r\n  /**\r\n   * @dev Mapping from NFT ID to approved address.\r\n   */\r\n  mapping (uint256 => address) internal idToApprovals;\r\n\r\n   /**\r\n   * @dev Mapping from owner address to count of his tokens.\r\n   */\r\n  mapping (address => uint256) internal ownerToNFTokenCount;\r\n\r\n  /**\r\n   * @dev Mapping from owner address to mapping of operator addresses.\r\n   */\r\n  mapping (address => mapping (address => bool)) internal ownerToOperators;\r\n\r\n  /**\r\n   * @dev Magic value of a smart contract that can recieve NFT.\r\n   * Equal to: keccak256(\"onERC721Received(address,uint256,bytes)\").\r\n   */\r\n  bytes4 constant MAGIC_ON_ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  /**\r\n   * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\r\n   * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\r\n   * number of NFTs may be created and assigned without emitting Transfer. At the time of any\r\n   * transfer, the approved address for that NFT (if any) is reset to none.\r\n   * @param _from Sender of NFT (if address is zero address it indicates token creation).\r\n   * @param _to Receiver of NFT (if address is zero address it indicates token destruction).\r\n   * @param _tokenId The NFT that got transfered.\r\n   */\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n  /**\r\n   * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\r\n   * address indicates there is no approved address. When a Transfer event emits, this also\r\n   * indicates that the approved address for that NFT (if any) is reset to none.\r\n   * @param _owner Owner of NFT.\r\n   * @param _approved Address that we are approving.\r\n   * @param _tokenId NFT which we are approving.\r\n   */\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n  /**\r\n   * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\r\n   * all NFTs of the owner.\r\n   * @param _owner Owner of NFT.\r\n   * @param _operator Address to which we are setting operator rights.\r\n   * @param _approved Status of operator rights(true if operator rights are given and false if\r\n   * revoked).\r\n   */\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  /**\r\n   * @dev Guarantees that the msg.sender is an owner or operator of the given NFT.\r\n   * @param _tokenId ID of the NFT to validate.\r\n   */\r\n  modifier canOperate(\r\n    uint256 _tokenId\r\n  ) {\r\n    address tokenOwner = idToOwner[_tokenId];\r\n    require(tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Guarantees that the msg.sender is allowed to transfer NFT.\r\n   * @param _tokenId ID of the NFT to transfer.\r\n   */\r\n  modifier canTransfer(\r\n    uint256 _tokenId\r\n  ) {\r\n    address tokenOwner = idToOwner[_tokenId];\r\n    require(\r\n      tokenOwner == msg.sender\r\n      || getApproved(_tokenId) == msg.sender\r\n      || ownerToOperators[tokenOwner][msg.sender]\r\n    );\r\n\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Guarantees that _tokenId is a valid Token.\r\n   * @param _tokenId ID of the NFT to validate.\r\n   */\r\n  modifier validNFToken(\r\n    uint256 _tokenId\r\n  ) {\r\n    require(idToOwner[_tokenId] != address(0));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    supportedInterfaces[0x80ac58cd] = true; // ERC721\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\r\n   * considered invalid, and this function throws for queries about the zero address.\r\n   * @param _owner Address for whom to query the balance.\r\n   */\r\n  function balanceOf(\r\n    address _owner\r\n  )\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_owner != address(0));\r\n    return ownerToNFTokenCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\r\n   * invalid, and queries about them do throw.\r\n   * @param _tokenId The identifier for an NFT.\r\n   */\r\n  function ownerOf(\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    view\r\n    returns (address _owner)\r\n  {\r\n    _owner = idToOwner[_tokenId];\r\n    require(_owner != address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of an NFT from one address to another address.\r\n   * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\r\n   * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\r\n   * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\r\n   * function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received`\r\n   * on `_to` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n   * @param _from The current owner of the NFT.\r\n   * @param _to The new owner.\r\n   * @param _tokenId The NFT to transfer.\r\n   * @param _data Additional data with no specified format, sent in call to `_to`.\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    external\r\n  {\r\n    _safeTransferFrom(_from, _to, _tokenId, _data);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of an NFT from one address to another address.\r\n   * @notice This works identically to the other function with an extra data parameter, except this\r\n   * function just sets data to \"\"\r\n   * @param _from The current owner of the NFT.\r\n   * @param _to The new owner.\r\n   * @param _tokenId The NFT to transfer.\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n  {\r\n    _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\r\n   * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\r\n   * address. Throws if `_tokenId` is not a valid NFT.\r\n   * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\r\n   * they maybe be permanently lost.\r\n   * @param _from The current owner of the NFT.\r\n   * @param _to The new owner.\r\n   * @param _tokenId The NFT to transfer.\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    canTransfer(_tokenId)\r\n    validNFToken(_tokenId)\r\n  {\r\n    address tokenOwner = idToOwner[_tokenId];\r\n    require(tokenOwner == _from);\r\n    require(_to != address(0));\r\n\r\n    _transfer(_to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Set or reaffirm the approved address for an NFT.\r\n   * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\r\n   * the current NFT owner, or an authorized operator of the current owner.\r\n   * @param _approved Address to be approved for the given NFT ID.\r\n   * @param _tokenId ID of the token to be approved.\r\n   */\r\n  function approve(\r\n    address _approved,\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    canOperate(_tokenId)\r\n    validNFToken(_tokenId)\r\n  {\r\n    address tokenOwner = idToOwner[_tokenId];\r\n    require(_approved != tokenOwner);\r\n\r\n    idToApprovals[_tokenId] = _approved;\r\n    emit Approval(tokenOwner, _approved, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Enables or disables approval for a third party (\"operator\") to manage all of\r\n   * `msg.sender`'s assets. It also emits the ApprovalForAll event.\r\n   * @notice This works even if sender doesn't own any tokens at the time.\r\n   * @param _operator Address to add to the set of authorized operators.\r\n   * @param _approved True if the operators is approved, false to revoke approval.\r\n   */\r\n  function setApprovalForAll(\r\n    address _operator,\r\n    bool _approved\r\n  )\r\n    external\r\n  {\r\n    require(_operator != address(0));\r\n    ownerToOperators[msg.sender][_operator] = _approved;\r\n    emit ApprovalForAll(msg.sender, _operator, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Get the approved address for a single NFT.\r\n   * @notice Throws if `_tokenId` is not a valid NFT.\r\n   * @param _tokenId ID of the NFT to query the approval of.\r\n   */\r\n  function getApproved(\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    view\r\n    validNFToken(_tokenId)\r\n    returns (address)\r\n  {\r\n    return idToApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if `_operator` is an approved operator for `_owner`.\r\n   * @param _owner The address that owns the NFTs.\r\n   * @param _operator The address that acts on behalf of the owner.\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(_owner != address(0));\r\n    require(_operator != address(0));\r\n    return ownerToOperators[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Actually perform the safeTransferFrom.\r\n   * @param _from The current owner of the NFT.\r\n   * @param _to The new owner.\r\n   * @param _tokenId The NFT to transfer.\r\n   * @param _data Additional data with no specified format, sent in call to `_to`.\r\n   */\r\n  function _safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    canTransfer(_tokenId)\r\n    validNFToken(_tokenId)\r\n  {\r\n    address tokenOwner = idToOwner[_tokenId];\r\n    require(tokenOwner == _from);\r\n    require(_to != address(0));\r\n\r\n    _transfer(_to, _tokenId);\r\n\r\n    if (_to.isContract()) {\r\n      bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, _data);\r\n      require(retval == MAGIC_ON_ERC721_RECEIVED);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Actually preforms the transfer.\r\n   * @notice Does NO checks.\r\n   * @param _to Address of a new owner.\r\n   * @param _tokenId The NFT that is being transferred.\r\n   */\r\n  function _transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    private\r\n  {\r\n    address from = idToOwner[_tokenId];\r\n\r\n    clearApproval(from, _tokenId);\r\n    removeNFToken(from, _tokenId);\r\n    addNFToken(_to, _tokenId);\r\n\r\n    emit Transfer(from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Mints a new NFT.\r\n   * @notice This is a private function which should be called from user-implemented external\r\n   * mint function. Its purpose is to show and properly initialize data structures when using this\r\n   * implementation.\r\n   * @param _to The address that will own the minted NFT.\r\n   * @param _tokenId of the NFT to be minted by the msg.sender.\r\n   */\r\n  function _mint(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n  {\r\n    require(_to != address(0));\r\n    require(_tokenId != 0);\r\n    require(idToOwner[_tokenId] == address(0));\r\n\r\n    addNFToken(_to, _tokenId);\r\n\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a NFT.\r\n   * @notice This is a private function which should be called from user-implemented external\r\n   * burn function. Its purpose is to show and properly initialize data structures when using this\r\n   * implementation.\r\n   * @param _owner Address of the NFT owner.\r\n   * @param _tokenId ID of the NFT to be burned.\r\n   */\r\n  function _burn(\r\n    address _owner,\r\n    uint256 _tokenId\r\n  )\r\n    validNFToken(_tokenId)\r\n    internal\r\n  {\r\n    clearApproval(_owner, _tokenId);\r\n    removeNFToken(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Clears the current approval of a given NFT ID.\r\n   * @param _tokenId ID of the NFT to be transferred.\r\n   */\r\n  function clearApproval(\r\n    address _owner,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n  {\r\n    delete idToApprovals[_tokenId];\r\n    emit Approval(_owner, 0, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Removes a NFT from owner.\r\n   * @notice Use and override this function with caution. Wrong usage can have serious consequences.\r\n   * @param _from Address from wich we want to remove the NFT.\r\n   * @param _tokenId Which NFT we want to remove.\r\n   */\r\n  function removeNFToken(\r\n    address _from,\r\n    uint256 _tokenId\r\n  )\r\n   internal\r\n  {\r\n    require(idToOwner[_tokenId] == _from);\r\n    assert(ownerToNFTokenCount[_from] > 0);\r\n    ownerToNFTokenCount[_from] = ownerToNFTokenCount[_from].sub(1);\r\n    delete idToOwner[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Assignes a new NFT to owner.\r\n   * @notice Use and override this function with caution. Wrong usage can have serious consequences.\r\n   * @param _to Address to wich we want to add the NFT.\r\n   * @param _tokenId Which NFT we want to add.\r\n   */\r\n  function addNFToken(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n  {\r\n    require(idToOwner[_tokenId] == address(0));\r\n\r\n    idToOwner[_tokenId] = _to;\r\n    ownerToNFTokenCount[_to] = ownerToNFTokenCount[_to].add(1);\r\n  }\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-erc721/contracts/tokens/NFTokenEnumerable.sol\r\n\r\n/**\r\n * @dev Optional enumeration implementation for ERC-721 non-fungible token standard.\r\n */\r\ncontract NFTokenEnumerable is\r\n  NFToken,\r\n  ERC721Enumerable\r\n{\r\n\r\n  /**\r\n   * @dev Array of all NFT IDs.\r\n   */\r\n  uint256[] internal tokens;\r\n\r\n  /**\r\n   * @dev Mapping from owner address to a list of owned NFT IDs.\r\n   */\r\n  mapping(uint256 => uint256) internal idToIndex;\r\n\r\n  /**\r\n   * @dev Mapping from owner to list of owned NFT IDs.\r\n   */\r\n  mapping(address => uint256[]) internal ownerToIds;\r\n\r\n  /**\r\n   * @dev Mapping from NFT ID to its index in the owner tokens list.\r\n   */\r\n  mapping(uint256 => uint256) internal idToOwnerIndex;\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    supportedInterfaces[0x780e9d63] = true; // ERC721Enumerable\r\n  }\r\n\r\n  /**\r\n   * @dev Mints a new NFT.\r\n   * @notice This is a private function which should be called from user-implemented external\r\n   * mint function. Its purpose is to show and properly initialize data structures when using this\r\n   * implementation.\r\n   * @param _to The address that will own the minted NFT.\r\n   * @param _tokenId of the NFT to be minted by the msg.sender.\r\n   */\r\n  function _mint(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n  {\r\n    super._mint(_to, _tokenId);\r\n    tokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a NFT.\r\n   * @notice This is a private function which should be called from user-implemented external\r\n   * burn function. Its purpose is to show and properly initialize data structures when using this\r\n   * implementation.\r\n   * @param _owner Address of the NFT owner.\r\n   * @param _tokenId ID of the NFT to be burned.\r\n   */\r\n  function _burn(\r\n    address _owner,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n  {\r\n    assert(tokens.length > 0);\r\n    super._burn(_owner, _tokenId);\r\n\r\n    uint256 tokenIndex = idToIndex[_tokenId];\r\n    uint256 lastTokenIndex = tokens.length.sub(1);\r\n    uint256 lastToken = tokens[lastTokenIndex];\r\n\r\n    tokens[tokenIndex] = lastToken;\r\n    tokens[lastTokenIndex] = 0;\r\n\r\n    tokens.length--;\r\n    idToIndex[_tokenId] = 0;\r\n    idToIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Removes a NFT from an address.\r\n   * @notice Use and override this function with caution. Wrong usage can have serious consequences.\r\n   * @param _from Address from wich we want to remove the NFT.\r\n   * @param _tokenId Which NFT we want to remove.\r\n   */\r\n  function removeNFToken(\r\n    address _from,\r\n    uint256 _tokenId\r\n  )\r\n   internal\r\n  {\r\n    super.removeNFToken(_from, _tokenId);\r\n    assert(ownerToIds[_from].length > 0);\r\n\r\n    uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownerToIds[_from].length.sub(1);\r\n    uint256 lastToken = ownerToIds[_from][lastTokenIndex];\r\n\r\n    ownerToIds[_from][tokenToRemoveIndex] = lastToken;\r\n    ownerToIds[_from][lastTokenIndex] = 0;\r\n\r\n    ownerToIds[_from].length--;\r\n    idToOwnerIndex[_tokenId] = 0;\r\n    idToOwnerIndex[lastToken] = tokenToRemoveIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Assignes a new NFT to an address.\r\n   * @notice Use and override this function with caution. Wrong usage can have serious consequences.\r\n   * @param _to Address to wich we want to add the NFT.\r\n   * @param _tokenId Which NFT we want to add.\r\n   */\r\n  function addNFToken(\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n  {\r\n    super.addNFToken(_to, _tokenId);\r\n\r\n    uint256 length = ownerToIds[_to].length;\r\n    ownerToIds[_to].push(_tokenId);\r\n    idToOwnerIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the count of all existing NFTokens.\r\n   */\r\n  function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return tokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns NFT ID by its index.\r\n   * @param _index A counter less than `totalSupply()`.\r\n   */\r\n  function tokenByIndex(\r\n    uint256 _index\r\n  )\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < tokens.length);\r\n    return tokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev returns the n-th NFT ID from a list of owner's tokens.\r\n   * @param _owner Token owner's address.\r\n   * @param _index Index number representing n-th token in owner's list of tokens.\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < ownerToIds[_owner].length);\r\n    return ownerToIds[_owner][_index];\r\n  }\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-erc721/contracts/tokens/ERC721Metadata.sol\r\n\r\n/**\r\n * @dev Optional metadata extension for ERC-721 non-fungible token standard.\r\n * See https://goo.gl/pc9yoS.\r\n */\r\ninterface ERC721Metadata {\r\n\r\n  /**\r\n   * @dev Returns a descriptive name for a collection of NFTs in this contract.\r\n   */\r\n  function name()\r\n    external\r\n    view\r\n    returns (string _name);\r\n\r\n  /**\r\n   * @dev Returns a abbreviated name for a collection of NFTs in this contract.\r\n   */\r\n  function symbol()\r\n    external\r\n    view\r\n    returns (string _symbol);\r\n\r\n  /**\r\n   * @dev Returns a distinct Uniform Resource Identifier (URI) for a given asset. It Throws if\r\n   * `_tokenId` is not a valid NFT. URIs are defined in RFC3986. The URI may point to a JSON file\r\n   * that conforms to the \"ERC721 Metadata JSON Schema\".\r\n   */\r\n  function tokenURI(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (string);\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-erc721/contracts/tokens/NFTokenMetadata.sol\r\n\r\n/**\r\n * @dev Optional metadata implementation for ERC-721 non-fungible token standard.\r\n */\r\ncontract NFTokenMetadata is\r\n  NFToken,\r\n  ERC721Metadata\r\n{\r\n\r\n  /**\r\n   * @dev A descriptive name for a collection of NFTs.\r\n   */\r\n  string internal nftName;\r\n\r\n  /**\r\n   * @dev An abbreviated name for NFTokens.\r\n   */\r\n  string internal nftSymbol;\r\n\r\n  /**\r\n   * @dev Mapping from NFT ID to metadata uri.\r\n   */\r\n  mapping (uint256 => string) internal idToUri;\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @notice When implementing this contract don't forget to set nftName and nftSymbol.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    supportedInterfaces[0x5b5e139f] = true; // ERC721Metadata\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a NFT.\r\n   * @notice This is a internal function which should be called from user-implemented external\r\n   * burn function. Its purpose is to show and properly initialize data structures when using this\r\n   * implementation.\r\n   * @param _owner Address of the NFT owner.\r\n   * @param _tokenId ID of the NFT to be burned.\r\n   */\r\n  function _burn(\r\n    address _owner,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n  {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    if (bytes(idToUri[_tokenId]).length != 0) {\r\n      delete idToUri[_tokenId];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Set a distinct URI (RFC 3986) for a given NFT ID.\r\n   * @notice this is a internal function which should be called from user-implemented external\r\n   * function. Its purpose is to show and properly initialize data structures when using this\r\n   * implementation.\r\n   * @param _tokenId Id for which we want uri.\r\n   * @param _uri String representing RFC 3986 URI.\r\n   */\r\n  function _setTokenUri(\r\n    uint256 _tokenId,\r\n    string _uri\r\n  )\r\n    validNFToken(_tokenId)\r\n    internal\r\n  {\r\n    idToUri[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns a descriptive name for a collection of NFTokens.\r\n   */\r\n  function name()\r\n    external\r\n    view\r\n    returns (string _name)\r\n  {\r\n    _name = nftName;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an abbreviated name for NFTokens.\r\n   */\r\n  function symbol()\r\n    external\r\n    view\r\n    returns (string _symbol)\r\n  {\r\n    _symbol = nftSymbol;\r\n  }\r\n\r\n  /**\r\n   * @dev A distinct URI (RFC 3986) for a given NFT.\r\n   * @param _tokenId Id for which we want uri.\r\n   */\r\n  function tokenURI(\r\n    uint256 _tokenId\r\n  )\r\n    validNFToken(_tokenId)\r\n    external\r\n    view\r\n    returns (string)\r\n  {\r\n    return idToUri[_tokenId];\r\n  }\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-xcert/contracts/tokens/Xcert.sol\r\n\r\n/**\r\n * @dev Xcert implementation.\r\n */\r\ncontract Xcert is NFTokenEnumerable, NFTokenMetadata {\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  /**\r\n   * @dev Unique ID which determines each Xcert smart contract type by its JSON convention.\r\n   * @notice Calculated as bytes4(keccak256(jsonSchema)).\r\n   */\r\n  bytes4 internal nftConventionId;\r\n\r\n  /**\r\n   * @dev Maps NFT ID to proof.\r\n   */\r\n  mapping (uint256 => string) internal idToProof;\r\n\r\n  /**\r\n   * @dev Maps NFT ID to protocol config.\r\n   */\r\n  mapping (uint256 => bytes32[]) internal config;\r\n\r\n  /**\r\n   * @dev Maps NFT ID to convention data.\r\n   */\r\n  mapping (uint256 => bytes32[]) internal data;\r\n\r\n  /**\r\n   * @dev Maps address to authorization of contract.\r\n   */\r\n  mapping (address => bool) internal addressToAuthorized;\r\n\r\n  /**\r\n   * @dev Emits when an address is authorized to some contract control or the authorization is revoked.\r\n   * The _target has some contract controle like minting new NFTs.\r\n   * @param _target Address to set authorized state.\r\n   * @param _authorized True if the _target is authorised, false to revoke authorization.\r\n   */\r\n  event AuthorizedAddress(\r\n    address indexed _target,\r\n    bool _authorized\r\n  );\r\n\r\n  /**\r\n   * @dev Guarantees that msg.sender is allowed to mint a new NFT.\r\n   */\r\n  modifier isAuthorized() {\r\n    require(msg.sender == owner || addressToAuthorized[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @notice When implementing this contract don't forget to set nftConventionId, nftName and\r\n   * nftSymbol.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    supportedInterfaces[0x6be14f75] = true; // Xcert\r\n  }\r\n\r\n  /**\r\n   * @dev Mints a new NFT.\r\n   * @param _to The address that will own the minted NFT.\r\n   * @param _id The NFT to be minted by the msg.sender.\r\n   * @param _uri An URI pointing to NFT metadata.\r\n   * @param _proof Cryptographic asset imprint.\r\n   * @param _config Array of protocol config values where 0 index represents token expiration\r\n   * timestamp, other indexes are not yet definied but are ready for future xcert upgrades.\r\n   * @param _data Array of convention data values.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _id,\r\n    string _uri,\r\n    string _proof,\r\n    bytes32[] _config,\r\n    bytes32[] _data\r\n  )\r\n    external\r\n    isAuthorized()\r\n  {\r\n    require(_config.length > 0);\r\n    require(bytes(_proof).length > 0);\r\n    super._mint(_to, _id);\r\n    super._setTokenUri(_id, _uri);\r\n    idToProof[_id] = _proof;\r\n    config[_id] = _config;\r\n    data[_id] = _data;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns a bytes4 of keccak256 of json schema representing 0xcert protocol convention.\r\n   */\r\n  function conventionId()\r\n    external\r\n    view\r\n    returns (bytes4 _conventionId)\r\n  {\r\n    _conventionId = nftConventionId;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns proof for NFT.\r\n   * @param _tokenId Id of the NFT.\r\n   */\r\n  function tokenProof(\r\n    uint256 _tokenId\r\n  )\r\n    validNFToken(_tokenId)\r\n    external\r\n    view\r\n    returns(string)\r\n  {\r\n    return idToProof[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Returns convention data value for a given index field.\r\n   * @param _tokenId Id of the NFT we want to get value for key.\r\n   * @param _index for which we want to get value.\r\n   */\r\n  function tokenDataValue(\r\n    uint256 _tokenId,\r\n    uint256 _index\r\n  )\r\n    validNFToken(_tokenId)\r\n    public\r\n    view\r\n    returns(bytes32 value)\r\n  {\r\n    require(_index < data[_tokenId].length);\r\n    value = data[_tokenId][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Returns expiration date from 0 index of token config values.\r\n   * @param _tokenId Id of the NFT we want to get expiration time of.\r\n   */\r\n  function tokenExpirationTime(\r\n    uint256 _tokenId\r\n  )\r\n    validNFToken(_tokenId)\r\n    external\r\n    view\r\n    returns(bytes32)\r\n  {\r\n    return config[_tokenId][0];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets authorised address for minting.\r\n   * @param _target Address to set authorized state.\r\n   * @param _authorized True if the _target is authorised, false to revoke authorization.\r\n   */\r\n  function setAuthorizedAddress(\r\n    address _target,\r\n    bool _authorized\r\n  )\r\n    onlyOwner\r\n    external\r\n  {\r\n    require(_target != address(0));\r\n    addressToAuthorized[_target] = _authorized;\r\n    emit AuthorizedAddress(_target, _authorized);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets mint authorised address.\r\n   * @param _target Address for which we want to check if it is authorized.\r\n   * @return Is authorized or not.\r\n   */\r\n  function isAuthorizedAddress(\r\n    address _target\r\n  )\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(_target != address(0));\r\n    return addressToAuthorized[_target];\r\n  }\r\n}\r\n\r\n// File: @0xcert/ethereum-erc20/contracts/tokens/ERC20.sol\r\n\r\n/**\r\n * @title A standard interface for tokens.\r\n */\r\ninterface ERC20 {\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name()\r\n    external\r\n    view\r\n    returns (string _name);\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token.\r\n   */\r\n  function symbol()\r\n    external\r\n    view\r\n    returns (string _symbol);\r\n\r\n  /**\r\n   * @dev Returns the number of decimals the token uses.\r\n   */\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (uint8 _decimals);\r\n\r\n  /**\r\n   * @dev Returns the total token supply.\r\n   */\r\n  function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256 _totalSupply);\r\n\r\n  /**\r\n   * @dev Returns the account balance of another account with address _owner.\r\n   * @param _owner The address from which the balance will be retrieved.\r\n   */\r\n  function balanceOf(\r\n    address _owner\r\n  )\r\n    external\r\n    view\r\n    returns (uint256 _balance);\r\n\r\n  /**\r\n   * @dev Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. The\r\n   * function SHOULD throw if the _from account balance does not have enough tokens to spend.\r\n   * @param _to The address of the recipient.\r\n   * @param _value The amount of token to be transferred.\r\n   */\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool _success);\r\n\r\n  /**\r\n   * @dev Transfers _value amount of tokens from address _from to address _to, and MUST fire the\r\n   * Transfer event.\r\n   * @param _from The address of the sender.\r\n   * @param _to The address of the recipient.\r\n   * @param _value The amount of token to be transferred.\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool _success);\r\n\r\n  /**\r\n   * @dev Allows _spender to withdraw from your account multiple times, up to\r\n   * the _value amount. If this function is called again it overwrites the current\r\n   * allowance with _value.\r\n   * @param _spender The address of the account able to transfer the tokens.\r\n   * @param _value The amount of tokens to be approved for transfer.\r\n   */\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool _success);\r\n\r\n  /**\r\n   * @dev Returns the amount which _spender is still allowed to withdraw from _owner.\r\n   * @param _owner The address of the account owning tokens.\r\n   * @param _spender The address of the account able to transfer the tokens.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n  )\r\n    external\r\n    view\r\n    returns (uint256 _remaining);\r\n\r\n  /**\r\n   * @dev Triggers when tokens are transferred, including zero value transfers.\r\n   */\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 _value\r\n  );\r\n\r\n  /**\r\n   * @dev Triggers on any successful call to approve(address _spender, uint256 _value).\r\n   */\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _spender,\r\n    uint256 _value\r\n  );\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-erc20/contracts/tokens/Token.sol\r\n\r\n/**\r\n * @title ERC20 standard token implementation.\r\n * @dev Standard ERC20 token. This contract follows the implementation at https://goo.gl/mLbAPJ.\r\n */\r\ncontract Token is\r\n  ERC20\r\n{\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n   * Token name.\r\n   */\r\n  string internal tokenName;\r\n\r\n  /**\r\n   * Token symbol.\r\n   */\r\n  string internal tokenSymbol;\r\n\r\n  /**\r\n   * Number of decimals.\r\n   */\r\n  uint8 internal tokenDecimals;\r\n\r\n  /**\r\n   * Total supply of tokens.\r\n   */\r\n  uint256 internal tokenTotalSupply;\r\n\r\n  /**\r\n   * Balance information map.\r\n   */\r\n  mapping (address => uint256) internal balances;\r\n\r\n  /**\r\n   * Token allowance mapping.\r\n   */\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Trigger when tokens are transferred, including zero value transfers.\r\n   */\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 _value\r\n  );\r\n\r\n  /**\r\n   * @dev Trigger on any successful call to approve(address _spender, uint256 _value).\r\n   */\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _spender,\r\n    uint256 _value\r\n  );\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name()\r\n    external\r\n    view\r\n    returns (string _name)\r\n  {\r\n    _name = tokenName;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token.\r\n   */\r\n  function symbol()\r\n    external\r\n    view\r\n    returns (string _symbol)\r\n  {\r\n    _symbol = tokenSymbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of decimals the token uses.\r\n   */\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (uint8 _decimals)\r\n  {\r\n    _decimals = tokenDecimals;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the total token supply.\r\n   */\r\n  function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256 _totalSupply)\r\n  {\r\n    _totalSupply = tokenTotalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the account balance of another account with address _owner.\r\n   * @param _owner The address from which the balance will be retrieved.\r\n   */\r\n  function balanceOf(\r\n    address _owner\r\n  )\r\n    external\r\n    view\r\n    returns (uint256 _balance)\r\n  {\r\n    _balance = balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. The\r\n   * function SHOULD throw if the _from account balance does not have enough tokens to spend.\r\n   * @param _to The address of the recipient.\r\n   * @param _value The amount of token to be transferred.\r\n   */\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool _success)\r\n  {\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    emit Transfer(msg.sender, _to, _value);\r\n    _success = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows _spender to withdraw from your account multiple times, up to the _value amount. If\r\n   * this function is called again it overwrites the current allowance with _value.\r\n   * @param _spender The address of the account able to transfer the tokens.\r\n   * @param _value The amount of tokens to be approved for transfer.\r\n   */\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool _success)\r\n  {\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n\r\n    emit Approval(msg.sender, _spender, _value);\r\n    _success = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the amount which _spender is still allowed to withdraw from _owner.\r\n   * @param _owner The address of the account owning tokens.\r\n   * @param _spender The address of the account able to transfer the tokens.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n  )\r\n    external\r\n    view\r\n    returns (uint256 _remaining)\r\n  {\r\n    _remaining = allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers _value amount of tokens from address _from to address _to, and MUST fire the\r\n   * Transfer event.\r\n   * @param _from The address of the sender.\r\n   * @param _to The address of the recipient.\r\n   * @param _value The amount of token to be transferred.\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool _success)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n    emit Transfer(_from, _to, _value);\r\n    _success = true;\r\n  }\r\n\r\n}\r\n\r\n// File: @0xcert/ethereum-zxc/contracts/tokens/Zxc.sol\r\n\r\n/*\r\n * @title ZXC protocol token.\r\n * @dev Standard ERC20 token used by the 0xcert protocol. This contract follows the implementation\r\n * at https://goo.gl/twbPwp.\r\n */\r\ncontract Zxc is\r\n  Token,\r\n  Ownable\r\n{\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n   * Transfer feature state.\r\n   */\r\n  bool internal transferEnabled;\r\n\r\n  /**\r\n   * Crowdsale smart contract address.\r\n   */\r\n  address public crowdsaleAddress;\r\n\r\n  /**\r\n   * @dev An event which is triggered when tokens are burned.\r\n   * @param _burner The address which burns tokens.\r\n   * @param _value The amount of burned tokens.\r\n   */\r\n  event Burn(\r\n    address indexed _burner,\r\n    uint256 _value\r\n  );\r\n\r\n  /**\r\n   * @dev Assures that the provided address is a valid destination to transfer tokens to.\r\n   * @param _to Target address.\r\n   */\r\n  modifier validDestination(\r\n    address _to\r\n  )\r\n  {\r\n    require(_to != address(0x0));\r\n    require(_to != address(this));\r\n    require(_to != address(crowdsaleAddress));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Assures that tokens can be transfered.\r\n   */\r\n  modifier onlyWhenTransferAllowed()\r\n  {\r\n    require(transferEnabled || msg.sender == crowdsaleAddress);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    tokenName = \"0xcert Protocol Token\";\r\n    tokenSymbol = \"ZXC\";\r\n    tokenDecimals = 18;\r\n    tokenTotalSupply = 400000000000000000000000000;\r\n    transferEnabled = false;\r\n\r\n    balances[owner] = tokenTotalSupply;\r\n    emit Transfer(address(0x0), owner, tokenTotalSupply);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers token to a specified address.\r\n   * @param _to The address to transfer to.\r\n   * @param _value The amount to be transferred.\r\n   */\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    onlyWhenTransferAllowed()\r\n    validDestination(_to)\r\n    public\r\n    returns (bool _success)\r\n  {\r\n    _success = super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers tokens from one address to another.\r\n   * @param _from address The address which you want to send tokens from.\r\n   * @param _to address The address which you want to transfer to.\r\n   * @param _value uint256 The amount of tokens to be transferred.\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    onlyWhenTransferAllowed()\r\n    validDestination(_to)\r\n    public\r\n    returns (bool _success)\r\n  {\r\n    _success = super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Enables token transfers.\r\n   */\r\n  function enableTransfer()\r\n    onlyOwner()\r\n    external\r\n  {\r\n    transferEnabled = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens. This function is based on BurnableToken implementation\r\n   * at goo.gl/GZEhaq.\r\n   * @notice Only owner is allowed to perform this operation.\r\n   * @param _value The amount of tokens to be burned.\r\n   */\r\n  function burn(\r\n    uint256 _value\r\n  )\r\n    onlyOwner()\r\n    external\r\n  {\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[owner] = balances[owner].sub(_value);\r\n    tokenTotalSupply = tokenTotalSupply.sub(_value);\r\n\r\n    emit Burn(owner, _value);\r\n    emit Transfer(owner, address(0x0), _value);\r\n  }\r\n\r\n  /**\r\n    * @dev Set crowdsale address which can distribute tokens even when onlyWhenTransferAllowed is\r\n    * false.\r\n    * @param crowdsaleAddr Address of token offering contract.\r\n    */\r\n  function setCrowdsaleAddress(\r\n    address crowdsaleAddr\r\n  )\r\n    external\r\n    onlyOwner()\r\n  {\r\n    crowdsaleAddress = crowdsaleAddr;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/crowdsale/ZxcCrowdsale.sol\r\n\r\n/**\r\n * @title ZXC crowdsale contract.\r\n * @dev Crowdsale contract for distributing ZXC tokens.\r\n * Start timestamps for the token sale stages (start dates are inclusive, end exclusive):\r\n *   - Token presale with 10% bonus: 2018/06/26 - 2018/07/04\r\n *   - Token sale with 5% bonus: 2018/07/04 - 2018/07/05\r\n *   - Token sale with 0% bonus: 2018/07/05 - 2018/07/18\r\n */\r\ncontract ZxcCrowdsale\r\n{\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n   * @dev Token being sold.\r\n   */\r\n  Zxc public token;\r\n\r\n  /**\r\n   * @dev Xcert KYC token.\r\n   */\r\n  Xcert public xcertKyc;\r\n\r\n  /**\r\n   * @dev Start time of the presale.\r\n   */\r\n  uint256 public startTimePresale;\r\n\r\n  /**\r\n   * @dev Start time of the token sale with bonus.\r\n   */\r\n  uint256 public startTimeSaleWithBonus;\r\n\r\n  /**\r\n   * @dev Start time of the token sale with no bonus.\r\n   */\r\n  uint256 public startTimeSaleNoBonus;\r\n\r\n  /**\r\n   * @dev Presale bonus expressed as percentage integer (10% = 10).\r\n   */\r\n  uint256 public bonusPresale;\r\n\r\n  /**\r\n   * @dev Token sale bonus expressed as percentage integer (10% = 10).\r\n   */\r\n  uint256 public bonusSale;\r\n\r\n  /**\r\n   * @dev End timestamp to end the crowdsale.\r\n   */\r\n  uint256 public endTime;\r\n\r\n  /**\r\n   * @dev Minimum required wei deposit for public presale period.\r\n   */\r\n  uint256 public minimumPresaleWeiDeposit;\r\n\r\n  /**\r\n   * @dev Total amount of ZXC tokens offered for the presale.\r\n   */\r\n  uint256 public preSaleZxcCap;\r\n\r\n  /**\r\n   * @dev Total supply of ZXC tokens for the sale.\r\n   */\r\n  uint256 public crowdSaleZxcSupply;\r\n\r\n  /**\r\n   * @dev Amount of ZXC tokens sold.\r\n   */\r\n  uint256 public zxcSold;\r\n\r\n  /**\r\n   * @dev Address where funds are collected.\r\n   */\r\n  address public wallet;\r\n\r\n  /**\r\n   * @dev How many token units buyer gets per wei.\r\n   */\r\n  uint256 public rate;\r\n\r\n  /**\r\n   * @dev An event which is triggered when tokens are bought.\r\n   * @param _from The address sending tokens.\r\n   * @param _to The address receiving tokens.\r\n   * @param _weiAmount Purchase amount in wei.\r\n   * @param _tokenAmount The amount of purchased tokens.\r\n   */\r\n  event TokenPurchase(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 _weiAmount,\r\n    uint256 _tokenAmount\r\n  );\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _walletAddress Address of the wallet which collects funds.\r\n   * @param _tokenAddress Address of the ZXC token contract.\r\n   * @param _xcertKycAddress Address of the Xcert KYC token contract.\r\n   * @param _startTimePresale Start time of presale stage.\r\n   * @param _startTimeSaleWithBonus Start time of public sale stage with bonus.\r\n   * @param _startTimeSaleNoBonus Start time of public sale stage with no bonus.\r\n   * @param _endTime Time when sale ends.\r\n   * @param _rate ZXC/ETH exchange rate.\r\n   * @param _presaleZxcCap Maximum number of ZXC offered for the presale.\r\n   * @param _crowdSaleZxcSupply Supply of ZXC tokens offered for the sale. Includes _presaleZxcCap.\r\n   * @param _bonusPresale Bonus token percentage for presale.\r\n   * @param _bonusSale Bonus token percentage for public sale stage with bonus.\r\n   * @param _minimumPresaleWeiDeposit Minimum required deposit in wei.\r\n   */\r\n  constructor(\r\n    address _walletAddress,\r\n    address _tokenAddress,\r\n    address _xcertKycAddress,\r\n    uint256 _startTimePresale,  // 1529971200: date -d '2018-06-26 00:00:00 UTC' +%s\r\n    uint256 _startTimeSaleWithBonus, // 1530662400: date -d '2018-07-04 00:00:00 UTC' +%s\r\n    uint256 _startTimeSaleNoBonus,  //1530748800: date -d '2018-07-05 00:00:00 UTC' +%s\r\n    uint256 _endTime,  // 1531872000: date -d '2018-07-18 00:00:00 UTC' +%s\r\n    uint256 _rate,  // 10000: 1 ETH = 10,000 ZXC\r\n    uint256 _presaleZxcCap, // 195M\r\n    uint256 _crowdSaleZxcSupply, // 250M\r\n    uint256 _bonusPresale,  // 10 (%)\r\n    uint256 _bonusSale,  // 5 (%)\r\n    uint256 _minimumPresaleWeiDeposit  // 1 ether;\r\n  )\r\n    public\r\n  {\r\n    require(_walletAddress != address(0));\r\n    require(_tokenAddress != address(0));\r\n    require(_xcertKycAddress != address(0));\r\n    require(_tokenAddress != _walletAddress);\r\n    require(_tokenAddress != _xcertKycAddress);\r\n    require(_xcertKycAddress != _walletAddress);\r\n\r\n    token = Zxc(_tokenAddress);\r\n    xcertKyc = Xcert(_xcertKycAddress);\r\n\r\n    uint8 _tokenDecimals = token.decimals();\r\n    require(_tokenDecimals == 18);  // Sanity check.\r\n    wallet = _walletAddress;\r\n\r\n    // Bonus should be > 0% and <= 100%\r\n    require(_bonusPresale > 0 && _bonusPresale <= 100);\r\n    require(_bonusSale > 0 && _bonusSale <= 100);\r\n\r\n    bonusPresale = _bonusPresale;\r\n    bonusSale = _bonusSale;\r\n\r\n    require(_startTimePresale >= now);\r\n    require(_startTimeSaleWithBonus > _startTimePresale);\r\n    require(_startTimeSaleNoBonus > _startTimeSaleWithBonus);\r\n\r\n    startTimePresale = _startTimePresale;\r\n    startTimeSaleWithBonus = _startTimeSaleWithBonus;\r\n    startTimeSaleNoBonus = _startTimeSaleNoBonus;\r\n    endTime = _endTime;\r\n\r\n    require(_rate > 0);\r\n    rate = _rate;\r\n\r\n    require(_crowdSaleZxcSupply > 0);\r\n    require(token.totalSupply() >= _crowdSaleZxcSupply);\r\n    crowdSaleZxcSupply = _crowdSaleZxcSupply;\r\n\r\n    require(_presaleZxcCap > 0 && _presaleZxcCap <= _crowdSaleZxcSupply);\r\n    preSaleZxcCap = _presaleZxcCap;\r\n\r\n    zxcSold = 0;\r\n\r\n    require(_minimumPresaleWeiDeposit > 0);\r\n    minimumPresaleWeiDeposit = _minimumPresaleWeiDeposit;\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function can be used to buy tokens.\r\n   */\r\n  function()\r\n    external\r\n    payable\r\n  {\r\n    buyTokens();\r\n  }\r\n\r\n  /**\r\n   * @dev Low level token purchase function.\r\n   */\r\n  function buyTokens()\r\n    public\r\n    payable\r\n  {\r\n    uint256 tokens;\r\n\r\n    // Sender needs Xcert KYC token.\r\n    uint256 balance = xcertKyc.balanceOf(msg.sender);\r\n    require(balance > 0);\r\n    \r\n    if (isInTimeRange(startTimePresale, startTimeSaleWithBonus)) {\r\n      uint256 tokenId = xcertKyc.tokenOfOwnerByIndex(msg.sender, balance.sub(1));\r\n      uint256 kycLevel = uint(xcertKyc.tokenDataValue(tokenId, 0));\r\n      require(kycLevel > 1);\r\n      require(msg.value >= minimumPresaleWeiDeposit);\r\n      tokens = getTokenAmount(msg.value, bonusPresale);\r\n      require(tokens <= preSaleZxcCap);\r\n    }\r\n    else if (isInTimeRange(startTimeSaleWithBonus, startTimeSaleNoBonus)) {\r\n      tokens = getTokenAmount(msg.value, bonusSale);\r\n    }\r\n    else if (isInTimeRange(startTimeSaleNoBonus, endTime)) {\r\n      tokens = getTokenAmount(msg.value, uint256(0));\r\n    }\r\n    else {\r\n      revert(\"Purchase outside of token sale time windows\");\r\n    }\r\n\r\n    require(zxcSold.add(tokens) <= crowdSaleZxcSupply);\r\n    zxcSold = zxcSold.add(tokens);\r\n\r\n    wallet.transfer(msg.value);\r\n    require(token.transferFrom(token.owner(), msg.sender, tokens));\r\n    emit TokenPurchase(msg.sender, msg.sender, msg.value, tokens);\r\n  }\r\n\r\n  /**\r\n   * @return true if crowdsale event has ended\r\n   */\r\n  function hasEnded()\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    bool capReached = zxcSold >= crowdSaleZxcSupply;\r\n    bool endTimeReached = now >= endTime;\r\n    return capReached || endTimeReached;\r\n  }\r\n\r\n  /**\r\n   * @dev Check if currently active period is a given time period.\r\n   * @param _startTime Starting timestamp (inclusive).\r\n   * @param _endTime Ending timestamp (exclusive).\r\n   * @return bool\r\n   */\r\n  function isInTimeRange(\r\n    uint256 _startTime,\r\n    uint256 _endTime\r\n  )\r\n    internal\r\n    view\r\n    returns(bool)\r\n  {\r\n    if (now >= _startTime && now < _endTime) {\r\n      return true;\r\n    }\r\n    else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate amount of tokens for a given wei amount. Apply special bonuses depending on\r\n   * @param weiAmount Amount of wei for token purchase.\r\n   * @param bonusPercent Percentage of bonus tokens.\r\n   * @return Number of tokens with possible bonus.\r\n   */\r\n  function getTokenAmount(\r\n    uint256 weiAmount,\r\n    uint256 bonusPercent\r\n  )\r\n    internal\r\n    view\r\n    returns(uint256)\r\n  {\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    if (bonusPercent > 0) {\r\n      uint256 bonusTokens = tokens.mul(bonusPercent).div(uint256(100)); // tokens * bonus (%) / 100%\r\n      tokens = tokens.add(bonusTokens);\r\n    }\r\n\r\n    return tokens;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"preSaleZxcCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimePresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xcertKyc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleZxcSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"zxcSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimeSaleNoBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumPresaleWeiDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimeSaleWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_walletAddress\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_xcertKycAddress\",\"type\":\"address\"},{\"name\":\"_startTimePresale\",\"type\":\"uint256\"},{\"name\":\"_startTimeSaleWithBonus\",\"type\":\"uint256\"},{\"name\":\"_startTimeSaleNoBonus\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_presaleZxcCap\",\"type\":\"uint256\"},{\"name\":\"_crowdSaleZxcSupply\",\"type\":\"uint256\"},{\"name\":\"_bonusPresale\",\"type\":\"uint256\"},{\"name\":\"_bonusSale\",\"type\":\"uint256\"},{\"name\":\"_minimumPresaleWeiDeposit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"ZxcCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c1678c7d5f4d01d30ad72bc5848bb7dfb248b5b900000000000000000000000083e2be8d114f9661221384b3a50d24b96a5653f5000000000000000000000000b57756d92bd170a66b4f361eafbfd13e625372c2000000000000000000000000000000000000000000000000000000005b3a3df0000000000000000000000000000000000000000000000000000000005b3ce0f0000000000000000000000000000000000000000000000000000000005b3e3270000000000000000000000000000000000000000000000000000000005b4f55f0000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000031a17e847807b1bc0000000000000000000000000000000000000000000000005f20327de60ebf53000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000de0b6b3a7640000","Library":"","SwarmSource":"bzzr://598cf68be13dfe20249e1379dd73be9e2b39e01bffff4c17590ae04b3ab545da"}]}