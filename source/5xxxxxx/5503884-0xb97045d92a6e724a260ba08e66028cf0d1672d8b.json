{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\ncontract Countout {\r\n\r\n    address public owner;\r\n    uint128 public ownerBank;\r\n    uint8 public round;\r\n    uint8 public round_after;\r\n    uint8 public currentCount;\r\n    uint8 public totalCount;\r\n    uint128 public initialPrice = 0.005 ether;\r\n    uint128 public bonusPrice = 0.1 ether;\r\n    uint128 public nextPrice;\r\n    uint128 public sumPrice;\r\n    uint256 public lastTransactionTime;\r\n    address public lastCountAddress;    \r\n    uint8 private randomCount;\r\n    \r\n    address[] public sevenWinnerAddresses;      \r\n    mapping (address => uint128) public addressToBalance;\r\n\r\n    event Count(address from, uint8 count);\r\n    event Hit(address from, uint8 count);\r\n\r\n    /*** CONSTRUCTOR ***/\r\n    function Countout() public {\r\n        owner = msg.sender;\r\n        _renew();\r\n        _keepLastTransaction();\r\n        //Set randomcount as 10 as pre-sale\r\n        randomCount = 10;\r\n    }\r\n\r\n    /*** Owner Action ***/\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n    function ownerWithdraw() public onlyOwner {\r\n        require (block.timestamp > lastTransactionTime + 7 days); \r\n\r\n        if (round_after < 77 && sevenWinnerAddresses.length > 0){\r\n            uint128 sevensWinnerBack = (ownerBank + sumPrice) / uint8(sevenWinnerAddresses.length) - 0.0000007 ether;\r\n            uint8 i;\r\n            for (i = 0; i < sevenWinnerAddresses.length; i++){\r\n                addressToBalance[sevenWinnerAddresses[i]]  = addressToBalance[sevenWinnerAddresses[i]] + sevensWinnerBack;\r\n            }         \r\n               \r\n        } else {\r\n            owner.transfer(this.balance);\r\n        }\r\n        sumPrice = 0;\r\n        ownerBank = 0;\r\n    }\r\n\r\n    function sevenWinnerWithdraw() public {\r\n        require(addressToBalance[msg.sender] > 0);\r\n        msg.sender.transfer(addressToBalance[msg.sender]);\r\n        addressToBalance[msg.sender] = 0;\r\n    }    \r\n\r\n    /*** Main Function ***/\r\n    function _payFee(uint128 _price, address _referralAddress) internal returns (uint128 _processing){\r\n        uint128 _cut = _price / 100;\r\n        _processing = _price - _cut;\r\n        if (_referralAddress != address(0)){\r\n            _referralAddress.transfer(_cut);\r\n        } else {    \r\n            ownerBank = ownerBank + _cut;    \r\n        }\r\n        uint8 i;\r\n        for (i = 0; i < sevenWinnerAddresses.length; i++){\r\n            addressToBalance[sevenWinnerAddresses[i]]  = addressToBalance[sevenWinnerAddresses[i]] + _cut;\r\n            _processing = _processing - _cut;\r\n        }\r\n\r\n        uint128 _remaining = (7 - uint8(sevenWinnerAddresses.length)) * _cut;\r\n        ownerBank = ownerBank + _remaining;\r\n        _processing = _processing - _remaining;\r\n    }\r\n\r\n    function _renew() internal{\r\n        round++;\r\n        if (sevenWinnerAddresses.length == 7){\r\n            round_after++;\r\n        }\r\n        currentCount = 0;\r\n        nextPrice = initialPrice;\r\n\r\n        randomCount = uint8(block.blockhash(block.number-randomCount))%10 + 1;\r\n\r\n        if(randomCount >= 7){\r\n            randomCount = uint8(block.blockhash(block.number-randomCount-randomCount))%10 + 1;  \r\n        }\r\n        \r\n        if (sevenWinnerAddresses.length < 7 && randomCount == 7){\r\n            randomCount++;\r\n        }         \r\n\r\n    }\r\n\r\n    function _keepLastTransaction() internal{\r\n        lastTransactionTime = block.timestamp;\r\n        lastCountAddress = msg.sender;\r\n    }\r\n\r\n    function countUp(address _referralAddress) public payable {\r\n        require (block.timestamp < lastTransactionTime + 7 days);    \r\n        require (msg.value == nextPrice); \r\n\r\n        uint128 _price = uint128(msg.value);\r\n        uint128 _processing;\r\n      \r\n        totalCount++;\r\n        currentCount++; \r\n\r\n        _processing = _payFee(_price, _referralAddress);     \r\n        \r\n        if (currentCount > 1) {\r\n            lastCountAddress.transfer(_processing);\r\n        } else {\r\n            sumPrice = sumPrice + _processing;\r\n        }\r\n\r\n        if (currentCount == randomCount) {\r\n            Hit(msg.sender, currentCount);\r\n            _renew(); \r\n\r\n        } else {\r\n            if (currentCount == 7) {\r\n                if (sevenWinnerAddresses.length < 7){\r\n                    sevenWinnerAddresses.push(msg.sender);\r\n                } else {\r\n\r\n                    if (sumPrice <= bonusPrice) {\r\n                        msg.sender.transfer(sumPrice);\r\n                        sumPrice = 0;\r\n                    } else {\r\n                        msg.sender.transfer(bonusPrice);\r\n                        sumPrice = sumPrice - bonusPrice;\r\n                   }\r\n                }\r\n                _renew();\r\n            } else {\r\n                nextPrice = nextPrice * 3/2;\r\n            }   \r\n\r\n            Count(msg.sender, currentCount);            \r\n        }\r\n        _keepLastTransaction(); \r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sevenWinnerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round_after\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTransactionTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sevenWinnerAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sumPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerBank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastCountAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referralAddress\",\"type\":\"address\"}],\"name\":\"countUp\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint8\"}],\"name\":\"Count\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint8\"}],\"name\":\"Hit\",\"type\":\"event\"}]","ContractName":"Countout","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://33a062dc06ac893304420cf551714b5cbd769675bd3f75d5131b8351143a761c"}]}