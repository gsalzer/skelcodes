{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\ncontract Ownable{\r\n    address public owner;\r\n    event ownerTransfer(address indexed oldOwner, address indexed newOwner);\r\n    event ownerGone(address indexed oldOwner);\r\n\r\n    constructor(){\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function changeOwner(address _newOwner) public onlyOwner{\r\n        require(_newOwner != address(0x0));\r\n        emit ownerTransfer(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\ncontract Haltable is Ownable{\r\n    bool public paused;\r\n    event ContractPaused(address by);\r\n    event ContractUnpaused(address by);\r\n\r\n    /**\r\n     * @dev Paused by default.\r\n     */\r\n    constructor(){\r\n        paused = true;\r\n    }\r\n    function pause() public onlyOwner {\r\n        paused = true;\r\n        emit ContractPaused(owner);\r\n    }\r\n    function unpause() public onlyOwner {\r\n        paused = false;\r\n        emit ContractUnpaused(owner);\r\n    }\r\n    modifier stopOnPause(){\r\n        require(paused == false);\r\n        _;\r\n    }\r\n}\r\ninterface ABIO_Token {\r\n    function owner() external returns (address);\r\n    function transfer(address receiver, uint amount) external;\r\n    function burnMyBalance() external;\r\n}\r\ninterface ABIO_ICO{\r\n    function deadline() external returns (uint);\r\n    function weiRaised() external returns (uint);\r\n}\r\n\r\ncontract ABIO_BaseICO is Haltable{\r\n    mapping(address => uint256) ethBalances;\r\n\r\n    uint public weiRaised;//total raised in wei\r\n    uint public abioSold;//amount of ABIO sold\r\n    uint public volume; //total amount of ABIO selling in this preICO\r\n\r\n    uint public startDate;\r\n    uint public length;\r\n    uint public deadline;\r\n    bool public restTokensBurned;\r\n\r\n    uint public weiPerABIO; //how much wei one ABIO costs\r\n    uint public minInvestment;\r\n    uint public fundingGoal;\r\n    bool public fundingGoalReached;\r\n    address public treasury;\r\n\r\n    ABIO_Token public abioToken;\r\n\r\n    event ICOStart(uint volume, uint weiPerABIO, uint minInvestment);\r\n    event SoftcapReached(address recipient, uint totalAmountRaised);\r\n    event FundsReceived(address backer, uint amount);\r\n    event FundsWithdrawn(address receiver, uint amount);\r\n\r\n    event ChangeTreasury(address operator, address newTreasury);\r\n    event ChangeMinInvestment(address operator, uint oldMin, uint newMin);\r\n\r\n         /**\r\n         * @notice allows owner to change the treasury in case of hack/lost keys.\r\n         * @dev Marked external because it is never called from this contract.\r\n         */\r\n         function changeTreasury(address _newTreasury) external onlyOwner{\r\n             treasury = _newTreasury;\r\n             emit ChangeTreasury(msg.sender, _newTreasury);\r\n         }\r\n\r\n         /**\r\n         * @notice allows owner to change the minInvestment in case of extreme price jumps of ETH price.\r\n         */\r\n         function changeMinInvestment(uint _newMin) external onlyOwner{\r\n             emit ChangeMinInvestment(msg.sender, minInvestment, _newMin);\r\n             minInvestment = _newMin;\r\n         }\r\n\r\n         /**\r\n          * @notice Called everytime we receive a contribution in ETH.\r\n          * @dev Tokens are immediately transferred to the contributor, even if goal doesn't get reached.\r\n          */\r\n         function () payable stopOnPause{\r\n             require(now < deadline);\r\n             require(msg.value >= minInvestment);\r\n             uint amount = msg.value;\r\n             ethBalances[msg.sender] += amount;\r\n             weiRaised += amount;\r\n             if(!fundingGoalReached && weiRaised >= fundingGoal){goalReached();}\r\n\r\n             uint ABIOAmount = amount / weiPerABIO ;\r\n             abioToken.transfer(msg.sender, ABIOAmount);\r\n             abioSold += ABIOAmount;\r\n             emit FundsReceived(msg.sender, amount);\r\n         }\r\n\r\n         /**\r\n         * @notice We implement tokenFallback in case someone decides to send us tokens or we want to increase ICO Volume.\r\n         * @dev If someone sends random tokens transaction is reverted.\r\n         * @dev If owner of token sends tokens, we accept them.\r\n         * @dev Crowdsale opens once this contract gets the tokens.\r\n         */\r\n         function tokenFallback(address _from, uint _value, bytes _data) external{\r\n             require(_from == abioToken.owner() || _from == owner);\r\n             volume = _value;\r\n             paused = false;\r\n             deadline = now + length;\r\n             emit ICOStart(_value, weiPerABIO, minInvestment);\r\n         }\r\n\r\n         /**\r\n         * @notice Burns tokens leftover from an ICO round.\r\n         * @dev This can be called by anyone after deadline since it's an essential and inevitable part.\r\n         */\r\n         function burnRestTokens() afterDeadline{\r\n                 require(!restTokensBurned);\r\n                 abioToken.burnMyBalance();\r\n                 restTokensBurned = true;\r\n         }\r\n\r\n         function isRunning() view returns (bool){\r\n             return (now < deadline);\r\n         }\r\n\r\n         function goalReached() internal;\r\n\r\n         modifier afterDeadline() { if (now >= deadline) _; }\r\n}\r\ncontract ABIO_preICO is ABIO_BaseICO{\r\n    address ICOAddress;\r\n    ABIO_ICO ICO;\r\n    uint finalDeadline;\r\n\r\n    constructor(address _abioAddress, uint _lenInMins, uint _minWeiInvestment, address _treasury, uint _priceInWei, uint _goalInWei){\r\n        treasury = _treasury;\r\n        abioToken = ABIO_Token(_abioAddress);\r\n\r\n        weiPerABIO = _priceInWei;\r\n        fundingGoal = _goalInWei;\r\n        minInvestment = _minWeiInvestment;\r\n\r\n        startDate = now;\r\n        length = _lenInMins * 1 minutes;\r\n     }\r\n     /**\r\n     * @notice Called by dev to supply the address of the ICO (which is created after the PreICO)\r\n     * @dev We check if `fundingGoal` is reached again, because this MIGHT be called after it is reached, so `extGoalReached()` will never be called after.\r\n     */\r\n    function supplyICOContract(address _addr) public onlyOwner{\r\n        require(_addr != 0x0);\r\n        ICOAddress = _addr;\r\n        ICO = ABIO_ICO(_addr);\r\n        if(!fundingGoalReached && weiRaised + ICO.weiRaised() >= fundingGoal){goalReached();}\r\n        finalDeadline = ICO.deadline();\r\n    }\r\n\r\n    function goalReached() internal{\r\n        fundingGoalReached = true;\r\n        emit SoftcapReached(treasury, fundingGoal);\r\n    }\r\n\r\n    /**\r\n    * @notice supposed to be called by ICO Contract IF `fundingGoal` wasn't reached during PreICO to notify it\r\n    * @dev !!Funds can't be deposited to treasury if `fundingGoal` isn't called before main ICO ends!!\r\n    * @dev This is, at max., called once! If this contract doesn't know ICOAddress by that time, we rely on the check in `supplyICOContract()`\r\n    */\r\n    function extGoalReached() afterDeadline external{\r\n        require(ICOAddress != 0x0); //ICO was supplied\r\n        require(msg.sender == ICOAddress);\r\n        goalReached();\r\n    }\r\n\r\n    /**\r\n     * @notice Lets participants withdraw the funds if `fundingGoal` was missed.\r\n     * @notice Lets treasury collect the funds if `fundingGoal` was reached.\r\n     * @dev The contract is obligated to return the ETH to contributors if `fundingGoal` isn't reached,\r\n     *      so we have to wait until the end for a user withdrawal.\r\n     * @dev The treasury can withdraw right after `fundingGoal` is reached.\r\n     */\r\n    function safeWithdrawal() afterDeadline stopOnPause{\r\n        if (!fundingGoalReached && now >= finalDeadline) {\r\n            uint amount = ethBalances[msg.sender];\r\n            ethBalances[msg.sender] = 0;\r\n            if (amount > 0) {\r\n                if (msg.sender.send(amount)) {\r\n                    emit FundsWithdrawn(msg.sender, amount);\r\n                } else {\r\n                    ethBalances[msg.sender] = amount;\r\n                }\r\n            }\r\n        }\r\n        else if (fundingGoalReached && treasury == msg.sender) {\r\n            if (treasury.send(weiRaised)) {\r\n                emit FundsWithdrawn(treasury, weiRaised);\r\n            } else if (treasury.send(address(this).balance)){\r\n                emit FundsWithdrawn(treasury, address(this).balance);\r\n            }\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMin\",\"type\":\"uint256\"}],\"name\":\"changeMinInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnRestTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"abioSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiPerABIO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"extGoalReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"abioToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"changeTreasury\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"restTokensBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"volume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"supplyICOContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_abioAddress\",\"type\":\"address\"},{\"name\":\"_lenInMins\",\"type\":\"uint256\"},{\"name\":\"_minWeiInvestment\",\"type\":\"uint256\"},{\"name\":\"_treasury\",\"type\":\"address\"},{\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"name\":\"_goalInWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"volume\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiPerABIO\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minInvestment\",\"type\":\"uint256\"}],\"name\":\"ICOStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"SoftcapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"ChangeTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldMin\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newMin\",\"type\":\"uint256\"}],\"name\":\"ChangeMinInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"ContractPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"ContractUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ownerTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"ownerGone\",\"type\":\"event\"}]","ContractName":"ABIO_preICO","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000011df22f31dbdab228d605637ee43777aaf9ee08900000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000000000000000000000000000000000000000000100000000000000000000000029d29a3f33c838ba9493a4adbf1054635ee95b6800000000000000000000000000000000000000000000000000000001957945000000000000000000000000000000000000000000000000000007401c80bb6000","Library":"","SwarmSource":"bzzr://b6dda9bca2b7f993c95ece976df1ee245ab70d8bc491e28bd448e50a8653d829"}]}