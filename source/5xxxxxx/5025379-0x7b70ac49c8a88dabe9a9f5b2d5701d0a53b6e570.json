{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint256);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract VanityToken is owned, ERC20Interface {\r\n    // Public variables of the token\r\n    string  public name = \"Vanity Token\";\r\n    string  public symbol = \"VNT\";\r\n    uint8   public decimals = 18;\r\n    \r\n    uint256 public currentSupply = 0;\r\n    uint256 public maxSupply = 1333337;\r\n    uint256 public bonusAmtThreshold = 20000;\r\n    uint256 public bonusSignalValue = 0.001 ether;\r\n    uint256 public _totalSupply;\r\n    uint256 public tokenXchangeRate ;\r\n    uint    public icoStartTime;\r\n    bool    public purchasingAllowed = false;\r\n    bool    public demo = false;\r\n\r\n    uint    public windowBonusMax = 43200 seconds;\r\n    uint    public windowBonusMin = 10800 seconds; \r\n    uint    public windowBonusStep1 = 21600 seconds;\r\n    uint    public windowBonusStep2 = 28800 seconds;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public _balanceOf;\r\n    mapping (address => uint256) public bonusOf;\r\n    mapping (address => uint) public timeBought;\r\n    mapping (address => uint256) public transferredAtSupplyValue;\r\n    mapping (address => mapping (address => uint256)) public _allowance;\r\n\r\n\r\n    function setBonuses(bool _d) onlyOwner public {\r\n        if (_d == true) {\r\n            windowBonusMax = 20 minutes;\r\n            windowBonusMin = 30 seconds;\r\n            windowBonusStep1 = 60 seconds;\r\n            windowBonusStep2 = 120 seconds;\r\n            bonusAmtThreshold = 500;\r\n            maxSupply = 13337;\r\n        } else {\r\n            windowBonusMax = 12 hours;\r\n            windowBonusMin = 3 hours;\r\n            windowBonusStep1 = 6 hours;\r\n            windowBonusStep2 = 8 hours;\r\n            bonusAmtThreshold = 20000;\r\n            maxSupply = 1333337;\r\n        }\r\n        demo = _d;\r\n    }\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n     modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4 || msg.data.length == 4);\r\n        _;\r\n    }\r\n \r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function VanityToken() public payable {\r\n        tokenXchangeRate = 300;\r\n        _balanceOf[address(this)] = 0;\r\n        owner = msg.sender;     \r\n        setBonuses(false);      \r\n        //enablePurchasing();              \r\n        _totalSupply = maxSupply * 10 ** uint256(decimals);  \r\n    }\r\n\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256) { return _balanceOf[_owner] ; }\r\n\r\n    function allowance(address tokenOwner, address spender) onlyPayloadSize(2 * 32) public constant returns (uint remaining) {\r\n        return _allowance[tokenOwner][spender];\r\n    }\r\n\r\n    function kill() public {\r\n        if (msg.sender == owner) \r\n            selfdestruct(owner);\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _value, uint256 _bonusValue) onlyPayloadSize(4*32) internal returns (bool) {\r\n\r\n        if (_value == 0 && _bonusValue == 0) {return false;}\r\n        if (_value!=0&&_bonusValue!=0) {return false;}  \r\n\r\n        require(_to != 0x0);\r\n       \r\n        // Check for overflows[]       \r\n        require(_balanceOf[_to] + _value >= _balanceOf[_to]);\r\n        require(bonusOf[_to] + _bonusValue >= bonusOf[_to]);\r\n        \r\n        if (_value > 0) {\r\n            _balanceOf[_from] += _value;\r\n            _balanceOf[_to] += _value;\r\n            timeBought[_to] = now;\r\n            Transfer(_from, _to, _value);\r\n        } else if (_bonusValue > 0) {\r\n            _balanceOf[_from] += _bonusValue;\r\n            _balanceOf[_to] += _bonusValue;\r\n            bonusOf[_to] += _bonusValue;     \r\n            timeBought[_to] = 0;\r\n            Transfer(_from, _to, _bonusValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function buy() public payable {\r\n        require(purchasingAllowed);\r\n        require(msg.value > 0);\r\n        require(msg.value >= 0.01 ether || msg.value == bonusSignalValue);\r\n        _buy(msg.value);\r\n    }\r\n\r\n    function() public payable {\r\n        buy();\r\n    }\r\n\r\n    function _buy(uint256 value) internal {\r\n\r\n        uint tPassed = now - icoStartTime;\r\n        if (tPassed <= 3 days) {\r\n            tokenXchangeRate = 300;\r\n        } else if (tPassed <= 5 days) {\r\n            tokenXchangeRate = 250;\r\n        } else if (tPassed <= 7 days) {\r\n            tokenXchangeRate = 200;\r\n        } else if (tPassed >= 10 days) {\r\n          tokenXchangeRate = 100;\r\n        }\r\n\r\n        bool requestedBonus = false;\r\n        uint256 amount = value * tokenXchangeRate;\r\n        \r\n        if (value == bonusSignalValue) {\r\n            require (timeBought[msg.sender] > 0 && transferredAtSupplyValue[msg.sender] > 0);\r\n\r\n            uint dif = now - timeBought[msg.sender];\r\n            //verify window\r\n            require (dif <= windowBonusMax && dif >= windowBonusMin); \r\n            requestedBonus = true;\r\n            amount = _balanceOf[msg.sender] - bonusOf[msg.sender];\r\n            assert (amount > 0);\r\n\r\n            if (dif >= windowBonusStep2) {\r\n                amount = amount * 3;\r\n            } else if (dif >= windowBonusStep1) {\r\n                amount = amount * 2;\r\n            } \r\n\r\n            if (_balanceOf[address(this)] - transferredAtSupplyValue[msg.sender] < bonusAmtThreshold) {\r\n                owner.transfer(value);\r\n                return;\r\n           }\r\n        }\r\n\r\n        uint256 newBalance = _balanceOf[address(this)] + amount;\r\n        require (newBalance <= _totalSupply); \r\n        owner.transfer(value);\r\n\r\n        currentSupply = newBalance;\r\n        transferredAtSupplyValue[msg.sender] = currentSupply;\r\n\r\n        if (requestedBonus == false) {\r\n            _transfer(address(this), msg.sender, amount, 0);\r\n        } else {\r\n            _transfer(address(this), msg.sender, 0, amount);\r\n        }\r\n       \r\n    }\r\n    \r\n \r\n   /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n       return _transfer(msg.sender, _to, _value, 0);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= _allowance[_from][msg.sender]);     // Check _allowance\r\n        _allowance[_from][msg.sender] -= _value;\r\n        return _transfer(_from, _to, _value, 0);\r\n    }\r\n\r\n    /**\r\n     * Set _allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        _allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(_balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        _balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        _totalSupply -= _value;                      // Updates _totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnTokens(uint256 _value) onlyOwner public returns (bool success) {\r\n        require(_balanceOf[address(this)] >= _value);   // Check if the sender has enough\r\n        _balanceOf[address(this)] -= _value;            // Subtract from the sender\r\n        _totalSupply -= _value;                      // Updates _totalSupply\r\n        if (currentSupply > _totalSupply) {\r\n            currentSupply = _totalSupply;\r\n        }\r\n        Burn(address(this), _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(_balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= _allowance[_from][msg.sender]);    // Check _allowance\r\n        _balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        _allowance[_from][msg.sender] -= _value;             // Subtract from the sender's _allowance\r\n        _totalSupply -= _value;                              // Update _totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n     function enablePurchasing() onlyOwner public {\r\n        purchasingAllowed = true;\r\n        icoStartTime = now;\r\n    }\r\n\r\n    function disablePurchasing() onlyOwner public {\r\n        purchasingAllowed = false;\r\n    }\r\n\r\n    \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"demo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenXchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonusOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferredAtSupplyValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusSignalValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"windowBonusMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disablePurchasing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enablePurchasing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"windowBonusStep2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusAmtThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_d\",\"type\":\"bool\"}],\"name\":\"setBonuses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"windowBonusMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"windowBonusStep1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchasingAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"VanityToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2a24b113509a18ec97090e8e5ec3ac810487425eac614b52b8aafad7457fe07b"}]}