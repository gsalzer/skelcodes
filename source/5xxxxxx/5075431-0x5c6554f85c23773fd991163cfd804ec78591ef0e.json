{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n/**\r\n * Owned Contract\r\n * \r\n * This is a contract trait to inherit from. Contracts that inherit from Owned \r\n * are able to modify functions to be only callable by the owner of the\r\n * contract.\r\n * \r\n * By default it is impossible to change the owner of the contract.\r\n */\r\ncontract Owned {\r\n    /**\r\n     * Contract owner.\r\n     * \r\n     * This value is set at contract creation time.\r\n     */\r\n    address owner;\r\n\r\n    /**\r\n     * Contract constructor.\r\n     * \r\n     * This sets the owner of the Owned contract at the time of contract\r\n     * creation.\r\n     */\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Modify method to only allow the owner to call it.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\n/**\r\n * Aethia Omega Egg Sale Contract.\r\n * \r\n * Every day, for a period of five (5) days, starting February 12th 12:00:00 \r\n * UTC, this contract is allowed to sell a maximum of one-hundred-and-twenty\r\n * (120) omega Ethergotchi eggs, for a total of six-hundred (600) eggs.\r\n *\r\n * These one-hundred-and-twenty eggs are divided over the twelve (12) time slots\r\n * of two (2) hours that make up each day. Every two hours, ten (10) omega\r\n * Ethergotchi eggs are available for 0.09 ether (excluding the gas cost of a \r\n * transaction).\r\n *\r\n * Any omega eggs that remain at the end of a time slot are not transferred to\r\n * the next time slot.\r\n */\r\ncontract OmegaEggSale is Owned {\r\n\r\n    /**\r\n     * The start date of the omega egg sale in seconds since the UNIX epoch.\r\n     * \r\n     * This value is equivalent to February 12th, 12:00:00 UTC, on a 24 hour\r\n     * clock.\r\n     */\r\n    uint256 constant START_DATE = 1518436800;\r\n\r\n    /**\r\n     * The end date of the omega egg sale in seconds since the UNIX epoch.\r\n     * \r\n     * This value is equivalent to February 17th, 12:00:00 UTC, on a 24 hour\r\n     * clock.\r\n     */\r\n    uint256 constant END_DATE = 1518868800;\r\n\r\n    /**\r\n     * The amount of seconds within a single time slot.\r\n     *\r\n     * This is set to a total of two hours:\r\n     *      2 x 60 x 60 = 7200 seconds\r\n     */\r\n    uint16 constant SLOT_DURATION_IN_SECONDS = 7200;\r\n\r\n    /**\r\n     * The number of remaining eggs in each time slot.\r\n     * \r\n     * This is initially set to ten for each time slot.\r\n     */\r\n    mapping (uint8 => uint8) remainingEggs;\r\n    \r\n    /**\r\n     * Omega egg owners.\r\n     *\r\n     * This is a mapping containing all owners of omega eggs. While this does\r\n     * not prevent people from using multiple addresses to buy multiple omega\r\n     * eggs, it does increase the difficulty slightly.\r\n     */\r\n    mapping (address => bool) eggOwners;\r\n\r\n    /**\r\n     * Omega egg sale event.\r\n     * \r\n     * For audit and logging purposes, all omega egg sales are logged by \r\n     * acquirer and acquisition date.\r\n     */\r\n    event LogOmegaEggSale(address indexed _acquirer, uint256 indexed _date);\r\n\r\n    /**\r\n     * Contract constructor\r\n     * \r\n     * This generates all omega egg time slots and the amount of available\r\n     * omega eggs within each time slot. The generation is done by calculating\r\n     * the total amount of seconds within the sale period together with the \r\n     * amount of seconds within each time slot, and dividing the former by the\r\n     * latter for the number of time slots.\r\n     * \r\n     * Each time slot is then assigned ten omega eggs.\r\n     */\r\n    function OmegaEggSale() Owned() public {\r\n        uint256 secondsInSalePeriod = END_DATE - START_DATE;\r\n        uint8 timeSlotCount = uint8(\r\n            secondsInSalePeriod / SLOT_DURATION_IN_SECONDS\r\n        );\r\n\r\n        for (uint8 i = 0; i < timeSlotCount; i++) {\r\n            remainingEggs[i] = 10;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Buy omega egg from the OmegaEggSale contract.\r\n     * \r\n     * The cost of an omega egg is 0.09 ether. This contract accepts any amount\r\n     * equal or above 0.09 ether to buy an omega egg. In the case of higher\r\n     * amounts being sent, the contract will refund the difference.\r\n     * \r\n     * To successully buy an omega egg, five conditions have to be met:\r\n     *  1. The `buyOmegaEgg` method must be called.\r\n     *  2. A value of 0.09 or more ether must accompany the transaction.\r\n     *  3. The transaction occurs in between February 12th 12:00:00 UTC and\r\n     *     February 17th 12:00:00 UTC.\r\n     *  4. The time slot in which the transaction occurs has omega eggs\r\n     *     available.\r\n     *  5. The sender must not already have bought an omega egg.\r\n     */\r\n    function buyOmegaEgg() payable external {\r\n        require(msg.value >= 0.09 ether);\r\n        require(START_DATE <= now && now < END_DATE);\r\n        require(eggOwners[msg.sender] == false);\r\n\r\n        uint8 currentTimeSlot = getTimeSlot(now);\r\n\r\n        require(remainingEggs[currentTimeSlot] > 0);\r\n\r\n        remainingEggs[currentTimeSlot] -= 1;\r\n        eggOwners[msg.sender] = true;\r\n\r\n        LogOmegaEggSale(msg.sender, now);\r\n        \r\n        // Send back any remaining value\r\n        if (msg.value > 0.09 ether) {\r\n            msg.sender.transfer(msg.value - 0.09 ether);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fallback payable method.\r\n     *\r\n     * This is in the case someone calls the contract without specifying the\r\n     * correct method to call. This method will ensure the failure of a\r\n     * transaction that was wrongfully executed.\r\n     */\r\n    function () payable external {\r\n        revert();\r\n    }\r\n    \r\n    /**\r\n     * Return number of eggs remaining in given time slot.\r\n     * \r\n     * If the time slot is not valid (e.g. the time slot does not exist\r\n     * according to the this contract), the number of remaining eggs will\r\n     * default to zero (0).\r\n     * \r\n     * This method is intended for external viewing purposes.\r\n     * \r\n     * Parameters\r\n     * ----------\r\n     * _timeSlot : uint8\r\n     *     The time slot to return the number of remaining eggs for.\r\n     * \r\n     * Returns\r\n     * -------\r\n     * uint8\r\n     *     The number of eggs still available within the contract for given\r\n     *     time slot.\r\n     */\r\n    function eggsInTimeSlot(uint8 _timeSlot) view external returns (uint8) {\r\n        return remainingEggs[_timeSlot];\r\n    }\r\n    \r\n    /**\r\n     * Return true if `_buyer` has bought an omega egg, otherwise false.\r\n     * \r\n     * This method is intended for external viewing purposes.\r\n     * \r\n     * Parameters\r\n     * ----------\r\n     * _buyer : address\r\n     *     The Ethereum wallet address of the buyer.\r\n     * \r\n     * Returns\r\n     * -------\r\n     * bool\r\n     *     True if `_buyer` has bought an egg, otherwise false.\r\n     */\r\n    function hasBoughtEgg(address _buyer) view external returns (bool) {\r\n        return eggOwners[_buyer] == true;\r\n    }\r\n    \r\n    /**\r\n     * Withdraw all funds from contract.\r\n     * \r\n     * This method can only be called after the OmegaEggSale contract has run\r\n     * its course.\r\n     */\r\n    function withdraw() onlyOwner external {\r\n        require(now >= END_DATE);\r\n\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    /**\r\n     * Calculate the time slot corresponding to the given UNIX timestamp.\r\n     *\r\n     * The time slot is calculated by subtracting the current date and time in\r\n     * seconds from the contract's starting date and time in seconds. The result\r\n     * is then divided by the number of seconds within a time slot, and rounded\r\n     * down to get the correct time slot.\r\n     *\r\n     * Parameters\r\n     * ----------\r\n     * _timestamp : uint256\r\n     *     The timestamp to calculate a timeslot for. This is the amount of\r\n     *     seconds elapsed since the UNIX epoch.\r\n     *\r\n     * Returns\r\n     * -------\r\n     * uint8\r\n     *     The OmegaEggSale time slot corresponding to the given timestamp.\r\n     *     This can be a non-existent time slot, if the timestamp is further\r\n     *     in the future than `END_DATE`.\r\n     */\r\n    function getTimeSlot(uint256 _timestamp) private pure returns (uint8) {\r\n        uint256 secondsSinceSaleStart = _timestamp - START_DATE;\r\n        \r\n        return uint8(secondsSinceSaleStart / SLOT_DURATION_IN_SECONDS);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"buyOmegaEgg\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"hasBoughtEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timeSlot\",\"type\":\"uint8\"}],\"name\":\"eggsInTimeSlot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_acquirer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"LogOmegaEggSale\",\"type\":\"event\"}]","ContractName":"OmegaEggSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://66a4cd53722dc9366e1822e1a1f43f08302dadfb741b0a0acf7d1948fc284139"}]}