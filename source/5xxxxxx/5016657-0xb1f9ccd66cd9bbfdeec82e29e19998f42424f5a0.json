{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract PlsDontPress {\r\n    \r\n    address public feePayee;\r\n    address public lastPresser;\r\n    \r\n    uint public currentPot;\r\n    \r\n    uint public currentExpiryInterval = 1 days;\r\n    uint public expiryEpoch;\r\n    uint expiryIntervalCap = 60;\r\n    uint public startingCostToPress = 1000000000000000; //0.001 eth\r\n    uint public currentCostToPress = 1000000000000000; //0.001 eth\r\n    uint public lastAmountSent = startingCostToPress;\r\n    \r\n    uint public minPotSum = 10000000000000000; //0.01 eth\r\n    \r\n    bool private locked;\r\n    \r\n    modifier noReentrancy() {\r\n        require(!locked);\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n  }\r\n  \r\n    function PlsDontPress() {\r\n        feePayee = msg.sender;\r\n    }\r\n    \r\n    function press() public payable noReentrancy {\r\n        //Min starting sum required\r\n        require(msg.value >= startingCostToPress);\r\n        uint currAmt = startingCostToPress;\r\n        \r\n        //If button not expired, require currentCostToPress to continue\r\n        if(!isExpired()){\r\n            require(msg.value >= currentCostToPress);\r\n            currAmt = msg.value;\r\n        }\r\n            //Finally, update state\r\n            setNextExpiry(currAmt);\r\n            lastPresser = msg.sender;\r\n            lastAmountSent = currAmt;\r\n            currentPot = this.balance;\r\n    }\r\n    \r\n    function isExpired() internal returns(bool) {\r\n        \r\n        //If expired, payout and reset\r\n        if(now > expiryEpoch && expiryEpoch != 0){\r\n            payout();\r\n            currentCostToPress = startingCostToPress;\r\n            currentExpiryInterval = 1 days;\r\n            \r\n            //Accept only startingCostToPress\r\n            if(msg.value > startingCostToPress){\r\n                uint refundAmt = msg.value - startingCostToPress;\r\n                msg.sender.transfer(refundAmt);\r\n            }\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function payout() internal {\r\n        uint amtToPay;\r\n        //Time expired for last press, pay .1% fees for gas+hosting\r\n        uint fees = currentPot/1000;\r\n        feePayee.transfer(fees);\r\n        \r\n        if(currentPot <= minPotSum * 2){\r\n            // if pool amt is running low, pay 50%\r\n            amtToPay = currentPot / 2;\r\n        } else {\r\n            // else pay all - minSum\r\n            amtToPay = currentPot - minPotSum;\r\n        }\r\n        lastPresser.transfer(amtToPay);\r\n    }\r\n    \r\n    //Calculate button expiry based on amt paid\r\n    function setNextExpiry(uint _amtSent) internal {\r\n        \r\n        //If current amt is > last sent, reduce expiry time interval\r\n        if(_amtSent > lastAmountSent){\r\n            uint epochExpiryReductionPercentage =(lastAmountSent * 100)/ _amtSent;\r\n            uint reducedEpochExpiry = (currentExpiryInterval * epochExpiryReductionPercentage) / 100;\r\n            currentCostToPress = _amtSent;\r\n            \r\n            //If new expiry is below expiryIntervalCap, set as expiryIntervalCap\r\n            if(reducedEpochExpiry < expiryIntervalCap){\r\n                currentExpiryInterval = expiryIntervalCap;\r\n            }else {\r\n                currentExpiryInterval = reducedEpochExpiry;\r\n            }\r\n        }\r\n        \r\n        expiryEpoch = now + currentExpiryInterval;\r\n    \r\n    }\r\n    \r\n    function() external payable {\r\n        press();\r\n    }\r\n  \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"feePayee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCostToPress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"press\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPotSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startingCostToPress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastAmountSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentExpiryInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPresser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiryEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"PlsDontPress","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://261c016cf8cc12722a73e2a191f7ec902505a95505afb267aceac1e147c1dc8a"}]}