{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who)public constant returns (uint256);\r\n  function transfer(address to, uint256 value)public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n \r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value)public returns (bool);\r\n  function approve(address spender, uint256 value)public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n \r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n \r\n  mapping(address => uint256) balances;\r\n \r\n   function transfer(address _to, uint256 _value) public returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n \r\n}\r\n \r\ncontract StandardToken is ERC20, BasicToken {\r\n \r\n  mapping (address => mapping (address => uint256)) allowed;\r\n \r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n \r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n \r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n \r\n}\r\n \r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n \r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n \r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n \r\n}\r\n \r\ncontract MintableToken is StandardToken, Ownable {\r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  \r\n  event MintFinished();\r\n \r\n  bool public mintingFinished = false;\r\n \r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n \r\n  function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function finishMinting() public onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n  \r\n}\r\n \r\ncontract GRV is MintableToken {\r\n    \r\n    string public constant name = \"Graviton\";\r\n    \r\n    string public constant symbol = \"GRV\";\r\n    \r\n    uint32 public constant decimals = 23;\r\n    \r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n    \r\n    using SafeMath for uint;\r\n    address public restricted;\r\n    GRV public token = new GRV();\r\n    uint public start;\r\n    uint public rate;\r\n    bool public isOneToken = false;\r\n    bool public isFinish = false;\r\n    \r\n    mapping(address => uint) public balances;\r\n\r\n    function StopCrowdsale() public onlyOwner {\r\n        if (isFinish) {\r\n           isFinish =false;\r\n        } else isFinish =true;\r\n    }\r\n\r\n    function Crowdsale() public {\r\n      restricted = 0x444dA98a3037802B3ad51658b831E9aCd1A03Ca5;\r\n      rate = 10000000000000000000000;\r\n      start = 1517368500;\r\n    }\r\n \r\n    modifier saleIsOn() {\r\n      require(now > start && !isFinish);\r\n      _;\r\n    }\r\n\r\n    function createTokens() public saleIsOn payable {\r\n      uint tokens = rate.mul(msg.value).div(1 ether);\r\n      uint finishdays=90-now.sub(start).div(1 days);\r\n      uint bonusTokens = 0;\r\n\r\n//Bonus\r\n      if(finishdays < 0) {\r\n          finishdays=0;\r\n      }\r\n      bonusTokens = tokens.mul(finishdays).div(100);\r\n      tokens = tokens.add(bonusTokens);\r\n      token.mint(msg.sender, tokens);\r\n      balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n\r\n//for restricted \r\n      if (!isOneToken){\r\n        tokens = tokens.add(1000000000000000000);\r\n        isOneToken=true;\r\n      }\r\n      token.mint(restricted, tokens); \r\n      balances[restricted] = balances[restricted].add(msg.value); \r\n      restricted.transfer(this.balance); \r\n\r\n    }\r\n \r\n    function() external payable {\r\n      createTokens();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"restricted\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOneToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StopCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.20-nightly.2018.1.29+commit.a668b9de","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://40239c74158b3ce6af79ac14a14d62345bededac32769493b190cbe628366667"}]}