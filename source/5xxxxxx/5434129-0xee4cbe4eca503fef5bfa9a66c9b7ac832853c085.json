{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\ncontract BLInterface {\r\n    function setPrimaryAccount(address newMainAddress) public;\r\n    function withdraw() public;\r\n}\r\ncontract CSInterface {\r\n    function goalReached() public;\r\n    function goal() public returns (uint);\r\n    function hasClosed() public returns(bool);\r\n    function weiRaised() public returns (uint);\r\n}\r\ncontract StorageInterface {\r\n    function getUInt(bytes32 record) public constant returns (uint);\r\n}\r\ncontract Interim {\r\n    // Define DS, Bubbled and Token Sale addresses\r\n    address public owner; // DS wallet\r\n    address public bubbled; // bubbled dwallet\r\n    BLInterface internal BL; // Blocklord Contract Interface\r\n    CSInterface internal CS; // Crowdsale contract interface\r\n    StorageInterface internal s; // Eternal Storage Interface\r\n    uint public rate; // ETH to GBP rate\r\n    function Interim() public {\r\n        // Setup owner DS\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier onlyBubbled() {\r\n        require(msg.sender == bubbled);\r\n        _;\r\n    }\r\n    modifier onlyMembers() {\r\n        require(msg.sender == owner || msg.sender == bubbled);\r\n        _;\r\n    }\r\n    // Setup the interface to the Blocklord contract\r\n    function setBLInterface(address newAddress) public onlyOwner {\r\n        BL = BLInterface(newAddress);\r\n    }\r\n    // Setup the interface to the storage contract\r\n    function setStorageInterface(address newAddress) public onlyOwner {\r\n        s = StorageInterface(newAddress);\r\n    }\r\n    // Setup the interface to the Blocklord contract\r\n    function setCSInterface(address newAddress) public onlyOwner {\r\n        CS = CSInterface(newAddress);\r\n    }\r\n    // Setup the interface to the Bubbled multisig contract\r\n    function setBubbled(address newAddress) public onlyMembers {\r\n        bubbled = newAddress;\r\n    }\r\n    // Setup the interface to the DS Personal address\r\n    function setDS(address newAddress) public onlyOwner {\r\n        owner = newAddress;\r\n    }\r\n\r\n    function setRate(uint _rate) public onlyOwner {\r\n      rate = _rate;\r\n    }\r\n\r\n    // we can call this function to check the status of both crowdsale and blocklord\r\n    function checkStatus () public returns(uint raisedBL, uint raisedCS, uint total, uint required, bool goalReached){\r\n      raisedBL = s.getUInt(keccak256(address(this), \"balance\"));\r\n      raisedCS = CS.weiRaised();\r\n      total = raisedBL + raisedCS;\r\n      required = CS.goal();\r\n      goalReached = total >= required;\r\n    }\r\n\r\n    function completeContract (bool toSplit) public payable {\r\n    //   require(CS.hasClosed()); // fail if crowdsale has not closed\r\n    bool goalReached;\r\n    (,,,goalReached) = checkStatus();\r\n    if (goalReached) require(toSplit == false);\r\n      uint feeDue;\r\n      if (toSplit == false) {\r\n        feeDue = 20000 / rate * 1000000000000000000; // fee due in Wei\r\n        require(msg.value >= feeDue);\r\n      }\r\n      BL.withdraw(); // withdraw ETH from Blocklord contract to Interim contract\r\n       if (goalReached) { // if goal reached\r\n         BL.setPrimaryAccount(bubbled); // Transfer Blocklord contract and payment to be maade offline\r\n         owner.transfer(feeDue);\r\n         bubbled.transfer(this.balance);\r\n       } else { // if goal not reached\r\n         if (toSplit) { // if Bubbled decides to split\r\n           BL.setPrimaryAccount(owner); //set ownership to DS\r\n           uint balance = this.balance;\r\n           bubbled.transfer(balance / 2);\r\n           owner.transfer(balance / 2);\r\n         } else {\r\n           // Bubbled decides to keep blocklord\r\n           BL.setPrimaryAccount(bubbled);\r\n           owner.transfer(feeDue);\r\n           bubbled.transfer(this.balance);\r\n         }\r\n       }\r\n    }\r\n    // receive ether from blocklord contract\r\n    function () public payable {\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setStorageInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setBLInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkStatus\",\"outputs\":[{\"name\":\"raisedBL\",\"type\":\"uint256\"},{\"name\":\"raisedCS\",\"type\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"required\",\"type\":\"uint256\"},{\"name\":\"goalReached\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setBubbled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setCSInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setDS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bubbled\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toSplit\",\"type\":\"bool\"}],\"name\":\"completeContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Interim","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://aff35b1a19ce6203be7d2a994cd7d8db55e2ff570ae3d0ec3d994987b3adbd50"}]}