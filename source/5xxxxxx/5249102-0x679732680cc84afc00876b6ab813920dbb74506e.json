{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC721 {\r\n    function approve(address _to, uint256 _tokenID) public;\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function implementsERC721() public pure returns (bool);\r\n    function ownerOf(uint256 _tokenID) public view returns (address addr);\r\n    function takeOwnership(uint256 _tokenID) public;\r\n    function totalSupply() public view returns (uint256 total);\r\n    function transferFrom(address _from, address _to, uint256 _tokenID) public;\r\n    function transfer(address _to, uint256 _tokenID) public;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokenID); // solhint-disable-line\r\n    event Approval(address indexed owner, address indexed approved, uint256 tokenID);\r\n\r\n    function name() public pure returns (string);\r\n    function symbol() public pure returns (string);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract Manageable is Ownable {\r\n\r\n    address public manager;\r\n    bool public contractLock;\r\n\r\n    event ManagerTransferred(address indexed previousManager, address indexed newManager);\r\n    event ContractLockChanged(address admin, bool state);\r\n\r\n    function Manageable() public {\r\n        manager = msg.sender;\r\n        contractLock = false;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require((msg.sender == manager) || (msg.sender == owner));\r\n        _;\r\n    }\r\n\r\n    modifier isUnlocked() {\r\n        require(!contractLock);\r\n        _;\r\n    }\r\n\r\n    function transferManager(address newManager) public onlyAdmin {\r\n        require(newManager != address(0));\r\n        ManagerTransferred(manager, newManager);\r\n        manager = newManager;\r\n    }\r\n\r\n    function setContractLock(bool setting) public onlyAdmin {\r\n        contractLock = setting;\r\n        ContractLockChanged(msg.sender, setting);\r\n    }\r\n\r\n    function payout(address _to) public onlyOwner {\r\n        if (_to == address(0)) {\r\n            owner.transfer(this.balance);\r\n        } else {\r\n            _to.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    function withdrawFunds(address _to, uint256 amount) public onlyOwner {\r\n        require(this.balance >= amount);\r\n        if (_to == address(0)) {\r\n            owner.transfer(amount);\r\n        } else {\r\n            _to.transfer(amount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract TokenLayer is ERC721, Manageable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n/********************************************** EVENTS **********************************************/\r\n    event TokenCreated(uint256 tokenId, bytes32 name, uint256 parentId, address owner);\r\n    event TokenDeleted(uint256 tokenId);\r\n\r\n    event TokenSold(\r\n        uint256 tokenId, uint256 oldPrice,\r\n        uint256 newPrice, address prevOwner,\r\n        address winner, bytes32 name,\r\n        uint256 parentId\r\n    );\r\n\r\n    event PriceChanged(uint256 tokenId, uint256 oldPrice, uint256 newPrice);\r\n    event ParentChanged(uint256 tokenId, uint256 oldParentId, uint256 newParentId);\r\n    event NameChanged(uint256 tokenId, bytes32 oldName, bytes32 newName);\r\n    event MetaDataChanged(uint256 tokenId, bytes32 oldMeta, bytes32 newMeta);\r\n/****************************************************************************************************/\r\n\r\n/******************************************** STORAGE ***********************************************/\r\n    uint256 private constant DEFAULTPARENT = 123456789;\r\n\r\n    mapping (uint256 => Token)   private tokenIndexToToken;\r\n    mapping (address => uint256) private ownershipTokenCount;\r\n\r\n    address public gameAddress;\r\n    address public parentAddr;\r\n\r\n    uint256 private totalTokens;\r\n    uint256 public devFee = 50;\r\n    uint256 public ownerFee = 200;\r\n    uint256[10] private chainFees = [10];\r\n\r\n    struct Token {\r\n        bool exists;\r\n        address approved;\r\n        address owner;\r\n        bytes32 metadata;\r\n        bytes32 name;\r\n        uint256 lastBlock;\r\n        uint256 parentId;\r\n        uint256 price;\r\n    }\r\n/****************************************************************************************************/\r\n\r\n/******************************************* MODIFIERS **********************************************/\r\n    modifier onlySystem() {\r\n        require((msg.sender == gameAddress) || (msg.sender == manager));\r\n        _;\r\n    }\r\n/****************************************************************************************************/\r\n\r\n/****************************************** CONSTRUCTOR *********************************************/\r\n    function TokenLayer(address _gameAddress, address _parentAddr) public {\r\n        gameAddress = _gameAddress;\r\n        parentAddr = _parentAddr;\r\n    }\r\n/****************************************************************************************************/\r\n\r\n/********************************************** PUBLIC **********************************************/\r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function name() public pure returns (string) {\r\n        return \"CryptoCities\";\r\n    }\r\n\r\n    function symbol() public pure returns (string) {\r\n        return \"ResourceToken\";\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId, address _from) public onlySystem {\r\n        _approve(_to, _tokenId, _from);\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public isUnlocked {\r\n        _approve(_to, _tokenId, msg.sender);\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    function bundleToken(uint256 _tokenId) public view returns(uint256[8] _tokenData) {\r\n        Token storage token = tokenIndexToToken[_tokenId];\r\n\r\n        uint256[8] memory tokenData;\r\n\r\n        tokenData[0] = uint256(token.name);\r\n        tokenData[1] = token.parentId;\r\n        tokenData[2] = token.price;\r\n        tokenData[3] = uint256(token.owner);\r\n        tokenData[4] = _getNextPrice(_tokenId);\r\n        tokenData[5] = devFee+getChainFees(_tokenId);\r\n        tokenData[6] = uint256(token.approved);\r\n        tokenData[7] = uint256(token.metadata);\r\n        return tokenData;\r\n    }\r\n\r\n    function takeOwnership(uint256 _tokenId, address _to) public onlySystem {\r\n        _takeOwnership(_tokenId, _to);\r\n    }\r\n\r\n    function takeOwnership(uint256 _tokenId) public isUnlocked {\r\n        _takeOwnership(_tokenId, msg.sender);\r\n    }\r\n\r\n    function tokensOfOwner(address _owner) public view returns (uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n        if (tokenCount == 0) {\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 _totalTokens = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            uint256 tokenId = 0;\r\n            uint256 tokenIndex = 0;\r\n            while (tokenIndex <= _totalTokens) {\r\n                if (exists(tokenId)) {\r\n                    tokenIndex++;\r\n                    if (tokenIndexToToken[tokenId].owner == _owner) {\r\n                        result[resultIndex] = tokenId;\r\n                        resultIndex++;\r\n                    }\r\n                }\r\n                tokenId++;\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 total) {\r\n        return totalTokens;\r\n    }\r\n\r\n    function transfer(address _to, address _from, uint256 _tokenId) public onlySystem {\r\n        _checkThenTransfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _tokenId) public isUnlocked {\r\n        _checkThenTransfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public onlySystem {\r\n        _transferFrom(_from, _to, _tokenId);\r\n    }\r\n\r\n    function transferFrom(address _from, uint256 _tokenId) public isUnlocked {\r\n        _transferFrom(_from, msg.sender, _tokenId);\r\n    }\r\n\r\n    function createToken(\r\n        uint256 _tokenId, address _owner,\r\n        bytes32 _name, uint256 _parentId,\r\n        uint256 _price, bytes32 _metadata\r\n    ) public onlyAdmin {\r\n        require(_price > 0);\r\n        require(_addressNotNull(_owner));\r\n        require(_tokenId == uint256(uint32(_tokenId)));\r\n        require(!exists(_tokenId));\r\n\r\n        totalTokens++;\r\n\r\n        Token memory _token = Token({\r\n            name: _name,\r\n            parentId: _parentId,\r\n            exists: true,\r\n            price: _price,\r\n            owner: _owner,\r\n            approved : 0,\r\n            lastBlock : block.number,\r\n            metadata : _metadata\r\n        });\r\n\r\n        tokenIndexToToken[_tokenId] = _token;\r\n\r\n        TokenCreated(_tokenId, _name, _parentId, _owner);\r\n\r\n        _transfer(address(0), _owner, _tokenId);\r\n    }\r\n\r\n    function createTokens(\r\n        uint256[] _tokenIds, address[] _owners,\r\n        bytes32[] _names, uint256[] _parentIds,\r\n        uint256[] _prices, bytes32[] _metadatas\r\n    ) public onlyAdmin {\r\n        for (uint256 id = 0; id < _tokenIds.length; id++) {\r\n            createToken(\r\n                _tokenIds[id], _owners[id], _names[id],\r\n                _parentIds[id], _prices[id], _metadatas[id]\r\n                );\r\n        }\r\n    }\r\n\r\n    function deleteToken(uint256 _tokenId) public onlyAdmin {\r\n        require(_tokenId == uint256(uint32(_tokenId)));\r\n        require(exists(_tokenId));\r\n        totalTokens--;\r\n\r\n        address oldOwner = tokenIndexToToken[_tokenId].owner;\r\n\r\n        ownershipTokenCount[oldOwner] = ownershipTokenCount[oldOwner]--;\r\n        delete tokenIndexToToken[_tokenId];\r\n        TokenDeleted(_tokenId);\r\n    }\r\n\r\n    function incrementPrice(uint256 _tokenId, address _to) public onlySystem {\r\n        require(exists(_tokenId));\r\n        uint256 _price = tokenIndexToToken[_tokenId].price;\r\n        address _owner = tokenIndexToToken[_tokenId].owner;\r\n        uint256 _totalFees = getChainFees(_tokenId);\r\n        tokenIndexToToken[_tokenId].price = _price.mul(1000+ownerFee).div(1000-(devFee+_totalFees));\r\n\r\n        TokenSold(\r\n            _tokenId, _price, tokenIndexToToken[_tokenId].price,\r\n            _owner, _to, tokenIndexToToken[_tokenId].name,\r\n            tokenIndexToToken[_tokenId].parentId\r\n        );\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner) {\r\n        require(exists(_tokenId));\r\n        _owner = tokenIndexToToken[_tokenId].owner;\r\n    }\r\n\r\n    function blocked(uint256 _tokenId) public view returns (bool _blocked) {\r\n        return (tokenIndexToToken[_tokenId].lastBlock == block.number);\r\n    }\r\n\r\n    function exists(uint256 _tokenId) public view returns(bool) {\r\n        return (tokenIndexToToken[_tokenId].exists);\r\n    }\r\n/****************************************************************************************************/\r\n\r\n/********************************************** SETTERS *********************************************/\r\n    function setLayerParent(address _parent) public onlyAdmin {\r\n        parentAddr = _parent;\r\n    }\r\n\r\n    function setGame(address _gameAddress) public onlyAdmin {\r\n        gameAddress = _gameAddress;\r\n    }\r\n\r\n    function setPrice(uint256 _tokenId, uint256 _price, address _owner) public onlySystem {\r\n        require(_owns(_owner, _tokenId));\r\n        uint256 oldPrice = tokenIndexToToken[_tokenId].price;\r\n        tokenIndexToToken[_tokenId].price = _price;\r\n        PriceChanged(_tokenId, oldPrice, _price);\r\n    }\r\n\r\n    function setParent(uint256 _tokenId, uint256 _parentId) public onlyAdmin {\r\n        require(exists(_tokenId));\r\n        uint256 oldParentId = tokenIndexToToken[_tokenId].parentId;\r\n        tokenIndexToToken[_tokenId].parentId = _parentId;\r\n        ParentChanged(_tokenId, oldParentId, _parentId);\r\n    }\r\n\r\n    function setName(uint256 _tokenId, bytes32 _name) public onlyAdmin {\r\n        require(exists(_tokenId));\r\n        bytes32 oldName = tokenIndexToToken[_tokenId].name;\r\n        tokenIndexToToken[_tokenId].name = _name;\r\n        NameChanged(_tokenId, oldName, _name);\r\n    }\r\n\r\n    function setMetadata(uint256 _tokenId, bytes32 _metadata) public onlyAdmin {\r\n        require(exists(_tokenId));\r\n        bytes32 oldMeta = tokenIndexToToken[_tokenId].metadata;\r\n        tokenIndexToToken[_tokenId].metadata = _metadata;\r\n        MetaDataChanged(_tokenId, oldMeta, _metadata);\r\n    }\r\n\r\n    function setDevFee(uint256 _devFee) public onlyAdmin {\r\n        devFee = _devFee;\r\n    }\r\n\r\n    function setOwnerFee(uint256 _ownerFee) public onlyAdmin {\r\n        ownerFee = _ownerFee;\r\n    }\r\n\r\n    function setChainFees(uint256[10] _chainFees) public onlyAdmin {\r\n        chainFees = _chainFees;\r\n    }\r\n/****************************************************************************************************/\r\n\r\n/********************************************** GETTERS *********************************************/\r\n    function getToken(uint256 _tokenId) public view returns\r\n    (\r\n        bytes32 tokenName, uint256 parentId, uint256 price,\r\n        address _owner, uint256 nextPrice, uint256 nextPriceFees,\r\n        address approved, bytes32 metadata\r\n    ) {\r\n        Token storage token = tokenIndexToToken[_tokenId];\r\n\r\n        tokenName = token.name;\r\n        parentId = token.parentId;\r\n        price = token.price;\r\n        _owner = token.owner;\r\n        nextPrice = _getNextPrice(_tokenId);\r\n        nextPriceFees = devFee+getChainFees(_tokenId);\r\n        metadata = token.metadata;\r\n        approved = token.approved;\r\n    }\r\n\r\n    function getChainFees(uint256 _tokenId) public view returns (uint256 _total) {\r\n        uint256 chainLength = _getChainLength(_tokenId);\r\n        uint256 totalFee = 0;\r\n        for (uint id = 0; id < chainLength; id++) {\r\n            totalFee = totalFee + chainFees[id];\r\n        }\r\n        return(totalFee);\r\n    }\r\n\r\n    function getChainFeeArray() public view returns (uint256[10] memory _chainFees) {\r\n        return(chainFees);\r\n    }\r\n\r\n    function getPriceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n        require(exists(_tokenId));\r\n        return tokenIndexToToken[_tokenId].price;\r\n    }\r\n\r\n    function getParentOf(uint256 _tokenId) public view returns (uint256 parentId) {\r\n        require(exists(_tokenId));\r\n        return tokenIndexToToken[_tokenId].parentId;\r\n    }\r\n\r\n    function getMetadataOf(uint256 _tokenId) public view returns (bytes32 metadata) {\r\n        require(exists(_tokenId));\r\n        return (tokenIndexToToken[_tokenId].metadata);\r\n    }\r\n\r\n    function getChain(uint256 _tokenId) public view returns (address[10] memory _owners) {\r\n        require(exists(_tokenId));\r\n\r\n        uint256 _parentId = getParentOf(_tokenId);\r\n        address _parentAddr = parentAddr;\r\n\r\n        address[10] memory result;\r\n\r\n        if (_parentId != DEFAULTPARENT && _addressNotNull(_parentAddr)) {\r\n            uint256 resultIndex = 0;\r\n\r\n            TokenLayer layer = TokenLayer(_parentAddr);\r\n            bool parentExists = layer.exists(_parentId);\r\n\r\n            while ((_parentId != DEFAULTPARENT) && _addressNotNull(_parentAddr) && parentExists) {\r\n                parentExists = layer.exists(_parentId);\r\n                if (!parentExists) {\r\n                    return(result);\r\n                }\r\n                result[resultIndex] = layer.ownerOf(_parentId);\r\n                resultIndex++;\r\n\r\n                _parentId = layer.getParentOf(_parentId);\r\n                _parentAddr = layer.parentAddr();\r\n\r\n                layer = TokenLayer(_parentAddr);\r\n            }\r\n\r\n            return(result);\r\n        }\r\n    }\r\n/****************************************************************************************************/\r\n\r\n/******************************************** PRIVATE ***********************************************/\r\n    function _addressNotNull(address _to) private pure returns (bool) {\r\n        return _to != address(0);\r\n    }\r\n\r\n    function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n        return (tokenIndexToToken[_tokenId].approved == _to);\r\n    }\r\n\r\n    function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n        return claimant == tokenIndexToToken[_tokenId].owner;\r\n    }\r\n\r\n    function _checkThenTransfer(address _from, address _to, uint256 _tokenId) private {\r\n        require(_owns(_from, _tokenId));\r\n        require(_addressNotNull(_to));\r\n        require(exists(_tokenId));\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n        ownershipTokenCount[_to]++;\r\n        tokenIndexToToken[_tokenId].owner = _to;\r\n        tokenIndexToToken[_tokenId].lastBlock = block.number;\r\n\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            tokenIndexToToken[_tokenId].approved = 0;\r\n        }\r\n\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _approve(address _to, uint256 _tokenId, address _from) private {\r\n        require(_owns(_from, _tokenId));\r\n\r\n        tokenIndexToToken[_tokenId].approved = _to;\r\n\r\n        Approval(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _takeOwnership(uint256 _tokenId, address _to) private {\r\n        address newOwner = _to;\r\n        address oldOwner = tokenIndexToToken[_tokenId].owner;\r\n\r\n        require(_addressNotNull(newOwner));\r\n        require(_approved(newOwner, _tokenId));\r\n\r\n        _transfer(oldOwner, newOwner, _tokenId);\r\n    }\r\n\r\n    function _transferFrom(address _from, address _to, uint256 _tokenId) private {\r\n        require(_owns(_from, _tokenId));\r\n        require(_approved(_to, _tokenId));\r\n        require(_addressNotNull(_to));\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _getChainLength(uint256 _tokenId) private view returns (uint256 _length) {\r\n        uint256 length;\r\n\r\n        uint256 _parentId = getParentOf(_tokenId);\r\n        address _parentAddr = parentAddr;\r\n        if (_parentId == DEFAULTPARENT || !_addressNotNull(_parentAddr)) {\r\n            return 0;\r\n        }\r\n\r\n        TokenLayer layer = TokenLayer(_parentAddr);\r\n        bool parentExists = layer.exists(_parentId);\r\n\r\n        while ((_parentId != DEFAULTPARENT) && _addressNotNull(_parentAddr) && parentExists) {\r\n            parentExists = layer.exists(_parentId);\r\n            if(!parentExists) {\r\n                    return(length);\r\n            }\r\n            _parentId = layer.getParentOf(_parentId);\r\n            _parentAddr = layer.parentAddr();\r\n            layer = TokenLayer(_parentAddr);\r\n            length++;\r\n        }\r\n\r\n        return(length);\r\n    }\r\n\r\n    function _getNextPrice(uint256 _tokenId) private view returns (uint256 _nextPrice) {\r\n        uint256 _price = tokenIndexToToken[_tokenId].price;\r\n        uint256 _totalFees = getChainFees(_tokenId);\r\n        _price = _price.mul(1000+ownerFee).div(1000-(devFee+_totalFees));\r\n        return(_price);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_parentId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_metadata\",\"type\":\"bytes32\"}],\"name\":\"createToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getParentOf\",\"outputs\":[{\"name\":\"parentId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getMetadataOf\",\"outputs\":[{\"name\":\"metadata\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"setDevFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_parentId\",\"type\":\"uint256\"}],\"name\":\"setParent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chainFees\",\"type\":\"uint256[10]\"}],\"name\":\"setChainFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_metadata\",\"type\":\"bytes32\"}],\"name\":\"setMetadata\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"setting\",\"type\":\"bool\"}],\"name\":\"setContractLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"deleteToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bundleToken\",\"outputs\":[{\"name\":\"_tokenData\",\"type\":\"uint256[8]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_parent\",\"type\":\"address\"}],\"name\":\"setLayerParent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameAddress\",\"type\":\"address\"}],\"name\":\"setGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_names\",\"type\":\"bytes32[]\"},{\"name\":\"_parentIds\",\"type\":\"uint256[]\"},{\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"name\":\"_metadatas\",\"type\":\"bytes32[]\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getChainFees\",\"outputs\":[{\"name\":\"_total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPriceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getChain\",\"outputs\":[{\"name\":\"_owners\",\"type\":\"address[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"incrementPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"transferManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChainFeeArray\",\"outputs\":[{\"name\":\"_chainFees\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"blocked\",\"outputs\":[{\"name\":\"_blocked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"name\":\"tokenName\",\"type\":\"bytes32\"},{\"name\":\"parentId\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"nextPrice\",\"type\":\"uint256\"},{\"name\":\"nextPriceFees\",\"type\":\"uint256\"},{\"name\":\"approved\",\"type\":\"address\"},{\"name\":\"metadata\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerFee\",\"type\":\"uint256\"}],\"name\":\"setOwnerFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_gameAddress\",\"type\":\"address\"},{\"name\":\"_parentAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"parentId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"parentId\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldParentId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newParentId\",\"type\":\"uint256\"}],\"name\":\"ParentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"newName\",\"type\":\"bytes32\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldMeta\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"newMeta\",\"type\":\"bytes32\"}],\"name\":\"MetaDataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"ContractLockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TokenLayer","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ca82cfcfbe9eed35f7afee9c17755c679be132410000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://de4f77b84f80b8a8d0eec7658329401f019d1e7688b766060e2d76e4829f2f78"}]}