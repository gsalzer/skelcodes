{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n// Problem Statement\r\n// ***1) User A Creates A contract with fields Contract Title Document Title, Version,\r\n//  description (Max 32 Characters) Owner (Your Name or Your organization Name) \r\n// ParticipantID(with public address) Consent_Details (Max 32 Characters)\r\n// ***2) User B Signs the contract\r\n// ***3) User A can Verify\r\ncontract Agreement {\r\n    address private owner;\r\n\r\n// A struct named Contract is requred to hold objects\r\n    struct Contract {\r\n        uint id; //0\r\n        bytes32 contractTitle; //1\r\n        bytes32 documentTitle; //2\r\n        bytes32 version; //3\r\n        bytes32 description; //4\r\n        address participant; //5\r\n        bytes32 consent; //6\r\n        bool isSigned; //7\r\n    }\r\n\r\n// we need mapping so for contract listing \r\n    mapping (uint => Contract) public contracts;\r\n\r\n// Contract Count holder\r\n    uint public contractCount;\r\n    \r\n    function Agreement () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n// Event when new contract is created to notifiy all clients\r\n    event ContractCreated(uint contractId, address participantId);\r\n// Event when a contract is signed\r\n    event ContractSigned(uint contractId);\r\n    \r\n// A contract can be only added by owner and user must exist;\r\n    function addContract(\r\n        bytes32 contractTitle, bytes32 documentTitle, bytes32 version,\r\n        bytes32 description, address participant, bytes32 consent\r\n        ) public {\r\n        require(owner == msg.sender);\r\n        contractCount += 1;\r\n        contracts[contractCount] = \r\n        Contract(contractCount, contractTitle, documentTitle, version, description, participant, consent, false);\r\n        emit ContractCreated(contractCount, participant);\r\n    }\r\n    \r\n    function addMultipleContracts(\r\n        bytes32 contractTitle, bytes32 documentTitle, bytes32 version,\r\n        bytes32 description, address[] _participant, bytes32 consent\r\n        ) public {\r\n        require(owner == msg.sender);\r\n        uint arrayLength = _participant.length;\r\n        for (uint i=0; i < arrayLength; i++) {\r\n            contractCount += 1;\r\n            contracts[contractCount] = Contract(\r\n            contractCount, contractTitle, documentTitle,\r\n            version, description, _participant[i], consent, false);\r\n            emit ContractCreated(contractCount, _participant[i]);\r\n        }\r\n    }\r\n\r\n// To sign contract id needs to be valid and contract should assigned to participant and should not be signed already\r\n    function signContract( uint id) public {\r\n        require(id > 0 && id <= contractCount);\r\n        require(contracts[id].participant == msg.sender);\r\n        require(!contracts[id].isSigned);\r\n        contracts[id].isSigned = true;\r\n        emit ContractSigned(id);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"contractTitle\",\"type\":\"bytes32\"},{\"name\":\"documentTitle\",\"type\":\"bytes32\"},{\"name\":\"version\",\"type\":\"bytes32\"},{\"name\":\"description\",\"type\":\"bytes32\"},{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"consent\",\"type\":\"bytes32\"},{\"name\":\"isSigned\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractTitle\",\"type\":\"bytes32\"},{\"name\":\"documentTitle\",\"type\":\"bytes32\"},{\"name\":\"version\",\"type\":\"bytes32\"},{\"name\":\"description\",\"type\":\"bytes32\"},{\"name\":\"_participant\",\"type\":\"address[]\"},{\"name\":\"consent\",\"type\":\"bytes32\"}],\"name\":\"addMultipleContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"signContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractTitle\",\"type\":\"bytes32\"},{\"name\":\"documentTitle\",\"type\":\"bytes32\"},{\"name\":\"version\",\"type\":\"bytes32\"},{\"name\":\"description\",\"type\":\"bytes32\"},{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"consent\",\"type\":\"bytes32\"}],\"name\":\"addContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"participantId\",\"type\":\"address\"}],\"name\":\"ContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractId\",\"type\":\"uint256\"}],\"name\":\"ContractSigned\",\"type\":\"event\"}]","ContractName":"Agreement","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f0beba14eb9c9b83b4a1513d9c249d31a4a7f5e7b5ca135374ced24eb57765cb"}]}