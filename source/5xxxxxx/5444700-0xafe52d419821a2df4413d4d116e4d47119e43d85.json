{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Hive is ERC20 {\r\n\r\n    using SafeMath for uint;\r\n    string public constant name = \"UHIVE\";\r\n    string public constant symbol = \"HVE\";    \r\n    uint256 public constant decimals = 18;\r\n    uint256 _totalSupply = 80000000000 * (10**decimals);\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    // Balances for each account\r\n    mapping(address => uint256) balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    // Owner of this contract\r\n    address public owner;\r\n\r\n    // Functions with this modifier can only be executed by the owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) onlyOwner public {\r\n        require(_newOwner != address(0));\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n\r\n    function isFrozenAccount(address _addr) public constant returns (bool) {\r\n        return frozenAccount[_addr];\r\n    }\r\n\r\n    function destroyCoins(address addressToDestroy, uint256 amount) onlyOwner public {\r\n        require(addressToDestroy != address(0));\r\n        require(amount > 0);\r\n        require(amount <= balances[addressToDestroy]);\r\n        balances[addressToDestroy] -= amount;    \r\n        _totalSupply -= amount;\r\n    }\r\n\r\n    // Constructor\r\n    function Hive() public {\r\n        owner = msg.sender;\r\n        balances[owner] = _totalSupply;\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256 supply) {\r\n        supply = _totalSupply;\r\n    }\r\n\r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {        \r\n        if (_to != address(0) && isFrozenAccount(msg.sender) == false && balances[msg.sender] >= _value && _value > 0 && balances[_to].add(_value) > balances[_to]) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(address _from,address _to, uint256 _value) public returns (bool success) {\r\n        if (_to != address(0) && isFrozenAccount(_from) == false && balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to].add(_value) > balances[_to]) {\r\n            balances[_from] = balances[_from].sub(_value);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n}\r\n\r\ncontract UhiveVest {\r\n\r\n    using SafeMath for uint256;\r\n    // The token being sold\r\n    Hive public token;\r\n\r\n    // Owner of this contract\r\n    address public owner;\r\n\r\n    uint256 public releaseDate;\r\n\r\n    // Functions with this modifier can only be executed when the vesting period elapses\r\n    modifier onlyWhenReleased {\r\n        require(now >= releaseDate);\r\n        _;\r\n    }\r\n\r\n    // Functions with this modifier can only be executed by the owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function UhiveVest(Hive _token, uint256 _releaseDate) public {\r\n        token = _token;\r\n        owner = msg.sender;\r\n        releaseDate = _releaseDate;        \r\n    }\r\n\r\n    function () external payable {\r\n        _forwardFunds();\r\n    }\r\n\r\n    function _forwardFunds() private {\r\n        owner.transfer(msg.value);\r\n    }\r\n    \r\n    /**\r\n    * Event for token transfer logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param beneficiary who got the tokens\r\n    * @param value weis paid for purchase\r\n    * @param amount amount of tokens purchased\r\n    */\r\n    event TokenTransfer(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    \r\n\r\n    //Transfer tokens to a specified address, works only after vesting period elapses\r\n    function forwardTokens(address _beneficiary, uint256 totalTokens) onlyOwner onlyWhenReleased public {        \r\n        _preValidateTokenTransfer(_beneficiary, totalTokens);\r\n        _deliverTokens(_beneficiary, totalTokens);\r\n    }\r\n\r\n    //Withdraw tokens to owner wallet, works only after vesting period elapses\r\n    function withdrawTokens() onlyOwner onlyWhenReleased public {    \r\n        uint256 unsold = token.balanceOf(this);\r\n        token.transfer(owner, unsold);\r\n    }\r\n\r\n    //Change the owner wallet address\r\n    function changeOwner(address _newOwner) onlyOwner public {\r\n        require(_newOwner != address(0));\r\n        owner = _newOwner;\r\n    }\r\n    \r\n    //Self-destruct the contract, contract cannot be destroyed until the vesting period is over.\r\n    function terminate() public onlyOwner onlyWhenReleased {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // Internal interface (extensible)\r\n    // -----------------------------------------\r\n\r\n    //Assertain the validity of the transfer\r\n    function _preValidateTokenTransfer(address _beneficiary, uint256 _tokenAmount) internal pure {\r\n        require(_beneficiary != address(0));\r\n        require(_tokenAmount > 0);\r\n    }\r\n\r\n    //Forward the tokens from the contract to the beneficiary\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        token.transfer(_beneficiary, _tokenAmount);\r\n        TokenTransfer(msg.sender, _beneficiary, 0, _tokenAmount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"forwardTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_releaseDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransfer\",\"type\":\"event\"}]","ContractName":"UhiveVest","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000bae94d28610c8cfd2168f7b97bc7cb0589803c6b000000000000000000000000000000000000000000000000000000005e83d980","Library":"","SwarmSource":"bzzr://fcac9955b530f6ce5047832f05b1110b0130db630636cf38143c28d0668caad7"}]}