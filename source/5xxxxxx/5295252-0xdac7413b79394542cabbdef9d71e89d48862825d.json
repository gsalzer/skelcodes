{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/Dividends.sol\r\n\r\ncontract DividendContract {\r\n  using SafeMath for uint256;\r\n  event Dividends(uint256 round, uint256 value);\r\n  event ClaimDividends(address investor, uint256 value);\r\n\r\n  uint256 totalDividendsAmount = 0;\r\n  uint256 totalDividendsRounds = 0;\r\n  uint256 totalUnPayedDividendsAmount = 0;\r\n  mapping(address => uint256) payedDividends;\r\n\r\n\r\n  function getTotalDividendsAmount() public constant returns (uint256) {\r\n    return totalDividendsAmount;\r\n  }\r\n\r\n  function getTotalDividendsRounds() public constant returns (uint256) {\r\n    return totalDividendsRounds;\r\n  }\r\n\r\n  function getTotalUnPayedDividendsAmount() public constant returns (uint256) {\r\n    return totalUnPayedDividendsAmount;\r\n  }\r\n\r\n  function dividendsAmount(address investor) public constant returns (uint256);\r\n  function claimDividends() payable public;\r\n\r\n  function payDividends() payable public {\r\n    require(msg.value > 0);\r\n    totalDividendsAmount = totalDividendsAmount.add(msg.value);\r\n    totalUnPayedDividendsAmount = totalUnPayedDividendsAmount.add(msg.value);\r\n    totalDividendsRounds += 1;\r\n    Dividends(totalDividendsRounds, msg.value);\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/ESlotsICOToken.sol\r\n\r\ncontract ESlotsICOToken is ERC20, DividendContract {\r\n\r\n    string public constant name = \"Ethereum Slot Machine Token\";\r\n    string public constant symbol = \"EST\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    function maxTokensToSale() public view returns (uint256);\r\n    function availableTokens() public view returns (uint256);\r\n    function completeICO() public;\r\n    function connectCrowdsaleContract(address crowdsaleContract) public;\r\n}\r\n\r\n// File: contracts/ESlotsICOTokenDeployed.sol\r\n\r\ncontract ESlotsICOTokenDeployed {\r\n\r\n    // address of token contract (for dividend payments)\r\n    address internal tokenContractAddress;\r\n    ESlotsICOToken icoContract;\r\n\r\n    function ESlotsICOTokenDeployed(address tokenContract) public {\r\n        require(tokenContract != address(0));\r\n        tokenContractAddress = tokenContract;\r\n        icoContract = ESlotsICOToken(tokenContractAddress);\r\n    }\r\n}\r\n\r\n// File: contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ESlotsCrowdsale.sol\r\n\r\ncontract ESlotsCrowdsale is Ownable, ESlotsICOTokenDeployed {\r\n    using SafeMath for uint256;\r\n\r\n    enum State { PrivatePreSale, PreSale, ActiveICO, ICOComplete }\r\n    State public state;\r\n\r\n    // start and end timestamps for dates when investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    // address for funds collecting\r\n    address public wallet = 0x7b97B31E12f7d029769c53cB91c83d29611A4F7A;\r\n\r\n    // how many token units a buyer gets per wei\r\n    uint256 public rate = 1000; //base price: 1 EST token costs 0.001 Ether\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    mapping (address => uint256) public privateInvestors;\r\n\r\n    /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    function ESlotsCrowdsale(address tokenContract) public\r\n    ESlotsICOTokenDeployed(tokenContract)\r\n    {\r\n        state = State.PrivatePreSale;\r\n        startTime = 0;\r\n        endTime = 0;\r\n        weiRaised = 0;\r\n        //do not forget to call\r\n        //icoContract.connectCrowdsaleContract(this);\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != address(0));\r\n        require(validPurchase());\r\n\r\n\r\n        uint256 weiAmount = msg.value;\r\n        // calculate amount of tokens to be created\r\n        uint256 tokens = getTokenAmount(weiAmount);\r\n        uint256 av_tokens = icoContract.availableTokens();\r\n        require(av_tokens >= tokens);\r\n        if(state == State.PrivatePreSale) {\r\n            require(privateInvestors[beneficiary] > 0);\r\n            //restrict sales in private period\r\n            if(privateInvestors[beneficiary] < tokens) {\r\n                tokens = privateInvestors[beneficiary];\r\n            }\r\n        }\r\n            // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        //we can get only 75% to development, 25% will be unlocked after 2 months to fill out casino contract bankroll\r\n        wallet.transfer(percents(weiAmount, 75));\r\n        icoContract.transferFrom(owner, beneficiary, tokens);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n    }\r\n\r\n    function addPrivateInvestor(address beneficiary, uint256 value) public onlyOwner {\r\n        require(state == State.PrivatePreSale);\r\n        privateInvestors[beneficiary] = privateInvestors[beneficiary].add(value);\r\n    }\r\n\r\n    function startPreSale() public onlyOwner {\r\n        require(state == State.PrivatePreSale);\r\n        state = State.PreSale;\r\n    }\r\n\r\n    function startICO() public onlyOwner {\r\n        require(state == State.PreSale);\r\n        state = State.ActiveICO;\r\n        startTime = now;\r\n        endTime = startTime + 7 weeks;\r\n    }\r\n\r\n    function stopICO() public onlyOwner {\r\n        require(state == State.ActiveICO);\r\n        require(icoContract.availableTokens() == 0 || (endTime > 0 && now >= endTime));\r\n        require(weiRaised > 0);\r\n        state = State.ICOComplete;\r\n        endTime = now;\r\n    }\r\n\r\n    // Allow getting slots bankroll after 60 days only\r\n    function cleanup() public onlyOwner {\r\n        require(state == State.ICOComplete);\r\n        require(now >= (endTime + 60 days));\r\n        wallet.transfer(this.balance);\r\n    }\r\n\r\n    // @return true if crowdsale ended\r\n    function hasEnded() public view returns (bool) {\r\n        return state == State.ICOComplete || icoContract.availableTokens() == 0 || (endTime > 0 && now >= endTime);\r\n    }\r\n\r\n    // Calculate amount of tokens depending on crowdsale phase and time\r\n    function getTokenAmount(uint256 weiAmount) public view returns(uint256) {\r\n        uint256 totalTokens = weiAmount.mul(rate);\r\n        uint256 bonus = getLargeAmountBonus(weiAmount);\r\n        if(state == State.PrivatePreSale ||  state == State.PreSale) {\r\n            //PreSale has 50% bonus!\r\n            bonus = bonus.add(50);\r\n        } else if(state == State.ActiveICO) {\r\n            if((now - startTime) < 1 weeks) {\r\n                //30% first week\r\n                bonus = bonus.add(30);\r\n            } else if((now - startTime) < 3 weeks) {\r\n                //15% second and third weeks\r\n                bonus = bonus.add(15);\r\n            }\r\n        }\r\n        return addPercents(totalTokens, bonus);\r\n    }\r\n\r\n    function addPercents(uint256 amount, uint256 percent) internal pure returns(uint256) {\r\n        if(percent == 0) return amount;\r\n        return amount.add(percents(amount, percent));\r\n    }\r\n\r\n    function percents(uint256 amount, uint256 percent) internal pure returns(uint256) {\r\n        if(percent == 0) return 0;\r\n        return amount.mul(percent).div(100);\r\n    }\r\n\r\n    function getLargeAmountBonus(uint256 weiAmount) internal pure returns(uint256) {\r\n        if(weiAmount >= 1000 ether) {\r\n            return 50;\r\n        }\r\n        if(weiAmount >= 500 ether) {\r\n            return 30;\r\n        }\r\n        if(weiAmount >= 100 ether) {\r\n            return 15;\r\n        }\r\n        if(weiAmount >= 50 ether) {\r\n            return 10;\r\n        }\r\n        if(weiAmount >= 10 ether) {\r\n            return 5;\r\n        }\r\n       return 0;\r\n    }\r\n\r\n    // return true if the transaction is suitable for buying tokens\r\n    function validPurchase() internal view returns (bool) {\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return hasEnded() == false && nonZeroPurchase;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"privateInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"addPrivateInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ESlotsCrowdsale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005db4792f5e76f8b3150e9c4f42825ace7eb08dd2","Library":"","SwarmSource":"bzzr://794e0d014c4ac112a30a95f91090348e83eca65eb7f7780c63f3ec24a9163605"}]}