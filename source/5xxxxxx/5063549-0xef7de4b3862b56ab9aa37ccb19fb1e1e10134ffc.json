{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/// @title Ownable\r\n/// @dev The Ownable contract has an owner address, and provides basic authorization control functions, this simplifies\r\n/// and the implementation of \"user permissions\".\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwnerCandidate;\r\n\r\n    event OwnershipRequested(address indexed _by, address indexed _to);\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    /// account.\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev Reverts if called by any account other than the owner.\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerCandidate() {\r\n        if (msg.sender != newOwnerCandidate) {\r\n            revert();\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    /// @dev Proposes to transfer control of the contract to a newOwnerCandidate.\r\n    /// @param _newOwnerCandidate address The address to transfer ownership to.\r\n    function requestOwnershipTransfer(address _newOwnerCandidate) external onlyOwner {\r\n        require(_newOwnerCandidate != address(0));\r\n\r\n        newOwnerCandidate = _newOwnerCandidate;\r\n\r\n        OwnershipRequested(msg.sender, newOwnerCandidate);\r\n    }\r\n\r\n    /// @dev Accept ownership transfer. This method needs to be called by the previously proposed owner.\r\n    function acceptOwnership() external onlyOwnerCandidate {\r\n        address previousOwner = owner;\r\n\r\n        owner = newOwnerCandidate;\r\n        newOwnerCandidate = address(0);\r\n\r\n        OwnershipTransferred(previousOwner, owner);\r\n    }\r\n}\r\n\r\n/// @title EtherWin\r\n/// @dev the contract than handles the EtherWin app\r\ncontract EtherDick is Ownable {\r\n\r\n    event NewBiggestDick(string name, string notes, uint256 size);\r\n\r\n    struct BiggestDick {\r\n        string name;\r\n        string notes;\r\n        uint256 size;\r\n        uint256 timestamp;\r\n        address who;\r\n    }\r\n\r\n    BiggestDick[] private biggestDicks;\r\n\r\n    function EtherDick() public {\r\n        biggestDicks.push(BiggestDick({\r\n            name:       'Brian',\r\n            notes:      'First dick',\r\n            size:      9,\r\n            timestamp:  block.timestamp,\r\n            who:        address(0)\r\n            }));\r\n    }\r\n\r\n    /// Makes you have the bigger dick\r\n    function iHaveABiggerDick(string name, string notes) external payable {\r\n\r\n        uint nameLen = bytes(name).length;\r\n        uint notesLen = bytes(notes).length;\r\n\r\n        require(msg.sender != address(0));\r\n        require(nameLen > 2);\r\n        require(nameLen <= 64);\r\n        require(notesLen <= 140);\r\n        require(msg.value > biggestDicks[biggestDicks.length - 1].size);\r\n\r\n        BiggestDick memory bd = BiggestDick({\r\n            name:       name,\r\n            notes:      notes,\r\n            size:       msg.value,\r\n            timestamp:  block.timestamp,\r\n            who:        msg.sender\r\n        });\r\n\r\n        biggestDicks.push(bd);\r\n\r\n        NewBiggestDick(name, notes, msg.value);\r\n    }\r\n\r\n    // returns how many dicks there have been\r\n    function howManyDicks() external view\r\n            returns (uint) {\r\n\r\n        return biggestDicks.length;\r\n    }\r\n\r\n    // returns who has the biggest dick\r\n    function whoHasTheBiggestDick() external view\r\n            returns (string name, string notes, uint256 size, uint256 timestamp, address who) {\r\n\r\n        BiggestDick storage bd = biggestDicks[biggestDicks.length - 1];\r\n        return (bd.name, bd.notes, bd.size, bd.timestamp, bd.who);\r\n    }\r\n\r\n    // returns the biggest dick at the given index\r\n    function whoHadTheBiggestDick(uint position) external view\r\n            returns (string name, string notes, uint256 size, uint256 timestamp, address who) {\r\n\r\n        BiggestDick storage bd = biggestDicks[position];\r\n        return (bd.name, bd.notes, bd.size, bd.timestamp, bd.who);\r\n    }\r\n\r\n    // fail safe for balance transfer\r\n    function transferBalance(address to, uint256 amount) external onlyOwner {\r\n        to.transfer(amount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"requestOwnershipTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"whoHadTheBiggestDick\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"notes\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"who\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"notes\",\"type\":\"string\"}],\"name\":\"iHaveABiggerDick\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whoHasTheBiggestDick\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"notes\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"who\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"howManyDicks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"notes\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"NewBiggestDick\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EtherDick","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5313a0397685e80ac066cefe0b639474f1dedd9dc756487044059156a0799294"}]}