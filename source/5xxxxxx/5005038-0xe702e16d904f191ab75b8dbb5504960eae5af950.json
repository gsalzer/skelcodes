{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract SafeMathLib {\r\n  \r\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n    uint c = a + b;\r\n    assert(c>=a);\r\n    return c;\r\n  }\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control \r\n * functions, this simplifies the implementation of \"user permissions\". \r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  address public newOwner;\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner =  newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * A token that defines fractional units as decimals.\r\n */\r\ncontract FractionalERC20 is ERC20 {\r\n  uint8 public decimals;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\r\n *\r\n * Based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, SafeMathLib {\r\n  /* Token supply got increased and a new owner received these tokens */\r\n  event Minted(address receiver, uint256 amount);\r\n\r\n  /* Actual balances of token holders */\r\n  mapping(address => uint) balances;\r\n\r\n  /* approve() allowances */\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  function transfer(address _to, uint256 _value)\r\n  public\r\n  returns (bool) \r\n  { \r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = safeSub(balances[msg.sender],_value);\r\n    balances[_to] = safeAdd(balances[_to],_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n    \r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    uint _allowance = allowed[_from][msg.sender];\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= _allowance);\r\n    require(balances[_to] + _value > balances[_to]);\r\n\r\n    balances[_to] = safeAdd(balances[_to],_value);\r\n    balances[_from] = safeSub(balances[_from],_value);\r\n    allowed[_from][msg.sender] = safeSub(_allowance,_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n   /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender],_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = safeSub(oldValue,_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = safeSub(balances[burner],_value);\r\n    totalSupply = safeSub(totalSupply,_value);\r\n    Burn(burner, _value);\r\n  }\r\n}\r\n\r\n/**\r\n * Upgrade agent interface inspired by Lunyr.\r\n *\r\n * Upgrade agent transfers tokens to a new contract.\r\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\r\n */\r\ncontract UpgradeAgent {\r\n  uint public originalSupply;\r\n  /** Interface marker */\r\n  function isUpgradeAgent() public pure returns (bool) {\r\n    return true;\r\n  }\r\n  function upgradeFrom(address _from, uint256 _value) public;\r\n}\r\n\r\n\r\n/**\r\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\r\n *\r\n * First envisioned by Golem and Lunyr projects.\r\n */\r\ncontract UpgradeableToken is StandardToken {\r\n\r\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\r\n  address public upgradeMaster;\r\n\r\n  /** The next contract where the tokens will be migrated. */\r\n  UpgradeAgent public upgradeAgent;\r\n\r\n  /** How many tokens we have upgraded by now. */\r\n  uint256 public totalUpgraded;\r\n\r\n  /**\r\n   * Upgrade states.\r\n   *\r\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\r\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\r\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\r\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\r\n   *\r\n   */\r\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\r\n\r\n  /**\r\n   * Somebody has upgraded some of his tokens.\r\n   */\r\n  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  /**\r\n   * New upgrade agent available.\r\n   */\r\n  event UpgradeAgentSet(address agent);\r\n\r\n  /**\r\n   * Do not allow construction without upgrade master set.\r\n   */\r\n  function UpgradeableToken(address _upgradeMaster) public {\r\n    upgradeMaster = _upgradeMaster;\r\n  }\r\n\r\n  /**\r\n   * Allow the token holder to upgrade some of their tokens to a new contract.\r\n   */\r\n  function upgrade(uint256 value) public {\r\n    UpgradeState state = getUpgradeState();\r\n    require((state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading));\r\n\r\n    // Validate input value.\r\n    require (value != 0);\r\n\r\n    balances[msg.sender] = safeSub(balances[msg.sender],value);\r\n\r\n    // Take tokens out from circulation\r\n    totalSupply = safeSub(totalSupply,value);\r\n    totalUpgraded = safeAdd(totalUpgraded,value);\r\n\r\n    // Upgrade agent reissues the tokens\r\n    upgradeAgent.upgradeFrom(msg.sender, value);\r\n    Upgrade(msg.sender, upgradeAgent, value);\r\n  }\r\n\r\n  /**\r\n   * Set an upgrade agent that handles\r\n   */\r\n  function setUpgradeAgent(address agent) external {\r\n    require(canUpgrade());\r\n\r\n    require(agent != 0x0);\r\n    // Only a master can designate the next agent\r\n    require(msg.sender == upgradeMaster);\r\n    // Upgrade has already begun for an agent\r\n    require(getUpgradeState() != UpgradeState.Upgrading);\r\n\r\n    upgradeAgent = UpgradeAgent(agent);\r\n\r\n    // Bad interface\r\n    require(upgradeAgent.isUpgradeAgent());\r\n    // Make sure that token supplies match in source and target\r\n    require(upgradeAgent.originalSupply() == totalSupply);\r\n\r\n    UpgradeAgentSet(upgradeAgent);\r\n  }\r\n\r\n  /**\r\n   * Get the state of the token upgrade.\r\n   */\r\n  function getUpgradeState() public constant returns(UpgradeState) {\r\n    if(!canUpgrade()) return UpgradeState.NotAllowed;\r\n    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\r\n    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\r\n    else return UpgradeState.Upgrading;\r\n  }\r\n\r\n  /**\r\n   * Change the upgrade master.\r\n   *\r\n   * This allows us to set a new owner for the upgrade mechanism.\r\n   */\r\n  function setUpgradeMaster(address master) public {\r\n    require(master != 0x0);\r\n    require(msg.sender == upgradeMaster);\r\n    upgradeMaster = master;\r\n  }\r\n\r\n  /**\r\n   * Child contract can enable to provide the condition when the upgrade can begun.\r\n   */\r\n  function canUpgrade() public view returns(bool) {\r\n     return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Define interface for releasing the token transfer after a successful crowdsale.\r\n */\r\ncontract ReleasableToken is ERC20, Ownable {\r\n\r\n  /* The finalizer contract that allows unlift the transfer limits on this token */\r\n  address public releaseAgent;\r\n\r\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\r\n  bool public released = false;\r\n\r\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\r\n  mapping (address => bool) public transferAgents;\r\n\r\n  /**\r\n   * Limit token transfer until the crowdsale is over.\r\n   *\r\n   */\r\n  modifier canTransfer(address _sender) {\r\n\r\n    if(!released) {\r\n        require(transferAgents[_sender]);\r\n    }\r\n\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Set the contract that can call release and make the token transferable.\r\n   *\r\n   * Design choice. Allow reset the release agent to fix fat finger mistakes.\r\n   */\r\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\r\n\r\n    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\r\n    releaseAgent = addr;\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\r\n   */\r\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\r\n    transferAgents[addr] = state;\r\n  }\r\n\r\n  /**\r\n   * One way function to release the tokens to the wild.\r\n   *\r\n   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\r\n   */\r\n  function releaseTokenTransfer() public onlyReleaseAgent {\r\n    released = true;\r\n  }\r\n\r\n  /** The function can be called only before or after the tokens have been releasesd */\r\n  modifier inReleaseState(bool releaseState) {\r\n    require(releaseState == released);\r\n    _;\r\n  }\r\n\r\n  /** The function can be called only by a whitelisted release agent. */\r\n  modifier onlyReleaseAgent() {\r\n    require(msg.sender == releaseAgent);\r\n    _;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) canTransfer(msg.sender) public returns (bool success) {\r\n    // Call StandardToken.transfer()\r\n   return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) public returns (bool success) {\r\n    // Call StandardToken.transferForm()\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * A token that can increase its supply by another contract.\r\n *\r\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\r\n * Only mint agents, contracts whitelisted by owner, can mint new tokens.\r\n *\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  /** List of agents that are allowed to create new tokens */\r\n  mapping (address => bool) public mintAgents;\r\n\r\n  event MintingAgentChanged(address addr, bool state);\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  /**\r\n   * Create new tokens and allocate them to an address..\r\n   *\r\n   * Only callably by a crowdsale contract (mint agent).\r\n   */\r\n  function mint(address receiver, uint256 amount) onlyMintAgent canMint public returns(bool){\r\n    totalSupply = safeAdd(totalSupply, amount);\r\n    balances[receiver] = safeAdd(balances[receiver], amount);\r\n\r\n    // This will make the mint transaction apper in EtherScan.io\r\n    // We can remove this after there is a standardized minting event\r\n    Mint(receiver, amount);\r\n    Transfer(0, receiver, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a crowdsale contract to mint new tokens.\r\n   */\r\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\r\n    mintAgents[addr] = state;\r\n    MintingAgentChanged(addr, state);\r\n  }\r\n\r\n  modifier onlyMintAgent() {\r\n    // Only crowdsale contracts are allowed to mint new tokens\r\n    require(mintAgents[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /** Make sure we are not done yet. */\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n}\r\n\r\n/**\r\n * A crowdsaled token.\r\n *\r\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\r\n *\r\n * - The token transfer() is disabled until the crowdsale is over\r\n * - The token contract gives an opt-in upgrade path to a new contract\r\n * - The same token can be part of several crowdsales through approve() mechanism\r\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\r\n *\r\n */\r\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, BurnableToken {\r\n\r\n  event UpdatedTokenInformation(string newName, string newSymbol);\r\n\r\n  string public name;\r\n\r\n  string public symbol;\r\n\r\n  uint8 public decimals;\r\n\r\n  /**\r\n   * Construct the token.\r\n   *\r\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\r\n   *\r\n   * @param _name Token name\r\n   * @param _symbol Token symbol - should be all caps\r\n   * @param _initialSupply How many tokens we start with\r\n   * @param _decimals Number of decimal places\r\n   * @param _mintable Are new tokens created over the crowdsale or do we distribute only the initial supply? Note that when the token becomes transferable the minting always ends.\r\n   */\r\n  function CrowdsaleToken(string _name, string _symbol, uint _initialSupply, uint8 _decimals, bool _mintable)\r\n    public\r\n    UpgradeableToken(msg.sender) \r\n  {\r\n\r\n    // Create any address, can be transferred\r\n    // to team multisig via changeOwner(),\r\n    // also remember to call setUpgradeMaster()\r\n    owner = msg.sender;\r\n\r\n    name = _name;\r\n    symbol = _symbol;\r\n\r\n    totalSupply = _initialSupply;\r\n\r\n    decimals = _decimals;\r\n\r\n    // Create initially all balance on the team multisig\r\n    balances[owner] = totalSupply;\r\n\r\n    if(totalSupply > 0) {\r\n      Minted(owner, totalSupply);\r\n    }\r\n\r\n    // No more new supply allowed after the token creation\r\n    if(!_mintable) {\r\n      mintingFinished = true;\r\n      require(totalSupply != 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When token is released to be transferable, enforce no new tokens can be created.\r\n   */\r\n  function releaseTokenTransfer() public onlyReleaseAgent {\r\n    mintingFinished = true;\r\n    super.releaseTokenTransfer();\r\n  }\r\n\r\n  /**\r\n   * Allow upgrade agent functionality kick in only if the crowdsale was success.\r\n   */\r\n  function canUpgrade() public view returns(bool) {\r\n    return released && super.canUpgrade();\r\n  }\r\n\r\n  /**\r\n   * Owner can update token information here\r\n   */\r\n  function setTokenInformation(string _name, string _symbol) onlyOwner public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    UpdatedTokenInformation(name, symbol);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Finalize agent defines what happens at the end of succeseful crowdsale.\r\n *\r\n * - Allocate tokens for founders, bounties and community\r\n * - Make tokens transferable\r\n * - etc.\r\n */\r\ncontract FinalizeAgent {\r\n\r\n  function isFinalizeAgent() public pure returns(bool) {\r\n    return true;\r\n  }\r\n\r\n  /** Return true if we can run finalizeCrowdsale() properly.\r\n   *\r\n   * This is a safety check function that doesn't allow crowdsale to begin\r\n   * unless the finalizer has been set up properly.\r\n   */\r\n  function isSane() public view returns (bool);\r\n\r\n  /** Called once by crowdsale finalize() if the sale was success. */\r\n  function finalizeCrowdsale() public ;\r\n\r\n}\r\n\r\n/**\r\n * Interface for defining crowdsale pricing.\r\n */\r\ncontract PricingStrategy {\r\n\r\n  /** Interface declaration. */\r\n  function isPricingStrategy() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /** Self check if all references are correctly set.\r\n   *\r\n   * Checks that pricing strategy matches crowdsale parameters.\r\n   */\r\n  function isSane(address crowdsale) public view returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * When somebody tries to buy tokens for X eth, calculate how many tokens they get.\r\n   *\r\n   *\r\n   * @param value - What is the value of the transaction send in as wei\r\n   * @param tokensSold - how much tokens have been sold this far\r\n   * @param weiRaised - how much money has been raised this far\r\n   * @param msgSender - who is the investor of this transaction\r\n   * @param decimals - how many decimal units the token has\r\n   * @return Amount of tokens the investor receives\r\n   */\r\n  function calculatePrice(uint256 value, uint256 weiRaised, uint256 tokensSold, address msgSender, uint256 decimals) public constant returns (uint256 tokenAmount);\r\n}\r\n\r\n/*\r\n * Haltable\r\n *\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\r\n *\r\n *\r\n * Originally envisioned in FirstBlood ICO contract.\r\n */\r\ncontract Haltable is Ownable {\r\n  bool public halted;\r\n\r\n  modifier stopInEmergency {\r\n    require(!halted);\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    require(halted);\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function halt() external onlyOwner {\r\n    halted = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unhalt() external onlyOwner onlyInEmergency {\r\n    halted = false;\r\n  }\r\n\r\n}\r\ncontract Allocatable is Ownable {\r\n\r\n  /** List of agents that are allowed to allocate new tokens */\r\n  mapping (address => bool) public allocateAgents;\r\n\r\n  event AllocateAgentChanged(address addr, bool state  );\r\n\r\n  /**\r\n   * Owner can allow a crowdsale contract to allocate new tokens.\r\n   */\r\n  function setAllocateAgent(address addr, bool state) onlyOwner public {\r\n    allocateAgents[addr] = state;\r\n    AllocateAgentChanged(addr, state);\r\n  }\r\n\r\n  modifier onlyAllocateAgent() {\r\n    // Only crowdsale contracts are allowed to allocate new tokens\r\n    require(allocateAgents[msg.sender]);\r\n    _;\r\n  }\r\n}\r\n\r\n/**\r\n * Abstract base contract for token sales.\r\n *\r\n * Handle\r\n * - start and end dates\r\n * - accepting investments\r\n * - minimum funding goal and refund\r\n * - various statistics during the crowdfund\r\n * - different pricing strategies\r\n * - different investment policies (require server side customer id, allow only whitelisted addresses)\r\n *\r\n */\r\ncontract Crowdsale is Allocatable, Haltable, SafeMathLib {\r\n\r\n  /* Max investment count when we are still allowed to change the multisig address */\r\n  uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5;\r\n\r\n  /* The token we are selling */\r\n  FractionalERC20 public token;\r\n\r\n  /* Token Vesting Contract */\r\n  address public tokenVestingAddress;\r\n\r\n  /* How we are going to price our offering */\r\n  PricingStrategy public pricingStrategy;\r\n\r\n  /* Post-success callback */\r\n  FinalizeAgent public finalizeAgent;\r\n\r\n  /* tokens will be transfered from this address */\r\n  address public multisigWallet;\r\n\r\n  /* if the funding goal is not reached, investors may withdraw their funds */\r\n  uint256 public minimumFundingGoal;\r\n\r\n  /* the UNIX timestamp start date of the crowdsale */\r\n  uint256 public startsAt;\r\n\r\n  /* the UNIX timestamp end date of the crowdsale */\r\n  uint256 public endsAt;\r\n\r\n  /* the number of tokens already sold through this contract*/\r\n  uint256 public tokensSold = 0;\r\n\r\n  /* How many wei of funding we have raised */\r\n  uint256 public weiRaised = 0;\r\n\r\n  /* How many distinct addresses have invested */\r\n  uint256 public investorCount = 0;\r\n\r\n  /* How much wei we have returned back to the contract after a failed crowdfund. */\r\n  uint256 public loadedRefund = 0;\r\n\r\n  /* How much wei we have given back to investors.*/\r\n  uint256 public weiRefunded = 0;\r\n\r\n  /* Has this crowdsale been finalized */\r\n  bool public finalized;\r\n\r\n  /* Do we need to have unique contributor id for each customer */\r\n  bool public requireCustomerId;\r\n\r\n  /**\r\n    * Do we verify that contributor has been cleared on the server side (accredited investors only).\r\n    * This method was first used in FirstBlood crowdsale to ensure all contributors have accepted terms on sale (on the web).\r\n    */\r\n  bool public requiredSignedAddress;\r\n\r\n  /* Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\r\n  address public signerAddress;\r\n\r\n  /** How much ETH each address has invested to this crowdsale */\r\n  mapping (address => uint256) public investedAmountOf;\r\n\r\n  /** How much tokens this crowdsale has credited for each investor address */\r\n  mapping (address => uint256) public tokenAmountOf;\r\n\r\n  /** Addresses that are allowed to invest even before ICO offical opens. For testing, for ICO partners, etc. */\r\n  mapping (address => bool) public earlyParticipantWhitelist;\r\n\r\n  /** This is for manul testing for the interaction from owner wallet. You can set it to any value and inspect this in blockchain explorer to see that crowdsale interaction works. */\r\n  uint256 public ownerTestValue;\r\n\r\n  uint256 public earlyPariticipantWeiPrice =82815734989648;\r\n\r\n  uint256 public whitelistBonusPercentage = 15;\r\n  uint256 public whitelistPrincipleLockPercentage = 50;\r\n  uint256 public whitelistBonusLockPeriod = 7776000;\r\n  uint256 public whitelistPrincipleLockPeriod = 7776000;\r\n\r\n  /** State machine\r\n   *\r\n   * - Preparing: All contract initialization calls and variables have not been set yet\r\n   * - Prefunding: We have not passed start time yet\r\n   * - Funding: Active crowdsale\r\n   * - Success: Minimum funding goal reached\r\n   * - Failure: Minimum funding goal not reached before ending time\r\n   * - Finalized: The finalized has been called and succesfully executed\r\n   * - Refunding: Refunds are loaded on the contract for reclaim.\r\n   */\r\n  enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}\r\n\r\n  // A new investment was made\r\n  event Invested(address investor, uint256 weiAmount, uint256 tokenAmount, uint128 customerId);\r\n\r\n  // Refund was processed for a contributor\r\n  event Refund(address investor, uint256 weiAmount);\r\n\r\n  // The rules were changed what kind of investments we accept\r\n  event InvestmentPolicyChanged(bool requireCustId, bool requiredSignedAddr, address signerAddr);\r\n\r\n  // Address early participation whitelist status changed\r\n  event Whitelisted(address addr, bool status);\r\n\r\n  // Crowdsale end time has been changed\r\n  event EndsAtChanged(uint256 endAt);\r\n\r\n  // Crowdsale start time has been changed\r\n  event StartAtChanged(uint256 endsAt);\r\n\r\n  function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, \r\n  uint256 _start, uint256 _end, uint256 _minimumFundingGoal, address _tokenVestingAddress) public \r\n  {\r\n\r\n    owner = msg.sender;\r\n\r\n    token = FractionalERC20(_token);\r\n\r\n    tokenVestingAddress = _tokenVestingAddress;\r\n\r\n    setPricingStrategy(_pricingStrategy);\r\n\r\n    multisigWallet = _multisigWallet;\r\n    require(multisigWallet != 0);\r\n\r\n    require(_start != 0);\r\n\r\n    startsAt = _start;\r\n\r\n    require(_end != 0);\r\n\r\n    endsAt = _end;\r\n\r\n    // Don't mess the dates\r\n    require(startsAt < endsAt);\r\n\r\n    // Minimum funding goal can be zero\r\n    minimumFundingGoal = _minimumFundingGoal;\r\n\r\n  }\r\n\r\n  /**\r\n   * Don't expect to just send in money and get tokens.\r\n   */\r\n  function() payable public {\r\n    invest(msg.sender);\r\n  }\r\n\r\n  /** Function to set default vesting schedule parameters. */\r\n    function setDefaultWhitelistVestingParameters(uint256 _bonusPercentage, uint256 _principleLockPercentage, uint256 _bonusLockPeriod, uint256 _principleLockPeriod, uint256 _earlyPariticipantWeiPrice) onlyAllocateAgent public {\r\n\r\n        whitelistBonusPercentage = _bonusPercentage;\r\n        whitelistPrincipleLockPercentage = _principleLockPercentage;\r\n        whitelistBonusLockPeriod = _bonusLockPeriod;\r\n        whitelistPrincipleLockPeriod = _principleLockPeriod;\r\n        earlyPariticipantWeiPrice = _earlyPariticipantWeiPrice;\r\n    }\r\n\r\n  /**\r\n   * Make an investment.\r\n   *\r\n   * Crowdsale must be running for one to invest.\r\n   * We must have not pressed the emergency brake.\r\n   *\r\n   * @param receiver The Ethereum address who receives the tokens\r\n   * @param customerId (optional) UUID v4 to track the successful payments on the server side\r\n   *\r\n   */\r\n  function investInternal(address receiver, uint128 customerId) stopInEmergency private {\r\n\r\n    uint256 tokenAmount;\r\n    uint256 weiAmount = msg.value;\r\n    // Determine if it's a good time to accept investment from this participant\r\n    if (getState() == State.PreFunding) {\r\n        // Are we whitelisted for early deposit\r\n        require(earlyParticipantWhitelist[receiver]);\r\n        require(weiAmount >= safeMul(15, uint(10 ** 18)));\r\n        require(weiAmount <= safeMul(50, uint(10 ** 18)));\r\n        tokenAmount = safeDiv(safeMul(weiAmount, uint(10) ** token.decimals()), earlyPariticipantWeiPrice);\r\n        \r\n        if (investedAmountOf[receiver] == 0) {\r\n          // A new investor\r\n          investorCount++;\r\n        }\r\n\r\n        // Update investor\r\n        investedAmountOf[receiver] = safeAdd(investedAmountOf[receiver],weiAmount);\r\n        tokenAmountOf[receiver] = safeAdd(tokenAmountOf[receiver],tokenAmount);\r\n\r\n        // Update totals\r\n        weiRaised = safeAdd(weiRaised,weiAmount);\r\n        tokensSold = safeAdd(tokensSold,tokenAmount);\r\n\r\n        // Check that we did not bust the cap\r\n        require(!isBreakingCap(weiAmount, tokenAmount, weiRaised, tokensSold));\r\n\r\n        if (safeAdd(whitelistPrincipleLockPercentage,whitelistBonusPercentage) > 0) {\r\n\r\n            uint256 principleAmount = safeDiv(safeMul(tokenAmount, 100), safeAdd(whitelistBonusPercentage, 100));\r\n            uint256 bonusLockAmount = safeDiv(safeMul(whitelistBonusPercentage, principleAmount), 100);\r\n            uint256 principleLockAmount = safeDiv(safeMul(whitelistPrincipleLockPercentage, principleAmount), 100);\r\n\r\n            uint256 totalLockAmount = safeAdd(principleLockAmount, bonusLockAmount);\r\n            TokenVesting tokenVesting = TokenVesting(tokenVestingAddress);\r\n            \r\n            // to prevent minting of tokens which will be useless as vesting amount cannot be updated\r\n            require(!tokenVesting.isVestingSet(receiver));\r\n            require(totalLockAmount <= tokenAmount);\r\n            assignTokens(tokenVestingAddress,totalLockAmount);\r\n            \r\n            // set vesting with default schedule\r\n            tokenVesting.setVesting(receiver, principleLockAmount, whitelistPrincipleLockPeriod, bonusLockAmount, whitelistBonusLockPeriod); \r\n        }\r\n\r\n        // assign remaining tokens to contributor\r\n        if (tokenAmount - totalLockAmount > 0) {\r\n            assignTokens(receiver, tokenAmount - totalLockAmount);\r\n        }\r\n\r\n        // Pocket the money\r\n        require(multisigWallet.send(weiAmount));\r\n\r\n        // Tell us invest was success\r\n        Invested(receiver, weiAmount, tokenAmount, customerId);       \r\n\r\n    \r\n    } else if(getState() == State.Funding) {\r\n        // Retail participants can only come in when the crowdsale is running\r\n        tokenAmount = pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals());\r\n        require(tokenAmount != 0);\r\n\r\n\r\n        if(investedAmountOf[receiver] == 0) {\r\n          // A new investor\r\n          investorCount++;\r\n        }\r\n\r\n        // Update investor\r\n        investedAmountOf[receiver] = safeAdd(investedAmountOf[receiver],weiAmount);\r\n        tokenAmountOf[receiver] = safeAdd(tokenAmountOf[receiver],tokenAmount);\r\n\r\n        // Update totals\r\n        weiRaised = safeAdd(weiRaised,weiAmount);\r\n        tokensSold = safeAdd(tokensSold,tokenAmount);\r\n\r\n        // Check that we did not bust the cap\r\n        require(!isBreakingCap(weiAmount, tokenAmount, weiRaised, tokensSold));\r\n\r\n        assignTokens(receiver, tokenAmount);\r\n\r\n        // Pocket the money\r\n        require(multisigWallet.send(weiAmount));\r\n\r\n        // Tell us invest was success\r\n        Invested(receiver, weiAmount, tokenAmount, customerId);\r\n\r\n    } else {\r\n      // Unwanted state\r\n      require(false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * allocate tokens for the early investors.\r\n   *\r\n   * Preallocated tokens have been sold before the actual crowdsale opens.\r\n   * This function mints the tokens and moves the crowdsale needle.\r\n   *\r\n   * Investor count is not handled; it is assumed this goes for multiple investors\r\n   * and the token distribution happens outside the smart contract flow.\r\n   *\r\n   * No money is exchanged, as the crowdsale team already have received the payment.\r\n   *\r\n   * @param weiPrice Price of a single full token in wei\r\n   *\r\n   */\r\n  function preallocate(address receiver, uint256 tokenAmount, uint256 weiPrice, uint256 principleLockAmount, uint256 principleLockPeriod, uint256 bonusLockAmount, uint256 bonusLockPeriod) public onlyAllocateAgent {\r\n\r\n\r\n    uint256 weiAmount = (weiPrice * tokenAmount)/10**uint256(token.decimals()); // This can be also 0, we give out tokens for free\r\n    uint256 totalLockAmount = 0;\r\n    weiRaised = safeAdd(weiRaised,weiAmount);\r\n    tokensSold = safeAdd(tokensSold,tokenAmount);\r\n\r\n    investedAmountOf[receiver] = safeAdd(investedAmountOf[receiver],weiAmount);\r\n    tokenAmountOf[receiver] = safeAdd(tokenAmountOf[receiver],tokenAmount);\r\n\r\n    // cannot lock more than total tokens\r\n    totalLockAmount = safeAdd(principleLockAmount, bonusLockAmount);\r\n    require(totalLockAmount <= tokenAmount);\r\n\r\n    // assign locked token to Vesting contract\r\n    if (totalLockAmount > 0) {\r\n\r\n      TokenVesting tokenVesting = TokenVesting(tokenVestingAddress);\r\n      \r\n      // to prevent minting of tokens which will be useless as vesting amount cannot be updated\r\n      require(!tokenVesting.isVestingSet(receiver));\r\n      assignTokens(tokenVestingAddress,totalLockAmount);\r\n      \r\n      // set vesting with default schedule\r\n      tokenVesting.setVesting(receiver, principleLockAmount, principleLockPeriod, bonusLockAmount, bonusLockPeriod); \r\n    }\r\n\r\n    // assign remaining tokens to contributor\r\n    if (tokenAmount - totalLockAmount > 0) {\r\n      assignTokens(receiver, tokenAmount - totalLockAmount);\r\n    }\r\n\r\n    // Tell us invest was success\r\n    Invested(receiver, weiAmount, tokenAmount, 0);\r\n  }\r\n\r\n  /**\r\n   * Track who is the customer making the payment so we can send thank you email.\r\n   */\r\n  function investWithCustomerId(address addr, uint128 customerId) public payable {\r\n    require(!requiredSignedAddress);\r\n    require(customerId != 0);\r\n    investInternal(addr, customerId);\r\n  }\r\n\r\n  /**\r\n   * Allow anonymous contributions to this crowdsale.\r\n   */\r\n  function invest(address addr) public payable {\r\n    require(!requireCustomerId);\r\n    \r\n    require(!requiredSignedAddress);\r\n    investInternal(addr, 0);\r\n  }\r\n\r\n  /**\r\n   * Invest to tokens, recognize the payer and clear his address.\r\n   *\r\n   */\r\n  \r\n  // function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\r\n  //   investWithSignedAddress(msg.sender, customerId, v, r, s);\r\n  // }\r\n\r\n  /**\r\n   * Invest to tokens, recognize the payer.\r\n   *\r\n   */\r\n  function buyWithCustomerId(uint128 customerId) public payable {\r\n    investWithCustomerId(msg.sender, customerId);\r\n  }\r\n\r\n  /**\r\n   * The basic entry point to participate the crowdsale process.\r\n   *\r\n   * Pay for funding, get invested tokens back in the sender address.\r\n   */\r\n  function buy() public payable {\r\n    invest(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * Finalize a succcesful crowdsale.\r\n   *\r\n   * The owner can triggre a call the contract that provides post-crowdsale actions, like releasing the tokens.\r\n   */\r\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\r\n\r\n    // Already finalized\r\n    require(!finalized);\r\n\r\n    // Finalizing is optional. We only call it if we are given a finalizing agent.\r\n    if(address(finalizeAgent) != 0) {\r\n      finalizeAgent.finalizeCrowdsale();\r\n    }\r\n\r\n    finalized = true;\r\n  }\r\n\r\n  /**\r\n   * Allow to (re)set finalize agent.\r\n   *\r\n   * Design choice: no state restrictions on setting this, so that we can fix fat finger mistakes.\r\n   */\r\n  function setFinalizeAgent(FinalizeAgent addr) public onlyOwner {\r\n    finalizeAgent = addr;\r\n\r\n    // Don't allow setting bad agent\r\n    require(finalizeAgent.isFinalizeAgent());\r\n  }\r\n\r\n  /**\r\n   * Set policy do we need to have server-side customer ids for the investments.\r\n   *\r\n   */\r\n  function setRequireCustomerId(bool value) public onlyOwner {\r\n    requireCustomerId = value;\r\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\r\n  }\r\n\r\n  /**\r\n   * Allow addresses to do early participation.\r\n   *\r\n   * TODO: Fix spelling error in the name\r\n   */\r\n  function setEarlyParicipantWhitelist(address addr, bool status) public onlyAllocateAgent {\r\n    earlyParticipantWhitelist[addr] = status;\r\n    Whitelisted(addr, status);\r\n  }\r\n\r\n  function setWhiteList(address[] _participants) public onlyAllocateAgent {\r\n      \r\n      require(_participants.length > 0);\r\n      uint256 participants = _participants.length;\r\n\r\n      for (uint256 j=0; j<participants; j++) {\r\n      require(_participants[j] != 0);\r\n      earlyParticipantWhitelist[_participants[j]] = true;\r\n      Whitelisted(_participants[j], true);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Allow crowdsale owner to close early or extend the crowdsale.\r\n   *\r\n   * This is useful e.g. for a manual soft cap implementation:\r\n   * - after X amount is reached determine manual closing\r\n   *\r\n   * This may put the crowdsale to an invalid state,\r\n   * but we trust owners know what they are doing.\r\n   *\r\n   */\r\n  function setEndsAt(uint time) public onlyOwner {\r\n\r\n    require(now <= time);\r\n\r\n    endsAt = time;\r\n    EndsAtChanged(endsAt);\r\n  }\r\n\r\n  /**\r\n   * Allow crowdsale owner to begin early or extend the crowdsale.\r\n   *\r\n   * This is useful e.g. for a manual soft cap implementation:\r\n   * - after X amount is reached determine manual closing\r\n   *\r\n   * This may put the crowdsale to an invalid state,\r\n   * but we trust owners know what they are doing.\r\n   *\r\n   */\r\n  function setStartAt(uint time) public onlyOwner {\r\n\r\n    startsAt = time;\r\n    StartAtChanged(endsAt);\r\n  }\r\n\r\n  /**\r\n   * Allow to (re)set pricing strategy.\r\n   *\r\n   * Design choice: no state restrictions on the set, so that we can fix fat finger mistakes.\r\n   */\r\n  function setPricingStrategy(PricingStrategy _pricingStrategy) public onlyOwner {\r\n    pricingStrategy = _pricingStrategy;\r\n\r\n    // Don't allow setting bad agent\r\n    require(pricingStrategy.isPricingStrategy());\r\n  }\r\n\r\n  /**\r\n   * Allow to change the team multisig address in the case of emergency.\r\n   *\r\n   * This allows to save a deployed crowdsale wallet in the case the crowdsale has not yet begun\r\n   * (we have done only few test transactions). After the crowdsale is going\r\n   * then multisig address stays locked for the safety reasons.\r\n   */\r\n  function setMultisig(address addr) public onlyOwner {\r\n\r\n    // Change\r\n    require(investorCount <= MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE);\r\n\r\n    multisigWallet = addr;\r\n  }\r\n\r\n  /**\r\n   * Allow load refunds back on the contract for the refunding.\r\n   *\r\n   * The team can transfer the funds back on the smart contract in the case the minimum goal was not reached..\r\n   */\r\n  function loadRefund() public payable inState(State.Failure) {\r\n    require(msg.value != 0);\r\n    loadedRefund = safeAdd(loadedRefund,msg.value);\r\n  }\r\n\r\n  /**\r\n   * Investors can claim refund.\r\n   */\r\n  function refund() public inState(State.Refunding) {\r\n    uint256 weiValue = investedAmountOf[msg.sender];\r\n    require(weiValue != 0);\r\n    investedAmountOf[msg.sender] = 0;\r\n    weiRefunded = safeAdd(weiRefunded,weiValue);\r\n    Refund(msg.sender, weiValue);\r\n    require(msg.sender.send(weiValue));\r\n  }\r\n\r\n  /**\r\n   * @return true if the crowdsale has raised enough money to be a succes\r\n   */\r\n  function isMinimumGoalReached() public constant returns (bool reached) {\r\n    return weiRaised >= minimumFundingGoal;\r\n  }\r\n\r\n  /**\r\n   * Check if the contract relationship looks good.\r\n   */\r\n  function isFinalizerSane() public constant returns (bool sane) {\r\n    return finalizeAgent.isSane();\r\n  }\r\n\r\n  /**\r\n   * Check if the contract relationship looks good.\r\n   */\r\n  function isPricingSane() public constant returns (bool sane) {\r\n    return pricingStrategy.isSane(address(this));\r\n  }\r\n\r\n  /**\r\n   * Crowdfund state machine management.\r\n   *\r\n   * We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.\r\n   */\r\n  function getState() public constant returns (State) {\r\n    if(finalized) return State.Finalized;\r\n    else if (address(finalizeAgent) == 0) return State.Preparing;\r\n    else if (!finalizeAgent.isSane()) return State.Preparing;\r\n    else if (!pricingStrategy.isSane(address(this))) return State.Preparing;\r\n    else if (block.timestamp < startsAt) return State.PreFunding;\r\n    else if (block.timestamp <= endsAt && !isCrowdsaleFull()) return State.Funding;\r\n    else if (isMinimumGoalReached()) return State.Success;\r\n    else if (!isMinimumGoalReached() && weiRaised > 0 && loadedRefund >= weiRaised) return State.Refunding;\r\n    else return State.Failure;\r\n  }\r\n\r\n  /** This is for manual testing of multisig wallet interaction */\r\n  function setOwnerTestValue(uint val) public onlyOwner {\r\n    ownerTestValue = val;\r\n  }\r\n\r\n  /** Interface marker. */\r\n  function isCrowdsale() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  //\r\n  // Modifiers\r\n  //\r\n\r\n  /** Modified allowing execution only if the crowdsale is currently running.  */\r\n  modifier inState(State state) {\r\n    require(getState() == state);\r\n    _;\r\n  }\r\n\r\n\r\n  //\r\n  // Abstract functions\r\n  //\r\n\r\n  /**\r\n   * Check if the current invested breaks our cap rules.\r\n   *\r\n   *\r\n   * The child contract must define their own cap setting rules.\r\n   * We allow a lot of flexibility through different capping strategies (ETH, token count)\r\n   * Called from invest().\r\n   *\r\n   * @param weiAmount The amount of wei the investor tries to invest in the current transaction\r\n   * @param tokenAmount The amount of tokens we try to give to the investor in the current transaction\r\n   * @param weiRaisedTotal What would be our total raised balance after this transaction\r\n   * @param tokensSoldTotal What would be our total sold tokens count after this transaction\r\n   *\r\n   * @return true if taking this investment would break our cap rules\r\n   */\r\n  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) public constant returns (bool limitBroken);\r\n  /**\r\n   * Check if the current crowdsale is full and we can no longer sell any tokens.\r\n   */\r\n  function isCrowdsaleFull() public constant returns (bool);\r\n\r\n  /**\r\n   * Create new tokens or transfer issued tokens to the investor depending on the cap model.\r\n   */\r\n  function assignTokens(address receiver, uint tokenAmount) private;\r\n}\r\n\r\n/**\r\n * At the end of the successful crowdsale allocate % bonus of tokens to the team.\r\n *\r\n * Unlock tokens.\r\n *\r\n * BonusAllocationFinal must be set as the minting agent for the MintableToken.\r\n *\r\n */\r\ncontract BonusFinalizeAgent is FinalizeAgent, SafeMathLib {\r\n\r\n  CrowdsaleToken public token;\r\n  Crowdsale public crowdsale;\r\n  uint256 public allocatedTokens;\r\n  uint256 tokenCap;\r\n  address walletAddress;\r\n\r\n\r\n  function BonusFinalizeAgent(CrowdsaleToken _token, Crowdsale _crowdsale, uint256 _tokenCap, address _walletAddress) public {\r\n    token = _token;\r\n    crowdsale = _crowdsale;\r\n\r\n    //crowdsale address must not be 0\r\n    require(address(crowdsale) != 0);\r\n\r\n    tokenCap = _tokenCap;\r\n    walletAddress = _walletAddress;\r\n  }\r\n\r\n  /* Can we run finalize properly */\r\n  function isSane() public view returns (bool) {\r\n    return (token.mintAgents(address(this)) == true) && (token.releaseAgent() == address(this));\r\n  }\r\n\r\n  /** Called once by crowdsale finalize() if the sale was success. */\r\n  function finalizeCrowdsale() public {\r\n\r\n    // if finalized is not being called from the crowdsale \r\n    // contract then throw\r\n    require (msg.sender == address(crowdsale));\r\n\r\n    // get the total sold tokens count.\r\n    uint256 tokenSupply = token.totalSupply();\r\n\r\n    allocatedTokens = safeSub(tokenCap,tokenSupply);\r\n    \r\n    if ( allocatedTokens > 0) {\r\n      token.mint(walletAddress, allocatedTokens);\r\n    }\r\n\r\n    token.releaseTokenTransfer();\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * ICO crowdsale contract that is capped by amout of ETH.\r\n *\r\n * - Tokens are dynamically created during the crowdsale\r\n *\r\n *\r\n */\r\ncontract MintedEthCappedCrowdsale is Crowdsale {\r\n\r\n  /* Maximum amount of wei this crowdsale can raise. */\r\n  uint public weiCap;\r\n\r\n  function MintedEthCappedCrowdsale(address _token, PricingStrategy _pricingStrategy, \r\n    address _multisigWallet, uint256 _start, uint256 _end, uint256 _minimumFundingGoal, uint256 _weiCap, address _tokenVestingAddress) \r\n    Crowdsale(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal,_tokenVestingAddress) public\r\n    { \r\n      weiCap = _weiCap;\r\n    }\r\n\r\n  /**\r\n   * Called from invest() to confirm if the curret investment does not break our cap rule.\r\n   */\r\n  function isBreakingCap(uint256 weiAmount, uint256 tokenAmount, uint256 weiRaisedTotal, uint256 tokensSoldTotal) public constant returns (bool limitBroken) {\r\n    return weiRaisedTotal > weiCap;\r\n  }\r\n\r\n  function isCrowdsaleFull() public constant returns (bool) {\r\n    return weiRaised >= weiCap;\r\n  }\r\n\r\n  /**\r\n   * Dynamically create tokens and assign them to the investor.\r\n   */\r\n  function assignTokens(address receiver, uint256 tokenAmount) private {\r\n    MintableToken mintableToken = MintableToken(token);\r\n    mintableToken.mint(receiver, tokenAmount);\r\n  }\r\n}\r\n\r\n\r\n/// @dev Tranche based pricing with special support for pre-ico deals.\r\n///      Implementing \"first price\" tranches, meaning, that if byers order is\r\n///      covering more than one tranche, the price of the lowest tranche will apply\r\n///      to the whole order.\r\ncontract EthTranchePricing is PricingStrategy, Ownable, SafeMathLib {\r\n\r\n  uint public constant MAX_TRANCHES = 10;\r\n \r\n \r\n  // This contains all pre-ICO addresses, and their prices (weis per token)\r\n  mapping (address => uint256) public preicoAddresses;\r\n\r\n  /**\r\n  * Define pricing schedule using tranches.\r\n  */\r\n\r\n  struct Tranche {\r\n      // Amount in weis when this tranche becomes active\r\n      uint amount;\r\n      // How many tokens per wei you will get while this tranche is active\r\n      uint price;\r\n  }\r\n\r\n  // Store tranches in a fixed array, so that it can be seen in a blockchain explorer\r\n  // Tranche 0 is always (0, 0)\r\n  // (TODO: change this when we confirm dynamic arrays are explorable)\r\n  Tranche[10] public tranches;\r\n\r\n  // How many active tranches we have\r\n  uint public trancheCount;\r\n\r\n  /// @dev Contruction, creating a list of tranches\r\n  /// @param _tranches uint[] tranches Pairs of (start amount, price)\r\n  function EthTranchePricing(uint[] _tranches) public {\r\n\r\n    // Need to have tuples, length check\r\n    require(!(_tranches.length % 2 == 1 || _tranches.length >= MAX_TRANCHES*2));\r\n    trancheCount = _tranches.length / 2;\r\n    uint256 highestAmount = 0;\r\n    for(uint256 i=0; i<_tranches.length/2; i++) {\r\n      tranches[i].amount = _tranches[i*2];\r\n      tranches[i].price = _tranches[i*2+1];\r\n      // No invalid steps\r\n      require(!((highestAmount != 0) && (tranches[i].amount <= highestAmount)));\r\n      highestAmount = tranches[i].amount;\r\n    }\r\n\r\n    // We need to start from zero, otherwise we blow up our deployment\r\n    require(tranches[0].amount == 0);\r\n\r\n    // Last tranche price must be zero, terminating the crowdale\r\n    require(tranches[trancheCount-1].price == 0);\r\n  }\r\n\r\n  /// @dev This is invoked once for every pre-ICO address, set pricePerToken\r\n  ///      to 0 to disable\r\n  /// @param preicoAddress PresaleFundCollector address\r\n  /// @param pricePerToken How many weis one token cost for pre-ico investors\r\n  function setPreicoAddress(address preicoAddress, uint pricePerToken)\r\n    public\r\n    onlyOwner\r\n  {\r\n    preicoAddresses[preicoAddress] = pricePerToken;\r\n  }\r\n\r\n  /// @dev Iterate through tranches. You reach end of tranches when price = 0\r\n  /// @return tuple (time, price)\r\n  function getTranche(uint256 n) public constant returns (uint, uint) {\r\n    return (tranches[n].amount, tranches[n].price);\r\n  }\r\n\r\n  function getFirstTranche() private constant returns (Tranche) {\r\n    return tranches[0];\r\n  }\r\n\r\n  function getLastTranche() private constant returns (Tranche) {\r\n    return tranches[trancheCount-1];\r\n  }\r\n\r\n  function getPricingStartsAt() public constant returns (uint) {\r\n    return getFirstTranche().amount;\r\n  }\r\n\r\n  function getPricingEndsAt() public constant returns (uint) {\r\n    return getLastTranche().amount;\r\n  }\r\n\r\n  function isSane(address _crowdsale) public view returns(bool) {\r\n    // Our tranches are not bound by time, so we can't really check are we sane\r\n    // so we presume we are ;)\r\n    // In the future we could save and track raised tokens, and compare it to\r\n    // the Crowdsale contract.\r\n    return true;\r\n  }\r\n\r\n  /// @dev Get the current tranche or bail out if we are not in the tranche periods.\r\n  /// @param weiRaised total amount of weis raised, for calculating the current tranche\r\n  /// @return {[type]} [description]\r\n  function getCurrentTranche(uint256 weiRaised) private constant returns (Tranche) {\r\n    uint i;\r\n    for(i=0; i < tranches.length; i++) {\r\n      if(weiRaised < tranches[i].amount) {\r\n        return tranches[i-1];\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @dev Get the current price.\r\n  /// @param weiRaised total amount of weis raised, for calculating the current tranche\r\n  /// @return The current price or 0 if we are outside trache ranges\r\n  function getCurrentPrice(uint256 weiRaised) public constant returns (uint256 result) {\r\n    return getCurrentTranche(weiRaised).price;\r\n  }\r\n\r\n  /// @dev Calculate the current price for buy in amount.\r\n  function calculatePrice(uint256 value, uint256 weiRaised, uint256 tokensSold, address msgSender, uint256 decimals) public constant returns (uint256) {\r\n\r\n    uint256 multiplier = 10 ** decimals;\r\n\r\n    // This investor is coming through pre-ico\r\n    if(preicoAddresses[msgSender] > 0) {\r\n      return safeMul(value, multiplier) / preicoAddresses[msgSender];\r\n    }\r\n\r\n    uint256 price = getCurrentPrice(weiRaised);\r\n    \r\n    return safeMul(value, multiplier) / price;\r\n  }\r\n\r\n  function() payable public {\r\n    revert(); // No money on this contract\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Contract to enforce Token Vesting\r\n */\r\ncontract TokenVesting is Allocatable, SafeMathLib {\r\n\r\n    address public TokenAddress;\r\n\r\n    /** keep track of total tokens yet to be released, \r\n     * this should be less than or equal to tokens held by this contract. \r\n     */\r\n    uint256 public totalUnreleasedTokens;\r\n\r\n\r\n    struct VestingSchedule {\r\n        uint256 startAt;\r\n        uint256 principleLockAmount;\r\n        uint256 principleLockPeriod;\r\n        uint256 bonusLockAmount;\r\n        uint256 bonusLockPeriod;\r\n        uint256 amountReleased;\r\n        bool isPrincipleReleased;\r\n        bool isBonusReleased;\r\n    }\r\n\r\n    mapping (address => VestingSchedule) public vestingMap;\r\n\r\n    event VestedTokensReleased(address _adr, uint256 _amount);\r\n\r\n\r\n    function TokenVesting(address _TokenAddress) public {\r\n        TokenAddress = _TokenAddress;\r\n    }\r\n\r\n\r\n\r\n    /** Function to set/update vesting schedule. PS - Amount cannot be changed once set */\r\n    function setVesting(address _adr, uint256 _principleLockAmount, uint256 _principleLockPeriod, uint256 _bonusLockAmount, uint256 _bonuslockPeriod) public onlyAllocateAgent {\r\n\r\n        VestingSchedule storage vestingSchedule = vestingMap[_adr];\r\n\r\n        // data validation\r\n        require(safeAdd(_principleLockAmount, _bonusLockAmount) > 0);\r\n\r\n        //startAt is set current time as start time.\r\n\r\n        vestingSchedule.startAt = block.timestamp;\r\n        vestingSchedule.bonusLockPeriod = safeAdd(block.timestamp,_bonuslockPeriod);\r\n        vestingSchedule.principleLockPeriod = safeAdd(block.timestamp,_principleLockPeriod);\r\n\r\n        // check if enough tokens are held by this contract\r\n        ERC20 token = ERC20(TokenAddress);\r\n        uint256 _totalAmount = safeAdd(_principleLockAmount, _bonusLockAmount);\r\n        require(token.balanceOf(this) >= safeAdd(totalUnreleasedTokens, _totalAmount));\r\n        vestingSchedule.principleLockAmount = _principleLockAmount;\r\n        vestingSchedule.bonusLockAmount = _bonusLockAmount;\r\n        vestingSchedule.isPrincipleReleased = false;\r\n        vestingSchedule.isBonusReleased = false;\r\n        totalUnreleasedTokens = safeAdd(totalUnreleasedTokens, _totalAmount);\r\n        vestingSchedule.amountReleased = 0;\r\n    }\r\n\r\n    function isVestingSet(address adr) public constant returns (bool isSet) {\r\n        return vestingMap[adr].principleLockAmount != 0 || vestingMap[adr].bonusLockAmount != 0;\r\n    }\r\n\r\n\r\n    /** Release tokens as per vesting schedule, called by contributor  */\r\n    function releaseMyVestedTokens() public {\r\n        releaseVestedTokens(msg.sender);\r\n    }\r\n\r\n    /** Release tokens as per vesting schedule, called by anyone  */\r\n    function releaseVestedTokens(address _adr) public {\r\n        VestingSchedule storage vestingSchedule = vestingMap[_adr];\r\n        \r\n        uint256 _totalTokens = safeAdd(vestingSchedule.principleLockAmount, vestingSchedule.bonusLockAmount);\r\n        // check if all tokens are not vested\r\n        require(safeSub(_totalTokens, vestingSchedule.amountReleased) > 0);\r\n        \r\n        // calculate total vested tokens till now        \r\n        uint256 amountToRelease = 0;\r\n\r\n        if (block.timestamp >= vestingSchedule.principleLockPeriod && !vestingSchedule.isPrincipleReleased) {\r\n            amountToRelease = safeAdd(amountToRelease,vestingSchedule.principleLockAmount);\r\n            vestingSchedule.amountReleased = safeAdd(vestingSchedule.amountReleased, amountToRelease);\r\n            vestingSchedule.isPrincipleReleased = true;\r\n        }\r\n        if (block.timestamp >= vestingSchedule.bonusLockPeriod && !vestingSchedule.isBonusReleased) {\r\n            amountToRelease = safeAdd(amountToRelease,vestingSchedule.bonusLockAmount);\r\n            vestingSchedule.amountReleased = safeAdd(vestingSchedule.amountReleased, amountToRelease);\r\n            vestingSchedule.isBonusReleased = true;\r\n        }\r\n\r\n        // transfer vested tokens\r\n        require(amountToRelease > 0);\r\n        ERC20 token = ERC20(TokenAddress);\r\n        token.transfer(_adr, amountToRelease);\r\n        // decrement overall unreleased token count\r\n        totalUnreleasedTokens = safeSub(totalUnreleasedTokens, amountToRelease);\r\n        VestedTokensReleased(_adr, amountToRelease);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ownerTestValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requireCustomerId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPricingSane\",\"outputs\":[{\"name\":\"sane\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumFundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFinalizeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalizeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setAllocateAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocateAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pricingStrategy\",\"type\":\"address\"}],\"name\":\"setPricingStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bonusPercentage\",\"type\":\"uint256\"},{\"name\":\"_principleLockPercentage\",\"type\":\"uint256\"},{\"name\":\"_bonusLockPeriod\",\"type\":\"uint256\"},{\"name\":\"_principleLockPeriod\",\"type\":\"uint256\"},{\"name\":\"_earlyPariticipantWeiPrice\",\"type\":\"uint256\"}],\"name\":\"setDefaultWhitelistVestingParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistBonusPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setEndsAt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricingStrategy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loadedRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMinimumGoalReached\",\"outputs\":[{\"name\":\"reached\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistPrincipleLockPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRequireCustomerId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"loadRefund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setOwnerTestValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistPrincipleLockPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customerId\",\"type\":\"uint128\"}],\"name\":\"buyWithCustomerId\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"weiRaisedTotal\",\"type\":\"uint256\"},{\"name\":\"tokensSoldTotal\",\"type\":\"uint256\"}],\"name\":\"isBreakingCap\",\"outputs\":[{\"name\":\"limitBroken\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"weiPrice\",\"type\":\"uint256\"},{\"name\":\"principleLockAmount\",\"type\":\"uint256\"},{\"name\":\"principleLockPeriod\",\"type\":\"uint256\"},{\"name\":\"bonusLockAmount\",\"type\":\"uint256\"},{\"name\":\"bonusLockPeriod\",\"type\":\"uint256\"}],\"name\":\"preallocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalizerSane\",\"outputs\":[{\"name\":\"sane\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenVestingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"earlyParticipantWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredSignedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyPariticipantWeiPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsaleFull\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistBonusLockPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setEarlyParicipantWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"customerId\",\"type\":\"uint128\"}],\"name\":\"investWithCustomerId\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMultisig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setStartAt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_pricingStrategy\",\"type\":\"address\"},{\"name\":\"_multisigWallet\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"},{\"name\":\"_minimumFundingGoal\",\"type\":\"uint256\"},{\"name\":\"_weiCap\",\"type\":\"uint256\"},{\"name\":\"_tokenVestingAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customerId\",\"type\":\"uint128\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requireCustId\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"requiredSignedAddr\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"signerAddr\",\"type\":\"address\"}],\"name\":\"InvestmentPolicyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endAt\",\"type\":\"uint256\"}],\"name\":\"EndsAtChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endsAt\",\"type\":\"uint256\"}],\"name\":\"StartAtChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"AllocateAgentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MintedEthCappedCrowdsale","CompilerVersion":"v0.4.19-nightly.2017.10.18+commit.f7ca2421","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000eda8b016efa8b1161208cf041cd86972eee0f31e000000000000000000000000d86343385558fc9f00470548abe142a5a3cbc1d50000000000000000000000009e3741a7a7f34194f1368f6dd673fdf3e9b13c98000000000000000000000000000000000000000000000000000000005a746ee0000000000000000000000000000000000000000000000000000000005a7da96000000000000000000000000000000000000000000000043c33c193756480000000000000000000000000000000000000000000000000071809e43d64a1f0000000000000000000000000000045303f96d6ae172e549fa04311802ff6bd03b21e","Library":"","SwarmSource":"bzzr://c9a1b8f038c427694922ee6d62ec5b730b825bb5f0eeb1e20088e3669ba5840c"}]}