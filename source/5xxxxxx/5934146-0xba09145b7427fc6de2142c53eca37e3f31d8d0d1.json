{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n \r\n\r\ncontract Kman{\r\n\r\n     /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n\r\n   // Only owner allowed.\r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n   // The tokens can never be stolen.\r\n    modifier notBIT(address aContract)\r\n    {\r\n        require(aContract != address(BITcontract));\r\n        _;\r\n    } \r\n\r\n    modifier isOpenToPublic()\r\n    {\r\n        require(openToPublic);\r\n        _;\r\n    }\r\n\r\n    modifier onlyRealPeople()\r\n    {\r\n          require (msg.sender == tx.origin);\r\n        _;\r\n    }\r\n    \r\n    \r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n\r\n\r\n   event WinnerPaid\r\n   (\r\n        uint256 amount,\r\n        address winner\r\n    );\r\n    \r\n\r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n\r\n    BIT BITcontract;  //a reference to the 8thereum contract\r\n    address owner;\r\n    bool openToPublic = false; \r\n    uint256 devFee;\r\n\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n\r\n    constructor() public\r\n    {\r\n        BITcontract = BIT(0x645f0c9695F2B970E623aE29538FdB1A67bd6b6E); //8thereum contract\r\n        openToPublic = false;\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    function BITBalanceOf(address someAddress) public view returns(uint256)\r\n    {\r\n        return BITcontract.balanceOf(someAddress);\r\n    }\r\n    \r\n    function getTokensPaidToGame(address customerAddress) public view returns (uint256)\r\n    {\r\n       return BITcontract.gamePlayers(address(this), customerAddress);\r\n    }\r\n\r\n    function firstPlacePot() public view returns(uint256)\r\n    {\r\n       uint256 balance = BITBalanceOf(this);\r\n       return balance / 4;\r\n    }\r\n    \r\n    function secondPlacePot() public view returns(uint256)\r\n    {\r\n       uint256 balance = BITBalanceOf(this);\r\n       return (balance * 15)/ 100;\r\n    }\r\n    \r\n    function thirdPlacePot() public view returns(uint256)\r\n    {\r\n       uint256 balance = BITBalanceOf(this);\r\n       return balance / 10;\r\n    }\r\n\r\n   \r\n\r\n     /*======================================\r\n     =          OWNER ONLY FUNCTIONS        =\r\n     ======================================*/\r\n\r\n   //give the people access to play\r\n    function openToThePublic()\r\n       onlyOwner()\r\n        public\r\n    {\r\n        openToPublic = true;\r\n    }\r\n\r\n    //Pay tournament winners\r\n    function PayWinners(address first, address second, address third) \r\n    public \r\n    isOpenToPublic()\r\n    onlyRealPeople() \r\n    onlyOwner()\r\n    {\r\n        uint256 balance = BITBalanceOf(this);\r\n        devFee = balance / 20;\r\n        balance -= devFee;\r\n        uint256 firstPlace = balance / 4;\r\n        uint256 secondPlace = (balance * 15)/ 100;\r\n        uint256 thirdPlace = (balance / 10);\r\n        \r\n        BITcontract.transfer(first, firstPlace);\r\n        BITcontract.transfer(second, secondPlace); \r\n        BITcontract.transfer(third, thirdPlace);\r\n        BITcontract.transfer(owner, devFee);\r\n        \r\n        \r\n        emit WinnerPaid(firstPlace, first);\r\n        emit WinnerPaid(secondPlace, second);\r\n        emit WinnerPaid(thirdPlace, third);\r\n    }\r\n    \r\n    \r\n     /* A trap door for when someone sends tokens other than the intended ones so the overseers\r\n      can decide where to send them. (credit: Doublr Contract) */\r\n    function returnAnyERC20Token(address tokenAddress, address tokenOwner, uint tokens)\r\n    public\r\n    onlyOwner()\r\n    notBIT(tokenAddress)\r\n    returns (bool success)\r\n    {\r\n        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Interface\r\n{\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n}  \r\n\r\n//Need to ensure the Lottery contract knows what a test token is\r\ncontract BIT\r\n{\r\n    function transfer(address, uint256) public returns(bool);\r\n    mapping(address => mapping(address => uint256)) public gamePlayers;\r\n    function balanceOf(address customerAddress) public view returns(uint256);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"openToThePublic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"first\",\"type\":\"address\"},{\"name\":\"second\",\"type\":\"address\"},{\"name\":\"third\",\"type\":\"address\"}],\"name\":\"PayWinners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"returnAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"customerAddress\",\"type\":\"address\"}],\"name\":\"getTokensPaidToGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondPlacePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"someAddress\",\"type\":\"address\"}],\"name\":\"BITBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstPlacePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdPlacePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPaid\",\"type\":\"event\"}]","ContractName":"Kman","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8f3e1fb5d0d13f94b10d4004896ffb49dfb9e7e1c48986609a7e8c2dfbe24086"}]}