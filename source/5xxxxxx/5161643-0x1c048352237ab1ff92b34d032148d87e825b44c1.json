{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n  * Legenrich LeRT Bounty Payment Contract \r\n  *\r\n  * More at https://legenrich.com\r\n  *\r\n  * Smart contract and pyament gateway developed by https://smart2be.com, \r\n  * Premium ICO campaign managing company\r\n  *\r\n  **/\r\n\r\npragma solidity ^0.4.19;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract Week {\r\n    function get(address from_) public returns (uint256);\r\n}\r\n\r\ncontract Token {\r\n  /// @return total amount of tokens\r\n  function totalSupply() public constant returns (uint256 supply);\r\n\r\n  /// @param _owner The address from which the balance will be retrieved\r\n  /// @return The balance\r\n  function balanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n  /// @notice send `_value` token to `_to` from `msg.sender`\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _value The amount of token to be transferred\r\n  /// @return Whether the transfer was successful or not\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @param _value The amount of wei to be approved for transfer\r\n  /// @return Whether the approval was successful or not\r\n  function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n  /// @param _owner The address of the account owning tokens\r\n  /// @param _spender The address of the account able to transfer the tokens\r\n  /// @return Amount of remaining tokens allowed to spent\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n  uint public decimals;\r\n  string public name;\r\n}\r\n\r\ncontract StandardToken is Token {\r\n    using SafeMath for uint256;\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {\r\n    if (balances[msg.sender] >= _value && balances[_to].add(_value) > balances[_to]) {\r\n      balances[msg.sender] = balances[msg.sender].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    } else { return false; }\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to].add(_value) > balances[_to]) {\r\n      balances[_to] = balances[_to].add(_value);\r\n      balances[_from] = balances[_from].sub(_value);\r\n      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    } else { return false; }\r\n  }\r\n\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  uint256 public totalSupply;\r\n}\r\n\r\n\r\ncontract LeRT_Bounty is owned {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address public token;\r\n\r\n    mapping (address => uint256) public sent; \r\n    address[] internal extention;\r\n\r\n    event Withdraw(address user, uint256 amount, uint256 balance);\r\n\r\n    /**\r\n      * @notice Construct Bounty Payment Contract\r\n      *           \r\n      *\r\n      */\r\n\r\n    function LeRT_Bounty() public {\r\n        token = 0x13646D839725a5E88555a694ac94696824a18332;  // ERC20 Contract address\r\n    }\r\n\r\n    /**\r\n      * @notice All payments if appears go to owner\r\n      *           \r\n      */\r\n    function() payable public{\r\n        owner.transfer(msg.value); \r\n    }\r\n    /**\r\n      * @notice Owner can change ERC20 contract address\r\n      *   \r\n      * @param token_ New ERC20 contract address\r\n      *        \r\n      */\r\n    function changeToken(address token_) onlyOwner public {\r\n        token = token_;\r\n    }\r\n\r\n    /**\r\n      * @notice Add external ERC20 tokens balances\r\n      *\r\n      * @param ext_ Address of external balances\r\n      *           \r\n      */\r\n    function addExtension(address ext_) onlyOwner public {\r\n        extention.push(ext_);\r\n    }\r\n    \r\n    function withdraw(uint256 amount_) public {\r\n        uint256 tokens;\r\n        uint256 remain;\r\n        tokens = _balanceOf(msg.sender);\r\n        require(tokens.sub(sent[msg.sender]) >= amount_);\r\n        sent[msg.sender] = sent[msg.sender].add(amount_);\r\n        remain = tokens.sub(sent[msg.sender]);\r\n        require(Token(token).transfer(msg.sender, amount_));\r\n        Withdraw(msg.sender, amount_, remain);\r\n    }\r\n\r\n    function balanceOf(address user_) public constant returns (uint256) {\r\n        require(extention.length > 0);\r\n        uint256 balance;\r\n        for (uint256 i = 0; i < extention.length; i++){\r\n            Week eachWeek = Week(extention[i]);\r\n            balance = balance.add(eachWeek.get(user_));\r\n        }\r\n        return (balance.sub(sent[user_]));\r\n    }\r\n\r\n    function _balanceOf(address user_) internal constant returns (uint256) {\r\n        require(extention.length > 0);\r\n        uint256 balance;\r\n        for (uint256 i = 0; i < extention.length; i++){\r\n            Week eachWeek = Week(extention[i]);\r\n            balance = balance.add(eachWeek.get(user_));\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    function balanceTotal() public constant returns (uint256){\r\n        return Token(token).balanceOf(this);\r\n    }\r\n  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"ext_\",\"type\":\"address\"}],\"name\":\"addExtension\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"LeRT_Bounty","CompilerVersion":"v0.4.20-nightly.2018.1.6+commit.2548228b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7763cbef70f1e995490b308184dec2df49e34d2dd03e9752243a258d12c5e3cf"}]}