{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title RTEBonusTokenVault\r\n * @dev Token holder contract that releases tokens to the respective addresses\r\n * and _lockedReleaseTime\r\n */\r\ncontract RTEBonusTokenVault is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n  using SafeMath for uint256;\r\n\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n\r\n  bool public vaultUnlocked;\r\n\r\n  bool public vaultSecondaryUnlocked;\r\n\r\n  // How much we have allocated to the investors invested\r\n  mapping(address => uint256) public balances;\r\n\r\n  mapping(address => uint256) public lockedBalances;\r\n\r\n  /**\r\n   * @dev Allocation event\r\n   * @param _investor Investor address\r\n   * @param _value Tokens allocated\r\n   */\r\n  event Allocated(address _investor, uint256 _value);\r\n\r\n  /**\r\n   * @dev Distribution event\r\n   * @param _investor Investor address\r\n   * @param _value Tokens distributed\r\n   */\r\n  event Distributed(address _investor, uint256 _value);\r\n\r\n  function RTEBonusTokenVault(\r\n    ERC20Basic _token\r\n  )\r\n    public\r\n  {\r\n    token = _token;\r\n    vaultUnlocked = false;\r\n    vaultSecondaryUnlocked = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Unlocks vault\r\n   */\r\n  function unlock() public onlyOwner {\r\n    require(!vaultUnlocked);\r\n    vaultUnlocked = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Unlocks secondary vault\r\n   */\r\n  function unlockSecondary() public onlyOwner {\r\n    require(vaultUnlocked);\r\n    require(!vaultSecondaryUnlocked);\r\n    vaultSecondaryUnlocked = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Add allocation amount to investor addresses\r\n   * Only the owner of this contract - the crowdsale can call this function\r\n   * Split half to be locked by timelock in vault, the other half to be released on vault unlock\r\n   * @param _investor Investor address\r\n   * @param _amount Amount of tokens to add\r\n   */\r\n  function allocateInvestorBonusToken(address _investor, uint256 _amount) public onlyOwner {\r\n    require(!vaultUnlocked);\r\n    require(!vaultSecondaryUnlocked);\r\n\r\n    uint256 bonusTokenAmount = _amount.div(2);\r\n    uint256 bonusLockedTokenAmount = _amount.sub(bonusTokenAmount);\r\n\r\n    balances[_investor] = balances[_investor].add(bonusTokenAmount);\r\n    lockedBalances[_investor] = lockedBalances[_investor].add(bonusLockedTokenAmount);\r\n\r\n    Allocated(_investor, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers bonus tokens held to investor\r\n   * @param _investor Investor address making the claim\r\n   */\r\n  function claim(address _investor) public onlyOwner {\r\n    // _investor is the original initiator\r\n    // msg.sender is the contract that called this.\r\n    require(vaultUnlocked);\r\n\r\n    uint256 claimAmount = balances[_investor];\r\n    require(claimAmount > 0);\r\n\r\n    uint256 tokenAmount = token.balanceOf(this);\r\n    require(tokenAmount > 0);\r\n\r\n    // Empty token balance\r\n    balances[_investor] = 0;\r\n\r\n    token.safeTransfer(_investor, claimAmount);\r\n\r\n    Distributed(_investor, claimAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers secondary bonus tokens held to investor\r\n   * @param _investor Investor address making the claim\r\n   */\r\n  function claimLocked(address _investor) public onlyOwner {\r\n    // _investor is the original initiator\r\n    // msg.sender is the contract that called this.\r\n    require(vaultUnlocked);\r\n    require(vaultSecondaryUnlocked);\r\n\r\n    uint256 claimAmount = lockedBalances[_investor];\r\n    require(claimAmount > 0);\r\n\r\n    uint256 tokenAmount = token.balanceOf(this);\r\n    require(tokenAmount > 0);\r\n\r\n    // Empty token balance\r\n    lockedBalances[_investor] = 0;\r\n\r\n    token.safeTransfer(_investor, claimAmount);\r\n\r\n    Distributed(_investor, claimAmount);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultSecondaryUnlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultUnlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockSecondary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allocateInvestorBonusToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"claimLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Allocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RTEBonusTokenVault","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000436f0f3a982074c4a05084485d421466a994fe53","Library":"","SwarmSource":"bzzr://7665fe64387b646a6b7af12ea8fef6c6c49d286a827ab6e7d9a5f26ec2a8cfdb"}]}