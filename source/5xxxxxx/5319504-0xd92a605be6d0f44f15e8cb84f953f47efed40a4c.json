{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n// EasySend\r\n// A service on top of the AHS for sending ETH to a handle\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface AHSInterface {\r\n    function registerHandle(bytes32 _base, bytes32 _handle, address _addr) public payable;\r\n    function transferBase(bytes32 _base, address _newAddress) public;\r\n    function findAddress(bytes32 _base, bytes32 _handle) public view returns(address);\r\n    function isRegistered(bytes32 _base) public view returns(bool);\r\n    function doesOwn(bytes32 _base, address _addr) public view returns(bool);\r\n}\r\n\r\n\r\ncontract EasySend is Ownable {\r\n\r\n    AHSInterface public ahs;\r\n\r\n    function EasySend(AHSInterface _ahs) public {\r\n        ahs = _ahs;\r\n    }\r\n\r\n    function sendETH(bytes32 _base, bytes32 _handle) public payable {\r\n        require(ahs.isRegistered(_base));\r\n        require(findAddress(_base, _handle) != address(0));\r\n        require(msg.value > 0);\r\n        address to = findAddress(_base, _handle);\r\n        to.transfer(msg.value);\r\n    }\r\n\r\n    function findAddress(bytes32 _base, bytes32 _handle) public view returns(address) {\r\n        address addr = ahs.findAddress(_base, _handle);\r\n        assert(addr != address(0));\r\n        return addr;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_base\",\"type\":\"bytes32\"},{\"name\":\"_handle\",\"type\":\"bytes32\"}],\"name\":\"findAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_base\",\"type\":\"bytes32\"},{\"name\":\"_handle\",\"type\":\"bytes32\"}],\"name\":\"sendETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ahs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ahs\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EasySend","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000025d94b021b69d9c01931ff40bd265cfc3d920f72","Library":"","SwarmSource":"bzzr://c95862f0b9ca1b6b5f7a730189fab5b71a846f637ced74a534d8cfc1bc9729c5"}]}