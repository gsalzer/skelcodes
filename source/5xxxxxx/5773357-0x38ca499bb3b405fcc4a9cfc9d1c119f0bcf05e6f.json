{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*   \r\n *    Exodus adaptation of OasisDirectProxy by MakerDAO.\r\n */\r\n\r\ncontract OtcInterface {\r\n    function sellAllAmount(address, uint, address, uint) public returns (uint);\r\n    function buyAllAmount(address, uint, address, uint) public returns (uint);\r\n    function getPayAmount(address, address, uint) public constant returns (uint);\r\n}\r\n\r\ncontract TokenInterface {\r\n    function balanceOf(address) public returns (uint);\r\n    function allowance(address, address) public returns (uint);\r\n    function approve(address, uint) public;\r\n    function transfer(address,uint) public returns (bool);\r\n    function transferFrom(address, address, uint) public returns (bool);\r\n    function deposit() public payable;\r\n    function withdraw(uint) public;\r\n}\r\n\r\ncontract FeeInterface {\r\n    function takeFee (uint amt, address token) public view returns (uint fee, uint remaining);\r\n}\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Mortal is DSAuth {\r\n    function kill() public auth {\r\n        selfdestruct(owner);\r\n    }\r\n    \r\n    function withdrawTo(address _to) public auth {\r\n    /* rescue all ETH */\r\n        require(_to.call.value(address(this).balance)());\r\n    }\r\n    \r\n    function withdrawTokenTo(TokenInterface token, address _to) public auth {\r\n    /* rescue all of a token */\r\n        require(token.transfer(_to, token.balanceOf(this)));\r\n    }\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract OasisMonetizedProxy is Mortal, DSMath {\r\n    FeeInterface fees;\r\n    \r\n    constructor(FeeInterface _fees) public {\r\n        fees = _fees;\r\n    }\r\n    \r\n    function setFeeAuthority(FeeInterface _fees) public auth {\r\n      fees = _fees;\r\n    }\r\n    \r\n    function unwrapAndSend(TokenInterface wethToken, address _to, uint wethAmt) internal {\r\n        wethToken.withdraw(wethAmt);\r\n        require(_to.call.value(wethAmt)()); \r\n  /* perform a call when sending ETH, in case the _to is a contract */\r\n    }\r\n\r\n    /*** Public functions start here ***/\r\n\r\n    function sellAllAmount(\r\n        OtcInterface otc,\r\n        TokenInterface payToken, \r\n        uint payAmt, \r\n        TokenInterface buyToken, \r\n        uint minBuyAmt\r\n    ) public returns (uint) {\r\n        require(payToken.transferFrom(msg.sender, this, payAmt));\r\n        if (payToken.allowance(this, otc) < payAmt) {\r\n            payToken.approve(otc, uint(-1));\r\n        }\r\n        uint buyAmt = otc.sellAllAmount(payToken, payAmt, buyToken, minBuyAmt);\r\n        (uint feeAmt, uint buyAmtRemainder) = fees.takeFee(buyAmt, buyToken);\r\n        require(buyToken.transfer(owner, feeAmt)); /* fee is taken */\r\n        require(buyToken.transfer(msg.sender, buyAmtRemainder));\r\n        return buyAmtRemainder;\r\n    }\r\n\r\n    function sellAllAmountPayEth(\r\n        OtcInterface otc,\r\n        TokenInterface wethToken,\r\n        TokenInterface buyToken,\r\n        uint minBuyAmt\r\n    ) public payable returns (uint) {\r\n        wethToken.deposit.value(msg.value)();\r\n        if (wethToken.allowance(this, otc) < msg.value) {\r\n            wethToken.approve(otc, uint(-1));\r\n        }\r\n        uint buyAmt = otc.sellAllAmount(wethToken, msg.value, buyToken, minBuyAmt); \r\n        (uint feeAmt, uint buyAmtRemainder) = fees.takeFee(buyAmt, buyToken);\r\n        require(buyToken.transfer(owner, feeAmt)); /* fee is taken */\r\n        require(buyToken.transfer(msg.sender, buyAmtRemainder));\r\n        return buyAmtRemainder;\r\n    }\r\n\r\n    function sellAllAmountBuyEth(\r\n        OtcInterface otc,\r\n        TokenInterface payToken, \r\n        uint payAmt, \r\n        TokenInterface wethToken, \r\n        uint minBuyAmt\r\n    ) public returns (uint) {\r\n        require(payToken.transferFrom(msg.sender, this, payAmt));\r\n        if (payToken.allowance(this, otc) < payAmt) {\r\n            payToken.approve(otc, uint(-1));\r\n        }\r\n        uint wethAmt = otc.sellAllAmount(payToken, payAmt, wethToken, minBuyAmt);\r\n        (uint feeAmt, uint wethAmtRemainder) = fees.takeFee(wethAmt, wethToken);\r\n        unwrapAndSend(wethToken, owner, feeAmt); /* fee is taken in ETH */ \r\n        unwrapAndSend(wethToken, msg.sender, wethAmtRemainder);\r\n        return wethAmtRemainder;\r\n    }\r\n\r\n    function buyAllAmount(\r\n        OtcInterface otc, \r\n        TokenInterface buyToken, \r\n        uint buyAmt, \r\n        TokenInterface payToken, \r\n        uint maxPayAmt\r\n    ) public returns (uint payAmt) {\r\n        uint payAmtNow = otc.getPayAmount(payToken, buyToken, buyAmt);\r\n        require(payAmtNow <= maxPayAmt);\r\n        require(payToken.transferFrom(msg.sender, this, payAmtNow));\r\n        if (payToken.allowance(this, otc) < payAmtNow) {\r\n            payToken.approve(otc, uint(-1));\r\n        } \r\n        payAmt = otc.buyAllAmount(buyToken, buyAmt, payToken, payAmtNow);\r\n        buyAmt = min(buyAmt, buyToken.balanceOf(this));\r\n        /* To avoid rounding issues we check the minimum value */\r\n        (uint feeAmt, uint buyAmtRemainder) = fees.takeFee(buyAmt, buyToken);\r\n        require(buyToken.transfer(owner, feeAmt)); /* fee is taken */\r\n        require(buyToken.transfer(msg.sender, buyAmtRemainder)); \r\n    }\r\n\r\n    function buyAllAmountPayEth(\r\n        OtcInterface otc, \r\n        TokenInterface buyToken, \r\n        uint buyAmt, \r\n        TokenInterface wethToken\r\n    ) public payable returns (uint wethAmt) {\r\n        /* In this case client needs to send more ETH than a estimated \r\n           value, then contract will send back the rest */\r\n        wethToken.deposit.value(msg.value)();\r\n        if (wethToken.allowance(this, otc) < msg.value) {\r\n            wethToken.approve(otc, uint(-1));\r\n        }\r\n        wethAmt = otc.buyAllAmount(buyToken, buyAmt, wethToken, msg.value);\r\n        buyAmt = min(buyAmt, buyToken.balanceOf(this));\r\n        /* To avoid rounding issues we check the minimum value */\r\n        (uint feeAmt, uint buyAmtRemainder) = fees.takeFee(buyAmt, buyToken); \r\n        require(buyToken.transfer(owner, feeAmt)); /* fee is taken */\r\n        require(buyToken.transfer(msg.sender, buyAmtRemainder)); \r\n        unwrapAndSend(wethToken, msg.sender, sub(msg.value, wethAmt)); /* return leftover eth */\r\n    }\r\n\r\n    function buyAllAmountBuyEth(\r\n        OtcInterface otc, \r\n        TokenInterface wethToken, \r\n        uint wethAmt, \r\n        TokenInterface payToken, \r\n        uint maxPayAmt\r\n    ) public returns (uint payAmt) {\r\n        uint payAmtNow = otc.getPayAmount(payToken, wethToken, wethAmt);\r\n        require(payAmtNow <= maxPayAmt);\r\n        require(payToken.transferFrom(msg.sender, this, payAmtNow));\r\n        if (payToken.allowance(this, otc) < payAmtNow) {\r\n            payToken.approve(otc, uint(-1));\r\n        }\r\n        payAmt = otc.buyAllAmount(wethToken, wethAmt, payToken, payAmtNow);\r\n        (uint feeAmt, uint wethAmtRemainder) = fees.takeFee(wethAmt, wethToken);\r\n        unwrapAndSend(wethToken, owner, feeAmt);\r\n        unwrapAndSend(wethToken, msg.sender, wethAmtRemainder);\r\n    }\r\n\r\n    function() public payable {\r\n    /* fallback function. Revert ensures no ETH is sent to the contract by accident */\r\n         revert(); \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"otc\",\"type\":\"address\"},{\"name\":\"payToken\",\"type\":\"address\"},{\"name\":\"payAmt\",\"type\":\"uint256\"},{\"name\":\"wethToken\",\"type\":\"address\"},{\"name\":\"minBuyAmt\",\"type\":\"uint256\"}],\"name\":\"sellAllAmountBuyEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"otc\",\"type\":\"address\"},{\"name\":\"payToken\",\"type\":\"address\"},{\"name\":\"payAmt\",\"type\":\"uint256\"},{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"minBuyAmt\",\"type\":\"uint256\"}],\"name\":\"sellAllAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"otc\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"name\":\"payToken\",\"type\":\"address\"},{\"name\":\"maxPayAmt\",\"type\":\"uint256\"}],\"name\":\"buyAllAmount\",\"outputs\":[{\"name\":\"payAmt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fees\",\"type\":\"address\"}],\"name\":\"setFeeAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"otc\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"name\":\"wethToken\",\"type\":\"address\"}],\"name\":\"buyAllAmountPayEth\",\"outputs\":[{\"name\":\"wethAmt\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"otc\",\"type\":\"address\"},{\"name\":\"wethToken\",\"type\":\"address\"},{\"name\":\"buyToken\",\"type\":\"address\"},{\"name\":\"minBuyAmt\",\"type\":\"uint256\"}],\"name\":\"sellAllAmountPayEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTokenTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"otc\",\"type\":\"address\"},{\"name\":\"wethToken\",\"type\":\"address\"},{\"name\":\"wethAmt\",\"type\":\"uint256\"},{\"name\":\"payToken\",\"type\":\"address\"},{\"name\":\"maxPayAmt\",\"type\":\"uint256\"}],\"name\":\"buyAllAmountBuyEth\",\"outputs\":[{\"name\":\"payAmt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fees\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]","ContractName":"OasisMonetizedProxy","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f57228ebf15cdc1c42573481c398e15fd29561e4","Library":"","SwarmSource":"bzzr://0da6a7baff9d10f1984cbd6a48864e4ae53b9ff272e4e6c252449a58fd318383"}]}