{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract RTCoin {\r\n    using SafeMath for uint256;\r\n    \r\n\taddress public owner;\r\n    address public saleAgent;\r\n    uint256 public totalSupply;\r\n\tstring public name;\r\n\tuint8 public decimals;\r\n\tstring public symbol;\r\n\tbool private allowEmission = true;\r\n\tmapping (address => uint256) balances;\r\n    \r\n    \r\n    function RTCoin(string _name, string _symbol, uint8 _decimals) public {\r\n\t\tdecimals = _decimals;\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\towner = msg.sender;\r\n\t}\r\n\t\r\n\t\r\n    function changeSaleAgent(address newSaleAgent) public onlyOwner {\r\n        require (newSaleAgent!=address(0));\r\n        uint256 tokenAmount = balances[saleAgent];\r\n        if (tokenAmount>0) {\r\n            balances[newSaleAgent] = balances[newSaleAgent].add(tokenAmount);\r\n            balances[saleAgent] = balances[saleAgent].sub(tokenAmount);\r\n            Transfer(saleAgent, newSaleAgent, tokenAmount);\r\n        }\r\n        saleAgent = newSaleAgent;\r\n    }\r\n\t\r\n\t\r\n\tfunction emission(uint256 amount) public onlyOwner {\r\n\t    require(allowEmission);\r\n\t    require(saleAgent!=address(0));\r\n\t    totalSupply = amount * (uint256(10) ** decimals);\r\n\t\tbalances[saleAgent] = totalSupply;\r\n\t\tTransfer(0x0, saleAgent, totalSupply);\r\n\t\tallowEmission = false;\r\n\t}\r\n    \r\n    \r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n        address burner;\r\n        if (msg.sender==owner)\r\n            burner = saleAgent;\r\n        else\r\n            burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n     \r\n    event Burn(address indexed burner, uint indexed value);\r\n\t\r\n\t\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\t\r\n\t\r\n\tfunction transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        owner = newOwner; \r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n\t\r\n\tevent Transfer(\r\n\t\taddress indexed _from,\r\n\t\taddress indexed _to,\r\n\t\tuint _value\r\n\t);\r\n}\r\n\r\ncontract Crowdsale {\r\n    \r\n    using SafeMath for uint256;\r\n    address fundsWallet;\r\n    RTCoin public token;\r\n    address public owner;\r\n\tbool public open = false;\r\n    uint256 public tokenLimit;\r\n    \r\n    uint256 public rate = 20000; //значение для pre ICO, 0.00005 ETH = 1 RTC \r\n    \r\n    \r\n    function Crowdsale(address _fundsWallet, address tokenAddress, \r\n                       uint256 _rate, uint256 _tokenLimit) public {\r\n        fundsWallet = _fundsWallet;\r\n        token = RTCoin(tokenAddress);\r\n        rate = _rate;\r\n        owner = msg.sender;\r\n        tokenLimit = _tokenLimit * (uint256(10) ** token.decimals());\r\n    }\r\n    \r\n    \r\n    function() external isOpen payable {\r\n        require(tokenLimit>0);\r\n        fundsWallet.transfer(msg.value);\r\n        uint256 tokens = calculateTokenAmount(msg.value);\r\n        token.transfer(msg.sender, tokens);\r\n        tokenLimit = tokenLimit.sub(tokens);\r\n    }\r\n  \r\n    \r\n    function changeFundAddress(address newAddress) public onlyOwner {\r\n        require(newAddress != address(0));\r\n        fundsWallet = newAddress;\r\n\t}\r\n\t\r\n\t\r\n    function changeRate(uint256 newRate) public onlyOwner {\r\n        require(newRate>0);\r\n        rate = newRate;\r\n    }\r\n    \r\n    \r\n    function calculateTokenAmount(uint256 weiAmount) public constant returns(uint256) {\r\n        if (token.decimals()!=18){\r\n            uint256 tokenAmount = weiAmount.mul(rate).div(uint256(10) ** (18-token.decimals())); \r\n            return tokenAmount;\r\n        }\r\n        else return weiAmount.mul(rate);\r\n    }\r\n    \r\n    function transferTo(address _to, uint256 _value) public onlyOwner returns (bool) {\r\n        require(tokenLimit>0);\r\n        token.transfer(_to, _value);\r\n        tokenLimit = tokenLimit.sub(_value);\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    \r\n    function allowSale() public onlyOwner {\r\n        open = true;\r\n    }\r\n    \r\n    \r\n    function disallowSale() public onlyOwner {\r\n        open = false;\r\n    }\r\n    \r\n    modifier isOpen() {\r\n        require(open == true);\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disallowSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeFundAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fundsWallet\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_tokenLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f4ec5566b1597f3c63af928ee95f77510ebb95700000000000000000000000003d9ef820804c88f2d2cd86d15f0c189600336bed00000000000000000000000000000000000000000000000000000000000007d00000000000000000000000000000000000000000000000000000000001312d00","Library":"","SwarmSource":"bzzr://e7fdd5594d218c114174f2563ec34fa2884fced3b417d48da659c55dc60124f9"}]}