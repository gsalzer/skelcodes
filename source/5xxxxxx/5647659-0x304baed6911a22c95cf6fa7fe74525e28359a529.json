{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// Created for conduction of leadrex ICO - https://leadrex.io/\r\n// Copying in whole or in part is prohibited.\r\n// Authors: https://loftchain.io/\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient {\r\n    function receiveApproval(\r\n        address _from,\r\n        uint256 _value,\r\n        address _token,\r\n        bytes _extraData\r\n    ) external;\r\n}\r\n\r\ncontract LDX is owned {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"LeadRex\";\r\n    string public symbol = \"LDX\";\r\n    uint8 public decimals = 18;\r\n    uint256 DEC = 10 ** uint256(decimals);\r\n    uint256 public totalSupply = 135900000 * DEC;\r\n\r\n    enum State { Active, Refunding, Closed }\r\n    State public state;\r\n\r\n    struct Round {\r\n        uint256 _softCap;\r\n        uint256 _hardCap;\r\n        address _wallet;\r\n        uint256 _tokensForRound;\r\n        uint256 _rate;\r\n        uint256 _minValue;\r\n        uint256 _bonus1;\r\n        uint256 _bonus4;\r\n        uint256 _bonus8;\r\n        uint256 _bonus15;\r\n        uint256 _number;\r\n    }\r\n\r\n    struct Deposited {\r\n        mapping(address => uint256) _deposited;\r\n    }\r\n\r\n    mapping(uint => Round) public roundInfo;\r\n    mapping(uint => Deposited) allDeposited;\r\n\r\n    Round public currentRound;\r\n\r\n    constructor() public {\r\n        roundInfo[0] = Round(\r\n            250 * 1 ether,\r\n            770 * 1 ether,\r\n            0x950D69e56F4dFE84D0f590E0f9F1BdC6d60A46A9,\r\n            18600000 * DEC,\r\n            16200,\r\n            0.1 ether,\r\n            15,\r\n            20,\r\n            25,\r\n            30,\r\n            0\r\n        );\r\n        roundInfo[1] = Round(\r\n            770 * 1 ether,\r\n            1230 * 1 ether,\r\n            0x792Cf510b2082c3287C80ba3bb1616D13d2525E3,\r\n            21000000 * DEC,\r\n            13000,\r\n            0.1 ether,\r\n            10,\r\n            15,\r\n            20,\r\n            25,\r\n            1\r\n        );\r\n        roundInfo[2] = Round(\r\n            1230 * 1 ether,\r\n            1850 * 1 ether,\r\n            0x2382Caf2cc1122b1f13EB10155c5C7c69b88975f,\r\n            19000000 * DEC,\r\n            8200,\r\n            0.05 ether,\r\n            5,\r\n            10,\r\n            15,\r\n            20,\r\n            2\r\n        );\r\n        roundInfo[3] = Round(\r\n            1850 * 1 ether,\r\n            4620 * 1 ether,\r\n            0x57B1fDfE53756e71b1388EcE6cB7C045185BC71C,\r\n            25000000 * DEC,\r\n            4333,\r\n            0.05 ether,\r\n            5,\r\n            10,\r\n            15,\r\n            20,\r\n            3\r\n        );\r\n        roundInfo[4] = Round(\r\n            4620 * 1 ether,\r\n            10700 * 1 ether,\r\n            0xA9764d8eb302d6a3D363104B94C657849273D5CE,\r\n            26000000 * DEC,\r\n            2000,\r\n            0.05 ether,\r\n            5,\r\n            10,\r\n            15,\r\n            20,\r\n            4\r\n        );\r\n\r\n        balanceOf[msg.sender] = totalSupply;\r\n\r\n        state = State.Active;\r\n\r\n        currentRound = roundInfo[0];\r\n    }\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event RefundsEnabled();\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    modifier transferredIsOn {\r\n        require(state != State.Active);\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) transferredIsOn public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) transferredIsOn public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require((_value == 0) || (allowance[msg.sender][_spender] == 0));\r\n\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n    public\r\n    returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function transferOwner(address _to, uint256 _value) onlyOwner public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to].add(_value) >= balanceOf[_to]);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function buyTokens(address beneficiary) payable public {\r\n        require(state == State.Active);\r\n        require(msg.value >= currentRound._minValue);\r\n        require(currentRound._rate > 0);\r\n        require(address(this).balance <= currentRound._hardCap);\r\n        uint amount = currentRound._rate.mul(msg.value);\r\n        uint bonus = getBonusPercent(msg.value);\r\n        amount = amount.add(amount.mul(bonus).div(100));\r\n        require(amount <= currentRound._tokensForRound);\r\n\r\n        _transfer(owner, msg.sender, amount);\r\n\r\n        currentRound._tokensForRound = currentRound._tokensForRound.sub(amount);\r\n        uint _num = currentRound._number;\r\n        allDeposited[_num]._deposited[beneficiary] = allDeposited[_num]._deposited[beneficiary].add(msg.value);\r\n    }\r\n\r\n    function() external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function getBonusPercent(uint _value) internal view returns(uint _bonus) {\r\n        if (_value >= 15 ether) {\r\n            return currentRound._bonus15;\r\n        } else if (_value >= 8 ether) {\r\n            return currentRound._bonus8;\r\n        } else if (_value >= 4 ether) {\r\n            return currentRound._bonus4;\r\n        } else if (_value >= 1 ether) {\r\n            return currentRound._bonus1;\r\n        } else return 0;\r\n    }\r\n\r\n    function finishRound() onlyOwner public {\r\n        if (address(this).balance < currentRound._softCap) {\r\n            enableRefunds();\r\n        } else {\r\n            currentRound._wallet.transfer(address(this).balance);\r\n            uint256 _nextRound = currentRound._number + 1;\r\n            uint256 _burnTokens = currentRound._tokensForRound;\r\n            balanceOf[owner] = balanceOf[owner].sub(_burnTokens);\r\n            if (_nextRound < 5) {\r\n                currentRound = roundInfo[_nextRound];\r\n            } else {\r\n                state = State.Closed;\r\n            }\r\n        }\r\n    }\r\n\r\n    function enableRefunds() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Refunding;\r\n        emit RefundsEnabled();\r\n    }\r\n\r\n    function refund(address investor) public {\r\n        require(state == State.Refunding);\r\n        require(allDeposited[currentRound._number]._deposited[investor] > 0);\r\n        uint256 depositedValue = allDeposited[currentRound._number]._deposited[investor];\r\n        allDeposited[currentRound._number]._deposited[investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        emit Refunded(investor, depositedValue);\r\n    }\r\n\r\n    function withdraw(uint amount) onlyOwner public returns(bool) {\r\n        require(amount <= address(this).balance);\r\n        owner.transfer(amount);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundInfo\",\"outputs\":[{\"name\":\"_softCap\",\"type\":\"uint256\"},{\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokensForRound\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_minValue\",\"type\":\"uint256\"},{\"name\":\"_bonus1\",\"type\":\"uint256\"},{\"name\":\"_bonus4\",\"type\":\"uint256\"},{\"name\":\"_bonus8\",\"type\":\"uint256\"},{\"name\":\"_bonus15\",\"type\":\"uint256\"},{\"name\":\"_number\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"name\":\"_softCap\",\"type\":\"uint256\"},{\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokensForRound\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_minValue\",\"type\":\"uint256\"},{\"name\":\"_bonus1\",\"type\":\"uint256\"},{\"name\":\"_bonus4\",\"type\":\"uint256\"},{\"name\":\"_bonus8\",\"type\":\"uint256\"},{\"name\":\"_bonus15\",\"type\":\"uint256\"},{\"name\":\"_number\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RefundsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"}]","ContractName":"LDX","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c6a6187bfde7c28e0e59060089337cbb06dcd3895b57c05ea1a72999e66f831b"}]}