{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n    public\r\n    auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n    public\r\n    auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  guy,\r\n        bytes32  indexed  foo,\r\n        bytes32  indexed  bar,\r\n        uint              wad,\r\n        bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\ncontract DSStop is DSNote, DSAuth {\r\n    bool public stopped;\r\n\r\n    modifier stoppable {\r\n        require(!stopped);\r\n        _;\r\n    }\r\n    function stop() public auth note {\r\n        stopped = true;\r\n    }\r\n    function start() public auth note {\r\n        stopped = false;\r\n    }\r\n\r\n}\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant public returns (uint256 supply);\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant public returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\ncontract Coin is ERC20, DSStop {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    uint256 internal c_totalSupply;\r\n    mapping(address => uint256) internal c_balances;\r\n    mapping(address => mapping(address => uint256)) internal c_approvals;\r\n\r\n    function init(uint256 token_supply, string token_name, string token_symbol) internal {\r\n        c_balances[msg.sender] = token_supply;\r\n        c_totalSupply = token_supply;\r\n        name = token_name;\r\n        symbol = token_symbol;\r\n    }\r\n\r\n    function() public {\r\n        assert(false);\r\n    }\r\n\r\n    function setName(string _name) auth public {\r\n        name = _name;\r\n    }\r\n\r\n    function totalSupply() constant public returns (uint256) {\r\n        return c_totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n        return c_balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public stoppable returns (bool) {\r\n        // uint never less than 0. The negative number will become to a big positive number\r\n        require(_value < c_totalSupply);\r\n\r\n        c_approvals[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\r\n        return c_approvals[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract FreezerAuthority is DSAuthority {\r\n    address[] internal c_freezers;\r\n    // sha3(\"setFreezing(address,uint256,uint256,uint8)\").slice(0,10)\r\n    bytes4 constant setFreezingSig = bytes4(0x51c3b8a6);\r\n    // sha3(\"transferAndFreezing(address,uint256,uint256,uint256,uint8)\").slice(0,10)\r\n    bytes4 constant transferAndFreezingSig = bytes4(0xb8a1fdb6);\r\n\r\n    function canCall(address caller, address, bytes4 sig) public view returns (bool) {\r\n        // freezer can call setFreezing, transferAndFreezing\r\n        if (isFreezer(caller) && sig == setFreezingSig || sig == transferAndFreezingSig) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function addFreezer(address freezer) public {\r\n        int i = indexOf(c_freezers, freezer);\r\n        if (i < 0) {\r\n            c_freezers.push(freezer);\r\n        }\r\n    }\r\n\r\n    function removeFreezer(address freezer) public {\r\n        int index = indexOf(c_freezers, freezer);\r\n        if (index >= 0) {\r\n            uint i = uint(index);\r\n            while (i < c_freezers.length - 1) {\r\n                c_freezers[i] = c_freezers[i + 1];\r\n            }\r\n            c_freezers.length--;\r\n        }\r\n    }\r\n\r\n    /** Finds the index of a given value in an array. */\r\n    function indexOf(address[] values, address value) internal pure returns (int) {\r\n        uint i = 0;\r\n        while (i < values.length) {\r\n            if (values[i] == value) {\r\n                return int(i);\r\n            }\r\n            i++;\r\n        }\r\n        return int(- 1);\r\n    }\r\n\r\n    function isFreezer(address addr) public constant returns (bool) {\r\n        return indexOf(c_freezers, addr) >= 0;\r\n    }\r\n}\r\n\r\ncontract LemoCoin is Coin, DSMath {\r\n    // freezing struct\r\n    struct FreezingNode {\r\n        uint end_stamp;\r\n        uint num_lemos;\r\n        uint8 freezing_type;\r\n    }\r\n\r\n    // freezing account list\r\n    mapping(address => FreezingNode[]) internal c_freezing_list;\r\n\r\n    constructor(uint256 token_supply, string token_name, string token_symbol) public {\r\n        init(token_supply, token_name, token_symbol);\r\n        setAuthority(new FreezerAuthority());\r\n    }\r\n\r\n    function addFreezer(address freezer) auth public {\r\n        FreezerAuthority(authority).addFreezer(freezer);\r\n    }\r\n\r\n    function removeFreezer(address freezer) auth public {\r\n        FreezerAuthority(authority).removeFreezer(freezer);\r\n    }\r\n\r\n    event ClearExpiredFreezingEvent(address indexed addr);\r\n    event SetFreezingEvent(address indexed addr, uint end_stamp, uint num_lemos, uint8 indexed freezing_type);\r\n\r\n    function clearExpiredFreezing(address addr) public {\r\n        FreezingNode[] storage nodes = c_freezing_list[addr];\r\n        uint length = nodes.length;\r\n\r\n        // find first expired index\r\n        uint left = 0;\r\n        while (left < length) {\r\n            // not freezing any more\r\n            if (nodes[left].end_stamp <= block.timestamp) {\r\n                break;\r\n            }\r\n            left++;\r\n        }\r\n\r\n        // next frozen index\r\n        uint right = left + 1;\r\n        while (left < length && right < length) {\r\n            // still freezing\r\n            if (nodes[right].end_stamp > block.timestamp) {\r\n                nodes[left] = nodes[right];\r\n                left++;\r\n            }\r\n            right++;\r\n        }\r\n        if (length != left) {\r\n            nodes.length = left;\r\n            emit ClearExpiredFreezingEvent(addr);\r\n        }\r\n    }\r\n\r\n    function validBalanceOf(address addr) constant public returns (uint) {\r\n        FreezingNode[] memory nodes = c_freezing_list[addr];\r\n        uint length = nodes.length;\r\n        uint total_lemos = balanceOf(addr);\r\n\r\n        for (uint i = 0; i < length; ++i) {\r\n            if (nodes[i].end_stamp > block.timestamp) {\r\n                total_lemos = sub(total_lemos, nodes[i].num_lemos);\r\n            }\r\n        }\r\n\r\n        return total_lemos;\r\n    }\r\n\r\n    function freezingBalanceNumberOf(address addr) constant public returns (uint) {\r\n        return c_freezing_list[addr].length;\r\n    }\r\n\r\n    function freezingBalanceInfoOf(address addr, uint index) constant public returns (uint, uint, uint8) {\r\n        return (c_freezing_list[addr][index].end_stamp, c_freezing_list[addr][index].num_lemos, uint8(c_freezing_list[addr][index].freezing_type));\r\n    }\r\n\r\n    function setFreezing(address addr, uint end_stamp, uint num_lemos, uint8 freezing_type) auth stoppable public {\r\n        require(block.timestamp < end_stamp);\r\n        // uint never less than 0. The negative number will become to a big positive number\r\n        require(num_lemos < c_totalSupply);\r\n        clearExpiredFreezing(addr);\r\n        uint valid_balance = validBalanceOf(addr);\r\n        require(valid_balance >= num_lemos);\r\n\r\n        FreezingNode memory node = FreezingNode(end_stamp, num_lemos, freezing_type);\r\n        c_freezing_list[addr].push(node);\r\n\r\n        emit SetFreezingEvent(addr, end_stamp, num_lemos, freezing_type);\r\n    }\r\n\r\n    function transferAndFreezing(address _to, uint256 _value, uint256 freeze_amount, uint end_stamp, uint8 freezing_type) auth stoppable public returns (bool) {\r\n        // uint never less than 0. The negative number will become to a big positive number\r\n        require(_value < c_totalSupply);\r\n        require(freeze_amount <= _value);\r\n\r\n        transfer(_to, _value);\r\n        setFreezing(_to, end_stamp, freeze_amount, freezing_type);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) stoppable public returns (bool) {\r\n        // uint never less than 0. The negative number will become to a big positive number\r\n        require(_value < c_totalSupply);\r\n        clearExpiredFreezing(msg.sender);\r\n        uint from_lemos = validBalanceOf(msg.sender);\r\n\r\n        require(from_lemos >= _value);\r\n\r\n        c_balances[msg.sender] = sub(c_balances[msg.sender], _value);\r\n        c_balances[_to] = add(c_balances[_to], _value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) stoppable public returns (bool) {\r\n        // uint never less than 0. The negative number will become to a big positive number\r\n        require(_value < c_totalSupply);\r\n        require(c_approvals[_from][msg.sender] >= _value);\r\n\r\n        clearExpiredFreezing(_from);\r\n        uint from_lemos = validBalanceOf(_from);\r\n\r\n        require(from_lemos >= _value);\r\n\r\n        c_approvals[_from][msg.sender] = sub(c_approvals[_from][msg.sender], _value);\r\n        c_balances[_from] = sub(c_balances[_from], _value);\r\n        c_balances[_to] = add(c_balances[_to], _value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"freezingBalanceNumberOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"freezer\",\"type\":\"address\"}],\"name\":\"removeFreezer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"end_stamp\",\"type\":\"uint256\"},{\"name\":\"num_lemos\",\"type\":\"uint256\"},{\"name\":\"freezing_type\",\"type\":\"uint8\"}],\"name\":\"setFreezing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"freezer\",\"type\":\"address\"}],\"name\":\"addFreezer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"freezingBalanceInfoOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"freeze_amount\",\"type\":\"uint256\"},{\"name\":\"end_stamp\",\"type\":\"uint256\"},{\"name\":\"freezing_type\",\"type\":\"uint8\"}],\"name\":\"transferAndFreezing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"validBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"clearExpiredFreezing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token_supply\",\"type\":\"uint256\"},{\"name\":\"token_name\",\"type\":\"string\"},{\"name\":\"token_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ClearExpiredFreezingEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"end_stamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"num_lemos\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"freezing_type\",\"type\":\"uint8\"}],\"name\":\"SetFreezingEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"LemoCoin","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000052b7d2dcc80cd2e40000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000044c656d6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044c454d4f00000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://5cd2ebc2dd811a0e648802871ef8bc856f1167714dfacb1457b00807357ce3b9"}]}