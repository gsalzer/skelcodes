{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) internal balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken, Ownable {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public onlyOwner {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\n\r\ncontract WePoolToken is BurnableToken {\r\n\r\n    string public constant name = \"WePool\";\r\n    string public constant symbol = \"WPL\";\r\n    uint32 public constant decimals = 18;\r\n\r\n    function WePoolToken() public {\r\n        totalSupply = 200000000 * 1E18; // 200 million tokens\r\n        balances[owner] = totalSupply;  // owner is crowdsale\r\n    }\r\n}\r\n\r\n\r\ncontract WePoolCrowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    uint256 public hardCap;\r\n    uint256 public reserved;\r\n\r\n    uint256 public tokensSold; // amount of bought tokens\r\n    uint256 public weiRaised; // total investments\r\n\r\n    uint256 public minPurchase;\r\n    uint256 public preIcoRate; // how many token units a buyer gets per wei\r\n    uint256 public icoRate;\r\n\r\n    address public wallet; // for withdrawal\r\n    address public tokenWallet; // for reserving tokens\r\n\r\n    uint256 public icoStartTime;\r\n    uint256 public preIcoStartTime;\r\n\r\n\r\n    address[] public investorsArray;\r\n    mapping (address => uint256) public investors; //address -> amount\r\n\r\n\r\n    WePoolToken public token;\r\n     \r\n    modifier icoEnded() {\r\n        require(now > (icoStartTime + 30 days));\r\n        _;        \r\n    }\r\n\r\n    /**\r\n     * @dev Constructor to WePoolCrowdsale contract\r\n     */\r\n    function WePoolCrowdsale(uint256 _preIcoStartTime, uint256 _icoStartTime) public {\r\n        require(_preIcoStartTime > now);\r\n        require(_icoStartTime > _preIcoStartTime + 7 days);\r\n        preIcoStartTime = _preIcoStartTime;\r\n        icoStartTime = _icoStartTime;\r\n\r\n        minPurchase = 0.1 ether;\r\n        preIcoRate = 0.00008 ether;\r\n        icoRate = 0.0001 ether;\r\n\r\n        hardCap = 200000000 * 1E18; // 200 million tokens * decimals\r\n\r\n        token = new WePoolToken();\r\n\r\n        reserved = hardCap.mul(35).div(100);\r\n        hardCap = hardCap.sub(reserved); // tokens left for sale (200m - 70 = 130)\r\n\r\n        wallet = owner;\r\n        tokenWallet = owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Function set new wallet address. Wallet is used for withdrawal\r\n     * @param newWallet Address of new wallet.\r\n     */\r\n    function changeWallet(address newWallet) public onlyOwner {\r\n        require(newWallet != address(0));\r\n        wallet = newWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Function set new token wallet address\r\n     * @dev Token wallet is used for reserving tokens for founders\r\n     * @param newAddress Address of new Token Wallet\r\n     */\r\n    function changeTokenWallet(address newAddress) public onlyOwner {\r\n        require(newAddress != address(0));\r\n        tokenWallet = newAddress;\r\n    }\r\n\r\n    /**\r\n     @dev Function set new preIco token price\r\n     @param newRate New preIco price per token\r\n     */\r\n    function changePreIcoRate(uint256 newRate) public onlyOwner {\r\n        require(newRate > 0);\r\n        preIcoRate = newRate;\r\n    }\r\n\r\n    /**\r\n     @dev Function set new Ico token price\r\n     @param newRate New Ico price per token\r\n     */\r\n    function changeIcoRate(uint256 newRate) public onlyOwner {\r\n        require(newRate > 0);\r\n        icoRate = newRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Function set new preIco start time\r\n     * @param newTime New preIco start time\r\n     */\r\n    function changePreIcoStartTime(uint256 newTime) public onlyOwner {\r\n        require(now < preIcoStartTime);\r\n        require(newTime > now);\r\n        require(icoStartTime > newTime + 7 days);\r\n        preIcoStartTime = newTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Function set new Ico start time\r\n     * @param newTime New Ico start time\r\n     */\r\n    function changeIcoStartTime(uint256 newTime) public onlyOwner {\r\n        require(now < icoStartTime);\r\n        require(newTime > now);\r\n        require(newTime > preIcoStartTime + 7 days);\r\n        icoStartTime = newTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Function burn all unsold Tokens (balance of crowdsale)\r\n     * @dev Ico should be ended\r\n     */\r\n    function burnUnsoldTokens() public onlyOwner icoEnded {\r\n        token.burn(token.balanceOf(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Function transfer all raised money to the founders wallet\r\n     * @dev Ico should be ended\r\n     */\r\n    function withdrawal() public onlyOwner icoEnded {\r\n        wallet.transfer(this.balance);    \r\n    }\r\n\r\n    /**\r\n     * @dev Function reserve tokens for founders and bounty program\r\n     * @dev Ico should be ended\r\n     */\r\n    function getReservedTokens() public onlyOwner icoEnded {\r\n        require(reserved > 0);\r\n        uint256 amount = reserved;\r\n        reserved = 0;\r\n        token.transfer(tokenWallet, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function\r\n     */\r\n    function() public payable {\r\n        buyTokens();\r\n    }\r\n\r\n    /**\r\n     * @dev Function for investments.\r\n     */\r\n    function buyTokens() public payable {\r\n        address inv = msg.sender;\r\n        \r\n        uint256 weiAmount = msg.value;\r\n        require(weiAmount >= minPurchase);\r\n\r\n        uint256 rate;\r\n        uint256 tokens;\r\n        uint256 cleanWei; // amount of wei to use for purchase excluding change and hardcap overflows\r\n        uint256 change;\r\n\r\n        if (now > preIcoStartTime && now < (preIcoStartTime + 7 days)) {\r\n            rate = preIcoRate;\r\n        } else if (now > icoStartTime && now < (icoStartTime + 30 days)) {\r\n            rate = icoRate;\r\n        }\r\n        require(rate > 0);\r\n    \r\n        tokens = (weiAmount.mul(1E18)).div(rate);\r\n\r\n        // check hardCap\r\n        if (tokensSold.add(tokens) > hardCap) {\r\n            tokens = hardCap.sub(tokensSold);\r\n            cleanWei = tokens.mul(rate).div(1E18);\r\n            change = weiAmount.sub(cleanWei);\r\n        } else {\r\n            cleanWei = weiAmount;\r\n        }\r\n\r\n        // check, if this investor already included\r\n        if (investors[inv] == 0) {\r\n            investorsArray.push(inv);\r\n            investors[inv] = tokens;\r\n        } else {\r\n            investors[inv] = investors[inv].add(tokens);\r\n        }\r\n\r\n        tokensSold = tokensSold.add(tokens);\r\n        weiRaised = weiRaised.add(cleanWei);\r\n\r\n        token.transfer(inv, tokens);\r\n\r\n        // send back change\r\n        if (change > 0) {\r\n            inv.transfer(change); \r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Function returns the number of investors.\r\n     * @return uint256 Number of investors.\r\n     */\r\n    function getInvestorsLength() public view returns(uint256) {\r\n        return investorsArray.length;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"changePreIcoStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorsArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeTokenWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getReservedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"changeIcoStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"changeIcoRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"changePreIcoRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_preIcoStartTime\",\"type\":\"uint256\"},{\"name\":\"_icoStartTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WePoolCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005bb16380000000000000000000000000000000000000000000000000000000005bbd4100","Library":"","SwarmSource":"bzzr://da27a60b3eb4a27ab88f3e23a4f83daa203ec880732453cb9581bedf95cf9cf8"}]}