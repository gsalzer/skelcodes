{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract TokenRecipient {\r\n  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; \r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ExtraHolderContract is TokenRecipient {\r\n  using SafeMath for uint;\r\n\r\n  /// @notice Map of recipients parts of total received tokens\r\n  /// @dev Should be in range of 1 to 10000 (1 is 0.01% and 10000 is 100%)\r\n  mapping(address => uint) public shares;\r\n\r\n  /// @notice Map of total values at moment of latest withdrawal per each recipient\r\n  mapping(address => uint) public totalAtWithdrawal;\r\n\r\n  /// @notice Address of the affilated token\r\n  /// @dev Should be defined at construction and no way to change in future\r\n  address public holdingToken;\r\n\r\n  /// @notice Total amount of received token on smart-contract\r\n  uint public totalReceived;\r\n\r\n  /// @notice Construction method of Extra Holding contract\r\n  /// @dev Arrays of recipients and their share parts should be equal and not empty\r\n  /// @dev Sum of all shares should be exact equal to 10000\r\n  /// @param _holdingToken is address of affilated contract\r\n  /// @param _recipients is array of recipients\r\n  /// @param _partions is array of recipients shares\r\n  function ExtraHolderContract(\r\n    address _holdingToken,\r\n    address[] _recipients,\r\n    uint[] _partions)\r\n  public\r\n  {\r\n    require(_holdingToken != address(0x0));\r\n    require(_recipients.length > 0);\r\n    require(_recipients.length == _partions.length);\r\n\r\n    uint ensureFullfield;\r\n\r\n    for(uint index = 0; index < _recipients.length; index++) {\r\n      // overflow check isn't required.. I suppose :D\r\n      ensureFullfield = ensureFullfield + _partions[index];\r\n      require(_partions[index] > 0);\r\n      require(_recipients[index] != address(0x0));\r\n\r\n      shares[_recipients[index]] = _partions[index];\r\n    }\r\n\r\n    holdingToken = _holdingToken;\r\n\r\n    // Require to setup exact 100% sum of partions\r\n    require(ensureFullfield == 10000);\r\n  }\r\n\r\n  /// @notice Method what should be called with external contract to receive tokens\r\n  /// @dev Will be call automaticly with a customized transfer method of DefaultToken (based on DefaultToken.sol)\r\n  /// @param _from is address of token sender\r\n  /// @param _value is total amount of sending tokens\r\n  /// @param _token is address of sending token\r\n  /// @param _extraData ...\r\n  function receiveApproval(\r\n    address _from, \r\n    uint256 _value,\r\n    address _token,\r\n    bytes _extraData) public\r\n  {\r\n    _extraData;\r\n    require(_token == holdingToken);\r\n\r\n    // Take tokens of fail with exception\r\n    ERC20(holdingToken).transferFrom(_from, address(this), _value);\r\n    totalReceived = totalReceived.add(_value);\r\n  }\r\n\r\n  /// @notice Method to withdraw shared part of received tokens for providen address\r\n  /// @dev Any address could fire method, but only for known recipient\r\n  /// @param _recipient address of recipient who should receive withdrawed tokens\r\n  function withdraw(\r\n    address _recipient)\r\n  public returns (bool) \r\n  {\r\n    require(shares[_recipient] > 0);\r\n    require(totalAtWithdrawal[_recipient] < totalReceived);\r\n\r\n    uint left = totalReceived.sub(totalAtWithdrawal[_recipient]);\r\n    uint share = left.mul(shares[_recipient]).div(10000);\r\n    totalAtWithdrawal[_recipient] = totalReceived;\r\n    ERC20(holdingToken).transfer(_recipient, share);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract AltExtraHolderContract is ExtraHolderContract {\r\n  address[] private altRecipients = [\r\n    // Transfer two percent of all ALT tokens to bounty program participants on the day of tokens issue.\r\n    // Final distribution will be done by our partner Bountyhive.io who will transfer coins from\r\n    // the provided wallet to all bounty hunters community.\r\n    address(0xd251D75064DacBC5FcCFca91Cb4721B163a159fc),\r\n    // Transfer thirty eight percent of all ALT tokens for future Network Growth and Team and Advisors remunerations.\r\n    address(0xAd089b3767cf58c7647Db2E8d9C049583bEA045A)\r\n  ];\r\n  uint[] private altPartions = [\r\n    500,\r\n    9500\r\n  ];\r\n\r\n  function AltExtraHolderContract(address _holdingToken)\r\n    ExtraHolderContract(_holdingToken, altRecipients, altPartions)\r\n    public\r\n  {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdingToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAtWithdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_holdingToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"AltExtraHolderContract","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008b2da472ddcd2aa76e70b86d026e65b176902941","Library":"","SwarmSource":"bzzr://2bb2e09a67237601c2ebf5baa849c891e3313ebaaffc3c9fa9915770d711280d"}]}