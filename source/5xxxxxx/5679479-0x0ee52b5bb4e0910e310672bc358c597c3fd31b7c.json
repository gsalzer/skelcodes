{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract GeneScience {\r\n\r\n    uint256 public randomSeed = 1;\r\n\r\n    function random() internal returns(uint256) {\r\n        uint256 randomValue = uint256(keccak256(block.timestamp, uint256(randomSeed * block.difficulty)));\r\n        randomSeed = uint256(randomValue * block.number);\r\n        return randomValue;\r\n    }\r\n\r\n    //基因种类\r\n    uint8 public geneKind = 8;\r\n\r\n    //合约拥有者\r\n    address public owner;\r\n\r\n    address public dogCore;\r\n\r\n    bool public isGeneScience = true;\r\n\r\n    function GeneScience(address _dogCore) public {\r\n        dogCore = _dogCore;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnerShip(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n    function setKittyCoreAddress(address newDogCore) public onlyOwner {\r\n        if (newDogCore != address(0)) {\r\n            dogCore = newDogCore;\r\n        }\r\n    }\r\n\r\n    function setGeneKind(uint8 value) public onlyOwner {\r\n        if (value >= 12) {\r\n            geneKind = 12;\r\n        } else if (value <= 1) {\r\n            geneKind = 1;\r\n        } else {\r\n            geneKind = value;\r\n        }\r\n    }\r\n\r\n    function convertGeneArray(uint256 gene) internal returns(uint8[48]) {\r\n        uint8[48] memory geneArray;\r\n        uint8 index = 0;\r\n        uint8 length = 4 * geneKind;\r\n        for (index = 0; index < length; index++) {\r\n            uint256 geneItem = gene % (2 ** uint256((5 * (index + 1))));\r\n            geneItem /= (2 ** uint256(5 * index));\r\n            geneArray[index] = uint8(geneItem);\r\n        }\r\n        for (index = 0; index < geneKind; index++) {\r\n            uint8 size = 4 * index;\r\n            uint8 probably = 12;\r\n            for (uint8 item = 3; item > 0; item--) {\r\n                uint8 randomValue = uint8(random() % 16);\r\n                if (randomValue >= probably) {\r\n                    (geneArray[size + item], geneArray[size + item - 1]) = (geneArray[size + item - 1], geneArray[size + item]);\r\n                }\r\n            }\r\n        }\r\n        return geneArray;\r\n    }\r\n\r\n    function convertGene(uint8[48] geneArray) internal view returns(uint256) {\r\n        uint256 gene = uint256(geneArray[0]);\r\n        uint8 length = 4 * geneKind;\r\n        for (uint8 index = 1; index < length; index++) {\r\n            uint256 geneItem = uint256(geneArray[index]);\r\n            gene += geneItem << (index * 5);\r\n        }\r\n        return gene;\r\n    }\r\n\r\n    function mixGenes(uint256 matronGene, uint256 sireGene, uint256 targetBlock) public returns (uint256) {\r\n        require(msg.sender == dogCore || msg.sender == owner);\r\n        \r\n        randomSeed = uint256(randomSeed * targetBlock);\r\n\r\n        uint8[48] memory matronGeneArray = convertGeneArray(matronGene);\r\n        uint8[48] memory sireGeneArray = convertGeneArray(sireGene);\r\n        uint8[48] memory babyGeneArray;\r\n\r\n        uint8 length = 4 * geneKind;\r\n        uint8 probably = 8;\r\n        for (uint8 index = 0; index < length; index++) {\r\n            uint8 randomValue = uint8(random() % 16);\r\n            if (randomValue < probably) {\r\n                babyGeneArray[index] = matronGeneArray[index];\r\n            } else {\r\n                babyGeneArray[index] = sireGeneArray[index];\r\n            }\r\n        }\r\n        return convertGene(babyGeneArray);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"randomSeed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"matronGene\",\"type\":\"uint256\"},{\"name\":\"sireGene\",\"type\":\"uint256\"},{\"name\":\"targetBlock\",\"type\":\"uint256\"}],\"name\":\"mixGenes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGeneScience\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDogCore\",\"type\":\"address\"}],\"name\":\"setKittyCoreAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"setGeneKind\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnerShip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"geneKind\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dogCore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dogCore\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"GeneScience","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000074cd98fbd837fe9200cf867f4b1ba9573c6d865e","Library":"","SwarmSource":"bzzr://5464ed661d6fcfb67a0c101bfd0c0d00aa2e577813f5ef3fe7820f2de7590eeb"}]}