{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private reentrancyLock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!reentrancyLock);\r\n    reentrancyLock = true;\r\n    _;\r\n    reentrancyLock = false;\r\n  }\r\n\r\n}\r\n\r\ncontract WillAlwaysLove is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    // ------------------------------------------------------------\r\n\r\n    uint256 public constant DEFAULT_INITIAL_COST = 0.025 ether;\r\n    uint256 public constant DEFAULT_LOCK_COST_PER_HOUR = 0.0006 ether; // 10 szabo per minute\r\n    uint256 public constant DEFAULT_MAX_LOCK_DURATION = 1 weeks;\r\n\r\n    uint256 public constant DEVELOPER_CUT = 25; // %\r\n\r\n    // ------------------------------------------------------------\r\n\r\n    struct LoveStory {\r\n        address owner;\r\n        bytes32 loverName;\r\n        bytes32 lovedOneName;\r\n        uint256 transferCost;\r\n        uint256 lockedUntil;\r\n        string data;\r\n    }\r\n\r\n    // ------------------------------------------------------------\r\n\r\n    uint256 public initialCost;\r\n    uint256 public lockCostPerHour;\r\n    uint256 public maxLockDuration;\r\n\r\n    mapping(bytes16 => LoveStory) private loveStories;\r\n    uint256 public loveStoriesCount;\r\n\r\n    mapping (address => uint256) private pendingWithdrawals;\r\n\r\n    // ------------------------------------------------------------\r\n\r\n    event LoveStoryCreated(\r\n        bytes16 id,\r\n        address owner,\r\n        bytes32 loverName,\r\n        bytes32 lovedOneName,\r\n        uint256 transferCost,\r\n        uint256 lockedUntil,\r\n        string data\r\n    );\r\n\r\n    event LoveStoryUpdated(\r\n        bytes16 id,\r\n        bytes32 loverName,\r\n        bytes32 lovedOneName,\r\n        string data\r\n    );\r\n\r\n    event LoveStoryTransferred(\r\n        bytes16 id,\r\n        address oldOwner,\r\n        address newOwner,\r\n        bytes32 newLoverName,\r\n        bytes32 newLovedOneName,\r\n        uint256 newtransferCost,\r\n        uint256 lockedUntil,\r\n        string data\r\n    );\r\n\r\n    event Withdrawal(\r\n        address withdrawer,\r\n        uint256 amount\r\n    );\r\n\r\n    // ------------------------------------------------------------\r\n\r\n    modifier onlyForUnregisteredId(bytes16 _id) {\r\n        require(!isIdRegistered(_id));\r\n        _;\r\n    }\r\n\r\n    modifier onlyForRegisteredId(bytes16 _id) {\r\n        require(isIdRegistered(_id));\r\n        _;\r\n    }\r\n\r\n    modifier onlyForValidId(bytes16 _id) {\r\n        require(isIdValid(_id));\r\n        _;\r\n    }\r\n\r\n    modifier onlyWithPendingWithdrawal() {\r\n        require(withdrawableAmount() != 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyLoveStoryOwner(bytes16 _id) {\r\n        require(loveStories[_id].owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    // ------------------------------------------------------------\r\n\r\n    constructor ()\r\n        public\r\n    {\r\n        initialCost = DEFAULT_INITIAL_COST;\r\n        lockCostPerHour = DEFAULT_LOCK_COST_PER_HOUR;\r\n        maxLockDuration = DEFAULT_MAX_LOCK_DURATION;\r\n    }\r\n\r\n    function ()\r\n        public\r\n        payable\r\n    {\r\n    }\r\n\r\n    function createCost(uint256 _lockDurationInHours)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return initialCost.add(lockCostPerHour.mul(_lockDurationInHours));\r\n    }\r\n\r\n    function createLoveStory(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName, uint256 _lockDurationInHours)\r\n        public\r\n        payable\r\n    {\r\n        createLoveStoryWithData(_id, _loverName, _lovedOneName, _lockDurationInHours, \"\");\r\n    }\r\n\r\n    function createLoveStoryWithData(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName, uint256 _lockDurationInHours, string _data)\r\n        public\r\n        payable\r\n        onlyForValidId(_id)\r\n        onlyForUnregisteredId(_id)\r\n    {\r\n        require(msg.value >= createCost(_lockDurationInHours));\r\n\r\n        _updateLoveStory(_id, _loverName, _lovedOneName, _lockDurationInHours, _data);\r\n        loveStoriesCount = loveStoriesCount.add(1);\r\n\r\n        pendingWithdrawals[owner] = pendingWithdrawals[owner].add(msg.value);\r\n\r\n        LoveStory storage _loveStory = loveStories[_id];\r\n\r\n        emit LoveStoryCreated (\r\n            _id,\r\n            _loveStory.owner,\r\n            _loveStory.loverName,\r\n            _loveStory.lovedOneName,\r\n            _loveStory.transferCost,\r\n            _loveStory.lockedUntil,\r\n            _loveStory.data\r\n        );\r\n    }\r\n\r\n    function updateLoveStory(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName)\r\n        public\r\n        onlyLoveStoryOwner(_id)\r\n    {\r\n        LoveStory storage _loveStory = loveStories[_id];\r\n\r\n        _loveStory.loverName = _loverName;\r\n        _loveStory.lovedOneName = _lovedOneName;\r\n\r\n        emit LoveStoryUpdated (\r\n            _id,\r\n            _loveStory.loverName,\r\n            _loveStory.lovedOneName,\r\n            _loveStory.data\r\n        );\r\n    }\r\n\r\n    function updateLoveStoryWithData(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName, string _data)\r\n        public\r\n        onlyLoveStoryOwner(_id)\r\n    {\r\n        LoveStory storage _loveStory = loveStories[_id];\r\n\r\n        _loveStory.loverName = _loverName;\r\n        _loveStory.lovedOneName = _lovedOneName;\r\n        _loveStory.data = _data;\r\n\r\n        emit LoveStoryUpdated (\r\n            _id,\r\n            _loveStory.loverName,\r\n            _loveStory.lovedOneName,\r\n            _loveStory.data\r\n        );\r\n    }\r\n\r\n    function transferCost(bytes16 _id, uint256 _lockDurationInHours)\r\n        public\r\n        view\r\n        onlyForValidId(_id)\r\n        onlyForRegisteredId(_id)\r\n        returns (uint256)\r\n    {\r\n        return loveStories[_id].transferCost.add(lockCostPerHour.mul(_lockDurationInHours));\r\n    }\r\n\r\n    function transferLoveStory(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName, uint256 _lockDurationInHours)\r\n        public\r\n        payable\r\n        onlyForValidId(_id)\r\n        onlyForRegisteredId(_id)\r\n    {\r\n        LoveStory storage _loveStory = loveStories[_id];\r\n        transferLoveStoryWithData(_id, _loverName, _lovedOneName, _lockDurationInHours, _loveStory.data);\r\n    }\r\n\r\n    function transferLoveStoryWithData(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName, uint256 _lockDurationInHours, string _data)\r\n        public\r\n        payable\r\n        onlyForValidId(_id)\r\n        onlyForRegisteredId(_id)\r\n    {\r\n        LoveStory storage _loveStory = loveStories[_id];\r\n        address _oldOwner = _loveStory.owner;\r\n\r\n        require(_oldOwner != msg.sender);\r\n        require(msg.value >= transferCost(_id, _lockDurationInHours));\r\n        require(now >= _loveStory.lockedUntil);\r\n\r\n        _updateLoveStory(_id, _loverName, _lovedOneName, _lockDurationInHours, _data);\r\n\r\n        uint256 _developerPayment = msg.value.mul(DEVELOPER_CUT).div(100);\r\n        uint256 _oldOwnerPayment = msg.value.sub(_developerPayment);\r\n\r\n        require(msg.value == _developerPayment.add(_oldOwnerPayment));\r\n\r\n        pendingWithdrawals[owner] = pendingWithdrawals[owner].add(_developerPayment);\r\n        pendingWithdrawals[_oldOwner] = pendingWithdrawals[_oldOwner].add(_oldOwnerPayment);\r\n\r\n        emit LoveStoryTransferred (\r\n            _id,\r\n            _oldOwner,\r\n            _loveStory.owner,\r\n            _loveStory.loverName,\r\n            _loveStory.lovedOneName,\r\n            _loveStory.transferCost,\r\n            _loveStory.lockedUntil,\r\n            _loveStory.data\r\n        );\r\n    }\r\n\r\n    function readLoveStory(bytes16 _id)\r\n        public\r\n        view\r\n        returns (address _loveStoryOwner, bytes32 _loverName, bytes32 _lovedOneName, uint256 _transferCost, uint256 _lockedUntil, string _data)\r\n    {\r\n        LoveStory storage _loveStory = loveStories[_id];\r\n\r\n        _loveStoryOwner = _loveStory.owner;\r\n        _loverName = _loveStory.loverName;\r\n        _lovedOneName = _loveStory.lovedOneName;\r\n        _transferCost = _loveStory.transferCost;\r\n        _lockedUntil = _loveStory.lockedUntil;\r\n        _data = _loveStory.data;\r\n    }\r\n\r\n    function isIdRegistered(bytes16 _id)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return loveStories[_id].owner != 0x0;\r\n    }\r\n\r\n    function isIdValid(bytes16 _id)\r\n        public\r\n        pure\r\n        returns (bool)\r\n    {\r\n        for (uint256 i = 0; i < 16; i = i.add(1))\r\n        {\r\n            if (i == 0)\r\n            {\r\n                // First char must be between 'a' and 'z'. It CAN'T be NULL.\r\n                if ( ! _isLowercaseLetter(_id[i]) )\r\n                {\r\n                    return false;\r\n                }\r\n            }\r\n            else if (i == 15)\r\n            {\r\n                // Last char must between 'a' and 'z'. It can also be a terminating NULL.\r\n                if ( !(_isLowercaseLetter(_id[i]) || _id[i] == 0) )\r\n                {\r\n                    return false;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // In-between chars must between 'a' and 'z' or '-'. Otherwise, they should be the unset bytes.\r\n                // The last part is verifiied by requiring that an in-bewteen char that is NULL\r\n                // must *also* be follwed by a NULL.\r\n                if ( !(_isLowercaseLetter(_id[i]) || (_id[i] == 0x2D && _id[i+1] != 0) || (_id[i] == _id[i+1] && _id[i] == 0)) )\r\n                {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdrawableAmount()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return pendingWithdrawals[msg.sender];\r\n    }\r\n\r\n    function withdraw()\r\n        external\r\n        nonReentrant\r\n        onlyWithPendingWithdrawal\r\n    {\r\n        uint256 amount = pendingWithdrawals[msg.sender];\r\n\r\n        pendingWithdrawals[msg.sender] = 0;\r\n\r\n        msg.sender.transfer(amount);\r\n\r\n        emit Withdrawal (\r\n            msg.sender,\r\n            amount\r\n        );\r\n    }\r\n\r\n    function withdrawableAmountFor(address _withdrawer)\r\n        public\r\n        view\r\n        onlyOwner\r\n        returns (uint256)\r\n    {\r\n        return pendingWithdrawals[_withdrawer];\r\n    }\r\n\r\n    function changeInitialCost(uint256 _initialCost)\r\n        external\r\n        onlyOwner\r\n    {\r\n        initialCost = _initialCost;\r\n    }\r\n\r\n    function changeLockCostPerHour(uint256 _lockCostPerHour)\r\n        external\r\n        onlyOwner\r\n    {\r\n        lockCostPerHour = _lockCostPerHour;\r\n    }\r\n\r\n    function changeMaxLockDuration(uint256 _maxLockDuration)\r\n        external\r\n        onlyOwner\r\n    {\r\n        maxLockDuration = _maxLockDuration;\r\n    }\r\n\r\n    // ------------------------------------------------------------\r\n\r\n    function _updateLoveStory(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName, uint256 _lockDurationInHours, string _data)\r\n        private\r\n    {\r\n        require(_lockDurationInHours * 1 hours <= maxLockDuration);\r\n\r\n        LoveStory storage _loveStory = loveStories[_id];\r\n\r\n        _loveStory.owner = msg.sender;\r\n        _loveStory.loverName = _loverName;\r\n        _loveStory.lovedOneName = _lovedOneName;\r\n        _loveStory.transferCost = msg.value.mul(2);\r\n        _loveStory.lockedUntil = now.add(_lockDurationInHours.mul(1 hours));\r\n        _loveStory.data = _data;\r\n    }\r\n\r\n    function _isLowercaseLetter(byte _char)\r\n        private\r\n        pure\r\n        returns (bool)\r\n    {\r\n        // Char must be a small case letter: [a-z]\r\n        return _char >= 0x61 && _char <= 0x7A;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_lockCostPerHour\",\"type\":\"uint256\"}],\"name\":\"changeLockCostPerHour\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_withdrawer\",\"type\":\"address\"}],\"name\":\"withdrawableAmountFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_MAX_LOCK_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes16\"},{\"name\":\"_loverName\",\"type\":\"bytes32\"},{\"name\":\"_lovedOneName\",\"type\":\"bytes32\"},{\"name\":\"_lockDurationInHours\",\"type\":\"uint256\"}],\"name\":\"createLoveStory\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes16\"},{\"name\":\"_loverName\",\"type\":\"bytes32\"},{\"name\":\"_lovedOneName\",\"type\":\"bytes32\"},{\"name\":\"_lockDurationInHours\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"createLoveStoryWithData\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxLockDuration\",\"type\":\"uint256\"}],\"name\":\"changeMaxLockDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_initialCost\",\"type\":\"uint256\"}],\"name\":\"changeInitialCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_INITIAL_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes16\"},{\"name\":\"_loverName\",\"type\":\"bytes32\"},{\"name\":\"_lovedOneName\",\"type\":\"bytes32\"},{\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"updateLoveStoryWithData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loveStoriesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_lockDurationInHours\",\"type\":\"uint256\"}],\"name\":\"createCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes16\"},{\"name\":\"_loverName\",\"type\":\"bytes32\"},{\"name\":\"_lovedOneName\",\"type\":\"bytes32\"},{\"name\":\"_lockDurationInHours\",\"type\":\"uint256\"}],\"name\":\"transferLoveStory\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxLockDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes16\"},{\"name\":\"_loverName\",\"type\":\"bytes32\"},{\"name\":\"_lovedOneName\",\"type\":\"bytes32\"},{\"name\":\"_lockDurationInHours\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"transferLoveStoryWithData\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_LOCK_COST_PER_HOUR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes16\"}],\"name\":\"readLoveStory\",\"outputs\":[{\"name\":\"_loveStoryOwner\",\"type\":\"address\"},{\"name\":\"_loverName\",\"type\":\"bytes32\"},{\"name\":\"_lovedOneName\",\"type\":\"bytes32\"},{\"name\":\"_transferCost\",\"type\":\"uint256\"},{\"name\":\"_lockedUntil\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockCostPerHour\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes16\"},{\"name\":\"_lockDurationInHours\",\"type\":\"uint256\"}],\"name\":\"transferCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEVELOPER_CUT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes16\"},{\"name\":\"_loverName\",\"type\":\"bytes32\"},{\"name\":\"_lovedOneName\",\"type\":\"bytes32\"}],\"name\":\"updateLoveStory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes16\"}],\"name\":\"isIdValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes16\"}],\"name\":\"isIdRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"loverName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"lovedOneName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"transferCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"string\"}],\"name\":\"LoveStoryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"loverName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"lovedOneName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"string\"}],\"name\":\"LoveStoryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes16\"},{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newLoverName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"newLovedOneName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"newtransferCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"string\"}],\"name\":\"LoveStoryTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WillAlwaysLove","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b640dda73f67aaaa8458574325cfea07a84861532428c45de059c53d6b86eca6"}]}