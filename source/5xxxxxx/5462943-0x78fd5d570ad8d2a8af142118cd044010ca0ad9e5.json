{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/*************************/\r\n/* Blocksquare Series A  */\r\n/*************************/\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function tranferOwnership(address _newOwner) public onlyOwner() {\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract Token {\r\n    function mintTokens(address _atAddress, uint256 _amount) public;\r\n}\r\n\r\ncontract Whitelist {\r\n    function isWhitelisted(address _user) constant public returns(bool);\r\n}\r\n\r\n\r\n/****************************************/\r\n/* BLOCKSQUARE SERIES A IMPLEMENTATION  */\r\n/****************************************/\r\ncontract BlocksquareSeriesA is owned {\r\n    using SafeMath for uint256;\r\n\r\n    /** Events **/\r\n    event Received(address indexed _from, uint256 _amount);\r\n    event FundsReturned(address indexed _to, uint256 _amount);\r\n    event TokensGiven(address indexed _to, uint256 _amount);\r\n    event ErrorReturningEth(address _to, uint256 _amount);\r\n\r\n    /** Public variables **/\r\n    uint256 public currentAmountRaised;\r\n    uint256 public currentAmountOfTokensWithNoBonus;\r\n    uint256 public valueInUSD;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    address public recipient;\r\n\r\n    /** Private variables **/\r\n    uint256 nextParticipantIndex;\r\n    uint256 currentAmountOfTokens;\r\n    bool icoHasStarted;\r\n    bool icoHasClosed;\r\n    Token reward;\r\n    Whitelist whitelist;\r\n\r\n    /** Constants **/\r\n    uint256 BONUS25 = 60*60;\r\n    uint256 BONUS15 = BONUS25.add(60*60*24*4);\r\n    uint256 BONUS7 = BONUS15.add(60*60*24*5);\r\n    uint256 PRICEOFTOKEN = 25; // It means 0.25 USD\r\n    uint256 MAXAMOUNTOFTOKENS = (1200000 * 10 ** 18);\r\n\r\n    /** Mappings **/\r\n    mapping(address => uint256) contributed;\r\n    mapping(uint256 => address) participantIndex;\r\n\r\n    function BlocksquareSeriesA() public {\r\n        owner = msg.sender;\r\n        recipient = msg.sender;\r\n        reward = Token(0x509A38b7a1cC0dcd83Aa9d06214663D9eC7c7F4a);\r\n        whitelist = Whitelist(0xCB641F6B46e1f2970dB003C19515018D0338550a);\r\n    }\r\n\r\n    /**\r\n    * Basic payment\r\n    **/\r\n    function () payable public {\r\n        require(reward != address(0));\r\n        require(whitelist != address(0));\r\n        require(msg.value >= (2 ether / 10));\r\n        require(icoHasStarted);\r\n        require(!icoHasClosed);\r\n        require(valueInUSD != 0);\r\n        require(whitelist.isWhitelisted(msg.sender));\r\n        if(contributed[msg.sender] == 0) {\r\n            participantIndex[nextParticipantIndex] = msg.sender;\r\n            nextParticipantIndex += 1;\r\n        }\r\n\r\n        uint256 amountOfWei = msg.value;\r\n\r\n        contributed[msg.sender] = contributed[msg.sender].add(amountOfWei);\r\n        currentAmountRaised = currentAmountRaised.add(amountOfWei);\r\n        uint256 tokens = tokensToMint(amountOfWei);\r\n\r\n        reward.mintTokens(msg.sender, tokens);\r\n        currentAmountOfTokens = currentAmountOfTokens.add(tokens);\r\n        emit Received(msg.sender, msg.value);\r\n        emit TokensGiven(msg.sender, tokens);\r\n\r\n        if(address(this).balance >= 50 ether) {\r\n            if(!address(recipient).send(address(this).balance)) {\r\n                emit ErrorReturningEth(recipient, address(this).balance);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    * Calculate tokens to mint.\r\n    *\r\n    * Calculets how much tokens sender will get based on _amountOfWei he sent.\r\n    *\r\n    * @param _amountOfWei Amount of wei sender has sent to the contract.\r\n    * @return Number of tokens sender will recieve.\r\n    **/\r\n    function tokensToMint(uint256 _amountOfWei) private returns (uint256) {\r\n        uint256 tokensPerEth = valueInUSD.div(PRICEOFTOKEN);\r\n\r\n        uint256 rewardAmount = tokensPerEth.mul(_amountOfWei);\r\n        if(currentAmountOfTokensWithNoBonus.add(rewardAmount) > MAXAMOUNTOFTOKENS) {\r\n            icoHasClosed = true;\r\n            uint256 over = currentAmountOfTokensWithNoBonus.add(rewardAmount).sub(MAXAMOUNTOFTOKENS);\r\n            rewardAmount = rewardAmount.sub(over);\r\n            uint256 weiToReturn = over.div(tokensPerEth);\r\n            currentAmountRaised = currentAmountRaised.sub(weiToReturn);\r\n            contributed[msg.sender] = contributed[msg.sender].sub(weiToReturn);\r\n            if(address(msg.sender).send(weiToReturn)) {\r\n                emit ErrorReturningEth(msg.sender, weiToReturn);\r\n            }\r\n        }\r\n        currentAmountOfTokensWithNoBonus = currentAmountOfTokensWithNoBonus.add(rewardAmount);\r\n\r\n        if(block.timestamp <= startTime.add(BONUS25)) {\r\n            rewardAmount = rewardAmount.add(rewardAmount.mul(25).div(100));\r\n        }\r\n        else if(block.timestamp <= startTime.add(BONUS15)) {\r\n            rewardAmount = rewardAmount.add(rewardAmount.mul(15).div(100));\r\n        }\r\n        else if(block.timestamp <= startTime.add(BONUS7)) {\r\n            rewardAmount = rewardAmount.add(rewardAmount.mul(7).div(100));\r\n        }\r\n\r\n        return rewardAmount;\r\n    }\r\n\r\n    /**\r\n    * Change USD value\r\n    *\r\n    * Change value of ETH in USD\r\n    *\r\n    * @param _value New value of ETH in USD\r\n    **/\r\n    function changeETHUSD(uint256 _value) public onlyOwner {\r\n        valueInUSD = _value;\r\n    }\r\n\r\n    /**\r\n    * Start Series A\r\n    *\r\n    * Starts Series A and sets value of ETH in USD.\r\n    *\r\n    * @param _value Value of ETH in USD.\r\n    **/\r\n    function start(uint256 _value) public onlyOwner {\r\n        require(!icoHasStarted);\r\n        valueInUSD = _value;\r\n        startTime = block.timestamp;\r\n        endTime = startTime.add(60*60).add(60*60*24*16);\r\n        icoHasStarted = true;\r\n    }\r\n\r\n    /**\r\n    * Close Series A\r\n    *\r\n    * Closes Series A.\r\n    **/\r\n    function closeICO() public onlyOwner {\r\n        require(icoHasStarted);\r\n        icoHasClosed = true;\r\n    }\r\n\r\n    /**\r\n    * Withdraw Ether\r\n    *\r\n    * Withdraw Ether from contract.\r\n    **/\r\n    function withdrawEther() public onlyOwner {\r\n        if(!address(recipient).send(address(this).balance)) {\r\n            emit ErrorReturningEth(recipient, address(this).balance);\r\n        }\r\n    }\r\n\r\n    /** Getters functions for info **/\r\n    function getToken() constant public returns (address _tokenAddress) {\r\n        return address(reward);\r\n    }\r\n\r\n    function isCrowdsaleOpen() constant public returns (bool _isOpened) {\r\n        return (!icoHasClosed && icoHasStarted);\r\n    }\r\n\r\n    function amountContributed(address _contributor) constant public returns(uint256 _contributedUntilNow){\r\n        return contributed[_contributor];\r\n    }\r\n\r\n    function numberOfContributors() constant public returns(uint256 _numOfContributors){\r\n        return nextParticipantIndex;\r\n    }\r\n\r\n    function numberOfTokens() constant public returns(uint256) {\r\n        return currentAmountOfTokens;\r\n    }\r\n\r\n    function hasAllowanceToRecieveTokens(address _address) constant public returns(bool) {\r\n        return whitelist.isWhitelisted(_address);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasAllowanceToRecieveTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"amountContributed\",\"outputs\":[{\"name\":\"_contributedUntilNow\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfContributors\",\"outputs\":[{\"name\":\"_numOfContributors\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsaleOpen\",\"outputs\":[{\"name\":\"_isOpened\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"tranferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeETHUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentAmountOfTokensWithNoBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"valueInUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentAmountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FundsReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensGiven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ErrorReturningEth\",\"type\":\"event\"}]","ContractName":"BlocksquareSeriesA","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f2115bfc26bb0dfcbfc3a8997db3efc860deba5b1e2367d935a0458bb9175dbf"}]}