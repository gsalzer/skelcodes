{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract Proxied is Ownable {\r\n    address public target;\r\n    mapping (address => bool) public initialized;\r\n\r\n    event EventUpgrade(address indexed newTarget, address indexed oldTarget, address indexed admin);\r\n    event EventInitialized(address indexed target);\r\n\r\n    function upgradeTo(address _target) public;\r\n}\r\n\r\ncontract Proxy is Proxied {\r\n    /*\r\n     * @notice Constructor sets the target and emmits an event with the first target\r\n     * @param _target - The target Upgradeable contracts address\r\n     */\r\n    constructor(address _target) public {\r\n        upgradeTo(_target);\r\n    }\r\n\r\n    /*\r\n     * @notice Upgrades the contract to a different target that has a changed logic. Can only be called by owner\r\n     * @dev See https://github.com/jackandtheblockstalk/upgradeable-proxy for what can and cannot be done in Upgradeable\r\n     * contracts\r\n     * @param _target - The target Upgradeable contracts address\r\n     */\r\n    function upgradeTo(address _target) public onlyOwner {\r\n        assert(target != _target);\r\n\r\n        address oldTarget = target;\r\n        target = _target;\r\n\r\n        emit EventUpgrade(_target, oldTarget, msg.sender);\r\n    }\r\n\r\n    /*\r\n     * @notice Performs an upgrade and then executes a transaction. Intended use to upgrade and initialize atomically\r\n     */\r\n    function upgradeTo(address _target, bytes _data) public onlyOwner {\r\n        upgradeTo(_target);\r\n        assert(target.delegatecall(_data));\r\n    }\r\n\r\n    /*\r\n     * @notice Fallback function that will execute code from the target contract to process a function call.\r\n     * @dev Will use the delegatecall opcode to retain the current state of the Proxy contract and use the logic\r\n     * from the target contract to process it.\r\n     */\r\n    function () payable public {\r\n        bytes memory data = msg.data;\r\n        address impl = target;\r\n\r\n        assembly {\r\n            let result := delegatecall(gas, impl, add(data, 0x20), mload(data), 0, 0)\r\n            let size := returndatasize\r\n\r\n            let ptr := mload(0x40)\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newTarget\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldTarget\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"EventUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"EventInitialized\",\"type\":\"event\"}]","ContractName":"Proxy","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000069f6baff4dfb233d56d81c766babe745833f5bfd","Library":"","SwarmSource":"bzzr://0a333797ea45f49868a72eeb071ac67fc429d7c6a6befd9092420afd2bf7b600"}]}