{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n/**\r\n * @title ERC20\r\n * @dev ERC20 interface\r\n */\r\ncontract ERC20 {\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/// @dev Crowdsale interface for Etheal Normal Sale, functions needed from outside.\r\ncontract iEthealSale {\r\n    bool public paused;\r\n    uint256 public minContribution;\r\n    uint256 public whitelistThreshold;\r\n    mapping (address => uint256) public stakes;\r\n    function setPromoBonus(address _investor, uint256 _value) public;\r\n    function buyTokens(address _beneficiary) public payable;\r\n    function depositEth(address _beneficiary, uint256 _time, bytes _whitelistSign) public payable;\r\n    function depositOffchain(address _beneficiary, uint256 _amount, uint256 _time) public;\r\n    function hasEnded() public constant returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title claim accidentally sent tokens\r\n */\r\ncontract HasNoTokens is Ownable {\r\n    event ExtractedTokens(address indexed _token, address indexed _claimer, uint _amount);\r\n\r\n    /// @notice This method can be used to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    /// @param _claimer Address that tokens will be send to\r\n    function extractTokens(address _token, address _claimer) onlyOwner public {\r\n        if (_token == 0x0) {\r\n            _claimer.transfer(this.balance);\r\n            return;\r\n        }\r\n\r\n        ERC20 token = ERC20(_token);\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(_claimer, balance);\r\n        ExtractedTokens(_token, _claimer, balance);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/*\r\n * ERC-20 Standard Token Smart Contract Interface.\r\n * Copyright © 2016–2017 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\n\r\n/**\r\n * ERC-20 standard token interface, as defined\r\n * <a href=\"http://github.com/ethereum/EIPs/issues/20\">here</a>.\r\n */\r\ncontract Token {\r\n    /**\r\n     * Get total number of tokens in circulation.\r\n     *\r\n     * @return total number of tokens in circulation\r\n     */\r\n    function totalSupply () view returns (uint256 supply);\r\n\r\n    /**\r\n     * Get number of tokens currently belonging to given owner.\r\n     *\r\n     * @param _owner address to get number of tokens currently belonging to the\r\n     *        owner of\r\n     * @return number of tokens currently belonging to the owner of given address\r\n     */\r\n    function balanceOf (address _owner) view returns (uint256 balance);\r\n\r\n    /**\r\n     * Transfer given number of tokens from message sender to given recipient.\r\n     *\r\n     * @param _to address to transfer tokens to the owner of\r\n     * @param _value number of tokens to transfer to the owner of given address\r\n     * @return true if tokens were transferred successfully, false otherwise\r\n     */\r\n    function transfer (address _to, uint256 _value) returns (bool success);\r\n\r\n    /**\r\n     * Transfer given number of tokens from given owner to given recipient.\r\n     *\r\n     * @param _from address to transfer tokens from the owner of\r\n     * @param _to address to transfer tokens to the owner of\r\n     * @param _value number of tokens to transfer from given owner to given\r\n     *        recipient\r\n     * @return true if tokens were transferred successfully, false otherwise\r\n     */\r\n    function transferFrom (address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n    /**\r\n     * Allow given spender to transfer given number of tokens from message sender.\r\n     *\r\n     * @param _spender address to allow the owner of to transfer tokens from\r\n     *        message sender\r\n     * @param _value number of tokens to allow to transfer\r\n     * @return true if token transfer was successfully approved, false otherwise\r\n     */\r\n    function approve (address _spender, uint256 _value) returns (bool success);\r\n\r\n    /**\r\n     * Tell how many tokens given spender is currently allowed to transfer from\r\n     * given owner.\r\n     *\r\n     * @param _owner address to get number of tokens allowed to be transferred\r\n     *        from the owner of\r\n     * @param _spender address to get number of tokens allowed to be transferred\r\n     *        by the owner of\r\n     * @return number of tokens given spender is currently allowed to transfer\r\n     *         from given owner\r\n     */\r\n    function allowance (address _owner, address _spender) view returns (uint256 remaining);\r\n\r\n    /**\r\n     * Logged when tokens were transferred from one owner to another.\r\n     *\r\n     * @param _from address of the owner, tokens were transferred from\r\n     * @param _to address of the owner, tokens were transferred to\r\n     * @param _value number of tokens transferred\r\n     */\r\n    event Transfer (address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    /**\r\n     * Logged when owner approved his tokens to be transferred by some spender.\r\n     *\r\n     * @param _owner owner who approved his tokens to be transferred\r\n     * @param _spender spender who were allowed to transfer the tokens belonging\r\n     *        to the owner\r\n     * @param _value number of tokens belonging to the owner, approved to be\r\n     *        transferred by the spender\r\n     */\r\n    event Approval (address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/*\r\n * Abstract Token Smart Contract.  Copyright © 2017 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n * Modified to use SafeMath library by thesved\r\n */\r\n/**\r\n * Abstract Token Smart Contract that could be used as a base contract for\r\n * ERC-20 token contracts.\r\n */\r\ncontract AbstractToken is Token {\r\n    using SafeMath for uint;\r\n\r\n    /**\r\n     * Create new Abstract Token contract.\r\n     */\r\n    function AbstractToken () {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Get number of tokens currently belonging to given owner.\r\n     *\r\n     * @param _owner address to get number of tokens currently belonging to the owner\r\n     * @return number of tokens currently belonging to the owner of given address\r\n     */\r\n    function balanceOf (address _owner) view returns (uint256 balance) {\r\n        return accounts[_owner];\r\n    }\r\n\r\n    /**\r\n     * Transfer given number of tokens from message sender to given recipient.\r\n     *\r\n     * @param _to address to transfer tokens to the owner of\r\n     * @param _value number of tokens to transfer to the owner of given address\r\n     * @return true if tokens were transferred successfully, false otherwise\r\n     */\r\n    function transfer (address _to, uint256 _value) returns (bool success) {\r\n        uint256 fromBalance = accounts[msg.sender];\r\n        if (fromBalance < _value) return false;\r\n        if (_value > 0 && msg.sender != _to) {\r\n            accounts[msg.sender] = fromBalance.sub(_value);\r\n            accounts[_to] = accounts[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer given number of tokens from given owner to given recipient.\r\n     *\r\n     * @param _from address to transfer tokens from the owner of\r\n     * @param _to address to transfer tokens to the owner of\r\n     * @param _value number of tokens to transfer from given owner to given recipient\r\n     * @return true if tokens were transferred successfully, false otherwise\r\n     */\r\n    function transferFrom (address _from, address _to, uint256 _value) returns (bool success) {\r\n        uint256 spenderAllowance = allowances[_from][msg.sender];\r\n        if (spenderAllowance < _value) return false;\r\n        uint256 fromBalance = accounts[_from];\r\n        if (fromBalance < _value) return false;\r\n\r\n        allowances[_from][msg.sender] = spenderAllowance.sub(_value);\r\n\r\n        if (_value > 0 && _from != _to) {\r\n            accounts[_from] = fromBalance.sub(_value);\r\n            accounts[_to] = accounts[_to].add(_value);\r\n            Transfer(_from, _to, _value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Allow given spender to transfer given number of tokens from message sender.\r\n     *\r\n     * @param _spender address to allow the owner of to transfer tokens from\r\n     *        message sender\r\n     * @param _value number of tokens to allow to transfer\r\n     * @return true if token transfer was successfully approved, false otherwise\r\n     */\r\n    function approve (address _spender, uint256 _value) returns (bool success) {\r\n        allowances[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tell how many tokens given spender is currently allowed to transfer from\r\n     * given owner.\r\n     *\r\n     * @param _owner address to get number of tokens allowed to be transferred from the owner\r\n     * @param _spender address to get number of tokens allowed to be transferred by the owner\r\n     * @return number of tokens given spender is currently allowed to transfer from given owner\r\n     */\r\n    function allowance (address _owner, address _spender) view returns (uint256 remaining) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * Mapping from addresses of token holders to the numbers of tokens belonging\r\n     * to these token holders.\r\n     */\r\n    mapping (address => uint256) accounts;\r\n\r\n    /**\r\n     * Mapping from addresses of token holders to the mapping of addresses of\r\n     * spenders to the allowances set by these token holders to these spenders.\r\n     */\r\n    mapping (address => mapping (address => uint256)) private allowances;\r\n}\r\n\r\n\r\n/*\r\n * Abstract Virtual Token Smart Contract.  Copyright © 2017 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n * Modified to use SafeMath library by thesved\r\n */\r\n\r\n/**\r\n * Abstract Token Smart Contract that could be used as a base contract for\r\n * ERC-20 token contracts supporting virtual balance.\r\n */\r\ncontract AbstractVirtualToken is AbstractToken {\r\n    using SafeMath for uint;\r\n\r\n    /**\r\n     * Maximum number of real (i.e. non-virtual) tokens in circulation (2^255-1).\r\n     */\r\n    uint256 constant MAXIMUM_TOKENS_COUNT = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    /**\r\n     * Mask used to extract real balance of an account (2^255-1).\r\n     */\r\n    uint256 constant BALANCE_MASK = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    /**\r\n     * Mask used to extract \"materialized\" flag of an account (2^255).\r\n     */\r\n    uint256 constant MATERIALIZED_FLAG_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    /**\r\n     * Create new Abstract Virtual Token contract.\r\n     */\r\n    function AbstractVirtualToken () {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Get total number of tokens in circulation.\r\n     *\r\n     * @return total number of tokens in circulation\r\n     */\r\n    function totalSupply () view returns (uint256 supply) {\r\n        return tokensCount;\r\n    }\r\n\r\n    /**\r\n     * Get number of tokens currently belonging to given owner.\r\n     *\r\n     * @param _owner address to get number of tokens currently belonging to the owner\r\n     * @return number of tokens currently belonging to the owner of given address\r\n    */\r\n    function balanceOf (address _owner) constant returns (uint256 balance) { \r\n        return (accounts[_owner] & BALANCE_MASK).add(getVirtualBalance(_owner));\r\n    }\r\n\r\n    /**\r\n     * Transfer given number of tokens from message sender to given recipient.\r\n     *\r\n     * @param _to address to transfer tokens to the owner of\r\n     * @param _value number of tokens to transfer to the owner of given address\r\n     * @return true if tokens were transferred successfully, false otherwise\r\n     */\r\n    function transfer (address _to, uint256 _value) returns (bool success) {\r\n        if (_value > balanceOf(msg.sender)) return false;\r\n        else {\r\n            materializeBalanceIfNeeded(msg.sender, _value);\r\n            return AbstractToken.transfer(_to, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transfer given number of tokens from given owner to given recipient.\r\n     *\r\n     * @param _from address to transfer tokens from the owner of\r\n     * @param _to address to transfer tokens to the owner of\r\n     * @param _value number of tokens to transfer from given owner to given\r\n     *        recipient\r\n     * @return true if tokens were transferred successfully, false otherwise\r\n     */\r\n    function transferFrom (address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (_value > allowance(_from, msg.sender)) return false;\r\n        if (_value > balanceOf(_from)) return false;\r\n        else {\r\n            materializeBalanceIfNeeded(_from, _value);\r\n            return AbstractToken.transferFrom(_from, _to, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get virtual balance of the owner of given address.\r\n     *\r\n     * @param _owner address to get virtual balance for the owner of\r\n     * @return virtual balance of the owner of given address\r\n     */\r\n    function virtualBalanceOf (address _owner) internal view returns (uint256 _virtualBalance);\r\n\r\n    /**\r\n     * Calculate virtual balance of the owner of given address taking into account\r\n     * materialized flag and total number of real tokens already in circulation.\r\n     */\r\n    function getVirtualBalance (address _owner) private view returns (uint256 _virtualBalance) {\r\n        if (accounts [_owner] & MATERIALIZED_FLAG_MASK != 0) return 0;\r\n        else {\r\n            _virtualBalance = virtualBalanceOf(_owner);\r\n            uint256 maxVirtualBalance = MAXIMUM_TOKENS_COUNT.sub(tokensCount);\r\n            if (_virtualBalance > maxVirtualBalance)\r\n                _virtualBalance = maxVirtualBalance;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Materialize virtual balance of the owner of given address if this will help\r\n     * to transfer given number of tokens from it.\r\n     *\r\n     * @param _owner address to materialize virtual balance of\r\n     * @param _value number of tokens to be transferred\r\n     */\r\n    function materializeBalanceIfNeeded (address _owner, uint256 _value) private {\r\n        uint256 storedBalance = accounts[_owner];\r\n        if (storedBalance & MATERIALIZED_FLAG_MASK == 0) {\r\n            // Virtual balance is not materialized yet\r\n            if (_value > storedBalance) {\r\n                // Real balance is not enough\r\n                uint256 virtualBalance = getVirtualBalance(_owner);\r\n                require (_value.sub(storedBalance) <= virtualBalance);\r\n                accounts[_owner] = MATERIALIZED_FLAG_MASK | storedBalance.add(virtualBalance);\r\n                tokensCount = tokensCount.add(virtualBalance);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Number of real (i.e. non-virtual) tokens in circulation.\r\n    */\r\n    uint256 tokensCount;\r\n}\r\n\r\n\r\n/**\r\n * Etheal Promo ERC-20 contract\r\n * Author: thesved\r\n */\r\ncontract EthealPromoToken is HasNoTokens, AbstractVirtualToken {\r\n    // Balance threshold to assign virtual tokens to the owner of higher balances then this threshold.\r\n    uint256 private constant VIRTUAL_THRESHOLD = 0.1 ether;\r\n\r\n    // Number of virtual tokens to assign to the owners of balances higher than virtual threshold.\r\n    uint256 private constant VIRTUAL_COUNT = 911;\r\n\r\n    // crowdsale to set bonus when sending token\r\n    iEthealSale public crowdsale;\r\n\r\n\r\n    ////////////////\r\n    // Basic functions\r\n    ////////////////\r\n\r\n    /// @dev Constructor, crowdsale address can be 0x0\r\n    function EthealPromoToken(address _crowdsale) {\r\n        crowdsale = iEthealSale(_crowdsale);\r\n    }\r\n\r\n    /// @dev Setting crowdsale, crowdsale address can be 0x0\r\n    function setCrowdsale(address _crowdsale) public onlyOwner {\r\n        crowdsale = iEthealSale(_crowdsale);\r\n    }\r\n\r\n    /// @notice Get virtual balance of the owner of given address.\r\n    /// @param _owner address to get virtual balance for the owner\r\n    /// @return virtual balance of the owner of given address\r\n    function virtualBalanceOf(address _owner) internal view returns (uint256) {\r\n        return _owner.balance >= VIRTUAL_THRESHOLD ? VIRTUAL_COUNT : 0;\r\n    }\r\n\r\n    /// @notice Get name of this token.\r\n    function name() public pure returns (string result) {\r\n        return \"An Etheal Promo\";\r\n    }\r\n\r\n    /// @notice Get symbol of this token.\r\n    function symbol() public pure returns (string result) {\r\n        return \"HEALP\";\r\n    }\r\n\r\n    /// @notice Get number of decimals for this token.\r\n    function decimals() public pure returns (uint8 result) {\r\n        return 0;\r\n    }\r\n\r\n\r\n    ////////////////\r\n    // Set sale bonus\r\n    ////////////////\r\n\r\n    /// @dev Internal function for setting sale bonus\r\n    function setSaleBonus(address _from, address _to, uint256 _value) internal {\r\n        if (address(crowdsale) == address(0)) return;\r\n        if (_value == 0) return;\r\n\r\n        if (_to == address(1) || _to == address(this) || _to == address(crowdsale)) {\r\n            crowdsale.setPromoBonus(_from, _value);\r\n        }\r\n    }\r\n\r\n    /// @dev Override transfer function to set sale bonus\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        bool success = super.transfer(_to, _value); \r\n\r\n        if (success) {\r\n            setSaleBonus(msg.sender, _to, _value);\r\n        }\r\n\r\n        return success;\r\n    }\r\n\r\n    /// @dev Override transfer function to set sale bonus\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        bool success = super.transferFrom(_from, _to, _value);\r\n\r\n        if (success) {\r\n            setSaleBonus(_from, _to, _value);\r\n        }\r\n\r\n        return success;\r\n    }\r\n\r\n\r\n    ////////////////\r\n    // Extra\r\n    ////////////////\r\n\r\n    /// @notice Notify owners about their virtual balances.\r\n    function massNotify(address[] _owners) public onlyOwner {\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            Transfer(address(0), _owners[i], VIRTUAL_COUNT);\r\n        }\r\n    }\r\n\r\n    /// @notice Kill this smart contract.\r\n    function kill() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"}],\"name\":\"massNotify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"name\":\"setCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"result\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"extractTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ExtractedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EthealPromoToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://e6ce950040d03b6612208aad756c3a3da4a0c5aed8f7a2c7cccfa7cb5019b8be"}]}