{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\ncontract JungleScratch is Owned {\r\n    using SafeMath for uint;\r\n    uint public LimitBottom = 0.02 ether;\r\n    uint public LimitTop = 0.1 ether;\r\n    \r\n    address public Drawer;\r\n    struct Game {\r\n        bytes32 SecretKey_P;\r\n        bool isPlay;\r\n        bool isPay;\r\n        uint Result;\r\n        uint Time;\r\n        address Buyer;\r\n        uint value;\r\n    }\r\n    \r\n    mapping (bytes32 => Game) public TicketPool;\r\n    \r\n    event SubmitTicket(bytes32 indexed SecretKey_D_hash, uint Bet_amount,bytes32 SecretKey_P, address Player);   \r\n    event Result(bytes32 SecretKey_D_hash, bytes32 SecretKey_D,address Buyer, uint[] Bird_Result, uint Game_Result, uint time);\r\n    event Pay(bytes32 indexed SecretKey_D_hash, address indexed Buyer, uint Game_Result);\r\n    event Owe(bytes32 indexed SecretKey_D_hash, address indexed Buyer, uint Game_Result);\r\n    event OwePay(bytes32 indexed SecretKey_D_hash, address indexed Buyer, uint Game_Result);\r\n    \r\n    function JungleScratch (address drawer_) public {\r\n        Drawer = drawer_;\r\n    }\r\n    \r\n    function submit(bytes32 secretKey_P, bytes32 secretKey_D_hash) payable public {\r\n        require(msg.value == 0.02 ether || msg.value == 0.04 ether || msg.value == 0.06 ether || msg.value == 0.08 ether || msg.value == 0.1 ether);\r\n        require(TicketPool[secretKey_D_hash].Time == 0);\r\n        require(msg.value >= LimitBottom && msg.value <= LimitTop);\r\n        uint check = msg.value.div(20000000000000000);\r\n        require(check == 1 || check == 2 || check == 3 || check == 4 || check == 5);\r\n        \r\n        SubmitTicket(secretKey_D_hash, msg.value, secretKey_P, msg.sender);\r\n        TicketPool[secretKey_D_hash] = Game(secretKey_P,false,false,0,block.timestamp,msg.sender,msg.value);\r\n    }\r\n    \r\n    function award(bytes32 secretKey_D) public {\r\n        \r\n        require(Drawer == msg.sender);\r\n        \r\n        bytes32 secretKey_D_hash = keccak256(secretKey_D);\r\n        \r\n        Game local_ = TicketPool[secretKey_D_hash];\r\n        \r\n        require(local_.Time != 0 && !local_.isPlay);\r\n        \r\n        uint game_result = 0;\r\n        uint[] memory RandomResult = new uint[](9);\r\n        \r\n        RandomResult[0] = uint(keccak256(\"Pig World is an AWESOME team\",secretKey_D,'a',local_.SecretKey_P)) % 1000 + 1;\r\n        RandomResult[1] = uint(keccak256(local_.SecretKey_P,\"Every Game in our world is provably fair\",secretKey_D,'b')) % 1000 + 1;\r\n        RandomResult[2] = uint(keccak256('c',secretKey_D,\"OMG it is a revolution dapp\",local_.SecretKey_P)) % 1000 + 1;\r\n        RandomResult[3] = uint(keccak256(secretKey_D,\"hahahaha\",local_.SecretKey_P,'d',\"thanks for our team member and all player support.\")) % 1000 + 1;\r\n        RandomResult[4] = uint(keccak256(\"CC is our CEO\",secretKey_D,\"he can eat Betel nut\",local_.SecretKey_P,'e')) % 1000 + 1;\r\n        RandomResult[5] = uint(keccak256(20180612,\"justin is our researcher\",secretKey_D,\"and he love little girl(at least 18, so it is ok)\",local_.SecretKey_P,'f')) % 1000 + 1;\r\n        RandomResult[6] = uint(keccak256(\"jeremy is our marketing\",secretKey_D,'g',local_.SecretKey_P,\"he is very humble and serious\")) % 1000 + 1;\r\n        RandomResult[7] = uint(keccak256('h',secretKey_D,\"We are a geek team\",local_.SecretKey_P,\"we love blockchain\")) % 1000 + 1;\r\n        RandomResult[8] = uint(keccak256(secretKey_D,\"hope you win a big prize\",local_.SecretKey_P,\"love you all!!!\",'i')) % 1000 + 1;\r\n        \r\n        for (uint n = 0; n < 9; n++) {\r\n            \r\n            if(RandomResult[n]< 81){\r\n                RandomResult[n] = 0;\r\n            } else if(RandomResult[n]< 168){\r\n                RandomResult[n] = 1;\r\n            } else if(RandomResult[n]< 266){\r\n                RandomResult[n] = 2;\r\n            } else if(RandomResult[n]< 381){\r\n                RandomResult[n] = 3;\r\n            } else if(RandomResult[n]< 535){\r\n                RandomResult[n] = 4;\r\n            } else if(RandomResult[n]< 749){\r\n                RandomResult[n] = 5;\r\n            } else if(RandomResult[n]< 1001){\r\n                RandomResult[n] = 6;\r\n            }\r\n        }\r\n            \r\n        for(uint nn = 0; nn < 6; nn++){\r\n            uint count = 0;\r\n            for(uint p = 0; p < 9; p++){\r\n                if(RandomResult[p] == nn)\r\n                    count ++;\r\n            }\r\n            \r\n            if(count >= 3 && nn == 0)\r\n                game_result = game_result.add(TicketPool[secretKey_D_hash].value.div(20000000000000000).mul(0.1 ether));\r\n                \r\n            if(count >= 3 && nn == 1)\r\n                game_result = game_result.add(TicketPool[secretKey_D_hash].value.div(20000000000000000).mul(0.08 ether));\r\n                \r\n            if(count >= 3 && nn == 2)\r\n                game_result = game_result.add(TicketPool[secretKey_D_hash].value.div(20000000000000000).mul(0.06 ether));\r\n                \r\n            if(count >= 3 && nn == 3)\r\n                game_result = game_result.add(TicketPool[secretKey_D_hash].value.div(20000000000000000).mul(0.04 ether));\r\n                \r\n            if(count >= 3 && nn == 4)\r\n                game_result = game_result.add(TicketPool[secretKey_D_hash].value.div(20000000000000000).mul(0.02 ether)); \r\n                \r\n            if(count >= 3 && nn == 5)\r\n                game_result = game_result.add(TicketPool[secretKey_D_hash].value.div(20000000000000000).mul(0.01 ether)); \r\n        }\r\n    \r\n        \r\n        if(game_result != 0){\r\n            TicketPool[secretKey_D_hash].Result = game_result;\r\n            if (address(this).balance >= game_result && TicketPool[secretKey_D_hash].Buyer.send(game_result)) {\r\n                TicketPool[secretKey_D_hash].isPay = true;\r\n                Pay(secretKey_D_hash,TicketPool[secretKey_D_hash].Buyer, game_result);\r\n            } else {\r\n                Owe(secretKey_D_hash, TicketPool[secretKey_D_hash].Buyer, game_result);\r\n                TicketPool[secretKey_D_hash].isPay = false;\r\n            } \r\n         } else {\r\n            TicketPool[secretKey_D_hash].isPay = true;\r\n        }\r\n        \r\n        Result(secretKey_D_hash, secretKey_D, TicketPool[secretKey_D_hash].Buyer, RandomResult, game_result, block.timestamp);\r\n        TicketPool[secretKey_D_hash].isPlay = true;\r\n    }\r\n    \r\n    function () public payable {\r\n       \r\n    }\r\n    \r\n    function withdraw(uint withdrawEther_) public onlyOwner {\r\n        msg.sender.transfer(withdrawEther_);\r\n    }\r\n    \r\n    function changeLimit(uint _bottom, uint _top) public onlyOwner {\r\n        LimitBottom = _bottom;\r\n        LimitTop = _top;\r\n    }\r\n    \r\n    function changeDrawer(address drawer_) public onlyOwner {\r\n        Drawer = drawer_;\r\n    }\r\n    \r\n    function getisPlay(bytes32 secretKey_D_hash) public constant returns (bool isplay){\r\n        return TicketPool[secretKey_D_hash].isPlay;\r\n    }\r\n    \r\n    function getTicketTime(bytes32 secretKey_D_hash) public constant returns (uint Time){\r\n        return TicketPool[secretKey_D_hash].Time;\r\n    }\r\n    \r\n    function chargeOwe(bytes32 secretKey_D_hash) public {\r\n        require(!TicketPool[secretKey_D_hash].isPay);\r\n        require(TicketPool[secretKey_D_hash].isPlay);\r\n        require(TicketPool[secretKey_D_hash].Result != 0);\r\n        \r\n        if(address(this).balance >= TicketPool[secretKey_D_hash].Result){\r\n            if (TicketPool[secretKey_D_hash].Buyer.send(TicketPool[secretKey_D_hash].Result)) {\r\n                TicketPool[secretKey_D_hash].isPay = true;\r\n                OwePay(secretKey_D_hash, TicketPool[secretKey_D_hash].Buyer, TicketPool[secretKey_D_hash].Result);\r\n            }\r\n        } \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"Drawer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawEther_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"TicketPool\",\"outputs\":[{\"name\":\"SecretKey_P\",\"type\":\"bytes32\"},{\"name\":\"isPlay\",\"type\":\"bool\"},{\"name\":\"isPay\",\"type\":\"bool\"},{\"name\":\"Result\",\"type\":\"uint256\"},{\"name\":\"Time\",\"type\":\"uint256\"},{\"name\":\"Buyer\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secretKey_D\",\"type\":\"bytes32\"}],\"name\":\"award\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"secretKey_D_hash\",\"type\":\"bytes32\"}],\"name\":\"getTicketTime\",\"outputs\":[{\"name\":\"Time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secretKey_D_hash\",\"type\":\"bytes32\"}],\"name\":\"chargeOwe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LimitBottom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secretKey_P\",\"type\":\"bytes32\"},{\"name\":\"secretKey_D_hash\",\"type\":\"bytes32\"}],\"name\":\"submit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bottom\",\"type\":\"uint256\"},{\"name\":\"_top\",\"type\":\"uint256\"}],\"name\":\"changeLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LimitTop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"drawer_\",\"type\":\"address\"}],\"name\":\"changeDrawer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"secretKey_D_hash\",\"type\":\"bytes32\"}],\"name\":\"getisPlay\",\"outputs\":[{\"name\":\"isplay\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"drawer_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"SecretKey_D_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"Bet_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"SecretKey_P\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"Player\",\"type\":\"address\"}],\"name\":\"SubmitTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"SecretKey_D_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"SecretKey_D\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"Buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Bird_Result\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"Game_Result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Result\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"SecretKey_D_hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"Buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Game_Result\",\"type\":\"uint256\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"SecretKey_D_hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"Buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Game_Result\",\"type\":\"uint256\"}],\"name\":\"Owe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"SecretKey_D_hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"Buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Game_Result\",\"type\":\"uint256\"}],\"name\":\"OwePay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"JungleScratch","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000049971cdda76374af56763e012f68c498d427a78d","Library":"","SwarmSource":"bzzr://0b4d778c53db79812598df7889bae30f7c9f2062ce687f51431d9027d6d5d5fb"}]}