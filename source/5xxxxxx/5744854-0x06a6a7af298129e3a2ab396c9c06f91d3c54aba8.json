{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts/Auction/ISaleClockAuction.sol\r\n\r\ncontract ISaleClockAuction {\r\n\r\n    function isSaleClockAuction() public returns(bool);\r\n\r\n\r\n    /// @dev Creates and begins a new auction.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of auction (in seconds).\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        address _seller\r\n    )\r\n    external;\r\n\r\n    /// @dev Updates lastSalePrice if seller is the nft contract\r\n    /// Otherwise, works the same as default bid method.\r\n    function bid(uint256 _tokenId)\r\n    external\r\n    payable;\r\n\r\n    function cancelAuction(uint256 _tokenId)\r\n    external;\r\n\r\n    // cancel all old auctions\r\n    function clearAll(address _seller, uint planetLimitation)\r\n    external;\r\n\r\n    // cancel an old auction for the token id\r\n    function clearOne(address _seller, uint256 _tokenId)\r\n    external;\r\n\r\n    function averageExpansionSalePrice(uint256 _rarity) external view returns (uint256);\r\n\r\n    function withdrawBalance() external;\r\n}\r\n\r\n// File: contracts/Common/ArrayArchiveTools.sol\r\n\r\ncontract ArrayArchiveTools {\r\n\r\n    function _splitUint40ToArray(uint256 _hash) internal pure returns (uint256[5] _array) {\r\n        for (uint i = 0; i < 5; i++) {\r\n            _array[i] = uint256(uint8(_hash >> (8 * i)));\r\n        }\r\n    }\r\n\r\n    function _mergeArrayToUint40(uint256[5] _array) internal pure returns (uint256 _hash) {\r\n        for (uint i = 0; i < 5; i++) {\r\n            _hash |= (_array[i] << (8 * i));\r\n        }\r\n    }\r\n\r\n    function _splitUint80ToArray(uint256 _hash) internal pure returns (uint256[5] _array) {\r\n        for (uint i = 0; i < 5; i++) {\r\n            _array[i] = uint256(uint16(_hash >> (16 * i)));\r\n        }\r\n    }\r\n\r\n    function _mergeArrayToUint80(uint256[5] _array) internal pure returns (uint256 _hash) {\r\n        for (uint i = 0; i < 5; i++) {\r\n            _hash |= (_array[i] << (16 * i));\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Common/MathTools.sol\r\n\r\ncontract MathTools {\r\n    function _divisionWithRound(uint _numerator, uint _denominator) internal pure returns (uint _r) {\r\n        _r = _numerator / _denominator;\r\n        if (_numerator % _denominator >= _denominator / 2) {\r\n            _r++;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Discovery/UniverseDiscoveryConstant.sol\r\n\r\n//TODO: run as separate contract\r\ncontract UniverseDiscoveryConstant {\r\n    //ships\r\n    uint256 internal constant MAX_RANKS_COUNT = 20;\r\n\r\n    //resources\r\n    uint256 internal constant MAX_ID_LIST_LENGTH = 5;\r\n}\r\n\r\n// File: contracts/PlanetExploration/IUniversePlanetExploration.sol\r\n\r\ncontract IUniversePlanetExploration is UniverseDiscoveryConstant {\r\n\r\n    function isUniversePlanetExploration() external returns(bool);\r\n\r\n    function explorePlanet(uint256 _rarity)\r\n    external\r\n    returns (\r\n        uint[MAX_ID_LIST_LENGTH] resourcesId,\r\n        uint[MAX_ID_LIST_LENGTH] resourcesVelocity\r\n    );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Access/Treasurer.sol\r\n\r\ncontract Treasurer is Ownable {\r\n    address public treasurer;\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyTreasurer() {\r\n        require(msg.sender == treasurer, \"Only treasurer\");\r\n        _;\r\n    }\r\n\r\n    function transferTreasurer(address _treasurer) public onlyOwner {\r\n        if (_treasurer != address(0)) {\r\n            treasurer = _treasurer;\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/Access/AccessControl.sol\r\n\r\ncontract AccessControl is Ownable, Treasurer, Pausable {\r\n\r\n    modifier onlyTeam() {\r\n        require(\r\n            msg.sender == owner ||\r\n            msg.sender == treasurer\r\n        , \"Only owner and treasure have access\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyTeam {\r\n        return super.pause();\r\n    }\r\n}\r\n\r\n// File: contracts/Common/Random.sol\r\n\r\n//TODO: Should be moved to separate library\r\ncontract Random {\r\n    uint internal saltForRandom;\r\n\r\n    function _rand() internal returns (uint256) {\r\n        uint256 lastBlockNumber = block.number - 1;\r\n\r\n        uint256 hashVal = uint256(blockhash(lastBlockNumber));\r\n\r\n        // This turns the input data into a 100-sided die\r\n        // by dividing by ceil(2 ^ 256 / 100).\r\n        uint256 factor = 1157920892373161954235709850086879078532699846656405640394575840079131296399;\r\n\r\n        saltForRandom += uint256(msg.sender) % 100 + uint256(uint256(hashVal) / factor);\r\n\r\n        return saltForRandom;\r\n    }\r\n\r\n    function _randRange(uint256 min, uint256 max) internal returns (uint256) {\r\n        return uint256(keccak256(_rand())) % (max - min + 1) + min;\r\n    }\r\n\r\n    function _randChance(uint percent) internal returns (bool) {\r\n        return _randRange(0, 100) < percent;\r\n    }\r\n\r\n    function _now() internal view returns (uint256) {\r\n        return now;\r\n    }\r\n}\r\n\r\n// File: contracts/Settings/IUniverseBalance.sol\r\n\r\ncontract IUniverseBalance {\r\n    function isUniverseBalance() external returns(bool);\r\n\r\n    function autoClearAuction() external returns(bool);\r\n\r\n    function getUIntValue(uint record) external view returns (uint);\r\n    function getUIntArray2Value(uint record) external view returns (uint[2]);\r\n    function getUIntArray3Value(uint record) external view returns (uint[3]);\r\n    function getUIntArray4Value(uint record) external view returns (uint[4]);\r\n\r\n    function getRankParamsValue(uint rankId) external view returns (uint[3]);\r\n    function getRankResourcesCountByRarity(uint rankId) external view returns (uint[4]);\r\n\r\n    function getGroupId(uint _x, uint _y) external view returns (uint);\r\n\r\n    function getResourcesQuantityByRarity(uint256 rarity) external pure returns (uint256[2]);\r\n}\r\n\r\n// File: contracts/Galaxy/UniverseGalaxyConstant.sol\r\n\r\n//TODO: run as separate contract\r\ncontract UniverseGalaxyConstant {\r\n    //map\r\n    uint256 internal constant SECTOR_X_MAX = 25;\r\n    uint256 internal constant SECTOR_Y_MAX = 40;\r\n\r\n    uint256 internal constant PLANETS_COUNT = 1000000;\r\n\r\n    uint256 internal constant SECTORS_COUNT = SECTOR_X_MAX * SECTOR_Y_MAX; // 1000\r\n\r\n    uint256 internal constant PLANETS_COUNT_PER_SECTOR = PLANETS_COUNT / SECTORS_COUNT; // 1000000 / 1000 = 1000\r\n\r\n    //resources\r\n    uint256 internal constant MAX_ID_LIST_LENGTH = 5;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n// File: contracts/Galaxy/IUniverseGalaxy.sol\r\n\r\ncontract IUniverseGalaxy is ERC721Basic, UniverseGalaxyConstant{\r\n\r\n    function getPlanet(uint256 _id) external view\r\n    returns (\r\n        uint256 rarity,\r\n        uint256 discovered,\r\n        uint256 sectorX,\r\n        uint256 sectorY,\r\n        uint256[MAX_ID_LIST_LENGTH] resourcesId,\r\n        uint256[MAX_ID_LIST_LENGTH] resourcesVelocity\r\n    );\r\n\r\n    function createSaleAuction(uint256 _planetId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration) external;\r\n\r\n    function findAvailableResource(address _owner, uint _rarity) external returns (int8);\r\n    function getDiscoveredPlanetsDensity(uint sectorX, uint sectorY) external view returns (uint);\r\n\r\n    function createPlanet(\r\n        address _owner,\r\n        uint256 _rarity,\r\n        uint256 _sectorX,\r\n        uint256 _sectorY,\r\n        uint256 _startPopulation\r\n    ) external returns(uint256);\r\n\r\n    function spendResources(address _owner, uint[MAX_ID_LIST_LENGTH] _resourcesId, uint[MAX_ID_LIST_LENGTH] _resourcesNeeded) external;\r\n\r\n    function spendResourceOnPlanet(address _owner, uint _planetId, uint _resourceId, uint _resourceValue) external;\r\n\r\n    function spendKnowledge(address _owner, uint _spentKnowledge) external;\r\n\r\n    function recountPlanetResourcesAndUserKnowledge(address _owner, uint256 _planetId) external;\r\n\r\n    function countPlanetsByRarityInGroup(uint _groupIndex, uint _rarity) external view returns (uint);\r\n\r\n    function countPlanetsByRarity(uint _rarity) external view returns (uint);\r\n\r\n    function checkWhetherEnoughPromoPlanet() external;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Whitelist.sol\r\n\r\n/**\r\n * @title Whitelist\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * @dev This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Whitelist is Ownable {\r\n  mapping(address => bool) public whitelist;\r\n\r\n  event WhitelistedAddressAdded(address addr);\r\n  event WhitelistedAddressRemoved(address addr);\r\n\r\n  /**\r\n   * @dev Throws if called by any account that's not whitelisted.\r\n   */\r\n  modifier onlyWhitelisted() {\r\n    require(whitelist[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev add an address to the whitelist\r\n   * @param addr address\r\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n   */\r\n  function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {\r\n    if (!whitelist[addr]) {\r\n      whitelist[addr] = true;\r\n      emit WhitelistedAddressAdded(addr);\r\n      success = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev add addresses to the whitelist\r\n   * @param addrs addresses\r\n   * @return true if at least one address was added to the whitelist,\r\n   * false if all addresses were already in the whitelist\r\n   */\r\n  function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\r\n    for (uint256 i = 0; i < addrs.length; i++) {\r\n      if (addAddressToWhitelist(addrs[i])) {\r\n        success = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address from the whitelist\r\n   * @param addr address\r\n   * @return true if the address was removed from the whitelist,\r\n   * false if the address wasn't in the whitelist in the first place\r\n   */\r\n  function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\r\n    if (whitelist[addr]) {\r\n      whitelist[addr] = false;\r\n      emit WhitelistedAddressRemoved(addr);\r\n      success = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev remove addresses from the whitelist\r\n   * @param addrs addresses\r\n   * @return true if at least one address was removed from the whitelist,\r\n   * false if all addresses weren't in the whitelist in the first place\r\n   */\r\n  function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\r\n    for (uint256 i = 0; i < addrs.length; i++) {\r\n      if (removeAddressFromWhitelist(addrs[i])) {\r\n        success = true;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n *  from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\r\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\r\n   *  than the magic value MUST result in the transaction being reverted.\r\n   *  Note: the contract address is always the message sender.\r\n   * @param _from The sending address\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is ERC721Basic {\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /**\r\n   * @dev Guarantees msg.sender is owner of the given token\r\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n   */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n   * @param _tokenId uint256 ID of the token to validate\r\n   */\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existance of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * @dev The zero address indicates there is no approved address.\r\n   * @dev There can only be one approved address per token at a given time.\r\n   * @dev Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      emit Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for a the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n   *  which is called upon a safe transfer, and return the magic value\r\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n   *  the transfer is reverted.\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n   *  which is called upon a safe transfer, and return the magic value\r\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n   *  the transfer is reverted.\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\r\n    address owner = ownerOf(_tokenId);\r\n    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * @dev Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * @dev Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * @dev Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n      emit Approval(_owner, address(0), _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * @dev The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is ERC721, ERC721BasicToken {\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  function ERC721Token(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() public view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() public view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * @dev Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * @dev Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * @dev Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * @dev Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * @dev Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Galaxy/UniverseGalaxyStore.sol\r\n\r\ncontract UniverseGalaxyStore is IUniverseGalaxy, ERC721Token, Whitelist, AccessControl, Random, MathTools, ArrayArchiveTools {\r\n    /*** EVENTS ***/\r\n    event PlanetCreated(\r\n        address indexed owner,\r\n        uint256 indexed planetId,\r\n        uint256 sectorX,\r\n        uint256 sectorY,\r\n        uint256 rarity,\r\n        uint256[MAX_ID_LIST_LENGTH] resourcesId,\r\n        uint256[MAX_ID_LIST_LENGTH] resourcesVelocity,\r\n        uint256 startPopulation\r\n    );\r\n\r\n    /*** DATA TYPES ***/\r\n\r\n    struct Planet {\r\n        uint256 rarity;\r\n        uint256 discovered;\r\n        uint256 updated;\r\n        uint256 sectorX;\r\n        uint256 sectorY;\r\n        uint[MAX_ID_LIST_LENGTH] resourcesId;\r\n        uint[MAX_ID_LIST_LENGTH] resourcesVelocity;\r\n        uint[MAX_ID_LIST_LENGTH] resourcesUpdated;\r\n    }\r\n\r\n    /*** STORAGE ***/\r\n\r\n    //    struct Planet {\r\n    //        uint48 discovered;\r\n    //        uint40 resourcesId;\r\n    //        uint40 resourcesVelocity;\r\n    //        uint8 sectorX;\r\n    //        uint8 sectorY;\r\n    //        uint8 rarity;\r\n    //    }\r\n    uint256[] public planets;\r\n\r\n    //    struct PlanetState {\r\n    //        uint48 updated;\r\n    //        uint40 resourcesId;\r\n    //        uint80 resourcesUpdated;\r\n    //    }\r\n    mapping (uint256 => uint256) planetStates;\r\n\r\n    // x => (y => discovered_planet_count)\r\n    mapping (uint => mapping ( uint => uint )) discoveredPlanetsCountMap;\r\n\r\n    // group index => rarity => discovered planet count\r\n    mapping (uint => mapping (uint => uint)) planetCountByRarityInGroups;\r\n\r\n    // rarity => discovered planet count in galaxy\r\n    mapping (uint => uint) planetCountByRarity;\r\n\r\n    IUniverseBalance public universeBalance;\r\n    IUniversePlanetExploration public universePlanetExploration;\r\n\r\n    function UniverseGalaxyStore() ERC721Token(\"0xUniverse\", \"PLANET\")\r\n    public { }\r\n\r\n    function _getPlanet(uint256 _id)\r\n    internal view\r\n    returns(Planet memory _planet)\r\n    {\r\n        uint256 planet = planets[_id];\r\n        uint256 planetState = planetStates[_id];\r\n\r\n        _planet.discovered = uint256(uint48(planet));\r\n        _planet.resourcesId = _splitUint40ToArray(uint40(planet >> 48));\r\n        _planet.resourcesVelocity = _splitUint40ToArray(uint40(planet >> 88));\r\n        _planet.sectorX = uint256(uint8(planet >> 128));\r\n        _planet.sectorY = uint256(uint8(planet >> 136));\r\n        _planet.rarity = uint256(uint8(planet >> 144));\r\n\r\n        _planet.updated = uint256(uint48(planetState));\r\n        _planet.resourcesUpdated = _splitUint80ToArray(uint80(planetState >> 88));\r\n    }\r\n\r\n    function _convertPlanetToPlanetHash(Planet memory _planet)\r\n    internal\r\n    pure\r\n    returns(uint256 _planetHash)\r\n    {\r\n        _planetHash = _planet.discovered;\r\n        _planetHash |= _mergeArrayToUint40(_planet.resourcesId) << 48;\r\n        _planetHash |= _mergeArrayToUint40(_planet.resourcesVelocity) << 88;\r\n        _planetHash |= _planet.sectorX << 128;\r\n        _planetHash |= _planet.sectorY << 136;\r\n        _planetHash |= uint256(_planet.rarity) << 144;\r\n    }\r\n\r\n    function _convertPlanetToPlanetStateHash(Planet memory _planet)\r\n    internal\r\n    pure\r\n    returns(uint256 _planetStateHash)\r\n    {\r\n        _planetStateHash = _planet.updated;\r\n        _planetStateHash |= _mergeArrayToUint40(_planet.resourcesId) << 48;\r\n        _planetStateHash |= _mergeArrayToUint80(_planet.resourcesUpdated) << 88;\r\n    }\r\n\r\n    function getDiscoveredPlanetsDensity(uint sectorX, uint sectorY) external view returns (uint) {\r\n        uint discoveredPlanetsCount = discoveredPlanetsCountMap[sectorX][sectorY];\r\n        // жёсткая проверка на количество планет в секторе и защита от переполнения переменной\r\n        if (discoveredPlanetsCount >= PLANETS_COUNT_PER_SECTOR) {\r\n            return 0;\r\n        }\r\n        return 100 - (discoveredPlanetsCount * 100) / PLANETS_COUNT_PER_SECTOR;\r\n    }\r\n\r\n    function countPlanetsByRarityInGroup(uint _groupIndex, uint _rarity) external view returns (uint){\r\n        return planetCountByRarityInGroups[_groupIndex][_rarity];\r\n    }\r\n\r\n    function countPlanetsByRarity(uint _rarity) external view returns (uint){\r\n        return planetCountByRarity[_rarity];\r\n    }\r\n\r\n    function setUniverseBalanceAddress(address _address) external onlyOwner {\r\n        IUniverseBalance candidateContract = IUniverseBalance(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect\r\n        // https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\r\n        require(candidateContract.isUniverseBalance(), \"Incorrect address param\");\r\n\r\n        // Set the new contract address\r\n        universeBalance = candidateContract;\r\n    }\r\n\r\n    function setUniversePlanetExplorationAddress(address _address) external onlyOwner {\r\n        IUniversePlanetExploration candidateContract = IUniversePlanetExploration(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect\r\n        // https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\r\n        require(candidateContract.isUniversePlanetExploration(), \"Incorrect address param\");\r\n\r\n        // Set the new contract address\r\n        universePlanetExploration = candidateContract;\r\n    }\r\n\r\n    function getPlanet(uint256 _id)\r\n    external\r\n    view\r\n    returns (\r\n        uint256 rarity,\r\n        uint256 discovered,\r\n        uint256 sectorX,\r\n        uint256 sectorY,\r\n        uint256[MAX_ID_LIST_LENGTH] resourcesId,\r\n        uint256[MAX_ID_LIST_LENGTH] resourcesVelocity\r\n    ) {\r\n        Planet memory pl = _getPlanet(_id);\r\n\r\n        rarity = pl.rarity;\r\n        discovered = pl.discovered;\r\n        sectorX = pl.sectorX;\r\n        sectorY = pl.sectorY;\r\n        resourcesId = pl.resourcesId;\r\n        resourcesVelocity = pl.resourcesVelocity;\r\n    }\r\n\r\n    function _getOwnedTokensCount(address _owner) internal view returns (uint256){\r\n        return ownedTokens[_owner].length;\r\n    }\r\n\r\n    function _getOwnedTokensByIndex(address _owner, uint256 _ownerTokenIndex) internal view returns (uint256){\r\n        return ownedTokens[_owner][_ownerTokenIndex];\r\n    }\r\n\r\n    function findAvailableResource(address _owner, uint _rarity) external returns (int8) {\r\n        uint ownedPlanetsCount = _getOwnedTokensCount(_owner);\r\n\r\n        uint[] memory resourceList = new uint[](ownedPlanetsCount * MAX_ID_LIST_LENGTH);\r\n\r\n        uint[2] memory resourcesOrderByRarity = universeBalance.getResourcesQuantityByRarity(_rarity);\r\n        uint firstResourceId = resourcesOrderByRarity[0];\r\n        uint lastResourceId = resourcesOrderByRarity[0] + resourcesOrderByRarity[1] - 1;\r\n\r\n        uint maxResourceListElement = 0;\r\n        for (uint i = 0; i < ownedPlanetsCount; i++) {\r\n            Planet memory planet = _getPlanet( _getOwnedTokensByIndex(_owner, i) );\r\n\r\n            for (uint k = 1; k < planet.resourcesId.length; k++) {\r\n                uint resourceId = planet.resourcesId[k];\r\n                if(resourceId == 0) break;\r\n\r\n                if(resourceId >= firstResourceId && resourceId <= lastResourceId) {\r\n                    resourceList[maxResourceListElement] = resourceId; // замена resourceList.push(j);\r\n                    maxResourceListElement++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (maxResourceListElement > 0) { // выбираем из них один случайный\r\n            return int8(resourceList[_randRange(0, maxResourceListElement - 1)]);\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    function createPlanet(\r\n        address _owner,\r\n        uint256 _rarity,\r\n        uint256 _sectorX,\r\n        uint256 _sectorY,\r\n        uint256 _startPopulation\r\n    )\r\n    external\r\n    onlyWhitelisted\r\n    returns (uint256)\r\n    {\r\n        Planet memory planet = _createPlanetWithRandomResources(_rarity, _sectorX, _sectorY, _startPopulation);\r\n        return _savePlanet(_owner, planet);\r\n    }\r\n\r\n    function _savePlanet(\r\n        address _owner,\r\n        Planet _planet\r\n    )\r\n    internal\r\n    returns (uint)\r\n    {\r\n        uint256 planet = _convertPlanetToPlanetHash(_planet);\r\n        uint256 planetState = _convertPlanetToPlanetStateHash(_planet);\r\n\r\n        uint256 newPlanetId = planets.push(planet) - 1;\r\n        planetStates[newPlanetId] = planetState;\r\n\r\n        require(newPlanetId < PLANETS_COUNT, \"No more planets\");\r\n\r\n        emit PlanetCreated(\r\n            _owner,\r\n            newPlanetId,\r\n            _planet.sectorX,\r\n            _planet.sectorY,\r\n            _planet.rarity,\r\n            _planet.resourcesId,\r\n            _planet.resourcesVelocity,\r\n            _planet.resourcesUpdated[0]\r\n        );\r\n\r\n        discoveredPlanetsCountMap[_planet.sectorX][_planet.sectorY] += 1;\r\n\r\n        if (_planet.rarity == 3) {\r\n            uint groupIndex = universeBalance.getGroupId(_planet.sectorX, _planet.sectorY);\r\n            planetCountByRarityInGroups[groupIndex][3] += 1;\r\n        }\r\n\r\n        if (_planet.rarity == 4) {\r\n            planetCountByRarity[4] += 1;\r\n        }\r\n\r\n        _mint(_owner, newPlanetId);\r\n\r\n        return newPlanetId;\r\n    }\r\n\r\n    function _createPlanetWithRandomResources(uint _rarity, uint _sectorX, uint _sectorY, uint _startPopulation)\r\n    internal\r\n    returns (Planet memory _planet)\r\n    {\r\n        uint[MAX_ID_LIST_LENGTH] memory resourcesId;\r\n        uint[MAX_ID_LIST_LENGTH] memory resourcesVelocity;\r\n        (resourcesId, resourcesVelocity) = universePlanetExploration.explorePlanet(_rarity);\r\n\r\n        uint[MAX_ID_LIST_LENGTH] memory resourcesUpdated;\r\n        resourcesUpdated[0] = _startPopulation;\r\n\r\n        _planet = Planet({\r\n            rarity: _rarity,\r\n            discovered: uint256(now),\r\n            updated: uint256(now),\r\n            sectorX: _sectorX,\r\n            sectorY: _sectorY,\r\n            resourcesId: resourcesId,\r\n            resourcesVelocity: resourcesVelocity,\r\n            resourcesUpdated: resourcesUpdated\r\n            });\r\n    }\r\n}\r\n\r\n// File: contracts/Galaxy/UniverseAuction.sol\r\n\r\ncontract UniverseAuction is UniverseGalaxyStore {\r\n\r\n    ISaleClockAuction public saleAuction;\r\n\r\n    function setSaleAuctionAddress(address _address) external onlyOwner {\r\n        ISaleClockAuction candidateContract = ISaleClockAuction(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\r\n        require(candidateContract.isSaleClockAuction(), \"Incorrect address param\");\r\n\r\n        // Set the new contract address\r\n        saleAuction = candidateContract;\r\n    }\r\n\r\n    function createSaleAuction(\r\n        uint256 _planetId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        if (universeBalance.autoClearAuction()) saleAuction.clearOne(msg.sender, _planetId);\r\n        // Auction contract checks input sizes\r\n        // If planet is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(ownerOf(_planetId) == msg.sender, \"Not owner\");\r\n\r\n        approve(saleAuction, _planetId);\r\n        // Sale auction throws if inputs are invalid and clears\r\n        // transfer approval after escrowing the planet.\r\n        saleAuction.createAuction(\r\n            _planetId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function withdrawAuctionBalances() external onlyTeam {\r\n        saleAuction.withdrawBalance();\r\n    }\r\n}\r\n\r\n// File: contracts/Galaxy/UniverseGalaxyState.sol\r\n\r\ncontract UniverseGalaxyState is UniverseAuction {\r\n\r\n    uint internal constant SECONDS_IN_DAY = 60 * 60 * 24;\r\n\r\n    mapping (address => uint) public ownerToKnowledge;\r\n    mapping (address => uint) public lastKnowledgeSpentDateByOwner;\r\n\r\n    function getPlanetUpdatedResources(uint256 _id)\r\n    external\r\n    view\r\n    returns (\r\n        uint256 updated,\r\n        uint256[MAX_ID_LIST_LENGTH] resourcesId,\r\n        uint256[MAX_ID_LIST_LENGTH] resourcesUpdated\r\n    ) {\r\n        Planet memory pl = _getPlanet(_id);\r\n\r\n        updated = pl.updated;\r\n        resourcesId = pl.resourcesId;\r\n        resourcesUpdated = pl.resourcesUpdated;\r\n    }\r\n\r\n    function spendResourceOnPlanet(\r\n        address _owner,\r\n        uint _planetId,\r\n        uint _resourceId,\r\n        uint _resourceValue\r\n    )\r\n    external\r\n    onlyWhitelisted\r\n    {\r\n        require(_owner != address(0), \"Owner param should be defined\");\r\n        require(_resourceValue > 0, \"ResourceValue param should be bigger that zero\");\r\n\r\n        Planet memory planet = _getPlanet(_planetId);\r\n        planet = _recountPlanetStateAndUpdateUserKnowledge(_owner, planet);\r\n\r\n        require(planet.resourcesUpdated[_resourceId] >= _resourceValue, \"Resource current should be bigger that ResourceValue\");\r\n\r\n        planet.resourcesUpdated[_resourceId] -= _resourceValue;\r\n        _updatePlanetStateHash(_planetId, planet);\r\n    }\r\n\r\n    function spendResources(\r\n        address _owner,\r\n        uint[MAX_ID_LIST_LENGTH] _resourcesId,\r\n        uint[MAX_ID_LIST_LENGTH] _resourcesNeeded\r\n    ) external onlyWhitelisted {\r\n        uint ownedPlanetsCount = _getOwnedTokensCount(_owner);\r\n\r\n        for (uint j = 0; j < _resourcesId.length; j++) { // 0-4\r\n            uint resourceId = _resourcesId[j];\r\n            uint resourceNeeded = _resourcesNeeded[j];\r\n\r\n            if (resourceNeeded == 0) { continue; }\r\n\r\n            for (uint i = 0; i < ownedPlanetsCount; i++) { // 0-n\r\n                if (resourceNeeded == 0) { break; }\r\n\r\n                uint planetId = _getOwnedTokensByIndex(_owner, i);\r\n                Planet memory planet = _getPlanet(planetId);\r\n\r\n                uint foundResourceIndex = 9999;\r\n\r\n                for (uint k = 0; k < planet.resourcesId.length; k++) { //0-4\r\n                    if (resourceId == planet.resourcesId[k]) {\r\n                        foundResourceIndex = k;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if(foundResourceIndex == 9999) {continue;}\r\n\r\n                planet = _recountPlanetStateAndUpdateUserKnowledge(_owner, planet);\r\n                if (planet.resourcesUpdated[foundResourceIndex] > 0) {\r\n                    if (planet.resourcesUpdated[foundResourceIndex] >= resourceNeeded) {\r\n                        planet.resourcesUpdated[foundResourceIndex] -= resourceNeeded;\r\n                        resourceNeeded = 0;\r\n                    } else {\r\n                        resourceNeeded -= planet.resourcesUpdated[foundResourceIndex];\r\n                        planet.resourcesUpdated[foundResourceIndex] = 0;\r\n                    }\r\n                }\r\n                _updatePlanetStateHash(planetId, planet);\r\n\r\n            }\r\n\r\n            if (resourceNeeded > 0) {\r\n                revert(\"NotEnoughResources\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function spendKnowledge(address _owner, uint _spentKnowledge) external onlyWhitelisted {\r\n        if (ownerToKnowledge[_owner] < _spentKnowledge) {\r\n            uint balanceVelocity = universeBalance.getUIntValue(/* \"settings_time_velocity\" */ 34);\r\n\r\n            uint spentKnowledge = _spentKnowledge * SECONDS_IN_DAY; // защита от потерь при округлении\r\n\r\n            uint knowledge = ownerToKnowledge[_owner] * SECONDS_IN_DAY;\r\n\r\n            uint ownedPlanetsCount = _getOwnedTokensCount(_owner);\r\n\r\n            bool enoughKnowledge = false;\r\n\r\n            for (uint i = 0; i < ownedPlanetsCount; i++) {\r\n                Planet memory planet = _getPlanet( _getOwnedTokensByIndex(_owner, i) );\r\n\r\n                uint interval = (_now() - _getLastKnowledgeUpdateForPlanet(_owner, planet)) * balanceVelocity;\r\n                knowledge += (planet.resourcesUpdated[0] + _divisionWithRound(planet.resourcesVelocity[0] * interval, 2 * SECONDS_IN_DAY))\r\n                    * universeBalance.getUIntValue(/* \"planets_knowledgePerPeoplePerDay\" */17)\r\n                    * interval;\r\n\r\n                if (knowledge >= spentKnowledge) {\r\n                    enoughKnowledge = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if(!enoughKnowledge) {\r\n                revert(\"NotEnoughKnowledge\");\r\n            }\r\n        }\r\n\r\n        ownerToKnowledge[_owner] = 0;\r\n        lastKnowledgeSpentDateByOwner[_owner] = _now();\r\n    }\r\n\r\n    // Only for test purpose\r\n    function getCurrentKnowledgeOfOwner(address _owner) external view returns(uint) {\r\n        uint balanceVelocity = universeBalance.getUIntValue(/* \"settings_time_velocity\" */ 34);\r\n\r\n        uint knowledge = ownerToKnowledge[_owner] * SECONDS_IN_DAY;\r\n\r\n        uint ownedPlanetsCount = _getOwnedTokensCount(_owner);\r\n\r\n        for (uint i = 0; i < ownedPlanetsCount; i++) {\r\n            Planet memory planet = _getPlanet( _getOwnedTokensByIndex(_owner, i) );\r\n\r\n            uint interval = (_now() - _getLastKnowledgeUpdateForPlanet(_owner, planet)) * balanceVelocity;\r\n            knowledge += (planet.resourcesUpdated[0] + _divisionWithRound(planet.resourcesVelocity[0] * interval, 2 * SECONDS_IN_DAY))\r\n                * universeBalance.getUIntValue(/* \"planets_knowledgePerPeoplePerDay\" */17)\r\n                * interval;\r\n        }\r\n\r\n        return _divisionWithRound(knowledge, SECONDS_IN_DAY);\r\n    }\r\n\r\n    function recountPlanetResourcesAndUserKnowledge(address _owner, uint256 _planetId) external onlyWhitelisted {\r\n        Planet memory planet = _getPlanet(_planetId);\r\n        planet = _recountPlanetStateAndUpdateUserKnowledge(_owner, planet);\r\n        _updatePlanetStateHash(_planetId, planet);\r\n    }\r\n\r\n    function _updatePlanetStateHash(uint256 _planetID, Planet memory _planet) internal {\r\n        _planet.updated = _now();\r\n\r\n        uint256 planetState = _convertPlanetToPlanetStateHash(_planet);\r\n        planetStates[_planetID] = planetState;\r\n    }\r\n\r\n    function _getLastKnowledgeUpdateForPlanet(address _owner, Planet memory _planet) internal view returns (uint256) {\r\n        return ((_planet.updated > lastKnowledgeSpentDateByOwner[_owner]) ? _planet.updated : lastKnowledgeSpentDateByOwner[_owner]);\r\n    }\r\n\r\n    function _recountPlanetStateAndUpdateUserKnowledge(address _owner, Planet memory _planet) internal returns (Planet) {\r\n        uint balanceVelocity = universeBalance.getUIntValue(/* \"settings_time_velocity\" */ 34);\r\n\r\n        // update knowledge\r\n        uint intervalForKnowledge = (_now() - _getLastKnowledgeUpdateForPlanet(_owner, _planet)) * balanceVelocity;\r\n        uint knowledge = (_planet.resourcesUpdated[0] + _divisionWithRound(_planet.resourcesVelocity[0] * intervalForKnowledge, 2 * SECONDS_IN_DAY))\r\n            * universeBalance.getUIntValue(/* \"planets_knowledgePerPeoplePerDay\" */ 17)\r\n            * intervalForKnowledge;\r\n\r\n        ownerToKnowledge[_owner] += _divisionWithRound(knowledge, SECONDS_IN_DAY);\r\n\r\n\r\n        // update resources\r\n        uint interval = (_now() - _planet.updated) * balanceVelocity;\r\n\r\n        uint resourcesMultiplierMAX = universeBalance.getUIntValue(/* \"planets_resourcesMaxModifier\" */ 18);\r\n\r\n        // начал j с 0, чтобы и на людей ограничение распространялось. -1 вроде был лишним, там строго меньше сравнение\r\n        for (uint j = 0; j < _planet.resourcesVelocity.length; j++) {\r\n            if (_planet.resourcesVelocity[j] == 0) { continue; }\r\n\r\n            _planet.resourcesUpdated[j] += _divisionWithRound(_planet.resourcesVelocity[j] * interval, SECONDS_IN_DAY);\r\n\r\n            uint maxResourceAmount = _planet.resourcesVelocity[j] * resourcesMultiplierMAX;\r\n            if (_planet.resourcesUpdated[j] > maxResourceAmount) {\r\n                _planet.resourcesUpdated[j] = maxResourceAmount;\r\n            }\r\n        }\r\n\r\n        return _planet;\r\n    }\r\n\r\n    function getPlanetCurrentResources(uint _planetId) external view returns (uint[MAX_ID_LIST_LENGTH]) {\r\n        uint balanceVelocity = universeBalance.getUIntValue(/* \"settings_time_velocity\" */ 34);\r\n\r\n        Planet memory planet = _getPlanet(_planetId);\r\n\r\n        uint interval = (_now() - planet.updated) * balanceVelocity;\r\n\r\n        uint[MAX_ID_LIST_LENGTH] memory velocities = planet.resourcesVelocity;\r\n\r\n        uint resourcesMultiplierMAX = universeBalance.getUIntValue(/* \"planets_resourcesMaxModifier\" */ 18);\r\n\r\n        // начал j с 0, чтобы и на людей ограничение распространялось. -1 вроде был лишним, там строго меньше сравнение\r\n        for (uint j = 0; j < velocities.length; j++) {\r\n            if (velocities[j] == 0) { continue; }\r\n\r\n            planet.resourcesUpdated[j] += _divisionWithRound(planet.resourcesVelocity[j] * interval, SECONDS_IN_DAY);\r\n\r\n            uint maxResourceAmount = planet.resourcesVelocity[j] * resourcesMultiplierMAX;\r\n            if (planet.resourcesUpdated[j] > maxResourceAmount) {\r\n                planet.resourcesUpdated[j] = maxResourceAmount;\r\n            }\r\n        }\r\n\r\n        return planet.resourcesUpdated;\r\n    }\r\n}\r\n\r\n// File: contracts/Galaxy/UniverseGalaxy.sol\r\n\r\ncontract UniverseGalaxy is UniverseGalaxyState {\r\n\r\n    uint256 public constant PROMO_PLANETS_LIMIT = 10000;\r\n\r\n    uint256 public promoCreatedCount;\r\n\r\n    function UniverseGalaxy() public {\r\n        paused = true;\r\n        transferTreasurer(owner);\r\n    }\r\n\r\n    function initialize(address _earthOwner) external onlyOwner {\r\n        require(planets.length == 0, \"Earth was created\");\r\n\r\n        uint[2] memory earthSector = universeBalance.getUIntArray2Value(/* \"earth_planet_sector\" */ 20);\r\n\r\n        uint[3] memory earthResourcesId = universeBalance.getUIntArray3Value(/* \"earth_planet_resources_m_keys\" */ 21);\r\n        uint[3] memory earthResourcesVelocity = universeBalance.getUIntArray3Value(/* \"earth_planet_resources_m_values\" */ 22);\r\n        uint[3] memory earthResourcesUpdated = universeBalance.getUIntArray3Value(/* \"earth_planet_resourcesUpdated_m_values\" */ 24);\r\n\r\n        Planet memory earth = Planet({\r\n            rarity: 3,\r\n            discovered: uint256(now),\r\n            updated: uint256(now),\r\n            sectorX: earthSector[0],\r\n            sectorY: earthSector[1],\r\n            resourcesId: [earthResourcesId[0], earthResourcesId[1], earthResourcesId[2], 0, 0],\r\n            resourcesVelocity: [earthResourcesVelocity[0], earthResourcesVelocity[1], earthResourcesVelocity[2], 0, 0],\r\n            resourcesUpdated: [earthResourcesUpdated[0], earthResourcesUpdated[1], earthResourcesUpdated[2], 0, 0]\r\n            });\r\n\r\n        _savePlanet(_earthOwner, earth);\r\n    }\r\n\r\n    function checkWhetherEnoughPromoPlanet()\r\n    external\r\n    onlyWhitelisted\r\n    {\r\n        promoCreatedCount++;\r\n\r\n        require( promoCreatedCount < PROMO_PLANETS_LIMIT, \"Promo planet limit is reached\" );\r\n    }\r\n\r\n    function() external payable onlyWhitelisted {\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        require(saleAuction != address(0), \"SaleClock contract should be defined\");\r\n        require(universeBalance != address(0), \"Balance contract should be defined\");\r\n\r\n        // Actually unpause the contract.\r\n        super.unpause();\r\n    }\r\n\r\n    function withdrawBalance() external onlyTreasurer {\r\n        uint256 balance = address(this).balance;\r\n\r\n        treasurer.transfer(balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_planetId\",\"type\":\"uint256\"},{\"name\":\"_resourceId\",\"type\":\"uint256\"},{\"name\":\"_resourceValue\",\"type\":\"uint256\"}],\"name\":\"spendResourceOnPlanet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"planets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"universePlanetExploration\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPlanet\",\"outputs\":[{\"name\":\"rarity\",\"type\":\"uint256\"},{\"name\":\"discovered\",\"type\":\"uint256\"},{\"name\":\"sectorX\",\"type\":\"uint256\"},{\"name\":\"sectorY\",\"type\":\"uint256\"},{\"name\":\"resourcesId\",\"type\":\"uint256[5]\"},{\"name\":\"resourcesVelocity\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerToKnowledge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_planetId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_planetId\",\"type\":\"uint256\"}],\"name\":\"getPlanetCurrentResources\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rarity\",\"type\":\"uint256\"}],\"name\":\"countPlanetsByRarity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUniverseBalanceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getCurrentKnowledgeOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_treasurer\",\"type\":\"address\"}],\"name\":\"transferTreasurer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastKnowledgeSpentDateByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sectorX\",\"type\":\"uint256\"},{\"name\":\"sectorY\",\"type\":\"uint256\"}],\"name\":\"getDiscoveredPlanetsDensity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"universeBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_rarity\",\"type\":\"uint256\"}],\"name\":\"findAvailableResource\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUniversePlanetExplorationAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_planetId\",\"type\":\"uint256\"}],\"name\":\"recountPlanetResourcesAndUserKnowledge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPlanetUpdatedResources\",\"outputs\":[{\"name\":\"updated\",\"type\":\"uint256\"},{\"name\":\"resourcesId\",\"type\":\"uint256[5]\"},{\"name\":\"resourcesUpdated\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMO_PLANETS_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_earthOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_rarity\",\"type\":\"uint256\"},{\"name\":\"_sectorX\",\"type\":\"uint256\"},{\"name\":\"_sectorY\",\"type\":\"uint256\"},{\"name\":\"_startPopulation\",\"type\":\"uint256\"}],\"name\":\"createPlanet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_resourcesId\",\"type\":\"uint256[5]\"},{\"name\":\"_resourcesNeeded\",\"type\":\"uint256[5]\"}],\"name\":\"spendResources\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_groupIndex\",\"type\":\"uint256\"},{\"name\":\"_rarity\",\"type\":\"uint256\"}],\"name\":\"countPlanetsByRarityInGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkWhetherEnoughPromoPlanet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spentKnowledge\",\"type\":\"uint256\"}],\"name\":\"spendKnowledge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasurer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"planetId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sectorX\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sectorY\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rarity\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"resourcesId\",\"type\":\"uint256[5]\"},{\"indexed\":false,\"name\":\"resourcesVelocity\",\"type\":\"uint256[5]\"},{\"indexed\":false,\"name\":\"startPopulation\",\"type\":\"uint256\"}],\"name\":\"PlanetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"UniverseGalaxy","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://cc930dfb63da67c2f11234443ecfc4eb23d21eebbbcec6ea66063eba28a673cb"}]}