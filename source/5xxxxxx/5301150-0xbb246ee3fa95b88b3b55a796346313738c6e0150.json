{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract DigixConstants {\r\n  /// general constants\r\n  uint256 constant SECONDS_IN_A_DAY = 24 * 60 * 60;\r\n\r\n  /// asset events\r\n  uint256 constant ASSET_EVENT_CREATED_VENDOR_ORDER = 1;\r\n  uint256 constant ASSET_EVENT_CREATED_TRANSFER_ORDER = 2;\r\n  uint256 constant ASSET_EVENT_CREATED_REPLACEMENT_ORDER = 3;\r\n  uint256 constant ASSET_EVENT_FULFILLED_VENDOR_ORDER = 4;\r\n  uint256 constant ASSET_EVENT_FULFILLED_TRANSFER_ORDER = 5;\r\n  uint256 constant ASSET_EVENT_FULFILLED_REPLACEMENT_ORDER = 6;\r\n  uint256 constant ASSET_EVENT_MINTED = 7;\r\n  uint256 constant ASSET_EVENT_MINTED_REPLACEMENT = 8;\r\n  uint256 constant ASSET_EVENT_RECASTED = 9;\r\n  uint256 constant ASSET_EVENT_REDEEMED = 10;\r\n  uint256 constant ASSET_EVENT_FAILED_AUDIT = 11;\r\n  uint256 constant ASSET_EVENT_ADMIN_FAILED = 12;\r\n  uint256 constant ASSET_EVENT_REMINTED = 13;\r\n\r\n  /// roles\r\n  uint256 constant ROLE_ZERO_ANYONE = 0;\r\n  uint256 constant ROLE_ROOT = 1;\r\n  uint256 constant ROLE_VENDOR = 2;\r\n  uint256 constant ROLE_XFERAUTH = 3;\r\n  uint256 constant ROLE_POPADMIN = 4;\r\n  uint256 constant ROLE_CUSTODIAN = 5;\r\n  uint256 constant ROLE_AUDITOR = 6;\r\n  uint256 constant ROLE_MARKETPLACE_ADMIN = 7;\r\n  uint256 constant ROLE_KYC_ADMIN = 8;\r\n  uint256 constant ROLE_FEES_ADMIN = 9;\r\n  uint256 constant ROLE_DOCS_UPLOADER = 10;\r\n  uint256 constant ROLE_KYC_RECASTER = 11;\r\n  uint256 constant ROLE_FEES_DISTRIBUTION_ADMIN = 12;\r\n\r\n  /// states\r\n  uint256 constant STATE_ZERO_UNDEFINED = 0;\r\n  uint256 constant STATE_CREATED = 1;\r\n  uint256 constant STATE_VENDOR_ORDER = 2;\r\n  uint256 constant STATE_TRANSFER = 3;\r\n  uint256 constant STATE_CUSTODIAN_DELIVERY = 4;\r\n  uint256 constant STATE_MINTED = 5;\r\n  uint256 constant STATE_AUDIT_FAILURE = 6;\r\n  uint256 constant STATE_REPLACEMENT_ORDER = 7;\r\n  uint256 constant STATE_REPLACEMENT_DELIVERY = 8;\r\n  uint256 constant STATE_RECASTED = 9;\r\n  uint256 constant STATE_REDEEMED = 10;\r\n  uint256 constant STATE_ADMIN_FAILURE = 11;\r\n\r\n  /// interactive contracts\r\n  bytes32 constant CONTRACT_INTERACTIVE_ASSETS_EXPLORER = \"i:asset:explorer\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_DIGIX_DIRECTORY = \"i:directory\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE = \"i:mp\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_ADMIN = \"i:mpadmin\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_POPADMIN = \"i:popadmin\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_PRODUCTS_LIST = \"i:products\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_TOKEN = \"i:token\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_BULK_WRAPPER = \"i:bulk-wrapper\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_TOKEN_CONFIG = \"i:token:config\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_TOKEN_INFORMATION = \"i:token:information\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_INFORMATION = \"i:mp:information\";\r\n  bytes32 constant CONTRACT_INTERACTIVE_IDENTITY = \"i:identity\";\r\n\r\n  /// controller contracts\r\n  bytes32 constant CONTRACT_CONTROLLER_ASSETS = \"c:asset\";\r\n  bytes32 constant CONTRACT_CONTROLLER_ASSETS_RECAST = \"c:asset:recast\";\r\n  bytes32 constant CONTRACT_CONTROLLER_ASSETS_EXPLORER = \"c:explorer\";\r\n  bytes32 constant CONTRACT_CONTROLLER_DIGIX_DIRECTORY = \"c:directory\";\r\n  bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE = \"c:mp\";\r\n  bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE_ADMIN = \"c:mpadmin\";\r\n  bytes32 constant CONTRACT_CONTROLLER_PRODUCTS_LIST = \"c:products\";\r\n\r\n  bytes32 constant CONTRACT_CONTROLLER_TOKEN_APPROVAL = \"c:token:approval\";\r\n  bytes32 constant CONTRACT_CONTROLLER_TOKEN_CONFIG = \"c:token:config\";\r\n  bytes32 constant CONTRACT_CONTROLLER_TOKEN_INFO = \"c:token:info\";\r\n  bytes32 constant CONTRACT_CONTROLLER_TOKEN_TRANSFER = \"c:token:transfer\";\r\n\r\n  bytes32 constant CONTRACT_CONTROLLER_JOB_ID = \"c:jobid\";\r\n  bytes32 constant CONTRACT_CONTROLLER_IDENTITY = \"c:identity\";\r\n\r\n  /// storage contracts\r\n  bytes32 constant CONTRACT_STORAGE_ASSETS = \"s:asset\";\r\n  bytes32 constant CONTRACT_STORAGE_ASSET_EVENTS = \"s:asset:events\";\r\n  bytes32 constant CONTRACT_STORAGE_DIGIX_DIRECTORY = \"s:directory\";\r\n  bytes32 constant CONTRACT_STORAGE_MARKETPLACE = \"s:mp\";\r\n  bytes32 constant CONTRACT_STORAGE_PRODUCTS_LIST = \"s:products\";\r\n  bytes32 constant CONTRACT_STORAGE_GOLD_TOKEN = \"s:goldtoken\";\r\n  bytes32 constant CONTRACT_STORAGE_JOB_ID = \"s:jobid\";\r\n  bytes32 constant CONTRACT_STORAGE_IDENTITY = \"s:identity\";\r\n\r\n  /// service contracts\r\n  bytes32 constant CONTRACT_SERVICE_TOKEN_DEMURRAGE = \"sv:tdemurrage\";\r\n  bytes32 constant CONTRACT_SERVICE_MARKETPLACE = \"sv:mp\";\r\n  bytes32 constant CONTRACT_SERVICE_DIRECTORY = \"sv:directory\";\r\n\r\n  /// fees distributors\r\n  bytes32 constant CONTRACT_DEMURRAGE_FEES_DISTRIBUTOR = \"fees:distributor:demurrage\";\r\n  bytes32 constant CONTRACT_RECAST_FEES_DISTRIBUTOR = \"fees:distributor:recast\";\r\n  bytes32 constant CONTRACT_TRANSFER_FEES_DISTRIBUTOR = \"fees:distributor:transfer\";\r\n}\r\n\r\ncontract ContractResolver {\r\n  address public owner;\r\n  bool public locked;\r\n  function init_register_contract(bytes32 _key, address _contract_address) public returns (bool _success);\r\n  function unregister_contract(bytes32 _key) public returns (bool _success);\r\n  function get_contract(bytes32 _key) public constant returns (address _contract);\r\n}\r\n\r\ncontract ResolverClient {\r\n\r\n  /// The address of the resolver contract for this project\r\n  address public resolver;\r\n  /// The key to identify this contract\r\n  bytes32 public key;\r\n\r\n  /// Make our own address available to us as a constant\r\n  address public CONTRACT_ADDRESS;\r\n\r\n  /// Function modifier to check if msg.sender corresponds to the resolved address of a given key\r\n  /// @param _contract The resolver key\r\n  modifier if_sender_is(bytes32 _contract) {\r\n    require(msg.sender == ContractResolver(resolver).get_contract(_contract));\r\n    _;\r\n  }\r\n\r\n  /// Function modifier to check resolver's locking status.\r\n  modifier unless_resolver_is_locked() {\r\n    require(is_locked() == false);\r\n    _;\r\n  }\r\n\r\n  /// @dev Initialize new contract\r\n  /// @param _key the resolver key for this contract\r\n  /// @return _success if the initialization is successful\r\n  function init(bytes32 _key, address _resolver)\r\n           internal\r\n           returns (bool _success)\r\n  {\r\n    bool _is_locked = ContractResolver(_resolver).locked();\r\n    if (_is_locked == false) {\r\n      CONTRACT_ADDRESS = address(this);\r\n      resolver = _resolver;\r\n      key = _key;\r\n      require(ContractResolver(resolver).init_register_contract(key, CONTRACT_ADDRESS));\r\n      _success = true;\r\n    }  else {\r\n      _success = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Destroy the contract and unregister self from the ContractResolver\r\n  /// @dev Can only be called by the owner of ContractResolver\r\n  function destroy()\r\n           public\r\n           returns (bool _success)\r\n  {\r\n    bool _is_locked = ContractResolver(resolver).locked();\r\n    require(!_is_locked);\r\n\r\n    address _owner_of_contract_resolver = ContractResolver(resolver).owner();\r\n    require(msg.sender == _owner_of_contract_resolver);\r\n\r\n    _success = ContractResolver(resolver).unregister_contract(key);\r\n    require(_success);\r\n\r\n    selfdestruct(_owner_of_contract_resolver);\r\n  }\r\n\r\n  /// @dev Check if resolver is locked\r\n  /// @return _locked if the resolver is currently locked\r\n  function is_locked()\r\n           private\r\n           constant\r\n           returns (bool _locked)\r\n  {\r\n    _locked = ContractResolver(resolver).locked();\r\n  }\r\n\r\n  /// @dev Get the address of a contract\r\n  /// @param _key the resolver key to look up\r\n  /// @return _contract the address of the contract\r\n  function get_contract(bytes32 _key)\r\n           public\r\n           constant\r\n           returns (address _contract)\r\n  {\r\n    _contract = ContractResolver(resolver).get_contract(_key);\r\n  }\r\n}\r\n\r\ncontract GoldTokenStorage {\r\n  function read_collectors_addresses() constant public returns (address[3] _collectors);\r\n  function read_demurrage_config_underlying() public constant returns (uint256 _base, uint256 _rate, address _collector, bool _no_demurrage_fee);\r\n  function read_recast_config() constant public returns (uint256 _base, uint256 _rate, uint256 _total_supply, uint256 _effective_total_supply, address _collector, uint256 _collector_balance);\r\n  function read_transfer_config() public constant returns (uint256 _collector_balance, uint256 _base, uint256 _rate, address _collector, bool _no_transfer_fee, uint256 _minimum_transfer_amount);\r\n}\r\n\r\ncontract ERCTwenty {\r\n  function balanceOf( address who ) constant public returns (uint value);\r\n}\r\n\r\n/// @title Digix Gold Token's Information\r\n/// @author Digix Holdings Pte Ltd\r\n/// @notice This contract is used to read configs and information related to the Digix Gold Token\r\ncontract TokenInformation is ResolverClient, DigixConstants {\r\n\r\n  function TokenInformation(address _resolver) public\r\n  {\r\n    require(init(CONTRACT_INTERACTIVE_TOKEN_INFORMATION, _resolver));\r\n  }\r\n\r\n  function gold_token_storage()\r\n           internal\r\n           constant\r\n           returns (GoldTokenStorage _contract)\r\n  {\r\n    _contract = GoldTokenStorage(get_contract(CONTRACT_STORAGE_GOLD_TOKEN));\r\n  }\r\n\r\n  function token()\r\n           internal\r\n           constant\r\n           returns (ERCTwenty _contract)\r\n  {\r\n    _contract = ERCTwenty(get_contract(CONTRACT_INTERACTIVE_TOKEN));\r\n  }\r\n\r\n  /// @dev read the addresses of the fees collectors\r\n  /// @return _collectors the addresses (_collectors[0] = demurrage, _collectors[1] = recast, _collectors[2] = transfer)\r\n  function showCollectorsAddresses()\r\n           public\r\n           constant\r\n           returns (address[3] _collectors)\r\n  {\r\n    // order: demurrage, recast, transfer\r\n    _collectors = gold_token_storage().read_collectors_addresses();\r\n  }\r\n\r\n  /// @dev read the balances of the fees collectors addresses\r\n  /// @return _balances the balances (_balances[0] = demurrage, _balances[1] = recast, _balances[2] = transfer)\r\n  function showCollectorsBalances()\r\n           public\r\n           constant\r\n           returns (uint256[3] _balances)\r\n  {\r\n    // order: demurrage, recast, transfer\r\n    address[3] memory _collectors = showCollectorsAddresses();\r\n    for (uint256 i=0;i<3;i++) {\r\n      _balances[i] = token().balanceOf(_collectors[i]);\r\n    }\r\n  }\r\n\r\n  /// @dev read the demurrage configurations\r\n  /// @return {\r\n  ///   \"_base\": \"denominator for calculating demurrage fees\",\r\n  ///   \"_rate\": \"numerator for calculating demurrage fees\",\r\n  ///   \"_collector\": \"ethereum address of the demurrage fees collector\"\r\n  ///   \"_no_demurrage_fee\": \"true if demurrage fees is turned off globally\"\r\n  /// }\r\n  function showDemurrageConfigs()\r\n           public\r\n           constant\r\n           returns (uint256 _base, uint256 _rate, address _collector, bool _no_demurrage_fee)\r\n  {\r\n    (_base, _rate, _collector, _no_demurrage_fee) = gold_token_storage().read_demurrage_config_underlying();\r\n  }\r\n\r\n  /// @dev read the recast configurations\r\n  /// @return {\r\n  ///   \"_base\": \"denominator for calculating recast fees\",\r\n  ///   \"_rate\": \"numerator for calculating recast fees\",\r\n  ///   \"_collector\": \"ethereum address of the recast fees collector\"\r\n  /// }\r\n  function showRecastConfigs()\r\n           public\r\n           constant\r\n           returns (uint256 _base, uint256 _rate, address _collector)\r\n  {\r\n    (_base, _rate,,, _collector,) = gold_token_storage().read_recast_config();\r\n  }\r\n\r\n  /// @dev read transfer configurations\r\n  /// @return {\r\n  ///   \"_base\": \"denominator for calculating transfer fees\",\r\n  ///   \"_rate\": \"numerator for calculating transfer fees\",\r\n  ///   \"_collector\": \"the ethereum address of the transfer fees collector\",\r\n  ///   \"_no_transfer_fee\": \"true if transfer fees is turned off globally\",\r\n  ///   \"_minimum_transfer_amount\": \"minimum amount of DGX that can be transferred\"\r\n  /// }\r\n  function showTransferConfigs()\r\n           public\r\n           constant\r\n           returns (uint256 _base, uint256 _rate, address _collector, bool _no_transfer_fee, uint256 _minimum_transfer_amount)\r\n  {\r\n    (,_base, _rate, _collector, _no_transfer_fee, _minimum_transfer_amount) = gold_token_storage().read_transfer_config();\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showDemurrageConfigs\",\"outputs\":[{\"name\":\"_base\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_collector\",\"type\":\"address\"},{\"name\":\"_no_demurrage_fee\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showCollectorsBalances\",\"outputs\":[{\"name\":\"_balances\",\"type\":\"uint256[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"key\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"get_contract\",\"outputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showCollectorsAddresses\",\"outputs\":[{\"name\":\"_collectors\",\"type\":\"address[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showTransferConfigs\",\"outputs\":[{\"name\":\"_base\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_collector\",\"type\":\"address\"},{\"name\":\"_no_transfer_fee\",\"type\":\"bool\"},{\"name\":\"_minimum_transfer_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showRecastConfigs\",\"outputs\":[{\"name\":\"_base\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_collector\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TokenInformation","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000db2ddb220b8a55e0e4412130e6ae74d136c04ba2","Library":"","SwarmSource":"bzzr://b905721ff14875d3d7f2be7a6829bd3cd19e7a38c1ff6f64de7b7696292f612b"}]}