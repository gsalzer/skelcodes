{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Beneficiary is Ownable {\r\n\r\n    address public beneficiary;\r\n\r\n    function Beneficiary() public {\r\n        beneficiary = msg.sender;\r\n    }\r\n\r\n    function setBeneficiary(address _beneficiary) onlyOwner public {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n/// @title Auction contract for any type of erc721 token\r\n/// @author Fishbank\r\n\r\ncontract ERC721 {\r\n\r\n    function implementsERC721() public pure returns (bool);\r\n\r\n    function totalSupply() public view returns (uint256 total);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n\r\n    function approve(address _to, uint256 _tokenId) public;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public returns (bool);\r\n\r\n    function transfer(address _to, uint256 _tokenId) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n\r\ncontract ERC721Auction is Beneficiary {\r\n\r\n    struct Auction {\r\n        address seller;\r\n        uint256 tokenId;\r\n        uint64 auctionBegin;\r\n        uint64 auctionEnd;\r\n        uint256 startPrice;\r\n        uint256 endPrice;\r\n    }\r\n\r\n    uint32 public auctionDuration = 7 days;\r\n\r\n    ERC721 public ERC721Contract;\r\n    uint256 public fee = 45000; //in 1 10000th of a percent so 4.5% at the start\r\n    uint256 constant FEE_DIVIDER = 1000000;\r\n    mapping(uint256 => Auction) public auctions;\r\n\r\n    event AuctionWon(uint256 indexed tokenId, address indexed winner, address indexed seller, uint256 price);\r\n\r\n    event AuctionStarted(uint256 indexed tokenId, address indexed seller);\r\n\r\n    event AuctionFinalized(uint256 indexed tokenId, address indexed seller);\r\n\r\n\r\n    function startAuction(uint256 _tokenId, uint256 _startPrice, uint256 _endPrice) external {\r\n        require(ERC721Contract.transferFrom(msg.sender, address(this), _tokenId));\r\n        //Prices must be in range from 0.01 Eth and 10 000 Eth\r\n        require(_startPrice <= 10000 ether && _endPrice <= 10000 ether);\r\n        require(_startPrice >= (1 ether / 100) && _endPrice >= (1 ether / 100));\r\n\r\n        Auction memory auction;\r\n\r\n        auction.seller = msg.sender;\r\n        auction.tokenId = _tokenId;\r\n        auction.auctionBegin = uint64(now);\r\n        auction.auctionEnd = uint64(now + auctionDuration);\r\n        require(auction.auctionEnd > auction.auctionBegin);\r\n        auction.startPrice = _startPrice;\r\n        auction.endPrice = _endPrice;\r\n\r\n        auctions[_tokenId] = auction;\r\n\r\n        AuctionStarted(_tokenId, msg.sender);\r\n    }\r\n\r\n\r\n    function buyAuction(uint256 _tokenId) payable external {\r\n        Auction storage auction = auctions[_tokenId];\r\n\r\n        uint256 price = calculateBid(_tokenId);\r\n        uint256 totalFee = price * fee / FEE_DIVIDER; //safe math needed?\r\n\r\n        require(price <= msg.value); //revert if not enough ether send\r\n\r\n        if (price != msg.value) {//send back to much eth\r\n            msg.sender.transfer(msg.value - price);\r\n        }\r\n\r\n        beneficiary.transfer(totalFee);\r\n\r\n        auction.seller.transfer(price - totalFee);\r\n\r\n        if (!ERC721Contract.transfer(msg.sender, _tokenId)) {\r\n            revert();\r\n            //can't complete transfer if this fails\r\n        }\r\n\r\n        AuctionWon(_tokenId, msg.sender, auction.seller, price);\r\n\r\n        delete auctions[_tokenId];\r\n        //deletes auction\r\n    }\r\n\r\n    function saveToken(uint256 _tokenId) external {\r\n        require(auctions[_tokenId].auctionEnd < now);\r\n        //auction must have ended\r\n        require(ERC721Contract.transfer(auctions[_tokenId].seller, _tokenId));\r\n        //transfer fish back to seller\r\n\r\n        AuctionFinalized(_tokenId, auctions[_tokenId].seller);\r\n\r\n        delete auctions[_tokenId];\r\n        //delete auction\r\n    }\r\n\r\n    function ERC721Auction(address _ERC721Contract) public {\r\n        ERC721Contract = ERC721(_ERC721Contract);\r\n    }\r\n\r\n    function setFee(uint256 _fee) onlyOwner public {\r\n        if (_fee > fee) {\r\n            revert(); //fee can only be set to lower value to prevent attacks by owner\r\n        }\r\n        fee = _fee; // all is well set fee\r\n    }\r\n\r\n    function calculateBid(uint256 _tokenId) public view returns (uint256) {\r\n        Auction storage auction = auctions[_tokenId];\r\n\r\n        if (now >= auction.auctionEnd) {//if auction ended return auction end price\r\n            return auction.endPrice;\r\n        }\r\n        //get hours passed\r\n        uint256 hoursPassed = (now - auction.auctionBegin) / 1 hours;\r\n        uint256 currentPrice;\r\n        //get total hours\r\n        uint16 totalHours = uint16(auctionDuration /1 hours) - 1;\r\n\r\n        if (auction.endPrice > auction.startPrice) {\r\n            currentPrice = auction.startPrice + (hoursPassed * (auction.endPrice - auction.startPrice))/ totalHours;\r\n        } else if(auction.endPrice < auction.startPrice) {\r\n            currentPrice = auction.startPrice - (hoursPassed * (auction.startPrice - auction.endPrice))/ totalHours;\r\n        } else {//start and end are the same\r\n            currentPrice = auction.endPrice;\r\n        }\r\n\r\n        return uint256(currentPrice);\r\n        //return the price at this very moment\r\n    }\r\n\r\n    /// return token if case when need to redeploy auction contract\r\n    function returnToken(uint256 _tokenId) onlyOwner public {\r\n        require(ERC721Contract.transfer(auctions[_tokenId].seller, _tokenId));\r\n        //transfer fish back to seller\r\n\r\n        AuctionFinalized(_tokenId, auctions[_tokenId].seller);\r\n\r\n        delete auctions[_tokenId];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"auctionDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"calculateBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC721Contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"auctionBegin\",\"type\":\"uint64\"},{\"name\":\"auctionEnd\",\"type\":\"uint64\"},{\"name\":\"startPrice\",\"type\":\"uint256\"},{\"name\":\"endPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"returnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"saveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_endPrice\",\"type\":\"uint256\"}],\"name\":\"startAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ERC721Contract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AuctionWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"AuctionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ERC721Auction","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e8bbf054b788c98d9993be5513254d6b64a1ba97","Library":"","SwarmSource":"bzzr://30a91d0528fe6833ae1780657eb4769742e7e04e234f8e692c4c9e9893f23278"}]}