{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n// File: contracts/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(burner, _value);\r\n  }\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/HVT.sol\r\n\r\ncontract HVT is MintableToken, BurnableToken {\r\n  using SafeMath for uint256;\r\n\r\n  string public name = \"HiVe Token\";\r\n  string public symbol = \"HVT\";\r\n  uint8 public decimals = 18;\r\n\r\n  enum State {Blocked,Burnable,Transferable}\r\n  State public state = State.Blocked;\r\n\r\n  // functions overrides in order to maintain the token locked during the ICO\r\n  function transfer(address _to, uint256 _value) public returns(bool) {\r\n    require(state == State.Transferable);\r\n    return super.transfer(_to,_value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\r\n      require(state == State.Transferable);\r\n      return super.transferFrom(_from,_to,_value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    require(state == State.Transferable);\r\n    return super.approve(_spender,_value);\r\n  }\r\n\r\n  function burn(uint256 _value) public {\r\n    require(state == State.Transferable || state == State.Burnable);\r\n    super.burn(_value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    require(state == State.Transferable);\r\n    super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    require(state == State.Transferable);\r\n    super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n\r\n  // enable token transfers\r\n  function enableTokenTransfers() public onlyOwner {\r\n    state = State.Transferable;\r\n  }\r\n\r\n  // enable token burn\r\n  function enableTokenBurn() public onlyOwner {\r\n    state = State.Burnable;\r\n  }\r\n\r\n  // batch transfer with different amounts for each address\r\n  function batchTransferDiff(address[] _to, uint256[] _amount) public {\r\n    require(state == State.Transferable);\r\n    require(_to.length == _amount.length);\r\n    uint256 totalAmount = arraySum(_amount);\r\n    require(totalAmount <= balances[msg.sender]);\r\n    balances[msg.sender] = balances[msg.sender].sub(totalAmount);\r\n    for(uint i;i < _to.length;i++){\r\n      balances[_to[i]] = balances[_to[i]].add(_amount[i]);\r\n      Transfer(msg.sender,_to[i],_amount[i]);\r\n    }\r\n  }\r\n\r\n  // batch transfer with same amount for each address\r\n  function batchTransferSame(address[] _to, uint256 _amount) public {\r\n    require(state == State.Transferable);\r\n    uint256 totalAmount = _amount.mul(_to.length);\r\n    require(totalAmount <= balances[msg.sender]);\r\n    balances[msg.sender] = balances[msg.sender].sub(totalAmount);\r\n    for(uint i;i < _to.length;i++){\r\n      balances[_to[i]] = balances[_to[i]].add(_amount);\r\n      Transfer(msg.sender,_to[i],_amount);\r\n    }\r\n  }\r\n\r\n  // get sum of array values\r\n  function arraySum(uint256[] _amount) internal pure returns(uint256){\r\n    uint256 totalAmount;\r\n    for(uint i;i < _amount.length;i++){\r\n      totalAmount = totalAmount.add(_amount[i]);\r\n    }\r\n    return totalAmount;\r\n  }\r\n}\r\n\r\n// File: contracts/ICOEngineInterface.sol\r\n\r\ncontract ICOEngineInterface {\r\n\r\n    // false if the ico is not started, true if the ico is started and running, true if the ico is completed\r\n    function started() public view returns(bool);\r\n\r\n    // false if the ico is not started, false if the ico is started and running, true if the ico is completed\r\n    function ended() public view returns(bool);\r\n\r\n    // time stamp of the starting time of the ico, must return 0 if it depends on the block number\r\n    function startTime() public view returns(uint);\r\n\r\n    // time stamp of the ending time of the ico, must retrun 0 if it depends on the block number\r\n    function endTime() public view returns(uint);\r\n\r\n    // Optional function, can be implemented in place of startTime\r\n    // Returns the starting block number of the ico, must return 0 if it depends on the time stamp\r\n    // function startBlock() public view returns(uint);\r\n\r\n    // Optional function, can be implemented in place of endTime\r\n    // Returns theending block number of the ico, must retrun 0 if it depends on the time stamp\r\n    // function endBlock() public view returns(uint);\r\n\r\n    // returns the total number of the tokens available for the sale, must not change when the ico is started\r\n    function totalTokens() public view returns(uint);\r\n\r\n    // returns the number of the tokens available for the ico. At the moment that the ico starts it must be equal to totalTokens(),\r\n    // then it will decrease. It is used to calculate the percentage of sold tokens as remainingTokens() / totalTokens()\r\n    function remainingTokens() public view returns(uint);\r\n\r\n    // return the price as number of tokens released for each ether\r\n    function price() public view returns(uint);\r\n}\r\n\r\n// File: contracts/KYCBase.sol\r\n\r\n//import \"./SafeMath.sol\";\r\n\r\n\r\n// Abstract base contract\r\ncontract KYCBase {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => bool) public isKycSigner;\r\n    mapping (uint64 => uint256) public alreadyPayed;\r\n\r\n    event KycVerified(address indexed signer, address buyerAddress, uint64 buyerId, uint maxAmount);\r\n\r\n    function KYCBase(address [] kycSigners) internal {\r\n        for (uint i = 0; i < kycSigners.length; i++) {\r\n            isKycSigner[kycSigners[i]] = true;\r\n        }\r\n    }\r\n\r\n    // Must be implemented in descending contract to assign tokens to the buyers. Called after the KYC verification is passed\r\n    function releaseTokensTo(address buyer) internal returns(bool);\r\n\r\n    // This method can be overridden to enable some sender to buy token for a different address\r\n    function senderAllowedFor(address buyer)\r\n        internal view returns(bool)\r\n    {\r\n        return buyer == msg.sender;\r\n    }\r\n\r\n    function buyTokensFor(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\r\n        public payable returns (bool)\r\n    {\r\n        require(senderAllowedFor(buyerAddress));\r\n        return buyImplementation(buyerAddress, buyerId, maxAmount, v, r, s);\r\n    }\r\n\r\n    function buyTokens(uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\r\n        public payable returns (bool)\r\n    {\r\n        return buyImplementation(msg.sender, buyerId, maxAmount, v, r, s);\r\n    }\r\n\r\n    function buyImplementation(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\r\n        private returns (bool)\r\n    {\r\n        // check the signature\r\n        bytes32 hash = sha256(\"Eidoo icoengine authorization\", this, buyerAddress, buyerId, maxAmount);\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (!isKycSigner[signer]) {\r\n            revert();\r\n        } else {\r\n            uint256 totalPayed = alreadyPayed[buyerId].add(msg.value);\r\n            require(totalPayed <= maxAmount);\r\n            alreadyPayed[buyerId] = totalPayed;\r\n            KycVerified(signer, buyerAddress, buyerId, maxAmount);\r\n            return releaseTokensTo(buyerAddress);\r\n        }\r\n    }\r\n\r\n    // No payable fallback function, the tokens must be buyed using the functions buyTokens and buyTokensFor\r\n    function () public {\r\n        revert();\r\n    }\r\n}\r\n\r\n// File: contracts/RefundVault.sol\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  function RefundVault(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Closed;\r\n    Closed();\r\n    wallet.transfer(this.balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    RefundsEnabled();\r\n  }\r\n\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\n// File: contracts/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n// File: contracts/TokenTimelock.sol\r\n\r\n/**\r\n * @title TokenTimelock\r\n * @dev TokenTimelock is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract TokenTimelock {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  // timestamp when token release is enabled\r\n  uint256 public releaseTime;\r\n\r\n  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\r\n    require(_releaseTime > now);\r\n    token = _token;\r\n    beneficiary = _beneficiary;\r\n    releaseTime = _releaseTime;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiary.\r\n   */\r\n  function release() public {\r\n    require(now >= releaseTime);\r\n\r\n    uint256 amount = token.balanceOf(this);\r\n    require(amount > 0);\r\n\r\n    token.safeTransfer(beneficiary, amount);\r\n  }\r\n}\r\n\r\n// File: contracts/HivePowerCrowdsale.sol\r\n\r\n// The Hive Power crowdsale contract\r\ncontract HivePowerCrowdsale is Ownable, ICOEngineInterface, KYCBase {\r\n    using SafeMath for uint;\r\n    enum State {Running,Success,Failure}\r\n\r\n    State public state;\r\n\r\n    HVT public token;\r\n\r\n    address public wallet;\r\n\r\n    // from ICOEngineInterface\r\n    uint [] public prices;\r\n\r\n    // from ICOEngineInterface\r\n    uint public startTime;\r\n\r\n    // from ICOEngineInterface\r\n    uint public endTime;\r\n\r\n    // from ICOEngineInterface\r\n    uint [] public caps;\r\n\r\n    // from ICOEngineInterface\r\n    uint public remainingTokens;\r\n\r\n    // from ICOEngineInterface\r\n    uint public totalTokens;\r\n\r\n    // amount of wei raised\r\n    uint public weiRaised;\r\n\r\n    // soft goal in wei\r\n    uint public goal;\r\n\r\n    // boolean to make sure preallocate is called only once\r\n    bool public isPreallocated;\r\n\r\n    // preallocated company token\r\n    uint public companyTokens;\r\n\r\n    // preallocated token for founders\r\n    uint public foundersTokens;\r\n\r\n    // vault for refunding\r\n    RefundVault public vault;\r\n\r\n    // addresses of time-locked founder vaults\r\n    address [4] public timeLockAddresses;\r\n\r\n    // step in seconds for token release\r\n    uint public stepLockedToken;\r\n\r\n    // allowed overshoot when crossing the bonus barrier (in wei)\r\n    uint public overshoot;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n    * event for when weis are sent back to buyer\r\n    * @param purchaser who paid for the tokens and is getting back some ether\r\n    * @param amount of weis sent back\r\n    */\r\n    event SentBack(address indexed purchaser, uint256 amount);\r\n\r\n    /* event for ICO successfully finalized */\r\n    event FinalizedOK();\r\n\r\n    /* event for ICO not successfully finalized */\r\n    event FinalizedNOK();\r\n\r\n    /**\r\n     * event for additional token minting\r\n     * @param timelock address of the time-lock contract\r\n     * @param amount amount of tokens minted\r\n     * @param releaseTime release time of tokens\r\n     * @param wallet address of the wallet that can get the token released\r\n     */\r\n    event TimeLocked(address indexed timelock, uint256 amount, uint256 releaseTime, address indexed wallet);\r\n\r\n    /**\r\n     * event for additional token minting\r\n     * @param to who got the tokens\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event Preallocated(address indexed to, uint256 amount);\r\n\r\n    /**\r\n     *  Constructor\r\n     */\r\n    function HivePowerCrowdsale(address [] kycSigner, address _token, address _wallet, uint _startTime, uint _endTime, uint [] _prices, uint [] _caps, uint _goal, uint _companyTokens, uint _foundersTokens, uint _stepLockedToken, uint _overshoot)\r\n        public\r\n        KYCBase(kycSigner)\r\n    {\r\n        require(_token != address(0));\r\n        require(_wallet != address(0));\r\n        require(_startTime > now);\r\n        require(_endTime > _startTime);\r\n        require(_prices.length == _caps.length);\r\n\r\n        for (uint256 i=0; i < _caps.length -1; i++)\r\n        {\r\n          require(_caps[i+1].sub(_caps[i]) > _overshoot.mul(_prices[i]));\r\n        }\r\n\r\n        token = HVT(_token);\r\n        wallet = _wallet;\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        prices = _prices;\r\n        caps = _caps;\r\n        totalTokens = _caps[_caps.length-1];\r\n        remainingTokens = _caps[_caps.length-1];\r\n        vault = new RefundVault(_wallet);\r\n        goal = _goal;\r\n        companyTokens = _companyTokens;\r\n        foundersTokens = _foundersTokens;\r\n        stepLockedToken = _stepLockedToken;\r\n        overshoot = _overshoot;\r\n        state = State.Running;\r\n        isPreallocated = false;\r\n    }\r\n\r\n    function preallocate() onlyOwner public {\r\n      // can be called only once\r\n      require(!isPreallocated);\r\n\r\n      // mint tokens for team founders in timelocked vaults\r\n      uint numTimelocks = 4;\r\n      uint amount = foundersTokens / numTimelocks; //amount of token per vault\r\n      uint256 releaseTime = endTime;\r\n      for(uint256 i=0; i < numTimelocks; i++)\r\n      {\r\n        // update releaseTime according to the step\r\n        releaseTime = releaseTime.add(stepLockedToken);\r\n        // create tokentimelock\r\n        TokenTimelock timeLock = new TokenTimelock(token, wallet, releaseTime);\r\n        // keep address in memory\r\n        timeLockAddresses[i] = address(timeLock);\r\n        // mint tokens in tokentimelock\r\n        token.mint(address(timeLock), amount);\r\n        // generate event\r\n        TimeLocked(address(timeLock), amount, releaseTime, wallet);\r\n      }\r\n\r\n      //teamTimeLocks.mintTokens(teamTokens);\r\n      // Mint additional tokens (referral, airdrops, etc.)\r\n      token.mint(wallet, companyTokens);\r\n      Preallocated(wallet, companyTokens);\r\n      // cannot be called anymore\r\n      isPreallocated = true;\r\n    }\r\n\r\n    // function that is called from KYCBase\r\n    function releaseTokensTo(address buyer) internal returns(bool) {\r\n        // needs to be started\r\n        require(started());\r\n        // and not ended\r\n        require(!ended());\r\n\r\n        uint256 weiAmount = msg.value;\r\n        uint256 weiBack = 0;\r\n        uint currentPrice = price();\r\n        uint currentCap = getCap();\r\n        uint tokens = weiAmount.mul(currentPrice);\r\n        uint tokenRaised = totalTokens - remainingTokens;\r\n\r\n        //check if tokens exceed the amount of tokens that can be minted\r\n        if (tokenRaised.add(tokens) > currentCap)\r\n        {\r\n          tokens = currentCap.sub(tokenRaised);\r\n          weiAmount = tokens.div(currentPrice);\r\n          weiBack = msg.value - weiAmount;\r\n        }\r\n        //require(tokenRaised.add(tokens) <= currentCap);\r\n\r\n        weiRaised = weiRaised + weiAmount;\r\n        remainingTokens = remainingTokens.sub(tokens);\r\n\r\n        // mint tokens and transfer funds\r\n        token.mint(buyer, tokens);\r\n        forwardFunds(weiAmount);\r\n\r\n        if (weiBack>0)\r\n        {\r\n          msg.sender.transfer(weiBack);\r\n          SentBack(msg.sender, weiBack);\r\n        }\r\n\r\n        TokenPurchase(msg.sender, buyer, weiAmount, tokens);\r\n        return true;\r\n    }\r\n\r\n    function forwardFunds(uint256 weiAmount) internal {\r\n      vault.deposit.value(weiAmount)(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev finalize an ICO in dependency on the goal reaching:\r\n     * 1) reached goal (successful ICO):\r\n     * -> release sold token for the transfers\r\n     * -> close the vault\r\n     * -> close the ICO successfully\r\n     * 2) not reached goal (not successful ICO):\r\n     * -> call finalizeNOK()\r\n     */\r\n    function finalize() onlyOwner public {\r\n      require(state == State.Running);\r\n      require(ended());\r\n\r\n      // Check the soft goal reaching\r\n      if(weiRaised >= goal) {\r\n        // if goal reached\r\n\r\n        // stop the minting\r\n        token.finishMinting();\r\n        // enable token transfers\r\n        token.enableTokenTransfers();\r\n        // close the vault and transfer funds to wallet\r\n        vault.close();\r\n\r\n        // ICO successfully finalized\r\n        // set state to Success\r\n        state = State.Success;\r\n        FinalizedOK();\r\n      }\r\n      else {\r\n        // if goal NOT reached\r\n        // ICO not successfully finalized\r\n        finalizeNOK();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @dev finalize an unsuccessful ICO:\r\n     * -> enable the refund\r\n     * -> close the ICO not successfully\r\n     */\r\n     function finalizeNOK() onlyOwner public {\r\n       // run checks again because this is a public function\r\n       require(state == State.Running);\r\n       require(ended());\r\n       // stop the minting\r\n       token.finishMinting();\r\n       // allow to burn tokens\r\n       token.enableTokenBurn();\r\n       // enable the refunds\r\n       vault.enableRefunds();\r\n       // ICO not successfully finalised\r\n       // set state to Failure\r\n       state = State.Failure;\r\n       FinalizedNOK();\r\n     }\r\n\r\n     // if crowdsale is unsuccessful, investors can claim refunds here\r\n     function claimRefund() public {\r\n       require(state == State.Failure);\r\n       vault.refund(msg.sender);\r\n    }\r\n\r\n    // get the next cap as a function of the amount of sold token\r\n    function getCap() public view returns(uint){\r\n      uint tokenRaised=totalTokens-remainingTokens;\r\n      for (uint i=0;i<caps.length-1;i++){\r\n        if (tokenRaised < caps[i])\r\n        {\r\n          // allow for a an overshoot (only when bonus is applied)\r\n          uint tokenPerOvershoot = overshoot * prices[i];\r\n          return(caps[i].add(tokenPerOvershoot));\r\n        }\r\n      }\r\n      // but not on the total amount of tokens\r\n      return(totalTokens);\r\n    }\r\n\r\n    // from ICOEngineInterface\r\n    function started() public view returns(bool) {\r\n        return now >= startTime;\r\n    }\r\n\r\n    // from ICOEngineInterface\r\n    function ended() public view returns(bool) {\r\n        return now >= endTime || remainingTokens == 0;\r\n    }\r\n\r\n    function startTime() public view returns(uint) {\r\n      return(startTime);\r\n    }\r\n\r\n    function endTime() public view returns(uint){\r\n      return(endTime);\r\n    }\r\n\r\n    function totalTokens() public view returns(uint){\r\n      return(totalTokens);\r\n    }\r\n\r\n    function remainingTokens() public view returns(uint){\r\n      return(remainingTokens);\r\n    }\r\n\r\n    // return the price as number of tokens released for each ether\r\n    function price() public view returns(uint){\r\n      uint tokenRaised=totalTokens-remainingTokens;\r\n      for (uint i=0;i<caps.length-1;i++){\r\n        if (tokenRaised < caps[i])\r\n        {\r\n          return(prices[i]);\r\n        }\r\n      }\r\n      return(prices[prices.length-1]);\r\n    }\r\n\r\n    // No payable fallback function, the tokens must be buyed using the functions buyTokens and buyTokensFor\r\n    function () public {\r\n        revert();\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ERC20Interface.sol\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isKycSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"preallocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepLockedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeLockAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeNOK\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"overshoot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"alreadyPayed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreallocated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyerAddress\",\"type\":\"address\"},{\"name\":\"buyerId\",\"type\":\"uint64\"},{\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buyTokensFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"caps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyerId\",\"type\":\"uint64\"},{\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"kycSigner\",\"type\":\"address[]\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"name\":\"_caps\",\"type\":\"uint256[]\"},{\"name\":\"_goal\",\"type\":\"uint256\"},{\"name\":\"_companyTokens\",\"type\":\"uint256\"},{\"name\":\"_foundersTokens\",\"type\":\"uint256\"},{\"name\":\"_stepLockedToken\",\"type\":\"uint256\"},{\"name\":\"_overshoot\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SentBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FinalizedOK\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FinalizedNOK\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"timelock\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"TimeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Preallocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyerId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"KycVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HivePowerCrowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000180000000000000000000000000c90dc1182aa146cbbece39b22cb38f65df6ac960000000000000000000000000de5f3719d0ab1a308c1d66fda248f8497bcd42d8000000000000000000000000000000000000000000000000000000005b1f6f70000000000000000000000000000000000000000000000000000000005b3770c000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000059294f13b499f210600000000000000000000000000000000000000000002116545850052128000000000000000000000000000000000000000000000000084595161401484a0000000000000000000000000000000000000000000000000000000000000000ed4e000000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000dd5ecefcaa0cb5d75f7b72dc9d2ce446d6d005200000000000000000000000004e315e5de2abbf7b745d9628ee60e4355c0fab8600000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000c590000000000000000000000000000000000000000000000000000000000000a73000000000000000000000000000000000000000000000000000000000000098000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000422ca8b0a00a42500000000000000000000000000000000000000000000000014adf4b7320334b9000000000000000000000000000000000000000000000000295be96e64066972000000","Library":"","SwarmSource":"bzzr://0b66c96ba5180d67ce79001767693d5730987e077191e9416d9d7c3497fda387"}]}