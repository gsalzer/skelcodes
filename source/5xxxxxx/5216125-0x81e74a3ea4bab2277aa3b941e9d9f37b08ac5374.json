{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ifoodToken is ERC20 {\r\n  using SafeMath for uint256;\r\n  \r\n  // the controller of minting\r\n  address public ifoodDev = 0x4E471f031D03E5856125993dc3D59520229141Ce;\r\n  // the controller of approving of minting and withdraw tokens\r\n  address public ifoodCommunity = 0x0d72e931932356FcCf8CFF3f83390e24BE72771d;\r\n\r\n  struct TokensWithLock {\r\n    uint256 value;\r\n    uint256 blockNumber;\r\n  }\r\n  // Balances for each account\r\n  mapping(address => uint256) balances;\r\n  // Tokens with time lock\r\n  // Only when the tokens' blockNumber is less than current block number,\r\n  // can the tokens be minted to the owner\r\n  mapping(address => TokensWithLock) lockTokens;\r\n  // Owner of account approves the transfer of an amount to another account\r\n  mapping(address => mapping (address => uint256)) allowed;\r\n \r\n  // Token Info\r\n  string public name = \"Ifoods Token\";\r\n  string public symbol = \"IFOOD\";\r\n  uint8 public decimals = 18;\r\n  \r\n  // Token Cap\r\n  uint256 public totalSupplyCap = 10**10 * 10**uint256(decimals);\r\n  // True if mintingFinished\r\n  bool public mintingFinished = false;\r\n  // The block number when deploy\r\n  uint256 public deployBlockNumber = getCurrentBlockNumber();\r\n  // The min threshold of lock time\r\n  uint256 public constant TIMETHRESHOLD = 7200;\r\n  // The lock time of minted tokens\r\n  uint256 public durationOfLock = 7200;\r\n  // True if transfers are allowed\r\n  bool public transferable = false;\r\n  // True if the transferable can be change\r\n  bool public canSetTransferable = true;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier only(address _address) {\r\n    require(msg.sender == _address);\r\n    _;\r\n  }\r\n\r\n  modifier nonZeroAddress(address _address) {\r\n    require(_address != address(0));\r\n    _;\r\n  }\r\n\r\n  modifier canTransfer() {\r\n    require(transferable == true);\r\n    _;\r\n  }\r\n\r\n  event SetDurationOfLock(address indexed _caller);\r\n  event ApproveMintTokens(address indexed _owner, uint256 _amount);\r\n  event WithdrawMintTokens(address indexed _owner, uint256 _amount);\r\n  event MintTokens(address indexed _owner, uint256 _amount);\r\n  event BurnTokens(address indexed _owner, uint256 _amount);\r\n  event MintFinished(address indexed _caller);\r\n  event SetTransferable(address indexed _address, bool _transferable);\r\n  event SetifoodDevAddress(address indexed _old, address indexed _new);\r\n  event SetifoodCommunityAddress(address indexed _old, address indexed _new);\r\n  event DisableSetTransferable(address indexed _address, bool _canSetTransferable);\r\n\r\n  /**\r\n   * @dev transfer token for a specified address\r\n   * @param _to The address to transfer to.\r\n   * @param _value The amount to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value) canTransfer public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address.\r\n   * @param _owner The address to query the the balance of.\r\n   * @return An uint256 representing the amount owned by the passed address.\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) canTransfer public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  // Allow `_spender` to withdraw from your account, multiple times.\r\n  function approve(address _spender, uint _value) public returns (bool success) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) {\r\n        revert();\r\n    }\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n  /**\r\n   * @dev Enables token holders to transfer their tokens freely if true\r\n   * @param _transferable True if transfers are allowed\r\n   */\r\n  function setTransferable(bool _transferable) only(ifoodDev) public {\r\n    require(canSetTransferable == true);\r\n    transferable = _transferable;\r\n    SetTransferable(msg.sender, _transferable);\r\n  }\r\n\r\n  /**\r\n   * @dev disable the canSetTransferable\r\n   */\r\n  function disableSetTransferable() only(ifoodDev) public {\r\n    transferable = true;\r\n    canSetTransferable = false;\r\n    DisableSetTransferable(msg.sender, false);\r\n  }\r\n\r\n  /**\r\n   * @dev Set the ifoodDev\r\n   * @param _ifoodDev The new ifood dev address\r\n   */\r\n  function setifoodDevAddress(address _ifoodDev) only(ifoodDev) nonZeroAddress(ifoodDev) public {\r\n    ifoodDev = _ifoodDev;\r\n    SetifoodDevAddress(msg.sender, _ifoodDev);\r\n  }\r\n\r\n  /**\r\n   * @dev Set the ifoodCommunity\r\n   * @param _ifoodCommunity The new ifood community address\r\n   */\r\n  function setifoodCommunityAddress(address _ifoodCommunity) only(ifoodCommunity) nonZeroAddress(_ifoodCommunity) public {\r\n    ifoodCommunity = _ifoodCommunity;\r\n    SetifoodCommunityAddress(msg.sender, _ifoodCommunity);\r\n  }\r\n  \r\n  /**\r\n   * @dev Set the duration of lock of tokens approved of minting\r\n   * @param _durationOfLock the new duration of lock\r\n   */\r\n  function setDurationOfLock(uint256 _durationOfLock) canMint only(ifoodCommunity) public {\r\n    require(_durationOfLock >= TIMETHRESHOLD);\r\n    durationOfLock = _durationOfLock;\r\n    SetDurationOfLock(msg.sender);\r\n  }\r\n  \r\n  /**\r\n   * @dev Get the quantity of locked tokens\r\n   * @param _owner The address of locked tokens\r\n   * @return the quantity and the lock time of locked tokens\r\n   */\r\n   function getLockTokens(address _owner) nonZeroAddress(_owner) view public returns (uint256 value, uint256 blockNumber) {\r\n     return (lockTokens[_owner].value, lockTokens[_owner].blockNumber);\r\n   }\r\n\r\n  /**\r\n   * @dev Approve of minting `_amount` tokens that are assigned to `_owner`\r\n   * @param _owner The address that will be assigned the new tokens\r\n   * @param _amount The quantity of tokens approved of mintting\r\n   * @return True if the tokens are approved of mintting correctly\r\n   */\r\n  function approveMintTokens(address _owner, uint256 _amount) nonZeroAddress(_owner) canMint only(ifoodCommunity) public returns (bool) {\r\n    require(_amount > 0);\r\n    uint256 previousLockTokens = lockTokens[_owner].value;\r\n    require(previousLockTokens + _amount >= previousLockTokens);\r\n    uint256 curTotalSupply = totalSupply;\r\n    require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n    require(curTotalSupply + _amount <= totalSupplyCap);  // Check for overflow of total supply cap\r\n    uint256 previousBalanceTo = balanceOf(_owner);\r\n    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n    lockTokens[_owner].value = previousLockTokens.add(_amount);\r\n    uint256 curBlockNumber = getCurrentBlockNumber();\r\n    lockTokens[_owner].blockNumber = curBlockNumber.add(durationOfLock);\r\n    ApproveMintTokens(_owner, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw approval of minting `_amount` tokens that are assigned to `_owner`\r\n   * @param _owner The address that will be withdrawn the tokens\r\n   * @param _amount The quantity of tokens withdrawn approval of mintting\r\n   * @return True if the tokens are withdrawn correctly\r\n   */\r\n  function withdrawMintTokens(address _owner, uint256 _amount) nonZeroAddress(_owner) canMint only(ifoodCommunity) public returns (bool) {\r\n    require(_amount > 0);\r\n    uint256 previousLockTokens = lockTokens[_owner].value;\r\n    require(previousLockTokens - _amount >= 0);\r\n    lockTokens[_owner].value = previousLockTokens.sub(_amount);\r\n    if (previousLockTokens - _amount == 0) {\r\n      lockTokens[_owner].blockNumber = 0;\r\n    }\r\n    WithdrawMintTokens(_owner, _amount);\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * @dev Mints `_amount` tokens that are assigned to `_owner`\r\n   * @param _owner The address that will be assigned the new tokens\r\n   * @return True if the tokens are minted correctly\r\n   */\r\n  function mintTokens(address _owner) canMint only(ifoodDev) nonZeroAddress(_owner) public returns (bool) {\r\n    require(lockTokens[_owner].blockNumber <= getCurrentBlockNumber());\r\n    uint256 _amount = lockTokens[_owner].value;\r\n    uint256 curTotalSupply = totalSupply;\r\n    require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n    require(curTotalSupply + _amount <= totalSupplyCap);  // Check for overflow of total supply cap\r\n    uint256 previousBalanceTo = balanceOf(_owner);\r\n    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n    \r\n    totalSupply = curTotalSupply.add(_amount);\r\n    balances[_owner] = previousBalanceTo.add(_amount);\r\n    lockTokens[_owner].value = 0;\r\n    lockTokens[_owner].blockNumber = 0;\r\n    MintTokens(_owner, _amount);\r\n    Transfer(0, _owner, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens to multiple addresses\r\n   * @param _addresses The addresses that will receieve tokens\r\n   * @param _amounts The quantity of tokens that will be transferred\r\n   * @return True if the tokens are transferred correctly\r\n   */\r\n  function transferForMultiAddresses(address[] _addresses, uint256[] _amounts) canTransfer public returns (bool) {\r\n    for (uint256 i = 0; i < _addresses.length; i++) {\r\n      require(_addresses[i] != address(0));\r\n      require(_amounts[i] <= balances[msg.sender]);\r\n      require(_amounts[i] > 0);\r\n\r\n      // SafeMath.sub will throw if there is not enough balance.\r\n      balances[msg.sender] = balances[msg.sender].sub(_amounts[i]);\r\n      balances[_addresses[i]] = balances[_addresses[i]].add(_amounts[i]);\r\n      Transfer(msg.sender, _addresses[i], _amounts[i]);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() only(ifoodDev) canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished(msg.sender);\r\n    return true;\r\n  }\r\n\r\n  function getCurrentBlockNumber() private view returns (uint256) {\r\n    return block.number;\r\n  }\r\n\r\n  function () public payable {\r\n    revert();\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_durationOfLock\",\"type\":\"uint256\"}],\"name\":\"setDurationOfLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableSetTransferable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferForMultiAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIMETHRESHOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveMintTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ifoodDev\",\"type\":\"address\"}],\"name\":\"setifoodDevAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"durationOfLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ifoodDev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getLockTokens\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transferable\",\"type\":\"bool\"}],\"name\":\"setTransferable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawMintTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"mintTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canSetTransferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ifoodCommunity\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ifoodCommunity\",\"type\":\"address\"}],\"name\":\"setifoodCommunityAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"SetDurationOfLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ApproveMintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawMintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"MintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BurnTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_transferable\",\"type\":\"bool\"}],\"name\":\"SetTransferable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"SetifoodDevAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"SetifoodCommunityAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_canSetTransferable\",\"type\":\"bool\"}],\"name\":\"DisableSetTransferable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ifoodToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://80e0b1a15be92368579c6772ff209c469f9dcda457bbc3839ab174eb9019bdbf"}]}