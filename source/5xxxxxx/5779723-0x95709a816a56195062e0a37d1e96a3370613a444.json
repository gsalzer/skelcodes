{"status":"1","message":"OK","result":[{"SourceCode":"// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.4.23;\r\n\r\n// import 'ds-auth/auth.sol';\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\n// import 'ds-math/math.sol';\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// import './IkuraStorage.sol';\r\n/**\r\n *\r\n * ロジックの更新に影響されない永続化データを保持するクラス\r\n *\r\n */\r\ncontract IkuraStorage is DSMath, DSAuth {\r\n  // オーナー（中央銀行）のアドレス\r\n  address[] ownerAddresses;\r\n\r\n  // 各アドレスのdJPYの口座残高\r\n  mapping(address => uint) coinBalances;\r\n\r\n  // 各アドレスのSHINJI tokenの口座残高\r\n  mapping(address => uint) tokenBalances;\r\n\r\n  // 各アドレスが指定したアドレスに対して許可する最大送金額\r\n  mapping(address => mapping (address => uint)) coinAllowances;\r\n\r\n  // dJPYの発行高\r\n  uint _totalSupply = 0;\r\n\r\n  // 手数料率\r\n  // 0.01pips = 1\r\n  // 例). 手数料を 0.05% とする場合は 500\r\n  uint _transferFeeRate = 500;\r\n\r\n  // 最低手数料額\r\n  // 1 = 1dJPY\r\n  // amount * 手数料率で算出した金額がここで設定した最低手数料を下回る場合は、最低手数料額を手数料とする\r\n  uint8 _transferMinimumFee = 5;\r\n\r\n  address tokenAddress;\r\n  address multiSigAddress;\r\n  address authorityAddress;\r\n\r\n  // @NOTE リリース時にcontractのdeploy -> watch contract -> setOwnerの流れを\r\n  //省略したい場合は、ここで直接controllerのアドレスを指定するとショートカットできます\r\n  // 勿論テストは通らなくなるので、テストが通ったら試してね\r\n  constructor() public DSAuth() {\r\n    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\r\n    owner = controllerAddress;\r\n    LogSetOwner(controllerAddress);*/\r\n  }\r\n\r\n  function changeToken(address tokenAddress_) public auth {\r\n    tokenAddress = tokenAddress_;\r\n  }\r\n\r\n  function changeAssociation(address multiSigAddress_) public auth {\r\n    multiSigAddress = multiSigAddress_;\r\n  }\r\n\r\n  function changeAuthority(address authorityAddress_) public auth {\r\n    authorityAddress = authorityAddress_;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for _totalSupply\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * 総発行額を返す\r\n   *\r\n   * @return 総発行額\r\n   */\r\n  function totalSupply() public view auth returns (uint) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * 総発行数を増やす（mintと並行して呼ばれることを想定）\r\n   *\r\n   * @param amount 鋳造数\r\n   */\r\n  function addTotalSupply(uint amount) public auth {\r\n    _totalSupply = add(_totalSupply, amount);\r\n  }\r\n\r\n  /**\r\n   * 総発行数を減らす（burnと並行して呼ばれることを想定）\r\n   *\r\n   * @param amount 鋳造数\r\n   */\r\n  function subTotalSupply(uint amount) public auth {\r\n    _totalSupply = sub(_totalSupply, amount);\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for _transferFeeRate\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * 手数料率を返す\r\n   *\r\n   * @return 現在の手数料率\r\n   */\r\n  function transferFeeRate() public view auth returns (uint) {\r\n    return _transferFeeRate;\r\n  }\r\n\r\n  /**\r\n   * 手数料率を変更する\r\n   *\r\n   * @param newTransferFeeRate 新しい手数料率\r\n   *\r\n   * @return 更新に成功したらtrue、失敗したらfalse（今のところ失敗するケースはない）\r\n   */\r\n  function setTransferFeeRate(uint newTransferFeeRate) public auth returns (bool) {\r\n    _transferFeeRate = newTransferFeeRate;\r\n\r\n    return true;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for _transferMinimumFee\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * 最低手数料返す\r\n   *\r\n   * @return 現在の最低手数料\r\n   */\r\n  function transferMinimumFee() public view auth returns (uint8) {\r\n    return _transferMinimumFee;\r\n  }\r\n\r\n  /**\r\n   * 最低手数料を変更する\r\n   *\r\n   * @param newTransferMinimumFee 新しい最低手数料\r\n   *\r\n   * @return 更新に成功したらtrue、失敗したらfalse（今のところ失敗するケースはない）\r\n   */\r\n  function setTransferMinimumFee(uint8 newTransferMinimumFee) public auth {\r\n    _transferMinimumFee = newTransferMinimumFee;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for ownerAddresses\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * 指定したユーザーアドレスをオーナーの一覧に追加する\r\n   *\r\n   * トークンの移動時に内部的にオーナーのアドレスを管理するための関数。\r\n   * トークンの所有者 = オーナーという扱いになったので、この配列に含まれるアドレスの一覧は\r\n   * 手数料からの収益の分配をする時に利用するだけで、オーナーかどうかの判定には利用しない\r\n   *\r\n   * @param addr ユーザーのアドレス\r\n   *\r\n   * @return 処理に成功したらtrue、失敗したらfalse\r\n   */\r\n  function addOwnerAddress(address addr) internal returns (bool) {\r\n    ownerAddresses.push(addr);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 指定したユーザーアドレスをオーナーの一覧から削除する\r\n   *\r\n   * トークンの移動時に内部的にオーナーのアドレスを管理するための関数。\r\n   *\r\n   * @param addr オーナーに属するユーザーのアドレス\r\n   *\r\n   * @return 処理に成功したらtrue、失敗したらfalse\r\n   */\r\n  function removeOwnerAddress(address addr) internal returns (bool) {\r\n    uint i = 0;\r\n\r\n    while (ownerAddresses[i] != addr) { i++; }\r\n\r\n    while (i < ownerAddresses.length - 1) {\r\n      ownerAddresses[i] = ownerAddresses[i + 1];\r\n      i++;\r\n    }\r\n\r\n    ownerAddresses.length--;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 最初のオーナー（contractをdeployしたユーザー）のアドレスを返す\r\n   *\r\n   * @return 最初のオーナーのアドレス\r\n   */\r\n  function primaryOwner() public view auth returns (address) {\r\n    return ownerAddresses[0];\r\n  }\r\n\r\n  /**\r\n   * 指定したアドレスがオーナーアドレスに登録されているか返す\r\n   *\r\n   * @param addr ユーザーのアドレス\r\n   *\r\n   * @return オーナーに含まれている場合はtrue、含まれていない場合はfalse\r\n   */\r\n  function isOwnerAddress(address addr) public view auth returns (bool) {\r\n    for (uint i = 0; i < ownerAddresses.length; i++) {\r\n      if (ownerAddresses[i] == addr) return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * オーナー数を返す\r\n   *\r\n   * @return オーナー数\r\n   */\r\n  function numOwnerAddress() public view auth returns (uint) {\r\n    return ownerAddresses.length;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for coinBalances\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * 指定したユーザーのdJPY残高を返す\r\n   *\r\n   * @param addr ユーザーのアドレス\r\n   *\r\n   * @return dJPY残高\r\n   */\r\n  function coinBalance(address addr) public view auth returns (uint) {\r\n    return coinBalances[addr];\r\n  }\r\n\r\n  /**\r\n   * 指定したユーザーのdJPYの残高を増やす\r\n   *\r\n   * @param addr ユーザーのアドレス\r\n   * @param amount 差分\r\n   *\r\n   * @return 処理に成功したらtrue、失敗したらfalse\r\n   */\r\n  function addCoinBalance(address addr, uint amount) public auth returns (bool) {\r\n    coinBalances[addr] = add(coinBalances[addr], amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 指定したユーザーのdJPYの残高を減らす\r\n   *\r\n   * @param addr ユーザーのアドレス\r\n   * @param amount 差分\r\n   *\r\n   * @return 処理に成功したらtrue、失敗したらfalse\r\n   */\r\n  function subCoinBalance(address addr, uint amount) public auth returns (bool) {\r\n    coinBalances[addr] = sub(coinBalances[addr], amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for tokenBalances\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * 指定したユーザーのSHINJIトークンの残高を返す\r\n   *\r\n   * @param addr ユーザーのアドレス\r\n   *\r\n   * @return SHINJIトークン残高\r\n   */\r\n  function tokenBalance(address addr) public view auth returns (uint) {\r\n    return tokenBalances[addr];\r\n  }\r\n\r\n  /**\r\n   * 指定したユーザーのSHINJIトークンの残高を増やす\r\n   *\r\n   * @param addr ユーザーのアドレス\r\n   * @param amount 差分\r\n   *\r\n   * @return 処理に成功したらtrue、失敗したらfalse\r\n   */\r\n  function addTokenBalance(address addr, uint amount) public auth returns (bool) {\r\n    tokenBalances[addr] = add(tokenBalances[addr], amount);\r\n\r\n    if (tokenBalances[addr] > 0 && !isOwnerAddress(addr)) {\r\n      addOwnerAddress(addr);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 指定したユーザーのSHINJIトークンの残高を減らす\r\n   *\r\n   * @param addr ユーザーのアドレス\r\n   * @param amount 差分\r\n   *\r\n   * @return 処理に成功したらtrue、失敗したらfalse\r\n   */\r\n  function subTokenBalance(address addr, uint amount) public auth returns (bool) {\r\n    tokenBalances[addr] = sub(tokenBalances[addr], amount);\r\n\r\n    if (tokenBalances[addr] <= 0) {\r\n      removeOwnerAddress(addr);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for coinAllowances\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * 送金許可金額を返す\r\n   *\r\n   * @param owner_ 送金者\r\n   * @param spender 送金代行者\r\n   *\r\n   * @return 送金許可金額\r\n   */\r\n  function coinAllowance(address owner_, address spender) public view auth returns (uint) {\r\n    return coinAllowances[owner_][spender];\r\n  }\r\n\r\n  /**\r\n   * 送金許可金額を指定した金額だけ増やす\r\n   *\r\n   * @param owner_ 送金者\r\n   * @param spender 送金代行者\r\n   * @param amount 金額\r\n   *\r\n   * @return 更新に成功したらtrue、失敗したらfalse\r\n   */\r\n  function addCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\r\n    coinAllowances[owner_][spender] = add(coinAllowances[owner_][spender], amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 送金許可金額を指定した金額だけ減らす\r\n   *\r\n   * @param owner_ 送金者\r\n   * @param spender 送金代行者\r\n   * @param amount 金額\r\n   *\r\n   * @return 更新に成功したらtrue、失敗したらfalse\r\n   */\r\n  function subCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\r\n    coinAllowances[owner_][spender] = sub(coinAllowances[owner_][spender], amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 送金許可金額を指定した値に更新する\r\n   *\r\n   * @param owner_ 送金者\r\n   * @param spender 送金代行者\r\n   * @param amount 送金許可金額\r\n   *\r\n   * @return 指定に成功したらtrue、失敗したらfalse\r\n   */\r\n  function setCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\r\n    coinAllowances[owner_][spender] = amount;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 権限チェック用関数のoverride\r\n   *\r\n   * @param src 実行者アドレス\r\n   * @param sig 実行関数の識別子\r\n   *\r\n   * @return 実行が許可されていればtrue、そうでなければfalse\r\n   */\r\n  function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n    sig; // #HACK\r\n\r\n    return  src == address(this) ||\r\n            src == owner ||\r\n            src == tokenAddress ||\r\n            src == authorityAddress ||\r\n            src == multiSigAddress;\r\n  }\r\n}\r\n\r\n// import './IkuraTokenEvent.sol';\r\n/**\r\n * Tokenでの処理に関するイベント定義\r\n *\r\n * - ERC20に準拠したイベント（Transfer / Approval）\r\n * - IkuraTokenの独自イベント（TransferToken / TransferFee）\r\n */\r\ncontract IkuraTokenEvent {\r\n  /** オーナーがdJPYを鋳造した際に発火するイベント */\r\n  event IkuraMint(address indexed owner, uint);\r\n\r\n  /** オーナーがdJPYを消却した際に発火するイベント */\r\n  event IkuraBurn(address indexed owner, uint);\r\n\r\n  /** トークンの移動時に発火するイベント */\r\n  event IkuraTransferToken(address indexed from, address indexed to, uint value);\r\n\r\n  /** 手数料が発生したときに発火するイベント */\r\n  event IkuraTransferFee(address indexed from, address indexed to, address indexed owner, uint value);\r\n\r\n  /**\r\n   * テスト時にこのイベントも流れてくるはずなので追加で定義\r\n   * controllerでもイベントを発火させているが、ゆくゆくはここでIkuraTokenのバージョンとか追加の情報を投げる可能性もあるので残留。\r\n   */\r\n  event IkuraTransfer(address indexed from, address indexed to, uint value);\r\n\r\n  /** 送金許可イベント */\r\n  event IkuraApproval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n// import './IkuraAssociation.sol';\r\n/**\r\n * 経過時間とSHINJI Tokenの所有比率によって特定のアクションの承認を行うクラス\r\n */\r\ncontract IkuraAssociation is DSMath, DSAuth {\r\n  //\r\n  // public\r\n  //\r\n\r\n  // 提案が承認されるために必要な賛成票の割合\r\n  uint public confirmTotalTokenThreshold = 50;\r\n\r\n  //\r\n  // private\r\n  //\r\n\r\n  // データの永続化ストレージ\r\n  IkuraStorage _storage;\r\n  IkuraToken _token;\r\n\r\n  // 提案一覧\r\n  Proposal[] mintProposals;\r\n  Proposal[] burnProposals;\r\n\r\n  mapping (bytes32 => Proposal[]) proposals;\r\n\r\n  struct Proposal {\r\n    address proposer;                     // 提案者\r\n    bytes32 digest;                       // チェックサム\r\n    bool executed;                        // 実行の有無\r\n    uint createdAt;                       // 提案作成日時\r\n    uint expireAt;                        // 提案の締め切り\r\n    address[] confirmers;                 // 承認者\r\n    uint amount;                          // 鋳造量\r\n  }\r\n\r\n  //\r\n  // Events\r\n  //\r\n\r\n  event MintProposalAdded(uint proposalId, address proposer, uint amount);\r\n  event MintConfirmed(uint proposalId, address confirmer, uint amount);\r\n  event MintExecuted(uint proposalId, address proposer, uint amount);\r\n\r\n  event BurnProposalAdded(uint proposalId, address proposer, uint amount);\r\n  event BurnConfirmed(uint proposalId, address confirmer, uint amount);\r\n  event BurnExecuted(uint proposalId, address proposer, uint amount);\r\n\r\n  constructor() public {\r\n    proposals[keccak256('mint')] = mintProposals;\r\n    proposals[keccak256('burn')] = burnProposals;\r\n\r\n    // @NOTE リリース時にcontractのdeploy -> watch contract -> setOwnerの流れを\r\n    //省略したい場合は、ここで直接controllerのアドレスを指定するとショートカットできます\r\n    // 勿論テストは通らなくなるので、テストが通ったら試してね\r\n    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\r\n    owner = controllerAddress;\r\n    LogSetOwner(controllerAddress);*/\r\n  }\r\n\r\n  /**\r\n   * 永続化ストレージを設定する\r\n   *\r\n   * @param newStorage 永続化ストレージのインスタンス（アドレス）\r\n   */\r\n  function changeStorage(IkuraStorage newStorage) public auth returns (bool) {\r\n    _storage = newStorage;\r\n    return true;\r\n  }\r\n\r\n  function changeToken(IkuraToken token_) public auth returns (bool) {\r\n    _token = token_;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 提案を作成する\r\n   *\r\n   * @param proposer 提案者のアドレス\r\n   * @param amount 鋳造量\r\n   */\r\n  function newProposal(bytes32 type_, address proposer, uint amount, bytes transationBytecode) public returns (uint) {\r\n    uint proposalId = proposals[type_].length++;\r\n    Proposal storage proposal = proposals[type_][proposalId];\r\n    proposal.proposer = proposer;\r\n    proposal.amount = amount;\r\n    proposal.digest = keccak256(proposer, amount, transationBytecode);\r\n    proposal.executed = false;\r\n    proposal.createdAt = now;\r\n    proposal.expireAt = proposal.createdAt + 86400;\r\n\r\n    // 提案の種類毎に実行すべき内容を実行する\r\n    // @NOTE literal_stringとbytesは単純に比較できないのでkeccak256のハッシュ値で比較している\r\n    if (type_ == keccak256('mint')) emit MintProposalAdded(proposalId, proposer, amount);\r\n    if (type_ == keccak256('burn')) emit BurnProposalAdded(proposalId, proposer, amount);\r\n\r\n    // 本人は当然承認\r\n    confirmProposal(type_, proposer, proposalId);\r\n\r\n    return proposalId;\r\n  }\r\n\r\n  /**\r\n   * トークン所有者が提案に対して賛成する\r\n   *\r\n   * @param type_ 提案の種類\r\n   * @param confirmer 承認者のアドレス\r\n   * @param proposalId 提案ID\r\n   */\r\n  function confirmProposal(bytes32 type_, address confirmer, uint proposalId) public {\r\n    Proposal storage proposal = proposals[type_][proposalId];\r\n\r\n    // 既に承認済みの場合はエラーを返す\r\n    require(!hasConfirmed(type_, confirmer, proposalId));\r\n\r\n    // 承認行為を行ったフラグを立てる\r\n    proposal.confirmers.push(confirmer);\r\n\r\n    // 提案の種類毎に実行すべき内容を実行する\r\n    // @NOTE literal_stringとbytesは単純に比較できないのでkeccak256のハッシュ値で比較している\r\n    if (type_ == keccak256('mint')) emit MintConfirmed(proposalId, confirmer, proposal.amount);\r\n    if (type_ == keccak256('burn')) emit BurnConfirmed(proposalId, confirmer, proposal.amount);\r\n\r\n    if (isProposalExecutable(type_, proposalId, proposal.proposer, '')) {\r\n      proposal.executed = true;\r\n\r\n      // 提案の種類毎に実行すべき内容を実行する\r\n      // @NOTE literal_stringとbytesは単純に比較できないのでkeccak256のハッシュ値で比較している\r\n      if (type_ == keccak256('mint')) executeMintProposal(proposalId);\r\n      if (type_ == keccak256('burn')) executeBurnProposal(proposalId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 既に承認済みの提案かどうかを返す\r\n   *\r\n   * @param type_ 提案の種類\r\n   * @param addr 承認者のアドレス\r\n   * @param proposalId 提案ID\r\n   *\r\n   * @return 承認済みであればtrue、そうでなければfalse\r\n   */\r\n  function hasConfirmed(bytes32 type_, address addr, uint proposalId) internal view returns (bool) {\r\n    Proposal storage proposal = proposals[type_][proposalId];\r\n    uint length = proposal.confirmers.length;\r\n\r\n    for (uint i = 0; i < length; i++) {\r\n      if (proposal.confirmers[i] == addr) return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 指定した提案を承認したトークンの総量を返す\r\n   *\r\n   * @param type_ 提案の種類\r\n   * @param proposalId 提案ID\r\n   *\r\n   * @return 承認に投票されたトークン数\r\n   */\r\n  function confirmedTotalToken(bytes32 type_, uint proposalId) internal view returns (uint) {\r\n    Proposal storage proposal = proposals[type_][proposalId];\r\n    uint length = proposal.confirmers.length;\r\n    uint total = 0;\r\n\r\n    for (uint i = 0; i < length; i++) {\r\n      total = add(total, _storage.tokenBalance(proposal.confirmers[i]));\r\n    }\r\n\r\n    return total;\r\n  }\r\n\r\n  /**\r\n   * 指定した提案の締め切りを返す\r\n   *\r\n   * @param type_ 提案の種類\r\n   * @param proposalId 提案ID\r\n   *\r\n   * @return 提案の締め切り\r\n   */\r\n  function proposalExpireAt(bytes32 type_, uint proposalId) public view returns (uint) {\r\n    Proposal storage proposal = proposals[type_][proposalId];\r\n    return proposal.expireAt;\r\n  }\r\n\r\n  /**\r\n   * 提案が実行条件を満たしているかを返す\r\n   *\r\n   * 【承認条件】\r\n   * - まだ実行していない\r\n   * - 提案の有効期限内である\r\n   * - 指定した割合以上の賛成トークンを得ている\r\n   *\r\n   * @param proposalId 提案ID\r\n   *\r\n   * @return 実行条件を満たしている場合はtrue、そうでない場合はfalse\r\n   */\r\n  function isProposalExecutable(bytes32 type_, uint proposalId, address proposer, bytes transactionBytecode) internal view returns (bool) {\r\n    Proposal storage proposal = proposals[type_][proposalId];\r\n\r\n    // オーナーがcontrollerを登録したユーザーしか存在しない場合は\r\n    if (_storage.numOwnerAddress() < 2) {\r\n      return true;\r\n    }\r\n\r\n    return  proposal.digest == keccak256(proposer, proposal.amount, transactionBytecode) &&\r\n            isProposalNotExpired(type_, proposalId) &&\r\n            mul(100, confirmedTotalToken(type_, proposalId)) / _storage.totalSupply() > confirmTotalTokenThreshold;\r\n  }\r\n\r\n  /**\r\n   * 指定した種類の提案数を取得する\r\n   *\r\n   * @param type_ 提案の種類（'mint' | 'burn' | 'transferMinimumFee' | 'transferFeeRate'）\r\n   *\r\n   * @return 提案数（承認されていないものも含む）\r\n   */\r\n  function numberOfProposals(bytes32 type_) public constant returns (uint) {\r\n    return proposals[type_].length;\r\n  }\r\n\r\n  /**\r\n   * 未承認で有効期限の切れていない提案の数を返す\r\n   *\r\n   * @param type_ 提案の種類（'mint' | 'burn' | 'transferMinimumFee' | 'transferFeeRate'）\r\n   *\r\n   * @return 提案数\r\n   */\r\n  function numberOfActiveProposals(bytes32 type_) public view returns (uint) {\r\n    uint numActiveProposal = 0;\r\n\r\n    for(uint i = 0; i < proposals[type_].length; i++) {\r\n      if (isProposalNotExpired(type_, i)) {\r\n        numActiveProposal++;\r\n      }\r\n    }\r\n\r\n    return numActiveProposal;\r\n  }\r\n\r\n  /**\r\n   * 提案の有効期限が切れていないかチェックする\r\n   *\r\n   * - 実行されていない\r\n   * - 有効期限が切れていない\r\n   *\r\n   * 場合のみtrueを返す\r\n   */\r\n  function isProposalNotExpired(bytes32 type_, uint proposalId) internal view returns (bool) {\r\n    Proposal storage proposal = proposals[type_][proposalId];\r\n\r\n    return  !proposal.executed &&\r\n            now < proposal.expireAt;\r\n  }\r\n\r\n  /**\r\n   * dJPYを鋳造する\r\n   *\r\n   * - 鋳造する量が0より大きい\r\n   *\r\n   * 場合は成功する\r\n   *\r\n   * @param proposalId 提案ID\r\n   */\r\n  function executeMintProposal(uint proposalId) internal returns (bool) {\r\n    Proposal storage proposal = proposals[keccak256('mint')][proposalId];\r\n\r\n    // ここでも念のためチェックを入れる\r\n    require(proposal.amount > 0);\r\n\r\n    emit MintExecuted(proposalId, proposal.proposer, proposal.amount);\r\n\r\n    // 総供給量 / 実行者のdJPY / 実行者のSHINJI tokenを増やす\r\n    _storage.addTotalSupply(proposal.amount);\r\n    _storage.addCoinBalance(proposal.proposer, proposal.amount);\r\n    _storage.addTokenBalance(proposal.proposer, proposal.amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * dJPYを消却する\r\n   *\r\n   * - 消却する量が0より大きい\r\n   * - 提案者の所有するdJPYの残高がamount以上\r\n   * - 提案者の所有するSHINJIがamountよりも大きい\r\n   *\r\n   * 場合は成功する\r\n   *\r\n   * @param proposalId 提案ID\r\n   */\r\n  function executeBurnProposal(uint proposalId) internal returns (bool) {\r\n    Proposal storage proposal = proposals[keccak256('burn')][proposalId];\r\n\r\n    // ここでも念のためチェックを入れる\r\n    require(proposal.amount > 0);\r\n    require(_storage.coinBalance(proposal.proposer) >= proposal.amount);\r\n    require(_storage.tokenBalance(proposal.proposer) >= proposal.amount);\r\n\r\n    emit BurnExecuted(proposalId, proposal.proposer, proposal.amount);\r\n\r\n    // 総供給量 / 実行者のdJPY / 実行者のSHINJI tokenを減らす\r\n    _storage.subTotalSupply(proposal.amount);\r\n    _storage.subCoinBalance(proposal.proposer, proposal.amount);\r\n    _storage.subTokenBalance(proposal.proposer, proposal.amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n    sig; // #HACK\r\n\r\n    return  src == address(this) ||\r\n            src == owner ||\r\n            src == address(_token);\r\n  }\r\n}\r\n\r\n// import './lib/ProposalLibrary.sol';\r\n/**\r\n *\r\n * 承認プロセスの実装ライブラリ\r\n * IkuraTokenに実装するとサイズ超過してしまうため、ライブラリとして切り出している\r\n *\r\n * 今のところギリギリおさまっているので使ってはいない\r\n */\r\nlibrary ProposalLibrary {\r\n  //\r\n  // structs\r\n  //\r\n\r\n  // tokenのstorage/associationを参照するための構造体\r\n  struct Entity {\r\n    IkuraStorage _storage;\r\n    IkuraAssociation _association;\r\n  }\r\n\r\n  /**\r\n   * 永続化ストレージを設定する\r\n   *\r\n   * @param self 実行Entity\r\n   * @param storage_ 永続化ストレージのインスタンス（アドレス）\r\n   */\r\n  function changeStorage(Entity storage self, address storage_) internal {\r\n    self._storage = IkuraStorage(storage_);\r\n  }\r\n\r\n  /**\r\n   * 関連づける承認プロセスを変更する\r\n   *\r\n   * @param self 実行Entity\r\n   * @param association_ 新しい承認プロセス\r\n   */\r\n  function changeAssociation(Entity storage self, address association_) internal {\r\n    self._association = IkuraAssociation(association_);\r\n  }\r\n\r\n  /**\r\n   * dJPYを鋳造する\r\n   *\r\n   * - コマンドを実行したユーザがオーナーである\r\n   * - 鋳造する量が0より大きい\r\n   *\r\n   * 場合は成功する\r\n   *\r\n   * @param self 実行Entity\r\n   * @param sender 実行アドレス\r\n   * @param amount 鋳造する金額\r\n   */\r\n  function mint(Entity storage self, address sender, uint amount) public returns (bool) {\r\n    require(amount > 0);\r\n\r\n    self._association.newProposal(keccak256('mint'), sender, amount, '');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * dJPYを消却する\r\n   *\r\n   * - コマンドを実行したユーザがオーナーである\r\n   * - 鋳造する量が0より大きい\r\n   * - dJPYの残高がamountよりも大きい\r\n   * - SHINJIをamountよりも大きい\r\n   *\r\n   * 場合は成功する\r\n   *\r\n   * @param self 実行Entity\r\n   * @param sender 実行アドレス\r\n   * @param amount 消却する金額\r\n   */\r\n  function burn(Entity storage self, address sender, uint amount) public returns (bool) {\r\n    require(amount > 0);\r\n    require(self._storage.coinBalance(sender) >= amount);\r\n    require(self._storage.tokenBalance(sender) >= amount);\r\n\r\n    self._association.newProposal(keccak256('burn'), sender, amount, '');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 提案を承認する。\r\n   * #TODO proposalIdは分からないので、別のものからproposalを特定しないといかんよ\r\n   *\r\n   * @param self 実行Entity\r\n   * @param sender 実行アドレス\r\n   * @param type_ 承認する提案の種類\r\n   * @param proposalId 提案ID\r\n   */\r\n  function confirmProposal(Entity storage self, address sender, bytes32 type_, uint proposalId) public {\r\n    self._association.confirmProposal(type_, sender, proposalId);\r\n  }\r\n\r\n  /**\r\n   * 指定した種類の提案数を取得する\r\n   *\r\n   * @param type_ 提案の種類（'mint' | 'burn' | 'transferMinimumFee' | 'transferFeeRate'）\r\n   *\r\n   * @return 提案数（承認されていないものも含む）\r\n   */\r\n  function numberOfProposals(Entity storage self, bytes32 type_) public view returns (uint) {\r\n    return self._association.numberOfProposals(type_);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * トークンロジック\r\n *\r\n */\r\ncontract IkuraToken is IkuraTokenEvent, DSMath, DSAuth {\r\n  //\r\n  // constants\r\n  //\r\n\r\n  // 手数料率\r\n  // 0.01pips = 1\r\n  // 例). 手数料を 0.05% とする場合は 500\r\n  uint _transferFeeRate = 0;\r\n\r\n  // 最低手数料額\r\n  // 1 = 1dJPY\r\n  // amount * 手数料率で算出した金額がここで設定した最低手数料を下回る場合は、最低手数料額を手数料とする\r\n  uint8 _transferMinimumFee = 0;\r\n\r\n  // ロジックバージョン\r\n  uint _logicVersion = 2;\r\n\r\n  //\r\n  // libraries\r\n  //\r\n\r\n  /*using ProposalLibrary for ProposalLibrary.Entity;\r\n  ProposalLibrary.Entity proposalEntity;*/\r\n\r\n  //\r\n  // private\r\n  //\r\n\r\n  // データの永続化ストレージ\r\n  IkuraStorage _storage;\r\n  IkuraAssociation _association;\r\n\r\n  constructor() DSAuth() public {\r\n    // @NOTE リリース時にcontractのdeploy -> watch contract -> setOwnerの流れを\r\n    //省略したい場合は、ここで直接controllerのアドレスを指定するとショートカットできます\r\n    // 勿論テストは通らなくなるので、テストが通ったら試してね\r\n    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\r\n    owner = controllerAddress;\r\n    LogSetOwner(controllerAddress);*/\r\n  }\r\n\r\n  // ----------------------------------------------------------------------------------------------------\r\n  // 以降はERC20に準拠した関数\r\n  // ----------------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * ERC20 Token Standardに準拠した関数\r\n   *\r\n   * dJPYの発行高を返す\r\n   *\r\n   * @return 発行高\r\n   */\r\n  function totalSupply(address sender) public view returns (uint) {\r\n    sender; // #HACK\r\n\r\n    return _storage.totalSupply();\r\n  }\r\n\r\n  /**\r\n   * ERC20 Token Standardに準拠した関数\r\n   *\r\n   * 特定のアドレスのdJPY残高を返す\r\n   *\r\n   * @param sender 実行アドレス\r\n   * @param addr アドレス\r\n   *\r\n   * @return 指定したアドレスのdJPY残高\r\n   */\r\n  function balanceOf(address sender, address addr) public view returns (uint) {\r\n    sender; // #HACK\r\n\r\n    return _storage.coinBalance(addr);\r\n  }\r\n\r\n  /**\r\n   * ERC20 Token Standardに準拠した関数\r\n   *\r\n   * 指定したアドレスに対してdJPYを送金する\r\n   * 以下の条件を満たす必要がある\r\n   *\r\n   * - メッセージの送信者の残高 >= 送金額\r\n   * - 送金額 > 0\r\n   * - 送金先のアドレスの残高 + 送金額 > 送金元のアドレスの残高（overflowのチェックらしい）\r\n   *\r\n   * @param sender 送金元アドレス\r\n   * @param to 送金対象アドレス\r\n   * @param amount 送金額\r\n   *\r\n   * @return 条件を満たして処理に成功した場合はtrue、失敗した場合はfalse\r\n   */\r\n  function transfer(address sender, address to, uint amount) public auth returns (bool success) {\r\n    uint fee = transferFee(sender, sender, to, amount);\r\n    uint totalAmount = add(amount, fee);\r\n\r\n    require(_storage.coinBalance(sender) >= totalAmount);\r\n    require(amount > 0);\r\n\r\n    // 実行者の口座からamount + feeの金額が控除される\r\n    _storage.subCoinBalance(sender, totalAmount);\r\n\r\n    // toの口座にamountが振り込まれる\r\n    _storage.addCoinBalance(to, amount);\r\n\r\n    if (fee > 0) {\r\n      // 手数料を受け取るオーナーのアドレスを選定\r\n      address owner = selectOwnerAddressForTransactionFee(sender);\r\n\r\n      // オーナーの口座にfeeが振り込まれる\r\n      _storage.addCoinBalance(owner, fee);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * ERC20 Token Standardに準拠した関数\r\n   *\r\n   * from（送信元のアドレス）からto（送信先のアドレス）へamount分だけ送金する。\r\n   * 主に口座からの引き出しに利用され、契約によってサブ通貨の送金手数料を徴収することができるようになる。\r\n   * この操作はfrom（送信元のアドレス）が何らかの方法で意図的に送信者を許可する場合を除いて失敗すべき。\r\n   * この許可する処理はapproveコマンドで実装しましょう。\r\n   *\r\n   * 以下の条件を満たす場合だけ送金を認める\r\n   *\r\n   * - 送信元の残高 >= 金額\r\n   * - 送金する金額 > 0\r\n   * - 送信者に対して送信元が許可している金額 >= 送金する金額\r\n   * - 送信先の残高 + 金額 > 送信元の残高（overflowのチェックらしい）\r\n   # - 送金処理を行うユーザーの口座残高 >= 送金処理の手数料\r\n   *\r\n   * @param sender 実行アドレス\r\n   * @param from 送金元アドレス\r\n   * @param to 送金先アドレス\r\n   * @param amount 送金額\r\n   *\r\n   * @return 条件を満たして処理に成功した場合はtrue、失敗した場合はfalse\r\n   */\r\n  function transferFrom(address sender, address from, address to, uint amount) public auth returns (bool success) {\r\n    uint fee = transferFee(sender, from, to, amount);\r\n\r\n    require(_storage.coinBalance(from) >= amount);\r\n    require(_storage.coinAllowance(from, sender) >= amount);\r\n    require(amount > 0);\r\n    require(add(_storage.coinBalance(to), amount) > _storage.coinBalance(to));\r\n\r\n    if (fee > 0) {\r\n      require(_storage.coinBalance(sender) >= fee);\r\n\r\n      // 手数料を受け取るオーナーのアドレスを選定\r\n      address owner = selectOwnerAddressForTransactionFee(sender);\r\n\r\n      // 手数料はこの関数を実行したユーザー（主に取引所とか）から徴収する\r\n      _storage.subCoinBalance(sender, fee);\r\n\r\n      _storage.addCoinBalance(owner, fee);\r\n    }\r\n\r\n    // 送金元から送金額を引く\r\n    _storage.subCoinBalance(from, amount);\r\n\r\n    // 送金許可している金額を減らす\r\n    _storage.subCoinAllowance(from, sender, amount);\r\n\r\n    // 送金口座に送金額を足す\r\n    _storage.addCoinBalance(to, amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * ERC20 Token Standardに準拠した関数\r\n   *\r\n   * spender（支払い元のアドレス）にsender（送信者）がamount分だけ支払うのを許可する\r\n   * この関数が呼ばれる度に送金可能な金額を更新する。\r\n   *\r\n   * @param sender 実行アドレス\r\n   * @param spender 送金元アドレス\r\n   * @param amount 送金額\r\n   *\r\n   * @return 基本的にtrueを返す\r\n   */\r\n  function approve(address sender, address spender, uint amount) public auth returns (bool success) {\r\n    _storage.setCoinAllowance(sender, spender, amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * ERC20 Token Standardに準拠した関数\r\n   *\r\n   * 受取側に対して支払い側がどれだけ送金可能かを返す\r\n   *\r\n   * @param sender 実行アドレス\r\n   * @param owner 受け取り側のアドレス\r\n   * @param spender 支払い元のアドレス\r\n   *\r\n   * @return 許可されている送金料\r\n   */\r\n  function allowance(address sender, address owner, address spender) public view returns (uint remaining) {\r\n    sender; // #HACK\r\n\r\n    return _storage.coinAllowance(owner, spender);\r\n  }\r\n\r\n  // ----------------------------------------------------------------------------------------------------\r\n  // 以降はERC20以外の独自実装\r\n  // ----------------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * 特定のアドレスのSHINJI残高を返す\r\n   *\r\n   * @param sender 実行アドレス\r\n   * @param owner アドレス\r\n   *\r\n   * @return 指定したアドレスのSHINJIトークン量\r\n   */\r\n  function tokenBalanceOf(address sender, address owner) public view returns (uint balance) {\r\n    sender; // #HACK\r\n\r\n    return _storage.tokenBalance(owner);\r\n  }\r\n\r\n  /**\r\n   * 指定したアドレスに対してSHINJIトークンを送金する\r\n   *\r\n   * - 送信元の残トークン量 >= トークン量\r\n   * - 送信するトークン量 > 0\r\n   * - 送信先の残高 + 金額 > 送信元の残高（overflowのチェック）\r\n   *\r\n   * @param sender 実行アドレス\r\n   * @param to 送金対象アドレス\r\n   * @param amount 送金額\r\n   *\r\n   * @return 条件を満たして処理に成功した場合はtrue、失敗した場合はfalse\r\n   */\r\n  function transferToken(address sender, address to, uint amount) public auth returns (bool success) {\r\n    require(_storage.tokenBalance(sender) >= amount);\r\n    require(amount > 0);\r\n    require(add(_storage.tokenBalance(to), amount) > _storage.tokenBalance(to));\r\n\r\n    _storage.subTokenBalance(sender, amount);\r\n    _storage.addTokenBalance(to, amount);\r\n\r\n    emit IkuraTransferToken(sender, to, amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 送金元、送金先、送金金額によって対象のトランザクションの手数料を決定する\r\n   * 送金金額に対して手数料率をかけたものを計算し、最低手数料金額とのmax値を取る。\r\n   *\r\n   * @param sender 実行アドレス\r\n   * @param from 送金元\r\n   * @param to 送金先\r\n   * @param amount 送金金額\r\n   *\r\n   * @return 手数料金額\r\n   */\r\n  function transferFee(address sender, address from, address to, uint amount) public view returns (uint) {\r\n    sender; from; to; // #avoid warning\r\n    if (_transferFeeRate > 0) {\r\n      uint denominator = 1000000; // 0.01 pips だから 100 * 100 * 100 で 100万\r\n      uint numerator = mul(amount, _transferFeeRate);\r\n\r\n      uint fee = numerator / denominator;\r\n      uint remainder = sub(numerator, mul(denominator, fee));\r\n\r\n      // 余りがある場合はfeeに1を足す\r\n      if (remainder > 0) {\r\n        fee++;\r\n      }\r\n\r\n      if (fee < _transferMinimumFee) {\r\n        fee = _transferMinimumFee;\r\n      }\r\n\r\n      return fee;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 手数料率を返す\r\n   *\r\n   * @param sender 実行アドレス\r\n   *\r\n   * @return 手数料率\r\n   */\r\n  function transferFeeRate(address sender) public view returns (uint) {\r\n    sender; // #HACK\r\n\r\n    return _transferFeeRate;\r\n  }\r\n\r\n  /**\r\n   * 最低手数料額を返す\r\n   *\r\n   * @param sender 実行アドレス\r\n   *\r\n   * @return 最低手数料額\r\n   */\r\n  function transferMinimumFee(address sender) public view returns (uint8) {\r\n    sender; // #HACK\r\n\r\n    return _transferMinimumFee;\r\n  }\r\n\r\n  /**\r\n   * 手数料を振り込む口座を選択する\r\n   * #TODO とりあえず一個目のオーナーに固定。後で選定ロジックを変える\r\n   *\r\n   * @param sender 実行アドレス\r\n   * @return 特定のオーナー口座\r\n   */\r\n  function selectOwnerAddressForTransactionFee(address sender) public view returns (address) {\r\n    sender; // #HACK\r\n\r\n    return _storage.primaryOwner();\r\n  }\r\n\r\n  /**\r\n   * dJPYを鋳造する\r\n   *\r\n   * - コマンドを実行したユーザがオーナーである\r\n   * - 鋳造する量が0より大きい\r\n   *\r\n   * 場合は成功する\r\n   *\r\n   * @param sender 実行アドレス\r\n   * @param amount 鋳造する金額\r\n   */\r\n  function mint(address sender, uint amount) public auth returns (bool) {\r\n    require(amount > 0);\r\n\r\n    _association.newProposal(keccak256('mint'), sender, amount, '');\r\n\r\n    return true;\r\n    /*return proposalEntity.mint(sender, amount);*/\r\n  }\r\n\r\n  /**\r\n   * dJPYを消却する\r\n   *\r\n   * - コマンドを実行したユーザがオーナーである\r\n   * - 鋳造する量が0より大きい\r\n   * - dJPYの残高がamountよりも大きい\r\n   * - SHINJIをamountよりも大きい\r\n   *\r\n   * 場合は成功する\r\n   *\r\n   * @param sender 実行アドレス\r\n   * @param amount 消却する金額\r\n   */\r\n  function burn(address sender, uint amount) public auth returns (bool) {\r\n    require(amount > 0);\r\n    require(_storage.coinBalance(sender) >= amount);\r\n    require(_storage.tokenBalance(sender) >= amount);\r\n\r\n    _association.newProposal(keccak256('burn'), sender, amount, '');\r\n\r\n    return true;\r\n    /*return proposalEntity.burn(sender, amount);*/\r\n  }\r\n\r\n  /**\r\n   * 提案を承認する。\r\n   * #TODO proposalIdは分からないので、別のものからproposalを特定しないといかんよ\r\n   */\r\n  function confirmProposal(address sender, bytes32 type_, uint proposalId) public auth {\r\n    _association.confirmProposal(type_, sender, proposalId);\r\n    /*proposalEntity.confirmProposal(sender, type_, proposalId);*/\r\n  }\r\n\r\n  /**\r\n   * 指定した種類の提案数を取得する\r\n   *\r\n   * @param type_ 提案の種類（'mint' | 'burn' | 'transferMinimumFee' | 'transferFeeRate'）\r\n   *\r\n   * @return 提案数（承認されていないものも含む）\r\n   */\r\n  function numberOfProposals(bytes32 type_) public view returns (uint) {\r\n    return _association.numberOfProposals(type_);\r\n    /*return proposalEntity.numberOfProposals(type_);*/\r\n  }\r\n\r\n  /**\r\n   * 関連づける承認プロセスを変更する\r\n   *\r\n   * @param association_ 新しい承認プロセス\r\n   */\r\n  function changeAssociation(address association_) public auth returns (bool) {\r\n    _association = IkuraAssociation(association_);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 永続化ストレージを設定する\r\n   *\r\n   * @param storage_ 永続化ストレージのインスタンス（アドレス）\r\n   */\r\n  function changeStorage(address storage_) public auth returns (bool) {\r\n    _storage = IkuraStorage(storage_);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * ロジックのバージョンを返す\r\n   *\r\n   * @param sender 実行ユーザーのアドレス\r\n   *\r\n   * @return バージョン情報\r\n   */\r\n  function logicVersion(address sender) public view returns (uint) {\r\n    sender; // #HACK\r\n\r\n    return _logicVersion;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"transferMinimumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"selectOwnerAddressForTransactionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"transferFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"type_\",\"type\":\"bytes32\"}],\"name\":\"numberOfProposals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"logicVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"association_\",\"type\":\"address\"}],\"name\":\"changeAssociation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"storage_\",\"type\":\"address\"}],\"name\":\"changeStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"type_\",\"type\":\"bytes32\"},{\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"confirmProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IkuraMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IkuraBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"IkuraTransferToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"IkuraTransferFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"IkuraTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"IkuraApproval\",\"type\":\"event\"}]","ContractName":"IkuraToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0d06b38004be41d8ccb0d767c8987a236e6fb76254abdfb62a7a3ff90527412a"}]}