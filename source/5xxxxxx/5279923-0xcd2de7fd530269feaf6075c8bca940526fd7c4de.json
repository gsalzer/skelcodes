{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/marketplace/Marketplace.sol\r\n\r\n/**\r\n * @title Interface for contracts conforming to ERC-20\r\n */\r\ncontract ERC20Interface {\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}\r\n\r\n/**\r\n * @title Interface for contracts conforming to ERC-721\r\n */\r\ncontract ERC721Interface {\r\n    function ownerOf(uint256 assetId) public view returns (address);\r\n    function safeTransferFrom(address from, address to, uint256 assetId) public;\r\n    function isAuthorized(address operator, uint256 assetId) public view returns (bool);\r\n}\r\n\r\ncontract Marketplace is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    ERC20Interface public acceptedToken;\r\n    ERC721Interface public nonFungibleRegistry;\r\n\r\n    struct Auction {\r\n        // Auction ID\r\n        bytes32 id;\r\n        // Owner of the NFT\r\n        address seller;\r\n        // Price (in wei) for the published item\r\n        uint256 price;\r\n        // Time when this sale ends\r\n        uint256 expiresAt;\r\n    }\r\n\r\n    mapping (uint256 => Auction) public auctionByAssetId;\r\n\r\n    uint256 public ownerCutPercentage;\r\n    uint256 public publicationFeeInWei;\r\n\r\n    /* EVENTS */\r\n    event AuctionCreated(\r\n        bytes32 id,\r\n        uint256 indexed assetId,\r\n        address indexed seller, \r\n        uint256 priceInWei, \r\n        uint256 expiresAt\r\n    );\r\n    event AuctionSuccessful(\r\n        bytes32 id,\r\n        uint256 indexed assetId, \r\n        address indexed seller, \r\n        uint256 totalPrice, \r\n        address indexed winner\r\n    );\r\n    event AuctionCancelled(\r\n        bytes32 id,\r\n        uint256 indexed assetId, \r\n        address indexed seller\r\n    );\r\n\r\n    event ChangedPublicationFee(uint256 publicationFee);\r\n    event ChangedOwnerCut(uint256 ownerCut);\r\n\r\n\r\n    /**\r\n     * @dev Constructor for this contract.\r\n     * @param _acceptedToken - Address of the ERC20 accepted for this marketplace\r\n     * @param _nonFungibleRegistry - Address of the ERC721 registry contract.\r\n     */\r\n    function Marketplace(address _acceptedToken, address _nonFungibleRegistry) public {\r\n        acceptedToken = ERC20Interface(_acceptedToken);\r\n        nonFungibleRegistry = ERC721Interface(_nonFungibleRegistry);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the publication fee that's charged to users to publish items\r\n     * @param publicationFee - Fee amount in wei this contract charges to publish an item\r\n     */\r\n    function setPublicationFee(uint256 publicationFee) onlyOwner public {\r\n        publicationFeeInWei = publicationFee;\r\n\r\n        ChangedPublicationFee(publicationFeeInWei);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the share cut for the owner of the contract that's\r\n     *  charged to the seller on a successful sale.\r\n     * @param ownerCut - Share amount, from 0 to 100\r\n     */\r\n    function setOwnerCut(uint8 ownerCut) onlyOwner public {\r\n        require(ownerCut < 100);\r\n\r\n        ownerCutPercentage = ownerCut;\r\n\r\n        ChangedOwnerCut(ownerCutPercentage);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel an already published order\r\n     * @param assetId - ID of the published NFT\r\n     * @param priceInWei - Price in Wei for the supported coin.\r\n     * @param expiresAt - Duration of the auction (in hours)\r\n     */\r\n    function createOrder(uint256 assetId, uint256 priceInWei, uint256 expiresAt) public {\r\n        address assetOwner = nonFungibleRegistry.ownerOf(assetId);\r\n        require(msg.sender == assetOwner);\r\n        require(nonFungibleRegistry.isAuthorized(address(this), assetId));\r\n        require(priceInWei > 0);\r\n        require(expiresAt > now.add(1 minutes));\r\n\r\n        bytes32 auctionId = keccak256(\r\n            block.timestamp, \r\n            assetOwner,\r\n            assetId, \r\n            priceInWei\r\n        );\r\n\r\n        auctionByAssetId[assetId] = Auction({\r\n            id: auctionId,\r\n            seller: assetOwner,\r\n            price: priceInWei,\r\n            expiresAt: expiresAt\r\n        });\r\n\r\n        // Check if there's a publication fee and\r\n        // transfer the amount to marketplace owner.\r\n        if (publicationFeeInWei > 0) {\r\n            require(acceptedToken.transferFrom(\r\n                msg.sender,\r\n                owner,\r\n                publicationFeeInWei\r\n            ));\r\n        }\r\n\r\n        AuctionCreated(\r\n            auctionId,\r\n            assetId, \r\n            assetOwner,\r\n            priceInWei, \r\n            expiresAt\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel an already published order\r\n     *  can only be canceled by seller or the contract owner.\r\n     * @param assetId - ID of the published NFT\r\n     */\r\n    function cancelOrder(uint256 assetId) public {\r\n        require(auctionByAssetId[assetId].seller == msg.sender || msg.sender == owner);\r\n\r\n        bytes32 auctionId = auctionByAssetId[assetId].id;\r\n        address auctionSeller = auctionByAssetId[assetId].seller;\r\n        delete auctionByAssetId[assetId];\r\n\r\n        AuctionCancelled(auctionId, assetId, auctionSeller);\r\n    }\r\n\r\n    /**\r\n     * @dev Executes the sale for a published NTF\r\n     * @param assetId - ID of the published NFT\r\n     */\r\n    function executeOrder(uint256 assetId, uint256 price) public {\r\n        address seller = auctionByAssetId[assetId].seller;\r\n\r\n        require(seller != address(0));\r\n        require(seller != msg.sender);\r\n        require(auctionByAssetId[assetId].price == price);\r\n        require(now < auctionByAssetId[assetId].expiresAt);\r\n\r\n        require(seller == nonFungibleRegistry.ownerOf(assetId));\r\n\r\n        uint saleShareAmount = 0;\r\n\r\n        if (ownerCutPercentage > 0) {\r\n\r\n            // Calculate sale share\r\n            saleShareAmount = price.mul(ownerCutPercentage).div(100);\r\n\r\n            // Transfer share amount for marketplace Owner.\r\n            acceptedToken.transferFrom(\r\n                msg.sender,\r\n                owner,\r\n                saleShareAmount\r\n            );\r\n        }\r\n\r\n        // Transfer sale amount to seller\r\n        acceptedToken.transferFrom(\r\n            msg.sender,\r\n            seller,\r\n            price.sub(saleShareAmount)\r\n        );\r\n\r\n        // Transfer asset owner\r\n        nonFungibleRegistry.safeTransferFrom(\r\n            seller,\r\n            msg.sender,\r\n            assetId\r\n        );\r\n\r\n\r\n        bytes32 auctionId = auctionByAssetId[assetId].id;\r\n        delete auctionByAssetId[assetId];\r\n\r\n        AuctionSuccessful(auctionId, assetId, seller, price, msg.sender);\r\n    }\r\n }","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"ownerCut\",\"type\":\"uint8\"}],\"name\":\"setOwnerCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonFungibleRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"acceptedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCutPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicationFeeInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"publicationFee\",\"type\":\"uint256\"}],\"name\":\"setPublicationFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionByAssetId\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"executeOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_acceptedToken\",\"type\":\"address\"},{\"name\":\"_nonFungibleRegistry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"AuctionSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"publicationFee\",\"type\":\"uint256\"}],\"name\":\"ChangedPublicationFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerCut\",\"type\":\"uint256\"}],\"name\":\"ChangedOwnerCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Marketplace","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc942000000000000000000000000f87e31492faf9a91b02ee0deaad50d51d56d5d4d","Library":"","SwarmSource":"bzzr://313c2077c514257bb899b71e43879f8747c4d913522bf423682138461a502ed4"}]}