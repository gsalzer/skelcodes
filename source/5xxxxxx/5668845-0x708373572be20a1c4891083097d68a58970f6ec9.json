{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n//Contract By Yoav Taieb. yoav.iosdev@gmail.com\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface LikaToken {\r\n    function setLock(bool _newLockState) external returns (bool success);\r\n    function mint(address _for, uint256 _amount) external returns (bool success);\r\n    function demint(address _for, uint256 _amount) external returns (bool success);\r\n    function decimals() view external returns (uint8 decDigits);\r\n    function totalSupply() view external returns (uint256 supply);\r\n    function balanceOf(address _owner) view external returns (uint256 balance);\r\n}\r\n\r\ncontract LikaCrowdsale {\r\n    using SafeMath for uint256;\r\n    //global definisions\r\n    enum ICOStateEnum {NotStarted, Started, Refunded, Successful}\r\n\r\n    address public owner = msg.sender;\r\n\r\n    LikaToken public managedTokenLedger;\r\n\r\n    string public name = \"Lika\";\r\n    string public symbol = \"LIK\";\r\n\r\n    bool public halted = false;\r\n\r\n    uint256 public minTokensToBuy = 100;\r\n\r\n    uint256 public ICOcontributors = 0;\r\n\r\n    uint256 public ICOstart = 1526947200; //17 May 1018 00:00:00 GMT\r\n    uint256 public ICOend = 1529884800; // 17 June 2018 00:00:00 GMT\r\n    uint256 public Hardcap = 2000 ether;\r\n    uint256 public ICOcollected = 0;\r\n    uint256 public Softcap = 200 ether;\r\n    uint256 public ICOtokensSold = 0;\r\n    uint256 public TakedFunds = 0;\r\n\r\n    uint256 public bonusState = 0;\r\n\r\n    ICOStateEnum public ICOstate = ICOStateEnum.NotStarted;\r\n\r\n    uint8 public decimals = 18;\r\n    uint256 public DECIMAL_MULTIPLIER = 10**uint256(decimals);\r\n\r\n    uint256 public ICOprice = uint256(12 ether).div(100000);\r\n    uint256[4] public ICOamountBonusLimits = [5 ether, 20 ether, 50 ether, 200 ether];\r\n    uint256[4] public ICOamountBonusMultipierInPercent = [103, 105, 107, 110]; // count bonus\r\n    uint256[5] public ICOweekBonus = [152, 117, 110, 105, 102]; // time bonus\r\n\r\n    mapping(address => uint256) public weiForRefundICO;\r\n\r\n    mapping(address => uint256) public weiToRecoverICO;\r\n\r\n    mapping(address => uint256) public balancesForICO;\r\n\r\n    event Purchased(address indexed _from, uint256 _value);\r\n\r\n    function advanceState() public returns (bool success) {\r\n        transitionState();\r\n        return true;\r\n    }\r\n\r\n    function transitionState() internal {\r\n\r\n      if (now >= ICOstart) {\r\n            if (ICOstate == ICOStateEnum.NotStarted) {\r\n                ICOstate = ICOStateEnum.Started;\r\n            }\r\n            if (Hardcap > 0 && ICOcollected >= Hardcap) {\r\n                ICOstate = ICOStateEnum.Successful;\r\n            }\r\n        } if (now >= ICOend) {\r\n            if (ICOstate == ICOStateEnum.Started) {\r\n                if (ICOcollected >= Softcap) {\r\n                    ICOstate = ICOStateEnum.Successful;\r\n                } else {\r\n                    ICOstate = ICOStateEnum.Refunded;\r\n                }\r\n             }\r\n         }\r\n     }\r\n\r\n    modifier stateTransition() {\r\n        transitionState();\r\n        _;\r\n        transitionState();\r\n    }\r\n\r\n    modifier notHalted() {\r\n        require(!halted);\r\n        _;\r\n    }\r\n\r\n    // Ownership\r\n\r\n    event OwnershipTransferred(address indexed viousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function balanceOf(address _owner) view public returns (uint256 balance) {\r\n        return managedTokenLedger.balanceOf(_owner);\r\n    }\r\n\r\n    function totalSupply() view public returns (uint256 balance) {\r\n        return managedTokenLedger.totalSupply();\r\n    }\r\n\r\n\r\n    constructor(address _newLedgerAddress) public {\r\n        require(_newLedgerAddress != address(0));\r\n        managedTokenLedger = LikaToken(_newLedgerAddress);\r\n    }\r\n\r\n    function setNameAndTicker(string _name, string _symbol) onlyOwner public returns (bool success) {\r\n        require(bytes(_name).length > 1);\r\n        require(bytes(_symbol).length > 1);\r\n        name = _name;\r\n        symbol = _symbol;\r\n        return true;\r\n    }\r\n\r\n    function setBonusState(uint256 _newState) onlyOwner public returns (bool success){\r\n       bonusState = _newState;\r\n       return true;\r\n    }\r\n\r\n\r\n    function setLedger(address _newLedgerAddress) onlyOwner public returns (bool success) {\r\n        require(_newLedgerAddress != address(0));\r\n        managedTokenLedger = LikaToken(_newLedgerAddress);\r\n        return true;\r\n    }\r\n\r\n\r\n    function () public payable stateTransition notHalted {\r\n        require(msg.value > 0);\r\n        require(ICOstate == ICOStateEnum.Started);\r\n        assert(ICOBuy());\r\n    }\r\n\r\n    function finalize() stateTransition public returns (bool success) {\r\n        require(ICOstate == ICOStateEnum.Successful);\r\n        owner.transfer(ICOcollected - TakedFunds);\r\n        return true;\r\n    }\r\n\r\n    function setHalt(bool _halt) onlyOwner public returns (bool success) {\r\n        halted = _halt;\r\n        return true;\r\n    }\r\n\r\n    function calculateAmountBoughtICO(uint256 _weisSentScaled, uint256 _amountBonusMultiplier)\r\n        view internal returns (uint256 _tokensToBuyScaled, uint256 _weisLeftScaled) {\r\n        uint256 value = _weisSentScaled;\r\n        uint256 totalPurchased = 0;\r\n\r\n      totalPurchased = value.div(ICOprice);\r\n\t    uint256 weekbonus = getWeekBonus(totalPurchased).sub(totalPurchased);\r\n\t    uint256 forThisRate = totalPurchased.mul(_amountBonusMultiplier).div(100).sub(totalPurchased);\r\n\t    value = _weisSentScaled.sub(totalPurchased.mul(ICOprice));\r\n      totalPurchased = totalPurchased.add(forThisRate).add(weekbonus);\r\n\r\n      return (totalPurchased, value);\r\n    }\r\n\r\n    function getBonusMultipierInPercents(uint256 _sentAmount) public view returns (uint256 _multi) {\r\n        uint256 bonusMultiplier = 100;\r\n        for (uint8 i = 0; i < ICOamountBonusLimits.length; i++) {\r\n            if (_sentAmount < ICOamountBonusLimits[i]) {\r\n                break;\r\n            } else {\r\n                bonusMultiplier = ICOamountBonusMultipierInPercent[i];\r\n            }\r\n        }\r\n        return bonusMultiplier;\r\n    }\r\n\r\n    function getWeekBonus(uint256 amountTokens) internal view returns(uint256 count) {\r\n        uint256 countCoints = 0;\r\n        uint256 bonusMultiplier = 100;\r\n\r\n        //You can check the current Bonus State on www.LikaCoin.io\r\n\r\n        if (bonusState == 0) {\r\n           countCoints = amountTokens.mul(ICOweekBonus[0]);\r\n        } else if (bonusState == 1) {\r\n           countCoints = amountTokens.mul(ICOweekBonus[1] );\r\n        } else if (bonusState == 2) {\r\n          countCoints = amountTokens.mul(ICOweekBonus[2] );\r\n        } else if (bonusState == 3) {\r\n          countCoints = amountTokens.mul(ICOweekBonus[3] );\r\n        }else {\r\n          countCoints = amountTokens.mul(ICOweekBonus[3] );\r\n        }\r\n\r\n        return countCoints.div(bonusMultiplier);\r\n    }\r\n\r\n    function ICOBuy() internal notHalted returns (bool success) {\r\n        uint256 weisSentScaled = msg.value.mul(DECIMAL_MULTIPLIER);\r\n        address _for = msg.sender;\r\n        uint256 amountBonus = getBonusMultipierInPercents(msg.value);\r\n        uint256 tokensBought;\r\n        uint256 fundsLeftScaled;\r\n        (tokensBought, fundsLeftScaled) = calculateAmountBoughtICO(weisSentScaled, amountBonus);\r\n        if (tokensBought < minTokensToBuy.mul(DECIMAL_MULTIPLIER)) {\r\n            revert();\r\n        }\r\n        uint256 fundsLeft = fundsLeftScaled.div(DECIMAL_MULTIPLIER);\r\n        uint256 totalSpent = msg.value.sub(fundsLeft);\r\n        if (balanceOf(_for) == 0) {\r\n            ICOcontributors = ICOcontributors + 1;\r\n        }\r\n        managedTokenLedger.mint(_for, tokensBought);\r\n        balancesForICO[_for] = balancesForICO[_for].add(tokensBought);\r\n        weiForRefundICO[_for] = weiForRefundICO[_for].add(totalSpent);\r\n        weiToRecoverICO[_for] = weiToRecoverICO[_for].add(fundsLeft);\r\n        emit Purchased(_for, tokensBought);\r\n        ICOcollected = ICOcollected.add(totalSpent);\r\n        ICOtokensSold = ICOtokensSold.add(tokensBought);\r\n        return true;\r\n   }\r\n\r\n    function recoverLeftoversICO() stateTransition notHalted public returns (bool success) {\r\n        require(ICOstate != ICOStateEnum.NotStarted);\r\n        uint256 value = weiToRecoverICO[msg.sender];\r\n        delete weiToRecoverICO[msg.sender];\r\n        msg.sender.transfer(value);\r\n        return true;\r\n    }\r\n\r\n    function refundICO(address refundAdress) stateTransition notHalted onlyOwner public returns (bool success) {\r\n        require(ICOstate == ICOStateEnum.Refunded);\r\n        uint256 value = weiForRefundICO[refundAdress];\r\n        delete weiForRefundICO[refundAdress];\r\n        uint256 tokenValue = balancesForICO[refundAdress];\r\n        delete balancesForICO[refundAdress];\r\n        managedTokenLedger.demint(refundAdress, tokenValue);\r\n        refundAdress.transfer(value);\r\n        return true;\r\n    }\r\n\r\n    function withdrawFunds() onlyOwner public returns (bool success) {\r\n        require(Softcap <= ICOcollected);\r\n        owner.transfer(ICOcollected - TakedFunds);\r\n        TakedFunds = ICOcollected;\r\n        return true;\r\n    }\r\n\r\n    function setSoftCap(uint256 _newSoftCap) onlyOwner public returns (bool success) {\r\n       Softcap = _newSoftCap;\r\n       return true;\r\n    }\r\n\r\n    function setHardCap(uint256 _newHardCap) onlyOwner public returns (bool success) {\r\n       Hardcap = _newHardCap;\r\n       return true;\r\n    }\r\n\r\n    function setEndDate(uint256 _newEndDate) onlyOwner public returns (bool success) {\r\n          ICOend = _newEndDate;\r\n          return true;\r\n    }\r\n\r\n\r\n    function manualSendTokens(address rAddress, uint256 amount) onlyOwner public returns (bool success) {\r\n        managedTokenLedger.mint(rAddress, amount);\r\n        balancesForICO[rAddress] = balancesForICO[rAddress].add(amount);\r\n        emit Purchased(rAddress, amount);\r\n        ICOtokensSold = ICOtokensSold.add(amount);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"rAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualSendTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMAL_MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLedgerAddress\",\"type\":\"address\"}],\"name\":\"setLedger\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEndDate\",\"type\":\"uint256\"}],\"name\":\"setEndDate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOstate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTokensToBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managedTokenLedger\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ICOweekBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weiForRefundICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sentAmount\",\"type\":\"uint256\"}],\"name\":\"getBonusMultipierInPercents\",\"outputs\":[{\"name\":\"_multi\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOcollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"advanceState\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ICOamountBonusLimits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOprice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TakedFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refundAdress\",\"type\":\"address\"}],\"name\":\"refundICO\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setNameAndTicker\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ICOamountBonusMultipierInPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newState\",\"type\":\"uint256\"}],\"name\":\"setBonusState\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newHardCap\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOtokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSoftCap\",\"type\":\"uint256\"}],\"name\":\"setSoftCap\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balancesForICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recoverLeftoversICO\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"weiToRecoverICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOcontributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOstart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_halt\",\"type\":\"bool\"}],\"name\":\"setHalt\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Softcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_newLedgerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"viousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LikaCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f8659490bce43466c20cb2d724568af951220cc8","Library":"","SwarmSource":"bzzr://e888d201827d03036740a887ecfccdac12981c91e1e49627c7ac0859b82a1cfa"}]}