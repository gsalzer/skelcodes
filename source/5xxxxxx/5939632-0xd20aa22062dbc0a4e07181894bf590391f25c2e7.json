{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract MyToken {\r\n/* Public variables of the token */\r\nstring public standard = 'Token 0.1';\r\nstring public name;\r\nstring public symbol;\r\nuint8 public decimals;\r\nuint256 public totalSupply;\r\n\r\n/* This creates an array with all balances */\r\nmapping (address => uint256) public balanceOf;\r\nmapping (address => mapping (address => uint256)) public allowance;\r\n\r\n/* This generates a public event on the blockchain that will notify clients */\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n/* This notifies clients about the amount burnt */\r\nevent Burn(address indexed from, uint256 value);\r\n\r\n/* Initializes contract with initial supply tokens to the creator of the contract */\r\nfunction MyToken(\r\n    uint256 initialSupply,\r\n    string tokenName,\r\n    uint8 decimalUnits,\r\n    string tokenSymbol\r\n    ) {\r\n    balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\r\n    totalSupply = initialSupply;                        // Update total supply\r\n    name = tokenName;                                   // Set the name for display purposes\r\n    symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n    decimals = decimalUnits;                            // Amount of decimals for display purposes\r\n}\r\n\r\n/* Send coins */\r\nfunction transfer(address _to, uint256 _value) {\r\n    require(_to != 0x0);                                // Prevent transfer to 0x0 address. Use burn() instead\r\n    require(balanceOf[msg.sender] >= _value);           // Check if the sender has enough\r\n    require(balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\r\n    balanceOf[msg.sender] -= _value;                    // Subtract from the sender\r\n    balanceOf[_to] += _value;                           // Add the same to the recipient\r\n    Transfer(msg.sender, _to, _value);                  // Notify anyone listening that this transfer took place\r\n}\r\n\r\n/* Allow another contract to spend some tokens in your behalf */\r\nfunction approve(address _spender, uint256 _value)\r\n    returns (bool success) {\r\n    allowance[msg.sender][_spender] = _value;\r\n    return true;\r\n}\r\n\r\n/* Approve and then communicate the approved contract in a single tx */\r\nfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n    returns (bool success) {\r\n    tokenRecipient spender = tokenRecipient(_spender);\r\n    if (approve(_spender, _value)) {\r\n        spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n        return true;\r\n    }\r\n}        \r\n\r\n/* A contract attempts to get the coins */\r\nfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n    require(_to != 0x0);                                // Prevent transfer to 0x0 address. Use burn() instead\r\n    require(balanceOf[_from] >= _value);                // Check if the sender has enough\r\n    require(balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\r\n    require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n    balanceOf[_from] -= _value;                         // Subtract from the sender\r\n    balanceOf[_to] += _value;                           // Add the same to the recipient\r\n    allowance[_from][msg.sender] -= _value;\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n}\r\n\r\nfunction burn(uint256 _value) returns (bool success) {\r\n    require(balanceOf[msg.sender] >= _value);           // Check if the sender has enough\r\n    balanceOf[msg.sender] -= _value;                    // Subtract from the sender\r\n    totalSupply -= _value;                              // Updates totalSupply\r\n    Burn(msg.sender, _value);\r\n    return true;\r\n}\r\n\r\nfunction burnFrom(address _from, uint256 _value) returns (bool success) {\r\n    require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n    require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n    balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n    allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n    totalSupply -= _value;                              // Update totalSupply\r\n    Burn(_from, _value);\r\n    return true;\r\n}\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"MyToken","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000033b2e3c9fd0803ce80000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000014454f532041554354494f4e20504c4154464f524d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000034541500000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://d667bd22e80ab7dd284e80fee03f678a22d48bd991fe762edfd2cc59997758fe"}]}