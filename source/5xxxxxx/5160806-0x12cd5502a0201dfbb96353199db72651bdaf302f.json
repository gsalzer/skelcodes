{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Base {\r\n    modifier only(address allowed) {\r\n        require(msg.sender == allowed);\r\n        _;\r\n    }\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length == size + 4);\r\n        _;\r\n    } \r\n    // *************************************************\r\n    // *          reentrancy handling                  *\r\n    // *************************************************\r\n    uint private bitlocks = 0;\r\n    modifier noReentrancy(uint m) {\r\n        var _locks = bitlocks;\r\n        require(_locks & m <= 0);\r\n        bitlocks |= m;\r\n        _;\r\n        bitlocks = _locks;\r\n    }\r\n    modifier noAnyReentrancy {\r\n        var _locks = bitlocks;\r\n        require(_locks <= 0);\r\n        bitlocks = uint(-1);\r\n        _;\r\n        bitlocks = _locks;\r\n    }\r\n    modifier reentrant { _; }\r\n}\r\n\r\n\r\ncontract ERC20 is Base {\r\n    using SafeMath for uint;\r\n    uint public totalSupply;\r\n    bool public isFrozen = false;\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    \r\n    function transferFrom(address _from, address _to, uint _value) public isNotFrozenOnly onlyPayloadSize(3 * 32) returns (bool success) {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve_fixed(address _spender, uint _currentValue, uint _value) public isNotFrozenOnly onlyPayloadSize(3 * 32) returns (bool success) {\r\n        if(allowed[msg.sender][_spender] == _currentValue){\r\n            allowed[msg.sender][_spender] = _value;\r\n            Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public isNotFrozenOnly onlyPayloadSize(2 * 32) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n    modifier isNotFrozenOnly() {\r\n        require(!isFrozen);\r\n        _;\r\n    }\r\n\r\n    modifier isFrozenOnly(){\r\n        require(isFrozen);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Token is ERC20 {\r\n    string public name = \"Array.io Token\";\r\n    string public symbol = \"RAY\";\r\n    uint8 public decimals = 18;\r\n    uint public constant BIT = 10**18;\r\n    uint public constant BASE = 10000 * BIT;\r\n    bool public tgeLive = false;\r\n    uint public tgeStartBlock;\r\n    uint public tgeSettingsAmount;\r\n    uint public tgeSettingsPartInvestor;\r\n    uint public tgeSettingsPartProject;\r\n    uint public tgeSettingsPartFounders;\r\n    uint public tgeSettingsBlocksPerStage;\r\n    uint public tgeSettingsPartInvestorIncreasePerStage;\r\n    uint public tgeSettingsAmountCollect;\r\n    uint public tgeSettingsMaxStages;\r\n    address public projectWallet;\r\n    address public foundersWallet;\r\n    address constant public burnAddress = address(0);\r\n    mapping (address => uint) public invBalances;\r\n    uint public totalInvSupply;\r\n\r\n    modifier isTgeLive(){\r\n        require(tgeLive);\r\n        _;\r\n    }\r\n\r\n    modifier isNotTgeLive(){\r\n        require(!tgeLive);\r\n        _;\r\n    }\r\n\r\n    modifier maxStagesIsNotAchieved() {\r\n        if (totalSupply > BIT) {\r\n            uint stage = block.number.sub(tgeStartBlock).div(tgeSettingsBlocksPerStage);\r\n            require(stage < tgeSettingsMaxStages);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier targetIsNotAchieved(){\r\n        require(tgeSettingsAmountCollect < tgeSettingsAmount);\r\n        _;\r\n    }\r\n\r\n    event Burn(address indexed _owner,  uint _value);\r\n\r\n    function transfer(address _to, uint _value) public isNotFrozenOnly onlyPayloadSize(2 * 32) returns (bool success) {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(balances[projectWallet] < 1 * BIT){\r\n            _internalTgeSetLive();\r\n        }\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Constructor\r\n    /// @param _projectWallet Wallet of project\r\n    /// @param _foundersWallet Wallet of founders\r\n    function Token(address _projectWallet, address _foundersWallet) public {\r\n        projectWallet = _projectWallet;\r\n        foundersWallet = _foundersWallet;\r\n    }\r\n\r\n    /// @dev Fallback function allows to buy tokens\r\n    function ()\r\n    public\r\n    payable\r\n    isTgeLive\r\n    isNotFrozenOnly\r\n    targetIsNotAchieved\r\n    maxStagesIsNotAchieved\r\n    noAnyReentrancy\r\n    {\r\n        require(msg.value > 0);\r\n        if(tgeSettingsAmountCollect.add(msg.value) >= tgeSettingsAmount){\r\n            _finishTge();\r\n        }\r\n        uint refundAmount = 0;\r\n        uint senderAmount = msg.value;\r\n        if(tgeSettingsAmountCollect.add(msg.value) >= tgeSettingsAmount){\r\n            refundAmount = tgeSettingsAmountCollect.add(msg.value).sub(tgeSettingsAmount);\r\n            senderAmount = (msg.value).sub(refundAmount);\r\n        }\r\n        uint stage = block.number.sub(tgeStartBlock).div(tgeSettingsBlocksPerStage);        \r\n        \r\n        uint currentPartInvestor = tgeSettingsPartInvestor.add(stage.mul(tgeSettingsPartInvestorIncreasePerStage));\r\n        uint allStakes = currentPartInvestor.add(tgeSettingsPartProject).add(tgeSettingsPartFounders);\r\n        uint amountProject = senderAmount.mul(tgeSettingsPartProject).div(allStakes);\r\n        uint amountFounders = senderAmount.mul(tgeSettingsPartFounders).div(allStakes);\r\n        uint amountSender = senderAmount.sub(amountProject).sub(amountFounders);\r\n        _mint(amountProject, amountFounders, amountSender);\r\n        msg.sender.transfer(refundAmount);\r\n    }\r\n\r\n    function setFinished()\r\n    public\r\n    only(projectWallet)\r\n    isNotFrozenOnly\r\n    isTgeLive\r\n    {\r\n        if(balances[projectWallet] > 1*BIT){\r\n            _finishTge();\r\n        }\r\n    }\r\n\r\n    /// @dev Start new tge stage\r\n    function tgeSetLive()\r\n    public\r\n    only(projectWallet)\r\n    isNotTgeLive\r\n    isNotFrozenOnly\r\n    {\r\n        _internalTgeSetLive();\r\n    }\r\n\r\n    /// @dev Burn tokens to burnAddress from msg.sender wallet\r\n    /// @param _amount Amount of tokens\r\n    function burn(uint _amount)\r\n    public \r\n    isNotFrozenOnly\r\n    noAnyReentrancy    \r\n    returns(bool _success)\r\n    {\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[burnAddress] = balances[burnAddress].add(_amount);\r\n        totalSupply = totalSupply.sub(_amount);\r\n        msg.sender.transfer(_amount);\r\n        Transfer(msg.sender, burnAddress, _amount);\r\n        Burn(burnAddress, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev _foundersWallet Wallet of founders\r\n    /// @param dests array of addresses \r\n    /// @param values array amount of tokens to transfer    \r\n    function multiTransfer(address[] dests, uint[] values) \r\n    public \r\n    isNotFrozenOnly\r\n    returns(uint) \r\n    {\r\n        uint i = 0;\r\n        while (i < dests.length) {\r\n           transfer(dests[i], values[i]);\r\n           i += 1;\r\n        }\r\n        return i;\r\n    }\r\n\r\n    //---------------- FROZEN -----------------\r\n    /// @dev Allows an owner to confirm freezeng process\r\n    function setFreeze()\r\n    public\r\n    only(projectWallet)\r\n    isNotFrozenOnly\r\n    returns (bool)\r\n    {\r\n        isFrozen = true;\r\n        totalInvSupply = address(this).balance;\r\n        return true;\r\n    }\r\n\r\n    /// @dev Allows to users withdraw eth in frozen stage \r\n    function withdrawFrozen()\r\n    public\r\n    isFrozenOnly\r\n    noAnyReentrancy\r\n    {\r\n        require(invBalances[msg.sender] > 0);\r\n        \r\n        uint amountWithdraw = totalInvSupply.mul(invBalances[msg.sender]).div(totalSupply);        \r\n        invBalances[msg.sender] = 0;\r\n        msg.sender.transfer(amountWithdraw);\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a change settings request.\r\n    function executeSettingsChange(\r\n        uint amount, \r\n        uint partInvestor,\r\n        uint partProject, \r\n        uint partFounders, \r\n        uint blocksPerStage, \r\n        uint partInvestorIncreasePerStage,\r\n        uint maxStages\r\n    ) \r\n    public\r\n    only(projectWallet)\r\n    isNotTgeLive \r\n    isNotFrozenOnly\r\n    returns(bool success) \r\n    {\r\n        tgeSettingsAmount = amount;\r\n        tgeSettingsPartInvestor = partInvestor;\r\n        tgeSettingsPartProject = partProject;\r\n        tgeSettingsPartFounders = partFounders;\r\n        tgeSettingsBlocksPerStage = blocksPerStage;\r\n        tgeSettingsPartInvestorIncreasePerStage = partInvestorIncreasePerStage;\r\n        tgeSettingsMaxStages = maxStages;\r\n        return true;\r\n    }\r\n\r\n    //---------------- GETTERS ----------------\r\n    /// @dev Amount of blocks left to the end of this stage of TGE \r\n    function tgeStageBlockLeft() \r\n    public \r\n    view\r\n    isTgeLive\r\n    returns(uint)\r\n    {\r\n        uint stage = block.number.sub(tgeStartBlock).div(tgeSettingsBlocksPerStage);\r\n        return tgeStartBlock.add(stage.mul(tgeSettingsBlocksPerStage)).sub(block.number);\r\n    }\r\n\r\n    function tgeCurrentPartInvestor()\r\n    public\r\n    view\r\n    isTgeLive\r\n    returns(uint)\r\n    {\r\n        uint stage = block.number.sub(tgeStartBlock).div(tgeSettingsBlocksPerStage);\r\n        return tgeSettingsPartInvestor.add(stage.mul(tgeSettingsPartInvestorIncreasePerStage));\r\n    }\r\n\r\n    function tgeNextPartInvestor()\r\n    public\r\n    view\r\n    isTgeLive\r\n    returns(uint)\r\n    {\r\n        uint stage = block.number.sub(tgeStartBlock).div(tgeSettingsBlocksPerStage).add(1);        \r\n        return tgeSettingsPartInvestor.add(stage.mul(tgeSettingsPartInvestorIncreasePerStage));\r\n    }\r\n\r\n    //---------------- INTERNAL ---------------\r\n    function _finishTge()\r\n    internal\r\n    {\r\n        tgeLive = false;\r\n    }\r\n\r\n    function _mint(uint _amountProject, uint _amountFounders, uint _amountSender)\r\n    internal\r\n    {\r\n        balances[projectWallet] = balances[projectWallet].add(_amountProject);\r\n        balances[foundersWallet] = balances[foundersWallet].add(_amountFounders);\r\n        balances[msg.sender] = balances[msg.sender].add(_amountSender);\r\n        invBalances[msg.sender] = invBalances[msg.sender].add(_amountSender);\r\n        tgeSettingsAmountCollect = tgeSettingsAmountCollect.add(_amountProject+_amountFounders+_amountSender);\r\n        totalSupply = totalSupply.add(_amountProject+_amountFounders+_amountSender);\r\n        Transfer(0x0, msg.sender, _amountSender);\r\n        Transfer(0x0, projectWallet, _amountProject);\r\n        Transfer(0x0, foundersWallet, _amountFounders);\r\n    }\r\n\r\n    function _internalTgeSetLive()\r\n    internal\r\n    {\r\n        tgeLive = true;\r\n        tgeStartBlock = block.number;\r\n        tgeSettingsAmountCollect = 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeSettingsPartFounders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeSettingsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeLive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFrozen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve_fixed\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setFinished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeStageBlockLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeSettingsPartProject\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeSettingsPartInvestorIncreasePerStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeNextPartInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tgeSetLive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeSettingsMaxStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeSettingsAmountCollect\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeCurrentPartInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeSettingsPartInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"partInvestor\",\"type\":\"uint256\"},{\"name\":\"partProject\",\"type\":\"uint256\"},{\"name\":\"partFounders\",\"type\":\"uint256\"},{\"name\":\"blocksPerStage\",\"type\":\"uint256\"},{\"name\":\"partInvestorIncreasePerStage\",\"type\":\"uint256\"},{\"name\":\"maxStages\",\"type\":\"uint256\"}],\"name\":\"executeSettingsChange\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeSettingsBlocksPerStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_projectWallet\",\"type\":\"address\"},{\"name\":\"_foundersWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000734ab5eaee3a81b7f232cad0e2207719a97d7f1d000000000000000000000000b5a916e0468e2b7a129079fc35b74feb220e685a","Library":"","SwarmSource":"bzzr://30ee4cf42cb608dc284dcd00feeeb2c02c99d6390438e1391fca4eb2e8c37c0a"}]}