{"status":"1","message":"OK","result":[{"SourceCode":"contract EtherSafeStorage {\r\n    struct Depositor {\r\n        bytes8      _token;\r\n        uint256     _limit;\r\n        uint256     _deposit;\r\n    }\r\n    \r\n    mapping (address=>Depositor) internal _depositor;\r\n}\r\n\r\ncontract EtherSafeModifier is EtherSafeStorage {\r\n    modifier isRegisterd {\r\n        require(_depositor[msg.sender]._token != 0x0000000000000000);\r\n        _;\r\n    }\r\n    \r\n    modifier isNotRegisterd {\r\n        require(_depositor[msg.sender]._token == 0x0000000000000000);\r\n        _;\r\n    }\r\n    \r\n    modifier isValidDepositor(address depositor, bytes8 token) {\r\n        require(_depositor[depositor]._token != 0x0000000000000000);\r\n        require(_depositor[depositor]._deposit > 0);\r\n        require(_depositor[depositor]._token == token);\r\n        require(block.number >= _depositor[depositor]._limit);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract EtherSafeAbstract {\r\n    function getDepositor() public constant returns(bytes8, uint256, uint256);\r\n    \r\n    function register() public;\r\n    function deposit(uint256 period) public payable;\r\n    function withdraw(address depositor, bytes8 token) public payable;\r\n    function cancel() public payable;\r\n}\r\n\r\ncontract EtherSafe is EtherSafeModifier, EtherSafeAbstract {\r\n    function getDepositor() public constant returns(bytes8, uint256, uint256) {\r\n        return (_depositor[msg.sender]._token, \r\n                _depositor[msg.sender]._limit,\r\n                _depositor[msg.sender]._deposit);\r\n    }\r\n    \r\n    function register() public isNotRegisterd {\r\n        _depositor[msg.sender]._token = bytes8(keccak256(block.number, msg.sender));\r\n    }\r\n    \r\n    function deposit(uint256 period) public payable isRegisterd {\r\n        _depositor[msg.sender]._deposit += msg.value;\r\n        _depositor[msg.sender]._limit = block.number + period;\r\n    }\r\n    \r\n    function withdraw(address depositor, bytes8 token) public payable isValidDepositor(depositor, token) {\r\n        uint256 tempDeposit = _depositor[depositor]._deposit;\r\n         _depositor[depositor]._deposit = 0;\r\n         msg.sender.transfer(tempDeposit + msg.value);\r\n    }\r\n    \r\n    function cancel() public payable isRegisterd {\r\n        uint256 tempDeposit = _depositor[msg.sender]._deposit;\r\n        delete _depositor[msg.sender];\r\n        msg.sender.transfer(tempDeposit + msg.value);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"bytes8\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositor\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"EtherSafe","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://84b6c34ae626a15c2e3c5b2a0550cd7700fa0d16f4c0885875b4bb61dbf1f0b1"}]}