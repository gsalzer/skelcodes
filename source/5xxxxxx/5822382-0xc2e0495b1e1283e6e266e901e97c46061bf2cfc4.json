{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\npragma solidity ^0.4.15;\r\n\r\n// import \"./Crowdsale.sol\";\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n// pragma solidity ^0.4.15;\r\n\r\n// import 'zeppelin-solidity/contracts/math/SafeMath.sol';\r\n// pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n// import \"./Haltable.sol\";\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n// pragma solidity ^0.4.15;\r\n\r\n// import \"zeppelin-solidity/contracts/ownership/Ownable.sol\";\r\n// pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/*\r\n * Haltable\r\n *\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\r\n *\r\n *\r\n * Originally envisioned in FirstBlood ICO contract.\r\n */\r\ncontract Haltable is Ownable {\r\n  bool public halted;\r\n\r\n  modifier stopInEmergency {\r\n    if (halted) revert();\r\n    _;\r\n  }\r\n\r\n  modifier stopNonOwnersInEmergency {\r\n    if (halted && msg.sender != owner) revert();\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    if (!halted) revert();\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function halt() external onlyOwner {\r\n    halted = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unhalt() external onlyOwner onlyInEmergency {\r\n    halted = false;\r\n  }\r\n\r\n}\r\n\r\n// import \"./PricingStrategy.sol\";\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n// pragma solidity ^0.4.15;\r\n\r\n// import \"zeppelin-solidity/contracts/ownership/Ownable.sol\";\r\n\r\n/**\r\n * Interface for defining crowdsale pricing.\r\n */\r\ncontract PricingStrategy is Ownable {\r\n\r\n  /** Interface declaration. */\r\n  function isPricingStrategy() public constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /** Self check if all references are correctly set.\r\n   *\r\n   * Checks that pricing strategy matches crowdsale parameters.\r\n   */\r\n  function isSane(address crowdsale) public constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Pricing tells if this is a presale purchase or not.\r\n     @param purchaser Address of the purchaser\r\n     @return False by default, true if a presale purchaser\r\n   */\r\n  function isPresalePurchase(address purchaser) public constant returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * When somebody tries to buy tokens for X eth, calculate how many tokens they get.\r\n   *\r\n   *\r\n   * @param value - What is the value of the transaction send in as wei\r\n   * @param tokensSold - how much tokens have been sold this far\r\n   * @param weiRaised - how much money has been raised this far in the main token sale - this number excludes presale\r\n   * @param msgSender - who is the investor of this transaction\r\n   * @param decimals - how many decimal units the token has\r\n   * @return Amount of tokens the investor receives\r\n   */\r\n  function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public constant returns (uint tokenAmount);\r\n}\r\n\r\n// import \"./FinalizeAgent.sol\";\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n// pragma solidity ^0.4.15;\r\n\r\n/**\r\n * Finalize agent defines what happens at the end of succeseful crowdsale.\r\n *\r\n * - Allocate tokens for founders, bounties and community\r\n * - Make tokens transferable\r\n * - etc.\r\n */\r\ncontract FinalizeAgent {\r\n\r\n  function isFinalizeAgent() public constant returns(bool) {\r\n    return true;\r\n  }\r\n\r\n  /** Return true if we can run finalizeCrowdsale() properly.\r\n   *\r\n   * This is a safety check function that doesn't allow crowdsale to begin\r\n   * unless the finalizer has been set up properly.\r\n   */\r\n  function isSane() public constant returns (bool);\r\n\r\n  /** Called once by crowdsale finalize() if the sale was success. */\r\n  function finalizeCrowdsale();\r\n\r\n}\r\n\r\n// import \"./FractionalERC20.sol\";\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n// pragma solidity ^0.4.15;\r\n\r\n// import \"zeppelin-solidity/contracts/token/ERC20.sol\";\r\n// pragma solidity ^0.4.18;\r\n\r\n\r\n// import './ERC20Basic.sol';\r\n// pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * A token that defines fractional units as decimals.\r\n */\r\ncontract FractionalERC20 is ERC20 {\r\n\r\n  uint public decimals;\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * Abstract base contract for token sales.\r\n *\r\n * Handle\r\n * - start and end dates\r\n * - accepting investments\r\n * - minimum funding goal and refund\r\n * - various statistics during the crowdfund\r\n * - different pricing strategies\r\n * - different investment policies (require server side customer id, allow only whitelisted addresses)\r\n *\r\n */\r\ncontract Crowdsale is Haltable {\r\n  /* Time period to scale eth cap */\r\n  uint public constant TIME_PERIOD_IN_SEC = 1 days;\r\n\r\n  /* Base eth cap */\r\n  uint public baseEthCap;\r\n\r\n  /* Max eth per address */\r\n  uint public maxEthPerAddress;\r\n\r\n  /* Max investment count when we are still allowed to change the multisig address */\r\n  uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5;\r\n\r\n  using SafeMath for uint;\r\n\r\n  /* The token we are selling */\r\n  FractionalERC20 public token;\r\n\r\n  /* How we are going to price our offering */\r\n  PricingStrategy public pricingStrategy;\r\n\r\n  /* Post-success callback */\r\n  FinalizeAgent public finalizeAgent;\r\n\r\n  /* tokens will be transfered from this address */\r\n  address public multisigWallet;\r\n\r\n  /* if the funding goal is not reached, investors may withdraw their funds */\r\n  uint public minimumFundingGoal;\r\n\r\n  /* the UNIX timestamp start date of the crowdsale */\r\n  uint public startsAt;\r\n\r\n  /* the UNIX timestamp end date of the crowdsale */\r\n  uint public endsAt;\r\n\r\n  /* the number of tokens already sold through this contract*/\r\n  uint256 public tokensSold = 0;\r\n\r\n  /* How many wei of funding we have raised */\r\n  uint256 public weiRaised = 0;\r\n\r\n  /* Calculate incoming funds from presale contracts and addresses */\r\n  uint public presaleWeiRaised = 0;\r\n\r\n  /* How many distinct addresses have invested */\r\n  uint public investorCount = 0;\r\n\r\n  /* How much wei we have returned back to the contract after a failed crowdfund. */\r\n  uint public loadedRefund = 0;\r\n\r\n  /* How much wei we have given back to investors.*/\r\n  uint public weiRefunded = 0;\r\n\r\n  /* Has this crowdsale been finalized */\r\n  bool public finalized;\r\n\r\n  /* Do we need to have unique contributor id for each customer */\r\n  bool public requireCustomerId;\r\n\r\n  /**\r\n    * Do we verify that contributor has been cleared on the server side (accredited investors only).\r\n    * This method was first used in FirstBlood crowdsale to ensure all contributors have accepted terms on sale (on the web).\r\n    */\r\n  bool public requiredSignedAddress;\r\n\r\n  /* Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\r\n  address public signerAddress;\r\n\r\n  /** How much ETH each address has invested to this crowdsale */\r\n  mapping (address => uint256) public investedAmountOf;\r\n\r\n  /** How much tokens this crowdsale has credited for each investor address */\r\n  mapping (address => uint256) public tokenAmountOf;\r\n\r\n  /** This is for manul testing for the interaction from owner wallet. You can set it to any value and inspect this in blockchain explorer to see that crowdsale interaction works. */\r\n  uint public ownerTestValue;\r\n\r\n  /** State machine\r\n   *\r\n   * - Preparing: All contract initialization calls and variables have not been set yet\r\n   * - Prefunding: We have not passed start time yet\r\n   * - Funding: Active crowdsale\r\n   * - Success: Minimum funding goal reached\r\n   * - Failure: Minimum funding goal not reached before ending time\r\n   * - Finalized: The finalized has been called and succesfully executed\r\n   * - Refunding: Refunds are loaded on the contract for reclaim.\r\n   */\r\n  enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}\r\n\r\n  // A new investment was made\r\n  event Invested(address investor, uint256 weiAmount, uint256 tokenAmount, uint128 customerId);\r\n\r\n  // Refund was processed for a contributor\r\n  event Refund(address investor, uint weiAmount);\r\n\r\n  // The rules were changed what kind of investments we accept\r\n  event InvestmentPolicyChanged(bool newRequireCustomerId, bool newRequiredSignedAddress, address newSignerAddress);\r\n\r\n  // Crowdsale end time has been changed\r\n  event EndsAtChanged(uint newEndsAt);\r\n\r\n  // Base eth cap has been changed\r\n  event BaseEthCapChanged(uint newBaseEthCap);\r\n\r\n  // Max eth per address changed\r\n  event MaxEthPerAddressChanged(uint newMaxEthPerAddress);\r\n\r\n  function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, uint _baseEthCap, uint _maxEthPerAddress) {\r\n\r\n    owner = msg.sender;\r\n\r\n    baseEthCap = _baseEthCap;\r\n\r\n    maxEthPerAddress = _maxEthPerAddress;\r\n\r\n    token = FractionalERC20(_token);\r\n\r\n    setPricingStrategy(_pricingStrategy);\r\n\r\n    multisigWallet = _multisigWallet;\r\n    if (multisigWallet == 0) {\r\n        revert();\r\n    }\r\n\r\n    if (_start == 0) {\r\n        revert();\r\n    }\r\n\r\n    startsAt = _start;\r\n\r\n    if (_end == 0) {\r\n        revert();\r\n    }\r\n\r\n    endsAt = _end;\r\n\r\n    // Don't mess the dates\r\n    if (startsAt >= endsAt) {\r\n        revert();\r\n    }\r\n\r\n    // Minimum funding goal can be zero\r\n    minimumFundingGoal = _minimumFundingGoal;\r\n  }\r\n\r\n  function() payable {\r\n    buy();\r\n  }\r\n\r\n  /**\r\n   * Make an investment.\r\n   *\r\n   * Crowdsale must be running for one to invest.\r\n   * We must have not pressed the emergency brake.\r\n   *\r\n   * @param receiver The Ethereum address who receives the tokens\r\n   * @param customerId (optional) UUID v4 to track the successful payments on the server side\r\n   *\r\n   */\r\n  function investInternal(address receiver, uint128 customerId) stopInEmergency private {\r\n    uint weiAmount = msg.value;    \r\n\r\n    // Account presale sales separately, so that they do not count against pricing tranches\r\n    uint tokenAmount = pricingStrategy.calculatePrice(weiAmount, weiRaised - presaleWeiRaised, tokensSold, msg.sender, token.decimals());\r\n\r\n    if (tokenAmount == 0) {\r\n      // Dust transaction\r\n      revert();\r\n    }\r\n\r\n    //get the eth cap for the time period\r\n    uint currentFgcCap = getCurrentFgcCap();\r\n    if (tokenAmount > currentFgcCap) {\r\n      // We don't allow more than the current cap\r\n      revert();\r\n    }\r\n\r\n    if (investedAmountOf[receiver] == 0) {\r\n       // A new investor\r\n       investorCount++;\r\n    }\r\n\r\n    // Update investor\r\n    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\r\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);    \r\n    \r\n    // Update totals\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    tokensSold = tokensSold.add(tokenAmount);\r\n\r\n    if (pricingStrategy.isPresalePurchase(receiver)) {\r\n        presaleWeiRaised = presaleWeiRaised.add(weiAmount);\r\n    }\r\n\r\n    // Check that we did not bust the cap\r\n    if (isBreakingCap(weiAmount, tokenAmount, weiRaised, tokensSold)) {\r\n      revert();\r\n    }\r\n\r\n    assignTokens(receiver, tokenAmount);\r\n\r\n    // Pocket the money\r\n    if (!multisigWallet.send(weiAmount)) \r\n      revert();\r\n\r\n    // Tell us invest was success\r\n    Invested(receiver, weiAmount, tokenAmount, customerId);\r\n  }\r\n\r\n  function getCurrentFgcCap() public constant returns (uint) {\r\n    if (block.timestamp < startsAt) \r\n      return maxEthPerAddress;\r\n\r\n    uint timeSinceStart = block.timestamp.sub(startsAt);\r\n    uint currentPeriod = timeSinceStart.div(TIME_PERIOD_IN_SEC).add(1);\r\n\r\n    if (currentPeriod < 2) {\r\n      return 5000 * 10**token.decimals();\r\n    }\r\n    if (currentPeriod > 2 && currentPeriod < 5) {\r\n      return 1000 * 10**token.decimals();\r\n    }\r\n    if (currentPeriod > 4 && currentPeriod < 6) {\r\n      return 500 * 10**token.decimals();\r\n    }\r\n    if (currentPeriod > 5 && currentPeriod < 9) {\r\n      return 200 * 10**token.decimals();\r\n    }\r\n    if (currentPeriod > 8 && currentPeriod < 11) {\r\n      return 100 * 10**token.decimals();\r\n    }\r\n\r\n    return maxEthPerAddress;\r\n  }\r\n\r\n  /**\r\n   * Preallocate tokens for the early investors.\r\n   *\r\n   * Preallocated tokens have been sold before the actual crowdsale opens.\r\n   * This function mints the tokens and moves the crowdsale needle.\r\n   *\r\n   * Investor count is not handled; it is assumed this goes for multiple investors\r\n   * and the token distribution happens outside the smart contract flow.\r\n   *\r\n   * No money is exchanged, as the crowdsale team already have received the payment.\r\n   *\r\n   * @param fullTokens tokens as full tokens - decimal places added internally\r\n   * @param weiPrice Price of a single full token in wei\r\n   *\r\n   */\r\n  function preallocate(address receiver, uint256 fullTokens, uint256 weiPrice) public onlyOwner {\r\n\r\n    uint256 tokenAmount = fullTokens;\r\n\t//uint256 tokenAmount = fullTokens * 10**token.decimals();\r\n    uint256 weiAmount = weiPrice * fullTokens; // This can be also 0, we give out tokens for free\r\n\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    tokensSold = tokensSold.add(tokenAmount);\r\n\r\n    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\r\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);\r\n\r\n    assignTokens(receiver, tokenAmount);\r\n\r\n    // Tell us invest was success\r\n    Invested(receiver, weiAmount, tokenAmount, 0);\r\n  }\r\n\r\n  /**\r\n   * Allow anonymous contributions to this crowdsale.\r\n   */\r\n  function investWithSignedAddress(address addr, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\r\n     bytes32 hash = sha256(addr);\r\n     if (ecrecover(hash, v, r, s) != signerAddress) \r\n      revert();\r\n     if (customerId == 0) \r\n      revert();  // UUIDv4 sanity check\r\n     investInternal(addr, customerId);\r\n  }\r\n\r\n  /**\r\n   * Track who is the customer making the payment so we can send thank you email.\r\n   */\r\n  function investWithCustomerId(address addr, uint128 customerId) public payable {\r\n    if (requiredSignedAddress) \r\n      revert(); // Crowdsale allows only server-side signed participants\r\n    if (customerId == 0) \r\n      revert();  // UUIDv4 sanity check\r\n    investInternal(addr, customerId);\r\n  }\r\n\r\n  /**\r\n   * Allow anonymous contributions to this crowdsale.\r\n   */\r\n  function invest(address addr) public payable {\r\n    if (requireCustomerId) \r\n      revert(); // Crowdsale needs to track partipants for thank you email\r\n    if (requiredSignedAddress) \r\n      revert(); // Crowdsale allows only server-side signed participants\r\n    investInternal(addr, 0);\r\n  }\r\n\r\n  /**\r\n   * Invest to tokens, recognize the payer and clear his address.\r\n   *\r\n   */\r\n  function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\r\n    investWithSignedAddress(msg.sender, customerId, v, r, s);\r\n  }\r\n\r\n  /**\r\n   * Invest to tokens, recognize the payer.\r\n   *\r\n   */\r\n  function buyWithCustomerId(uint128 customerId) public payable {\r\n    investWithCustomerId(msg.sender, customerId);\r\n  }\r\n\r\n  /**\r\n   * The basic entry point to participate the crowdsale process.\r\n   *\r\n   * Pay for funding, get invested tokens back in the sender address.\r\n   */\r\n  function buy() public payable {\r\n    invest(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * Finalize a succcesful crowdsale.\r\n   *\r\n   * The owner can triggre a call the contract that provides post-crowdsale actions, like releasing the tokens.\r\n   */\r\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\r\n\r\n    // Already finalized\r\n    if (finalized) {\r\n      revert();\r\n    }\r\n\r\n    // Finalizing is optional. We only call it if we are given a finalizing agent.\r\n    if (address(finalizeAgent) != 0) {\r\n      finalizeAgent.finalizeCrowdsale();\r\n    }\r\n\r\n    finalized = true;\r\n  }\r\n\r\n  /**\r\n   * Allow to (re)set finalize agent.\r\n   *\r\n   * Design choice: no state restrictions on setting this, so that we can fix fat finger mistakes.\r\n   */\r\n  function setFinalizeAgent(FinalizeAgent addr) onlyOwner {\r\n    finalizeAgent = addr;\r\n\r\n    // Don't allow setting bad agent\r\n    if (!finalizeAgent.isFinalizeAgent()) {\r\n      revert();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set policy do we need to have server-side customer ids for the investments.\r\n   *\r\n   */\r\n  function setRequireCustomerId(bool value) onlyOwner {\r\n    requireCustomerId = value;\r\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\r\n  }\r\n\r\n  /**\r\n   * Set policy if all investors must be cleared on the server side first.\r\n   *\r\n   * This is e.g. for the accredited investor clearing.\r\n   *\r\n   */\r\n  function setRequireSignedAddress(bool value, address _signerAddress) onlyOwner {\r\n    requiredSignedAddress = value;\r\n    signerAddress = _signerAddress;\r\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\r\n  }\r\n\r\n  /** \r\n   * Set the base eth cap\r\n   */\r\n  function setBaseEthCap(uint _baseEthCap) onlyOwner {\r\n    if (_baseEthCap == 0) \r\n      revert();\r\n    baseEthCap = _baseEthCap;\r\n    BaseEthCapChanged(baseEthCap);\r\n  }\r\n\r\n  /**\r\n   * Set the max eth per address\r\n   */\r\n  function setMaxEthPerAddress(uint _maxEthPerAddress) onlyOwner {\r\n    if(_maxEthPerAddress == 0)\r\n      revert();\r\n    maxEthPerAddress = _maxEthPerAddress;\r\n    MaxEthPerAddressChanged(maxEthPerAddress);\r\n  }\r\n\r\n  /**\r\n   * Allow crowdsale owner to close early or extend the crowdsale.\r\n   *\r\n   * This is useful e.g. for a manual soft cap implementation:\r\n   * - after X amount is reached determine manual closing\r\n   *\r\n   * This may put the crowdsale to an invalid state,\r\n   * but we trust owners know what they are doing.\r\n   *\r\n   */\r\n  function setEndsAt(uint time) onlyOwner {\r\n    if (now > time) {\r\n      revert(); // Don't change past\r\n    }\r\n\r\n    endsAt = time;\r\n    EndsAtChanged(endsAt);\r\n  }\r\n\r\n  /**\r\n   * Allow to (re)set pricing strategy.\r\n   *\r\n   * Design choice: no state restrictions on the set, so that we can fix fat finger mistakes.\r\n   */\r\n  function setPricingStrategy(PricingStrategy _pricingStrategy) onlyOwner {\r\n    pricingStrategy = _pricingStrategy;\r\n\r\n    // Don't allow setting bad agent\r\n    if (!pricingStrategy.isPricingStrategy()) {\r\n      revert();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allow to change the team multisig address in the case of emergency.\r\n   *\r\n   * This allows to save a deployed crowdsale wallet in the case the crowdsale has not yet begun\r\n   * (we have done only few test transactions). After the crowdsale is going\r\n   * then multisig address stays locked for the safety reasons.\r\n   */\r\n  function setMultisig(address addr) public onlyOwner {\r\n\r\n    // Change\r\n    if (investorCount > MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE) {\r\n      revert();\r\n    }\r\n\r\n    multisigWallet = addr;\r\n  }\r\n\r\n  /**\r\n   * Allow load refunds back on the contract for the refunding.\r\n   *\r\n   * The team can transfer the funds back on the smart contract in the case the minimum goal was not reached..\r\n   */\r\n  function loadRefund() public payable inState(State.Failure) {\r\n    if (msg.value == 0) \r\n      revert();\r\n    loadedRefund = loadedRefund.add(msg.value);\r\n  }\r\n\r\n  /**\r\n   * Investors can claim refund.\r\n   *\r\n   * Note that any refunds from proxy buyers should be handled separately,\r\n   * and not through this contract.\r\n   */\r\n  function refund() public inState(State.Refunding) {\r\n    uint256 weiValue = investedAmountOf[msg.sender];\r\n    if (weiValue == 0) \r\n      revert();\r\n    investedAmountOf[msg.sender] = 0;\r\n    weiRefunded = weiRefunded.add(weiValue);\r\n    Refund(msg.sender, weiValue);\r\n    if (!msg.sender.send(weiValue)) \r\n      revert();\r\n  }\r\n\r\n  /**\r\n   * @return true if the crowdsale has raised enough money to be a successful.\r\n   */\r\n  function isMinimumGoalReached() public constant returns (bool reached) {\r\n    return weiRaised >= minimumFundingGoal;\r\n  }\r\n\r\n  /**\r\n   * Check if the contract relationship looks good.\r\n   */\r\n  function isFinalizerSane() public constant returns (bool sane) {\r\n    return finalizeAgent.isSane();\r\n  }\r\n\r\n  /**\r\n   * Check if the contract relationship looks good.\r\n   */\r\n  function isPricingSane() public constant returns (bool sane) {\r\n    return pricingStrategy.isSane(address(this));\r\n  }\r\n\r\n  /**\r\n   * Crowdfund state machine management.\r\n   *\r\n   * We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.\r\n   */\r\n  function getState() public constant returns (State) {\r\n    if (finalized) \r\n      return State.Finalized;\r\n    else if (address(finalizeAgent) == 0) \r\n      return State.Preparing;\r\n    else if (!finalizeAgent.isSane()) \r\n      return State.Preparing;\r\n    else if (!pricingStrategy.isSane(address(this))) \r\n      return State.Preparing;\r\n    else if (block.timestamp < startsAt) \r\n      return State.PreFunding;\r\n    else if (block.timestamp <= endsAt && !isCrowdsaleFull()) \r\n      return State.Funding;\r\n    else if (isMinimumGoalReached()) \r\n      return State.Success;\r\n    else if (!isMinimumGoalReached() && weiRaised > 0 && loadedRefund >= weiRaised) \r\n      return State.Refunding;\r\n    else \r\n      return State.Failure;\r\n  }\r\n\r\n  /** This is for manual testing of multisig wallet interaction */\r\n  function setOwnerTestValue(uint val) onlyOwner {\r\n    ownerTestValue = val;\r\n  }\r\n\r\n  /** Interface marker. */\r\n  function isCrowdsale() public constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  //\r\n  // Modifiers\r\n  //\r\n\r\n  /** Modified allowing execution only if the crowdsale is currently running.  */\r\n  modifier inState(State state) {\r\n    if (getState() != state) \r\n      revert();\r\n    _;\r\n  }\r\n\r\n\r\n  //\r\n  // Abstract functions\r\n  //\r\n\r\n  /**\r\n   * Check if the current invested breaks our cap rules.\r\n   *\r\n   *\r\n   * The child contract must define their own cap setting rules.\r\n   * We allow a lot of flexibility through different capping strategies (ETH, token count)\r\n   * Called from invest().\r\n   *\r\n   * @param weiAmount The amount of wei the investor tries to invest in the current transaction\r\n   * @param tokenAmount The amount of tokens we try to give to the investor in the current transaction\r\n   * @param weiRaisedTotal What would be our total raised balance after this transaction\r\n   * @param tokensSoldTotal What would be our total sold tokens count after this transaction\r\n   *\r\n   * @return true if taking this investment would break our cap rules\r\n   */\r\n  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken);\r\n\r\n  /**\r\n   * Check if the current crowdsale is full and we can no longer sell any tokens.\r\n   */\r\n  function isCrowdsaleFull() public constant returns (bool);\r\n\r\n  /**\r\n   * Create new tokens or transfer issued tokens to the investor depending on the cap model.\r\n   */\r\n  function assignTokens(address receiver, uint tokenAmount) private;\r\n}\r\n\r\n// import \"./ReleasableToken.sol\";\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n// pragma solidity ^0.4.15;\r\n\r\n// import \"zeppelin-solidity/contracts/ownership/Ownable.sol\";\r\n// import \"zeppelin-solidity/contracts/token/ERC20.sol\";\r\n\r\n\r\n/**\r\n * Define interface for releasing the token transfer after a successful crowdsale.\r\n */\r\ncontract ReleasableToken is ERC20, Ownable {\r\n\r\n  /* The finalizer contract that allows unlift the transfer limits on this token */\r\n  address public releaseAgent;\r\n\r\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\r\n  bool public released = false;\r\n\r\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\r\n  mapping (address => bool) public transferAgents;\r\n\r\n  /**\r\n   * Limit token transfer until the crowdsale is over.\r\n   *\r\n   */\r\n  modifier canTransfer(address _sender) {\r\n\r\n    if(!released) {\r\n        if(!transferAgents[_sender]) {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Set the contract that can call release and make the token transferable.\r\n   *\r\n   * Design choice. Allow reset the release agent to fix fat finger mistakes.\r\n   */\r\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\r\n\r\n    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\r\n    releaseAgent = addr;\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\r\n   */\r\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\r\n    transferAgents[addr] = state;\r\n  }\r\n\r\n  /**\r\n   * One way function to release the tokens to the wild.\r\n   *\r\n   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\r\n   */\r\n  function releaseTokenTransfer() public onlyReleaseAgent {\r\n    released = true;\r\n  }\r\n\r\n  /** The function can be called only before or after the tokens have been releasesd */\r\n  modifier inReleaseState(bool releaseState) {\r\n    if(releaseState != released) {\r\n        revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n  /** The function can be called only by a whitelisted release agent. */\r\n  modifier onlyReleaseAgent() {\r\n    if(msg.sender != releaseAgent) {\r\n        revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\r\n    // Call StandardToken.transfer()\r\n   return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\r\n    // Call StandardToken.transferForm()\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * The default behavior for the crowdsale end.\r\n *\r\n * Unlock tokens.\r\n */\r\ncontract DefaultFinalizeAgent is FinalizeAgent {\r\n\r\n  ReleasableToken public token;\r\n  Crowdsale public crowdsale;\r\n\r\n  function DefaultFinalizeAgent(ReleasableToken _token, Crowdsale _crowdsale) {\r\n    token = _token;\r\n    crowdsale = _crowdsale;\r\n  }\r\n\r\n  /** Check that we can release the token */\r\n  function isSane() public constant returns (bool) {\r\n    return (token.releaseAgent() == address(this));\r\n  }\r\n\r\n  /** Called once by crowdsale finalize() if the sale was success. */\r\n  function finalizeCrowdsale() public {\r\n    if (msg.sender != address(crowdsale)) {\r\n      revert();\r\n    }\r\n    token.releaseTokenTransfer();\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalizeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSane\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"DefaultFinalizeAgent","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003c7b3d797f200e23d839936439a96f47d5a65ff4000000000000000000000000725e20f875d5b8427a65df5bbda844141f3fcf37","Library":"","SwarmSource":"bzzr://806dcb6ff0a7659eeec298fa3633947bc22346c3db44142fe9edb795b1446263"}]}