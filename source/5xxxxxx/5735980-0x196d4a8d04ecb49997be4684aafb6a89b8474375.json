{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint);\r\n  function balanceOf(address who) public view returns (uint);\r\n  function transfer(address to, uint value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint);\r\n  function transferFrom(address from, address to, uint value) public returns (bool);\r\n  function approve(address spender, uint value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  uint totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract RobotarTestToken is MintableToken {\r\n    \r\n  // Constants\r\n  // =========\r\n  \r\n    string public constant name = \"Robotar token\";\r\n    \r\n    string public constant symbol = \"TTAR\";\r\n    \r\n    uint32 public constant decimals = 18;\r\n    \r\n    // Tokens are frozen until ICO ends.\r\n    \r\n    bool public frozen = true;\r\n    \r\n    \r\n  address public ico;\r\n  modifier icoOnly { require(msg.sender == ico); _; }\r\n  \r\n  \r\n  // Constructor\r\n  // ===========\r\n  \r\n  function RobotarTestToken(address _ico) public {\r\n    ico = _ico;\r\n  }\r\n  \r\n    function defrost() external icoOnly {\r\n    frozen = false;\r\n  }\r\n    \r\n     // ERC20 functions\r\n  // =========================\r\n\r\n  function transfer(address _to, uint _value)  public returns (bool) {\r\n    require(!frozen);\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n    require(!frozen);\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n\r\n  function approve(address _spender, uint _value) public returns (bool) {\r\n    require(!frozen);\r\n    return super.approve(_spender, _value);\r\n  }\r\n    \r\n /**  \r\n  // Save tokens from contract\r\n  function withdrawToken(address _tokenContract, address where, uint _value) external icoOnly {\r\n    ERC20 _token = ERC20(_tokenContract);\r\n    _token.transfer(where, _value);\r\n  }\r\n  */\r\n  \r\n  function supplyBezNolei() public view returns(uint) {\r\n  return totalSupply().div(1 ether);\r\n  }\r\n    \r\n}\r\n\r\n\r\ncontract TestRobotarCrowdsale is Ownable {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    address multisig;\r\n\r\n   RobotarTestToken public token = new RobotarTestToken(this);\r\n\r\n// uint public created_time = now;\r\n\r\n    \r\n  uint rate = 1000;\r\n       \r\n\tuint PresaleStart = 0;\r\n\tuint CrowdsaleStart = 0;\r\n\tuint PresalePeriod = 1 days;\r\n\tuint CrowdsalePeriod = 1 days;\r\n\tuint public threshold = 1000000000000000;\t\r\n\t\r\n\tuint bountyPercent = 10;\r\n\tuint foundationPercent = 50;\r\n\tuint teamPercent = 40;\r\n\t\r\n\taddress bounty;\r\n\taddress foundation;\r\n\taddress team;\r\n\t\r\n // Crowdsale constructor\r\n \r\n    function TestRobotarCrowdsale() public {\r\n        \r\n\tmultisig = owner;\t\r\n\t\t\t\r\n\t      }\r\n\t      \t      \r\n\t      function setPresaleStart(uint _presaleStart) onlyOwner public returns (bool) {\r\n\t      PresaleStart = _presaleStart;\r\n\t //     require(PresaleStart > now) ;\r\n\t      return true;\r\n\t      }\r\n\t      \r\n\t       function setCrowdsaleStart(uint _crowdsaleStart)  onlyOwner public returns (bool) {\r\n\t       CrowdsaleStart = _crowdsaleStart;\r\n\t //      require(CrowdsaleStart > now && CrowdsaleStart > PresaleStart + 7 days ) ;\r\n\t       return true;\r\n\t       }\r\n      \r\n   /**    modifier saleIsOn() {\r\nrequire(now > testStart && now < testEnd || now > PresaleStart && now < PresaleStart + PresalePeriod || now > CrowdsaleStart && now <  CrowdsaleStart + CrowdsalePeriod);\r\n    \t_;\r\n    } **/\r\n    \r\n\r\n   function createTokens() public payable  {\r\n       uint tokens = 0;\r\n       uint bonusTokens = 0;\r\n       \r\n         if (now > PresaleStart && now < PresaleStart + PresalePeriod) {\r\n       tokens = rate.mul(msg.value);\r\n        bonusTokens = tokens.div(4);\r\n        } \r\n        else if (now > CrowdsaleStart && now <  CrowdsaleStart + CrowdsalePeriod){\r\n        tokens = rate.mul(msg.value);\r\n        \r\n        if(now < CrowdsaleStart + CrowdsalePeriod/4) {bonusTokens = tokens.mul(15).div(100);}\r\n        else if(now >= CrowdsaleStart + CrowdsalePeriod/4 && now < CrowdsaleStart + CrowdsalePeriod/2) {bonusTokens = tokens.div(10);} \r\n        else if(now >= CrowdsaleStart + CrowdsalePeriod/2 && now < CrowdsaleStart + CrowdsalePeriod*3/4) {bonusTokens = tokens.div(20);}\r\n        \r\n        }      \r\n                 \r\n        tokens += bonusTokens;\r\n       if (tokens>0) {token.mint(msg.sender, tokens);}\r\n    }        \r\n       \r\n\r\n   function() external payable {\r\n   if (msg.value >= threshold) createTokens();   \r\n   \r\n        }\r\n   \r\n       \r\n    \r\n   \r\n    \r\n    function finishICO(address _team, address _foundation, address _bounty) external onlyOwner {\r\n\tuint issuedTokenSupply = token.totalSupply();\r\n\tuint bountyTokens = issuedTokenSupply.mul(bountyPercent).div(100);\r\n\tuint foundationTokens = issuedTokenSupply.mul(foundationPercent).div(100);\r\n\tuint teamTokens = issuedTokenSupply.mul(teamPercent).div(100);\r\n\tbounty = _bounty;\r\n\tfoundation = _foundation;\r\n\tteam = _team;\r\n\t\r\n\ttoken.mint(bounty, bountyTokens);\r\n\ttoken.mint(foundation, foundationTokens);\r\n\ttoken.mint(team, teamTokens);\r\n\t\r\n        token.finishMinting();\r\n      \r\n            }\r\n\r\nfunction defrost() external onlyOwner {\r\ntoken.defrost();\r\n}\r\n  \r\n  function withdrawEther(uint _value) external onlyOwner {\r\n    multisig.transfer(_value);\r\n  }\r\n  \r\n /**\r\n      \r\n  \r\n  // Save tokens from contract\r\n  function withdrawToken(address _tokenContract, uint _value) external onlyOwner {\r\n    ERC20 _token = ERC20(_tokenContract);\r\n    _token.transfer(multisig, _value);\r\n  }\r\n  function withdrawTokenFromTAR(address _tokenContract, uint _value) external onlyOwner {\r\n    token.withdrawToken(_tokenContract, multisig, _value);\r\n  }\r\n  \r\n//the end    \r\n  */\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_presaleStart\",\"type\":\"uint256\"}],\"name\":\"setPresaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_team\",\"type\":\"address\"},{\"name\":\"_foundation\",\"type\":\"address\"},{\"name\":\"_bounty\",\"type\":\"address\"}],\"name\":\"finishICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"defrost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsaleStart\",\"type\":\"uint256\"}],\"name\":\"setCrowdsaleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TestRobotarCrowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://156e10c8db6a50311a512a06c519b85a77aa1033e8f3c3c37e5233331d1ede52"}]}