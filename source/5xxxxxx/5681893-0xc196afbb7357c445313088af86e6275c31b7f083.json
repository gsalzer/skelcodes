{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/*********************************************************************************\r\n *********************************************************************************\r\n *\r\n * Name of the project: JeiCoin Swapper\r\n * Ethernity.live \r\n *\r\n *********************************************************************************\r\n ********************************************************************************/\r\n\r\n /* ERC20 contract interface */\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant returns (uint256);\r\n    function transfer(address to, uint256 value) returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract TokenWithDates {\r\n    function getBatch(address _address , uint _batch) public constant returns(uint _quant,uint _age);\r\n    function getFirstBatch(address _address) public constant returns(uint _quant,uint _age);\r\n    function resetBatches(address _address);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool);\r\n    mapping(address => uint) public maxIndex; \r\n    mapping(address => uint) public minIndex;\r\n    uint8 public decimals;\r\n}\r\n\r\n// JeiCoin Swapper\r\n\r\ncontract JeiCoinSwapper {\r\n\r\n    string public version = \"v1.5\";\r\n    address public rootAddress;\r\n    address public Owner;\r\n    bool public locked;\r\n    address public tokenAdd;\r\n    address public tokenSpender;\r\n    TokenWithDates public token;\r\n    uint fortNight = 15;\r\n    mapping(address => uint) public lastFortnightPayed;\r\n    uint public initialDate;\r\n    uint[] public yearlyInterest;\r\n\r\n    // Modifiers\r\n\r\n    modifier onlyOwner() {\r\n        if ( msg.sender != rootAddress && msg.sender != Owner ) revert();\r\n        _;\r\n    }\r\n\r\n    modifier onlyRoot() {\r\n        if ( msg.sender != rootAddress ) revert();\r\n        _;\r\n    }\r\n\r\n    modifier isUnlocked() {\r\n    \trequire(!locked);\r\n\t\t_;    \t\r\n    }\r\n\r\n    // Events\r\n\r\n    event Batch(uint batchAmount , uint batchAge , uint totalAmount);\r\n    event Message(string message);\r\n\r\n\r\n    // Contract constructor\r\n    constructor() public {  \r\n        rootAddress = msg.sender;        \r\n        Owner = msg.sender;\r\n\r\n        // Addresses\r\n        tokenAdd = address(0x9da0D98c9d051c594038eb3267fBd0FAf3Da9e48);\r\n        tokenSpender = address(0xAd50cACa8cD726600840E745D0AE6B6E78861dBc);\r\n        token = TokenWithDates(tokenAdd);  \r\n\r\n        initialDate = now;\r\n\r\n        yearlyInterest.push(70); // Yearly interest for first year: 70%\r\n        yearlyInterest.push(50); // For second year: 50%\r\n        yearlyInterest.push(20); // And so on: 20%\r\n        yearlyInterest.push(10); // 10%\r\n    }\r\n\r\n\r\n    // Main function to pay interests\r\n    function payInterests() isUnlocked public {\r\n        if (fortnightsFromLast() == 0) { // Check for a fortnight passed\r\n            emit Message(\"0 fortnights passed\");\r\n            return;\r\n        }\r\n        uint amountToPay = calculateInterest(msg.sender);\r\n        if (amountToPay == 0) {\r\n            emit Message(\"There are not 150 tokens with interests to pay\");\r\n            return;\r\n            }\r\n        // Success\r\n        lastFortnightPayed[msg.sender] = now;\r\n        require(token.transferFrom(tokenSpender,msg.sender,amountToPay));\r\n    }\r\n\r\n    // Getters from token\r\n\r\n    function getBatch(address _address , uint _index) public view returns (uint _quant , uint _age) {\r\n        return (token.getBatch(_address,_index));\r\n    }\r\n\r\n    function getFirstBatch(address _address) public view returns (uint _quant , uint _age) {\r\n        return (token.getFirstBatch(_address));\r\n    }\r\n\r\n    // Private functions\r\n\r\n    // Calculates total interest to pay, by checking all batches. Called by main function\r\n    function calculateInterest(address _address) private returns (uint _amount) {\r\n        uint totalAmount = 0; // Total amount to pay\r\n        uint tokenCounted; // Valid tokens counted\r\n        uint intBatch; // interest for each batch in percentage\r\n        uint batchInterest; // Interests for each batch in absolute value\r\n        uint batchAmount;\r\n        uint batchDate;\r\n        for (uint i = token.minIndex(_address); i < token.maxIndex(_address); i++) {\r\n            ( batchAmount , batchDate) = token.getBatch(_address,i); // Get batch data\r\n            intBatch = interest(batchDate); // Calculate interest of this batch\r\n            batchInterest = batchAmount * intBatch / 1 ether / 100; // Apply interest to the batch amount\r\n            if (intBatch > 0) tokenCounted += batchAmount; // Count valid tokens (those with interests)\r\n            totalAmount += batchInterest; // Count total to pay\r\n            emit Batch(\r\n                batchAmount,\r\n                secToDays(softSub(now,batchDate)),\r\n                batchInterest\r\n                );\r\n        }\r\n        // Only pays if there are 150 valid tokens or more\r\n        if ( tokenCounted >= 150 ether ) return totalAmount; else return 0;\r\n    }\r\n\r\n    // Sub-function to calculate interest of each batch. Called by calculateInterest for each batch found\r\n    function interest(uint _batchDate) private view returns (uint _interest) {\r\n        uint _age = secToDays(softSub(now,_batchDate)); // Calculate age in days\r\n        while ( _age >= 106 ) { // If it has more than 3 months + 12 days + 3 (eligible to be paid again)\r\n            _age = _age - 103; // Rest every cycle of 91 + 12\r\n        }\r\n        if (_age < 3 ) return 0;\r\n        if (_age > 91) return 0;\r\n        // uint _months = _age / 30; \r\n        uint _tokenFortnights = _age / fortNight;\r\n        uint _fortnightsFromLast = fortnightsFromLast();\r\n        if ( _tokenFortnights > _fortnightsFromLast ) _tokenFortnights = _fortnightsFromLast;\r\n        uint yearsNow = secToDays(now - initialDate) / 365; // years from initial date\r\n        if (yearsNow > 3) yearsNow = 3;\r\n        _interest = 1 ether * yearlyInterest[yearsNow] * _tokenFortnights / 24 ; // Prorated interest to a fortnight, per each fortnight of token\r\n    }\r\n\r\n    function secToDays(uint _time) private pure returns(uint _days) {\r\n        return _time / 60 / 60 / 24; // Days\r\n        // return (_time / 60); // Minutes\r\n    }\r\n\r\n    function fortnightsFromLast() public view returns(uint _fortnights) {\r\n        // Fortnights from launching\r\n        _fortnights = secToDays(softSub(now,initialDate)) / fortNight;\r\n        // Fortnights since last payment (now from launching - last payment from launching)\r\n        _fortnights = softSub(_fortnights, secToDays(softSub(lastFortnightPayed[msg.sender],initialDate)) / fortNight);\r\n    }\r\n\r\n    // Safe math\r\n    function safeAdd(uint x, uint y) private pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    // Returns 0 if operation overflows\r\n    function softSub(uint x, uint y) private pure returns (uint z) {\r\n        z = x - y;\r\n        if (z > x ) z = 0;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"fortnightsFromLast\",\"outputs\":[{\"name\":\"_fortnights\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBatch\",\"outputs\":[{\"name\":\"_quant\",\"type\":\"uint256\"},{\"name\":\"_age\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSpender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getFirstBatch\",\"outputs\":[{\"name\":\"_quant\",\"type\":\"uint256\"},{\"name\":\"_age\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rootAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yearlyInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastFortnightPayed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payInterests\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"batchAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"batchAge\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"Batch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Message\",\"type\":\"event\"}]","ContractName":"JeiCoinSwapper","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://04dd2e00fa1febf74472938fbc56fa8863c64054baa08dfa4515d84483862780"}]}