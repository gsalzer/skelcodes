{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title ERC20\r\n * @dev ERC20 interface\r\n */\r\ncontract ERC20 {\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public{\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * The WPPToken contract does this and that...\r\n */\r\ncontract WPPToken is ERC20, Ownable {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256  public  totalSupply = 5000000000 * 1 ether;\r\n\r\n\r\n\tmapping  (address => uint256)             public          _balances;\r\n    mapping  (address => mapping (address => uint256)) public  _approvals;\r\n\r\n    string   public  name = \"WPPTOKEN\";\r\n    string   public  symbol = \"WPP\";\r\n    uint256  public  decimals = 18;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n\r\n    constructor () public{\r\n\t\t_balances[owner] = totalSupply;\r\n\t}\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n    function balanceOf(address src) public constant returns (uint256) {\r\n        return _balances[src];\r\n    }\r\n    function allowance(address src, address guy) public constant returns (uint256) {\r\n        return _approvals[src][guy];\r\n    }\r\n    \r\n    function transfer(address dst, uint256 wad) public returns (bool) {\r\n        assert(_balances[msg.sender] >= wad);\r\n        \r\n        _balances[msg.sender] = _balances[msg.sender].sub(wad);\r\n        _balances[dst] = _balances[dst].add(wad);\r\n        \r\n        emit Transfer(msg.sender, dst, wad);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address src, address dst, uint256 wad) public returns (bool) {\r\n        assert(_balances[src] >= wad);\r\n        assert(_approvals[src][msg.sender] >= wad);\r\n        \r\n        _approvals[src][msg.sender] = _approvals[src][msg.sender].sub(wad);\r\n        _balances[src] = _balances[src].sub(wad);\r\n        _balances[dst] = _balances[dst].add(wad);\r\n        \r\n        emit Transfer(src, dst, wad);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function approve(address guy, uint256 wad) public returns (bool) {\r\n        _approvals[msg.sender][guy] = wad;\r\n        \r\n        emit Approval(msg.sender, guy, wad);\r\n        \r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * The WPPPresale contract does this and that...\r\n */\r\n\r\n\r\n \r\n \r\n \r\n \r\n \r\ncontract WPPPresale is Ownable{\r\n\tusing SafeMath for uint256;\r\n\tWPPToken public wpp;\r\n\tuint256 public tokencap = 250000000 * 1 ether;\r\n\t// softcap : 5M WPP\r\n\tuint256 public  hardcap = 250000000 * 1 ether;\r\n\tbool    public  reached = false;\r\n\tuint    public  startTime ;\r\n\tuint    public  endTime ;\r\n\tuint256 public   rate = 2700;\r\n\tuint256 public   remain;\r\n\r\n\taddress public multisigwallet;\r\n\r\n\tmapping(address => bool) public isWhitelisted;\r\n\tmapping(address => bool) public isAdminlisted;\r\n\r\n\tevent BuyTokens(address indexed beneficiary, uint256 value, uint256 amount, uint time);\r\n\tevent WhitelistSet(address indexed _address, bool _state);\r\n\tevent AdminlistSet(address indexed _address, bool _state);\r\n\tevent TreatRemainToken();\r\n\r\n\tconstructor(address token, uint _startTime, uint _endTime, address _multi) public{\r\n\t\twpp = WPPToken(token);\r\n\t\t// wpp.transfer(address(this), tokencap);\r\n\t\trequire (wpp.owner() == msg.sender);\r\n\t\t\r\n\t\tstartTime = _startTime; // 1531659600 2018-07-15 8:AM EST->1:PM UTC\r\n\t\tendTime = _endTime; // 1537016400 2018-09-15 8:AM EST->1:PM UTC\r\n\t\tremain = hardcap;\r\n\t\tmultisigwallet = _multi;\r\n\t}\r\n\r\n\tmodifier onlyOwners() { \r\n\t\trequire (isAdminlisted[msg.sender] == true || msg.sender == owner); \r\n\t\t_; \r\n\t}\r\n\r\n\tmodifier onlyWhitelisted() { \r\n\t\trequire (isWhitelisted[msg.sender] == true); \r\n\t\t_; \r\n\t}\r\n\t\r\n\r\n\t  // fallback function can be used to buy tokens\r\n\tfunction () public payable onlyWhitelisted {\r\n\t\tbuyTokens(msg.sender);\r\n\t}\r\n\r\n\t// low level token purchase function\r\n\tfunction buyTokens(address beneficiary) public payable onlyWhitelisted {\r\n\t\tbuyTokens(beneficiary, msg.value);\r\n\t}\r\n\r\n\t// implementation of low level token purchase function\r\n\tfunction buyTokens(address beneficiary, uint256 weiAmount) internal {\r\n\t\trequire(beneficiary != 0x0);\r\n\t\trequire(validPurchase(weiAmount));\r\n\r\n\t\t// calculate token amount to be sent\r\n\t\tuint256 tokens = calcBonus(weiAmount.mul(rate));\r\n\t\t\r\n\t\tif(remain.sub(tokens) <= 0){\r\n\t\t\treached = true;\r\n\r\n\t\t\tuint256 real = remain;\r\n\r\n\t\t\tremain = 0;\r\n\r\n\t\t\tuint256 refund = weiAmount - real.mul(100).div(110).div(rate);\r\n\r\n\t\t\tbeneficiary.transfer(refund);\r\n\r\n\t\t\ttransferToken(beneficiary, real);\r\n\r\n\t\t\tforwardFunds(weiAmount.sub(refund));\r\n\r\n\t\t\temit BuyTokens(beneficiary, weiAmount.sub(refund), real, now);\r\n\t\t} else{\r\n\r\n\t\t\tremain = remain.sub(tokens);\r\n\r\n\t\t\ttransferToken(beneficiary, tokens);\r\n\r\n\t\t\tforwardFunds(weiAmount);\r\n\r\n\t\t\temit BuyTokens(beneficiary, weiAmount, tokens, now);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction calcBonus(uint256 token_amount) internal constant returns (uint256) {\r\n\t\tif(now > startTime && now <= (startTime + 3 days))\r\n\t\t\treturn token_amount * 110 / 100;\r\n\t\treturn token_amount;\r\n\t}\r\n\r\n\t// low level transfer token\r\n\t// override to create custom token transfer mechanism, eg. pull pattern\r\n\tfunction transferToken(address beneficiary, uint256 tokenamount) internal {\r\n\t\twpp.transfer(beneficiary, tokenamount);\r\n\t\t// address(wpp).call(bytes4(keccak256(\"transfer(address, uint256)\")), beneficiary,tokenamount);\r\n\t}\r\n\r\n\t// send ether to the fund collection wallet\r\n\t// override to create custom fund forwarding mechanisms\r\n\tfunction forwardFunds(uint256 weiAmount) internal {\r\n\t\tmultisigwallet.transfer(weiAmount);\r\n\t}\r\n\r\n\t// @return true if the transaction can buy tokens\r\n\tfunction validPurchase(uint256 weiAmount) internal constant returns (bool) {\r\n\t\tbool withinPeriod = now > startTime && now <= endTime;\r\n\t\tbool nonZeroPurchase = weiAmount >= 0.5 ether;\r\n\t\tbool withinSale = reached ? false : true;\r\n\t\treturn withinPeriod && nonZeroPurchase && withinSale;\r\n\t} \r\n\r\n\tfunction setAdminlist(address _addr, bool _state) public onlyOwner {\r\n\t\tisAdminlisted[_addr] = _state;\r\n\t\temit AdminlistSet(_addr, _state);\r\n\t}\r\n\r\n\tfunction setWhitelist(address _addr) public onlyOwners {\r\n        require(_addr != address(0));\r\n        isWhitelisted[_addr] = true;\r\n        emit WhitelistSet(_addr, true);\r\n    }\r\n\r\n    ///Â @notice Set whitelist state for multiple addresses\r\n    function setManyWhitelist(address[] _addr) public onlyOwners {\r\n        for (uint256 i = 0; i < _addr.length; i++) {\r\n            setWhitelist(_addr[i]);\r\n        }\r\n    }\r\n\r\n\t// @return true if presale event has ended\r\n\tfunction hasEnded() public constant returns (bool) {\r\n\t\treturn now > endTime;\r\n\t}\r\n\r\n\t// @return true if presale has started\r\n\tfunction hasStarted() public constant returns (bool) {\r\n\t\treturn now >= startTime;\r\n\t}\r\n\r\n\tfunction setRate(uint256 _rate) public onlyOwner returns (bool) {\r\n\t\trequire (now >= startTime && now <= endTime);\r\n\t\trate = _rate;\r\n\t}\r\n\r\n\tfunction treatRemaintoken() public onlyOwner returns (bool) {\r\n\t\trequire(now > endTime);\r\n\t\trequire(remain > 0);\r\n\t\twpp.transfer(multisigwallet, remain);\r\n\t\tremain = 0;\r\n\t\temit TreatRemainToken();\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfunction kill() public onlyOwner{\r\n        selfdestruct(owner);\r\n    }\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokencap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setAdminlist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"treatRemaintoken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdminlisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wpp\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"setManyWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigwallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_multi\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BuyTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"WhitelistSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"AdminlistSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TreatRemainToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WPPPresale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"000000000000000000000000056dd20b01799e9c1952c7c9a5ff4409a6110085000000000000000000000000000000000000000000000000000000005b4b4550000000000000000000000000000000000000000000000000000000005b9d02500000000000000000000000000603444a9698facd901ab985a23ac24de296b986","Library":"","SwarmSource":"bzzr://ec15be8b0702f90000b3261281142efb5eca2bf2cb9f7a2b72e868110b4ec0ab"}]}