{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract ERC721 {\r\n    // ERC20 compatible functions\r\n    // use variable getter\r\n    // function name() constant returns (string name);\r\n    // function symbol() constant returns (string symbol);\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n    function ownerOf(uint256 _tokenId) public constant returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) public ;\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 tokenId);\r\n    function transfer(address _to, uint256 _tokenId) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    \r\n    // Optional\r\n    // function takeOwnership(uint256 _tokenId) public ;\r\n    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external constant returns (uint tokenId);\r\n    // function tokenMetadata(uint256 _tokenId) public constant returns (string infoUrl);\r\n    \r\n    // Events\r\n    event Transfer(address _from, address _to, uint256 _tokenId);\r\n    event Approval(address _owner, address _approved, uint256 _tokenId);\r\n}\r\n\r\ncontract ERC20 {\r\n    // Get the total token supply\r\n    function totalSupply() public constant returns (uint256 _totalSupply);\r\n \r\n    // Get the account balance of another account with address _owner\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n \r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    \r\n    // transfer _value amount of token approved by address _from\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    \r\n    // approve an address with _value amount of tokens\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    // get remaining token approved by _owner to _spender\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n  \r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n \r\n    // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract VirtualGift is ERC721 {\r\n    string public name = \"VirtualGift\";             \r\n    uint8 public decimals = 0;                \r\n    string public symbol = \"VTG\";                 \r\n    string public version = \"1.0\";  \r\n\r\n    address private defaultGiftOwner;\r\n    \r\n    mapping(address => bool) allowPermission;\r\n\r\n    ERC20 private Gifto = ERC20(0x00C5bBaE50781Be1669306b9e001EFF57a2957b09d);\r\n    \r\n    event Creation(address indexed _owner, uint256 indexed tokenId);\r\n    //Gift token storage.\r\n    GiftToken[] giftStorageArry;\r\n    //Gift template storage.\r\n    GiftTemplateToken[] giftTemplateStorageArry;\r\n    //mapping address to it's gift sum\r\n    mapping(address => uint256) private balances;\r\n    //mapping gift id to owner\r\n    mapping(uint256 => address) private giftIndexToOwners;\r\n    //tells the gift is existed by gift id\r\n    mapping(uint256 => bool) private giftExists;\r\n    //mapping current owner to approved owners to gift\r\n    mapping(address => mapping (address => uint256)) private ownerToApprovedAddsToGifIds;\r\n    //mapping gift template id to gift ids\r\n    mapping(uint256 => uint256[]) private giftTemplateIdToGiftids;\r\n    //Mapping gift type to gift limit.\r\n    mapping(uint256 => uint256) private giftTypeToGiftLimit;\r\n\r\n    \r\n    //mapping gift template to gift selled sum.\r\n    mapping(uint256 => uint256) private giftTypeToSelledSum;\r\n\r\n    //Gift template known as 0 generation gift\r\n    struct GiftTemplateToken {\r\n        uint256 giftPrice;\r\n        uint256 giftLimit;\r\n        //gift image url\r\n        string giftImgUrl;\r\n        //gift animation url\r\n        string giftName;\r\n    }\r\n    //virtual gift token\r\n    struct GiftToken {\r\n        uint256 giftPrice;\r\n        uint256 giftType;\r\n        //gift image url\r\n        string giftImgUrl;\r\n        //gift animation url\r\n        string giftName;\r\n    }     \r\n\r\n    modifier onlyHavePermission(){\r\n        require(allowPermission[msg.sender] == true || msg.sender == defaultGiftOwner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n         require(msg.sender == defaultGiftOwner);\r\n         _;\r\n    }\r\n\r\n    //@dev Constructor \r\n    function VirtualGift() public {\r\n\r\n        defaultGiftOwner = msg.sender;\r\n        \r\n        GiftToken memory newGift = GiftToken({\r\n            giftPrice: 0,\r\n            giftType: 0,\r\n            giftImgUrl: \"\",\r\n            giftName: \"\"\r\n        });\r\n\r\n         GiftTemplateToken memory newGiftTemplate = GiftTemplateToken({\r\n                giftPrice: 0,\r\n                giftLimit: 0,\r\n                giftImgUrl: \"\",\r\n                giftName: \"\"\r\n            });\r\n        \r\n        giftStorageArry.push(newGift); // id = 0\r\n        giftTemplateStorageArry.push(newGiftTemplate);\r\n       \r\n    }\r\n\r\n    function addPermission(address _addr) \r\n    public \r\n    onlyOwner{\r\n        allowPermission[_addr] = true;\r\n    }\r\n    \r\n    function removePermission(address _addr) \r\n    public \r\n    onlyOwner{\r\n        allowPermission[_addr] = false;\r\n    }\r\n\r\n\r\n     ///@dev Buy a gift while create a new gift based on gift template.\r\n     ///Make sure to call Gifto.approve() fist, before calling this function\r\n    function sendGift(uint256 _type, \r\n                      address recipient)\r\n                     public \r\n                     onlyHavePermission\r\n                     returns(uint256 _giftId)\r\n                     {\r\n        //Check if the created gifts sum <  gift Limit\r\n        require(giftTypeToSelledSum[_type] < giftTemplateStorageArry[_type].giftLimit);\r\n         //_type must be a valid value\r\n        require(_type > 0 && _type < giftTemplateStorageArry.length);\r\n        //Mint a virtual gift.\r\n        _giftId = _mintGift(_type, recipient);\r\n        giftTypeToSelledSum[_type]++;\r\n        return _giftId;\r\n    }\r\n\r\n    /// @dev Mint gift.\r\n    function _mintGift(uint256 _type, \r\n                       address recipient)\r\n                     internal returns (uint256) \r\n                     {\r\n\r\n        GiftToken memory newGift = GiftToken({\r\n            giftPrice: giftTemplateStorageArry[_type].giftPrice,\r\n            giftType: _type,\r\n            giftImgUrl: giftTemplateStorageArry[_type].giftImgUrl,\r\n            giftName: giftTemplateStorageArry[_type].giftName\r\n        });\r\n        \r\n        uint256 giftId = giftStorageArry.push(newGift) - 1;\r\n        //Add giftid to gift template mapping \r\n        giftTemplateIdToGiftids[_type].push(giftId);\r\n        giftExists[giftId] = true;\r\n        //Reassign Ownership for new owner\r\n        _transfer(0, recipient, giftId);\r\n        //Trigger Ethereum Event\r\n        Creation(msg.sender, giftId);\r\n        return giftId;\r\n    }\r\n\r\n    /// @dev Initiate gift template.\r\n    /// A gift template means a gift of \"0\" generation's\r\n    function createGiftTemplate(uint256 _price,\r\n                         uint256 _limit, \r\n                         string _imgUrl,\r\n                         string _giftName) \r\n                         public onlyHavePermission\r\n                         returns (uint256 giftTemplateId)\r\n                         {\r\n        //Check these variables\r\n        require(_price > 0);\r\n        bytes memory imgUrlStringTest = bytes(_imgUrl);\r\n        bytes memory giftNameStringTest = bytes(_giftName);\r\n        require(imgUrlStringTest.length > 0);\r\n        require(giftNameStringTest.length > 0);\r\n        require(_limit > 0);\r\n        require(msg.sender != address(0));\r\n        //Create GiftTemplateToken\r\n        GiftTemplateToken memory newGiftTemplate = GiftTemplateToken({\r\n                giftPrice: _price,\r\n                giftLimit: _limit,\r\n                giftImgUrl: _imgUrl,\r\n                giftName: _giftName\r\n        });\r\n        //Push GiftTemplate into storage.\r\n        giftTemplateId = giftTemplateStorageArry.push(newGiftTemplate) - 1;\r\n        giftTypeToGiftLimit[giftTemplateId] = _limit;\r\n        return giftTemplateId;\r\n        \r\n    }\r\n    \r\n    function updateTemplate(uint256 templateId, \r\n                            uint256 _newPrice, \r\n                            uint256 _newlimit, \r\n                            string _newUrl, \r\n                            string _newName)\r\n    public\r\n    onlyOwner {\r\n        giftTemplateStorageArry[templateId].giftPrice = _newPrice;\r\n        giftTemplateStorageArry[templateId].giftLimit = _newlimit;\r\n        giftTemplateStorageArry[templateId].giftImgUrl = _newUrl;\r\n        giftTemplateStorageArry[templateId].giftName = _newName;\r\n    }\r\n    \r\n    function getGiftSoldFromType(uint256 giftType)\r\n    public\r\n    constant\r\n    returns(uint256){\r\n        return giftTypeToSelledSum[giftType];\r\n    }\r\n\r\n    //@dev Retrieving gifts by template.\r\n    function getGiftsByTemplateId(uint256 templateId) \r\n    public \r\n    constant \r\n    returns(uint256[] giftsId) {\r\n        return giftTemplateIdToGiftids[templateId];\r\n    }\r\n \r\n    //@dev Retrievings all gift template ids\r\n    function getAllGiftTemplateIds() \r\n    public \r\n    constant \r\n    returns(uint256[]) {\r\n        \r\n        if (giftTemplateStorageArry.length > 1) {\r\n            uint256 theLength = giftTemplateStorageArry.length - 1;\r\n            uint256[] memory resultTempIds = new uint256[](theLength);\r\n            uint256 resultIndex = 0;\r\n           \r\n            for (uint256 i = 1; i <= theLength; i++) {\r\n                resultTempIds[resultIndex] = i;\r\n                resultIndex++;\r\n            }\r\n             return resultTempIds;\r\n        }\r\n        require(giftTemplateStorageArry.length > 1);\r\n       \r\n    }\r\n\r\n    //@dev Retrieving gift template by it's id\r\n    function getGiftTemplateById(uint256 templateId) \r\n                                public constant returns(\r\n                                uint256 _price,\r\n                                uint256 _limit,\r\n                                string _imgUrl,\r\n                                string _giftName\r\n                                ){\r\n        require(templateId > 0);\r\n        require(templateId < giftTemplateStorageArry.length);\r\n        GiftTemplateToken memory giftTemplate = giftTemplateStorageArry[templateId];\r\n        _price = giftTemplate.giftPrice;\r\n        _limit = giftTemplate.giftLimit;\r\n        _imgUrl = giftTemplate.giftImgUrl;\r\n        _giftName = giftTemplate.giftName;\r\n        return (_price, _limit, _imgUrl, _giftName);\r\n    }\r\n\r\n    /// @dev Retrieving gift info by gift id.\r\n    function getGift(uint256 _giftId) \r\n                    public constant returns (\r\n                    uint256 giftType,\r\n                    uint256 giftPrice,\r\n                    string imgUrl,\r\n                    string giftName\r\n                    ) {\r\n        require(_giftId < giftStorageArry.length);\r\n        GiftToken memory gToken = giftStorageArry[_giftId];\r\n        giftType = gToken.giftType;\r\n        giftPrice = gToken.giftPrice;\r\n        imgUrl = gToken.giftImgUrl;\r\n        giftName = gToken.giftName;\r\n        return (giftType, giftPrice, imgUrl, giftName);\r\n    }\r\n\r\n    /// @dev transfer gift to a new owner.\r\n    /// @param _to : \r\n    /// @param _giftId :\r\n    function transfer(address _to, uint256 _giftId) external returns (bool success){\r\n        require(giftExists[_giftId]);\r\n        require(_to != 0x0);\r\n        require(msg.sender != _to);\r\n        require(msg.sender == ownerOf(_giftId));\r\n        require(_to != address(this));\r\n        _transfer(msg.sender, _to, _giftId);\r\n        return true;\r\n    }\r\n\r\n    /// @dev change Gifto contract's address or another type of token, like Ether.\r\n    /// @param newAddress Gifto contract address\r\n    function setGiftoAddress(address newAddress) public onlyOwner {\r\n        Gifto = ERC20(newAddress);\r\n    }\r\n    \r\n    /// @dev Retrieving Gifto contract adress\r\n    function getGiftoAddress() public constant returns (address giftoAddress) {\r\n        return address(Gifto);\r\n    }\r\n\r\n    /// @dev returns total supply for this token\r\n    function totalSupply() public  constant returns (uint256){\r\n        return giftStorageArry.length - 1;\r\n    }\r\n    \r\n    //@dev \r\n    //@param _owner \r\n    //@return \r\n    function balanceOf(address _owner)  public  constant  returns (uint256 giftSum) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    /// @dev \r\n    /// @return owner\r\n    function ownerOf(uint256 _giftId) public constant returns (address _owner) {\r\n        require(giftExists[_giftId]);\r\n        return giftIndexToOwners[_giftId];\r\n    }\r\n    \r\n    /// @dev approved owner \r\n    /// @param _to :\r\n    function approve(address _to, uint256 _giftId) public {\r\n        require(msg.sender == ownerOf(_giftId));\r\n        require(msg.sender != _to);\r\n        \r\n        ownerToApprovedAddsToGifIds[msg.sender][_to] = _giftId;\r\n        //Ethereum Event\r\n        Approval(msg.sender, _to, _giftId);\r\n    }\r\n    \r\n    /// @dev \r\n    /// @param _owner : \r\n    /// @param _spender :\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 giftId) {\r\n        return ownerToApprovedAddsToGifIds[_owner][_spender];\r\n    }\r\n    \r\n    /// @dev \r\n    /// @param _giftId :\r\n    function takeOwnership(uint256 _giftId) public {\r\n        //Check if exits\r\n        require(giftExists[_giftId]);\r\n        \r\n        address oldOwner = ownerOf(_giftId);\r\n        address newOwner = msg.sender;\r\n        \r\n        require(newOwner != oldOwner);\r\n        //New owner has to be approved by oldowner.\r\n        require(ownerToApprovedAddsToGifIds[oldOwner][newOwner] == _giftId);\r\n\r\n        //transfer gift for new owner\r\n        _transfer(oldOwner, newOwner, _giftId);\r\n        delete ownerToApprovedAddsToGifIds[oldOwner][newOwner];\r\n        //Ethereum Event\r\n        Transfer(oldOwner, newOwner, _giftId);\r\n    }\r\n    \r\n    /// @dev transfer gift for new owner \"_to\"\r\n    /// @param _from : \r\n    /// @param _to : \r\n    /// @param _giftId :\r\n    function _transfer(address _from, address _to, uint256 _giftId) internal {\r\n        require(balances[_to] + 1 > balances[_to]);\r\n        balances[_to]++;\r\n        giftIndexToOwners[_giftId] = _to;\r\n   \r\n        if (_from != address(0)) {\r\n            balances[_from]--;\r\n        }\r\n        \r\n        //Ethereum event.\r\n        Transfer(_from, _to, _giftId);\r\n    }\r\n    \r\n    /// @dev transfer Gift for new owner(_to) which is approved.\r\n    /// @param _from : address of owner of gift\r\n    /// @param _to : recipient address\r\n    /// @param _giftId : gift id\r\n    function transferFrom(address _from, address _to, uint256 _giftId) external {\r\n\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        //Check if this spender(_to) is approved to the gift.\r\n        require(ownerToApprovedAddsToGifIds[_from][_to] == _giftId);\r\n        require(_from == ownerOf(_giftId));\r\n\r\n        //@dev reassign ownership of the gift. \r\n        _transfer(_from, _to, _giftId);\r\n        //Delete approved spender\r\n        delete ownerToApprovedAddsToGifIds[_from][_to];\r\n    }\r\n    \r\n    /// @dev Retrieving gifts by address _owner\r\n    function giftsOfOwner(address _owner)  public view returns (uint256[] ownerGifts) {\r\n        \r\n        uint256 giftCount = balanceOf(_owner);\r\n        if (giftCount == 0) {\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](giftCount);\r\n            uint256 total = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            uint256 giftId;\r\n            \r\n            for (giftId = 0; giftId <= total; giftId++) {\r\n                if (giftIndexToOwners[giftId] == _owner) {\r\n                    result[resultIndex] = giftId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n     \r\n    /// @dev withdraw GTO and ETH in this contract \r\n    function withdrawGTO() \r\n    onlyOwner \r\n    public { \r\n        Gifto.transfer(defaultGiftOwner, Gifto.balanceOf(address(this))); \r\n    }\r\n    \r\n    function withdraw()\r\n    onlyOwner\r\n    public\r\n    returns (bool){\r\n        return defaultGiftOwner.send(this.balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_giftId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"giftType\",\"type\":\"uint256\"}],\"name\":\"getGiftSoldFromType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllGiftTemplateIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_giftId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"templateId\",\"type\":\"uint256\"},{\"name\":\"_newPrice\",\"type\":\"uint256\"},{\"name\":\"_newlimit\",\"type\":\"uint256\"},{\"name\":\"_newUrl\",\"type\":\"string\"},{\"name\":\"_newName\",\"type\":\"string\"}],\"name\":\"updateTemplate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawGTO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_limit\",\"type\":\"uint256\"},{\"name\":\"_imgUrl\",\"type\":\"string\"},{\"name\":\"_giftName\",\"type\":\"string\"}],\"name\":\"createGiftTemplate\",\"outputs\":[{\"name\":\"giftTemplateId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"templateId\",\"type\":\"uint256\"}],\"name\":\"getGiftTemplateById\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_limit\",\"type\":\"uint256\"},{\"name\":\"_imgUrl\",\"type\":\"string\"},{\"name\":\"_giftName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sendGift\",\"outputs\":[{\"name\":\"_giftId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_giftId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"giftSum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGiftoAddress\",\"outputs\":[{\"name\":\"giftoAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"giftsOfOwner\",\"outputs\":[{\"name\":\"ownerGifts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setGiftoAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_giftId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_giftId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_giftId\",\"type\":\"uint256\"}],\"name\":\"getGift\",\"outputs\":[{\"name\":\"giftType\",\"type\":\"uint256\"},{\"name\":\"giftPrice\",\"type\":\"uint256\"},{\"name\":\"imgUrl\",\"type\":\"string\"},{\"name\":\"giftName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"giftId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removePermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"templateId\",\"type\":\"uint256\"}],\"name\":\"getGiftsByTemplateId\",\"outputs\":[{\"name\":\"giftsId\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Creation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"VirtualGift","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://166fc87179d3d5e41a59777c2ebbe01e12699b821cae4a93b7c69b10c09a34c4"}]}