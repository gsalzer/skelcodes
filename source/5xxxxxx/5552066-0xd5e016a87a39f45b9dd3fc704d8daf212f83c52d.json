{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Manager {\r\n    address public ceo;\r\n    address public cfo;\r\n    address public coo;\r\n    address public cao;\r\n\r\n    event OwnershipTransferred(address previousCeo, address newCeo);\r\n    event Pause();\r\n    event Unpause();\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Manager() public {\r\n        coo = msg.sender; \r\n        cfo = 0x7810704C6197aFA95e940eF6F719dF32657AD5af;\r\n        ceo = 0x96C0815aF056c5294Ad368e3FBDb39a1c9Ae4e2B;\r\n        cao = 0xC4888491B404FfD15cA7F599D624b12a9D845725;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceo);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCOO() {\r\n        require(msg.sender == coo);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCAO() {\r\n        require(msg.sender == cao);\r\n        _;\r\n    }\r\n    \r\n    bool allowTransfer = false;\r\n    \r\n    function changeAllowTransferState() public onlyCOO {\r\n        if (allowTransfer) {\r\n            allowTransfer = false;\r\n        } else {\r\n            allowTransfer = true;\r\n        }\r\n    }\r\n    \r\n    modifier whenTransferAllowed() {\r\n        require(allowTransfer);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newCeo.\r\n    * @param newCeo The address to transfer ownership to.\r\n    */\r\n    function demiseCEO(address newCeo) public onlyCEO {\r\n        require(newCeo != address(0));\r\n        emit OwnershipTransferred(ceo, newCeo);\r\n        ceo = newCeo;\r\n    }\r\n\r\n    function setCFO(address newCfo) public onlyCEO {\r\n        require(newCfo != address(0));\r\n        cfo = newCfo;\r\n    }\r\n\r\n    function setCOO(address newCoo) public onlyCEO {\r\n        require(newCoo != address(0));\r\n        coo = newCoo;\r\n    }\r\n\r\n    function setCAO(address newCao) public onlyCEO {\r\n        require(newCao != address(0));\r\n        cao = newCao;\r\n    }\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() onlyCAO whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() onlyCAO whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract SkinBase is Manager {\r\n\r\n    struct Skin {\r\n        uint128 appearance;\r\n        uint64 cooldownEndTime;\r\n        uint64 mixingWithId;\r\n    }\r\n\r\n    // All skins, mapping from skin id to skin apprance\r\n    mapping (uint256 => Skin) skins;\r\n\r\n    // Mapping from skin id to owner\r\n    mapping (uint256 => address) public skinIdToOwner;\r\n\r\n    // Whether a skin is on sale\r\n    mapping (uint256 => bool) public isOnSale;\r\n\r\n    // Using \r\n    mapping (address => uint256) public accountsToActiveSkin;\r\n\r\n    // Number of all total valid skins\r\n    // skinId 0 should not correspond to any skin, because skin.mixingWithId==0 indicates not mixing\r\n    uint256 public nextSkinId = 1;  \r\n\r\n    // Number of skins an account owns\r\n    mapping (address => uint256) public numSkinOfAccounts;\r\n\r\n    event SkinTransfer(address from, address to, uint256 skinId);\r\n    event SetActiveSkin(address account, uint256 skinId);\r\n\r\n    // Get the i-th skin an account owns, for off-chain usage only\r\n    function skinOfAccountById(address account, uint256 id) external view returns (uint256) {\r\n        uint256 count = 0;\r\n        uint256 numSkinOfAccount = numSkinOfAccounts[account];\r\n        require(numSkinOfAccount > 0);\r\n        require(id < numSkinOfAccount);\r\n        for (uint256 i = 1; i < nextSkinId; i++) {\r\n            if (skinIdToOwner[i] == account) {\r\n                // This skin belongs to current account\r\n                if (count == id) {\r\n                    // This is the id-th skin of current account, a.k.a, what we need\r\n                    return i;\r\n                } \r\n                count++;\r\n            }\r\n        }\r\n        revert();\r\n    }\r\n\r\n    // Get skin by id\r\n    function getSkin(uint256 id) public view returns (uint128, uint64, uint64) {\r\n        require(id > 0);\r\n        require(id < nextSkinId);\r\n        Skin storage skin = skins[id];\r\n        return (skin.appearance, skin.cooldownEndTime, skin.mixingWithId);\r\n    }\r\n\r\n    function withdrawETH() external onlyCAO {\r\n        cfo.transfer(address(this).balance);\r\n    }\r\n    \r\n    function transferP2P(uint256 id, address targetAccount) whenTransferAllowed public {\r\n        require(skinIdToOwner[id] == msg.sender);\r\n        require(msg.sender != targetAccount);\r\n        skinIdToOwner[id] = targetAccount;\r\n        \r\n        numSkinOfAccounts[msg.sender] -= 1;\r\n        numSkinOfAccounts[targetAccount] += 1;\r\n        \r\n        // emit event\r\n        emit SkinTransfer(msg.sender, targetAccount, id);\r\n    }\r\n\r\n    function _isComplete(uint256 id) internal view returns (bool) {\r\n        uint128 _appearance = skins[id].appearance;\r\n        uint128 mask = uint128(65535);\r\n        uint128 _type = _appearance & mask;\r\n        uint128 maskedValue;\r\n        for (uint256 i = 1; i < 8; i++) {\r\n            mask = mask << 16;\r\n            maskedValue = (_appearance & mask) >> (16*i);\r\n            if (maskedValue != _type) {\r\n                return false;\r\n            }\r\n        } \r\n        return true;\r\n    }\r\n\r\n    function setActiveSkin(uint256 id) public {\r\n        require(skinIdToOwner[id] == msg.sender);\r\n        require(_isComplete(id));\r\n        require(isOnSale[id] == false);\r\n        require(skins[id].mixingWithId == 0);\r\n\r\n        accountsToActiveSkin[msg.sender] = id;\r\n        emit SetActiveSkin(msg.sender, id);\r\n    }\r\n\r\n    function getActiveSkin(address account) public view returns (uint128) {\r\n        uint256 activeId = accountsToActiveSkin[account];\r\n        if (activeId == 0) {\r\n            return uint128(0);\r\n        }\r\n        return (skins[activeId].appearance & uint128(65535));\r\n    }\r\n}\r\n\r\n\r\ncontract SkinMix is SkinBase {\r\n\r\n    // Mix formula\r\n    MixFormulaInterface public mixFormula;\r\n\r\n\r\n    // Pre-paid ether for synthesization, will be returned to user if the synthesization failed (minus gas).\r\n    uint256 public prePaidFee = 150000 * 5000000000; // (15w gas * 5 gwei)\r\n\r\n    bool public enableMix = false;\r\n\r\n    // Events\r\n    event MixStart(address account, uint256 skinAId, uint256 skinBId);\r\n    event AutoMix(address account, uint256 skinAId, uint256 skinBId, uint64 cooldownEndTime);\r\n    event MixSuccess(address account, uint256 skinId, uint256 skinAId, uint256 skinBId);\r\n\r\n    // Set mix formula contract address \r\n    function setMixFormulaAddress(address mixFormulaAddress) external onlyCOO {\r\n        mixFormula = MixFormulaInterface(mixFormulaAddress);\r\n    }\r\n\r\n    // setPrePaidFee: set advance amount, only owner can call this\r\n    function setPrePaidFee(uint256 newPrePaidFee) external onlyCOO {\r\n        prePaidFee = newPrePaidFee;\r\n    }\r\n\r\n    function changeMixEnable(bool newState) external onlyCOO {\r\n        enableMix = newState;\r\n    }\r\n\r\n    // _isCooldownReady: check whether cooldown period has been passed\r\n    function _isCooldownReady(uint256 skinAId, uint256 skinBId) private view returns (bool) {\r\n        return (skins[skinAId].cooldownEndTime <= uint64(now)) && (skins[skinBId].cooldownEndTime <= uint64(now));\r\n    }\r\n\r\n    // _isNotMixing: check whether two skins are in another mixing process\r\n    function _isNotMixing(uint256 skinAId, uint256 skinBId) private view returns (bool) {\r\n        return (skins[skinAId].mixingWithId == 0) && (skins[skinBId].mixingWithId == 0);\r\n    }\r\n\r\n    // _setCooldownTime: set new cooldown time\r\n    function _setCooldownEndTime(uint256 skinAId, uint256 skinBId) private {\r\n        uint256 end = now + 20 minutes;\r\n        // uint256 end = now;\r\n        skins[skinAId].cooldownEndTime = uint64(end);\r\n        skins[skinBId].cooldownEndTime = uint64(end);\r\n    }\r\n\r\n    // _isValidSkin: whether an account can mix using these skins\r\n    // Make sure two things:\r\n    // 1. these two skins do exist\r\n    // 2. this account owns these skins\r\n    function _isValidSkin(address account, uint256 skinAId, uint256 skinBId) private view returns (bool) {\r\n        // Make sure those two skins belongs to this account\r\n        if (skinAId == skinBId) {\r\n            return false;\r\n        }\r\n        if ((skinAId == 0) || (skinBId == 0)) {\r\n            return false;\r\n        }\r\n        if ((skinAId >= nextSkinId) || (skinBId >= nextSkinId)) {\r\n            return false;\r\n        }\r\n        if (accountsToActiveSkin[account] == skinAId || accountsToActiveSkin[account] == skinBId) {\r\n            return false;\r\n        }\r\n        return (skinIdToOwner[skinAId] == account) && (skinIdToOwner[skinBId] == account);\r\n    }\r\n\r\n    // _isNotOnSale: whether a skin is not on sale\r\n    function _isNotOnSale(uint256 skinId) private view returns (bool) {\r\n        return (isOnSale[skinId] == false);\r\n    }\r\n\r\n    // mix  \r\n    function mix(uint256 skinAId, uint256 skinBId) public whenNotPaused {\r\n\r\n        require(enableMix == true);\r\n        // Check whether skins are valid\r\n        require(_isValidSkin(msg.sender, skinAId, skinBId));\r\n\r\n        // Check whether skins are neither on sale\r\n        require(_isNotOnSale(skinAId) && _isNotOnSale(skinBId));\r\n\r\n        // Check cooldown\r\n        require(_isCooldownReady(skinAId, skinBId));\r\n\r\n        // Check these skins are not in another process\r\n        require(_isNotMixing(skinAId, skinBId));\r\n\r\n        // Set new cooldown time\r\n        _setCooldownEndTime(skinAId, skinBId);\r\n\r\n        // Mark skins as in mixing\r\n        skins[skinAId].mixingWithId = uint64(skinBId);\r\n        skins[skinBId].mixingWithId = uint64(skinAId);\r\n\r\n        // Emit MixStart event\r\n        emit MixStart(msg.sender, skinAId, skinBId);\r\n    }\r\n\r\n    // Mixing auto\r\n    function mixAuto(uint256 skinAId, uint256 skinBId) public payable whenNotPaused {\r\n        require(msg.value >= prePaidFee);\r\n\r\n        mix(skinAId, skinBId);\r\n\r\n        Skin storage skin = skins[skinAId];\r\n\r\n        emit AutoMix(msg.sender, skinAId, skinBId, skin.cooldownEndTime);\r\n    }\r\n\r\n    // Get mixing result, return the resulted skin id\r\n    function getMixingResult(uint256 skinAId, uint256 skinBId) public whenNotPaused {\r\n        // Check these two skins belongs to the same account\r\n        address account = skinIdToOwner[skinAId];\r\n        require(account == skinIdToOwner[skinBId]);\r\n\r\n        // Check these two skins are in the same mixing process\r\n        Skin storage skinA = skins[skinAId];\r\n        Skin storage skinB = skins[skinBId];\r\n        require(skinA.mixingWithId == uint64(skinBId));\r\n        require(skinB.mixingWithId == uint64(skinAId));\r\n\r\n        // Check cooldown\r\n        require(_isCooldownReady(skinAId, skinBId));\r\n\r\n        // Create new skin\r\n        uint128 newSkinAppearance = mixFormula.calcNewSkinAppearance(skinA.appearance, skinB.appearance, getActiveSkin(account));\r\n        Skin memory newSkin = Skin({appearance: newSkinAppearance, cooldownEndTime: uint64(now), mixingWithId: 0});\r\n        skins[nextSkinId] = newSkin;\r\n        skinIdToOwner[nextSkinId] = account;\r\n        isOnSale[nextSkinId] = false;\r\n        nextSkinId++;\r\n\r\n        // Clear old skins\r\n        skinA.mixingWithId = 0;\r\n        skinB.mixingWithId = 0;\r\n\r\n        // In order to distinguish created skins in minting with destroyed skins\r\n        // skinIdToOwner[skinAId] = owner;\r\n        // skinIdToOwner[skinBId] = owner;\r\n        delete skinIdToOwner[skinAId];\r\n        delete skinIdToOwner[skinBId];\r\n        // require(numSkinOfAccounts[account] >= 2);\r\n        numSkinOfAccounts[account] -= 1;\r\n\r\n        emit MixSuccess(account, nextSkinId - 1, skinAId, skinBId);\r\n    }\r\n}\r\n\r\n\r\ncontract MixFormulaInterface {\r\n    function calcNewSkinAppearance(uint128 x, uint128 y, uint128 addition) public returns (uint128);\r\n\r\n    // create random appearance\r\n    function randomSkinAppearance(uint256 externalNum, uint128 addition) public returns (uint128);\r\n\r\n    // bleach\r\n    function bleachAppearance(uint128 appearance, uint128 attributes) public returns (uint128);\r\n\r\n    // recycle\r\n    function recycleAppearance(uint128[5] appearances, uint256 preference, uint128 addition) public returns (uint128);\r\n\r\n    // summon10\r\n    function summon10SkinAppearance(uint256 externalNum, uint128 addition) public returns (uint128);\r\n}\r\n\r\n\r\ncontract SkinMarket is SkinMix {\r\n\r\n    // Cut ratio for a transaction\r\n    // Values 0-10,000 map to 0%-100%\r\n    uint128 public trCut = 400;\r\n\r\n    // Sale orders list \r\n    mapping (uint256 => uint256) public desiredPrice;\r\n\r\n    // events\r\n    event PutOnSale(address account, uint256 skinId);\r\n    event WithdrawSale(address account, uint256 skinId);\r\n    event BuyInMarket(address buyer, uint256 skinId);\r\n\r\n    // functions\r\n\r\n    function setTrCut(uint256 newCut) external onlyCOO {\r\n        trCut = uint128(newCut);\r\n    }\r\n\r\n    // Put asset on sale\r\n    function putOnSale(uint256 skinId, uint256 price) public whenNotPaused {\r\n        // Only owner of skin pass\r\n        require(skinIdToOwner[skinId] == msg.sender);\r\n        require(accountsToActiveSkin[msg.sender] != skinId);\r\n\r\n        // Check whether skin is mixing \r\n        require(skins[skinId].mixingWithId == 0);\r\n\r\n        // Check whether skin is already on sale\r\n        require(isOnSale[skinId] == false);\r\n\r\n        require(price > 0); \r\n\r\n        // Put on sale\r\n        desiredPrice[skinId] = price;\r\n        isOnSale[skinId] = true;\r\n\r\n        // Emit the Approval event\r\n        emit PutOnSale(msg.sender, skinId);\r\n    }\r\n  \r\n    // Withdraw an sale order\r\n    function withdrawSale(uint256 skinId) external whenNotPaused {\r\n        // Check whether this skin is on sale\r\n        require(isOnSale[skinId] == true);\r\n        \r\n        // Can only withdraw self's sale\r\n        require(skinIdToOwner[skinId] == msg.sender);\r\n\r\n        // Withdraw\r\n        isOnSale[skinId] = false;\r\n        desiredPrice[skinId] = 0;\r\n\r\n        // Emit the cancel event\r\n        emit WithdrawSale(msg.sender, skinId);\r\n    }\r\n \r\n    // Buy skin in market\r\n    function buyInMarket(uint256 skinId) external payable whenNotPaused {\r\n        // Check whether this skin is on sale\r\n        require(isOnSale[skinId] == true);\r\n\r\n        address seller = skinIdToOwner[skinId];\r\n\r\n        // Check the sender isn't the seller\r\n        require(msg.sender != seller);\r\n\r\n        uint256 _price = desiredPrice[skinId];\r\n        // Check whether pay value is enough\r\n        require(msg.value >= _price);\r\n\r\n        // Cut and then send the proceeds to seller\r\n        uint256 sellerProceeds = _price - _computeCut(_price);\r\n\r\n        seller.transfer(sellerProceeds);\r\n\r\n        // Transfer skin from seller to buyer\r\n        numSkinOfAccounts[seller] -= 1;\r\n        skinIdToOwner[skinId] = msg.sender;\r\n        numSkinOfAccounts[msg.sender] += 1;\r\n        isOnSale[skinId] = false;\r\n        desiredPrice[skinId] = 0;\r\n\r\n        // Emit the buy event\r\n        emit BuyInMarket(msg.sender, skinId);\r\n    }\r\n\r\n    // Compute the marketCut\r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        return _price / 10000 * trCut;\r\n    }\r\n}\r\n\r\n\r\ncontract SkinMinting is SkinMarket {\r\n\r\n    // Limits the number of skins the contract owner can ever create.\r\n    uint256 public skinCreatedLimit = 50000;\r\n    uint256 public skinCreatedNum;\r\n\r\n    // The summon and bleach numbers of each accounts: will be cleared every day\r\n    mapping (address => uint256) public accountToSummonNum;\r\n    mapping (address => uint256) public accountToBleachNum;\r\n\r\n    // Pay level of each accounts\r\n    mapping (address => uint256) public accountToPayLevel;\r\n    mapping (address => uint256) public accountLastClearTime;\r\n    mapping (address => uint256) public bleachLastClearTime;\r\n\r\n    // Free bleach number donated\r\n    mapping (address => uint256) public freeBleachNum;\r\n    bool isBleachAllowed = false;\r\n    bool isRecycleAllowed = false;\r\n\r\n    uint256 public levelClearTime = now;\r\n\r\n    // price and limit\r\n    uint256 public bleachDailyLimit = 3;\r\n    uint256 public baseSummonPrice = 1 finney;\r\n    uint256 public bleachPrice = 100 ether;  // do not call this\r\n\r\n    // Pay level\r\n    uint256[5] public levelSplits = [10,\r\n                                     20,\r\n                                     50,\r\n                                     100,\r\n                                     200];\r\n\r\n    uint256[6] public payMultiple = [10,\r\n                                     12,\r\n                                     15,\r\n                                     20,\r\n                                     30,\r\n                                     40];\r\n\r\n\r\n    // events\r\n    event CreateNewSkin(uint256 skinId, address account);\r\n    event Bleach(uint256 skinId, uint128 newAppearance);\r\n    event Recycle(uint256 skinId0, uint256 skinId1, uint256 skinId2, uint256 skinId3, uint256 skinId4, uint256 newSkinId);\r\n\r\n    // functions\r\n\r\n    // Set price\r\n    function setBaseSummonPrice(uint256 newPrice) external onlyCOO {\r\n        baseSummonPrice = newPrice;\r\n    }\r\n\r\n    function setBleachPrice(uint256 newPrice) external onlyCOO {\r\n        bleachPrice = newPrice;\r\n    }\r\n\r\n    function setBleachDailyLimit(uint256 limit) external onlyCOO {\r\n        bleachDailyLimit = limit;\r\n    }\r\n\r\n    function switchBleachAllowed(bool newBleachAllowed) external onlyCOO {\r\n        isBleachAllowed = newBleachAllowed;\r\n    }\r\n\r\n    function switchRecycleAllowed(bool newRecycleAllowed) external onlyCOO {\r\n        isRecycleAllowed = newRecycleAllowed;\r\n    }\r\n\r\n    // Create base skin for sell. Only owner can create\r\n    function createSkin(uint128 specifiedAppearance, uint256 salePrice) external onlyCOO {\r\n        require(skinCreatedNum < skinCreatedLimit);\r\n\r\n        // Create specified skin\r\n        // uint128 randomAppearance = mixFormula.randomSkinAppearance();\r\n        Skin memory newSkin = Skin({appearance: specifiedAppearance, cooldownEndTime: uint64(now), mixingWithId: 0});\r\n        skins[nextSkinId] = newSkin;\r\n        skinIdToOwner[nextSkinId] = coo;\r\n        isOnSale[nextSkinId] = false;\r\n\r\n        // Emit the create event\r\n        emit CreateNewSkin(nextSkinId, coo);\r\n\r\n        // Put this skin on sale\r\n        putOnSale(nextSkinId, salePrice);\r\n\r\n        nextSkinId++;\r\n        numSkinOfAccounts[coo] += 1;\r\n        skinCreatedNum += 1;\r\n    }\r\n\r\n    // Donate a skin to player. Only COO can operate\r\n    function donateSkin(uint128 specifiedAppearance, address donee) external whenNotPaused onlyCOO {\r\n        Skin memory newSkin = Skin({appearance: specifiedAppearance, cooldownEndTime: uint64(now), mixingWithId: 0});\r\n        skins[nextSkinId] = newSkin;\r\n        skinIdToOwner[nextSkinId] = donee;\r\n        isOnSale[nextSkinId] = false;\r\n\r\n        // Emit the create event\r\n        emit CreateNewSkin(nextSkinId, donee);\r\n\r\n        nextSkinId++;\r\n        numSkinOfAccounts[donee] += 1;\r\n        skinCreatedNum += 1;\r\n    }\r\n\r\n    //\r\n    function moveData(uint128[] legacyAppearance, address[] legacyOwner, bool[] legacyIsOnSale, uint256[] legacyDesiredPrice) external onlyCOO {\r\n        Skin memory newSkin = Skin({appearance: 0, cooldownEndTime: 0, mixingWithId: 0});\r\n        for (uint256 i = 0; i < legacyOwner.length; i++) {\r\n            newSkin.appearance = legacyAppearance[i];\r\n            newSkin.cooldownEndTime = uint64(now);\r\n            newSkin.mixingWithId = 0;\r\n\r\n            skins[nextSkinId] = newSkin;\r\n            skinIdToOwner[nextSkinId] = legacyOwner[i];\r\n            isOnSale[nextSkinId] = legacyIsOnSale[i];\r\n            desiredPrice[nextSkinId] = legacyDesiredPrice[i];\r\n\r\n            // Emit the create event\r\n            emit CreateNewSkin(nextSkinId, legacyOwner[i]);\r\n\r\n            nextSkinId++;\r\n            numSkinOfAccounts[legacyOwner[i]] += 1;\r\n            if (numSkinOfAccounts[legacyOwner[i]] > freeBleachNum[legacyOwner[i]]*10 || freeBleachNum[legacyOwner[i]] == 0) {\r\n                freeBleachNum[legacyOwner[i]] += 1;\r\n            }\r\n            skinCreatedNum += 1;\r\n        }\r\n    }\r\n\r\n    // Summon\r\n    function summon() external payable whenNotPaused {\r\n        // Clear daily summon numbers\r\n        if (accountLastClearTime[msg.sender] == uint256(0)) {\r\n            // This account's first time to summon, we do not need to clear summon numbers\r\n            accountLastClearTime[msg.sender] = now;\r\n        } else {\r\n            if (accountLastClearTime[msg.sender] < levelClearTime && now > levelClearTime) {\r\n                accountToSummonNum[msg.sender] = 0;\r\n                accountToPayLevel[msg.sender] = 0;\r\n                accountLastClearTime[msg.sender] = now;\r\n            }\r\n        }\r\n\r\n        uint256 payLevel = accountToPayLevel[msg.sender];\r\n        uint256 price = payMultiple[payLevel] * baseSummonPrice;\r\n        require(msg.value >= price);\r\n\r\n        // Create random skin\r\n        uint128 randomAppearance = mixFormula.randomSkinAppearance(nextSkinId, getActiveSkin(msg.sender));\r\n        // uint128 randomAppearance = 0;\r\n        Skin memory newSkin = Skin({appearance: randomAppearance, cooldownEndTime: uint64(now), mixingWithId: 0});\r\n        skins[nextSkinId] = newSkin;\r\n        skinIdToOwner[nextSkinId] = msg.sender;\r\n        isOnSale[nextSkinId] = false;\r\n\r\n        // Emit the create event\r\n        emit CreateNewSkin(nextSkinId, msg.sender);\r\n\r\n        nextSkinId++;\r\n        numSkinOfAccounts[msg.sender] += 1;\r\n\r\n        accountToSummonNum[msg.sender] += 1;\r\n\r\n        // Handle the paylevel\r\n        if (payLevel < 5) {\r\n            if (accountToSummonNum[msg.sender] >= levelSplits[payLevel]) {\r\n                accountToPayLevel[msg.sender] = payLevel + 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Summon10\r\n    function summon10() external payable whenNotPaused {\r\n        // Clear daily summon numbers\r\n        if (accountLastClearTime[msg.sender] == uint256(0)) {\r\n            // This account's first time to summon, we do not need to clear summon numbers\r\n            accountLastClearTime[msg.sender] = now;\r\n        } else {\r\n            if (accountLastClearTime[msg.sender] < levelClearTime && now > levelClearTime) {\r\n                accountToSummonNum[msg.sender] = 0;\r\n                accountToPayLevel[msg.sender] = 0;\r\n                accountLastClearTime[msg.sender] = now;\r\n            }\r\n        }\r\n\r\n        uint256 payLevel = accountToPayLevel[msg.sender];\r\n        uint256 price = payMultiple[payLevel] * baseSummonPrice;\r\n        require(msg.value >= price*10);\r\n\r\n        Skin memory newSkin;\r\n        uint128 randomAppearance;\r\n        // Create random skin\r\n        for (uint256 i = 0; i < 10; i++) {\r\n            randomAppearance = mixFormula.randomSkinAppearance(nextSkinId, getActiveSkin(msg.sender));\r\n            newSkin = Skin({appearance: randomAppearance, cooldownEndTime: uint64(now), mixingWithId: 0});\r\n            skins[nextSkinId] = newSkin;\r\n            skinIdToOwner[nextSkinId] = msg.sender;\r\n            isOnSale[nextSkinId] = false;\r\n            // Emit the create event\r\n            emit CreateNewSkin(nextSkinId, msg.sender);\r\n            nextSkinId++;\r\n        }\r\n\r\n        // Give additional skin\r\n        randomAppearance = mixFormula.summon10SkinAppearance(nextSkinId, getActiveSkin(msg.sender));\r\n        newSkin = Skin({appearance: randomAppearance, cooldownEndTime: uint64(now), mixingWithId: 0});\r\n        skins[nextSkinId] = newSkin;\r\n        skinIdToOwner[nextSkinId] = msg.sender;\r\n        isOnSale[nextSkinId] = false;\r\n        // Emit the create event\r\n        emit CreateNewSkin(nextSkinId, msg.sender);\r\n        nextSkinId++;\r\n\r\n        numSkinOfAccounts[msg.sender] += 11;\r\n        accountToSummonNum[msg.sender] += 10;\r\n\r\n        // Handle the paylevel\r\n        if (payLevel < 5) {\r\n            if (accountToSummonNum[msg.sender] >= levelSplits[payLevel]) {\r\n                accountToPayLevel[msg.sender] = payLevel + 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Recycle bin\r\n    function recycleSkin(uint256[5] wasteSkins, uint256 preferIndex) external whenNotPaused {\r\n        require(isRecycleAllowed == true);\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            require(skinIdToOwner[wasteSkins[i]] == msg.sender);\r\n            skinIdToOwner[wasteSkins[i]] = address(0);\r\n        }\r\n\r\n        uint128[5] memory apps;\r\n        for (i = 0; i < 5; i++) {\r\n            apps[i] = skins[wasteSkins[i]].appearance;\r\n        }\r\n        // Create random skin\r\n        uint128 recycleApp = mixFormula.recycleAppearance(apps, preferIndex, getActiveSkin(msg.sender));\r\n        Skin memory newSkin = Skin({appearance: recycleApp, cooldownEndTime: uint64(now), mixingWithId: 0});\r\n        skins[nextSkinId] = newSkin;\r\n        skinIdToOwner[nextSkinId] = msg.sender;\r\n        isOnSale[nextSkinId] = false;\r\n\r\n        // Emit event\r\n        emit Recycle(wasteSkins[0], wasteSkins[1], wasteSkins[2], wasteSkins[3], wasteSkins[4], nextSkinId);\r\n\r\n        nextSkinId++;\r\n        numSkinOfAccounts[msg.sender] -= 4;\r\n    }\r\n\r\n    // Bleach some attributes\r\n    function bleach(uint128 skinId, uint128 attributes) external payable whenNotPaused {\r\n        require(isBleachAllowed);\r\n\r\n        // Clear daily summon numbers\r\n        if (bleachLastClearTime[msg.sender] == uint256(0)) {\r\n            // This account's first time to summon, we do not need to clear bleach numbers\r\n            bleachLastClearTime[msg.sender] = now;\r\n        } else {\r\n            if (bleachLastClearTime[msg.sender] < levelClearTime && now > levelClearTime) {\r\n                accountToBleachNum[msg.sender] = 0;\r\n                bleachLastClearTime[msg.sender] = now;\r\n            }\r\n        }\r\n\r\n        require(accountToBleachNum[msg.sender] < bleachDailyLimit);\r\n        accountToBleachNum[msg.sender] += 1;\r\n\r\n        // Check whether msg.sender is owner of the skin\r\n        require(msg.sender == skinIdToOwner[skinId]);\r\n\r\n        // Check whether this skin is on sale\r\n        require(isOnSale[skinId] == false);\r\n\r\n        uint256 bleachNum = 0;\r\n        for (uint256 i = 0; i < 8; i++) {\r\n            if ((attributes & (uint128(1) << i)) > 0) {\r\n                if (freeBleachNum[msg.sender] > 0) {\r\n                    freeBleachNum[msg.sender]--;\r\n                } else {\r\n                    bleachNum++;\r\n                }\r\n            }\r\n        }\r\n        // Check whether there is enough money\r\n        require(msg.value >= bleachNum * bleachPrice);\r\n\r\n        Skin storage originSkin = skins[skinId];\r\n        // Check whether this skin is in mixing\r\n        require(originSkin.mixingWithId == 0);\r\n\r\n        uint128 newAppearance = mixFormula.bleachAppearance(originSkin.appearance, attributes);\r\n        originSkin.appearance = newAppearance;\r\n\r\n        // Emit bleach event\r\n        emit Bleach(skinId, newAppearance);\r\n    }\r\n\r\n    // Our daemon will clear daily summon numbers\r\n    function clearSummonNum() external onlyCOO {\r\n        uint256 nextDay = levelClearTime + 1 days;\r\n        if (now > nextDay) {\r\n            levelClearTime = nextDay;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"skinId\",\"type\":\"uint256\"}],\"name\":\"withdrawSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountLastClearTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseSummonPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"skinAId\",\"type\":\"uint256\"},{\"name\":\"skinBId\",\"type\":\"uint256\"}],\"name\":\"getMixingResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountToSummonNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountToPayLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"specifiedAppearance\",\"type\":\"uint128\"},{\"name\":\"donee\",\"type\":\"address\"}],\"name\":\"donateSkin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setBleachPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mixFormula\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"skinIdToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"changeMixEnable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mixFormulaAddress\",\"type\":\"address\"}],\"name\":\"setMixFormulaAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCoo\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextSkinId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cao\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"summon\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"skinId\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"putOnSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bleachPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRecycleAllowed\",\"type\":\"bool\"}],\"name\":\"switchRecycleAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payMultiple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bleachDailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCfo\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"skinAId\",\"type\":\"uint256\"},{\"name\":\"skinBId\",\"type\":\"uint256\"}],\"name\":\"mixAuto\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setBleachDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"desiredPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"targetAccount\",\"type\":\"address\"}],\"name\":\"transferP2P\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelSplits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountToBleachNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"numSkinOfAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBleachAllowed\",\"type\":\"bool\"}],\"name\":\"switchBleachAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bleachLastClearTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prePaidFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"levelClearTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeBleachNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"skinCreatedLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"setActiveSkin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getActiveSkin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enableMix\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"specifiedAppearance\",\"type\":\"uint128\"},{\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"createSkin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrePaidFee\",\"type\":\"uint256\"}],\"name\":\"setPrePaidFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getSkin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"skinOfAccountById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setBaseSummonPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wasteSkins\",\"type\":\"uint256[5]\"},{\"name\":\"preferIndex\",\"type\":\"uint256\"}],\"name\":\"recycleSkin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"skinAId\",\"type\":\"uint256\"},{\"name\":\"skinBId\",\"type\":\"uint256\"}],\"name\":\"mix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCao\",\"type\":\"address\"}],\"name\":\"setCAO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeAllowTransferState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"skinId\",\"type\":\"uint256\"}],\"name\":\"buyInMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCut\",\"type\":\"uint256\"}],\"name\":\"setTrCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearSummonNum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountsToActiveSkin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"summon10\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"skinId\",\"type\":\"uint128\"},{\"name\":\"attributes\",\"type\":\"uint128\"}],\"name\":\"bleach\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"skinCreatedNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"legacyAppearance\",\"type\":\"uint128[]\"},{\"name\":\"legacyOwner\",\"type\":\"address[]\"},{\"name\":\"legacyIsOnSale\",\"type\":\"bool[]\"},{\"name\":\"legacyDesiredPrice\",\"type\":\"uint256[]\"}],\"name\":\"moveData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isOnSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCeo\",\"type\":\"address\"}],\"name\":\"demiseCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"skinId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"CreateNewSkin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"skinId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newAppearance\",\"type\":\"uint128\"}],\"name\":\"Bleach\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"skinId0\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"skinId1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"skinId2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"skinId3\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"skinId4\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newSkinId\",\"type\":\"uint256\"}],\"name\":\"Recycle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"skinId\",\"type\":\"uint256\"}],\"name\":\"PutOnSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"skinId\",\"type\":\"uint256\"}],\"name\":\"WithdrawSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"skinId\",\"type\":\"uint256\"}],\"name\":\"BuyInMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"skinAId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"skinBId\",\"type\":\"uint256\"}],\"name\":\"MixStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"skinAId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"skinBId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cooldownEndTime\",\"type\":\"uint64\"}],\"name\":\"AutoMix\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"skinId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"skinAId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"skinBId\",\"type\":\"uint256\"}],\"name\":\"MixSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"skinId\",\"type\":\"uint256\"}],\"name\":\"SkinTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"skinId\",\"type\":\"uint256\"}],\"name\":\"SetActiveSkin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousCeo\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newCeo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"SkinMinting","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://da6405fa4c2e056a362257fd41c00a32407ef8bbc972d2188424ef3cbd856b9a"}]}