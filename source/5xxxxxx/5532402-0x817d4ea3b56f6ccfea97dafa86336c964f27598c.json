{"status":"1","message":"OK","result":[{"SourceCode":"contract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokensНу \r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n            if (balances[msg.sender] >= _value && _value > 0) {\r\n                balances[msg.sender] -= _value;\r\n                balances[_to] += _value;\r\n                Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } \r\n        else\r\n         { return false; }\r\n\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n}\r\n \r\n\r\n\r\ncontract erc20GST is StandardToken {\r\n    using SafeMath for uint256;\r\n    \r\n    uint startPreICO =1525338000;\r\n    uint stopPreICO =1525942800;\r\n    uint start1Week =1525942800;\r\n    uint stop1Week =1527411600;\r\n    uint start2Week =1527411600;\r\n    uint stop2Week =1528880400;\r\n    uint start3Week =1528880400;\r\n    uint stop3Week =1530349200;\r\n    address storeETH = 0xcaAc6e94dAEFC3BB81CA692a8AE9d5C73f54A024;\r\n    address admin =0x93DB4fD42904af66853C7E9baC48e668Fb5ceA54;\r\n    address tokenSaleStore = 0xE615cD9e81b912D549A58B4BEfFda7887968EDE2;\r\n    address tokenPreIcoStore = 0x56E6A8f1be5bD20f5220Ca673191b9AABb3879b5;\r\n    address tokenStore = 0x58258A4cF4514f6379D320ddC5BcB24A315df0d8;\r\n    uint256 public exchangeRates = 19657;\r\n    uint256 BonusPercent=0;\r\n    address storeAddress;\r\n    \r\n    \r\n    \r\n    function() external payable {\r\n        if(msg.value>=10000000000000000)\r\n        {\r\n            \r\n            if(now < stopPreICO  && now > startPreICO){\r\n                if(msg.value<1000000000000000000){\r\n                     throw;\r\n                }\r\n                if(msg.value>1000000000000000000 && msg.value <= 10000000000000000000){\r\n                    BonusPercent =  35;\r\n                }\r\n                if(msg.value>10000000000000000000 && msg.value <= 50000000000000000000){\r\n                    BonusPercent =  40;\r\n                }\r\n                 if(msg.value>50000000000000000000){\r\n                    BonusPercent = 50; \r\n                }\r\n                storeAddress = tokenPreIcoStore;\r\n            }\r\n            if(now > start1Week && now < stop1Week)\r\n            {\r\n                BonusPercent = 30; \r\n                storeAddress = tokenSaleStore;\r\n            }\r\n            if(now > start2Week && now < stop2Week)\r\n            {\r\n                BonusPercent = 20; \r\n                 storeAddress = tokenSaleStore;\r\n            }\r\n            if(now > start3Week && now < stop3Week)\r\n            {\r\n                BonusPercent = 10; \r\n                 storeAddress = tokenSaleStore;\r\n            }\r\n                uint256 value = msg.value.mul(exchangeRates);\r\n                uint256 bonus = value.div(100).mul(BonusPercent);\r\n                value = value.add(bonus);\r\n            if(balances[storeAddress] >= value && value > 0) {\r\n                storeETH.transfer(msg.value);\r\n                if(balances[storeAddress] >= value && value > 0) {\r\n                    balances[storeAddress] -= value;\r\n                    balances[msg.sender] += value;\r\n                    Transfer(storeAddress, msg.sender,  value);\r\n                }\r\n            }\r\n            else {\r\n                throw;\r\n            }\r\n            \r\n        }\r\n        else {\r\n              throw;\r\n        }\r\n    }\r\n    function setExchangeRates(uint256 _value){\r\n        if(msg.sender==admin){\r\n            if(_value >0){\r\n            exchangeRates = _value;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    string public name;                   \r\n    uint8 public decimals;                \r\n    string public symbol;                 \r\n    string public version = 'gst.01';  \r\n\r\n    function erc20GST(\r\n        uint8 _decimalUnits \r\n        ) {\r\n        balances[tokenSaleStore] = 300000000000000000000000000;               // Give the creator all initial tokens\r\n        balances[tokenPreIcoStore] = 25000000000000000000000000;  \r\n        balances[tokenStore] = 175000000000000000000000000;     \r\n        totalSupply = 500000000000000000000000000;                        // Update total supply\r\n        name = \"GAMESTARS TOKEN\";                                   // Set the name for display purposes\r\n        decimals = _decimalUnits;                            // Amount of decimals for display purposes\r\n        symbol = \"GST\";                               // Set the symbol for display purposes\r\n    }\r\n\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setExchangeRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_decimalUnits\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"erc20GST","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000012","Library":"","SwarmSource":"bzzr://2ed5672883c749d481f2a779a4ab70bb791d38cf501d3f1ef282950c97775dd6"}]}