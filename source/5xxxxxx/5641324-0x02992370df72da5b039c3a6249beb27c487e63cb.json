{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Admin {\r\n\r\n\taddress public\tadmin;\r\n\taddress public\tfeeAccount; // address feeAccount, which will receive fee.\r\n\taddress public \tnextVersionAddress; // this is next address exchange\r\n\tbool \tpublic\torderEnd; // this is var use when Admin want close exchange\r\n\tstring  public \tversion; // number version example 1.0, test_1.0\r\n\tuint \tpublic\tfeeTake; //percentage times (1 ether)\r\n\tbool\tpublic\tpause;\r\n\r\n\tmodifier assertAdmin() {\r\n\t\tif ( msg.sender != admin ) {\r\n\t\t\trevert();\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t/*\r\n\t*\tThis is function, is needed to change address admin.\r\n\t*/\r\n\tfunction setAdmin( address _admin ) assertAdmin public {\r\n\t\tadmin = _admin;\r\n\t}\r\n\tfunction setPause (bool state) assertAdmin public {\r\n\t\tpause = state;\r\n\t}\r\n\t/*\r\n\t* \tThis is function, is needed to change version smart-contract.\r\n\t*/\r\n\tfunction setVersion(string _version) assertAdmin public {\r\n\t\tversion = _version;\t\r\n\t}\r\n\r\n\t/*\r\n\t* \tThis is function, is needed to set address, next smart-contracts.\r\n\t*/\r\n\tfunction setNextVersionAddress(address _nextVersionAddress) assertAdmin public{\r\n\t\tnextVersionAddress = _nextVersionAddress;\t\r\n\t}\r\n\r\n\t/*\r\n\t* \tThis is function, is needed to stop, news orders.\r\n\t*\tCan not turn off it.\r\n\t*/\r\n\tfunction setOrderEnd() assertAdmin public {\r\n\t\torderEnd = true;\r\n\t}\r\n\r\n\t/*\r\n\t*\tThis is function, is needed to change address feeAccount.\r\n\t*/\r\n\tfunction setFeeAccount( address _feeAccount ) assertAdmin public {\r\n\t\tfeeAccount = _feeAccount;\r\n\t}\r\n\r\n\t/*\r\n\t* \tThis is function, is needed to set new fee.\r\n\t*\tCan only be changed down.\r\n\t*/\r\n\t\r\n\tfunction setFeeTake( uint _feeTake ) assertAdmin public {\r\n\t\tfeeTake = _feeTake;\r\n\t}\r\n}\r\n\r\ncontract SafeMath {\r\n\r\n\tfunction safeMul( uint a, uint b ) pure internal returns ( uint ) {\r\n\t\t\r\n\t\tuint \tc;\r\n\t\t\r\n\t\tc = a * b;\r\n\t\tassert( a == 0 || c / a == b );\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction safeSub( uint a, uint b ) pure internal returns ( uint ) {\r\n\t\t\r\n\t\tassert( b <= a );\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction safeAdd( uint a, uint b ) pure internal returns ( uint ) {\r\n\t\t\r\n\t\tuint \tc;\r\n\t\r\n\t\tc = a + b;\r\n\t\tassert( c >= a && c >= b );\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n/*\r\n* Interface ERC20\r\n*/\r\n\r\ncontract Token {\r\n\r\n\tfunction transfer( address _to, uint256 _value ) public returns ( bool success );\r\n\t\r\n\tfunction transferFrom( address _from, address _to, uint256 _value ) public returns ( bool success );\r\n\t\r\n\tevent Transfer( address indexed _from, address indexed _to, uint256 _value );\r\n\r\n}\r\n\r\ncontract Exchange is SafeMath, Admin {\r\n\r\n\tmapping( address => mapping( address => uint )) public tokens;\r\n\tmapping( address => mapping( bytes32 => bool )) public orders;\r\n\tmapping( bytes32 => mapping( address => uint )) public ordersBalance;\r\n\r\n\tevent Deposit( address token, address user, uint amount, uint balance );\r\n\tevent Withdraw( address token, address user, uint amount, uint balance );\r\n\tevent Order( address user, address tokenTake, uint amountTake, address tokenMake, uint amountMake, uint nonce );\r\n\tevent OrderCancel( address user, address tokenTake, uint amountTake, address tokenMake, uint amountMake, uint nonce );\r\n\tevent Trade( address makeAddress, address tokenMake, uint amountGiveMake, address takeAddress, address tokenTake, uint quantityTake, uint feeTakeXfer, uint balanceOrder );\r\n\tevent HashOutput(bytes32 hash);\r\n\r\n\tconstructor( address _admin, address _feeAccount, uint _feeTake, string _version) public {\r\n\t\tadmin = _admin;\r\n\t\tfeeAccount = _feeAccount;\r\n\t\tfeeTake = _feeTake;\r\n\t\torderEnd = false;\r\n\t\tversion = _version;\r\n\t\tpause = false;\r\n\t}\r\n\r\n \tfunction \tdepositEth() payable public {\r\n \t\tassertQuantity( msg.value );\r\n\t\ttokens[0][msg.sender] = safeAdd( tokens[0][msg.sender], msg.value );\r\n\t\temit Deposit( 0, msg.sender, msg.value, tokens[0][msg.sender] );\r\n \t}\r\n\r\n\tfunction \twithdrawEth( uint amount ) public {\r\n\t\tassertQuantity( amount );\r\n\t\ttokens[0][msg.sender] = safeSub( tokens[0][msg.sender], amount );\r\n\t\tmsg.sender.transfer( amount );\r\n\t\temit Withdraw( 0, msg.sender, amount, tokens[0][msg.sender] );\r\n\t}\r\n\r\n\tfunction \tdepositToken( address token, uint amount ) public {\r\n\t\tassertToken( token );\r\n\t\tassertQuantity( amount );\r\n\t\ttokens[token][msg.sender] = safeAdd( tokens[token][msg.sender], amount );\r\n\t\tif ( Token( token ).transferFrom( msg.sender, this, amount ) == false ) {\r\n\t\t\trevert();\r\n\t\t}\r\n\t    emit\tDeposit( token, msg.sender, amount , tokens[token][msg.sender] );\r\n\t}\r\n\r\n\tfunction \twithdrawToken( address token, uint amount ) public {\r\n\t\tassertToken( token );\r\n\t\tassertQuantity( amount );\r\n\t\tif ( Token( token ).transfer( msg.sender, amount ) == false ) {\r\n\t\t\trevert();\r\n\t\t}\r\n\t\ttokens[token][msg.sender] = safeSub( tokens[token][msg.sender], amount ); // уязвимость двойного входа?\r\n\t    emit Withdraw( token, msg.sender, amount, tokens[token][msg.sender] );\r\n\t}\r\n\t\r\n\tfunction \torder( address tokenTake, uint amountTake, address tokenMake, uint amountMake, uint nonce ) public {\r\n\t\tbytes32 \thash;\r\n\r\n\t\tassertQuantity( amountTake );\r\n\t\tassertQuantity( amountMake );\r\n\t\tassertCompareBalance( amountMake, tokens[tokenMake][msg.sender] );\r\n\t\tif ( orderEnd == true )\r\n\t\t\trevert();\r\n\t\t\r\n\t\thash = keccak256( this, tokenTake, tokenMake, amountTake, amountMake, nonce );\r\n\t\t\r\n\t\torders[msg.sender][hash] = true;\r\n\t\ttokens[tokenMake][msg.sender] = safeSub( tokens[tokenMake][msg.sender], amountMake );\r\n\t\tordersBalance[hash][msg.sender] = amountMake;\r\n\r\n\t\temit HashOutput(hash);\r\n\t\temit Order( msg.sender, tokenTake, amountTake, tokenMake, amountMake, nonce );\r\n\t}\r\n\r\n\tfunction \torderCancel( address tokenTake, uint amountTake, address tokenMake, uint amountMake, uint nonce ) public {\r\n\t\tbytes32 \thash;\r\n\r\n\t\tassertQuantity( amountTake );\r\n\t\tassertQuantity( amountMake );\r\n\r\n\t\thash = keccak256( this, tokenTake, tokenMake, amountTake, amountMake, nonce );\r\n\t\torders[msg.sender][hash] = false;\r\n\r\n\t\ttokens[tokenMake][msg.sender] = safeAdd( tokens[tokenMake][msg.sender], ordersBalance[hash][msg.sender]);\r\n\t\tordersBalance[hash][msg.sender] = 0;\r\n\t\temit OrderCancel( msg.sender, tokenTake, amountTake, tokenMake, amountMake, nonce );\r\n\t}\r\n\r\n\tfunction \ttrade( address tokenTake, address tokenMake, uint amountTake, uint amountMake, uint nonce, address makeAddress, uint quantityTake ) public { \r\n\r\n\t\tbytes32 \thash;\r\n\t\tuint \t\tamountGiveMake;\r\n\r\n\t\tassertPause();\r\n\t\tassertQuantity( quantityTake );\r\n\r\n\t\thash = keccak256( this, tokenTake, tokenMake, amountTake, amountMake, nonce );\r\n\t\tassertOrders( makeAddress, hash );\r\n\t\t\r\n\t\tamountGiveMake = safeMul( amountMake, quantityTake ) / amountTake;\r\n\t\tassertCompareBalance ( amountGiveMake, ordersBalance[hash][makeAddress] );\r\n\t\r\n\t\ttradeBalances( tokenTake, tokenMake, amountTake, amountMake, makeAddress, quantityTake, hash);\r\n\t\temit HashOutput(hash);\r\n\t}\r\n\r\n\tfunction \ttradeBalances( address tokenGet, address tokenGive, uint amountGet, uint amountGive, address user, uint amount, bytes32 hash) private {\r\n\t\tuint \t\tfeeTakeXfer;\r\n\t\tuint \t\tamountGiveMake;\r\n\r\n\t\tfeeTakeXfer = safeMul( amount, feeTake ) / ( 1 ether );\r\n\t\tamountGiveMake = safeMul( amountGive, amount ) / amountGet; \r\n\r\n\t\ttokens[tokenGet][msg.sender] = safeSub( tokens[tokenGet][msg.sender], safeAdd( amount, feeTakeXfer ) );\r\n\t\ttokens[tokenGet][user] = safeAdd( tokens[tokenGet][user], amount );\r\n\t\ttokens[tokenGet][feeAccount] = safeAdd( tokens[tokenGet][feeAccount], feeTakeXfer );\r\n\t\tordersBalance[hash][user] = safeSub( ordersBalance[hash][user], safeMul( amountGive, amount ) / amountGet );\r\n\t\ttokens[tokenGive][msg.sender] = safeAdd( tokens[tokenGive][msg.sender], safeMul( amountGive, amount ) / amountGet );\r\n\r\n\t\temit Trade( user, tokenGive, amountGiveMake, msg.sender, tokenGet, amount, feeTakeXfer, ordersBalance[hash][user] );\r\n\t\temit HashOutput(hash);\r\n\t}\r\n\r\n\tfunction \tassertQuantity( uint amount ) pure private {\r\n\t\tif ( amount == 0 ) {\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction\tassertPause() view private {\r\n\t\tif ( pause == true ) {\r\n\t\t\trevert();\r\n\t\t}\t\r\n\t}\r\n\r\n\tfunction \tassertToken( address token ) pure private { \r\n\t\tif ( token == 0 ) {\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction \tassertOrders( address makeAddress, bytes32 hash ) view private {\r\n\t\tif ( orders[makeAddress][hash] == false ) {\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction \tassertCompareBalance( uint a, uint b ) pure private {\r\n\t\tif ( a > b ) {\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setOrderEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenTake\",\"type\":\"address\"},{\"name\":\"tokenMake\",\"type\":\"address\"},{\"name\":\"amountTake\",\"type\":\"uint256\"},{\"name\":\"amountMake\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"makeAddress\",\"type\":\"address\"},{\"name\":\"quantityTake\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeAccount\",\"type\":\"address\"}],\"name\":\"setFeeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ordersBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenTake\",\"type\":\"address\"},{\"name\":\"amountTake\",\"type\":\"uint256\"},{\"name\":\"tokenMake\",\"type\":\"address\"},{\"name\":\"amountMake\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"order\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"setVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenTake\",\"type\":\"address\"},{\"name\":\"amountTake\",\"type\":\"uint256\"},{\"name\":\"tokenMake\",\"type\":\"address\"},{\"name\":\"amountMake\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"orderCancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeTake\",\"type\":\"uint256\"}],\"name\":\"setFeeTake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextVersionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"orderEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nextVersionAddress\",\"type\":\"address\"}],\"name\":\"setNextVersionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_feeAccount\",\"type\":\"address\"},{\"name\":\"_feeTake\",\"type\":\"uint256\"},{\"name\":\"_version\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenTake\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenMake\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountMake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Order\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenTake\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenMake\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountMake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"OrderCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"makeAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenMake\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGiveMake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"takeAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenTake\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"quantityTake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"feeTakeXfer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balanceOrder\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"HashOutput\",\"type\":\"event\"}]","ContractName":"Exchange","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f0617ed1431af2ae1291cfaa98255d80a299b7fd0000000000000000000000002b3290a0efd7532d3d2eb516fc8e946ff088a583000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003312e300000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://3491b27d6badf350f0b61ae7b40c8c850384843f2fc29c4870b9ee002e29492c"}]}