{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract GUT is Ownable, MintableToken {\r\n  using SafeMath for uint256;    \r\n  string public constant name = \"Geekz Utility Token\";\r\n  string public constant symbol = \"GUT\";\r\n  uint32 public constant decimals = 18;\r\n\r\n  address public addressTeam;\r\n  address public addressReserveFund;\r\n\r\n  uint public summTeam = 4000000 * 1 ether;\r\n  uint public summReserveFund = 1000000 * 1 ether;\r\n\r\n  function GUT() public {\r\n    addressTeam = 0x142c0dba7449ceae2Dc0A5ce048D65b690630274;  //set your value\r\n    addressReserveFund = 0xc709565D92a6B9a913f4d53de730712e78fe5B8C; //set your value\r\n\r\n    //Founders and supporters initial Allocations\r\n    balances[addressTeam] = balances[addressTeam].add(summTeam);\r\n    balances[addressReserveFund] = balances[addressReserveFund].add(summReserveFund);\r\n\r\n    totalSupply = summTeam.add(summReserveFund);\r\n  }\r\n  function getTotalSupply() public constant returns(uint256){\r\n      return totalSupply;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where Contributors can make\r\n * token Contributions and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive. The contract requires a MintableToken that will be\r\n * minted as contributions arrive, note that the crowdsale contract\r\n * must be owner of the token in order to be able to mint it.\r\n */\r\ncontract Crowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n  // totalTokens\r\n  uint256 public totalTokens;\r\n  // soft cap\r\n  uint softcap;\r\n  // balances for softcap\r\n  mapping(address => uint) public balances;\r\n  // The token being offered\r\n  GUT public token;\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  \r\n  //Early stage\r\n    //start\r\n  uint256 public startEarlyStage1;\r\n  uint256 public startEarlyStage2;\r\n  uint256 public startEarlyStage3;\r\n  uint256 public startEarlyStage4;\r\n    //end\r\n  uint256 public endEarlyStage1;\r\n  uint256 public endEarlyStage2;\r\n  uint256 public endEarlyStage3;\r\n  uint256 public endEarlyStage4;   \r\n  \r\n  //Final stage\r\n    //start\r\n  uint256 public startFinalStage1;\r\n  uint256 public startFinalStage2;\r\n    //end \r\n  uint256 public endFinalStage1;    \r\n  uint256 public endFinalStage2;  \r\n  \r\n  //token distribution\r\n  uint256 public maxEarlyStage;\r\n  uint256 public maxFinalStage;\r\n\r\n  uint256 public totalEarlyStage;\r\n  uint256 public totalFinalStage;\r\n  \r\n  // how many token units a Contributor gets per wei\r\n  uint256 public rateEarlyStage1;\r\n  uint256 public rateEarlyStage2;\r\n  uint256 public rateEarlyStage3;\r\n  uint256 public rateEarlyStage4;\r\n  uint256 public rateFinalStage1;\r\n  uint256 public rateFinalStage2;   \r\n  \r\n  // Remaining Token Allocation \r\n  // (after completion of all stages of crowdfunding)\r\n  uint public mintStart; //31 Mar 2018 08:00:00 GMT\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // minimum quantity values\r\n  uint256 public minQuanValues; \r\n\r\n/**\r\n* event for token Procurement logging\r\n* @param contributor who Pledged for the tokens\r\n* @param beneficiary who got the tokens\r\n* @param value weis Contributed for Procurement\r\n* @param amount amount of tokens Procured\r\n*/\r\n  event TokenProcurement(address indexed contributor, address indexed beneficiary, uint256 value, uint256 amount);\r\n  function Crowdsale() public {\r\n    token = createTokenContract();\r\n    // total number of tokens\r\n    totalTokens = 25000000 * 1 ether;\r\n    //soft cap\r\n    softcap = 400 * 1 ether;   \r\n    // minimum quantity values\r\n    minQuanValues = 100000000000000000; //0.1 eth\r\n    // start and end timestamps where investments are allowed\r\n    //Early stage\r\n      //start\r\n    startEarlyStage1 = 1519804800;//28 Feb 2018 08:00:00 GMT\r\n    startEarlyStage2 = startEarlyStage1 + 2 * 1 days;\r\n    startEarlyStage3 = startEarlyStage2 + 2 * 1 days;\r\n    startEarlyStage4 = startEarlyStage3 + 2 * 1 days;\r\n      //end\r\n    endEarlyStage1 = startEarlyStage1 + 2 * 1 days;\r\n    endEarlyStage2 = startEarlyStage2 + 2 * 1 days;\r\n    endEarlyStage3 = startEarlyStage3 + 2 * 1 days;\r\n    endEarlyStage4 = startEarlyStage4 + 2 * 1 days;   \r\n    //Final stage\r\n      //start\r\n    startFinalStage1 = 1520582400;//09 Mar 2018 08:00:00 GMT\r\n    startFinalStage2 = startFinalStage1 + 6 * 1 days;\r\n      //end \r\n    endFinalStage1 = startFinalStage1 + 6 * 1 days;    \r\n    endFinalStage2 = startFinalStage2 + 16 * 1 days;         \r\n    // restrictions on amounts during the crowdfunding event stages\r\n    maxEarlyStage = 4000000 * 1 ether;\r\n    maxFinalStage = 16000000 * 1 ether;\r\n    // rate;\r\n    rateEarlyStage1 = 10000;\r\n    rateEarlyStage2 = 7500;\r\n    rateEarlyStage3 = 5000;\r\n    rateEarlyStage4 = 4000;\r\n    rateFinalStage1 = 3000;\r\n    rateFinalStage2 = 2000; \r\n    // Remaining Token Allocation \r\n    // (after completion of all stages of crowdfunding event)\r\n    mintStart = endFinalStage2; //31 Mar 2018 08:00:00 GMT\r\n    // address where funds are collected\r\n    wallet = 0x80B48F46CD1857da32dB10fa54E85a2F18B96412;\r\n  }\r\n\r\n  \r\n  function setRateEarlyStage1(uint _rateEarlyStage1) public {\r\n    rateEarlyStage1 = _rateEarlyStage1;\r\n  }\r\n  function setRateEarlyStage2(uint _rateEarlyStage2) public {\r\n    rateEarlyStage2 = _rateEarlyStage2;\r\n  }  \r\n  function setRateEarlyStage3(uint _rateEarlyStage3) public {\r\n    rateEarlyStage3 = _rateEarlyStage3;\r\n  }  \r\n  function setRateEarlyStage4(uint _rateEarlyStage4) public {\r\n    rateEarlyStage4 = _rateEarlyStage4;\r\n  }  \r\n  \r\n  function setRateFinalStage1(uint _rateFinalStage1) public {\r\n    rateFinalStage1 = _rateFinalStage1;\r\n  }  \r\n  function setRateFinalStage2(uint _rateFinalStage2) public {\r\n    rateFinalStage2 = _rateFinalStage2;\r\n  }   \r\n  \r\n  function createTokenContract() internal returns (GUT) {\r\n    return new GUT();\r\n  }\r\n\r\n  // fallback function can be used to Procure tokens\r\n  function () external payable {\r\n    procureTokens(msg.sender);\r\n  }\r\n\r\n  // low level token Pledge function\r\n  function procureTokens(address beneficiary) public payable {\r\n    uint256 tokens;\r\n    uint256 weiAmount = msg.value;\r\n    uint256 backAmount;\r\n    require(beneficiary != address(0));\r\n    //minimum amount in ETH\r\n    require(weiAmount >= minQuanValues);\r\n    //EarlyStage1\r\n    if (now >= startEarlyStage1 && now < endEarlyStage1 && totalEarlyStage < maxEarlyStage){\r\n      tokens = weiAmount.mul(rateEarlyStage1);\r\n      if (maxEarlyStage.sub(totalEarlyStage) < tokens){\r\n        tokens = maxEarlyStage.sub(totalEarlyStage); \r\n        weiAmount = tokens.div(rateEarlyStage1);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n      totalEarlyStage = totalEarlyStage.add(tokens);\r\n    }\r\n    //EarlyStage2\r\n    if (now >= startEarlyStage2 && now < endEarlyStage2 && totalEarlyStage < maxEarlyStage){\r\n      tokens = weiAmount.mul(rateEarlyStage2);\r\n      if (maxEarlyStage.sub(totalEarlyStage) < tokens){\r\n        tokens = maxEarlyStage.sub(totalEarlyStage); \r\n        weiAmount = tokens.div(rateEarlyStage2);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n      totalEarlyStage = totalEarlyStage.add(tokens);\r\n    }    \r\n    //EarlyStage3\r\n    if (now >= startEarlyStage3 && now < endEarlyStage3 && totalEarlyStage < maxEarlyStage){\r\n      tokens = weiAmount.mul(rateEarlyStage3);\r\n      if (maxEarlyStage.sub(totalEarlyStage) < tokens){\r\n        tokens = maxEarlyStage.sub(totalEarlyStage); \r\n        weiAmount = tokens.div(rateEarlyStage3);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n      totalEarlyStage = totalEarlyStage.add(tokens);\r\n    }    \r\n    //EarlyStage4\r\n    if (now >= startEarlyStage4 && now < endEarlyStage4 && totalEarlyStage < maxEarlyStage){\r\n      tokens = weiAmount.mul(rateEarlyStage4);\r\n      if (maxEarlyStage.sub(totalEarlyStage) < tokens){\r\n        tokens = maxEarlyStage.sub(totalEarlyStage); \r\n        weiAmount = tokens.div(rateEarlyStage4);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n      totalEarlyStage = totalEarlyStage.add(tokens);\r\n    }   \r\n    //FinalStage1\r\n    if (now >= startFinalStage1 && now < endFinalStage1 && totalFinalStage < maxFinalStage){\r\n      tokens = weiAmount.mul(rateFinalStage1);\r\n      if (maxFinalStage.sub(totalFinalStage) < tokens){\r\n        tokens = maxFinalStage.sub(totalFinalStage); \r\n        weiAmount = tokens.div(rateFinalStage1);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n      totalFinalStage = totalFinalStage.add(tokens);\r\n    }       \r\n    //FinalStage2    \r\n    if (now >= startFinalStage2 && now < endFinalStage2 && totalFinalStage < maxFinalStage){\r\n      tokens = weiAmount.mul(rateFinalStage2);\r\n      if (maxFinalStage.sub(totalFinalStage) < tokens){\r\n        tokens = maxFinalStage.sub(totalFinalStage); \r\n        weiAmount = tokens.div(rateFinalStage2);\r\n        backAmount = msg.value.sub(weiAmount);\r\n      }\r\n      totalFinalStage = totalFinalStage.add(tokens);\r\n    }        \r\n    \r\n    require(tokens > 0);\r\n    token.mint(beneficiary, tokens);\r\n    balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n    //wallet.transfer(weiAmount);\r\n    \r\n    if (backAmount > 0){\r\n      msg.sender.transfer(backAmount);    \r\n    }\r\n    TokenProcurement(msg.sender, beneficiary, weiAmount, tokens);\r\n  }\r\n\r\n  //Mint is allowed while TotalSupply <= totalTokens\r\n  function mintTokens(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n    require(_amount > 0);\r\n    require(_to != address(0));\r\n    require(now >= mintStart);\r\n    require(_amount <= totalTokens.sub(token.getTotalSupply()));\r\n    token.mint(_to, _amount);\r\n    return true;\r\n  }\r\n  \r\n  function refund() public{\r\n    require(this.balance < softcap && now > endFinalStage2);\r\n    require(balances[msg.sender] > 0);\r\n    uint value = balances[msg.sender];\r\n    balances[msg.sender] = 0;\r\n    msg.sender.transfer(value);\r\n  }\r\n  \r\n  function transferToMultisig() public onlyOwner {\r\n    require(this.balance >= softcap && now > endFinalStage2);  \r\n      wallet.transfer(this.balance);\r\n  }  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"summTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressReserveFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"summReserveFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"GUT","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://534ea3fdc905c745bb4b4dfec5d94de9836f10c6528986fcf004132c01345918"}]}