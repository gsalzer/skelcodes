{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract DeepToken is StandardToken {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // data structures\r\n    enum States {\r\n    Initial, // deployment time\r\n    ValuationSet, // set ICO parameters\r\n    Ico, // whitelist addresses, accept funds, update balances\r\n    Operational, // manage contests\r\n    Paused // for contract upgrades\r\n    }\r\n\r\n    string public constant name = \"DeepToken\";\r\n\r\n    string public constant symbol = \"DTA\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public constant pointMultiplier = (10 ** uint256(decimals));\r\n\r\n    mapping (address => bool) public whitelist;\r\n\r\n    address public initialHolder;\r\n\r\n    address public stateControl;\r\n\r\n    address public whitelistControl;\r\n\r\n    address public withdrawControl;\r\n\r\n    address public usdCurrencyFunding;\r\n\r\n    States public state;\r\n\r\n    uint256 public tokenPriceInWei;\r\n\r\n    uint256 public percentForSale;\r\n\r\n    uint256 public totalNumberOfTokensForSale;\r\n\r\n    uint256 public silencePeriod;\r\n\r\n    uint256 public startAcceptingFundsBlock;\r\n\r\n    uint256 public endBlock;\r\n\r\n    uint256 public etherBalance;\r\n\r\n    uint256 public usdCentsBalance;\r\n\r\n    uint256 public tokensSold;\r\n\r\n    //this creates the contract and stores the owner. it also passes in 3 addresses to be used later during the lifetime of the contract.\r\n    function DeepToken(address _stateControl, address _whitelistControl, address _withdraw, address _initialHolder, address _usdCurrencyFunding) {\r\n        require (_initialHolder != address(0));\r\n        require (_stateControl != address(0));\r\n        require (_whitelistControl != address(0));\r\n        require (_withdraw != address(0));\r\n        require (_usdCurrencyFunding != address(0));\r\n        initialHolder = _initialHolder;\r\n        stateControl = _stateControl;\r\n        whitelistControl = _whitelistControl;\r\n        withdrawControl = _withdraw;\r\n        usdCurrencyFunding = _usdCurrencyFunding;\r\n        moveToState(States.Initial);\r\n        totalSupply = 0;\r\n        tokenPriceInWei = 0;\r\n        percentForSale = 0;\r\n        totalNumberOfTokensForSale = 0;\r\n        silencePeriod = 0;\r\n        startAcceptingFundsBlock = uint256(int256(-1));\r\n        endBlock = 0;\r\n        etherBalance = 0;\r\n        usdCentsBalance = 0;\r\n        tokensSold = 0;\r\n        balances[initialHolder] = totalSupply;\r\n    }\r\n\r\n    event Whitelisted(address addr);\r\n\r\n    event Dewhitelisted(address addr);\r\n\r\n    event Credited(address addr, uint balance, uint txAmount);\r\n\r\n    event USDCentsBalance(uint balance);\r\n\r\n    event TokenByFiatCredited(address addr, uint balance, uint txAmount, uint256 requestId);\r\n\r\n    event StateTransition(States oldState, States newState);\r\n\r\n    modifier onlyWhitelist() {\r\n        require(msg.sender == whitelistControl);\r\n        _;\r\n    }\r\n\r\n    modifier onlyStateControl() {\r\n        require(msg.sender == stateControl);\r\n        _;\r\n    }\r\n\r\n    modifier requireState(States _requiredState) {\r\n        require(state == _requiredState);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    BEGIN ICO functions\r\n    */\r\n\r\n    //this is the main funding function, it updates the balances of DeepTokens during the ICO.\r\n    //no particular incentive schemes have been implemented here\r\n    //it is only accessible during the \"ICO\" phase.\r\n    function() payable\r\n    requireState(States.Ico)\r\n    {\r\n        require(msg.sender != whitelistControl);\r\n        require(whitelist[msg.sender] == true);\r\n        uint256 deepTokenIncrease = (msg.value * pointMultiplier) / tokenPriceInWei;\r\n        require(getTokensAvailableForSale() >= deepTokenIncrease);\r\n        require(block.number < endBlock);\r\n        require(block.number >= startAcceptingFundsBlock);\r\n        etherBalance = etherBalance.add(msg.value);\r\n        balances[initialHolder] = balances[initialHolder].sub(deepTokenIncrease);\r\n        balances[msg.sender] = balances[msg.sender].add(deepTokenIncrease);\r\n        tokensSold = tokensSold.add(deepTokenIncrease);\r\n        withdrawControl.transfer(msg.value);\r\n        Credited(msg.sender, balances[msg.sender], msg.value);\r\n    }\r\n\r\n    function recordPayment(uint256 usdCentsAmount, uint256 tokenAmount, uint256 requestId)\r\n    onlyWhitelist\r\n    requireState(States.Ico)\r\n    {\r\n        require(getTokensAvailableForSale() >= tokenAmount);\r\n        require(block.number < endBlock);\r\n        require(block.number >= startAcceptingFundsBlock);\r\n\r\n        usdCentsBalance = usdCentsBalance.add(usdCentsAmount);\r\n        balances[initialHolder] = balances[initialHolder].sub(tokenAmount);\r\n        balances[usdCurrencyFunding] = balances[usdCurrencyFunding].add(tokenAmount);\r\n        tokensSold = tokensSold.add(tokenAmount);\r\n\r\n        USDCentsBalance(usdCentsBalance);\r\n        TokenByFiatCredited(usdCurrencyFunding, balances[usdCurrencyFunding], tokenAmount, requestId);\r\n    }\r\n\r\n    function moveToState(States _newState)\r\n    internal\r\n    {\r\n        StateTransition(state, _newState);\r\n        state = _newState;\r\n    }\r\n\r\n    function getTokensAvailableForSale()\r\n    constant\r\n    returns (uint256 tokensAvailableForSale)\r\n    {\r\n        return (totalNumberOfTokensForSale.sub(tokensSold));\r\n    }\r\n\r\n    // ICO contract configuration function\r\n    // _newTotalSupply is the number of tokens available\r\n    // _newTokenPriceInWei is the token price in wei\r\n    // _newPercentForSale is the percentage of _newTotalSupply available for sale\r\n    // _newsilencePeriod is a number of blocks to wait after starting the ICO. No funds are accepted during the silence period. It can be set to zero.\r\n    // _newEndBlock is the absolute block number at which the ICO must stop. It must be set after now + silence period.\r\n    function updateEthICOThresholds(uint256 _newTotalSupply, uint256 _newTokenPriceInWei, uint256 _newPercentForSale, uint256 _newSilencePeriod, uint256 _newEndBlock)\r\n    onlyStateControl\r\n    {\r\n        require(state == States.Initial || state == States.ValuationSet);\r\n        require(_newTotalSupply > 0);\r\n        require(_newTokenPriceInWei > 0);\r\n        require(_newPercentForSale > 0);\r\n        require(_newPercentForSale <= 100);\r\n        require((_newTotalSupply * _newPercentForSale / 100) > 0);\r\n        require(block.number < _newEndBlock);\r\n        require(block.number + _newSilencePeriod < _newEndBlock);\r\n\r\n        totalSupply = _newTotalSupply;\r\n        percentForSale = _newPercentForSale;\r\n        totalNumberOfTokensForSale = totalSupply.mul(percentForSale).div(100);\r\n        tokenPriceInWei = _newTokenPriceInWei;\r\n        silencePeriod = _newSilencePeriod;\r\n        endBlock = _newEndBlock;\r\n\r\n        balances[initialHolder] = totalSupply;\r\n\r\n        moveToState(States.ValuationSet);\r\n    }\r\n\r\n    function startICO()\r\n    onlyStateControl\r\n    requireState(States.ValuationSet)\r\n    {\r\n        require(block.number < endBlock);\r\n        require(block.number + silencePeriod < endBlock);\r\n        startAcceptingFundsBlock = block.number + silencePeriod;\r\n        moveToState(States.Ico);\r\n    }\r\n\r\n    function endICO()\r\n    onlyStateControl\r\n    requireState(States.Ico)\r\n    {\r\n        burnUnsoldCoins();\r\n        moveToState(States.Operational);\r\n    }\r\n\r\n    function anyoneEndICO()\r\n    requireState(States.Ico)\r\n    {\r\n        require(block.number > endBlock);\r\n        burnUnsoldCoins();\r\n        moveToState(States.Operational);\r\n    }\r\n\r\n    function burnUnsoldCoins()\r\n    internal\r\n    {\r\n        //slashing the initial supply, so that the ICO is selling percentForSale% total\r\n        totalSupply = tokensSold.mul(100).div(percentForSale);\r\n        balances[initialHolder] = totalSupply.sub(tokensSold);\r\n    }\r\n\r\n    function addToWhitelist(address _whitelisted)\r\n    onlyWhitelist\r\n    {\r\n        whitelist[_whitelisted] = true;\r\n        Whitelisted(_whitelisted);\r\n    }\r\n\r\n    function removeFromWhitelist(address _whitelisted)\r\n    onlyWhitelist\r\n    {\r\n        whitelist[_whitelisted] = false;\r\n        Dewhitelisted(_whitelisted);\r\n    }\r\n\r\n    //emergency pause for the ICO\r\n    function pause()\r\n    onlyStateControl\r\n    requireState(States.Ico)\r\n    {\r\n        moveToState(States.Paused);\r\n    }\r\n\r\n    //un-pause\r\n    function resumeICO()\r\n    onlyStateControl\r\n    requireState(States.Paused)\r\n    {\r\n        moveToState(States.Ico);\r\n    }\r\n    /**\r\n    END ICO functions\r\n    */\r\n\r\n    /**\r\n    BEGIN ERC20 functions\r\n    */\r\n\r\n    function transfer(address _to, uint256 _value)\r\n    returns (bool success) {\r\n        require((state == States.Ico) || (state == States.Operational));\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    returns (bool success) {\r\n        require((state == States.Ico) || (state == States.Operational));\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function balanceOf(address _account)\r\n    constant\r\n    returns (uint256 balance) {\r\n        return balances[_account];\r\n    }\r\n\r\n    /**\r\n    END ERC20 functions\r\n    */\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"stateControl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"anyoneEndICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"silencePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistControl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalNumberOfTokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pointMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawControl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdCurrencyFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelisted\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startAcceptingFundsBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"usdCentsAmount\",\"type\":\"uint256\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"recordPayment\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTotalSupply\",\"type\":\"uint256\"},{\"name\":\"_newTokenPriceInWei\",\"type\":\"uint256\"},{\"name\":\"_newPercentForSale\",\"type\":\"uint256\"},{\"name\":\"_newSilencePeriod\",\"type\":\"uint256\"},{\"name\":\"_newEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateEthICOThresholds\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdCentsBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelisted\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensAvailableForSale\",\"outputs\":[{\"name\":\"tokensAvailableForSale\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_stateControl\",\"type\":\"address\"},{\"name\":\"_whitelistControl\",\"type\":\"address\"},{\"name\":\"_withdraw\",\"type\":\"address\"},{\"name\":\"_initialHolder\",\"type\":\"address\"},{\"name\":\"_usdCurrencyFunding\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Dewhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txAmount\",\"type\":\"uint256\"}],\"name\":\"Credited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"USDCentsBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"TokenByFiatCredited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldState\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"StateTransition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DeepToken","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000024a33a6e7575ec1a1c75143abd9cc02bff9f9ebd000000000000000000000000c7db06b791f38dc3bd09c1fafbcfcb2cce47f388000000000000000000000000152227da7a1050d2b0a564b0aab87340ca6c69a3000000000000000000000000bb833152d96acfc6bb0f668f71eddfc2575af5340000000000000000000000006946777f05cc5ba54ca03945a2b4bdfcce1afe72","Library":"","SwarmSource":"bzzr://71956f8a2d1ab90fecde41225c4d714a588685a935d1e87f336ecbbde000a4a6"}]}