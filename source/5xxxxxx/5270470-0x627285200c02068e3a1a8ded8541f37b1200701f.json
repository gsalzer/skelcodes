{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n  bool public paused = false;\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint public totalSupply;  \r\n  function ERC20(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n  function balanceOf(address who) public view returns (uint);\r\n  function transfer(address to, uint value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint);\r\n  function transferFrom(address from, address to, uint value) public returns (bool);\r\n  function approve(address spender, uint value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\ncontract Token is Pausable, ERC20 {\r\n  using SafeMath for uint;\r\n  mapping(address => uint) balances;\r\n  mapping (address => mapping (address => uint)) internal allowed;\r\n  mapping(address => uint) public balanceOfLocked;\r\n  mapping(address => bool) public addressLocked;\r\n  uint public unlocktime;\r\n  bool manualUnlock;\r\n  address public crowdsaleAddress = 0;\r\n  function Token() ERC20(\"Olive\", \"OLE\", 18) public {\r\n    manualUnlock = false;\r\n    unlocktime = 1527868800;\r\n    totalSupply = 10000000000 * 10 ** uint(decimals);\r\n    balances[msg.sender] = totalSupply;\r\n  }\r\n  function allowCrowdsaleAddress(address crowdsale) onlyOwner public {\r\n    crowdsaleAddress = crowdsale;\r\n  }\r\n  function isLocked() view public returns (bool) {\r\n    return (now < unlocktime && !manualUnlock);\r\n  }\r\n  modifier lockCheck(address from, uint value) { \r\n    require(addressLocked[from] == false);\r\n    if (isLocked()) {\r\n      require(value <= balances[from] - balanceOfLocked[from]);\r\n    } else {\r\n      balanceOfLocked[from] = 0; \r\n    }\r\n    _;\r\n  }\r\n  function lockAddress(address addr) onlyOwner public {\r\n    addressLocked[addr] = true;\r\n  }\r\n  function unlockAddress(address addr) onlyOwner public {\r\n    addressLocked[addr] = false;\r\n  }\r\n  function unlock() onlyOwner public {\r\n    require(!manualUnlock);\r\n    manualUnlock = true;\r\n  }\r\n  function transfer(address _to, uint _value) lockCheck(msg.sender, _value) whenNotPaused public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  function transferLockedPart(address _to, uint _value) whenNotPaused public returns (bool) {\r\n    require(msg.sender == crowdsaleAddress);\r\n    if (transfer(_to, _value)) {\r\n      balanceOfLocked[_to] = balanceOfLocked[_to].add(_value);\r\n      return true;\r\n    }\r\n  }\r\n  function balanceOf(address _owner) public view returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n  function transferFrom(address _from, address _to, uint _value) public lockCheck(_from, _value) whenNotPaused returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  function approve(address _spender, uint _value) public whenNotPaused returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  function allowance(address _owner, address _spender) public view returns (uint) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\ncontract TokenCrowdsale is Ownable {\r\n  using SafeMath for uint;\r\n  Token public token;\r\n  uint public ethRaised;\r\n  uint public endTime;\r\n  uint[6] public exchangeLevel;\r\n  uint[6] public exchangeRate;\r\n  bool public isFinalized = false;\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint value, uint amount);\r\n  event Finalized();\r\n  event Withdraw(address to, uint value);\r\n  function TokenCrowdsale(address _token) public {\r\n    require(_token != address(0));\r\n    token = Token(_token);\r\n    endTime = 1527868800;\r\n    require(endTime >= now);\r\n    exchangeLevel = [500 ether, 300 ether, 100 ether, 50 ether, 10 ether, 0.2 ether];\r\n    exchangeRate = [92000,88000,84000,82400,80800,80000];\r\n  }\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(!hasEnded());\r\n    uint ethValue = msg.value;\r\n    ethRaised += ethValue;\r\n    uint needTokens;\r\n    for (uint i = 0; i < exchangeLevel.length; i++) {\r\n      if (ethValue >= exchangeLevel[i]) {\r\n        needTokens = ethValue.mul(exchangeRate[i]);\r\n        break;\r\n      }\r\n    }\r\n    require(needTokens != 0);\r\n    transferToken(beneficiary, needTokens);\r\n    owner.transfer(msg.value);\r\n    TokenPurchase(msg.sender, beneficiary, ethValue, needTokens);\r\n  }\r\n\r\n  function transferToken(address to,uint needTokens) internal {\r\n    require(token.balanceOf(this) >= needTokens);\r\n    uint lockTokens = needTokens.div(2);\r\n    token.transfer(to, needTokens - lockTokens);\r\n    token.transferLockedPart(to, lockTokens);\r\n  }\r\n\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    token.transfer(owner,token.balanceOf(this));\r\n    isFinalized = true;\r\n    Finalized();\r\n  }\r\n\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchangeLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009d9223436ddd466fc247e9dbbd20207e640fef58","Library":"","SwarmSource":"bzzr://eb0910c84a1574f250a9eae4083c4640f41cda633a9588687bb894890eab657f"}]}