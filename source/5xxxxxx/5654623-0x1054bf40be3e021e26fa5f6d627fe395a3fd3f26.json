{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24; \r\n\r\n// similar as shrimpfarmer, with two changes:\r\n// A. half of your plumbers leave when you sell pooh\r\n// B. the \"free\" 300 plumber cost 0.001 eth (in line with the mining fee)\r\n\r\n// bots should have a harder time\r\n\r\ncontract PlumberCollector{\r\n    uint256 public POOH_TO_CALL_1PLUMBER=86400;//for final version should be seconds in a day\r\n    uint256 public STARTING_POOH=300;\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    bool public initialized=false;\r\n    address public ceoAddress;\r\n    mapping (address => uint256) public hatcheryPlumber;\r\n    mapping (address => uint256) public claimedPoohs;\r\n    mapping (address => uint256) public lastHatch;\r\n    mapping (address => address) public referrals;\r\n    uint256 public marketPoohs;\r\n   \r\n\r\n    constructor() public\r\n    {\r\n        ceoAddress=msg.sender;\r\n    }\r\n\r\n    function hatchPoohs(address ref) public\r\n    {\r\n        require(initialized);\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender)\r\n        {\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 poohsUsed=getMyPoohs();\r\n        uint256 newPlumber=SafeMath.div(poohsUsed,POOH_TO_CALL_1PLUMBER);\r\n        hatcheryPlumber[msg.sender]=SafeMath.add(hatcheryPlumber[msg.sender],newPlumber);\r\n        claimedPoohs[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        \r\n        //send referral poohs\r\n        claimedPoohs[referrals[msg.sender]]=SafeMath.add(claimedPoohs[referrals[msg.sender]],SafeMath.div(poohsUsed,5));\r\n        \r\n        //boost market to nerf shrimp hoarding\r\n        marketPoohs=SafeMath.add(marketPoohs,SafeMath.div(poohsUsed,10));\r\n    }\r\n\r\n    function sellPoohs() public{\r\n        require(initialized);\r\n        uint256 hasPoohs=getMyPoohs();\r\n        uint256 poohValue=calculatePoohSell(hasPoohs);\r\n        uint256 fee=devFee(poohValue);\r\n        // kill one half of the owner's snails on egg sale\r\n        hatcheryPlumber[msg.sender] = SafeMath.div(hatcheryPlumber[msg.sender],2);\r\n        claimedPoohs[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        marketPoohs=SafeMath.add(marketPoohs,hasPoohs);\r\n        ceoAddress.transfer(fee);\r\n        msg.sender.transfer(SafeMath.sub(poohValue,fee));\r\n    }\r\n\r\n    function buyPoohs() public payable\r\n    {\r\n        require(initialized);\r\n        uint256 poohsBought=calculatePoohBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));\r\n        poohsBought=SafeMath.sub(poohsBought,devFee(poohsBought));\r\n        ceoAddress.transfer(devFee(msg.value));\r\n        claimedPoohs[msg.sender]=SafeMath.add(claimedPoohs[msg.sender],poohsBought);\r\n    }\r\n\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256)\r\n    {\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n\r\n    function calculatePoohSell(uint256 poohs) public view returns(uint256)\r\n    {\r\n        return calculateTrade(poohs,marketPoohs,address(this).balance);\r\n    }\r\n\r\n    function calculatePoohBuy(uint256 eth,uint256 contractBalance) public view returns(uint256)\r\n    {\r\n        return calculateTrade(eth,contractBalance,marketPoohs);\r\n    }\r\n\r\n    function calculatePoohBuySimple(uint256 eth) public view returns(uint256)\r\n    {\r\n        return calculatePoohBuy(eth, address(this).balance);\r\n    }\r\n\r\n    function devFee(uint256 amount) public pure returns(uint256)\r\n    {\r\n        // 5% devFee\r\n        return SafeMath.div(amount,20);\r\n    }\r\n\r\n    function seedMarket(uint256 poohs) public payable\r\n    {\r\n        require(marketPoohs==0);\r\n        initialized=true;\r\n        marketPoohs=poohs;\r\n    }\r\n\r\n    function getFreePlumber() public payable\r\n    {\r\n        require(initialized);\r\n        require(msg.value==0.001 ether); //similar to mining fee, prevents bots\r\n        ceoAddress.transfer(msg.value); //ceo gets this entrance fee\r\n        require(hatcheryPlumber[msg.sender]==0);\r\n        lastHatch[msg.sender]=now;\r\n        hatcheryPlumber[msg.sender]=STARTING_POOH;\r\n    }\r\n\r\n    function getBalance() public view returns(uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getMyPlumbers() public view returns(uint256)\r\n    {\r\n        return hatcheryPlumber[msg.sender];\r\n    }\r\n\r\n    \r\n\r\n    function getMyPoohs() public view returns(uint256)\r\n    {\r\n        return SafeMath.add(claimedPoohs[msg.sender],getPoohsSinceLastHatch(msg.sender));\r\n    }\r\n\r\n    function getPoohsSinceLastHatch(address adr) public view returns(uint256)\r\n    {\r\n        uint256 secondsPassed=min(POOH_TO_CALL_1PLUMBER,SafeMath.sub(now,lastHatch[adr]));\r\n        return SafeMath.mul(secondsPassed,hatcheryPlumber[adr]);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) \r\n    {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n  {\r\n    if (a == 0) \r\n    {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyPoohs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedPoohs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellPoohs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"poohs\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchPoohs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyPlumbers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"poohs\",\"type\":\"uint256\"}],\"name\":\"calculatePoohSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POOH_TO_CALL_1PLUMBER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPoohs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcheryPlumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getPoohsSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketPoohs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculatePoohBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculatePoohBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_POOH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFreePlumber\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"PlumberCollector","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://993864c091b3e5263d1bd6f3de03e6dd9d62d97114c1bef7ba62ec6b79cca1a4"}]}