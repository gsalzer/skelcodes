{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n  \tif (a == 0) {\r\n  \t\treturn 0;\r\n  \t}\r\n  \tuint256 c = a * b;\r\n  \tassert(c / a == b);\r\n  \treturn c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n // we don't need \"div\"\r\n/*  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n  \t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n  \tuint256 c = a / b;\r\n  \t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n  \treturn c;\r\n  }\r\n*/\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n  \tassert(b <= a);\r\n  \treturn a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n  \tuint256 c = a + b;\r\n  \tassert(c >= a);\r\n  \treturn c;\r\n  }\r\n}\r\n\r\ncontract TokenCity {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\t//\r\n\t// ERC-20\r\n\t//\r\n\r\n   \tstring public name = \"CityCoin\";\r\n   \tstring public symbol = \"CITY\";\r\n   \tuint8 public decimals = 0;\r\n\r\n\tmapping(address => uint256) balances;\r\n\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t* @dev total number of tokens in existence\r\n\t*/\r\n\tuint256 totalSupply_;\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn totalSupply_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev transfer token for a specified address\r\n\t* @param _to The address to transfer to.\r\n\t* @param _value The amount to be transferred.\r\n\t*/\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[msg.sender]);\r\n\r\n\t\t// SafeMath.sub will throw if there is not enough balance.\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Gets the balance of the specified address.\r\n\t* @param _owner The address to query the the balance of.\r\n\t* @return An uint256 representing the amount owned by the passed address.\r\n\t*/\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\tmapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n\t/**\r\n\t* @dev Transfer tokens from one address to another\r\n\t* @param _from address The address which you want to send tokens from\r\n\t* @param _to address The address which you want to transfer to\r\n\t* @param _value uint256 the amount of tokens to be transferred\r\n\t*/\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_value <= balances[_from]);\r\n\t\trequire(_value <= allowed[_from][msg.sender]);\r\n\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\tTransfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\t*\r\n\t* Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n\t* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n\t* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t* @param _spender The address which will spend the funds.\r\n\t* @param _value The amount of tokens to be spent.\r\n\t*/\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\t* @param _owner address The address which owns the funds.\r\n\t* @param _spender address The address which will spend the funds.\r\n\t* @return A uint256 specifying the amount of tokens still available for the spender.\r\n\t*/\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Increase the amount of tokens that an owner allowed to a spender.\r\n\t*\r\n\t* approve should be called when allowed[_spender] == 0. To increment\r\n\t* allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t* the first transaction is mined)\r\n\t* From MonolithDAO Token.sol\r\n\t* @param _spender The address which will spend the funds.\r\n\t* @param _addedValue The amount of tokens to increase the allowance by.\r\n\t*/\r\n\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n\t*\r\n\t* approve should be called when allowed[_spender] == 0. To decrement\r\n\t* allowed value is better to use this function to avoid 2 calls (and wait until\r\n\t* the first transaction is mined)\r\n\t* From MonolithDAO Token.sol\r\n\t* @param _spender The address which will spend the funds.\r\n\t* @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n\t*/\r\n\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n\t\tuint oldValue = allowed[msg.sender][_spender];\r\n\t\tif (_subtractedValue > oldValue) {\r\n\t\t\tallowed[msg.sender][_spender] = 0;\r\n\t\t\t} else {\r\n\t\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\t\t\t}\r\n\t\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n   \t//\r\n   \t// Game Meta values\r\n   \t//\r\n\r\n   \taddress public unitedNations; // the UN organisation\r\n\r\n   \tuint16 public MAX_CITIES = 5000; // maximum amount of cities in our world\r\n   \tuint256 public UNITED_NATIONS_FUND = 5000000; // initial funding for the UN\r\n   \tuint256 public ECONOMY_BOOST = 5000; // minted CITYs when a new city is being bought \r\n\r\n   \tuint256 public BUY_CITY_FEE = 3; // UN fee (% of ether) to buy a city from someon / 100e\r\n   \tuint256 public ECONOMY_BOOST_TRADE = 100; // _immutable_ gift (in CITY) from the UN when a city is traded (shared among the cities of the relevant country)\r\n\r\n   \tuint256 public MONUMENT_UN_FEE = 3; // UN fee (CITY) to buy a monument\r\n   \tuint256 public MONUMENT_CITY_FEE = 3; // additional fee (CITY) to buy a monument (shared to the monument's city)\r\n\r\n   \t//\r\n   \t// Game structures\r\n   \t//\r\n\r\n   \tstruct country {\r\n   \t\tstring name;\r\n   \t\tuint16[] cities;\r\n   \t}\r\n\r\n   \tstruct city {\r\n   \t\tstring name;\r\n   \t\tuint256 price;\r\n   \t\taddress owner;\r\n\r\n   \t\tuint16 countryId;\r\n   \t\tuint256[] monuments;\r\n\r\n   \t\tbool buyable; // set to true when it can be bought\r\n\r\n   \t\tuint256 last_purchase_price;\r\n   \t}\r\n\r\n   \tstruct monument {\r\n   \t\tstring name;\r\n   \t\tuint256 price;\r\n   \t\taddress owner;\r\n\r\n   \t\tuint16 cityId;\r\n   \t}\r\n\r\n   \tcity[] public cities; // cityId -> city\r\n   \tcountry[] public countries; // countryId -> country\r\n   \tmonument[] public monuments; // monumentId -> monument\r\n\r\n   \t//\r\n   \t// Game events\r\n   \t//\r\n\r\n\r\n\tevent NewCity(uint256 cityId, string name, uint256 price, uint16 countryId);\r\n\tevent NewMonument(uint256 monumentId, string name, uint256 price, uint16 cityId);\r\n\r\n\tevent CityForSale(uint16 cityId, uint256 price);\r\n\tevent CitySold(uint16 cityId, uint256 price, address previousOwner, address newOwner, uint256 offerId);\r\n\r\n\tevent MonumentSold(uint256 monumentId, uint256 price);\r\n\r\n   \t// \r\n   \t// Admin stuff\r\n   \t//\r\n\r\n   \t// constructor\r\n   \tfunction TokenCity() public {\r\n   \t\tunitedNations = msg.sender;\r\n   \t\tbalances[unitedNations] = UNITED_NATIONS_FUND; // initial funding for the united nations\r\n   \t\tuint256 perFounder = 500000;\r\n   \t\tbalances[address(0xe1811eC49f493afb1F4B42E3Ef4a3B9d62d9A01b)] = perFounder; // david\r\n   \t\tbalances[address(0x1E4F1275bB041586D7Bec44D2E3e4F30e0dA7Ba4)] = perFounder; // simon\r\n   \t\tbalances[address(0xD5d6301dE62D82F461dC29824FC597D38d80c424)] = perFounder; // eric\r\n   \t\t// total supply updated\r\n   \t\ttotalSupply_ = UNITED_NATIONS_FUND + 3 * perFounder;\r\n   \t}\r\n\r\n\t// withdrawing funds\r\n\tfunction adminWithdraw(uint256 _amount) public {\r\n\t\tuint256 perFounder = _amount / 3;\r\n\t\taddress(0xD5d6301dE62D82F461dC29824FC597D38d80c424).transfer(perFounder); // eric\r\n\t\taddress(0x1E4F1275bB041586D7Bec44D2E3e4F30e0dA7Ba4).transfer(perFounder); // simon\r\n\t\taddress(0xe1811eC49f493afb1F4B42E3Ef4a3B9d62d9A01b).transfer(perFounder); // david\r\n\t}\r\n\r\n\t//\r\n\t// Admin adding stuff\r\n\t//\r\n\r\n\t// we need to add a country before we can add a city\r\n\tfunction adminAddCountry(string _name) public returns (uint256) {\r\n\t\t// requires\r\n\t\trequire(msg.sender == unitedNations);\r\n\t\t// add country\r\n\t\tuint256 lastId = countries.push(country(_name, new uint16[](0))) - 1; \r\n\t\t//\r\n\t\treturn lastId;\r\n\t}\r\n\t// adding a city will mint ECONOMY_BOOST citycoins (country must exist)\r\n\tfunction adminAddCity(string _name, uint256 _price, uint16 _countryId) public returns (uint256) {\r\n\t\t// requires\r\n\t\trequire(msg.sender == unitedNations);\r\n\t\trequire(cities.length < MAX_CITIES);\r\n\t\t// add city\r\n\t\tuint256 lastId = cities.push(city(_name, _price, 0, _countryId, new uint256[](0), true, 0)) - 1;\r\n\t\tcountries[_countryId].cities.push(uint16(lastId));\r\n\t\t// event\r\n\t\tNewCity(lastId, _name, _price, _countryId);\r\n\t\t//\r\n\t\treturn lastId;\r\n\t}\r\n\r\n\t// adding a monument (city must exist)\r\n\tfunction adminAddMonument(string _name, uint256 _price, uint16 _cityId) public returns (uint256) {\r\n\t\t// requires\r\n\t\trequire(msg.sender == unitedNations);\r\n\t\trequire(_price > 0);\r\n\t\t// add monument\r\n\t\tuint256 lastId = monuments.push(monument(_name, _price, 0, _cityId)) - 1;\r\n\t\tcities[_cityId].monuments.push(lastId);\r\n\t\t// event\r\n\t\tNewMonument(lastId, _name, _price, _cityId);\r\n\t\t//\r\n\t\treturn lastId;\r\n\t}\r\n\r\n\t// Edit a city if it hasn't been bought yet\r\n\tfunction adminEditCity(uint16 _cityId, string _name, uint256 _price, address _owner) public {\r\n\t\t// requires\r\n\t\trequire(msg.sender == unitedNations);\r\n\t\trequire(cities[_cityId].owner == 0x0);\r\n\t\t//\r\n\t\tcities[_cityId].name = _name;\r\n\t\tcities[_cityId].price = _price;\r\n\t\tcities[_cityId].owner = _owner;\r\n\t}\r\n\r\n\t// \r\n\t// Buy and manage a city\r\n\t//\r\n\r\n\tfunction buyCity(uint16 _cityId) public payable {\r\n\t\t// fetch\r\n\t\tcity memory fetchedCity = cities[_cityId];\r\n\t\t// requires\r\n\t\trequire(fetchedCity.buyable == true);\r\n\t\trequire(fetchedCity.owner == 0x0); \r\n\t\trequire(msg.value >= fetchedCity.price);\r\n\t\t// transfer ownership\r\n\t\tcities[_cityId].owner = msg.sender;\r\n\t\t// update city metadata\r\n\t\tcities[_cityId].buyable = false;\r\n\t\tcities[_cityId].last_purchase_price = fetchedCity.price;\r\n\t\t// increase economy of region according to ECONOMY_BOOST\r\n\t\tuint16[] memory fetchedCities = countries[fetchedCity.countryId].cities;\r\n\t\tuint256 perCityBoost = ECONOMY_BOOST / fetchedCities.length;\r\n\t\tfor(uint16 ii = 0; ii < fetchedCities.length; ii++){\r\n\t\t\taddress _to = cities[fetchedCities[ii]].owner;\r\n\t\t\tif(_to != 0x0) { // MINT only if address exists\r\n\t\t\t\tbalances[_to] = balances[_to].add(perCityBoost);\r\n\t\t\t\ttotalSupply_ += perCityBoost; // update the total supply\r\n\t\t\t}\r\n\t\t}\r\n\t\t// event\r\n\t\tCitySold(_cityId, fetchedCity.price, 0x0, msg.sender, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n\t}\r\n\r\n\t//\r\n\t// Economy boost:\r\n\t// this is called by functions below that will \"buy a city from someone else\"\r\n\t// it will draw ECONOMY_BOOST_TRADE CITYs from the UN funds and split them in the relevant country\r\n\t//\r\n\r\n\tfunction economyBoost(uint16 _countryId, uint16 _excludeCityId) private {\r\n\t\tif(balances[unitedNations] < ECONOMY_BOOST_TRADE) {\r\n\t\t\treturn; // unless the UN has no more funds\r\n\t\t}\r\n\t\tuint16[] memory fetchedCities = countries[_countryId].cities;\r\n\t\tif(fetchedCities.length == 1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tuint256 perCityBoost = ECONOMY_BOOST_TRADE / (fetchedCities.length - 1); // excluding the bought city\r\n\t\tfor(uint16 ii = 0; ii < fetchedCities.length; ii++){\r\n\t\t\taddress _to = cities[fetchedCities[ii]].owner;\r\n\t\t\tif(_to != 0x0 && fetchedCities[ii] != _excludeCityId) { // only if address exists AND not the current city\r\n\t\t\t\tbalances[_to] = balances[_to].add(perCityBoost);\r\n\t\t\t\tbalances[unitedNations] -= perCityBoost;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//\r\n\t// Sell a city\r\n\t//\r\n\r\n\t// step 1: owner sets buyable = true\r\n\tfunction sellCityForEther(uint16 _cityId, uint256 _price) public {\r\n\t\t// requires\r\n\t\trequire(cities[_cityId].owner == msg.sender);\r\n\t\t// for sale\r\n\t\tcities[_cityId].price = _price;\r\n\t\tcities[_cityId].buyable = true;\r\n\t\t// event\r\n\t\tCityForSale(_cityId, _price);\r\n\t}\r\n\r\n\tevent CityNotForSale(uint16 cityId);\r\n\r\n\t// step 2: owner can always cancel \r\n\tfunction cancelSellCityForEther(uint16 _cityId) public {\r\n\t\t// requires\r\n\t\trequire(cities[_cityId].owner == msg.sender);\r\n\t\t//\r\n\t\tcities[_cityId].buyable = false;\r\n\t\t// event\r\n\t\tCityNotForSale(_cityId);\r\n\t}\r\n\r\n\t// step 3: someone else accepts the offer\r\n\tfunction resolveSellCityForEther(uint16 _cityId) public payable {\r\n\t\t// fetch\r\n\t\tcity memory fetchedCity = cities[_cityId];\r\n\t\t// requires\r\n\t\trequire(fetchedCity.buyable == true);\r\n\t\trequire(msg.value >= fetchedCity.price);\r\n\t\trequire(fetchedCity.owner != msg.sender);\r\n\t\t// calculate the fee\r\n\t\tuint256 fee = BUY_CITY_FEE.mul(fetchedCity.price) / 100;\r\n\t\t// pay the price\r\n\t\taddress previousOwner =\tfetchedCity.owner;\r\n\t\tpreviousOwner.transfer(fetchedCity.price.sub(fee));\r\n\t\t// transfer of ownership\r\n\t\tcities[_cityId].owner = msg.sender;\r\n\t\t// update metadata\r\n\t\tcities[_cityId].buyable = false;\r\n\t\tcities[_cityId].last_purchase_price = fetchedCity.price;\r\n\t\t// increase economy of region\r\n\t\teconomyBoost(fetchedCity.countryId, _cityId);\r\n\t\t// event\r\n\t\tCitySold(_cityId, fetchedCity.price, previousOwner, msg.sender, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n\t}\r\n\r\n\t//\r\n\t// Make an offer for a city\r\n\t//\r\n\r\n\tstruct offer {\r\n\t\tuint16 cityId;\r\n\t\tuint256 price;\r\n\t\taddress from;\r\n\t}\r\n\r\n\toffer[] public offers;\r\n\r\n\tevent OfferForCity(uint256 offerId, uint16 cityId, uint256 price, address offererAddress, address owner);\r\n\tevent CancelOfferForCity(uint256 offerId);\r\n\r\n\t// 1. we make an offer for some cityId that we don't own yet (we deposit money in escrow)\r\n\tfunction makeOfferForCity(uint16 _cityId, uint256 _price) public payable {\r\n\t\t// requires\r\n\t\trequire(cities[_cityId].owner != 0x0);\r\n\t\trequire(_price > 0);\r\n\t\trequire(msg.value >= _price);\r\n\t\trequire(cities[_cityId].owner != msg.sender);\r\n\t\t// add the offer\r\n\t\tuint256 lastId = offers.push(offer(_cityId, _price, msg.sender)) - 1;\r\n\t\t// event\r\n\t\tOfferForCity(lastId, _cityId, _price, msg.sender, cities[_cityId].owner);\r\n\t}\r\n\r\n\t// 2. we cancel it (getting back our money)\r\n\tfunction cancelOfferForCity(uint256 _offerId) public {\r\n\t\t// fetch\r\n\t\toffer memory offerFetched = offers[_offerId];\r\n\t\t// requires\r\n\t\trequire(offerFetched.from == msg.sender);\r\n\t\t// refund\r\n\t\tmsg.sender.transfer(offerFetched.price);\r\n\t\t// remove offer\r\n\t\toffers[_offerId].cityId = 0;\r\n\t\toffers[_offerId].price = 0;\r\n\t\toffers[_offerId].from = 0x0;\r\n\t\t// event\r\n\t\tCancelOfferForCity(_offerId);\r\n\t}\r\n\r\n\t// 3. the city owner can accept the offer\r\n\tfunction acceptOfferForCity(uint256 _offerId, uint16 _cityId, uint256 _price) public {\r\n\t\t// fetch\r\n\t\tcity memory fetchedCity = cities[_cityId];\r\n\t\toffer memory offerFetched = offers[_offerId];\r\n\t\t// requires\r\n\t\trequire(offerFetched.cityId == _cityId);\r\n\t\trequire(offerFetched.from != 0x0);\r\n\t\trequire(offerFetched.from != msg.sender);\r\n\t\trequire(offerFetched.price == _price);\r\n\t\trequire(fetchedCity.owner == msg.sender);\r\n\t\t// compute the fee\r\n\t\tuint256 fee = BUY_CITY_FEE.mul(_price) / 100;\r\n\t\t// transfer the escrowed money\r\n\t\tcities[_cityId].owner.transfer(_price.sub(fee));\r\n\t\t// transfer of ownership\r\n\t\tcities[_cityId].owner = offerFetched.from;\r\n\t\t// update metadata\r\n\t\tcities[_cityId].last_purchase_price = _price;\r\n\t\tcities[_cityId].buyable = false; // in case it was also set to be purchasable\r\n\t\t// increase economy of region \r\n\t\teconomyBoost(fetchedCity.countryId, _cityId);\r\n\t\t// event\r\n\t\tCitySold(_cityId, _price, msg.sender, offerFetched.from, _offerId);\r\n\t\t// remove offer\r\n\t\toffers[_offerId].cityId = 0;\r\n\t\toffers[_offerId].price = 0;\r\n\t\toffers[_offerId].from = 0x0;\r\n\t}\r\n\r\n\t//\r\n\t// in-game use of CITYs\r\n\t//\r\n\r\n\t/* \r\n   \tuint256 public MONUMENT_UN_FEE = 3; // UN fee (CITY) to buy a monument\r\n   \tuint256 public MONUMENT_CITY_FEE = 3; // additional fee (CITY) to buy a monument (shared to the monument's city)\r\n   \t*/\r\n\r\n   \t// TODO: complicated function, test it thoroughly!\r\n\r\n\t// anyone can buy a monument from someone else (with CITYs)\r\n\tfunction buyMonument(uint256 _monumentId, uint256 _price) public {\r\n\t\t// fetch\r\n\t\tmonument memory fetchedMonument = monuments[_monumentId];\r\n\t\t// requires\r\n\t\trequire(fetchedMonument.price > 0);\r\n\t\trequire(fetchedMonument.price == _price);\r\n\t\trequire(balances[msg.sender] >= _price);\r\n\t\trequire(fetchedMonument.owner != msg.sender);\r\n\t\t// pay first!\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_price);\r\n\t\t// compute fee\r\n\t\tuint256 UN_fee = MONUMENT_UN_FEE.mul(_price) / 100;\r\n\t\tuint256 city_fee = MONUMENT_CITY_FEE.mul(_price) / 100;\r\n\t\t// previous owner gets paid\r\n\t\tuint256 toBePaid = _price.sub(UN_fee);\r\n\t\ttoBePaid = toBePaid.sub(city_fee);\r\n\t\tbalances[fetchedMonument.owner] = balances[fetchedMonument.owner].add(toBePaid);\r\n\t\t// UN gets a fee\r\n\t\tbalances[unitedNations] = balances[unitedNations].add(UN_fee);\r\n\t\t// city gets a fee\r\n\t\taddress cityOwner = cities[fetchedMonument.cityId].owner;\r\n\t\tbalances[cityOwner] = balances[cityOwner].add(city_fee);\r\n\t\t// transfer of ownership\r\n\t\tmonuments[_monumentId].owner = msg.sender;\r\n\t\t// price increase of the monument\r\n\t\tmonuments[_monumentId].price = monuments[_monumentId].price.mul(2);\r\n\t\t// event\r\n\t\tMonumentSold(_monumentId, _price);\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"countries\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monuments\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"cityId\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BUY_CITY_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNITED_NATIONS_FUND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ECONOMY_BOOST_TRADE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cities\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"countryId\",\"type\":\"uint16\"},{\"name\":\"buyable\",\"type\":\"bool\"},{\"name\":\"last_purchase_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitedNations\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MONUMENT_UN_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_monumentId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"buyMonument\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint16\"}],\"name\":\"resolveSellCityForEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"name\":\"cityId\",\"type\":\"uint16\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"from\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint16\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"sellCityForEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint16\"}],\"name\":\"cancelSellCityForEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint16\"}],\"name\":\"buyCity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_countryId\",\"type\":\"uint16\"}],\"name\":\"adminAddCity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CITIES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ECONOMY_BOOST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"cancelOfferForCity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_cityId\",\"type\":\"uint16\"}],\"name\":\"adminAddMonument\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MONUMENT_CITY_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"adminAddCountry\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_offerId\",\"type\":\"uint256\"},{\"name\":\"_cityId\",\"type\":\"uint16\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"acceptOfferForCity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint16\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"makeOfferForCity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cityId\",\"type\":\"uint16\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"adminEditCity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cityId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"countryId\",\"type\":\"uint16\"}],\"name\":\"NewCity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"monumentId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cityId\",\"type\":\"uint16\"}],\"name\":\"NewMonument\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cityId\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"CityForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cityId\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"CitySold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"monumentId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"MonumentSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cityId\",\"type\":\"uint16\"}],\"name\":\"CityNotForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cityId\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"offererAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OfferForCity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"CancelOfferForCity\",\"type\":\"event\"}]","ContractName":"TokenCity","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://14589be9a64dc5f84ad59a692efab446505fa986d82b2f80ecb0ce8074ca7be8"}]}