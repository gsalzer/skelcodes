{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n/** @title Manager\r\n  * @author M.H. Kang\r\n  */\r\ncontract Managed {\r\n\r\n  event Commission(uint256 basisPoint);\r\n\r\n  address public manager;\r\n  uint256 public commission;\r\n\r\n  function Managed() public {\r\n    manager = msg.sender;\r\n  }\r\n\r\n  function() public payable {}\r\n\r\n  /* FUNCTION */\r\n\r\n  function setCommission(uint256 _commission) external {\r\n    require(_commission < 10000);\r\n    commission = _commission;\r\n\r\n    emit Commission(commission);\r\n  }\r\n\r\n  function withdrawBalance() external {\r\n    manager.transfer(address(this).balance);\r\n  }\r\n\r\n  function transferPower(address _newManager) external onlyManager {\r\n    manager = _newManager;\r\n  }\r\n\r\n  function callFor(address _to, uint256 _value, uint256 _gas, bytes _code)\r\n    external\r\n    payable\r\n    onlyManager\r\n    returns (bool)\r\n  {\r\n    return _to.call.value(_value).gas(_gas)(_code);\r\n  }\r\n\r\n  /* MODIFIER */\r\n\r\n  modifier onlyManager\r\n  {\r\n    require(msg.sender == manager);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n\r\n/** @title EthernameRaw\r\n  * @author M.H. Kang\r\n  */\r\ncontract EthernameRaw is Managed {\r\n\r\n  /* EVENT */\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    bytes32 indexed name\r\n  );\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed approved,\r\n    bytes32 indexed name\r\n  );\r\n  event SendEther(\r\n    address indexed from,\r\n    address indexed to,\r\n    bytes32 sender,\r\n    bytes32 recipient,\r\n    uint256 value\r\n  );\r\n  event Name(address indexed owner, bytes32 indexed name);\r\n  event Price(bytes32 indexed name, uint256 price);\r\n  event Buy(bytes32 indexed name, address buyer, uint256 price);\r\n  event Attribute(bytes32 indexed name, bytes32 key);\r\n\r\n  /* DATA STRUCT */\r\n\r\n  struct Record {\r\n    address owner;\r\n    uint256 price;\r\n    mapping (bytes32 => bytes) attrs;\r\n  }\r\n\r\n  /* STORAGE */\r\n\r\n  string public constant name = \"Ethername\";\r\n  string public constant symbol = \"ENM\";\r\n\r\n  mapping (address => bytes32) public ownerToName;\r\n  mapping (bytes32 => Record) public nameToRecord;\r\n  mapping (bytes32 => address) public nameToApproved;\r\n\r\n  /* FUNCTION */\r\n\r\n  function rawRegister(bytes32 _name) public payable {\r\n    _register(_name, msg.sender);\r\n  }\r\n\r\n  function rawTransfer(address _to, bytes32 _name)\r\n    public\r\n    onlyOwner(msg.sender, _name)\r\n  {\r\n    _transfer(msg.sender, _to, _name);\r\n  }\r\n\r\n  function rawApprove(address _to, bytes32 _name)\r\n    public\r\n    onlyOwner(msg.sender, _name)\r\n  {\r\n    _approve(msg.sender, _to, _name);\r\n  }\r\n\r\n  function rawTransferFrom(address _from, address _to, bytes32 _name)\r\n    public\r\n    onlyOwner(_from, _name)\r\n    onlyApproved(msg.sender, _name)\r\n  {\r\n    _transfer(_from, _to, _name);\r\n  }\r\n\r\n  function rawSetPrice(bytes32 _name, uint256 _price)\r\n    public\r\n    onlyOwner(msg.sender, _name)\r\n  {\r\n    require(_price == uint256(uint128(_price)));\r\n    nameToRecord[_name].price = _price;\r\n\r\n    emit Price(_name, _price);\r\n  }\r\n\r\n  function rawBuy(bytes32 _name) public payable {\r\n    Record memory _record = nameToRecord[_name];\r\n    require(_record.price > 0);\r\n    uint256 _price = _computePrice(_record.price);\r\n    require(msg.value >= _price);\r\n\r\n    _record.owner.transfer(_record.price);\r\n    _transfer(_record.owner, msg.sender, _name);\r\n    msg.sender.transfer(msg.value - _price);\r\n\r\n    emit Buy(_name, msg.sender, _price);\r\n  }\r\n\r\n  function rawUseName(bytes32 _name) public onlyOwner(msg.sender, _name) {\r\n    _useName(msg.sender, _name);\r\n  }\r\n\r\n  function rawSetAttribute(bytes32 _name, bytes32 _key, bytes _value)\r\n    public\r\n    onlyOwner(msg.sender, _name)\r\n  {\r\n    nameToRecord[_name].attrs[_key] = _value;\r\n\r\n    emit Attribute(_name, _key);\r\n  }\r\n\r\n  function rawWipeAttributes(bytes32 _name, bytes32[] _keys)\r\n    public\r\n    onlyOwner(msg.sender, _name)\r\n  {\r\n    mapping (bytes32 => bytes) attrs = nameToRecord[_name].attrs;\r\n\t\tfor (uint i = 0; i < _keys.length; i++) {\r\n      delete attrs[_keys[i]];\r\n\r\n      emit Attribute(_name, _keys[i]);\r\n\t\t}\r\n  }\r\n\r\n  function rawSendEther(bytes32 _name) public payable returns (bool _result) {\r\n    address _to = nameToRecord[_name].owner;\r\n    _result = (_name != bytes32(0)) &&\r\n      (_to != address(0)) &&\r\n      _to.send(msg.value);\r\n    if (_result) {\r\n      emit SendEther(\r\n        msg.sender,\r\n        _to,\r\n        rawNameOf(msg.sender),\r\n        _name,\r\n        msg.value\r\n      );\r\n    }\r\n  }\r\n\r\n  /* VIEW FUNCTION */\r\n\r\n  function rawNameOf(address _address) public view returns (bytes32 _name) {\r\n    _name = ownerToName[_address];\r\n  }\r\n\r\n  function rawOwnerOf(bytes32 _name) public view returns (address _owner) {\r\n    _owner = nameToRecord[_name].owner;\r\n  }\r\n\r\n  function rawDetailsOf(bytes32 _name, bytes32 _key)\r\n    public\r\n    view\r\n    returns (address _owner, uint256 _price, bytes _value)\r\n  {\r\n    _owner = nameToRecord[_name].owner;\r\n    _price = _computePrice(nameToRecord[_name].price);\r\n    _value = nameToRecord[_name].attrs[_key];\r\n  }\r\n\r\n  /* INTERNAL FUNCTION */\r\n\r\n  function _register(bytes32 _name, address _to) internal {\r\n    require(nameToRecord[_name].owner == address(0));\r\n\t\tfor (uint i = 0; i < _name.length; i++) {\r\n\t\t \trequire((_name[i] == 0) ||\r\n              (_name[i] > 96 && _name[i] < 123) ||\r\n              (_name[i] > 47 && _name[i] < 58));\r\n\t\t}\r\n\r\n    _transfer(0, _to, _name);\r\n  }\r\n\r\n  /**\r\n   * @dev When transferred,\r\n   *  price and approved are set to 0 but attrs remains.\r\n   */\r\n  function _transfer(address _from, address _to, bytes32 _name) internal {\r\n    address _null = address(0);\r\n\r\n    if (nameToApproved[_name] != _null) {\r\n      _approve(_from, _null, _name);\r\n    }\r\n\r\n    if (ownerToName[_from] == _name) {\r\n      _useName(_from, 0);\r\n    }\r\n\r\n    nameToRecord[_name] = Record(_to, 0);\r\n\r\n    if (ownerToName[_to] == bytes32(0)) {\r\n      _useName(_to, _name);\r\n    }\r\n\r\n    emit Transfer(_from, _to, _name);\r\n  }\r\n\r\n  function _approve(address _owner, address _to, bytes32 _name) internal {\r\n    nameToApproved[_name] = _to;\r\n    emit Approval(_owner, _to, _name);\r\n  }\r\n\r\n  function _useName(address _owner, bytes32 _name) internal {\r\n    ownerToName[_owner] = _name;\r\n    emit Name(_owner, _name);\r\n  }\r\n\r\n  function _computePrice(uint256 _price) internal view returns (uint256) {\r\n    return _price * (10000 + commission) / 10000;\r\n  }\r\n\r\n  function _stringToBytes32(string _string)\r\n    internal\r\n    pure\r\n    returns (bytes32 _bytes32)\r\n  {\r\n    require(bytes(_string).length < 33);\r\n    assembly {\r\n      _bytes32 := mload(add(_string, 0x20))\r\n    }\r\n  }\r\n\r\n  function _bytes32ToString(bytes32 _bytes32)\r\n    internal\r\n    pure\r\n    returns (string _string)\r\n  {\r\n    assembly {\r\n      let m := mload(0x40)\r\n      mstore(m, 0x20)\r\n      mstore(add(m, 0x20), _bytes32)\r\n      mstore(0x40, add(m, 0x40))\r\n      _string := m\r\n    }\r\n  }\r\n\r\n  /* MODIFIER */\r\n\r\n  modifier onlyOwner(address _claimant, bytes32 _name) {\r\n    require(nameToRecord[_name].owner == _claimant);\r\n    _;\r\n  }\r\n\r\n  modifier onlyApproved(address _claimant, bytes32 _name) {\r\n    require(nameToApproved[_name] == _claimant);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n/** @title Ethername\r\n  * @author M.H. Kang\r\n  * @notice This contract is designed for any DAPPs to have\r\n  *  username feature without additional implementation.\r\n  */\r\ncontract Ethername is EthernameRaw {\r\n\r\n  /* CONSTRUCTOR */\r\n\r\n  function Ethername() public {\r\n    commission = 200;\r\n\r\n    // reserved word\r\n    nameToRecord[bytes32('')] = Record(this, 0);\r\n\r\n    // initial register\r\n    _register(bytes32('ethername'), this);\r\n    _register(bytes32('root'), msg.sender);\r\n  }\r\n\r\n\r\n  /* FUNCTION */\r\n\r\n  function register(string _name) external payable {\r\n    rawRegister(_stringToBytes32(_name));\r\n  }\r\n\r\n  function transfer(address _to, string _name) external {\r\n    rawTransfer(_to, _stringToBytes32(_name));\r\n  }\r\n\r\n  function approve(address _to, string _name) external {\r\n    rawApprove(_to, _stringToBytes32(_name));\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, string _name) external {\r\n    rawTransferFrom(_from, _to, _stringToBytes32(_name));\r\n  }\r\n\r\n  function setPrice(string _name, uint256 _price) external {\r\n    rawSetPrice(_stringToBytes32(_name), _price);\r\n  }\r\n\r\n  function buy(string _name) external payable {\r\n    rawBuy(_stringToBytes32(_name));\r\n  }\r\n\r\n  function useName(string _name) external {\r\n    rawUseName(_stringToBytes32(_name));\r\n  }\r\n\r\n  function setAttribute(string _name, string _key, bytes _value) external {\r\n    rawSetAttribute(_stringToBytes32(_name), _stringToBytes32(_key), _value);\r\n  }\r\n\r\n  function wipeAttributes(string _name, bytes32[] _keys) external {\r\n    rawWipeAttributes(_stringToBytes32(_name), _keys);\r\n  }\r\n\r\n  function sendEther(string _name) external payable returns (bool _result) {\r\n    _result = rawSendEther(_stringToBytes32(_name));\r\n  }\r\n\r\n  /* VIEW FUNCTION */\r\n\r\n  function nameOf(address _address) external view returns (string _name) {\r\n    _name = _bytes32ToString(rawNameOf(_address));\r\n  }\r\n\r\n  function ownerOf(string _name) external view returns (address _owner) {\r\n    _owner = rawOwnerOf(_stringToBytes32(_name));\r\n  }\r\n\r\n  function detailsOf(string _name, string _key)\r\n    external\r\n    view\r\n    returns (address _owner, uint256 _price, bytes _value)\r\n  {\r\n    return rawDetailsOf(_stringToBytes32(_name), _stringToBytes32(_key));\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"detailsOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nameToRecord\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"rawNameOf\",\"outputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"sendEther\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_key\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"bytes\"}],\"name\":\"setAttribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"setCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"rawBuy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"rawUseName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"rawOwnerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"rawRegister\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_keys\",\"type\":\"bytes32[]\"}],\"name\":\"rawWipeAttributes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"rawSendEther\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"useName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"rawDetailsOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nameToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"rawTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_gas\",\"type\":\"uint256\"},{\"name\":\"_code\",\"type\":\"bytes\"}],\"name\":\"callFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"rawTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_keys\",\"type\":\"bytes32[]\"}],\"name\":\"wipeAttributes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"bytes\"}],\"name\":\"rawSetAttribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerToName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"rawApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"nameOf\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"transferPower\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"rawSetPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SendEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"Name\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Price\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"Attribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"basisPoint\",\"type\":\"uint256\"}],\"name\":\"Commission\",\"type\":\"event\"}]","ContractName":"Ethername","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ef8c94615fc17646072849c568de0940468df3d6e51e0325f87e46fa16124cee"}]}