{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/ERC223Receiver.sol\r\n\r\n/**\r\n * @title Contract that will work with ERC223 tokens.\r\n */\r\n\r\ncontract ERC223Receiver {\r\n\t/**\r\n\t * @dev Standard ERC223 function that will handle incoming token transfers.\r\n\t *\r\n\t * @param _from  Token sender address.\r\n\t * @param _value Amount of tokens.\r\n\t * @param _data  Transaction metadata.\r\n\t */\r\n\tfunction tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Claimable.sol\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ERC223Token.sol\r\n\r\n/*!\tERC223 token implementation\r\n */\r\ncontract ERC223Token is StandardToken, Claimable {\r\n\tusing SafeMath for uint256;\r\n\r\n\tbool public erc223Activated;\r\n\r\n\t/*!\tWhitelisting addresses of smart contracts which have\r\n\r\n\t */\r\n\tmapping (address => bool) public whiteListContracts;\r\n\r\n\t/*!\tPer user: whitelisting addresses of smart contracts which have\r\n\r\n\t */\r\n\tmapping (address => mapping (address => bool) ) public userWhiteListContracts;\r\n\r\n\tfunction setERC223Activated(bool _activate) public onlyOwner {\r\n\t\terc223Activated = _activate;\r\n\t}\r\n\tfunction setWhiteListContract(address _addr, bool f) public onlyOwner {\r\n\t\twhiteListContracts[_addr] = f;\r\n\t}\r\n\tfunction setUserWhiteListContract(address _addr, bool f) public {\r\n\t\tuserWhiteListContracts[msg.sender][_addr] = f;\r\n\t}\r\n\r\n\tfunction checkAndInvokeReceiver(address _to, uint256 _value, bytes _data) internal {\r\n\t\tuint codeLength;\r\n\r\n\t\tassembly {\r\n\t\t\t// Retrieve the size of the code\r\n\t\t\tcodeLength := extcodesize(_to)\r\n\t\t}\r\n\r\n\t\tif (codeLength>0) {\r\n\t\t\tERC223Receiver receiver = ERC223Receiver(_to);\r\n\t\t\treceiver.tokenFallback(msg.sender, _value, _data);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n\t\tbool ok = super.transfer(_to, _value);\r\n\t\tif (erc223Activated\r\n\t\t\t&& whiteListContracts[_to] ==false\r\n\t\t\t&& userWhiteListContracts[msg.sender][_to] ==false) {\r\n\t\t\tbytes memory empty;\r\n\t\t\tcheckAndInvokeReceiver(_to, _value, empty);\r\n\t\t}\r\n\t\treturn ok;\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\r\n\t\tbool ok = super.transfer(_to, _value);\r\n\t\tif (erc223Activated\r\n\t\t\t&& whiteListContracts[_to] ==false\r\n\t\t\t&& userWhiteListContracts[msg.sender][_to] ==false) {\r\n\t\t\tcheckAndInvokeReceiver(_to, _value, _data);\r\n\t\t}\r\n\t\treturn ok;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\t\tbool ok = super.transferFrom(_from, _to, _value);\r\n\t\tif (erc223Activated\r\n\t\t\t&& whiteListContracts[_to] ==false\r\n\t\t\t&& userWhiteListContracts[_from][_to] ==false\r\n\t\t\t&& userWhiteListContracts[msg.sender][_to] ==false) {\r\n\t\t\tbytes memory empty;\r\n\t\t\tcheckAndInvokeReceiver(_to, _value, empty);\r\n\t\t}\r\n\t\treturn ok;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\r\n\t\tbool ok = super.transferFrom(_from, _to, _value);\r\n\t\tif (erc223Activated\r\n\t\t\t&& whiteListContracts[_to] ==false\r\n\t\t\t&& userWhiteListContracts[_from][_to] ==false\r\n\t\t\t&& userWhiteListContracts[msg.sender][_to] ==false) {\r\n\t\t\tcheckAndInvokeReceiver(_to, _value, _data);\r\n\t\t}\r\n\t\treturn ok;\r\n\t}\r\n\r\n}\r\n\r\n// File: contracts/BurnableToken.sol\r\n\r\n/*!\tFunctionality to keep burn for owner.\r\n\tCopy from Burnable token but only for owner\r\n */\r\ncontract BurnableToken is ERC223Token {\r\n\tusing SafeMath for uint256;\r\n\r\n\t/*! Copy from Burnable token but only for owner */\r\n\r\n\tevent Burn(address indexed burner, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Burns a specific amount of tokens.\r\n\t * @param _value The amount of token to be burned.\r\n\t */\r\n\tfunction burnTokenBurn(uint256 _value) public onlyOwner {\r\n\t\trequire(_value <= balances[msg.sender]);\r\n\t\t// no need to require value <= totalSupply, since that would imply the\r\n\t\t// sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n\t\taddress burner = msg.sender;\r\n\t\tbalances[burner] = balances[burner].sub(_value);\r\n\t\ttotalSupply_ = totalSupply_.sub(_value);\r\n\t\tBurn(burner, _value);\r\n\t}\r\n}\r\n\r\n// File: contracts/HoldersToken.sol\r\n\r\n/*!\tFunctionality to keep up-to-dated list of all holders.\r\n */\r\ncontract HoldersToken is BurnableToken {\r\n\tusing SafeMath for uint256;\r\n\r\n\t/*!\tKeep the list of addresses of holders up-to-dated\r\n\r\n\t\tother contracts can communicate with or to do operations\r\n\t\twith all holders of tokens\r\n\t */\r\n\tmapping (address => bool) public isHolder;\r\n\taddress [] public holders;\r\n\r\n\tfunction addHolder(address _addr) internal returns (bool) {\r\n\t\tif (isHolder[_addr] != true) {\r\n\t\t\tholders[holders.length++] = _addr;\r\n\t\t\tisHolder[_addr] = true;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(this)); // Prevent transfer to contract itself\r\n\t\tbool ok = super.transfer(_to, _value);\r\n\t\taddHolder(_to);\r\n\t\treturn ok;\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\r\n\t\trequire(_to != address(this)); // Prevent transfer to contract itself\r\n\t\tbool ok = super.transfer(_to, _value, _data);\r\n\t\taddHolder(_to);\r\n\t\treturn ok;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(_to != address(this)); // Prevent transfer to contract itself\r\n\t\tbool ok = super.transferFrom(_from, _to, _value);\r\n\t\taddHolder(_to);\r\n\t\treturn ok;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\r\n\t\trequire(_to != address(this)); // Prevent transfer to contract itself\r\n\t\tbool ok = super.transferFrom(_from, _to, _value, _data);\r\n\t\taddHolder(_to);\r\n\t\treturn ok;\r\n\t}\r\n\r\n}\r\n\r\n// File: contracts/MigrationAgent.sol\r\n\r\n/*!\tDefinition of destination interface\r\n\tfor contract that can be used for migration\r\n */\r\ncontract MigrationAgent {\r\n\tfunction migrateFrom(address from, uint256 value) public returns (bool);\r\n}\r\n\r\n// File: contracts/MigratoryToken.sol\r\n\r\n/*!\tFunctionality to support migrations to new upgraded contract\r\n\tfor tokens. Only has effect if migrations are enabled and\r\n\taddress of new contract is known.\r\n */\r\ncontract MigratoryToken is HoldersToken {\r\n\tusing SafeMath for uint256;\r\n\r\n\t//! Address of new contract for possible upgrades\r\n\taddress public migrationAgent;\r\n\t//! Counter to iterate (by portions) through all addresses for migration\r\n\tuint256 public migrationCountComplete;\r\n\r\n\t/*!\tSetup the address for new contract (to migrate coins to)\r\n\t\tCan be called only by owner (onlyOwner)\r\n\t */\r\n\tfunction setMigrationAgent(address agent) public onlyOwner {\r\n\t\tmigrationAgent = agent;\r\n\t}\r\n\r\n\t/*!\tMigrate tokens to the new token contract\r\n\t\tThe method can be only called when migration agent is set.\r\n\r\n\t\tCan be called by user(holder) that would like to transfer\r\n\t\tcoins to new contract immediately.\r\n\t */\r\n\tfunction migrate() public returns (bool) {\r\n\t\trequire(migrationAgent != 0x0);\r\n\t\tuint256 value = balances[msg.sender];\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(value);\r\n\t\ttotalSupply_ = totalSupply_.sub(value);\r\n\t\tMigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\r\n\t\t// Notify anyone listening that this migration took place\r\n\t\tMigrate(msg.sender, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/*!\tMigrate holders of tokens to the new contract\r\n\t\tThe method can be only called when migration agent is set.\r\n\r\n\t\tCan be called only by owner (onlyOwner)\r\n\t */\r\n\tfunction migrateHolders(uint256 count) public onlyOwner returns (bool) {\r\n\t\trequire(count > 0);\r\n\t\trequire(migrationAgent != 0x0);\r\n\t\t// Calculate bounds for processing\r\n\t\tcount = migrationCountComplete.add(count);\r\n\t\tif (count > holders.length) {\r\n\t\t\tcount = holders.length;\r\n\t\t}\r\n\t\t// Process migration\r\n\t\tfor (uint256 i = migrationCountComplete; i < count; i++) {\r\n\t\t\taddress holder = holders[i];\r\n\t\t\tuint value = balances[holder];\r\n\t\t\tbalances[holder] = balances[holder].sub(value);\r\n\t\t\ttotalSupply_ = totalSupply_.sub(value);\r\n\t\t\tMigrationAgent(migrationAgent).migrateFrom(holder, value);\r\n\t\t\t// Notify anyone listening that this migration took place\r\n\t\t\tMigrate(holder, value);\r\n\t\t}\r\n\t\tmigrationCountComplete = count;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tevent Migrate(address indexed owner, uint256 value);\r\n}\r\n\r\n// File: contracts/FollowCoin.sol\r\n\r\ncontract FollowCoin is MigratoryToken {\r\n\tusing SafeMath for uint256;\r\n\r\n\t//! Token name FollowCoin\r\n\tstring public name;\r\n\t//! Token symbol FLLW\r\n\tstring public symbol;\r\n\t//! Token decimals, 18\r\n\tuint8 public decimals;\r\n\r\n\t/*!\tContructor\r\n\t */\r\n\tfunction FollowCoin() public {\r\n\t\tname = \"FollowCoin\";\r\n\t\tsymbol = \"FLLW\";\r\n\t\tdecimals = 18;\r\n\t\ttotalSupply_ = 515547535173959076174820000;\r\n\t\tbalances[owner] = totalSupply_;\r\n\t\tholders[holders.length++] = owner;\r\n\t\tisHolder[owner] = true;\r\n\t}\r\n\r\n\t//! Address of migration gate to do transferMulti on migration\r\n\taddress public migrationGate;\r\n\r\n\t/*!\tSetup the address for new contract (to migrate coins to)\r\n\t\tCan be called only by owner (onlyOwner)\r\n\t */\r\n\tfunction setMigrationGate(address _addr) public onlyOwner {\r\n\t\tmigrationGate = _addr;\r\n\t}\r\n\r\n\t/*!\tThrows if called by any account other than the migrationGate.\r\n\t */\r\n\tmodifier onlyMigrationGate() {\r\n\t\trequire(msg.sender == migrationGate);\r\n\t\t_;\r\n\t}\r\n\r\n\t/*!\tTransfer tokens to multipe destination addresses\r\n\t\tReturns list with appropriate (by index) successful statuses.\r\n\t\t(string with 0 or 1 chars)\r\n\t */\r\n\tfunction transferMulti(address [] _tos, uint256 [] _values) public onlyMigrationGate returns (string) {\r\n\t\trequire(_tos.length == _values.length);\r\n\t\tbytes memory return_values = new bytes(_tos.length);\r\n\r\n\t\tfor (uint256 i = 0; i < _tos.length; i++) {\r\n\t\t\taddress _to = _tos[i];\r\n\t\t\tuint256 _value = _values[i];\r\n\t\t\treturn_values[i] = byte(48); //'0'\r\n\r\n\t\t\tif (_to != address(0) &&\r\n\t\t\t\t_value <= balances[msg.sender]) {\r\n\r\n\t\t\t\tbool ok = transfer(_to, _value);\r\n\t\t\t\tif (ok) {\r\n\t\t\t\t\treturn_values[i] = byte(49); //'1'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn string(return_values);\r\n\t}\r\n\r\n\t/*!\tDo not accept incoming ether\r\n\t */\r\n\tfunction() public payable {\r\n\t\trevert();\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWhiteListContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"transferMulti\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc223Activated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationCountComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"f\",\"type\":\"bool\"}],\"name\":\"setWhiteListContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokenBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"f\",\"type\":\"bool\"}],\"name\":\"setUserWhiteListContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMigrationGate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationGate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"migrateHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_activate\",\"type\":\"bool\"}],\"name\":\"setERC223Activated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"FollowCoin","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://79fd2e3c3f44f62bc45dba20f755e3640deb87125e089f95957ec7314264f88a"}]}