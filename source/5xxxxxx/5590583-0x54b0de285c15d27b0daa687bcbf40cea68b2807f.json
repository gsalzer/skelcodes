{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ninterface VaultInterface {\r\n\r\n    event Deposited(address indexed user, address token, uint amount);\r\n    event Withdrawn(address indexed user, address token, uint amount);\r\n\r\n    event Approved(address indexed user, address indexed spender);\r\n    event Unapproved(address indexed user, address indexed spender);\r\n\r\n    event AddedSpender(address indexed spender);\r\n    event RemovedSpender(address indexed spender);\r\n\r\n    function deposit(address token, uint amount) external payable;\r\n    function withdraw(address token, uint amount) external;\r\n    function transfer(address token, address from, address to, uint amount) external;\r\n    function approve(address spender) external;\r\n    function unapprove(address spender) external;\r\n    function isApproved(address user, address spender) external view returns (bool);\r\n    function addSpender(address spender) external;\r\n    function removeSpender(address spender) external;\r\n    function latestSpender() external view returns (address);\r\n    function isSpender(address spender) external view returns (bool);\r\n    function tokenFallback(address from, uint value, bytes data) public;\r\n    function balanceOf(address token, address user) public view returns (uint);\r\n\r\n}\r\n\r\ninterface ERC820 {\r\n\r\n    function setInterfaceImplementer(address addr, bytes32 iHash, address implementer) public;\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint a, uint b) internal pure returns (uint) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint a, uint b) internal pure returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function isOwner(address _address) public view returns (bool) {\r\n        return owner == _address;\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address owner) public view returns (uint);\r\n    function allowance(address owner, address spender) public view returns (uint);\r\n    function transfer(address to, uint value) public returns (bool);\r\n    function transferFrom(address from, address to, uint value) public returns (bool);\r\n    function approve(address spender, uint value) public returns (bool);\r\n\r\n}\r\n\r\ninterface ERC777 {\r\n    function name() public constant returns (string);\r\n    function symbol() public constant returns (string);\r\n    function totalSupply() public constant returns (uint256);\r\n    function granularity() public constant returns (uint256);\r\n    function balanceOf(address owner) public constant returns (uint256);\r\n\r\n    function send(address to, uint256 amount) public;\r\n    function send(address to, uint256 amount, bytes userData) public;\r\n\r\n    function authorizeOperator(address operator) public;\r\n    function revokeOperator(address operator) public;\r\n    function isOperatorFor(address operator, address tokenHolder) public constant returns (bool);\r\n    function operatorSend(address from, address to, uint256 amount, bytes userData, bytes operatorData) public;\r\n\r\n}\r\n\r\ncontract Vault is Ownable, VaultInterface {\r\n\r\n    using SafeMath for *;\r\n\r\n    address constant public ETH = 0x0;\r\n\r\n    mapping (address => bool) public isERC777;\r\n\r\n    // user => spender => approved\r\n    mapping (address => mapping (address => bool)) private approved;\r\n    mapping (address => mapping (address => uint)) private balances;\r\n    mapping (address => uint) private accounted;\r\n    mapping (address => bool) private spenders;\r\n\r\n    address private latest;\r\n\r\n    modifier onlySpender {\r\n        require(spenders[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyApproved(address user) {\r\n        require(approved[user][msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function Vault(ERC820 registry) public {\r\n        // required by ERC777 standard.\r\n        registry.setInterfaceImplementer(address(this), keccak256(\"ERC777TokensRecipient\"), address(this));\r\n    }\r\n\r\n    /// @dev Deposits a specific token.\r\n    /// @param token Address of the token to deposit.\r\n    /// @param amount Amount of tokens to deposit.\r\n    function deposit(address token, uint amount) external payable {\r\n        require(token == ETH || msg.value == 0);\r\n\r\n        uint value = amount;\r\n        if (token == ETH) {\r\n            value = msg.value;\r\n        } else {\r\n            require(ERC20(token).transferFrom(msg.sender, address(this), value));\r\n        }\r\n\r\n        depositFor(msg.sender, token, value);\r\n    }\r\n\r\n    /// @dev Withdraws a specific token.\r\n    /// @param token Address of the token to withdraw.\r\n    /// @param amount Amount of tokens to withdraw.\r\n    function withdraw(address token, uint amount) external {\r\n        require(balanceOf(token, msg.sender) >= amount);\r\n\r\n        balances[token][msg.sender] = balances[token][msg.sender].sub(amount);\r\n        accounted[token] = accounted[token].sub(amount);\r\n\r\n        withdrawTo(msg.sender, token, amount);\r\n\r\n        emit Withdrawn(msg.sender, token, amount);\r\n    }\r\n\r\n    /// @dev Approves an spender to trade balances of the sender.\r\n    /// @param spender Address of the spender to approve.\r\n    function approve(address spender) external {\r\n        require(spenders[spender]);\r\n        approved[msg.sender][spender] = true;\r\n        emit Approved(msg.sender, spender);\r\n    }\r\n\r\n    /// @dev Unapproves an spender to trade balances of the sender.\r\n    /// @param spender Address of the spender to unapprove.\r\n    function unapprove(address spender) external {\r\n        approved[msg.sender][spender] = false;\r\n        emit Unapproved(msg.sender, spender);\r\n    }\r\n\r\n    /// @dev Adds a spender.\r\n    /// @param spender Address of the spender.\r\n    function addSpender(address spender) external onlyOwner {\r\n        require(spender != 0x0);\r\n        spenders[spender] = true;\r\n        latest = spender;\r\n        emit AddedSpender(spender);\r\n    }\r\n\r\n    /// @dev Removes a spender.\r\n    /// @param spender Address of the spender.\r\n    function removeSpender(address spender) external onlyOwner {\r\n        spenders[spender] = false;\r\n        emit RemovedSpender(spender);\r\n    }\r\n\r\n    /// @dev Transfers balances of a token between users.\r\n    /// @param token Address of the token to transfer.\r\n    /// @param from Address of the user to transfer tokens from.\r\n    /// @param to Address of the user to transfer tokens to.\r\n    /// @param amount Amount of tokens to transfer.\r\n    function transfer(address token, address from, address to, uint amount) external onlySpender onlyApproved(from) {\r\n        // We do not check the balance here, as SafeMath will revert if sub / add fail. Due to over/underflows.\r\n        require(amount > 0);\r\n        balances[token][from] = balances[token][from].sub(amount);\r\n        balances[token][to] = balances[token][to].add(amount);\r\n    }\r\n\r\n    /// @dev Returns if an spender has been approved by a user.\r\n    /// @param user Address of the user.\r\n    /// @param spender Address of the spender.\r\n    /// @return Boolean whether spender has been approved.\r\n    function isApproved(address user, address spender) external view returns (bool) {\r\n        return approved[user][spender];\r\n    }\r\n\r\n    /// @dev Returns if an address has been approved as a spender.\r\n    /// @param spender Address of the spender.\r\n    /// @return Boolean whether spender has been approved.\r\n    function isSpender(address spender) external view returns (bool) {\r\n        return spenders[spender];\r\n    }\r\n\r\n    function latestSpender() external view returns (address) {\r\n        return latest;\r\n    }\r\n\r\n    function tokenFallback(address from, uint value, bytes) public {\r\n        depositFor(from, msg.sender, value);\r\n    }\r\n\r\n    function tokensReceived(address, address from, address, uint amount, bytes, bytes) public {\r\n        if (!isERC777[msg.sender]) {\r\n            isERC777[msg.sender] = true;\r\n        }\r\n\r\n        depositFor(from, msg.sender, amount);\r\n    }\r\n\r\n    /// @dev Marks a token as an ERC777 token.\r\n    /// @param token Address of the token.\r\n    function setERC777(address token) public onlyOwner {\r\n        isERC777[token] = true;\r\n    }\r\n\r\n    /// @dev Unmarks a token as an ERC777 token.\r\n    /// @param token Address of the token.\r\n    function unsetERC777(address token) public onlyOwner {\r\n        isERC777[token] = false;\r\n    }\r\n\r\n    /// @dev Allows owner to withdraw tokens accidentally sent to the contract.\r\n    /// @param token Address of the token to withdraw.\r\n    function withdrawOverflow(address token) public onlyOwner {\r\n        withdrawTo(msg.sender, token, overflow(token));\r\n    }\r\n\r\n    /// @dev Returns the balance of a user for a specified token.\r\n    /// @param token Address of the token.\r\n    /// @param user Address of the user.\r\n    /// @return Balance for the user.\r\n    function balanceOf(address token, address user) public view returns (uint) {\r\n        return balances[token][user];\r\n    }\r\n\r\n    /// @dev Calculates how many tokens were accidentally sent to the contract.\r\n    /// @param token Address of the token to calculate for.\r\n    /// @return Amount of tokens not accounted for.\r\n    function overflow(address token) internal view returns (uint) {\r\n        if (token == ETH) {\r\n            return address(this).balance.sub(accounted[token]);\r\n        }\r\n\r\n        return ERC20(token).balanceOf(this).sub(accounted[token]);\r\n    }\r\n\r\n    /// @dev Accounts for token deposits.\r\n    /// @param user Address of the user who deposited.\r\n    /// @param token Address of the token deposited.\r\n    /// @param amount Amount of tokens deposited.\r\n    function depositFor(address user, address token, uint amount) private {\r\n        balances[token][user] = balances[token][user].add(amount);\r\n        accounted[token] = accounted[token].add(amount);\r\n        emit Deposited(user, token, amount);\r\n    }\r\n\r\n    /// @dev Withdraws tokens to user.\r\n    /// @param user Address of the target user.\r\n    /// @param token Address of the token.\r\n    /// @param amount Amount of tokens.\r\n    function withdrawTo(address user, address token, uint amount) private {\r\n        if (token == ETH) {\r\n            user.transfer(amount);\r\n            return;\r\n        }\r\n\r\n        if (isERC777[token]) {\r\n            ERC777(token).send(user, amount);\r\n            return;\r\n        }\r\n\r\n        require(ERC20(token).transfer(user, amount));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setERC777\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawOverflow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestSpender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"removeSpender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"unsetERC777\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"isSpender\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isERC777\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"addSpender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"unapprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"Unapproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"AddedSpender\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"RemovedSpender\",\"type\":\"event\"}]","ContractName":"Vault","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000991a1bcb077599290d7305493c9a630c20f8b798","Library":"","SwarmSource":"bzzr://583e1412bcaa8257094a232112e08423880683cfd0f2895c01e8d2af7afabe63"}]}