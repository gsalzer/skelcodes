{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface Crowdsale {\r\n    function safeWithdrawal() public;\r\n    function shiftSalePurchase() payable public returns(bool success);\r\n}\r\n\r\ninterface Token {\r\n    function transfer(address _to, uint256 _value) public;\r\n}\r\n\r\ncontract ShiftSale {\r\n\r\n    Crowdsale public crowdSale;\r\n    Token public token;\r\n\r\n    address public crowdSaleAddress;\r\n    address[] public owners;\r\n    mapping(address => bool) public isOwner;\r\n    uint public fee;\r\n    /*\r\n     *  Constants\r\n     */\r\n    uint constant public MAX_OWNER_COUNT = 10;\r\n\r\n    event FundTransfer(uint amount);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n\r\n    /// @dev Contract constructor sets initial Token, Crowdsale and the secret password to access the public methods.\r\n    /// @param _crowdSale Address of the Crowdsale contract.\r\n    /// @param _token Address of the Token contract.\r\n    /// @param _owners An array containing the owner addresses.\r\n    /// @param _fee The Shapeshift transaction fee to cover gas expenses.\r\n    function ShiftSale(\r\n        address _crowdSale,\r\n        address _token,\r\n        address[] _owners,\r\n        uint _fee\r\n    ) public {\r\n        crowdSaleAddress = _crowdSale;\r\n        crowdSale = Crowdsale(_crowdSale);\r\n        token = Token(_token);\r\n        for (uint i = 0; i < _owners.length; i++) {\r\n            require(!isOwner[_owners[i]] && _owners[i] != 0);\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n        owners = _owners;\r\n        fee = _fee;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        require(!isOwner[owner]);\r\n        _;\r\n    }\r\n    modifier ownerExists(address owner) {\r\n        require(isOwner[owner]);\r\n        _;\r\n    }\r\n    modifier notNull(address _address) {\r\n        require(_address != 0);\r\n        _;\r\n    }\r\n    modifier validAmount() {\r\n        require((msg.value - fee) > 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function()\r\n    payable\r\n    public\r\n    validAmount\r\n    {\r\n        if(crowdSale.shiftSalePurchase.value(msg.value - fee)()){\r\n            FundTransfer(msg.value - fee);\r\n        }\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners()\r\n    public\r\n    constant\r\n    returns (address[])\r\n    {\r\n        return owners;\r\n    }\r\n    /// @dev Allows to transfer MTC tokens. Can only be executed by an owner.\r\n    /// @param _to Destination address.\r\n    /// @param _value quantity of MTC tokens to transfer.\r\n    function transfer(address _to, uint256 _value)\r\n    ownerExists(msg.sender)\r\n    public {\r\n        token.transfer(_to, _value);\r\n    }\r\n    /// @dev Allows to withdraw the ETH from the CrowdSale contract. Transaction has to be sent by an owner.\r\n    function withdrawal()\r\n    ownerExists(msg.sender)\r\n    public {\r\n        crowdSale.safeWithdrawal();\r\n    }\r\n    /// @dev Allows to refund the ETH to destination address. Transaction has to be sent by an owner.\r\n    /// @param _to Destination address.\r\n    /// @param _value Wei to transfer.\r\n    function refund(address _to, uint256 _value)\r\n    ownerExists(msg.sender)\r\n    public {\r\n        _to.transfer(_value);\r\n    }\r\n    /// @dev Allows to refund the ETH to destination addresses. Transaction has to be sent by an owner.\r\n    /// @param _to Array of destination addresses.\r\n    /// @param _value Array of Wei to transfer.\r\n    function refundMany(address[] _to, uint256[] _value)\r\n    ownerExists(msg.sender)\r\n    public {\r\n        require(_to.length == _value.length);\r\n        for (uint i = 0; i < _to.length; i++) {\r\n            _to[i].transfer(_value[i]);\r\n        }\r\n    }\r\n    /// @dev Allows to change the fee value. Transaction has to be sent by an owner.\r\n    /// @param _fee New value for the fee.\r\n    function setFee(uint _fee)\r\n    ownerExists(msg.sender)\r\n    public {\r\n        fee = _fee;\r\n    }\r\n\r\n    /// @dev Withdraw all the eth on the contract. Transaction has to be sent by an owner.\r\n    function empty()\r\n    ownerExists(msg.sender)\r\n    public {\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"refundMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"empty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crowdSale\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"}]","ContractName":"ShiftSale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000e8160745966d2109c568230ef515b0dddea1599000000000000000000000000905e337c6c8645263d3521205aa37bf4d034e745000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000c7b2acf36d10e577d917b067f748bdff56346b6900000000000000000000000044e190dea2642a49aa317a9f080820cd77322fcc0000000000000000000000003d5eaf8a58e7bc278a6c8ccd59837c685a95311d","Library":"","SwarmSource":"bzzr://d8be288cbaee617d897742ffce893e92f0959c0ed039db9826f032bc221df4cf"}]}