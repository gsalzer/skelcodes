{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n    function approve(address spender, uint256 tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public ownerCandidate;\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        ownerCandidate = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == ownerCandidate);  \r\n        owner = ownerCandidate;\r\n    }\r\n    \r\n}\r\n\r\ncontract BoomerangLiquidity is Owned {\r\n    \r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier notFlm(address aContract){\r\n        require(aContract != flmContract);\r\n        _;\r\n    }\r\n\r\n    uint public multiplier;\r\n    uint public payoutOrder = 0;\r\n    address flmContract;\r\n\r\n    function BoomerangLiquidity(uint multiplierPercent, address aFlmContract) public {\r\n        multiplier = multiplierPercent;\r\n        flmContract = aFlmContract;\r\n    }\r\n    \r\n    \r\n    struct Participant {\r\n        address etherAddress;\r\n        uint payout;\r\n    }\r\n\r\n    Participant[] public participants;\r\n\r\n    \r\n    function() payable public {\r\n        deposit();\r\n    }\r\n    \r\n    function deposit() payable public {\r\n        participants.push(Participant(msg.sender, (msg.value * multiplier) / 100));\r\n    }\r\n    \r\n    function payout() public {\r\n        uint balance = address(this).balance;\r\n        require(balance > 1);\r\n        uint investment = balance / 2;\r\n        balance =- investment;\r\n        flmContract.call.value(investment).gas(1000000)();\r\n        while (balance > 0) {\r\n            uint payoutToSend = balance < participants[payoutOrder].payout ? balance : participants[payoutOrder].payout;\r\n            if(payoutToSend > 0){\r\n                participants[payoutOrder].payout -= payoutToSend;\r\n                balance -= payoutToSend;\r\n                if(!participants[payoutOrder].etherAddress.send(payoutToSend)){\r\n                    participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)();\r\n                }\r\n            }\r\n            if(balance > 0){\r\n                payoutOrder += 1;\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    \r\n    function withdraw() public {\r\n        flmContract.call(bytes4(keccak256(\"withdraw()\")));\r\n    }\r\n    \r\n    function donate() payable public {\r\n    }\r\n    \r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n    \r\n    //THIS CONTRACT IS FOR TESTING. IF THIS IS HERE, DO NOT INVEST REAL MONEY.\r\n    function exitScam() onlyOwner public {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"name\":\"etherAddress\",\"type\":\"address\"},{\"name\":\"payout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exitScam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"multiplierPercent\",\"type\":\"uint256\"},{\"name\":\"aFlmContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BoomerangLiquidity","CompilerVersion":"v0.4.22-nightly.2018.4.13+commit.2001cc6b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000b3775fb83f7d12a36e0475abdd1fca35c091efbe","Library":"","SwarmSource":"bzzr://3736b54877e613da3d7d855c1e7ebb0afe33fc66025716483f27e83bd3694b48"}]}