{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n   modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n   function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       uint256 c = a / b;\r\n        return c;\r\n  }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  \r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract NDUXBase is BasicToken, Ownable {\r\n\r\n  string public constant name = \"NODUX\";\r\n  string public constant symbol = \"NDUX\";\r\n  uint constant maxTotalSupply = 75000000;\r\n  \r\n  function NDUXBase() public {\r\n    mint(this, maxTotalSupply);\r\n  }\r\n\r\n  function mint(address to, uint amount) internal returns(bool) {\r\n    require(to != address(0) && amount > 0);\r\n    totalSupply_ = totalSupply_.add(amount);\r\n    balances[to] = balances[to].add(amount);\r\n    emit Transfer(address(0), to, amount);\r\n    return true;\r\n  }\r\n  \r\n  function send(address to, uint amount) public onlyOwner returns(bool) {\r\n    require(to != address(0));\r\n    require(amount <= balances[this]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[this] = balances[this].sub(amount);\r\n    balances[to] = balances[to].add(amount);\r\n    emit Transfer(this, to, amount);\r\n  }\r\n\r\n  function burn(address from, uint amount) public onlyOwner returns(bool) {\r\n    require(from != address(0) && amount > 0);\r\n    balances[from] = balances[from].sub(amount);\r\n    totalSupply_ = totalSupply_.sub(amount);\r\n    emit Transfer(from, address(0), amount);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract TxFeatures is BasicToken {\r\n\r\n  struct Tx {\r\n    uint timestamp;\r\n    uint amount;\r\n  }\r\n\r\n  mapping(address => Tx[]) public txs;\r\n\r\n  event NewTx(address user, uint timestamp, uint amount);\r\n\r\n  function pushtx(address user, uint amount) internal {\r\n    emit NewTx(user, now, amount);\r\n    txs[user].push(Tx(now, amount));\r\n  }\r\n\r\n  function poptxs(address user, uint amount) internal {\r\n    require(balanceOf(user) >= amount);\r\n    Tx[] storage usertxs = txs[user];\r\n\r\n    for(Tx storage curtx = usertxs[usertxs.length - 1]; usertxs.length != 0;) {\r\n\r\n      if(curtx.amount > amount) {\r\n        curtx.amount -= amount;\r\n        amount = 0;\r\n      } else {\r\n        amount -= curtx.amount;\r\n        delete usertxs[usertxs.length - 1];\r\n        --usertxs.length;\r\n      }\r\n      if(amount == 0) break;\r\n    }\r\n\r\n    require(amount == 0);\r\n\r\n  }\r\n}\r\n\r\ncontract NDUXB is NDUXBase, TxFeatures {\r\n   \r\n     function calculateTokensEnabledOne(address user, uint minAge) public view onlyOwner returns(uint amount) {\r\n    Tx[] storage usertxs = txs[user];\r\n    for(uint it = 0; it < usertxs.length; ++it) {\r\n      Tx storage curtx = usertxs[it];\r\n      uint diff = now - curtx.timestamp;\r\n      if(diff >= minAge) {\r\n        amount += curtx.amount;\r\n      }\r\n    }\r\n    return amount;\r\n  }\r\n\r\n  event SendMiningProfit(address user, uint tokens, uint ethers);\r\n\r\n  function sendMiningProfit(address[] users, uint minAge) public payable onlyOwner returns(uint) {\r\n    require(users.length > 0);\r\n    uint total = 0;\r\n\r\n    uint[] memory __balances = new uint[](users.length);\r\n\r\n    for(uint it = 0; it < users.length; ++it) {\r\n      address user = users[it];\r\n      uint balance = calculateTokensEnabledOne(user, minAge);\r\n      __balances[it] = balance;\r\n      total += balance;\r\n    }\r\n\r\n    if(total == 0) return 0;\r\n\r\n    uint ethersPerToken = msg.value / total;\r\n\r\n    for(it = 0; it < users.length; ++it) {\r\n      user = users[it];\r\n      balance = __balances[it];\r\n      uint ethers = balance * ethersPerToken;\r\n      if(balance > 0)\r\n        user.transfer(balance * ethersPerToken);\r\n      emit SendMiningProfit(user, balance, ethers);\r\n    }\r\n    return ethersPerToken;\r\n  }\r\n\r\n  function calculateTokensEnabledforAirdrop(address[] users,uint minAge) public view onlyOwner returns(uint total) {\r\n    for(uint it = 0; it < users.length; ++it) {\r\n      total += calculateTokensEnabledOne(users[it], minAge);\r\n    }\r\n  }\r\n\r\n  function airdrop(address[] users, uint minAge, uint percent, uint maxToSend) public onlyOwner returns(uint) {\r\n    require(users.length > 0);\r\n    require(balanceOf(msg.sender) >= maxToSend);\r\n    require(percent > 0 && percent < 10);\r\n\r\n    uint total = 0;\r\n\r\n    for(uint it = 0; it < users.length; ++it) {\r\n      address user = users[it];\r\n      uint balance = calculateTokensEnabledOne(user, minAge);\r\n      if(balance > 0) {\r\n        uint toSend = balance.mul(percent).div(100);\r\n        total += toSend;\r\n        transfer(user, balance.mul(percent).div(100));\r\n        require(total <= maxToSend);\r\n      }\r\n    }\r\n\r\n    return total;\r\n  }\r\n\r\n  function send(address to, uint amount) public onlyOwner returns(bool) {\r\n    super.send(to, amount);\r\n    pushtx(to, amount);\r\n  }\r\n\r\n  function burn(address from, uint amount) public onlyOwner returns(bool) {\r\n    poptxs(from, amount);\r\n    return super.burn(from, amount);\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    poptxs(msg.sender, _value);\r\n    pushtx(_to, _value);\r\n    super.transfer(_to, _value);\r\n  }\r\n  \r\n  function () payable public {  }\r\n  \r\n  function sendAllLocalEthers(address to) public onlyOwner {\r\n    to.transfer(address(this).balance);\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"txs\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sendAllLocalEthers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"minAge\",\"type\":\"uint256\"}],\"name\":\"calculateTokensEnabledforAirdrop\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"minAge\",\"type\":\"uint256\"}],\"name\":\"sendMiningProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"minAge\",\"type\":\"uint256\"}],\"name\":\"calculateTokensEnabledOne\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"minAge\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"maxToSend\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethers\",\"type\":\"uint256\"}],\"name\":\"SendMiningProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"NDUXB","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://391ae9aac1b2f9f34020899829f7415de04bddd700ef612ae25b8462030c0684"}]}