{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\ninterface iERC20 {\r\n    function totalSupply() external constant returns (uint256 supply);\r\n    function balanceOf(address owner) external constant returns (uint256 balance);    \r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n}\r\n\r\n/// @title buying tokens with eth.\r\n/// @dev This contract must be created with the address of the token to sell.\r\n/// This contract must also own some quantity of the token it's selling.\r\n/// Note: This is not meant to be feature complete.\r\n\r\ncontract MeerkatICO {\r\n    iERC20 token;\r\n    address owner;\r\n    address tokenCo;\r\n    uint rateMe;\r\n    \r\n    modifier ownerOnly() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    // @notice Initialises the contract.\r\n    // @param _main The address of an ERC20 compatible token to sell.\r\n   constructor(address _main) public {\r\n        token = iERC20(_main);\r\n        tokenCo = _main;\r\n        owner = msg.sender;\r\n        rateMe = 14400;\r\n    }\r\n\r\n    /// @notice Will transfer all ether in this account to the contract owner.\r\n    function withdraw() public ownerOnly {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    /// @notice This function will set the conversion rate.\r\n    /// @dev To set a rate of 100 token / eth, you would make the rate 100 hopefully.\r\n    /// @param _rateMe The conversion rate in a hole\r\n    function setRate(uint _rateMe) public ownerOnly {\r\n        rateMe = _rateMe;\r\n    }\r\n    \r\n    function CurrentRate() public constant returns (uint rate) {\r\n        return rateMe;\r\n    }\r\n    \r\n    function TokenLinked() public constant returns (address _token, uint _amountLeft) {\r\n        return (tokenCo, (token.balanceOf(address(this)) / 10**18)) ;\r\n    }\r\n    \r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public ownerOnly returns (bool success) {\r\n        return iERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    /// @notice Any funds sent to this contract will be converted to the linked contract's tokens\r\n    /// @dev This function receives funds, and transfers tokens based on the current conversion rate\r\n    \r\n    function () public payable {\r\n        // minimum contribution is 0.1 ETH\r\n        // STOP selling if the rate is set to 0\r\n        require( (msg.value >= 100000000000000000) && (rateMe != 0) );\r\n        \r\n        uint value = msg.value * rateMe;\r\n        \r\n        // Overflow detection/protection:\r\n        require(value/msg.value == rateMe);\r\n        \r\n        token.transfer(msg.sender, value);\r\n        \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_rateMe\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CurrentRate\",\"outputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenLinked\",\"outputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amountLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_main\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"MeerkatICO","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000025da1533ef06216b1922e6a93314669383f32e29","Library":"","SwarmSource":"bzzr://f2dd163f48f6f66337e99b3c668cbd37e0a342a015c162bec985a029400f9818"}]}