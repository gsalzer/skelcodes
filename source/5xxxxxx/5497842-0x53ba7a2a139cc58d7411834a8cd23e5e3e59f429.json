{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract EthMashTower {\r\n\r\n    address public owner;\r\n    mapping (address => uint) public withdrawals;\r\n\r\n    int round;\r\n    uint registered;\r\n    mapping (int => address[7]) public participants;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        round = 1;\r\n        registered = 0;\r\n    }\r\n\r\n    function publicGetBalance(address player) view public returns (uint) {\r\n        return withdrawals[player];\r\n    }\r\n\r\n    function publicGetState() view public returns (address[7][2]) {\r\n        return [\r\n            participants[round - 1],\r\n            participants[round]\r\n        ];\r\n    }\r\n\r\n    function userWithdraw() public {\r\n        require(withdrawals[msg.sender] > 0);\r\n        uint amount = withdrawals[msg.sender];\r\n        withdrawals[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function userRegister() public payable {\r\n        require(msg.value == 105 finney);\r\n        require(registered < 4);\r\n\r\n        withdrawals[owner] += 5 finney;\r\n        participants[round][registered] = msg.sender;\r\n\r\n        if (registered == 1) {\r\n            calcWinner(0, 1, 4, 150 finney);\r\n        } else if (registered == 3) {\r\n            calcWinner(2, 3, 5, 150 finney);\r\n            calcWinner(4, 5, 6, 100 finney);\r\n        }\r\n\r\n        if (registered < 3) {\r\n            registered++;\r\n        } else {\r\n            round++;\r\n            registered = 0;\r\n        }\r\n    }\r\n\r\n    function calcWinner(uint first, uint second, uint winner, uint reward) private {\r\n        uint random = (uint(blockhash(block.number - 1)) + uint(participants[round][first]) + uint(participants[round][second]));\r\n\r\n        if (random % 2 == 0) {\r\n            participants[round][winner] = participants[round][first];\r\n            withdrawals[participants[round][first]] += reward;\r\n        } else {\r\n            participants[round][winner] = participants[round][second];\r\n            withdrawals[participants[round][second]] += reward;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userRegister\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"publicGetBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicGetState\",\"outputs\":[{\"name\":\"\",\"type\":\"address[7][2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"EthMashTower","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f16eae887c000013e4acda1fb9ac15627d308639d9da7c15e6dd4a789a6fed9f"}]}