{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    function Owned() \r\n    public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) \r\n        onlyOwner \r\n    public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract RealityCheckAPI {\r\n    function setQuestionFee(uint256 fee) public;\r\n    function finalizeByArbitrator(bytes32 question_id, bytes32 answer) public;\r\n    function submitAnswerByArbitrator(bytes32 question_id, bytes32 answer, address answerer) public;\r\n    function notifyOfArbitrationRequest(bytes32 question_id, address requester) public;\r\n    function isFinalized(bytes32 question_id) public returns (bool);\r\n    function withdraw() public;\r\n}\r\n\r\ncontract Arbitrator is Owned {\r\n\r\n    mapping(bytes32 => uint256) public arbitration_bounties;\r\n\r\n    uint256 dispute_fee;\r\n    mapping(bytes32 => uint256) custom_dispute_fees;\r\n\r\n    event LogRequestArbitration(\r\n        bytes32 indexed question_id,\r\n        uint256 fee_paid,\r\n        address requester,\r\n        uint256 remaining\r\n    );\r\n\r\n    event LogSetQuestionFee(\r\n        uint256 fee\r\n    );\r\n\r\n    event LogSetDisputeFee(\r\n        uint256 fee\r\n    );\r\n\r\n    event LogSetCustomDisputeFee(\r\n        bytes32 indexed question_id,\r\n        uint256 fee\r\n    );\r\n\r\n    /// @notice Constructor. Sets the deploying address as owner.\r\n    function Arbitrator() \r\n    public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice Set the default fee\r\n    /// @param fee The default fee amount\r\n    function setDisputeFee(uint256 fee) \r\n        onlyOwner \r\n    public {\r\n        dispute_fee = fee;\r\n        LogSetDisputeFee(fee);\r\n    }\r\n\r\n    /// @notice Set a custom fee for this particular question\r\n    /// @param question_id The question in question\r\n    /// @param fee The fee amount\r\n    function setCustomDisputeFee(bytes32 question_id, uint256 fee) \r\n        onlyOwner \r\n    public {\r\n        custom_dispute_fees[question_id] = fee;\r\n        LogSetCustomDisputeFee(question_id, fee);\r\n    }\r\n\r\n    /// @notice Return the dispute fee for the specified question. 0 indicates that we won't arbitrate it.\r\n    /// @param question_id The question in question\r\n    /// @dev Uses a general default, but can be over-ridden on a question-by-question basis.\r\n    function getDisputeFee(bytes32 question_id) \r\n    public constant returns (uint256) {\r\n        return (custom_dispute_fees[question_id] > 0) ? custom_dispute_fees[question_id] : dispute_fee;\r\n    }\r\n\r\n    /// @notice Set a fee for asking a question with us as the arbitrator\r\n    /// @param realitycheck The RealityCheck contract address\r\n    /// @param fee The fee amount\r\n    /// @dev Default is no fee. Unlike the dispute fee, 0 is an acceptable setting.\r\n    /// You could set an impossibly high fee if you want to prevent us being used as arbitrator unless we submit the question.\r\n    /// (Submitting the question ourselves is not implemented here.)\r\n    /// This fee can be used as a revenue source, an anti-spam measure, or both.\r\n    function setQuestionFee(address realitycheck, uint256 fee) \r\n        onlyOwner \r\n    public {\r\n        RealityCheckAPI(realitycheck).setQuestionFee(fee);\r\n        LogSetQuestionFee(fee);\r\n    }\r\n\r\n    /// @notice Submit the arbitrator's answer to a question.\r\n    /// @param realitycheck The RealityCheck contract address\r\n    /// @param question_id The question in question\r\n    /// @param answer The answer\r\n    /// @param answerer The answerer. If arbitration changed the answer, it should be the payer. If not, the old answerer.\r\n    function submitAnswerByArbitrator(address realitycheck, bytes32 question_id, bytes32 answer, address answerer) \r\n        onlyOwner \r\n    public {\r\n        delete arbitration_bounties[question_id];\r\n        RealityCheckAPI(realitycheck).submitAnswerByArbitrator(question_id, answer, answerer);\r\n    }\r\n\r\n    /// @notice Request arbitration, freezing the question until we send submitAnswerByArbitrator\r\n    /// @dev The bounty can be paid only in part, in which case the last person to pay will be considered the payer\r\n    /// Will trigger an error if the notification fails, eg because the question has already been finalized\r\n    /// @param realitycheck The RealityCheck contract address\r\n    /// @param question_id The question in question\r\n    function requestArbitration(address realitycheck, bytes32 question_id) \r\n    external payable returns (bool) {\r\n\r\n        uint256 arbitration_fee = getDisputeFee(question_id);\r\n        require(arbitration_fee > 0);\r\n\r\n        arbitration_bounties[question_id] += msg.value;\r\n        uint256 paid = arbitration_bounties[question_id];\r\n\r\n        if (paid >= arbitration_fee) {\r\n            RealityCheckAPI(realitycheck).notifyOfArbitrationRequest(question_id, msg.sender);\r\n            LogRequestArbitration(question_id, msg.value, msg.sender, 0);\r\n            return true;\r\n        } else {\r\n            require(!RealityCheckAPI(realitycheck).isFinalized(question_id));\r\n            LogRequestArbitration(question_id, msg.value, msg.sender, arbitration_fee - paid);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    /// @notice Withdraw any accumulated fees to the specified address\r\n    /// @param addr The address to which the balance should be sent\r\n    function withdraw(address addr) \r\n        onlyOwner \r\n    public {\r\n        addr.transfer(this.balance); \r\n    }\r\n\r\n    function() \r\n    public payable {\r\n    }\r\n\r\n    /// @notice Withdraw any accumulated question fees from the specified address into this contract\r\n    /// @param realitycheck The address of the Reality Check contract containing the fees\r\n    /// @dev Funds can then be liberated from this contract with our withdraw() function\r\n    function callWithdraw(address realitycheck) \r\n        onlyOwner \r\n    public {\r\n        RealityCheckAPI(realitycheck).withdraw(); \r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setDisputeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"realitycheck\",\"type\":\"address\"}],\"name\":\"callWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"realitycheck\",\"type\":\"address\"},{\"name\":\"question_id\",\"type\":\"bytes32\"}],\"name\":\"requestArbitration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"question_id\",\"type\":\"bytes32\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setCustomDisputeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"arbitration_bounties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"question_id\",\"type\":\"bytes32\"}],\"name\":\"getDisputeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"realitycheck\",\"type\":\"address\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setQuestionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"realitycheck\",\"type\":\"address\"},{\"name\":\"question_id\",\"type\":\"bytes32\"},{\"name\":\"answer\",\"type\":\"bytes32\"},{\"name\":\"answerer\",\"type\":\"address\"}],\"name\":\"submitAnswerByArbitrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"question_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"fee_paid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"LogRequestArbitration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogSetQuestionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogSetDisputeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"question_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogSetCustomDisputeFee\",\"type\":\"event\"}]","ContractName":"Arbitrator","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://50f8451dd0c676b3e02b0c0a9dd0223caa87068d2244169ec4f2c5023b23863a"}]}