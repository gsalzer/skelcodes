{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public admin;\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    admin = msg.sender;\r\n  }\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n}\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\n contract Crowdsale {\r\n  using SafeMath for uint256;\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n  // address where funds are collected\r\n  address public wallet;\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = 0x00b95a5d838f02b12b75be562abf7ee0100410922b;\r\n  }\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n  // @return true if the transaction can mint tokens\r\n  function validMintPurchase(uint256 _value) internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = _value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n}\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Extension of Crowdsale with a max amount of funds raised\r\n */\r\n contract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n  uint256 public cap;\r\n  function CappedCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, uint256 _cap) public\r\n  Crowdsale(_startTime, _endTime, _rate, _wallet)\r\n  {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinCap = weiRaised.add(msg.value) <= cap;\r\n    return super.validPurchase() && withinCap;\r\n  }\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can mint at the moment\r\n  function validMintPurchase(uint256 _value) internal constant returns (bool) {\r\n    bool withinCap = weiRaised.add(_value) <= cap;\r\n    return super.validMintPurchase(_value) && withinCap;\r\n  }\r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    bool capReached = weiRaised >= cap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n}\r\ncontract HeartBoutToken {\r\n   function mint(address _to, uint256 _amount, string _account) public returns (bool);\r\n}\r\ncontract HeartBoutPreICO is CappedCrowdsale, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    // The token address\r\n    address public token;\r\n    uint256 public minCount;\r\n    function HeartBoutPreICO(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, uint256 _cap, uint256 _minCount) public\r\n    CappedCrowdsale(_startTime, _endTime, _rate, _wallet, _cap)\r\n    {\r\n        token = 0x00f5b36df8732fb5a045bd90ab40082ab37897b841;\r\n        minCount = _minCount;\r\n    }\r\n    // fallback function can be used to buy tokens\r\n    function () payable public {}\r\n    // low level token purchase function\r\n    function buyTokens(string _account) public payable {\r\n        require(!stringEqual(_account, \"\"));\r\n        require(validPurchase());\r\n        require(msg.value >= minCount);\r\n        uint256 weiAmount = msg.value;\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(rate);\r\n        // Mint only message sender address\r\n        HeartBoutToken token_contract = HeartBoutToken(token);\r\n        token_contract.mint(msg.sender, tokens, _account);\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        forwardFunds();\r\n    }\r\n    // mintTokens function\r\n    function mintTokens(address _to, uint256 _amount, string _account) onlyOwner public {\r\n        require(!stringEqual(_account, \"\"));\r\n        require(validMintPurchase(_amount));\r\n        require(_amount >= minCount);\r\n        uint256 weiAmount = _amount;\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(rate);\r\n        // Mint only message sender address\r\n        HeartBoutToken token_contract = HeartBoutToken(token);\r\n        token_contract.mint(_to, tokens, _account);\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n    }\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n    function stringEqual(string _a, string _b) internal pure returns (bool) {\r\n        return keccak256(_a) == keccak256(_b);\r\n    }\r\n    // change wallet\r\n    function changeWallet(address _wallet) onlyOwner public {\r\n        wallet = _wallet;\r\n    }\r\n    // Remove contract\r\n    function removeContract() onlyOwner public {\r\n        selfdestruct(wallet);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"minCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"string\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_account\",\"type\":\"string\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_minCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"HeartBoutPreICO","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005a74936c000000000000000000000000000000000000000000000000000000005a96a93400000000000000000000000000000000000000000000000000000000000020a200000000000000000000000071044ef5d1dab1b1e469e199697887b40fd8905d00000000000000000000000000000000000000000000003ba1910bf341b000000000000000000000000000000000000000000000000000000027147114878000","Library":"","SwarmSource":"bzzr://8a6c42c90a330b1377659eedc87704f34fc029f0ec8332095c325e251e56f6ae"}]}