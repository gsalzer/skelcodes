{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns(uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256){\r\n    if(a==0){\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256){\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256){\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) internal balances;\r\n  uint256 internal totalSupply_;\r\n  \r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  function transfer (address _to, uint256 _value) public returns (bool){\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns(uint256 balance){\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    \r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\ncontract DRToken is BurnableToken {\r\n  string public constant name = \"DrawingRun\";\r\n  string public constant symbol = \"DR\";\r\n  uint8 public constant decimals = 18;\r\n  uint256 public totalSupply;\r\n\r\n  constructor() public{\r\n    totalSupply = 30000000000 * 10**uint256(decimals);\r\n    balances[msg.sender] = totalSupply;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n    emit OwnershipTransferred(owner, newOwner);\r\n  }\r\n}\r\n\r\ncontract DRCrowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  DRToken public token;  //跑图币合约地址 \r\n  address public wallet;  //众筹钱包地址 \r\n  \r\n  uint256 public saleStart;  //众筹开始时间，用来设置单价自动增长 \r\n  uint256 public saleEnd;  //众筹结束时间，需要手动设置才能开始或暂停众筹项目 \r\n  uint256 public price = 2; //token单价，以0.00002ETH起价 (目前相当于0.077元)\r\n  uint256 public constant increasedPrice = 2;  //0.00002ETH (每十天自动增加increasedPrice)\r\n  uint256 public constant rate = 100000;  //以太坊币和跑图币的兑换比率 \r\n  uint256 public tokens;\r\n\r\n  constructor(address _token, address _wallet) public {\r\n    require(_token != address(0));\r\n    require(_wallet != address(0));\r\n    token = DRToken(_token);\r\n    wallet = _wallet;\r\n    saleStart = now;\r\n    saleEnd = now;\r\n  }\r\n  \r\n  //设置结束时间，用来开始或暂停合约执行 \r\n  function setSaleEnd(uint256 newSaleEnd) onlyOwner public {\r\n    saleEnd = newSaleEnd;\r\n  }\r\n  \r\n  function getTokenBalance(address _token) public view onlyOwner returns (uint256){\r\n      return token.balanceOf(_token);\r\n  }\r\n  //获取当前合约执行状态 \r\n  function getStatus() public view onlyOwner returns(bool){\r\n      return now < saleEnd;\r\n  }\r\n\r\n  function _buyTokens() internal {\r\n    //每隔十天，token单价自动增加（价格自动递增，任何人不能进行人工干预。合约暂停时，单价不递增）\r\n    if(now.sub(saleStart) > 10 * 24 * 3600){ //需要有人购买后才会激活\r\n        saleStart = now;\r\n        price = price.add(increasedPrice);\r\n    }\r\n    require(price >= increasedPrice);\r\n    uint256 weiAmount = msg.value;\r\n    tokens = weiAmount.mul(rate).div(price);\r\n    bool success = token.transfer(msg.sender, tokens);\r\n    require(success);\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  //在向合约转账时，自动购买跑图币\r\n  function () public payable{\r\n    require(msg.sender != address(0));\r\n    require(msg.value > 0);\r\n    require(now < saleEnd);\r\n\r\n    _buyTokens();\r\n  }\r\n\r\n  function burningTokens() public onlyOwner{\r\n    if(now > saleEnd){\r\n      token.burn(tokens);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSaleEnd\",\"type\":\"uint256\"}],\"name\":\"setSaleEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"increasedPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burningTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DRCrowdsale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001900b336dd92e17331ef2433bd38bcca2bcc4a4e000000000000000000000000b3697499c5704cc7d994586ab6193029f0d83d8a","Library":"","SwarmSource":"bzzr://7f0977459d451a9449d6f0ac648296ed12f0485b00b0fbfb190d82cfed1998d6"}]}