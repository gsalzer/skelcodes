{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.14;\r\n\r\n/**\r\n * Contract that exposes the needed erc20 token functions\r\n */\r\n\r\ncontract ERC20Interface {\r\n  // Send _value amount of tokens to address _to\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  // Get the account balance of another account with address _owner\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\n/**\r\n * Contract that will forward any incoming Ether to its creator\r\n */\r\ncontract Forwarder {\r\n  // Address to which any funds sent to this contract will be forwarded\r\n  address public parentAddress;\r\n  event ForwarderDeposited(address from, uint value, bytes data);\r\n\r\n  event TokensFlushed(\r\n    address tokenContractAddress, // The contract address of the token\r\n    uint value // Amount of token sent\r\n  );\r\n\r\n  /**\r\n   * Create the contract, and set the destination address to that of the creator\r\n   */\r\n  function Forwarder() {\r\n    parentAddress = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * Modifier that will execute internal code block only if the sender is a parent of the forwarder contract\r\n   */\r\n  modifier onlyParent {\r\n    if (msg.sender != parentAddress) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Default function; Gets called when Ether is deposited, and forwards it to the destination address\r\n   */\r\n  function() payable {\r\n    if (!parentAddress.call.value(msg.value)(msg.data))\r\n      throw;\r\n    // Fire off the deposited event if we can forward it  \r\n    ForwarderDeposited(msg.sender, msg.value, msg.data);\r\n  }\r\n\r\n  /**\r\n   * Execute a token transfer of the full balance from the forwarder token to the main wallet contract\r\n   * @param tokenContractAddress the address of the erc20 token contract\r\n   */\r\n  function flushTokens(address tokenContractAddress) onlyParent {\r\n    ERC20Interface instance = ERC20Interface(tokenContractAddress);\r\n    var forwarderAddress = address(this);\r\n    var forwarderBalance = instance.balanceOf(forwarderAddress);\r\n    if (forwarderBalance == 0) {\r\n      return;\r\n    }\r\n    if (!instance.transfer(parentAddress, forwarderBalance)) {\r\n      throw;\r\n    }\r\n    TokensFlushed(tokenContractAddress, forwarderBalance);\r\n  }\r\n\r\n  /**\r\n   * It is possible that funds were sent to this address before the contract was deployed.\r\n   * We can flush those funds to the destination address.\r\n   */\r\n  function flush() {\r\n    if (!parentAddress.call.value(this.balance)())\r\n      throw;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"flushTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"flush\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ForwarderDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensFlushed\",\"type\":\"event\"}]","ContractName":"Forwarder","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ef685752d07137651b7833c79f39860a70a6216b9401e5ded186c73e7725efa1"}]}