{"status":"1","message":"OK","result":[{"SourceCode":"contract Kingdom {\r\n    \r\n    struct City {\r\n        mapping(uint => uint) resources; //food, wood, stone, iron, gold, ... special\r\n        mapping(uint => mapping(uint => uint)) map;\r\n        mapping(uint => uint) resourceFactors; //population, food, wood, stone, iron, gold, woodWork, mason, blacksmith, goldforge, spirit, prestige\r\n        uint populationNeeded;\r\n        uint mapX;      //expansion of the map along the x diagonal\r\n        uint mapY;      //expansion of the map along the y diagonal\r\n        uint lastClaimResources;                //when did the user last claim his resources  \r\n        mapping(uint => uint) lastClaimItems;   //when did the user last claim his special items\r\n        bool initiatet;\r\n    }\r\n    \r\n    struct Building {\r\n        uint resource0;\r\n        uint resource1;\r\n        uint price0;\r\n        uint price1;\r\n        uint resourceIndex;\r\n        uint resourceAmount;\r\n    }\r\n    \r\n    address public owner;\r\n    address public king;\r\n    uint    public kingSpirit;\r\n    address public queen;\r\n    uint    public queenPrestige;\r\n    uint    public totalCities;\r\n    uint    public buildings_total;\r\n    uint    public sell_id;\r\n    \r\n    mapping(address => mapping(uint => uint)) marketplacePrices;\r\n    mapping(address => mapping(uint => uint)) marketplaceID;\r\n        \r\n    mapping(address => City) kingdoms;      //users kingdoms\r\n    mapping(uint => Building) buildings;    //list of possible buildings\r\n    \r\n    \r\n    //Constructor\r\n    function Kingdom () public {\r\n        owner           = msg.sender;\r\n        king            = msg.sender;\r\n        kingSpirit      = 0;\r\n        queen           = msg.sender;\r\n        queenPrestige   = 0;\r\n        totalCities     = 0;\r\n        buildings_total = 0;\r\n        sell_id         = 0;\r\n    }\r\n            \r\n/*  0  population\r\n    1  food\r\n    2  wood\r\n    3  stone\r\n    4  iron\r\n    5  gold\r\n    6  woodWork\r\n    7  mason\r\n    8  blacksmith\r\n    9  goldforge\r\n    10 spirit\r\n    11 prestige */\r\n            \r\n    //Create buildings list\r\n    function initBuilding(uint r0, uint r1, uint p0, uint p1, uint m, uint a) public {\r\n        require(msg.sender == owner);\r\n        //resource0, resource1, price0, price1, mapTo, mapAmount\r\n        buildings[buildings_total]   = Building(r0,  r1,  p0,  p1,  m,   a); //grass\r\n        buildings_total += 1;\r\n       /*[0,  0,   0,  0,  0,  0], //grass\r\n         [0,  1,   1,  1,  0,  20], //house\r\n         [0,  1,   1,  1,  1,  1], //farm\r\n         [1,  2,   1,  1,  2,  2], //lumbermill\r\n         [1,  3,   2,  1,  3,  1], //stonemine\r\n         [2,  3,   2,  1,  4,  1], //ironmine\r\n         [4,  1,   1,  2,  5,  1], //goldmine\r\n         [1,  3,   2,  2,  6,  1], //woodshop\r\n         [2,  3,   2,  3,  7,  1], //masonry\r\n         [3,  4,   3,  2,  8,  1], //blacksmith\r\n         [4,  1,   2,  4,  9,  1], //goldforge\r\n         [2,  17,  2,  1,  10, 1], //church\r\n         [3,  9,   3,  1,  10, 2], //doctor\r\n         [1,  5,   4,  1,  10, 4], //gentlemens club\r\n         [3,  13,  3,  1,  10, 1], //inn\r\n         [4,  18,  4,  2,  10, 2], //theater\r\n         [2,  14,  5,  2,  10, 4], //concerthall\r\n         [4,  6,   4,  2,  10, 1], //bathhouse\r\n         [1,  10,  5,  2,  10, 2], //baker\r\n         [3,  11,  6,  3,  10, 4], //museum\r\n         [4,  7,   5,  3,  10, 1], //barber\r\n         [1,  19,  6,  3,  10, 2], //tailor\r\n         [2,  15,  7,  3,  10, 4], //arena\r\n         [2,  12,  6,  1,  11, 1], //monument\r\n         [3,  8,   7,  1,  11, 2], //park\r\n         [2,  20,  8,  1,  11, 4], //plaza\r\n         [1,  16, 10,  1,  11, 8] //castle */\r\n    }\r\n    //log resources\r\n    \r\n    event Resources(address sender, uint food, uint wood, uint stone, uint iron, uint gold);\r\n    \r\n    function logResources() public {\r\n        Resources(  msg.sender,\r\n                    kingdoms[msg.sender].resources[0],\r\n                    kingdoms[msg.sender].resources[1],\r\n                    kingdoms[msg.sender].resources[2],\r\n                    kingdoms[msg.sender].resources[3],\r\n                    kingdoms[msg.sender].resources[4]);\r\n    }\r\n    \r\n    function newLeader() public {\r\n        if(kingdoms[msg.sender].resourceFactors[10] > kingSpirit){\r\n            kingSpirit = kingdoms[msg.sender].resourceFactors[10];\r\n            king = msg.sender;\r\n            NewLeader(msg.sender, kingSpirit, 0);\r\n        }\r\n        //try to claim the smaller throne\r\n        if(kingdoms[msg.sender].resourceFactors[11] > queenPrestige){\r\n            queenPrestige = kingdoms[msg.sender].resourceFactors[11];\r\n            queen = msg.sender;\r\n            NewLeader(msg.sender, queenPrestige, 1);\r\n        }\r\n    }\r\n    \r\n    //initiate user when first visiting\r\n    function initiateUser() public {\r\n        if(!kingdoms[msg.sender].initiatet){\r\n            kingdoms[msg.sender].initiatet = true;\r\n            kingdoms[msg.sender].resources[0] = 5;\r\n            kingdoms[msg.sender].resources[1] = 5;\r\n            kingdoms[msg.sender].resources[2] = 5;\r\n            kingdoms[msg.sender].resources[3] = 5;\r\n            kingdoms[msg.sender].resources[4] = 5;\r\n            kingdoms[msg.sender].mapX = 6;\r\n            kingdoms[msg.sender].mapY = 6;\r\n            totalCities += 1;\r\n            logResources();\r\n        }\r\n    }\r\n    \r\n    //log building creating for ease of reading\r\n    event BuildAt(address sender, uint xpos, uint ypos, uint building);\r\n    event NewLeader(address sender, uint spirit, uint Ltype);\r\n    \r\n    //build building at location (posx,posy)\r\n    function buildAt(uint xpos, uint ypos, uint building) public {\r\n        require(kingdoms[msg.sender].resources[buildings[building].resource0] >= buildings[building].price0\r\n        &&      kingdoms[msg.sender].resources[buildings[building].resource1] >= buildings[building].price1\r\n        &&      kingdoms[msg.sender].mapX > xpos\r\n        &&      kingdoms[msg.sender].mapY > ypos\r\n        &&      (kingdoms[msg.sender].populationNeeded <= kingdoms[msg.sender].resourceFactors[0] || building == 1)\r\n        &&      building > 0 && building <= buildings_total\r\n        &&      kingdoms[msg.sender].map[xpos][ypos] == 0);\r\n        \r\n        kingdoms[msg.sender].populationNeeded += 5;\r\n        kingdoms[msg.sender].map[xpos][ypos] = building;\r\n        kingdoms[msg.sender].resourceFactors[buildings[building].resourceIndex] += buildings[building].resourceAmount;\r\n        \r\n        kingdoms[msg.sender].resources[buildings[building].resource0] -= buildings[building].price0;\r\n        kingdoms[msg.sender].resources[buildings[building].resource1] -= buildings[building].price1;\r\n        \r\n        //try to claim the throne\r\n        newLeader();\r\n        BuildAt(msg.sender, xpos, ypos, building);\r\n        logResources();\r\n    }\r\n    \r\n    //log when a user expands their map\r\n    event ExpandX(address sender);\r\n    event ExpandY(address sender);\r\n    \r\n    //expand map in direction x\r\n    function expandX() public payable{\r\n        assert(msg.value >= 300000000000000*(kingdoms[msg.sender].mapY));\r\n        owner.transfer(msg.value);\r\n        kingdoms[msg.sender].mapX += 1;\r\n        ExpandX(msg.sender);\r\n    }\r\n    \r\n    //expand map in direction Y\r\n    function expandY() public payable{\r\n        assert(msg.value >= 300000000000000*(kingdoms[msg.sender].mapX));\r\n        owner.transfer(msg.value);\r\n        kingdoms[msg.sender].mapY += 1;\r\n        ExpandY(msg.sender);\r\n    }\r\n    \r\n    \r\n    //claim resources\r\n    function claimBasicResources() public {\r\n        //can claim every 2 hours - basic resources\r\n        assert(now >= kingdoms[msg.sender].lastClaimResources + 1 * 1 hours);\r\n        kingdoms[msg.sender].resources[0] += kingdoms[msg.sender].resourceFactors[1];\r\n        kingdoms[msg.sender].resources[1] += kingdoms[msg.sender].resourceFactors[2];\r\n        kingdoms[msg.sender].resources[2] += kingdoms[msg.sender].resourceFactors[3];\r\n        kingdoms[msg.sender].resources[3] += kingdoms[msg.sender].resourceFactors[4];\r\n        kingdoms[msg.sender].resources[4] += kingdoms[msg.sender].resourceFactors[5];\r\n        kingdoms[msg.sender].lastClaimResources = now;\r\n        logResources();\r\n    }\r\n    \r\n    //log item clain\r\n    event Items(address sender, uint item);\r\n    function claimSpecialResource(uint shopIndex) public {\r\n        //can claim every 5 hours - special items\r\n        assert(now >= kingdoms[msg.sender].lastClaimItems[shopIndex] + 3 * 1 hours\r\n        &&     shopIndex > 5\r\n        &&     shopIndex < 10);\r\n        for (uint item = 0; item < kingdoms[msg.sender].resourceFactors[shopIndex]; item++){\r\n            //get pseudo random number\r\n            uint select = ((now-(item+shopIndex))%13);\r\n            uint finalI = 0;\r\n            //award the item to player\r\n            if(select < 6){\r\n                finalI = ((shopIndex-6)*4)+5;   //\r\n            }\r\n            else if(select < 10){\r\n                finalI = ((shopIndex-6)*4)+6;   //\r\n            }\r\n            else if(select < 12){\r\n                finalI = ((shopIndex-6)*4)+7;   //\r\n            }\r\n            else {\r\n                finalI = ((shopIndex-6)*4)+8;   //\r\n            }\r\n            kingdoms[msg.sender].resources[finalI] += 1;\r\n            Items(msg.sender, finalI);\r\n        }\r\n        kingdoms[msg.sender].lastClaimItems[shopIndex] = now;\r\n    }\r\n    \r\n    event SellItem (address sender, uint item, uint price, uint sell_id);\r\n    \r\n    function sellItem(uint item, uint price) public {\r\n        assert( item >= 0\r\n        &&      item <= 27\r\n        &&      marketplacePrices[msg.sender][item] == 0\r\n        &&      price > 0\r\n        &&      kingdoms[msg.sender].resources[item] > 0);\r\n        \r\n        marketplacePrices[msg.sender][item] = price;\r\n        marketplaceID[msg.sender][item] = sell_id;\r\n        \r\n        SellItem(msg.sender, item, price, sell_id);\r\n        sell_id += 1;\r\n        logResources();\r\n    }\r\n    \r\n    event BuyItem (address buyer, uint item, uint sell_id);\r\n    \r\n    function buyItem (address seller, uint item) public payable {\r\n        assert( msg.value >= marketplacePrices[seller][item]\r\n                && marketplacePrices[seller][item] > 0\r\n        );\r\n        \r\n        kingdoms[msg.sender].resources[item] += 1; \r\n        uint cut = msg.value/100;\r\n        owner.transfer(cut*3);\r\n        king.transfer(cut);\r\n        queen.transfer(cut);\r\n        seller.transfer(msg.value-(cut*5));\r\n        marketplacePrices[seller][item] = 0;\r\n        BuyItem (msg.sender, item, marketplaceID[seller][item]);\r\n        logResources();\r\n    }\r\n    \r\n    function buySpecialBuilding (uint xpos, uint ypos, uint building) public payable {\r\n        require(kingdoms[msg.sender].mapX >= xpos\r\n        &&      kingdoms[msg.sender].mapY >= ypos\r\n        &&      ((msg.value >= 100000000000000000 && building == 97) || (msg.value >= 1000000000000000000 && building == 98) || (msg.value >= 5000000000000000000 && building == 99))\r\n        &&      kingdoms[msg.sender].map[xpos][ypos] == 0);\r\n        \r\n        kingdoms[msg.sender].map[xpos][ypos] = building;\r\n        \r\n        if (building == 97){\r\n            kingdoms[msg.sender].resourceFactors[10] += 8;\r\n        }\r\n        if (building == 98){\r\n            kingdoms[msg.sender].resourceFactors[11] += 8;\r\n        }\r\n        if (building == 99){\r\n            kingdoms[msg.sender].resourceFactors[11] += 16;\r\n        }\r\n        owner.transfer(msg.value);\r\n        BuildAt(msg.sender, xpos, ypos, building);\r\n        //try to claim the throne\r\n        newLeader();\r\n        \r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"r0\",\"type\":\"uint256\"},{\"name\":\"r1\",\"type\":\"uint256\"},{\"name\":\"p0\",\"type\":\"uint256\"},{\"name\":\"p1\",\"type\":\"uint256\"},{\"name\":\"m\",\"type\":\"uint256\"},{\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"initBuilding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"expandX\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buildings_total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"item\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"sellItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"xpos\",\"type\":\"uint256\"},{\"name\":\"ypos\",\"type\":\"uint256\"},{\"name\":\"building\",\"type\":\"uint256\"}],\"name\":\"buildAt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBasicResources\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kingSpirit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"expandY\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"logResources\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"xpos\",\"type\":\"uint256\"},{\"name\":\"ypos\",\"type\":\"uint256\"},{\"name\":\"building\",\"type\":\"uint256\"}],\"name\":\"buySpecialBuilding\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sell_id\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"queen\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"item\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"newLeader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initiateUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"king\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"shopIndex\",\"type\":\"uint256\"}],\"name\":\"claimSpecialResource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"queenPrestige\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"food\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wood\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stone\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"iron\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gold\",\"type\":\"uint256\"}],\"name\":\"Resources\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"xpos\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ypos\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"building\",\"type\":\"uint256\"}],\"name\":\"BuildAt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"spirit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Ltype\",\"type\":\"uint256\"}],\"name\":\"NewLeader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ExpandX\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ExpandY\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"item\",\"type\":\"uint256\"}],\"name\":\"Items\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"item\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sell_id\",\"type\":\"uint256\"}],\"name\":\"SellItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"item\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sell_id\",\"type\":\"uint256\"}],\"name\":\"BuyItem\",\"type\":\"event\"}]","ContractName":"Kingdom","CompilerVersion":"v0.4.22-nightly.2018.3.8+commit.fbc29f6d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c7a7dcef6058375444961571a8c69575d091498f432b662bb84a8e8f5d774dc1"}]}