{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// Original code of smart contract on github: \r\n\r\n// Standart libary from \"Open Zeppelin\"\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n// Standart contract from \"Open Zeppelin\"\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address who) constant public returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// Standart contract from \"Open Zeppelin\"\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant public returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Describing contract with owner.\r\ncontract Owned {\r\n\r\n    address public owner;\r\n\r\n    address public newOwner;\r\n\r\n    function Owned() public payable {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _owner) onlyOwner public {\r\n        require(_owner != 0);\r\n        newOwner = _owner;\r\n    }\r\n\r\n    function confirmOwner() public {\r\n        require(newOwner == msg.sender);\r\n        owner = newOwner;\r\n        delete newOwner;\r\n    }\r\n}\r\n\r\n// Describing Bloccking modifier which founds on time block.\r\ncontract Blocked {\r\n\r\n\t// Time till modifier block\r\n    uint public blockedUntil;\r\n\r\n    modifier unblocked {\r\n        require(now > blockedUntil);\r\n        _;\r\n    }\r\n}\r\n\r\n// contract which discribes contract of token which founds on ERC20 and implement balanceOf function.\r\ncontract BalancingToken is ERC20 {\r\n    mapping (address => uint256) public balances;      //!< array of all balances\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n// Contract for dividend tokens. This contract describes implementation for tokens which can be used for dividends\r\ncontract DividendToken is BalancingToken, Blocked, Owned {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\t// Event for dividends when somebody takes dividends it will raised.\r\n    event DividendReceived(address indexed dividendReceiver, uint256 dividendValue);\r\n\r\n\t// mapping for alloweds and amounts.\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n\t// full reward amount for one round.\r\n\t// this value is defined by ether amount on DividendToken contract on moment when dividend payments starts.\r\n    uint public totalReward;\r\n\t// time when last time dividends started pay.\r\n    uint public lastDivideRewardTime;\r\n\r\n    // Fix for the ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n\t// This modifier checkes if reward payment is over.\r\n    modifier rewardTimePast() {\r\n        require(now > lastDivideRewardTime + rewardDays * 1 days);\r\n        _;\r\n    }\r\n\r\n\t// Structure is for Token holder which contains information about all token holders with balances and times.\r\n    struct TokenHolder {\r\n        uint256 balance;\r\n        uint    balanceUpdateTime;\r\n        uint    rewardWithdrawTime;\r\n    }\r\n\r\n\t// mapping for token holders.\r\n    mapping(address => TokenHolder) holders;\r\n\r\n\t// the number of days for rewards.\r\n    uint public rewardDays = 0;\r\n\r\n\t// standard method for transfer from ERC20.\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) unblocked public returns (bool) {\r\n        return transferSimple(_to, _value);\r\n    }\r\n\r\n\t// internal implementation for transfer with recounting rewards.\r\n    function transferSimple(address _to, uint256 _value) internal returns (bool) {\r\n        beforeBalanceChanges(msg.sender);\r\n        beforeBalanceChanges(_to);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\t// standard method for transferFrom from ERC20. \r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) unblocked public returns (bool) {\r\n        beforeBalanceChanges(_from);\r\n        beforeBalanceChanges(_to);\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\t// standard method for transferFrom from ERC20. \r\n    function approve(address _spender, uint256 _value) onlyPayloadSize(2 * 32) unblocked public returns (bool) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\t// standard method for transferFrom from ERC20. \r\n    function allowance(address _owner, address _spender) onlyPayloadSize(2 * 32) unblocked constant public returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\t// THis method returns the amount of caller's reward.\r\n\t// Caller gets ether which should be given to him.\r\n    function reward() constant public returns (uint256) {\r\n        if (holders[msg.sender].rewardWithdrawTime >= lastDivideRewardTime) {\r\n            return 0;\r\n        }\r\n        uint256 balance;\r\n        if (holders[msg.sender].balanceUpdateTime <= lastDivideRewardTime) {\r\n            balance = balances[msg.sender];\r\n        } else {\r\n            balance = holders[msg.sender].balance;\r\n        }\r\n        return totalReward.mul(balance).div(totalSupply);\r\n    }\r\n\r\n\t// This method shoud be called when caller wants take dividends reward.\r\n\t// Caller gets ether which should be given to him.\r\n    function withdrawReward() public returns (uint256) {\r\n        uint256 rewardValue = reward();\r\n        if (rewardValue == 0) {\r\n            return 0;\r\n        }\r\n        if (balances[msg.sender] == 0) {\r\n            // garbage collector\r\n            delete holders[msg.sender];\r\n        } else {\r\n            holders[msg.sender].rewardWithdrawTime = now;\r\n        }\r\n        require(msg.sender.call.gas(3000000).value(rewardValue)());\r\n        DividendReceived(msg.sender, rewardValue);\r\n        return rewardValue;\r\n    }\r\n\r\n    // Divide up reward and make it accesible for withdraw\r\n\t// Need to provide the number of days for reward. It can be less then 15 days and more then 45 days.\r\n    function divideUpReward(uint inDays) rewardTimePast onlyOwner external payable {\r\n        require(inDays >= 15 && inDays <= 45);\r\n        lastDivideRewardTime = now;\r\n        rewardDays = inDays;\r\n        totalReward = this.balance;\r\n    }\r\n\t\r\n\t// Take left reward after reward period.\r\n    function withdrawLeft() rewardTimePast onlyOwner external {\r\n        require(msg.sender.call.gas(3000000).value(this.balance)());\r\n    }\r\n\r\n\t// recount reward of somebody.\r\n    function beforeBalanceChanges(address _who) public {\r\n        if (holders[_who].balanceUpdateTime <= lastDivideRewardTime) {\r\n            holders[_who].balanceUpdateTime = now;\r\n            holders[_who].balance = balances[_who];\r\n        }\r\n    }\r\n}\r\n\r\n// Final contract for RENT coin.\r\ncontract RENTCoin is DividendToken {\r\n\r\n    string public constant name = \"RentAway Coin\";\r\n\r\n    string public constant symbol = \"RTW\";\r\n\r\n    uint32 public constant decimals = 18;\r\n\r\n    function RENTCoin(uint256 initialSupply, uint unblockTime) public {\r\n        totalSupply = initialSupply;\r\n        balances[owner] = totalSupply;\r\n        blockedUntil = unblockTime;\r\n\t\tTransfer(this, owner, totalSupply);\r\n    }\r\n\r\n\t// Uses for overwork manual Blocked contract for ICO time.\r\n\t// After ICO it is not needed.\r\n    function manualTransfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) onlyOwner public returns (bool) {\r\n        return transferSimple(_to, _value);\r\n    }\r\n}\r\n\r\n// Contract implements all time and intervalse for crowdsale. \r\ncontract TimingCrowdsale {\r\n\r\n    // Date of start pre-ICO and ICO.\r\n    uint public constant preICOstartTime = 1519880400; // start at Thursday, March 1, 2018 5:00:00 AM\r\n    uint public constant ICOstartTime =    preICOstartTime + 14 days; // start at Thursday, March 15, 2018 5:00:00 AM\r\n    uint public constant ICOendTime =      ICOstartTime + 31 days; // end at Thursday, April 15, 2018 5:00:00 AM\r\n\r\n    function currentTime() internal view returns (uint) {\r\n        return now;\r\n    }\r\n\r\n    function isPreICO() public view returns (bool) {\r\n        uint curTime = currentTime();\r\n        return curTime < ICOstartTime && curTime >= preICOstartTime;\r\n    }\r\n\r\n    function isICO() public view returns (bool) {\r\n        uint curTime = currentTime();\r\n        return curTime < ICOendTime && curTime >= ICOstartTime;\r\n    }\r\n\r\n    function isPreICOFinished() public view returns (bool) {\r\n        return currentTime() > ICOstartTime;\r\n    }\r\n\r\n    function isICOFinished() public view returns (bool) {\r\n        return currentTime() > ICOendTime;\r\n    }\r\n}\r\n\r\n// Contract implements bonuses for crowdsale.\r\ncontract BonusCrowdsale is TimingCrowdsale {\r\n\r\n    function getBonus(uint256 amount) public view returns (uint) {\r\n        uint bonus = getAmountBonus(amount);\r\n        if (isPreICO()) {\r\n            bonus += 25;\r\n        }\r\n        return bonus;\r\n    }\r\n\r\n    function getAmountBonus(uint256 amount) public pure returns (uint) {\r\n        if (amount >= 25 ether) {\r\n            return 15;\r\n        }\r\n        if (amount >= 10 ether) {\r\n            return 5;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n\r\n// Contract for manual sending. Implements how to be count amounts in all additional currencies.\r\ncontract ManualSendingCrowdsale is BonusCrowdsale, Owned {\r\n    using SafeMath for uint256;\r\n\r\n    struct AmountData {\r\n        bool exists;\r\n        uint256 value;\r\n    }\r\n\r\n    mapping (uint => AmountData) public amountsByCurrency;\r\n\r\n    function addCurrency(uint currency) external onlyOwner {\r\n        addCurrencyInternal(currency);\r\n    }\r\n\r\n    function addCurrencyInternal(uint currency) internal {\r\n        AmountData storage amountData = amountsByCurrency[currency];\r\n        amountData.exists = true;\r\n    }\r\n\r\n    function manualTransferTokensToInternal(address to, uint256 givenTokens, uint currency, uint256 amount) internal returns (uint256) {\r\n        AmountData memory tempAmountData = amountsByCurrency[currency];\r\n        require(tempAmountData.exists);\r\n        AmountData storage amountData = amountsByCurrency[currency];\r\n        amountData.value = amountData.value.add(amount);\r\n        return transferTokensTo(to, givenTokens);\r\n    }\r\n\r\n    function transferTokensTo(address to, uint256 givenTokens) internal returns (uint256);\r\n}\r\n\r\n// Contract implements withdraw rules for crowdsale.\r\ncontract WithdrawCrowdsale is ManualSendingCrowdsale {\r\n\r\n    function isWithdrawAllowed() public view returns (bool);\r\n\r\n    modifier canWithdraw() {\r\n        require(isWithdrawAllowed());\r\n        _;\r\n    }\r\n\r\n    function withdraw() external onlyOwner canWithdraw {\r\n        require(msg.sender.call.gas(3000000).value(this.balance)());\r\n    }\r\n\r\n    function withdrawAmount(uint256 amount) external onlyOwner canWithdraw {\r\n        uint256 givenAmount = amount;\r\n        if (this.balance < amount) {\r\n            givenAmount = this.balance;\r\n        }\r\n        require(msg.sender.call.gas(3000000).value(givenAmount)());\r\n    }\r\n}\r\n\r\n// Contract implements refund functionality for investors.\r\ncontract RefundableCrowdsale is WithdrawCrowdsale {\r\n\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    mapping (address => uint256) public deposited;\r\n\r\n\t// The investor should call this function to return ETH if crowdsale will be failed.\r\n    function refund(address investor) external {\r\n        require(isRefundAllowed());\r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        require(investor.call.gas(3000000).value(depositedValue)());\r\n        Refunded(investor, depositedValue);\r\n    }\r\n\r\n    function isRefundAllowed() internal view returns (bool);\r\n}\r\n\r\n// THe main contract for crowdsale.\r\ncontract Crowdsale is RefundableCrowdsale {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\t// States of sales.\r\n    enum State { ICO, REFUND, DONE }\r\n    State public state = State.ICO;\r\n\r\n\t// Number of tokens 75,000,000.\r\n    uint256 public constant maxTokenAmount = 75e24; // max minting\r\n\t// Bounty ampunt of tokens 15,000,000.\r\n    uint256 public constant bountyTokens =   15e24; // bounty amount\r\n\t// Softcap for starting withdraw 500,000 tokens.\r\n    uint256 public constant softCapTokens =  5e23; \t// soft cap\r\n\r\n\t// time until tokens will be blocked.\r\n    uint public constant unblockTokenTime = preICOstartTime + 31 days; // end at Thursday, April 1, 2018 5:00:00 AM\r\n\r\n\t// RTW Token.\r\n    RENTCoin public token;\r\n\r\n\t// How many tokens left for sale.\r\n    uint256 public leftTokens = 0;\r\n\r\n\t// ETH amount which was received.\r\n    uint256 public totalAmount = 0;\r\n\t// Number of sales.\r\n    uint public transactionCounter = 0;\r\n\r\n\t// Bounty was paid or not.\r\n    bool public bonusesPayed = false;\r\n\r\n\t// The price to ether.\r\n    uint256 public constant rateToEther = 1000; // rate to ether, how much tokens gives to 1 ether\r\n\r\n\t// min amount in ether to create a deal.\r\n    uint256 public constant minAmountForDeal = 1e16; // 0.01 ETH\r\n\r\n\t// number of sold tokens.\r\n    uint256 public soldTokens = 0;\r\n\r\n\t// check is it possiable to buy.\r\n    modifier canBuy() {\r\n        require(!isFinished());\r\n        require(isPreICO() || isICO());\r\n        _;\r\n    }\r\n\r\n\t// check on min amount for the deal.\r\n    modifier minPayment() {\r\n        require(msg.value >= minAmountForDeal);\r\n        _;\r\n    }\r\n\r\n    function Crowdsale() public {\r\n        token = new RENTCoin(maxTokenAmount, unblockTokenTime);\r\n        leftTokens = maxTokenAmount - bountyTokens;\r\n        addCurrencyInternal(0); // add BTC\r\n    }\r\n\r\n\t// check ICO is finished\r\n    function isFinished() public view returns (bool) {\r\n        return isICOFinished() || (leftTokens == 0 && (state == State.ICO || state == State.DONE));\r\n    }\r\n\r\n\t// Is withdraw money from smart contract allowed.\r\n    function isWithdrawAllowed() public view returns (bool) {\r\n        return soldTokens >= softCapTokens;\r\n    }\r\n\t\r\n\t// is refind money for the inverstors is allowed.\r\n    function isRefundAllowed() internal view returns (bool) {\r\n        return state == State.REFUND;\r\n    }\r\n\t\r\n\t// function for buy RENT tokens. Calls when somebody send ETH to contract.\r\n    function() external canBuy minPayment payable {\r\n        address investor = msg.sender;\r\n        uint256 amount = msg.value;\r\n        uint bonus = getBonus(amount);\r\n        uint256 givenTokens = amount.mul(rateToEther).div(100).mul(100 + bonus);\r\n        uint256 providedTokens = transferTokensTo(investor, givenTokens);\r\n\r\n        if (givenTokens > providedTokens) {\r\n            uint256 needAmount = providedTokens.mul(100).div(100 + bonus).div(rateToEther);\r\n            require(amount > needAmount);\r\n            require(investor.call.gas(3000000).value(amount - needAmount)());\r\n            amount = needAmount;\r\n        }\r\n        totalAmount = totalAmount.add(amount);\r\n        if (!isWithdrawAllowed()) {\r\n            deposited[investor] = deposited[investor].add(msg.value);\r\n        }\r\n    }\r\n\r\n\t// Manual sending tokens for the investors in addtional currencies;\r\n    function manualTransferTokensTo(address to, uint256 givenTokens, uint currency, uint256 amount) external onlyOwner canBuy returns (uint256) {\r\n        return manualTransferTokensToInternal(to, givenTokens, currency, amount);\r\n    }\r\n\r\n\t// Check state of crowdsale when time is over.\r\n    function finishCrowdsale() external {\r\n        require(isFinished());\r\n        require(state == State.ICO);\r\n        if (!isWithdrawAllowed())  {\r\n            state = State.REFUND;\r\n            bonusesPayed = true;\r\n        } else {\r\n            state = State.DONE;\r\n        }\r\n    }\r\n\r\n\t// give bounty and all left tokens to owner.\r\n    function takeBounty() external onlyOwner {\r\n        require(state == State.DONE);\r\n        require(now > ICOendTime);\r\n        require(!bonusesPayed);\r\n        token.changeOwner(msg.sender);\r\n        bonusesPayed = true;\r\n        require(token.transfer(msg.sender, token.balanceOf(this)));\r\n    }\r\n\r\n    function addToSoldTokens(uint256 providedTokens) internal {\r\n        soldTokens = soldTokens.add(providedTokens);\r\n    }\r\n\r\n    function transferTokensTo(address to, uint256 givenTokens) internal returns (uint256) {\r\n        uint256 providedTokens = givenTokens;\r\n        if (givenTokens > leftTokens) {\r\n            providedTokens = leftTokens;\r\n        }\r\n        leftTokens = leftTokens.sub(providedTokens);\r\n        addToSoldTokens(providedTokens);\r\n        require(token.manualTransfer(to, providedTokens));\r\n        transactionCounter = transactionCounter + 1;\r\n        return providedTokens;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountsByCurrency\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leftTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateToEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOstartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmountForDeal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unblockTokenTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isWithdrawAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreICOFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOendTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOstartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAmountBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"currency\",\"type\":\"uint256\"}],\"name\":\"addCurrency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"givenTokens\",\"type\":\"uint256\"},{\"name\":\"currency\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualTransferTokensTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICOFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusesPayed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cb9db94bea835aeaab5a7856b0f2ce4dcb3231ca3f544948070cf5c079c7fc02"}]}