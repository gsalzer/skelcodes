{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    /**\r\n     * Events\r\n     */\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * Sets the original `owner` of the contract to the sender account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n        OwnershipTransferred(0, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a new owner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_newOwner != 0);\r\n\r\n        OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint _a, uint _b)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n    \r\n        uint c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint _a, uint _b)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        // Solidity automatically throws when dividing by 0\r\n        uint c = _a / _b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint _a, uint _b)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        assert(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint _a, uint _b)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        uint c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n */\r\ncontract StandardToken is Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    uint public totalSupply;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) internal allowed;\r\n\r\n    /**\r\n     * Events\r\n     */\r\n    event ChangeTokenInformation(string name, string symbol);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    /**\r\n     * Owner can update token information here.\r\n     *\r\n     * It is often useful to conceal the actual token association, until\r\n     * the token operations, like central issuance or reissuance have been completed.\r\n     *\r\n     * This function allows the token owner to rename the token after the operations\r\n     * have been completed and then point the audience to use the token contract.\r\n     */\r\n    function changeTokenInformation(string _name, string _symbol)\r\n        public\r\n        onlyOwner\r\n    {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        ChangeTokenInformation(_name, _symbol);\r\n    }\r\n\r\n\t/**\r\n\t * @dev Transfer token for a specified address\r\n\t * @param _to The address to transfer to.\r\n\t * @param _value The amount to be transferred.\r\n\t */\r\n\tfunction transfer(address _to, uint _value)\r\n\t\tpublic\r\n\t\treturns (bool)\r\n\t{\r\n\t\trequire(_to != 0);\r\n        require(_value > 0);\r\n\r\n\t\tbalanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from The address which you want to send tokens from\r\n     * @param _to The address which you want to transfer to\r\n     * @param _value The amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_to != 0);\r\n        require(_value > 0);\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     *\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_addedValue > 0);\r\n\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     *\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_subtractedValue > 0);\r\n\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner The address which owns the funds.\r\n     * @param _spender The address which will spend the funds.\r\n     * @return A uint specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title UpgradeAgent Interface\r\n * @dev Upgrade agent transfers tokens to a new contract. Upgrade agent itself can be the\r\n * token contract, or just a middle man contract doing the heavy lifting.\r\n */\r\ncontract UpgradeAgent {\r\n\r\n    bool public isUpgradeAgent = true;\r\n\r\n    function upgradeFrom(address _from, uint _value) public;\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n */\r\ncontract MintableToken is StandardToken {\r\n\r\n\tbool public mintingFinished = false;\r\n\r\n\t/**\r\n     * Events\r\n     */\r\n\tevent Mint(address indexed to, uint amount);\r\n  \tevent MintFinished();\r\n\r\n\tmodifier canMint() {\r\n\t\trequire(!mintingFinished);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Function to mint tokens\r\n\t * @param _to The address that will receive the minted tokens.\r\n\t * @param _amount The amount of tokens to mint.\r\n\t */\r\n\tfunction mint(address _to, uint _amount)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t\tcanMint\r\n\t{\r\n\t\ttotalSupply = totalSupply.add(_amount);\r\n\t\tbalanceOf[_to] = balanceOf[_to].add(_amount);\r\n\t\tMint(_to, _amount);\r\n\t\tTransfer(0, _to, _amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Function to stop minting new tokens.\r\n\t */\r\n\tfunction finishMinting()\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t\tcanMint\r\n\t{\r\n\t\tmintingFinished = true;\r\n\t\tMintFinished();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @title Capped token\r\n * @dev Mintable token with a token cap.\r\n */\r\ncontract CappedToken is MintableToken {\r\n\r\n    uint public cap;\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     */\r\n    function mint(address _to, uint _amount)\r\n        public\r\n        onlyOwner\r\n        canMint\r\n    {\r\n        require(totalSupply.add(_amount) <= cap);\r\n\r\n        super.mint(_to, _amount);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev Token that can be freeze \"Transfer\" function\r\n */\r\ncontract PausableToken is StandardToken {\r\n\r\n    bool public isTradable = true;\r\n\r\n    /**\r\n     * Events\r\n     */\r\n    event FreezeTransfer();\r\n    event UnfreezeTransfer();\r\n\r\n    modifier canTransfer() {\r\n\t\trequire(isTradable);\r\n\t\t_;\r\n\t}\r\n\r\n    /**\r\n     * Disallow to transfer token from an address to other address\r\n     */\r\n    function freezeTransfer()\r\n        public\r\n        onlyOwner\r\n    {\r\n        isTradable = false;\r\n        FreezeTransfer();\r\n    }\r\n\r\n    /**\r\n     * Allow to transfer token from an address to other address\r\n     */\r\n    function unfreezeTransfer()\r\n        public\r\n        onlyOwner\r\n    {\r\n        isTradable = true;\r\n        UnfreezeTransfer();\r\n    }\r\n\r\n    /**\r\n\t * @dev Transfer token for a specified address\r\n\t * @param _to The address to transfer to.\r\n\t * @param _value The amount to be transferred.\r\n\t */\r\n    function transfer(address _to, uint _value)\r\n\t\tpublic\r\n        canTransfer\r\n\t\treturns (bool)\r\n\t{\r\n\t\treturn super.transfer(_to, _value);\r\n\t}\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from The address which you want to send tokens from\r\n     * @param _to The address which you want to transfer to\r\n     * @param _value The amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        public\r\n        canTransfer\r\n        returns (bool)\r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint _value)\r\n        public\r\n        canTransfer\r\n        returns (bool)\r\n    {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     *\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue)\r\n        public\r\n        canTransfer\r\n        returns (bool)\r\n    {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     *\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue)\r\n        public\r\n        canTransfer\r\n        returns (bool)\r\n    {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Upgradable token\r\n */\r\ncontract UpgradableToken is StandardToken {\r\n\r\n    address public upgradeMaster;\r\n\r\n    // The next contract where the tokens will be migrated.\r\n    UpgradeAgent public upgradeAgent;\r\n\r\n    bool public isUpgradable = false;\r\n\r\n    // How many tokens we have upgraded by now.\r\n    uint public totalUpgraded;\r\n\r\n    /**\r\n     * Events\r\n     */\r\n    event ChangeUpgradeMaster(address newMaster);\r\n    event ChangeUpgradeAgent(address newAgent);\r\n    event FreezeUpgrade();\r\n    event UnfreezeUpgrade();\r\n    event Upgrade(address indexed from, address indexed to, uint value);\r\n\r\n    modifier onlyUpgradeMaster() {\r\n\t\trequire(msg.sender == upgradeMaster);\r\n\t\t_;\r\n\t}\r\n\r\n    modifier canUpgrade() {\r\n\t\trequire(isUpgradable);\r\n\t\t_;\r\n\t}\r\n\r\n    /**\r\n     * Change the upgrade master.\r\n     * @param _newMaster New upgrade master.\r\n     */\r\n    function changeUpgradeMaster(address _newMaster)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_newMaster != 0);\r\n\r\n        upgradeMaster = _newMaster;\r\n        ChangeUpgradeMaster(_newMaster);\r\n    }\r\n\r\n    /**\r\n     * Change the upgrade agent.\r\n     * @param _newAgent New upgrade agent.\r\n     */\r\n    function changeUpgradeAgent(address _newAgent)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(totalUpgraded == 0);\r\n\r\n        upgradeAgent = UpgradeAgent(_newAgent);\r\n\r\n        // Bad interface\r\n        if (!upgradeAgent.isUpgradeAgent()) {\r\n            revert();\r\n        }\r\n\r\n        ChangeUpgradeAgent(_newAgent);\r\n    }\r\n\r\n    /**\r\n     * Disallow to upgrade token to new smart contract\r\n     */\r\n    function freezeUpgrade()\r\n        public\r\n        onlyOwner\r\n    {\r\n        isUpgradable = false;\r\n        FreezeUpgrade();\r\n    }\r\n\r\n    /**\r\n     * Allow to upgrade token to new smart contract\r\n     */\r\n    function unfreezeUpgrade()\r\n        public\r\n        onlyOwner\r\n    {\r\n        isUpgradable = true;\r\n        UnfreezeUpgrade();\r\n    }\r\n\r\n    /**\r\n     * Token holder upgrade their tokens to a new smart contract.\r\n     */\r\n    function upgrade()\r\n        public\r\n        canUpgrade\r\n    {\r\n        uint amount = balanceOf[msg.sender];\r\n\r\n        require(amount > 0);\r\n\r\n        processUpgrade(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * Upgrader upgrade tokens of holder to a new smart contract.\r\n     * @param _holders List of token holder.\r\n     */\r\n    function forceUpgrade(address[] _holders)\r\n        public\r\n        onlyUpgradeMaster\r\n        canUpgrade\r\n    {\r\n        uint amount;\r\n\r\n        for (uint i = 0; i < _holders.length; i++) {\r\n            amount = balanceOf[_holders[i]];\r\n\r\n            if (amount == 0) {\r\n                continue;\r\n            }\r\n\r\n            processUpgrade(_holders[i], amount);\r\n        }\r\n    }\r\n\r\n    function processUpgrade(address _holder, uint _amount)\r\n        private\r\n    {\r\n        balanceOf[_holder] = balanceOf[_holder].sub(_amount);\r\n\r\n        // Take tokens out from circulation\r\n        totalSupply = totalSupply.sub(_amount);\r\n        totalUpgraded = totalUpgraded.add(_amount);\r\n\r\n        // Upgrade agent reissues the tokens\r\n        upgradeAgent.upgradeFrom(_holder, _amount);\r\n        Upgrade(_holder, upgradeAgent, _amount);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title QNTU 1.0 token\r\n */\r\ncontract QNTU is UpgradableToken, CappedToken, PausableToken {\r\n\r\n    /**\r\n\t * @dev Constructor\r\n\t */\r\n    function QNTU()\r\n        public\r\n    {\r\n        symbol = \"QNTU\";\r\n        name = \"QNTU Token\";\r\n        decimals = 18;\r\n\r\n        uint multiplier = 10 ** uint(decimals);\r\n\r\n        cap = 120000000000 * multiplier;\r\n        totalSupply = 72000000000 * multiplier;\r\n\r\n        // 40%\r\n        balanceOf[0xd83ef0076580e595b3be39d654da97184623b9b5] = 4800000000 * multiplier;\r\n        balanceOf[0xd4e40860b41f666fbc6c3007f3d1434e353063d8] = 4800000000 * multiplier;\r\n        balanceOf[0x84dd4187a87055495d0c08fe260ca9cc9e02f09e] = 4800000000 * multiplier;\r\n        balanceOf[0x0556620d12c38babd0461e366b433682a5000fae] = 4800000000 * multiplier;\r\n        balanceOf[0x0f363f18f49aa350ba8fcf233cdd155a7b77af99] = 4800000000 * multiplier;\r\n        balanceOf[0x1a38292d3f685cd79bcdfc19fad7447ae762aa4c] = 4800000000 * multiplier;\r\n        balanceOf[0xb262d04ee29ad9ebacb1ab9da99398916f425d84] = 4800000000 * multiplier;\r\n        balanceOf[0xd8c2d6f12baf10258eb390be4377e460c1d033e2] = 4800000000 * multiplier;\r\n        balanceOf[0x1ca70fd8433ec97fa0777830a152d028d71b88fa] = 4800000000 * multiplier;\r\n        balanceOf[0x57be4b8c57c0bb061e05fdf85843503fba673394] = 4800000000 * multiplier;\r\n\r\n        Transfer(0, 0xd83ef0076580e595b3be39d654da97184623b9b5, 4800000000 * multiplier);\r\n        Transfer(0, 0xd4e40860b41f666fbc6c3007f3d1434e353063d8, 4800000000 * multiplier);\r\n        Transfer(0, 0x84dd4187a87055495d0c08fe260ca9cc9e02f09e, 4800000000 * multiplier);\r\n        Transfer(0, 0x0556620d12c38babd0461e366b433682a5000fae, 4800000000 * multiplier);\r\n        Transfer(0, 0x0f363f18f49aa350ba8fcf233cdd155a7b77af99, 4800000000 * multiplier);\r\n        Transfer(0, 0x1a38292d3f685cd79bcdfc19fad7447ae762aa4c, 4800000000 * multiplier);\r\n        Transfer(0, 0xb262d04ee29ad9ebacb1ab9da99398916f425d84, 4800000000 * multiplier);\r\n        Transfer(0, 0xd8c2d6f12baf10258eb390be4377e460c1d033e2, 4800000000 * multiplier);\r\n        Transfer(0, 0x1ca70fd8433ec97fa0777830a152d028d71b88fa, 4800000000 * multiplier);\r\n        Transfer(0, 0x57be4b8c57c0bb061e05fdf85843503fba673394, 4800000000 * multiplier);\r\n\r\n        // 20%\r\n        balanceOf[0xb6ff15b634571cb56532022fe00f96fee51322b3] = 4800000000 * multiplier;\r\n        balanceOf[0x631c87278de77902e762ba0ab57d55c10716e0b6] = 4800000000 * multiplier;\r\n        balanceOf[0x7fe443391d9a3eb0c401181c46a44eb6106bba2e] = 4800000000 * multiplier;\r\n        balanceOf[0x94905c20fa2596fdc7d37bab6dd67b52e2335122] = 4800000000 * multiplier;\r\n        balanceOf[0x6ad8038f53ae2800d45a31d8261b062a0b55d63b] = 4800000000 * multiplier;\r\n\r\n        Transfer(0, 0xb6ff15b634571cb56532022fe00f96fee51322b3, 4800000000 * multiplier);\r\n        Transfer(0, 0x631c87278de77902e762ba0ab57d55c10716e0b6, 4800000000 * multiplier);\r\n        Transfer(0, 0x7fe443391d9a3eb0c401181c46a44eb6106bba2e, 4800000000 * multiplier);\r\n        Transfer(0, 0x94905c20fa2596fdc7d37bab6dd67b52e2335122, 4800000000 * multiplier);\r\n        Transfer(0, 0x6ad8038f53ae2800d45a31d8261b062a0b55d63b, 4800000000 * multiplier);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holders\",\"type\":\"address[]\"}],\"name\":\"forceUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTradable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isUpgradable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"changeTokenInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freezeTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAgent\",\"type\":\"address\"}],\"name\":\"changeUpgradeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freezeUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezeTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMaster\",\"type\":\"address\"}],\"name\":\"changeUpgradeMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezeUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FreezeTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UnfreezeTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newMaster\",\"type\":\"address\"}],\"name\":\"ChangeUpgradeMaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAgent\",\"type\":\"address\"}],\"name\":\"ChangeUpgradeAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FreezeUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UnfreezeUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"ChangeTokenInformation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"QNTU","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ecae4df89179ce31cd420e427922e89489f57b1c1d4607bba61db270bc6d88d0"}]}