{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n}\r\n\r\ncontract CryptoCupToken is ERC721 {\r\n\r\n    // evsoftware.co.uk\r\n    // cryptocup.online\r\n\r\n    /*****------ EVENTS -----*****/\r\n    event TeamSold(uint256 indexed team, address indexed from, uint256 oldPrice, address indexed to, uint256 newPrice, uint256 tradingTime, uint256 balance, uint256 lastSixteenPrize, uint256 quarterFinalPrize, uint256 semiFinalPrize, uint256 winnerPrize);\r\n    event PrizePaid(string tournamentStage, uint256 indexed team, address indexed to, uint256 prize, uint256 time);\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n\r\n    /*****------- CONSTANTS -------******/\r\n    uint256 private startingPrice = 0.001 ether;\r\n\tuint256 private doublePriceUntil = 0.1 ether;\r\n\tuint256 private lastSixteenWinnerPayments = 0;\r\n\tuint256 private quarterFinalWinnerPayments = 0;\r\n\tuint256 private semiFinalWinnerPayments = 0;\r\n\tbool private tournamentComplete = false;\r\n    \r\n    /*****------- STORAGE -------******/\r\n    mapping (uint256 => address) public teamOwners;\r\n    mapping (address => uint256) private ownerTeamCount;\r\n    mapping (uint256 => address) public teamToApproved;\r\n    mapping (uint256 => uint256) private teamPrices;\r\n    address public contractModifierAddress;\r\n    address public developerAddress;\r\n    \r\n    /*****------- DATATYPES -------******/\r\n    struct Team {\r\n        string name;\r\n        string code;\r\n        uint256 cost;\r\n        uint256 price;\r\n        address owner;\r\n        uint256 numPayouts;\r\n        mapping (uint256 => Payout) payouts;\r\n    }\r\n\r\n    struct Payout {\r\n        string stage;\r\n        uint256 amount;\r\n        address to;\r\n        uint256 when;\r\n    }\r\n\r\n    Team[] private teams;\r\n    \r\n    struct PayoutPrizes {\r\n        uint256 LastSixteenWinner;\r\n        bool LastSixteenTotalFixed;\r\n        uint256 QuarterFinalWinner;\r\n        bool QuarterFinalTotalFixed;\r\n        uint256 SemiFinalWinner;\r\n        bool SemiFinalTotalFixed;\r\n        uint256 TournamentWinner;\r\n    }\r\n    \r\n    PayoutPrizes private prizes;\r\n\r\n    /*****------- MODIFIERS -------******/\r\n    modifier onlyContractModifier() {\r\n        require(msg.sender == contractModifierAddress);\r\n        _;\r\n    }\r\n    \r\n    /*****------- CONSTRUCTOR -------******/\r\n    function CryptoCupToken() public {\r\n        contractModifierAddress = msg.sender;\r\n        developerAddress = msg.sender;\r\n\r\n        // Initialse Prize Totals\r\n        prizes.LastSixteenTotalFixed = false;\r\n        prizes.QuarterFinalTotalFixed = false;\r\n        prizes.SemiFinalTotalFixed = false;\r\n    }\r\n    \r\n    /*****------- PUBLIC FUNCTIONS -------******/\r\n    function name() public pure returns (string) {\r\n        return \"CryptoCup\";\r\n    }\r\n  \r\n    function symbol() public pure returns (string) {\r\n        return \"CryptoCupToken\";\r\n    }\r\n    \r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\r\n        owner = teamOwners[_tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n    \r\n    function takeOwnership(uint256 _tokenId) public {\r\n        address to = msg.sender;\r\n        address from = teamOwners[_tokenId];\r\n    \r\n        require(_addressNotNull(to));\r\n        require(_approved(to, _tokenId));\r\n    \r\n        _transfer(from, to, _tokenId);\r\n    }\r\n    \r\n    function approve(address _to, uint256 _tokenId) public {\r\n        require(_owns(msg.sender, _tokenId));\r\n        teamToApproved[_tokenId] = _to;\r\n        emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return ownerTeamCount[_owner];\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256 total) {\r\n        return teams.length;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _tokenId) public {\r\n        require(_owns(msg.sender, _tokenId));\r\n        require(_addressNotNull(_to));\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n        require(_owns(_from, _tokenId));\r\n        require(_approved(_to, _tokenId));\r\n        require(_addressNotNull(_to));\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n\tfunction destroy() public onlyContractModifier {\r\n\t\tselfdestruct(contractModifierAddress);\r\n    }\r\n\r\n    function setDeveloper(address _newDeveloperAddress) public onlyContractModifier {\r\n        require(_newDeveloperAddress != address(0));\r\n        developerAddress = _newDeveloperAddress;\r\n    }\r\n    \r\n    function createTeam(string name, string code) public onlyContractModifier {\r\n        _createTeam(name, code, startingPrice, developerAddress);\r\n    }\r\n    \r\n    function lockInLastSixteenPrize() public onlyContractModifier {\r\n        prizes.LastSixteenTotalFixed = true;\r\n    }\r\n    \r\n    function payLastSixteenWinner(uint256 _tokenId) public onlyContractModifier {\r\n        require(prizes.LastSixteenTotalFixed != false);\r\n        require(lastSixteenWinnerPayments < 8);\r\n        require(tournamentComplete != true);\r\n        \r\n        Team storage team = teams[_tokenId];\r\n        require(team.numPayouts == 0);\r\n        \r\n        team.owner.transfer(prizes.LastSixteenWinner);\r\n        emit PrizePaid(\"Last Sixteen\", _tokenId, team.owner, prizes.LastSixteenWinner, uint256(now));\r\n\r\n        team.payouts[team.numPayouts++] = Payout({\r\n            stage: \"Last Sixteen\",\r\n            amount: prizes.LastSixteenWinner,\r\n            to: team.owner,\r\n            when: uint256(now)\r\n        });\r\n        \r\n        lastSixteenWinnerPayments++;\r\n    }\r\n    \r\n    function lockInQuarterFinalPrize() public onlyContractModifier {\r\n        require(prizes.LastSixteenTotalFixed != false);\r\n        prizes.QuarterFinalTotalFixed = true;\r\n    }\r\n    \r\n    function payQuarterFinalWinner(uint256 _tokenId) public onlyContractModifier {\r\n        require(prizes.QuarterFinalTotalFixed != false);\r\n        require(quarterFinalWinnerPayments < 4);\r\n        require(tournamentComplete != true);\r\n        Team storage team = teams[_tokenId];\r\n        require(team.numPayouts == 1);\r\n        Payout storage payout = team.payouts[0];\r\n        require(_compareStrings(payout.stage, \"Last Sixteen\"));\r\n\r\n        team.owner.transfer(prizes.QuarterFinalWinner);\r\n        emit PrizePaid(\"Quarter Final\", _tokenId, team.owner, prizes.QuarterFinalWinner, uint256(now));\r\n        team.payouts[team.numPayouts++] = Payout({\r\n            stage: \"Quarter Final\",\r\n            amount: prizes.QuarterFinalWinner,\r\n            to: team.owner,\r\n            when: uint256(now)\r\n        });\r\n        \r\n        quarterFinalWinnerPayments++;\r\n    }\r\n    \r\n    function lockInSemiFinalPrize() public onlyContractModifier {\r\n        require(prizes.QuarterFinalTotalFixed != false);\r\n        prizes.SemiFinalTotalFixed = true;\r\n    }\r\n        \r\n    function paySemiFinalWinner(uint256 _tokenId) public onlyContractModifier {\r\n        require(prizes.SemiFinalTotalFixed != false);\r\n        require(semiFinalWinnerPayments < 2);\r\n        require(tournamentComplete != true);\r\n        Team storage team = teams[_tokenId];\r\n        require(team.numPayouts == 2);\r\n        Payout storage payout = team.payouts[1];\r\n        require(_compareStrings(payout.stage, \"Quarter Final\"));\r\n        \r\n        team.owner.transfer(prizes.SemiFinalWinner);\r\n        emit PrizePaid(\"Semi Final\", _tokenId, team.owner, prizes.SemiFinalWinner, uint256(now));\r\n        team.payouts[team.numPayouts++] = Payout({\r\n            stage: \"Semi Final\",\r\n            amount: prizes.SemiFinalWinner,\r\n            to: team.owner,\r\n            when: uint256(now)\r\n        });\r\n        \r\n        semiFinalWinnerPayments++;\r\n    }\r\n    \r\n    function payTournamentWinner(uint256 _tokenId) public onlyContractModifier {\r\n        require (tournamentComplete != true);\r\n        Team storage team = teams[_tokenId];\r\n        require(team.numPayouts == 3);\r\n        Payout storage payout = team.payouts[2];\r\n        require(_compareStrings(payout.stage, \"Semi Final\"));\r\n\r\n        team.owner.transfer(prizes.TournamentWinner);\r\n        emit PrizePaid(\"Final\", _tokenId, team.owner, prizes.TournamentWinner, uint256(now));\r\n        team.payouts[team.numPayouts++] = Payout({\r\n            stage: \"Final\",\r\n            amount: prizes.TournamentWinner,\r\n            to: team.owner,\r\n            when: uint256(now)\r\n        });\r\n        \r\n        tournamentComplete = true;\r\n    }\r\n\r\n    function payExcess() public onlyContractModifier {\r\n        /* ONLY IF TOURNAMENT FINISHED AND THERE'S EXCESS - THERE SHOULDN'T BE */\r\n        /* ONLY IF TRADES OCCUR AFTER TOURNAMENT FINISHED */\r\n        require (tournamentComplete != false);\r\n        developerAddress.transfer(address(this).balance);\r\n    }\r\n\r\n    function getTeam(uint256 _tokenId) public view returns (uint256 id, string name, string code, uint256 cost, uint256 price, address owner, uint256 numPayouts) {\r\n        Team storage team = teams[_tokenId];\r\n        id = _tokenId;\r\n        name = team.name;\r\n        code = team.code;\r\n        cost = team.cost;\r\n        price = team.price;\r\n        owner = team.owner;\r\n        numPayouts = team.numPayouts;\r\n    }\r\n        \r\n    function getTeamPayouts(uint256 _tokenId, uint256 _payoutId) public view returns (uint256 id, string stage, uint256 amount, address to, uint256 when) {\r\n        Team storage team = teams[_tokenId];\r\n        Payout storage payout = team.payouts[_payoutId];\r\n        id = _payoutId;\r\n        stage = payout.stage;\r\n        amount = payout.amount;\r\n        to = payout.to;\r\n        when = payout.when;\r\n    }\r\n\r\n    // Allows someone to send ether and obtain the token\r\n    function buyTeam(uint256 _tokenId) public payable {\r\n        address from = teamOwners[_tokenId];\r\n        address to = msg.sender;\r\n        uint256 price = teamPrices[_tokenId];\r\n        \r\n\t    require(_addressNotNull(to));\r\n        require(from != to);\r\n        require(msg.value >= price);\r\n        \r\n        Team storage team = teams[_tokenId];\r\n\t    \r\n        uint256 purchaseExcess = SafeMath.sub(msg.value, price);\r\n        \r\n\t    // get 15% - 5 goes to dev and 10 stays in prize fund that is split during knockout stages\r\n\t    uint256 onePercent = SafeMath.div(price, 100);\r\n\t    uint256 developerAllocation = SafeMath.mul(onePercent, 5);\r\n\t    uint256 saleProceeds = SafeMath.mul(onePercent, 85);\r\n\t    uint256 fundProceeds = SafeMath.mul(onePercent, 10);\r\n\t    \r\n\t    _transfer(from, to, _tokenId);\r\n\t    \r\n\t    // Pay previous owner if owner is not contract\r\n        if (from != address(this)) {\r\n\t        from.transfer(saleProceeds);\r\n        }\r\n\r\n        // Pay developer\r\n        if (developerAddress != address(this)) {\r\n\t        developerAddress.transfer(developerAllocation);\r\n        }\r\n        \r\n        uint256 slice = 0;\r\n        \r\n        // Increase prize fund totals\r\n        if (!prizes.LastSixteenTotalFixed) {\r\n            slice = SafeMath.div(fundProceeds, 4);\r\n            prizes.LastSixteenWinner += SafeMath.div(slice, 8);    \r\n            prizes.QuarterFinalWinner += SafeMath.div(slice, 4);    \r\n            prizes.SemiFinalWinner += SafeMath.div(slice, 2);    \r\n            prizes.TournamentWinner += slice;    \r\n        } else if (!prizes.QuarterFinalTotalFixed) {\r\n            slice = SafeMath.div(fundProceeds, 3);\r\n            prizes.QuarterFinalWinner += SafeMath.div(slice, 4);    \r\n            prizes.SemiFinalWinner += SafeMath.div(slice, 2);    \r\n            prizes.TournamentWinner += slice;   \r\n        } else if (!prizes.SemiFinalTotalFixed) {\r\n            slice = SafeMath.div(fundProceeds, 2);\r\n            prizes.SemiFinalWinner += SafeMath.div(slice, 2);\r\n            prizes.TournamentWinner += slice;   \r\n        } else {\r\n            prizes.TournamentWinner += fundProceeds;   \r\n        }\r\n\t    \r\n\t\t// Set new price for team\r\n\t    uint256 newPrice = 0;\r\n        if (price < doublePriceUntil) {\r\n            newPrice = SafeMath.div(SafeMath.mul(price, 200), 100);\r\n        } else {\r\n            newPrice = SafeMath.div(SafeMath.mul(price, 115), 100);\r\n        }\r\n\t\t\r\n\t    teamPrices[_tokenId] = newPrice;\r\n\t    team.cost = price;\r\n\t    team.price = newPrice;\r\n\t    \r\n\t    emit TeamSold(_tokenId, from, price, to, newPrice, uint256(now), address(this).balance, prizes.LastSixteenWinner, prizes.QuarterFinalWinner, prizes.SemiFinalWinner, prizes.TournamentWinner);\r\n\t    \r\n\t    msg.sender.transfer(purchaseExcess);\r\n\t}\r\n\t\r\n    function getPrizeFund() public view returns (bool lastSixteenTotalFixed, uint256 lastSixteenWinner, bool quarterFinalTotalFixed, uint256 quarterFinalWinner, bool semiFinalTotalFixed, uint256 semiFinalWinner, uint256 tournamentWinner, uint256 total) {\r\n        lastSixteenTotalFixed = prizes.LastSixteenTotalFixed;\r\n        lastSixteenWinner = prizes.LastSixteenWinner;   \r\n        quarterFinalTotalFixed = prizes.QuarterFinalTotalFixed;\r\n        quarterFinalWinner = prizes.QuarterFinalWinner;\r\n        semiFinalTotalFixed = prizes.SemiFinalTotalFixed;\r\n        semiFinalWinner = prizes.SemiFinalWinner;\r\n        tournamentWinner = prizes.TournamentWinner;\r\n        total = address(this).balance;\r\n    }\r\n\r\n    /********----------- PRIVATE FUNCTIONS ------------********/\r\n    function _addressNotNull(address _to) private pure returns (bool) {\r\n        return _to != address(0);\r\n    }   \r\n    \r\n    function _createTeam(string _name, string _code, uint256 _price, address _owner) private {\r\n        Team memory team = Team({\r\n            name: _name,\r\n            code: _code,\r\n            cost: 0 ether,\r\n            price: _price,\r\n            owner: _owner,\r\n            numPayouts: 0\r\n        });\r\n\r\n        uint256 newTeamId = teams.push(team) - 1;\r\n        teamPrices[newTeamId] = _price;\r\n        \r\n        _transfer(address(0), _owner, newTeamId);\r\n    }\r\n    \r\n    function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n        return teamToApproved[_tokenId] == _to;\r\n    }\r\n    \r\n    function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n        ownerTeamCount[_to]++;\r\n        teamOwners[_tokenId] = _to;\r\n        \r\n        Team storage team = teams[_tokenId];\r\n        team.owner = _to;\r\n        \r\n        if (_from != address(0)) {\r\n          ownerTeamCount[_from]--;\r\n          delete teamToApproved[_tokenId];\r\n        }\r\n        \r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n    \r\n    function _owns(address _claimant, uint256 _tokenId) private view returns (bool) {\r\n        return _claimant == teamOwners[_tokenId];\r\n    }    \r\n    \r\n    function _compareStrings (string a, string b) private pure returns (bool){\r\n        return keccak256(a) == keccak256(b);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTeam\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"cost\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"numPayouts\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"}],\"name\":\"createTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"payLastSixteenWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyTeam\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"paySemiFinalWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrizeFund\",\"outputs\":[{\"name\":\"lastSixteenTotalFixed\",\"type\":\"bool\"},{\"name\":\"lastSixteenWinner\",\"type\":\"uint256\"},{\"name\":\"quarterFinalTotalFixed\",\"type\":\"bool\"},{\"name\":\"quarterFinalWinner\",\"type\":\"uint256\"},{\"name\":\"semiFinalTotalFixed\",\"type\":\"bool\"},{\"name\":\"semiFinalWinner\",\"type\":\"uint256\"},{\"name\":\"tournamentWinner\",\"type\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractModifierAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockInQuarterFinalPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockInLastSixteenPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payExcess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"payTournamentWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockInSemiFinalPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_payoutId\",\"type\":\"uint256\"}],\"name\":\"getTeamPayouts\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"stage\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"when\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"payQuarterFinalWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDeveloperAddress\",\"type\":\"address\"}],\"name\":\"setDeveloper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"team\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tradingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lastSixteenPrize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"quarterFinalPrize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"semiFinalPrize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerPrize\",\"type\":\"uint256\"}],\"name\":\"TeamSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tournamentStage\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"team\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"PrizePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CryptoCupToken","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://35b722e106ec9b566679207085a8b828ec525880ca5cef0b3a1feb4775c9bb7e"}]}