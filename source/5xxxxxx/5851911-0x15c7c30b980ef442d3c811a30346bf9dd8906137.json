{"status":"1","message":"OK","result":[{"SourceCode":"// v7\r\n\r\n/**\r\n * InvestorStorage.sol\r\n * Investor storage is used for storing all investments amounts of investors. It creates a list of investors and their investments in a big hash map.\r\n * So when the new investments is made by investor, InvestorStorage adds it to the list as new investment, while storing investors address and invested amount.\r\n * It also gives the ability to get particular investor from the list and to refund him if its needed.\r\n */\r\n\r\npragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title InvestorStorage\r\n * @dev Investor storage is used for storing all investments amounts of investors. It creates a list of investors and their investments in a big hash map.\r\n * So when the new investments is made by investor, InvestorStorage adds it to the list as new investment, while storing investors address and invested amount.\r\n * It also gives the ability to get particular investor from the list and to refund him if its needed.\r\n */\r\ncontract InvestorsStorage is Ownable {\r\n\r\n  mapping (address => uint256) public investors; // map the invested amount\r\n  address[] public investorsList;\r\n  address authorized;\r\n\r\n  /**\r\n   * @dev Allows only presale or crowdsale\r\n   */\r\n  modifier isAuthorized() { // modifier that allows only presale or crowdsale\r\n    require(msg.sender==authorized);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Set authorized to given address - changes the authorization for presale or crowdsale\r\n   * @param _authorized Authorized address\r\n   */\r\n  function setAuthorized(address _authorized) onlyOwner public { // change the authorization for presale or crowdsale\r\n    authorized = _authorized;\r\n  }\r\n\r\n  /**\r\n   * @dev Add new investment to investors storage\r\n   * @param _investor Investors address\r\n   * @param _amount Investment amount\r\n   */\r\n  function newInvestment(address _investor, uint256 _amount) isAuthorized public { // add the invested amount to the map\r\n    if (investors[_investor] == 0) {\r\n      investorsList.push(_investor);\r\n    }\r\n    investors[_investor] += _amount;\r\n  }\r\n\r\n  /**\r\n   * @dev Get invested amount for given investor address\r\n   * @param _investor Investors address\r\n   */\r\n  function getInvestedAmount(address _investor) public view returns (uint256) { // return the invested amount\r\n    return investors[_investor];\r\n  }\r\n\r\n  /**\r\n   * @dev Refund investment to the investor\r\n   * @param _investor Investors address\r\n   */\r\n  function investmentRefunded(address _investor) isAuthorized public { // set the invested amount to 0 after the refund\r\n    investors[_investor] = 0;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_authorized\",\"type\":\"address\"}],\"name\":\"setAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"investmentRefunded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"newInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getInvestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorsList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"InvestorsStorage","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bf0855a22bcaffedc1da186edf215ed708240541f43031b56537d01b514699df"}]}