{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n// ----------------------------------------------------------------------------\r\n// rev rbs eryk 180325\r\n// 'IGR' 'InGRedient Token with Fixed Supply Token'  contract\r\n//\r\n// Symbol      : IGR\r\n// Name        : InGRedient Token -based on ER20 wiki- Example Fixed Supply Token\r\n// Total supply: 1,000,000.000000000000000000\r\n// Decimals    : 3\r\n//\r\n// (c) Erick & Ricardo.Borges@ufabc.edu.br\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe math\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\nfunction totalSupply() public constant returns (uint);\r\nfunction balanceOf(address tokenOwner) public constant returns (uint balance);\r\nfunction allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\nfunction transfer(address to, uint tokens) public returns (bool success);\r\nfunction approve(address spender, uint tokens) public returns (bool success);\r\nfunction transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\nevent Transfer(address indexed from, address indexed to, uint tokens);\r\nevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n// Borrowed from MiniMeToken- \r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\nfunction receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\naddress public owner;\r\naddress public newOwner;\r\n\r\nevent OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\nfunction Owned() public {\r\nowner = msg.sender;\r\n}\r\n\r\nmodifier onlyOwner {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\n\r\nfunction transferOwnership(address _newOwner) public onlyOwner {\r\nnewOwner = _newOwner;\r\n}\r\n\r\nfunction acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and an\r\n// initial fixed supply\r\n// ----------------------------------------------------------------------------\r\ncontract InGRedientToken  is ERC20Interface, Owned {\r\nusing SafeMath for uint;\r\n\r\nstring public symbol;\r\nstring public  name;\r\nuint8 public decimals;\r\nuint public _totalSupply;\r\n\r\nmapping(address => uint) balances;\r\nmapping(address => mapping(address => uint)) allowed;\r\n\r\n\r\n// ------------------------------------------------------------------------\r\n// Constructor\r\n// ------------------------------------------------------------------------\r\nfunction InGRedientToken() public {\r\n    symbol = \"IGR\";\r\n    name = \"InGRedientToken\";\r\n    decimals = 3; //kg is the reference unit but grams is often also used\r\n    _totalSupply = 1000000000000000000000 * 10**uint(decimals);\r\n    balances[owner] = _totalSupply;\r\n    Transfer(address(0), owner, _totalSupply);\r\n}\r\n\r\n\r\n// ------------------------------------------------------------------------\r\n// Total supply\r\n// ------------------------------------------------------------------------\r\nfunction totalSupply() public constant returns (uint) {\r\n    return _totalSupply  - balances[address(0)];\r\n}\r\n\r\n\r\n// ------------------------------------------------------------------------\r\n// Get the token balance for account `tokenOwner`\r\n// ------------------------------------------------------------------------\r\nfunction balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n    return balances[tokenOwner];\r\n}\r\n\r\n// ------------------------------------------------------------------------\r\n// Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n// from the token owner's account\r\n//\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// recommends that there are no checks for the approval double-spend attack\r\n// as this should be implemented in user interfaces\r\n// ------------------------------------------------------------------------\r\nfunction approve(address spender, uint tokens) public returns (bool success) {\r\n    allowed[msg.sender][spender] = tokens;\r\n    Approval(msg.sender, spender, tokens);\r\n    return true;\r\n}\r\n\r\n// ------------------------------------------------------------------------\r\n// Transfer the balance from token owner's account to `to` account\r\n// - Owner's account must have sufficient balance to transfer\r\n// - 0 value transfers are allowed\r\n// ------------------------------------------------------------------------\r\nfunction transfer(address to, uint tokens) public returns (bool success) {\r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    Transfer(msg.sender, to, tokens);\r\n    return true;\r\n}\r\n\r\n// ------------------------------------------------------------------------\r\n// Transfer `tokens` from the `from` account to the `to` account\r\n//\r\n// The calling account must already have sufficient tokens approve(...)-d\r\n// for spending from the `from` account and\r\n// - From account must have sufficient balance to transfer\r\n// - Spender must have sufficient allowance to transfer\r\n// - 0 value transfers are allowed\r\n// ------------------------------------------------------------------------\r\nfunction transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\nbalances[from] = balances[from].sub(tokens);\r\nallowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\nbalances[to] = balances[to].add(tokens);\r\nTransfer(from, to, tokens);\r\nreturn true;\r\n}\r\n\r\n\r\n// ------------------------------------------------------------------------\r\n// Returns the amount of tokens approved by the owner that can be\r\n// transferred to the spender's account\r\n// ------------------------------------------------------------------------\r\nfunction allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\nreturn allowed[tokenOwner][spender];\r\n}\r\n\r\n\r\n// ------------------------------------------------------------------------\r\n// Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n// from the token owner's account. The `spender` contract function\r\n// `receiveApproval(...)` is then executed\r\n// ------------------------------------------------------------------------\r\nfunction approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\nallowed[msg.sender][spender] = tokens;\r\nApproval(msg.sender, spender, tokens);\r\nApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\nreturn true;\r\n}\r\n\r\n// ------------------------------------------------------------------------\r\n// Don't accept ETH\r\n// ------------------------------------------------------------------------\r\nfunction () public payable {\r\nrevert();\r\n}\r\n\r\n\r\n// ------------------------------------------------------------------------\r\n// Owner can transfer out any accidentally sent ERC20 tokens\r\n// ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n    return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n\r\n\r\n// ==================================================================\r\n// IGR token specific functions \r\n//===================================================================\r\n\r\nevent  FarmerRequestedCertificate(address owner, address certAuth, uint tokens);\r\n\r\n// --------------------------------------------------------------------------------------------------\r\n// routine 10- allows for sale of ingredients along with the respective IGR token transfer ( with url)\r\n//implementação básica da rotina 10  do farmer requests Certicate\r\n// --------------------------------------------------------------------------------------------------\r\nfunction farmerRequestCertificate(address _certAuth, uint _tokens, string _product,string _IngValueProperty, string _localGPSProduction, uint _dateProduction ) public returns (bool success) {\r\n// falta implementar uma verif se o end certAuth foi cadastradao anteriormente\r\n    allowed[owner][_certAuth] = _tokens;\r\n    Approval(owner, _certAuth, _tokens);\r\n    FarmerRequestedCertificate(owner, _certAuth, _tokens);\r\n    return true;\r\n}\r\n\r\n// --------------------------------------------------------------------------------------------------\r\n// routine 20-  certAuthIssuesCerticate  certification auth confirms that ingredients are trustworthy \r\n// as well as qtty , location , published url ,  string product)\r\n// --------------------------------------------------------------------------------------------------\r\nfunction certAuthIssuesCerticate(address owner, address farmer, uint tokens, string _url,string product,string IngValueProperty, string localGPSProduction, uint dateProduction ) public returns (bool success) {\r\n    balances[owner] = balances[owner].sub(tokens);\r\n    //allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(tokens);\r\n    allowed[owner][msg.sender] = 0;\r\n    balances[farmer] = balances[farmer].add(tokens);\r\n    Transfer(owner, farmer, tokens);\r\n    return true;\r\n    }\r\n\r\n// --------------------------------------------------------------------------------------------------\r\n// routine 30- allows for sale of ingredients along with the respective IGR token transfer ( with url)\r\n// --------------------------------------------------------------------------------------------------\r\nfunction sellsIngrWithoutDepletion(address to, uint tokens,string _url) public returns (bool success) {\r\n    string memory url=_url; // keep the url of the InGRedient for later transfer\r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    Transfer(msg.sender, to, tokens);\r\n    return true;\r\n    }\r\n\r\n// ------------------------------------------------------------------------\r\n// routine 40- allows for sale of intermediate product made from certified ingredients along with\r\n// the respective IGR token transfer ( with url)\r\n// i.e.: allows only the pro-rata quantity of semi-processed  InGRedient \r\n// tokens to be transfered to the consumer level package(SKU) \r\n// ------------------------------------------------------------------------\r\nfunction sellsIntermediateGoodWithDepletion(address to, uint tokens,string _url,uint out2inIngredientPercentage ) public returns (bool success) {\r\n    string memory url=_url; // keep the url of hte InGRedient for later transfer\r\n    //allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(tokens);// falta matar a parte depleted ....depois fazemos\r\n    require (out2inIngredientPercentage <= 100); // verificar possivel erro se este valor for negativo ou maior que 100(%)\r\n    transfer(to, tokens*out2inIngredientPercentage/100);\r\n    return true;\r\n}\r\n\r\n\r\nfunction genAddressFromGTIN13date(string _GTIN13,string _YYMMDD) constant returns(address c){\r\n    bytes32 a= keccak256(_GTIN13,_YYMMDD);\r\n    address b = address(a);\r\n    return b;\r\n    }\r\n\r\n// ------------------------------------------------------------------------\r\n//  transferAndWriteUrl- Transfer the balance from token owner's account to `to` account\r\n// - Owner's account must have sufficient balance to transfer\r\n// - 0 value transfers are allowed\r\n// since the -url is passed to the function we achieve that this data be written to the block..nothing else needed\r\n// ------------------------------------------------------------------------\r\nfunction transferAndWriteUrl(address to, uint tokens, string _url) public returns (bool success) {\r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    Transfer(msg.sender, to, tokens);\r\n    return true;\r\n    }\r\n\r\n// ------------------------------------------------------------------------\r\n// routine 50- comminglerSellsProductSKUWithProRataIngred(address _to, int numPSKUsSold, ,string _url, uint _qttyIGRinLLSKU, string GTIN13, string YYMMDD ) \r\n//allows for sale of final-consumer  product with resp SKU and Lot identification with corresponding IGR transfer\r\n// the respective IGR token transfer ( with url)\r\n// i.e.: allows only the pro-rata quantity of semi-processed  InGRedient \r\n// tokens to be transfered to the consumer level package(SKU) \r\n// ------------------------------------------------------------------------\r\nfunction comminglerSellsProductSKUWithProRataIngred(address _to, uint _numSKUsSold,string _url,uint _qttyIGRinLLSKU, string _GTIN13, string _YYMMDD ) public returns (bool success) {\r\n        string memory url=_url; // keep the url of hte InGRedient for later transfer\r\n        address c= genAddressFromGTIN13date( _GTIN13, _YYMMDD);//writes to the blockchain address composed of GTIN-13+YYMMDD the qtty IGR in one SKU\r\n        transferAndWriteUrl(c, _qttyIGRinLLSKU, _url);\r\n        require (_qttyIGRinLLSKU >0); // qtty of Ingredient may not be negative nor zero \r\n        transferAndWriteUrl(_to, (_numSKUsSold-1)*_qttyIGRinLLSKU,_url);// records the transfer of custody of the qtty of SKU each with qttyIGRinLLSKU\r\n        return true;\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_certAuth\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_product\",\"type\":\"string\"},{\"name\":\"_IngValueProperty\",\"type\":\"string\"},{\"name\":\"_localGPSProduction\",\"type\":\"string\"},{\"name\":\"_dateProduction\",\"type\":\"uint256\"}],\"name\":\"farmerRequestCertificate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_GTIN13\",\"type\":\"string\"},{\"name\":\"_YYMMDD\",\"type\":\"string\"}],\"name\":\"genAddressFromGTIN13date\",\"outputs\":[{\"name\":\"c\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_numSKUsSold\",\"type\":\"uint256\"},{\"name\":\"_url\",\"type\":\"string\"},{\"name\":\"_qttyIGRinLLSKU\",\"type\":\"uint256\"},{\"name\":\"_GTIN13\",\"type\":\"string\"},{\"name\":\"_YYMMDD\",\"type\":\"string\"}],\"name\":\"comminglerSellsProductSKUWithProRataIngred\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"transferAndWriteUrl\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"sellsIngrWithoutDepletion\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"_url\",\"type\":\"string\"},{\"name\":\"out2inIngredientPercentage\",\"type\":\"uint256\"}],\"name\":\"sellsIntermediateGoodWithDepletion\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"farmer\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"_url\",\"type\":\"string\"},{\"name\":\"product\",\"type\":\"string\"},{\"name\":\"IngValueProperty\",\"type\":\"string\"},{\"name\":\"localGPSProduction\",\"type\":\"string\"},{\"name\":\"dateProduction\",\"type\":\"uint256\"}],\"name\":\"certAuthIssuesCerticate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"certAuth\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"FarmerRequestedCertificate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"InGRedientToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://083a24b196545e59c00a2ac8579cffdda8c880df586202717669f105644abbd6"}]}