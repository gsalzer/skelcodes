{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract dapBetting {\r\n    \r\n    /* Types */\r\n    \r\n    enum eventStatus{ open, finished, closed }\r\n    \r\n    struct bid{\r\n        uint id;\r\n        bytes32 name;\r\n        address[] whoBet;\r\n        uint amountReceived;\r\n    }\r\n    \r\n    struct betEvent{\r\n        uint id;\r\n        bytes32 name;\r\n        address creator;\r\n        address arbitrator;\r\n        bytes32 winner;\r\n        uint arbitratorFee;\r\n        bid[] bids;\r\n        bet[] bets;\r\n        eventStatus status;\r\n    }\r\n    \r\n    struct bet{\r\n        address person;\r\n        bytes32 bidName;\r\n        uint amount;\r\n    }\r\n    \r\n    /* Storage */\r\n    \r\n    mapping (address => betEvent[]) public betEvents;\r\n    mapping (address => uint) public pendingWithdrawals;\r\n    \r\n    /* Events */\r\n    \r\n    event EventCreated(uint id, address creator);\r\n    event betMade(uint value, uint id);\r\n    event eventStatusChanged(uint status);\r\n    event withdrawalDone(uint amount);\r\n    \r\n    /* Modifiers */\r\n    modifier onlyFinished(address creator, uint eventId){\r\n        if (betEvents[creator][eventId].status == eventStatus.finished){\r\n            _;\r\n        }\r\n    }\r\n    modifier onlyArbitrator(address creator, uint eventId){\r\n        if (betEvents[creator][eventId].arbitrator == msg.sender){\r\n            _;\r\n        }\r\n    }\r\n    /* Methods */\r\n    \r\n    function createEvent(bytes32 name, bytes32[] names, address arbitrator, uint fee) external{\r\n        \r\n        require(fee < 100);\r\n        /* check whether event with such name already exist */\r\n        bool found;\r\n        for (uint8 x = 0;x<betEvents[msg.sender].length;x++){\r\n            if(betEvents[msg.sender][x].name == name){\r\n                found = true;\r\n            }\r\n        }\r\n        require(!found);\r\n        \r\n        /* check names for duplicates */\r\n        for (uint8 y=0;i<names.length;i++){\r\n            require(names[y] != names[y+1]);\r\n        }\r\n        \r\n        uint newId = betEvents[msg.sender].length++;\r\n        betEvents[msg.sender][newId].id = newId;\r\n        betEvents[msg.sender][newId].name = name;\r\n        betEvents[msg.sender][newId].arbitrator = arbitrator;\r\n        betEvents[msg.sender][newId].status = eventStatus.open;\r\n        betEvents[msg.sender][newId].creator = msg.sender;\r\n        betEvents[msg.sender][newId].arbitratorFee = fee;\r\n        \r\n        for (uint8 i = 0;i < names.length; i++){\r\n            uint newBidId = betEvents[msg.sender][newId].bids.length++;\r\n            betEvents[msg.sender][newId].bids[newBidId].name = names[i];\r\n            betEvents[msg.sender][newId].bids[newBidId].id = newBidId;\r\n        }\r\n        \r\n        emit EventCreated(newId, msg.sender);\r\n    }\r\n    \r\n    function makeBet(address creator, uint eventId, bytes32 bidName) payable external{\r\n        require(betEvents[creator][eventId].status == eventStatus.open);\r\n        /* check whether bid with given name actually exists */\r\n        bool found;\r\n        for (uint8 i=0;i<betEvents[creator][eventId].bids.length;i++){\r\n            if (betEvents[creator][eventId].bids[i].name == bidName){\r\n                bid storage foundBid = betEvents[creator][eventId].bids[i];\r\n                found = true;\r\n            }\r\n        }\r\n        require(found);\r\n        foundBid.whoBet.push(msg.sender);\r\n        foundBid.amountReceived += msg.value;\r\n        uint newBetId = betEvents[creator][eventId].bets.length++;\r\n        betEvents[creator][eventId].bets[newBetId].person = msg.sender;\r\n        betEvents[creator][eventId].bets[newBetId].amount = msg.value;\r\n        betEvents[creator][eventId].bets[newBetId].bidName = bidName;\r\n        \r\n        emit betMade(msg.value, newBetId);\r\n    }\r\n    \r\n    function finishEvent(address creator, uint eventId) external{\r\n        require(betEvents[creator][eventId].status == eventStatus.open);\r\n        require(msg.sender == betEvents[creator][eventId].arbitrator);\r\n        betEvents[creator][eventId].status = eventStatus.finished;\r\n        emit eventStatusChanged(1);\r\n    }\r\n    \r\n    function determineWinner(address creator, uint eventId, bytes32 bidName) external onlyFinished(creator, eventId) onlyArbitrator(creator, eventId){\r\n        require (findBid(creator, eventId, bidName));\r\n        betEvent storage cEvent = betEvents[creator][eventId];\r\n        cEvent.winner = bidName;\r\n        uint amountLost;\r\n        uint amountWon;\r\n        uint lostBetsLen;\r\n        /*Calculating amount of all lost bets */\r\n        for (uint x=0;x<betEvents[creator][eventId].bids.length;x++){\r\n            if (cEvent.bids[x].name != cEvent.winner){\r\n                amountLost += cEvent.bids[x].amountReceived;\r\n            }\r\n        }\r\n        \r\n        /* Calculating amount of all won bets */\r\n        for (x=0;x<cEvent.bets.length;x++){\r\n            if(cEvent.bets[x].bidName == cEvent.winner){\r\n                uint wonBetAmount = cEvent.bets[x].amount;\r\n                amountWon += wonBetAmount;\r\n                pendingWithdrawals[cEvent.bets[x].person] += wonBetAmount;\r\n            } else {\r\n                lostBetsLen++;\r\n            }\r\n        }\r\n        /* If we do have win bets */\r\n        if (amountWon > 0){\r\n            pendingWithdrawals[cEvent.arbitrator] += amountLost/100*cEvent.arbitratorFee;\r\n            amountLost = amountLost - (amountLost/100*cEvent.arbitratorFee);\r\n            for (x=0;x<cEvent.bets.length;x++){\r\n            if(cEvent.bets[x].bidName == cEvent.winner){\r\n                //uint wonBetPercentage = cEvent.bets[x].amount*100/amountWon;\r\n                uint wonBetPercentage = percent(cEvent.bets[x].amount, amountWon, 2);\r\n                pendingWithdrawals[cEvent.bets[x].person] += (amountLost/100)*wonBetPercentage;\r\n            }\r\n        }\r\n        } else {\r\n            /* If we dont have any bets won, we pay all the funds back except arbitrator fee */\r\n            for(x=0;x<cEvent.bets.length;x++){\r\n                pendingWithdrawals[cEvent.bets[x].person] += cEvent.bets[x].amount-((cEvent.bets[x].amount/100) * cEvent.arbitratorFee);\r\n                pendingWithdrawals[cEvent.arbitrator] += (cEvent.bets[x].amount/100) * cEvent.arbitratorFee;\r\n            }\r\n        }\r\n        cEvent.status = eventStatus.closed;\r\n        emit eventStatusChanged(2);\r\n    }\r\n    \r\n    function withdraw(address person) private{\r\n        uint amount = pendingWithdrawals[person];\r\n        pendingWithdrawals[person] = 0;\r\n        person.transfer(amount);\r\n        emit withdrawalDone(amount);\r\n    }\r\n    \r\n    function requestWithdraw() external {\r\n        //require(pendingWithdrawals[msg.sender] != 0);\r\n        withdraw(msg.sender);\r\n    }\r\n    \r\n    function findBid(address creator, uint eventId, bytes32 bidName) private view returns(bool){\r\n        for (uint8 i=0;i<betEvents[creator][eventId].bids.length;i++){\r\n            if(betEvents[creator][eventId].bids[i].name == bidName){\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function calc(uint one, uint two) private pure returns(uint){\r\n        return one/two;\r\n    }\r\n    function percent(uint numerator, uint denominator, uint precision) public \r\n\r\n    pure returns(uint quotient) {\r\n           // caution, check safe-to-multiply here\r\n          uint _numerator  = numerator * 10 ** (precision+1);\r\n          // with rounding of last digit\r\n          uint _quotient =  ((_numerator / denominator) + 5) / 10;\r\n          return ( _quotient);\r\n    }\r\n    /* Getters */\r\n    \r\n    function getBidsNum(address creator, uint eventId) external view returns (uint){\r\n        return betEvents[creator][eventId].bids.length;\r\n    }\r\n    \r\n    function getBid(address creator, uint eventId, uint bidId) external view returns (uint, bytes32, uint){\r\n        bid storage foundBid = betEvents[creator][eventId].bids[bidId];\r\n        return(foundBid.id, foundBid.name, foundBid.amountReceived);\r\n    }\r\n\r\n    function getBetsNums(address creator, uint eventId) external view returns (uint){\r\n        return betEvents[creator][eventId].bets.length;\r\n    }\r\n\r\n    function getWhoBet(address creator, uint eventId, uint bidId) external view returns (address[]){\r\n        return betEvents[creator][eventId].bids[bidId].whoBet;\r\n    }\r\n    \r\n    function getBet(address creator, uint eventId, uint betId) external view returns(address, bytes32, uint){\r\n        bet storage foundBet = betEvents[creator][eventId].bets[betId];\r\n        return (foundBet.person, foundBet.bidName, foundBet.amount);\r\n    }\r\n    \r\n    function getEventId(address creator, bytes32 eventName) external view returns (uint, bool){\r\n        for (uint i=0;i<betEvents[creator].length;i++){\r\n            if(betEvents[creator][i].name == eventName){\r\n                return (betEvents[creator][i].id, true);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"},{\"name\":\"precision\",\"type\":\"uint256\"}],\"name\":\"percent\",\"outputs\":[{\"name\":\"quotient\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"getBidsNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"eventName\",\"type\":\"bytes32\"}],\"name\":\"getEventId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"eventId\",\"type\":\"uint256\"},{\"name\":\"bidName\",\"type\":\"bytes32\"}],\"name\":\"determineWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"eventId\",\"type\":\"uint256\"},{\"name\":\"bidName\",\"type\":\"bytes32\"}],\"name\":\"makeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"getBetsNums\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"names\",\"type\":\"bytes32[]\"},{\"name\":\"arbitrator\",\"type\":\"address\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"createEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"eventId\",\"type\":\"uint256\"},{\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"getBet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"eventId\",\"type\":\"uint256\"},{\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"getBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"eventId\",\"type\":\"uint256\"},{\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"getWhoBet\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"finishEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betEvents\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"arbitrator\",\"type\":\"address\"},{\"name\":\"winner\",\"type\":\"bytes32\"},{\"name\":\"arbitratorFee\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"EventCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"betMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"eventStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalDone\",\"type\":\"event\"}]","ContractName":"dapBetting","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://633f90bb2db70ac2ff0a3456ba3359743a021fa971317f3ca12ca3efc950adec"}]}