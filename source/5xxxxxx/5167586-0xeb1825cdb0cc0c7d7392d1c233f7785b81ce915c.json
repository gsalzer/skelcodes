{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(burner, _value);\r\n    Transfer(burner, address(0), _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract BRANDCOIN is StandardToken, BurnableToken, Ownable\r\n{\r\n    // ERC20 token parameters\r\n    string public constant name = \"BRANDCOIN\";\r\n    string public constant symbol = \"BRA\";\r\n    uint256 public constant decimals = 18;\r\n    \r\n    // Crowdsale base price\r\n    uint256 public ETH_per_BRA = 0.00024261 ether;\r\n    \r\n    // 15 april - 30 april: 43% bonus for purchases of at least 1000 BRA\r\n    uint256 private first_period_start_date = 1523750400;\r\n    uint256 private constant first_period_bonus_percentage = 43;\r\n    uint256 private constant first_period_bonus_minimum_purchased_BRA = 1000 * (uint256(10) ** decimals);\r\n    \r\n    // 1 may - 7 may: 15% bonus\r\n    uint256 private second_period_start_date = 1525132800;\r\n    uint256 private constant second_period_bonus_percentage = 15;\r\n    \r\n    // 8 may - 14 may: 10% bonus\r\n    uint256 private third_period_start_date = 1525737600;\r\n    uint256 private constant third_period_bonus_percentage = 10;\r\n    \r\n    // 15 may - 21 may: 6% bonus\r\n    uint256 private fourth_period_start_date = 1526342400;\r\n    uint256 private constant fourth_period_bonus_percentage = 6;\r\n    \r\n    // 22 may - 31 may: 3% bonus\r\n    uint256 private fifth_period_start_date = 1526947200;\r\n    uint256 private constant fifth_period_bonus_percentage = 3;\r\n    \r\n    // End of ICO: 1 june\r\n    uint256 private crowdsale_end_timestamp = 1527811200;\r\n    \r\n    // The target of the crowdsale is 8000000 BRANDCOIN's.\r\n    // If the crowdsale has finished, and the target has not been reached,\r\n    // all crowdsale participants will be able to call refund() and get their\r\n    // ETH back. The refundMany() function can be used to refund multiple\r\n    // participants in one transaction.\r\n    uint256 public constant crowdsaleTargetBRA = 8000000 * (uint256(10) ** decimals);\r\n    \r\n    \r\n    // Keep track of all participants, how much they bought and how much they spent.\r\n    address[] public allParticipants;\r\n    mapping(address => uint256) public participantToEtherSpent;\r\n    mapping(address => uint256) public participantToBRAbought;\r\n    \r\n    \r\n    function crowdsaleTargetReached() public view returns (bool)\r\n    {\r\n        return amountOfBRAsold() >= crowdsaleTargetBRA;\r\n    }\r\n    \r\n    function crowdsaleStarted() public view returns (bool)\r\n    {\r\n        return now >= first_period_start_date;\r\n    }\r\n    \r\n    function crowdsaleFinished() public view returns (bool)\r\n    {\r\n        return now >= crowdsale_end_timestamp;\r\n    }\r\n    \r\n    function amountOfParticipants() external view returns (uint256)\r\n    {\r\n        return allParticipants.length;\r\n    }\r\n    \r\n    function amountOfBRAsold() public view returns (uint256)\r\n    {\r\n        return totalSupply_ / 2 - balances[this];\r\n    }\r\n    \r\n    // If the crowdsale target has not been reached, or the crowdsale has not finished,\r\n    // don't allow the transfer of tokens purchased in the crowdsale.\r\n    function transfer(address _to, uint256 _amount) public returns (bool)\r\n    {\r\n        if (!crowdsaleTargetReached() || !crowdsaleFinished())\r\n        {\r\n            require(balances[msg.sender] - participantToBRAbought[msg.sender] >= _amount);\r\n        }\r\n        \r\n        return super.transfer(_to, _amount);\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool)\r\n    {\r\n        if (!crowdsaleTargetReached() || !crowdsaleFinished())\r\n        {\r\n            require(balances[_from] - participantToBRAbought[_from] >= _amount);\r\n        }\r\n        \r\n        return super.transferFrom(_from, _to, _amount);\r\n    }\r\n    \r\n    address public founderWallet = 0x6bC5aa2B9eb4aa5b6170Dafce4482efF56184ADd;\r\n    address public teamWallet = 0xb054D33607fC07e55469c81ABcB1553B92914E9e;\r\n    address public bountyAffiliateWallet = 0x9460bc2bB546B640060E0268Ba8C392b0A0D6330;\r\n    address public earlyBackersWallet = 0x4681B5c67ae0632c57ee206e1f9c2Ca58D6Af34c;\r\n    address public reserveWallet = 0x4d70B2aCaE5e6558A9f5d55E672E93916Ba5c7aE;\r\n    \r\n    // Constructor function\r\n    function BRANDCOIN() public\r\n    {\r\n        totalSupply_ = 1650000000 * (uint256(10) ** decimals);\r\n        balances[this] = totalSupply_;\r\n        Transfer(0x0, this, totalSupply_);\r\n    }\r\n    \r\n    bool private distributedInitialFunds = false;\r\n    function distributeInitialFunds() public onlyOwner\r\n    {\r\n        require(!distributedInitialFunds);\r\n        distributedInitialFunds = true;\r\n        this.transfer(founderWallet, totalSupply_*15/100);\r\n        this.transfer(earlyBackersWallet, totalSupply_*5/100);\r\n        this.transfer(teamWallet, totalSupply_*15/100);\r\n        this.transfer(bountyAffiliateWallet, totalSupply_*5/100);\r\n        this.transfer(reserveWallet, totalSupply_*10/100);\r\n    }\r\n    \r\n    function destroyUnsoldTokens() external onlyOwner\r\n    {\r\n        require(crowdsaleStarted() && crowdsaleFinished());\r\n        \r\n        this.burn(balances[this]);\r\n    }\r\n    \r\n    // If someone sends ETH to the contract address,\r\n    // assume that they are trying to buy tokens.\r\n    function () payable external\r\n    {\r\n        buyTokens();\r\n    }\r\n    \r\n    function buyTokens() payable public\r\n    {\r\n        uint256 amountOfBRApurchased = msg.value * (uint256(10)**decimals) / ETH_per_BRA;\r\n        \r\n        // Only allow buying tokens if the ICO has started, and has not finished\r\n        require(crowdsaleStarted());\r\n        require(!crowdsaleFinished());\r\n        \r\n        // If the pre-ICO hasn't started yet, cancel the transaction\r\n        if (now < first_period_start_date)\r\n        {\r\n            revert();\r\n        }\r\n        \r\n        else if (now >= first_period_start_date && now < second_period_start_date)\r\n        {\r\n            if (amountOfBRApurchased >= first_period_bonus_minimum_purchased_BRA)\r\n            {\r\n                amountOfBRApurchased = amountOfBRApurchased * (100 + first_period_bonus_percentage) / 100;\r\n            }\r\n        }\r\n        \r\n        else if (now >= second_period_start_date && now < third_period_start_date)\r\n        {\r\n            amountOfBRApurchased = amountOfBRApurchased * (100 + second_period_bonus_percentage) / 100;\r\n        }\r\n        \r\n        else if (now >= third_period_start_date && now < fourth_period_start_date)\r\n        {\r\n            amountOfBRApurchased = amountOfBRApurchased * (100 + third_period_bonus_percentage) / 100;\r\n        }\r\n        \r\n        else if (now >= fourth_period_start_date && now < fifth_period_start_date)\r\n        {\r\n            amountOfBRApurchased = amountOfBRApurchased * (100 + fourth_period_bonus_percentage) / 100;\r\n        }\r\n        \r\n        else if (now >= fifth_period_start_date && now < crowdsale_end_timestamp)\r\n        {\r\n            amountOfBRApurchased = amountOfBRApurchased * (100 + fifth_period_bonus_percentage) / 100;\r\n        }\r\n        \r\n        // If we are passed the final sale, cancel the transaction.\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n        \r\n        // Send the purchased tokens to the buyer\r\n        this.transfer(msg.sender, amountOfBRApurchased);\r\n        \r\n        // Track statistics\r\n        if (participantToEtherSpent[msg.sender] == 0)\r\n        {\r\n            allParticipants.push(msg.sender);\r\n        }\r\n        participantToBRAbought[msg.sender] += amountOfBRApurchased;\r\n        participantToEtherSpent[msg.sender] += msg.value;\r\n    }\r\n    \r\n    function refund() external\r\n    {\r\n        // If the crowdsale has not started yet, don't allow refund\r\n        require(crowdsaleStarted());\r\n        \r\n        // If the crowdsale has not finished yet, don't allow refund\r\n        require(crowdsaleFinished());\r\n        \r\n        // If the target was reached, don't allow refund\r\n        require(!crowdsaleTargetReached());\r\n        \r\n        _refundParticipant(msg.sender);\r\n    }\r\n    \r\n    function refundMany(uint256 _startIndex, uint256 _endIndex) external\r\n    {\r\n        // If the crowdsale has not started yet, don't allow refund\r\n        require(crowdsaleStarted());\r\n        \r\n        // If the crowdsale has not finished yet, don't allow refund\r\n        require(crowdsaleFinished());\r\n        \r\n        // If the target was reached, don't allow refund\r\n        require(!crowdsaleTargetReached());\r\n        \r\n        for (uint256 i=_startIndex; i<=_endIndex && i<allParticipants.length; i++)\r\n        {\r\n            _refundParticipant(allParticipants[i]);\r\n        }\r\n    }\r\n    \r\n    function _refundParticipant(address _participant) internal\r\n    {\r\n        if (participantToEtherSpent[_participant] > 0)\r\n        {\r\n            // Return the BRA they bought to this contract\r\n            uint256 refundBRA = participantToBRAbought[_participant];\r\n            participantToBRAbought[_participant] = 0;\r\n            balances[_participant] -= refundBRA;\r\n            balances[this] += refundBRA;\r\n            Transfer(_participant, this, refundBRA);\r\n            \r\n            // Return the ETH they spent to buy them\r\n            uint256 refundETH = participantToEtherSpent[_participant];\r\n            participantToEtherSpent[_participant] = 0;\r\n            _participant.transfer(refundETH);\r\n        }\r\n    }\r\n    \r\n    function distributeCrowdsaleTokens(address _to, uint256 _amount) external onlyOwner\r\n    {\r\n        this.transfer(_to, _amount);\r\n    }\r\n    \r\n    function ownerWithdrawETH() external onlyOwner\r\n    {\r\n        // Only allow the owner to withdraw if the crowdsale target has been reached\r\n        require(crowdsaleTargetReached());\r\n        owner.transfer(this.balance);\r\n    }\r\n    \r\n    // As long as the crowdsale has not started yet, the owner can change the base price\r\n    function setPrice(uint256 _ETH_PER_BRA) external onlyOwner\r\n    {\r\n        require(!crowdsaleStarted());\r\n        ETH_per_BRA = _ETH_PER_BRA;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfBRAsold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyBackersWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerWithdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeInitialFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeCrowdsaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_per_BRA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleTargetBRA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyAffiliateWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroyUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"name\":\"_endIndex\",\"type\":\"uint256\"}],\"name\":\"refundMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ETH_PER_BRA\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleTargetReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participantToBRAbought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participantToEtherSpent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BRANDCOIN","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5c9805208a939c72b79ff46c6d7955aab8dc5a2c657106eed8bf7ea80153e594"}]}