{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract TXOtoken {\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract GetsBurned {\r\n\r\n    function () payable {\r\n    }\r\n\r\n    function BurnMe () public {\r\n        // Selfdestruct and send eth to self,\r\n        selfdestruct(address(this));\r\n    }\r\n}\r\n\r\n/**\r\n * @title TREON token sale\r\n * @dev This contract receives money. Redirects money to the wallet. Verifies the correctness of transactions.\r\n * @dev Does not produce tokens. All tokens are sent manually, after approval.\r\n */\r\ncontract TXOsaleTwo is Ownable {\r\n\r\n    event ReceiveEther(address indexed from, uint256 value);\r\n\r\n    TXOtoken public token = TXOtoken(0xe3e0CfBb19D46DC6909C6830bfb25107f8bE5Cb7);\r\n\r\n    bool public goalAchieved = false;\r\n\r\n    address public constant wallet = 0x8dA7477d56c90CF2C5b78f36F9E39395ADb2Ae63;\r\n    //  Thursday, 17-Jul-18 00:00:00 UTC\r\n    uint public  constant saleStart = 1531785600;\r\n    // Monday, 31-Dec-18 23:59:59 UTC\r\n    uint public constant saleEnd = 1546300799;\r\n\r\n    function TXOsaleTwo() public {\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev fallback function\r\n    */\r\n    function() public payable {\r\n        require(now >= saleStart && now <= saleEnd);\r\n        require(!goalAchieved);\r\n        require(msg.value >= 0.1 ether);\r\n        require(msg.value <= 65 ether);\r\n        wallet.transfer(msg.value);\r\n        emit ReceiveEther(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev The owner can suspend the sale if the HardCap has been achieved.\r\n     */\r\n    function setGoalAchieved(bool _goalAchieved) public onlyOwner {\r\n        goalAchieved = _goalAchieved;\r\n    }\r\n\r\n    function burnToken(uint256 value) public onlyOwner{\r\n        GetsBurned burnContract = new GetsBurned();\r\n        token.transfer(burnContract,  value);\r\n        burnContract.BurnMe();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"goalAchieved\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_goalAchieved\",\"type\":\"bool\"}],\"name\":\"setGoalAchieved\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReceiveEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TXOsaleTwo","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6df2aea355a3cef816766360ea3b7afbe6e66fc7ef4c1a91c54379b1c3485f2a"}]}