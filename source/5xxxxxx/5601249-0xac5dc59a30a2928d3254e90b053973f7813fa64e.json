{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply()public view returns (uint total_Supply);\r\n  function balanceOf(address who)public view returns (uint256);\r\n  function allowance(address owner, address spender)public view returns (uint);\r\n  function transferFrom(address from, address to, uint value)public returns (bool ok);\r\n  function approve(address spender, uint value)public returns (bool ok);\r\n  function transfer(address to, uint value)public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract WGP is ERC20\r\n{ using SafeMath for uint256;\r\n    // Name of the token\r\n    string public constant name = \"W Green Pay\";\r\n\r\n    // Symbol of token\r\n    string public constant symbol = \"WGP\";\r\n    uint8 public constant decimals = 18;\r\n    uint public _totalsupply; \r\n    uint public maxCap_MInt = 60000000 * 10 ** 18; // 60 Million Coins\r\n    address public ethFundMain = 0x67fd4721d490A5E609cF8e09FCE0a217b91F1546; // address to receive ether from smart contract\r\n    uint256 public mintedtokens;\r\n    address public owner;\r\n    uint256 public _price_tokn;\r\n    uint256 no_of_tokens;\r\n    bool stopped = false;\r\n    uint256 public ico_startdate;\r\n    uint256 public ico_enddate;\r\n    uint256 public ETHcollected;\r\n    bool public lockstatus; \r\n    bool public mintingFinished = false;\r\n    \r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    event Mint(address indexed from, address indexed to, uint256 amount);\r\n\r\n    \r\n     enum Stages {\r\n        NOTSTARTED,\r\n        ICO,\r\n        PAUSED,\r\n        ENDED\r\n    }\r\n    Stages public stage;\r\n    \r\n     modifier atStage(Stages _stage) {\r\n        require (stage == _stage);\r\n         _;\r\n    }\r\n    \r\n     modifier onlyOwner() {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    constructor() public\r\n    {\r\n        owner = msg.sender;\r\n        balances[owner] = 40000000 * 10 **18;  //40 million for the COmpany given to Owner\r\n        _totalsupply = balances[owner];\r\n        lockstatus = true;\r\n        stage = Stages.NOTSTARTED;\r\n        emit Transfer(0, owner, balances[owner]);\r\n    }\r\n  \r\n    function Manual_Mint(address receiver, uint256 tokenQuantity) external onlyOwner {\r\n      \r\n            require(!mintingFinished);\r\n             require(mintedtokens + tokenQuantity <= maxCap_MInt && tokenQuantity > 0);\r\n              mintedtokens = mintedtokens.add(tokenQuantity);\r\n             _totalsupply = _totalsupply.add(tokenQuantity);\r\n             balances[receiver] = balances[receiver].add(tokenQuantity);\r\n             emit Mint(owner, receiver, tokenQuantity);\r\n             emit Transfer(0, receiver, tokenQuantity);\r\n    }\r\n\r\n    function mintContract(address receiver, uint256 tokenQuantity) private {\r\n            \r\n             require(mintedtokens + tokenQuantity <= maxCap_MInt && tokenQuantity > 0);\r\n              mintedtokens = mintedtokens.add(tokenQuantity);\r\n             _totalsupply = _totalsupply.add(tokenQuantity);\r\n             balances[receiver] = balances[receiver].add(tokenQuantity);\r\n              emit Mint(address(this), receiver, tokenQuantity);\r\n             emit Transfer(0, receiver, tokenQuantity);\r\n    }\r\n    \r\n    function () public payable atStage(Stages.ICO)\r\n    {\r\n        require(!stopped && msg.sender != owner);\r\n        require (now <= ico_enddate);\r\n        _price_tokn = calcprice();\r\n        no_of_tokens =((msg.value).mul(_price_tokn)).div(1000);\r\n        ETHcollected = ETHcollected.add(msg.value);\r\n        mintContract(msg.sender, no_of_tokens);\r\n       \r\n    }\r\n    \r\n    \r\n    function calcprice() view private returns (uint){\r\n         uint price_tokn;\r\n         \r\n        if(ETHcollected <= 246153 ether){\r\n            price_tokn = 40625;   // 1 ETH = 40.625 tokens\r\n        }\r\n        else  if(ETHcollected > 246153 ether){\r\n            price_tokn = 30111;   // 1 ETH = 30.111 tokens\r\n        }\r\n      \r\n        return price_tokn;\r\n    }\r\n    \r\n    \r\n    \r\n     function start_ICO() public onlyOwner atStage(Stages.NOTSTARTED)\r\n      {\r\n         \r\n          stage = Stages.ICO;\r\n          stopped = false;\r\n          ico_startdate = now;\r\n          ico_enddate = now + 35 days;\r\n         \r\n      }\r\n    \r\n    \r\n      //called by Owner to increase end date of ICO \r\n    function CrowdSale_ModifyEndDate(uint256 addICODays) external onlyOwner atStage(Stages.ICO)\r\n    {\r\n        \r\n        ico_enddate = ico_enddate.add(addICODays.mul(86400));\r\n\r\n    }\r\n    \r\n    // called by the owner, pause ICO\r\n    function CrowdSale_Halt() external onlyOwner atStage(Stages.ICO) {\r\n        stopped = true;\r\n        stage = Stages.PAUSED;\r\n    }\r\n\r\n    // called by the owner , resumes ICO\r\n    function CrowdSale_Resume() external onlyOwner atStage(Stages.PAUSED)\r\n    {\r\n        stopped = false;\r\n        stage = Stages.ICO;\r\n    }\r\n    \r\n     function CrowdSale_Finalize() external onlyOwner atStage(Stages.ICO)\r\n     {\r\n         require(now > ico_enddate);\r\n         stage = Stages.ENDED;\r\n         lockstatus = false;\r\n         mintingFinished = true;\r\n     }\r\n     \r\n   function CrowdSale_Change_ReceiveWallet(address New_Wallet_Address) external onlyOwner\r\n    {\r\n        require(New_Wallet_Address != 0x0);\r\n        ethFundMain = New_Wallet_Address;\r\n    }\r\n\r\n    // what is the total supply of the ech tokens\r\n     function totalSupply() public view returns (uint256 total_Supply) {\r\n         total_Supply = _totalsupply;\r\n     }\r\n    \r\n    // What is the balance of a particular account?\r\n     function balanceOf(address _owner)public view returns (uint256 balance) {\r\n         return balances[_owner];\r\n     }\r\n    \r\n    // Send _value amount of tokens from address _from to address _to\r\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n     // fees in sub-currencies; the command should fail unless the _from account has\r\n     // deliberately authorized the sender of the message via some mechanism; we propose\r\n     // these standardized APIs for approval:\r\n     function transferFrom( address _from, address _to, uint256 _amount )public returns (bool success) {\r\n     require( _to != 0x0);\r\n     require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\r\n     balances[_from] = (balances[_from]).sub(_amount);\r\n     allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\r\n     balances[_to] = (balances[_to]).add(_amount);\r\n    emit Transfer(_from, _to, _amount);\r\n     return true;\r\n         }\r\n    \r\n   // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     // If this function is called again it overwrites the current allowance with _value.\r\n     function approve(address _spender, uint256 _amount)public returns (bool success) {\r\n         require(!lockstatus);\r\n         require( _spender != 0x0);\r\n         allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n     }\r\n  \r\n     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\r\n         require( _owner != 0x0 && _spender !=0x0);\r\n         return allowed[_owner][_spender];\r\n   }\r\n\r\n     // Transfer the balance from owner's account to another account\r\n     function transfer(address _to, uint256 _amount)public returns (bool success) {\r\n         require(!lockstatus);\r\n        require( _to != 0x0);\r\n        require(balances[msg.sender] >= _amount && _amount >= 0);\r\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n         }\r\n    \r\n   \r\n  \r\n    //In case the ownership needs to be transferred\r\n\tfunction CrowdSale_AssignOwnership(address newOwner)public onlyOwner\r\n\t{\r\n\t    require( newOwner != 0x0);\r\n\t    balances[newOwner] = (balances[newOwner]).add(balances[owner]);\r\n\t    balances[owner] = 0;\r\n\t    owner = newOwner;\r\n\t    emit Transfer(msg.sender, newOwner, balances[newOwner]);\r\n\t}\r\n\r\n    \r\n    function forwardFunds() external onlyOwner {\r\n       \r\n          address myAddress = this;\r\n        ethFundMain.transfer(myAddress.balance);\r\n    }\r\n    \r\n   function  forwardSomeFunds(uint256 ETHQuantity) external onlyOwner {\r\n       uint256 fund = ETHQuantity * 10 ** 18;\r\n       ethFundMain.transfer(fund);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintedtokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHcollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CrowdSale_Halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_price_tokn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CrowdSale_Resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundMain\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico_enddate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ETHQuantity\",\"type\":\"uint256\"}],\"name\":\"forwardSomeFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CrowdSale_Finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forwardFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"CrowdSale_AssignOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"tokenQuantity\",\"type\":\"uint256\"}],\"name\":\"Manual_Mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"New_Wallet_Address\",\"type\":\"address\"}],\"name\":\"CrowdSale_Change_ReceiveWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addICODays\",\"type\":\"uint256\"}],\"name\":\"CrowdSale_ModifyEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockstatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap_MInt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WGP","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5ba3ef879f4d2ae078ec68f547f55fdde98e557edfac25242e75ae405c0e2efc"}]}