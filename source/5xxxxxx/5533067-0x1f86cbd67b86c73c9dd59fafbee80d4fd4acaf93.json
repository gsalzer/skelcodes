{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract IController is Pausable {\r\n    event SetContractInfo(bytes32 id, address contractAddress, bytes20 gitCommitHash);\r\n\r\n    function setContractInfo(bytes32 _id, address _contractAddress, bytes20 _gitCommitHash) external;\r\n    function updateController(bytes32 _id, address _controller) external;\r\n    function getContract(bytes32 _id) public view returns (address);\r\n}\r\n\r\ncontract IManager {\r\n    event SetController(address controller);\r\n    event ParameterUpdate(string param);\r\n\r\n    function setController(address _controller) external;\r\n}\r\n\r\ncontract Manager is IManager {\r\n    // Controller that contract is registered with\r\n    IController public controller;\r\n\r\n    // Check if sender is controller\r\n    modifier onlyController() {\r\n        require(msg.sender == address(controller));\r\n        _;\r\n    }\r\n\r\n    // Check if sender is controller owner\r\n    modifier onlyControllerOwner() {\r\n        require(msg.sender == controller.owner());\r\n        _;\r\n    }\r\n\r\n    // Check if controller is not paused\r\n    modifier whenSystemNotPaused() {\r\n        require(!controller.paused());\r\n        _;\r\n    }\r\n\r\n    // Check if controller is paused\r\n    modifier whenSystemPaused() {\r\n        require(controller.paused());\r\n        _;\r\n    }\r\n\r\n    function Manager(address _controller) public {\r\n        controller = IController(_controller);\r\n    }\r\n\r\n    /*\r\n     * @dev Set controller. Only callable by current controller\r\n     * @param _controller Controller contract address\r\n     */\r\n    function setController(address _controller) external onlyController {\r\n        controller = IController(_controller);\r\n\r\n        SetController(_controller);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ManagerProxyTarget\r\n * @dev The base contract that target contracts used by a proxy contract should inherit from\r\n * Note: Both the target contract and the proxy contract (implemented as ManagerProxy) MUST inherit from ManagerProxyTarget in order to guarantee\r\n * that both contracts have the same storage layout. Differing storage layouts in a proxy contract and target contract can\r\n * potentially break the delegate proxy upgradeability mechanism\r\n */\r\ncontract ManagerProxyTarget is Manager {\r\n    // Used to look up target contract address in controller's registry\r\n    bytes32 public targetContractId;\r\n}\r\n\r\n/**\r\n * @title ManagerProxy\r\n * @dev A proxy contract that uses delegatecall to execute function calls on a target contract using its own storage context.\r\n * The target contract is a Manager contract that is registered with the Controller.\r\n * Note: Both this proxy contract and its target contract MUST inherit from ManagerProxyTarget in order to guarantee\r\n * that both contracts have the same storage layout. Differing storage layouts in a proxy contract and target contract can\r\n * potentially break the delegate proxy upgradeability mechanism\r\n */\r\ncontract ManagerProxy is ManagerProxyTarget {\r\n    /**\r\n     * @dev ManagerProxy constructor. Invokes constructor of base Manager contract with provided Controller address.\r\n     * Also, sets the contract ID of the target contract that function calls will be executed on.\r\n     * @param _controller Address of Controller that this contract will be registered with\r\n     * @param _targetContractId contract ID of the target contract\r\n     */\r\n    function ManagerProxy(address _controller, bytes32 _targetContractId) public Manager(_controller) {\r\n        targetContractId = _targetContractId;\r\n    }\r\n\r\n    /**\r\n     * @dev Uses delegatecall to execute function calls on this proxy contract's target contract using its own storage context.\r\n     * This fallback function will look up the address of the target contract using the Controller and the target contract ID.\r\n     * It will then use the calldata for a function call as the data payload for a delegatecall on the target contract. The return value\r\n     * of the executed function call will also be returned\r\n     */\r\n    function() public payable {\r\n        address target = controller.getContract(targetContractId);\r\n        // Target contract must be registered\r\n        require(target > 0);\r\n\r\n        assembly {\r\n            // Solidity keeps a free memory pointer at position 0x40 in memory\r\n            let freeMemoryPtrPosition := 0x40\r\n            // Load the free memory pointer\r\n            let calldataMemoryOffset := mload(freeMemoryPtrPosition)\r\n            // Update free memory pointer to after memory space we reserve for calldata\r\n            mstore(freeMemoryPtrPosition, add(calldataMemoryOffset, calldatasize))\r\n            // Copy calldata (method signature and params of the call) to memory\r\n            calldatacopy(calldataMemoryOffset, 0x0, calldatasize)\r\n\r\n            // Call method on target contract using calldata which is loaded into memory\r\n            let ret := delegatecall(gas, target, calldataMemoryOffset, calldatasize, 0, 0)\r\n\r\n            // Load the free memory pointer\r\n            let returndataMemoryOffset := mload(freeMemoryPtrPosition)\r\n            // Update free memory pointer to after memory space we reserve for returndata\r\n            mstore(freeMemoryPtrPosition, add(returndataMemoryOffset, returndatasize))\r\n            // Copy returndata (result of the method invoked by the delegatecall) to memory\r\n            returndatacopy(returndataMemoryOffset, 0x0, returndatasize)\r\n\r\n            switch ret\r\n            case 0 {\r\n                // Method call failed - revert\r\n                // Return any error message stored in mem[returndataMemoryOffset..(returndataMemoryOffset + returndatasize)]\r\n                revert(returndataMemoryOffset, returndatasize)\r\n            } default {\r\n                // Return result of method call stored in mem[returndataMemoryOffset..(returndataMemoryOffset + returndatasize)]\r\n                return(returndataMemoryOffset, returndatasize)\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"targetContractId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"},{\"name\":\"_targetContractId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"param\",\"type\":\"string\"}],\"name\":\"ParameterUpdate\",\"type\":\"event\"}]","ContractName":"ManagerProxy","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a94e49bdbb0bfdb920ec1e441b1c408ead94c9bcfc6f6f33d2bb065ac61cbdd4dbe4b7adf6f3e7e6c6a3d1fe297cbf9a187092e4","Library":"","SwarmSource":"bzzr://fa5f0289c65e778974a9053cc084cca4243aeff0c7e397916217d67d48474045"}]}