{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\tlibrary SafeMath {\r\n\t    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t        if (a == 0) {\r\n\t            return 0;\r\n\t        }\r\n\t        uint256 c = a * b;\r\n\t        assert(c / a == b);\r\n\t        return c;\r\n\t    }\r\n\r\n\t    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t        uint256 c = a / b;\r\n\t        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t        return c;\r\n\t    }\r\n\r\n\t    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t        assert(b <= a);\r\n\t        return a - b;\r\n\t    }\r\n\r\n\t    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t        uint256 c = a + b;\r\n\t        assert(c >= a);\r\n\t        return c;\r\n\t    }\r\n\t}\r\n\r\n\tlibrary SafeBonus {\r\n\t    using SafeMath for uint256;\r\n\r\n\t    function addBonus(uint256 value, uint256 percentages) internal pure returns (uint256) {\r\n\t        return value.add(value.mul(percentages).div(100));\r\n\t    }\r\n\t}\r\n\r\n\tcontract Ownable {\r\n\t    address public owner;\r\n\r\n\r\n\t    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\t    /**\r\n\t     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\t     * account.\r\n\t     */\r\n\t    function Ownable() public {\r\n\t        owner = msg.sender;\r\n\t    }\r\n\r\n\r\n\t    /**\r\n\t     * @dev Throws if called by any account other than the owner.\r\n\t     */\r\n\t    modifier onlyOwner() {\r\n\t        require(msg.sender == owner);\r\n\t        _;\r\n\t    }\r\n\r\n\r\n\t    /**\r\n\t     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\t     * @param newOwner The address to transfer ownership to.\r\n\t     */\r\n\t    function transferOwnership(address newOwner) public onlyOwner {\r\n\t        require(newOwner != address(0));\r\n\t        OwnershipTransferred(owner, newOwner);\r\n\t        owner = newOwner;\r\n\t    }\r\n\t}\r\n\r\n\tinterface token {\r\n\t    function transfer(address receiver, uint amount) public;\r\n\t}\r\n\r\n\tcontract VesaStage2PreICO is Ownable {\r\n\t    using SafeMath for uint256;\r\n\t    using SafeBonus for uint256;\r\n\r\n\t    address public beneficiary;\r\n\t    uint8 public durationInDays = 31;\r\n\t    uint public fundingGoal = 100 ether;\r\n\t    uint public fundingGoalHardCap = 10000 ether;\r\n\t    uint public amountRaised;\r\n\t    uint public start;\r\n\t    uint public deadline;\r\n\t    uint public bonusPrice = 164285714300000; // 0.0001642857143 ETH\r\n\t    uint public bonusPriceDeltaPerHour = 3571428573000; // 0.000003571428573 ETH\r\n\t    uint public bonusPeriodDurationInHours = 10;\r\n\t    uint public price = 200000000000000; // 0.0002 ETH\r\n\t    uint public minSum = 200000000000000000; // 0.2 ETH\r\n\t    token public tokenReward;\r\n\t    mapping(address => uint256) public balanceOf;\r\n\t    bool public fundingGoalReached = false;\r\n\t    bool public crowdsaleClosed = false;\r\n\t    bool public allowRefund = false;\r\n\r\n\t    event GoalReached(address recipient, uint totalAmountRaised);\r\n\t    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\t    event BeneficiaryChanged(address indexed previousBeneficiary, address indexed newBeneficiary);\r\n\r\n\t    /**\r\n\t     * Constructor function\r\n\t     *\r\n\t     * Setup the owner\r\n\t     */\r\n\t    function VesaStage2PreICO() public {\r\n\t        beneficiary = 0x2bF8AeE3845af10f2bbEBbCF53EBd887c5021d14;\r\n\t        start = 1522155600;\r\n\t        deadline = start + durationInDays * 1 days;\r\n\t        tokenReward = token(0xb1c74c1D82824428e484072069041deD079eD921);\r\n\t    }\r\n\r\n\t    modifier afterDeadline() {\r\n\t        if (now >= deadline) \r\n\t            _;\r\n\t    }\r\n\r\n\t    function getPrice() public view returns (uint) {\r\n\t        require(!crowdsaleClosed);\r\n\t        if ( now >= (start + bonusPeriodDurationInHours.mul(1 hours))) {\r\n\t            return price;\r\n\t        } else {\r\n\t            uint hoursLeft = now.sub(start).div(1 hours);\r\n\t            return bonusPrice.add(bonusPriceDeltaPerHour.mul(hoursLeft));\r\n\t        }\r\n\t    }\r\n\r\n\t    function getBonus(uint amount) public view returns (uint) {\r\n\t        require(!crowdsaleClosed);\r\n\r\n\t        if (amount < 2857142857000000000) {return 0;}                                        // < 2.857142857\r\n\t        if (amount >= 2857142857000000000 && amount < 7142857143000000000) {return 35;}      // 2.857142857-7,142857143 ETH\r\n\t        if (amount >= 7142857143000000000 && amount < 14285714290000000000) {return 42;}     // 7,142857143-14,28571429 ETH\r\n\t        if (amount >= 14285714290000000000 && amount < 25000000000000000000) {return 47;}    // 14,28571429-25 ETH\r\n\t        if (amount >= 25000000000000000000 && amount < 85000000000000000000) {return 55;}    // 25-85 ETH\r\n\t        if (amount >= 85000000000000000000 && amount < 285000000000000000000) {return 65;}   // 85-285 ETH\r\n\t        if (amount >= 285000000000000000000) {return 75;}                                    // >285 ETH\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Fallback function\r\n\t     *\r\n\t     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n\t     */\r\n\t    function () public payable {\r\n\t        require(!crowdsaleClosed);\r\n\t        require(now > start);\r\n\t        require(msg.value > minSum);\r\n\t        uint amount = msg.value;\r\n\t        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\r\n\t        amountRaised = amountRaised.add(amount);\r\n\r\n\t        uint currentPrice = getPrice();\r\n\t        uint currentBonus = getBonus(amount);\r\n\r\n\t        uint tokensToTransfer = amount.mul(10 ** 18).div(currentPrice);\r\n\t        uint tokensToTransferWithBonuses = tokensToTransfer.addBonus(currentBonus);\r\n\r\n\t        tokenReward.transfer(msg.sender, tokensToTransferWithBonuses);\r\n\t        FundTransfer(msg.sender, amount, true);\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Check if goal was reached\r\n\t     *\r\n\t     * Checks if the goal or time limit has been reached and ends the campaign\r\n\t     */\r\n\t    function checkGoalReached() public afterDeadline {\r\n\t        if (amountRaised >= fundingGoal){\r\n\t            fundingGoalReached = true;\r\n\t            GoalReached(beneficiary, amountRaised);\r\n\t        }\r\n\t        crowdsaleClosed = true;\r\n\t    }\r\n\r\n\t    /**\r\n\t     * Withdraw the funds\r\n\t     *\r\n\t     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\r\n\t     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\r\n\t     * the amount they contributed.\r\n\t     */\r\n\t    function safeWithdrawal() public afterDeadline {\r\n\t        if (allowRefund) {\r\n\t            uint amount = balanceOf[msg.sender];\r\n\t            balanceOf[msg.sender] = 0;\r\n\t            if (amount > 0) {\r\n\t                if (msg.sender.send(amount)) {\r\n\t                    FundTransfer(msg.sender, amount, false);\r\n\t                } else {\r\n\t                    balanceOf[msg.sender] = amount;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t        if (beneficiary == msg.sender) {\r\n\t            if (beneficiary.send(amountRaised)) {\r\n\t                FundTransfer(beneficiary, amountRaised, false);\r\n\t                crowdsaleClosed = true;\r\n\t            } else {\r\n\t                //If we fail to send the funds to beneficiary, unlock funders balance\r\n\t                fundingGoalReached = false;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    function tokensWithdrawal(address receiver, uint amount) public onlyOwner {\r\n\t        tokenReward.transfer(receiver, amount);\r\n\t    }\r\n\r\n\t    function initializeRefund() public afterDeadline onlyOwner {\r\n\t    \tallowRefund = true;\r\n\t    }\r\n\r\n\t    function changeBeneficiary(address newBeneficiary) public onlyOwner {\r\n\t        require(newBeneficiary != address(0));\r\n\t        BeneficiaryChanged(beneficiary, newBeneficiary);\r\n\t        beneficiary = newBeneficiary;\r\n\t    }\r\n\r\n\t}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokensWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initializeRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"durationInDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPeriodDurationInHours\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPriceDeltaPerHour\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalHardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousBeneficiary\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"VesaStage2PreICO","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ba0c7a06a32ed7d9394d5ed1cba3896b47e4c97f71d60a1914f1c21430322dbd"}]}