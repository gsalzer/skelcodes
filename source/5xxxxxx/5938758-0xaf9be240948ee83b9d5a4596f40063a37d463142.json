{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract ERC20Interface {\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract SqueezerTokenLock {\r\n    ERC20Interface constant public SQR_TOKEN = ERC20Interface(0x6E7c9606Ac5BCC0123Ee97F8399E6F28aaFB70e0);\r\n    uint constant public SQR_TOKEN_DECIMALS = 18;\r\n    uint constant public SQR_TOKEN_MULTIPLIER = 10**SQR_TOKEN_DECIMALS;\r\n    address constant public PLATFORM_WALLET = 0xA76A464f409b5570a92b657E08FE23f9C4956068;\r\n    address constant public TEAM_WALLET = 0x20de53dA97703BCB465A44D6067775e80536237E;\r\n    uint constant public PLATFORM_MONTHLY = (56250000 * SQR_TOKEN_MULTIPLIER) / 12;\r\n    uint constant public TEAM_MONTHLY = (37500000 * SQR_TOKEN_MULTIPLIER) / 24;\r\n    uint96 constant AUG_15_2018 = 1534291200;\r\n    uint96 constant SEP_15_2018 = 1536969600;\r\n    uint96 constant OCT_15_2018 = 1539561600;\r\n    uint96 constant NOV_15_2018 = 1542240000;\r\n    uint96 constant DEC_15_2018 = 1544832000;\r\n    uint96 constant JAN_15_2019 = 1547510400;\r\n    uint96 constant FEB_15_2019 = 1550188800;\r\n    uint96 constant MAR_15_2019 = 1552608000;\r\n    uint96 constant APR_15_2019 = 1555286400;\r\n    uint96 constant MAY_15_2019 = 1557878400;\r\n    uint96 constant JUN_15_2019 = 1560556800;\r\n    uint96 constant JUL_15_2019 = 1563148800;\r\n    uint96 constant AUG_15_2019 = 1565827200;\r\n    uint96 constant SEP_15_2019 = 1568505600;\r\n    uint96 constant OCT_15_2019 = 1571097600;\r\n    uint96 constant NOV_15_2019 = 1573776000;\r\n    uint96 constant DEC_15_2019 = 1576368000;\r\n    uint96 constant JAN_15_2020 = 1579046400;\r\n    uint96 constant FEB_15_2020 = 1581724800;\r\n    uint96 constant MAR_15_2020 = 1584230400;\r\n    uint96 constant APR_15_2020 = 1586908800;\r\n    uint96 constant MAY_15_2020 = 1589500800;\r\n    uint96 constant JUN_15_2020 = 1592179200;\r\n    uint96 constant JUL_15_2020 = 1594771200;\r\n    uint constant public TOTAL_LOCKS = 37;\r\n    uint8 public unlockStep;\r\n\r\n    struct Lock {\r\n        uint96 releaseDate;\r\n        address receiver;\r\n        uint amount;\r\n    }\r\n\r\n    Lock[TOTAL_LOCKS] public locks;\r\n\r\n    event Released(uint step, uint date, address receiver, uint amount);\r\n\r\n    constructor() public {\r\n        uint index = 0;\r\n        _addLock(index++, AUG_15_2018, PLATFORM_WALLET, PLATFORM_MONTHLY);\r\n        _addLock(index++, AUG_15_2018, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, SEP_15_2018, PLATFORM_WALLET, PLATFORM_MONTHLY);\r\n        _addLock(index++, SEP_15_2018, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, OCT_15_2018, PLATFORM_WALLET, PLATFORM_MONTHLY);\r\n        _addLock(index++, OCT_15_2018, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, NOV_15_2018, PLATFORM_WALLET, PLATFORM_MONTHLY);\r\n        _addLock(index++, NOV_15_2018, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, DEC_15_2018, PLATFORM_WALLET, PLATFORM_MONTHLY);\r\n        _addLock(index++, DEC_15_2018, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, JAN_15_2019, PLATFORM_WALLET, PLATFORM_MONTHLY);\r\n        _addLock(index++, JAN_15_2019, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, FEB_15_2019, PLATFORM_WALLET, PLATFORM_MONTHLY);\r\n        _addLock(index++, FEB_15_2019, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, MAR_15_2019, PLATFORM_WALLET, PLATFORM_MONTHLY);\r\n        _addLock(index++, MAR_15_2019, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, APR_15_2019, PLATFORM_WALLET, PLATFORM_MONTHLY);\r\n        _addLock(index++, APR_15_2019, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, MAY_15_2019, PLATFORM_WALLET, PLATFORM_MONTHLY);\r\n        _addLock(index++, MAY_15_2019, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, JUN_15_2019, PLATFORM_WALLET, PLATFORM_MONTHLY);\r\n        _addLock(index++, JUN_15_2019, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, JUL_15_2019, PLATFORM_WALLET, PLATFORM_MONTHLY);\r\n        _addLock(index++, JUL_15_2019, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, AUG_15_2019, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, SEP_15_2019, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, OCT_15_2019, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, NOV_15_2019, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, DEC_15_2019, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, JAN_15_2020, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, FEB_15_2020, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, MAR_15_2020, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, APR_15_2020, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, MAY_15_2020, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, JUN_15_2020, TEAM_WALLET, TEAM_MONTHLY);\r\n        _addLock(index++, JUL_15_2020, TEAM_WALLET, TEAM_MONTHLY);\r\n    }\r\n\r\n    function _addLock(uint _index, uint96 _releaseDate, address _receiver, uint _amount) internal {\r\n        locks[_index].releaseDate = _releaseDate;\r\n        locks[_index].receiver = _receiver;\r\n        locks[_index].amount = _amount;\r\n    }\r\n\r\n    function unlock() public returns(bool) {\r\n        uint8 step = unlockStep;\r\n        bool success = false;\r\n        while (step < TOTAL_LOCKS) {\r\n            Lock memory lock = locks[step];\r\n            if (now < lock.releaseDate) {\r\n                break;\r\n            }\r\n            require(SQR_TOKEN.transfer(lock.receiver, lock.amount), 'Transfer failed');\r\n            delete locks[step];\r\n            emit Released(step, lock.releaseDate, lock.receiver, lock.amount);\r\n            success = true;\r\n            step++;\r\n        }\r\n        unlockStep = step;\r\n        return success;\r\n    }\r\n\r\n    function () public {\r\n        unlock();\r\n    }\r\n\r\n    function recoverTokens(ERC20Interface _token) public returns(bool) {\r\n        // Don't allow recovering SQR Token till the end of lock.\r\n        if (_token == SQR_TOKEN && (now < JUL_15_2020 || unlockStep != TOTAL_LOCKS)) {\r\n            return false;\r\n        }\r\n        return _token.transfer(PLATFORM_WALLET, _token.balanceOf(this));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SQR_TOKEN_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLATFORM_MONTHLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_MONTHLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SQR_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLATFORM_WALLET\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locks\",\"outputs\":[{\"name\":\"releaseDate\",\"type\":\"uint96\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SQR_TOKEN_MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_LOCKS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"step\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"}]","ContractName":"SqueezerTokenLock","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://87b7bb00d839f50c646810cec62d3deedcb3c9ddc615e2e27ed4bf06e5d84c12"}]}