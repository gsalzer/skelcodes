{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n *      See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an address access to this role\r\n     */\r\n    function add(Role storage role, address addr)\r\n    internal\r\n    {\r\n        role.bearer[addr] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an address' access to this role\r\n     */\r\n    function remove(Role storage role, address addr)\r\n    internal\r\n    {\r\n        role.bearer[addr] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an address has this role\r\n     * // reverts\r\n     */\r\n    function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n    {\r\n        require(has(role, addr));\r\n    }\r\n\r\n    /**\r\n     * @dev check if an address has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n    {\r\n        return role.bearer[addr];\r\n    }\r\n}\r\n\r\ncontract RBAC {\r\n    using Roles for Roles.Role;\r\n\r\n    mapping (string => Roles.Role) private roles;\r\n\r\n    event RoleAdded(address addr, string roleName);\r\n    event RoleRemoved(address addr, string roleName);\r\n\r\n    /**\r\n     * @dev reverts if addr does not have role\r\n     * @param addr address\r\n     * @param roleName the name of the role\r\n     * // reverts\r\n     */\r\n    function checkRole(address addr, string roleName)\r\n    view\r\n    public\r\n    {\r\n        roles[roleName].check(addr);\r\n    }\r\n\r\n    /**\r\n     * @dev determine if addr has role\r\n     * @param addr address\r\n     * @param roleName the name of the role\r\n     * @return bool\r\n     */\r\n    function hasRole(address addr, string roleName)\r\n    view\r\n    public\r\n    returns (bool)\r\n    {\r\n        return roles[roleName].has(addr);\r\n    }\r\n\r\n    /**\r\n     * @dev add a role to an address\r\n     * @param addr address\r\n     * @param roleName the name of the role\r\n     */\r\n    function addRole(address addr, string roleName)\r\n    internal\r\n    {\r\n        roles[roleName].add(addr);\r\n        emit RoleAdded(addr, roleName);\r\n    }\r\n\r\n    /**\r\n     * @dev remove a role from an address\r\n     * @param addr address\r\n     * @param roleName the name of the role\r\n     */\r\n    function removeRole(address addr, string roleName)\r\n    internal\r\n    {\r\n        roles[roleName].remove(addr);\r\n        emit RoleRemoved(addr, roleName);\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n     * @param roleName the name of the role\r\n     * // reverts\r\n     */\r\n    modifier onlyRole(string roleName)\r\n    {\r\n        checkRole(msg.sender, roleName);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n     * @param roleNames the names of the roles to scope access to\r\n     * // reverts\r\n     *\r\n     * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n     *  see: https://github.com/ethereum/solidity/issues/2467\r\n     */\r\n    // modifier onlyRoles(string[] roleNames) {\r\n    //     bool hasAnyRole = false;\r\n    //     for (uint8 i = 0; i < roleNames.length; i++) {\r\n    //         if (hasRole(msg.sender, roleNames[i])) {\r\n    //             hasAnyRole = true;\r\n    //             break;\r\n    //         }\r\n    //     }\r\n\r\n    //     require(hasAnyRole);\r\n\r\n    //     _;\r\n    // }\r\n}\r\n\r\ncontract RBACWithAdmin is RBAC {\r\n    /**\r\n     * A constant role name for indicating admins.\r\n     */\r\n    string public constant ROLE_ADMIN = \"admin\";\r\n\r\n    /**\r\n     * @dev modifier to scope access to admins\r\n     * // reverts\r\n     */\r\n    modifier onlyAdmin()\r\n    {\r\n        checkRole(msg.sender, ROLE_ADMIN);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev constructor. Sets msg.sender as admin by default\r\n     */\r\n    function RBACWithAdmin()\r\n    public\r\n    {\r\n        addRole(msg.sender, ROLE_ADMIN);\r\n    }\r\n\r\n    /**\r\n     * @dev add a role to an address\r\n     * @param addr address\r\n     * @param roleName the name of the role\r\n     */\r\n    function adminAddRole(address addr, string roleName)\r\n    onlyAdmin\r\n    public\r\n    {\r\n        addRole(addr, roleName);\r\n    }\r\n\r\n    /**\r\n     * @dev remove a role from an address\r\n     * @param addr address\r\n     * @param roleName the name of the role\r\n     */\r\n    function adminRemoveRole(address addr, string roleName)\r\n    onlyAdmin\r\n    public\r\n    {\r\n        removeRole(addr, roleName);\r\n    }\r\n}\r\n\r\ncontract NbtToken is StandardToken, Ownable, RBACWithAdmin {\r\n\r\n    /*** EVENTS ***/\r\n\r\n    event ExchangeableTokensInc(address indexed from, uint256 amount);\r\n    event ExchangeableTokensDec(address indexed to, uint256 amount);\r\n\r\n    event CirculatingTokensInc(address indexed from, uint256 amount);\r\n    event CirculatingTokensDec(address indexed to, uint256 amount);\r\n\r\n    event SaleableTokensInc(address indexed from, uint256 amount);\r\n    event SaleableTokensDec(address indexed to, uint256 amount);\r\n\r\n    event StockTokensInc(address indexed from, uint256 amount);\r\n    event StockTokensDec(address indexed to, uint256 amount);\r\n\r\n    event BbAddressUpdated(address indexed ethereum_address, string bb_address);\r\n\r\n    /*** CONSTANTS ***/\r\n\r\n    string public name = 'NiceBytes';\r\n    string public symbol = 'NBT';\r\n\r\n    uint256 public decimals = 8;\r\n\r\n    uint256 public INITIAL_SUPPLY = 10000000000 * 10**decimals; // One time total supply\r\n    uint256 public AIRDROP_START_AT = 1525780800; // May 8, 12:00 UTC\r\n    uint256 public AIRDROPS_COUNT = 82;\r\n    uint256 public AIRDROPS_PERIOD = 86400;\r\n    uint256 public CIRCULATING_BASE = 2000000000 * 10**decimals;\r\n    uint256 public MAX_AIRDROP_VOLUME = 2; // %\r\n    uint256 public INITIAL_EXCHANGEABLE_TOKENS_VOLUME = 1200000000 * 10**decimals;\r\n    uint256 public MAX_AIRDROP_TOKENS = 8000000000 * 10**decimals; // 8 billions\r\n    uint256 public MAX_SALE_VOLUME = 800000000 * 10**decimals;\r\n    uint256 public EXCHANGE_COMMISSION = 200 * 10**decimals; // NBT\r\n    uint256 public MIN_TOKENS_TO_EXCHANGE = 1000 * 10**decimals; // should be bigger than EXCHANGE_COMMISSION\r\n    uint256 public EXCHANGE_RATE = 1000;\r\n    string constant ROLE_EXCHANGER = \"exchanger\";\r\n\r\n\r\n    /*** STORAGE ***/\r\n\r\n    uint256 public exchangeableTokens;\r\n    uint256 public exchangeableTokensFromSale;\r\n    uint256 public exchangeableTokensFromStock;\r\n    uint256 public circulatingTokens;\r\n    uint256 public circulatingTokensFromSale;\r\n    uint256 public saleableTokens;\r\n    uint256 public stockTokens;\r\n    address public crowdsale;\r\n    address public exchange_commission_wallet;\r\n\r\n    mapping(address => uint256) exchangeBalances;\r\n    mapping(address => string) bbAddresses;\r\n\r\n    /*** MODIFIERS ***/\r\n\r\n    modifier onlyAdminOrExchanger()\r\n    {\r\n        require(\r\n            hasRole(msg.sender, ROLE_ADMIN) ||\r\n            hasRole(msg.sender, ROLE_EXCHANGER)\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyCrowdsale()\r\n    {\r\n        require(\r\n            address(msg.sender) == address(crowdsale)\r\n        );\r\n        _;\r\n    }\r\n\r\n    /*** CONSTRUCTOR ***/\r\n\r\n    function NbtToken() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[this] = INITIAL_SUPPLY;\r\n        stockTokens = INITIAL_SUPPLY;\r\n        emit StockTokensInc(address(0), INITIAL_SUPPLY);\r\n        addRole(msg.sender, ROLE_EXCHANGER);\r\n    }\r\n\r\n    /*** PUBLIC AND EXTERNAL FUNCTIONS ***/\r\n\r\n    /*** getters  ***/\r\n\r\n    function getBbAddress(address _addr) public view returns (string _bbAddress) {\r\n        return bbAddresses[_addr];\r\n    }\r\n\r\n    function howMuchTokensAvailableForExchangeFromStock() public view returns (uint256) {\r\n        uint256 _volume = INITIAL_EXCHANGEABLE_TOKENS_VOLUME;\r\n        uint256 _airdrops = 0;\r\n\r\n        if (now > AIRDROP_START_AT) {\r\n            _airdrops = (now.sub(AIRDROP_START_AT)).div(AIRDROPS_PERIOD);\r\n            _airdrops = _airdrops.add(1);\r\n        }\r\n\r\n        if (_airdrops > AIRDROPS_COUNT) {\r\n            _airdrops = AIRDROPS_COUNT;\r\n        }\r\n\r\n        uint256 _from_airdrops = 0;\r\n        uint256 _base = CIRCULATING_BASE;\r\n        for (uint256 i = 1; i <= _airdrops; i++) {\r\n            _from_airdrops = _from_airdrops.add(_base.mul(MAX_AIRDROP_VOLUME).div(100));\r\n            _base = _base.add(_base.mul(MAX_AIRDROP_VOLUME).div(100));\r\n        }\r\n        if (_from_airdrops > MAX_AIRDROP_TOKENS) {\r\n            _from_airdrops = MAX_AIRDROP_TOKENS;\r\n        }\r\n\r\n        _volume = _volume.add(_from_airdrops);\r\n\r\n        return _volume;\r\n    }\r\n\r\n    /*** setters  ***/\r\n\r\n    function setBbAddress(string _bbAddress) public returns (bool) {\r\n        bbAddresses[msg.sender] = _bbAddress;\r\n        emit BbAddressUpdated(msg.sender, _bbAddress);\r\n        return true;\r\n    }\r\n\r\n    function setCrowdsaleAddress(address _addr) onlyAdmin public returns (bool) {\r\n        require(_addr != address(0) && _addr != address(this));\r\n        crowdsale = _addr;\r\n        return true;\r\n    }\r\n\r\n    function setExchangeCommissionAddress(address _addr) onlyAdmin public returns (bool) {\r\n        require(_addr != address(0) && _addr != address(this));\r\n        exchange_commission_wallet = _addr;\r\n        return true;\r\n    }\r\n\r\n    /*** sale methods  ***/\r\n\r\n    // For balancing of the sale limit between two networks\r\n    function moveTokensFromSaleToExchange(uint256 _amount) onlyAdminOrExchanger public returns (bool) {\r\n        require(_amount <= balances[crowdsale]);\r\n        balances[crowdsale] = balances[crowdsale].sub(_amount);\r\n        saleableTokens = saleableTokens.sub(_amount);\r\n        exchangeableTokensFromSale = exchangeableTokensFromSale.add(_amount);\r\n        balances[address(this)] = balances[address(this)].add(_amount);\r\n        exchangeableTokens = exchangeableTokens.add(_amount);\r\n        emit SaleableTokensDec(address(this), _amount);\r\n        emit ExchangeableTokensInc(address(crowdsale), _amount);\r\n        return true;\r\n    }\r\n\r\n    function moveTokensFromSaleToCirculating(address _to, uint256 _amount) onlyCrowdsale public returns (bool) {\r\n        saleableTokens = saleableTokens.sub(_amount);\r\n        circulatingTokensFromSale = circulatingTokensFromSale.add(_amount) ;\r\n        circulatingTokens = circulatingTokens.add(_amount) ;\r\n        emit SaleableTokensDec(_to, _amount);\r\n        emit CirculatingTokensInc(address(crowdsale), _amount);\r\n        return true;\r\n    }\r\n\r\n    /*** stock methods  ***/\r\n\r\n    function moveTokensFromStockToExchange(uint256 _amount) onlyAdminOrExchanger public returns (bool) {\r\n        require(_amount <= stockTokens);\r\n        require(exchangeableTokensFromStock + _amount <= howMuchTokensAvailableForExchangeFromStock());\r\n        stockTokens = stockTokens.sub(_amount);\r\n        exchangeableTokens = exchangeableTokens.add(_amount);\r\n        exchangeableTokensFromStock = exchangeableTokensFromStock.add(_amount);\r\n        emit StockTokensDec(address(this), _amount);\r\n        emit ExchangeableTokensInc(address(this), _amount);\r\n        return true;\r\n    }\r\n\r\n    function moveTokensFromStockToSale(uint256 _amount) onlyAdminOrExchanger public returns (bool) {\r\n        require(crowdsale != address(0) && crowdsale != address(this));\r\n        require(_amount <= stockTokens);\r\n        require(_amount + exchangeableTokensFromSale + saleableTokens + circulatingTokensFromSale <= MAX_SALE_VOLUME);\r\n\r\n        stockTokens = stockTokens.sub(_amount);\r\n        saleableTokens = saleableTokens.add(_amount);\r\n        balances[address(this)] = balances[address(this)].sub(_amount);\r\n        balances[crowdsale] = balances[crowdsale].add(_amount);\r\n\r\n        emit Transfer(address(this), crowdsale, _amount);\r\n        emit StockTokensDec(address(crowdsale), _amount);\r\n        emit SaleableTokensInc(address(this), _amount);\r\n        return true;\r\n    }\r\n\r\n    /*** exchange methods  ***/\r\n\r\n    function getTokensFromExchange(address _to, uint256 _amount) onlyAdminOrExchanger public returns (bool) {\r\n        require(_amount <= exchangeableTokens);\r\n        require(_amount <= balances[address(this)]);\r\n\r\n        exchangeableTokens = exchangeableTokens.sub(_amount);\r\n        circulatingTokens = circulatingTokens.add(_amount);\r\n\r\n        balances[address(this)] = balances[address(this)].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        emit Transfer(address(this), _to, _amount);\r\n        emit ExchangeableTokensDec(_to, _amount);\r\n        emit CirculatingTokensInc(address(this), _amount);\r\n        return true;\r\n    }\r\n\r\n    function sendTokensToExchange(uint256 _amount) public returns (bool) {\r\n        require(_amount <= balances[msg.sender]);\r\n        require(_amount >= MIN_TOKENS_TO_EXCHANGE);\r\n        require(!stringsEqual(bbAddresses[msg.sender], ''));\r\n        require(exchange_commission_wallet != address(0) && exchange_commission_wallet != address(this));\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount); // ! before sub(_commission)\r\n\r\n        uint256 _commission = EXCHANGE_COMMISSION + _amount % EXCHANGE_RATE;\r\n        _amount = _amount.sub(_commission);\r\n\r\n        circulatingTokens = circulatingTokens.sub(_amount);\r\n        exchangeableTokens = exchangeableTokens.add(_amount);\r\n        exchangeBalances[msg.sender] = exchangeBalances[msg.sender].add(_amount);\r\n\r\n        balances[address(this)] = balances[address(this)].add(_amount);\r\n        balances[exchange_commission_wallet] = balances[exchange_commission_wallet].add(_commission);\r\n\r\n        emit Transfer(msg.sender, address(exchange_commission_wallet), _commission);\r\n        emit Transfer(msg.sender, address(this), _amount);\r\n        emit CirculatingTokensDec(address(this), _amount);\r\n        emit ExchangeableTokensInc(msg.sender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function exchangeBalanceOf(address _addr) public view returns (uint256 _tokens) {\r\n        return exchangeBalances[_addr];\r\n    }\r\n\r\n    function decExchangeBalanceOf(address _addr, uint256 _amount) onlyAdminOrExchanger public returns (bool) {\r\n        require (exchangeBalances[_addr] > 0);\r\n        require (exchangeBalances[_addr] >= _amount);\r\n        exchangeBalances[_addr] = exchangeBalances[_addr].sub(_amount);\r\n        return true;\r\n    }\r\n\r\n    /*** INTERNAL FUNCTIONS ***/\r\n\r\n    function stringsEqual(string storage _a, string memory _b) internal view returns (bool) {\r\n        bytes storage a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        if (a.length != b.length)\r\n            return false;\r\n        for (uint256 i = 0; i < a.length; i ++)\r\n            if (a[i] != b[i])\r\n                return false;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CIRCULATING_BASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXCHANGE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"moveTokensFromSaleToExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AIRDROPS_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setCrowdsaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bbAddress\",\"type\":\"string\"}],\"name\":\"setBbAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getBbAddress\",\"outputs\":[{\"name\":\"_bbAddress\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"exchangeBalanceOf\",\"outputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendTokensToExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokensFromExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setExchangeCommissionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_AIRDROP_VOLUME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_EXCHANGEABLE_TOKENS_VOLUME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"adminRemoveRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AIRDROPS_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_TOKENS_TO_EXCHANGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"moveTokensFromStockToSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SALE_VOLUME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"moveTokensFromSaleToCirculating\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulatingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decExchangeBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"adminAddRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXCHANGE_COMMISSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange_commission_wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"howMuchTokensAvailableForExchangeFromStock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulatingTokensFromSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeableTokensFromSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stockTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_AIRDROP_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeableTokensFromStock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AIRDROP_START_AT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"moveTokensFromStockToExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExchangeableTokensInc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExchangeableTokensDec\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CirculatingTokensInc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CirculatingTokensDec\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SaleableTokensInc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SaleableTokensDec\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StockTokensInc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StockTokensDec\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ethereum_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bb_address\",\"type\":\"string\"}],\"name\":\"BbAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"NbtToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b43b29b34c59986b13e173b7360dd68cf23192b09bdd53d17f862dcfc85f52e4"}]}