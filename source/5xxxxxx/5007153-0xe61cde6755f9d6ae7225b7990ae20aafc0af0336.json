{"status":"1","message":"OK","result":[{"SourceCode":"contract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Contract for object that have an owner\r\n */\r\ncontract Owned {\r\n    /**\r\n     * Contract owner address\r\n     */\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev Delegate contract to another person\r\n     * @param _owner New owner address\r\n     */\r\n    function setOwner(address _owner) onlyOwner\r\n    { owner = _owner; }\r\n\r\n    /**\r\n     * @dev Owner check modifier\r\n     */\r\n    modifier onlyOwner { if (msg.sender != owner) throw; _; }\r\n}\r\n\r\ncontract TRMCrowdsale is Owned {\r\n    using SafeMath for uint;\r\n\r\n    event Print(string _message, address _msgSender);\r\n\r\n    uint public ETHUSD = 100000; //in cent\r\n    address manager = 0xf5c723B7Cc90eaA3bEec7B05D6bbeBCd9AFAA69a;\r\n    address ETHUSDdemon;\r\n    address public multisig = 0xc2CDcE18deEcC1d5274D882aEd0FB082B813FFE8;\r\n    address public addressOfERC20Token = 0x8BeF0141e8D078793456C4b74f7E60640f618594;\r\n    ERC20 public token;\r\n\r\n    uint public startICO = now;\r\n    uint public endICO = 1519776000; // Wed, 28 Feb 2018 00:00:00 GMT\r\n    uint public endPostICO = 1522454400; //  Sat, 31 Mar 2018 00:00:00 GMT\r\n\r\n    uint public tokenIcoUsdCentPrice = 550;\r\n    uint public tokenPostIcoUsdCentPrice = 650;\r\n\r\n    uint public bonusWeiAmount = 29900000000000000000; //29.9 ETH\r\n    uint public smallBonusPercent = 27;\r\n    uint public bigBonusPercent = 37;\r\n\r\n\r\n    function TRMCrowdsale(){\r\n        owner = msg.sender;\r\n        token = ERC20(addressOfERC20Token);\r\n        ETHUSDdemon = msg.sender;\r\n\r\n    }\r\n\r\n    function tokenBalance() constant returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n \r\n    function setAddressOfERC20Token(address _addressOfERC20Token) onlyOwner {\r\n        addressOfERC20Token = _addressOfERC20Token;\r\n        token = ERC20(addressOfERC20Token);\r\n\r\n    }\r\n\r\n    function transferToken(address _to, uint _value) returns (bool) {\r\n        require(msg.sender == manager);\r\n        return token.transfer(_to, _value);\r\n    }\r\n\r\n    function() payable {\r\n        doPurchase();\r\n    }\r\n\r\n    function doPurchase() payable {\r\n        require(now >= startICO && now < endPostICO);\r\n\r\n        require(msg.value > 0);\r\n\r\n        uint sum = msg.value;\r\n\r\n        uint tokensAmount;\r\n\r\n        if(now < endICO){\r\n            tokensAmount = sum.mul(ETHUSD).div(tokenIcoUsdCentPrice).div(10000000000);\r\n        } else {\r\n            tokensAmount = sum.mul(ETHUSD).div(tokenPostIcoUsdCentPrice).div(10000000000);\r\n        }\r\n\r\n\r\n        //Bonus\r\n        if(sum < bonusWeiAmount){\r\n           tokensAmount = tokensAmount.mul(100+smallBonusPercent).div(100);\r\n        } else{\r\n           tokensAmount = tokensAmount.mul(100+bigBonusPercent).div(100);\r\n        }\r\n\r\n        if(tokenBalance() > tokensAmount){\r\n            require(token.transfer(msg.sender, tokensAmount));\r\n            multisig.transfer(msg.value);\r\n        } else {\r\n            manager.transfer(msg.value);\r\n            Print(\"Tokens will be released manually\", msg.sender);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function setETHUSD( uint256 _newPrice ) {\r\n        require((msg.sender == ETHUSDdemon)||(msg.sender == manager));\r\n        ETHUSD = _newPrice;\r\n    }\r\n\r\n    function setBonus( uint256 _bonusWeiAmount, uint256 _smallBonusPercent, uint256 _bigBonusPercent ) {\r\n        require(msg.sender == manager);\r\n\r\n        bonusWeiAmount = _bonusWeiAmount;\r\n        smallBonusPercent = _smallBonusPercent;\r\n        bigBonusPercent = _bigBonusPercent;\r\n    }\r\n    \r\n    function setETHUSDdemon(address _ETHUSDdemon) \r\n    { \r\n        require(msg.sender == manager);\r\n        ETHUSDdemon = _ETHUSDdemon; \r\n        \r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_ETHUSDdemon\",\"type\":\"address\"}],\"name\":\"setETHUSDdemon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bigBonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIcoUsdCentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smallBonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endPostICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressOfERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPostIcoUsdCentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doPurchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusWeiAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressOfERC20Token\",\"type\":\"address\"}],\"name\":\"setAddressOfERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setETHUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bonusWeiAmount\",\"type\":\"uint256\"},{\"name\":\"_smallBonusPercent\",\"type\":\"uint256\"},{\"name\":\"_bigBonusPercent\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"}],\"name\":\"Print\",\"type\":\"event\"}]","ContractName":"TRMCrowdsale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a28ea92340e8e7dd225adbf44956dec3734c62f8fdb8628401f6bd97c61c1f9e"}]}