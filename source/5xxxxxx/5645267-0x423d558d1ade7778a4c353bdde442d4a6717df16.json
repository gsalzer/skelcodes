{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20\r\n{\r\n    function totalSupply()public view returns(uint total_Supply);\r\n    function balanceOf(address who)public view returns(uint256);\r\n    function allowance(address owner, address spender)public view returns(uint);\r\n    function transferFrom(address from, address to, uint value)public returns(bool ok);\r\n    function approve(address spender, uint value)public returns(bool ok);\r\n    function transfer(address to, uint value)public returns(bool ok);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n\r\n\r\ncontract YettaToken is ERC20\r\n{\r\n    using SafeMath for uint256;\r\n\r\n   \r\n    uint256 constant public TOKEN_DECIMALS = 10 ** 8;\r\n    uint256 constant public ETH_DECIMALS = 10 ** 18;\r\n    uint256 public TotalCrowdsaleSupply = 25000000; //25 Million\r\n    uint256 public TotalOwnerSupply = 60000000;     //60 Million  \r\n    uint256 public BonusPoolSupply = 15000000;  //15 Million\r\n   \r\n\r\n    // Name of the token\r\n    string public constant name = \"Yetta Token\";\r\n\r\n    // Symbol of token\r\n    string public constant symbol = \"YET\";\r\n\r\n    uint8 public constant decimals = 8;\r\n\r\n    // 100 Million total supply // muliplies dues to decimal precision\r\n    uint public TotalTokenSupply = 100000000 * TOKEN_DECIMALS;  //100 Million\r\n\r\n    // Owner of this contract\r\n    address public owner;\r\n    \r\n    address public bonusPool = 0xf6148aD4C8b2138B9029301310074F391ea4529D;\r\n    address public YettaCrowdSale;\r\n    bool public mintedCrowdsale;\r\n    \r\n     bool public lockstatus; \r\n \r\n     uint public Currenttask;\r\n     string public Currentproposal;\r\n \r\n    mapping(address => mapping(address => uint)) allowed;\r\n    mapping(uint =>mapping(address => bool)) Task;\r\n    mapping(uint =>bool) public acceptProp;\r\n    mapping(uint =>uint256) public agreed;\r\n    mapping(uint =>uint256) public disagreed;\r\n  \r\n    mapping(address => uint) balances;\r\n \r\n    enum VotingStages {\r\n        VOTING_NOTSTARTED,\r\n        VOTING_OPEN,\r\n        VOTING_CLOSED\r\n    }\r\n\r\n    VotingStages public votingstage;\r\n\r\n    modifier atStage(VotingStages _stage) {\r\n        require(votingstage == _stage);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    constructor() public\r\n    {\r\n       \r\n        owner = msg.sender;\r\n        lockstatus = true;\r\n        votingstage = VotingStages.VOTING_NOTSTARTED;\r\n        balances[owner] = TotalOwnerSupply.mul(TOKEN_DECIMALS);\r\n         balances[bonusPool] = BonusPoolSupply.mul(TOKEN_DECIMALS);\r\n        emit Transfer(0, owner, balances[owner]);\r\n        emit Transfer(0, bonusPool, balances[bonusPool]);\r\n    }\r\n    \r\n    function Bonus_PoolTransfer(address receiver, uint256 tokenQuantity) external onlyOwner {\r\n      \r\n             require( receiver != 0x0);\r\n             require(balances[bonusPool] >= tokenQuantity && tokenQuantity >= 0);\r\n             balances[bonusPool] = (balances[bonusPool]).sub(tokenQuantity);\r\n             balances[receiver] = balances[receiver].add(tokenQuantity);\r\n            \r\n             emit Transfer(0, receiver, tokenQuantity);\r\n    }\r\n    \r\n    function mint_Crowdsale(address _YettaCrowdSale) public onlyOwner{\r\n        require(!mintedCrowdsale);\r\n        YettaCrowdSale = _YettaCrowdSale;\r\n        balances[YettaCrowdSale] = balances[YettaCrowdSale].add(TotalCrowdsaleSupply.mul(TOKEN_DECIMALS));\r\n        mintedCrowdsale = true;\r\n        emit Transfer(0,YettaCrowdSale,  balances[YettaCrowdSale]);\r\n    }\r\n\r\n   function startVoting(uint newtask, string _currentproposal) external onlyOwner\r\n    {\r\n        votingstage = VotingStages.VOTING_OPEN;\r\n        Currenttask = newtask;\r\n        Currentproposal = _currentproposal;\r\n    }\r\n    \r\n    // Function to check that if Investor already voted for a particular task or not, \r\n    //if voted:  true, else: false\r\n     function VotedForProposal(uint _task, address spender) public constant returns(bool)\r\n    {\r\n        require(spender != 0x0);\r\n        return Task[_task][spender];\r\n    }\r\n\r\n     function submitVote(uint _task, bool proposal) public atStage(VotingStages.VOTING_OPEN){\r\n        require(Currenttask == _task);\r\n        require(balanceOf(msg.sender)>0); \r\n        require(Task[_task][msg.sender] ==false); // Checks if already voted for a particular task\r\n         if(proposal == true){\r\n            agreed[_task] = agreed[_task].add(balanceOf(msg.sender));\r\n            Task[_task][msg.sender] = true;\r\n        }\r\n        else{\r\n            disagreed[_task] = disagreed[_task].add(balanceOf(msg.sender));\r\n            Task[_task][msg.sender] = true;\r\n        }\r\n       \r\n            }\r\n            \r\n    function finaliseVoting(uint _currenttask) external onlyOwner atStage(VotingStages.VOTING_OPEN){\r\n            require(Currenttask == _currenttask);\r\n                if(agreed[_currenttask] <  disagreed[_currenttask]){\r\n                    \r\n                    acceptProp[_currenttask]=false;\r\n                    \r\n                }\r\n                \r\n                else{\r\n                   \r\n                     acceptProp[_currenttask]=true;\r\n                }\r\n                votingstage = VotingStages.VOTING_CLOSED;\r\n            }\r\n\r\n\r\n/* YET tokens will be unlocked after completion of the Yetta Blockchain\r\nICO so users could upgrade to the new platform to continue participation in\r\ngovernance of the Yetta Blockchain project. */\r\n    function removeLocking(bool RunningStatusLock) external onlyOwner\r\n    {\r\n        lockstatus = RunningStatusLock;\r\n    }\r\n\r\n    // what is the total supply YET token\r\n    function totalSupply() public view returns(uint256 total_Supply) {\r\n        total_Supply = TotalTokenSupply;\r\n    }\r\n\r\n    // What is the balance of a particular account?\r\n    function balanceOf(address token_Owner)public constant returns(uint256 balance) {\r\n        return balances[token_Owner];\r\n    }\r\n\r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(address from_address, address to_address, uint256 tokens)public returns(bool success)\r\n    {\r\n        require(to_address != 0x0);\r\n        require(balances[from_address] >= tokens && allowed[from_address][msg.sender] >= tokens && tokens >= 0);\r\n        balances[from_address] = (balances[from_address]).sub(tokens);\r\n        allowed[from_address][msg.sender] = (allowed[from_address][msg.sender]).sub(tokens);\r\n        balances[to_address] = (balances[to_address]).add(tokens);\r\n        emit Transfer(from_address, to_address, tokens);\r\n        return true;\r\n    }\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address spender, uint256 tokens)public returns(bool success)\r\n    {\r\n        require(spender != 0x0);\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address token_Owner, address spender) public constant returns(uint256 remaining)\r\n    {\r\n        require(token_Owner != 0x0 && spender != 0x0);\r\n        return allowed[token_Owner][spender];\r\n    }\r\n\r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address to_address, uint256 tokens)public returns(bool success)\r\n    {\r\n        if ( msg.sender == owner) {\r\n            require( to_address != 0x0);\r\n            require(balances[owner] >= tokens && tokens >= 0);\r\n            balances[owner] = balances[owner].sub(tokens);\r\n            balances[to_address] = (balances[to_address]).add(tokens);\r\n            emit Transfer(msg.sender, to_address, tokens);\r\n            return true;\r\n        }\r\n        else\r\n        if (!lockstatus && msg.sender != owner) {\r\n        require( to_address != 0x0);\r\n        require(balances[msg.sender] >= tokens && tokens >= 0);\r\n        balances[msg.sender] = (balances[msg.sender]).sub(tokens);\r\n        balances[to_address] = (balances[to_address]).add(tokens);\r\n        emit Transfer(msg.sender, to_address, tokens);\r\n        return true;\r\n        }\r\n        else{\r\n            revert();\r\n        } \r\n    }\r\n    \r\n     function transferby(address _to,uint256 _amount) external onlyOwner returns(bool success) {\r\n        require( _to != 0x0); \r\n        require( balances[YettaCrowdSale] >= _amount && _amount > 0);\r\n        balances[YettaCrowdSale] = ( balances[YettaCrowdSale]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        emit Transfer(address(this), _to, _amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintedCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_address\",\"type\":\"address\"},{\"name\":\"to_address\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Currentproposal\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_YettaCrowdSale\",\"type\":\"address\"}],\"name\":\"mint_Crowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_task\",\"type\":\"uint256\"},{\"name\":\"proposal\",\"type\":\"bool\"}],\"name\":\"submitVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token_Owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disagreed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferby\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"RunningStatusLock\",\"type\":\"bool\"}],\"name\":\"removeLocking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BonusPoolSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"acceptProp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to_address\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalCrowdsaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currenttask\",\"type\":\"uint256\"}],\"name\":\"finaliseVoting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newtask\",\"type\":\"uint256\"},{\"name\":\"_currentproposal\",\"type\":\"string\"}],\"name\":\"startVoting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingstage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalOwnerSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_task\",\"type\":\"uint256\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"VotedForProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"tokenQuantity\",\"type\":\"uint256\"}],\"name\":\"Bonus_PoolTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token_Owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"YettaCrowdSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agreed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Currenttask\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockstatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"YettaToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0cea45f2284244838d0b3832b6fba876c398c700572027df974ea5d5b436d5a3"}]}