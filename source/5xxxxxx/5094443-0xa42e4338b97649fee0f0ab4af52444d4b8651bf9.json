{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract MultiSigERC20Token\r\n{\r\n    uint constant public MAX_OWNER_COUNT = 50;\r\n\t\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 8;\r\n    uint256 public totalSupply;\r\n\taddress[] public owners;\r\n\taddress[] public admins;\r\n\t\r\n\t// Variables for multisig\r\n\tuint256 public required;\r\n    uint public transactionCount;\r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event FrozenFunds(address target, bool frozen);\r\n\tevent Confirmation(address indexed sender, uint indexed transactionId);\r\n    event Revocation(address indexed sender, uint indexed transactionId);\r\n    event Submission(uint indexed transactionId,string operation, address source, address destination, uint256 value, string reason);\r\n    event Execution(uint indexed transactionId);\r\n    event ExecutionFailure(uint indexed transactionId);\r\n    event Deposit(address indexed sender, uint value);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n    event AdminAddition(address indexed admin);\r\n    event AdminRemoval(address indexed admin);\r\n    event RequirementChange(uint required);\r\n\t\r\n\t// Mappings\r\n    mapping (uint => MetaTransaction) public transactions;\r\n    mapping (address => uint256) public withdrawalLimit;\r\n    mapping (uint => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n\tmapping (address => bool) public frozenAccount;\r\n\tmapping (address => bool) public isAdmin;\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    // Meta data for pending and executed Transactions\r\n    struct MetaTransaction {\r\n        address source;\r\n        address destination;\r\n        uint value;\r\n        bool executed;\r\n        uint operation;\r\n        string reason;\r\n    }\r\n\r\n    // Modifiers\r\n    modifier ownerDoesNotExist(address owner) {\r\n        require (!isOwner[owner]);\r\n        _;\r\n    }\r\n    \r\n    modifier adminDoesNotExist(address admin) {\r\n        require (!isAdmin[admin]);\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        require (isOwner[owner]);\r\n        _;\r\n    }\r\n    \r\n    modifier adminExists(address admin) {\r\n        require (isAdmin[admin] || isOwner[admin]);\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint transactionId) {\r\n        require (transactions[transactionId].operation != 0);\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint transactionId, address owner) {\r\n        require (confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint transactionId, address owner) {\r\n        require (!confirmations[transactionId][owner]);\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint transactionId) {\r\n        require (!transactions[transactionId].executed);\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        require (_address != 0);\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function allows to deposit ether.\r\n    function() payable public\r\n    {\r\n        if (msg.value > 0)\r\n        {\r\n            Deposit(msg.sender, msg.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the contract and sets owner to the \r\n     * creator of the contract\r\n     */\r\n    function MultiSigERC20Token(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[this] = totalSupply;                      // Give the contract all initial tokens\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n\t\tisOwner[msg.sender] = true;                         // Set Owner to Contract Creator\r\n\t\tisAdmin[msg.sender] = true;\r\n\t\trequired = 1;\r\n\t\towners.push(msg.sender);\r\n\t\tadmins.push(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check if the sender is frozen\r\n        require(!frozenAccount[_from]);\r\n        // Check if the recipient is frozen\r\n        require(!frozenAccount[_to]);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\t\r\n\t\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    function freezeAccount(address target, bool freeze) internal {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n\t\r\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner)\r\n        internal\r\n        ownerDoesNotExist(owner)\r\n        notNull(owner)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        required = required + 1;\r\n        OwnerAddition(owner);\r\n    }\r\n    \r\n    /// @dev Allows to add a new admin. Transaction has to be sent by wallet.\r\n    /// @param admin Address of new admin.\r\n    function addAdmin(address admin)\r\n        internal\r\n        adminDoesNotExist(admin)\r\n        notNull(admin)\r\n    {\r\n        isAdmin[admin] = true;\r\n        admins.push(admin);\r\n        AdminAddition(admin);\r\n    }\r\n\r\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner.\r\n    function removeOwner(address owner)\r\n        internal\r\n        ownerExists(owner)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint i=0; i<owners.length - 1; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        owners.length -= 1;\r\n        if (required > owners.length)\r\n            changeRequirement(owners.length);\r\n        OwnerRemoval(owner);\r\n    }\r\n    \r\n    \r\n    /// @dev Allows to remove an admin. Transaction has to be sent by wallet.\r\n    /// @param admin Address of admin.\r\n    function removeAdmin(address admin)\r\n        internal\r\n        adminExists(admin)\r\n    {\r\n        isAdmin[admin] = false;\r\n        for (uint i=0; i<admins.length - 1; i++)\r\n            if (admins[i] == admin) {\r\n                admins[i] = admins[admins.length - 1];\r\n                break;\r\n            }\r\n        admins.length -= 1;\r\n        AdminRemoval(admin);\r\n    }\r\n\r\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner to be replaced.\r\n    /// @param owner Address of new owner.\r\n    function replaceOwner(address owner, address newOwner)\r\n        internal\r\n        ownerExists(owner)\r\n        ownerDoesNotExist(newOwner)\r\n    {\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n        OwnerRemoval(owner);\r\n        OwnerAddition(newOwner);\r\n    }\r\n\r\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n    /// @param _required Number of required confirmations.\r\n    function changeRequirement(uint256 _required)\r\n        internal\r\n    {\r\n        required = _required;\r\n        RequirementChange(_required);\r\n    }\r\n    \r\n    function requestAddOwner(address newOwner, string reason) public adminExists(msg.sender) returns (uint transactionId)\r\n    {\r\n        transactionId = submitTransaction(newOwner,newOwner,0,1,reason);\r\n    }\r\n\r\n    function requestRemoveOwner(address oldOwner, string reason) public adminExists(msg.sender) returns (uint transactionId)\r\n    {\r\n        transactionId = submitTransaction(oldOwner,oldOwner,0,2,reason);\r\n    }\r\n    \r\n    function requestReplaceOwner(address oldOwner,address newOwner, string reason) public adminExists(msg.sender) returns (uint transactionId)\r\n    {\r\n        transactionId = submitTransaction(oldOwner,newOwner,0,3,reason);\r\n    }\r\n    \r\n    function requestFreezeAccount(address account, string reason) public adminExists(msg.sender) returns (uint transactionId)\r\n    {\r\n        transactionId = submitTransaction(account,account,0,4,reason);\r\n    }\r\n    \r\n    function requestUnFreezeAccount(address account, string reason) public adminExists(msg.sender) returns (uint transactionId)\r\n    {\r\n        transactionId = submitTransaction(account,account,0,5,reason);\r\n    }\r\n    \r\n    function requestChangeRequirement(uint _requirement, string reason) public adminExists(msg.sender) returns (uint transactionId)\r\n    {\r\n        transactionId = submitTransaction(msg.sender,msg.sender,_requirement,6,reason);\r\n    }\r\n    \r\n    function requestTokenIssue(address account, uint256 amount, string reason) public adminExists(msg.sender) returns (uint transactionId)\r\n    {\r\n        transactionId = submitTransaction(account,account,amount,7,reason);\r\n    }\r\n    \r\n    function requestAdminTokenTransfer(address source,address destination, uint256 amount, string reason) public adminExists(msg.sender) returns (uint transactionId)\r\n    {\r\n        transactionId = submitTransaction(source, destination, amount,8,reason);\r\n    }\r\n    \r\n    function requestSetWithdrawalLimit(address owner,uint256 amount, string reason) public adminExists(msg.sender) returns (uint transactionId)\r\n    {\r\n        transactionId = submitTransaction(owner, owner, amount,9,reason);\r\n    }\r\n    \r\n    function requestWithdrawalFromLimit(uint256 amount, string reason) public adminExists(msg.sender) returns (uint transactionId)\r\n    {\r\n        transactionId = submitTransaction(msg.sender, msg.sender, amount,10,reason);\r\n    }\r\n    \r\n    function requestWithdrawal(address account,uint256 amount, string reason) public adminExists(msg.sender) returns (uint transactionId)\r\n    {\r\n        transactionId = submitTransaction(account, account, amount,11,reason);\r\n    }\r\n    \r\n    function requestAddAdmin(address account, string reason) public adminExists(msg.sender) returns (uint transactionId)\r\n    {\r\n        transactionId = submitTransaction(account, account, 0,12,reason);\r\n    }\r\n    \r\n    function requestRemoveAdmin(address account, string reason) public adminExists(msg.sender) returns (uint transactionId)\r\n    {\r\n        transactionId = submitTransaction(account, account, 0,13,reason);\r\n    }\r\n    \r\n    /// @dev Allows an owner to submit and confirm a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @return Returns transaction ID.\r\n    function submitTransaction(address source, address destination, uint256 value, uint operation, string reason)\r\n        internal\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = MetaTransaction({\r\n            source: source,\r\n            destination: destination,\r\n            value: value,\r\n            operation: operation,\r\n            executed: false,\r\n            reason: reason\r\n        });\r\n        \r\n        transactionCount += 1;\r\n        \r\n        if(operation == 1) // Operation 1 is Add Owner\r\n        {\r\n            Submission(transactionId,\"Add Owner\", source, destination, value, reason);\r\n        }\r\n        else if(operation == 2) // Operation 2 is Remove Owner\r\n        {\r\n            Submission(transactionId,\"Remove Owner\", source, destination, value, reason);\r\n        }\r\n        else if(operation == 3) // Operation 3 is Replace Owner\r\n        {\r\n            Submission(transactionId,\"Replace Owner\", source, destination, value, reason);\r\n        }\r\n        else if(operation == 4) // Operation 4 is Freeze Account\r\n        {\r\n            Submission(transactionId,\"Freeze Account\", source, destination, value, reason);\r\n        }\r\n        else if(operation == 5) // Operation 5 is UnFreeze Account\r\n        {\r\n            Submission(transactionId,\"UnFreeze Account\", source, destination, value, reason);\r\n        }\r\n        else if(operation == 6) // Operation 6 is change rquirement\r\n        {\r\n            Submission(transactionId,\"Change Requirement\", source, destination, value, reason);\r\n        }\r\n        else if(operation == 7) // Operation 7 is Issue Tokens from Contract\r\n        {\r\n            Submission(transactionId,\"Issue Tokens\", source, destination, value, reason);\r\n        }\r\n        else if(operation == 8) // Operation 8 is Admin Transfer Tokens\r\n        {\r\n            Submission(transactionId,\"Admin Transfer Tokens\", source, destination, value, reason);\r\n        }\r\n        else if(operation == 9) // Operation 9 is Set Owners Unsigned Withdrawal Limit\r\n        {\r\n            Submission(transactionId,\"Set Unsigned Ethereum Withdrawal Limit\", source, destination, value, reason);\r\n        }\r\n        else if(operation == 10) // Operation 10 is Admin Withdraw Ether without multisig\r\n        {\r\n            require(isOwner[destination]);\r\n            require(withdrawalLimit[destination] > value);\r\n            \r\n            Submission(transactionId,\"Unsigned Ethereum Withdrawal\", source, destination, value, reason);\r\n            \r\n            var newValue = withdrawalLimit[destination] - value;\r\n            withdrawalLimit[destination] = newValue;\r\n            \r\n            destination.transfer(value);\r\n            transactions[transactionId].executed = true;\r\n            Execution(transactionId);\r\n        }\r\n        else if(operation == 11) // Operation 11 is Admin Withdraw Ether with multisig\r\n        {\r\n            Submission(transactionId,\"Withdraw Ethereum\", source, destination, value, reason);\r\n        }\r\n        else if(operation == 12) // Operation 12 is Add Admin\r\n        {\r\n            Submission(transactionId,\"Add Admin\", source, destination, value, reason);\r\n        }\r\n        else if(operation == 13) // Operation 13 is Remove Admin\r\n        {\r\n            Submission(transactionId,\"Remove Admin\", source, destination, value, reason);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        transactionExists(transactionId)\r\n        notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        Confirmation(msg.sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n    \r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param startTransactionId the first transaction to approve\r\n    /// @param endTransactionId the last transaction to approve.\r\n    function confirmMultipleTransactions(uint startTransactionId, uint endTransactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        transactionExists(endTransactionId)\r\n    {\r\n        for(var i=startTransactionId;i<=endTransactionId;i++)\r\n        {\r\n            require(transactions[i].operation != 0);\r\n            require(!confirmations[i][msg.sender]);\r\n            confirmations[i][msg.sender] = true;\r\n            Confirmation(msg.sender, i);\r\n            executeTransaction(i);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint transactionId)\r\n        internal\r\n        notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            var transaction = transactions[transactionId];\r\n\r\n            if(transaction.operation == 1) // Operation 1 is Add Owner\r\n            {\r\n                addOwner(transaction.destination);\r\n                \r\n                transaction.executed = true;\r\n                Execution(transactionId);\r\n            }\r\n            else if(transaction.operation == 2) // Operation 2 is Remove Owner\r\n            {\r\n                removeOwner(transaction.destination);\r\n                \r\n                transaction.executed = true;\r\n                Execution(transactionId);\r\n            }\r\n            else if(transaction.operation == 3) // Operation 3 is Replace Owner\r\n            {\r\n                replaceOwner(transaction.source,transaction.destination);\r\n                \r\n                transaction.executed = true;\r\n                Execution(transactionId);\r\n            }\r\n            else if(transaction.operation == 4) // Operation 4 is Freeze Account\r\n            {\r\n                freezeAccount(transaction.destination,true);\r\n                \r\n                transaction.executed = true;\r\n                Execution(transactionId);\r\n            }\r\n            else if(transaction.operation == 5) // Operation 5 is UnFreeze Account\r\n            {\r\n                freezeAccount(transaction.destination, false);\r\n                \r\n                transaction.executed = true;\r\n                Execution(transactionId);\r\n            }\r\n            else if(transaction.operation == 6) // Operation 6 is change requirement Account\r\n            {\r\n                changeRequirement(transaction.value);\r\n                \r\n                transaction.executed = true;\r\n                Execution(transactionId);\r\n            }\r\n            else if(transaction.operation == 7) // Operation 7 is Issue Tokens from Contract\r\n            {\r\n                _transfer(this,transaction.destination,transaction.value);\r\n                \r\n                transaction.executed = true;\r\n                Execution(transactionId);\r\n            }\r\n            else if(transaction.operation == 8) // Operation 8 is Admin Transfer Tokens\r\n            {\r\n                _transfer(transaction.source,transaction.destination,transaction.value);\r\n                \r\n                transaction.executed = true;\r\n                Execution(transactionId);\r\n            }\r\n            else if(transaction.operation == 9) // Operation 9 is Set Owners Unsigned Withdrawal Limit\r\n            {\r\n                require(isOwner[transaction.destination]);\r\n                withdrawalLimit[transaction.destination] = transaction.value;\r\n                \r\n                transaction.executed = true;\r\n                Execution(transactionId);\r\n            }\r\n            else if(transaction.operation == 11) // Operation 11 is Admin Withdraw Ether with multisig\r\n            {\r\n                require(isOwner[transaction.destination]);\r\n                \r\n                transaction.destination.transfer(transaction.value);\r\n                \r\n                transaction.executed = true;\r\n                Execution(transactionId);\r\n            }\r\n            else if(transaction.operation == 12) // Operation 12 is add Admin\r\n            {\r\n                addAdmin(transaction.destination);\r\n                \r\n                transaction.executed = true;\r\n                Execution(transactionId);\r\n            }\r\n            else if(transaction.operation == 13) // Operation 13 is remove Admin\r\n            {\r\n                removeAdmin(transaction.destination);\r\n                \r\n                transaction.executed = true;\r\n                Execution(transactionId);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint transactionId)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        uint count = 0;\r\n        for (uint i=0; i<owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n            if (count == required)\r\n                return true;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Internal functions\r\n     */\r\n   \r\n    /*\r\n     * Web3 call functions\r\n     */\r\n    /// @dev Returns number of confirmations of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Number of confirmations.\r\n    function getConfirmationCount(uint transactionId)\r\n        public\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns total number of transactions after filers are applied.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Total number of transactions after filters are applied.\r\n    function getTransactionCount(bool pending, bool executed)\r\n        public\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i=0; i<transactionCount; i++)\r\n            if (   pending && !transactions[i].executed\r\n                || executed && transactions[i].executed)\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners()\r\n        public\r\n        constant\r\n        returns (address[])\r\n    {\r\n        return owners;\r\n    }\r\n\r\n    /// @dev Returns array with owner addresses, which confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Returns array of owner addresses.\r\n    function getConfirmations(uint transactionId)\r\n        public\r\n        constant\r\n        returns (address[] _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i=0; i<owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        _confirmations = new address[](count);\r\n        for (i=0; i<count; i++)\r\n            _confirmations[i] = confirmationsTemp[i];\r\n    }\r\n\r\n    /// @dev Returns list of transaction IDs in defined range.\r\n    /// @param from Index start position of transaction array.\r\n    /// @param to Index end position of transaction array.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Returns array of transaction IDs.\r\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\r\n        public\r\n        constant\r\n        returns (uint[] _transactionIds)\r\n    {\r\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i=0; i<transactionCount; i++)\r\n            if (   pending && !transactions[i].executed\r\n                || executed && transactions[i].executed)\r\n            {\r\n                transactionIdsTemp[count] = i;\r\n                count += 1;\r\n            }\r\n        _transactionIds = new uint[](to - from);\r\n        for (i=from; i<to; i++)\r\n            _transactionIds[i - from] = transactionIdsTemp[i];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"requestWithdrawalFromLimit\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"requestFreezeAccount\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requirement\",\"type\":\"uint256\"},{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"requestChangeRequirement\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"requestRemoveAdmin\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"source\",\"type\":\"address\"},{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"requestAdminTokenTransfer\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"requestTokenIssue\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldOwner\",\"type\":\"address\"},{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"requestRemoveOwner\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"source\",\"type\":\"address\"},{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"operation\",\"type\":\"uint256\"},{\"name\":\"reason\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"},{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"},{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"requestAddOwner\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"requestWithdrawal\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"requestUnFreezeAccount\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startTransactionId\",\"type\":\"uint256\"},{\"name\":\"endTransactionId\",\"type\":\"uint256\"}],\"name\":\"confirmMultipleTransactions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldOwner\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"},{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"requestReplaceOwner\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"requestSetWithdrawalLimit\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"requestAddAdmin\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"}]","ContractName":"MultiSigERC20Token","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000011e1a300000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000104173736574657265756d20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044153455400000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://569a7c868f581d62d1b010d36e8942ea7906818bf4e26a1b5171f7d5abba9776"}]}