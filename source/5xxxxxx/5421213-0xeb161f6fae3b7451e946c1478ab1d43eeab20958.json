{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n    library SafeMath {\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            uint256 c = a * b;\r\n            assert(a == 0 || c / a == b);\r\n            return c;\r\n        }\r\n    \r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n            uint256 c = a / b;\r\n            // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n            return c;\r\n        }\r\n    \r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            assert(b <= a);\r\n            return a - b;\r\n        }\r\n    \r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            uint256 c = a + b;\r\n            assert(c >= a);\r\n            return c;\r\n        }\r\n    }\r\n    library ERC20Interface {\r\n        function totalSupply() public constant returns (uint);\r\n        function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n        function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n        function transfer(address to, uint tokens) public returns (bool success);\r\n        function approve(address spender, uint tokens) public returns (bool success);\r\n        function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n        event Transfer(address indexed from, address indexed to, uint tokens);\r\n        event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    }\r\n    library ApproveAndCallFallBack {\r\n        function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n    }\r\n    contract owned {\r\n    \r\n    \r\n    \t    address public owner;\r\n    \r\n    \r\n    \t    function owned() payable public {\r\n    \t        owner = msg.sender;\r\n    \t    }\r\n    \t    \r\n    \t    modifier onlyOwner {\r\n    \t        require(owner == msg.sender);\r\n    \t        _;\r\n    \t    }\r\n    \r\n    \r\n    \t    function changeOwner(address _owner) onlyOwner public {\r\n    \t        owner = _owner;\r\n    \t    }\r\n    \t}\r\n    contract Crowdsale is owned {\r\n    \t    \r\n    \t    uint256 public totalSupply;\r\n    \t\r\n    \t    mapping (address => uint256) public balanceOf;\r\n    \r\n    \r\n    \t    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \t    \r\n    \t    function Crowdsale() payable owned() public {\r\n                totalSupply = 1000000000 * 1000000000000000000; \r\n                // ico\r\n    \t        balanceOf[this] = 900000000 * 1000000000000000000;   \r\n    \t        balanceOf[owner] = totalSupply - balanceOf[this];\r\n    \t        Transfer(this, owner, balanceOf[owner]);\r\n    \t    }\r\n    \r\n    \t    function () payable public {\r\n    \t        require(balanceOf[this] > 0);\r\n    \t        \r\n    \t        uint256 tokensPerOneEther = 200000 * 1000000000000000000;\r\n    \t        uint256 tokens = tokensPerOneEther * msg.value / 1000000000000000000;\r\n    \t        if (tokens > balanceOf[this]) {\r\n    \t            tokens = balanceOf[this];\r\n    \t            uint valueWei = tokens * 1000000000000000000 / tokensPerOneEther;\r\n    \t            msg.sender.transfer(msg.value - valueWei);\r\n    \t        }\r\n    \t        require(tokens > 0);\r\n    \t        balanceOf[msg.sender] += tokens;\r\n    \t        balanceOf[this] -= tokens;\r\n    \t        Transfer(this, msg.sender, tokens);\r\n    \t    }\r\n    \t}\r\n    contract QUASI is Crowdsale {\r\n        \r\n            using SafeMath for uint256;\r\n            string  public name        = 'QUASI';\r\n    \t    string  public symbol      = 'QUASI';\r\n    \t    string  public standard    = 'CryptoQ 0.1';\r\n            \r\n    \t    uint8   public decimals    = 18;\r\n    \t    mapping (address => mapping (address => uint256)) internal allowed;\r\n    \t    \r\n    \t    function QUASI() payable Crowdsale() public {}\r\n    \t    \r\n    \t    function transfer(address _to, uint256 _value) public {\r\n    \t        require(balanceOf[msg.sender] >= _value);\r\n    \t        balanceOf[msg.sender] -= _value;\r\n    \t        balanceOf[_to] += _value;\r\n    \t        Transfer(msg.sender, _to, _value);\r\n    \t    }\r\n    \t}\r\n    contract Control is QUASI {\r\n    \t    function Control() payable QUASI() public {}\r\n    \t    function withdraw() onlyOwner {    \r\n    \t        owner.transfer(this.balance);  \r\n    \t    }\r\n    \t    function killMe() public onlyOwner {\r\n    \t        selfdestruct(owner);\r\n    \t    }\r\n    \t}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killMe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Control","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9a2096290fea15a505060c1c616fc5b4045129f893c6f89660b7936ed3a0ee49"}]}