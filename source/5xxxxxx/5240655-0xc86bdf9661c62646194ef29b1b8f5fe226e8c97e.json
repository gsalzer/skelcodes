{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract EtherShare {\r\n    \r\n    uint public count;\r\n    address[] public link; // if there are other EtherShare contracts\r\n\r\n    struct oneShare {\r\n        address sender;\r\n        string nickname;\r\n        uint timestamp;\r\n        bool AllowUpdated;\r\n        string content;\r\n    }\r\n    mapping(uint => oneShare[]) public allShare;\r\n\r\n    event EVENT(uint ShareID, uint ReplyID);\r\n\r\n    function EtherShare() public {\r\n        NewShare(\"Peilin Zheng\", false, \"Hello, EtherShare!\");  // zhengpeilin.com\r\n    }\r\n\r\n    function NewShare(string nickname, bool AllowUpdated, string content) public {\r\n        allShare[count].push(oneShare(msg.sender, nickname, now, AllowUpdated, content)); // add a new share\r\n        EVENT(count,0);\r\n        count++;\r\n    }\r\n\r\n    function ReplyShare(uint ShareID, string nickname, bool AllowUpdated, string content) public {\r\n        require(ShareID<count); // reply to a existed share\r\n        allShare[ShareID].push(oneShare(msg.sender, nickname, now, AllowUpdated, content));\r\n        EVENT(ShareID,allShare[ShareID].length-1);\r\n    }\r\n\r\n    function Update(uint ShareID, uint ReplyID, string content) public {\r\n        require(msg.sender==allShare[ShareID][ReplyID].sender && allShare[ShareID][ReplyID].AllowUpdated);  // only sender can update the share or reply which is AllowUpdated\r\n        allShare[ShareID][ReplyID].content = content;\r\n        allShare[ShareID][ReplyID].timestamp = now;\r\n        EVENT(ShareID,ReplyID);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ShareID\",\"type\":\"uint256\"},{\"name\":\"ReplyID\",\"type\":\"uint256\"},{\"name\":\"content\",\"type\":\"string\"}],\"name\":\"Update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ShareID\",\"type\":\"uint256\"},{\"name\":\"nickname\",\"type\":\"string\"},{\"name\":\"AllowUpdated\",\"type\":\"bool\"},{\"name\":\"content\",\"type\":\"string\"}],\"name\":\"ReplyShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allShare\",\"outputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"nickname\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"AllowUpdated\",\"type\":\"bool\"},{\"name\":\"content\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"link\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nickname\",\"type\":\"string\"},{\"name\":\"AllowUpdated\",\"type\":\"bool\"},{\"name\":\"content\",\"type\":\"string\"}],\"name\":\"NewShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ShareID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ReplyID\",\"type\":\"uint256\"}],\"name\":\"EVENT\",\"type\":\"event\"}]","ContractName":"EtherShare","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1cae3ebb08e713bce32743d74217ce7ea77d487dac88d8a1080255190a17dc84"}]}