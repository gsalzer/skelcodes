{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface CornFarm\r\n{\r\n    function buyObject(address _beneficiary) public payable;\r\n}\r\n\r\ninterface Corn\r\n{\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract TaxManFarmer {\r\n    using SafeMath for uint256;\r\n    \r\n    bool private reentrancy_lock = false;\r\n    \r\n    address public taxMan = 0xd5048F05Ed7185821C999e3e077A3d1baed0952c;\r\n    address[9] public shop = [0x225e5E680358FaE78216A9C0A17793c2d2A85fC2, 0xf9208661ffE1607D96cF386B84B2BE621620097C, \r\n    0x28bdDb555AdF1Bb71ce21cAb60566956bbFB0f08, 0xc8Ac76785C6b413753f6bFEdD9953785876B8a5c, 0x71e7a455991Cd9f60148720e2EB0Bc823014dB32, \r\n    0xC946a2351eA574676f5e21043F05A33c2ceaBC59, 0x0B2DA98ab93207CE1367d63947A20E24372D9Ab5, 0x0029b494669cfE56E8cDBCafF074940CC107a970,\r\n    0xbD4282E6b2Bf8eef232eD211e53b54E560D71a2B];\r\n    address[9] public object = [0x339Cd902D6F2e50717b114f0837280ce56f36020, 0x56021b1b327eBE1eed2182A74d5f6a9a04eB2C73, 0x67BE1A7555A7D38D837F6587530FFc33d89F5a90,\r\n    0x7249fd2B946cAeD7D6C695e1656434A063723926, 0xAc4A1553e1e80222D6BF9f66D8FeF629aa8dBE74, 0x94b10291AA26f29994cF944da0Db6F03D4b407e1,\r\n    0x234FcB7f91fC353fefAd092b393850803A261cf9, 0xab87f28E10E3b0942EB27596Cc73B4031C9856e9, 0xFc1082B4d80651d9948b58ffCce45A5e6586AFE6];\r\n    \r\n    mapping(address => uint256) public workDone;\r\n    \r\n    modifier nonReentrant() {\r\n        require(!reentrancy_lock);\r\n        reentrancy_lock = true;\r\n        _;\r\n        reentrancy_lock = false;\r\n    }\r\n    \r\n    function pepFarm() nonReentrant external {\r\n        // buy 11 of each item\r\n        for (uint8 i = 0; i < 9; i++) { // 9 objects\r\n            for (uint8 j = 0; j < 11; j++) { // 11 times\r\n                CornFarm(shop[i]).buyObject(this);\r\n            }\r\n            \r\n            // 10 for sender, 1 for taxMan\r\n            workDone[msg.sender] = workDone[msg.sender].add(uint256(10 ether));\r\n            workDone[taxMan] = workDone[taxMan].add(uint256(1 ether));\r\n        }\r\n        \r\n    }\r\n    \r\n    function reapFarm() nonReentrant external {\r\n        require(workDone[msg.sender] > 0);\r\n        for (uint8 i = 0; i < 9; i++) {\r\n            Corn(object[i]).transfer(msg.sender, workDone[msg.sender]);\r\n            Corn(object[i]).transfer(taxMan, workDone[taxMan]);\r\n        }\r\n        workDone[msg.sender] = 0;\r\n        workDone[taxMan] = 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"workDone\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reapFarm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"object\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pepFarm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taxMan\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shop\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TaxManFarmer","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b5fb8aeef2248e51d0f44a0f08c6dca4940a90b24aed3de56ba2cf08024bc37f"}]}