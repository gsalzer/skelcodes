{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     **/\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     **/\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n    \r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     **/\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     **/\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic interface\r\n * @dev Basic ERC20 interface\r\n **/\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n **/\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n **/\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) balances;\r\n    uint256 totalSupply_;\r\n    \r\n    /**\r\n     * @dev total number of tokens in existence\r\n     **/\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n    \r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     **/\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     **/\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     **/\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n    \r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     **/\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     **/\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     **/\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     **/\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n **/\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n     **/\r\n   constructor() public {\r\n      owner = msg.sender;\r\n    }\r\n    \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     **/\r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     **/\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      require(newOwner != address(0));\r\n      emit OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev The Pausable contract has control functions to pause and unpause token transfers\r\n **/\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n    \r\n    bool public canPause = true;\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     **/\r\n    modifier whenNotPaused() {\r\n        require(!paused || msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     **/\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     **/\r\n    function pause() onlyOwner whenNotPaused public {\r\n        require(canPause == true);\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n    \r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     **/\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n    \r\n    /**\r\n     * @dev Prevent the token from ever being paused again\r\n     **/\r\n    function notPauseable() onlyOwner public{\r\n        paused = false;\r\n        canPause = false;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n    /**\r\n     * @dev Prevent the token from ever being paused again\r\n     **/\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n    \r\n    /**\r\n     * @dev transferFrom function to tansfer tokens when token is not paused\r\n     **/\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    \r\n    /**\r\n     * @dev approve spender when not paused\r\n     **/\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n    \r\n    /**\r\n     * @dev increaseApproval of spender when not paused\r\n     **/\r\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n    \r\n    /**\r\n     * @dev decreaseApproval of spender when not paused\r\n     **/\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Configurable\r\n * @dev Configurable varriables of the contract\r\n **/\r\ncontract Configurable {\r\n    uint256 public constant cap = 1000000000*10**18;\r\n    uint256 public constant preSaleFirstCap = 25000000*10**18;\r\n    uint256 public constant preSaleSecondCap = 175000000*10**18; // 25,000,000 + 150,000,000\r\n    uint256 public constant preSaleThirdCap = 325000000*10**18; // 25,000,000 + 150,000,000 + 150,000,000\r\n    uint256 public constant preSaleFourthCap = 425000000*10**18; // 25,000,000 + 150,000,000 + 150,000,000 + 100,000,000\r\n    uint256 public constant privateLimit = 200000000*10**18;\r\n    uint256 public constant basePrice = 2777777777777777777778; // tokens per 1 ether\r\n    uint256 public constant preSaleDiscountPrice = 11111111111111111111111; // pre sale 1 stage > 10 ETH or pre sale private discount 75% tokens per 1 ether\r\n    uint256 public constant preSaleFirstPrice = 5555555555555555555556; // pre sale 1 stage < 10 ETH discount 50%, tokens per 1 ether\r\n    uint256 public constant preSaleSecondPrice = 5555555555555555555556; // pre sale 2 stage discount 50%, tokens per 1 ether\r\n    uint256 public constant preSaleThirdPrice = 4273504273504273504274; // pre sale 3 stage discount 35%, tokens per 1 ether\r\n    uint256 public constant preSaleFourthPrice = 3472222222222222222222; // pre sale 4 stage discount 20%, tokens per 1 ether\r\n    uint256 public constant privateDiscountPrice = 7936507936507936507937; // sale private discount 65%, tokens per 1 ether\r\n    uint256 public privateSold = 0;\r\n    \r\n    uint256 public icoStartDate = 0;\r\n    uint256 public constant timeToBeBurned = 1 years;\r\n    uint256 public constant companyReserve = 1000000000*10**18;\r\n    uint256 public remainingTokens = 0;\r\n    bool public icoFinalized = false;\r\n    uint256 public icoEnd = 0; \r\n    uint256 public maxAmmount = 1000 ether; // maximum investment allowed\r\n    uint256 public minContribute = 0.1 ether; // Minimum investment allowed\r\n    uint256 public constant preSaleStartDate = 1525046400; // 30/04/2018 00:00:00\r\n    \r\n    //custom variables for private and public events\r\n    uint256 public privateEventTokens = 0;\r\n    uint256 public publicEventTokens = 0;\r\n    bool public privateEventActive = false;\r\n    bool public publicEventActive = false;\r\n    uint256 public publicMin = 0;\r\n    uint256 public privateMin = 0;\r\n    uint256 public privateRate = 0;\r\n    uint256 public publicRate = 0;\r\n}\r\n\r\n/**\r\n * @title CrowdsaleToken \r\n * @dev Contract to preform crowd sale with token\r\n **/\r\ncontract CrowdsaleToken is PausableToken, Configurable {\r\n    /**\r\n     * @dev enum of current crowd sale state\r\n     **/\r\n     enum Stages {\r\n        preSale, \r\n        pause, \r\n        sale, \r\n        icoEnd\r\n    }\r\n  \r\n    Stages currentStage;\r\n    mapping(address => bool) saleDiscountList; // 65% private discount\r\n    mapping(address => bool) customPrivateSale; // Private discount for events\r\n    \r\n    /**\r\n     * @dev constructor of CrowdsaleToken\r\n     **/\r\n    constructor() public {\r\n        currentStage = Stages.preSale;\r\n        pause();\r\n        balances[owner] = balances[owner].add(companyReserve);\r\n        totalSupply_ = totalSupply_.add(companyReserve);\r\n        emit Transfer(address(this), owner, companyReserve);\r\n    }\r\n    \r\n    /**\r\n     * @dev fallback function to send ether to for Crowd sale\r\n     **/\r\n    function () public payable {\r\n        require(msg.value >= minContribute);\r\n        require(preSaleStartDate < now);\r\n        require(currentStage != Stages.pause);\r\n        require(currentStage != Stages.icoEnd);\r\n        require(msg.value > 0);\r\n        uint256[] memory tokens = tokensAmount(msg.value);\r\n        require (tokens[0] > 0);\r\n        balances[msg.sender] = balances[msg.sender].add(tokens[0]);\r\n        totalSupply_ = totalSupply_.add(tokens[0]);\r\n        require(totalSupply_ <= cap.add(companyReserve));\r\n        emit Transfer(address(this), msg.sender, tokens[0]);\r\n        uint256 ethValue = msg.value.sub(tokens[1]);\r\n        owner.transfer(ethValue);\r\n        if(tokens[1] > 0){\r\n            msg.sender.transfer(tokens[1]);\r\n            emit Transfer(address(this), msg.sender, tokens[1]);\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev tokensAmount calculates the amount of tokens the sender is purchasing \r\n     **/\r\n    function tokensAmount (uint256 _wei) internal returns (uint256[]) {\r\n        uint256[] memory tokens = new uint256[](7);\r\n        tokens[0] = tokens[1] = 0;\r\n        uint256 stageWei = 0;\r\n        uint256 stageTokens = 0;\r\n        uint256 stagePrice = 0;\r\n        uint256 totalSold = totalSupply_.sub(companyReserve);\r\n        uint256 extraWei = 0;\r\n        bool ismember = false;\r\n        \r\n        // if sender sent more then maximum spending amount\r\n        if(_wei > maxAmmount){\r\n            extraWei = _wei.sub(maxAmmount);\r\n            _wei = maxAmmount;\r\n        }\r\n        \r\n        // if member is part of a private sale event\r\n       if(customPrivateSale[msg.sender] == true && msg.value >= privateMin && privateEventActive == true && privateEventTokens > 0){\r\n            stagePrice = privateRate;\r\n            stageTokens = _wei.mul(stagePrice).div(1 ether);\r\n           \r\n            if(stageTokens <= privateEventTokens){\r\n                tokens[0] = tokens[0].add(stageTokens);\r\n                privateEventTokens = privateEventTokens.sub(tokens[0]);\r\n                \r\n                if(extraWei > 0){\r\n                    tokens[1] = extraWei;\r\n                    //emit Transfer(address(this), msg.sender, extraWei);\r\n                }\r\n                \r\n                return tokens;\r\n            } else {\r\n                stageTokens = privateEventTokens;\r\n                privateEventActive = false;\r\n                stageWei = stageTokens.mul(1 ether).div(stagePrice);\r\n                tokens[0] = tokens[0].add(stageTokens);\r\n                privateEventTokens = privateEventTokens.sub(tokens[0]);\r\n                _wei = _wei.sub(stageWei);\r\n            }\r\n        }\r\n        \r\n        // private member \r\n        if (totalSold > preSaleFirstCap && privateSold <= privateLimit && saleDiscountList[msg.sender]) {\r\n            stagePrice = privateDiscountPrice; // private member %65 discount\r\n          \r\n          stageTokens = _wei.mul(stagePrice).div(1 ether);\r\n          \r\n          if (privateSold.add(tokens[0]).add(stageTokens) <= privateLimit) {\r\n            tokens[0] = tokens[0].add(stageTokens);\r\n            \r\n            if(extraWei > 0){\r\n                tokens[1] = extraWei;\r\n            }\r\n            totalSold = totalSold.add(tokens[0]);\r\n            privateSold = privateSold.add(tokens[0]);\r\n            return tokens;\r\n          } else {\r\n            stageTokens = privateLimit.sub(privateSold);\r\n            privateSold = privateSold.add(stageTokens);\r\n            stageWei = stageTokens.mul(1 ether).div(stagePrice);\r\n            tokens[0] = tokens[0].add(stageTokens);\r\n            _wei = _wei.sub(stageWei);\r\n          }\r\n        }\r\n        \r\n         // if public event is active and tokens available\r\n        if(publicEventActive == true && publicEventTokens > 0 && msg.value >= publicMin) {\r\n            stagePrice = publicRate;\r\n            stageTokens = _wei.mul(stagePrice).div(1 ether);\r\n           \r\n            if(stageTokens <= publicEventTokens){\r\n                tokens[0] = tokens[0].add(stageTokens);\r\n                publicEventTokens = publicEventTokens.sub(tokens[0]);\r\n                \r\n                if(extraWei > 0){\r\n                    tokens[1] = stageWei;\r\n                    //emit Transfer(address(this), msg.sender, extraWei);\r\n                }\r\n                \r\n                return tokens;\r\n            } else {\r\n                stageTokens = publicEventTokens;\r\n                publicEventActive = false;\r\n                stageWei = stageTokens.mul(1 ether).div(stagePrice);\r\n                tokens[0] = tokens[0].add(stageTokens);\r\n                publicEventTokens = publicEventTokens.sub(tokens[0]);\r\n                _wei = _wei.sub(stageWei);\r\n            }\r\n        }\r\n        \r\n        \r\n        // 75% discount\r\n        if (currentStage == Stages.preSale && totalSold <= preSaleFirstCap) {\r\n          if (msg.value >= 10 ether) \r\n            stagePrice = preSaleDiscountPrice;\r\n          else {\r\n              if (saleDiscountList[msg.sender]) {\r\n                  ismember = true;\r\n                stagePrice = privateDiscountPrice; // private member %65 discount\r\n              }\r\n            else\r\n                stagePrice = preSaleFirstPrice;\r\n          }\r\n            \r\n            stageTokens = _wei.mul(stagePrice).div(1 ether);\r\n          \r\n          if (totalSold.add(stageTokens) <= preSaleFirstCap) {\r\n            tokens[0] = tokens[0].add(stageTokens);\r\n            \r\n            if(extraWei > 0){\r\n                tokens[1] = extraWei;\r\n            }\r\n            return tokens;\r\n          }\r\n            else if( ismember && totalSold.add(stageTokens) <= privateLimit) {\r\n                tokens[0] = tokens[0].add(stageTokens);\r\n                privateSold = privateSold.sub(tokens[0]);\r\n            \r\n            if(extraWei > 0){\r\n                tokens[1] = extraWei;\r\n            }\r\n            return tokens;\r\n            \r\n          } else {\r\n            stageTokens = preSaleFirstCap.sub(totalSold);\r\n            stageWei = stageTokens.mul(1 ether).div(stagePrice);\r\n            tokens[0] = tokens[0].add(stageTokens);\r\n            if(ismember)\r\n                privateSold = privateSold.sub(tokens[0]);\r\n            _wei = _wei.sub(stageWei);\r\n          }\r\n        }\r\n        \r\n        // 50% discount\r\n        if (currentStage == Stages.preSale && totalSold.add(tokens[0]) <= preSaleSecondCap) {\r\n              stagePrice = preSaleSecondPrice; \r\n\r\n          stageTokens = _wei.mul(stagePrice).div(1 ether);\r\n          \r\n          if (totalSold.add(tokens[0]).add(stageTokens) <= preSaleSecondCap) {\r\n            tokens[0] = tokens[0].add(stageTokens);\r\n            \r\n            if(extraWei > 0){\r\n                tokens[1] = extraWei;\r\n            }\r\n        \r\n            return tokens;\r\n          } else {\r\n            stageTokens = preSaleSecondCap.sub(totalSold).sub(tokens[0]);\r\n            stageWei = stageTokens.mul(1 ether).div(stagePrice);\r\n            tokens[0] = tokens[0].add(stageTokens);\r\n            _wei = _wei.sub(stageWei);\r\n          }\r\n        }\r\n        \r\n        // 35% discount\r\n        if (currentStage == Stages.preSale && totalSold.add(tokens[0]) <= preSaleThirdCap) {\r\n            stagePrice = preSaleThirdPrice;\r\n          stageTokens = _wei.mul(stagePrice).div(1 ether);\r\n          \r\n          if (totalSold.add(tokens[0]).add(stageTokens) <= preSaleThirdCap) {\r\n            tokens[0] = tokens[0].add(stageTokens);\r\n           \r\n            if(extraWei > 0){\r\n                tokens[1] = extraWei;\r\n            }\r\n        \r\n            return tokens;\r\n          } else {\r\n            stageTokens = preSaleThirdCap.sub(totalSold).sub(tokens[0]);\r\n            stageWei = stageTokens.mul(1 ether).div(stagePrice);\r\n            tokens[0] = tokens[0].add(stageTokens);\r\n            _wei = _wei.sub(stageWei);\r\n          }\r\n        }\r\n        // 20% discount\r\n        if (currentStage == Stages.preSale && totalSold.add(tokens[0]) <= preSaleFourthCap) {\r\n            stagePrice = preSaleFourthPrice;\r\n          \r\n          stageTokens = _wei.mul(stagePrice).div(1 ether);\r\n          \r\n          if (totalSold.add(tokens[0]).add(stageTokens) <= preSaleFourthCap) {\r\n            tokens[0] = tokens[0].add(stageTokens);\r\n            \r\n            if(extraWei > 0){\r\n                tokens[1] = extraWei;\r\n            }\r\n        \r\n            return tokens;\r\n          } else {\r\n            stageTokens = preSaleFourthCap.sub(totalSold).sub(tokens[0]);\r\n            stageWei = stageTokens.mul(1 ether).div(stagePrice);\r\n            tokens[0] = tokens[0].add(stageTokens);\r\n            _wei = _wei.sub(stageWei);\r\n            currentStage = Stages.pause;\r\n            \r\n            if(_wei > 0 || extraWei > 0){\r\n                _wei = _wei.add(extraWei);\r\n                tokens[1] = _wei;\r\n            }\r\n            return tokens;\r\n          }\r\n        }\r\n        \r\n        // 0% discount\r\n        if (currentStage == Stages.sale) {\r\n          if (privateSold > privateLimit && saleDiscountList[msg.sender]) {\r\n            stagePrice = privateDiscountPrice; // private member %65 discount\r\n            stageTokens = _wei.mul(stagePrice).div(1 ether);\r\n            uint256 ceil = totalSold.add(privateLimit);\r\n            \r\n            if (ceil > cap) {\r\n              ceil = cap;\r\n            }\r\n            \r\n            if (totalSold.add(stageTokens) <= ceil) {\r\n              tokens[0] = tokens[0].add(stageTokens);\r\n             \r\n              if(extraWei > 0){\r\n               tokens[1] = extraWei;\r\n            }\r\n            privateSold = privateSold.sub(tokens[0]);\r\n              return tokens;          \r\n            } else {\r\n              stageTokens = ceil.sub(totalSold);\r\n              tokens[0] = tokens[0].add(stageTokens);\r\n              stageWei = stageTokens.mul(1 ether).div(stagePrice);\r\n              _wei = _wei.sub(stageWei);\r\n            }\r\n            \r\n            if (ceil == cap) {\r\n              endIco();\r\n              if(_wei > 0 || extraWei > 0){\r\n                _wei = _wei.add(extraWei);\r\n                tokens[1] = _wei;\r\n              }\r\n              privateSold = privateSold.sub(tokens[0]);\r\n              return tokens;\r\n            }\r\n          }\r\n          \r\n          stagePrice = basePrice;\r\n          stageTokens = _wei.mul(stagePrice).div(1 ether);\r\n          \r\n          if (totalSold.add(tokens[0]).add(stageTokens) <= cap) {\r\n            tokens[0] = tokens[0].add(stageTokens);\r\n            \r\n            if(extraWei > 0){\r\n                tokens[1] = extraWei;\r\n            }\r\n        \r\n                \r\n            return tokens;\r\n          } else {\r\n            stageTokens = cap.sub(totalSold).sub(tokens[0]);\r\n            stageWei = stageTokens.mul(1 ether).div(stagePrice);\r\n            tokens[0] = tokens[0].add(stageTokens);\r\n            _wei = _wei.sub(stageWei);\r\n            endIco();\r\n            \r\n            if(_wei > 0 || extraWei > 0){\r\n                _wei = _wei.add(extraWei);\r\n                tokens[1] = _wei;\r\n            }\r\n            return tokens;\r\n          }      \r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev startIco starts the public ICO\r\n     **/\r\n    function startIco() public onlyOwner {\r\n        require(currentStage != Stages.icoEnd);\r\n        currentStage = Stages.sale;\r\n        icoStartDate = now;\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets either custom public or private sale events. \r\n     * @param tokenCap : the amount of toknes to cap the event with\r\n     * @param eventRate : the discounted price of the event given in amount per ether\r\n     * @param isActive : boolean that stats is the event is active or not\r\n     * @param eventType : string that says is the event is public or private\r\n     **/\r\n    function setCustomEvent(uint256 tokenCap, uint256 eventRate, bool isActive, string eventType, uint256 minAmount) public onlyOwner {\r\n        require(tokenCap > 0);\r\n        require(eventRate > 0);\r\n        require(minAmount > 0);\r\n        \r\n        if(compareStrings(eventType, \"private\")){\r\n            privateEventTokens = tokenCap;\r\n            privateRate = eventRate;\r\n            privateEventActive = isActive;\r\n            privateMin = minAmount;\r\n        }\r\n        else if(compareStrings(eventType, \"public\")){\r\n            publicEventTokens = tokenCap;\r\n            publicRate = eventRate;\r\n            publicEventActive = isActive;\r\n            publicMin = minAmount;\r\n        }\r\n        else\r\n            require(1==2);\r\n    }\r\n    \r\n    /**\r\n     * @dev function to compare two strings for equality\r\n     **/\r\n    function compareStrings (string a, string b) internal pure returns (bool){\r\n       return keccak256(a) == keccak256(b);\r\n   }\r\n    \r\n    /**\r\n     * @dev setEventActive sets the private presale discount members address\r\n     **/\r\n    function setEventActive (bool isActive, string eventType) public onlyOwner {\r\n        // Turn private event on/off\r\n        if(compareStrings(eventType, \"private\"))\r\n            privateEventActive = isActive;\r\n        // Turn public event on or off\r\n        else if(compareStrings(eventType, \"public\"))\r\n            publicEventActive = isActive;\r\n        else\r\n            require(1==2);\r\n    }\r\n\r\n    /**\r\n     * @dev setMinMax function to set the minimum or maximum investment amount \r\n     **/\r\n    function setMinMax (uint256 minMax, string eventType) public onlyOwner {\r\n        require(minMax >= 0);\r\n        // Set new maxAmmount\r\n        if(compareStrings(eventType, \"max\"))\r\n            maxAmmount = minMax;\r\n        // Set new min to Contribute\r\n        else if(compareStrings(eventType,\"min\"))\r\n            minContribute = minMax;\r\n        else\r\n            require(1==2);\r\n    }\r\n\r\n    /**\r\n     * @dev function to set the discount member as active or not for one of the 4 events\r\n     * @param _address : address of the member\r\n     * @param memberType : specifying if the member should belong to private sale, pre sale, private event or public event\r\n     * @param isActiveMember : bool to set the member at active or not\r\n     **/\r\n    function setDiscountMember(address _address, string memberType, bool isActiveMember) public onlyOwner {\r\n        // Set discount sale member    \r\n        if(compareStrings(memberType, \"preSale\"))\r\n            saleDiscountList[_address] = isActiveMember;\r\n        // Set private event member\r\n        else if(compareStrings(memberType,\"privateEvent\"))\r\n            customPrivateSale[_address] = isActiveMember;\r\n        else\r\n            require(1==2);\r\n    }\r\n    \r\n    /**\r\n     * @dev checks if an address is a member of a specific address\r\n     * @param _address : address of member to check\r\n     * @param memberType : member type to check: preSlae, privateEvent\r\n     **/\r\n    function isMemberOf(address _address, string memberType) public view returns (bool){\r\n        // Set discount sale member    \r\n        if(compareStrings(memberType, \"preSale\"))\r\n            return saleDiscountList[_address];\r\n        // Set private event member\r\n        else if(compareStrings(memberType,\"privateEvent\"))\r\n            return customPrivateSale[_address];\r\n        else\r\n            require(1==2);\r\n    }\r\n\r\n    /**\r\n     * @dev endIco closes down the ICO \r\n     **/\r\n    function endIco() internal {\r\n        currentStage = Stages.icoEnd;\r\n    }\r\n\r\n    /**\r\n     * @dev withdrawFromRemainingTokens allows the owner of the contract to withdraw \r\n     * remaining unsold tokens for acquisitions. Any remaining tokens after 1 year from\r\n     * ICO end time will be burned.\r\n     **/\r\n    function withdrawFromRemainingTokens(uint256 _value) public onlyOwner returns(bool) {\r\n        require(currentStage == Stages.icoEnd);\r\n        require(remainingTokens > 0);\r\n        \r\n        // if 1 year after ICO, Burn all remaining tokens\r\n        if (now > icoEnd.add(timeToBeBurned)) \r\n            remainingTokens = 0;\r\n        \r\n        // If tokens remain, withdraw\r\n        if (_value <= remainingTokens) {\r\n            balances[owner] = balances[owner].add(_value);\r\n            totalSupply_ = totalSupply_.add(_value);\r\n            remainingTokens = remainingTokens.sub(_value);\r\n            emit Transfer(address(this), owner, _value);\r\n            return true;\r\n          }\r\n          return false;\r\n    }\r\n\r\n    /**\r\n     * @dev finalizeIco closes down the ICO and sets needed varriables\r\n     **/\r\n    function finalizeIco() public onlyOwner {\r\n        require(!icoFinalized);\r\n            icoFinalized = true;\r\n        \r\n        if (currentStage != Stages.icoEnd){\r\n             endIco();\r\n             icoEnd = now;\r\n        }\r\n        \r\n        remainingTokens = cap.add(companyReserve).sub(totalSupply_);\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    /**\r\n     * @dev function to get the current discount rate\r\n     **/\r\n    function currentBonus() public view returns (string) {\r\n        if(totalSupply_.sub(companyReserve) < preSaleFirstCap)\r\n            return \"300% Bonus!\";\r\n        else if((totalSupply_.sub(companyReserve) < preSaleSecondCap) && (totalSupply_.sub(companyReserve) > preSaleFirstCap))\r\n            return \"100% Bonus!\";\r\n        else if((totalSupply_.sub(companyReserve) < preSaleThirdCap) && (totalSupply_.sub(companyReserve) > preSaleSecondCap))\r\n            return \"54% Bonus!\";\r\n        else if((totalSupply_.sub(companyReserve) < preSaleFourthCap) && (totalSupply_.sub(companyReserve) > preSaleThirdCap))\r\n            return \"25% Bonus!\";\r\n        else\r\n            return \"No Bonus... Sorry...#BOTB\";\r\n    }\r\n}\r\n\r\n/**\r\n * @title KimeraToken \r\n * @dev Contract to create the Kimera Token\r\n **/\r\ncontract KimeraToken is CrowdsaleToken {\r\n    string public constant name = \"KIMERACoin\";\r\n    string public constant symbol = \"KIMERA\";\r\n    uint32 public constant decimals = 18;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"icoEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minMax\",\"type\":\"uint256\"},{\"name\":\"eventType\",\"type\":\"string\"}],\"name\":\"setMinMax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateDiscountPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleFourthCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canPause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenCap\",\"type\":\"uint256\"},{\"name\":\"eventRate\",\"type\":\"uint256\"},{\"name\":\"isActive\",\"type\":\"bool\"},{\"name\":\"eventType\",\"type\":\"string\"},{\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"setCustomEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleDiscountPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAmmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateEventTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleSecondPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateEventActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"notPauseable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleFourthPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeToBeBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawFromRemainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isActive\",\"type\":\"bool\"},{\"name\":\"eventType\",\"type\":\"string\"}],\"name\":\"setEventActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleFirstCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleThirdPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"memberType\",\"type\":\"string\"},{\"name\":\"isActiveMember\",\"type\":\"bool\"}],\"name\":\"setDiscountMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleFirstPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleSecondCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicEventActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicEventTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleThirdCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"memberType\",\"type\":\"string\"}],\"name\":\"isMemberOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"KimeraToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://85a65ad65595a9c3b46ac7b2f276dde648b577625f90c4395d6631f92bc94b0e"}]}