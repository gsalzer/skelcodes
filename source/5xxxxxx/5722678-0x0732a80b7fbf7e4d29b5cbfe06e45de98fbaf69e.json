{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20FXT {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"ERC20FX Token\";\r\n    string public symbol = \"ERC20FXT\";\r\n    uint8 public decimals = 0;\r\n\r\n    uint256 public totalSupply = 10000000 * (uint256(10) ** decimals);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);\r\n    event Withdraw(address indexed by,uint256 amount);\r\n    event WithdrawlStateChanged(uint8 state, address addr);\r\n    event PaymentCreated(uint amount, address contractAddr, address paidBy, uint paidAt);\r\n    event PaymentUpdated(address contractAddr, address _admin);\r\n    event AccountFrozen(address addr, address indexed by);\r\n    event AccountCleared(address addr, address indexed by);\r\n    event ERC20Moved(address contractAddr, uint256 amount);\r\n    // KYC status value, compressed to uint8\r\n    enum KYCStatus {\r\n        unknown, // 0: Initial status when nothing has been done for the address yet\r\n        cleared, // 1: Address cleared by owner or KYC partner\r\n        frozen // 2: Address frozen by owner or KYC partner\r\n    }\r\n    //\r\n    enum WithdrawlStatus {\r\n        all,\r\n        approved,\r\n        none\r\n    }\r\n    // Payment List\r\n    struct PaymentList {\r\n        uint _amount;\r\n        address _contractAddr;\r\n        address _paidBy;\r\n        uint _paidAt;\r\n    }\r\n\r\n    PaymentList[] public payments;\r\n\r\n    address public admin;\r\n    uint8 private withdrawlState;\r\n\r\n    uint256 public scaling = uint256(10) ** 8;\r\n    uint256 public scaledRemainder = 0;\r\n    uint256 public scaledRewardPerToken;\r\n\r\n    mapping(address =>uint8) public addressKYCStatus;\r\n    mapping(address => uint256) public scaledRewardBalanceOf;\r\n    mapping(address => uint256) public scaledRewardCreditedTo;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    constructor() public {\r\n      admin = msg.sender;\r\n      withdrawlState = 0;\r\n      // Address KYCStatus\r\n      addressKYCStatus[admin] = uint8(KYCStatus.cleared);\r\n      // Initially assign all  tokens to the contract's creator.\r\n      balanceOf[msg.sender] = totalSupply;\r\n      emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyHolder() {\r\n        require(balanceOf[msg.sender] > 0);\r\n        _;\r\n    }\r\n\r\n    function update(address account) internal {\r\n       uint256 owed = scaledRewardPerToken - scaledRewardCreditedTo[account];\r\n       scaledRewardBalanceOf[account] += balanceOf[account] * owed;\r\n       scaledRewardCreditedTo[account] = scaledRewardPerToken;\r\n    }\r\n\r\n\r\n\r\n    function transfer(address to, uint256 value) public returns (bool success) {\r\n      require(balanceOf[msg.sender] >= value);\r\n\r\n      update(msg.sender);\r\n      update(to);\r\n\r\n      balanceOf[msg.sender] -= value;\r\n      balanceOf[to] += value;\r\n\r\n      emit Transfer(msg.sender, to, value);\r\n      return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success)\r\n    {\r\n      require(value <= balanceOf[from]);\r\n      require(value <= allowance[from][msg.sender]);\r\n\r\n      update(from);\r\n      update(to);\r\n\r\n      balanceOf[from] -= value;\r\n      balanceOf[to] += value;\r\n\r\n      allowance[from][msg.sender] -= value;\r\n      emit Transfer(from, to, value);\r\n      return true;\r\n    }\r\n\r\n    function() public payable {\r\n      // scale the deposit and add the previous remainder\r\n      uint256 available = (msg.value * scaling) + scaledRemainder;\r\n\r\n      scaledRewardPerToken += available / totalSupply;\r\n\r\n      // compute the new remainder\r\n      scaledRemainder = available % totalSupply;\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    function deposit() public payable {\r\n      // scale the deposit and add the previous remainder\r\n      uint256 available = (msg.value * scaling) + scaledRemainder;\r\n\r\n      scaledRewardPerToken += available / totalSupply;\r\n\r\n      // compute the new remainder\r\n      scaledRemainder = available % totalSupply;\r\n\r\n    }\r\n\r\n    function withdraw() public onlyHolder {\r\n      uint8 status = addressKYCStatus[msg.sender];\r\n      // Already frozen\r\n      if(status == uint8(KYCStatus.frozen)) {\r\n        revert();\r\n      }\r\n      // None are allowed to withdraw\r\n      if(withdrawlState == uint8(WithdrawlStatus.none)){\r\n        revert();\r\n      }\r\n      // Only approved users are allowed to withdraw\r\n      if(withdrawlState == uint8(WithdrawlStatus.approved) && status != uint8(KYCStatus.cleared)){\r\n        revert();\r\n      }\r\n\r\n      update(msg.sender);\r\n      uint256 amount = scaledRewardBalanceOf[msg.sender] / scaling;\r\n      scaledRewardBalanceOf[msg.sender] %= scaling;  // retain the remainder\r\n      msg.sender.transfer(amount);\r\n      emit Withdraw(msg.sender, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool success)\r\n    {\r\n      allowance[msg.sender][spender] = value;\r\n      emit Approval(msg.sender, spender, value);\r\n      return true;\r\n    }\r\n\r\n    function pendingRewardsOf(address _addr) constant external returns (uint256) {\r\n      uint256 amount = scaledRewardBalanceOf[_addr];\r\n      return (amount);\r\n    }\r\n\r\n\r\n    function emergencyERC20Drain(address _contract, uint _amount) public onlyOwner {\r\n      ERC20 token = ERC20(_contract);\r\n      // owner can drain tokens that are sent here by mistake\r\n      token.transfer(msg.sender, _amount);\r\n      emit ERC20Moved(_contract, _amount);\r\n    }\r\n\r\n\r\n    function depositPayment(address _contractAddr) public payable returns (uint, uint, address, address, uint) {\r\n      uint PaymentId = payments.length++;\r\n      PaymentList storage PaymentData = payments[PaymentId];\r\n      PaymentData._amount = msg.value;\r\n      PaymentData._paidBy = msg.sender;\r\n      PaymentData._paidAt = block.number;\r\n      PaymentData._contractAddr = _contractAddr;\r\n      emit PaymentCreated(PaymentData._amount, PaymentData._contractAddr,PaymentData._paidBy, PaymentData._paidAt);\r\n      return (PaymentId, payments[PaymentId]._amount, payments[PaymentId]._contractAddr, payments[PaymentId]._paidBy, payments[PaymentId]._paidAt);\r\n\r\n    }\r\n\r\n    function updatePayment(uint PaymentId, address _contractAddr) public onlyOwner {\r\n      PaymentList storage payment = payments[PaymentId];\r\n      payment._contractAddr = _contractAddr;\r\n      emit PaymentUpdated(_contractAddr, msg.sender);\r\n    }\r\n\r\n    function getPaymentsCount() constant public returns(uint) {\r\n      uint paymentsNum = payments.length;\r\n      return(paymentsNum);\r\n    }\r\n\r\n\r\n\r\n    function getPayment(uint PaymentId) view public returns ( uint, address, address, uint) {\r\n      return (payments[PaymentId]._amount, payments[PaymentId]._contractAddr, payments[PaymentId]._paidBy, payments[PaymentId]._paidAt);\r\n    }\r\n\r\n\r\n    function changeAdmin(address newAdmin) public onlyOwner {\r\n      // owner can re-assign the admin\r\n      admin = newAdmin;\r\n      emit AdminTransferred(admin, newAdmin);\r\n    }\r\n\r\n    function changeWithdrawState(uint8 status) public onlyOwner {\r\n      require(status <= uint8(WithdrawlStatus.none));\r\n      withdrawlState = status;\r\n      emit WithdrawlStateChanged(withdrawlState, msg.sender);\r\n    }\r\n\r\n\r\n    function getAddressStatus(address addr) public constant returns (uint8) {\r\n      return uint8(addressKYCStatus[addr]);\r\n    }\r\n\r\n    function clearAccount(address addr) public onlyOwner {\r\n      uint8 status = addressKYCStatus[addr];\r\n      // Already frozen\r\n      if(status == uint8(KYCStatus.cleared)) {\r\n        revert();\r\n      }\r\n      addressKYCStatus[addr] = uint8(KYCStatus.cleared);\r\n      emit AccountCleared(addr, msg.sender);\r\n    }\r\n\r\n\r\n    function freezeAccount(address addr) public onlyOwner {\r\n      uint8 status = addressKYCStatus[addr];\r\n      // Already frozen\r\n      if(status == uint8(KYCStatus.frozen)) {\r\n        revert();\r\n      }\r\n\r\n      addressKYCStatus[addr] = uint8(KYCStatus.frozen);\r\n      emit AccountFrozen(addr, msg.sender);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"PaymentId\",\"type\":\"uint256\"}],\"name\":\"getPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"PaymentId\",\"type\":\"uint256\"},{\"name\":\"_contractAddr\",\"type\":\"address\"}],\"name\":\"updatePayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"pendingRewardsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddr\",\"type\":\"address\"}],\"name\":\"depositPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"scaledRemainder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"changeWithdrawState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_contractAddr\",\"type\":\"address\"},{\"name\":\"_paidBy\",\"type\":\"address\"},{\"name\":\"_paidAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"clearAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"scaledRewardCreditedTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"scaledRewardBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"scaledRewardPerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPaymentsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"scaling\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAddressStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressKYCStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WithdrawlStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paidBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paidAt\",\"type\":\"uint256\"}],\"name\":\"PaymentCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"PaymentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"AccountFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"AccountCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Moved\",\"type\":\"event\"}]","ContractName":"ERC20FXT","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ea44b955b21e1588646b2912d700099d291ad1c135a8a9572af42d1007cd7d9f"}]}