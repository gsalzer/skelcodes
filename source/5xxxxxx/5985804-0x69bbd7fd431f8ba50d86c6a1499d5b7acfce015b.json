{"status":"1","message":"OK","result":[{"SourceCode":"//File: contracts\\EthereumSign.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\ncontract EthereumSign {\r\n    \r\n    //archive of digital certificates, every certificate combine signer \r\n    //address and arts guid \r\n    mapping(bytes32 => Version[]) digitalCertificateArchive;\r\n    \r\n    \r\n    struct Version {\r\n        uint8 version;\r\n        bytes32 sign;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    function Sign(string guid, string hash) public {\r\n        address _signer = msg.sender;\r\n        string memory addressString = toString(_signer);\r\n        //combine signer with guid of arts to create an archive managed by the signer\r\n        string memory concatenatedData = strConcat(addressString,guid);\r\n        bytes32 hashed = keccak256(concatenatedData);\r\n        \r\n        uint8 version = 1;\r\n        Version[] memory versions = digitalCertificateArchive[hashed];\r\n        uint length =  versions.length;\r\n        for(uint8 i = 0; i < length; i++)\r\n        {\r\n            version = i+2;\r\n        }\r\n\r\n        bytes32 hashedSign = keccak256(hash); \r\n        Version memory v = Version(version,hashedSign,now);\r\n        digitalCertificateArchive[hashed].push(v);\r\n        \r\n    }\r\n\r\n    function GetSign(string guid, address signer) public view returns(bytes32 sign, uint8 signedVersion,uint256 timestamp){\r\n        address _signer = signer;\r\n        string memory addressString = toString(_signer);\r\n        //combine signer with guid of arts to create an archive managed by the signer\r\n        string memory concatenatedData = strConcat(addressString,guid);\r\n        bytes32 hashed = keccak256(concatenatedData);\r\n        uint length =  digitalCertificateArchive[hashed].length;\r\n        Version memory v = digitalCertificateArchive[hashed][length-1];\r\n        return (v.sign, v.version, v.timestamp);\r\n    }\r\n\r\n    function GetSignVersion(string guid, address signer, uint version) public view returns(bytes32 sign, uint8 signedVersion,uint256 timestamp){\r\n        address _signer = signer;\r\n        string memory addressString = toString(_signer);\r\n        //combine signer with guid of arts to create an archive managed by the signer\r\n        string memory concatenatedData = strConcat(addressString,guid);\r\n        bytes32 hashed = keccak256(concatenatedData);\r\n        Version memory v = digitalCertificateArchive[hashed][version-1];\r\n        return (v.sign, v.version, v.timestamp);\r\n    }\r\n\r\n    \r\n    \r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n    \r\n    function strConcat(string _a, string _b) internal returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n    \r\n    function toString(address x) returns (string) {\r\n        bytes memory b = new bytes(20);\r\n        for (uint i = 0; i < 20; i++)\r\n            b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));\r\n        return string(b);\r\n    }\r\n    \r\n    function bytes32ToString(bytes32 x) constant returns (string) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n    return string(bytesStringTrimmed);\r\n}\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"guid\",\"type\":\"string\"},{\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"Sign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"guid\",\"type\":\"string\"},{\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"GetSign\",\"outputs\":[{\"name\":\"sign\",\"type\":\"bytes32\"},{\"name\":\"signedVersion\",\"type\":\"uint8\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"address\"}],\"name\":\"toString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"guid\",\"type\":\"string\"},{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"GetSignVersion\",\"outputs\":[{\"name\":\"sign\",\"type\":\"bytes32\"},{\"name\":\"signedVersion\",\"type\":\"uint8\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EthereumSign","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2bf29001ed7587f5c60ee5266e905f24b7d56279fdce58146a507d2427f1cce9"}]}