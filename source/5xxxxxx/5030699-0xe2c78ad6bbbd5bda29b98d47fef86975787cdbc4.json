{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is\r\ngreater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns\r\n(uint256);\r\n  function transferFrom(address from, address to, uint256 value) public\r\nreturns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256\r\nvalue);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood:\r\nhttps://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public\r\nreturns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of\r\ntokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk\r\nthat someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One\r\npossible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set\r\nthe desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a\r\nspender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for\r\nthe spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns\r\n(uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and\r\nwait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public\r\nreturns (bool) {\r\n    allowed[msg.sender][_spender] =\r\nallowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and\r\nwait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance\r\nby.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public\r\nreturns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract RandoCoin is StandardToken {\r\n    using SafeMath for uint256;\r\n    \r\n    // Standard token variables\r\n    // Initial supply is 100MM RAND\r\n    uint256 public totalSupply = (100000000) * 1000;\r\n    string public name = \"RandoCoin\";\r\n    string public symbol = \"RAND\";\r\n    uint8 public decimals = 3;\r\n    uint BLOCK_WAIT_TIME = 30;\r\n    uint INIT_BLOCK_WAIT = 250;\r\n    \r\n    // Dev variables\r\n    address owner;\r\n    uint public buyPrice;\r\n    uint public sellPrice;\r\n    uint public priceChangeBlock;\r\n    uint public oldPriceChangeBlock;\r\n    bool isInitialized = false;\r\n    \r\n    // PRICE VARIABLES -- all prices are in wei per rando\r\n    // 1000 rando =  1 RAND\r\n    // Prices will change randomly in the range\r\n    // between 0.00001 and 0.01 ETH per rand\r\n    // Which is between $0.01 and $10\r\n    // Initial price $5 per RAND\r\n    // That means that the first price change has a 50/50\r\n    // chance of going up or down.\r\n    uint public PRICE_MIN = 0.00000001 ether;\r\n    uint public PRICE_MAX = 0.00001 ether;\r\n    uint public PRICE_MID = 0.000005 ether;\r\n    \r\n    // If anyone wants to write a bot...\r\n    event BuyPriceChanged(uint newBuyPrice);\r\n    event SellPriceChanged(uint newSellPrice);\r\n\r\n    function RandoCoin() public payable {\r\n        owner = msg.sender;\r\n        // No premining!\r\n        // The contract holds the whole balance\r\n        balances[this] = totalSupply;\r\n        \r\n        // These numbers don't matter, they will be overriden when init() is called\r\n        // Which will kick off the contract\r\n        priceChangeBlock = block.number + INIT_BLOCK_WAIT;\r\n        oldPriceChangeBlock = block.number;\r\n        buyPrice = PRICE_MID;\r\n        sellPrice = PRICE_MID;\r\n    }\r\n    \r\n    // Can only be called once\r\n    // This kicks off the initial 1 hour timer\r\n    // So I can time it with a social media post\r\n    function init() public {\r\n        require(msg.sender == owner);\r\n        require(!isInitialized);\r\n        \r\n        // Initial prices in wei per rando\r\n        buyPrice = PRICE_MID;\r\n        sellPrice = PRICE_MID;\r\n        \r\n        // First time change is roughly 1 hr (250 blocks)\r\n        // This gives more time for people to invest in the initial price\r\n        oldPriceChangeBlock = block.number;\r\n        priceChangeBlock = block.number + INIT_BLOCK_WAIT;\r\n        isInitialized = true;\r\n    }\r\n    \r\n    function buy() public requireNotExpired requireCooldown payable returns (uint amount){\r\n        amount = msg.value / buyPrice;\r\n        require(balances[this] >= amount);\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n        balances[this] = balances[this].sub(amount);\r\n        \r\n        Transfer(this, msg.sender, amount);\r\n        return amount;\r\n    }\r\n    \r\n    function sell(uint amount) public requireNotExpired requireCooldown returns (uint revenue){\r\n        require(balances[msg.sender] >= amount);\r\n        balances[this] += amount;\r\n        balances[msg.sender] -= amount;\r\n\r\n        revenue = amount.mul(sellPrice);\r\n        msg.sender.transfer(revenue);\r\n        \r\n        Transfer(msg.sender, this, amount);\r\n        return revenue;\r\n    }\r\n    \r\n    // Change the price if possible\r\n    // Get rewarded with 1 RAND\r\n    function maybeChangePrice() public {\r\n        // We actually need two block hashes, one for buy price, one for sell\r\n        // We will use ppriceChangeBlock and priceChangeBlock + 1, so we need\r\n        // to wait for 1 more block\r\n        // This will create a 1 block period where you cannot buy/sell or\r\n        // change the price, sorry!\r\n        require(block.number > priceChangeBlock + 1);\r\n        \r\n        // Block is too far away to get hash, restart timer\r\n        // Sorry, no reward here. At this point the contract\r\n        // is probably dead anyway.\r\n        if (block.number - priceChangeBlock > 250) {\r\n            waitMoreTime();\r\n            return;\r\n        }\r\n        \r\n        // I know this isn't good but\r\n        // Open challenge if a miner can break this\r\n        sellPrice = shittyRand(0);\r\n        buyPrice = shittyRand(1);\r\n        \r\n        // Set minimum prices to avoid miniscule amounts\r\n        if (sellPrice < PRICE_MIN) {\r\n            sellPrice = PRICE_MIN;\r\n        }\r\n        \r\n        if (buyPrice < PRICE_MIN) {\r\n            buyPrice = PRICE_MIN;\r\n        }\r\n        \r\n        BuyPriceChanged(buyPrice);\r\n        SellPriceChanged(sellPrice);\r\n\r\n        oldPriceChangeBlock = priceChangeBlock;\r\n        priceChangeBlock = block.number + BLOCK_WAIT_TIME;\r\n        \r\n        // Reward the person who refreshed priceChangeBlock 0.1 RAND\r\n        uint reward = 100;\r\n        if (balances[this] > reward) {\r\n            balances[msg.sender] = balances[msg.sender].add(reward);\r\n            balances[this] = balances[this].sub(reward);\r\n        }\r\n    }\r\n    \r\n    // You don't want someone to be able to change the price and then\r\n    // Execute buy and sell in the same block, they could potentially\r\n    // game the system (I think..), so freeze buying for 2 blocks after a price change.\r\n    modifier requireCooldown() {\r\n        // This should always be true..\r\n        if (block.number >= oldPriceChangeBlock) {\r\n            require(block.number - priceChangeBlock > 2);\r\n        }\r\n        _;\r\n    }\r\n    \r\n    modifier requireNotExpired() {\r\n        require(block.number < priceChangeBlock);\r\n        _;\r\n    }\r\n    \r\n    // Wait more time without changing the price\r\n    // Used only when the blockhash is too far away\r\n    // If we didn't do this, and instead picked a block within 256\r\n    // Someone could game the system and wait to call the function \r\n    // until a block which gave favorable prices.\r\n    function waitMoreTime() internal {\r\n        priceChangeBlock = block.number + BLOCK_WAIT_TIME;\r\n    }\r\n    \r\n    // Requires block to be 256 away\r\n    function shittyRand(uint seed) public returns(uint) {\r\n        uint randomSeed = uint(block.blockhash(priceChangeBlock + seed));\r\n        return randomSeed % PRICE_MAX;\r\n    }\r\n    \r\n    function getBlockNumber() public returns(uint) {\r\n        return block.number;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldPriceChangeBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceChangeBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_MID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"maybeChangePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"shittyRand\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"name\":\"revenue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"BuyPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newSellPrice\",\"type\":\"uint256\"}],\"name\":\"SellPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"RandoCoin","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2253cb3f334f72f19ab080c18ca451d5203182c8939b2eeb262c03e9b815ceb8"}]}