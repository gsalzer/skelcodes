{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Receive approval and then execute function\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint tokens, address token, bytes data) public;\r\n}\r\n\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n// Note: Div only\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// ------------------------------------------------------------------------\r\n// Standard ERC20 Token Contract.\r\n// Fixed Supply with burn capabilities\r\n// ------------------------------------------------------------------------\r\ncontract ERC20 is ERC20Interface{\r\n    using SafeMath for uint; \r\n\r\n    // ------------------------------------------------------------------------\r\n    /// Token supply, balances and allowance\r\n    // ------------------------------------------------------------------------\r\n    uint internal supply;\r\n    mapping (address => uint) internal balances;\r\n    mapping (address => mapping (address => uint)) internal allowed;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token Information\r\n    // ------------------------------------------------------------------------\r\n    string public name;                   // Full Token name\r\n    uint8 public decimals;                // How many decimals to show\r\n    string public symbol;                 // An identifier\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor(uint _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) \r\n    public {\r\n        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\r\n        supply = _initialAmount;                        // Update total supply\r\n        name = _tokenName;                                   // Set the name for display purposes\r\n        decimals = _decimalUnits;                            // Amount of decimals for display purposes\r\n        symbol = _tokenSymbol;                               // Set the symbol for display purposes\r\n        emit Transfer(address(0), msg.sender, _initialAmount);    // Transfer event indicating token creation\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer _amount tokens to address _to \r\n    // Sender must have enough tokens. Cannot send to 0x0.\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address _to, uint _amount) \r\n    public \r\n    returns (bool success) {\r\n        require(_to != address(0));         // Use burn() function instead\r\n        require(_to != address(this));\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer _amount of tokens if _from has allowed msg.sender to do so\r\n    //  _from must have enough tokens + must have approved msg.sender \r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address _from, address _to, uint _amount) \r\n    public \r\n    returns (bool success) {\r\n        require(_to != address(0)); \r\n        require(_to != address(this)); \r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    // ------------------------------------------------------------------------\r\n    function approve(address _spender, uint _amount) \r\n    public \r\n    returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token holder can notify a contract that it has been approved\r\n    // to spend _amount of tokens\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address _spender, uint _amount, bytes _data) \r\n    public \r\n    returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        ApproveAndCallFallBack(_spender).receiveApproval(msg.sender, _amount, this, _data);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Removes senders tokens from supply.\r\n    // Lowers user balance and totalSupply by _amount\r\n    // ------------------------------------------------------------------------   \r\n    function burn(uint _amount) \r\n    public \r\n    returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        supply = supply.sub(_amount);\r\n        emit LogBurn(msg.sender, _amount);\r\n        emit Transfer(msg.sender, address(0), _amount);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // An approved sender can burn _amount tokens of user _from\r\n    // Lowers user balance and supply by _amount \r\n    // ------------------------------------------------------------------------    \r\n    function burnFrom(address _from, uint _amount) \r\n    public \r\n    returns (bool success) {\r\n        balances[_from] = balances[_from].sub(_amount);                         // Subtract from the targeted balance\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);             // Subtract from the sender's allowance\r\n        supply = supply.sub(_amount);                              // Update supply\r\n        emit LogBurn(_from, _amount);\r\n        emit Transfer(_from, address(0), _amount);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the number of tokens in circulation\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply()\r\n    public \r\n    view \r\n    returns (uint tokenSupply) { \r\n        return supply; \r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the token balance of user\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address _tokenHolder) \r\n    public \r\n    view \r\n    returns (uint balance) {\r\n        return balances[_tokenHolder];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns amount of tokens _spender is allowed to transfer or burn\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address _tokenHolder, address _spender) \r\n    public \r\n    view \r\n    returns (uint remaining) {\r\n        return allowed[_tokenHolder][_spender];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Fallback function\r\n    // Won't accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () \r\n    public \r\n    payable {\r\n        revert();\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Event: Logs the amount of tokens burned and the address of the burner\r\n    // ------------------------------------------------------------------------\r\n    event LogBurn(address indexed _burner, uint indexed _amountBurned); \r\n}\r\n\r\n// ------------------------------------------------------------------------\r\n// This contract is in-charge of receiving old MyBit tokens and returning\r\n// New MyBit tokens to users.\r\n// Note: Old tokens have 8 decimal places, while new tokens have 18 decimals\r\n// 1.00000000 OldMyBit == 36.000000000000000000 NewMyBit\r\n// ------------------------------------------------------------------------  \r\ncontract TokenSwap { \r\n  using SafeMath for uint256; \r\n\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Token addresses\r\n  // ------------------------------------------------------------------------  \r\n  address public oldTokenAddress;\r\n  ERC20 public newToken; \r\n\r\n  // ------------------------------------------------------------------------\r\n  // Token Transition Info\r\n  // ------------------------------------------------------------------------  \r\n  uint256 public scalingFactor = 36;          // 1 OldMyBit = 36 NewMyBit\r\n  uint256 public tenDecimalPlaces = 10**10; \r\n\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Old Token Supply \r\n  // ------------------------------------------------------------------------  \r\n  uint256 public oldCirculatingSupply;      // Old MyBit supply in circulation (8 decimals)\r\n\r\n\r\n  // ------------------------------------------------------------------------\r\n  // New Token Supply\r\n  // ------------------------------------------------------------------------  \r\n  uint256 public totalSupply = 18000000000000000 * tenDecimalPlaces;      // New token supply. (Moving from 8 decimal places to 18)\r\n  uint256 public circulatingSupply = 10123464384447336 * tenDecimalPlaces;   // New user supply. \r\n  uint256 public foundationSupply = totalSupply - circulatingSupply;      // Foundation supply. \r\n\r\n  // ------------------------------------------------------------------------\r\n  // Distribution numbers \r\n  // ------------------------------------------------------------------------\r\n  uint256 public tokensRedeemed = 0;    // Total number of new tokens redeemed.\r\n\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Double check that all variables are set properly before swapping tokens\r\n  // ------------------------------------------------------------------------\r\n  constructor(address _myBitFoundation, address _oldTokenAddress)\r\n  public { \r\n    oldTokenAddress = _oldTokenAddress; \r\n    oldCirculatingSupply = ERC20Interface(oldTokenAddress).totalSupply(); \r\n    assert ((circulatingSupply.div(oldCirculatingSupply.mul(tenDecimalPlaces))) == scalingFactor);\r\n    assert (oldCirculatingSupply.mul(scalingFactor.mul(tenDecimalPlaces)) == circulatingSupply); \r\n    newToken = new ERC20(totalSupply, \"MyBit\", 18, \"MYB\"); \r\n    newToken.transfer(_myBitFoundation, foundationSupply);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Users can trade old MyBit tokens for new MyBit tokens here \r\n  // Must approve this contract as spender to swap tokens\r\n  // ------------------------------------------------------------------------\r\n  function swap(uint256 _amount) \r\n  public \r\n  noMint\r\n  returns (bool){ \r\n    require(ERC20Interface(oldTokenAddress).transferFrom(msg.sender, this, _amount));\r\n    uint256 newTokenAmount = _amount.mul(scalingFactor).mul(tenDecimalPlaces);   // Add 10 more decimals to number of tokens\r\n    assert(tokensRedeemed.add(newTokenAmount) <= circulatingSupply);       // redeemed tokens should never exceed circulatingSupply\r\n    tokensRedeemed = tokensRedeemed.add(newTokenAmount);\r\n    require(newToken.transfer(msg.sender, newTokenAmount));\r\n    emit LogTokenSwap(msg.sender, _amount, block.timestamp);\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Alias for swap(). Called by old token contract when approval to transfer \r\n  // tokens has been given. \r\n  // ------------------------------------------------------------------------\r\n  function receiveApproval(address _from, uint256 _amount, address _token, bytes _data)\r\n  public \r\n  noMint\r\n  returns (bool){ \r\n    require(_token == oldTokenAddress);\r\n    require(ERC20Interface(oldTokenAddress).transferFrom(_from, this, _amount));\r\n    uint256 newTokenAmount = _amount.mul(scalingFactor).mul(tenDecimalPlaces);   // Add 10 more decimals to number of tokens\r\n    assert(tokensRedeemed.add(newTokenAmount) <= circulatingSupply);    // redeemed tokens should never exceed circulatingSupply\r\n    tokensRedeemed = tokensRedeemed.add(newTokenAmount);\r\n    require(newToken.transfer(_from, newTokenAmount));\r\n    emit LogTokenSwap(_from, _amount, block.timestamp);\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Events \r\n  // ------------------------------------------------------------------------\r\n  event LogTokenSwap(address indexed _sender, uint256 indexed _amount, uint256 indexed _timestamp); \r\n\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Modifiers \r\n  // ------------------------------------------------------------------------\r\n\r\n\r\n  // ------------------------------------------------------------------------\r\n  // This ensures that the owner of the previous token doesn't mint more \r\n  // tokens during swap\r\n  // ------------------------------------------------------------------------\r\n  modifier noMint { \r\n    require(oldCirculatingSupply == ERC20Interface(oldTokenAddress).totalSupply());\r\n    _;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"tokenSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_amountBurned\",\"type\":\"uint256\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ERC20","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000094e47b8d681715340000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000054d7942697400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d59420000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://1482116ec0ae1ef825988d2297a0bee6965b7ac319a20a8eab98c8a02395c61a"}]}