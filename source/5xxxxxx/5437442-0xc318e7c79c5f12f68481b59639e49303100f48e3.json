{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.21;\r\n\r\ncontract ThreeQueens {\r\n    address[3] public Queens;\r\n    \r\n    enum AntType {Worker, Warrior, Miner}\r\n    \r\n    struct Colony {\r\n        uint food;\r\n        uint materials;\r\n        uint gold;\r\n        uint tunnels;\r\n        \r\n        uint workers;\r\n        uint warriors;\r\n        uint miners;\r\n        \r\n        AntType spawningType;\r\n        uint lastSpawnBN;\r\n    }\r\n    \r\n    Colony[3] public colonies;\r\n    \r\n    function claimQueen(uint8 playerID)\r\n    external {\r\n        require(Queens[playerID] == 0x0);\r\n        \r\n        Queens[playerID] = msg.sender;\r\n        \r\n        colonies[playerID].food = 100;\r\n        \r\n        colonies[playerID].spawningType = AntType.Worker;\r\n        colonies[playerID].lastSpawnBN = block.number;\r\n    }\r\n    \r\n//    modifier onlyQueen() {\r\n//        require(msg.sender == Queens[0] || msg.sender == Queens[1] || msg.sender == Queens[2]);\r\n//        _;\r\n//    }\r\n    \r\n    function checkAndGetSendersID()\r\n    internal\r\n    view\r\n    returns(uint8) {\r\n        for (uint8 i=0; i<3; i++) {\r\n            if (msg.sender == Queens[i]) {\r\n                return i;\r\n            }\r\n        }\r\n        revert();\r\n    }\r\n    \r\n    function setSpawnType(AntType spawnType)\r\n    external {\r\n        uint8 playerID = checkAndGetSendersID();\r\n        \r\n        colonies[playerID].spawningType = spawnType;\r\n        colonies[playerID].lastSpawnBN = block.number;\r\n    }\r\n    \r\n    function getAntCost(AntType antType)\r\n    internal\r\n    pure\r\n    returns(uint) {\r\n        if (antType == AntType.Worker) return 1;\r\n        if (antType == AntType.Warrior) return 5;\r\n        if (antType == AntType.Miner) return 15;\r\n    }\r\n    \r\n    function spawnAnts(uint8 playerID, uint number, AntType spawnType)\r\n    internal {\r\n        uint prevFood = colonies[playerID].food;\r\n        colonies[playerID].food -= number * getAntCost(spawnType);\r\n        \r\n        // Currently this is probably still vulnerable to attacks relating to overflow...\r\n        assert(colonies[playerID].food <= prevFood);// this won't really fix it completely, but might help??\r\n        \r\n        if (spawnType == AntType.Worker) colonies[playerID].workers += number;\r\n        if (spawnType == AntType.Warrior) colonies[playerID].warriors += number;\r\n        if (spawnType == AntType.Miner) colonies[playerID].miners += number;\r\n        \r\n        colonies[playerID].lastSpawnBN = block.number;\r\n    }\r\n    \r\n    function spawn()\r\n    external {\r\n        uint8 playerID = checkAndGetSendersID();\r\n        \r\n        uint numBlocksPassed = block.number - colonies[playerID].lastSpawnBN;\r\n        uint maxSpawnTimeConstraint = numBlocksPassed; // Could change this in the future\r\n        \r\n        uint maxSpawnFoodConstraint = colonies[playerID].food / getAntCost(colonies[playerID].spawningType);\r\n        \r\n        uint spawnNumber;\r\n        if (maxSpawnTimeConstraint < maxSpawnFoodConstraint) spawnNumber = maxSpawnTimeConstraint;\r\n        else spawnNumber = maxSpawnFoodConstraint;\r\n        \r\n        spawnAnts(playerID, spawnNumber, colonies[playerID].spawningType);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colonies\",\"outputs\":[{\"name\":\"food\",\"type\":\"uint256\"},{\"name\":\"materials\",\"type\":\"uint256\"},{\"name\":\"gold\",\"type\":\"uint256\"},{\"name\":\"tunnels\",\"type\":\"uint256\"},{\"name\":\"workers\",\"type\":\"uint256\"},{\"name\":\"warriors\",\"type\":\"uint256\"},{\"name\":\"miners\",\"type\":\"uint256\"},{\"name\":\"spawningType\",\"type\":\"uint8\"},{\"name\":\"lastSpawnBN\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"playerID\",\"type\":\"uint8\"}],\"name\":\"claimQueen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spawnType\",\"type\":\"uint8\"}],\"name\":\"setSpawnType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"spawn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Queens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ThreeQueens","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://98ddc75232c04cd9e7e5b6baf4982dcb187fc8197d574bf9cb5ba246fe4d3e7b"}]}