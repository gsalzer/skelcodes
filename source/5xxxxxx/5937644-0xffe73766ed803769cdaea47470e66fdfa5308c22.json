{"status":"1","message":"OK","result":[{"SourceCode":"// SolidStamp Register contract for https://www.solidstamp.com\r\n// The source code is available at https://github.com/SolidStamp/smart-contract/\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\npragma solidity ^0.4.24;\r\n\r\ncontract SolidStampRegister is Ownable\r\n{\r\n/// @dev address of the current SolidStamp contract which can add audits\r\n    address public contractSolidStamp;\r\n\r\n    /// @dev const value to indicate the contract is audited and approved\r\n    uint8 public constant NOT_AUDITED = 0x00;\r\n\r\n    /// @dev const value to indicate the contract is audited and approved\r\n    uint8 public constant AUDITED_AND_APPROVED = 0x01;\r\n\r\n    /// @dev const value to indicate the contract is audited and rejected\r\n    uint8 public constant AUDITED_AND_REJECTED = 0x02;\r\n\r\n    /// @dev Maps auditor and code hash to the outcome of the audit of\r\n    /// the particular contract by the particular auditor.\r\n    /// Map key is: keccack256(auditor address, contract codeHash)\r\n    /// @dev codeHash is a sha3 from the contract byte code\r\n    mapping (bytes32 => uint8) public AuditOutcomes;\r\n\r\n    /// @dev event fired when a contract is sucessfully audited\r\n    event AuditRegistered(address auditor, bytes32 codeHash, bool isApproved);\r\n\r\n    /// @notice SolidStampRegister constructor\r\n    /// @dev import audits from the SolidStamp v1 contract deployed to: 0x0aA7A4482780F67c6B2862Bd68CD67A83faCe355\r\n    /// @param _existingAuditors list of existing auditors\r\n    /// @param _existingCodeHashes list of existing code hashes\r\n    /// @param _outcomes list of existing audit outcomes\r\n    /// @dev each n-th element represents an existing audit conducted by _existingAuditors[n]\r\n    /// on code hash _existingCodeHashes[n] with an outcome _outcomes[n]\r\n    constructor(address[] _existingAuditors, bytes32[] _existingCodeHashes, bool[] _outcomes) public {\r\n        uint noOfExistingAudits = _existingAuditors.length;\r\n        require(noOfExistingAudits == _existingCodeHashes.length, \"paramters mismatch\");\r\n        require(noOfExistingAudits == _outcomes.length, \"paramters mismatch\");\r\n\r\n        // set contract address temporarily to owner so that registerAuditOutcome does not revert\r\n        contractSolidStamp = msg.sender;\r\n        for (uint i=0; i<noOfExistingAudits; i++){\r\n            registerAuditOutcome(_existingAuditors[i], _existingCodeHashes[i], _outcomes[i]);\r\n        }\r\n        contractSolidStamp = 0x0;\r\n    }\r\n\r\n    function getAuditOutcome(address _auditor, bytes32 _codeHash) public view returns (uint8)\r\n    {\r\n        bytes32 hashAuditorCode = keccak256(abi.encodePacked(_auditor, _codeHash));\r\n        return AuditOutcomes[hashAuditorCode];\r\n    }\r\n\r\n    function registerAuditOutcome(address _auditor, bytes32 _codeHash, bool _isApproved) public onlySolidStampContract\r\n    {\r\n        require(_auditor != 0x0, \"auditor cannot be 0x0\");\r\n        bytes32 hashAuditorCode = keccak256(abi.encodePacked(_auditor, _codeHash));\r\n        if ( _isApproved )\r\n            AuditOutcomes[hashAuditorCode] = AUDITED_AND_APPROVED;\r\n        else\r\n            AuditOutcomes[hashAuditorCode] = AUDITED_AND_REJECTED;\r\n        emit AuditRegistered(_auditor, _codeHash, _isApproved);\r\n    }\r\n\r\n\r\n    event SolidStampContractChanged(address newSolidStamp);\r\n    /**\r\n     * @dev Throws if called by any account other than the contractSolidStamp\r\n     */\r\n    modifier onlySolidStampContract() {\r\n      require(msg.sender == contractSolidStamp, \"cannot be run by not SolidStamp contract\");\r\n      _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the registry to a _newSolidStamp.\r\n     * @param _newSolidStamp The address to transfer control registry to.\r\n     */\r\n    function changeSolidStampContract(address _newSolidStamp) public onlyOwner {\r\n      require(_newSolidStamp != address(0), \"SolidStamp contract cannot be 0x0\");\r\n      emit SolidStampContractChanged(_newSolidStamp);\r\n      contractSolidStamp = _newSolidStamp;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"contractSolidStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_auditor\",\"type\":\"address\"},{\"name\":\"_codeHash\",\"type\":\"bytes32\"}],\"name\":\"getAuditOutcome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AUDITED_AND_APPROVED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NOT_AUDITED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"AuditOutcomes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSolidStamp\",\"type\":\"address\"}],\"name\":\"changeSolidStampContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auditor\",\"type\":\"address\"},{\"name\":\"_codeHash\",\"type\":\"bytes32\"},{\"name\":\"_isApproved\",\"type\":\"bool\"}],\"name\":\"registerAuditOutcome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AUDITED_AND_REJECTED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_existingAuditors\",\"type\":\"address[]\"},{\"name\":\"_existingCodeHashes\",\"type\":\"bytes32[]\"},{\"name\":\"_outcomes\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"AuditRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newSolidStamp\",\"type\":\"address\"}],\"name\":\"SolidStampContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SolidStampRegister","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003e0000000000000000000000000000000000000000000000000000000000000000d0000000000000000000000008bfb0a6848a402d9931ba22797f82781c6e1711f0000000000000000000000008bfb0a6848a402d9931ba22797f82781c6e1711f0000000000000000000000008bfb0a6848a402d9931ba22797f82781c6e1711f0000000000000000000000004602adbfe84beb925c924c19d3ae3536883892650000000000000000000000004602adbfe84beb925c924c19d3ae353688389265000000000000000000000000e73a1998ce936acebeb7899d790a7a69c541b695000000000000000000000000e73a1998ce936acebeb7899d790a7a69c541b695000000000000000000000000e73a1998ce936acebeb7899d790a7a69c541b69500000000000000000000000059142a4be50ed4d390fc5e1f3ec8f9dbd708d08a00000000000000000000000059142a4be50ed4d390fc5e1f3ec8f9dbd708d08a00000000000000000000000059142a4be50ed4d390fc5e1f3ec8f9dbd708d08a00000000000000000000000059142a4be50ed4d390fc5e1f3ec8f9dbd708d08a00000000000000000000000059142a4be50ed4d390fc5e1f3ec8f9dbd708d08a000000000000000000000000000000000000000000000000000000000000000dda33e318deb07af0b10fe7707ee37b63f2363ef7e5effa603851ce2856af32810d08992ec0b20f49632cc3771127bfef965736be1389b54899a8564982745b432a8161cba2e29f988a34f48253cfcaa3c06e7b9026153a3f6927dbc56aeb63551790c8cab6ef73bba80f7dae16b40446c78620f825de14d0c01392b8699bb0087fa51f418a39f67df894cfadd96705779a36d047824e3a759ef8f03b53b6c73d0241be77ba68a35c638cf282ee743850c27c5d44036648fb223ef93551734edc8d6e37db5d99f11e37d9c88caba4d5d18b82e2df3b95cf2f796374a13f1d1ba22ab20342bb55c62e76cfeeffd1419d6ff6d3fc82f2c4cfdd805d09ee1a6cf725023edcce76a4a535f25ec09910d0f28d807c4f486d002c84faca289a033341a14bd1efc7ebb66551f7a6752265387155a85f27fd26cc867b55cab22a6e94a39d0241be77ba68a35c638cf282ee743850c27c5d44036648fb223ef93551734edc3ef23062542ed96f1c83b8febc152ca39343b03a81f68a8ddc4e9d46e266dd11d0a06b12ac47863b5c7be4185c2deaad1c61557033f56c7d4ea74429cbb25e23000000000000000000000000000000000000000000000000000000000000000dibrary":"","SwarmSource":"bzzr://4eb466182666e995dfc10998ef4f664acd65ec46fb96148f4e720774e86d1df0"}]}