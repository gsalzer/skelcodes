{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract OysterShell {\r\n    // Public variables of SHL\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    uint256 public lockedSupply;\r\n    address public director;\r\n    bool public directorLock;\r\n    uint256 public feeAmount;\r\n    uint256 public retentionMin;\r\n    uint256 public retentionMax;\r\n    uint256 public lockMin;\r\n    uint256 public lockMax;\r\n\r\n    // Array definitions\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => uint256) public locked;\r\n\r\n    // ERC20 event\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\n    // ERC20 event\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed _from, uint256 _value);\r\n    \r\n    // This notifies clients about an address getting locked\r\n    event Lock(address indexed _target, uint256 _value, uint256 _release);\r\n    \r\n    // This notifies clients about a claim being made on a locked address\r\n    event Claim(address indexed _target, address indexed _payout, address indexed _fee);\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract\r\n     */\r\n    function OysterShell() public {\r\n        director = msg.sender;\r\n        name = \"Oyster Shell\";\r\n        symbol = \"SHL\";\r\n        decimals = 18;\r\n        directorLock = false;\r\n        totalSupply = 98592692 * 10 ** uint256(decimals);\r\n        lockedSupply = 0;\r\n        \r\n        // Assign total SHL supply to the director\r\n        balances[director] = totalSupply;\r\n        \r\n        // SHL fee paid to brokers\r\n        feeAmount = 1 * 10 ** uint256(decimals);\r\n        \r\n        // Minimum SHL that can get locked\r\n        retentionMin = 20 * 10 ** uint256(decimals);\r\n        \r\n        // Maximum SHL that can get locked\r\n        retentionMax = 200 * 10 ** uint256(decimals);\r\n        \r\n        // Minimum lock duration\r\n        lockMin = 10;\r\n        \r\n        // Maximum lock duration\r\n        lockMax = 360;\r\n    }\r\n    \r\n    /**\r\n     * ERC20 balance function\r\n     */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    /**\r\n     * SHL lock time retrieval function\r\n     */\r\n    function lockTime(address _owner) public constant returns (uint256 lockedValue) {\r\n        return locked[_owner];\r\n    }\r\n    \r\n    modifier onlyDirector {\r\n        // Director can lock themselves out to complete decentralization of Oyster network\r\n        // An alternative is that another smart contract could become the decentralized director\r\n        require(!directorLock);\r\n        \r\n        // Only the director is permitted\r\n        require(msg.sender == director);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyDirectorForce {\r\n        // Only the director is permitted\r\n        require(msg.sender == director);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Transfers the director to a new address\r\n     */\r\n    function transferDirector(address newDirector) public onlyDirectorForce {\r\n        director = newDirector;\r\n    }\r\n    \r\n    /**\r\n     * Withdraw funds from the contract\r\n     */\r\n    function withdrawFunds() public onlyDirectorForce {\r\n        director.transfer(this.balance);\r\n    }\r\n    \r\n    /**\r\n     * Permanently lock out the director to decentralize Oyster\r\n     * Invocation is discretionary because Oyster might be better suited to\r\n     * transition to an artificially intelligent smart contract director\r\n     */\r\n    function selfLock() public payable onlyDirector {\r\n        // Prevents accidental lockout\r\n        require(msg.value == 10 ether);\r\n        \r\n        // Permanently lock out the director\r\n        directorLock = true;\r\n    }\r\n    \r\n    /**\r\n     * Director can alter the broker fee rate\r\n     */\r\n    function amendFee(uint256 feeAmountSet) public onlyDirector returns (bool success) {\r\n        feeAmount = feeAmountSet;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Director can alter the upper and lower bounds of SHL locking capacity\r\n     */\r\n    function amendRetention(uint256 retentionMinSet, uint256 retentionMaxSet) public onlyDirector returns (bool success) {\r\n        // Set retentionMin\r\n        retentionMin = retentionMinSet;\r\n        \r\n        // Set retentionMax\r\n        retentionMax = retentionMaxSet;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Director can alter the upper and lower bounds of SHL locking duration\r\n     */\r\n    function amendLock(uint256 lockMinSet, uint256 lockMaxSet) public onlyDirector returns (bool success) {\r\n        // Set lockMin\r\n        lockMin = lockMinSet;\r\n        \r\n        // Set lockMax\r\n        lockMax = lockMaxSet;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Oyster Protocol Function\r\n     * More information at https://oyster.ws/ShellWhitepaper.pdf\r\n     * \r\n     * Lock an address\r\n     *\r\n     * @param _duration the time duration that the SHL should remain locked\r\n     */\r\n    function lock(uint256 _duration) public returns (bool success) {\r\n        // The address must be previously unlocked\r\n        require(locked[msg.sender] == 0);\r\n        \r\n        // An address must have at least retentionMin to be locked\r\n        require(balances[msg.sender] >= retentionMin);\r\n        \r\n        // Prevent addresses with large balances from getting locked\r\n        require(balances[msg.sender] <= retentionMax);\r\n        \r\n        // Enforce minimum lock duration\r\n        require(_duration >= lockMin);\r\n        \r\n        // Enforce maximum lock duration\r\n        require(_duration <= lockMax);\r\n        \r\n        // Set locked state to true\r\n        locked[msg.sender] = block.timestamp + _duration;\r\n        \r\n        // Add to lockedSupply\r\n        lockedSupply += balances[msg.sender];\r\n        \r\n        // Execute an event reflecting the change\r\n        Lock(msg.sender, balances[msg.sender], locked[msg.sender]);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Oyster Protocol Function\r\n     * More information at https://oyster.ws/ShellWhitepaper.pdf\r\n     * \r\n     * Claim all SHL from a locked address\r\n     *\r\n     * @param _payout the address of the website owner\r\n     * @param _fee the address of the broker node\r\n     */\r\n    function claim(address _payout, address _fee) public returns (bool success) {\r\n        // The claimed address must have already been locked\r\n        require(locked[msg.sender] <= block.timestamp && locked[msg.sender] != 0);\r\n        \r\n        // The payout and fee addresses must be different\r\n        require(_payout != _fee);\r\n        \r\n        // The claimed address cannot pay itself\r\n        require(msg.sender != _payout);\r\n        \r\n        // The claimed address cannot pay itself\r\n        require(msg.sender != _fee);\r\n        \r\n        // Check if the locked address has enough\r\n        require(balances[msg.sender] >= retentionMin);\r\n        \r\n        // Save this for an assertion in the future\r\n        uint256 previousBalances = balances[msg.sender] + balances[_payout] + balances[_fee];\r\n        \r\n        // Calculate amount to be paid to _payout\r\n        uint256 payAmount = balances[msg.sender] - feeAmount;\r\n        \r\n        // Take from lockedSupply\r\n        lockedSupply -= balances[msg.sender];\r\n        \r\n        // Reset locked address balance to zero\r\n        balances[msg.sender] = 0;\r\n        \r\n        // Pay the website owner that invoked the web node that found the SHL seed key\r\n        balances[_payout] += payAmount;\r\n        \r\n        // Pay the broker node that unlocked the SHL\r\n        balances[_fee] += feeAmount;\r\n        \r\n        // Execute events to reflect the changes\r\n        Claim(msg.sender, _payout, _fee);\r\n        Transfer(msg.sender, _payout, payAmount);\r\n        Transfer(msg.sender, _fee, feeAmount);\r\n        \r\n        // Failsafe logic that should never be false\r\n        assert(balances[msg.sender] + balances[_payout] + balances[_fee] == previousBalances);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Crowdsale function\r\n     */\r\n    function () public payable {\r\n        // Prevent ETH from getting sent to contract\r\n        require(false);\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, can be called by this contract only\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Sending addresses cannot be locked\r\n        require(locked[_from] == 0);\r\n        \r\n        // If the receiving address is locked, it cannot exceed retentionMax\r\n        if (locked[_to] > 0) {\r\n            require(balances[_to] + _value <= retentionMax);\r\n        }\r\n        \r\n        // Prevent transfer to 0x0 address, use burn() instead\r\n        require(_to != 0x0);\r\n        \r\n        // Check if the sender has enough\r\n        require(balances[_from] >= _value);\r\n        \r\n        // Check for overflows\r\n        require(balances[_to] + _value > balances[_to]);\r\n        \r\n        // Save this for an assertion in the future\r\n        uint256 previousBalances = balances[_from] + balances[_to];\r\n        \r\n        // Subtract from the sender\r\n        balances[_from] -= _value;\r\n        \r\n        // Add the same to the recipient\r\n        balances[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        \r\n        // Failsafe logic that should never be false\r\n        assert(balances[_from] + balances[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to the address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _to the address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        // Check allowance\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender the address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        // Locked addresses cannot be approved\r\n        require(locked[msg.sender] == 0);\r\n        \r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender the address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        // Locked addresses cannot be burnt\r\n        require(locked[msg.sender] == 0);\r\n        \r\n        // Check if the sender has enough\r\n        require(balances[msg.sender] >= _value);\r\n        \r\n        // Subtract from the sender\r\n        balances[msg.sender] -= _value;\r\n        \r\n        // Updates totalSupply\r\n        totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        // Locked addresses cannot be burnt\r\n        require(locked[_from] == 0);\r\n        \r\n        // Check if the targeted balance is enough\r\n        require(balances[_from] >= _value);\r\n        \r\n        // Check allowance\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        \r\n        // Subtract from the targeted balance\r\n        balances[_from] -= _value;\r\n        \r\n        // Subtract from the sender's allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        \r\n        // Update totalSupply\r\n        totalSupply -= _value;\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"feeAmountSet\",\"type\":\"uint256\"}],\"name\":\"amendFee\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payout\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"retentionMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"director\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockTime\",\"outputs\":[{\"name\":\"lockedValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"retentionMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lockMinSet\",\"type\":\"uint256\"},{\"name\":\"lockMaxSet\",\"type\":\"uint256\"}],\"name\":\"amendLock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfLock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"retentionMinSet\",\"type\":\"uint256\"},{\"name\":\"retentionMaxSet\",\"type\":\"uint256\"}],\"name\":\"amendRetention\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDirector\",\"type\":\"address\"}],\"name\":\"transferDirector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"directorLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_release\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_payout\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_fee\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"}]","ContractName":"OysterShell","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6ceaf8fb97a5f757106fb664694328d0fd7741778c3338572ea96d55f4709f88"}]}