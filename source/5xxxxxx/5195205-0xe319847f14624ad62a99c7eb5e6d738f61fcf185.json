{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ncontract EtherPaint {\r\n   // scaleFactor is used to convert Ether into tokens and vice-versa: they're of different\r\n   // orders of magnitude, hence the need to bridge between the two.\r\n   uint256 constant scaleFactor = 0x10000000000000000; //0x10000000000000000;  // 2^64\r\n\r\n   // CRR = 50%\r\n   // CRR is Cash Reserve Ratio (in this case Crypto Reserve Ratio).\r\n   // For more on this: check out https://en.wikipedia.org/wiki/Reserve_requirement\r\n   int constant crr_n = 1; // CRR numerator\r\n   int constant crr_d = 2; // CRR denominator\r\n\r\n   // The price coefficient. Chosen such that at 1 token total supply\r\n   // the amount in reserve is 0.5 ether and token price is 1 Ether.\r\n   int constant price_coeff = -0x296ABF784A358468C;\r\n\r\n   // Array between each address and their number of tokens.\r\n   mapping(address => uint256[16]) public tokenBalance;\r\n\r\n   uint256[128][128] public colorPerCoordinate;\r\n   uint256[16] public colorPerCanvas;\r\n\r\n   event colorUpdate(uint8 posx, uint8 posy, uint8 colorid);\r\n   event priceUpdate(uint8 colorid);\r\n   event tokenUpdate(uint8 colorid, address who);\r\n   event dividendUpdate();\r\n\r\n   event pushuint(uint256 s);\r\n      \r\n   // Array between each address and how much Ether has been paid out to it.\r\n   // Note that this is scaled by the scaleFactor variable.\r\n   mapping(address => int256[16]) public payouts;\r\n\r\n   // Variable tracking how many tokens are in existence overall.\r\n   uint256[16] public totalSupply;\r\n\r\n   uint256 public allTotalSupply;\r\n\r\n   // Aggregate sum of all payouts.\r\n   // Note that this is scaled by the scaleFactor variable.\r\n   int256[16] totalPayouts;\r\n\r\n   // Variable tracking how much Ether each token is currently worth.\r\n   // Note that this is scaled by the scaleFactor variable.\r\n   uint256[16] earningsPerToken;\r\n   \r\n   // Current contract balance in Ether\r\n   uint256[16] public contractBalance;\r\n\r\n   address public owner;\r\n\r\n   uint256 public ownerFee;\r\n\r\n\r\n\r\n   function EtherPaint() public {\r\n       owner = msg.sender;\r\n       colorPerCanvas[0] = 128*128;\r\n      pushuint(1 finney);\r\n   }\r\n\r\n   // Returns the number of tokens currently held by _owner.\r\n   function balanceOf(address _owner, uint8 colorid) public constant returns (uint256 balance) {\r\n      if (colorid >= 16){\r\n         revert();\r\n      }\r\n      return tokenBalance[_owner][colorid];\r\n   }\r\n\r\n   // Withdraws all dividends held by the caller sending the transaction, updates\r\n   // the requisite global variables, and transfers Ether back to the caller.\r\n   function withdraw(uint8 colorid) public {\r\n      if (colorid >= 16){\r\n         revert();\r\n      }\r\n      // Retrieve the dividends associated with the address the request came from.\r\n      var balance = dividends(msg.sender, colorid);\r\n      \r\n      // Update the payouts array, incrementing the request address by `balance`.\r\n      payouts[msg.sender][colorid] += (int256) (balance * scaleFactor);\r\n      \r\n      // Increase the total amount that's been paid out to maintain invariance.\r\n      totalPayouts[colorid] += (int256) (balance * scaleFactor);\r\n      \r\n      // Send the dividends to the address that requested the withdraw.\r\n      contractBalance[colorid] = sub(contractBalance[colorid], div(mul(balance, 95),100));\r\n      msg.sender.transfer(balance);\r\n   }\r\n\r\n   function withdrawOwnerFee() public{\r\n      if (msg.sender == owner){\r\n         owner.transfer(ownerFee);\r\n         ownerFee = 0;\r\n      }\r\n   }\r\n\r\n   // Sells your tokens for Ether. This Ether is assigned to the callers entry\r\n   // in the tokenBalance array, and therefore is shown as a dividend. A second\r\n   // call to withdraw() must be made to invoke the transfer of Ether back to your address.\r\n   function sellMyTokens(uint8 colorid) public {\r\n      if (colorid >= 16){\r\n         revert();\r\n      }\r\n      var balance = balanceOf(msg.sender, colorid);\r\n      sell(balance, colorid);\r\n      priceUpdate(colorid);\r\n      dividendUpdate();\r\n      tokenUpdate(colorid, msg.sender);\r\n   }\r\n   \r\n    function sellMyTokensAmount(uint8 colorid, uint256 amount) public {\r\n      if (colorid >= 16){\r\n         revert();\r\n      }\r\n      var balance = balanceOf(msg.sender, colorid);\r\n      if (amount <= balance){\r\n        sell(amount, colorid);\r\n        priceUpdate(colorid);\r\n        dividendUpdate();\r\n        tokenUpdate(colorid, msg.sender);\r\n      }\r\n   }\r\n\r\n   // The slam-the-button escape hatch. Sells the callers tokens for Ether, then immediately\r\n   // invokes the withdraw() function, sending the resulting Ether to the callers address.\r\n    function getMeOutOfHere() public {\r\n      for (uint8 i=0; i<16; i++){\r\n         sellMyTokens(i);\r\n         withdraw(i);\r\n      }\r\n\r\n   }\r\n\r\n   // Gatekeeper function to check if the amount of Ether being sent isn't either\r\n   // too small or too large. If it passes, goes direct to buy().\r\n   function fund(uint8 colorid, uint8 posx, uint8 posy) payable public {\r\n      // Don't allow for funding if the amount of Ether sent is less than 1 szabo.\r\n      if (colorid >= 16){\r\n         revert();\r\n      }\r\n      if ((msg.value > 0.000001 ether) && (posx >= 0) && (posx <= 127) && (posy >= 0) && (posy <= 127)) {\r\n         contractBalance[colorid] = add(contractBalance[colorid], div(mul(msg.value, 95),100));\r\n         buy(colorid);\r\n         colorPerCanvas[colorPerCoordinate[posx][posy]] = sub(colorPerCanvas[colorPerCoordinate[posx][posy]], 1);\r\n         colorPerCoordinate[posx][posy] = colorid;\r\n         colorPerCanvas[colorid] = add(colorPerCanvas[colorid],1);\r\n         colorUpdate(posx, posy, colorid);\r\n         priceUpdate(colorid);\r\n         dividendUpdate();\r\n         tokenUpdate(colorid, msg.sender);\r\n\r\n      } else {\r\n         revert();\r\n      }\r\n    }\r\n\r\n   // Function that returns the (dynamic) price of buying a finney worth of tokens.\r\n   function buyPrice(uint8 colorid) public constant returns (uint) {\r\n      if (colorid >= 16){\r\n         revert();\r\n      }\r\n      return getTokensForEther(1 finney, colorid);\r\n   }\r\n\r\n   // Function that returns the (dynamic) price of selling a single token.\r\n   function sellPrice(uint8 colorid) public constant returns (uint) {\r\n         if (colorid >= 16){\r\n            revert();\r\n         }\r\n        var eth = getEtherForTokens(1 finney, colorid);\r\n        var fee = div(eth, 10);\r\n        return eth - fee;\r\n    }\r\n\r\n   // Calculate the current dividends associated with the caller address. This is the net result\r\n   // of multiplying the number of tokens held by their current value in Ether and subtracting the\r\n   // Ether that has already been paid out.\r\n   function dividends(address _owner, uint8 colorid) public constant returns (uint256 amount) {\r\n      if (colorid >= 16){\r\n         revert();\r\n      }\r\n      return (uint256) ((int256)(earningsPerToken[colorid] * tokenBalance[_owner][colorid]) - payouts[_owner][colorid]) / scaleFactor;\r\n   }\r\n\r\n   // Version of withdraw that extracts the dividends and sends the Ether to the caller.\r\n   // This is only used in the case when there is no transaction data, and that should be\r\n   // quite rare unless interacting directly with the smart contract.\r\n   //function withdrawOld(address to) public {\r\n      // Retrieve the dividends associated with the address the request came from.\r\n     // var balance = dividends(msg.sender);\r\n      \r\n      // Update the payouts array, incrementing the request address by `balance`.\r\n      //payouts[msg.sender] += (int256) (balance * scaleFactor);\r\n      \r\n      // Increase the total amount that's been paid out to maintain invariance.\r\n      //totalPayouts += (int256) (balance * scaleFactor);\r\n      \r\n      // Send the dividends to the address that requested the withdraw.\r\n      //contractBalance = sub(contractBalance, balance);\r\n      //to.transfer(balance);      \r\n   //}\r\n\r\n   // Internal balance function, used to calculate the dynamic reserve value.\r\n   function balance(uint8 colorid) internal constant returns (uint256 amount) {\r\n\r\n      // msg.value is the amount of Ether sent by the transaction.\r\n      return contractBalance[colorid] - msg.value;\r\n   }\r\n\r\n   function buy(uint8 colorid) internal {\r\n\r\n      // Any transaction of less than 1 szabo is likely to be worth less than the gas used to send it.\r\n\r\n      if (msg.value < 0.000001 ether || msg.value > 1000000 ether)\r\n         revert();\r\n                  \r\n      // msg.sender is the address of the caller.\r\n      //var sender = msg.sender;\r\n      \r\n      // 10% of the total Ether sent is used to pay existing holders.\r\n      var fee = mul(div(msg.value, 20), 4);\r\n      \r\n      // The amount of Ether used to purchase new tokens for the caller.\r\n      //var numEther = msg.value - fee;\r\n      \r\n      // The number of tokens which can be purchased for numEther.\r\n      var numTokens = getTokensForEther(msg.value - fee, colorid);\r\n      \r\n      // The buyer fee, scaled by the scaleFactor variable.\r\n      uint256 buyerFee = 0;\r\n      \r\n      // Check that we have tokens in existence (this should always be true), or\r\n      // else you're gonna have a bad time.\r\n      if (totalSupply[colorid] > 0) {\r\n         // Compute the bonus co-efficient for all existing holders and the buyer.\r\n         // The buyer receives part of the distribution for each token bought in the\r\n         // same way they would have if they bought each token individually.\r\n\r\n         for (uint8 c=0; c<16; c++){\r\n            if (totalSupply[c] > 0){\r\n               var theExtraFee = mul(div(mul(div(fee,4), scaleFactor), allTotalSupply), totalSupply[c]) + mul(div(div(fee,4), 128*128),mul(colorPerCanvas[c], scaleFactor));\r\n               //var globalFee = div(mul(mul(div(div(fee,4), allTotalSupply), totalSupply[c]), scaleFactor),totalSupply[c]);\r\n\r\n               if (c==colorid){\r\n                  \r\n                buyerFee = (div(fee,4) + div(theExtraFee,scaleFactor))*scaleFactor - (div(fee, 4) + div(theExtraFee,scaleFactor)) * (scaleFactor - (reserve(colorid) + msg.value - fee) * numTokens * scaleFactor / (totalSupply[colorid] + numTokens) / (msg.value - fee))\r\n\t\t\t    * (uint)(crr_d) / (uint)(crr_d-crr_n);\r\n             \r\n\r\n\r\n\r\n\r\n               }\r\n               else{\r\n\r\n                   \r\n                  earningsPerToken[c] = add(earningsPerToken[c], div(theExtraFee, totalSupply[c]));\r\n\r\n\r\n               }\r\n            }\r\n         }\r\n         \r\n\r\n\r\n         \r\n\r\n\r\n\r\n         ownerFee = add(ownerFee, div(fee,4));\r\n            \r\n         // The total reward to be distributed amongst the masses is the fee (in Ether)\r\n         // multiplied by the bonus co-efficient.\r\n\r\n\r\n         // Fee is distributed to all existing token holders before the new tokens are purchased.\r\n         // rewardPerShare is the amount gained per token thanks to this buy-in.\r\n\r\n         \r\n         // The Ether value per token is increased proportionally.\r\n         // 5%\r\n\r\n         earningsPerToken[colorid] = earningsPerToken[colorid] +  buyerFee / (totalSupply[colorid]);\r\n\r\n             \r\n         \r\n      }\r\n\r\n         totalSupply[colorid] = add(totalSupply[colorid], numTokens);\r\n\r\n         allTotalSupply = add(allTotalSupply, numTokens);\r\n\r\n      // Add the numTokens which were just created to the total supply. We're a crypto central bank!\r\n\r\n\r\n      \r\n\r\n      // Assign the tokens to the balance of the buyer.\r\n      tokenBalance[msg.sender][colorid] = add(tokenBalance[msg.sender][colorid], numTokens);\r\n\r\n      // Update the payout array so that the buyer cannot claim dividends on previous purchases.\r\n      // Also include the fee paid for entering the scheme.\r\n      // First we compute how much was just paid out to the buyer...\r\n\r\n      \r\n      // Then we update the payouts array for the buyer with this amount...\r\n      payouts[msg.sender][colorid] +=  (int256) ((earningsPerToken[colorid] * numTokens) - buyerFee);\r\n      \r\n      // And then we finally add it to the variable tracking the total amount spent to maintain invariance.\r\n      totalPayouts[colorid]    +=  (int256) ((earningsPerToken[colorid] * numTokens) - buyerFee);\r\n      \r\n   }\r\n\r\n   // Sell function that takes tokens and converts them into Ether. Also comes with a 10% fee\r\n   // to discouraging dumping, and means that if someone near the top sells, the fee distributed\r\n   // will be *significant*.\r\n   function sell(uint256 amount, uint8 colorid) internal {\r\n       // Calculate the amount of Ether that the holders tokens sell for at the current sell price.\r\n      var numEthersBeforeFee = getEtherForTokens(amount, colorid);\r\n      \r\n      // 20% of the resulting Ether is used to pay remaining holders.\r\n      var fee = mul(div(numEthersBeforeFee, 20), 4);\r\n      \r\n      // Net Ether for the seller after the fee has been subtracted.\r\n      var numEthers = numEthersBeforeFee - fee;\r\n      \r\n      // *Remove* the numTokens which were just sold from the total supply. We're /definitely/ a crypto central bank.\r\n      totalSupply[colorid] = sub(totalSupply[colorid], amount);\r\n      allTotalSupply = sub(allTotalSupply, amount);\r\n      \r\n        // Remove the tokens from the balance of the buyer.\r\n      tokenBalance[msg.sender][colorid] = sub(tokenBalance[msg.sender][colorid], amount);\r\n\r\n        // Update the payout array so that the seller cannot claim future dividends unless they buy back in.\r\n      // First we compute how much was just paid out to the seller...\r\n      var payoutDiff = (int256) (earningsPerToken[colorid] * amount + (numEthers * scaleFactor));\r\n      \r\n        // We reduce the amount paid out to the seller (this effectively resets their payouts value to zero,\r\n      // since they're selling all of their tokens). This makes sure the seller isn't disadvantaged if\r\n      // they decide to buy back in.\r\n      payouts[msg.sender][colorid] -= payoutDiff;     \r\n      \r\n      // Decrease the total amount that's been paid out to maintain invariance.\r\n      totalPayouts[colorid] -= payoutDiff;\r\n      \r\n      // Check that we have tokens in existence (this is a bit of an irrelevant check since we're\r\n      // selling tokens, but it guards against division by zero).\r\n      if (totalSupply[colorid] > 0) {\r\n         // Scale the Ether taken as the selling fee by the scaleFactor variable.\r\n\r\n         for (uint8 c=0; c<16; c++){\r\n            if (totalSupply[c] > 0){\r\n               var theExtraFee = mul(div(mul(div(fee,4), scaleFactor), allTotalSupply), totalSupply[c]) + mul(div(div(fee,4), 128*128),mul(colorPerCanvas[c], scaleFactor));\r\n            \r\n               earningsPerToken[c] = add(earningsPerToken[c], div(theExtraFee,totalSupply[c]));\r\n            }\r\n         }\r\n\r\n         ownerFee = add(ownerFee, div(fee,4));\r\n\r\n         var etherFee = div(fee,4) * scaleFactor;\r\n         \r\n         // Fee is distributed to all remaining token holders.\r\n         // rewardPerShare is the amount gained per token thanks to this sell.\r\n         var rewardPerShare = etherFee / totalSupply[colorid];\r\n         \r\n         // The Ether value per token is increased proportionally.\r\n         earningsPerToken[colorid] = add(earningsPerToken[colorid], rewardPerShare);\r\n\r\n         \r\n      }\r\n   }\r\n\r\n   // Dynamic value of Ether in reserve, according to the CRR requirement.\r\n   function reserve(uint8 colorid) internal constant returns (uint256 amount) {\r\n      return sub(balance(colorid),\r\n          ((uint256) ((int256) (earningsPerToken[colorid] * totalSupply[colorid]) - totalPayouts[colorid]) / scaleFactor));\r\n   }\r\n\r\n   // Calculates the number of tokens that can be bought for a given amount of Ether, according to the\r\n   // dynamic reserve and totalSupply values (derived from the buy and sell prices).\r\n   function getTokensForEther(uint256 ethervalue, uint8 colorid) public constant returns (uint256 tokens) {\r\n      if (colorid >= 16){\r\n         revert();\r\n      }\r\n      return sub(fixedExp(fixedLog(reserve(colorid) + ethervalue)*crr_n/crr_d + price_coeff), totalSupply[colorid]);\r\n   }\r\n\r\n\r\n\r\n   // Converts a number tokens into an Ether value.\r\n   function getEtherForTokens(uint256 tokens, uint8 colorid) public constant returns (uint256 ethervalue) {\r\n      if (colorid >= 16){\r\n         revert();\r\n      }\r\n      // How much reserve Ether do we have left in the contract?\r\n      var reserveAmount = reserve(colorid);\r\n\r\n      // If you're the Highlander (or bagholder), you get The Prize. Everything left in the vault.\r\n      if (tokens == totalSupply[colorid])\r\n         return reserveAmount;\r\n\r\n      // If there would be excess Ether left after the transaction this is called within, return the Ether\r\n      // corresponding to the equation in Dr Jochen Hoenicke's original Ponzi paper, which can be found\r\n      // at https://test.jochen-hoenicke.de/eth/ponzitoken/ in the third equation, with the CRR numerator \r\n      // and denominator altered to 1 and 2 respectively.\r\n      return sub(reserveAmount, fixedExp((fixedLog(totalSupply[colorid] - tokens) - price_coeff) * crr_d/crr_n));\r\n   }\r\n\r\n// You don't care about these, but if you really do they're hex values for \r\n   // co-efficients used to simulate approximations of the log and exp functions.\r\n   int256  constant one        = 0x10000000000000000;\r\n   uint256 constant sqrt2      = 0x16a09e667f3bcc908;\r\n   uint256 constant sqrtdot5   = 0x0b504f333f9de6484;\r\n   int256  constant ln2        = 0x0b17217f7d1cf79ac;\r\n   int256  constant ln2_64dot5 = 0x2cb53f09f05cc627c8;\r\n   int256  constant c1         = 0x1ffffffffff9dac9b;\r\n   int256  constant c3         = 0x0aaaaaaac16877908;\r\n   int256  constant c5         = 0x0666664e5e9fa0c99;\r\n   int256  constant c7         = 0x049254026a7630acf;\r\n   int256  constant c9         = 0x038bd75ed37753d68;\r\n   int256  constant c11        = 0x03284a0c14610924f;\r\n\r\n   // The polynomial R = c1*x + c3*x^3 + ... + c11 * x^11\r\n   // approximates the function log(1+x)-log(1-x)\r\n   // Hence R(s) = log((1+s)/(1-s)) = log(a)\r\n   function fixedLog(uint256 a) internal pure returns (int256 log) {\r\n      int32 scale = 0;\r\n      while (a > sqrt2) {\r\n         a /= 2;\r\n         scale++;\r\n      }\r\n      while (a <= sqrtdot5) {\r\n         a *= 2;\r\n         scale--;\r\n      }\r\n      int256 s = (((int256)(a) - one) * one) / ((int256)(a) + one);\r\n      var z = (s*s) / one;\r\n      return scale * ln2 +\r\n         (s*(c1 + (z*(c3 + (z*(c5 + (z*(c7 + (z*(c9 + (z*c11/one))\r\n            /one))/one))/one))/one))/one);\r\n   }\r\n\r\n   int256 constant c2 =  0x02aaaaaaaaa015db0;\r\n   int256 constant c4 = -0x000b60b60808399d1;\r\n   int256 constant c6 =  0x0000455956bccdd06;\r\n   int256 constant c8 = -0x000001b893ad04b3a;\r\n   \r\n   // The polynomial R = 2 + c2*x^2 + c4*x^4 + ...\r\n   // approximates the function x*(exp(x)+1)/(exp(x)-1)\r\n   // Hence exp(x) = (R(x)+x)/(R(x)-x)\r\n   function fixedExp(int256 a) internal pure returns (uint256 exp) {\r\n      int256 scale = (a + (ln2_64dot5)) / ln2 - 64;\r\n      a -= scale*ln2;\r\n      int256 z = (a*a) / one;\r\n      int256 R = ((int256)(2) * one) +\r\n         (z*(c2 + (z*(c4 + (z*(c6 + (z*c8/one))/one))/one))/one);\r\n      exp = (uint256) (((R + a) * one) / (R - a));\r\n      if (scale >= 0)\r\n         exp <<= scale;\r\n      else\r\n         exp >>= -scale;\r\n      return exp;\r\n   }\r\n   \r\n   // The below are safemath implementations of the four arithmetic operators\r\n   // designed to explicitly prevent over- and under-flows of integer values.\r\n\r\n   function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      if (a == 0) {\r\n         return 0;\r\n      }\r\n      uint256 c = a * b;\r\n      assert(c / a == b);\r\n      return c;\r\n   }\r\n\r\n   function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n      uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n      return c;\r\n   }\r\n\r\n   function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n   }\r\n\r\n   function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n   }\r\n\r\n   // This allows you to buy tokens by sending Ether directly to the smart contract\r\n   // without including any transaction data (useful for, say, mobile wallet apps).\r\n   function () payable public {\r\n      // msg.value is the amount of Ether sent by the transaction.\r\n      revert();\r\n      //if (msg.value > 0) {\r\n      //   revert();\r\n      //} else {\r\n      //   for (uint8 i=0; i<16; i++){\r\n      //     withdraw(i);\r\n      //   }\r\n\r\n      //}\r\n   }\r\n   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"ethervalue\",\"type\":\"uint256\"},{\"name\":\"colorid\",\"type\":\"uint8\"}],\"name\":\"getTokensForEther\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colorPerCanvas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"colorid\",\"type\":\"uint8\"}],\"name\":\"dividends\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawOwnerFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"colorid\",\"type\":\"uint8\"}],\"name\":\"getEtherForTokens\",\"outputs\":[{\"name\":\"ethervalue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"colorid\",\"type\":\"uint8\"}],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"colorid\",\"type\":\"uint8\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"colorid\",\"type\":\"uint8\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellMyTokensAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"colorid\",\"type\":\"uint8\"}],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payouts\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"colorid\",\"type\":\"uint8\"}],\"name\":\"sellMyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMeOutOfHere\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colorPerCoordinate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"colorid\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"colorid\",\"type\":\"uint8\"},{\"name\":\"posx\",\"type\":\"uint8\"},{\"name\":\"posy\",\"type\":\"uint8\"}],\"name\":\"fund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"posx\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"posy\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"colorid\",\"type\":\"uint8\"}],\"name\":\"colorUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"colorid\",\"type\":\"uint8\"}],\"name\":\"priceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"colorid\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"tokenUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"dividendUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"s\",\"type\":\"uint256\"}],\"name\":\"pushuint\",\"type\":\"event\"}]","ContractName":"EtherPaint","CompilerVersion":"v0.4.21-nightly.2018.3.1+commit.cf6720ea","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d10c98341b04b8c33f311817117f8d23616bb3cc1ec549ee0696264e404fdc06"}]}