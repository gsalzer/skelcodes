{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath128 {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint128 a, uint128 b) internal pure returns (uint128 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath64 {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint64 a, uint64 b) internal pure returns (uint64 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath32 {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint32 a, uint32 b) internal pure returns (uint32 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath16 {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint16 a, uint16 b) internal pure returns (uint16 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint16 a, uint16 b) internal pure returns (uint16 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath8 {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint8 a, uint8 b) internal pure returns (uint8 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint8 a, uint8 b) internal pure returns (uint8 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     *  as the code is not actually created until after the constructor finishes.\r\n     * @param addr address to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\r\n        return size > 0;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Eliptic curve signature operations\r\n *\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n *\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n *\r\n */\r\n\r\nlibrary ECRecovery {\r\n\r\n    /**\r\n     * @dev Recover signer address from a message by using their signature\r\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n     * @param sig bytes signature, the signature is generated using web3.eth.sign()\r\n     */\r\n    function recover(bytes32 hash, bytes sig) internal pure returns (address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        //Check the signature length\r\n        if (sig.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        // If the version is correct return the signer address\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        } else {\r\n            return ecrecover(hash, v, r, s);\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract MintibleUtility is Ownable {\r\n    using SafeMath     for uint256;\r\n    using SafeMath128  for uint128;\r\n    using SafeMath64   for uint64;\r\n    using SafeMath32   for uint32;\r\n    using SafeMath16   for uint16;\r\n    using SafeMath8    for uint8;\r\n    using AddressUtils for address;\r\n    using ECRecovery   for bytes32;\r\n\r\n    uint256 private nonce;\r\n\r\n    bool public paused;\r\n\r\n    modifier notPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * @dev Uses binary search to find the index of the off given\r\n     */\r\n    function getIndexFromOdd(uint32 _odd, uint32[] _odds) internal pure returns (uint) {\r\n        uint256 low = 0;\r\n        uint256 high = _odds.length.sub(1);\r\n\r\n        while (low < high) {\r\n            uint256 mid = (low.add(high)) / 2;\r\n            if (_odd >= _odds[mid]) {\r\n                low = mid.add(1);\r\n            } else {\r\n                high = mid;\r\n            }\r\n        }\r\n\r\n        return low;\r\n    }\r\n\r\n    /*\r\n     * Using the `nonce` and a range, it generates a random value using `keccak256` and random distribution\r\n     */\r\n    function rand(uint32 min, uint32 max) internal returns (uint32) {\r\n        nonce++;\r\n        return uint32(keccak256(abi.encodePacked(nonce, uint(blockhash(block.number.sub(1)))))) % (min.add(max)).sub(min);\r\n    }\r\n\r\n\r\n    /*\r\n     *  Sub array utility functions\r\n     */\r\n\r\n    function getUintSubArray(uint256[] _arr, uint256 _start, uint256 _end) internal pure returns (uint256[]) {\r\n        uint256[] memory ret = new uint256[](_end.sub(_start));\r\n        for (uint256 i = _start; i < _end; i++) {\r\n            ret[i - _start] = _arr[i];\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    function getUint32SubArray(uint256[] _arr, uint256 _start, uint256 _end) internal pure returns (uint32[]) {\r\n        uint32[] memory ret = new uint32[](_end.sub(_start));\r\n        for (uint256 i = _start; i < _end; i++) {\r\n            ret[i - _start] = uint32(_arr[i]);\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    function getUint64SubArray(uint256[] _arr, uint256 _start, uint256 _end) internal pure returns (uint64[]) {\r\n        uint64[] memory ret = new uint64[](_end.sub(_start));\r\n        for (uint256 i = _start; i < _end; i++) {\r\n            ret[i - _start] = uint64(_arr[i]);\r\n        }\r\n\r\n        return ret;\r\n    }\r\n}\r\n\r\ncontract ERC721 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n    function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) public;\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes _data\r\n    )\r\n    public;\r\n}\r\n\r\n/*\r\n * An interface extension of ERC721\r\n */\r\ncontract MintibleI is ERC721 {\r\n    function getLastModifiedNonce(uint256 _id) public view returns (uint);\r\n    function payFee(uint256 _id) public payable;\r\n}\r\n\r\n/**\r\n * This contract assumes that it was approved beforehand\r\n */\r\ncontract MintibleMarketplace is MintibleUtility {\r\n\r\n    event EtherOffer(address from, address to, address contractAddress, uint256 id, uint256 price);\r\n    event InvalidateSignature(bytes signature);\r\n\r\n    mapping(bytes32 => bool) public consumed;\r\n    mapping(address => bool) public implementsMintibleInterface;\r\n\r\n    /*\r\n     * @dev Function that verifies that `_contractAddress` implements the `MintibleI`\r\n     */\r\n    function setImplementsMintibleInterface(address _contractAddress) public notPaused {\r\n        require(isPayFeeSafe(_contractAddress) && isGetLastModifiedNonceSafe(_contractAddress));\r\n\r\n        implementsMintibleInterface[_contractAddress] = true;\r\n    }\r\n\r\n    /*\r\n     * @dev This function consumes a signature to buy an item for ether\r\n     */\r\n    function consumeEtherOffer(\r\n        address _from,\r\n        address _contractAddress,\r\n        uint256 _id,\r\n        uint256 _expiryBlock,\r\n        uint128 _uuid,\r\n        bytes   _signature\r\n    ) public payable notPaused {\r\n\r\n        uint itemNonce;\r\n\r\n        if (implementsMintibleInterface[_contractAddress]) {\r\n            itemNonce = MintibleI(_contractAddress).getLastModifiedNonce(_id);\r\n        }\r\n\r\n        bytes32 hash = keccak256(abi.encodePacked(address(this), _contractAddress, _id, msg.value, _expiryBlock, _uuid, itemNonce));\r\n\r\n        // Ensure this hash wasn't already consumed\r\n        require(!consumed[hash]);\r\n        consumed[hash] = true;\r\n\r\n        validateConsumedHash(_from, hash, _signature);\r\n\r\n        // Verify the expiration date of the signature\r\n        require(block.number < _expiryBlock);\r\n\r\n        // 1% marketplace fee\r\n        uint256 marketplaceFee = msg.value.mul(10 finney) / 1 ether;\r\n        // 2.5% creator fee\r\n        uint256 creatorFee = msg.value.mul(25 finney) / 1 ether;\r\n        // How much the seller receives\r\n        uint256 amountReceived = msg.value.sub(marketplaceFee);\r\n\r\n        // Transfer token to buyer\r\n        MintibleI(_contractAddress).transferFrom(_from, msg.sender, _id);\r\n\r\n        // Increase balance of creator if contract implements MintibleI\r\n        if (implementsMintibleInterface[_contractAddress]) {\r\n            amountReceived = amountReceived.sub(creatorFee);\r\n\r\n            MintibleI(_contractAddress).payFee.value(creatorFee)(_id);\r\n        }\r\n\r\n        // Transfer funds to seller\r\n        _from.transfer(amountReceived);\r\n\r\n        emit EtherOffer(_from, msg.sender, _contractAddress, _id, msg.value);\r\n    }\r\n\r\n    // Sets a hash\r\n    function invalidateSignature(bytes32 _hash, bytes _signature) public notPaused {\r\n\r\n        bytes32 signedHash = keccak256(abi.encodePacked('\\x19Ethereum Signed Message:\\n32', _hash));\r\n        require(signedHash.recover(_signature) == msg.sender);\r\n        consumed[_hash] = true;\r\n\r\n        emit InvalidateSignature(_signature);\r\n    }\r\n\r\n    /*\r\n     * @dev Transfer `address(this).balance` to `owner`\r\n     */\r\n    function withdraw() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    /*\r\n     * @dev This function validates that the `_hash` and `_signature` match the `_signer`\r\n     */\r\n    function validateConsumedHash(address _signer, bytes32 _hash, bytes _signature) private pure {\r\n        bytes32 signedHash = keccak256(abi.encodePacked('\\x19Ethereum Signed Message:\\n32', _hash));\r\n\r\n        // Verify signature validity\r\n        require(signedHash.recover(_signature) == _signer);\r\n    }\r\n\r\n    /*\r\n     * Function that verifies whether `payFee(uint256)` was implemented at the given address\r\n     */\r\n    function isPayFeeSafe(address _addr)\r\n        private\r\n        returns (bool _isImplemented)\r\n    {\r\n        bytes32 sig = bytes4(keccak256(\"payFee(uint256)\"));\r\n\r\n        assembly {\r\n            let x := mload(0x40)    // get free memory\r\n            mstore(x, sig)          // store signature into it\r\n            mstore(add(x, 0x04), 1) // Send an id of 1 only for testing purposes\r\n\r\n            let _success := call(\r\n                20000,   // 20000 gas is the exact value needed for this call\r\n                _addr,  // to _addr\r\n                0,      // 0 value\r\n                x,      // input is x\r\n                0x24,   // input length is 4 + 32 bytes\r\n                x,      // store output to x\r\n                0x0     // No output\r\n            )\r\n\r\n            _isImplemented := _success\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Function that verifies whether `payFee(uint256)` was implemented at the given address\r\n     */\r\n    function isGetLastModifiedNonceSafe(address _addr)\r\n        private\r\n        returns (bool _isImplemented)\r\n    {\r\n        bytes32 sig = bytes4(keccak256(\"getLastModifiedNonce(uint256)\"));\r\n\r\n        assembly {\r\n            let x := mload(0x40)    // get free memory\r\n            mstore(x, sig)          // store signature into it\r\n            mstore(add(x, 0x04), 1) // Send an id of 1 only for testing purposes\r\n\r\n            let _success := call(\r\n                20000,  // 20000 gas is the exact value needed for this call\r\n                _addr,  // to _addr\r\n                0,      // 0 value\r\n                x,      // input is x\r\n                0x24,   // input length is 4 + 32 bytes\r\n                x,      // store output to x\r\n                0x0     // No output\r\n            )\r\n\r\n            _isImplemented := _success\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"invalidateSignature\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"implementsMintibleInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"consumed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_expiryBlock\",\"type\":\"uint256\"},{\"name\":\"_uuid\",\"type\":\"uint128\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"consumeEtherOffer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setImplementsMintibleInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"EtherOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"InvalidateSignature\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MintibleMarketplace","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://601db39f960481ff78a70a996c06b3b83042b55fa8de250d7da8dde66f495d3d"}]}