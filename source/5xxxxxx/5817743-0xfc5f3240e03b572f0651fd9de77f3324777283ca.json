{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ninterface IMintableToken {\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract preICO is Ownable, Pausable {\r\n    event Approved(address _address, uint _tokensAmount);\r\n    event Declined(address _address, uint _tokensAmount);\r\n    event weiReceived(address _address, uint _weiAmount);\r\n    event RateChanged(uint _newRate);\r\n\r\n    uint public constant startTime = 1529431200; // June, 19. 07:00 PM (UTC)\r\n    uint public endTime = 1532973600; // July, 30. 07:00 PM (UTC)\r\n    uint public rate;\r\n    uint public tokensHardCap = 10000000 * 1 ether; // 10 million tokens\r\n\r\n    uint public tokensMintedDuringPreICO = 0;\r\n    uint public tokensToMintInHold = 0;\r\n\r\n    mapping(address=>uint) public tokensHoldMap;\r\n\r\n    IMintableToken public DXC;\r\n\r\n    function preICO(address _DXC) {\r\n        DXC = IMintableToken(_DXC);\r\n    }\r\n\r\n    /**\r\n    * @dev Handles incoming eth transfers\r\n    * and mints tokens to msg.sender\r\n    */\r\n    function () payable ongoingPreICO whenNotPaused {\r\n        uint tokensToMint = msg.value * rate;\r\n        tokensHoldMap[msg.sender] = SafeMath.add(tokensHoldMap[msg.sender], tokensToMint);\r\n        tokensToMintInHold = SafeMath.add(tokensToMintInHold, tokensToMint);\r\n        weiReceived(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @dev Approves token minting for specified investor\r\n    * @param _address Address of investor in `holdMap`\r\n    */\r\n    function approve(address _address) public onlyOwner capWasNotReached(_address) {\r\n        uint tokensAmount = tokensHoldMap[_address];\r\n        tokensHoldMap[_address] = 0;\r\n        tokensMintedDuringPreICO = SafeMath.add(tokensMintedDuringPreICO, tokensAmount);\r\n        tokensToMintInHold = SafeMath.sub(tokensToMintInHold, tokensAmount);\r\n        Approved(_address, tokensAmount);\r\n\r\n        DXC.mint(_address, tokensAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Declines token minting for specified investor\r\n    * @param _address Address of investor in `holdMap`\r\n    */\r\n    function decline(address _address) public onlyOwner {\r\n        tokensToMintInHold = SafeMath.sub(tokensToMintInHold, tokensHoldMap[_address]);\r\n        Declined(_address, tokensHoldMap[_address]);\r\n\r\n        tokensHoldMap[_address] = 0;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets rate if it was not set earlier\r\n    * @param _rate preICO wei to tokens rate\r\n    */\r\n    function setRate(uint _rate) public onlyOwner {\r\n        rate = _rate;\r\n\r\n        RateChanged(_rate);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer specified amount of wei the owner\r\n    * @param _weiToWithdraw Amount of wei to transfer\r\n    */\r\n    function withdraw(uint _weiToWithdraw) public onlyOwner {\r\n        msg.sender.transfer(_weiToWithdraw);\r\n    }\r\n\r\n    /**\r\n    * @dev Increases end time by specified amount of seconds\r\n    * @param _secondsToIncrease Amount of second to increase end time\r\n    */\r\n    function increaseDuration(uint _secondsToIncrease) public onlyOwner {\r\n        endTime = SafeMath.add(endTime, _secondsToIncrease);\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if crowdsale time is not started or finished\r\n    */\r\n    modifier ongoingPreICO {\r\n        require(now >= startTime && now <= endTime);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if preICO hard cap will be exceeded after minting\r\n    */\r\n    modifier capWasNotReached(address _address) {\r\n        require(SafeMath.add(tokensMintedDuringPreICO, tokensHoldMap[_address]) <= tokensHardCap);\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"decline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMintedDuringPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DXC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensHardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secondsToIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensToMintInHold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensHoldMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_DXC\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"Declined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"weiReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"RateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"preICO","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008817b082d8a428dbf326468d9d4a1f0103e32943","Library":"","SwarmSource":"bzzr://62ca1faec137d3e69610629b09da7c459b477800bb95d525e7a4c5375b66fc5f"}]}