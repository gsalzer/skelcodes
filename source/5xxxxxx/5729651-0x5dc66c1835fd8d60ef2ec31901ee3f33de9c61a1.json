{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\nVERSION DATE: 23/03/2018\r\n\r\nCREATED BY: CRYPTO SPORTZ\r\nUNJOY YOUR TEAM AND SPORTS AND EMAIL US IF YOU HAVE ANY QUESTIONS\r\n*/\r\n\r\nlibrary SafeMathLib {\r\n\r\n  function times(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    require(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function minus(uint a, uint b) internal pure returns (uint) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function plus(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    require(c>=a);\r\n    return c;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    require(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    require(b > 0);\r\n    uint c = a / b;\r\n    require(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    require(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\ncontract OraclizeI {\r\n\taddress public cbAddress;\r\n\tfunction query(uint _timestamp, string _datasource, string _arg) external payable returns (bytes32 _id);\r\n\tfunction query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) external payable returns (bytes32 _id);\r\n\tfunction query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);\r\n\tfunction query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) external payable returns (bytes32 _id);\r\n\tfunction queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);\r\n\tfunction queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) external payable returns (bytes32 _id);\r\n\tfunction getPrice(string _datasource) public returns (uint _dsprice);\r\n\tfunction getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);\r\n\tfunction setProofType(byte _proofType) external;\r\n\tfunction setCustomGasPrice(uint _gasPrice) external;\r\n\tfunction randomDS_getSessionPubKeyHash() external constant returns(bytes32);\r\n}\r\ncontract OraclizeAddrResolverI {\r\n\tfunction getAddress() public returns (address _addr);\r\n}\r\ncontract usingOraclize {\r\n\t\r\n\tuint8 constant networkID_auto = 0;\r\n\tuint8 constant networkID_mainnet = 1;\r\n\tuint8 constant networkID_testnet = 2;\r\n\tuint8 constant networkID_morden = 2;\r\n\tuint8 constant networkID_consensys = 161;\r\n\r\n\tOraclizeAddrResolverI OAR;\r\n\r\n\tOraclizeI oraclize;\r\n\tmodifier oraclizeAPI \r\n\t{\r\n\t\tif((address(OAR)==0)||(getCodeSize(address(OAR))==0))\r\n\t\t\toraclize_setNetwork(networkID_auto);\r\n\r\n\t\tif(address(oraclize) != OAR.getAddress())\r\n\t\t\toraclize = OraclizeI(OAR.getAddress());\r\n\r\n\t\t_;\r\n\t}\r\n\tmodifier coupon(string code){\r\n\t\toraclize = OraclizeI(OAR.getAddress());\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction oraclize_setNetwork(uint8 networkID) internal returns(bool)\r\n\t{\r\n\t\treturn oraclize_setNetwork();\r\n\t\tnetworkID; // silence the warning and remain backwards compatible\r\n\t}\r\n\t\r\n\tfunction oraclize_setNetwork() internal returns(bool)\r\n\t{\r\n\t\tif (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet\r\n\t\t\tOAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\r\n\t\t\tOAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tfunction oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n\t\tuint price = oraclize.getPrice(datasource, gaslimit);\r\n\t\tif (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n\t\treturn oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\r\n\t}\r\n\r\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\r\n\t}\r\n\t\r\n\tfunction oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\r\n\t\treturn oraclize.getPrice(datasource);\r\n\t}\r\n\r\n\tfunction oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\r\n\t\treturn oraclize.getPrice(datasource, gaslimit);\r\n\t}\r\n\r\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\r\n        return oraclize.setCustomGasPrice(gasPrice);\r\n    }\r\n\t\r\n\tfunction oraclize_cbAddress() oraclizeAPI internal returns (address){\r\n\t\treturn oraclize.cbAddress();\r\n\t}\r\n\r\n\tfunction getCodeSize(address _addr) constant internal returns(uint _size) {\r\n\t\tassembly {\r\n\t\t\t_size := extcodesize(_addr)\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\ncontract ERC721Abstract\r\n{\r\n\tfunction implementsERC721() public pure returns (bool);\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance);\r\n\tfunction ownerOf(uint256 _tokenId) public view returns (address owner);\r\n\tfunction approve(address _to, uint256 _tokenId) public;\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\tfunction transfer(address _to, uint256 _tokenId) public;\r\n \r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n\t// Optional\r\n\t// function totalSupply() public view returns (uint256 total);\r\n\t// function name() public view returns (string name);\r\n\t// function symbol() public view returns (string symbol);\r\n\t// function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n\t// function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\ncontract ERC721 is ERC721Abstract\r\n{\r\n\tstring constant public   name = \"TotalGameOracle\";\r\n\tstring constant public symbol = \"TTGO\";\r\n\r\n\tuint256 public totalSupply;\r\n\tstruct Token\r\n\t{\r\n\t\tuint256 price;\t\t\t//  value of stake\r\n\t\tuint256\toption;\t\t\t//  [payout]96[idLottery]64[combination]32[dateBuy]0\r\n\t}\r\n\tmapping (uint256 => Token) tokens;\r\n\t\r\n\t// A mapping from tokens IDs to the address that owns them. All tokens have some valid owner address\r\n\tmapping (uint256 => address) public tokenIndexToOwner;\r\n\t\r\n\t// A mapping from owner address to count of tokens that address owns.\t\r\n\tmapping (address => uint256) ownershipTokenCount; \r\n\r\n\t// A mapping from tokenIDs to an address that has been approved to call transferFrom().\r\n\t// Each token can only have one approved address for transfer at any time.\r\n\t// A zero value means no approval is outstanding.\r\n\tmapping (uint256 => address) public tokenIndexToApproved;\r\n\t\r\n\tfunction implementsERC721() public pure returns (bool)\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256 count) \r\n\t{\r\n\t\treturn ownershipTokenCount[_owner];\r\n\t}\r\n\t\r\n\tfunction ownerOf(uint256 _tokenId) public view returns (address owner)\r\n\t{\r\n\t\towner = tokenIndexToOwner[_tokenId];\r\n\t\trequire(owner != address(0));\r\n\t}\r\n\t\r\n\t// Marks an address as being approved for transferFrom(), overwriting any previous approval. \r\n\t// Setting _approved to address(0) clears all transfer approval.\r\n\tfunction _approve(uint256 _tokenId, address _approved) internal \r\n\t{\r\n\t\ttokenIndexToApproved[_tokenId] = _approved;\r\n\t}\r\n\t\r\n\t// Checks if a given address currently has transferApproval for a particular token.\r\n\t// param _claimant the address we are confirming token is approved for.\r\n\t// param _tokenId token id, only valid when > 0\r\n\tfunction _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n\t\treturn tokenIndexToApproved[_tokenId] == _claimant;\r\n\t}\r\n\t\r\n\tfunction approve( address _to, uint256 _tokenId ) public\r\n\t{\r\n\t\t// Only an owner can grant transfer approval.\r\n\t\trequire(_owns(msg.sender, _tokenId));\r\n\r\n\t\t// Register the approval (replacing any previous approval).\r\n\t\t_approve(_tokenId, _to);\r\n\r\n\t\t// Emit approval event.\r\n\t\tApproval(msg.sender, _to, _tokenId);\r\n\t}\r\n\t\r\n\tfunction transferFrom( address _from, address _to, uint256 _tokenId ) public\r\n\t{\r\n\t\t// Check for approval and valid ownership\r\n\t\trequire(_approvedFor(msg.sender, _tokenId));\r\n\t\trequire(_owns(_from, _tokenId));\r\n\r\n\t\t// Reassign ownership (also clears pending approvals and emits Transfer event).\r\n\t\t_transfer(_from, _to, _tokenId);\r\n\t}\r\n\t\r\n\tfunction _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n\t\treturn tokenIndexToOwner[_tokenId] == _claimant;\r\n\t}\r\n\t\r\n\tfunction _transfer(address _from, address _to, uint256 _tokenId) internal \r\n\t{\r\n\t\townershipTokenCount[_to]++;\r\n\t\ttokenIndexToOwner[_tokenId] = _to;\r\n\r\n\t\tif (_from != address(0)) \r\n\t\t{\r\n\t\t\tTransfer(_from, _to, _tokenId);\r\n\t\t\townershipTokenCount[_from]--;\r\n\t\t\t// clear any previously approved ownership exchange\r\n\t\t\tdelete tokenIndexToApproved[_tokenId];\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\tfunction transfer(address _to, uint256 _tokenId) public\r\n\t{\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_owns(msg.sender, _tokenId));\r\n\t\t_transfer(msg.sender, _to, _tokenId);\r\n\t}\r\n\r\n}\r\n\r\ncontract Owned \r\n{\r\n    address private candidate;\r\n\taddress public owner;\r\n\r\n\tmapping(address => bool) public admins;\r\n\t\r\n    function Owned() public \r\n\t{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function changeOwner(address newOwner) public \r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n        candidate = newOwner;\r\n    }\r\n\t\r\n\tfunction confirmOwner() public \r\n\t{\r\n        require(candidate == msg.sender); // run by name=candidate\r\n\t\towner = candidate;\r\n    }\r\n\t\r\n    function addAdmin(address addr) external \r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n        admins[addr] = true;\r\n    }\r\n\r\n    function removeAdmin(address addr) external\r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n        admins[addr] = false;\r\n    }\r\n}\r\n\r\ncontract Functional\r\n{\r\n\t// parseInt(parseFloat*10^_b)\r\n\tfunction parseInt(string _a, uint _b) internal pure returns (uint) \r\n\t{\r\n\t\tbytes memory bresult = bytes(_a);\r\n\t\tuint mint = 0;\r\n\t\tbool decimals = false;\r\n\t\tfor (uint i=0; i<bresult.length; i++){\r\n\t\t\tif ((bresult[i] >= 48)&&(bresult[i] <= 57)){\r\n\t\t\t\tif (decimals){\r\n\t\t\t\t   if (_b == 0) break;\r\n\t\t\t\t\telse _b--;\r\n\t\t\t\t}\r\n\t\t\t\tmint *= 10;\r\n\t\t\t\tmint += uint(bresult[i]) - 48;\r\n\t\t\t} else if (bresult[i] == 46) decimals = true;\r\n\t\t}\r\n\t\tif (_b > 0) mint *= 10**_b;\r\n\t\treturn mint;\r\n\t}\r\n\t\r\n\tfunction uint2str(uint i) internal pure returns (string)\r\n\t{\r\n\t\tif (i == 0) return \"0\";\r\n\t\tuint j = i;\r\n\t\tuint len;\r\n\t\twhile (j != 0){\r\n\t\t\tlen++;\r\n\t\t\tj /= 10;\r\n\t\t}\r\n\t\tbytes memory bstr = new bytes(len);\r\n\t\tuint k = len - 1;\r\n\t\twhile (i != 0){\r\n\t\t\tbstr[k--] = byte(48 + i % 10);\r\n\t\t\ti /= 10;\r\n\t\t}\r\n\t\treturn string(bstr);\r\n\t}\r\n\t\r\n\tfunction strConcat(string _a, string _b, string _c) internal pure returns (string)\r\n\t{\r\n\t\tbytes memory _ba = bytes(_a);\r\n\t\tbytes memory _bb = bytes(_b);\r\n\t\tbytes memory _bc = bytes(_c);\r\n\t\tstring memory abc;\r\n\t\tuint k = 0;\r\n\t\tuint i;\r\n\t\tbytes memory babc;\r\n\t\tif (_ba.length==0)\r\n\t\t{\r\n\t\t\tabc = new string(_bc.length);\r\n\t\t\tbabc = bytes(abc);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tabc = new string(_ba.length + _bb.length+ _bc.length);\r\n\t\t\tbabc = bytes(abc);\r\n\t\t\tfor (i = 0; i < _ba.length; i++) babc[k++] = _ba[i];\r\n\t\t\tfor (i = 0; i < _bb.length; i++) babc[k++] = _bb[i];\r\n\t\t}\r\n        for (i = 0; i < _bc.length; i++) babc[k++] = _bc[i];\r\n\t\treturn string(babc);\r\n\t}\r\n\t\r\n\tfunction timenow() public view returns(uint32) { return uint32(block.timestamp); }\r\n}\r\n\r\ncontract TTGOracle is ERC721, usingOraclize, Functional, Owned\r\n{\r\n\tusing SafeMathLib for uint32;\r\n\tusing SafeMathLib for uint256;\r\n\tuint256 public feeLottery;\r\n\t\r\n\tenum Status {\r\n\t\tNOTFOUND,\t\t//0 game not created\r\n\t\tPLAYING,\t\t//1 buying tickets\r\n\t\tPROCESSING,\t\t//2 waiting for result\r\n\t\tPAYING,\t \t\t//3 redeeming\r\n\t\tCANCELING\t\t//4 canceling the game\r\n\t}\r\n\t\r\n\tstruct Game {\r\n\t\tstring  nameLottery;\r\n\t\tuint32  countCombinations;\r\n\t\tuint32  gameID;\r\n\t\tuint32  teamAID;\r\n\t\tuint32  teamBID;\t\t\r\n\t\tuint32  dateStopBuy;\r\n\t\tuint32  minStake;\t\t\t\t// per finney = 0.001E\r\n\t\tuint32  winCombination;\r\n\t\tuint256 betsSumIn;\t\t\t\t// amount bets\r\n\t\tuint256 feeValue;\t\t\t\t// amount fee\r\n\t\tStatus status;\t\t\t\t\t// status of game\r\n\t\tbool isFreezing;\r\n\t}\r\n\tGame[] private game;\r\n\tITTGCoin private ttgCoin;\r\n\tIItemToken private itemToken;\r\n\tuint32 private userAirDropRate = 1000;\r\n\tuint32 private ownerAirDropRate = 100;\r\n\r\n\tstruct Stake {\r\n\t\tuint256 sum;\t\t// amount bets\r\n\t\tuint32 count;\t\t// count bets \r\n\t}\r\n\tmapping(uint32 => mapping (uint32 => Stake)) public betsAll; // ID-lottery => combination => Stake\r\n\tmapping(bytes32 => uint32) private queryRes;  // ID-query => ID-lottery\r\n\t\r\n\tuint256 public ORACLIZE_GAS_LIMIT = 2000000;\r\n\tuint256 public ORACLIZE_GASPRICE_GWEY = 40; // 40Gwey\r\n\r\n\tevent LogEvent(string _event, string nameLottery, uint256 value);\r\n\tevent LogToken(string _event, address user, uint32 idLottery, uint32 idToken, uint32 combination, uint256 amount);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\t\r\n\tmodifier onlyAdmin {\r\n        require(msg.sender == owner || admins[msg.sender]);\r\n        _;\r\n    }\r\n\r\n\tmodifier onlyOraclize {\r\n        require (msg.sender == oraclize_cbAddress());\r\n        _;\r\n    }\r\n\r\n   function setTTGCoin (address _ttgCoin) onlyOwner() public {\r\n    ttgCoin = ITTGCoin(_ttgCoin);\r\n   }\r\n\r\n   function setItemToken (address _itemToken) onlyOwner() public {\r\n    itemToken = IItemToken(_itemToken);\r\n   }\r\n\r\n\r\n\tfunction getLotteryByID(uint32 _id) public view returns (\r\n\t\tstring  nameLottery,\r\n\t\tuint32 countCombinations,\r\n\t\tuint32 dateStopBuy,\r\n\t\tuint32 gameID,\r\n\t\tuint32 teamAID,\r\n\t\tuint32 teamBID,\t\t\r\n\t\tuint32 minStake,\r\n\t\tuint32 winCombination,\r\n\t\tuint32 betsCount,\r\n\t\tuint256 betsSumIn,\r\n\t\tuint256 feeValue,\r\n\t\tStatus status,\r\n\t\tbool isFreezing\r\n\t){\r\n\t\tGame storage gm = game[_id];\r\n\t\tnameLottery = gm.nameLottery;\r\n\t\tcountCombinations = gm.countCombinations;\r\n\t\tdateStopBuy = gm.dateStopBuy;\r\n\t\tgameID = gm.gameID;\r\n\t\tteamAID = gm.teamAID;\r\n\t\tteamBID = gm.teamBID;\r\n\t\tminStake = gm.minStake;\r\n\t\twinCombination = gm.winCombination;\r\n\t\tbetsCount = getCountTokensByLottery(_id);\r\n\t\tbetsSumIn = gm.betsSumIn;  \r\n\t\tif (betsSumIn==0) betsSumIn = getSumInByLottery(_id);\r\n\t\tfeeValue = gm.feeValue;\r\n\t\tstatus = gm.status;\r\n\t\tif ( status == Status.PLAYING && timenow() > dateStopBuy ) status = Status.PROCESSING;\r\n\t\tisFreezing = gm.isFreezing;\r\n\t}\r\n\t\r\n\tfunction getCountTokensByLottery(uint32 idLottery) internal view returns (uint32)\r\n\t{\r\n\t\tGame storage curGame = game[idLottery];\r\n\t\tuint32 count = 0;\r\n\t\tfor(uint32 i=1;i<=curGame.countCombinations;i++) count += betsAll[idLottery][i].count;\r\n\t\treturn count;\r\n\t}\r\n\t\r\n\tfunction getSumInByLottery(uint32 idLottery) internal view returns (uint256)\r\n\t{\r\n\t\tGame storage curGame = game[idLottery];\r\n\t\tuint256 sum = 0;\r\n\t\tfor(uint32 i=1;i<=curGame.countCombinations;i++) sum += betsAll[idLottery][i].sum;\r\n\t\treturn sum;\r\n\t}\r\n\t\r\n\tfunction getTokenByID(uint256 _id) public view returns ( \r\n\t\t\tuint256 price,\r\n\t\t\tuint256 payment,\r\n\t\t\tuint32 combination,\r\n\t\t\tuint32 dateBuy,\r\n\t\t\tuint32 idLottery,\r\n\t\t\taddress ownerToken,\r\n\t\t\tbool payout,\r\n\t\t\tuint256 sameComboAmount,\r\n\t\t\tuint256 tokenID\r\n\t){\r\n\t\tToken storage tkn = tokens[_id];\r\n\r\n\t\tprice = tkn.price;\r\n\t\t\r\n\t\tuint256 packed = tkn.option;\r\n\t\tpayout = uint8((packed >> (12*8)) & 0xFF)==1?true:false;\r\n\t\tidLottery   = uint32((packed >> (8*8)) & 0xFFFFFFFF);\r\n\t\tcombination = uint32((packed >> (4*8)) & 0xFFFFFFFF);\r\n\t\tdateBuy     = uint32(packed & 0xFFFFFFFF);\r\n\t\tsameComboAmount = betsAll[idLottery][combination].sum;\r\n\t\ttokenID = _id;\r\n\r\n\t\tpayment = 0;\r\n\t\tGame storage curGame = game[idLottery];\r\n\t\t\r\n\t\tuint256 betsSumIn = curGame.betsSumIn;  \r\n\t\tif (betsSumIn==0) betsSumIn = getSumInByLottery(idLottery);\r\n\r\n\t\tif (curGame.winCombination==combination) payment = betsSumIn * tkn.price / betsAll[idLottery][ curGame.winCombination ].sum;\r\n\t\tif (curGame.status == Status.CANCELING) payment = tkn.price;\r\n\t\t\r\n\t\townerToken = tokenIndexToOwner[_id];\r\n\t}\r\n\r\n\tfunction getUserTokens(address user, uint32 count) public view returns ( string res ) \r\n\t{\r\n\t\tres=\"\";\r\n\t\trequire(user!=0x0);\r\n\t\tuint32 findCount=0;\r\n\t\tfor (uint256 i = totalSupply-1; i >= 0; i--)\r\n\t\t{\r\n\t\t\tif(i>totalSupply) break;\r\n\t\t\tif (user == tokenIndexToOwner[i]) \r\n\t\t\t{\r\n\t\t\t\tres = strConcat( res, \",\", uint2str(i) );\r\n\t\t\t\tfindCount++;\r\n\t\t\t\tif (count!=0 && findCount>=count) break;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserTokensByMatch(address user, uint32 matchID) public view returns ( string res ) \r\n\t{\r\n\t\tres=\"\";\r\n\t\trequire(user!=0x0);\r\n\t\tuint32 findCount=0;\r\n\t\tfor (uint256 i = totalSupply-1; i >= 0; i--)\r\n\t\t{\r\n\t\t\tif(i>totalSupply) break;\r\n\t\t\tif (user == tokenIndexToOwner[i]) \r\n\t\t\t{\r\n\t\t\t\tToken storage tkn = tokens[i];\r\n\t\t\t\tuint256 packed = tkn.option;\r\n\t\t\t\tuint32 idStored   = uint32((packed >> (8*8)) & 0xFFFFFFFF);\r\n\t\t\t\tif(idStored == matchID){\r\n\t\t\t\t\tres = strConcat( res, \",\", uint2str(i) );\r\n\t\t\t\t\tfindCount++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\r\n\tfunction getStatLotteries() public view returns ( \r\n\t\t\tuint32 countAll,\r\n\t\t\tuint32 countPlaying,\r\n\t\t\tuint32 countProcessing,\r\n\t\t\tstring listPlaying,\r\n\t\t\tstring listProcessing\r\n\t){\r\n\t\tcountAll = uint32(game.length);\r\n\t\tcountPlaying = 0;\r\n\t\tcountProcessing = 0;\r\n\t\tlistPlaying=\"\";\r\n\t\tlistProcessing=\"\";\r\n\t\tuint32 curtime = timenow();\r\n\t\tfor (uint32 i = 0; i < countAll; i++)\r\n\t\t{\r\n\t\t\tif (game[i].status!=Status.PLAYING) continue;\r\n\t\t\tif (curtime <  game[i].dateStopBuy) { countPlaying++; listPlaying = strConcat( listPlaying, \",\", uint2str(i) ); }\r\n\t\t\tif (curtime >= game[i].dateStopBuy) { countProcessing++; listProcessing = strConcat( listProcessing, \",\", uint2str(i) ); }\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tfunction TTGOracle() public \r\n\t{\r\n\t}\r\n\r\n\tfunction setOraclizeGasPrice(uint256 priceGwey, uint256 limit) onlyAdmin public\r\n\t{\r\n\t\tORACLIZE_GASPRICE_GWEY = priceGwey;\r\n\t\tORACLIZE_GAS_LIMIT = limit;\r\n\t\toraclize_setCustomGasPrice( uint256(ORACLIZE_GASPRICE_GWEY) * 10**9 );\r\n\t}\r\n\r\n\tfunction freezeLottery(uint32 idLottery, bool freeze) public onlyAdmin \r\n\t{ \r\n\t\tGame storage curGame = game[idLottery];\r\n\t\trequire( curGame.isFreezing != freeze );\r\n\t\tcurGame.isFreezing = freeze; \r\n\t}\r\n\r\n\tfunction addLottery( string _nameLottery, uint32 _dateStopBuy, uint32 _countCombinations, uint32 gameID, uint32 teamAID, uint32 teamBID, uint32 _minStakeFinney ) onlyAdmin public \r\n\t{\r\n\r\n\t\trequire( bytes(_nameLottery).length > 2 );\r\n\t\trequire( _countCombinations > 1 );\r\n\t\trequire( _minStakeFinney > 0 );\r\n\t\trequire( _dateStopBuy > timenow() );\r\n\r\n\t\tGame memory _game;\r\n\t\t_game.nameLottery = _nameLottery;\r\n\t\t_game.countCombinations = _countCombinations;\r\n\t\t_game.dateStopBuy = _dateStopBuy;\r\n\t\t_game.gameID = gameID;\r\n\t\t_game.minStake \t= _minStakeFinney;\r\n\t\t_game.status = Status.PLAYING;\r\n\t\t_game.teamAID = teamAID;\r\n\t\t_game.teamBID = teamBID;\r\n\t\t\r\n\r\n\t\tuint256 newGameId = game.push(_game) - 1;\r\n\t\t\r\n\t\t\r\n\t\tLogEvent( \"AddGame\", _nameLottery, newGameId );\r\n\t}\r\n\r\n\tfunction () payable public { require (msg.value == 0x0); }\r\n\r\n\tfunction setUserAirDropRate(uint32 rate) onlyAdmin public{\r\n\t\tuserAirDropRate = rate;\r\n\t}\r\n\r\n\tfunction setOwnerAirDropRate(uint32 rate) onlyAdmin public{\r\n\t\townerAirDropRate = rate;\r\n\t}\t\r\n\t\r\n\tfunction buyToken(uint32 idLottery, uint32 teamID, uint32 combination, address captainAddress) payable public\r\n\t{\r\n\t\tGame storage curGame = game[idLottery];\r\n\t\trequire( curGame.status == Status.PLAYING );\r\n\t\trequire( timenow() < curGame.dateStopBuy );\r\n\t\trequire( combination > 0 && combination <= curGame.countCombinations );\r\n\t\trequire( captainAddress != msg.sender );\r\n\t\trequire( curGame.isFreezing == false );\r\n\t\t\r\n\t\t// check money for stake\r\n\t\trequire( msg.value >= curGame.minStake * 1 finney );\r\n\t\t\r\n\t\tuint256 userStake = msg.value;\r\n\t\tuint256 airDropAmountUser = userStake.mul(userAirDropRate); \r\n\t\tif(airDropAmountUser > 1000*10**18) airDropAmountUser = 1000*10**18;\r\n\t\tttgCoin.airDrop(this, msg.sender, airDropAmountUser);\r\n\t\taddress teamOwner = itemToken.ownerOf(teamID);\r\n\t\tif(teamOwner!=0x0){\r\n\t\t\tuint256 airDropAmountOwner = userStake.mul(ownerAirDropRate); \t\r\n\t\t\tif(airDropAmountOwner > 1000*10**18) airDropAmountOwner = 1000*10**18;\t\t\t\r\n\t\t\tttgCoin.airDrop(this, teamOwner, airDropAmountOwner);   //for team owner \r\n\t\t}\r\n\t\tuint256 feeValue = userStake.mul(4).div(100);\t\t// 4% fee for contract\r\n\t\tuserStake = userStake.minus(feeValue);\r\n\t\t\r\n\t\tif (captainAddress!=0x0) \r\n\t\t{\r\n\t\t\t//uint256 captainValue = feeValue.mul(20).div(100);\t\t// bonus for captain = 1%\r\n\t\t\t// feeValue = feeValue - captainValue;\r\n\t\t\t// require(feeValue + captainValue + userStake == msg.value);\r\n\t\t\t// captainAddress.transfer(captainValue);\r\n\t\t\tttgCoin.airDrop(this, captainAddress, airDropAmountOwner);   //team owner \r\n\t\t}\r\n\r\n\t\tcurGame.feeValue  = curGame.feeValue.add(feeValue);\r\n\t\tbetsAll[idLottery][combination].sum += userStake;\r\n\t\tbetsAll[idLottery][combination].count++;\r\n\r\n\t\tuint128 packed;\r\n\t\tpacked = ( uint128(idLottery) << 64 ) + ( uint128(combination) << 32 ) + uint128(block.timestamp);\r\n\r\n\t\tToken memory _token = Token({\r\n\t\t\tprice: userStake,\r\n\t\t\toption : packed\r\n\t\t});\r\n\r\n\t\tuint256 newTokenId = totalSupply++;\r\n\t\ttokens[newTokenId] = _token;\r\n\t\t_transfer(0, msg.sender, newTokenId);\r\n\t\t\r\n\t\tLogToken( \"Buy\", msg.sender, idLottery, uint32(newTokenId), combination, userStake);\r\n\t}\r\n\t\r\n\t// take win money or money for canceling lottery\r\n\tfunction redeemToken(uint256 _tokenId, uint32 teamID) public \r\n\t{\r\n\t\tToken storage tkn = tokens[_tokenId];\r\n\r\n\t\tuint256 packed = tkn.option;\r\n\t\tbool payout = uint8((packed >> (96)) & 0xFF)==1?true:false;\r\n\t\tuint32 idLottery = uint32((packed >> (64)) & 0xFFFFFFFF);\r\n\t\tuint32 combination = uint32((packed >> (32)) & 0xFFFFFFFF);\r\n\r\n\t\tGame storage curGame = game[idLottery];\r\n\t\t\r\n\t\trequire( curGame.status == Status.PAYING || curGame.status == Status.CANCELING);\r\n\r\n\t\trequire( msg.sender == tokenIndexToOwner[_tokenId] );\t// only onwer`s token\r\n\t\trequire( payout == false ); // has not paid\r\n\t\trequire( combination == curGame.winCombination || curGame.status == Status.CANCELING );\r\n\r\n\t\tuint256 sumPayment = 0;\r\n\t\tif ( curGame.status == Status.CANCELING ) sumPayment = tkn.price;\r\n\t\tif ( curGame.status == Status.PAYING ){\t\t\t\r\n\t\t\tsumPayment = curGame.betsSumIn * tkn.price / betsAll[idLottery][curGame.winCombination].sum;\r\n\t\t\taddress teamOwner = itemToken.ownerOf(teamID);\r\n\t\t\t\tif(teamOwner!=0x0){\t\t\t\t\t\r\n\t\t\t\t\tteamOwner.transfer(sumPayment.div(100));\r\n\t\t\t\t\tsumPayment = sumPayment.mul(99).div(100);\r\n\t\t\t\t}\r\n\t\t}\r\n\r\n\t\tpayout = true;\r\n\t\tpacked += uint128(payout?1:0) << 96;\r\n\t\ttkn.option = packed;\r\n\t\r\n\t\tmsg.sender.transfer(sumPayment);\r\n\t\t\r\n\t\tLogToken( \"Redeem\", msg.sender, idLottery, uint32(_tokenId), combination, sumPayment);\r\n\t}\r\n\t\r\n\tfunction cancelLottery(uint32 idLottery) public \r\n\t{\r\n\t\tGame storage curGame = game[idLottery];\r\n\t\t\r\n\t\trequire( curGame.status == Status.PLAYING );\r\n\t\t// only owner/admin or anybody after 7 days\r\n\t\trequire( msg.sender == owner || admins[msg.sender] || timenow() > curGame.dateStopBuy.add(7 * 24*60*60) );\r\n\r\n\t\tcurGame.status = Status.CANCELING;\r\n\r\n\t\tLogEvent( \"CancelLottery\", curGame.nameLottery, idLottery );\r\n\t\t\r\n\t\ttakeFee(idLottery);\r\n\t}\r\n\r\n\tfunction __callback(bytes32 queryId, string _result) onlyOraclize public\r\n\t{\r\n\t\tuint32 idLottery = queryRes[queryId];\r\n\t\trequire( idLottery != 0 );\r\n\r\n\t\tGame storage curGame = game[idLottery];\r\n\t\t\r\n\t\trequire( curGame.status == Status.PLAYING );\r\n\t\trequire( timenow() > curGame.dateStopBuy );\r\n\t\t\r\n\t\tuint32 tmpCombination = uint32(parseInt(_result,0));\r\n\t\t\r\n\t\tstring memory error = \"callback\";\r\n\t\tif ( tmpCombination==0 ) error = \"callback_result_not_found\";\r\n\t\tif ( tmpCombination > curGame.countCombinations ) { tmpCombination = 0; error = \"callback_result_limit\"; }\r\n\r\n\t\tLogEvent( error, curGame.nameLottery, tmpCombination );\r\n\r\n\t\tif (tmpCombination!=0) \r\n\t\t{\r\n\t\t\tcurGame.winCombination = tmpCombination;\r\n\t\t\tcheckWinNobody(idLottery);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction resolveLotteryByOraclize(uint32 idLottery, uint32 delaySec) onlyAdmin public payable\r\n\t{\r\n\t\tGame storage curGame = game[idLottery];\r\n\t\t\r\n\t\tuint oraclizeFee = oraclize_getPrice( \"URL\", ORACLIZE_GAS_LIMIT );\r\n\t\trequire(msg.value + curGame.feeValue > oraclizeFee); // if contract has not enought money to do query\r\n\t\t\r\n\t\tcurGame.feeValue = curGame.feeValue + msg.value - oraclizeFee;\r\n\r\n\t\tLogEvent( \"ResolveLotteryByOraclize\", curGame.nameLottery, delaySec );\r\n\t\t\r\n\t\tstring memory tmpQuery;\r\n\t\ttmpQuery = strConcat( \"json(https://totalgame.io/api/v2/game/\", uint2str(idLottery), \"/result.json).result\" );\r\n\t\r\n\t\tuint32 delay;\r\n\t\tif ( timenow() < curGame.dateStopBuy ) delay = curGame.dateStopBuy - timenow() + delaySec; //TODO:need to convert to safe math\r\n\t\t\t\t\t\t\t\t\t\t  else delay = delaySec;\r\n\t\r\n\t\tbytes32 queryId = oraclize_query(delay, \"URL\", tmpQuery, ORACLIZE_GAS_LIMIT);\r\n\t\tqueryRes[queryId] = idLottery;\r\n\t}\r\n\r\n\tfunction resolveLotteryByHand(uint32 idLottery, uint32 combination) onlyAdmin public \r\n\t{\r\n\t\tGame storage curGame = game[idLottery];\r\n\t\t\r\n\t\trequire( curGame.status == Status.PLAYING );\r\n\t\trequire( combination <= curGame.countCombinations );\r\n\t\trequire( combination != 0 );\r\n\r\n\t\t//require( timenow() > curGame.dateStopBuy + 2*60*60 ); //TODO: remove comment\r\n\r\n\t\tcurGame.winCombination = combination;\r\n\t\t\r\n\t\tLogEvent( \"ResolveLotteryByHand\", curGame.nameLottery, curGame.winCombination );\r\n\t\t\r\n\t\tcheckWinNobody(idLottery);\r\n\t}\r\n\t\r\n\tfunction checkWinNobody(uint32 idLottery) internal\r\n\t{\r\n\t\tGame storage curGame = game[idLottery];\r\n\t\t\r\n\t\tcurGame.status = Status.PAYING;\r\n\t\tcurGame.betsSumIn = getSumInByLottery(idLottery);\r\n\t\t\r\n\t\t// nobody win = send all to feeLottery\r\n\t\tif ( betsAll[idLottery][curGame.winCombination].count == 0 )\r\n\t\t{\r\n\t\t\tif (curGame.betsSumIn+curGame.feeValue!=0) feeLottery = feeLottery.add(curGame.betsSumIn).add(curGame.feeValue);\r\n\t\t\tLogEvent( \"NOBODYWIN\", curGame.nameLottery, curGame.betsSumIn+curGame.feeValue );\r\n\t\t}\r\n\t\telse \r\n\t\t\ttakeFee(idLottery);\r\n\t}\r\n\t\r\n\tfunction takeFee(uint32 idLottery) internal\r\n\t{\r\n\t\tGame storage curGame = game[idLottery];\r\n\t\t\r\n\t\t// take fee\r\n\t\tif ( curGame.feeValue > 0 )\r\n\t\t{\r\n\t\t\tfeeLottery = feeLottery + curGame.feeValue;\r\n\t\t\tLogEvent( \"TakeFee\", curGame.nameLottery, curGame.feeValue );\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction withdraw() onlyOwner public\r\n\t{\r\n\t\trequire( feeLottery > 0 );\r\n\r\n\t\tuint256 tmpFeeLottery = feeLottery;\r\n\t\tfeeLottery = 0;\r\n\t\t\r\n\t\towner.transfer(tmpFeeLottery);\r\n\t\tLogEvent( \"WITHDRAW\", \"\", tmpFeeLottery);\r\n\t}\r\n\r\n}\r\n\r\n\r\ninterface ITTGCoin {\r\n  function airDrop(address transmitter, address receiver, uint amount) public  returns (uint actual);  \r\n}\r\n\r\ninterface IItemToken {\r\n    function ownerOf (uint256 _itemId) public view returns (address _owner);  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTokenByID\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"payment\",\"type\":\"uint256\"},{\"name\":\"combination\",\"type\":\"uint32\"},{\"name\":\"dateBuy\",\"type\":\"uint32\"},{\"name\":\"idLottery\",\"type\":\"uint32\"},{\"name\":\"ownerToken\",\"type\":\"address\"},{\"name\":\"payout\",\"type\":\"bool\"},{\"name\":\"sameComboAmount\",\"type\":\"uint256\"},{\"name\":\"tokenID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idLottery\",\"type\":\"uint32\"}],\"name\":\"cancelLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"betsAll\",\"outputs\":[{\"name\":\"sum\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"queryId\",\"type\":\"bytes32\"},{\"name\":\"_result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint32\"}],\"name\":\"setUserAirDropRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timenow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"priceGwey\",\"type\":\"uint256\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setOraclizeGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ORACLIZE_GAS_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeLottery\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idLottery\",\"type\":\"uint32\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ttgCoin\",\"type\":\"address\"}],\"name\":\"setTTGCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idLottery\",\"type\":\"uint32\"},{\"name\":\"combination\",\"type\":\"uint32\"}],\"name\":\"resolveLotteryByHand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idLottery\",\"type\":\"uint32\"},{\"name\":\"delaySec\",\"type\":\"uint32\"}],\"name\":\"resolveLotteryByOraclize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint32\"}],\"name\":\"setOwnerAirDropRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"teamID\",\"type\":\"uint32\"}],\"name\":\"redeemToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameLottery\",\"type\":\"string\"},{\"name\":\"_dateStopBuy\",\"type\":\"uint32\"},{\"name\":\"_countCombinations\",\"type\":\"uint32\"},{\"name\":\"gameID\",\"type\":\"uint32\"},{\"name\":\"teamAID\",\"type\":\"uint32\"},{\"name\":\"teamBID\",\"type\":\"uint32\"},{\"name\":\"_minStakeFinney\",\"type\":\"uint32\"}],\"name\":\"addLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"count\",\"type\":\"uint32\"}],\"name\":\"getUserTokens\",\"outputs\":[{\"name\":\"res\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemToken\",\"type\":\"address\"}],\"name\":\"setItemToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"matchID\",\"type\":\"uint32\"}],\"name\":\"getUserTokensByMatch\",\"outputs\":[{\"name\":\"res\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getLotteryByID\",\"outputs\":[{\"name\":\"nameLottery\",\"type\":\"string\"},{\"name\":\"countCombinations\",\"type\":\"uint32\"},{\"name\":\"dateStopBuy\",\"type\":\"uint32\"},{\"name\":\"gameID\",\"type\":\"uint32\"},{\"name\":\"teamAID\",\"type\":\"uint32\"},{\"name\":\"teamBID\",\"type\":\"uint32\"},{\"name\":\"minStake\",\"type\":\"uint32\"},{\"name\":\"winCombination\",\"type\":\"uint32\"},{\"name\":\"betsCount\",\"type\":\"uint32\"},{\"name\":\"betsSumIn\",\"type\":\"uint256\"},{\"name\":\"feeValue\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"isFreezing\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idLottery\",\"type\":\"uint32\"},{\"name\":\"teamID\",\"type\":\"uint32\"},{\"name\":\"combination\",\"type\":\"uint32\"},{\"name\":\"captainAddress\",\"type\":\"address\"}],\"name\":\"buyToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ORACLIZE_GASPRICE_GWEY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStatLotteries\",\"outputs\":[{\"name\":\"countAll\",\"type\":\"uint32\"},{\"name\":\"countPlaying\",\"type\":\"uint32\"},{\"name\":\"countProcessing\",\"type\":\"uint32\"},{\"name\":\"listPlaying\",\"type\":\"string\"},{\"name\":\"listProcessing\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_event\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"nameLottery\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_event\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"idLottery\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"idToken\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"combination\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TTGOracle","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d69389096a003e24fa77667ca479bd7cd64e22c52a5c7fcabbcfde6b1fc98f35"}]}