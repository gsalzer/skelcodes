{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\n// 소유자 관리용 계약\r\ncontract Owned {\r\n    // 상태 변수\r\n    address public owner; // 소유자 주소\r\n\r\n    // 소유자 변경 시 이벤트\r\n    event TransferOwnership(address oldaddr, address newaddr);\r\n\r\n    // 소유자 한정 메서드용 수식자\r\n    modifier onlyOwner() { if (msg.sender != owner) return; _; }\r\n\r\n    // 생성자\r\n    function Owned() public {\r\n        owner = msg.sender; // 처음에 계약을 생성한 주소를 소유자로 한다\r\n    }\r\n    \r\n    // (1) 소유자 변경\r\n    function transferOwnership(address _new) onlyOwner public {\r\n        address oldaddr = owner;\r\n        owner = _new;\r\n        emit TransferOwnership(oldaddr, owner);\r\n    }\r\n}\r\n\r\n// (2) 회원 관리용 계약\r\ncontract Members is Owned {\r\n    // (3) 상태 변수 선언\r\n    address public coin; // 토큰(가상 화폐) 주소\r\n    MemberStatus[] public status; // 회원 등급 배열\r\n    mapping(address => History) public tradingHistory; // 회원별 거래 이력\r\n     \r\n    // (4) 회원 등급용 구조체\r\n    struct MemberStatus {\r\n        string name; // 등급명\r\n        uint256 times; // 최저 거래 회수\r\n        uint256 sum; // 최저 거래 금액\r\n        int8 rate; // 캐시백 비율\r\n    }\r\n    // 거래 이력용 구조체\r\n    struct History {\r\n        uint256 times; // 거래 회수\r\n        uint256 sum; // 거래 금액\r\n        uint256 statusIndex; // 등급 인덱스\r\n    }\r\n \r\n    // (5) 토큰 한정 메서드용 수식자\r\n    modifier onlyCoin() { if (msg.sender == coin) _; }\r\n     \r\n    // (6) 토큰 주소 설정\r\n    function setCoin(address _addr) onlyOwner public {\r\n        coin = _addr;\r\n    }\r\n     \r\n    // (7) 회원 등급 추가\r\n    function pushStatus(string _name, uint256 _times, uint256 _sum, int8 _rate) onlyOwner public {\r\n        status.push(MemberStatus({\r\n            name: _name,\r\n            times: _times,\r\n            sum: _sum,\r\n            rate: _rate\r\n        }));\r\n    }\r\n \r\n    // (8) 회원 등급 내용 변경\r\n    function editStatus(uint256 _index, string _name, uint256 _times, uint256 _sum, int8 _rate) onlyOwner public {\r\n        if (_index < status.length) {\r\n            status[_index].name = _name;\r\n            status[_index].times = _times;\r\n            status[_index].sum = _sum;\r\n            status[_index].rate = _rate;\r\n        }\r\n    }\r\n     \r\n    // (9) 거래 내역 갱신\r\n    function updateHistory(address _member, uint256 _value) onlyCoin public {\r\n        tradingHistory[_member].times += 1;\r\n        tradingHistory[_member].sum += _value;\r\n        // 새로운 회원 등급 결정(거래마다 실행)\r\n        uint256 index;\r\n        int8 tmprate;\r\n        for (uint i = 0; i < status.length; i++) {\r\n            // 최저 거래 횟수, 최저 거래 금액 충족 시 가장 캐시백 비율이 좋은 등급으로 설정\r\n            if (tradingHistory[_member].times >= status[i].times &&\r\n                tradingHistory[_member].sum >= status[i].sum &&\r\n                tmprate < status[i].rate) {\r\n                index = i;\r\n            }\r\n        }\r\n        tradingHistory[_member].statusIndex = index;\r\n    }\r\n\r\n    // (10) 캐시백 비율 획득(회원의 등급에 해당하는 비율 확인)\r\n    function getCashbackRate(address _member) public constant returns (int8 rate){\r\n        rate = status[tradingHistory[_member].statusIndex].rate;\r\n    }\r\n}\r\n     \r\n// (11) 회원 관리 기능이 구현된 가상 화폐\r\ncontract OreOreCoin is Owned{\r\n    // 상태 변수 선언\r\n    string public name; // 토큰 이름\r\n    string public symbol; // 토큰 단위\r\n    uint8 public decimals; // 소수점 이하 자릿수\r\n    uint256 public totalSupply; // 토큰 총량\r\n    mapping (address => uint256) public balanceOf; // 각 주소의 잔고\r\n    mapping (address => int8) public blackList; // 블랙리스트\r\n    mapping (address => Members) public members; // 각 주소의 회원 정보\r\n     \r\n    // 이벤트 알림\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Blacklisted(address indexed target);\r\n    event DeleteFromBlacklist(address indexed target);\r\n    event RejectedPaymentToBlacklistedAddr(address indexed from, address indexed to, uint256 value);\r\n    event RejectedPaymentFromBlacklistedAddr(address indexed from, address indexed to, uint256 value);\r\n    event Cashback(address indexed from, address indexed to, uint256 value);\r\n     \r\n    // 생성자\r\n    function OreOreCoin(uint256 _supply, string _name, string _symbol, uint8 _decimals) public {\r\n        balanceOf[msg.sender] = _supply;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _supply;\r\n    }\r\n \r\n    // 주소를 블랙리스트에 등록\r\n    function blacklisting(address _addr) onlyOwner public {\r\n        blackList[_addr] = 1;\r\n        emit Blacklisted(_addr);\r\n    }\r\n \r\n    // 주소를 블랙리스트에서 해제\r\n    function deleteFromBlacklist(address _addr) onlyOwner public {\r\n        blackList[_addr] = -1;\r\n        emit DeleteFromBlacklist(_addr);\r\n    }\r\n \r\n    // 회원 관리 계약 설정\r\n    function setMembers(Members _members) public {\r\n        members[msg.sender] = Members(_members);\r\n    }\r\n \r\n    // 송금\r\n    function transfer(address _to, uint256 _value)  public{\r\n        // 부정 송금 확인\r\n        if (balanceOf[msg.sender] < _value) return;\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) return;\r\n\r\n        // 블랙리스트에 존재하는 계정은 입출금 불가\r\n        if (blackList[msg.sender] > 0) {\r\n            emit RejectedPaymentFromBlacklistedAddr(msg.sender, _to, _value);\r\n        } else if (blackList[_to] > 0) {\r\n            emit RejectedPaymentToBlacklistedAddr(msg.sender, _to, _value);\r\n        } else {\r\n            // (12) 캐시백 금액을 계산(각 대상의 비율을 사용)\r\n            uint256 cashback = 0;\r\n            if(members[_to] > address(0)) {\r\n                cashback = _value / 100 * uint256(members[_to].getCashbackRate(msg.sender));\r\n                members[_to].updateHistory(msg.sender, _value);\r\n            }\r\n \r\n            balanceOf[msg.sender] -= (_value - cashback);\r\n            balanceOf[_to] += (_value - cashback);\r\n \r\n            emit Transfer(msg.sender, _to, _value);\r\n            emit Cashback(_to, msg.sender, cashback);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"blacklisting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"deleteFromBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_members\",\"type\":\"address\"}],\"name\":\"setMembers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_supply\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"DeleteFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RejectedPaymentToBlacklistedAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RejectedPaymentFromBlacklistedAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Cashback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldaddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newaddr\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"}]","ContractName":"OreOreCoin","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000001c6f307be4c4687e60000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000c446176696e636920636f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034441430000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://acfddfee79809035f0960306aa3ff75c9c5cc193cd2dc34237542e12a4cdc7fe"}]}