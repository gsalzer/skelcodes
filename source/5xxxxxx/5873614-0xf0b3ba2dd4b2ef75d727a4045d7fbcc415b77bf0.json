{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/issues/20\r\n\r\ninterface ERC20Interface {\r\n\r\n\t//Get the totalSupply of the token.\r\n\tfunction totalSupply() external constant returns (uint256);\r\n\t\r\n\t// Get the account balance of another account with address _owner\r\n\tfunction balanceOf(address _owner) external constant returns (uint256 balance);\r\n\r\n\t// Send _value amount of tokens to address _to\r\n\tfunction transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n\t// Send _value amount of tokens from address _from to address _to\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n\t// Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n\t// If this function is called again it overwrites the current allowance with _value.\r\n\t// this function is required for some DEX functionality\r\n\tfunction approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n\t// Returns the amount which _spender is still allowed to withdraw from _owner\r\n\tfunction allowance(address _owner, address _spender) external constant returns (uint256 remaining);\r\n\r\n\t// Triggered when tokens are transferred.\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n\t// Triggered whenever approve(address _spender, uint256 _value) is called.\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract STTInterface is ERC20Interface {\r\n    function BuyTokens () external payable returns (uint256 AtokenBought);\r\n          event Mint(address indexed _to, uint256 amount);\r\n\r\n    function SellTokens (uint256 SellAmount) external payable returns (uint256 EtherPaid);\r\n    function split() external returns (bool success);\r\n    event Split(uint256 factor);\r\n   \r\n    function getReserve() external constant returns (uint256);\r\n    function burn(uint256 _value) external returns (bool success);\r\n     event Burn(address indexed _burner, uint256 value);\r\n    \r\n}\r\n\r\ncontract AToken is STTInterface {\r\n   \r\n   using SafeMath for uint256;\r\n   \r\n   //ERC20 stuff\r\n   \r\n   \t// ************************************************************************\r\n\t//\r\n\t// Constructor and initializer\r\n\t//\r\n\t// ************************************************************************\t\r\n\r\n   \r\n   uint256 public _totalSupply = 10000000000000000000000;\r\n   string public name = \"A-Token\";\r\n   string public symbol = \"A\";\r\n   uint8 public constant decimals = 18;\r\n   \r\n   mapping(address => uint256) public balances;\r\n   mapping(address => mapping (address => uint256)) public allowed;\r\n   \r\n   //Arry and map for the split.\r\n    address[] private tokenHolders;\r\n\tmapping(address => bool) private tokenHoldersMap;\r\n   \r\n   \r\n   //Constructor\r\n\t\r\n\tconstructor() public {\r\n\t    balances[msg.sender] = _totalSupply;\r\n\t    tokenHolders.push(msg.sender);\r\n\t    tokenHoldersMap[msg.sender] = true;\r\n\r\n\t}\r\n   \r\n    //*************************************************************************\r\n\t//\r\n\t// Methods for all states\r\n\t//\r\n\t// ************************************************************************\t\r\n\r\n\t// ERC20 stuff\r\n\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _amount);  \r\n   \r\n   function balanceOf(address _addr) external constant returns(uint256 balance) {\r\n\r\n\t\treturn balances[_addr];\r\n\t}\r\n\t\r\n\tfunction transfer(address _to, uint256 _amount) external returns(bool success) {\r\n\r\n\t\trequire(_amount > 0);\r\n\t\trequire(_amount <= balances[msg.sender]);\r\n\t\trequire (_to != address(0));\r\n\t\t\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_amount);\r\n\t\tbalances[_to] = balances[_to].add(_amount);\r\n\t\t\r\n\t\tif(tokenHoldersMap[_to] != true) {\r\n\t\t\ttokenHolders.push(_to);\r\n\t\t\ttokenHoldersMap[_to] = true;\r\n\t\t}\r\n\r\n\t\temit Transfer(msg.sender, _to, _amount);\r\n\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction transferFrom(address _from, address _to, uint256 _amount) external returns(bool success) {\r\n\r\n\t\trequire(_from != address(0));\r\n\t\trequire(_to != address (0));\r\n\t\trequire(_amount > 0);\r\n\t\trequire(_amount <= balances[_from]);\r\n\t\trequire(_amount <= allowed[_from][msg.sender]);\r\n\r\n\t\tbalances[_from] = balances[_from].sub(_amount);\r\n\t\tbalances[_to] = balances[_to].add(_amount);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n\t\t\r\n\t\tif(tokenHoldersMap[_to] != true) {\r\n\t\t\ttokenHolders.push(_to);\r\n\t\t\ttokenHoldersMap[_to] = true;\r\n\t\t}\r\n\t\t\r\n\t\temit Transfer(_from, _to, _amount);\r\n\r\n\t\treturn true;\r\n \t}\r\n \t\r\n \tfunction approve(address _spender, uint256 _amount) external returns(bool success) {\r\n\r\n\t\trequire(_spender != address(0));\r\n\t\trequire(_amount > 0);\r\n\t\trequire(_amount <= balances[msg.sender]);\r\n        allowed[msg.sender][_spender] = _amount;\r\n\t\r\n\t\temit Approval(msg.sender, _spender, _amount);\r\n\r\n\t\treturn true;\r\n \t}\r\n \t\r\n \tfunction allowance(address _owner, address _spender) external constant returns(uint256 remaining) {\r\n\r\n\t\trequire(_owner != address(0));\r\n\t\trequire(_spender != address(0));\r\n\r\n\t\treturn allowed[_owner][_spender];\r\n \t}\r\n\t\t\r\n\tfunction totalSupply() external constant returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n\t\r\n\t\r\n// Self tradable functions\r\n     event Mint(address indexed _to, uint256 amount);\r\n     event Split(uint256 factor);\r\n     event Burn(address indexed _burner, uint256 value);\r\n\r\n\r\n    function BuyTokens () external payable returns ( uint256 AtokenBought) {\r\n     \r\n       \r\n        address thisAddress = this;\r\n\r\n\r\n        //checking minimum buy - twice the price\r\n        uint256 Aprice = (thisAddress.balance - msg.value) * 4*2* 1000000000000000000/_totalSupply;\r\n        require (msg.value>=Aprice);\r\n        \r\n        //calculating the formula\r\n        \r\n        AtokenBought = (thisAddress.balance -206000)* 1000000000000000000/ (thisAddress.balance-msg.value);\r\n        uint256 x = (1000000000000000000 + AtokenBought)/2;\r\n       x = (x + (AtokenBought * 1000000000000000000/x))/2;\r\n       x = (x + (AtokenBought * 1000000000000000000/x))/2;\r\n       x = (x + (AtokenBought * 1000000000000000000/x))/2; \r\n       x = (x + (AtokenBought * 1000000000000000000/x))/2;\r\n       x = (x + (AtokenBought * 1000000000000000000/x))/2;\r\n       \r\n       AtokenBought=x; \r\n       x = (1000000000000000000 + AtokenBought)/2;\r\n       x = (x + (AtokenBought * 1000000000000000000/x))/2;\r\n       x = (x + (AtokenBought * 1000000000000000000/x))/2;\r\n       x = (x + (AtokenBought * 1000000000000000000/x))/2;\r\n       x = (x + (AtokenBought * 1000000000000000000/x))/2;\r\n       x = (x + (AtokenBought * 1000000000000000000/x))/2;\r\n          \r\n       AtokenBought=x;\r\n       \r\n        AtokenBought -=1000000000000000000;\r\n       \r\n        AtokenBought = AtokenBought * _totalSupply/1000000000000000000;\r\n       \r\n        //checking the outcome\r\n        uint256 check1=(msg.value-206000)*_totalSupply/(thisAddress.balance-msg.value)/4;\r\n        require(check1>=AtokenBought);\r\n        \r\n        //doing the buy\r\n        _totalSupply +=AtokenBought;\r\n        balances[msg.sender] += AtokenBought;\r\n        if(tokenHoldersMap[msg.sender] != true) {\r\n        tokenHolders.push(msg.sender);\r\n\t    tokenHoldersMap[msg.sender] = true;\r\n\t   \t}\r\n\t    emit Mint(msg.sender, AtokenBought);\r\n        emit Transfer(address(0), msg.sender, AtokenBought);\r\n\r\n        return AtokenBought;\r\n        \r\n        }\r\n\r\n\r\n\r\n    function SellTokens (uint256 SellAmount) external payable returns (uint256 EtherPaid) {\r\n        \r\n        //re-entry defense\r\n        bool locked;\r\n        require(!locked);\r\n        locked = true;\r\n\r\n       //first check amount is equal or higher than 1 token\r\n        require(SellAmount>=1000000000000000000);\r\n       \r\n        //calculating the formula\r\n        require(msg.value>=206000);\r\n        \r\n        //Never going down from 300 tokens.\r\n        require((_totalSupply-SellAmount)>=300000000000000000000);\r\n        require(balances[(msg.sender)]>=SellAmount);\r\n        address thisAddress = this;\r\n        EtherPaid = (_totalSupply -SellAmount)*1000000000000000000/_totalSupply;\r\n        EtherPaid=1000000000000000000-(((EtherPaid**2/1000000000000000000)*(EtherPaid**2/1000000000000000000))/1000000000000000000);\r\n        EtherPaid=(EtherPaid*(thisAddress.balance-msg.value))*9/10000000000000000000;\r\n        //checking the calculation\r\n        uint256 check1=SellAmount*(thisAddress.balance-msg.value)*36/_totalSupply/10;\r\n        require(check1>EtherPaid);\r\n        require(EtherPaid<(thisAddress.balance-msg.value));\r\n        \r\n        //paying the ether\r\n        balances[msg.sender] -= SellAmount;\r\n        _totalSupply-=SellAmount;\r\n        \r\n        \r\n         emit Burn(msg.sender, SellAmount);\r\n         emit Transfer(msg.sender, address(0), SellAmount);\r\n       \r\n       msg.sender.transfer(EtherPaid);\r\n       \r\n         locked=false;\r\n\r\n        return EtherPaid;\r\n            }\r\n\r\n    //split function to lower the price.\r\n    \r\n    function split() external returns (bool success){\r\n        address thisContracrt = this;\r\n\r\n        //calculating the factor\r\n        \r\n        uint256 factor = thisContracrt.balance * 4 * 10/_totalSupply;\r\n    require (factor > 10);\r\n        factor *= 10;    \r\n    \r\n    for(uint index = 0; index < tokenHolders.length; index++) {\r\n\t\t\t\tbalances[tokenHolders[(index)]] *=factor ;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t_totalSupply *=factor;\r\n\t\temit Split(factor);\r\n\t\treturn true;\r\n\t\t\t}\t\t\r\n\r\n//get reserve information\r\nfunction getReserve() external constant returns (uint256){\r\n    address thissmart=this;\r\n    return thissmart.balance;\r\n}\r\n\r\n\r\n\r\n// Burn function\r\n\r\n  function burn(uint256 _value) external returns (bool success){\r\n    \r\n    require(_value > 0);\r\n    require(_value <= balances[msg.sender]);\r\n    require(_totalSupply-_value>=300000000000000000000);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    _totalSupply = _totalSupply.sub(_value);\r\n    emit Burn(msg.sender, _value);\r\n    emit Transfer(msg.sender, address(0), _value);\r\n    return true;\r\n  }\r\n\r\n//FallBack function\r\n\r\nfunction () public payable {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"SellAmount\",\"type\":\"uint256\"}],\"name\":\"SellTokens\",\"outputs\":[{\"name\":\"EtherPaid\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyTokens\",\"outputs\":[{\"name\":\"AtokenBought\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"split\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"factor\",\"type\":\"uint256\"}],\"name\":\"Split\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"AToken","CompilerVersion":"v0.4.25-nightly.2018.6.26+commit.24f124f8","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d4da370e4c7ea9b8114a22405a925c71b50ff8fd1909fd8953d61ec944c4f49e"}]}