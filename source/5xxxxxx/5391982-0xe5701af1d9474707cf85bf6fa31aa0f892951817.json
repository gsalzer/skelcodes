{"status":"1","message":"OK","result":[{"SourceCode":"// PixelCoins Source code\r\npragma solidity ^0.4.11;\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\n\r\n/// @title A facet of PixelCore that manages special access privileges.\r\n/// @author Oliver Schneider <info@pixelcoins.io> (https://pixelcoins.io)\r\ncontract PixelAuthority {\r\n\r\n    /// @dev Emited when contract is upgraded\r\n    event ContractUpgrade(address newContract);\r\n\r\n    address public authorityAddress;\r\n    uint public authorityBalance = 0;\r\n\r\n    /// @dev Access modifier for authority-only functionality\r\n    modifier onlyAuthority() {\r\n        require(msg.sender == authorityAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the authority. Only available to the current authority.\r\n    /// @param _newAuthority The address of the new authority\r\n    function setAuthority(address _newAuthority) external onlyAuthority {\r\n        require(_newAuthority != address(0));\r\n        authorityAddress = _newAuthority;\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title Base contract for PixelCoins. Holds all common structs, events and base variables.\r\n/// @author Oliver Schneider <info@pixelcoins.io> (https://pixelcoins.io)\r\n/// @dev See the PixelCore contract documentation to understand how the various contract facets are arranged.\r\ncontract PixelBase is PixelAuthority {\r\n    /*** EVENTS ***/\r\n\r\n    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a Pixel\r\n    ///  ownership is assigned.\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n\r\n    /*** CONSTANTS ***/\r\n    uint32 public WIDTH = 1000;\r\n    uint32 public HEIGHT = 1000;\r\n\r\n    /*** STORAGE ***/\r\n    /// @dev A mapping from pixel ids to the address that owns them. A pixel address of 0 means,\r\n    /// that the pixel can still be bought.\r\n    mapping (uint256 => address) public pixelIndexToOwner;\r\n    /// Address that is approved to change ownship\r\n    mapping (uint256 => address) public pixelIndexToApproved;\r\n    /// Stores the color of an pixel, indexed by pixelid\r\n    mapping (uint256 => uint32) public colors;\r\n    // @dev A mapping from owner address to count of tokens that address owns.\r\n    //  Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint256) ownershipTokenCount;\r\n\r\n    // Internal utility functions: These functions all assume that their input arguments\r\n    // are valid. We leave it to public methods to sanitize their inputs and follow\r\n    // the required logic.\r\n\r\n    /// @dev Assigns ownership of a specific Pixel to an address.\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        // Can no overflowe since the number of Pixels is capped.\r\n        // transfer ownership\r\n        ownershipTokenCount[_to]++;\r\n        pixelIndexToOwner[_tokenId] = _to;\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            delete pixelIndexToApproved[_tokenId];\r\n        }\r\n        // Emit the transfer event.\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Checks if a given address is the current owner of a particular Pixel.\r\n    /// @param _claimant the address we are validating against.\r\n    /// @param _tokenId Pixel id\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return pixelIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular Pixel.\r\n    /// @param _claimant the address we are confirming pixel is approved for.\r\n    /// @param _tokenId pixel id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return pixelIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n}\r\n\r\n\r\n/// @title The facet of the PixelCoins core contract that manages ownership, ERC-721 (draft) compliant.\r\n/// @author Oliver Schneider <info@pixelcoins.io> (https://pixelcoins.io), based on Axiom Zen (https://www.axiomzen.co)\r\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\r\n///  See the PixelCore contract documentation to understand how the various contract facets are arranged.\r\ncontract PixelOwnership is PixelBase, ERC721 {\r\n\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public constant name = \"PixelCoins\";\r\n    string public constant symbol = \"PXL\";\r\n\r\n\r\n    bytes4 constant InterfaceSignature_ERC165 =\r\n        bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    bytes4 constant InterfaceSignature_ERC721 =\r\n        bytes4(keccak256('name()')) ^\r\n        bytes4(keccak256('symbol()')) ^\r\n        bytes4(keccak256('totalSupply()')) ^\r\n        bytes4(keccak256('balanceOf(address)')) ^\r\n        bytes4(keccak256('ownerOf(uint256)')) ^\r\n        bytes4(keccak256('approve(address,uint256)')) ^\r\n        bytes4(keccak256('transfer(address,uint256)')) ^\r\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n        bytes4(keccak256('tokensOfOwner(address)')) ^\r\n        bytes4(keccak256('tokenMetadata(uint256,string)'));\r\n\r\n\r\n    string public metaBaseUrl = \"https://pixelcoins.io/meta/\";\r\n\r\n\r\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\r\n    ///  ERC-165 (obviously!) and ERC-721.\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\r\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\r\n    }\r\n\r\n    /// @notice Returns the number ofd Pixels owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @dev Required for ERC-721 compliance\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    /// @notice Transfers a Pixel to another address. If transferring to a smart\r\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\r\n    ///  PixelCoins specifically) or your Pixel may be lost forever. Seriously.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the Pixel to transfer.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any pixel (except very briefly\r\n        // after a gen0 cat is created and before it goes on auction).\r\n        require(_to != address(this));\r\n\r\n        // You can only send your own pixel.\r\n        require(_owns(msg.sender, _tokenId));\r\n        // address is not currently managed by the contract (it is in an auction)\r\n        require(pixelIndexToApproved[_tokenId] != address(this));\r\n\r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Grant another address the right to transfer a specific pixel via\r\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the pixel that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approve(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n    {\r\n        // Only an owner can grant transfer approval.\r\n        require(_owns(msg.sender, _tokenId));\r\n        // address is not currently managed by the contract (it is in an auction)\r\n        require(pixelIndexToApproved[_tokenId] != address(this));\r\n\r\n        // Register the approval (replacing any previous approval).\r\n        pixelIndexToApproved[_tokenId] = _to;\r\n\r\n        // Emit approval event.\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Transfer a Pixel owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the pixel to be transfered.\r\n    /// @param _to The address that should take ownership of the Pixel. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the Pixel to be transferred.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own anyd Pixels (except very briefly\r\n        // after a gen0 cat is created and before it goes on auction).\r\n        require(_to != address(this));\r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n\r\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Returns the total number of pixels currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint) {\r\n        return WIDTH * HEIGHT;\r\n    }\r\n\r\n    /// @notice Returns the address currently assigned ownership of a given Pixel.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (address owner)\r\n    {\r\n        owner = pixelIndexToOwner[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n\r\n    /// @notice Returns the addresses currently assigned ownership of the given pixel area.\r\n    function ownersOfArea(uint256 x, uint256 y, uint256 x2, uint256 y2) external view returns (address[] result) {\r\n        require(x2 > x && y2 > y);\r\n        require(x2 <= WIDTH && y2 <= HEIGHT);\r\n        result = new address[]((y2 - y) * (x2 - x));\r\n\r\n        uint256 r = 0;\r\n        for (uint256 i = y; i < y2; i++) {\r\n            uint256 tokenId = i * WIDTH;\r\n            for (uint256 j = x; j < x2; j++) {\r\n                result[r] = pixelIndexToOwner[tokenId + j];\r\n                r++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Returns a list of all Pixel IDs assigned to an address.\r\n    /// @param _owner The owner whosed Pixels we are interested in.\r\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n    ///  expensive (it walks the entire Pixel array looking for pixels belonging to owner),\r\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n    ///  not contract-to-contract calls.\r\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            // Return an empty array\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalPixels = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            // We count on the fact that all pixels have IDs starting at 0 and increasing\r\n            // sequentially up to the totalCat count.\r\n            uint256 pixelId;\r\n\r\n            for (pixelId = 0; pixelId <= totalPixels; pixelId++) {\r\n                if (pixelIndexToOwner[pixelId] == _owner) {\r\n                    result[resultIndex] = pixelId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    // Taken from https://ethereum.stackexchange.com/a/10929\r\n    function uintToString(uint v) constant returns (string str) {\r\n        uint maxlength = 100;\r\n        bytes memory reversed = new bytes(maxlength);\r\n        uint i = 0;\r\n        while (v != 0) {\r\n            uint remainder = v % 10;\r\n            v = v / 10;\r\n            reversed[i++] = byte(48 + remainder);\r\n        }\r\n        bytes memory s = new bytes(i);\r\n        for (uint j = 0; j < i; j++) {\r\n            s[j] = reversed[i - 1 - j];\r\n        }\r\n        str = string(s);\r\n    }\r\n\r\n    // Taken from https://ethereum.stackexchange.com/a/10929\r\n    function appendUintToString(string inStr, uint v) constant returns (string str) {\r\n        uint maxlength = 100;\r\n        bytes memory reversed = new bytes(maxlength);\r\n        uint i = 0;\r\n        while (v != 0) {\r\n            uint remainder = v % 10;\r\n            v = v / 10;\r\n            reversed[i++] = byte(48 + remainder);\r\n        }\r\n        bytes memory inStrb = bytes(inStr);\r\n        bytes memory s = new bytes(inStrb.length + i);\r\n        uint j;\r\n        for (j = 0; j < inStrb.length; j++) {\r\n            s[j] = inStrb[j];\r\n        }\r\n        for (j = 0; j < i; j++) {\r\n            s[j + inStrb.length] = reversed[i - 1 - j];\r\n        }\r\n        str = string(s);\r\n    }\r\n\r\n    function setMetaBaseUrl(string _metaBaseUrl) external onlyAuthority {\r\n        metaBaseUrl = _metaBaseUrl;\r\n    }\r\n\r\n    /// @notice Returns a URI pointing to a metadata package for this token conforming to\r\n    ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)\r\n    /// @param _tokenId The ID number of the Pixel whose metadata should be returned.\r\n    function tokenMetadata(uint256 _tokenId) external view returns (string infoUrl) {\r\n        return appendUintToString(metaBaseUrl, _tokenId);\r\n    }\r\n}\r\n\r\ncontract PixelPainting is PixelOwnership {\r\n\r\n    event Paint(uint256 tokenId, uint32 color);\r\n\r\n    // Sets the color of an individual pixel\r\n    function setPixelColor(uint256 _tokenId, uint32 _color) external {\r\n        // check that the token id is in the range\r\n        require(_tokenId < HEIGHT * WIDTH);\r\n        // check that the sender is owner of the pixel\r\n        require(_owns(msg.sender, _tokenId));\r\n        colors[_tokenId] = _color;\r\n    }\r\n\r\n    // Sets the color of the pixels in an area, left to right and then top to bottom\r\n    function setPixelAreaColor(uint256 x, uint256 y, uint256 x2, uint256 y2, uint32[] _colors) external {\r\n        require(x2 > x && y2 > y);\r\n        require(x2 <= WIDTH && y2 <= HEIGHT);\r\n        require(_colors.length == (y2 - y) * (x2 - x));\r\n        uint256 r = 0;\r\n        for (uint256 i = y; i < y2; i++) {\r\n            uint256 tokenId = i * WIDTH;\r\n            for (uint256 j = x; j < x2; j++) {\r\n                if (_owns(msg.sender, tokenId + j)) {\r\n                    uint32 color = _colors[r];\r\n                    colors[tokenId + j] = color;\r\n                    Paint(tokenId + j, color);\r\n                }\r\n                r++;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Returns the color of a given pixel\r\n    function getPixelColor(uint256 _tokenId) external view returns (uint32 color) {\r\n        require(_tokenId < HEIGHT * WIDTH);\r\n        color = colors[_tokenId];\r\n    }\r\n\r\n    // Returns the colors of the pixels in an area, left to right and then top to bottom\r\n    function getPixelAreaColor(uint256 x, uint256 y, uint256 x2, uint256 y2) external view returns (uint32[] result) {\r\n        require(x2 > x && y2 > y);\r\n        require(x2 <= WIDTH && y2 <= HEIGHT);\r\n        result = new uint32[]((y2 - y) * (x2 - x));\r\n        uint256 r = 0;\r\n        for (uint256 i = y; i < y2; i++) {\r\n            uint256 tokenId = i * WIDTH;\r\n            for (uint256 j = x; j < x2; j++) {\r\n                result[r] = colors[tokenId + j];\r\n                r++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/// @title all functions for buying empty pixels\r\ncontract PixelMinting is PixelPainting {\r\n\r\n    uint public pixelPrice = 3030 szabo;\r\n\r\n    // Set the price for a pixel\r\n    function setNewPixelPrice(uint _pixelPrice) external onlyAuthority {\r\n        pixelPrice = _pixelPrice;\r\n    }\r\n    \r\n    // buy en empty pixel\r\n    function buyEmptyPixel(uint256 _tokenId) external payable {\r\n        require(msg.value == pixelPrice);\r\n        require(_tokenId < HEIGHT * WIDTH);\r\n        require(pixelIndexToOwner[_tokenId] == address(0));\r\n        // increase authority balance\r\n        authorityBalance += msg.value;\r\n        // This will assign ownership, and also emit the Transfer event as\r\n        // per ERC721 draft\r\n        _transfer(0, msg.sender, _tokenId);\r\n    }\r\n\r\n    // buy an area of pixels, left to right, top to bottom\r\n    function buyEmptyPixelArea(uint256 x, uint256 y, uint256 x2, uint256 y2) external payable {\r\n        require(x2 > x && y2 > y);\r\n        require(x2 <= WIDTH && y2 <= HEIGHT);\r\n        require(msg.value == pixelPrice * (x2-x) * (y2-y));\r\n        \r\n        uint256 i;\r\n        uint256 tokenId;\r\n        uint256 j;\r\n        // check that all pixels to buy are available\r\n        for (i = y; i < y2; i++) {\r\n            tokenId = i * WIDTH;\r\n            for (j = x; j < x2; j++) {\r\n                require(pixelIndexToOwner[tokenId + j] == address(0));\r\n            }\r\n        }\r\n\r\n        authorityBalance += msg.value;\r\n\r\n        // Do the actual transfer\r\n        for (i = y; i < y2; i++) {\r\n            tokenId = i * WIDTH;\r\n            for (j = x; j < x2; j++) {\r\n                _transfer(0, msg.sender, tokenId + j);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/// @title all functions for managing pixel auctions\r\ncontract PixelAuction is PixelMinting {\r\n\r\n    // Represents an auction on an NFT\r\n    struct Auction {\r\n         // Current state of the auction.\r\n        address highestBidder;\r\n        uint highestBid;\r\n        uint256 endTime;\r\n        bool live;\r\n    }\r\n\r\n    // Map from token ID to their corresponding auction.\r\n    mapping (uint256 => Auction) tokenIdToAuction;\r\n    // Allowed withdrawals of previous bids\r\n    mapping (address => uint) pendingReturns;\r\n\r\n    // Duration of an auction\r\n    uint256 public duration = 60 * 60 * 24 * 4;\r\n    // Auctions will be enabled later\r\n    bool public auctionsEnabled = false;\r\n\r\n    // Change the duration for new auctions\r\n    function setDuration(uint _duration) external onlyAuthority {\r\n        duration = _duration;\r\n    }\r\n\r\n    // Enable or disable auctions\r\n    function setAuctionsEnabled(bool _auctionsEnabled) external onlyAuthority {\r\n        auctionsEnabled = _auctionsEnabled;\r\n    }\r\n\r\n    // create a new auctions for a given pixel, only owner or authority can do this\r\n    // The authority will only do this if pixels are misused or lost\r\n    function createAuction(\r\n        uint256 _tokenId\r\n    )\r\n        external payable\r\n    {\r\n        // only authority or owner can start auction\r\n        require(auctionsEnabled);\r\n        require(_owns(msg.sender, _tokenId) || msg.sender == authorityAddress);\r\n        // No auction is currently running\r\n        require(!tokenIdToAuction[_tokenId].live);\r\n\r\n        uint startPrice = pixelPrice;\r\n        if (msg.sender == authorityAddress) {\r\n            startPrice = 0;\r\n        }\r\n\r\n        require(msg.value == startPrice);\r\n        // this prevents transfers during the auction\r\n        pixelIndexToApproved[_tokenId] = address(this);\r\n\r\n        tokenIdToAuction[_tokenId] = Auction(\r\n            msg.sender,\r\n            startPrice,\r\n            block.timestamp + duration,\r\n            true\r\n        );\r\n        AuctionStarted(_tokenId);\r\n    }\r\n\r\n    // bid for an pixel auction\r\n    function bid(uint256 _tokenId) external payable {\r\n        // No arguments are necessary, all\r\n        // information is already part of\r\n        // the transaction. The keyword payable\r\n        // is required for the function to\r\n        // be able to receive Ether.\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n\r\n        // Revert the call if the bidding\r\n        // period is over.\r\n        require(auction.live);\r\n        require(auction.endTime > block.timestamp);\r\n\r\n        // If the bid is not higher, send the\r\n        // money back.\r\n        require(msg.value > auction.highestBid);\r\n\r\n        if (auction.highestBidder != 0) {\r\n            // Sending back the money by simply using\r\n            // highestBidder.send(highestBid) is a security risk\r\n            // because it could execute an untrusted contract.\r\n            // It is always safer to let the recipients\r\n            // withdraw their money themselves.\r\n            pendingReturns[auction.highestBidder] += auction.highestBid;\r\n        }\r\n        \r\n        auction.highestBidder = msg.sender;\r\n        auction.highestBid = msg.value;\r\n\r\n        HighestBidIncreased(_tokenId, msg.sender, msg.value);\r\n    }\r\n\r\n    /// Withdraw a bid that was overbid.\r\n    function withdraw() external returns (bool) {\r\n        uint amount = pendingReturns[msg.sender];\r\n        if (amount > 0) {\r\n            // It is important to set this to zero because the recipient\r\n            // can call this function again as part of the receiving call\r\n            // before `send` returns.\r\n            pendingReturns[msg.sender] = 0;\r\n\r\n            if (!msg.sender.send(amount)) {\r\n                // No need to call throw here, just reset the amount owing\r\n                pendingReturns[msg.sender] = amount;\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // /// End the auction and send the highest bid\r\n    // /// to the beneficiary.\r\n    function endAuction(uint256 _tokenId) external {\r\n        // It is a good guideline to structure functions that interact\r\n        // with other contracts (i.e. they call functions or send Ether)\r\n        // into three phases:\r\n        // 1. checking conditions\r\n        // 2. performing actions (potentially changing conditions)\r\n        // 3. interacting with other contracts\r\n        // If these phases are mixed up, the other contract could call\r\n        // back into the current contract and modify the state or cause\r\n        // effects (ether payout) to be performed multiple times.\r\n        // If functions called internally include interaction with external\r\n        // contracts, they also have to be considered interaction with\r\n        // external contracts.\r\n\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n\r\n        // 1. Conditions\r\n        require(auction.endTime < block.timestamp);\r\n        require(auction.live); // this function has already been called\r\n\r\n        // 2. Effects\r\n        auction.live = false;\r\n        AuctionEnded(_tokenId, auction.highestBidder, auction.highestBid);\r\n\r\n        // 3. Interaction\r\n        address owner = pixelIndexToOwner[_tokenId];\r\n        // transfer money without \r\n        uint amount = auction.highestBid * 9 / 10;\r\n        pendingReturns[owner] += amount;\r\n        authorityBalance += (auction.highestBid - amount);\r\n        // transfer token\r\n        _transfer(owner, auction.highestBidder, _tokenId);\r\n\r\n       \r\n    }\r\n\r\n    // // Events that will be fired on changes.\r\n    event AuctionStarted(uint256 _tokenId);\r\n    event HighestBidIncreased(uint256 _tokenId, address bidder, uint amount);\r\n    event AuctionEnded(uint256 _tokenId, address winner, uint amount);\r\n\r\n\r\n    /// @dev Returns auction info for an NFT on auction.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function getAuction(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns\r\n    (\r\n        address highestBidder,\r\n        uint highestBid,\r\n        uint endTime,\r\n        bool live\r\n    ) {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        return (\r\n            auction.highestBidder,\r\n            auction.highestBid,\r\n            auction.endTime,\r\n            auction.live\r\n        );\r\n    }\r\n\r\n    /// @dev Returns the current price of an auction.\r\n    /// @param _tokenId - ID of the token price we are checking.\r\n    function getHighestBid(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        return auction.highestBid;\r\n    }\r\n}\r\n\r\n\r\n/// @title PixelCore: Pixels in the blockchain\r\n/// @author Oliver Schneider <info@pixelcoins.io> (https://pixelcoins.io), based on Axiom Zen (https://www.axiomzen.co)\r\n/// @dev The main PixelCoins contract\r\ncontract PixelCore is PixelAuction {\r\n\r\n    // Set in case the core contract is broken and an upgrade is required\r\n    address public newContractAddress;\r\n\r\n    /// @notice Creates the main PixelCore smart contract instance.\r\n    function PixelCore() public {\r\n        // the creator of the contract is the initial authority\r\n        authorityAddress = msg.sender;\r\n    }\r\n\r\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\r\n    ///  breaking bug. This method does nothing but keep track of the new contract and\r\n    ///  emit a message indicating that the new address is set. It's up to clients of this\r\n    ///  contract to update to the new contract address in that case. (This contract will\r\n    ///  be paused indefinitely if such an upgrade takes place.)\r\n    /// @param _v2Address new address\r\n    function setNewAddress(address _v2Address) external onlyAuthority {\r\n        newContractAddress = _v2Address;\r\n        ContractUpgrade(_v2Address);\r\n    }\r\n\r\n    // @dev Allows the authority to capture the balance available to the contract.\r\n    function withdrawBalance() external onlyAuthority returns (bool) {\r\n        uint amount = authorityBalance;\r\n        if (amount > 0) {\r\n            authorityBalance = 0;\r\n            if (!authorityAddress.send(amount)) {\r\n                authorityBalance = amount;\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pixelIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyEmptyPixel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"x2\",\"type\":\"uint256\"},{\"name\":\"y2\",\"type\":\"uint256\"}],\"name\":\"getPixelAreaColor\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorityBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_color\",\"type\":\"uint32\"}],\"name\":\"setPixelColor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_metaBaseUrl\",\"type\":\"string\"}],\"name\":\"setMetaBaseUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionsEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"infoUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HEIGHT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"name\":\"highestBidder\",\"type\":\"address\"},{\"name\":\"highestBid\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"live\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPixelColor\",\"outputs\":[{\"name\":\"color\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getHighestBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"metaBaseUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"endAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"inStr\",\"type\":\"string\"},{\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"appendUintToString\",\"outputs\":[{\"name\":\"str\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"x2\",\"type\":\"uint256\"},{\"name\":\"y2\",\"type\":\"uint256\"}],\"name\":\"buyEmptyPixelArea\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WIDTH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pixelIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auctionsEnabled\",\"type\":\"bool\"}],\"name\":\"setAuctionsEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"x2\",\"type\":\"uint256\"},{\"name\":\"y2\",\"type\":\"uint256\"}],\"name\":\"ownersOfArea\",\"outputs\":[{\"name\":\"result\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"uintToString\",\"outputs\":[{\"name\":\"str\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"},{\"name\":\"y\",\"type\":\"uint256\"},{\"name\":\"x2\",\"type\":\"uint256\"},{\"name\":\"y2\",\"type\":\"uint256\"},{\"name\":\"_colors\",\"type\":\"uint32[]\"}],\"name\":\"setPixelAreaColor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pixelPrice\",\"type\":\"uint256\"}],\"name\":\"setNewPixelPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pixelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HighestBidIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"color\",\"type\":\"uint32\"}],\"name\":\"Paint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]","ContractName":"PixelCore","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e483024460354bfc8301b56e09eadecdf06b96db48c7e4cfa515484e1f62d148"}]}