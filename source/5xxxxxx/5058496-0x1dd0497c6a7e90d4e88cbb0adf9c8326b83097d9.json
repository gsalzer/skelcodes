{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract WEAToken {\r\n    using SetLibrary for SetLibrary.Set;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 0;\r\n\r\n    uint256 public totalSupply;\r\n\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n    SetLibrary.Set private allOwners;\r\n    function amountOfOwners() public view returns (uint256)\r\n    {\r\n        return allOwners.size();\r\n    }\r\n    function ownerAtIndex(uint256 _index) public view returns (address)\r\n    {\r\n        return address(allOwners.values[_index]);\r\n    }\r\n    function getAllOwners() public view returns (uint256[])\r\n    {\r\n        return allOwners.values;\r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    function WEAToken() public {\r\n        totalSupply = 18000 * 10 ** uint256(decimals);\r\n        balanceOf[msg.sender] = totalSupply;\r\n        Transfer(0x0, msg.sender, totalSupply);\r\n        allOwners.add(msg.sender);\r\n        name = \"Weaste Coin\";\r\n        symbol = \"WEA\";\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n        \r\n        // Update the owner tracking\r\n        if (balanceOf[_from] == 0)\r\n        {\r\n            allOwners.remove(_from);\r\n        }\r\n        if (_value > 0)\r\n        {\r\n            allOwners.add(_to);\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n     \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     \r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n     \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n     \r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   \r\n        balanceOf[msg.sender] -= _value;            \r\n        totalSupply -= _value;                      \r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n     \r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                \r\n        require(_value <= allowance[_from][msg.sender]);    \r\n        balanceOf[_from] -= _value;                         \r\n        allowance[_from][msg.sender] -= _value;             \r\n        totalSupply -= _value;                              \r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n/*\r\n * Written by Jesse Busman (info@jesbus.com) on 2017-11-30.\r\n * This software is provided as-is without warranty of any kind, express or implied.\r\n * This software is provided without any limitation to use, copy modify or distribute.\r\n * The user takes sole and complete responsibility for the consequences of this software's use.\r\n * Github repository: https://github.com/JesseBusman/SoliditySet\r\n * Please note that this container does not preserve the order of its contents!\r\n */\r\n\r\npragma solidity ^0.4.18;\r\n\r\nlibrary SetLibrary\r\n{\r\n    struct ArrayIndexAndExistsFlag\r\n    {\r\n        uint256 index;\r\n        bool exists;\r\n    }\r\n    struct Set\r\n    {\r\n        mapping(uint256 => ArrayIndexAndExistsFlag) valuesMapping;\r\n        uint256[] values;\r\n    }\r\n    function add(Set storage self, uint256 value) public returns (bool added)\r\n    {\r\n        // If the value is already in the set, we don't need to do anything\r\n        if (self.valuesMapping[value].exists == true) return false;\r\n        \r\n        // Remember that the value is in the set, and remember the value's array index\r\n        self.valuesMapping[value] = ArrayIndexAndExistsFlag({index: self.values.length, exists: true});\r\n        \r\n        // Add the value to the array of unique values\r\n        self.values.push(value);\r\n        \r\n        return true;\r\n    }\r\n    function contains(Set storage self, uint256 value) public view returns (bool contained)\r\n    {\r\n        return self.valuesMapping[value].exists;\r\n    }\r\n    function remove(Set storage self, uint256 value) public returns (bool removed)\r\n    {\r\n        // If the value is not in the set, we don't need to do anything\r\n        if (self.valuesMapping[value].exists == false) return false;\r\n        \r\n        // Remember that the value is not in the set\r\n        self.valuesMapping[value].exists = false;\r\n        \r\n        // Now we need to remove the value from the array. To prevent leaking\r\n        // storage space, we move the last value in the array into the spot that\r\n        // contains the element we're removing.\r\n        if (self.valuesMapping[value].index < self.values.length-1)\r\n        {\r\n            uint256 valueToMove = self.values[self.values.length-1];\r\n            uint256 indexToMoveItTo = self.valuesMapping[value].index;\r\n            self.values[indexToMoveItTo] = valueToMove;\r\n            self.valuesMapping[valueToMove].index = indexToMoveItTo;\r\n        }\r\n        \r\n        // Now we remove the last element from the array, because we just duplicated it.\r\n        // We don't free the storage allocation of the removed last element,\r\n        // because it will most likely be used again by a call to add().\r\n        // De-allocating and re-allocating storage space costs more gas than\r\n        // just keeping it allocated and unused.\r\n        \r\n        // Uncomment this line to save gas if your use case does not call add() after remove():\r\n        // delete self.values[self.values.length-1];\r\n        self.values.length--;\r\n        \r\n        // We do free the storage allocation in the mapping, because it is\r\n        // less likely that the exact same value will added again.\r\n        delete self.valuesMapping[value];\r\n        \r\n        return true;\r\n    }\r\n    function size(Set storage self) public view returns (uint256 amountOfValues)\r\n    {\r\n        return self.values.length;\r\n    }\r\n    \r\n    // Also accept address and bytes32 types, so the user doesn't have to cast.\r\n    function add(Set storage self, address value) public returns (bool added) { return add(self, uint256(value)); }\r\n    function add(Set storage self, bytes32 value) public returns (bool added) { return add(self, uint256(value)); }\r\n    function contains(Set storage self, address value) public view returns (bool contained) { return contains(self, uint256(value)); }\r\n    function contains(Set storage self, bytes32 value) public view returns (bool contained) { return contains(self, uint256(value)); }\r\n    function remove(Set storage self, address value) public returns (bool removed) { return remove(self, uint256(value)); }\r\n    function remove(Set storage self, bytes32 value) public returns (bool removed) { return remove(self, uint256(value)); }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"ownerAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"WEAToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"SetLibrary:56aac9c11e780e09def5a1fa652fd6f5b323d9f1","SwarmSource":"bzzr://85e7fe17697dd45c4b863eb3500b53d088aa58a31a6b0b2e743c84156338653e"}]}