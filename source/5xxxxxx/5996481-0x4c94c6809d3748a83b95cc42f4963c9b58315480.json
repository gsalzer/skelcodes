{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract ArtStamp { \r\n    \r\n    /************************** */\r\n    /*        STORAGE           */\r\n    /************************** */\r\n    struct Piece {\r\n        string metadata;\r\n        string title;\r\n        bytes32 proof;\r\n        address owner;\r\n        //this currently does nothing, but i believe it will make it much easier if/when we make a future \r\n        //version of this app in which buying and selling pieces with ethereum is allowed\r\n        bool forSale; \r\n        //witnesses have to sign off on any transfer or sale, but have no rights to initiate them\r\n        //typically the witness will be the artist or anyone with rights to the pieces\r\n        //as of right now witnesses can only be added when a piece is created and cannot be altered\r\n        address witness;\r\n    }\r\n\r\n    //structure to keep track of a party to a contract and whether they have signed or not,\r\n    //  and how much ether they have contributed\r\n    struct Signature {\r\n        address signee;\r\n        bool hasSigned;\r\n    }\r\n\r\n    //structure to represent escrow situation and keep track of all parties to contract\r\n    struct Escrow {\r\n        Signature sender;\r\n        Signature recipient;\r\n        Signature witness;\r\n        //block number when escrow is initiated, recorded so that escrow can timeout\r\n        uint blockNum;\r\n    }\r\n    \r\n    //contains all pieces on the market\r\n    mapping (uint => Piece) pieces;\r\n\r\n    //number of pieces\r\n    uint piecesLength;\r\n\r\n    //list of all escrow situations currently in progress\r\n    mapping (uint => Escrow) escrowLedger;\r\n\r\n    //this is used to ensure that no piece can be uploaded twice. \r\n    //dataRecord[(hash of a piece goes here)] will be true if that piece has already been uploaded\r\n    mapping (bytes32 => bool) dataRecord;\r\n\r\n    /************************** */\r\n    /*         LOGIC            */\r\n    /************************** */\r\n\r\n\r\n    //\r\n\r\n\r\n\r\n    /****** PUBLIC READ */\r\n\r\n    //get data relating to escrow\r\n    function getEscrowData(uint i) view public returns (address, bool, address, bool, address, bool, uint){\r\n        return (escrowLedger[i].sender.signee, escrowLedger[i].sender.hasSigned, \r\n        escrowLedger[i].recipient.signee, escrowLedger[i].recipient.hasSigned, \r\n        escrowLedger[i].witness.signee, escrowLedger[i].witness.hasSigned, \r\n        escrowLedger[i].blockNum);\r\n    }\r\n\r\n    //returns total number of pieces\r\n    function getNumPieces() view public returns (uint) {\r\n        return piecesLength;\r\n    }\r\n\r\n    function getOwner(uint id) view public returns (address) {\r\n        return pieces[id].owner;\r\n    }\r\n\r\n    function getPiece(uint id) view public returns (string, string, bytes32, bool, address, address) {\r\n        Piece memory piece = pieces[id];\r\n        return (piece.metadata, piece.title, piece.proof, piece.forSale, piece.owner, piece.witness);\r\n    }\r\n    \r\n    function hashExists(bytes32 proof) view public returns (bool) {\r\n        return dataRecord[proof];\r\n    }\r\n\r\n    function hasOwnership(uint id) view public returns (bool)\r\n    {\r\n        return pieces[id].owner == msg.sender;\r\n    }\r\n\r\n\r\n    //\r\n\r\n\r\n\r\n\r\n    /****** PUBLIC WRITE */\r\n\r\n    function addPieceAndHash(string _metadata, string _title, string data, address witness) public {\r\n        bytes32 _proof = keccak256(abi.encodePacked(data));\r\n        //check for hash collisions to see if the piece has already been uploaded\r\n        addPiece(_metadata,_title,_proof,witness);\r\n    }\r\n    \r\n    function addPiece(string _metadata, string _title, bytes32 _proof, address witness) public {\r\n        bool exists = hashExists(_proof);\r\n        require(!exists, \"This piece has already been uploaded\");\r\n        dataRecord[_proof] = true;\r\n        pieces[piecesLength] = Piece(_metadata,  _title, _proof, msg.sender, false, witness);\r\n        piecesLength++;\r\n    }\r\n\r\n    //edit both title and metadata with one transaction, will make things easier on the front end\r\n    function editPieceData(uint id, string newTitle, string newMetadata) public {\r\n        bool ownership = hasOwnership(id);\r\n        require(ownership, \"You don't own this piece\");\r\n        pieces[id].metadata = newMetadata;\r\n        pieces[id].title = newTitle;\r\n    }\r\n\r\n    function editMetadata(uint id, string newMetadata) public {\r\n        bool ownership = hasOwnership(id);\r\n        require(ownership, \"You don't own this piece\");\r\n        pieces[id].metadata = newMetadata;\r\n    }\r\n\r\n    function editTitle(uint id, string newTitle) public {\r\n        bool ownership = hasOwnership(id);\r\n        require(ownership, \"You don't own this piece\");\r\n        pieces[id].title = newTitle;\r\n    }\r\n\r\n    function escrowTransfer(uint id, address recipient) public {\r\n        bool ownership = hasOwnership(id);\r\n        require(ownership, \"You don't own this piece\");\r\n\r\n        //set owner of piece to artstamp smart contract\r\n        pieces[id].owner = address(this);\r\n\r\n        //upadte escrow ledger\r\n        escrowLedger[id] = Escrow({\r\n            sender: Signature(msg.sender,false),\r\n            recipient: Signature(recipient,false),\r\n            witness: Signature(pieces[id].witness,false),\r\n            blockNum: block.number});\r\n    }\r\n    \r\n\r\n    //100000 blocks should be about 20 days which seems reasonable\r\n    //TODO: should make it so contracts owner can change this\r\n    uint timeout = 100000; \r\n\r\n    //timeout where piece will be returned to original owner if people dont sign\r\n    function retrievePieceFromEscrow(uint id) public {\r\n        //reject transaction if piece is not in escrow \r\n        require(pieces[id].owner == address(this));\r\n\r\n        require(block.number > escrowLedger[id].blockNum + timeout);\r\n\r\n        address sender = escrowLedger[id].sender.signee;\r\n\r\n        delete escrowLedger[id];\r\n\r\n        pieces[id].owner = sender;\r\n\r\n    } \r\n\r\n    function signEscrow(uint id) public {\r\n        //reject transaction if piece is not in escrow \r\n        require(pieces[id].owner == address(this));\r\n\r\n        //reject transaction if signee isnt any of the parties involved\r\n        require(msg.sender == escrowLedger[id].sender.signee ||\r\n            msg.sender == escrowLedger[id].recipient.signee || \r\n            msg.sender == escrowLedger[id].witness.signee, \r\n            \"You don't own this piece\");\r\n\r\n        bool allHaveSigned = true;\r\n\r\n        if(msg.sender == escrowLedger[id].sender.signee){\r\n            escrowLedger[id].sender.hasSigned = true;\r\n        }  \r\n        allHaveSigned = allHaveSigned && escrowLedger[id].sender.hasSigned;\r\n        \r\n        if(msg.sender == escrowLedger[id].recipient.signee){\r\n            escrowLedger[id].recipient.hasSigned = true;\r\n        }\r\n        allHaveSigned = allHaveSigned && escrowLedger[id].recipient.hasSigned;\r\n        \r\n\r\n        if(msg.sender == escrowLedger[id].witness.signee){\r\n            escrowLedger[id].witness.hasSigned = true;\r\n        }        \r\n        \r\n        allHaveSigned = allHaveSigned && \r\n            (escrowLedger[id].witness.hasSigned || \r\n            escrowLedger[id].witness.signee == 0x0000000000000000000000000000000000000000);\r\n\r\n        //transfer the pieces\r\n        if(allHaveSigned)\r\n        {\r\n            address recipient = escrowLedger[id].recipient.signee;\r\n            delete escrowLedger[id];\r\n            pieces[id].owner = recipient;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function transferPiece(uint id, address _to) public\r\n    {\r\n        bool ownership = hasOwnership(id);\r\n        require(ownership, \"You don't own this piece\");\r\n\r\n        //check if there is a witness, if so initiate escrow\r\n        if(pieces[id].witness != 0x0000000000000000000000000000000000000000){\r\n            escrowTransfer(id, _to);\r\n            return;\r\n        }\r\n\r\n        pieces[id].owner = _to;\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"hasOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"newTitle\",\"type\":\"string\"},{\"name\":\"newMetadata\",\"type\":\"string\"}],\"name\":\"editPieceData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPiece\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_metadata\",\"type\":\"string\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"data\",\"type\":\"string\"},{\"name\":\"witness\",\"type\":\"address\"}],\"name\":\"addPieceAndHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"signEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumPieces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"newMetadata\",\"type\":\"string\"}],\"name\":\"editMetadata\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_metadata\",\"type\":\"string\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_proof\",\"type\":\"bytes32\"},{\"name\":\"witness\",\"type\":\"address\"}],\"name\":\"addPiece\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getEscrowData\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proof\",\"type\":\"bytes32\"}],\"name\":\"hashExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"escrowTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferPiece\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"newTitle\",\"type\":\"string\"}],\"name\":\"editTitle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"retrievePieceFromEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ArtStamp","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3d2f066b0855b948aa714c43f3d86fa380c1d896d28c14bfd54d6a984ad7ebb3"}]}