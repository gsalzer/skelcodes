{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/// @title SafeMath contract - Math operations with safety checks.\r\n/// @author OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\ncontract SafeMath\r\n{\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint c = a ** b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable\r\n{\r\n    event NewOwner(address old, address current);\r\n    event NewPotentialOwner(address old, address potential);\r\n\r\n    address public owner = msg.sender;\r\n    address public potentialOwner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPotentialOwner {\r\n        require(msg.sender == potentialOwner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _new) public onlyOwner {\r\n        emit NewPotentialOwner(owner, _new);\r\n        potentialOwner = _new;\r\n    }\r\n\r\n    function confirmOwnership() public onlyPotentialOwner {\r\n        emit NewOwner(owner, potentialOwner);\r\n        owner = potentialOwner;\r\n        potentialOwner = 0;\r\n    }\r\n}\r\n\r\n/// @title Abstract Token, ERC20 token interface\r\ncontract ERC20I\r\n{\r\n    function name() constant public returns (string);\r\n    function symbol() constant public returns (string);\r\n    function decimals() constant public returns (uint8);\r\n    function totalSupply() constant public returns (uint256);\r\n    function balanceOf(address owner) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/// Full complete implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 is ERC20I, SafeMath\r\n{\r\n    //using SafeMath for uint;\r\n\r\n    string  public name;\r\n    string  public symbol;\r\n    uint8   public decimals;\r\n    uint256 public totalSupply;\r\n    string  public version;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    function name() public view returns (string) {\r\n        return name;\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    function symbol() public view returns (string) {\r\n        return symbol;\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    function decimals() public view returns (uint8) {\r\n        return decimals;\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n      return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n      require(_to != address(0x0));\r\n      require(_value <= balances[msg.sender]);\r\n\r\n      balances[msg.sender] = sub(balances[msg.sender], _value);\r\n      balances[_to] = add(balances[_to], _value);\r\n      emit Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n      require(_to != address(0));\r\n      require(_value <= balances[_from]);\r\n      require(_value <= allowed[_from][msg.sender]);\r\n\r\n      balances[_from] = sub(balances[_from], _value);\r\n      balances[_to] = add(balances[_to], _value);\r\n      allowed[_from][msg.sender] = sub( allowed[_from][msg.sender], _value);\r\n      emit Transfer(_from, _to, _value);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n      allowed[msg.sender][_spender] = _value;\r\n      emit Approval(msg.sender, _spender, _value);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n      allowed[msg.sender][_spender] = add(allowed[msg.sender][_spender], _addedValue);\r\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n      uint oldValue = allowed[msg.sender][_spender];\r\n      if (_subtractedValue > oldValue) {\r\n        allowed[msg.sender][_spender] = 0;\r\n      } else {\r\n        allowed[msg.sender][_spender] = sub(oldValue, _subtractedValue);\r\n      }\r\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n\r\n    event EPause(); //address owner, string event\r\n    event EUnpause();\r\n\r\n    bool public paused = true;\r\n\r\n    modifier whenNotPaused()\r\n    {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner\r\n    {\r\n        paused = true;\r\n        emit EPause();\r\n    }\r\n\r\n    function unpause() public onlyOwner\r\n    {\r\n        paused = false;\r\n        emit EUnpause();\r\n    }\r\n}\r\n\r\n/**\r\n   @title ERC827 interface, an extension of ERC20 token standard\r\n\r\n   Interface of a ERC827 token, following the ERC20 standard with extra\r\n   methods to transfer value and data and execute calls in transfers and\r\n   approvals.\r\n */\r\n\r\n\r\ncontract MintableToken is ERC20, Ownable\r\n{\r\n    uint256 maxSupply = 1e25; //tokens limit\r\n\r\n    // triggered when the total supply is increased\r\n    event Issuance(uint256 _amount);\r\n    // triggered when the total supply is decreased\r\n    event Destruction(uint256 _amount);\r\n\r\n    /**\r\n        @dev increases the token supply and sends the new tokens to an account\r\n        can only be called by the contract owner\r\n        @param _to         account to receive the new amount\r\n        @param _amount     amount to increase the supply by\r\n    */\r\n    function issue(address _to, uint256 _amount) public onlyOwner {\r\n        require(maxSupply >= totalSupply + _amount);\r\n        totalSupply +=  _amount;\r\n        balances[_to] += _amount;\r\n        emit Issuance(_amount);\r\n        emit Transfer(this, _to, _amount);\r\n    }\r\n\r\n    /**\r\n        @dev removes tokens from an account and decreases the token supply\r\n        can only be called by the contract owner\r\n        (if robbers detected, if will be consensus about token amount)\r\n        @param _from       account to remove the amount from\r\n        @param _amount     amount to decrease the supply by\r\n    */\r\n    function destroy(address _from, uint256 _amount) public onlyOwner {\r\n        balances[_from] -= _amount;\r\n        totalSupply -= _amount;\r\n        emit Transfer(_from, this, _amount);\r\n        emit Destruction(_amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is MintableToken, Pausable {\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue)\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue)\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n}\r\n\r\ncontract Workcoin is PausableToken {\r\n\r\n    address internal seller;\r\n\r\n    /**\r\n        @dev modified pausable/trustee seller contract\r\n    */\r\n    function transfer(address _to, uint256 _value) public\r\n        returns (bool)\r\n    {\r\n        if(paused) {\r\n            require(seller == msg.sender);\r\n            return super.transfer(_to, _value);\r\n        } else {\r\n            return super.transfer(_to, _value);\r\n        }\r\n    }\r\n\r\n    function sendToken(address _to, uint256 _value) public onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0x0));\r\n        require(_value <= balances[this]);\r\n        balances[this] = sub(balances[this], _value);\r\n        balances[_to] = add(balances[_to], _value);\r\n        emit Transfer(this, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function setSeller(address _seller) public onlyOwner {\r\n        seller = _seller;\r\n    }\r\n\r\n    /** @dev transfer ethereum from contract */\r\n    function transferEther(address _to, uint256 _value)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        _to.transfer(_value); // CHECK THIS\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev owner can transfer out any accidentally sent ERC20 tokens\r\n    */\r\n    function transferERC20Token(address tokenAddress, address to, uint256 tokens)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return ERC20(tokenAddress).transfer(to, tokens);\r\n    }\r\n\r\n    /**\r\n        @dev mass transfer\r\n        @param _holders addresses of the owners to be notified [\"address_1\", \"address_2\", ..]\r\n     */\r\n    function massTransfer(address [] _holders, uint256 [] _payments)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uint256 hl = _holders.length;\r\n        uint256 pl = _payments.length;\r\n        require(hl <= 100 && hl == pl);\r\n        for (uint256 i = 0; i < hl; i++) {\r\n            transfer(_holders[i], _payments[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        @dev tokens constructor\r\n    */\r\n    function Workcoin() public\r\n    {\r\n        name = \"Workcoin\";\r\n        symbol = \"WRR\";\r\n        decimals = 18;\r\n        version = \"1.3\";\r\n        issue(this, 1e7 * 1e18);\r\n    }\r\n\r\n    function() public payable {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_holders\",\"type\":\"address[]\"},{\"name\":\"_payments\",\"type\":\"uint256[]\"}],\"name\":\"massTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"setSeller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EUnpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Destruction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"potential\",\"type\":\"address\"}],\"name\":\"NewPotentialOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Workcoin","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e5b6d3c12fa9ca746e846c9f31400ed593b8b1f387a075dfec52ba875ce602d0"}]}