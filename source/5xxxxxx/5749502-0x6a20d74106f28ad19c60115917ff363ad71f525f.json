{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\nlibrary BWUtility {\r\n    \r\n    // -------- UTILITY FUNCTIONS ----------\r\n\r\n\r\n    // Return next higher even _multiple for _amount parameter (e.g used to round up to even finneys).\r\n    function ceil(uint _amount, uint _multiple) pure public returns (uint) {\r\n        return ((_amount + _multiple - 1) / _multiple) * _multiple;\r\n    }\r\n\r\n    // Checks if two coordinates are adjacent:\r\n    // xxx\r\n    // xox\r\n    // xxx\r\n    // All x (_x2, _xy2) are adjacent to o (_x1, _y1) in this ascii image. \r\n    // Adjacency does not wrapp around map edges so if y2 = 255 and y1 = 0 then they are not ajacent\r\n    function isAdjacent(uint8 _x1, uint8 _y1, uint8 _x2, uint8 _y2) pure public returns (bool) {\r\n        return ((_x1 == _x2 &&      (_y2 - _y1 == 1 || _y1 - _y2 == 1))) ||      // Same column\r\n               ((_y1 == _y2 &&      (_x2 - _x1 == 1 || _x1 - _x2 == 1))) ||      // Same row\r\n               ((_x2 - _x1 == 1 &&  (_y2 - _y1 == 1 || _y1 - _y2 == 1))) ||      // Right upper or lower diagonal\r\n               ((_x1 - _x2 == 1 &&  (_y2 - _y1 == 1 || _y1 - _y2 == 1)));        // Left upper or lower diagonal\r\n    }\r\n\r\n    // Converts (x, y) to tileId xy\r\n    function toTileId(uint8 _x, uint8 _y) pure public returns (uint16) {\r\n        return uint16(_x) << 8 | uint16(_y);\r\n    }\r\n\r\n    // Converts _tileId to (x, y)\r\n    function fromTileId(uint16 _tileId) pure public returns (uint8, uint8) {\r\n        uint8 y = uint8(_tileId);\r\n        uint8 x = uint8(_tileId >> 8);\r\n        return (x, y);\r\n    }\r\n    \r\n    function getBoostFromTile(address _claimer, address _attacker, address _defender, uint _blockValue) pure public returns (uint, uint) {\r\n        if (_claimer == _attacker) {\r\n            return (_blockValue, 0);\r\n        } else if (_claimer == _defender) {\r\n            return (0, _blockValue);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface ERC20I {\r\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\r\n    function balanceOf(address _holder) external view returns (uint256);\r\n}\r\n\r\n\r\ncontract BWService {\r\n    using SafeMath for uint256;\r\n    address private owner;\r\n    address private bw;\r\n    address private bwMarket;\r\n    BWData private bwData;\r\n    uint private seed = 42;\r\n    uint private WITHDRAW_FEE = 5; // 5%\r\n    uint private ATTACK_FEE = 5; // 5%\r\n    uint private ATTACK_BOOST_CAP = 300; // 300%\r\n    uint private DEFEND_BOOST_CAP = 300; // 300%\r\n    uint private ATTACK_BOOST_MULTIPLIER = 100; // 100%\r\n    uint private DEFEND_BOOST_MULTIPLIER = 100; // 100%\r\n    mapping (uint16 => address) private localGames;\r\n    \r\n    modifier isOwner {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }  \r\n\r\n    modifier isValidCaller {\r\n        if (msg.sender != bw && msg.sender != bwMarket) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    event TileClaimed(uint16 tileId, address newClaimer, uint priceInWei, uint creationTime);\r\n    event TileFortified(uint16 tileId, address claimer, uint addedValueInWei, uint priceInWei, uint fortifyTime); // Sent when a user fortifies an existing claim by bumping its value.\r\n    event TileAttackedSuccessfully(uint16 tileId, address attacker, uint attackAmount, uint totalAttackAmount, address defender, uint defendAmount, uint totalDefendAmount, uint attackRoll, uint attackTime); // Sent when a user successfully attacks a tile.    \r\n    event TileDefendedSuccessfully(uint16 tileId, address attacker, uint attackAmount, uint totalAttackAmount, address defender, uint defendAmount, uint totalDefendAmount, uint attackRoll, uint defendTime); // Sent when a user successfully defends a tile when attacked.    \r\n    event BlockValueMoved(uint16 sourceTileId, uint16 destTileId, address owner, uint movedBlockValue, uint postSourceValue, uint postDestValue, uint moveTime); // Sent when a user buys a tile from another user, by accepting a tile offer\r\n    event UserBattleValueUpdated(address userAddress, uint battleValue, bool isWithdraw);\r\n\r\n    // Constructor.\r\n    constructor(address _bwData) public {\r\n        bwData = BWData(_bwData);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Can't send funds straight to this contract. Avoid people sending by mistake.\r\n    function () payable public {\r\n        revert();\r\n    }\r\n\r\n    // OWNER-ONLY FUNCTIONS\r\n    function kill() public isOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function setValidBwCaller(address _bw) public isOwner {\r\n        bw = _bw;\r\n    }\r\n    \r\n    function setValidBwMarketCaller(address _bwMarket) public isOwner {\r\n        bwMarket = _bwMarket;\r\n    }\r\n\r\n    function setWithdrawFee(uint _feePercentage) public isOwner {\r\n        WITHDRAW_FEE = _feePercentage;\r\n    }\r\n\r\n    function setAttackFee(uint _feePercentage) public isOwner {\r\n        ATTACK_FEE = _feePercentage;\r\n    }\r\n\r\n    function setAttackBoostMultipler(uint _multiplierPercentage) public isOwner {\r\n        ATTACK_BOOST_MULTIPLIER = _multiplierPercentage;\r\n    }\r\n\r\n    function setDefendBoostMultiplier(uint _multiplierPercentage) public isOwner {\r\n        DEFEND_BOOST_MULTIPLIER = _multiplierPercentage;\r\n    }\r\n\r\n    function setAttackBoostCap(uint _capPercentage) public isOwner {\r\n        ATTACK_BOOST_CAP = _capPercentage;\r\n    }\r\n\r\n    function setDefendBoostCap(uint _capPercentage) public isOwner {\r\n        DEFEND_BOOST_CAP = _capPercentage;\r\n    }\r\n\r\n    // TILE-RELATED FUNCTIONS\r\n    // This function claims multiple previously unclaimed tiles in a single transaction.\r\n    // The value assigned to each tile is the msg.value divided by the number of tiles claimed.\r\n    // The msg.value is required to be an even multiple of the number of tiles claimed.\r\n    function storeInitialClaim(address _msgSender, uint16[] _claimedTileIds, uint _claimAmount, bool _useBattleValue) public isValidCaller {\r\n        uint tileCount = _claimedTileIds.length;\r\n        require(tileCount > 0);\r\n        require(_claimAmount >= 1 finney * tileCount); // ensure enough funds paid for all tiles\r\n        require(_claimAmount % tileCount == 0); // ensure payment is an even multiple of number of tiles claimed\r\n\r\n        uint valuePerBlockInWei = _claimAmount.div(tileCount); // Due to requires above this is guaranteed to be an even number\r\n        require(valuePerBlockInWei >= 5 finney);\r\n\r\n        if (_useBattleValue) {\r\n            subUserBattleValue(_msgSender, _claimAmount, false);  \r\n        }\r\n\r\n        addGlobalBlockValueBalance(_claimAmount);\r\n\r\n        uint16 tileId;\r\n        bool isNewTile;\r\n        for (uint16 i = 0; i < tileCount; i++) {\r\n            tileId = _claimedTileIds[i];\r\n            isNewTile = bwData.isNewTile(tileId); // Is length 0 if first time purchased\r\n            require(isNewTile); // Can only claim previously unclaimed tiles.\r\n\r\n            // Send claim event\r\n            emit TileClaimed(tileId, _msgSender, valuePerBlockInWei, block.timestamp);\r\n\r\n            // Update contract state with new tile ownership.\r\n            bwData.storeClaim(tileId, _msgSender, valuePerBlockInWei);\r\n        }\r\n    }\r\n\r\n    function fortifyClaims(address _msgSender, uint16[] _claimedTileIds, uint _fortifyAmount, bool _useBattleValue) public isValidCaller {\r\n        uint tileCount = _claimedTileIds.length;\r\n        require(tileCount > 0);\r\n\r\n        address(this).balance.add(_fortifyAmount); // prevent overflow with SafeMath\r\n        require(_fortifyAmount % tileCount == 0); // ensure payment is an even multiple of number of tiles fortified\r\n        uint addedValuePerTileInWei = _fortifyAmount.div(tileCount); // Due to requires above this is guaranteed to be an even number\r\n        require(_fortifyAmount >= 1 finney * tileCount); // ensure enough funds paid for all tiles\r\n\r\n        address claimer;\r\n        uint blockValue;\r\n        for (uint16 i = 0; i < tileCount; i++) {\r\n            (claimer, blockValue) = bwData.getTileClaimerAndBlockValue(_claimedTileIds[i]);\r\n            require(claimer != 0); // Can't do this on never-owned tiles\r\n            require(claimer == _msgSender); // Only current claimer can fortify claim\r\n\r\n            if (_useBattleValue) {\r\n                subUserBattleValue(_msgSender, addedValuePerTileInWei, false);\r\n            }\r\n            \r\n            fortifyClaim(_msgSender, _claimedTileIds[i], addedValuePerTileInWei);\r\n        }\r\n    }\r\n\r\n    function fortifyClaim(address _msgSender, uint16 _claimedTileId, uint _fortifyAmount) private {\r\n        uint blockValue;\r\n        uint sellPrice;\r\n        (blockValue, sellPrice) = bwData.getCurrentBlockValueAndSellPriceForTile(_claimedTileId);\r\n        uint updatedBlockValue = blockValue.add(_fortifyAmount);\r\n        // Send fortify event\r\n        emit TileFortified(_claimedTileId, _msgSender, _fortifyAmount, updatedBlockValue, block.timestamp);\r\n        \r\n        // Update tile value. The tile has been fortified by bumping up its value.\r\n        bwData.updateTileBlockValue(_claimedTileId, updatedBlockValue);\r\n\r\n        // Track addition to global block value\r\n        addGlobalBlockValueBalance(_fortifyAmount);\r\n    }\r\n\r\n    // Return a pseudo random number between lower and upper bounds\r\n    // given the number of previous blocks it should hash.\r\n    // Random function copied from https://github.com/axiomzen/eth-random/blob/master/contracts/Random.sol.\r\n    // Changed sha3 to keccak256, then modified.\r\n    // Changed random range from uint64 to uint (=uint256).\r\n    function random(uint _upper) private returns (uint)  {\r\n        seed = uint(keccak256(blockhash(block.number - 1), block.coinbase, block.timestamp, seed, address(0x3f5CE5FBFe3E9af3971dD833D26bA9b5C936f0bE).balance));\r\n        return seed % _upper;\r\n    }\r\n\r\n    // A user tries to claim a tile that's already owned by another user. A battle ensues.\r\n    // A random roll is done with % based on attacking vs defending amounts.\r\n    function attackTile(address _msgSender, uint16 _tileId, uint _attackAmount, bool _useBattleValue) public isValidCaller {\r\n        require(_attackAmount >= 1 finney);         // Don't allow attacking with less than one base tile price.\r\n        require(_attackAmount % 1 finney == 0);\r\n\r\n        address claimer;\r\n        uint blockValue;\r\n        (claimer, blockValue) = bwData.getTileClaimerAndBlockValue(_tileId);\r\n        \r\n        require(claimer != 0); // Can't do this on never-owned tiles\r\n        require(claimer != _msgSender); // Can't attack one's own tiles\r\n        require(claimer != owner); // Can't attack owner's tiles because it is used for raffle.\r\n\r\n        // Calculate boosted amounts for attacker and defender\r\n        // The base attack amount is sent in the by the user.\r\n        // The base defend amount is the attacked tile's current blockValue.\r\n        uint attackBoost;\r\n        uint defendBoost;\r\n        (attackBoost, defendBoost) = bwData.calculateBattleBoost(_tileId, _msgSender, claimer);\r\n\r\n        // Adjust boost to optimize game strategy\r\n        attackBoost = attackBoost.mul(ATTACK_BOOST_MULTIPLIER).div(100);\r\n        defendBoost = defendBoost.mul(DEFEND_BOOST_MULTIPLIER).div(100);\r\n        \r\n        // Cap the boost to minimize its impact (prevents whales somehow)\r\n        if (attackBoost > _attackAmount.mul(ATTACK_BOOST_CAP).div(100)) {\r\n            attackBoost = _attackAmount.mul(ATTACK_BOOST_CAP).div(100);\r\n        }\r\n        if (defendBoost > blockValue.mul(DEFEND_BOOST_CAP).div(100)) {\r\n            defendBoost = blockValue.mul(DEFEND_BOOST_CAP).div(100);\r\n        }\r\n\r\n        uint totalAttackAmount = _attackAmount.add(attackBoost);\r\n        uint totalDefendAmount = blockValue.add(defendBoost);\r\n\r\n        // Verify that attack odds are within allowed range.\r\n        require(totalAttackAmount.div(10) <= totalDefendAmount); // Disallow attacks with more than 1000% of defendAmount\r\n        require(totalAttackAmount >= totalDefendAmount.div(10)); // Disallow attacks with less than 10% of defendAmount\r\n\r\n        uint attackFeeAmount = _attackAmount.mul(ATTACK_FEE).div(100);\r\n        uint attackAmountAfterFee = _attackAmount.sub(attackFeeAmount);\r\n        \r\n        updateFeeBalance(attackFeeAmount);\r\n\r\n        // The battle considers boosts.\r\n        uint attackRoll = random(totalAttackAmount.add(totalDefendAmount)); // This is where the excitement happens!\r\n\r\n        //gas cost of attack branch is higher than denfense branch solving MSB1\r\n        if (attackRoll > totalDefendAmount) {\r\n            // Change block owner but keep same block value (attacker got battlevalue instead)\r\n            bwData.setClaimerForTile(_tileId, _msgSender);\r\n\r\n            // Tile successfully attacked!\r\n            if (_useBattleValue) {\r\n                // Withdraw followed by deposit of same amount to prevent MSB1\r\n                addUserBattleValue(_msgSender, attackAmountAfterFee); // Don't include boost here!\r\n                subUserBattleValue(_msgSender, attackAmountAfterFee, false);\r\n            } else {\r\n                addUserBattleValue(_msgSender, attackAmountAfterFee); // Don't include boost here!\r\n            }\r\n            addUserBattleValue(claimer, 0);\r\n\r\n            bwData.updateTileTimeStamp(_tileId);\r\n            // Send update event\r\n            emit TileAttackedSuccessfully(_tileId, _msgSender, attackAmountAfterFee, totalAttackAmount, claimer, blockValue, totalDefendAmount, attackRoll, block.timestamp);\r\n        } else {\r\n            bwData.setClaimerForTile(_tileId, claimer); //should be old owner\r\n            // Tile successfully defended!\r\n            if (_useBattleValue) {\r\n                subUserBattleValue(_msgSender, attackAmountAfterFee, false); // Don't include boost here!\r\n            }\r\n            addUserBattleValue(claimer, attackAmountAfterFee); // Don't include boost here!\r\n            \r\n            // Send update event\r\n            emit TileDefendedSuccessfully(_tileId, _msgSender, attackAmountAfterFee, totalAttackAmount, claimer, blockValue, totalDefendAmount, attackRoll, block.timestamp);\r\n        }\r\n    }\r\n\r\n    function updateFeeBalance(uint attackFeeAmount) private {\r\n        uint feeBalance = bwData.getFeeBalance();\r\n        feeBalance = feeBalance.add(attackFeeAmount);\r\n        bwData.setFeeBalance(feeBalance);\r\n    }\r\n\r\n    function moveBlockValue(address _msgSender, uint8 _xSource, uint8 _ySource, uint8 _xDest, uint8 _yDest, uint _moveAmount) public isValidCaller {\r\n        uint16 sourceTileId = BWUtility.toTileId(_xSource, _ySource);\r\n        uint16 destTileId = BWUtility.toTileId(_xDest, _yDest);\r\n\r\n        address sourceTileClaimer;\r\n        address destTileClaimer;\r\n        uint sourceTileBlockValue;\r\n        uint destTileBlockValue;\r\n        (sourceTileClaimer, sourceTileBlockValue) = bwData.getTileClaimerAndBlockValue(sourceTileId);\r\n        (destTileClaimer, destTileBlockValue) = bwData.getTileClaimerAndBlockValue(destTileId);\r\n\r\n        uint newBlockValue = sourceTileBlockValue.sub(_moveAmount);\r\n        // Must transfer the entire block value or leave at least 5\r\n        require(newBlockValue == 0 || newBlockValue >= 5 finney);\r\n\r\n        require(sourceTileClaimer == _msgSender);\r\n        require(destTileClaimer == _msgSender);\r\n        require(_moveAmount >= 1 finney); // Can't be less\r\n        require(_moveAmount % 1 finney == 0); // Move amount must be in multiples of 1 finney\r\n        // require(sourceTile.blockValue - _moveAmount >= BASE_TILE_PRICE_WEI); // Must always leave some at source\r\n        \r\n        require(BWUtility.isAdjacent(_xSource, _ySource, _xDest, _yDest));\r\n\r\n        sourceTileBlockValue = sourceTileBlockValue.sub(_moveAmount);\r\n        destTileBlockValue = destTileBlockValue.add(_moveAmount);\r\n\r\n        // If ALL block value was moved away from the source tile, we lose our claim to it. It becomes ownerless.\r\n        if (sourceTileBlockValue == 0) {\r\n            bwData.deleteTile(sourceTileId);\r\n        } else {\r\n            bwData.updateTileBlockValue(sourceTileId, sourceTileBlockValue);\r\n            bwData.deleteOffer(sourceTileId); // Offer invalid since block value has changed\r\n        }\r\n\r\n        bwData.updateTileBlockValue(destTileId, destTileBlockValue);\r\n        bwData.deleteOffer(destTileId);   // Offer invalid since block value has changed\r\n        emit BlockValueMoved(sourceTileId, destTileId, _msgSender, _moveAmount, sourceTileBlockValue, destTileBlockValue, block.timestamp);        \r\n    }\r\n\r\n    function verifyAmount(address _msgSender, uint _msgValue, uint _amount, bool _useBattleValue) view public isValidCaller {\r\n        if (_useBattleValue) {\r\n            require(_msgValue == 0);\r\n            require(bwData.getUserBattleValue(_msgSender) >= _amount);\r\n        } else {\r\n            require(_amount == _msgValue);\r\n        }\r\n    }\r\n\r\n    function setLocalGame(uint16 _tileId, address localGameAddress) public isOwner {\r\n        localGames[_tileId] = localGameAddress;\r\n    }\r\n\r\n    function getLocalGame(uint16 _tileId) view public isValidCaller returns (address) {\r\n        return localGames[_tileId];\r\n    }\r\n\r\n    // BATTLE VALUE FUNCTIONS\r\n    function withdrawBattleValue(address msgSender, uint _battleValueInWei) public isValidCaller returns (uint) {\r\n        //require(_battleValueInWei % 1 finney == 0); // Must be divisible by 1 finney\r\n        uint fee = _battleValueInWei.mul(WITHDRAW_FEE).div(100); // Since we divide by 20 we can never create infinite fractions, so we'll always count in whole wei amounts.\r\n        uint amountToWithdraw = _battleValueInWei.sub(fee);\r\n        uint feeBalance = bwData.getFeeBalance();\r\n        feeBalance = feeBalance.add(fee);\r\n        bwData.setFeeBalance(feeBalance);\r\n        subUserBattleValue(msgSender, _battleValueInWei, true);\r\n        return amountToWithdraw;\r\n    }\r\n\r\n    function addUserBattleValue(address _userId, uint _amount) public isValidCaller {\r\n        uint userBattleValue = bwData.getUserBattleValue(_userId);\r\n        uint newBattleValue = userBattleValue.add(_amount);\r\n        bwData.setUserBattleValue(_userId, newBattleValue); // Don't include boost here!\r\n        emit UserBattleValueUpdated(_userId, newBattleValue, false);\r\n    }\r\n    \r\n    function subUserBattleValue(address _userId, uint _amount, bool _isWithdraw) public isValidCaller {\r\n        uint userBattleValue = bwData.getUserBattleValue(_userId);\r\n        require(_amount <= userBattleValue); // Must be less than user's battle value - also implicitly checks that underflow isn't possible\r\n        uint newBattleValue = userBattleValue.sub(_amount);\r\n        bwData.setUserBattleValue(_userId, newBattleValue); // Don't include boost here!\r\n        emit UserBattleValueUpdated(_userId, newBattleValue, _isWithdraw);\r\n    }\r\n\r\n    function addGlobalBlockValueBalance(uint _amount) public isValidCaller {\r\n        // Track addition to global block value.\r\n        uint blockValueBalance = bwData.getBlockValueBalance();\r\n        bwData.setBlockValueBalance(blockValueBalance.add(_amount));\r\n    }\r\n\r\n    function subGlobalBlockValueBalance(uint _amount) public isValidCaller {\r\n        // Track addition to global block value.\r\n        uint blockValueBalance = bwData.getBlockValueBalance();\r\n        bwData.setBlockValueBalance(blockValueBalance.sub(_amount));\r\n    }\r\n\r\n    // Allow us to transfer out airdropped tokens if we ever receive any\r\n    function transferTokens(address _tokenAddress, address _recipient) public isOwner {\r\n        ERC20I token = ERC20I(_tokenAddress);\r\n        require(token.transfer(_recipient, token.balanceOf(this)));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract BWData {\r\n    address public owner;\r\n    address private bwService;\r\n    address private bw;\r\n    address private bwMarket;\r\n\r\n    uint private blockValueBalance = 0;\r\n    uint private feeBalance = 0;\r\n    uint private BASE_TILE_PRICE_WEI = 1 finney; // 1 milli-ETH.\r\n    \r\n    mapping (address => User) private users; // user address -> user information\r\n    mapping (uint16 => Tile) private tiles; // tileId -> list of TileClaims for that particular tile\r\n    \r\n    // Info about the users = those who have purchased tiles.\r\n    struct User {\r\n        uint creationTime;\r\n        bool censored;\r\n        uint battleValue;\r\n    }\r\n\r\n    // Info about a tile ownership\r\n    struct Tile {\r\n        address claimer;\r\n        uint blockValue;\r\n        uint creationTime;\r\n        uint sellPrice;    // If 0 -> not on marketplace. If > 0 -> on marketplace.\r\n    }\r\n\r\n    struct Boost {\r\n        uint8 numAttackBoosts;\r\n        uint8 numDefendBoosts;\r\n        uint attackBoost;\r\n        uint defendBoost;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Can't send funds straight to this contract. Avoid people sending by mistake.\r\n    function () payable public {\r\n        revert();\r\n    }\r\n\r\n    function kill() public isOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    modifier isValidCaller {\r\n        if (msg.sender != bwService && msg.sender != bw && msg.sender != bwMarket) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n    \r\n    modifier isOwner {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n    \r\n    function setBwServiceValidCaller(address _bwService) public isOwner {\r\n        bwService = _bwService;\r\n    }\r\n\r\n    function setBwValidCaller(address _bw) public isOwner {\r\n        bw = _bw;\r\n    }\r\n\r\n    function setBwMarketValidCaller(address _bwMarket) public isOwner {\r\n        bwMarket = _bwMarket;\r\n    }    \r\n    \r\n    // ----------USER-RELATED GETTER FUNCTIONS------------\r\n    \r\n    //function getUser(address _user) view public returns (bytes32) {\r\n        //BWUtility.User memory user = users[_user];\r\n        //require(user.creationTime != 0);\r\n        //return (user.creationTime, user.imageUrl, user.tag, user.email, user.homeUrl, user.creationTime, user.censored, user.battleValue);\r\n    //}\r\n    \r\n    function addUser(address _msgSender) public isValidCaller {\r\n        User storage user = users[_msgSender];\r\n        require(user.creationTime == 0);\r\n        user.creationTime = block.timestamp;\r\n    }\r\n\r\n    function hasUser(address _user) view public isValidCaller returns (bool) {\r\n        return users[_user].creationTime != 0;\r\n    }\r\n    \r\n\r\n    // ----------TILE-RELATED GETTER FUNCTIONS------------\r\n\r\n    function getTile(uint16 _tileId) view public isValidCaller returns (address, uint, uint, uint) {\r\n        Tile storage currentTile = tiles[_tileId];\r\n        return (currentTile.claimer, currentTile.blockValue, currentTile.creationTime, currentTile.sellPrice);\r\n    }\r\n    \r\n    function getTileClaimerAndBlockValue(uint16 _tileId) view public isValidCaller returns (address, uint) {\r\n        Tile storage currentTile = tiles[_tileId];\r\n        return (currentTile.claimer, currentTile.blockValue);\r\n    }\r\n    \r\n    function isNewTile(uint16 _tileId) view public isValidCaller returns (bool) {\r\n        Tile storage currentTile = tiles[_tileId];\r\n        return currentTile.creationTime == 0;\r\n    }\r\n    \r\n    function storeClaim(uint16 _tileId, address _claimer, uint _blockValue) public isValidCaller {\r\n        tiles[_tileId] = Tile(_claimer, _blockValue, block.timestamp, 0);\r\n    }\r\n\r\n    function updateTileBlockValue(uint16 _tileId, uint _blockValue) public isValidCaller {\r\n        tiles[_tileId].blockValue = _blockValue;\r\n    }\r\n\r\n    function setClaimerForTile(uint16 _tileId, address _claimer) public isValidCaller {\r\n        tiles[_tileId].claimer = _claimer;\r\n    }\r\n\r\n    function updateTileTimeStamp(uint16 _tileId) public isValidCaller {\r\n        tiles[_tileId].creationTime = block.timestamp;\r\n    }\r\n    \r\n    function getCurrentClaimerForTile(uint16 _tileId) view public isValidCaller returns (address) {\r\n        Tile storage currentTile = tiles[_tileId];\r\n        if (currentTile.creationTime == 0) {\r\n            return 0;\r\n        }\r\n        return currentTile.claimer;\r\n    }\r\n\r\n    function getCurrentBlockValueAndSellPriceForTile(uint16 _tileId) view public isValidCaller returns (uint, uint) {\r\n        Tile storage currentTile = tiles[_tileId];\r\n        if (currentTile.creationTime == 0) {\r\n            return (0, 0);\r\n        }\r\n        return (currentTile.blockValue, currentTile.sellPrice);\r\n    }\r\n    \r\n    function getBlockValueBalance() view public isValidCaller returns (uint){\r\n        return blockValueBalance;\r\n    }\r\n\r\n    function setBlockValueBalance(uint _blockValueBalance) public isValidCaller {\r\n        blockValueBalance = _blockValueBalance;\r\n    }\r\n\r\n    function getFeeBalance() view public isValidCaller returns (uint) {\r\n        return feeBalance;\r\n    }\r\n\r\n    function setFeeBalance(uint _feeBalance) public isValidCaller {\r\n        feeBalance = _feeBalance;\r\n    }\r\n    \r\n    function getUserBattleValue(address _userId) view public isValidCaller returns (uint) {\r\n        return users[_userId].battleValue;\r\n    }\r\n    \r\n    function setUserBattleValue(address _userId, uint _battleValue) public  isValidCaller {\r\n        users[_userId].battleValue = _battleValue;\r\n    }\r\n    \r\n    function verifyAmount(address _msgSender, uint _msgValue, uint _amount, bool _useBattleValue) view public isValidCaller {\r\n        User storage user = users[_msgSender];\r\n        require(user.creationTime != 0);\r\n\r\n        if (_useBattleValue) {\r\n            require(_msgValue == 0);\r\n            require(user.battleValue >= _amount);\r\n        } else {\r\n            require(_amount == _msgValue);\r\n        }\r\n    }\r\n    \r\n    function addBoostFromTile(Tile _tile, address _attacker, address _defender, Boost memory _boost) pure private {\r\n        if (_tile.claimer == _attacker) {\r\n            require(_boost.attackBoost + _tile.blockValue >= _tile.blockValue); // prevent overflow\r\n            _boost.attackBoost += _tile.blockValue;\r\n            _boost.numAttackBoosts += 1;\r\n        } else if (_tile.claimer == _defender) {\r\n            require(_boost.defendBoost + _tile.blockValue >= _tile.blockValue); // prevent overflow\r\n            _boost.defendBoost += _tile.blockValue;\r\n            _boost.numDefendBoosts += 1;\r\n        }\r\n    }\r\n\r\n    function calculateBattleBoost(uint16 _tileId, address _attacker, address _defender) view public isValidCaller returns (uint, uint) {\r\n        uint8 x;\r\n        uint8 y;\r\n\r\n        (x, y) = BWUtility.fromTileId(_tileId);\r\n\r\n        Boost memory boost = Boost(0, 0, 0, 0);\r\n        // We overflow x, y on purpose here if x or y is 0 or 255 - the map overflows and so should adjacency.\r\n        // Go through all adjacent tiles to (x, y).\r\n        if (y != 255) {\r\n            if (x != 255) {\r\n                addBoostFromTile(tiles[BWUtility.toTileId(x+1, y+1)], _attacker, _defender, boost);\r\n            }\r\n            \r\n            addBoostFromTile(tiles[BWUtility.toTileId(x, y+1)], _attacker, _defender, boost);\r\n\r\n            if (x != 0) {\r\n                addBoostFromTile(tiles[BWUtility.toTileId(x-1, y+1)], _attacker, _defender, boost);\r\n            }\r\n        }\r\n\r\n        if (x != 255) {\r\n            addBoostFromTile(tiles[BWUtility.toTileId(x+1, y)], _attacker, _defender, boost);\r\n        }\r\n\r\n        if (x != 0) {\r\n            addBoostFromTile(tiles[BWUtility.toTileId(x-1, y)], _attacker, _defender, boost);\r\n        }\r\n\r\n        if (y != 0) {\r\n            if(x != 255) {\r\n                addBoostFromTile(tiles[BWUtility.toTileId(x+1, y-1)], _attacker, _defender, boost);\r\n            }\r\n\r\n            addBoostFromTile(tiles[BWUtility.toTileId(x, y-1)], _attacker, _defender, boost);\r\n\r\n            if(x != 0) {\r\n                addBoostFromTile(tiles[BWUtility.toTileId(x-1, y-1)], _attacker, _defender, boost);\r\n            }\r\n        }\r\n        // The benefit of boosts is multiplicative (quadratic):\r\n        // - More boost tiles gives a higher total blockValue (the sum of the adjacent tiles)\r\n        // - More boost tiles give a higher multiple of that total blockValue that can be used (10% per adjacent tie)\r\n        // Example:\r\n        //   A) I boost attack with 1 single tile worth 10 finney\r\n        //      -> Total boost is 10 * 1 / 10 = 1 finney\r\n        //   B) I boost attack with 3 tiles worth 1 finney each\r\n        //      -> Total boost is (1+1+1) * 3 / 10 = 0.9 finney\r\n        //   C) I boost attack with 8 tiles worth 2 finney each\r\n        //      -> Total boost is (2+2+2+2+2+2+2+2) * 8 / 10 = 14.4 finney\r\n        //   D) I boost attack with 3 tiles of 1, 5 and 10 finney respectively\r\n        //      -> Total boost is (ss1+5+10) * 3 / 10 = 4.8 finney\r\n        // This division by 10 can't create fractions since our uint is wei, and we can't have overflow from the multiplication\r\n        // We do allow fractions of finney here since the boosted values aren't stored anywhere, only used for attack rolls and sent in events\r\n        boost.attackBoost = (boost.attackBoost / 10 * boost.numAttackBoosts);\r\n        boost.defendBoost = (boost.defendBoost / 10 * boost.numDefendBoosts);\r\n\r\n        return (boost.attackBoost, boost.defendBoost);\r\n    }\r\n    \r\n    function censorUser(address _userAddress, bool _censored) public isValidCaller {\r\n        User storage user = users[_userAddress];\r\n        require(user.creationTime != 0);\r\n        user.censored = _censored;\r\n    }\r\n    \r\n    function deleteTile(uint16 _tileId) public isValidCaller {\r\n        delete tiles[_tileId];\r\n    }\r\n    \r\n    function setSellPrice(uint16 _tileId, uint _sellPrice) public isValidCaller {\r\n        tiles[_tileId].sellPrice = _sellPrice;  //testrpc cannot estimate gas when delete is used.\r\n    }\r\n\r\n    function deleteOffer(uint16 _tileId) public isValidCaller {\r\n        tiles[_tileId].sellPrice = 0;  //testrpc cannot estimate gas when delete is used.\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n* Copyright 2018 Block Wars Team\r\n*\r\n*/\r\n\r\ninterface LocalGameI {\r\n    function getBountyBalance() view external returns (uint);\r\n    function getTimeLeftToNextCollect(address _claimer, uint _latestClaimTime) view external returns (uint);\r\n    function collectBounty(address _msgSender, uint _latestClaimTime, uint _amount) external returns (uint);\r\n}\r\n\r\n/*\r\n* @title ERC721 interface\r\n*/\r\ncontract ERC721 {\r\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\r\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\r\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\r\n    ///  may be created and assigned without emitting Transfer. At the time of\r\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\r\n    //event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n\r\n    /// @dev This emits when the approved address for an NFT is changed or\r\n    ///  reaffirmed. The zero address indicates there is no approved address.\r\n    ///  When a Transfer event emits, this also indicates that the approved\r\n    ///  address for that NFT (if any) is reset to none.\r\n    //event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    ///  The operator can manage all NFTs of the owner.\r\n    //event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /// @notice Count all NFTs assigned to an owner\r\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\r\n    ///  function throws for queries about the zero address.\r\n    /// @param _owner An address for whom to query the balance\r\n    /// @return The number of NFTs owned by `_owner`, possibly zero\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    /// @notice Find the owner of an NFT\r\n    /// @param _tokenId The identifier for an NFT\r\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\r\n    ///  about them do throw.\r\n    /// @return The address of the owner of the NFT\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\r\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n    ///  `onERC721Received` on `_to` and throws if the return value is not\r\n    ///  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    /// @param data Additional data with no specified format, sent in call to `_to`\r\n    //function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev This works identically to the other function with an extra data parameter,\r\n    ///  except this function just sets data to \"\"\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\r\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\r\n    ///  THEY MAY BE PERMANENTLY LOST\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    //function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    /// @notice Set or reaffirm the approved address for an NFT\r\n    /// @dev The zero address indicates there is no approved address.\r\n    /// @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n    ///  operator of the current owner.\r\n    /// @param _approved The new approved NFT controller\r\n    /// @param _tokenId The NFT to approve\r\n    //function approve(address _approved, uint256 _tokenId) external payable;\r\n\r\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\r\n    ///  all of `msg.sender`'s assets.\r\n    /// @dev Emits the ApprovalForAll event\r\n    /// @param _operator Address to add to the set of authorized operators.\r\n    /// @param _approved True if the operators is approved, false to revoke approval\r\n    //function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    /// @notice Get the approved address for a single NFT\r\n    /// @dev Throws if `_tokenId` is not a valid NFT\r\n    /// @param _tokenId The NFT to find the approved address for\r\n    /// @return The approved address for this NFT, or the zero address if there is none\r\n    //function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n    /// @notice Query if an address is an authorized operator for another address\r\n    /// @param _owner The address that owns the NFTs\r\n    /// @param _operator The address that acts on behalf of the owner\r\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n    //function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    //function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract BW { \r\n    using SafeMath for uint256;\r\n    address public owner;\r\n    BWService private bwService;\r\n    BWData private bwData;\r\n    bool public paused = false;\r\n    uint private BV_TO_BP_FEE = 5; // 5%\r\n    mapping (uint16 => Prize[]) private prizes; // Use mapping instead of array (key would be a unique priceId) - NO (we want to loop all prices)\r\n    \r\n    struct Prize {\r\n        address token; // BWT or CryptoKiities (ERC721)\r\n        uint tokenId; \r\n        uint startTime; // To be able to add a price before the game starts\r\n        uint hodlPeriod; // Amount of seconds you have to own the tile before being able to claim this price. One block is ~15 sec.\r\n    }\r\n\r\n    event PrizeCreated(uint16 tileId,  address token, uint tokenId, uint creationTime, uint startTime, uint hodlPeriod);\r\n    event PrizeRemoved(uint16 tileId, address token, uint tokenId, uint removeTime);\r\n    event PrizeClaimed(address token, uint tokenId);\r\n\r\n    // Add price (only BW owner can do this)\r\n    function addPrize(uint16 _tileId, address _token, uint _tokenId, uint _startTime, uint _hodlPeriod) public isOwner {\r\n        //startTime must be same or after block.timestamp\r\n        uint startTime = _startTime;\r\n        if(startTime < block.timestamp) {\r\n            startTime = block.timestamp;\r\n        }\r\n        // we could check if token exists with ownerOf function in interface, \r\n        // but if any erc721 token doesn't implement the function, this function would revert.\r\n        // also cheaper to not make an interface call\r\n        prizes[_tileId].push(Prize(_token, _tokenId, startTime, _hodlPeriod));\r\n        emit PrizeCreated(_tileId, _token, _tokenId, block.timestamp, startTime, _hodlPeriod);\r\n    }\r\n\r\n    // Remove price (only BW owner can do this)\r\n    function removePrize(uint16 _tileId, address _token, uint _tokenId) public isOwner {\r\n        Prize[] storage prizeArr = prizes[_tileId];\r\n        require(prizeArr.length > 0);\r\n\r\n        for(uint idx = 0; idx < prizeArr.length; ++idx) {\r\n            if(prizeArr[idx].tokenId == _tokenId && prizeArr[idx].token == _token) {\r\n                delete prizeArr[idx];\r\n                emit PrizeRemoved(_tileId, _token, _tokenId, block.timestamp);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Add price (only BW owner can do this)\r\n    function claimPrize(address _tokenAddress, uint16 _tileId) public isNotPaused isNotContractCaller {\r\n        ERC721 token = ERC721(_tokenAddress);\r\n        Prize[] storage prizeArr = prizes[_tileId];\r\n        require(prizeArr.length > 0);\r\n        address claimer;\r\n        uint blockValue;\r\n        uint lastClaimTime;\r\n        uint sellPrice;\r\n        (claimer, blockValue, lastClaimTime, sellPrice) = bwData.getTile(_tileId);\r\n        require(lastClaimTime != 0 && claimer == msg.sender);\r\n\r\n        for(uint idx = 0; idx < prizeArr.length; ++idx) {\r\n            if(prizeArr[idx].startTime.add(prizeArr[idx].hodlPeriod) <= block.timestamp\r\n                && lastClaimTime.add(prizeArr[idx].hodlPeriod) <= block.timestamp) {\r\n                uint tokenId = prizeArr[idx].tokenId;\r\n                address tokenOwner = token.ownerOf(tokenId);\r\n                delete prizeArr[idx];\r\n                token.safeTransferFrom(tokenOwner, msg.sender, tokenId); //Will revert if token does not exists\r\n                emit PrizeClaimed(_tokenAddress, tokenId);\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier isOwner {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Checks if entire game (except battle value withdraw) is paused or not.\r\n    modifier isNotPaused {\r\n        if (paused) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Only allow wallets to call this function, not contracts.\r\n    modifier isNotContractCaller {\r\n        require(msg.sender == tx.origin);\r\n        _;\r\n    }\r\n\r\n    // All contract event types.\r\n    event UserCreated(address userAddress, bytes32 name, bytes imageUrl, bytes32 tag, bytes32 homeUrl, uint creationTime, address invitedBy);\r\n    event UserCensored(address userAddress, bool isCensored);\r\n    event TransferTileFromOwner(uint16 tileId, address seller, address buyer, uint acceptTime); // Sent when a user buys a tile from another user, by accepting a tile offer\r\n    event UserUpdated(address userAddress, bytes32 name, bytes imageUrl, bytes32 tag, bytes32 homeUrl, uint updateTime);\r\n    event TileRetreated(uint16 tileId, address owner, uint amount, uint newBlockValue, uint retreatTime);\r\n    event BountyCollected(uint tile, address userAddress, uint amount, uint amountCollected, uint collectedTime, uint latestClaimTime);\r\n\r\n    // BASIC CONTRACT FUNCTIONS\r\n    constructor(address _bwService, address _bwData) public {\r\n        bwService = BWService(_bwService);\r\n        bwData = BWData(_bwData);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Can't send funds straight to this contract. Avoid people sending by mistake.\r\n    function () payable public isOwner {\r\n\r\n    }\r\n\r\n    // Allow a new user to claim one or more previously unclaimed tiles by paying Ether.\r\n    function claimTilesForNewUser(bytes32 _name, bytes _imageUrl, bytes32 _tag, bytes32 _homeUrl, uint16[] _claimedTileIds, address _invitedBy) payable public isNotPaused isNotContractCaller {\r\n        bwData.addUser(msg.sender);\r\n        emit UserCreated(msg.sender, _name, _imageUrl, _tag, _homeUrl, block.timestamp, _invitedBy);\r\n        bwService.storeInitialClaim(msg.sender, _claimedTileIds, msg.value, false);\r\n    }\r\n\r\n    // Allow an existing user to claim one or more previously unclaimed tiles by paying Ether.\r\n    function claimTilesForExistingUser(uint16[] _claimedTileIds, uint _claimAmount, bool _useBattleValue) payable public isNotPaused isNotContractCaller {\r\n        bwService.verifyAmount(msg.sender, msg.value, _claimAmount, _useBattleValue);\r\n        bwService.storeInitialClaim(msg.sender, _claimedTileIds, _claimAmount, _useBattleValue);\r\n    }\r\n\r\n    // Allow users to change name, image URL, tag and home URL. Not censored status or battle value though.\r\n    function updateUser(bytes32 _name, bytes _imageUrl, bytes32 _tag, bytes32 _homeUrl) public isNotPaused isNotContractCaller {\r\n        require(bwData.hasUser(msg.sender));\r\n        // All the updated values are stored in events only so there's no state to update on the contract here.\r\n        emit UserUpdated(msg.sender, _name, _imageUrl, _tag, _homeUrl, block.timestamp);\r\n    }\r\n    \r\n    // This function fortifies multiple previously claimed tiles in a single transaction.\r\n    // The value assigned to each tile is the msg.value divided by the number of tiles fortified.\r\n    // The msg.value is required to be an even multiple of the number of tiles fortified.\r\n    // Only tiles owned by msg.sender can be fortified.\r\n    function fortifyClaims(uint16[] _claimedTileIds, uint _fortifyAmount, bool _useBattleValue) payable public isNotPaused isNotContractCaller {\r\n        bwService.verifyAmount(msg.sender, msg.value, _fortifyAmount, _useBattleValue);\r\n        bwService.fortifyClaims(msg.sender, _claimedTileIds, _fortifyAmount, _useBattleValue);\r\n    }\r\n\r\n    // A new user attacks a tile claimed by someone else, trying to make it theirs through battle.\r\n    function attackTileForNewUser(uint16 _tileId, bytes32 _name, bytes _imageUrl, bytes32 _tag, bytes32 _homeUrl, address _invitedBy) payable public isNotPaused isNotContractCaller {\r\n        bwData.addUser(msg.sender);\r\n        emit UserCreated(msg.sender, _name, _imageUrl, _tag, _homeUrl, block.timestamp, _invitedBy);\r\n        bwService.attackTile(msg.sender, _tileId, msg.value, false);\r\n    }\r\n\r\n    // An existing user attacks a tile claimed by someone else, trying to make it theirs through battle.\r\n    function attackTileForExistingUser(uint16 _tileId, uint _attackAmount, bool _useBattleValue) payable public isNotPaused isNotContractCaller {\r\n        bwService.verifyAmount(msg.sender, msg.value, _attackAmount, _useBattleValue);\r\n        bwService.attackTile(msg.sender, _tileId, _attackAmount, _useBattleValue);\r\n    }\r\n    \r\n    // Move \"army\" = block value from one block to an adjacent block. Moving ALL value equates giving up ownership of the source tile.\r\n    function moveBlockValue(uint8 _xSource, uint8 _ySource, uint8 _xDest, uint8 _yDest, uint _moveAmount) public isNotPaused isNotContractCaller {\r\n        require(_moveAmount > 0);\r\n        bwService.moveBlockValue(msg.sender, _xSource, _ySource, _xDest, _yDest, _moveAmount);\r\n    }\r\n\r\n    // Allow users to withdraw battle value in Ether.\r\n    function withdrawBattleValue(uint _battleValueInWei) public isNotContractCaller {\r\n        require(_battleValueInWei > 0);\r\n        uint amountToWithdraw = bwService.withdrawBattleValue(msg.sender, _battleValueInWei);\r\n        msg.sender.transfer(amountToWithdraw);\r\n    }\r\n\r\n    // Transfer block value to battle points for free \r\n    function transferBlockValueToBattleValue(uint16 _tileId, uint _amount) public isNotContractCaller {\r\n        require(_amount > 0);\r\n        address claimer;\r\n        uint blockValue;\r\n        (claimer, blockValue) = bwData.getTileClaimerAndBlockValue(_tileId);\r\n        require(claimer == msg.sender);\r\n        uint newBlockValue = blockValue.sub(_amount);\r\n        // Must transfer the entire block value or leave at least 5\r\n        require(newBlockValue == 0 || newBlockValue >= 5 finney);\r\n        if(newBlockValue == 0) {\r\n            bwData.deleteTile(_tileId);\r\n        } else {\r\n            bwData.updateTileBlockValue(_tileId, newBlockValue);\r\n            bwData.deleteOffer(_tileId); // Offer invalid since block value has changed\r\n        }\r\n        \r\n        uint fee = _amount.mul(BV_TO_BP_FEE).div(100);\r\n        uint userAmount = _amount.sub(fee);\r\n        uint feeBalance = bwData.getFeeBalance();\r\n        feeBalance = feeBalance.add(fee);\r\n        bwData.setFeeBalance(feeBalance);\r\n\r\n        bwService.addUserBattleValue(msg.sender, userAmount);\r\n        bwService.subGlobalBlockValueBalance(_amount);\r\n        emit TileRetreated(_tileId, msg.sender, _amount, newBlockValue, block.timestamp);\r\n    }\r\n\r\n    // -------- LOCAL GAME FUNCTIONS ----------\r\n\r\n    function getLocalBountyBalance(uint16 _tileId) view public isNotContractCaller returns (uint) {\r\n        address localGameAddress = bwService.getLocalGame(_tileId);\r\n        require(localGameAddress != 0);\r\n        LocalGameI localGame = LocalGameI(localGameAddress);\r\n        return localGame.getBountyBalance();\r\n    }\r\n\r\n    function getTimeLeftToNextLocalBountyCollect(uint16 _tileId) view public isNotContractCaller returns (uint) {\r\n        address localGameAddress = bwService.getLocalGame(_tileId);\r\n        require(localGameAddress != 0);\r\n        LocalGameI localGame = LocalGameI(localGameAddress);\r\n        address claimer;\r\n        uint blockValue;\r\n        uint latestClaimTime;\r\n        uint sellPrice;\r\n        (claimer, blockValue, latestClaimTime, sellPrice) = bwData.getTile(_tileId);\r\n        return localGame.getTimeLeftToNextCollect(claimer, latestClaimTime);\r\n    }\r\n\r\n    function collectLocalBounty(uint16 _tileId, uint _amount) public isNotContractCaller {\r\n        address localGameAddress = bwService.getLocalGame(_tileId);\r\n        require(localGameAddress != 0);\r\n        address claimer;\r\n        uint blockValue;\r\n        uint latestClaimTime;\r\n        uint sellPrice;\r\n        (claimer, blockValue, latestClaimTime, sellPrice) = bwData.getTile(_tileId);\r\n        require(latestClaimTime != 0 && claimer == msg.sender);\r\n        \r\n        LocalGameI localGame = LocalGameI(localGameAddress);\r\n        uint amountCollected = localGame.collectBounty(msg.sender, latestClaimTime, _amount);\r\n        emit BountyCollected(_tileId, msg.sender, _amount, amountCollected, block.timestamp, latestClaimTime);\r\n    }\r\n\r\n    // -------- OWNER-ONLY FUNCTIONS ----------\r\n\r\n    // Only used by owner for raffle. Owner need name, address and picture from user.\r\n    // These users can then be given tiles by owner using transferTileFromOwner.\r\n    function createNewUser(bytes32 _name, bytes _imageUrl, bytes32 _tag, bytes32 _homeUrl, address _user) public isOwner {\r\n        bwData.addUser(_user);\r\n        emit UserCreated(_user, _name, _imageUrl, _tag, _homeUrl, block.timestamp, msg.sender); //check on client if invitedBy is owner.\r\n    }\r\n\r\n    // Allow updating censored status. Owner only. In case someone uploads offensive content.\r\n    // The contract owners reserve the right to apply censorship. This will mean that the\r\n    // name, tag or URL images might not be displayed for a censored user.\r\n    function censorUser(address _userAddress, bool _censored) public isOwner {\r\n        bwData.censorUser(_userAddress, _censored);\r\n        emit UserCensored(_userAddress, _censored);\r\n    }\r\n\r\n    // Pause the entire game, but let users keep withdrawing battle value\r\n    function setPaused(bool _paused) public isOwner {\r\n        paused = _paused;\r\n    }\r\n\r\n    function kill() public isOwner {\r\n        selfdestruct(owner);\r\n    }\r\n    \r\n    function withdrawFee() public isOwner {\r\n        uint balance = address(this).balance;\r\n        uint amountToWithdraw = bwData.getFeeBalance();\r\n\r\n        if (balance < amountToWithdraw) { // Should never happen, but paranoia\r\n            amountToWithdraw = balance;\r\n        }\r\n        bwData.setFeeBalance(0);\r\n\r\n        owner.transfer(amountToWithdraw);\r\n    }\r\n\r\n    function getFee() view public isOwner returns (uint) {\r\n        return bwData.getFeeBalance();\r\n    }\r\n\r\n    function setBvToBpFee(uint _feePercentage) public isOwner {\r\n        BV_TO_BP_FEE = _feePercentage;\r\n    }\r\n\r\n    function depositBattleValue(address _user) payable public isOwner {\r\n        require(msg.value % 1 finney == 0); // Must be divisible by 1 finney\r\n        bwService.addUserBattleValue(_user, msg.value);\r\n    }\r\n\r\n    // The owner can transfer ownership of own tiles to other users, as prizes in competitions.\r\n    function transferTileFromOwner(uint16[] _tileIds, address _newOwner) public isOwner {\r\n        for(uint i = 0; i < _tileIds.length; ++i) {\r\n            uint16 tileId = _tileIds[i];\r\n            address claimer = bwData.getCurrentClaimerForTile(tileId);\r\n            require(claimer == owner);\r\n            bwData.setClaimerForTile(tileId, _newOwner);\r\n            \r\n            emit TransferTileFromOwner(tileId, _newOwner, msg.sender, block.timestamp);\r\n        }\r\n    }\r\n\r\n    // Allow us to transfer out airdropped tokens if we ever receive any\r\n    function transferTokens(address _tokenAddress, address _recipient) public isOwner {\r\n        ERC20I token = ERC20I(_tokenAddress);\r\n        require(token.transfer(_recipient, token.balanceOf(this)));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_claimedTileIds\",\"type\":\"uint16[]\"},{\"name\":\"_claimAmount\",\"type\":\"uint256\"},{\"name\":\"_useBattleValue\",\"type\":\"bool\"}],\"name\":\"claimTilesForExistingUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tileId\",\"type\":\"uint16\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_hodlPeriod\",\"type\":\"uint256\"}],\"name\":\"addPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tileId\",\"type\":\"uint16\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_imageUrl\",\"type\":\"bytes\"},{\"name\":\"_tag\",\"type\":\"bytes32\"},{\"name\":\"_homeUrl\",\"type\":\"bytes32\"},{\"name\":\"_invitedBy\",\"type\":\"address\"}],\"name\":\"attackTileForNewUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tileId\",\"type\":\"uint16\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"collectLocalBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tileId\",\"type\":\"uint16\"}],\"name\":\"getLocalBountyBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"setBvToBpFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tileId\",\"type\":\"uint16\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferBlockValueToBattleValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_imageUrl\",\"type\":\"bytes\"},{\"name\":\"_tag\",\"type\":\"bytes32\"},{\"name\":\"_homeUrl\",\"type\":\"bytes32\"}],\"name\":\"updateUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_xSource\",\"type\":\"uint8\"},{\"name\":\"_ySource\",\"type\":\"uint8\"},{\"name\":\"_xDest\",\"type\":\"uint8\"},{\"name\":\"_yDest\",\"type\":\"uint8\"},{\"name\":\"_moveAmount\",\"type\":\"uint256\"}],\"name\":\"moveBlockValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tileId\",\"type\":\"uint16\"}],\"name\":\"claimPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tileId\",\"type\":\"uint16\"},{\"name\":\"_attackAmount\",\"type\":\"uint256\"},{\"name\":\"_useBattleValue\",\"type\":\"bool\"}],\"name\":\"attackTileForExistingUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tileId\",\"type\":\"uint16\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removePrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_imageUrl\",\"type\":\"bytes\"},{\"name\":\"_tag\",\"type\":\"bytes32\"},{\"name\":\"_homeUrl\",\"type\":\"bytes32\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"createNewUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_imageUrl\",\"type\":\"bytes\"},{\"name\":\"_tag\",\"type\":\"bytes32\"},{\"name\":\"_homeUrl\",\"type\":\"bytes32\"},{\"name\":\"_claimedTileIds\",\"type\":\"uint16[]\"},{\"name\":\"_invitedBy\",\"type\":\"address\"}],\"name\":\"claimTilesForNewUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tileId\",\"type\":\"uint16\"}],\"name\":\"getTimeLeftToNextLocalBountyCollect\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tileIds\",\"type\":\"uint16[]\"},{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTileFromOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_censored\",\"type\":\"bool\"}],\"name\":\"censorUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"depositBattleValue\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_claimedTileIds\",\"type\":\"uint16[]\"},{\"name\":\"_fortifyAmount\",\"type\":\"uint256\"},{\"name\":\"_useBattleValue\",\"type\":\"bool\"}],\"name\":\"fortifyClaims\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_battleValueInWei\",\"type\":\"uint256\"}],\"name\":\"withdrawBattleValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bwService\",\"type\":\"address\"},{\"name\":\"_bwData\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tileId\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creationTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hodlPeriod\",\"type\":\"uint256\"}],\"name\":\"PrizeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tileId\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"removeTime\",\"type\":\"uint256\"}],\"name\":\"PrizeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"imageUrl\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"tag\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"homeUrl\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"creationTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"invitedBy\",\"type\":\"address\"}],\"name\":\"UserCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isCensored\",\"type\":\"bool\"}],\"name\":\"UserCensored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tileId\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"acceptTime\",\"type\":\"uint256\"}],\"name\":\"TransferTileFromOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"imageUrl\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"tag\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"homeUrl\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"updateTime\",\"type\":\"uint256\"}],\"name\":\"UserUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tileId\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBlockValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"retreatTime\",\"type\":\"uint256\"}],\"name\":\"TileRetreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tile\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"collectedTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"latestClaimTime\",\"type\":\"uint256\"}],\"name\":\"BountyCollected\",\"type\":\"event\"}]","ContractName":"BW","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000168848b7ec6c61bd452ee6e74ae85b07cc3b8d1700000000000000000000000053d34d53a692e6352565909acda5af9145f11bf6","Library":"","SwarmSource":"bzzr://ee7f70821b09947c36beeab5b3a2676c1d335f625776157a3245d04b16c86022"}]}