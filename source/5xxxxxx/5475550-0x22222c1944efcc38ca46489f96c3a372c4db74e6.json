{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender; \r\n    }\r\n\r\n    /**\r\n        @dev Transfers the ownership of the contract.\r\n\r\n        @param _to Address of the new owner\r\n    */\r\n    function transferTo(address _to) public onlyOwner returns (bool) {\r\n        require(_to != address(0));\r\n        owner = _to;\r\n        return true;\r\n    } \r\n} \r\n\r\n\r\ncontract Delegable is Ownable {\r\n    mapping(address => DelegateLog) public delegates;\r\n\r\n    struct DelegateLog {\r\n        uint256 started;\r\n        uint256 ended;\r\n    }\r\n\r\n    /**\r\n        @dev Only allows current delegates.\r\n    */\r\n    modifier onlyDelegate() {\r\n        DelegateLog memory delegateLog = delegates[msg.sender];\r\n        require(delegateLog.started != 0 && delegateLog.ended == 0);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n        @dev Checks if a delegate existed at the timestamp.\r\n\r\n        @param _address Address of the delegate\r\n        @param timestamp Moment to check\r\n\r\n        @return true if at the timestamp the delegate existed\r\n    */\r\n    function wasDelegate(address _address, uint256 timestamp) public view returns (bool) {\r\n        DelegateLog memory delegateLog = delegates[_address];\r\n        return timestamp >= delegateLog.started && delegateLog.started != 0 && (delegateLog.ended == 0 || timestamp < delegateLog.ended);\r\n    }\r\n\r\n    /**\r\n        @dev Checks if a delegate is active\r\n\r\n        @param _address Address of the delegate\r\n        \r\n        @return true if the delegate is active\r\n    */\r\n    function isDelegate(address _address) public view returns (bool) {\r\n        DelegateLog memory delegateLog = delegates[_address];\r\n        return delegateLog.started != 0 && delegateLog.ended == 0;\r\n    }\r\n\r\n    /**\r\n        @dev Adds a new worker.\r\n\r\n        @param _address Address of the worker\r\n    */\r\n    function addDelegate(address _address) public onlyOwner returns (bool) {\r\n        DelegateLog storage delegateLog = delegates[_address];\r\n        require(delegateLog.started == 0);\r\n        delegateLog.started = block.timestamp;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev Removes an existing worker, removed workers can't be added back.\r\n\r\n        @param _address Address of the worker to remove\r\n    */\r\n    function removeDelegate(address _address) public onlyOwner returns (bool) {\r\n        DelegateLog storage delegateLog = delegates[_address];\r\n        require(delegateLog.started != 0 && delegateLog.ended == 0);\r\n        delegateLog.ended = block.timestamp;\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n    @dev Defines the interface of a standard RCN oracle.\r\n\r\n    The oracle is an agent in the RCN network that supplies a convertion rate between RCN and any other currency,\r\n    it's primarily used by the exchange but could be used by any other agent.\r\n*/\r\ncontract Oracle is Ownable {\r\n    uint256 public constant VERSION = 4;\r\n\r\n    event NewSymbol(bytes32 _currency);\r\n\r\n    mapping(bytes32 => bool) public supported;\r\n    bytes32[] public currencies;\r\n\r\n    /**\r\n        @dev Returns the url where the oracle exposes a valid \"oracleData\" if needed\r\n    */\r\n    function url() public view returns (string);\r\n\r\n    /**\r\n        @dev Returns a valid convertion rate from the currency given to RCN\r\n\r\n        @param symbol Symbol of the currency\r\n        @param data Generic data field, could be used for off-chain signing\r\n    */\r\n    function getRate(bytes32 symbol, bytes data) public returns (uint256 rate, uint256 decimals);\r\n\r\n    /**\r\n        @dev Adds a currency to the oracle, once added it cannot be removed\r\n\r\n        @param ticker Symbol of the currency\r\n\r\n        @return if the creation was done successfully\r\n    */\r\n    function addCurrency(string ticker) public onlyOwner returns (bool) {\r\n        bytes32 currency = encodeCurrency(ticker);\r\n        NewSymbol(currency);\r\n        supported[currency] = true;\r\n        currencies.push(currency);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @return the currency encoded as a bytes32\r\n    */\r\n    function encodeCurrency(string currency) public pure returns (bytes32 o) {\r\n        require(bytes(currency).length <= 32);\r\n        assembly {\r\n            o := mload(add(currency, 32))\r\n        }\r\n    }\r\n    \r\n    /**\r\n        @return the currency string from a encoded bytes32\r\n    */\r\n    function decodeCurrency(bytes32 b) public pure returns (string o) {\r\n        uint256 ns = 256;\r\n        while (true) { if (ns == 0 || (b<<ns-8) != 0) break; ns -= 8; }\r\n        assembly {\r\n            ns := div(ns, 8)\r\n            o := mload(0x40)\r\n            mstore(0x40, add(o, and(add(add(ns, 0x20), 0x1f), not(0x1f))))\r\n            mstore(o, ns)\r\n            mstore(add(o, 32), b)\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract RipioOracle is Oracle, Delegable {\r\n    uint256 public expiration = 15 minutes;\r\n\r\n    uint constant private INDEX_TIMESTAMP = 0;\r\n    uint constant private INDEX_RATE = 1;\r\n    uint constant private INDEX_DECIMALS = 2;\r\n    uint constant private INDEX_V = 3;\r\n    uint constant private INDEX_R = 4;\r\n    uint constant private INDEX_S = 5;\r\n\r\n    string private infoUrl;\r\n\r\n    mapping(bytes32 => RateCache) private cache;\r\n\r\n    address public fallback;\r\n\r\n    struct RateCache {\r\n        uint256 timestamp;\r\n        uint256 rate;\r\n        uint256 decimals;\r\n    }\r\n\r\n    function url() public view returns (string) {\r\n        return infoUrl;\r\n    }\r\n\r\n    /**\r\n        @notice Sets the time window of the validity of the signed rates.\r\n        \r\n        @param time Duration of the window\r\n\r\n        @return true is the time was set correctly\r\n    */\r\n    function setExpirationTime(uint256 time) public onlyOwner returns (bool) {\r\n        expiration = time;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice Sets the URL where the oracleData can be retrieved\r\n\r\n        @param _url The URL\r\n\r\n        @return true if it was set correctly\r\n    */\r\n    function setUrl(string _url) public onlyOwner returns (bool) {\r\n        infoUrl = _url;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice Sets the address of another contract to handle the requests of this contract,\r\n            it can be used to deprecate this Oracle\r\n\r\n        @dev The fallback is only used if is not address(0)\r\n\r\n        @param _fallback The address of the contract\r\n\r\n        @return true if it was set correctly\r\n    */\r\n    function setFallback(address _fallback) public onlyOwner returns (bool) {\r\n        fallback = _fallback;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice Reads a bytes32 word of a bytes array\r\n\r\n        @param data The bytes array\r\n        @param index The index of the word, in chunks of 32 bytes\r\n\r\n        @return o The bytes32 word readed, or 0x0 if index out of bounds\r\n    */\r\n    function readBytes32(bytes data, uint256 index) internal pure returns (bytes32 o) {\r\n        if(data.length / 32 > index) {\r\n            assembly {\r\n                o := mload(add(data, add(32, mul(32, index))))\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice Executes a transaction from this contract\r\n\r\n        @dev It can be used to retrieve lost tokens or ETH\r\n\r\n        @param to Address to call\r\n        @param value Ethers to send\r\n        @param data Data for the call\r\n\r\n        @return true If the call didn't throw an exception\r\n    */\r\n    function sendTransaction(address to, uint256 value, bytes data) public onlyOwner returns (bool) {\r\n        return to.call.value(value)(data);\r\n    }\r\n\r\n\r\n    /**\r\n        @dev Retrieves the convertion rate of a given currency, the information of the rate is carried over the \r\n        data field. If there is a newer rate on the cache, that rate is delivered and the data field is ignored.\r\n\r\n        If the data contains a more recent rate than the cache, the cache is updated.\r\n\r\n        @param currency Hash of the currency\r\n        @param data Data with the rate signed by a delegate\r\n\r\n        @return the rate and decimals of the currency convertion\r\n    */\r\n    function getRate(bytes32 currency, bytes data) public returns (uint256, uint256) {\r\n        if (fallback != address(0)) {\r\n            return Oracle(fallback).getRate(currency, data);\r\n        }\r\n\r\n        uint256 timestamp = uint256(readBytes32(data, INDEX_TIMESTAMP));\r\n        require(timestamp <= block.timestamp);\r\n\r\n        uint256 expirationTime = block.timestamp - expiration;\r\n\r\n        if (cache[currency].timestamp >= timestamp && cache[currency].timestamp >= expirationTime) {\r\n            return (cache[currency].rate, cache[currency].decimals);\r\n        } else {\r\n            require(timestamp >= expirationTime);\r\n            uint256 rate = uint256(readBytes32(data, INDEX_RATE));\r\n            uint256 decimals = uint256(readBytes32(data, INDEX_DECIMALS));\r\n            uint8 v = uint8(readBytes32(data, INDEX_V));\r\n            bytes32 r = readBytes32(data, INDEX_R);\r\n            bytes32 s = readBytes32(data, INDEX_S);\r\n            \r\n            bytes32 _hash = keccak256(this, currency, rate, decimals, timestamp);\r\n            address signer = ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", _hash),v,r,s);\r\n\r\n            require(isDelegate(signer));\r\n\r\n            cache[currency] = RateCache(timestamp, rate, decimals);\r\n\r\n            return (rate, decimals);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"decodeCurrency\",\"outputs\":[{\"name\":\"o\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"setUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fallback\",\"type\":\"address\"}],\"name\":\"setFallback\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"wasDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"currency\",\"type\":\"bytes32\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fallback\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"url\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"name\":\"started\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currency\",\"type\":\"string\"}],\"name\":\"encodeCurrency\",\"outputs\":[{\"name\":\"o\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"supported\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferTo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticker\",\"type\":\"string\"}],\"name\":\"addCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setExpirationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currencies\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_currency\",\"type\":\"bytes32\"}],\"name\":\"NewSymbol\",\"type\":\"event\"}]","ContractName":"RipioOracle","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9a20fc556a738dbfd7947b6903047cd04ea56bcfb4d8280680559d170c98478f"}]}