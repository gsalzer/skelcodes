{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\ncontract ibaMultisig {\r\n\r\n    /*\r\n    * Types\r\n    */\r\n    struct Transaction {\r\n        uint id;\r\n        address destination;\r\n        uint value;\r\n        bytes data;\r\n        TxnStatus status;\r\n        address[] confirmed;\r\n        address creator;\r\n    }\r\n\r\n    struct Wallet {\r\n        bytes32 name;\r\n        address creator;\r\n        uint id;\r\n        uint allowance;\r\n        address[] owners;\r\n        Log[] logs;\r\n        Transaction[] transactions;\r\n        uint appovalsreq;\r\n    }\r\n    \r\n    struct Log {\r\n        uint amount;\r\n        address sender;\r\n    }\r\n    \r\n    enum TxnStatus { Unconfirmed, Pending, Executed }\r\n    \r\n    /*\r\n    * Modifiers\r\n    */\r\n    modifier onlyOwner ( address creator, uint walletId ) {\r\n        bool found;\r\n        for (uint i = 0;i<wallets[creator][walletId].owners.length;i++){\r\n            if (wallets[creator][walletId].owners[i] == msg.sender){\r\n                found = true;\r\n            }\r\n        }\r\n        if (found){\r\n            _;\r\n        }\r\n    }\r\n    \r\n    /*\r\n    * Events\r\n    */\r\n    event WalletCreated(uint id);\r\n    event TxnSumbitted(uint id);\r\n    event TxnConfirmed(uint id);\r\n    event topUpBalance(uint value);\r\n\r\n    /*\r\n    * Storage\r\n    */\r\n    mapping (address => Wallet[]) public wallets;\r\n    \r\n    /*\r\n    * Constructor\r\n    */\r\n    function ibaMultisig() public{\r\n\r\n    }\r\n\r\n    /*\r\n    * Getters\r\n    */\r\n    function getWalletId(address creator, bytes32 name) external view returns (uint, bool){\r\n        for (uint i = 0;i<wallets[creator].length;i++){\r\n            if (wallets[creator][i].name == name){\r\n                return (i, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getOwners(address creator, uint id) external view returns (address[]){\r\n        return wallets[creator][id].owners;\r\n    }\r\n    \r\n    function getTxnNum(address creator, uint id) external view returns (uint){\r\n        require(wallets[creator][id].owners.length > 0);\r\n        return wallets[creator][id].transactions.length;\r\n    }\r\n    \r\n    function getTxn(address creator, uint walletId, uint id) external view returns (uint, address, uint, bytes, TxnStatus, address[], address){\r\n        Transaction storage txn = wallets[creator][walletId].transactions[id];\r\n        return (txn.id, txn.destination, txn.value, txn.data, txn.status, txn.confirmed, txn.creator);\r\n    }\r\n    \r\n    function getLogsNum(address creator, uint id) external view returns (uint){\r\n        return wallets[creator][id].logs.length;\r\n    }\r\n    \r\n    function getLog(address creator, uint id, uint logId) external view returns (address, uint){\r\n        return(wallets[creator][id].logs[logId].sender, wallets[creator][id].logs[logId].amount);\r\n    }\r\n    \r\n    /*\r\n    * Methods\r\n    */\r\n    \r\n    function createWallet(uint approvals, address[] owners, bytes32 name) external payable{\r\n\r\n        /* check if name was actually given */\r\n        require(name.length != 0);\r\n        \r\n        /*check if approvals num equals or greater than given owners num*/\r\n        require(approvals <= owners.length);\r\n        \r\n        /* check if wallets with given name already exists */\r\n        bool found;\r\n        for (uint i = 0; i<wallets[msg.sender].length;i++){\r\n            if (wallets[msg.sender][i].name == name){\r\n                found = true;\r\n            }\r\n        }\r\n        require (found == false);\r\n        \r\n        /*instantiate new wallet*/\r\n        uint currentLen = wallets[msg.sender].length++;\r\n        wallets[msg.sender][currentLen].name = name;\r\n        wallets[msg.sender][currentLen].creator = msg.sender;\r\n        wallets[msg.sender][currentLen].id = currentLen;\r\n        wallets[msg.sender][currentLen].allowance = msg.value;\r\n        wallets[msg.sender][currentLen].owners = owners;\r\n        wallets[msg.sender][currentLen].appovalsreq = approvals;\r\n        emit WalletCreated(currentLen);\r\n    }\r\n\r\n    function topBalance(address creator, uint id) external payable {\r\n        require (msg.value > 0 wei);\r\n        wallets[creator][id].allowance += msg.value;\r\n        \r\n        /* create new log entry */\r\n        uint loglen = wallets[creator][id].logs.length++;\r\n        wallets[creator][id].logs[loglen].amount = msg.value;\r\n        wallets[creator][id].logs[loglen].sender = msg.sender;\r\n        emit topUpBalance(msg.value);\r\n    }\r\n    \r\n    function submitTransaction(address creator, address destination, uint walletId, uint value, bytes data) onlyOwner (creator,walletId) external returns (bool) {\r\n        uint newTxId = wallets[creator][walletId].transactions.length++;\r\n        wallets[creator][walletId].transactions[newTxId].id = newTxId;\r\n        wallets[creator][walletId].transactions[newTxId].destination = destination;\r\n        wallets[creator][walletId].transactions[newTxId].value = value;\r\n        wallets[creator][walletId].transactions[newTxId].data = data;\r\n        wallets[creator][walletId].transactions[newTxId].creator = msg.sender;\r\n        emit TxnSumbitted(newTxId);\r\n        return true;\r\n    }\r\n\r\n    function confirmTransaction(address creator, uint walletId, uint txId) onlyOwner(creator, walletId) external returns (bool){\r\n        Wallet storage wallet = wallets[creator][walletId];\r\n        Transaction storage txn = wallet.transactions[txId];\r\n\r\n        //check whether this owner has already confirmed this txn\r\n        bool f;\r\n        for (uint8 i = 0; i<txn.confirmed.length;i++){\r\n            if (txn.confirmed[i] == msg.sender){\r\n                f = true;\r\n            }\r\n        }\r\n        //push sender address into confirmed array if haven't found\r\n        require(!f);\r\n        txn.confirmed.push(msg.sender);\r\n        \r\n        if (txn.confirmed.length == wallet.appovalsreq){\r\n            txn.status = TxnStatus.Pending;\r\n        }\r\n        \r\n        //fire event\r\n        emit TxnConfirmed(txId);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function executeTxn(address creator, uint walletId, uint txId) onlyOwner(creator, walletId) external returns (bool){\r\n        Wallet storage wallet = wallets[creator][walletId];\r\n        \r\n        Transaction storage txn = wallet.transactions[txId];\r\n        \r\n        /* check txn status */\r\n        require(txn.status == TxnStatus.Pending);\r\n        \r\n        /* check whether wallet has sufficient balance to send this transaction */\r\n        require(wallet.allowance >= txn.value);\r\n        \r\n        /* send transaction */\r\n        address dest = txn.destination;\r\n        uint val = txn.value;\r\n        bytes memory dat = txn.data;\r\n        assert(dest.call.value(val)(dat));\r\n            \r\n        /* change transaction's status to executed */\r\n        txn.status = TxnStatus.Executed;\r\n\r\n        /* change wallet's balance */\r\n        wallet.allowance = wallet.allowance - txn.value;\r\n\r\n        return true;\r\n        \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"logId\",\"type\":\"uint256\"}],\"name\":\"getLog\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"approvals\",\"type\":\"uint256\"},{\"name\":\"owners\",\"type\":\"address[]\"},{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"createWallet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wallets\",\"outputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"allowance\",\"type\":\"uint256\"},{\"name\":\"appovalsreq\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTxnNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"walletId\",\"type\":\"uint256\"},{\"name\":\"txId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"walletId\",\"type\":\"uint256\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTxn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"topBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getLogsNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getWalletId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"walletId\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"walletId\",\"type\":\"uint256\"},{\"name\":\"txId\",\"type\":\"uint256\"}],\"name\":\"executeTxn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"WalletCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"TxnSumbitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"TxnConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"topUpBalance\",\"type\":\"event\"}]","ContractName":"ibaMultisig","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://513a31c3e09477aa3e30ddae7f43fc94efac70b0cdd34a7d0fb21f9070d47312"}]}