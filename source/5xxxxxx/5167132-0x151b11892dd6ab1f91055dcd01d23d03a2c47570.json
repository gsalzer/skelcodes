{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract ServiceLocator is Ownable {\r\n\r\n    struct Registry {\r\n        // address to resolve \r\n        address addr;\r\n        // last updated time\r\n        uint256 updated;\r\n        // time to live for this record\r\n        uint32 ttl; \r\n    }\r\n\r\n    mapping (bytes32 => Registry) registry;\r\n    mapping (address => string) ptr;\r\n\r\n    // EVENTS\r\n    event Set(string namespace, address registryAddr, uint32 ttl);\r\n    event Remove(string namespace);\r\n\r\n    /**\r\n     * @dev Gets the address for a provided namespace \r\n     *  in the service locator. \r\n     * @param _namespace - namespace string for the record.\r\n     * @return address for the stored record\r\n     */\r\n    function get(string _namespace) constant public returns (address) {\r\n        Registry storage r = registry[keccak256(_namespace)];\r\n        \r\n        if (r.ttl > 0 && r.updated + r.ttl < now) {\r\n            return address(0);\r\n        }\r\n        return r.addr;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the namespace for a provided address \r\n     *  in the service locator. \r\n     * @param _addr - address for the record.\r\n     * @return namespace for the stored record\r\n     */\r\n    function getNamespace(address _addr) constant public returns (string) {\r\n        string storage ns = ptr[_addr];\r\n\r\n        Registry storage r = registry[keccak256(ns)];\r\n        if (r.ttl > 0 && r.updated + r.ttl < now) {\r\n            return \"\";\r\n        }\r\n        return ns;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets or Updates service locator registry\r\n     * @param _namespace - namespace string for the record.\r\n     * @param _addr - address of the contract to be stored.\r\n     * @param _ttl - How long in seconds will the record be valid. (0 means no ttl).\r\n     */\r\n    function set(string _namespace, address _addr, uint32 _ttl) onlyOwner public {\r\n        require(isContract(_addr));\r\n\r\n        registry[keccak256(_namespace)] = Registry({\r\n            addr: _addr,\r\n            updated: now,\r\n            ttl: _ttl\r\n        });\r\n\r\n        // saves reverse record. \r\n        ptr[_addr] = _namespace;\r\n        \r\n        Set(_namespace, _addr, _ttl);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a service locator registry\r\n     * @param _namespace - namespace string for the record.\r\n     */\r\n    function remove(string _namespace) onlyOwner public {\r\n        bytes32 h = keccak256(_namespace);\r\n\r\n        delete ptr[ registry[h].addr ];\r\n        delete registry[ h ];\r\n        \r\n        Remove(_namespace);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the provided address is a contract.\r\n     * @param _addr - ethereum address\r\n     * @return bool true if provided address is a contract.\r\n     */\r\n    function isContract(address _addr) private view returns (bool) {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_namespace\",\"type\":\"string\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_ttl\",\"type\":\"uint32\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_namespace\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_namespace\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getNamespace\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"namespace\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"registryAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ttl\",\"type\":\"uint32\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"namespace\",\"type\":\"string\"}],\"name\":\"Remove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ServiceLocator","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d83656c2a6ee7fc4a355984fc787af69e402084a31d31e493b8f9471c2b91875"}]}