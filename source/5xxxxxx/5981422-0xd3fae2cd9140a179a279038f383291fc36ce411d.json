{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Eliptic curve signature operations\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n */\r\nlibrary ECRecovery {\r\n\r\n    /**\r\n    * @dev Recover signer address from a message by using their signature\r\n    * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n    * @param sig bytes signature, the signature is generated using web3.eth.sign()\r\n    */\r\n    function recover(bytes32 hash, bytes sig)\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // Check the signature length\r\n        if (sig.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        // If the version is correct return the signer address\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        } else {\r\n        // solium-disable-next-line arg-overflow\r\n            return ecrecover(hash, v, r, s);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * toEthSignedMessageHash\r\n    * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n    * and hash the result\r\n    */\r\n    function toEthSignedMessageHash(bytes32 hash)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(\r\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\r\n        );\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Auction state channel\r\n */\r\ncontract AuctionChannel {\r\n    \r\n    // phase constants\r\n    uint8 public constant PHASE_OPEN = 0;\r\n    uint8 public constant PHASE_CHALLENGE = 1;\r\n    uint8 public constant PHASE_CLOSED = 2;\r\n    \r\n    // auctioneer address\r\n    address public auctioneer;\r\n\r\n    // assistant address\r\n    address public assistant;\r\n\r\n    // current phase\r\n    uint8 public phase;\r\n\r\n    // minimum bid value\r\n    uint256 public minBidValue;\r\n\r\n    // challenge period in blocks\r\n    uint256 public challengePeriod;\r\n\r\n    // closing block number\r\n    uint256 public closingBlock;\r\n\r\n    // winner id\r\n    bytes public winnerBidder;\r\n\r\n    // winner bid value\r\n    uint256 public winnerBidValue;\r\n\r\n\r\n    /**\r\n     * CONSTRUCTOR\r\n     *\r\n     * @dev Initialize the AuctionChannel\r\n     * @param _auctioneer auctioneer address\r\n     * @param _assistant assistant address\r\n     * @param _challengePeriod challenge period in blocks\r\n     * @param _minBidValue minimum winner bid value\r\n     * @param _signatureAuctioneer signature of the auctioneer\r\n     * @param _signatureAssistant signature of the assistant\r\n     */ \r\n    constructor\r\n    (\r\n        address _auctioneer,\r\n        address _assistant,\r\n        uint256 _challengePeriod,\r\n        uint256 _minBidValue,\r\n        bytes _signatureAuctioneer,\r\n        bytes _signatureAssistant\r\n    )\r\n        public\r\n    {\r\n        bytes32 _fingerprint = keccak256(\r\n            abi.encodePacked(\r\n                \"openingAuctionChannel\",\r\n                _auctioneer,\r\n                _assistant,\r\n                _challengePeriod,\r\n                _minBidValue\r\n            )\r\n        );\r\n\r\n        _fingerprint = ECRecovery.toEthSignedMessageHash(_fingerprint);\r\n\r\n        require(_auctioneer == ECRecovery.recover(_fingerprint, _signatureAuctioneer));\r\n        require(_assistant == ECRecovery.recover(_fingerprint, _signatureAssistant));\r\n\r\n        auctioneer = _auctioneer;\r\n        assistant = _assistant;\r\n        challengePeriod = _challengePeriod;\r\n        minBidValue = _minBidValue;\r\n    }\r\n   \r\n    /**\r\n     * @dev Update winner bid\r\n     * @param _isAskBid is it AskBid\r\n     * @param _bidder bidder id\r\n     * @param _bidValue bid value\r\n     * @param _previousBidHash hash of the previous bid\r\n     * @param _signatureAssistant signature of the assistant\r\n     * @param _signatureAuctioneer signature of the auctioneer\r\n     */\r\n    function updateWinnerBid(\r\n        bool _isAskBid,\r\n        bytes _bidder,\r\n        uint256 _bidValue,\r\n        bytes _previousBidHash,\r\n        bytes _signatureAssistant,\r\n        bytes _signatureAuctioneer\r\n    ) \r\n        external\r\n    {\r\n        tryClose();\r\n\r\n        require(phase != PHASE_CLOSED);\r\n\r\n        require(!_isAskBid);\r\n        require(_bidValue > winnerBidValue);\r\n        require(_bidValue >= minBidValue);\r\n\r\n        bytes32 _fingerprint = keccak256(\r\n            abi.encodePacked(\r\n                \"auctionBid\",\r\n                _isAskBid,\r\n                _bidder,\r\n                _bidValue,\r\n                _previousBidHash\r\n            )\r\n        );\r\n\r\n        _fingerprint = ECRecovery.toEthSignedMessageHash(_fingerprint);\r\n\r\n        require(auctioneer == ECRecovery.recover(_fingerprint, _signatureAuctioneer));\r\n        require(assistant == ECRecovery.recover(_fingerprint, _signatureAssistant));\r\n        \r\n        winnerBidder = _bidder;\r\n        winnerBidValue = _bidValue;\r\n\r\n        // start challenge period\r\n        closingBlock = block.number + challengePeriod;\r\n        phase = PHASE_CHALLENGE;  \r\n    }\r\n\r\n    /**\r\n     * @dev Close the auction\r\n     */\r\n    function tryClose() public {\r\n        if (phase == PHASE_CHALLENGE && block.number > closingBlock) {\r\n            phase = PHASE_CLOSED;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"winnerBidValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBidValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assistant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isAskBid\",\"type\":\"bool\"},{\"name\":\"_bidder\",\"type\":\"bytes\"},{\"name\":\"_bidValue\",\"type\":\"uint256\"},{\"name\":\"_previousBidHash\",\"type\":\"bytes\"},{\"name\":\"_signatureAssistant\",\"type\":\"bytes\"},{\"name\":\"_signatureAuctioneer\",\"type\":\"bytes\"}],\"name\":\"updateWinnerBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PHASE_CHALLENGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctioneer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PHASE_OPEN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tryClose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winnerBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PHASE_CLOSED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_auctioneer\",\"type\":\"address\"},{\"name\":\"_assistant\",\"type\":\"address\"},{\"name\":\"_challengePeriod\",\"type\":\"uint256\"},{\"name\":\"_minBidValue\",\"type\":\"uint256\"},{\"name\":\"_signatureAuctioneer\",\"type\":\"bytes\"},{\"name\":\"_signatureAssistant\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"AuctionChannel","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ef0f527e21c4bc56ce9122d8d92f59c018a583190000000000000000000000002da262a1b2eeab1f2b4c1f1317ae43cde0b5b8b500000000000000000000000000000000000000000000000000000000000002d0000000000000000000000000000000000000000000000000000000000000c35000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000041490b7565efcfb0948a565142d718d1150e278eda4d390443c0fe7fa0237432c80a10b1524025f9190cb91086eba7292f48a839757b82c41a8819283007a125df1b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412923053bcb62959b41fc9d900ee5621a806e258c67426c92dd99631fc8980f786685e127e5f19cc42db7ca829e33668a1c9a4bcd9f387535ea54a971fe4f159c1c00000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://6a449c2452fbfee34654d9828f314d8fd9f288d86f69fab13432befb4b1ee377"}]}