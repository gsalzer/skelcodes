{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\tcontract CashCow {\r\n\taddress public owner;\r\n\tuint256 private numberOfEntries;\r\n\tuint256 public cycleLength = 100;\r\n\tuint256 public price = 71940622590480000;\r\n\tuint256 public totalValue = 0;\r\n\tstruct Player {\r\n\t\tuint256 lastCashOut;\r\n\t\tuint256[] entries;\r\n\t}\r\n\t// The address of the player and => the user info\r\n\tmapping(address => Player) public playerInfo;\r\n\r\n\tfunction() public payable {}\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t\tplayerInfo[msg.sender].lastCashOut = 0;\r\n\t\tplayerInfo[msg.sender].entries.push(numberOfEntries);\r\n\t\tnumberOfEntries++;\r\n\t}\r\n\r\n\tfunction kill() public {\r\n\t\tif(msg.sender == owner) selfdestruct(owner);\r\n\t}\r\n\r\n\r\n\t//returns amount of ether a player is able to withdraw \r\n\tfunction checkBalance(address player) public constant returns(uint256){\r\n\t\tuint256 lastCashOut = playerInfo[player].lastCashOut;\r\n\t\tuint256[] entries = playerInfo[player].entries;\r\n\t\tif(entries.length == 0){\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 totalBalance = 0;\r\n\t\tfor(uint i = 0; i < entries.length; i++){\r\n\t\t\tuint256 entry = entries[i];\r\n\t\t\tuint256 cycle = entry / cycleLength;\r\n\t\t\tuint256 cycleEnd = (cycle+1) * cycleLength;\r\n\t\t\t//check if we have completed that cycle\r\n\t\t\tif(numberOfEntries >= cycleEnd) {\r\n\t\t\t    uint256 entryBalence;\r\n\t\t\t\tif(lastCashOut <= entry) {\r\n\t\t\t\t\tentryBalence = calculateBalance(entry % 100, 99);\r\n\t\t\t\t\ttotalBalance += entryBalence;\r\n\t\t\t\t}\r\n\t\t\t\tif(lastCashOut > entry && lastCashOut < cycleEnd){\r\n\t\t\t\t\tentryBalence = calculateBalance(lastCashOut % 100, 99);\r\n\t\t\t\t\ttotalBalance += entryBalence;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(numberOfEntries < cycleEnd) {\r\n\t\t\t\tif(lastCashOut <= entry) {\r\n\t\t\t\t\tentryBalence = calculateBalance(entry % 100, (numberOfEntries - 1) % 100);\r\n\t\t\t\t\ttotalBalance += entryBalence;\r\n\t\t\t\t}\r\n\t\t\t\tif(lastCashOut > entry && lastCashOut < numberOfEntries){\r\n\t\t\t\t\tentryBalence = calculateBalance(lastCashOut % 100, (numberOfEntries - 1) % 100);\r\n\t\t\t\t\ttotalBalance += entryBalence;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn totalBalance;\r\n\t}\r\n\r\n\tfunction calculateBalance(uint256 start, uint256 stop) public constant returns(uint256){\r\n\t\tif (start >= stop) return 0;\r\n\t\tuint256 balance  = 0;\r\n\t\tfor(uint i = start + 1; i <= stop; i++) {\r\n\t\t\tbalance += price / i;\r\n\t\t}\r\n\t\treturn balance;\r\n\t}\r\n\r\n\t// buy into the contract\r\n\tfunction buy() public payable {\r\n\t\trequire(msg.value >= price);\r\n\t\tplayerInfo[msg.sender].entries.push(numberOfEntries);\r\n\t\tnumberOfEntries++;\r\n\t\ttotalValue += msg.value;\r\n\t\t//check if this starts a new cycle\r\n\t\tif(numberOfEntries % cycleLength == 0){\r\n\t\t\tplayerInfo[owner].entries.push(numberOfEntries);\r\n\t\t\tnumberOfEntries++;\r\n\t\t} \r\n\t}\r\n\r\n\r\n\tfunction checkDeletable(address player) public constant returns(bool){\r\n\t\tuint256 finalEntry = playerInfo[player].entries[playerInfo[player].entries.length - 1];\r\n\t\tuint256 lastCycle = (finalEntry / cycleLength);\r\n\t\tuint256 cycleEnd = (lastCycle + 1) * cycleLength;\r\n\t\treturn (numberOfEntries > cycleEnd);\r\n\r\n\t}\r\n\r\n\tfunction withdraw() public{\r\n\t\tuint256 balance = checkBalance(msg.sender); //check the balence to be withdrawn\r\n\t\tif(balance == 0) return;\r\n\t\tif(checkDeletable(msg.sender)){\r\n\t\t\tdelete playerInfo[msg.sender];\r\n\t\t}\r\n\t\telse {\r\n\t\t    playerInfo[msg.sender].lastCashOut = numberOfEntries - 1;\r\n\t\t}\r\n\t\ttotalValue -= balance;\r\n\t\tmsg.sender.transfer(balance);\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerInfo\",\"outputs\":[{\"name\":\"lastCashOut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"checkDeletable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"calculateBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cycleLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"CashCow","CompilerVersion":"v0.4.25-nightly.2018.5.16+commit.3897c367","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d5f82d117947a6b8390fc36071dbc9c011c71fdaefe3cce6249ca22d5e1ad74c"}]}