{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  \r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// Used for function invoke restriction\r\ncontract Owned {\r\n\r\n    address public owner; // temporary address\r\n\r\n    function Owned() internal {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner)\r\n            revert();\r\n        _; // function code inserted here\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner returns (bool success) {\r\n        if (msg.sender != owner)\r\n            revert();\r\n        owner = _newOwner;\r\n        return true;\r\n        \r\n    }\r\n}\r\n\r\ncontract TKP is Owned {\r\n    using SafeMath for uint256;\r\n\r\n    address[]   public  TKPUsers;\r\n    uint256     public  totalSupply;\r\n    uint8       public  decimals;\r\n    string      public  name;\r\n    string      public  symbol;\r\n    bool        public  tokenTransfersFrozen;\r\n    bool        public  tokenMintingEnabled;\r\n    bool        public  contractLaunched;\r\n\r\n    mapping (address => mapping (address => uint256))   public allowance;\r\n    mapping (address => uint256)                        public balances;\r\n    mapping (address => uint256)                        public icoBalances;\r\n    mapping (address => uint256)                        public TKPUserArrayIdentifier;\r\n    mapping (address => bool)                           public TKPUserRegistered;\r\n\r\n    event Transfer(address indexed _sender, address indexed _recipient, uint256 _amount);\r\n    event Approve(address indexed _owner, address indexed _spender, uint256 _amount);\r\n    event LaunchContract(address indexed _launcher, bool _launched);\r\n    event FreezeTokenTransfers(address indexed _invoker, bool _frozen);\r\n    event ThawTokenTransfers(address indexed _invoker, bool _thawed);\r\n    event MintTokens(address indexed _minter, uint256 _amount, bool indexed _minted);\r\n    event TokenMintingDisabled(address indexed _invoker, bool indexed _disabled);\r\n    event TokenMintingEnabled(address indexed _invoker, bool indexed _enabled);\r\n\r\n    function TKP() public {\r\n        name = \"Trish Kelly Portfolio Coin\";\r\n        symbol = \"TKP\";\r\n        decimals = 18;\r\n       \r\n        totalSupply = 60000000000000000000000000;\r\n        balances[msg.sender] = balances[msg.sender].add(totalSupply);\r\n        tokenTransfersFrozen = true;\r\n        tokenMintingEnabled = false;\r\n        contractLaunched = false;\r\n    }\r\n\r\n  \r\n    function transactionReplay(address _receiver, uint256 _amount)\r\n        onlyOwner\r\n        public\r\n        returns (bool replayed)\r\n    {\r\n        require(transferCheck(msg.sender, _receiver, _amount));\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_receiver] = balances[_receiver].add(_amount);\r\n        Transfer(msg.sender, _receiver, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Used to launch the contract, and enabled token minting\r\n    function launchContract() public onlyOwner {\r\n        require(!contractLaunched);\r\n        tokenTransfersFrozen = false;\r\n        tokenMintingEnabled = true;\r\n        contractLaunched = true;\r\n        LaunchContract(msg.sender, true);\r\n    }\r\n\r\n    function disableTokenMinting() public onlyOwner returns (bool disabled) {\r\n        tokenMintingEnabled = false;\r\n        TokenMintingDisabled(msg.sender, true);\r\n        return true;\r\n    }\r\n\r\n    function enableTokenMinting() public onlyOwner returns (bool enabled) {\r\n        tokenMintingEnabled = true;\r\n        TokenMintingEnabled(msg.sender, true);\r\n        return true;\r\n    }\r\n\r\n    function freezeTokenTransfers() public onlyOwner returns (bool success) {\r\n        tokenTransfersFrozen = true;\r\n        FreezeTokenTransfers(msg.sender, true);\r\n        return true;\r\n    }\r\n\r\n    function thawTokenTransfers() public onlyOwner returns (bool success) {\r\n        tokenTransfersFrozen = false;\r\n        ThawTokenTransfers(msg.sender, true);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Used to transfer funds\r\n    /// @param _receiver Eth address to send TKP tokens too\r\n    /// @param _amount The amount of TKP tokens in wei to send\r\n    function transfer(address _receiver, uint256 _amount)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(transferCheck(msg.sender, _receiver, _amount));\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_receiver] = balances[_receiver].add(_amount);\r\n        Transfer(msg.sender, _receiver, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Used to transfer funds on behalf of owner to receiver\r\n\r\n    function transferFrom(address _owner, address _receiver, uint256 _amount) \r\n        public \r\n        returns (bool success)\r\n    {\r\n        require(allowance[_owner][msg.sender] >= _amount);\r\n        require(transferCheck(_owner, _receiver, _amount));\r\n        allowance[_owner][msg.sender] = allowance[_owner][msg.sender].sub(_amount);\r\n        balances[_owner] =  balances[_owner].sub(_amount);\r\n        balances[_receiver] = balances[_receiver].add(_amount);\r\n        Transfer(_owner, _receiver, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Used to approve someone to send funds on your behalf\r\n    /// @param _spender The eth address of the person you are approving\r\n    /// @param _amount The amount of TKP tokens _spender is allowed to send (in wei)\r\n    function approve(address _spender, uint256 _amount)\r\n        public\r\n        returns (bool approved)\r\n    {\r\n        require(_amount > 0);\r\n        require(balances[msg.sender] >= _amount);\r\n        allowance[msg.sender][_spender] = allowance[msg.sender][_spender].add(_amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Used to burn tokens and decrease total supply\r\n    /// @param _amount The amount of TKP tokens in wei to burn\r\n    function tokenBurner(uint256 _amount) public\r\n        onlyOwner\r\n        returns (bool burned)\r\n    {\r\n        require(_amount > 0);\r\n        require(totalSupply.sub(_amount) > 0);\r\n        require(balances[msg.sender] > _amount);\r\n        require(balances[msg.sender].sub(_amount) > 0);\r\n        totalSupply = totalSupply.sub(_amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        Transfer(msg.sender, 0, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Low level function Used to create new tokens and increase total supply\r\n    /// @param _amount The amount of TKP tokens in wei to create\r\n\r\n   function tokenMinter(uint256 _amount)\r\n        internal\r\n        view\r\n        returns (bool valid)\r\n    {\r\n        require(tokenMintingEnabled);\r\n        require(_amount > 0);\r\n        require(totalSupply.add(_amount) > 0);\r\n        require(totalSupply.add(_amount) > totalSupply);\r\n        return true;\r\n    }\r\n    \r\n\r\n    /// @notice Used to create new tokens and increase total supply\r\n    /// @param _amount The amount of TKP tokens in wei to create\r\n    function tokenFactory(uint256 _amount) public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        require(tokenMinter(_amount));\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[msg.sender] = balances[msg.sender].add(_amount);\r\n        Transfer(0, msg.sender, _amount);\r\n        return true;\r\n    }\r\n\r\n  \r\n    /// @notice Reusable code to do sanity check of transfer variables\r\n        function transferCheck(address _sender, address _receiver, uint256 _amount)\r\n        private\r\n        constant\r\n        returns (bool success)\r\n    {\r\n        require(!tokenTransfersFrozen);\r\n        require(_amount > 0);\r\n        require(_receiver != address(0));\r\n        require(balances[_sender].sub(_amount) >= 0);\r\n        require(balances[_receiver].add(_amount) > 0);\r\n        require(balances[_receiver].add(_amount) > balances[_receiver]);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Used to retrieve total supply\r\n    function totalSupply() \r\n        public\r\n        constant\r\n        returns (uint256 _totalSupply)\r\n    {\r\n        return totalSupply;\r\n    }\r\n\r\n    /// @notice Used to look up balance of a person\r\n    function balanceOf(address _person)\r\n        public\r\n        constant\r\n        returns (uint256 _balance)\r\n    {\r\n        return balances[_person];\r\n    }\r\n\r\n    /// @notice Used to look up the allowance of someone\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        constant \r\n        returns (uint256 _amount)\r\n    {\r\n        return allowance[_owner][_spender];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"approved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"launchContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTokenMinting\",\"outputs\":[{\"name\":\"enabled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transactionReplay\",\"outputs\":[{\"name\":\"replayed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"thawTokenTransfers\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_person\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTransfersFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokenBurner\",\"outputs\":[{\"name\":\"burned\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"TKPUserArrayIdentifier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icoBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableTokenMinting\",\"outputs\":[{\"name\":\"disabled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractLaunched\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"TKPUserRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenMintingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freezeTokenTransfers\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TKPUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_launcher\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_launched\",\"type\":\"bool\"}],\"name\":\"LaunchContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_frozen\",\"type\":\"bool\"}],\"name\":\"FreezeTokenTransfers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_thawed\",\"type\":\"bool\"}],\"name\":\"ThawTokenTransfers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_minted\",\"type\":\"bool\"}],\"name\":\"MintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_disabled\",\"type\":\"bool\"}],\"name\":\"TokenMintingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_invoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"TokenMintingEnabled\",\"type\":\"event\"}]","ContractName":"TKP","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://08b7022751be5fb7509b6a4a7cf1ae8e43a8b56235e35479071fcd0e2797ec0e"}]}