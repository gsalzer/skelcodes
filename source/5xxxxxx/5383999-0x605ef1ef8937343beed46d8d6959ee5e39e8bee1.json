{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ninterface LandManagementInterface {\r\n    function ownerAddress() external view returns (address);\r\n\r\n    function managerAddress() external view returns (address);\r\n\r\n    function communityAddress() external view returns (address);\r\n\r\n    function dividendManagerAddress() external view returns (address);\r\n\r\n    function walletAddress() external view returns (address);\r\n    //    function unicornTokenAddress() external view returns (address);\r\n    function candyToken() external view returns (address);\r\n\r\n    function megaCandyToken() external view returns (address);\r\n\r\n    function userRankAddress() external view returns (address);\r\n\r\n    function candyLandAddress() external view returns (address);\r\n\r\n    function candyLandSaleAddress() external view returns (address);\r\n\r\n    function isUnicornContract(address _unicornContractAddress) external view returns (bool);\r\n\r\n    function paused() external view returns (bool);\r\n\r\n    function presaleOpen() external view returns (bool);\r\n\r\n    function firstRankForFree() external view returns (bool);\r\n\r\n    function ethLandSaleOpen() external view returns (bool);\r\n\r\n    function landPriceWei() external view returns (uint);\r\n\r\n    function landPriceCandy() external view returns (uint);\r\n\r\n    function registerInit(address _contract) external;\r\n}\r\n\r\ninterface UserRankInterface {\r\n    function buyNextRank() external;\r\n\r\n    function buyRank(uint _index) external;\r\n\r\n    function getIndividualPrice(address _user, uint _index) external view returns (uint);\r\n\r\n    function getRankPriceEth(uint _index) external view returns (uint);\r\n\r\n    function getRankPriceCandy(uint _index) external view returns (uint);\r\n\r\n    function getRankLandLimit(uint _index) external view returns (uint);\r\n\r\n    function getRankTitle(uint _index) external view returns (string);\r\n\r\n    function getUserRank(address _user) external view returns (uint);\r\n\r\n    function getUserLandLimit(address _user) external view returns (uint);\r\n\r\n    function ranksCount() external view returns (uint);\r\n\r\n    function getNextRank(address _user) external returns (uint);\r\n\r\n    function getPreSaleRank(address owner, uint _index) external;\r\n\r\n    function getRank(address owner, uint _index) external;\r\n}\r\n\r\n\r\ncontract LandAccessControl {\r\n\r\n    LandManagementInterface public landManagement;\r\n\r\n    function LandAccessControl(address _landManagementAddress) public {\r\n        landManagement = LandManagementInterface(_landManagementAddress);\r\n        landManagement.registerInit(this);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == landManagement.ownerAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == landManagement.managerAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyCommunity() {\r\n        require(msg.sender == landManagement.communityAddress());\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!landManagement.paused());\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(landManagement.paused());\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhileEthSaleOpen {\r\n        require(landManagement.ethLandSaleOpen());\r\n        _;\r\n    }\r\n\r\n    modifier onlyLandManagement() {\r\n        require(msg.sender == address(landManagement));\r\n        _;\r\n    }\r\n\r\n    modifier onlyUnicornContract() {\r\n        require(landManagement.isUnicornContract(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyCandyLand() {\r\n        require(msg.sender == address(landManagement.candyLandAddress()));\r\n        _;\r\n    }\r\n\r\n\r\n    modifier whilePresaleOpen() {\r\n        require(landManagement.presaleOpen());\r\n        _;\r\n    }\r\n\r\n    function isGamePaused() external view returns (bool) {\r\n        return landManagement.paused();\r\n    }\r\n}\r\n\r\n\r\ncontract CanReceiveApproval {\r\n    event ReceiveApproval(address from, uint256 value, address token);\r\n\r\n    mapping(bytes4 => bool) allowedFuncs;\r\n\r\n    modifier onlyPayloadSize(uint numwords) {\r\n        assert(msg.data.length >= numwords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n    modifier onlySelf(){\r\n        require(msg.sender == address(this));\r\n        _;\r\n    }\r\n\r\n\r\n    function bytesToBytes4(bytes b) internal pure returns (bytes4 out) {\r\n        for (uint i = 0; i < 4; i++) {\r\n            out |= bytes4(b[i] & 0xFF) >> (i << 3);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract CandyLandInterface is ERC20 {\r\n    function transferFromSystem(address _from, address _to, uint256 _value) public returns (bool);\r\n\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n\r\n    function MAX_SUPPLY() external view returns (uint);\r\n}\r\n\r\ninterface DividendManagerInterface {\r\n    function payDividend() external payable;\r\n}\r\n//TODO marketplace\r\ncontract CandyLandSale is LandAccessControl, CanReceiveApproval {\r\n    using SafeMath for uint256;\r\n\r\n    UserRankInterface public userRank;\r\n    ERC20 public candyToken;\r\n    CandyLandInterface public candyLand;\r\n\r\n    event FundsTransferred(address dividendManager, uint value);\r\n    event TokensTransferred(address wallet, uint value);\r\n    event BuyLand(address indexed owner, uint count);\r\n\r\n\r\n    function CandyLandSale(address _landManagementAddress) LandAccessControl(_landManagementAddress) public {\r\n        allowedFuncs[bytes4(keccak256(\"_receiveBuyLandForCandy(address,uint256)\"))] = true;\r\n    }\r\n\r\n\r\n    function init() onlyLandManagement whenPaused external {\r\n        userRank = UserRankInterface(landManagement.userRankAddress());\r\n        candyToken = ERC20(landManagement.candyToken());\r\n        candyLand = CandyLandInterface(landManagement.candyLandAddress());\r\n    }\r\n    \r\n    function() public payable {\r\n        buyLandForEth();\r\n    }\r\n\r\n    function buyLandForEth() onlyWhileEthSaleOpen public payable {\r\n        require(candyLand.totalSupply() <= candyLand.MAX_SUPPLY());\r\n        //MAX_SUPPLY проверяется так же в _mint\r\n        uint landPriceWei = landManagement.landPriceWei();\r\n        require(msg.value >= landPriceWei);\r\n\r\n        uint weiAmount = msg.value;\r\n        uint landCount = 0;\r\n        uint _landAmount = 0;\r\n        uint userRankIndex = userRank.getUserRank(msg.sender);\r\n        uint ranksCount = userRank.ranksCount();\r\n\r\n        for (uint i = userRankIndex; i <= ranksCount && weiAmount >= landPriceWei; i++) {\r\n\r\n            uint userLandLimit = userRank.getRankLandLimit(i).sub(candyLand.balanceOf(msg.sender)).sub(_landAmount);\r\n            landCount = weiAmount.div(landPriceWei);\r\n\r\n            if (landCount <= userLandLimit) {\r\n\r\n                _landAmount = _landAmount.add(landCount);\r\n                weiAmount = weiAmount.sub(landCount.mul(landPriceWei));\r\n                break;\r\n\r\n            } else {\r\n                /*\r\n                  Заведомо больше чем лимит, поэтому забираем весь лимит и если это не последнний ранг и есть\r\n                  деньги на следубщий покупаем его и переходим на новый шаг.\r\n                */\r\n                _landAmount = _landAmount.add(userLandLimit);\r\n                weiAmount = weiAmount.sub(userLandLimit.mul(landPriceWei));\r\n\r\n                uint nextPrice = (i == 0 && landManagement.firstRankForFree()) ? 0 : userRank.getRankPriceEth(i + 1);\r\n\r\n                if (i == ranksCount || weiAmount < nextPrice) {\r\n                    break;\r\n                }\r\n\r\n                userRank.getNextRank(msg.sender);\r\n                weiAmount = weiAmount.sub(nextPrice);\r\n            }\r\n\r\n        }\r\n\r\n        require(_landAmount > 0);\r\n        candyLand.mint(msg.sender, _landAmount);\r\n\r\n        emit BuyLand(msg.sender, _landAmount);\r\n\r\n        if (weiAmount > 0) {\r\n            msg.sender.transfer(weiAmount);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function buyLandForCandy(uint _count) external {\r\n        _buyLandForCandy(msg.sender, _count);\r\n    }\r\n\r\n    function _receiveBuyLandForCandy(address _owner, uint _count) onlySelf onlyPayloadSize(2) public {\r\n        _buyLandForCandy(_owner, _count);\r\n    }\r\n\r\n\r\n    function findRankByCount(uint _rank, uint _totalRanks, uint _balance, uint _count) internal view returns (uint, uint) {\r\n        uint landLimit = userRank.getRankLandLimit(_rank).sub(_balance);\r\n        if (_count > landLimit && _rank < _totalRanks) {\r\n            return findRankByCount(_rank + 1, _totalRanks, _balance, _count);\r\n        }\r\n        return (_rank, landLimit);\r\n    }\r\n\r\n    function getBuyLandInfo(address _owner, uint _count) public view returns (uint, uint, uint){\r\n        uint rank = userRank.getUserRank(_owner);\r\n        uint neededRank;\r\n        uint landLimit;\r\n        uint totalPrice;\r\n        (neededRank, landLimit) = findRankByCount(\r\n            rank,\r\n            userRank.ranksCount(),\r\n            candyLand.balanceOf(_owner),\r\n            _count\r\n        );\r\n\r\n        uint landPriceCandy = landManagement.landPriceCandy();\r\n\r\n        if (_count > landLimit) {\r\n            _count = landLimit;\r\n        }\r\n        require(_count > 0);\r\n\r\n        if (rank < neededRank) {\r\n            totalPrice = userRank.getIndividualPrice(_owner, neededRank);\r\n            if (rank == 0 && landManagement.firstRankForFree()) {\r\n                totalPrice = totalPrice.sub(userRank.getRankPriceCandy(1));\r\n            }\r\n        }\r\n        totalPrice = totalPrice.add(_count.mul(landPriceCandy));\r\n\r\n        return (rank, neededRank, totalPrice);\r\n    }\r\n\r\n    function _buyLandForCandy(address _owner, uint _count) internal {\r\n        require(_count > 0);\r\n        require(candyLand.totalSupply().add(_count) <= candyLand.MAX_SUPPLY());\r\n        uint rank;\r\n        uint neededRank;\r\n        uint totalPrice;\r\n\r\n        (rank, neededRank, totalPrice) = getBuyLandInfo(_owner, _count);\r\n        require(candyToken.transferFrom(_owner, this, totalPrice));\r\n        if (rank < neededRank) {\r\n            userRank.getRank(_owner, neededRank);\r\n        }\r\n        candyLand.mint(_owner, _count);\r\n        emit BuyLand(_owner, _count);\r\n    }\r\n\r\n    function createPresale(address _owner, uint _count, uint _rankIndex) onlyManager whilePresaleOpen public {\r\n        require(candyLand.totalSupply().add(_count) <= candyLand.MAX_SUPPLY());\r\n        userRank.getRank(_owner, _rankIndex);\r\n        candyLand.mint(_owner, _count);\r\n    }\r\n\r\n\r\n    function withdrawTokens() onlyManager public {\r\n        require(candyToken.balanceOf(this) > 0);\r\n        candyToken.transfer(landManagement.walletAddress(), candyToken.balanceOf(this));\r\n        emit TokensTransferred(landManagement.walletAddress(), candyToken.balanceOf(this));\r\n    }\r\n\r\n\r\n    function transferEthersToDividendManager(uint _value) onlyManager public {\r\n        require(address(this).balance >= _value);\r\n        DividendManagerInterface dividendManager = DividendManagerInterface(landManagement.dividendManagerAddress());\r\n        dividendManager.payDividend.value(_value)();\r\n        emit FundsTransferred(landManagement.dividendManagerAddress(), _value);\r\n    }\r\n\r\n\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public {\r\n        //require(_token == landManagement.candyToken());\r\n        require(msg.sender == address(candyToken));\r\n        require(allowedFuncs[bytesToBytes4(_extraData)]);\r\n        require(address(this).call(_extraData));\r\n        emit ReceiveApproval(_from, _value, _token);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isGamePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"candyLand\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"buyLandForCandy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getBuyLandInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userRank\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"landManagement\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"_receiveBuyLandForCandy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"candyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"_rankIndex\",\"type\":\"uint256\"}],\"name\":\"createPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyLandForEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferEthersToDividendManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_landManagementAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"dividendManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FundsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"BuyLand\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ReceiveApproval\",\"type\":\"event\"}]","ContractName":"CandyLandSale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000004db129c33d1a56333deeafbae6ae5c8a1598b926","Library":"","SwarmSource":"bzzr://5e201118a7bc46653f5bc1f7bdc9411af62e1ffeaf45075dd183493a973e359f"}]}