{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function changeOwner(address _newOwner) onlyOwner public {\r\n        require(_newOwner != address(0));\r\n        OwnerChanged(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract ContractStakeToken is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum TypeStake {DAY, WEEK, MONTH}\r\n    TypeStake typeStake;\r\n    enum StatusStake {ACTIVE, COMPLETED, CANCEL}\r\n\r\n    struct TransferInStructToken {\r\n        uint256 indexStake;\r\n        bool isRipe;\r\n    }\r\n\r\n    struct StakeStruct {\r\n        address owner;\r\n        uint256 amount;\r\n        TypeStake stakeType;\r\n        uint256 time;\r\n        StatusStake status;\r\n    }\r\n\r\n    StakeStruct[] arrayStakesToken;\r\n\r\n    uint256[] public rates = [101, 109, 136];\r\n\r\n    uint256 public totalDepositTokenAll;\r\n\r\n    uint256 public totalWithdrawTokenAll;\r\n\r\n    mapping (address => uint256) balancesToken;\r\n    mapping (address => uint256) totalDepositToken;\r\n    mapping (address => uint256) totalWithdrawToken;\r\n    mapping (address => TransferInStructToken[]) transferInsToken;\r\n    mapping (address => bool) public contractUsers;\r\n\r\n    event Withdraw(address indexed receiver, uint256 amount);\r\n\r\n    function ContractStakeToken(address _owner) public {\r\n        require(_owner != address(0));\r\n        owner = _owner;\r\n        //owner = msg.sender; // for test's\r\n    }\r\n\r\n    modifier onlyOwnerOrUser() {\r\n        require(msg.sender == owner || contractUsers[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Add an contract admin\r\n    */\r\n    function setContractUser(address _user, bool _isUser) public onlyOwner {\r\n        contractUsers[_user] = _isUser;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function() payable public {\r\n        //deposit(msg.sender, msg.value, TypeStake.DAY, now);\r\n    }\r\n\r\n    function depositToken(address _investor, TypeStake _stakeType, uint256 _time, uint256 _value) onlyOwnerOrUser external returns (bool){\r\n        require(_investor != address(0));\r\n        require(_value > 0);\r\n        require(transferInsToken[_investor].length < 31);\r\n\r\n        balancesToken[_investor] = balancesToken[_investor].add(_value);\r\n        totalDepositToken[_investor] = totalDepositToken[_investor].add(_value);\r\n        totalDepositTokenAll = totalDepositTokenAll.add(_value);\r\n        uint256 indexStake = arrayStakesToken.length;\r\n\r\n        arrayStakesToken.push(StakeStruct({\r\n            owner : _investor,\r\n            amount : _value,\r\n            stakeType : _stakeType,\r\n            time : _time,\r\n            status : StatusStake.ACTIVE\r\n            }));\r\n        transferInsToken[_investor].push(TransferInStructToken(indexStake, false));\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function checks how much you can remove the Token\r\n     * @param _address The address of depositor.\r\n     * @param _now The current time.\r\n     * @return the amount of Token that can be withdrawn from contract\r\n     */\r\n    function validWithdrawToken(address _address, uint256 _now) public returns (uint256){\r\n        require(_address != address(0));\r\n        uint256 amount = 0;\r\n\r\n        if (balancesToken[_address] <= 0 || transferInsToken[_address].length <= 0) {\r\n            return amount;\r\n        }\r\n\r\n        for (uint i = 0; i < transferInsToken[_address].length; i++) {\r\n            uint256 indexCurStake = transferInsToken[_address][i].indexStake;\r\n            TypeStake stake = arrayStakesToken[indexCurStake].stakeType;\r\n            uint256 stakeTime = arrayStakesToken[indexCurStake].time;\r\n            uint256 stakeAmount = arrayStakesToken[indexCurStake].amount;\r\n            uint8 currentStake = 0;\r\n            if (arrayStakesToken[transferInsToken[_address][i].indexStake].status == StatusStake.CANCEL) {\r\n                amount = amount.add(stakeAmount);\r\n                transferInsToken[_address][i].isRipe = true;\r\n                continue;\r\n            }\r\n            if (stake == TypeStake.DAY) {\r\n                currentStake = 0;\r\n                if (_now < stakeTime.add(1 days)) continue;\r\n            }\r\n            if (stake == TypeStake.WEEK) {\r\n                currentStake = 1;\r\n                if (_now < stakeTime.add(7 days)) continue;\r\n            }\r\n            if (stake == TypeStake.MONTH) {\r\n                currentStake = 2;\r\n                if (_now < stakeTime.add(730 hours)) continue;\r\n            }\r\n            uint256 amountHours = _now.sub(stakeTime).div(1 hours);\r\n            stakeAmount = calculator(currentStake, stakeAmount, amountHours);\r\n            amount = amount.add(stakeAmount);\r\n            transferInsToken[_address][i].isRipe = true;\r\n            arrayStakesToken[transferInsToken[_address][i].indexStake].status = StatusStake.COMPLETED;\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function withdrawToken(address _address) onlyOwnerOrUser public returns (uint256){\r\n        require(_address != address(0));\r\n        uint256 _currentTime = now;\r\n        _currentTime = 1525651200; // for test\r\n        uint256 _amount = validWithdrawToken(_address, _currentTime);\r\n        require(_amount > 0);\r\n        totalWithdrawToken[_address] = totalWithdrawToken[_address].add(_amount);\r\n        totalWithdrawTokenAll = totalWithdrawTokenAll.add(_amount);\r\n        while (clearTransferInsToken(_address) == false) {\r\n            clearTransferInsToken(_address);\r\n        }\r\n        Withdraw(_address, _amount);\r\n        return _amount;\r\n    }\r\n\r\n    function clearTransferInsToken(address _owner) private returns (bool) {\r\n        for (uint i = 0; i < transferInsToken[_owner].length; i++) {\r\n            if (transferInsToken[_owner][i].isRipe == true) {\r\n                balancesToken[_owner] = balancesToken[_owner].sub(arrayStakesToken[transferInsToken[_owner][i].indexStake].amount);\r\n                removeMemberArrayToken(_owner, i);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function removeMemberArrayToken(address _address, uint index) private {\r\n        if (index >= transferInsToken[_address].length) return;\r\n        for (uint i = index; i < transferInsToken[_address].length - 1; i++) {\r\n            transferInsToken[_address][i] = transferInsToken[_address][i + 1];\r\n        }\r\n        delete transferInsToken[_address][transferInsToken[_address].length - 1];\r\n        transferInsToken[_address].length--;\r\n    }\r\n\r\n    function balanceOfToken(address _owner) public view returns (uint256 balance) {\r\n        return balancesToken[_owner];\r\n    }\r\n\r\n    function cancel(uint256 _index, address _address) onlyOwnerOrUser public returns (bool _result) {\r\n        require(_index >= 0);\r\n        require(_address != address(0));\r\n        if(_address != arrayStakesToken[_index].owner){\r\n            return false;\r\n        }\r\n        arrayStakesToken[_index].status = StatusStake.CANCEL;\r\n        return true;\r\n    }\r\n\r\n    function withdrawOwner(uint256 _amount) public onlyOwner returns (bool) {\r\n        require(this.balance >= _amount);\r\n        owner.transfer(_amount);\r\n        Withdraw(owner, _amount);\r\n    }\r\n\r\n    function changeRates(uint8 _numberRate, uint256 _percent) onlyOwnerOrUser public returns (bool) {\r\n        require(_percent >= 0);\r\n        require(0 <= _numberRate && _numberRate < 3);\r\n        rates[_numberRate] = _percent.add(100);\r\n        return true;\r\n\r\n    }\r\n\r\n    function getTokenStakeByIndex(uint256 _index) onlyOwnerOrUser public view returns (\r\n        address _owner,\r\n        uint256 _amount,\r\n        TypeStake _stakeType,\r\n        uint256 _time,\r\n        StatusStake _status\r\n    ) {\r\n        require(_index < arrayStakesToken.length);\r\n        _owner = arrayStakesToken[_index].owner;\r\n        _amount = arrayStakesToken[_index].amount;\r\n        _stakeType = arrayStakesToken[_index].stakeType;\r\n        _time = arrayStakesToken[_index].time;\r\n        _status = arrayStakesToken[_index].status;\r\n    }\r\n\r\n    function getTokenTransferInsByAddress(address _address, uint256 _index) onlyOwnerOrUser public view returns (\r\n        uint256 _indexStake,\r\n        bool _isRipe\r\n    ) {\r\n        require(_index < transferInsToken[_address].length);\r\n        _indexStake = transferInsToken[_address][_index].indexStake;\r\n        _isRipe = transferInsToken[_address][_index].isRipe;\r\n    }\r\n\r\n    function getCountTransferInsToken(address _address) public view returns (uint256 _count) {\r\n        _count = transferInsToken[_address].length;\r\n    }\r\n\r\n    function getCountStakesToken() public view returns (uint256 _count) {\r\n        _count = arrayStakesToken.length;\r\n    }\r\n\r\n    function getTotalTokenDepositByAddress(address _owner) public view returns (uint256 _amountToken) {\r\n        return totalDepositToken[_owner];\r\n    }\r\n\r\n    function getTotalTokenWithdrawByAddress(address _owner) public view returns (uint256 _amountToken) {\r\n        return totalWithdrawToken[_owner];\r\n    }\r\n\r\n    function removeContract() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function calculator(uint8 _currentStake, uint256 _amount, uint256 _amountHours) public view returns (uint256 stakeAmount){\r\n        uint32 i = 0;\r\n        uint256 number = 0;\r\n        stakeAmount = _amount;\r\n        if (_currentStake == 0) {\r\n            number = _amountHours.div(24);\r\n        }\r\n        if (_currentStake == 1) {\r\n            number = _amountHours.div(168);\r\n        }\r\n        if (_currentStake == 2) {\r\n            number = _amountHours.div(730);\r\n        }\r\n        while(i < number){\r\n            stakeAmount= stakeAmount.mul(rates[_currentStake]).div(100);\r\n            i++;\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawTokenAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numberRate\",\"type\":\"uint8\"},{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"changeRates\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTotalTokenDepositByAddress\",\"outputs\":[{\"name\":\"_amountToken\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"cancel\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTokenStakeByIndex\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_stakeType\",\"type\":\"uint8\"},{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_stakeType\",\"type\":\"uint8\"},{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_now\",\"type\":\"uint256\"}],\"name\":\"validWithdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getCountTransferInsToken\",\"outputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTokenTransferInsByAddress\",\"outputs\":[{\"name\":\"_indexStake\",\"type\":\"uint256\"},{\"name\":\"_isRipe\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_isUser\",\"type\":\"bool\"}],\"name\":\"setContractUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCountStakesToken\",\"outputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfToken\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_currentStake\",\"type\":\"uint8\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_amountHours\",\"type\":\"uint256\"}],\"name\":\"calculator\",\"outputs\":[{\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDepositTokenAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTotalTokenWithdrawByAddress\",\"outputs\":[{\"name\":\"_amountToken\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"ContractStakeToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b827eb2b2eff57aa8928132b3e6890e2ee36a270","Library":"","SwarmSource":"bzzr://ea1833bacc75dbcee1b898383407acdf435256bb78d35c7b8c938551c153c9d0"}]}