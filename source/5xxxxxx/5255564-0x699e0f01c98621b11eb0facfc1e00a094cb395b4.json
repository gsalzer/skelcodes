{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint x, uint y) pure internal returns(uint) {\r\n      assert(x >= y);\r\n      uint z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n    \r\n     \r\n\r\n    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\r\n        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\r\n        return uint8(genNum % (maxRandom - min + 1)+min);\r\n    }\r\n}\r\n\r\ncontract Enums {\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_OWNER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT\r\n    }\r\n\r\n    enum AngelAura { \r\n        Blue, \r\n        Yellow, \r\n        Purple, \r\n        Orange, \r\n        Red, \r\n        Green \r\n    }\r\n}\r\ncontract AccessControl {\r\n    address public creatorAddress;\r\n    uint16 public totalSeraphims = 0;\r\n    mapping (address => bool) public seraphims;\r\n\r\n    bool public isMaintenanceMode = true;\r\n \r\n    modifier onlyCREATOR() {\r\n        require(msg.sender == creatorAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlySERAPHIM() {\r\n        require(seraphims[msg.sender] == true);\r\n        _;\r\n    }\r\n    \r\n    modifier isContractActive {\r\n        require(!isMaintenanceMode);\r\n        _;\r\n    }\r\n    \r\n    // Constructor\r\n    function AccessControl() public {\r\n        creatorAddress = msg.sender;\r\n    }\r\n    \r\n\r\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\r\n        if (seraphims[_newSeraphim] == false) {\r\n            seraphims[_newSeraphim] = true;\r\n            totalSeraphims += 1;\r\n        }\r\n    }\r\n    \r\n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\r\n        if (seraphims[_oldSeraphim] == true) {\r\n            seraphims[_oldSeraphim] = false;\r\n            totalSeraphims -= 1;\r\n        }\r\n    }\r\n\r\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\r\n        isMaintenanceMode = _isMaintaining;\r\n    }\r\n\r\n  \r\n} \r\n\r\ncontract IAngelCardData is AccessControl, Enums {\r\n    uint8 public totalAngelCardSeries;\r\n    uint64 public totalAngels;\r\n\r\n    \r\n    // write\r\n    // angels\r\n    function createAngelCardSeries(uint8 _angelCardSeriesId, uint _basePrice,  uint64 _maxTotal, uint8 _baseAura, uint16 _baseBattlePower, uint64 _liveTime) onlyCREATOR external returns(uint8);\r\n    function updateAngelCardSeries(uint8 _angelCardSeriesId, uint64 _newPrice, uint64 _newMaxTotal) onlyCREATOR external;\r\n    function setAngel(uint8 _angelCardSeriesId, address _owner, uint _price, uint16 _battlePower) onlySERAPHIM external returns(uint64);\r\n    function addToAngelExperienceLevel(uint64 _angelId, uint _value) onlySERAPHIM external;\r\n    function setAngelLastBattleTime(uint64 _angelId) onlySERAPHIM external;\r\n    function setAngelLastVsBattleTime(uint64 _angelId) onlySERAPHIM external;\r\n    function setLastBattleResult(uint64 _angelId, uint16 _value) onlySERAPHIM external;\r\n    function addAngelIdMapping(address _owner, uint64 _angelId) private;\r\n    function transferAngel(address _from, address _to, uint64 _angelId) onlySERAPHIM public returns(ResultCode);\r\n    function ownerAngelTransfer (address _to, uint64 _angelId)  public;\r\n    function updateAngelLock (uint64 _angelId, bool newValue) public;\r\n    function removeCreator() onlyCREATOR external;\r\n\r\n    // read\r\n    function getAngelCardSeries(uint8 _angelCardSeriesId) constant public returns(uint8 angelCardSeriesId, uint64 currentAngelTotal, uint basePrice, uint64 maxAngelTotal, uint8 baseAura, uint baseBattlePower, uint64 lastSellTime, uint64 liveTime);\r\n    function getAngel(uint64 _angelId) constant public returns(uint64 angelId, uint8 angelCardSeriesId, uint16 battlePower, uint8 aura, uint16 experience, uint price, uint64 createdTime, uint64 lastBattleTime, uint64 lastVsBattleTime, uint16 lastBattleResult, address owner);\r\n    function getOwnerAngelCount(address _owner) constant public returns(uint);\r\n    function getAngelByIndex(address _owner, uint _index) constant public returns(uint64);\r\n    function getTotalAngelCardSeries() constant public returns (uint8);\r\n    function getTotalAngels() constant public returns (uint64);\r\n    function getAngelLockStatus(uint64 _angelId) constant public returns (bool);\r\n}\r\n\r\ncontract ISponsoredLeaderboardData is AccessControl {\r\n\r\n  \r\n    uint16 public totalLeaderboards;\r\n    \r\n    //The reserved balance is the total balance outstanding on all open leaderboards. \r\n    //We keep track of this figure to prevent the developers from pulling out money currently pledged\r\n    uint public contractReservedBalance;\r\n    \r\n\r\n    function setMinMaxDays(uint8 _minDays, uint8 _maxDays) external ;\r\n        function openLeaderboard(uint8 numDays, string message) external payable ;\r\n        function closeLeaderboard(uint16 leaderboardId) onlySERAPHIM external;\r\n        \r\n        function setMedalsClaimed(uint16 leaderboardId) onlySERAPHIM external ;\r\n    function withdrawEther() onlyCREATOR external;\r\n  function getTeamFromLeaderboard(uint16 leaderboardId, uint8 rank) public constant returns (uint64 angelId, uint64 petId, uint64 accessoryId) ;\r\n    \r\n    function getLeaderboard(uint16 id) public constant returns (uint startTime, uint endTime, bool isLive, address sponsor, uint prize, uint8 numTeams, string message, bool medalsClaimed);\r\n      function newTeamOnEnd(uint16 leaderboardId, uint64 angelId, uint64 petId, uint64 accessoryId) onlySERAPHIM external;\r\n       function switchRankings (uint16 leaderboardId, uint8 spot,uint64 angel1ID, uint64 pet1ID, uint64 accessory1ID,uint64 angel2ID,uint64 pet2ID,uint64 accessory2ID) onlySERAPHIM external;\r\n       function verifyPosition(uint16 leaderboardId, uint8 spot, uint64 angelID) external constant returns (bool); \r\n        function angelOnLeaderboards(uint64 angelID) external constant returns (bool);\r\n         function petOnLeaderboards(uint64 petID) external constant returns (bool);\r\n         function accessoryOnLeaderboards(uint64 accessoryID) external constant returns (bool) ;\r\n    function safeMult(uint x, uint y) pure internal returns(uint) ;\r\n     function SafeDiv(uint256 a, uint256 b) internal pure returns (uint256) ;\r\n    function getTotalLeaderboards() public constant returns (uint16);\r\n      \r\n  \r\n        \r\n   \r\n        \r\n        \r\n        \r\n   \r\n      \r\n        \r\n   \r\n}\r\ncontract IMedalData is AccessControl {\r\n  \r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n   \r\nfunction totalSupply() public view returns (uint256);\r\nfunction setMaxTokenNumbers()  onlyCREATOR external;\r\nfunction balanceOf(address _owner) public view returns (uint256);\r\nfunction tokensOf(address _owner) public view returns (uint256[]) ;\r\nfunction ownerOf(uint256 _tokenId) public view returns (address);\r\nfunction approvedFor(uint256 _tokenId) public view returns (address) ;\r\nfunction transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId);\r\nfunction approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId);\r\nfunction takeOwnership(uint256 _tokenId) public;\r\nfunction _createMedal(address _to, uint8 _seriesID) onlySERAPHIM public ;\r\nfunction getCurrentTokensByType(uint32 _seriesID) public constant returns (uint32);\r\nfunction getMedalType (uint256 _tokenId) public constant returns (uint8);\r\nfunction _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) external;\r\nfunction isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) ;\r\nfunction clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal;\r\nfunction clearApproval(address _owner, uint256 _tokenId) private;\r\nfunction addToken(address _to, uint256 _tokenId) private ;\r\nfunction removeToken(address _from, uint256 _tokenId) private;\r\n}\r\n\r\n//INSTURCTIONS: You can access this contract through our webUI at angelbattles.com (preferred)\r\n//You can also access this contract directly by sending a transaction the the leaderboardId you wish to claim medals for\r\n//Variable names are self explanatory, but contact us if you have any questions. \r\n\r\ncontract ClaimSponsoredMedals is AccessControl, SafeMath  {\r\n    // Addresses for other contracts MedalClaim interacts with. \r\n    address public angelCardDataContract = 0x6D2E76213615925c5fc436565B5ee788Ee0E86DC;\r\n    address public medalDataContract =  0x33A104dCBEd81961701900c06fD14587C908EAa3;\r\n    address public sponsoredLeaderboardDataContract = 0xAbe64ec568AeB065D0445B9D76F511A7B5eA2d7f;\r\n    \r\n    // events\r\n     event EventMedalSuccessful(address owner,uint64 Medal);\r\n  \r\n\r\n\r\n\r\n    // write functions\r\n    function DataContacts(address _angelCardDataContract,  address _medalDataContract, address _sponsoredLeaderboardDataContract) onlyCREATOR external {\r\n        angelCardDataContract = _angelCardDataContract;\r\n        medalDataContract = _medalDataContract;\r\n        sponsoredLeaderboardDataContract = _sponsoredLeaderboardDataContract;\r\n    }\r\n       \r\n\r\n\r\n\r\nfunction claimMedals (uint16 leaderboardId) public  {\r\n    \r\n    //Function can be called by anyone, as long as the medals haven't already been claimed, the leaderboard is closed, and it's past the end time. \r\n    \r\n           ISponsoredLeaderboardData sponsoredLeaderboardData = ISponsoredLeaderboardData(sponsoredLeaderboardDataContract);  \r\n        if ((leaderboardId < 0 ) || (leaderboardId > sponsoredLeaderboardData.getTotalLeaderboards())) {revert();}\r\n            uint endTime;\r\n            bool isLive;\r\n            bool medalsClaimed;\r\n            uint prize;\r\n            (,endTime,isLive,,prize,,,medalsClaimed) =  sponsoredLeaderboardData.getLeaderboard(leaderboardId);\r\n            if (isLive == true) {revert();} \r\n            if (now < endTime) {revert();}\r\n            if (medalsClaimed = true) {revert();}\r\n            sponsoredLeaderboardData.setMedalsClaimed(leaderboardId);\r\n            \r\n            \r\n             address owner1;\r\n             address owner2;\r\n             address owner3;\r\n             address owner4;\r\n             \r\n             uint64 angel;\r\n             \r\n             \r\n            (angel,,) =  sponsoredLeaderboardData.getTeamFromLeaderboard(leaderboardId, 0);\r\n             (,,,,,,,,,,owner1) = angelCardData.getAngel(angel);\r\n             (angel,,) =  sponsoredLeaderboardData.getTeamFromLeaderboard(leaderboardId, 1);\r\n             (,,,,,,,,,,owner2) = angelCardData.getAngel(angel);\r\n              (angel,,) =  sponsoredLeaderboardData.getTeamFromLeaderboard(leaderboardId, 2);\r\n             (,,,,,,,,,,owner3) = angelCardData.getAngel(angel);\r\n              (angel,,) =  sponsoredLeaderboardData.getTeamFromLeaderboard(leaderboardId, 3);\r\n             (,,,,,,,,,,owner4) = angelCardData.getAngel(angel);\r\n            \r\n            IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\r\n     \r\n    \r\n            \r\n             IMedalData medalData = IMedalData(medalDataContract);  \r\n            if (prize == 10000000000000000) {\r\n             medalData._createMedal(owner1, 2);\r\n             medalData._createMedal(owner2, 1);\r\n             medalData._createMedal(owner3,0);\r\n             medalData._createMedal(owner4,0);\r\n             return;\r\n            }\r\n            if ((prize > 10000000000000000) && (prize <= 50000000000000000)) {\r\n             medalData._createMedal(owner1, 5);\r\n             medalData._createMedal(owner2, 4);\r\n             medalData._createMedal(owner3,3);\r\n             medalData._createMedal(owner4,3);\r\n             return;\r\n            }\r\n               if ((prize > 50000000000000000) && (prize <= 100000000000000000)) {\r\n             medalData._createMedal(owner1, 6);\r\n             medalData._createMedal(owner2, 5);\r\n             medalData._createMedal(owner3,4);\r\n             medalData._createMedal(owner4,4);\r\n             return;\r\n            }\r\n                 if ((prize > 100000000000000000) && (prize <= 250000000000000000)) {\r\n             medalData._createMedal(owner1, 9);\r\n             medalData._createMedal(owner2, 6);\r\n             medalData._createMedal(owner3,5);\r\n             medalData._createMedal(owner4,5);\r\n             return;\r\n            }\r\n                if ((prize > 250000000000000000  ) && (prize <= 500000000000000000)) {\r\n             medalData._createMedal(owner1,10);\r\n             medalData._createMedal(owner2, 9);\r\n             medalData._createMedal(owner3,6);\r\n             medalData._createMedal(owner4,6);\r\n            }\r\n                if (prize  > 500000000000000000)   {\r\n             medalData._createMedal(owner1, 11);\r\n             medalData._createMedal(owner2, 10);\r\n             medalData._createMedal(owner3,9);\r\n             medalData._createMedal(owner4,9);\r\n             \r\n            }\r\n            \r\n}\r\n\r\n           \r\n            \r\n        }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"medalDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leaderboardId\",\"type\":\"uint16\"}],\"name\":\"claimMedals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"seraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"updateMaintenanceMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"maxRandom\",\"type\":\"uint16\"},{\"name\":\"min\",\"type\":\"uint8\"},{\"name\":\"privateAddress\",\"type\":\"address\"}],\"name\":\"getRandomNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintenanceMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldSeraphim\",\"type\":\"address\"}],\"name\":\"removeSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sponsoredLeaderboardDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_angelCardDataContract\",\"type\":\"address\"},{\"name\":\"_medalDataContract\",\"type\":\"address\"},{\"name\":\"_sponsoredLeaderboardDataContract\",\"type\":\"address\"}],\"name\":\"DataContacts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSeraphims\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSeraphim\",\"type\":\"address\"}],\"name\":\"addSERAPHIM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"angelCardDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Medal\",\"type\":\"uint64\"}],\"name\":\"EventMedalSuccessful\",\"type\":\"event\"}]","ContractName":"ClaimSponsoredMedals","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8146a17dd03909b50aff9981b9c9050ebb7119e66e57b2284c83f7393e849469"}]}