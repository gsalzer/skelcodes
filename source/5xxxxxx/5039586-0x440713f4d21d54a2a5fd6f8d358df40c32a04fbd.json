{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMathForBoost {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      revert();\r\n    }\r\n  }\r\n}\r\n\r\n\r\ncontract Boost {\r\n    using SafeMathForBoost for uint256;\r\n\r\n    string public name = \"Boost\";         // トークン名\r\n    uint8 public decimals = 0;            // 小数点以下何桁か\r\n    string public symbol = \"BST\";         // トークンの単位\r\n    uint256 public totalSupply = 100000000;  // 総供給量\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct  Checkpoint {\r\n\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint256 fromBlock;\r\n\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint256 value;\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\r\n\r\n    /// @notice constructor\r\n    function Boost() public {\r\n        balances[msg.sender].push(Checkpoint({\r\n            fromBlock:block.number,\r\n            value:totalSupply\r\n        }));\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        doTransfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n\r\n        // The standard ERC 20 transferFrom functionality\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n\r\n        doTransfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint) {\r\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            return 0;\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount) internal {\r\n\r\n        // Do not allow transfer to 0x0 or the token contract itself\r\n        require((_to != 0) && (_to != address(this)) && (_amount != 0));\r\n\r\n        // First update the balance array with the new value for the address\r\n        // sending the tokens\r\n        var previousBalanceFrom = balanceOfAt(_from, block.number);\r\n        updateValueAtNow(balances[_from], previousBalanceFrom.sub(_amount));\r\n\r\n        // Then update the balance array with the new value for the address\r\n        // receiving the tokens\r\n        var previousBalanceTo = balanceOfAt(_to, block.number);\r\n        updateValueAtNow(balances[_to], previousBalanceTo.add(_amount));\r\n\r\n        // An event to make the transfer easy to find on the blockchain\r\n        Transfer(_from, _to, _amount);\r\n\r\n    }\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) internal view  returns (uint) {\r\n        if (checkpoints.length == 0) return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length - 1].fromBlock)\r\n            return checkpoints[checkpoints.length - 1].value;\r\n        if (_block < checkpoints[0].fromBlock) return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length - 1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1) / 2;\r\n            if (checkpoints[mid].fromBlock <= _block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid - 1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\r\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\r\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\r\n            newCheckPoint.fromBlock = block.number;\r\n            newCheckPoint.value = _value;\r\n        } else {\r\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\r\n            oldCheckPoint.value = _value;\r\n        }\r\n    }\r\n\r\n    /// @dev Helper function to return a min between the two uints\r\n    function min(uint a, uint b) internal pure returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n\r\n// @title EtherContainer to store ether for investor to withdraw\r\ncontract BoostContainer {\r\n    using SafeMathForBoost for uint256;\r\n\r\n    // multiSigAddress\r\n    address public multiSigAddress;\r\n    bool public paused = false;\r\n\r\n    // Boost token\r\n    Boost public boost;\r\n\r\n    // Array about ether information per month for dividend\r\n    InfoForDeposit[] public arrayInfoForDeposit;\r\n\r\n    // Mapping to check this account has already withdrawn\r\n    mapping(address => uint256) public mapCompletionNumberForWithdraw;\r\n\r\n    // Event\r\n    event LogDepositForDividend(uint256 blockNumber, uint256 etherAountForDividend);\r\n    event LogWithdrawal(address indexed tokenHolder, uint256 etherValue);\r\n    event LogPause();\r\n    event LogUnpause();\r\n\r\n    // Struct of deposit infomation for dividend\r\n    struct InfoForDeposit {\r\n        uint256 blockNumber;\r\n        uint256 depositedEther;\r\n    }\r\n\r\n    // Check this msg.sender has right to withdraw\r\n    modifier isNotCompletedForWithdrawal(address _address) {\r\n        require(mapCompletionNumberForWithdraw[_address] != arrayInfoForDeposit.length);\r\n        _;\r\n    }\r\n\r\n    // Check whether msg.sender is multiSig or not\r\n    modifier onlyMultiSig() {\r\n        require(msg.sender == multiSigAddress);\r\n        _;\r\n    }\r\n\r\n    // Modifier to make a function callable only when the contract is not paused.\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    // Modifier to make a function callable only when the contract is paused.\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev constructor\r\n    /// @param _boostAddress The address of boost token\r\n    /// @param _multiSigAddress The address of multiSigWallet to send ether\r\n    function BoostContainer(address _boostAddress, address _multiSigAddress) public {\r\n        boost = Boost(_boostAddress);\r\n        multiSigAddress = _multiSigAddress;\r\n    }\r\n\r\n    /// @dev Deposit `msg.value` in arrayInfoForDeposit\r\n    /// @param _blockNumber The blockNumber to specify the token amount that each address has at this blockNumber\r\n    function depositForDividend(uint256 _blockNumber) public payable onlyMultiSig whenNotPaused {\r\n        require(msg.value > 0);\r\n\r\n        arrayInfoForDeposit.push(InfoForDeposit({blockNumber:_blockNumber, depositedEther:msg.value}));\r\n\r\n        LogDepositForDividend(_blockNumber, msg.value);\r\n    }\r\n\r\n    /// @dev Withdraw dividendEther\r\n    function withdraw() public isNotCompletedForWithdrawal(msg.sender) whenNotPaused {\r\n\r\n        // get withdrawAmount that msg.sender can withdraw\r\n        uint256 withdrawAmount = getWithdrawValue(msg.sender);\r\n\r\n        require(withdrawAmount > 0);\r\n\r\n        // set the arrayInfoForDeposit.length to mapCompletionNumberForWithdraw\r\n        mapCompletionNumberForWithdraw[msg.sender] = arrayInfoForDeposit.length;\r\n\r\n        // execute transfer\r\n        msg.sender.transfer(withdrawAmount);\r\n\r\n        // send event\r\n        LogWithdrawal(msg.sender, withdrawAmount);\r\n    }\r\n\r\n    /// @dev Change multiSigAddress\r\n    /// @param _address MultiSigAddress\r\n    function changeMultiSigAddress(address _address) public onlyMultiSig {\r\n        require(_address != address(0));\r\n        multiSigAddress = _address;\r\n    }\r\n\r\n    /// @dev Get the row length of arrayInfoForDeposit\r\n    /// @return The length of arrayInfoForDeposit\r\n    function getArrayInfoForDepositCount() public view returns (uint256 result) {\r\n        return arrayInfoForDeposit.length;\r\n    }\r\n\r\n    /// @dev Get withdraw value\r\n    /// @param _address The account that has this information\r\n    /// @return WithdrawAmount that account can withdraw\r\n    function getWithdrawValue(address _address) public view returns (uint256 withdrawAmount) {\r\n        uint256 validNumber = mapCompletionNumberForWithdraw[_address];\r\n        uint256 blockNumber;\r\n        uint256 depositedEther;\r\n        uint256 tokenAmount;\r\n\r\n        for (uint256 i = 0; i < arrayInfoForDeposit.length; i++) {\r\n            if (i < validNumber) {\r\n                continue;\r\n            }\r\n\r\n            // get blockNumber and depositedEther based on the validNumber\r\n            blockNumber = arrayInfoForDeposit[i].blockNumber;\r\n            depositedEther = arrayInfoForDeposit[i].depositedEther;\r\n\r\n            // get the amount of Boost token that msg.sender had based on blockNumber\r\n            tokenAmount = boost.balanceOfAt(_address, blockNumber);\r\n\r\n            // tokenAmount * depositedEther / totalSupply(100,000,000)\r\n            withdrawAmount = withdrawAmount.add(tokenAmount.mul(depositedEther).div(boost.totalSupply()));\r\n        }\r\n    }\r\n\r\n    /// @dev destroy this contract to return ether to multiSigAddress stored in this contract\r\n    function destroy() public onlyMultiSig whenPaused {\r\n        selfdestruct(multiSigAddress);\r\n    }\r\n\r\n    /// @dev called by the multiSigWallet to pause, triggers stopped state\r\n    function pause() public onlyMultiSig whenNotPaused {\r\n        paused = true;\r\n        LogPause();\r\n    }\r\n\r\n    /// @dev called by the multiSigWallet to unpause, returns to normal state\r\n    function unpause() public onlyMultiSig whenPaused {\r\n        paused = false;\r\n        LogUnpause();\r\n    }\r\n\r\n    /// @dev send profit to investor when stack depth happened. This require multisig and paused state\r\n    /// @param _address The account receives eth\r\n    /// @param _amount ether value that investor will receive\r\n    function sendProfit(address _address, uint256 _amount) public isNotCompletedForWithdrawal(_address) onlyMultiSig whenPaused {\r\n        require(_address != address(0));\r\n        require(_amount > 0);\r\n\r\n        mapCompletionNumberForWithdraw[_address] = arrayInfoForDeposit.length;\r\n\r\n        // execute transfer\r\n        _address.transfer(_amount);\r\n\r\n        // send event\r\n        LogWithdrawal(_address, _amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"multiSigAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeMultiSigAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrayInfoForDeposit\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"depositedEther\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getWithdrawValue\",\"outputs\":[{\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getArrayInfoForDepositCount\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"depositForDividend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boost\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapCompletionNumberForWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_boostAddress\",\"type\":\"address\"},{\"name\":\"_multiSigAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherAountForDividend\",\"type\":\"uint256\"}],\"name\":\"LogDepositForDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherValue\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogUnpause\",\"type\":\"event\"}]","ContractName":"BoostContainer","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ae2c90609e166504d97855eb542eb63113a7126a000000000000000000000000d501a2b8d910270c36667da4e85fd3f50390e8df","Library":"","SwarmSource":"bzzr://aa82ed232a38883dcdee4031fae676f68b490754d527768dd9b37bae027af494"}]}