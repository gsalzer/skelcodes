{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/// @title Contract Resolver Interface\r\n/// @author Digix Holdings Pte Ltd\r\n\r\ncontract ResolverClient {\r\n\r\n  /// The address of the resolver contract for this project\r\n  address public resolver;\r\n  /// The key to identify this contract\r\n  bytes32 public key;\r\n\r\n  /// Make our own address available to us as a constant\r\n  address public CONTRACT_ADDRESS;\r\n\r\n  /// Function modifier to check if msg.sender corresponds to the resolved address of a given key\r\n  /// @param _contract The resolver key\r\n  modifier if_sender_is(bytes32 _contract) {\r\n    require(msg.sender == ContractResolver(resolver).get_contract(_contract));\r\n    _;\r\n  }\r\n\r\n  /// Function modifier to check resolver's locking status.\r\n  modifier unless_resolver_is_locked() {\r\n    require(is_locked() == false);\r\n    _;\r\n  }\r\n\r\n  /// @dev Initialize new contract\r\n  /// @param _key the resolver key for this contract\r\n  /// @return _success if the initialization is successful\r\n  function init(bytes32 _key, address _resolver)\r\n           internal\r\n           returns (bool _success)\r\n  {\r\n    bool _is_locked = ContractResolver(_resolver).locked();\r\n    if (_is_locked == false) {\r\n      CONTRACT_ADDRESS = address(this);\r\n      resolver = _resolver;\r\n      key = _key;\r\n      require(ContractResolver(resolver).init_register_contract(key, CONTRACT_ADDRESS));\r\n      _success = true;\r\n    }  else {\r\n      _success = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Destroy the contract and unregister self from the ContractResolver\r\n  /// @dev Can only be called by the owner of ContractResolver\r\n  function destroy()\r\n           public\r\n           returns (bool _success)\r\n  {\r\n    bool _is_locked = ContractResolver(resolver).locked();\r\n    require(!_is_locked);\r\n\r\n    address _owner_of_contract_resolver = ContractResolver(resolver).owner();\r\n    require(msg.sender == _owner_of_contract_resolver);\r\n\r\n    _success = ContractResolver(resolver).unregister_contract(key);\r\n    require(_success);\r\n\r\n    selfdestruct(_owner_of_contract_resolver);\r\n  }\r\n\r\n  /// @dev Check if resolver is locked\r\n  /// @return _locked if the resolver is currently locked\r\n  function is_locked()\r\n           private\r\n           constant\r\n           returns (bool _locked)\r\n  {\r\n    _locked = ContractResolver(resolver).locked();\r\n  }\r\n\r\n  /// @dev Get the address of a contract\r\n  /// @param _key the resolver key to look up\r\n  /// @return _contract the address of the contract\r\n  function get_contract(bytes32 _key)\r\n           public\r\n           constant\r\n           returns (address _contract)\r\n  {\r\n    _contract = ContractResolver(resolver).get_contract(_key);\r\n  }\r\n}\r\n\r\ncontract ContractResolver {\r\n  address public owner;\r\n  bool public locked;\r\n  function init_register_contract(bytes32 _key, address _contract_address)\r\n           public\r\n           returns (bool _success) {}\r\n\r\n  /// @dev Unregister a contract.  This can only be called from the contract with the key itself\r\n  /// @param _key the bytestring of the contract name\r\n  /// @return _success if the operation is successful\r\n  function unregister_contract(bytes32 _key)\r\n           public\r\n           returns (bool _success) {}\r\n\r\n  /// @dev Get address of a contract\r\n  /// @param _key the bytestring name of the contract to look up\r\n  /// @return _contract the address of the contract\r\n  function get_contract(bytes32 _key)\r\n           public\r\n           constant\r\n           returns (address _contract) {}\r\n}\r\n\r\ncontract DigixConstants {\r\n    /// general constants\r\n    uint256 constant SECONDS_IN_A_DAY = 24 * 60 * 60;\r\n\r\n    /// asset events\r\n    uint256 constant ASSET_EVENT_CREATED_VENDOR_ORDER = 1;\r\n    uint256 constant ASSET_EVENT_CREATED_TRANSFER_ORDER = 2;\r\n    uint256 constant ASSET_EVENT_CREATED_REPLACEMENT_ORDER = 3;\r\n    uint256 constant ASSET_EVENT_FULFILLED_VENDOR_ORDER = 4;\r\n    uint256 constant ASSET_EVENT_FULFILLED_TRANSFER_ORDER = 5;\r\n    uint256 constant ASSET_EVENT_FULFILLED_REPLACEMENT_ORDER = 6;\r\n    uint256 constant ASSET_EVENT_MINTED = 7;\r\n    uint256 constant ASSET_EVENT_MINTED_REPLACEMENT = 8;\r\n    uint256 constant ASSET_EVENT_RECASTED = 9;\r\n    uint256 constant ASSET_EVENT_REDEEMED = 10;\r\n    uint256 constant ASSET_EVENT_FAILED_AUDIT = 11;\r\n    uint256 constant ASSET_EVENT_ADMIN_FAILED = 12;\r\n    uint256 constant ASSET_EVENT_REMINTED = 13;\r\n\r\n    /// roles\r\n    uint256 constant ROLE_ZERO_ANYONE = 0;\r\n    uint256 constant ROLE_ROOT = 1;\r\n    uint256 constant ROLE_VENDOR = 2;\r\n    uint256 constant ROLE_XFERAUTH = 3;\r\n    uint256 constant ROLE_POPADMIN = 4;\r\n    uint256 constant ROLE_CUSTODIAN = 5;\r\n    uint256 constant ROLE_AUDITOR = 6;\r\n    uint256 constant ROLE_MARKETPLACE_ADMIN = 7;\r\n    uint256 constant ROLE_KYC_ADMIN = 8;\r\n    uint256 constant ROLE_FEES_ADMIN = 9;\r\n    uint256 constant ROLE_DOCS_UPLOADER = 10;\r\n    uint256 constant ROLE_KYC_RECASTER = 11;\r\n    uint256 constant ROLE_FEES_DISTRIBUTION_ADMIN = 12;\r\n\r\n    /// states\r\n    uint256 constant STATE_ZERO_UNDEFINED = 0;\r\n    uint256 constant STATE_CREATED = 1;\r\n    uint256 constant STATE_VENDOR_ORDER = 2;\r\n    uint256 constant STATE_TRANSFER = 3;\r\n    uint256 constant STATE_CUSTODIAN_DELIVERY = 4;\r\n    uint256 constant STATE_MINTED = 5;\r\n    uint256 constant STATE_AUDIT_FAILURE = 6;\r\n    uint256 constant STATE_REPLACEMENT_ORDER = 7;\r\n    uint256 constant STATE_REPLACEMENT_DELIVERY = 8;\r\n    uint256 constant STATE_RECASTED = 9;\r\n    uint256 constant STATE_REDEEMED = 10;\r\n    uint256 constant STATE_ADMIN_FAILURE = 11;\r\n\r\n\r\n\r\n    /// interactive contracts\r\n    bytes32 constant CONTRACT_INTERACTIVE_ASSETS_EXPLORER = \"i:asset:explorer\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_DIGIX_DIRECTORY = \"i:directory\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE = \"i:mp\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_ADMIN = \"i:mpadmin\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_POPADMIN = \"i:popadmin\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_PRODUCTS_LIST = \"i:products\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_TOKEN = \"i:token\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_BULK_WRAPPER = \"i:bulk-wrapper\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_TOKEN_CONFIG = \"i:token:config\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_TOKEN_INFORMATION = \"i:token:information\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_INFORMATION = \"i:mp:information\";\r\n    bytes32 constant CONTRACT_INTERACTIVE_IDENTITY = \"i:identity\";\r\n\r\n\r\n    /// controller contracts\r\n    bytes32 constant CONTRACT_CONTROLLER_ASSETS = \"c:asset\";\r\n    bytes32 constant CONTRACT_CONTROLLER_ASSETS_RECAST = \"c:asset:recast\";\r\n    bytes32 constant CONTRACT_CONTROLLER_ASSETS_EXPLORER = \"c:explorer\";\r\n    bytes32 constant CONTRACT_CONTROLLER_DIGIX_DIRECTORY = \"c:directory\";\r\n    bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE = \"c:mp\";\r\n    bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE_ADMIN = \"c:mpadmin\";\r\n    bytes32 constant CONTRACT_CONTROLLER_PRODUCTS_LIST = \"c:products\";\r\n\r\n    bytes32 constant CONTRACT_CONTROLLER_TOKEN_APPROVAL = \"c:token:approval\";\r\n    bytes32 constant CONTRACT_CONTROLLER_TOKEN_CONFIG = \"c:token:config\";\r\n    bytes32 constant CONTRACT_CONTROLLER_TOKEN_INFO = \"c:token:info\";\r\n    bytes32 constant CONTRACT_CONTROLLER_TOKEN_TRANSFER = \"c:token:transfer\";\r\n\r\n    bytes32 constant CONTRACT_CONTROLLER_JOB_ID = \"c:jobid\";\r\n    bytes32 constant CONTRACT_CONTROLLER_IDENTITY = \"c:identity\";\r\n\r\n    /// storage contracts\r\n    bytes32 constant CONTRACT_STORAGE_ASSETS = \"s:asset\";\r\n    bytes32 constant CONTRACT_STORAGE_ASSET_EVENTS = \"s:asset:events\";\r\n    bytes32 constant CONTRACT_STORAGE_DIGIX_DIRECTORY = \"s:directory\";\r\n    bytes32 constant CONTRACT_STORAGE_MARKETPLACE = \"s:mp\";\r\n    bytes32 constant CONTRACT_STORAGE_PRODUCTS_LIST = \"s:products\";\r\n    bytes32 constant CONTRACT_STORAGE_GOLD_TOKEN = \"s:goldtoken\";\r\n    bytes32 constant CONTRACT_STORAGE_JOB_ID = \"s:jobid\";\r\n    bytes32 constant CONTRACT_STORAGE_IDENTITY = \"s:identity\";\r\n\r\n    /// service contracts\r\n    bytes32 constant CONTRACT_SERVICE_TOKEN_DEMURRAGE = \"sv:tdemurrage\";\r\n    bytes32 constant CONTRACT_SERVICE_MARKETPLACE = \"sv:mp\";\r\n    bytes32 constant CONTRACT_SERVICE_DIRECTORY = \"sv:directory\";\r\n\r\n    /// fees distributors\r\n    bytes32 constant CONTRACT_DEMURRAGE_FEES_DISTRIBUTOR = \"fees:distributor:demurrage\";\r\n    bytes32 constant CONTRACT_RECAST_FEES_DISTRIBUTOR = \"fees:distributor:recast\";\r\n    bytes32 constant CONTRACT_TRANSFER_FEES_DISTRIBUTOR = \"fees:distributor:transfer\";\r\n\r\n}\r\n\r\ncontract TokenLoggerCallback is ResolverClient, DigixConstants {\r\n\r\n  event Transfer(address indexed _from,  address indexed _to,  uint256 _value);\r\n  event Approval(address indexed _owner,  address indexed _spender,  uint256 _value);\r\n\r\n  function log_mint(address _to, uint256 _value)\r\n           if_sender_is(CONTRACT_CONTROLLER_ASSETS)\r\n           public\r\n  {\r\n    Transfer(address(0x0), _to, _value);\r\n  }\r\n\r\n  function log_recast_fees(address _from, address _to, uint256 _value)\r\n           if_sender_is(CONTRACT_CONTROLLER_ASSETS_RECAST)\r\n           public\r\n  {\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function log_recast(address _from, uint256 _value)\r\n           if_sender_is(CONTRACT_CONTROLLER_ASSETS_RECAST)\r\n           public\r\n  {\r\n    Transfer(_from, address(0x0), _value);\r\n  }\r\n\r\n  function log_demurrage_fees(address _from, address _to, uint256 _value)\r\n           if_sender_is(CONTRACT_SERVICE_TOKEN_DEMURRAGE)\r\n           public\r\n  {\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function log_move_fees(address _from, address _to, uint256 _value)\r\n           if_sender_is(CONTRACT_CONTROLLER_TOKEN_CONFIG)\r\n           public\r\n  {\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function log_transfer(address _from, address _to, uint256 _value)\r\n           if_sender_is(CONTRACT_CONTROLLER_TOKEN_TRANSFER)\r\n           public\r\n  {\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function log_approve(address _owner, address _spender, uint256 _value)\r\n           if_sender_is(CONTRACT_CONTROLLER_TOKEN_APPROVAL)\r\n           public\r\n  {\r\n    Approval(_owner, _spender, _value);\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract TokenInfoController {\r\n  function get_total_supply() constant public returns (uint256 _total_supply){}\r\n  function get_allowance(address _account, address _spender) constant public returns (uint256 _allowance){}\r\n  function get_balance(address _user) constant public returns (uint256 _actual_balance){}\r\n}\r\n\r\ncontract TokenTransferController {\r\n  function put_transfer(address _sender, address _recipient, address _spender, uint256 _amount, bool _transfer_from) public returns (bool _success){}\r\n}\r\n\r\ncontract TokenApprovalController {\r\n  function approve(address _account, address _spender, uint256 _amount) public returns (bool _success){}\r\n}\r\n\r\n/// The interface of a contract that can receive tokens from transferAndCall()\r\ncontract TokenReceiver {\r\n  function tokenFallback(address from, uint256 amount, bytes32 data) public returns (bool success);\r\n}\r\n\r\n/// @title DGX2.0 ERC-20 Token. ERC-677 is also implemented https://github.com/ethereum/EIPs/issues/677\r\n/// @author Digix Holdings Pte Ltd\r\ncontract Token is TokenLoggerCallback {\r\n\r\n  string public constant name = \"Digix Gold Token\";\r\n  string public constant symbol = \"DGX\";\r\n  uint8 public constant decimals = 9;\r\n\r\n  function Token(address _resolver) public\r\n  {\r\n    require(init(CONTRACT_INTERACTIVE_TOKEN, _resolver));\r\n  }\r\n\r\n  /// @notice show the total supply of gold tokens\r\n  /// @return {\r\n  ///    \"totalSupply\": \"total number of tokens\"\r\n  /// }\r\n  function totalSupply()\r\n           constant\r\n           public\r\n           returns (uint256 _total_supply)\r\n  {\r\n    _total_supply = TokenInfoController(get_contract(CONTRACT_CONTROLLER_TOKEN_INFO)).get_total_supply();\r\n  }\r\n\r\n  /// @notice display balance of given account\r\n  /// @param _owner the account to query\r\n  /// @return {\r\n  ///    \"balance\": \"balance of the given account in nanograms\"\r\n  /// }\r\n  function balanceOf(address _owner)\r\n           constant\r\n           public\r\n           returns (uint256 balance)\r\n  {\r\n    balance = TokenInfoController(get_contract(CONTRACT_CONTROLLER_TOKEN_INFO)).get_balance(_owner);\r\n  }\r\n\r\n  /// @notice transfer amount to account\r\n  /// @param _to account to send to\r\n  /// @param _value the amount in nanograms to send\r\n  /// @return {\r\n  ///    \"success\": \"returns true if successful\"\r\n  /// }\r\n  function transfer(address _to, uint256 _value)\r\n           public\r\n           returns (bool success)\r\n  {\r\n    success =\r\n      TokenTransferController(get_contract(CONTRACT_CONTROLLER_TOKEN_TRANSFER)).put_transfer(msg.sender, _to, 0x0, _value, false);\r\n  }\r\n\r\n  /// @notice transfer amount to account from account deducting from spender allowance\r\n  /// @param _to account to send to\r\n  /// @param _from account to send from\r\n  /// @param _value the amount in nanograms to send\r\n  /// @return {\r\n  ///    \"success\": \"returns true if successful\"\r\n  /// }\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n           public\r\n           returns (bool success)\r\n  {\r\n    success =\r\n      TokenTransferController(get_contract(CONTRACT_CONTROLLER_TOKEN_TRANSFER)).put_transfer(_from, _to, msg.sender,\r\n                                                                             _value, true);\r\n  }\r\n\r\n  /// @notice implements transferAndCall() of ERC677\r\n  /// @param _receiver the contract to receive the token\r\n  /// @param _amount the amount of tokens to be transfered\r\n  /// @param _data the data to be passed to the tokenFallback function of the receiving contract\r\n  /// @return {\r\n  ///    \"success\": \"returns true if successful\"\r\n  /// }\r\n  function transferAndCall(address _receiver, uint256 _amount, bytes32 _data)\r\n           public\r\n           returns (bool success)\r\n  {\r\n    transfer(_receiver, _amount);\r\n    success = TokenReceiver(_receiver).tokenFallback(msg.sender, _amount, _data);\r\n    require(success);\r\n  }\r\n\r\n  /// @notice approve given spender to transfer given amount this will set allowance to 0 if current value is non-zero\r\n  /// @param _spender the account that is given an allowance\r\n  /// @param _value the amount in nanograms to approve\r\n  /// @return {\r\n  ///   \"success\": \"returns true if successful\"\r\n  /// }\r\n  function approve(address _spender, uint256 _value)\r\n           public\r\n           returns (bool success)\r\n  {\r\n    success = TokenApprovalController(get_contract(CONTRACT_CONTROLLER_TOKEN_APPROVAL)).approve(msg.sender, _spender, _value);\r\n  }\r\n\r\n  /// @notice check the spending allowance of a given user from a given account\r\n  /// @param _owner the account to spend from\r\n  /// @param _spender the spender\r\n  /// @return {\r\n  ///    \"remaining\": \"the remaining allowance in nanograms\"\r\n  /// }\r\n  function allowance(address _owner, address _spender)\r\n           constant\r\n           public\r\n           returns (uint256 remaining)\r\n  {\r\n    remaining = TokenInfoController(get_contract(CONTRACT_CONTROLLER_TOKEN_INFO)).get_allowance(_owner, _spender);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"log_recast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_total_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"key\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"get_contract\",\"outputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"log_move_fees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"log_demurrage_fees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"log_recast_fees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"log_approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"log_mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"log_transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000db2ddb220b8a55e0e4412130e6ae74d136c04ba2","Library":"","SwarmSource":"bzzr://c32847606890f8601e3d113d8514b17db7321b7fb222d18fb157af42a76bfbc7"}]}