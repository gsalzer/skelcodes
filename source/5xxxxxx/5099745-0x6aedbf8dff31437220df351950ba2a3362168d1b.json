{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract ERC20Interface {\r\n\r\n    // Get total token supply\r\n    function totalSupply()\r\n    public constant returns (uint256 _totalSupply);\r\n\r\n    // Get specific account balance\r\n    function balanceOf(address _owner)\r\n    public constant returns (uint256 balance);\r\n\r\n    // Send _value tokens to the address _to\r\n    function transfer(address _to, uint256 _value)\r\n    public returns (bool success);\r\n\r\n    // Send _value of tokens from address one address to another (withdraw)\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool success);\r\n\r\n    // Allow _spender to withdraw from sender account _value times\r\n    function approve(address _spender, uint256 _value)\r\n    public returns (bool success);\r\n\r\n    // Get the amount which _spender is allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender)\r\n    public constant returns (uint256 remaining);\r\n\r\n    // Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // Triggered whenever approve(...) is called.\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract DGS is ERC20Interface {\r\n\r\n    string public constant NAME = \"Dragonglass\";\r\n    string public constant SYMBOL = \"DGS\";\r\n    uint public constant DECIMALS = 8;\r\n\r\n    uint256 supply = 0;\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    mapping (address => uint) allowedToMine;\r\n\r\n    address public allocationAddressICO;\r\n\r\n    uint256 public mineableSupply = 0;\r\n\r\n    address founder;\r\n\r\n\r\n    uint public constant DECIMAL_INDEX = 10**DECIMALS;\r\n\r\n    // Miner constants\r\n    //Represents constant 0,25892541\r\n    uint private constant MINING_PERCENTAGE = 25892541;\r\n    uint private constant STAKE_PERCENTAGE = 5 * DECIMAL_INDEX / 100;\r\n\r\n    function DGS (uint256 _initial,\r\n        address _founder) public {\r\n            supply = _initial;\r\n            mineableSupply = supply * 10;\r\n            founder = _founder;\r\n    }\r\n\r\n    modifier onlyFounder {\r\n        require(msg.sender == founder);\r\n        _;\r\n    }\r\n\r\n    function totalSupply()\r\n    public constant returns (uint256 _totalSupply) {\r\n        _totalSupply = supply;\r\n    }\r\n\r\n    function balanceOf(address _owner)\r\n    public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function getAllowedToMine(address _owner)\r\n    public constant returns (uint _allowedToMine) {\r\n        return allowedToMine[_owner];\r\n    }\r\n\r\n    // Get available for mining supply\r\n    function getMineableSupply()\r\n    public constant returns (uint256 _mineableSupply){\r\n        _mineableSupply = mineableSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n    public returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;\r\n        mine(msg.sender, _to, _value);\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool success) {\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(_to != address(0) && balances[_from] >= _value\r\n            && allowance >= _value);\r\n            balances[_from] -= _value;\r\n            mine(_from, _to, _value);\r\n            balances[_to] += _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n    public returns (bool success){\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)\r\n    public constant returns (uint256 remaining){\r\n        return  allowed[_owner][_spender];\r\n    }\r\n\r\n    function setIcoAddress(address _icoAddress) public onlyFounder() {\r\n        require(allocationAddressICO == address(0));\r\n        allocationAddressICO = _icoAddress;\r\n        balances[allocationAddressICO] = totalSupply();\r\n    }\r\n\r\n    function calculateMinedCoinsForTX(uint stake, uint _value)\r\n    public pure returns (uint _minedAmount) {\r\n\r\n        var _max = SafeMath.max256(_value, stake);\r\n        var _min = SafeMath.min256(_value, stake);\r\n\r\n        uint factor = _min * DECIMAL_INDEX /_max;\r\n\r\n        if(_value > stake)\r\n            factor += factor * STAKE_PERCENTAGE / DECIMAL_INDEX;\r\n        if(factor > DECIMAL_INDEX)\r\n            factor = DECIMAL_INDEX;\r\n\r\n        var totalStake = stake + _value;\r\n        var factorInCoins = totalStake * factor / DECIMAL_INDEX;\r\n\r\n        _minedAmount = factorInCoins *  MINING_PERCENTAGE / DECIMAL_INDEX;\r\n    }\r\n\r\n    function mine\r\n    (address _sender, address _receiver, uint _transactionValue) private {\r\n        if(_sender == allocationAddressICO) {\r\n            // Allow to mine x10\r\n            allowedToMine[_receiver] += _transactionValue * 10;\r\n        } else {\r\n            doMining(_sender, _transactionValue);\r\n        }\r\n    }\r\n\r\n    function doMining(address _miner, uint _transactionValue)\r\n    private {\r\n        uint _minedAmount = calculateMinedCoinsForTX(balanceOf(_miner), _transactionValue);\r\n        if(allowedToMine[_miner] <= _minedAmount) {\r\n            _minedAmount = allowedToMine[_miner];\r\n            allowedToMine[_miner] = 0;\r\n        } else {\r\n            allowedToMine[_miner] -= _minedAmount;\r\n        }\r\n        balances[_miner] += _minedAmount;\r\n        supply += _minedAmount;\r\n        mineableSupply -= _minedAmount;\r\n        Mined(_miner, _minedAmount);\r\n    }\r\n\r\n    event Mined(address indexed _miner, uint256 _minedAmount);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"stake\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"calculateMinedCoinsForTX\",\"outputs\":[{\"name\":\"_minedAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMAL_INDEX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocationAddressICO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMineableSupply\",\"outputs\":[{\"name\":\"_mineableSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoAddress\",\"type\":\"address\"}],\"name\":\"setIcoAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mineableSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAllowedToMine\",\"outputs\":[{\"name\":\"_allowedToMine\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initial\",\"type\":\"uint256\"},{\"name\":\"_founder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_miner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_minedAmount\",\"type\":\"uint256\"}],\"name\":\"Mined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DGS","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000018abef783b6e700000000000000000000000000017347540ac86ef7bf81e1ff81989f9184090098","Library":"","SwarmSource":"bzzr://daf49401474397eb5b72fbea8ed837f601ca3a2760a979313aca0fde12af9470"}]}