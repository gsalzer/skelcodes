{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * Owned Contract\r\n * \r\n * This is a contract trait to inherit from. Contracts that inherit from Owned \r\n * are able to modify functions to be only callable by the owner of the\r\n * contract.\r\n * \r\n * By default it is impossible to change the owner of the contract.\r\n */\r\ncontract Owned {\r\n    /**\r\n     * Contract owner.\r\n     * \r\n     * This value is set at contract creation time.\r\n     */\r\n    address owner;\r\n\r\n    /**\r\n     * Contract constructor.\r\n     * \r\n     * This sets the owner of the Owned contract at the time of contract\r\n     * creation.\r\n     */\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Modify method to only allow the owner to call it.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\n/**\r\n * Aethia Chi Token Sale\r\n * \r\n * This contract represent the 50% off sale for the in-game currency of Aethia.\r\n * The normal exchange rate in-game is 0.001 ETH for 1 CHI. During the sale, the\r\n * exchange rate will be 0.0005 ETH for 1 CHI.\r\n * \r\n * The contract only exchanges whole (integer) values of CHI. If the sender\r\n * sends a value of 0.00051 ETH, the sender will get 1 CHI and 0.00001 ETH back.\r\n * \r\n * In the case not enough CHI tokens remain to fully exchange the sender's value\r\n * from ETH to CHI, the remaining CHI will be paid out, and the remaining ETH\r\n * will be returned to the sender.\r\n */\r\ncontract ChiSale is Owned {\r\n    /**\r\n     * The CHI token contract.\r\n     */\r\n    ERC20 chiTokenContract;\r\n\r\n    /**\r\n     * The start date of the CHI sale in seconds since the UNIX epoch.\r\n     * \r\n     * This is equivalent to February 17th, 12:00:00 UTC.\r\n     */\r\n    uint256 constant START_DATE = 1518868800;\r\n\r\n    /**\r\n     * The end date of the CHI sale in seconds since the UNIX epoch.\r\n     * \r\n     * This is equivalent to February 19th, 12:00:00 UTC.\r\n     */\r\n    uint256 constant END_DATE = 1519041600;\r\n\r\n    /**\r\n     * The price per CHI token in ETH.\r\n     */\r\n    uint256 tokenPrice = 0.0005 ether;\r\n    \r\n    /**\r\n     * The number of Chi tokens for sale.\r\n     */\r\n    uint256 tokensForSale = 10000000;\r\n\r\n    /**\r\n     * Chi token sale event.\r\n     * \r\n     * For audit and logging purposes, all chi token sales are logged by \r\n     * acquirer.\r\n     */\r\n    event LogChiSale(address indexed _acquirer, uint256 _amount);\r\n\r\n    /**\r\n     * Contract constructor.\r\n     * \r\n     * This passes the address of the Chi token contract address to the\r\n     * Chi sale contract. Additionally it sets the owner to the contract \r\n     * creator.\r\n     */\r\n    function ChiSale(address _chiTokenAddress) Owned() public {\r\n        chiTokenContract = ERC20(_chiTokenAddress);\r\n    }\r\n\r\n    /**\r\n     * Buy Chi tokens.\r\n     * \r\n     * The cost of a Chi token during the sale is 0.0005 ether per token. This\r\n     * contract accepts any amount equal to or above 0.0005 ether. It tries to\r\n     * exchange as many Chi tokens for the sent value as possible. The remaining\r\n     * ether is sent back.\r\n     *\r\n     * In the case where not enough Chi tokens are available for the to exchange\r\n     * for the entirety of the sent value, an attempt will be made to exchange\r\n     * as much as possible. The remaining ether is then sent back.\r\n     * \r\n     * The sale starts at February 17th, 12:00:00 UTC, and ends at February\r\n     * 19th, 12:00:00 UTC, lasting a total of 48 hours. Transactions that occur\r\n     * outside this time period are rejected.\r\n     */\r\n    function buy() payable external {\r\n        require(START_DATE <= now);\r\n        require(END_DATE >= now);\r\n        require(tokensForSale > 0);\r\n        require(msg.value >= tokenPrice);\r\n\r\n        uint256 tokens = msg.value / tokenPrice;\r\n        uint256 remainder;\r\n\r\n        // If there aren't enough tokens to exchange, try to exchange as many\r\n        // as possible, and pay out the remainder. Else, if there are enough\r\n        // tokens, pay the remaining ether that couldn't be exchanged for tokens \r\n        // back to the sender.\r\n        if (tokens > tokensForSale) {\r\n            tokens = tokensForSale;\r\n\r\n            remainder = msg.value - tokens * tokenPrice;\r\n        } else {\r\n            remainder = msg.value % tokenPrice;\r\n        }\r\n        \r\n        tokensForSale -= tokens;\r\n\r\n        LogChiSale(msg.sender, tokens);\r\n\r\n        chiTokenContract.transfer(msg.sender, tokens);\r\n\r\n        if (remainder > 0) {\r\n            msg.sender.transfer(remainder);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fallback payable method.\r\n     *\r\n     * This is in the case someone calls the contract without specifying the\r\n     * correct method to call. This method will ensure the failure of a\r\n     * transaction that was wrongfully executed.\r\n     */\r\n    function () payable external {\r\n        revert();\r\n    }\r\n\r\n    /**\r\n     * Withdraw all funds from contract.\r\n     * \r\n     * Additionally, this moves all remaining Chi tokens back to the original\r\n     * owner to be used for redistribution.\r\n     */\r\n    function withdraw() onlyOwner external {\r\n        uint256 currentBalance = chiTokenContract.balanceOf(this);\r\n\r\n        chiTokenContract.transfer(owner, currentBalance);\r\n\r\n        owner.transfer(this.balance);\r\n    }\r\n    \r\n    function remainingTokens() external view returns (uint256) {\r\n        return tokensForSale;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_chiTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_acquirer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogChiSale\",\"type\":\"event\"}]","ContractName":"ChiSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000071e1f8e809dc8911fcac95043bc94929a36505a5","Library":"","SwarmSource":"bzzr://a551c20fe78e2ac6410607edadb18137a596c4e6d55b1f677b1b44d5a8627155"}]}