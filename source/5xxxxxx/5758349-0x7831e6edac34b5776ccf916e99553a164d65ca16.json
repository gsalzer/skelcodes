{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    return a / b;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface IDonQuixoteToken{\r\n    function withhold(address _user,  uint256 _amount) external returns (bool _result);\r\n    function transfer(address _to, uint256 _value) external;\r\n    function sendGameGift(address _player) external returns (bool _result);\r\n    function logPlaying(address _player) external returns (bool _result);\r\n    function balanceOf(address _user) constant  external returns (uint256 _balance);\r\n\r\n}\r\ncontract BaseGame {\r\n  string public gameName = \"ScratchTickets\";\r\n  uint public constant  gameType = 2005;\r\n  string public officialGameUrl;\r\n  mapping (address => uint256) public userTokenOf;\r\n  uint public bankerBeginTime;\r\n  uint public bankerEndTime;\r\n  address public currentBanker;\r\n\r\n  function depositToken(uint256 _amount) public;\r\n  function withdrawToken(uint256 _amount) public;\r\n  function withdrawAllToken() public;\r\n  function setBanker(address _banker, uint256 _beginTime, uint256 _endTime) public returns(bool _result);\r\n  function canSetBanker() view public returns (bool _result);\r\n}\r\n\r\n\r\n\r\ncontract Base is BaseGame {\r\n  using SafeMath for uint256;\r\n  uint public createTime = now;\r\n  address public owner;\r\n  IDonQuixoteToken public DonQuixoteToken;\r\n\r\n  function Base() public {\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  function setOwner(address _newOwner)  public  onlyOwner {\r\n    require(_newOwner != 0x0);\r\n    owner = _newOwner;\r\n  }\r\n\r\n  bool public globalLocked = false;\r\n\r\n  function lock() internal {\r\n    require(!globalLocked);\r\n    globalLocked = true;\r\n  }\r\n\r\n  function unLock() internal {\r\n    require(globalLocked);\r\n    globalLocked = false;\r\n  }\r\n\r\n  function setLock()  public onlyOwner{\r\n    globalLocked = false;\r\n  }\r\n\r\n  function tokenOf(address _user) view public returns(uint256 _result){\r\n    _result = DonQuixoteToken.balanceOf(_user);\r\n  }\r\n\r\n  function depositToken(uint256 _amount) public {\r\n    lock();\r\n    _depositToken(msg.sender, _amount);\r\n    unLock();\r\n  }\r\n\r\n  function _depositToken(address _to, uint256 _amount) internal {\r\n    require(_to != 0x0);\r\n    DonQuixoteToken.withhold(_to, _amount);\r\n    userTokenOf[_to] = userTokenOf[_to].add(_amount);\r\n  }\r\n\r\n  function withdrawAllToken() public{\r\n    uint256 _amount = userTokenOf[msg.sender];\r\n    withdrawToken(_amount);\r\n  }\r\n\r\n  function withdrawToken(uint256 _amount) public {\r\n    lock();\r\n    _withdrawToken(msg.sender, _amount);\r\n    unLock();\r\n  }\r\n\r\n  function _withdrawToken(address _to, uint256 _amount) internal {\r\n    require(_to != 0x0);\r\n    userTokenOf[_to] = userTokenOf[_to].sub(_amount);\r\n    DonQuixoteToken.transfer(_to, _amount);\r\n  }\r\n\r\n  uint public currentEventId = 1;\r\n\r\n  function getEventId() internal returns(uint _result) {\r\n    _result = currentEventId;\r\n    currentEventId ++;\r\n  }\r\n\r\n  function setOfficialGameUrl(string _newOfficialGameUrl) public onlyOwner{\r\n    officialGameUrl = _newOfficialGameUrl;\r\n  }\r\n}\r\n\r\ncontract ScratchTickets is Base\r\n{\r\n\r\n  uint256 public gameMaxBetAmount = 10**9;\r\n  uint256 public gameMinBetAmount = 10**7;\r\n\r\n  uint public playNo = 1;\r\n  uint256 public lockTime = 3600;\r\n  address public auction;\r\n\r\n  uint public donGameGiftLineTime =  now + 60 days + 30 days;\r\n\r\n  struct awardInfo{\r\n    uint Type;\r\n    uint Num;\r\n    uint WinMultiplePer;\r\n    uint KeyNumber;\r\n    uint AddIndex;\r\n  }\r\n\r\n  mapping (uint => awardInfo) public awardInfoOf;\r\n\r\n  struct betInfo\r\n  {\r\n    address Player;\r\n    uint256 BetAmount;\r\n    uint256 BlockNumber;\r\n    string RandomStr;\r\n    address Banker;\r\n    uint BetNum;\r\n    uint EventId;\r\n    bool IsReturnAward;\r\n  }\r\n  mapping (uint => betInfo) public playerBetInfoOf;\r\n\r\n  modifier onlyAuction {\r\n    require(msg.sender == auction);\r\n    _;\r\n  }\r\n  modifier onlyBanker {\r\n    require(msg.sender == currentBanker);\r\n    require(bankerBeginTime <= now);\r\n    require(now < bankerEndTime);\r\n    _;\r\n  }\r\n\r\n  function canSetBanker() public view returns (bool _result){\r\n    _result =  bankerEndTime <= now;\r\n  }\r\n\r\n  function ScratchTickets(string _gameName,uint256 _gameMinBetAmount,uint256 _gameMaxBetAmount,address _DonQuixoteToken) public{\r\n    require(_DonQuixoteToken != 0x0);\r\n    owner = msg.sender;\r\n    gameName = _gameName;\r\n    DonQuixoteToken = IDonQuixoteToken(_DonQuixoteToken);\r\n    gameMinBetAmount = _gameMinBetAmount;\r\n    gameMaxBetAmount = _gameMaxBetAmount;\r\n\r\n    _initAwardInfo();\r\n  }\r\n\r\n  function _initAwardInfo() private {\r\n    awardInfo memory a1 = awardInfo({\r\n      Type : 1,\r\n      Num : 1,\r\n      WinMultiplePer :1000,\r\n      KeyNumber : 7777,\r\n      AddIndex : 0\r\n    });\r\n    awardInfoOf[1] = a1;\r\n\r\n    awardInfo memory a2 = awardInfo({\r\n      Type : 2,\r\n      Num : 10,\r\n      WinMultiplePer :100,\r\n      KeyNumber : 888,\r\n      AddIndex : 1000\r\n    });\r\n    awardInfoOf[2] = a2;\r\n\r\n    awardInfo memory a3 = awardInfo({\r\n      Type : 3,\r\n      Num : 100,\r\n      WinMultiplePer :10,\r\n      KeyNumber : 99,\r\n      AddIndex : 100\r\n    });\r\n    awardInfoOf[3] = a3;\r\n\r\n    awardInfo memory a4 = awardInfo({\r\n      Type : 4,\r\n      Num : 1000,\r\n      WinMultiplePer :2,\r\n      KeyNumber : 6,\r\n      AddIndex : 10\r\n    });\r\n    awardInfoOf[4] = a4;\r\n\r\n    awardInfo memory a5 = awardInfo({\r\n      Type : 5,\r\n      Num : 2000,\r\n      WinMultiplePer :1,\r\n      KeyNumber : 3,\r\n      AddIndex : 5\r\n    });\r\n    awardInfoOf[5] = a5;\r\n  }\r\n\r\n  event OnSetNewBanker(address _caller, address _banker, uint _beginTime, uint _endTime, uint _code,uint _eventTime, uint eventId);\r\n  event OnPlay(address indexed _player, uint256 _betAmount,string _randomStr, uint _blockNumber,uint _playNo, uint _eventTime, uint eventId);\r\n  event OnGetAward(address indexed _player,uint indexed _awardType, uint256 _playNo,string _randomStr, uint _blockNumber,bytes32 _blockHash,uint256 _betAmount, uint _eventTime, uint eventId,uint256 _allAmount,uint256 _awardAmount);\r\n\r\n  function setAuction(address _newAuction) public onlyOwner{\r\n    auction = _newAuction;\r\n  }\r\n\r\n  function setBanker(address _banker, uint _beginTime, uint _endTime) public onlyAuction returns(bool _result){\r\n    _result = false;\r\n    require(_banker != 0x0);\r\n    if(now < bankerEndTime){\r\n      emit OnSetNewBanker(msg.sender, _banker,  _beginTime,  _endTime, 1, now, getEventId());\r\n      return;\r\n    }\r\n    if(_beginTime > now){\r\n      emit OnSetNewBanker(msg.sender, _banker,  _beginTime,  _endTime, 3, now, getEventId());\r\n      return;\r\n    }\r\n    if(_endTime <= now){\r\n      emit OnSetNewBanker(msg.sender, _banker,  _beginTime,  _endTime, 4, now, getEventId());\r\n      return;\r\n    }\r\n    currentBanker = _banker;\r\n    bankerBeginTime = _beginTime;\r\n    bankerEndTime = _endTime;\r\n    emit OnSetNewBanker(msg.sender, _banker,  _beginTime,  _endTime,0, now, getEventId());\r\n    if(now < donGameGiftLineTime){\r\n      DonQuixoteToken.logPlaying(_banker);\r\n    }\r\n    _result = true;\r\n  }\r\n\r\n  function tokenOf(address _user) view public returns(uint256 _result){\r\n    _result = DonQuixoteToken.balanceOf(_user);\r\n  }\r\n\r\n  function play(string _randomStr,uint256 _betAmount) public returns(bool _result){\r\n    _result = _play(_randomStr, _betAmount);\r\n  }\r\n\r\n  function _play(string _randomStr, uint256 _betAmount) private  returns(bool _result){\r\n    _result = false;\r\n    require(msg.sender != currentBanker);\r\n    require(now < bankerEndTime.sub(lockTime));\r\n    require(userTokenOf[currentBanker]>=gameMaxBetAmount.mul(1000));\r\n    require(bytes(_randomStr).length<=18);\r\n\r\n    uint256 ba = _betAmount;\r\n    if (ba > gameMaxBetAmount){\r\n      ba = gameMaxBetAmount;\r\n    }\r\n    require(ba >= gameMinBetAmount);\r\n\r\n    if(userTokenOf[msg.sender] < _betAmount){\r\n      depositToken(_betAmount.sub(userTokenOf[msg.sender]));\r\n    }\r\n    require(userTokenOf[msg.sender] >= ba);\r\n    betInfo memory bi = betInfo({\r\n      Player :  msg.sender,\r\n      BetAmount : ba,\r\n      BlockNumber : block.number,\r\n      RandomStr : _randomStr,\r\n      Banker : currentBanker,\r\n      BetNum : 0,\r\n      EventId : currentEventId,\r\n      IsReturnAward: false\r\n    });\r\n    playerBetInfoOf[playNo] = bi;\r\n    userTokenOf[msg.sender] = userTokenOf[msg.sender].sub(ba);\r\n    userTokenOf[currentBanker] = userTokenOf[currentBanker].add(ba);\r\n    emit OnPlay(msg.sender,  ba,  _randomStr, block.number,playNo,now, getEventId());\r\n    if(now < donGameGiftLineTime){\r\n      DonQuixoteToken.logPlaying(msg.sender);\r\n    }\r\n    playNo++;\r\n    _result = true;\r\n  }\r\n\r\n  function getAward(uint _playNo) public returns(bool _result){\r\n    _result = _getaward(_playNo);\r\n  }\r\n\r\n  function _getaward(uint _playNo) private  returns(bool _result){\r\n    require(_playNo<=playNo);\r\n    _result = false;\r\n    bool isAward = false;\r\n    betInfo storage bi = playerBetInfoOf[_playNo];\r\n    require(!bi.IsReturnAward);\r\n    require(bi.BlockNumber>block.number.sub(256));\r\n    bytes32 blockHash = block.blockhash(bi.BlockNumber);\r\n    lock();\r\n    uint256 randomNum = bi.EventId%1000;\r\n    bytes32 encrptyHash = keccak256(bi.RandomStr,bi.Player,blockHash,uint8ToString(randomNum));\r\n    bi.BetNum = uint(encrptyHash)%10000;\r\n    bi.IsReturnAward = true;\r\n    for (uint i = 1; i < 6; i++) {\r\n      awardInfo memory ai = awardInfoOf[i];\r\n      uint x = bi.BetNum%(10000/ai.Num);\r\n      if(x == ai.KeyNumber){\r\n        uint256 AllAmount = bi.BetAmount.mul(ai.WinMultiplePer);\r\n        uint256 awadrAmount = AllAmount;\r\n        if(AllAmount >= userTokenOf[bi.Banker]){\r\n          awadrAmount = userTokenOf[bi.Banker];\r\n        }\r\n        userTokenOf[bi.Banker] = userTokenOf[bi.Banker].sub(awadrAmount) ;\r\n        userTokenOf[bi.Player] =userTokenOf[bi.Player].add(awadrAmount);\r\n        isAward = true;\r\n        emit OnGetAward(bi.Player,i, _playNo,bi.RandomStr,bi.BlockNumber,blockHash,bi.BetAmount,now,getEventId(),AllAmount,awadrAmount);\r\n        break;\r\n      }\r\n    }\r\n    if(!isAward){\r\n      if(now < donGameGiftLineTime){\r\n        DonQuixoteToken.sendGameGift(bi.Player);\r\n      }\r\n      emit OnGetAward(bi.Player,0, _playNo,bi.RandomStr,bi.BlockNumber,blockHash,bi.BetAmount,now,getEventId(),0,0);\r\n    }\r\n    _result = true;\r\n    unLock();\r\n  }\r\n\r\n  function _withdrawToken(address _to, uint256 _amount) internal {\r\n    require(_to != 0x0);\r\n    if(_to == currentBanker){\r\n      require(userTokenOf[currentBanker] > gameMaxBetAmount.mul(1000));\r\n      _amount = userTokenOf[currentBanker].sub(gameMaxBetAmount.mul(1000));\r\n    }\r\n    userTokenOf[_to] = userTokenOf[_to].sub(_amount);\r\n    DonQuixoteToken.transfer(_to, _amount);\r\n  }\r\n\r\n  function uint8ToString(uint v) private pure returns (string)\r\n  {\r\n    uint maxlength = 8;\r\n    bytes memory reversed = new bytes(maxlength);\r\n    uint i = 0;\r\n    while (v != 0) {\r\n      uint remainder = v % 10;\r\n      v = v / 10;\r\n      reversed[i++] = byte(48 + remainder);\r\n    }\r\n    bytes memory s = new bytes(i);\r\n    for (uint j = 0; j < i; j++) {\r\n      s[j] = reversed[i - j - 1];\r\n    }\r\n    string memory str = string(s);\r\n    return str;\r\n  }\r\n\r\n  function setLockTime(uint256 _lockTIme)public onlyOwner(){\r\n    lockTime = _lockTIme;\r\n  }\r\n\r\n  function transEther() public onlyOwner()\r\n  {\r\n    msg.sender.transfer(address(this).balance);\r\n  }\r\n\r\n  function () public payable {\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_playNo\",\"type\":\"uint256\"}],\"name\":\"getAward\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentEventId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerBetInfoOf\",\"outputs\":[{\"name\":\"Player\",\"type\":\"address\"},{\"name\":\"BetAmount\",\"type\":\"uint256\"},{\"name\":\"BlockNumber\",\"type\":\"uint256\"},{\"name\":\"RandomStr\",\"type\":\"string\"},{\"name\":\"Banker\",\"type\":\"address\"},{\"name\":\"BetNum\",\"type\":\"uint256\"},{\"name\":\"EventId\",\"type\":\"uint256\"},{\"name\":\"IsReturnAward\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"officialGameUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOfficialGameUrl\",\"type\":\"string\"}],\"name\":\"setOfficialGameUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"tokenOf\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donGameGiftLineTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameMaxBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canSetBanker\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBanker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"awardInfoOf\",\"outputs\":[{\"name\":\"Type\",\"type\":\"uint256\"},{\"name\":\"Num\",\"type\":\"uint256\"},{\"name\":\"WinMultiplePer\",\"type\":\"uint256\"},{\"name\":\"KeyNumber\",\"type\":\"uint256\"},{\"name\":\"AddIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_randomStr\",\"type\":\"string\"},{\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockTIme\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_banker\",\"type\":\"address\"},{\"name\":\"_beginTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setBanker\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAuction\",\"type\":\"address\"}],\"name\":\"setAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokenOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameMinBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankerBeginTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DonQuixoteToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankerEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_gameName\",\"type\":\"string\"},{\"name\":\"_gameMinBetAmount\",\"type\":\"uint256\"},{\"name\":\"_gameMaxBetAmount\",\"type\":\"uint256\"},{\"name\":\"_DonQuixoteToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_banker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_beginTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_code\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"OnSetNewBanker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_randomStr\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_playNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"OnPlay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_awardType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_playNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_randomStr\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_allAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_awardAmount\",\"type\":\"uint256\"}],\"name\":\"OnGetAward\",\"type\":\"event\"}]","ContractName":"ScratchTickets","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000098c77a2a57fb08b1fd51120cbf95314a0f0deb8200000000000000000000000000000000000000000000000000000000000000124d617274696e204c7574686572204b696e670000000000000000000000000000","Library":"","SwarmSource":"bzzr://3c60e530cb8162bc3c4e9a21beb9a34440039b1831ee76e3acfaa3b4290f79d8"}]}