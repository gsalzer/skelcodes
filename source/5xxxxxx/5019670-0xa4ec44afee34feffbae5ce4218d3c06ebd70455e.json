{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// Contract written by MaximeHg\r\n// https://github.com/MaximeHg/sb52-contracts\r\n// Special thanks to moodysalem and its ethersquares contracts for the inspiration!\r\n// https://github.com/ethersquares/ethersquares-contracts\r\n\r\ncontract BallotSB52 {\r\n  using SafeMath for uint;\r\n  uint public phiWon;\r\n  uint public neWon;\r\n  Superbowl52 bettingContract;\r\n  mapping (address => bool) voted;\r\n  mapping (address => uint) votes;\r\n  uint public constant votingPeriod = 7 days;\r\n  uint public votingStart;\r\n  uint public votingEnd;\r\n  uint public validResult;\r\n  bool public closed;\r\n  uint public totalVoters;\r\n  // XX.XXX%\r\n  uint public threshold;\r\n  uint public votingReward;\r\n  mapping (address => uint) stake;\r\n  uint public majorityReward;\r\n  bool public tie;\r\n  mapping (address => bool) claimed;\r\n\r\n  function BallotSB52(uint th) public payable {\r\n    validResult = 0;\r\n    closed = false;\r\n    votingStart = now;\r\n    votingEnd = now + 7 days;\r\n    bettingContract = Superbowl52(msg.sender);\r\n    totalVoters = 0;\r\n    threshold = th;\r\n    tie = false;\r\n    votingReward = 0;\r\n  }\r\n\r\n  // you can only vote once\r\n  function voteResult(uint team) public payable {\r\n    require(votingStart <= now && votingEnd >= now);\r\n    require(voted[msg.sender] == false);\r\n    require(msg.value == 50 finney);\r\n    require(!closed);\r\n    if(team == 1) {\r\n      phiWon += 1;\r\n    }\r\n    else if (team == 2) {\r\n      neWon += 1;\r\n    } else revert();\r\n    voted[msg.sender] = true;\r\n    votes[msg.sender] = team;\r\n    totalVoters += 1;\r\n    stake[msg.sender] = msg.value;\r\n  }\r\n\r\n  function closeBallot() public returns (uint) {\r\n    require(!closed);\r\n    require(now > votingEnd);\r\n    if((phiWon.mul(100000).div(totalVoters) == neWon.mul(100000).div(totalVoters)) && (threshold == 50000)) {\r\n      validResult = 9;\r\n      closed = true;\r\n      tie = true;\r\n      return validResult;\r\n    } else if(phiWon.mul(100000).div(totalVoters) >= threshold) {\r\n      validResult = 1;\r\n      votingReward = bettingContract.getLosersOnePercent(2);\r\n      majorityReward = (neWon * 50 finney).add(votingReward).div(phiWon);\r\n    } else if (neWon.mul(100000).div(totalVoters) >= threshold) {\r\n      validResult = 2;\r\n      votingReward = bettingContract.getLosersOnePercent(3);\r\n      majorityReward = (phiWon * 50 finney).add(votingReward).div(neWon);\r\n    } else {\r\n      if (neWon.mul(100000).div(totalVoters) > 50000) majorityReward = (phiWon * 50 finney).div(neWon);\r\n      else if (phiWon.mul(100000).div(totalVoters) > 50000) majorityReward = (neWon * 50 finney).div(phiWon);\r\n      else {\r\n        tie = true;\r\n        majorityReward = 0;\r\n      }\r\n      validResult = 0;\r\n    }\r\n    closed = true;\r\n    return validResult;\r\n  }\r\n\r\n  // anyone can claim reward for a voter\r\n  function getReward(address voter) public {\r\n    require(closed);\r\n    require(voted[voter]);\r\n    require(claimed[voter] == false);\r\n    if(tie) {\r\n      voter.transfer(stake[voter]);\r\n    }\r\n    // majority gets rewarded\r\n    if(votes[voter] == validResult) {\r\n      voter.transfer(stake[voter] + majorityReward);\r\n    } // minority loses all\r\n    claimed[voter] = true;\r\n  }\r\n\r\n  function hasClaimed(address voter) public constant returns (bool) {\r\n    return claimed[voter];\r\n  }\r\n\r\n  function () public payable {}\r\n}\r\n\r\n// Contract written by MaximeHg\r\n// https://github.com/MaximeHg/sb52-contracts\r\n// Special thanks to moodysalem and its ethersquares contracts for the inspiration!\r\n// https://github.com/ethersquares/ethersquares-contracts\r\n\r\ncontract Superbowl52 {\r\n  using SafeMath for uint;\r\n  uint public constant GAME_START_TIME = 1517787000;\r\n  bool public resultConfirmed = false;\r\n  address public owner;\r\n\r\n  mapping(address => betting) public bets;\r\n  uint public totalBets;\r\n  uint public philadelphiaBets;\r\n  uint public newEnglandBets;\r\n  uint public result;\r\n  uint public betters;\r\n  bool public votingOpen;\r\n  bool public withdrawalOpen;\r\n  uint public threshold;\r\n  uint public winningPot;\r\n  mapping(address => uint) public wins;\r\n\r\n  BallotSB52 public ballot;\r\n\r\n  struct betting {\r\n    uint philadelphiaBets;\r\n    uint newEnglandBets;\r\n    bool claimed;\r\n  }\r\n\r\n  function Superbowl52() public {\r\n    require(now<GAME_START_TIME);\r\n    owner = msg.sender;\r\n    result = 0;\r\n    votingOpen = false;\r\n    withdrawalOpen = false;\r\n    // 90%\r\n    threshold = 90000;\r\n    winningPot = 0;\r\n  }\r\n\r\n  // team 1 is Philadelphia\r\n  // team 2 is New England\r\n  // a bet is final and you cannot change it\r\n  function bet(uint team) public payable {\r\n    require(team == 1 || team == 2);\r\n    require(now <= GAME_START_TIME);\r\n    require(msg.value > 0);\r\n    if(!hasBet(msg.sender)) betters += 1;\r\n    if(team == 1) {\r\n      bets[msg.sender].philadelphiaBets += msg.value;\r\n      philadelphiaBets += msg.value;\r\n    } else if (team == 2) {\r\n      bets[msg.sender].newEnglandBets += msg.value;\r\n      newEnglandBets += msg.value;\r\n    }\r\n    totalBets += msg.value;\r\n  }\r\n\r\n  function () public payable {\r\n    revert();\r\n  }\r\n\r\n  function getPhiladelphiaBets(address better) public constant returns (uint) {\r\n    return bets[better].philadelphiaBets;\r\n  }\r\n\r\n  function getNewEnglandBets(address better) public constant returns (uint) {\r\n    return bets[better].newEnglandBets;\r\n  }\r\n\r\n  function hasClaimed(address better) public constant returns (bool) {\r\n    return bets[better].claimed;\r\n  }\r\n\r\n  function startVoting() public {\r\n    require(votingOpen == false);\r\n    require(withdrawalOpen == false);\r\n    require(now >= GAME_START_TIME + 8 hours);\r\n    votingOpen = true;\r\n    ballot = new BallotSB52(threshold);\r\n  }\r\n\r\n  function hasBet(address better) public constant returns (bool) {\r\n    return (bets[better].philadelphiaBets + bets[better].newEnglandBets) > 0;\r\n  }\r\n\r\n  function endVoting() public {\r\n    require(votingOpen);\r\n    result = ballot.closeBallot();\r\n    // ballot ends with success\r\n    if (result == 1 || result == 2) {\r\n      withdrawalOpen = true;\r\n      votingOpen = false;\r\n    } else if (result == 9) {\r\n      votingOpen = false;\r\n      withdrawalOpen = false;\r\n    } else {\r\n      threshold = threshold - 5000;\r\n      ballot = new BallotSB52(threshold);\r\n    }\r\n    if(result == 1) winningPot = totalBets.sub(newEnglandBets.div(100));\r\n    if(result == 2) winningPot = totalBets.sub(philadelphiaBets.div(100));\r\n  }\r\n\r\n  function getLosersOnePercent(uint loser) public returns (uint) {\r\n    require(votingOpen);\r\n    require(msg.sender == address(ballot));\r\n    if(loser==1) {\r\n      ballot.transfer(philadelphiaBets.div(100));\r\n      return philadelphiaBets.div(100);\r\n    }\r\n    else if (loser==2) {\r\n      ballot.transfer(newEnglandBets.div(100));\r\n      return newEnglandBets.div(100);\r\n    }\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // triggered only if tie in the final ballot\r\n  function breakTie(uint team) {\r\n    require(result == 9);\r\n    require(msg.sender == owner);\r\n    result = team;\r\n    withdrawalOpen = true;\r\n  }\r\n\r\n  function getWinnings(uint donation) public {\r\n    require(donation<=100);\r\n    require(withdrawalOpen);\r\n    require(bets[msg.sender].claimed == false);\r\n    uint winnings = 0;\r\n    if (result == 1) winnings = (getPhiladelphiaBets(msg.sender).mul(winningPot)).div(philadelphiaBets);\r\n    else if (result == 2) winnings = (getNewEnglandBets(msg.sender).mul(winningPot)).div(newEnglandBets);\r\n    else revert();\r\n    wins[msg.sender] = winnings;\r\n    uint donated = winnings.mul(donation).div(100);\r\n    bets[msg.sender].claimed = true;\r\n    owner.transfer(donated);\r\n    msg.sender.transfer(winnings-donated);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"winningPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"better\",\"type\":\"address\"}],\"name\":\"getPhiladelphiaBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newEnglandBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"better\",\"type\":\"address\"}],\"name\":\"hasBet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startVoting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"result\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"better\",\"type\":\"address\"}],\"name\":\"getNewEnglandBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"team\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"better\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"loser\",\"type\":\"uint256\"}],\"name\":\"getLosersOnePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"wins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bets\",\"outputs\":[{\"name\":\"philadelphiaBets\",\"type\":\"uint256\"},{\"name\":\"newEnglandBets\",\"type\":\"uint256\"},{\"name\":\"claimed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"team\",\"type\":\"uint256\"}],\"name\":\"breakTie\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"philadelphiaBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resultConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ballot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"donation\",\"type\":\"uint256\"}],\"name\":\"getWinnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endVoting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAME_START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Superbowl52","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://50af337cf653f24864b5d932e3f3def945bf841f8dace96a23d6627be67a58ca"}]}