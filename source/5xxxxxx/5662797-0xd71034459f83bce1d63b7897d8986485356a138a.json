{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\n// Library used for performing arithmetic operations\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n    /*\r\n    ERC Token Standard #20 Interface\r\n    */\r\n\r\n// ----------------------------------------------------------------------------\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n    /*\r\n    Contract function to receive approval and execute function in one call\r\n     */\r\n// ----------------------------------------------------------------------------\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n//Owned contract\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    /** @dev Assigns ownership to calling address\r\n      */\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    /** @dev Transfers ownership to new address\r\n     *  \r\n      */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    /** @dev Accept ownership of the contract\r\n      */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Owned {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n\r\n/*\r\n\r\nERC20 Token, with the addition of symbol, name and decimals and an initial fixed supply\r\n      \r\n*/\r\n      \r\ncontract SpaceXToken is ERC20Interface, Owned, Pausable {\r\n    using SafeMath for uint;\r\n\r\n\r\n    uint8 public decimals;\r\n    \r\n    uint256 public totalRaised;           // Total ether raised (in wei)\r\n    uint256 public startTimestamp;        // Timestamp after which ICO will start\r\n    uint256 public endTimeStamp;          // Timestamp at which ICO will end\r\n    uint256 public basePrice =  15000000000000000;              // All prices are in Wei\r\n    uint256 public step1 =      80000000000000;\r\n    uint256 public step2 =      60000000000000;\r\n    uint256 public step3 =      40000000000000;\r\n    uint256 public tokensSold;\r\n    uint256 currentPrice;\r\n    uint256 public totalPrice;\r\n    uint256 public _totalSupply;        // Total number of presale tokens available\r\n    \r\n    string public version = '1.0';      // The current version of token\r\n    string public symbol;           \r\n    string public  name;\r\n    \r\n    \r\n    address public fundsWallet;             // Where should the raised ETH go?\r\n\r\n    mapping(address => uint) balances;    // Keeps the record of tokens with each owner address\r\n    mapping(address => mapping(address => uint)) allowed; // Tokens allowed to be transferred\r\n\r\n    /** @dev Constructor\r\n      \r\n      */\r\n\r\n    function SpaceXToken() public {\r\n        tokensSold = 0;\r\n        startTimestamp = 1527080400;\r\n        endTimeStamp = 1529672400;\r\n        fundsWallet = owner;\r\n        name = \"SpaceXToken\";                                     // Set the name for display purposes (CHANGE THIS)\r\n        decimals = 0;                                               // numberOfTokens of decimals for display purposes (CHANGE THIS)\r\n        symbol = \"SCX\";                       // symbol for token\r\n        _totalSupply = 4000 * 10**uint(decimals);       // total supply of tokens \r\n        balances[owner] = _totalSupply;               // assigning all tokens to owner\r\n        tokensSold = 0;\r\n        currentPrice = basePrice;\r\n        totalPrice = 0;\r\n        Transfer(msg.sender, owner, _totalSupply);\r\n\r\n\r\n    }\r\n\r\n\r\n    /* @dev returns totalSupply of tokens.\r\n      \r\n      \r\n     */\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n\r\n\r\n    /** @dev returns balance of tokens of Owner.\r\n     *  @param tokenOwner address token owner\r\n      \r\n      \r\n     */\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    /** @dev Transfer the tokens from token owner's account to `to` account\r\n     *  @param to address where token is to be sent\r\n     *  @param tokens  number of tokens\r\n      \r\n     */\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    /** @dev Token owner can approve for `spender` to transferFrom(...) `tokens` from the token owner's account\r\n     *  @param spender address of spender \r\n     *  @param tokens number of tokens\r\n     \r\n      \r\n     */\r\n    \r\n    // ------------------------------------------------------------------------\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces \r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    /** @dev Transfer `tokens` from the `from` account to the `to` account\r\n     *  @param from address from where token is being sent\r\n     *  @param to where token is to be sent\r\n     *  @param tokens number of tokens\r\n      \r\n      \r\n     */\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    /** \r\n     *  @param tokenOwner Token Owner address\r\n     *  @param spender Address of spender\r\n      \r\n     */\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    /** \r\n     *  @dev Token owner can approve for `spender` to transferFrom(...) `tokens` from the token owner's account. The `spender` contract function`receiveApproval(...)` is then executed\r\n     \r\n      \r\n     */\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n    /** \r\n     *  @dev Facilitates sale of presale tokens\r\n     *  @param numberOfTokens number of tokens to be bought\r\n     */\r\n    function TokenSale(uint256 numberOfTokens) public whenNotPaused payable { // Facilitates sale of presale token\r\n        \r\n        // All the required conditions for the sale of token\r\n        \r\n        require(now >= startTimestamp , \"Sale has not started yet.\");\r\n        require(now <= endTimeStamp, \"Sale has ended.\");\r\n        require(balances[fundsWallet] >= numberOfTokens , \"There are no more tokens to be sold.\" );\r\n        require(numberOfTokens >= 1 , \"You must buy 1 or more tokens.\");\r\n        require(numberOfTokens <= 10 , \"You must buy at most 10 tokens in a single purchase.\");\r\n        require(tokensSold.add(numberOfTokens) <= _totalSupply);\r\n        require(tokensSold<3700, \"There are no more tokens to be sold.\");\r\n        \r\n        // Price step function\r\n        \r\n        if(tokensSold <= 1000){\r\n          \r\n            totalPrice = ((numberOfTokens) * (2*currentPrice + (numberOfTokens-1)*step1))/2;\r\n            \r\n        }\r\n        \r\n        if(tokensSold > 1000 && tokensSold <= 3000){\r\n            totalPrice = ((numberOfTokens) * (2*currentPrice + (numberOfTokens-1)*step2))/2;\r\n        \r\n            \r\n        }\r\n        \r\n        \r\n        if(tokensSold > 3000){\r\n            totalPrice = ((numberOfTokens) * (2*currentPrice + (numberOfTokens-1)*step3))/2;\r\n        \r\n            \r\n        }\r\n        \r\n        \r\n        require (msg.value >= totalPrice);  // Check if message value is enough to buy given number of tokens\r\n\r\n        balances[fundsWallet] = balances[fundsWallet] - numberOfTokens;\r\n        balances[msg.sender] = balances[msg.sender] + numberOfTokens;\r\n\r\n        tokensSold = tokensSold + numberOfTokens;\r\n        \r\n        if(tokensSold <= 1000){\r\n          \r\n            currentPrice = basePrice + step1 * tokensSold;\r\n            \r\n        }\r\n        \r\n        if(tokensSold > 1000 && tokensSold <= 3000){\r\n            currentPrice = basePrice + (step1 * 1000) + (step2 * (tokensSold-1000));\r\n        \r\n            \r\n        }\r\n        \r\n        if(tokensSold > 3000){\r\n            \r\n            currentPrice = basePrice + (step1 * 1000) + (step2 * 2000) + (step3 * (tokensSold-3000));\r\n          \r\n        }\r\n        totalRaised = totalRaised + totalPrice;\r\n        \r\n        msg.sender.transfer(msg.value - totalPrice);            ////Transfer extra ether to wallet of the spender\r\n        Transfer(fundsWallet, msg.sender, numberOfTokens); // Broadcast a message to the blockchain\r\n\r\n    }\r\n    \r\n    /** \r\n     *  @dev Owner can transfer out any accidentally sent ERC20 tokens\r\n     *  @dev Transfer the tokens from token owner's account to `to` account\r\n     *  @param tokenAddress address where token is to be sent\r\n     *  @param tokens  number of tokens\r\n     */\r\n     \r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n   /** \r\n     *  @dev view current price of tokens\r\n     */\r\n    \r\n    function viewCurrentPrice() view returns (uint) {\r\n        if(tokensSold <= 1000){\r\n          \r\n            return basePrice + step1 * tokensSold;\r\n            \r\n        }\r\n        \r\n        if(tokensSold > 1000 && tokensSold <= 3000){\r\n            return basePrice + (step1 * 1000) + (step2 * (tokensSold-1000));\r\n        \r\n            \r\n        }\r\n        \r\n        if(tokensSold > 3000){\r\n            \r\n            return basePrice + (step1 * 1000) + (step2 * 2000) + (step3 * (tokensSold-3000));\r\n          \r\n        }\r\n    }\r\n\r\n    \r\n   /** \r\n     *  @dev view number of tokens sold\r\n     */\r\n    \r\n    function viewTokensSold() view returns (uint) {\r\n        return tokensSold;\r\n    }\r\n\r\n    /** \r\n     *  @dev view number of remaining tokens\r\n     */\r\n    \r\n    function viewTokensRemaining() view returns (uint) {\r\n        return _totalSupply - tokensSold;\r\n    }\r\n    \r\n    /** \r\n     *  @dev withdrawBalance from the contract address\r\n     *  @param amount that you want to withdrawBalance\r\n     * \r\n     */\r\n     \r\n    function withdrawBalance(uint256 amount) onlyOwner returns(bool) {\r\n        require(amount <= address(this).balance);\r\n        owner.transfer(amount);\r\n        return true;\r\n\r\n    }\r\n    \r\n    /** \r\n     *  @dev view balance of contract\r\n     */\r\n     \r\n    function getBalanceContract() constant returns(uint){\r\n        return address(this).balance;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"TokenSale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewTokensRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"step2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"step1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"step3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SpaceXToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://345ba606db55fe5a2961d59bf709c3596be92dac11ad3715cd1701959a3333b9"}]}