{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract BBODServiceRegistry is Ownable {\r\n\r\n  //1. Manager\r\n  //2. CustodyStorage\r\n  mapping(uint => address) public registry;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n  function setServiceRegistryEntry (uint key, address entry) external onlyOwner {\r\n    registry[key] = entry;\r\n  }\r\n}\r\n\r\ncontract CustodyStorage {\r\n\r\n  BBODServiceRegistry public bbodServiceRegistry;\r\n\r\n  mapping(address => bool) public custodiesMap;\r\n\r\n  //Number of all custodies in the contract\r\n  uint public custodyCounter = 0;\r\n\r\n  address[] public custodiesArray;\r\n\r\n  event CustodyRemoved(address indexed custody);\r\n\r\n  constructor(address _serviceRegistryAddress) public {\r\n    bbodServiceRegistry = BBODServiceRegistry(_serviceRegistryAddress);\r\n  }\r\n\r\n  modifier onlyManager() {\r\n    require(msg.sender == bbodServiceRegistry.registry(1));\r\n    _;\r\n  }\r\n\r\n  function addCustody(address _custody) external onlyManager {\r\n    custodiesMap[_custody] = true;\r\n    custodiesArray.push(_custody);\r\n    custodyCounter++;\r\n  }\r\n\r\n  function removeCustody(address _custodyAddress, uint _arrayIndex) external onlyManager {\r\n    require(custodiesArray[_arrayIndex] == _custodyAddress);\r\n\r\n    if (_arrayIndex == custodyCounter - 1) {\r\n      //Removing last custody\r\n      custodiesMap[_custodyAddress] = false;\r\n      emit CustodyRemoved(_custodyAddress);\r\n      custodyCounter--;\r\n      return;\r\n    }\r\n\r\n    custodiesMap[_custodyAddress] = false;\r\n    //Overwriting deleted custody with the last custody in the array\r\n    custodiesArray[_arrayIndex] = custodiesArray[custodyCounter - 1];\r\n    custodyCounter--;\r\n\r\n    emit CustodyRemoved(_custodyAddress);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"bbodServiceRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_custodyAddress\",\"type\":\"address\"},{\"name\":\"_arrayIndex\",\"type\":\"uint256\"}],\"name\":\"removeCustody\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodyCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_custody\",\"type\":\"address\"}],\"name\":\"addCustody\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"custodiesMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"custodiesArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_serviceRegistryAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"custody\",\"type\":\"address\"}],\"name\":\"CustodyRemoved\",\"type\":\"event\"}]","ContractName":"CustodyStorage","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009e55ca0690ac83dcb4d675873c0e344c848dbbf2","Library":"","SwarmSource":"bzzr://fdb1e03ba05325c836d1493018a4b4626fcaf66d0735fbcdec98094463dd392c"}]}