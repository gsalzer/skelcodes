{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract BountyHunter {\r\n\r\n  function() public payable { }\r\n\r\n  string public constant NAME = \"BountyHunter\";\r\n  string public constant SYMBOL = \"BountyHunter\";\r\n  address ceoAddress = 0xc10A6AedE9564efcDC5E842772313f0669D79497;\r\n  address hunter;\r\n  address hunted;\r\n\r\n  struct ContractData {\r\n    address user;\r\n    uint256 hunterPrice;\r\n    uint256 last_transaction;\r\n   \r\n  }\r\n\r\n  ContractData[8] data;\r\n  \r\n\r\n  \r\n  function BountyHunter() public {\r\n    for (uint i = 0; i < 8; i++) {\r\n     \r\n      data[i].hunterPrice = 5000000000000000;\r\n      data[i].user = msg.sender;\r\n      data[i].last_transaction = block.timestamp;\r\n    }\r\n  }\r\n\r\n\r\n  function payoutOnPurchase(address previousHunterOwner, uint256 hunterPrice) private {\r\n    previousHunterOwner.transfer(hunterPrice);\r\n  }\r\n  function transactionFee(address, uint256 hunterPrice) private {\r\n    ceoAddress.transfer(hunterPrice);\r\n  }\r\n  function createBounty(uint256 hunterPrice) private {\r\n    this.transfer(hunterPrice);\r\n  }\r\n\r\n\r\n  \r\n  function hireBountyHunter(uint bountyHunterID) public payable returns (uint, uint) {\r\n    require(bountyHunterID >= 0 && bountyHunterID <= 8);\r\n    \r\n    if ( data[bountyHunterID].hunterPrice == 5000000000000000 ) {\r\n      data[bountyHunterID].hunterPrice = 10000000000000000;\r\n    }\r\n    else { \r\n      data[bountyHunterID].hunterPrice = data[bountyHunterID].hunterPrice * 2;\r\n    }\r\n    \r\n    require(msg.value >= data[bountyHunterID].hunterPrice * uint256(1));\r\n\r\n    createBounty((data[bountyHunterID].hunterPrice / 10) * (3));\r\n    \r\n    payoutOnPurchase(data[bountyHunterID].user,  (data[bountyHunterID].hunterPrice / 10) * (6));\r\n    \r\n    transactionFee(ceoAddress, (data[bountyHunterID].hunterPrice / 10) * (1));\r\n\r\n    \r\n    data[bountyHunterID].user = msg.sender;\r\n    \r\n    playerKiller();\r\n    \r\n    return (bountyHunterID, data[bountyHunterID].hunterPrice);\r\n\r\n  }\r\n\r\n\r\n  function getUsers() public view returns (address[], uint256[]) {\r\n    address[] memory users = new address[](8);\r\n    uint256[] memory hunterPrices =  new uint256[](8);\r\n    for (uint i=0; i<8; i++) {\r\n      if (data[i].user != ceoAddress){\r\n        users[i] = (data[i].user);\r\n      }\r\n      else{\r\n        users[i] = address(0);\r\n      }\r\n      \r\n      hunterPrices[i] = (data[i].hunterPrice);\r\n    }\r\n    return (users,hunterPrices);\r\n  }\r\n\r\n  function rand(uint max) public returns (uint256){\r\n        \r\n    uint256 lastBlockNumber = block.number - 1;\r\n    uint256 hashVal = uint256(block.blockhash(lastBlockNumber));\r\n\r\n    uint256 FACTOR = 1157920892373161954235709850086879078532699846656405640394575840079131296399;\r\n    return uint256(uint256( (hashVal) / FACTOR) + 1) % max;\r\n  }\r\n  \r\n  \r\n  function playerKiller() private {\r\n    uint256 killshot = rand(31);\r\n\r\n    if( (killshot < 8) &&  (msg.sender != data[killshot].user) ){\r\n      hunter = msg.sender;\r\n      if( ceoAddress != data[killshot].user){\r\n        hunted = data[killshot].user;\r\n      }\r\n      else{\r\n        hunted = address(0);\r\n      }\r\n      \r\n      data[killshot].hunterPrice  = 5000000000000000;\r\n      data[killshot].user  = 5000000000000000;\r\n\r\n      msg.sender.transfer((this.balance / 10) * (9));\r\n      ceoAddress.transfer((this.balance / 10) * (1));\r\n\r\n    }\r\n    \r\n  }\r\n\r\n  function killFeed() public view returns(address, address){\r\n    return(hunter, hunted);\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"rand\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"killFeed\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bountyHunterID\",\"type\":\"uint256\"}],\"name\":\"hireBountyHunter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BountyHunter","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://368e8114aa3fa39f405cc836625b4324fb61560fe78cb99335b28b38ca037535"}]}