{"status":"1","message":"OK","result":[{"SourceCode":"// Lottery Source code\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n/// @title A base contract to control ownership\r\n/// @author cuilichen\r\ncontract OwnerBase {\r\n\r\n    // The addresses of the accounts that can execute actions within each roles.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n    \r\n    /// constructor\r\n    function OwnerBase() public {\r\n       ceoAddress = msg.sender;\r\n       cfoAddress = msg.sender;\r\n       cooAddress = msg.sender;\r\n    }\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n    \r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new COO\r\n    function setCFO(address _newCFO) external onlyCEO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n    \r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) external onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() external onlyCOO whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause() public onlyCOO whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n    \r\n    \r\n    /// @dev check wether target address is a contract or not\r\n    function isNormalUser(address addr) internal view returns (bool) {\r\n        if (addr == address(0)) {\r\n            return false;\r\n        }\r\n        uint size = 0;\r\n        assembly { \r\n            size := extcodesize(addr) \r\n        } \r\n        return size == 0;\r\n    }\r\n}\r\n\r\n\r\ncontract Lottery is OwnerBase {\r\n\r\n    event Winner( address indexed account,uint indexed id, uint indexed sn );\r\n    \r\n    uint public price = 1 finney;\r\n    \r\n    uint public reward = 10 finney;\r\n    \r\n    uint public sn = 1;\r\n    \r\n    uint private seed = 0;\r\n    \r\n    \r\n    /// @dev constructor of contract, create a seed\r\n    function Lottery() public {\r\n        ceoAddress = msg.sender;\r\n        cooAddress = msg.sender;\r\n        cfoAddress = msg.sender;\r\n        seed = now;\r\n    }\r\n    \r\n    /// @dev set seed by coo\r\n    function setSeed( uint val) public onlyCOO {\r\n        seed = val;\r\n    }\r\n    \r\n    \r\n    function() public payable {\r\n        // get ether, maybe from coo.\r\n    }\r\n        \r\n    \r\n    \r\n    /// @dev buy lottery\r\n    function buy(uint id) payable public {\r\n        require(isNormalUser(msg.sender));\r\n        require(msg.value >= price);\r\n        uint back = msg.value - price;  \r\n        \r\n        sn++;\r\n        uint sum = seed + sn + now + uint(msg.sender);\r\n        uint ran = uint16(keccak256(sum));\r\n        if (ran * 10000 < 880 * 0xffff) { // win the reward \r\n            back = reward + back;\r\n            emit Winner(msg.sender, id, sn);\r\n        }else{\r\n            emit Winner(msg.sender, id, 0);\r\n        }\r\n        \r\n        if (back > 1 finney) {\r\n            msg.sender.transfer(back);\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n    // @dev Allows the cfo to capture the balance.\r\n    function cfoWithdraw( uint remain) external onlyCFO {\r\n        address myself = address(this);\r\n        require(myself.balance > remain);\r\n        cfoAddress.transfer(myself.balance - remain);\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"remain\",\"type\":\"uint256\"}],\"name\":\"cfoWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setSeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"sn\",\"type\":\"uint256\"}],\"name\":\"Winner\",\"type\":\"event\"}]","ContractName":"Lottery","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a73afe292243a0b32bf724850501e0ef2231e4a344ea92d685dbd9837f14780c"}]}