{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract VanilCoin is MintableToken {\r\n  \t\r\n\tstring public name = \"Vanil\";\r\n  \tstring public symbol = \"VAN\";\r\n  \tuint256 public decimals = 18;\r\n  \r\n  \t// tokens locked for one week after ICO, 8 Oct 2017, 0:0:0 GMT: 1507420800\r\n  \tuint public releaseTime = 1507420800;\r\n  \r\n\tmodifier canTransfer(address _sender, uint256 _value) {\r\n\t\trequire(_value <= transferableTokens(_sender, now));\r\n\t   \t_;\r\n\t}\r\n\t\r\n\tfunction transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) returns (bool) {\r\n\t\treturn super.transfer(_to, _value);\r\n\t}\r\n\t\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) returns (bool) {\r\n\t\treturn super.transferFrom(_from, _to, _value);\r\n\t}\r\n\t\r\n\tfunction transferableTokens(address holder, uint time) constant public returns (uint256) {\r\n\t\t\r\n\t\tuint256 result = 0;\r\n\t\t\t\t\r\n\t\tif(time > releaseTime){\r\n\t\t\tresult = balanceOf(holder);\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t\r\n}\r\n\r\ncontract ETH888CrowdsaleS2 {\r\n\r\n\tusing SafeMath for uint256;\r\n\t\r\n\t// The token being sold\r\n\taddress public vanilAddress;\r\n\tVanilCoin public vanilCoin;\r\n\t\r\n\t// address where funds are collected\r\n\taddress public wallet;\r\n\t\r\n\t// how many token units a buyer gets per wei\r\n\tuint256 public rate = 400;\r\n\t\r\n\t// timestamps for ICO starts and ends\r\n\tuint public startTimestamp;\r\n\tuint public endTimestamp;\r\n\t\r\n\t// amount of raised money in wei\r\n\tuint256 public weiRaised;\r\n\t\r\n\tmapping(uint8 => uint64) public rates;\r\n\t// week 2, 5 May 2018, 000:00:00 GMT\r\n\tuint public timeTier1 = 1525478400;\r\n\t// week 3, 12 May 2018, 000:00:00 GMT\r\n\tuint public timeTier2 = 1526083200;\r\n\t// week 4, 19 May 2018, 000:00:00 GMT\r\n\tuint public timeTier3 = 1526688000;\r\n\r\n\t/**\r\n\t   * event for token purchase logging\r\n\t   * @param purchaser who paid for the tokens\r\n\t   * @param beneficiary who got the tokens\r\n\t   * @param value weis paid for purchase\r\n\t   * @param amount amount of tokens purchased\r\n\t   */ \r\n\tevent TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\tfunction ETH888CrowdsaleS2(address _wallet, address _vanilAddress) {\r\n\t\t\r\n\t\trequire(_wallet != 0x0 && _vanilAddress != 0x0);\r\n\t\t\r\n\t\t// 28 April 2018, 00:00:00 GMT: 1524873600\r\n\t\tstartTimestamp = 1524873600;\r\n\t\t\r\n\t\t// 28 May 2018, 00:00:00 GMT: 1527465600\r\n\t\tendTimestamp = 1527465600;\r\n\t\t\r\n\t\trates[0] = 400;\r\n\t\trates[1] = 300;\r\n\t\trates[2] = 200;\r\n\t\trates[3] = 100;\r\n\r\n\t\twallet = _wallet;\r\n\t\tvanilAddress = _vanilAddress;\r\n\t\tvanilCoin = VanilCoin(vanilAddress);\r\n\t}\r\n\t\t\r\n\t// fallback function can be used to buy tokens\r\n\tfunction () payable {\r\n\t    buyTokens(msg.sender);\r\n\t}\r\n\t\r\n\t// low level token purchase function\r\n\tfunction buyTokens(address beneficiary) payable {\r\n\t\trequire(beneficiary != 0x0 && validPurchase() && validAmount());\r\n\r\n\t\tif(now < timeTier1)\r\n\t\t\trate = rates[0];\r\n\t\telse if(now < timeTier2)\r\n\t\t\trate = rates[1];\r\n\t\telse if(now < timeTier3)\r\n\t\t\trate = rates[2];\r\n\t\telse\r\n\t\t\trate = rates[3];\r\n\r\n\t\tuint256 weiAmount = msg.value;\r\n\t\tuint256 tokens = weiAmount.mul(rate);\r\n\r\n\t\t// update state\r\n\t\tweiRaised = weiRaised.add(weiAmount);\r\n\t\tvanilCoin.transfer(beneficiary, tokens);\r\n\r\n\t\tTokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n\t\tforwardFunds();\r\n\t}\r\n\r\n\tfunction totalSupply() public constant returns (uint)\r\n\t{\r\n\t\treturn vanilCoin.totalSupply();\r\n\t}\r\n\r\n\tfunction vanilAddress() public constant returns (address)\r\n\t{\r\n\t\treturn vanilAddress;\r\n\t}\r\n\r\n\t// send ether to the fund collection wallet\r\n\tfunction forwardFunds() internal {\r\n\t\twallet.transfer(msg.value);\r\n\t}\t\r\n\t\r\n\tfunction validAmount() internal constant returns (bool)\r\n\t{\r\n\t\tuint256 weiAmount = msg.value;\r\n\t\tuint256 tokens = weiAmount.mul(rate);\r\n\r\n\t\treturn (vanilCoin.balanceOf(this) >= tokens);\r\n\t}\r\n\r\n\t// @return true if investors can buy at the moment\r\n\tfunction validPurchase() internal constant returns (bool) {\r\n\t\t\r\n\t\tuint current = now;\r\n\t\tbool withinPeriod = current >= startTimestamp && current <= endTimestamp;\r\n\t\tbool nonZeroPurchase = msg.value != 0;\r\n\t\t\r\n\t\treturn withinPeriod && nonZeroPurchase && msg.value >= 1000 szabo;\r\n\t}\r\n\r\n\t// @return true if crowdsale event has ended\r\n\tfunction hasEnded() public constant returns (bool) {\r\n\t\t\r\n\t\treturn now > endTimestamp;\r\n\t}\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"vanilAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeTier3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vanilCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"rates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeTier1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeTier2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_vanilAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"ETH888CrowdsaleS2","CompilerVersion":"v0.4.13+commit.fb4cb1a","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"00000000000000000000000034d2f8d5b4dcca9ba4abc7d0cef1d38b74c6e2f30000000000000000000000007ee8477645d22f6006e01b576319d9a7cd98d4d1","Library":"","SwarmSource":"bzzr://687a957a70e4b4a4c9fa97b77c6ccac2c1fa1b64ba0dbd19b8b8fe1e67c5139e"}]}