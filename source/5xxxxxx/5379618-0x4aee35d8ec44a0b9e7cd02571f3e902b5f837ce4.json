{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n// File: contracts/BytesDeserializer.sol\r\n\r\n/*\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n/*\r\n * Deserialize bytes payloads.\r\n *\r\n * Values are in big-endian byte order.\r\n *\r\n */\r\nlibrary BytesDeserializer {\r\n\r\n  /*\r\n   * Extract 256-bit worth of data from the bytes stream.\r\n   */\r\n  function slice32(bytes b, uint offset) public pure returns (bytes32) {\r\n    bytes32 out;\r\n\r\n    for (uint i = 0; i < 32; i++) {\r\n      out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\r\n    }\r\n    return out;\r\n  }\r\n\r\n  /*\r\n   * Extract Ethereum address worth of data from the bytes stream.\r\n   */\r\n  function sliceAddress(bytes b, uint offset) public pure returns (address) {\r\n    bytes32 out;\r\n\r\n    for (uint i = 0; i < 20; i++) {\r\n      out |= bytes32(b[offset + i] & 0xFF) >> ((i+12) * 8);\r\n    }\r\n    return address(uint(out));\r\n  }\r\n\r\n  /*\r\n   * Extract 128-bit worth of data from the bytes stream.\r\n   */\r\n  function slice16(bytes b, uint offset) public pure returns (bytes16) {\r\n    bytes16 out;\r\n\r\n    for (uint i = 0; i < 16; i++) {\r\n      out |= bytes16(b[offset + i] & 0xFF) >> (i * 8);\r\n    }\r\n    return out;\r\n  }\r\n\r\n  /*\r\n   * Extract 32-bit worth of data from the bytes stream.\r\n   */\r\n  function slice4(bytes b, uint offset) public pure returns (bytes4) {\r\n    bytes4 out;\r\n\r\n    for (uint i = 0; i < 4; i++) {\r\n      out |= bytes4(b[offset + i] & 0xFF) >> (i * 8);\r\n    }\r\n    return out;\r\n  }\r\n\r\n  /*\r\n   * Extract 16-bit worth of data from the bytes stream.\r\n   */\r\n  function slice2(bytes b, uint offset) public pure returns (bytes2) {\r\n    bytes2 out;\r\n\r\n    for (uint i = 0; i < 2; i++) {\r\n      out |= bytes2(b[offset + i] & 0xFF) >> (i * 8);\r\n    }\r\n    return out;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/KYCPayloadDeserializer.sol\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n\r\n/**\r\n * A mix-in contract to decode AML payloads.\r\n *\r\n * @notice This should be a library, but for the complexity and toolchain fragility risks involving of linking library inside library, we put this as a mix-in.\r\n */\r\ncontract KYCPayloadDeserializer {\r\n\r\n  using BytesDeserializer for bytes;\r\n\r\n  /**\r\n   * This function takes the dataframe and unpacks it\r\n   * We have the users ETH address for verification that they are using their own signature\r\n   * CustomerID so we can track customer purchases\r\n   * Min/Max ETH to invest for AML/CTF purposes - this can be supplied by the user OR by the back-end.\r\n   */\r\n  function getKYCPayload(bytes dataframe) public pure returns(address whitelistedAddress, uint128 customerId, uint32 minEth, uint32 maxEth) {\r\n    address _whitelistedAddress = dataframe.sliceAddress(0);\r\n    uint128 _customerId = uint128(dataframe.slice16(20));\r\n    uint32 _minETH = uint32(dataframe.slice4(36));\r\n    uint32 _maxETH = uint32(dataframe.slice4(40));\r\n    return (_whitelistedAddress, _customerId, _minETH, _maxETH);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ReleasableToken.sol\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n *\r\n * Some of this code has been updated by Pickeringware ltd to faciliatte the new solidity compilation requirements\r\n */\r\n\r\npragma solidity 0.4.21;\r\n\r\n\r\n\r\n\r\n/**\r\n * Define interface for releasing the token transfer after a successful crowdsale.\r\n */\r\ncontract ReleasableToken is StandardToken, Ownable {\r\n\r\n  /* The finalizer contract that allows unlift the transfer limits on this token */\r\n  address public releaseAgent;\r\n\r\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\r\n  bool public released = false;\r\n\r\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\r\n  mapping (address => bool) public transferAgents;\r\n\r\n  /**\r\n   * Limit token transfer until the crowdsale is over.\r\n   *\r\n   */\r\n  modifier canTransfer(address _sender) {\r\n    if(!released) {\r\n        if(!transferAgents[_sender]) {\r\n            revert();\r\n        }\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Set the contract that can call release and make the token transferable.\r\n   *\r\n   * Design choice. Allow reset the release agent to fix fat finger mistakes.\r\n   */\r\n  function setReleaseAgent() onlyOwner inReleaseState(false) public {\r\n\r\n    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\r\n    releaseAgent = owner;\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\r\n   */\r\n  function setTransferAgent(address addr, bool state) onlyReleaseAgent inReleaseState(false) public {\r\n    transferAgents[addr] = state;\r\n  }\r\n\r\n  /**\r\n   * One way function to release the tokens to the wild.\r\n   *\r\n   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\r\n   */\r\n  function releaseTokenTransfer() public onlyReleaseAgent {\r\n    released = true;\r\n  }\r\n\r\n  /** The function can be called only before or after the tokens have been releasesd */\r\n  modifier inReleaseState(bool releaseState) {\r\n    if(releaseState != released) {\r\n        revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n  /** The function can be called only by a whitelisted release agent. */\r\n  modifier onlyReleaseAgent() {\r\n    if(msg.sender != releaseAgent) {\r\n        revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) canTransfer(msg.sender) public returns (bool success) {\r\n    // Call StandardToken.transfer()\r\n   return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) public returns (bool success) {\r\n    // Call StandardToken.transferForm()\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n * \r\n * Some of this code has been changed by Pickeringware ltd to facilitate solidities new compilation requirements\r\n */\r\n\r\ncontract MintableToken is ReleasableToken {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/AMLToken.sol\r\n\r\n/**\r\n * This contract has been written by Pickeringware ltd in some areas to facilitate custom crwodsale features\r\n */\r\n\r\npragma solidity 0.4.21;\r\n\r\n\r\n\r\n/**\r\n * The AML Token\r\n *\r\n * This subset of MintableCrowdsaleToken gives the Owner a possibility to\r\n * reclaim tokens from a participant before the token is released\r\n * after a participant has failed a prolonged AML process.\r\n *\r\n * It is assumed that the anti-money laundering process depends on blockchain data.\r\n * The data is not available before the transaction and not for the smart contract.\r\n * Thus, we need to implement logic to handle AML failure cases post payment.\r\n * We give a time window before the token release for the token sale owners to\r\n * complete the AML and claw back all token transactions that were\r\n * caused by rejected purchases.\r\n */\r\ncontract AMLToken is MintableToken {\r\n\r\n  // An event when the owner has reclaimed non-released tokens\r\n  event ReclaimedAllAndBurned(address claimedBy, address fromWhom, uint amount);\r\n\r\n    // An event when the owner has reclaimed non-released tokens\r\n  event ReclaimAndBurned(address claimedBy, address fromWhom, uint amount);\r\n\r\n  /// @dev Here the owner can reclaim the tokens from a participant if\r\n  ///      the token is not released yet. Refund will be handled in sale contract.\r\n  /// We also burn the tokens in the interest of economic value to the token holder\r\n  /// @param fromWhom address of the participant whose tokens we want to claim\r\n  function reclaimAllAndBurn(address fromWhom) public onlyReleaseAgent inReleaseState(false) {\r\n    uint amount = balanceOf(fromWhom);    \r\n    balances[fromWhom] = 0;\r\n    totalSupply = totalSupply.sub(amount);\r\n    \r\n    ReclaimedAllAndBurned(msg.sender, fromWhom, amount);\r\n  }\r\n\r\n  /// @dev Here the owner can reclaim the tokens from a participant if\r\n  ///      the token is not released yet. Refund will be handled in sale contract.\r\n  /// We also burn the tokens in the interest of economic value to the token holder\r\n  /// @param fromWhom address of the participant whose tokens we want to claim\r\n  function reclaimAndBurn(address fromWhom, uint256 amount) public onlyReleaseAgent inReleaseState(false) {       \r\n    balances[fromWhom] = balances[fromWhom].sub(amount);\r\n    totalSupply = totalSupply.sub(amount);\r\n    \r\n    ReclaimAndBurned(msg.sender, fromWhom, amount);\r\n  }\r\n}\r\n\r\n// File: contracts/PickToken.sol\r\n\r\n/*\r\n * This token is part of Pickeringware ltds smart contracts\r\n * It is used to specify certain details about the token upon release\r\n */\r\n\r\n\r\ncontract PickToken is AMLToken {\r\n  string public name = \"AX1 Mining token\";\r\n  string public symbol = \"AX1\";\r\n  uint8 public decimals = 5;\r\n}\r\n\r\n// File: contracts/Stoppable.sol\r\n\r\ncontract Stoppable is Ownable {\r\n  bool public halted;\r\n\r\n  event SaleStopped(address owner, uint256 datetime);\r\n\r\n  modifier stopInEmergency {\r\n    require(!halted);\r\n    _;\r\n  }\r\n\r\n  function hasHalted() internal view returns (bool isHalted) {\r\n  \treturn halted;\r\n  }\r\n\r\n   // called by the owner on emergency, triggers stopped state\r\n  function stopICO() external onlyOwner {\r\n    halted = true;\r\n    SaleStopped(msg.sender, now);\r\n  }\r\n}\r\n\r\n// File: contracts/Crowdsale.sol\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n *\r\n * This base contract has been changed in certain areas by Pickeringware ltd to facilitate extra functionality\r\n */\r\ncontract Crowdsale is Stoppable {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  PickToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n  address public contractAddr;\r\n  \r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  uint256 public presaleWeiRaised;\r\n\r\n  // amount of tokens sent\r\n  uint256 public tokensSent;\r\n\r\n  // These store balances of participants by ID, address and in wei, pre-sale wei and tokens\r\n  mapping(uint128 => uint256) public balancePerID;\r\n  mapping(address => uint256) public balanceOf;\r\n  mapping(address => uint256) public presaleBalanceOf;\r\n  mapping(address => uint256) public tokenBalanceOf;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint256 datetime);\r\n\r\n  /*\r\n   * Contructor\r\n   * This initialises the basic crowdsale data\r\n   * It transfers ownership of this token to the chosen beneficiary \r\n  */\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, PickToken _token) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n\r\n    token = _token;\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    transferOwnership(_wallet);\r\n  }\r\n\r\n  /*\r\n   * This method has been changed by Pickeringware ltd\r\n   * We have split this method down into overidable functions which may affect how users purchase tokens\r\n   * We also take in a customerID (UUiD v4) which we store in our back-end in order to track users participation\r\n  */ \r\n  function buyTokens(uint128 buyer) internal stopInEmergency {\r\n    require(buyer != 0);\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = tokensToRecieve(weiAmount);\r\n\r\n    // MUST DO REQUIRE AFTER tokens are calculated to check for cap restrictions in stages\r\n    require(validPurchase(tokens));\r\n\r\n    // We move the participants sliders before we mint the tokens to prevent re-entrancy\r\n    finalizeSale(weiAmount, tokens, buyer);\r\n    produceTokens(msg.sender, weiAmount, tokens);\r\n  }\r\n\r\n  // This function was created to be overridden by a parent contract\r\n  function produceTokens(address buyer, uint256 weiAmount, uint256 tokens) internal {\r\n    token.mint(buyer, tokens);\r\n    TokenPurchase(msg.sender, buyer, weiAmount, tokens, now);\r\n  }\r\n\r\n  // This was created to be overriden by stages implementation\r\n  // It will adjust the stage sliders accordingly if needed\r\n  function finalizeSale(uint256 _weiAmount, uint256 _tokens, uint128 _buyer) internal {\r\n    // Collect ETH and send them a token in return\r\n    balanceOf[msg.sender] = balanceOf[msg.sender].add(_weiAmount);\r\n    tokenBalanceOf[msg.sender] = tokenBalanceOf[msg.sender].add(_tokens);\r\n    balancePerID[_buyer] = balancePerID[_buyer].add(_weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(_weiAmount);\r\n    tokensSent = tokensSent.add(_tokens);\r\n  }\r\n  \r\n  // This was created to be overridden by the stages implementation\r\n  // Again, this is dependent on the price of tokens which may or may not be collected in stages\r\n  function tokensToRecieve(uint256 _wei) internal view returns (uint256 tokens) {\r\n    return _wei.div(rate);\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function successfulWithdraw() external onlyOwner stopInEmergency {\r\n    require(hasEnded());\r\n\r\n    owner.transfer(weiRaised);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  // Receives tokens to send as variable for custom stage implementation\r\n  // Has an unused variable _tokens which is necessary for capped sale implementation\r\n  function validPurchase(uint256 _tokens) internal view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n}\r\n\r\n// File: contracts/CappedCrowdsale.sol\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Extension of Crowdsale with a max amount of funds raised\r\n */\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public softCap;\r\n  uint256 public hardCap;\r\n  uint256 public withdrawn;\r\n  bool public canWithdraw;\r\n  address public beneficiary;\r\n\r\n  event BeneficiaryWithdrawal(address admin, uint256 amount, uint256 datetime);\r\n\r\n  // Changed implentation to include soft/hard caps\r\n  function CappedCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _beneficiary, uint256 _softCap, uint256 _hardCap, PickToken _token) \r\n    Crowdsale(_startTime, _endTime, _rate, _wallet, _token)\r\n      public {\r\n\r\n    require(_hardCap > 0 && _softCap > 0 && _softCap < _hardCap);\r\n\r\n    softCap = _softCap;\r\n    hardCap = _hardCap;\r\n    withdrawn = 0;\r\n    canWithdraw = false;\r\n    beneficiary = _beneficiary;\r\n  }\r\n\r\n  // overriding Crowdsale#validPurchase to add extra cap logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase(uint256 _tokens) internal view returns (bool) {\r\n    bool withinCap = tokensSent.add(_tokens) <= hardCap;\r\n    return super.validPurchase(_tokens) && withinCap;\r\n  }\r\n  \r\n  // overriding Crowdsale#hasEnded to add cap logic\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    bool capReached = tokensSent >= hardCap;\r\n    return super.hasEnded() || capReached;\r\n  }\r\n\r\n  // overriding Crowdsale#successfulWithdraw to add cap logic\r\n  // only allow beneficiary to withdraw if softcap has been reached\r\n  // Uses withdrawn incase a parent contract requires withdrawing softcap early\r\n  function successfulWithdraw() external onlyOwner stopInEmergency {\r\n    require(hasEnded());\r\n    // This is used for extra functionality if necessary, i.e. KYC checks\r\n    require(canWithdraw);\r\n    require(tokensSent > softCap);\r\n\r\n    uint256 withdrawalAmount = weiRaised.sub(withdrawn);\r\n\r\n    withdrawn = withdrawn.add(withdrawalAmount);\r\n\r\n    beneficiary.transfer(withdrawalAmount);\r\n\r\n    BeneficiaryWithdrawal(msg.sender, withdrawalAmount, now);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/SaleStagesLib.sol\r\n\r\n/*\r\n * SaleStagesLib is a part of Pickeringware ltd's smart contracts\r\n * Its intended use is to abstract the implementation of stages away from a contract to ease deployment and codel length\r\n * It uses a stage struct to store specific details about each stage\r\n * It has several functions which are used to get/change this data\r\n*/\r\n\r\nlibrary SaleStagesLib {\r\n\tusing SafeMath for uint256;\r\n\r\n\t// Stores Stage implementation\r\n\tstruct Stage{\r\n        uint256 deadline;\r\n        uint256 tokenPrice;\r\n        uint256 tokensSold;\r\n        uint256 minimumBuy;\r\n        uint256 cap;\r\n\t}\r\n\r\n\t// The struct that is stored by the contract\r\n\t// Contains counter to iterate through map of stages\r\n\tstruct StageStorage {\r\n \t\tmapping(uint8 => Stage) stages;\r\n \t\tuint8 stageCount;\r\n\t}\r\n\r\n\t// Initiliase the stagecount to 0\r\n\tfunction init(StageStorage storage self) public {\r\n\t\tself.stageCount = 0;\r\n\t}\r\n\r\n\t// Create stage adds new stage to stages map and increments stage count\r\n\tfunction createStage(\r\n\t\tStageStorage storage self, \r\n\t\tuint8 _stage, \r\n\t\tuint256 _deadline, \r\n\t\tuint256 _price,\r\n\t\tuint256 _minimum,\r\n\t\tuint256 _cap\r\n\t) internal {\r\n        // Ensures stages cannot overlap each other\r\n        uint8 prevStage = _stage - 1;\r\n        require(self.stages[prevStage].deadline < _deadline);\r\n\t\t\r\n        self.stages[_stage].deadline = _deadline;\r\n\t\tself.stages[_stage].tokenPrice = _price;\r\n\t\tself.stages[_stage].tokensSold = 0;\r\n\t\tself.stages[_stage].minimumBuy = _minimum;\r\n\t\tself.stages[_stage].cap = _cap;\r\n\t\tself.stageCount = self.stageCount + 1;\r\n\t}\r\n\r\n   /*\r\n    * Crowdfund state machine management.\r\n    *\r\n    * We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.\r\n    * Each one of these conditions checks if the time has passed into another stage and therefore, act as appropriate\r\n    */\r\n    function getStage(StageStorage storage self) public view returns (uint8 stage) {\r\n        uint8 thisStage = self.stageCount + 1;\r\n\r\n        for (uint8 i = 0; i < thisStage; i++) {\r\n            if(now <= self.stages[i].deadline){\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return thisStage;\r\n    }\r\n\r\n    // Both of the below are checked on the overridden validPurchase() function\r\n    // Check to see if the tokens they're about to purchase is above the minimum for this stage\r\n    function checkMinimum(StageStorage storage self, uint8 _stage, uint256 _tokens) internal view returns (bool isValid) {\r\n    \tif(_tokens < self.stages[_stage].minimumBuy){\r\n    \t\treturn false;\r\n    \t} else {\r\n    \t\treturn true;\r\n    \t}\r\n    }\r\n\r\n    // Both of the below are checked on the overridden validPurchase() function\r\n    // Check to see if the tokens they're about to purchase is above the minimum for this stage\r\n    function changeDeadline(StageStorage storage self, uint8 _stage, uint256 _deadline) internal {\r\n        require(self.stages[_stage].deadline > now);\r\n        self.stages[_stage].deadline = _deadline;\r\n    }\r\n\r\n    // Checks to see if the tokens they're about to purchase is below the cap for this stage\r\n    function checkCap(StageStorage storage self, uint8 _stage, uint256 _tokens) internal view returns (bool isValid) {\r\n    \tuint256 totalTokens = self.stages[_stage].tokensSold.add(_tokens);\r\n\r\n    \tif(totalTokens > self.stages[_stage].cap){\r\n    \t\treturn false;\r\n    \t} else {\r\n    \t\treturn true;\r\n    \t}\r\n    }\r\n\r\n    // Refund a particular participant, by moving the sliders of stages he participated in\r\n    function refundParticipant(StageStorage storage self, uint256 stage1, uint256 stage2, uint256 stage3, uint256 stage4) internal {\r\n        self.stages[1].tokensSold = self.stages[1].tokensSold.sub(stage1);\r\n        self.stages[2].tokensSold = self.stages[2].tokensSold.sub(stage2);\r\n        self.stages[3].tokensSold = self.stages[3].tokensSold.sub(stage3);\r\n        self.stages[4].tokensSold = self.stages[4].tokensSold.sub(stage4);\r\n    }\r\n    \r\n\t// Both of the below are checked on the overridden validPurchase() function\r\n    // Check to see if the tokens they're about to purchase is above the minimum for this stage\r\n    function changePrice(StageStorage storage self, uint8 _stage, uint256 _tokenPrice) internal {\r\n        require(self.stages[_stage].deadline > now);\r\n\r\n        self.stages[_stage].tokenPrice = _tokenPrice;\r\n    }\r\n}\r\n\r\n// File: contracts/PickCrowdsale.sol\r\n\r\n/*\r\n * PickCrowdsale and PickToken are a part of Pickeringware ltd's smart contracts\r\n * This uses the SaleStageLib which is also a part of Pickeringware ltd's smart contracts\r\n * We create the stages initially in the constructor such that stages cannot be added after the sale has started\r\n * We then pre-allocate necessary accounts prior to the sale starting\r\n * This contract implements the stages lib functionality with overriding functions for stages implementation\r\n*/\r\ncontract PickCrowdsale is CappedCrowdsale {\r\n\r\n  using SaleStagesLib for SaleStagesLib.StageStorage;\r\n  using SafeMath for uint256;\r\n\r\n  SaleStagesLib.StageStorage public stages;\r\n\r\n  bool preallocated = false;\r\n  bool stagesSet = false;\r\n  address private founders;\r\n  address private bounty;\r\n  address private buyer;\r\n  uint256 public burntBounty;\r\n  uint256 public burntFounder;\r\n\r\n  event ParticipantWithdrawal(address participant, uint256 amount, uint256 datetime);\r\n  event StagePriceChanged(address admin, uint8 stage, uint256 price);\r\n  event ExtendedStart(uint256 oldStart, uint256 newStart);\r\n\r\n  modifier onlyOnce(bool _check) {\r\n    if(_check) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n  function PickCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _beneficiary, address _buyer, address _founders, address _bounty, uint256 _softCap, uint256 _hardCap, PickToken _token)\r\n  \tCappedCrowdsale(_startTime, _endTime, _rate, _wallet, _beneficiary, _softCap, _hardCap, _token)\r\n     public { \r\n    stages.init();\r\n    stages.createStage(0, _startTime, 0, 0, 0);\r\n    founders = _founders;\r\n    bounty = _bounty;\r\n    buyer = _buyer;\r\n  }\r\n\r\n  function setPreallocations() external onlyOwner onlyOnce(preallocated) {\r\n    preallocate(buyer, 1250000, 10000000000);\r\n    preallocate(founders, 1777777, 0);\r\n    preallocate(bounty, 444445, 0);\r\n    preallocated = true;\r\n  }\r\n\r\n  function setStages() external onlyOwner onlyOnce(stagesSet) {\r\n    stages.createStage(1, startTime.add(1 days), 10000000000, 10000000, 175000000000);  //Deadline 1 day (86400)  after start - price: 0.001  - min: 90 - cap: 1,250,000\r\n    stages.createStage(2, startTime.add(2 days), 11000000000, 5000000, 300000000000); //Deadline 2 days (172800) after start - price: 0.0011 - min: 60 - cap: 3,000,000 \r\n    stages.createStage(3, startTime.add(3 days), 12000000000, 2500000, 575000000000);  //Deadline 4 days (345600) after start - price: 0.0012 - cap: 5,750,000 \r\n    stages.createStage(4, endTime, 15000000000, 1000000, 2000000000000);               //Deadline 1 week after start - price: 0.0015 - cap: 20,000,000 \r\n    stagesSet = true;\r\n  }\r\n\r\n  // Creates new stage for the crowdsale\r\n  // Can ONLY be called by the owner of the contract as should never change after creating them on initialisation\r\n  function createStage(uint8 _stage, uint256 _deadline, uint256 _price, uint256 _minimum, uint256 _cap ) internal onlyOwner {\r\n    stages.createStage(_stage, _deadline, _price, _minimum, _cap);\r\n  }\r\n\r\n  // Creates new stage for the crowdsale\r\n  // Can ONLY be called by the owner of the contract as should never change after creating them on initialisation\r\n  function changePrice(uint8 _stage, uint256 _price) public onlyOwner {\r\n    stages.changePrice(_stage, _price);\r\n    StagePriceChanged(msg.sender, _stage, _price);\r\n  }\r\n\r\n  // Get stage is required to rethen the stage we are currently in\r\n  // This is necessary to check the stage details listed in the below functions\r\n  function getStage() public view returns (uint8 stage) {\r\n    return stages.getStage();\r\n  }\r\n\r\n  function getStageDeadline(uint8 _stage) public view returns (uint256 deadline) { \r\n    return stages.stages[_stage].deadline;\r\n  }\r\n\r\n  function getStageTokensSold(uint8 _stage) public view returns (uint256 sold) { \r\n    return stages.stages[_stage].tokensSold;\r\n  }\r\n\r\n  function getStageCap(uint8 _stage) public view returns (uint256 cap) { \r\n    return stages.stages[_stage].cap;\r\n  }\r\n\r\n  function getStageMinimum(uint8 _stage) public view returns (uint256 min) { \r\n    return stages.stages[_stage].minimumBuy;\r\n  }\r\n\r\n  function getStagePrice(uint8 _stage) public view returns (uint256 price) { \r\n    return stages.stages[_stage].tokenPrice;\r\n  }\r\n\r\n  // This is used for extending the sales start time (and the deadlines of each stage) accordingly\r\n  function extendStart(uint256 _newStart) external onlyOwner {\r\n    require(_newStart > startTime);\r\n    require(_newStart > now); \r\n    require(now < startTime);\r\n\r\n    uint256 difference = _newStart - startTime;\r\n    uint256 oldStart = startTime;\r\n    startTime = _newStart;\r\n    endTime = endTime + difference;\r\n\r\n    // Loop through every stage in the sale\r\n    for (uint8 i = 0; i < 4; i++) {\r\n      // Extend that stages deadline accordingly\r\n      uint256 temp = stages.stages[i].deadline;\r\n      temp = temp + difference;\r\n\r\n      stages.changeDeadline(i, temp);\r\n    }\r\n\r\n    ExtendedStart(oldStart, _newStart);\r\n  }\r\n\r\n  // @Override crowdsale contract to check the current stage price\r\n  // @return tokens investors are due to recieve\r\n  function tokensToRecieve(uint256 _wei) internal view returns (uint256 tokens) {\r\n    uint8 stage = getStage();\r\n    uint256 price = getStagePrice(stage);\r\n\r\n    return _wei.div(price);\r\n  }\r\n\r\n  // overriding Crowdsale validPurchase to add extra stage logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase(uint256 _tokens) internal view returns (bool) {\r\n    bool isValid = false;\r\n    uint8 stage = getStage();\r\n\r\n    if(stages.checkMinimum(stage, _tokens) && stages.checkCap(stage, _tokens)){\r\n      isValid = true;\r\n    }\r\n\r\n    return super.validPurchase(_tokens) && isValid;\r\n  }\r\n\r\n  // Override crowdsale finalizeSale function to log balance change plus tokens sold in that stage\r\n  function finalizeSale(uint256 _weiAmount, uint256 _tokens, uint128 _buyer) internal {\r\n    // Collect ETH and send them a token in return\r\n    balanceOf[msg.sender] = balanceOf[msg.sender].add(_weiAmount);\r\n    tokenBalanceOf[msg.sender] = tokenBalanceOf[msg.sender].add(_tokens);\r\n    balancePerID[_buyer] = balancePerID[_buyer].add(_weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(_weiAmount);\r\n    tokensSent = tokensSent.add(_tokens);\r\n\r\n    uint8 stage = getStage();\r\n    stages.stages[stage].tokensSold = stages.stages[stage].tokensSold.add(_tokens);\r\n  }\r\n\r\n  /**\r\n   * Preallocate tokens for the early investors.\r\n   */\r\n  function preallocate(address receiver, uint tokens, uint weiPrice) internal {\r\n    uint decimals = token.decimals();\r\n    uint tokenAmount = tokens * 10 ** decimals;\r\n    uint weiAmount = weiPrice * tokens; \r\n\r\n    presaleWeiRaised = presaleWeiRaised.add(weiAmount);\r\n    tokensSent = tokensSent.add(tokenAmount);\r\n    tokenBalanceOf[receiver] = tokenBalanceOf[receiver].add(tokenAmount);\r\n\r\n    presaleBalanceOf[receiver] = presaleBalanceOf[receiver].add(weiAmount);\r\n\r\n    produceTokens(receiver, weiAmount, tokenAmount);\r\n  }\r\n\r\n  // If the sale is unsuccessful (has halted or reached deadline and didnt reach softcap)\r\n  // Allows participants to withdraw their balance\r\n  function unsuccessfulWithdrawal() external {\r\n      require(balanceOf[msg.sender] > 0);\r\n      require(hasEnded() && tokensSent < softCap || hasHalted());\r\n      uint256 withdrawalAmount;\r\n\r\n      withdrawalAmount = balanceOf[msg.sender];\r\n      balanceOf[msg.sender] = 0; \r\n\r\n      msg.sender.transfer(withdrawalAmount);\r\n      assert(balanceOf[msg.sender] == 0);\r\n\r\n      ParticipantWithdrawal(msg.sender, withdrawalAmount, now);\r\n  }\r\n\r\n  // Burn the percentage of tokens not sold from the founders and bounty wallets\r\n  // Must do it this way as solidity doesnt deal with decimals\r\n  function burnFoundersTokens(uint256 _bounty, uint256 _founders) internal {\r\n      require(_founders < 177777700000);\r\n      require(_bounty < 44444500000);\r\n\r\n      // Calculate the number of tokens to burn from founders and bounty wallet\r\n      burntFounder = _founders;\r\n      burntBounty = _bounty;\r\n\r\n      token.reclaimAndBurn(founders, burntFounder);\r\n      token.reclaimAndBurn(bounty, burntBounty);\r\n  }\r\n}\r\n\r\n// File: contracts/KYCCrowdsale.sol\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n *\r\n * Some implementation has been changed by Pickeringware ltd to achieve custom features\r\n */\r\n\r\n\r\n\r\n/*\r\n * A crowdsale that allows only signed payload with server-side specified buy in limits.\r\n *\r\n * The token distribution happens as in the allocated crowdsale contract\r\n */\r\ncontract KYCCrowdsale is KYCPayloadDeserializer, PickCrowdsale {\r\n\r\n  /* Server holds the private key to this address to decide if the AML payload is valid or not. */\r\n  address public signerAddress;\r\n  mapping(address => uint256) public refundable;\r\n  mapping(address => bool) public refunded;\r\n  mapping(address => bool) public blacklist;\r\n\r\n  /* A new server-side signer key was set to be effective */\r\n  event SignerChanged(address signer);\r\n  event TokensReclaimed(address user, uint256 amount, uint256 datetime);\r\n  event AddedToBlacklist(address user, uint256 datetime);\r\n  event RemovedFromBlacklist(address user, uint256 datetime);\r\n  event RefundCollected(address user, uint256 datetime);\r\n  event TokensReleased(address agent, uint256 datetime, uint256 bounty, uint256 founders);\r\n\r\n  /*\r\n   * Constructor.\r\n   */\r\n  function KYCCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _beneficiary, address _buyer, address _founders, address _bounty, uint256 _softCap, uint256 _hardCap, PickToken _token) public\r\n  PickCrowdsale(_startTime, _endTime, _rate, _wallet, _beneficiary, _buyer, _founders, _bounty, _softCap, _hardCap, _token)\r\n  {}\r\n\r\n  // This sets the token agent to the contract, allowing the contract to reclaim and burn tokens if necessary\r\n  function setTokenAgent() external onlyOwner {\r\n    // contractAddr = token.owner();\r\n    // Give the sale contract rights to reclaim tokens\r\n    token.setReleaseAgent();\r\n  }\r\n\r\n /* \r\n  * This function was written by Pickeringware ltd to facilitate a refund action upon failure of KYC analysis\r\n  * \r\n  * It simply allows the participant to withdraw his ether from the sale\r\n  * Moves the crowdsale sliders accordingly\r\n  * Reclaims the users tokens and burns them\r\n  * Blacklists the user to prevent them from buying any more tokens\r\n  *\r\n  * Stage 1, 2, 3, & 4 are all collected from the database prior to calling this function\r\n  * It allows us to calculate how many tokens need to be taken from each individual stage\r\n  */\r\n  function refundParticipant(address participant, uint256 _stage1, uint256 _stage2, uint256 _stage3, uint256 _stage4) external onlyOwner {\r\n    require(balanceOf[participant] > 0);\r\n\r\n    uint256 balance = balanceOf[participant];\r\n    uint256 tokens = tokenBalanceOf[participant];\r\n\r\n    balanceOf[participant] = 0;\r\n    tokenBalanceOf[participant] = 0;\r\n\r\n    // Refund the participant\r\n    refundable[participant] = balance;\r\n\r\n    // Move the crowdsale sliders\r\n    weiRaised = weiRaised.sub(balance);\r\n    tokensSent = tokensSent.sub(tokens);\r\n\r\n    // Reclaim the participants tokens and burn them\r\n    token.reclaimAllAndBurn(participant);\r\n\r\n    // Blacklist participant so they cannot make further purchases\r\n    blacklist[participant] = true;\r\n    AddedToBlacklist(participant, now);\r\n\r\n    stages.refundParticipant(_stage1, _stage2, _stage3, _stage4);\r\n\r\n    TokensReclaimed(participant, tokens, now);\r\n  }\r\n\r\n  // Allows only the beneficiary to release tokens to people\r\n  // This is needed as the token is owned by the contract, in order to mint tokens\r\n  // therefore, the owner essentially gives permission for the contract to release tokens\r\n  function releaseTokens(uint256 _bounty, uint256 _founders) onlyOwner external {\r\n      // Unless the hardcap was reached, theremust be tokens to burn\r\n      require(_bounty > 0 || tokensSent == hardCap);\r\n      require(_founders > 0 || tokensSent == hardCap);\r\n\r\n      burnFoundersTokens(_bounty, _founders);\r\n\r\n      token.releaseTokenTransfer();\r\n\r\n      canWithdraw = true;\r\n\r\n      TokensReleased(msg.sender, now, _bounty, _founders);\r\n  }\r\n  \r\n  // overriding Crowdsale#validPurchase to add extra KYC blacklist logic\r\n  // @return true if investors can buy at the moment\r\n  function validPurchase(uint256 _tokens) internal view returns (bool) {\r\n    bool onBlackList;\r\n\r\n    if(blacklist[msg.sender] == true){\r\n      onBlackList = true;\r\n    } else {\r\n      onBlackList = false;\r\n    }\r\n    return super.validPurchase(_tokens) && !onBlackList;\r\n  }\r\n\r\n  // This is necessary for the blacklisted user to pull his ether from the contract upon being refunded\r\n  function collectRefund() external {\r\n    require(refundable[msg.sender] > 0);\r\n    require(refunded[msg.sender] == false);\r\n\r\n    uint256 theirwei = refundable[msg.sender];\r\n    refundable[msg.sender] = 0;\r\n    refunded[msg.sender] == true;\r\n\r\n    msg.sender.transfer(theirwei);\r\n\r\n    RefundCollected(msg.sender, now);\r\n  }\r\n\r\n  /*\r\n   * A token purchase with anti-money laundering and KYC checks\r\n   * This function takes in a dataframe and EC signature to verify if the purchaser has been verified\r\n   * on the server side of our application and has therefore, participated in KYC. \r\n   * Upon registering to the site, users are supplied with a signature allowing them to purchase tokens, \r\n   * which can be revoked at any time, this containst their ETH address, a unique ID and the min and max \r\n   * ETH that user has stated they will purchase. (Any more than the max may be subject to AML checks).\r\n   */\r\n  function buyWithKYCData(bytes dataframe, uint8 v, bytes32 r, bytes32 s) public payable {\r\n\r\n      bytes32 hash = sha256(dataframe);\r\n\r\n      address whitelistedAddress;\r\n      uint128 customerId;\r\n      uint32 minETH;\r\n      uint32 maxETH;\r\n      \r\n      (whitelistedAddress, customerId, minETH, maxETH) = getKYCPayload(dataframe);\r\n\r\n      // Check that the KYC data is signed by our server\r\n      require(ecrecover(hash, v, r, s) == signerAddress);\r\n\r\n      // Check that the user is using his own signature\r\n      require(whitelistedAddress == msg.sender);\r\n\r\n      // Check they are buying within their limits - THIS IS ONLY NEEDED IF SPECIFIED BY REGULATORS\r\n      uint256 weiAmount = msg.value;\r\n      uint256 max = maxETH;\r\n      uint256 min = minETH;\r\n\r\n      require(weiAmount < (max * 1 ether));\r\n      require(weiAmount > (min * 1 ether));\r\n\r\n      buyTokens(customerId);\r\n  }  \r\n\r\n  /// @dev This function can set the server side address\r\n  /// @param _signerAddress The address derived from server's private key\r\n  function setSignerAddress(address _signerAddress) external onlyOwner {\r\n    // EC rcover returns 0 in case of error therefore, this CANNOT be 0.\r\n    require(_signerAddress != 0);\r\n    signerAddress = _signerAddress;\r\n    SignerChanged(signerAddress);\r\n  }\r\n\r\n  function removeFromBlacklist(address _blacklisted) external onlyOwner {\r\n    require(blacklist[_blacklisted] == true);\r\n    blacklist[_blacklisted] = false;\r\n    RemovedFromBlacklist(_blacklisted, now);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_signerAddress\",\"type\":\"address\"}],\"name\":\"setSignerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"_stage1\",\"type\":\"uint256\"},{\"name\":\"_stage2\",\"type\":\"uint256\"},{\"name\":\"_stage3\",\"type\":\"uint256\"},{\"name\":\"_stage4\",\"type\":\"uint256\"}],\"name\":\"refundParticipant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint8\"}],\"name\":\"getStageCap\",\"outputs\":[{\"name\":\"cap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bounty\",\"type\":\"uint256\"},{\"name\":\"_founders\",\"type\":\"uint256\"}],\"name\":\"releaseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPreallocations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stages\",\"outputs\":[{\"name\":\"stageCount\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blacklisted\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unsuccessfulWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refundable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burntFounder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dataframe\",\"type\":\"bytes\"}],\"name\":\"getKYCPayload\",\"outputs\":[{\"name\":\"whitelistedAddress\",\"type\":\"address\"},{\"name\":\"customerId\",\"type\":\"uint128\"},{\"name\":\"minEth\",\"type\":\"uint32\"},{\"name\":\"maxEth\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint8\"}],\"name\":\"getStageTokensSold\",\"outputs\":[{\"name\":\"sold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newStart\",\"type\":\"uint256\"}],\"name\":\"extendStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"balancePerID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint8\"}],\"name\":\"getStageDeadline\",\"outputs\":[{\"name\":\"deadline\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint8\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burntBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setTokenAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint8\"}],\"name\":\"getStageMinimum\",\"outputs\":[{\"name\":\"min\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"successfulWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refunded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dataframe\",\"type\":\"bytes\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buyWithKYCData\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setStages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint8\"}],\"name\":\"getStagePrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage\",\"outputs\":[{\"name\":\"stage\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_founders\",\"type\":\"address\"},{\"name\":\"_bounty\",\"type\":\"address\"},{\"name\":\"_softCap\",\"type\":\"uint256\"},{\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"TokensReclaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"AddedToBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"RemovedFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"RefundCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bounty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"founders\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"ParticipantWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stage\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"StagePriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldStart\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newStart\",\"type\":\"uint256\"}],\"name\":\"ExtendedStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"SaleStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"KYCCrowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005ac4e697000000000000000000000000000000000000000000000000000000005ace2117000000000000000000000000000000000000000000000000000000174876e80000000000000000000000000034858c5a5759bfdb47edcaa944bf7f26413968d400000000000000000000000051fb3588a479a09c5751112000da087e55aa747b000000000000000000000000f193fcf4914006490296898989d7ed6a175f70bf000000000000000000000000340bb4965661e6becc761adbfcff5ef42aba91a80000000000000000000000008cce1aa02fcecdd7bc300edb41b3dd3c455ab849000000000000000000000000000000000000000000000000000000174876e8000000000000000000000000000000000000000000000000000000020566c3ccc0000000000000000000000000735789627b9003d6d106a742d20f256116f3b1e6","Library":"SaleStagesLib:b65dec25514b16633ca175cec3fe005874c54d96;BytesDeserializer:e3e48dab02812567b966b7c294b80188fc70f530","SwarmSource":"bzzr://7216a0de9a177722a0d56b599ed73920032f176f7302de289a2dc4535ad19b72"}]}