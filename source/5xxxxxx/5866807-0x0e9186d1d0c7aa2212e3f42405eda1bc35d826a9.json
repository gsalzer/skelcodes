{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'Ethernational' CROWDSALE token contract\r\n//\r\n// Deployed to : 0xD0FDf2ECd4CadE671a7EE1063393eC0eB90816FD\r\n// Symbol      : EIT\r\n// Name        : Ethernational\r\n// Decimals    : 18\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    address public dividendsAccount;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n    \r\n    dividendsContract divC;\r\n    \r\n    function dividendsAcc(address _dividendsAccount) onlyOwner{\r\n        divC = dividendsContract(_dividendsAccount);\r\n        dividendsAccount = _dividendsAccount;\r\n    }\r\n    \r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract Ethernational is ERC20Interface, Owned, SafeMath {\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n    uint public startDate;\r\n    uint public bonus1Ends;\r\n    uint public bonus2Ends;\r\n    uint public bonus3Ends;\r\n    uint public endDate;\r\n    uint public ETHinvested;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    function Ethernational() public {\r\n        symbol = \"EIT\";\r\n        name = \"Ethernational\";\r\n        decimals = 18;\r\n        bonus1Ends = now + 1 weeks;\r\n        bonus2Ends = now + 2 weeks;\r\n        bonus3Ends = now + 4 weeks;\r\n        endDate = now + 8 weeks;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n    \r\n    function invested() constant returns (uint){\r\n        return ETHinvested;\r\n    }\r\n\r\n\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        uint perc = ((balances[msg.sender] * 1000)/tokens);\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        Transfer(msg.sender, to, tokens);\r\n        divC.updatePaid(msg.sender,to,perc);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        uint perc = ((balances[from] * 1000)/tokens);\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        Transfer(from, to, tokens);\r\n        divC.updatePaid(from,to,perc);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account. The `spender` contract function\r\n    // `receiveApproval(...)` is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // 500 ELG Tokens per 1 ETH\r\n    // ------------------------------------------------------------------------\r\n    function () public payable {\r\n        require(now >= startDate && now <= endDate && msg.value > 1000000000000000);\r\n        uint tokens;\r\n        if (now <= bonus1Ends) {\r\n            tokens = msg.value * 1000;\r\n        } else if (now <= bonus2Ends) {\r\n            tokens = msg.value * 750;\r\n        } else if (now <= bonus3Ends) {\r\n            tokens = msg.value * 625;\r\n        } else {\r\n            tokens = msg.value * 500;\r\n        }\r\n        \r\n        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\r\n        _totalSupply = safeAdd(_totalSupply, tokens);\r\n        Transfer(address(0), msg.sender, tokens);\r\n        owner.transfer(msg.value);\r\n        ETHinvested = ETHinvested + msg.value;\r\n    }\r\n    \r\n    function buyEIT() public payable {\r\n        require(now >= startDate && now <= endDate && msg.value > 1000000000000000);\r\n        uint tokens;\r\n        if (now <= bonus1Ends) {\r\n            tokens = msg.value * 1000;\r\n        } else if (now <= bonus2Ends) {\r\n            tokens = msg.value * 750;\r\n        } else if (now <= bonus3Ends) {\r\n            tokens = msg.value * 625;\r\n        } else {\r\n            tokens = msg.value * 500;\r\n        }\r\n        \r\n        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\r\n        _totalSupply = safeAdd(_totalSupply, tokens);\r\n        Transfer(address(0), msg.sender, tokens);\r\n        owner.transfer(msg.value);\r\n        ETHinvested = ETHinvested + msg.value;\r\n    }\r\n    \r\n    \r\n    function bonusInfo() constant returns (uint,uint){\r\n        if (now <= bonus1Ends) {\r\n            return (100, (bonus1Ends - now));\r\n        } else if (now <= bonus2Ends) {\r\n            return (50, (bonus2Ends - now));\r\n        } else if (now <= bonus3Ends) {\r\n            return (25, (bonus3Ends - now));\r\n        } else {\r\n            return (0, 0);\r\n        }\r\n    }\r\n    \r\n    function ICOTimer() constant returns (uint){\r\n        if (now < endDate){\r\n            return (endDate - now);\r\n        }\r\n    }\r\n    \r\n\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract dividendsContract is Owned{\r\n    \r\n    Ethernational dc;\r\n    mapping(address => uint) paid;\r\n    uint public totalSupply;\r\n    uint public totalPaid;\r\n    address public ICOaddress;\r\n    \r\n    function ICOaddress(address _t) onlyOwner{\r\n        dc = Ethernational(_t);\r\n        ICOaddress = _t;\r\n        totalSupply = dc.totalSupply() / 1000000000000;\r\n    }\r\n    \r\n    function() payable{\r\n    }\r\n    \r\n    function collectDividends(address member) public returns (uint result) {\r\n        require (msg.sender == member && dc.endDate() < now);\r\n        uint Ownes = dc.balanceOf(member) / 1000000000000;\r\n        uint payout = (((address(this).balance + totalPaid)/totalSupply)*Ownes) - paid[member];\r\n        member.transfer(payout);\r\n        paid[member] = paid[member] + payout;\r\n        totalPaid = totalPaid + payout;\r\n        return payout;\r\n    }\r\n    \r\n    function thisBalance() constant returns (uint){\r\n        return this.balance;\r\n    }\r\n    \r\n    function updatePaid(address from, address to, uint perc) {\r\n        require (msg.sender == ICOaddress);\r\n        uint val = ((paid[from] * 1000000) / perc) / 1000;\r\n        paid[from] = paid[from] - val;\r\n        paid[to] = paid[to] + val;\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\ncontract DailyDraw is Owned{\r\n    \r\n\r\n    \r\n    bytes32 public number;\r\n    uint public timeLimit;\r\n    uint public ticketsSold;\r\n    \r\n    struct Ticket {\r\n        address addr;\r\n        uint time;\r\n    }\r\n    \r\n    mapping (uint => Ticket) Tickets;\r\n\r\n    function start(bytes32 _var1) public {\r\n        if (timeLimit<1){\r\n            timeLimit = now;\r\n            number = _var1 ;\r\n        }\r\n    }\r\n\r\n    function () payable{\r\n        uint value = (msg.value)/10000000000000000;\r\n        require (now<(timeLimit+86400));\r\n            uint i = 0;\r\n            while (i++ < value) {\r\n                uint TicketNumber = ticketsSold + i;\r\n                Tickets[TicketNumber].addr = msg.sender;\r\n                Tickets[TicketNumber].time = now;\r\n            } \r\n            ticketsSold = ticketsSold + value;\r\n   }\r\n\r\n    function Play() payable{\r\n        uint value = msg.value/10000000000000000;\r\n        require (now<(timeLimit+86400));\r\n            uint i = 1;\r\n            while (i++ < value) {\r\n                uint TicketNumber = ticketsSold + i;\r\n                Tickets[TicketNumber].addr = msg.sender;\r\n                Tickets[TicketNumber].time = now;\r\n            } \r\n            ticketsSold = ticketsSold + value;\r\n   }\r\n\r\n\r\n    function balances() constant returns(uint, uint time){\r\n       return (ticketsSold, (timeLimit+86400)-now);\r\n   }\r\n\r\n\r\n    function winner(uint _theNumber, bytes32 newNumber) onlyOwner payable {\r\n        require ((timeLimit+86400)<now && number == keccak256(_theNumber));\r\n                \r\n                uint8 add1 = uint8 (Tickets[ticketsSold/4].addr);\r\n                uint8 add2 = uint8 (Tickets[ticketsSold/3].addr);\r\n       \r\n                uint8 time1 = uint8 (Tickets[ticketsSold/2].time);\r\n                uint8 time2 = uint8 (Tickets[ticketsSold/8].time);\r\n       \r\n                uint winningNumber = uint8 (((add1+add2)-(time1+time2))*_theNumber)%ticketsSold;\r\n                \r\n                address winningTicket = address (Tickets[winningNumber].addr);\r\n                \r\n                uint winnings = uint (address(this).balance / 20) * 19;\r\n                uint fees = uint (address(this).balance-winnings)/2;\r\n                uint dividends = uint (address(this).balance-winnings)-fees;\r\n                \r\n                winningTicket.transfer(winnings);\r\n                \r\n                owner.transfer(fees);\r\n                \r\n                dividendsAccount.transfer(dividends);\r\n                \r\n                delete ticketsSold;\r\n                timeLimit = now;\r\n                number = newNumber;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract WeeklyDraw is Owned{\r\n    \r\n\r\n    \r\n    bytes32 public number;\r\n    uint public timeLimit;\r\n    uint public ticketsSold;\r\n    \r\n    struct Ticket {\r\n        address addr;\r\n        uint time;\r\n    }\r\n    \r\n    mapping (uint => Ticket) Tickets;\r\n\r\n    function start(bytes32 _var1) public {\r\n        if (timeLimit<1){\r\n            timeLimit = now;\r\n            number = _var1 ;\r\n        }\r\n    }\r\n\r\n    function () payable{\r\n        uint value = (msg.value)/100000000000000000;\r\n        require (now<(timeLimit+604800));\r\n            uint i = 0;\r\n            while (i++ < value) {\r\n                uint TicketNumber = ticketsSold + i;\r\n                Tickets[TicketNumber].addr = msg.sender;\r\n                Tickets[TicketNumber].time = now;\r\n            } \r\n            ticketsSold = ticketsSold + value;\r\n   }\r\n\r\n    function Play() payable{\r\n        uint value = msg.value/100000000000000000;\r\n        require (now<(timeLimit+604800));\r\n            uint i = 1;\r\n            while (i++ < value) {\r\n                uint TicketNumber = ticketsSold + i;\r\n                Tickets[TicketNumber].addr = msg.sender;\r\n                Tickets[TicketNumber].time = now;\r\n            } \r\n            ticketsSold = ticketsSold + value;\r\n   }\r\n\r\n\r\n    function balances() constant returns(uint, uint time){\r\n       return (ticketsSold, (timeLimit+604800)-now);\r\n   }\r\n\r\n\r\n    function winner(uint _theNumber, bytes32 newNumber) onlyOwner payable {\r\n        require ((timeLimit+604800)<now && number == keccak256(_theNumber));\r\n                \r\n                uint8 add1 = uint8 (Tickets[ticketsSold/4].addr);\r\n                uint8 add2 = uint8 (Tickets[ticketsSold/3].addr);\r\n       \r\n                uint8 time1 = uint8 (Tickets[ticketsSold/2].time);\r\n                uint8 time2 = uint8 (Tickets[ticketsSold/8].time);\r\n       \r\n                uint winningNumber = uint8 (((add1+add2)-(time1+time2))*_theNumber)%ticketsSold;\r\n                \r\n                address winningTicket = address (Tickets[winningNumber].addr);\r\n                \r\n                uint winnings = uint (address(this).balance / 20) * 19;\r\n                uint fees = uint (address(this).balance-winnings)/2;\r\n                uint dividends = uint (address(this).balance-winnings)-fees;\r\n                \r\n                winningTicket.transfer(winnings);\r\n                \r\n                owner.transfer(fees);\r\n                \r\n                dividendsAccount.transfer(dividends);\r\n                \r\n                delete ticketsSold;\r\n                timeLimit = now;\r\n                number = newNumber;\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_var1\",\"type\":\"bytes32\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dividendsAccount\",\"type\":\"address\"}],\"name\":\"dividendsAcc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketsSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_theNumber\",\"type\":\"uint256\"},{\"name\":\"newNumber\",\"type\":\"bytes32\"}],\"name\":\"winner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DailyDraw","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://66d6bd08f3d95395e4ccc6afbddf9d2586b440cf59c535ba482f6f5d6876a9fe"}]}