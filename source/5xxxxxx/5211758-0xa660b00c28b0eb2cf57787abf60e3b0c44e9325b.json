{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title Read-only ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ReadOnlyToken {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract Token is ReadOnlyToken {\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract MintableToken is Token {\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n}\r\n\r\n/**\r\n * @title Sale contract for Daonomic platform should implement this\r\n */\r\ncontract Sale {\r\n    /**\r\n     * @dev This event should be emitted when user buys something\r\n     */\r\n    event Purchase(address indexed buyer, address token, uint256 value, uint256 sold, uint256 bonus);\r\n    /**\r\n     * @dev Should be emitted if new payment method added\r\n     */\r\n    event RateAdd(address token);\r\n    /**\r\n     * @dev Should be emitted if payment method removed\r\n     */\r\n    event RateRemove(address token);\r\n\r\n    /**\r\n     * @dev Calculate rate for specified payment method\r\n     */\r\n    function getRate(address token) constant public returns (uint256);\r\n    /**\r\n     * @dev Calculate current bonus in tokens\r\n     */\r\n    function getBonus(uint256 sold) constant public returns (uint256);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * @dev this version copied from zeppelin-solidity, constant changed to pure\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev Adds onlyOwner modifier. Subcontracts should implement checkOwner to check if caller is owner.\r\n */\r\ncontract Ownable {\r\n    modifier onlyOwner() {\r\n        checkOwner();\r\n        _;\r\n    }\r\n\r\n    function checkOwner() internal;\r\n}\r\n\r\n/**\r\n * @title Token represents some external value (for example, BTC)\r\n */\r\ncontract ExternalToken is Token {\r\n    event Mint(address indexed to, uint256 value, bytes data);\r\n    event Burn(address indexed burner, uint256 value, bytes data);\r\n\r\n    function burn(uint256 _value, bytes _data) public;\r\n}\r\n\r\n/**\r\n * @dev This adapter helps to receive tokens. It has some subcontracts for different tokens:\r\n *   ERC20ReceiveAdapter - for receiving simple ERC20 tokens\r\n *   ERC223ReceiveAdapter - for receiving ERC223 tokens\r\n *   ReceiveApprovalAdapter - for receiving ERC20 tokens when token notifies receiver with receiveApproval\r\n *   EtherReceiveAdapter - for receiving ether (onReceive callback will be used). this is needed for handling ether like tokens\r\n *   CompatReceiveApproval - implements all these adapters\r\n */\r\ncontract ReceiveAdapter {\r\n\r\n    /**\r\n     * @dev Receive tokens from someone. Owner of the tokens should approve first\r\n     */\r\n    function onReceive(address _token, address _from, uint256 _value, bytes _data) internal;\r\n}\r\n\r\n/**\r\n * @dev Helps to receive ERC20-complaint tokens. Owner should call token.approve first\r\n */\r\ncontract ERC20ReceiveAdapter is ReceiveAdapter {\r\n    function receive(address _token, uint256 _value, bytes _data) public {\r\n        Token token = Token(_token);\r\n        token.transferFrom(msg.sender, this, _value);\r\n        onReceive(_token, msg.sender, _value, _data);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC223 TokenReceiver interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/223\r\n */\r\ncontract TokenReceiver {\r\n    function onTokenTransfer(address _from, uint256 _value, bytes _data) public;\r\n}\r\n\r\n/**\r\n * @dev Helps to receive ERC223-complaint tokens. ERC223 Token contract should notify receiver.\r\n */\r\ncontract ERC223ReceiveAdapter is TokenReceiver, ReceiveAdapter {\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) public {\r\n        onReceive(msg.sender, _from, _value, _data);\r\n    }\r\n\r\n    function onTokenTransfer(address _from, uint256 _value, bytes _data) public {\r\n        onReceive(msg.sender, _from, _value, _data);\r\n    }\r\n}\r\n\r\ncontract EtherReceiver {\r\n\tfunction receiveWithData(bytes _data) payable public;\r\n}\r\n\r\ncontract EtherReceiveAdapter is EtherReceiver, ReceiveAdapter {\r\n    function () payable public {\r\n        receiveWithData(\"\");\r\n    }\r\n\r\n    function receiveWithData(bytes _data) payable public {\r\n        onReceive(address(0), msg.sender, msg.value, _data);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This ReceiveAdapter supports all possible tokens\r\n */\r\ncontract CompatReceiveAdapter is ERC20ReceiveAdapter, ERC223ReceiveAdapter, EtherReceiveAdapter {\r\n\r\n}\r\n\r\ncontract AbstractSale is Sale, CompatReceiveAdapter, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event Withdraw(address token, address to, uint256 value);\r\n    event Burn(address token, uint256 value, bytes data);\r\n\r\n    function onReceive(address _token, address _from, uint256 _value, bytes _data) internal {\r\n        uint256 sold = getSold(_token, _value);\r\n        require(sold > 0);\r\n        uint256 bonus = getBonus(sold);\r\n        address buyer;\r\n        if (_data.length == 20) {\r\n            buyer = address(toBytes20(_data, 0));\r\n        } else {\r\n            require(_data.length == 0);\r\n            buyer = _from;\r\n        }\r\n        checkPurchaseValid(buyer, sold, bonus);\r\n        doPurchase(buyer, sold, bonus);\r\n        Purchase(buyer, _token, _value, sold, bonus);\r\n        onPurchase(buyer, _token, _value, sold, bonus);\r\n    }\r\n\r\n    function getSold(address _token, uint256 _value) constant public returns (uint256) {\r\n        uint256 rate = getRate(_token);\r\n        require(rate > 0);\r\n        return _value.mul(rate).div(10**18);\r\n    }\r\n\r\n    function getBonus(uint256 sold) constant public returns (uint256);\r\n\r\n    function getRate(address _token) constant public returns (uint256);\r\n\r\n    function doPurchase(address buyer, uint256 sold, uint256 bonus) internal;\r\n\r\n    function checkPurchaseValid(address /*buyer*/, uint256 /*sold*/, uint256 /*bonus*/) internal {\r\n\r\n    }\r\n\r\n    function onPurchase(address /*buyer*/, address /*token*/, uint256 /*value*/, uint256 /*sold*/, uint256 /*bonus*/) internal {\r\n\r\n    }\r\n\r\n    function toBytes20(bytes b, uint256 _start) pure internal returns (bytes20 result) {\r\n        require(_start + 20 <= b.length);\r\n        assembly {\r\n            let from := add(_start, add(b, 0x20))\r\n            result := mload(from)\r\n        }\r\n    }\r\n\r\n    function withdrawEth(address _to, uint256 _value) onlyOwner public {\r\n        withdraw(address(0), _to, _value);\r\n    }\r\n\r\n    function withdraw(address _token, address _to, uint256 _value) onlyOwner public {\r\n        require(_to != address(0));\r\n        verifyCanWithdraw(_token, _to, _value);\r\n        if (_token == address(0)) {\r\n            _to.transfer(_value);\r\n        } else {\r\n            Token(_token).transfer(_to, _value);\r\n        }\r\n        Withdraw(_token, _to, _value);\r\n    }\r\n\r\n    function verifyCanWithdraw(address token, address to, uint256 amount) internal;\r\n\r\n    function burnWithData(address _token, uint256 _value, bytes _data) onlyOwner public {\r\n        ExternalToken(_token).burn(_value, _data);\r\n        Burn(_token, _value, _data);\r\n    }\r\n}\r\n\r\n/**\r\n * @title This sale mints token when user sends accepted payments\r\n */\r\ncontract MintingSale is AbstractSale {\r\n    MintableToken public token;\r\n\r\n    function MintingSale(address _token) public {\r\n        token = MintableToken(_token);\r\n    }\r\n\r\n    function doPurchase(address buyer, uint256 sold, uint256 bonus) internal {\r\n        token.mint(buyer, sold.add(bonus));\r\n    }\r\n\r\n    function verifyCanWithdraw(address, address, uint256) internal {\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * @title OwnableImpl\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract OwnableImpl is Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function OwnableImpl() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    function checkOwner() internal {\r\n        require(msg.sender == owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract CappedBonusSale is AbstractSale {\r\n    uint256 public cap;\r\n    uint256 public initialCap;\r\n\r\n    function CappedBonusSale(uint256 _cap) public {\r\n        cap = _cap;\r\n        initialCap = _cap;\r\n    }\r\n\r\n    function checkPurchaseValid(address buyer, uint256 sold, uint256 bonus) internal {\r\n        super.checkPurchaseValid(buyer, sold, bonus);\r\n        require(cap >= sold.add(bonus));\r\n    }\r\n\r\n    function onPurchase(address buyer, address token, uint256 value, uint256 sold, uint256 bonus) internal {\r\n        super.onPurchase(buyer, token, value, sold, bonus);\r\n        cap = cap.sub(sold).sub(bonus);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Secured\r\n * @dev Adds only(role) modifier. Subcontracts should implement checkRole to check if caller is allowed to do action.\r\n */\r\ncontract Secured {\r\n    modifier only(string role) {\r\n        require(msg.sender == getRole(role));\r\n        _;\r\n    }\r\n\r\n    function getRole(string role) constant public returns (address);\r\n}\r\n\r\ncontract SecuredImpl is Ownable, Secured {\r\n\tmapping(string => address) users;\r\n\tevent RoleTransferred(address indexed previousUser, address indexed newUser, string role);\r\n\r\n\tfunction getRole(string role) constant public returns (address) {\r\n\t\treturn users[role];\r\n\t}\r\n\r\n\tfunction transferRole(string role, address to) onlyOwner public {\r\n\t\trequire(to != address(0));\r\n\t\tRoleTransferred(users[role], to, role);\r\n\t\tusers[role] = to;\r\n\t}\r\n}\r\n\r\ncontract Whitelist is Secured {\r\n\tmapping(address => bool) whitelist;\r\n\tevent WhitelistChange(address indexed addr, bool allow);\r\n\r\n\tfunction isInWhitelist(address addr) constant public returns (bool) {\r\n\t\treturn whitelist[addr];\r\n\t}\r\n\r\n\tfunction setWhitelist(address addr, bool allow) only(\"operator\") public {\r\n\t\tsetWhitelistInternal(addr, allow);\r\n\t}\r\n\r\n\tfunction setWhitelistInternal(address addr, bool allow) internal {\r\n\t\twhitelist[addr] = allow;\r\n\t\tWhitelistChange(addr, allow);\r\n\t}\r\n}\r\n\r\ncontract WhitelistSale is AbstractSale, Whitelist {\r\n\tfunction checkPurchaseValid(address buyer, uint256 sold, uint256 bonus) internal {\r\n\t\tsuper.checkPurchaseValid(buyer, sold, bonus);\r\n\t\trequire(isInWhitelist(buyer));\r\n\t}\r\n}\r\n\r\ncontract DaoxCommissionSale is AbstractSale {\r\n\tfunction getSold(address _token, uint256 _value) constant public returns (uint256) {\r\n\t\treturn super.getSold(_token, _value).div(99).mul(100);\r\n\t}\r\n}\r\n\r\ncontract ReadOnlyTokenImpl is ReadOnlyToken {\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract TokenImpl is Token, ReadOnlyTokenImpl {\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emitTransfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function emitTransfer(address _from, address _to, uint256 _value) internal {\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emitTransfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is Token {\r\n\tevent Burn(address indexed burner, uint256 value);\r\n\tfunction burn(uint256 _value) public;\r\n}\r\n\r\ncontract BurnableTokenImpl is TokenImpl, BurnableToken {\r\n\t/**\r\n\t * @dev Burns a specific amount of tokens.\r\n\t * @param _value The amount of token to be burned.\r\n\t */\r\n\tfunction burn(uint256 _value) public {\r\n\t\trequire(_value <= balances[msg.sender]);\r\n\t\t// no need to require value <= totalSupply, since that would imply the\r\n\t\t// sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n\t\taddress burner = msg.sender;\r\n\t\tbalances[burner] = balances[burner].sub(_value);\r\n\t\ttotalSupply = totalSupply.sub(_value);\r\n\t\tBurn(burner, _value);\r\n\t}\r\n}\r\n\r\ncontract MintableTokenImpl is Ownable, TokenImpl, MintableToken {\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emitMint(_to, _amount);\r\n        emitTransfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function emitMint(address _to, uint256 _value) internal {\r\n        Mint(_to, _value);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\ncontract PausableToken is Pausable, TokenImpl {\r\n\r\n\tfunction transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n\t\treturn super.transfer(_to, _value);\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n\t\treturn super.transferFrom(_from, _to, _value);\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n\t\treturn super.approve(_spender, _value);\r\n\t}\r\n\r\n\tfunction increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n\t\treturn super.increaseApproval(_spender, _addedValue);\r\n\t}\r\n\r\n\tfunction decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n\t\treturn super.decreaseApproval(_spender, _subtractedValue);\r\n\t}\r\n}\r\n\r\ncontract ZenomeToken is OwnableImpl, PausableToken, MintableTokenImpl, BurnableTokenImpl {\r\n\tstring public constant name = \"Zenome\";\r\n\tstring public constant symbol = \"sZNA\";\r\n\tuint8 public constant decimals = 18;\r\n\r\n\tfunction burn(uint256 _value) public whenNotPaused {\r\n\t\tsuper.burn(_value);\r\n\t}\r\n}\r\n\r\ncontract ZenomeSale is OwnableImpl, SecuredImpl, DaoxCommissionSale, MintingSale, CappedBonusSale, WhitelistSale {\r\n\taddress public btcToken;\r\n\tuint256 public ethRate = 1350 * 10**18;\r\n\tuint256 public btcEthRate = 10 * 10**10;\r\n\r\n\tfunction ZenomeSale(\r\n\t\taddress _mintableToken,\r\n\t\taddress _btcToken,\r\n\t\tuint256 _cap)\r\n\tMintingSale(_mintableToken)\r\n\tCappedBonusSale(_cap) {\r\n\t\tbtcToken = _btcToken;\r\n\t\tRateAdd(address(0));\r\n\t\tRateAdd(_btcToken);\r\n\t}\r\n\r\n\tfunction getRate(address _token) constant public returns (uint256) {\r\n\t\tif (_token == btcToken) {\r\n\t\t\treturn btcEthRate * ethRate;\r\n\t\t} else if (_token == address(0)) {\r\n\t\t\treturn ethRate;\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getBonus(uint256 sold) constant public returns (uint256) {\r\n\t\tif (sold > 850000 * 10**18) {\r\n\t\t\treturn sold.mul(50).div(100);\r\n\t\t} else if (sold > 340000 * 10**18) {\r\n\t\t\treturn sold.mul(33).div(100);\r\n\t\t} else if (sold > 85000 * 10**18) {\r\n\t\t\treturn sold.mul(20).div(100);\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\tevent EthRateChange(uint256 rate);\r\n\r\n\tfunction setEthRate(uint256 _ethRate) onlyOwner public {\r\n\t\tethRate = _ethRate;\r\n\t\tEthRateChange(_ethRate);\r\n\t}\r\n\r\n\tevent BtcEthRateChange(uint256 rate);\r\n\r\n\tfunction setBtcEthRate(uint256 _btcEthRate) onlyOwner public {\r\n\t\tbtcEthRate = _btcEthRate;\r\n\t\tBtcEthRateChange(_btcEthRate);\r\n\t}\r\n\r\n\tfunction withdrawBtc(bytes _to, uint256 _value) onlyOwner public {\r\n\t\tburnWithData(btcToken, _value, _to);\r\n\t}\r\n\r\n\tfunction transferTokenOwnership(address newOwner) onlyOwner public {\r\n\t\tOwnableImpl(token).transferOwnership(newOwner);\r\n\t}\r\n\r\n\tfunction pauseToken() onlyOwner public {\r\n\t\tPausable(token).pause();\r\n\t}\r\n\r\n\tfunction unpauseToken() onlyOwner public {\r\n\t\tPausable(token).unpause();\r\n\t}\r\n\r\n\tfunction transfer(address beneficiary, uint256 amount) onlyOwner public {\r\n\t\temulatePurchase(beneficiary, address(1), 0, amount, 0);\r\n\t}\r\n\r\n\tfunction emulatePurchase(address beneficiary, address paymentMethod, uint256 value, uint256 amount, uint256 bonus) onlyOwner public {\r\n\t\tsetWhitelistInternal(beneficiary, true);\r\n\t\tdoPurchase(beneficiary, amount, bonus);\r\n\t\tPurchase(beneficiary, paymentMethod, value, amount, bonus);\r\n\t\tonPurchase(beneficiary, paymentMethod, value, amount, bonus);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"btcToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isInWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"receive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"bytes\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawBtc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sold\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"role\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"role\",\"type\":\"string\"}],\"name\":\"getRole\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethRate\",\"type\":\"uint256\"}],\"name\":\"setEthRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"btcEthRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"burnWithData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"receiveWithData\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_btcEthRate\",\"type\":\"uint256\"}],\"name\":\"setBtcEthRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"paymentMethod\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"emulatePurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mintableToken\",\"type\":\"address\"},{\"name\":\"_btcToken\",\"type\":\"address\"},{\"name\":\"_cap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"EthRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"BtcEthRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"WhitelistChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousUser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RateAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RateRemove\",\"type\":\"event\"}]","ContractName":"ZenomeSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006342eabec28aec4902432d852dcd08d4f6df96ab000000000000000000000000f876c67ce21a03a848dbae562d583296ee5a844900000000000000000000000000000000000000000002a5a058fc295ed0000000","Library":"","SwarmSource":"bzzr://964bf73cf8404bc1ca5377277e50f15867f3f6fc89c16df7e1559a4a29fa4170"}]}