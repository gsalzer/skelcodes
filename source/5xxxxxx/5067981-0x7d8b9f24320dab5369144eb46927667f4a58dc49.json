{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.18;\r\n\r\n/**\r\n * @title Owned\r\n * @dev The Owned contract has an owner address, and provides basic authorization control\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n   \r\n    /*Set owner of the contract*/\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /*only owner can be modifier*/\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Owned {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/*ERC20*/\r\ncontract TokenERC20 is Pausable {\r\n    using SafeMath for uint256;\r\n    // Public variables of the token\r\n    string public name = \"NRC\";\r\n    string public symbol = \"R\";\r\n    uint8 public decimals = 0;\r\n    // how many token units a buyer gets per wei\r\n    uint256 public rate = 50000;\r\n    // address where funds are collected\r\n    address public wallet = 0xd3C8326064044c36B73043b009155a59e92477D0;\r\n    // contributors address\r\n    address public contributorsAddress = 0xa7db53CB73DBe640DbD480a928dD06f03E2aE7Bd;\r\n    // company address\r\n    address public companyAddress = 0x9c949b51f2CafC3A5efc427621295489B63D861D;\r\n    // market Address \r\n    address public marketAddress = 0x199EcdFaC25567eb4D21C995B817230050d458d9;\r\n    // share of all token \r\n    uint8 public constant ICO_SHARE = 20;\r\n    uint8 public constant CONTRIBUTORS_SHARE = 30;\r\n    uint8 public constant COMPANY_SHARE = 20;\r\n    uint8 public constant MARKET_SHARE = 30;\r\n    // unfronzen periods \r\n    uint8 constant COMPANY_PERIODS = 10;\r\n    uint8 constant CONTRIBUTORS_PERIODS = 3;\r\n    // token totalsupply amount\r\n    uint256 public constant TOTAL_SUPPLY = 80000000000;\r\n    // ico token amount\r\n    uint256 public icoTotalAmount = 16000000000;\r\n    uint256 public companyPeriodsElapsed;\r\n    uint256 public contributorsPeriodsElapsed;\r\n    // token frozened amount\r\n    uint256 public frozenSupply;\r\n    uint256 public initDate;\r\n    uint8 public contributorsCurrentPeriod;\r\n    uint8 public companyCurrentPeriod;\r\n    // This creates an array with all balances\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event InitialToken(string desc, address indexed target, uint256 value);    \r\n    \r\n    /**\r\n     * Constrctor function\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function TokenERC20(\r\n    ) public {\r\n        // contributors share 30% of totalSupply,but get all by 3 years\r\n        uint256 tempContributors = TOTAL_SUPPLY.mul(CONTRIBUTORS_SHARE).div(100).div(CONTRIBUTORS_PERIODS);\r\n        contributorsPeriodsElapsed = tempContributors;\r\n        balanceOf[contributorsAddress] = tempContributors;\r\n        InitialToken(\"contributors\", contributorsAddress, tempContributors);\r\n        \r\n        // company shares 20% of totalSupply,but get all by 10 years\r\n        uint256 tempCompany = TOTAL_SUPPLY.mul(COMPANY_SHARE).div(100).div(COMPANY_PERIODS);\r\n        companyPeriodsElapsed = tempCompany;\r\n        balanceOf[companyAddress] = tempCompany;\r\n        InitialToken(\"company\", companyAddress, tempCompany);\r\n\r\n        // ico takes 20% of totalSupply\r\n        uint256 tempIco = TOTAL_SUPPLY.mul(ICO_SHARE).div(100);\r\n        icoTotalAmount = tempIco;\r\n\r\n        // expand the market cost 30% of totalSupply\r\n        uint256 tempMarket = TOTAL_SUPPLY.mul(MARKET_SHARE).div(100);\r\n        balanceOf[marketAddress] = tempMarket;\r\n        InitialToken(\"market\", marketAddress, tempMarket);\r\n\r\n        // frozenSupply waitting for being unfrozen\r\n        uint256 tempFrozenSupply = TOTAL_SUPPLY.sub(tempContributors).sub(tempIco).sub(tempCompany).sub(tempMarket);\r\n        frozenSupply = tempFrozenSupply;\r\n        initDate = block.timestamp;\r\n        contributorsCurrentPeriod = 1;\r\n        companyCurrentPeriod = 1;\r\n        paused = true;\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to].add(_value) > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n        // Subtract from the sender\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        // Add the same to the recipient\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n}\r\n/******************************************/\r\n/*       NRCToken STARTS HERE       */\r\n/******************************************/\r\n\r\ncontract NRCToken is Owned, TokenERC20 {\r\n    uint256 private etherChangeRate = 10 ** 18;\r\n    uint256 private minutesOneYear = 365*24*60 minutes;\r\n    bool public  tokenSaleActive = true;\r\n    // token have been sold\r\n    uint256 public totalSoldToken;\r\n    // all frozenAccount addresses\r\n    mapping(address => bool) public frozenAccount;\r\n\r\n    /* This generates a public log event on the blockchain that will notify clients */\r\n    event LogFrozenAccount(address target, bool frozen);\r\n    event LogUnfrozenTokens(string desc, address indexed targetaddress, uint256 unfrozenTokensAmount);\r\n    event LogSetTokenPrice(uint256 tokenPrice);\r\n    event TimePassBy(string desc, uint256 times );\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param value ehter paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event LogTokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n    // ICO finished Event\r\n    event TokenSaleFinished(string desc, address indexed contributors, uint256 icoTotalAmount, uint256 totalSoldToken, uint256 leftAmount);\r\n    \r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function NRCToken() TokenERC20() public {}\r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_from != _to);\r\n        require(_to != 0x0); // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(balanceOf[_from] >= _value); // Check if the sender has enough\r\n        require(balanceOf[_to].add(_value) > balanceOf[_to]); // Check for overflows\r\n        require(!frozenAccount[_from]); // Check if sender is frozen\r\n        require(!frozenAccount[_to]); // Check if recipient is frozen\r\n        balanceOf[_from] = balanceOf[_from].sub(_value); // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add(_value); // Add the same to the recipient\r\n        Transfer(_from, _to, _value);\r\n    }\r\n       /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    function freezeAccount(address target, bool freeze) public onlyOwner whenNotPaused {\r\n        require(target != 0x0);\r\n        require(target != owner);\r\n        require(frozenAccount[target] != freeze);\r\n        frozenAccount[target] = freeze;\r\n        LogFrozenAccount(target, freeze);\r\n    }\r\n\r\n    /// @notice Allow users to buy tokens for `newTokenRate` eth\r\n    /// @param newTokenRate Price users can buy from the contract\r\n    function setPrices(uint256 newTokenRate) public onlyOwner whenNotPaused {\r\n        require(newTokenRate > 0);\r\n        require(newTokenRate <= icoTotalAmount);\r\n        require(tokenSaleActive);\r\n        rate = newTokenRate;\r\n        LogSetTokenPrice(newTokenRate);\r\n    }\r\n\r\n    /// @notice Buy tokens from contract by sending ether\r\n    function buy() public payable whenNotPaused {\r\n        // if ICO finished ,can not buy any more!\r\n        require(!frozenAccount[msg.sender]); \r\n        require(tokenSaleActive);\r\n        require(validPurchase());\r\n        uint tokens = getTokenAmount(msg.value); // calculates the amount\r\n        require(!validSoldOut(tokens));\r\n        LogTokenPurchase(msg.sender, msg.value, tokens);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(tokens);\r\n        calcTotalSoldToken(tokens);\r\n        forwardFunds();\r\n    }\r\n\r\n    // Override this method to have a way to add business logic to your crowdsale when buying\r\n    function getTokenAmount(uint256 etherAmount) internal view returns(uint256) {\r\n        uint256 temp = etherAmount.mul(rate);\r\n        uint256 amount = temp.div(etherChangeRate);\r\n        return amount;\r\n    }\r\n\r\n    // send ether to the funder wallet\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    // calc totalSoldToken\r\n    function calcTotalSoldToken(uint256 soldAmount) internal {\r\n        totalSoldToken = totalSoldToken.add(soldAmount);\r\n        if (totalSoldToken >= icoTotalAmount) { \r\n            tokenSaleActive = false;\r\n        }\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal view returns(bool) {\r\n        bool limitPurchase = msg.value >= 1 ether;\r\n        bool isNotTheOwner = msg.sender != owner;\r\n        bool isNotTheCompany = msg.sender != companyAddress;\r\n        bool isNotWallet = msg.sender != wallet;\r\n        bool isNotContributors = msg.sender != contributorsAddress;\r\n        bool isNotMarket = msg.sender != marketAddress;\r\n        return limitPurchase && isNotTheOwner && isNotTheCompany && isNotWallet && isNotContributors && isNotMarket;\r\n    }\r\n\r\n    // @return true if the ICO is in progress.\r\n    function validSoldOut(uint256 soldAmount) internal view returns(bool) {\r\n        return totalSoldToken.add(soldAmount) > icoTotalAmount;\r\n    }\r\n    // @return current timestamp\r\n    function time() internal constant returns (uint) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /// @dev send the rest of the tokens after the crowdsale end and\r\n    /// send to contributors address\r\n    function finaliseICO() public onlyOwner whenNotPaused {\r\n        require(tokenSaleActive == true);        \r\n        uint256 tokensLeft = icoTotalAmount.sub(totalSoldToken);\r\n        tokenSaleActive = false;\r\n        require(tokensLeft > 0);\r\n        balanceOf[contributorsAddress] = balanceOf[contributorsAddress].add(tokensLeft);\r\n        TokenSaleFinished(\"finaliseICO\", contributorsAddress, icoTotalAmount, totalSoldToken, tokensLeft);\r\n        totalSoldToken = icoTotalAmount;\r\n    }\r\n\r\n\r\n    /// @notice freeze unfrozenAmount\r\n    function unfrozenTokens() public onlyOwner whenNotPaused {\r\n        require(frozenSupply >= 0);\r\n        if (contributorsCurrentPeriod < CONTRIBUTORS_PERIODS) {\r\n            unfrozenContributorsTokens();\r\n            unfrozenCompanyTokens();\r\n        } else {\r\n            unfrozenCompanyTokens();\r\n        }\r\n    }\r\n\r\n    // unfrozen contributors token year by year\r\n    function unfrozenContributorsTokens() internal {\r\n        require(contributorsCurrentPeriod < CONTRIBUTORS_PERIODS);\r\n        uint256 contributortimeShouldPassBy = contributorsCurrentPeriod * (minutesOneYear);\r\n        TimePassBy(\"contributortimeShouldPassBy\", contributortimeShouldPassBy);\r\n        uint256 contributorsTimePassBy = time() - initDate;\r\n        TimePassBy(\"contributortimePassBy\", contributorsTimePassBy);\r\n\r\n        contributorsCurrentPeriod = contributorsCurrentPeriod + 1;\r\n        require(contributorsTimePassBy >= contributortimeShouldPassBy);\r\n        frozenSupply = frozenSupply.sub(contributorsPeriodsElapsed);\r\n        balanceOf[contributorsAddress] = balanceOf[contributorsAddress].add(contributorsPeriodsElapsed);\r\n        LogUnfrozenTokens(\"contributors\", contributorsAddress, contributorsPeriodsElapsed);\r\n    }\r\n\r\n    // unfrozen company token year by year\r\n    function unfrozenCompanyTokens() internal {\r\n        require(companyCurrentPeriod < COMPANY_PERIODS);\r\n        uint256 companytimeShouldPassBy = companyCurrentPeriod * (minutesOneYear);\r\n        TimePassBy(\"CompanytimeShouldPassBy\", companytimeShouldPassBy);\r\n        uint256 companytimePassBy = time() - initDate;\r\n        TimePassBy(\"CompanytimePassBy\", companytimePassBy);\r\n\r\n        require(companytimePassBy >= companytimeShouldPassBy);\r\n        companyCurrentPeriod = companyCurrentPeriod + 1;\r\n        frozenSupply = frozenSupply.sub(companyPeriodsElapsed);\r\n        balanceOf[companyAddress] = balanceOf[companyAddress].add(companyPeriodsElapsed);\r\n        LogUnfrozenTokens(\"company\", companyAddress, companyPeriodsElapsed);\r\n    }\r\n\r\n    // fallback function - do not allow any eth transfers to this contract\r\n    function() external {\r\n        revert();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyCurrentPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIBUTORS_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTotalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPANY_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSoldToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finaliseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyPeriodsElapsed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfrozenTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorsCurrentPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenRate\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKET_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorsPeriodsElapsed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"LogFrozenAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"desc\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"targetaddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"unfrozenTokensAmount\",\"type\":\"uint256\"}],\"name\":\"LogUnfrozenTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"name\":\"LogSetTokenPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"desc\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"TimePassBy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"desc\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"contributors\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"icoTotalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSoldToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leftAmount\",\"type\":\"uint256\"}],\"name\":\"TokenSaleFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"desc\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InitialToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"NRCToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ff57f6e7643b5477d338549ee584a58328783bb6a6db7856eef29ad7dcb1faf5"}]}