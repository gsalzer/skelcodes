{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        c = a + b;\r\n\r\n        require(c >= a);\r\n\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        require(b <= a);\r\n\r\n        c = a - b;\r\n\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        c = a * b;\r\n\r\n        require(a == 0 || c / a == b);\r\n\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n\r\n        require(b > 0);\r\n\r\n        c = a / b;\r\n\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n\r\n\r\n\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    if (msg.sender != owner) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ERC918Interface {\r\n  function totalSupply() public constant returns (uint);\r\n  function getMiningDifficulty() public constant returns (uint);\r\n  function getMiningTarget() public constant returns (uint);\r\n  function getMiningReward() public constant returns (uint);\r\n  function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n  function merge() public returns (bool success);\r\n  uint public lastRewardAmount;\r\n\r\n  function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\r\n\r\n  event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n\r\n}\r\n\r\n/*\r\nThe owner (or anyone) will deposit tokens in here\r\nThe owner calls the multisend method to send out payments\r\n*/\r\ncontract MintHelper is Ownable {\r\n\r\n  using SafeMath for uint;\r\n\r\n    address public mintableToken;\r\n\r\n    address public payoutsWallet;\r\n    address public minterWallet;\r\n\r\n    uint public minterFeePercent;\r\n\r\n\r\n    function MintHelper(address mToken, address pWallet, address mWallet)\r\n    {\r\n      mintableToken = mToken;\r\n      payoutsWallet = pWallet;\r\n      minterWallet = mWallet;\r\n      minterFeePercent = 6;\r\n    }\r\n\r\n    function setMintableToken(address mToken)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n      mintableToken = mToken;\r\n      return true;\r\n    }\r\n\r\n    function setPayoutsWallet(address pWallet)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n      payoutsWallet = pWallet;\r\n      return true;\r\n    }\r\n\r\n    function setMinterWallet(address mWallet)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n      minterWallet = mWallet;\r\n      return true;\r\n    }\r\n\r\n    function setMinterFeePercent(uint fee)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n      require(fee >= 0 && fee <= 100);\r\n      minterFeePercent = fee;\r\n      return true;\r\n    }\r\n\r\n\r\n\r\n    function proxyMint(uint256 nonce, bytes32 challenge_digest )\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n      //identify the rewards that will be won and how to split them up\r\n      uint totalReward = ERC918Interface(mintableToken).getMiningReward();\r\n\r\n      uint minterReward = totalReward.mul(minterFeePercent).div(100);\r\n      uint payoutReward = totalReward.sub(minterReward);\r\n\r\n      // get paid in new tokens\r\n      require(ERC918Interface(mintableToken).mint(nonce, challenge_digest));\r\n\r\n      //transfer the tokens to the correct wallets\r\n      require(ERC20Interface(mintableToken).transfer(minterWallet, minterReward));\r\n      require(ERC20Interface(mintableToken).transfer(payoutsWallet, payoutReward));\r\n\r\n      return true;\r\n\r\n    }\r\n\r\n\r\n    function proxyMergeMint(uint256 nonce, bytes32 challenge_digest, address[] tokens)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n      //identify the rewards that will be won and how to split them up\r\n      uint totalReward = ERC918Interface(mintableToken).getMiningReward();\r\n\r\n      uint minterReward = totalReward.mul(minterFeePercent).div(100);\r\n      uint payoutReward = totalReward.sub(minterReward);\r\n\r\n      // get paid in new tokens\r\n      require(ERC918Interface(mintableToken).mint(nonce, challenge_digest));\r\n      //transfer the tokens to the correct wallets\r\n      require(ERC20Interface(mintableToken).transfer(minterWallet, minterReward));\r\n      require(ERC20Interface(mintableToken).transfer(payoutsWallet, payoutReward));\r\n\r\n      uint256 i = 0;\r\n      while (i < tokens.length) {\r\n         address mergedToken = tokens[i];\r\n         if(ERC918Interface(mergedToken).merge())\r\n         {\r\n            uint merge_totalReward = ERC918Interface(mergedToken).lastRewardAmount();\r\n            uint merge_minterReward = merge_totalReward.mul(minterFeePercent).div(100);\r\n            uint merge_payoutReward = merge_totalReward.sub(merge_minterReward);\r\n\r\n            // get paid in new tokens\r\n            //transfer the tokens to the correct wallets\r\n            require(ERC20Interface(mergedToken).transfer(minterWallet, merge_minterReward));\r\n            require(ERC20Interface(mergedToken).transfer(payoutsWallet, merge_payoutReward));\r\n         }\r\n         i+=1;\r\n      }\r\n\r\n\r\n      return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    //withdraw any eth inside\r\n    function withdraw()\r\n    public onlyOwner\r\n    {\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n\r\n    //send tokens out\r\n    function send(address _tokenAddr, address dest, uint value)\r\n    public onlyOwner\r\n    returns (bool)\r\n    {\r\n     return ERC20Interface(_tokenAddr).transfer(dest, value);\r\n    }\r\n\r\n \r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mToken\",\"type\":\"address\"}],\"name\":\"setMintableToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"proxyMergeMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mWallet\",\"type\":\"address\"}],\"name\":\"setMinterWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minterWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintableToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minterFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setMinterFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"}],\"name\":\"proxyMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pWallet\",\"type\":\"address\"}],\"name\":\"setPayoutsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"mToken\",\"type\":\"address\"},{\"name\":\"pWallet\",\"type\":\"address\"},{\"name\":\"mWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"MintHelper","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b6ed7644c69416d67b522e20bc294a9a9b405b310000000000000000000000001a64f4b6ac7339468b24789e560c9eb1f9a82cf6000000000000000000000000991bd83f4c601fc3798839d4e4372d628607f7c9","Library":"","SwarmSource":"bzzr://6132e07fcf423be8addec33219e38bca584cace055dff0bd90169243fda1ca5d"}]}