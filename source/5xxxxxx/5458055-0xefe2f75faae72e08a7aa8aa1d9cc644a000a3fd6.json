{"status":"1","message":"OK","result":[{"SourceCode":"pragma experimental \"v0.5.0\";\r\n\r\n//Micro Etheroll contract\r\n//version 0.8.0\r\n\r\n//// minimal Etheroll \"interface\"\r\n\r\ncontract Etheroll {\r\n    function playerRollDice(uint rollUnder) public payable;\r\n    function playerWithdrawPendingTransactions() public returns (bool);\r\n}\r\n\r\n//// Proxy contract for Micro Etheroll - providing a cheap and empty payable fallback function\r\n\r\ncontract Proxy {\r\n    address etheroll;\r\n    address micro;\r\n    address owner;\r\n    uint roundID = 0;\r\n\r\n    event GotFunds(uint indexed roundID, address indexed sender, uint indexed amount);\r\n    event SentFunds(uint indexed roundID, uint indexed amount, uint indexed rollUnder);\r\n    event WithdrawPendingTransactionsResult(bool indexed result);\r\n\r\n    constructor(address etherollAddress, address ownerAddress) public {\r\n        etheroll = etherollAddress;\r\n        owner = ownerAddress;\r\n        micro = msg.sender;\r\n        roundID = 0;\r\n    }\r\n\r\n//// Getters\r\n\r\n    function getBalance() view external returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getRoundID() view external returns (uint) {\r\n        return roundID;\r\n    }\r\n\r\n    function getEtherollAddress() view external returns (address) {\r\n        return etheroll;\r\n    }\r\n\r\n\r\n//// Secutity modifier\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMicro {\r\n        require(msg.sender == micro);\r\n        _;\r\n    }\r\n\r\n//// Insecure public payable fallback function\r\n\r\n    function () external payable {\r\n        emit GotFunds(roundID, msg.sender, msg.value);\r\n    }\r\n\r\n//// Sending bets and withdrawing winnings\r\n\r\n    function sendToEtheroll(uint rollUnder, uint newRoundID) external payable\r\n            onlyMicro\r\n    {\r\n        roundID = newRoundID;\r\n        Etheroll e = Etheroll(etheroll);\r\n        e.playerRollDice.value(msg.value)(rollUnder);\r\n        emit SentFunds(roundID, msg.value, rollUnder);\r\n    }\r\n\r\n    function withdrawWinnings() external\r\n            onlyMicro\r\n    {\r\n        Micro m = Micro(micro);\r\n        m.withdrawWinnings.value(address(this).balance)();\r\n    }\r\n\r\n//// Owner security & maintenance functions\r\n\r\n    function withdrawRefund() external\r\n            onlyMicro\r\n    {\r\n        Micro m = Micro(micro);\r\n        m.withdrawRefund.value(address(this).balance)();\r\n    }\r\n    \r\n    function withdrawPendingTransactions() external\r\n            onlyOwner\r\n    {\r\n        Etheroll e = Etheroll(etheroll);\r\n        emit WithdrawPendingTransactionsResult(e.playerWithdrawPendingTransactions());\r\n    }\r\n    \r\n    function ownerWithdraw() external\r\n            onlyOwner\r\n    {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function setEtherollAddress(address etherollAddress) external\r\n            onlyOwner\r\n    {\r\n        etheroll = etherollAddress;\r\n    }\r\n    \r\n}\r\n\r\n//// Main Micro Etheroll Contract\r\n\r\ncontract Micro {\r\n    address[110] bets;\r\n    address proxy;\r\n    address owner;\r\n\r\n    uint roundID;\r\n\r\n    bool betsState = true;\r\n    bool rolled = false;\r\n    bool emergencyBlock = false;\r\n    bool betsBlock = false;\r\n\r\n    uint rollUnder = 90;\r\n    uint participants = 10; // Number of effective participants (without extraBets)\r\n    uint extraBets = 1;\r\n    uint oneBet = 0.01 ether;\r\n    uint8 numberOfBets = 0;\r\n\r\n    uint houseEdgeDivisor = 1000;\r\n    uint houseEdge = 990;\r\n\r\n    uint expectedReturn;\r\n\r\n    event GotBet(uint indexed roundID, address indexed sender, uint8 indexed numberOfBets);\r\n    event BetResult(uint indexed roundID, uint8 indexed result, uint indexed amount);\r\n    event ReadyToRoll(uint indexed roundID, uint indexed participants, uint indexed oneBet);\r\n    event SendError(uint indexed roundID, address addr, uint amount);\r\n    event Emergency(uint indexed roundID);\r\n\r\n    constructor(address etherollAddress) public {\r\n        owner = msg.sender;\r\n        proxy = new Proxy(etherollAddress, owner);\r\n        setExpectedReturn((((((oneBet*participants) * (100-(rollUnder-1))) / (rollUnder-1)+(oneBet*participants)))*houseEdge/houseEdgeDivisor) / 0.01 ether);\r\n        roundID = 0;\r\n    }\r\n\r\n//// Getters and Setter\r\n\r\n\r\n\r\n    function setExpectedReturn(uint rounded) internal {\r\n        expectedReturn = rounded * 0.01 ether;\r\n    }\r\n\r\n    function getBetsState() external view returns (bool) {\r\n        return betsState;\r\n    }\r\n    \r\n    function getRolled() external view returns (bool) {\r\n        return rolled;\r\n    }\r\n\r\n    function getExpectedReturn() external view returns (uint) {\r\n        return expectedReturn;\r\n    }\r\n\r\n    function getNumberOfBets() external view returns (uint) {\r\n        return numberOfBets;\r\n    }\r\n\r\n    function getRollUnder() external view returns (uint) {\r\n        return rollUnder;\r\n    }\r\n\r\n    function getOneBet() external view returns (uint) {\r\n        return oneBet;\r\n    }\r\n\r\n    function getParticipants() external view returns (uint) {\r\n        return participants;\r\n    }\r\n    \r\n    function getExtraBets() external view returns (uint) {\r\n        return extraBets;\r\n    }\r\n\r\n    function getBetsBlock() external view returns (bool) {\r\n        return betsBlock;\r\n    }\r\n\r\n    function getRoundID() view external returns (uint) {\r\n        return roundID;\r\n    }\r\n\r\n    function getWaitingState() external view returns (uint) {\r\n        if (!betsState && !rolled) return 1; //waiting for roll()\r\n        if (!betsState && rolled && (address(proxy).balance > 0)) return 2; //waiting for wakeUpProxy(), but needs a check if funds on proxy are winnings\r\n        if (emergencyBlock) return 9; //is in emergency block\r\n        if (betsBlock) return 8; //bets block active\r\n        if (betsState && !rolled) return 0; //not waiting, accepting bids\r\n        return 5; // unknown state, probably waiting for etheroll \r\n    }\r\n    \r\n    // Combined \"one-request\" getState for web-requests optimisation\r\n    function getState() external view returns (bool, bool, uint, uint, uint, uint, uint, uint, bool, uint, uint) {\r\n        return (this.getBetsState(),\r\n                this.getRolled(),\r\n                this.getExpectedReturn(),\r\n                this.getNumberOfBets(),\r\n                this.getRollUnder(),\r\n                this.getOneBet(),\r\n                this.getParticipants(),\r\n                this.getExtraBets(),\r\n                this.getBetsBlock(),\r\n                this.getRoundID(),\r\n                this.getWaitingState());\r\n    }\r\n\r\n//// Security function modifiers\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyProxy {\r\n        require(msg.sender == proxy);\r\n        _;\r\n    }\r\n\r\n    modifier betsOver {\r\n        require (!betsState);\r\n        _;\r\n    }\r\n\r\n    modifier betsActive {\r\n        require (betsState);\r\n        _;\r\n    }\r\n\r\n    modifier noBets {\r\n        require (numberOfBets == 0);\r\n        _;\r\n    }\r\n\r\n    modifier hasRolled {\r\n        require(rolled);\r\n        _;\r\n    }\r\n\r\n    modifier hasntRolled {\r\n        require(!rolled);\r\n        _;\r\n    }\r\n\r\n    modifier hasMoney {\r\n        require(address(proxy).balance > 0);\r\n        _;\r\n    }\r\n\r\n    modifier noEmergencyBlock {\r\n        require(!emergencyBlock);\r\n        _;\r\n    }\r\n\r\n//// Secure payable fallback function - receives bets\r\n\r\n    function () external payable {\r\n        require((msg.value == oneBet) || (msg.sender == owner));\r\n        if (msg.sender != owner) {\r\n            require(betsState && !emergencyBlock);\r\n            require(!betsBlock);\r\n            if (numberOfBets < participants+(extraBets-1)) {\r\n                bets[numberOfBets] = msg.sender;\r\n                numberOfBets++;\r\n                emit GotBet(roundID, msg.sender, numberOfBets);\r\n            } else {\r\n                bets[numberOfBets] = msg.sender;\r\n                numberOfBets++;\r\n                emit GotBet(roundID, msg.sender, numberOfBets);\r\n                betsState = false;\r\n                emit ReadyToRoll(roundID, participants+extraBets, oneBet);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n//// Main contract callable functions\r\n\r\n    function roll() external\r\n            betsOver\r\n            hasntRolled\r\n            noEmergencyBlock\r\n    {\r\n        require(numberOfBets == (participants + extraBets));\r\n        rolled = true;\r\n        Proxy p = Proxy(proxy);\r\n        p.sendToEtheroll.value((participants) * oneBet)(rollUnder, roundID);\r\n\t  }\r\n\r\n    function wakeUpProxy() external\r\n            onlyOwner\r\n            betsOver\r\n            hasRolled\r\n            hasMoney\r\n            noEmergencyBlock\r\n    {\r\n        rolled = false;\r\n        Proxy p = Proxy(proxy);\r\n        p.withdrawWinnings();\r\n    }\r\n\r\n//// Withdraw and distribute winnings\r\n\r\n    function withdrawWinnings() external payable\r\n            onlyProxy\r\n    {\r\n        if ((msg.value > expectedReturn) && !emergencyBlock) {\r\n            emit BetResult(roundID, 1, msg.value); // We won! Set 1\r\n            distributeWinnings(msg.value);\r\n        } else {\r\n            emit BetResult(roundID, 0, msg.value); // We lost :( Set 0\r\n        }\r\n        \r\n        numberOfBets = 0;\r\n        betsState = true;\r\n        roundID++;\r\n    }\r\n\r\n    function proxyGetRefund() external\r\n            onlyOwner\r\n            betsOver\r\n            hasRolled\r\n            hasMoney\r\n    {\r\n        rolled = false;\r\n        Proxy p = Proxy(proxy);\r\n        p.withdrawRefund();\r\n    }\r\n\r\n    function withdrawRefund() external payable\r\n            onlyProxy\r\n    {\r\n        emit BetResult(roundID, 2, msg.value); // Set 2 for Refund\r\n        distributeWinnings(msg.value+(oneBet*extraBets)); // Distribute the refund and return extraBets\r\n        \r\n        numberOfBets = 0;\r\n        betsState = true;\r\n        roundID++;\r\n    }\r\n\r\n    function distributeWinnings(uint value) internal\r\n            betsOver\r\n    {\r\n        require(numberOfBets == (participants + extraBets)); // Check if count of participants+extraBets matches numberOfBets\r\n\r\n        uint share = value / (numberOfBets); // Calculate the share out of value received div by number of bets\r\n        for (uint i = 0; i<(numberOfBets); i++) {\r\n            if (!(bets[i].send(share))) emit SendError(roundID, bets[i], share); // Send an SendError event if something goes wrong\r\n        }\r\n    }\r\n\r\n//// Owner security & maintenance functions\r\n\r\n    function resetState() external\r\n        onlyOwner\r\n    {\r\n        numberOfBets = 0;\r\n        betsState = true;\r\n        rolled = false;\r\n        roundID++;\r\n    }\r\n\r\n    function returnBets() external\r\n            onlyOwner\r\n    {\r\n        require(emergencyBlock || betsBlock);\r\n        require(numberOfBets>0);\r\n        for (uint i = 0; i<(numberOfBets); i++) {\r\n            if (!(bets[i].send(oneBet))) emit SendError(roundID, bets[i], oneBet); // Send an SendError event if something goes wrong\r\n        }\r\n        numberOfBets = 0;\r\n        betsState = true;\r\n        rolled = false;\r\n        roundID++;        \r\n    }\r\n        \r\n\r\n    function changeParticipants(uint newParticipants) external\r\n            onlyOwner\r\n            betsActive\r\n    {\r\n        require((newParticipants <= 100) && (newParticipants > numberOfBets)); //Check that newParticipants don't exceed bets array length and exceed current round existing bets\r\n        participants = newParticipants;\r\n        setExpectedReturn((((((oneBet*participants) * (100-(rollUnder-1))) / (rollUnder-1)+(oneBet*participants)))*houseEdge/houseEdgeDivisor) / 0.01 ether);\r\n    }\r\n\r\n    function changeExtraBets(uint newExtraBets) external\r\n            onlyOwner\r\n            betsActive\r\n    {\r\n        require(participants+newExtraBets < bets.length);\r\n        require(participants+newExtraBets > numberOfBets);\r\n        extraBets = newExtraBets;\r\n    }\r\n\r\n    function changeOneBet(uint newOneBet) external\r\n            onlyOwner\r\n            betsActive\r\n            noBets\r\n    {\r\n        require(newOneBet > 0);\r\n        oneBet = newOneBet;\r\n        setExpectedReturn((((((oneBet*participants) * (100-(rollUnder-1))) / (rollUnder-1)+(oneBet*participants)))*houseEdge/houseEdgeDivisor) / 0.01 ether);\r\n    }\r\n\r\n    function changeRollUnder(uint newRollUnder) external\r\n            onlyOwner\r\n            betsActive\r\n    {\r\n        require((newRollUnder > 1) && (newRollUnder < 100));\r\n        rollUnder = newRollUnder;\r\n        setExpectedReturn((((((oneBet*participants) * (100-(rollUnder-1))) / (rollUnder-1)+(oneBet*participants)))*houseEdge/houseEdgeDivisor) / 0.01 ether);\r\n    }\r\n\r\n    function enableEmergencyBlock() external\r\n            onlyOwner\r\n    {\r\n        emergencyBlock = true;\r\n        emit Emergency(roundID);\r\n    }\r\n\r\n    function disableEmergencyBlock() external\r\n            onlyOwner\r\n    {\r\n        emergencyBlock = false;\r\n    }\r\n\r\n    function enableBets() external\r\n            onlyOwner\r\n    {\r\n        betsBlock = false;\r\n    }\r\n\r\n    function disableBets() external\r\n            onlyOwner\r\n    {\r\n        betsBlock = true;\r\n    }\r\n\r\n    function ownerWithdraw() external\r\n            onlyOwner\r\n    {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function ownerkill() external\r\n\t\t    onlyOwner\r\n\t  {\r\n\t\tselfdestruct(owner);\r\n\t  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newOneBet\",\"type\":\"uint256\"}],\"name\":\"changeOneBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRefund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRollUnder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOneBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRolled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExpectedReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableEmergencyBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBetsBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWaitingState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableEmergencyBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableBets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableBets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRoundID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawWinnings\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRollUnder\",\"type\":\"uint256\"}],\"name\":\"changeRollUnder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"roll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"proxyGetRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExtraBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnBets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBetsState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"wakeUpProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newParticipants\",\"type\":\"uint256\"}],\"name\":\"changeParticipants\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newExtraBets\",\"type\":\"uint256\"}],\"name\":\"changeExtraBets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"etherollAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"numberOfBets\",\"type\":\"uint8\"}],\"name\":\"GotBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"result\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"participants\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"oneBet\",\"type\":\"uint256\"}],\"name\":\"ReadyToRoll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"roundID\",\"type\":\"uint256\"}],\"name\":\"Emergency\",\"type\":\"event\"}]","ContractName":"Micro","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000048717ea892f23fb0126f00640e2b18072efd9d2","Library":"","SwarmSource":"bzzr://2f7fdadbf97146ec80caa125814fda42894dfd234787f9bfbb5485d8267d482a"}]}