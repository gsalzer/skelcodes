{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20NoReturn {\r\n    uint256 public decimals;\r\n    string public name;\r\n    string public symbol;\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public;\r\n    function approve(address spender, uint tokens) public;\r\n    function transferFrom(address from, address to, uint tokens) public;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract ERC20Extended is ERC20 {\r\n    uint256 public decimals;\r\n    string public name;\r\n    string public symbol;\r\n\r\n}\r\n\r\ncontract OlympusExchangeAdapterManagerInterface is Ownable {\r\n    function pickExchange(ERC20Extended _token, uint _amount, uint _rate, bool _isBuying) public view returns (bytes32 exchangeId);\r\n    function supportsTradingPair(address _srcAddress, address _destAddress, bytes32 _exchangeId) external view returns(bool supported);\r\n    function getExchangeAdapter(bytes32 _exchangeId) external view returns(address);\r\n    function isValidAdapter(address _adapter) external view returns(bool);\r\n    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount, bytes32 _exchangeId)\r\n        external view returns(uint expectedRate, uint slippageRate);\r\n}\r\n\r\nlibrary Utils {\r\n\r\n    uint  constant PRECISION = (10**18);\r\n    uint  constant MAX_DECIMALS = 18;\r\n\r\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n        if( dstDecimals >= srcDecimals ) {\r\n            require((dstDecimals-srcDecimals) <= MAX_DECIMALS);\r\n            return (srcQty * rate * (10**(dstDecimals-srcDecimals))) / PRECISION;\r\n        } else {\r\n            require((srcDecimals-dstDecimals) <= MAX_DECIMALS);\r\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals-dstDecimals)));\r\n        }\r\n    }\r\n\r\n    // function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n    //     if( srcDecimals >= dstDecimals ) {\r\n    //         require((srcDecimals-dstDecimals) <= MAX_DECIMALS);\r\n    //         return (PRECISION * dstQty * (10**(srcDecimals - dstDecimals))) / rate;\r\n    //     } else {\r\n    //         require((dstDecimals-srcDecimals) <= MAX_DECIMALS);\r\n    //         return (PRECISION * dstQty) / (rate * (10**(dstDecimals - srcDecimals)));\r\n    //     }\r\n    // }\r\n}\r\n\r\ncontract ComponentInterface {\r\n    string public name;\r\n    string public description;\r\n    string public category;\r\n    string public version;\r\n}\r\n\r\ncontract ExchangeInterface is ComponentInterface {\r\n    /*\r\n     * @dev Checks if a trading pair is available\r\n     * For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\r\n     * @param address _sourceAddress The token to sell for the destAddress.\r\n     * @param address _destAddress The token to buy with the source token.\r\n     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\r\n     * @return boolean whether or not the trading pair is supported by this exchange provider\r\n     */\r\n    function supportsTradingPair(address _srcAddress, address _destAddress, bytes32 _exchangeId)\r\n        external view returns(bool supported);\r\n\r\n    /*\r\n     * @dev Buy a single token with ETH.\r\n     * @param ERC20Extended _token The token to buy, should be an ERC20Extended address.\r\n     * @param uint _amount Amount of ETH used to buy this token. Make sure the value sent to this function is the same as the _amount.\r\n     * @param uint _minimumRate The minimum amount of tokens to receive for 1 ETH.\r\n     * @param address _depositAddress The address to send the bought tokens to.\r\n     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\r\n     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here.\r\n     * @return boolean whether or not the trade succeeded.\r\n     */\r\n    function buyToken\r\n        (\r\n        ERC20Extended _token, uint _amount, uint _minimumRate,\r\n        address _depositAddress, bytes32 _exchangeId, address _partnerId\r\n        ) external payable returns(bool success);\r\n\r\n    /*\r\n     * @dev Sell a single token for ETH. Make sure the token is approved beforehand.\r\n     * @param ERC20Extended _token The token to sell, should be an ERC20Extended address.\r\n     * @param uint _amount Amount of tokens to sell.\r\n     * @param uint _minimumRate The minimum amount of ETH to receive for 1 ERC20Extended token.\r\n     * @param address _depositAddress The address to send the bought tokens to.\r\n     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\r\n     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here\r\n     * @return boolean boolean whether or not the trade succeeded.\r\n     */\r\n    function sellToken\r\n        (\r\n        ERC20Extended _token, uint _amount, uint _minimumRate,\r\n        address _depositAddress, bytes32 _exchangeId, address _partnerId\r\n        ) external returns(bool success);\r\n}\r\n\r\ncontract KyberNetworkInterface {\r\n\r\n    function getExpectedRate(ERC20Extended src, ERC20Extended dest, uint srcQty)\r\n        external view returns (uint expectedRate, uint slippageRate);\r\n\r\n    function trade(\r\n        ERC20Extended source,\r\n        uint srcAmount,\r\n        ERC20Extended dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId)\r\n        external payable returns(uint);\r\n}\r\n\r\ncontract OlympusExchangeAdapterInterface is Ownable {\r\n\r\n    function supportsTradingPair(address _srcAddress, address _destAddress)\r\n        external view returns(bool supported);\r\n\r\n    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount)\r\n        external view returns(uint expectedRate, uint slippageRate);\r\n\r\n    function sellToken\r\n        (\r\n        ERC20Extended _token, uint _amount, uint _minimumRate,\r\n        address _depositAddress\r\n        ) external returns(bool success);\r\n\r\n    function buyToken\r\n        (\r\n        ERC20Extended _token, uint _amount, uint _minimumRate,\r\n        address _depositAddress\r\n        ) external payable returns(bool success);\r\n\r\n    function enable() external returns(bool);\r\n    function disable() external returns(bool);\r\n    function isEnabled() external view returns (bool success);\r\n\r\n    function setExchangeDetails(bytes32 _id, bytes32 _name) external returns(bool success);\r\n    function getExchangeDetails() external view returns(bytes32 _name, bool _enabled);\r\n\r\n}\r\n\r\ncontract PriceProviderInterface is ComponentInterface {\r\n    /*\r\n     * @dev Returns the expected price for 1 of sourceAddress.\r\n     * For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\r\n     * @param address _sourceAddress The token to sell for the destAddress.\r\n     * @param address _destAddress The token to buy with the source token.\r\n     * @param uint _amount The amount of tokens which is wanted to buy.\r\n     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\r\n     * @return returns the expected and slippage rate for the specified conversion\r\n     */\r\n    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount, bytes32 _exchangeId)\r\n        external view returns(uint expectedRate, uint slippageRate);\r\n}\r\n\r\ncontract OlympusExchangeInterface is ExchangeInterface, PriceProviderInterface, Ownable {\r\n    /*\r\n     * @dev Buy multiple tokens at once with ETH.\r\n     * @param ERC20Extended[] _tokens The tokens to buy, should be an array of ERC20Extended addresses.\r\n     * @param uint[] _amounts Amount of ETH used to buy this token. Make sure the value sent to this function is the same as the sum of this array.\r\n     * @param uint[] _minimumRates The minimum amount of tokens to receive for 1 ETH.\r\n     * @param address _depositAddress The address to send the bought tokens to.\r\n     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\r\n     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here\r\n     * @return boolean boolean whether or not the trade succeeded.\r\n     */\r\n    function buyTokens\r\n        (\r\n        ERC20Extended[] _tokens, uint[] _amounts, uint[] _minimumRates,\r\n        address _depositAddress, bytes32 _exchangeId, address _partnerId\r\n        ) external payable returns(bool success);\r\n\r\n    /*\r\n     * @dev Sell multiple tokens at once with ETH, make sure all of the tokens are approved to be transferred beforehand with the Olympus Exchange address.\r\n     * @param ERC20Extended[] _tokens The tokens to sell, should be an array of ERC20Extended addresses.\r\n     * @param uint[] _amounts Amount of tokens to sell this token. Make sure the value sent to this function is the same as the sum of this array.\r\n     * @param uint[] _minimumRates The minimum amount of ETH to receive for 1 specified ERC20Extended token.\r\n     * @param address _depositAddress The address to send the bought tokens to.\r\n     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\r\n     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here\r\n     * @return boolean boolean whether or not the trade succeeded.\r\n     */\r\n    function sellTokens\r\n        (\r\n        ERC20Extended[] _tokens, uint[] _amounts, uint[] _minimumRates,\r\n        address _depositAddress, bytes32 _exchangeId, address _partnerId\r\n        ) external returns(bool success);\r\n}\r\n\r\ncontract ComponentContainerInterface {\r\n    mapping (string => address) components;\r\n\r\n    event ComponentUpdated (string _name, address _componentAddress);\r\n\r\n    function setComponent(string _name, address _providerAddress) internal returns (bool success);\r\n    function getComponentByName(string name) public view returns (address);\r\n\r\n}\r\n\r\ncontract DerivativeInterface is ERC20Extended, Ownable, ComponentContainerInterface {\r\n\r\n    enum DerivativeStatus { New, Active, Paused, Closed }\r\n    enum DerivativeType { Index, Fund }\r\n\r\n    string public description;\r\n    string public category;\r\n    string public version;\r\n    DerivativeType public fundType;\r\n\r\n    address[] public tokens;\r\n    DerivativeStatus public status;\r\n\r\n    // invest, withdraw is done in transfer.\r\n    function invest() public payable returns(bool success);\r\n    function changeStatus(DerivativeStatus _status) public returns(bool);\r\n    function getPrice() public view returns(uint);\r\n}\r\n\r\ncontract FeeChargerInterface {\r\n    // TODO: change this to mainnet MOT address before deployment.\r\n    // solhint-disable-next-line\r\n    ERC20Extended public MOT = ERC20Extended(0x263c618480DBe35C300D8d5EcDA19bbB986AcaeD);\r\n    // kovan MOT: 0x41Dee9F481a1d2AA74a3f1d0958C1dB6107c686A\r\n}\r\n\r\ncontract FeeCharger is Ownable, FeeChargerInterface {\r\n    using SafeMath for uint256;\r\n\r\n    FeeMode public feeMode = FeeMode.ByCalls;\r\n    uint public feePercentage = 0;\r\n    uint public feeAmount = 0;\r\n    uint constant public FEE_CHARGER_DENOMINATOR = 10000;\r\n    address private olympusWallet = 0x09227deaeE08a5Ba9D6Eb057F922aDfAd191c36c;\r\n    bool private isPaying = false;\r\n\r\n    enum FeeMode {\r\n        ByTransactionAmount,\r\n        ByCalls\r\n    }\r\n\r\n    modifier feePayable(uint _amount) {\r\n      uint fee = calculateFee(_amount);\r\n      DerivativeInterface derivative = DerivativeInterface(msg.sender);\r\n      // take money directly from the derivative.\r\n      require(MOT.balanceOf(address(derivative)) >= fee);\r\n      require(MOT.allowance(address(derivative), address(this)) >= fee);\r\n      _;\r\n    }\r\n\r\n    function calculateFee(uint _amount) public view returns (uint amount) {\r\n        uint fee;\r\n        if (feeMode == FeeMode.ByTransactionAmount) {\r\n            fee = _amount * feePercentage / FEE_CHARGER_DENOMINATOR;\r\n        } else if (feeMode == FeeMode.ByCalls) {\r\n            fee = feeAmount;\r\n        } else {\r\n          revert(\"Unsupported fee mode.\");\r\n        }\r\n\r\n        return fee;\r\n    }    \r\n\r\n    function adjustFeeMode(FeeMode _newMode) external onlyOwner returns (bool success) {\r\n        feeMode = _newMode;\r\n        return true;\r\n    }\r\n\r\n    function adjustFeeAmount(uint _newAmount) external onlyOwner returns (bool success) {\r\n        feeAmount = _newAmount;\r\n        return true;\r\n    }    \r\n\r\n    function adjustFeePercentage(uint _newPercentage) external onlyOwner returns (bool success) {\r\n        require(_newPercentage <= FEE_CHARGER_DENOMINATOR);\r\n        feePercentage = _newPercentage;\r\n        return true;\r\n    }    \r\n\r\n    function setWalletId(address _newWallet) external onlyOwner returns (bool success) {\r\n        require(_newWallet != 0x0);\r\n        olympusWallet = _newWallet;\r\n        return true;\r\n    }\r\n\r\n    function setMotAddress(address _motAddress) external onlyOwner returns (bool success) {\r\n        require(_motAddress != 0x0);\r\n        require(_motAddress != address(MOT));\r\n        MOT = ERC20Extended(_motAddress);\r\n        // this is only and will always be MOT.\r\n        require(keccak256(abi.encodePacked(MOT.symbol())) == keccak256(abi.encodePacked(\"MOT\")));\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /*\r\n     * @dev Pay the fee for the call / transaction.\r\n     * Depending on the component itself, the fee is paid differently.\r\n     * @param uint _amountinMot The base amount in MOT, calculation should be one outside. \r\n     * this is only used when the fee mode is by transaction amount. leave it to zero if fee mode is\r\n     * by calls.\r\n     * @return boolean whether or not the fee is paid.\r\n     */\r\n    function payFee(uint _amountInMOT) internal feePayable(calculateFee(_amountInMOT)) returns (bool success) {\r\n        uint _feeAmount = calculateFee(_amountInMOT);\r\n\r\n        DerivativeInterface derivative = DerivativeInterface(msg.sender);\r\n\r\n        uint balanceBefore = MOT.balanceOf(olympusWallet);\r\n        require(!isPaying);\r\n        isPaying = true;\r\n        MOT.transferFrom(address(derivative), olympusWallet, _feeAmount);\r\n        isPaying = false;\r\n        uint balanceAfter = MOT.balanceOf(olympusWallet);\r\n\r\n        require(balanceAfter == balanceBefore + _feeAmount);   \r\n        return true;     \r\n    }        \r\n}\r\n\r\ncontract ExchangeProvider is FeeCharger, OlympusExchangeInterface {\r\n    using SafeMath for uint256;\r\n    string public name = \"OlympusExchangeProvider\";\r\n    string public description =\r\n    \"Exchange provider of Olympus Labs, which additionally supports buy\\and sellTokens for multiple tokens at the same time\";\r\n    string public category = \"exchange\";\r\n    string public version = \"v1.0\";\r\n    ERC20Extended private constant ETH  = ERC20Extended(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    OlympusExchangeAdapterManagerInterface private exchangeAdapterManager;\r\n\r\n    constructor(address _exchangeManager) public {\r\n        exchangeAdapterManager = OlympusExchangeAdapterManagerInterface(_exchangeManager);\r\n        feeMode = FeeMode.ByTransactionAmount;\r\n    }\r\n\r\n    modifier checkAllowance(ERC20Extended _token, uint _amount) {\r\n        require(_token.allowance(msg.sender, address(this)) >= _amount, \"Not enough tokens approved\");\r\n        _;\r\n    }\r\n\r\n    function setExchangeAdapterManager(address _exchangeManager) external onlyOwner {\r\n        exchangeAdapterManager = OlympusExchangeAdapterManagerInterface(_exchangeManager);\r\n    }\r\n\r\n    function buyToken\r\n        (\r\n        ERC20Extended _token, uint _amount, uint _minimumRate,\r\n        address _depositAddress, bytes32 _exchangeId, address /* _partnerId */\r\n        ) external payable returns(bool success) {\r\n\r\n        require(msg.value == _amount);\r\n\r\n        OlympusExchangeAdapterInterface adapter;\r\n        // solhint-disable-next-line\r\n        bytes32 exchangeId = _exchangeId == \"\" ? exchangeAdapterManager.pickExchange(_token, _amount, _minimumRate, true) : _exchangeId;\r\n        if(exchangeId == 0){\r\n            revert(\"No suitable exchange found\");\r\n        }\r\n\r\n        require(payFee(msg.value * getMotPrice(exchangeId) / 10 ** 18));\r\n        adapter = OlympusExchangeAdapterInterface(exchangeAdapterManager.getExchangeAdapter(exchangeId));\r\n        require(\r\n            adapter.buyToken.value(msg.value)(\r\n                _token,\r\n                _amount,\r\n                _minimumRate,\r\n                _depositAddress)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function sellToken\r\n        (\r\n        ERC20Extended _token, uint _amount, uint _minimumRate,\r\n        address _depositAddress, bytes32 _exchangeId, address /* _partnerId */\r\n        ) checkAllowance(_token, _amount) external returns(bool success) {\r\n\r\n        OlympusExchangeAdapterInterface adapter;\r\n        bytes32 exchangeId = _exchangeId == \"\" ? exchangeAdapterManager.pickExchange(_token, _amount, _minimumRate, false) : _exchangeId;\r\n        if(exchangeId == 0){\r\n            revert(\"No suitable exchange found\");\r\n        }\r\n\r\n        uint tokenPrice;\r\n        (tokenPrice,) = exchangeAdapterManager.getPrice(_token, ETH, _amount, exchangeId);\r\n        require(payFee(tokenPrice  * _amount * getMotPrice(exchangeId) / 10 ** _token.decimals() / 10 ** 18));\r\n\r\n        adapter = OlympusExchangeAdapterInterface(exchangeAdapterManager.getExchangeAdapter(exchangeId));\r\n\r\n        ERC20NoReturn(_token).transferFrom(msg.sender, address(adapter), _amount);\r\n\r\n        require(\r\n            adapter.sellToken(\r\n                _token,\r\n                _amount,\r\n                _minimumRate,\r\n                _depositAddress)\r\n            );\r\n        return true;\r\n    }\r\n\r\n    function getMotPrice(bytes32 _exchangeId) private view returns (uint price) {\r\n        (price,) = exchangeAdapterManager.getPrice(ETH, MOT, msg.value, _exchangeId);\r\n    }\r\n\r\n    function buyTokens\r\n        (\r\n        ERC20Extended[] _tokens, uint[] _amounts, uint[] _minimumRates,\r\n        address _depositAddress, bytes32 _exchangeId, address /* _partnerId */\r\n        ) external payable returns(bool success) {\r\n        require(_tokens.length == _amounts.length && _amounts.length == _minimumRates.length, \"Arrays are not the same lengths\");\r\n        require(payFee(msg.value * getMotPrice(_exchangeId) / 10 ** 18));\r\n        uint totalValue;\r\n        uint i;\r\n        for(i = 0; i < _amounts.length; i++ ) {\r\n            totalValue += _amounts[i];\r\n        }\r\n        require(totalValue == msg.value, \"msg.value is not the same as total value\");\r\n\r\n        for (i = 0; i < _tokens.length; i++ ) {\r\n            bytes32 exchangeId = _exchangeId == \"\" ?\r\n            exchangeAdapterManager.pickExchange(_tokens[i], _amounts[i], _minimumRates[i], true) : _exchangeId;\r\n            if (exchangeId == 0) {\r\n                revert(\"No suitable exchange found\");\r\n            }\r\n            require(\r\n                OlympusExchangeAdapterInterface(exchangeAdapterManager.getExchangeAdapter(exchangeId)).buyToken.value(_amounts[i])(\r\n                    _tokens[i],\r\n                    _amounts[i],\r\n                    _minimumRates[i],\r\n                    _depositAddress)\r\n            );\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function sellTokens\r\n        (\r\n        ERC20Extended[] _tokens, uint[] _amounts, uint[] _minimumRates,\r\n        address _depositAddress, bytes32 _exchangeId, address /* _partnerId */\r\n        ) external returns(bool success) {\r\n        require(_tokens.length == _amounts.length && _amounts.length == _minimumRates.length, \"Arrays are not the same lengths\");\r\n        OlympusExchangeAdapterInterface adapter;\r\n\r\n        uint[] memory prices = new uint[](3); // 0 tokenPrice, 1 MOT price, 3 totalValueInMOT\r\n        for (uint i = 0; i < _tokens.length; i++ ) {\r\n            bytes32 exchangeId = _exchangeId == bytes32(\"\") ?\r\n            exchangeAdapterManager.pickExchange(_tokens[i], _amounts[i], _minimumRates[i], false) : _exchangeId;\r\n            if(exchangeId == 0){\r\n                revert(\"No suitable exchange found\");\r\n            }\r\n\r\n            (prices[0],) = exchangeAdapterManager.getPrice(_tokens[i], ETH, _amounts[i], exchangeId);\r\n            (prices[1],) = exchangeAdapterManager.getPrice(ETH, MOT, prices[0] * _amounts[i], exchangeId);\r\n            prices[2] += prices[0] * _amounts[i] * prices[1] / 10 ** _tokens[i].decimals() / 10 ** 18;\r\n\r\n            adapter = OlympusExchangeAdapterInterface(exchangeAdapterManager.getExchangeAdapter(exchangeId));\r\n            require(_tokens[i].allowance(msg.sender, address(this)) >= _amounts[i], \"Not enough tokens approved\");\r\n            ERC20NoReturn(_tokens[i]).transferFrom(msg.sender, address(adapter), _amounts[i]);\r\n            require(\r\n                adapter.sellToken(\r\n                    _tokens[i],\r\n                    _amounts[i],\r\n                    _minimumRates[i],\r\n                    _depositAddress)\r\n            );\r\n        }\r\n\r\n        require(payFee(prices[2]));\r\n\r\n        return true;\r\n    }\r\n\r\n    function supportsTradingPair(address _srcAddress, address _destAddress, bytes32 _exchangeId) external view returns (bool){\r\n        return exchangeAdapterManager.supportsTradingPair(_srcAddress, _destAddress, _exchangeId);\r\n    }\r\n\r\n    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount, bytes32 _exchangeId)\r\n        external view returns(uint expectedRate, uint slippageRate) {\r\n        return exchangeAdapterManager.getPrice(_sourceAddress, _destAddress, _amount, _exchangeId);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newMode\",\"type\":\"uint8\"}],\"name\":\"adjustFeeMode\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minimumRate\",\"type\":\"uint256\"},{\"name\":\"_depositAddress\",\"type\":\"address\"},{\"name\":\"_exchangeId\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_srcAddress\",\"type\":\"address\"},{\"name\":\"_destAddress\",\"type\":\"address\"},{\"name\":\"_exchangeId\",\"type\":\"bytes32\"}],\"name\":\"supportsTradingPair\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPercentage\",\"type\":\"uint256\"}],\"name\":\"adjustFeePercentage\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeManager\",\"type\":\"address\"}],\"name\":\"setExchangeAdapterManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setWalletId\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sourceAddress\",\"type\":\"address\"},{\"name\":\"_destAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_exchangeId\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"expectedRate\",\"type\":\"uint256\"},{\"name\":\"slippageRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minimumRate\",\"type\":\"uint256\"},{\"name\":\"_depositAddress\",\"type\":\"address\"},{\"name\":\"_exchangeId\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"adjustFeeAmount\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeMode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_minimumRates\",\"type\":\"uint256[]\"},{\"name\":\"_depositAddress\",\"type\":\"address\"},{\"name\":\"_exchangeId\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_CHARGER_DENOMINATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MOT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_motAddress\",\"type\":\"address\"}],\"name\":\"setMotAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"category\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_minimumRates\",\"type\":\"uint256[]\"},{\"name\":\"_depositAddress\",\"type\":\"address\"},{\"name\":\"_exchangeId\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_exchangeManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ExchangeProvider","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005a54a48e453fcf0c6bdfecd992640e5c09ef1d39","Library":"","SwarmSource":"bzzr://1f13d8b8beb5dff57f211ce8863f57061e36b0218cf714ef95a6aca1d9257fe1"}]}