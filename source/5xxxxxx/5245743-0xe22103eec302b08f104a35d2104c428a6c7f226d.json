{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.20;\r\n\r\ncontract IPXTokenBase {\r\n    uint256                                            _supply;\r\n    mapping (address => uint256)                       _balances;\r\n    \r\n    event Transfer( address indexed from, address indexed to, uint256 value);\r\n\r\n    function IPXTokenBase() public {    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _supply;\r\n    }\r\n    function balanceOf(address src) public view returns (uint256) {\r\n        return _balances[src];\r\n    }\r\n    \r\n    function transfer(address dst, uint256 wad) public returns (bool) {\r\n        require(_balances[msg.sender] >= wad);\r\n        \r\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\r\n        _balances[dst] = add(_balances[dst], wad);\r\n        \r\n        Transfer(msg.sender, dst, wad);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function add(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x + y;\r\n        require(z >= x && z>=y);\r\n        return z;\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x - y;\r\n        require(x >= y && z <= x);\r\n        return z;\r\n    }\r\n}\r\n\r\ncontract IPXToken is IPXTokenBase {\r\n    string  public  symbol = \"IPX\";\r\n    string  public name = \"InterPlanetary X\";\r\n    uint256  public  decimals = 18; \r\n    uint256 public freezedValue = 4*(10**8)*(10**18);\r\n    uint256 public eachUnfreezeValue = 4*(10**7)*(10**18);\r\n    address public owner;\r\n    address public freezeAddress;\r\n    bool public freezed;\r\n\r\n    struct FreezeStruct {\r\n        uint256 unfreezeTime;\r\n        uint idx;\r\n    }\r\n\r\n    FreezeStruct[] public unfreezeTimeMap;\r\n\r\n    function IPXToken() public {\r\n        _supply = 2*(10**9)*(10**18);\r\n        _balances[msg.sender] = _supply;\r\n        owner = msg.sender;\r\n\r\n        unfreezeTimeMap.push(FreezeStruct({unfreezeTime:1533052800, idx: 1})); // Aug/01/2018\r\n        unfreezeTimeMap.push(FreezeStruct({unfreezeTime:1535731200, idx: 2})); // Sep/01/2018\r\n        unfreezeTimeMap.push(FreezeStruct({unfreezeTime:1538323200, idx: 3})); // Oct/01/2018\r\n        unfreezeTimeMap.push(FreezeStruct({unfreezeTime:1541001600, idx: 4})); // Nov/01/2018\r\n        unfreezeTimeMap.push(FreezeStruct({unfreezeTime:1543593600, idx: 5})); // Dec/01/2018\r\n        unfreezeTimeMap.push(FreezeStruct({unfreezeTime:1546272000, idx: 6})); // Jan/01/2019\r\n        unfreezeTimeMap.push(FreezeStruct({unfreezeTime:1548950400, idx: 7})); // Feb/01/2019\r\n        unfreezeTimeMap.push(FreezeStruct({unfreezeTime:1551369600, idx: 8})); // Mar/01/2019\r\n        unfreezeTimeMap.push(FreezeStruct({unfreezeTime:1554048000, idx: 9})); // Apr/01/2019\r\n        unfreezeTimeMap.push(FreezeStruct({unfreezeTime:1556640000, idx: 10})); // May/01/2019\r\n    }\r\n\r\n    function transfer(address dst, uint256 wad) public returns (bool) {\r\n        assert(checkFreezeValue(wad));\r\n        return super.transfer(dst, wad);\r\n    }\r\n\r\n    function checkFreezeValue(uint256 wad) internal view returns(bool) {\r\n        if ( msg.sender == freezeAddress ) {\r\n            for ( uint i = 0; i<unfreezeTimeMap.length; i++ ) {\r\n                uint idx = unfreezeTimeMap[i].idx;\r\n                uint256 unfreezeTime = unfreezeTimeMap[i].unfreezeTime;\r\n                if ( now<unfreezeTime ) {\r\n                    uint256 shouldFreezedValue = freezedValue - (idx-1)*eachUnfreezeValue;\r\n                    if (sub(_balances[msg.sender], wad) < shouldFreezedValue) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function freeze(address freezeAddr) public returns (bool) {\r\n        require(msg.sender == owner);\r\n        require(freezed == false);\r\n        freezeAddress = freezeAddr;\r\n        freezed = true;\r\n        return super.transfer(freezeAddr, freezedValue);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unfreezeTimeMap\",\"outputs\":[{\"name\":\"unfreezeTime\",\"type\":\"uint256\"},{\"name\":\"idx\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezedValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"freezeAddr\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eachUnfreezeValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"IPXToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://663c719718fc271135b6003fa471fe2b0b4324f630b0d579bb425cf5f461176a"}]}