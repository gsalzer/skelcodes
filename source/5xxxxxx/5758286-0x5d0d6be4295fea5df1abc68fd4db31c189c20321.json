{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract BaseGame {\r\n    using SafeMath for uint256;\r\n\r\n    string public officialGameUrl;\r\n    string public gameName = \"GameSicBo\";\r\n    uint public gameType = 2003;\r\n\r\n    function depositToken(uint256 _amount) public;\r\n    function withdrawAllToken() public;\r\n    function withdrawToken(uint256 _amount) public;\r\n    mapping (address => uint256) public userTokenOf;\r\n\r\n\r\n    address public currentBanker;\r\n    uint public bankerBeginTime;\r\n    uint public bankerEndTime;\r\n\r\n\r\n    function canSetBanker() view public returns (bool _result);\r\n\r\n    function setBanker(address _banker, uint256 _beginTime, uint256 _endTime) public returns(bool _result);\r\n}\r\n\r\ninterface IDonQuixoteToken{\r\n    function withhold(address _player,  uint256 _betAmount) external returns (bool _result);\r\n    function transfer(address _to, uint256 _value) external;\r\n\r\n    function sendGameGift(address _player) external returns (bool _result);\r\n    function balanceOf(address _user) constant  external returns (uint256 _balance);\r\n    function logPlaying(address _player) external returns (bool _result);\r\n}\r\n\r\ncontract Base is  BaseGame{\r\n    uint public createTime = now;\r\n    address public owner;\r\n\r\n    IDonQuixoteToken public DonQuixoteToken;\r\n\r\n    function Base() public {\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _newOwner)  public  onlyOwner {\r\n        require(_newOwner != 0x0);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    bool public globalLocked = false;\r\n\r\n    function lock() internal {\r\n        require(!globalLocked);\r\n        globalLocked = true;\r\n    }\r\n\r\n    function unLock() internal {\r\n        require(globalLocked);\r\n        globalLocked = false;\r\n    }\r\n\r\n    function setLock()  public onlyOwner{\r\n        globalLocked = false;\r\n    }\r\n\r\n    function tokenOf(address _user) view public returns(uint256 _result){\r\n        _result = DonQuixoteToken.balanceOf(_user);\r\n    }\r\n\r\n    uint public currentEventId = 1;\r\n\r\n    function getEventId() internal returns(uint _result) {\r\n        _result = currentEventId;\r\n        currentEventId ++;\r\n    }\r\n\r\n    function setOfficialGameUrl(string _newOfficialGameUrl) public onlyOwner{\r\n        officialGameUrl = _newOfficialGameUrl;\r\n    }\r\n\r\n    function depositToken(uint256 _amount) public {\r\n        lock();\r\n        _depositToken(msg.sender, _amount);\r\n        unLock();\r\n    }\r\n\r\n    function _depositToken(address _to, uint256 _amount) internal {\r\n        require(_to != 0x0);\r\n        DonQuixoteToken.withhold(_to, _amount);\r\n        userTokenOf[_to] = userTokenOf[_to].add(_amount);\r\n    }\r\n\r\n    function withdrawAllToken() public {\r\n        lock();\r\n        uint256 _amount = userTokenOf[msg.sender];\r\n        _withdrawToken(msg.sender, _amount);\r\n        unLock();\r\n    }\r\n\r\n    function withdrawToken(uint256 _amount) public {\r\n        lock();\r\n        _withdrawToken(msg.sender, _amount);\r\n        unLock();\r\n    }\r\n\r\n    function _withdrawToken(address _from, uint256 _amount) internal {\r\n        require(_from != 0x0);\r\n        require(_amount > 0 && _amount <= userTokenOf[_from]);\r\n        userTokenOf[_from] = userTokenOf[_from].sub(_amount);\r\n        DonQuixoteToken.transfer(_from, _amount);\r\n    }\r\n}\r\n\r\n\r\ncontract GameSicBo is Base\r\n{\r\n\r\n\r\n    uint public lastBlockNumber = 0;\r\n\r\n\r\n    uint public gameID = 0;\r\n    uint  public gameBeginTime;\r\n    uint  public gameEndTime;\r\n    uint public gameTime;\r\n    uint256 public gameMaxBetAmount;\r\n    uint256 public gameMinBetAmount;\r\n\r\n    bool public gameOver = true;\r\n\r\n\r\n    bytes32 public gameEncryptedText;\r\n    uint public gameResult;\r\n    string public gameRandon1;\r\n    string public constant gameRandon2 = 'ChinasNewGovernmentBracesforTrump';\r\n    bool public betInfoIsLocked = false;\r\n\r\n\r\n    uint public playNo = 1;\r\n    uint public gameBeginPlayNo;\r\n    uint public gameEndPlayNo;\r\n    uint public nextRewardPlayNo;\r\n    uint public currentRewardNum = 100;\r\n\r\n\r\n\r\n    function GameSicBo(string _gameName,uint  _gameTime, uint256 _gameMinBetAmount, uint256 _gameMaxBetAmount,address _DonQuixoteToken) public {\r\n        require(_gameTime > 0);\r\n        require(_gameMinBetAmount >= 0);\r\n        require(_gameMaxBetAmount > 0);\r\n        require(_gameMaxBetAmount >= _gameMinBetAmount);\r\n\r\n\r\n        gameMinBetAmount = _gameMinBetAmount;\r\n        gameMaxBetAmount = _gameMaxBetAmount;\r\n        gameTime = _gameTime;\r\n\r\n        require(_DonQuixoteToken != 0x0);\r\n        DonQuixoteToken = IDonQuixoteToken(_DonQuixoteToken);\r\n\r\n        owner = msg.sender;\r\n        gameName = _gameName;\r\n    }\r\n\r\n\r\n\r\n    address public auction;\r\n\r\n    function setAuction(address _newAuction) public onlyOwner{\r\n        auction = _newAuction;\r\n    }\r\n\r\n    modifier onlyAuction {\r\n        require(msg.sender == auction);\r\n        _;\r\n    }\r\n\r\n    modifier onlyBanker {\r\n        require(msg.sender == currentBanker);\r\n        require(bankerBeginTime <= now);\r\n        require(now < bankerEndTime);\r\n        _;\r\n    }\r\n\r\n    function canSetBanker() public view returns (bool _result){\r\n        _result =  bankerEndTime <= now && gameOver;\r\n    }\r\n\r\n\r\n\r\n    event OnSetNewBanker(address _caller, address _banker, uint _beginTime, uint _endTime, uint _code,uint _eventId,uint _time);\r\n\r\n    function setBanker(address _banker, uint _beginTime, uint _endTime) public onlyAuction returns(bool _result)\r\n    {\r\n        _result = false;\r\n        require(_banker != 0x0);\r\n\r\n\r\n        if(now < bankerEndTime){\r\n\r\n            emit OnSetNewBanker(msg.sender, _banker,  _beginTime,  _endTime, 1 ,getEventId(),now);\r\n            return;\r\n        }\r\n\r\n\r\n        if(!gameOver){\r\n\r\n            emit OnSetNewBanker(msg.sender, _banker,  _beginTime,  _endTime, 2 ,getEventId(),now);\r\n            return;\r\n        }\r\n\r\n\r\n        if(_beginTime > now){\r\n\r\n            emit OnSetNewBanker(msg.sender, _banker,  _beginTime,  _endTime, 3 ,getEventId(),now);\r\n            return;\r\n        }\r\n\r\n\r\n        if(_endTime <= now){\r\n\r\n            emit OnSetNewBanker(msg.sender, _banker,  _beginTime,  _endTime, 4 ,getEventId(),now);\r\n            return;\r\n        }\r\n\r\n        currentBanker = _banker;\r\n        bankerBeginTime = _beginTime;\r\n        bankerEndTime = _endTime;\r\n\r\n        emit OnSetNewBanker(msg.sender, _banker,  _beginTime,  _endTime, 0, getEventId(),now);\r\n        _result = true;\r\n\r\n        if(now < donGameGiftLineTime){\r\n            DonQuixoteToken.logPlaying(_banker);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function setCurrentRewardNum(uint _currentRewardNum) public onlyBanker{\r\n        currentRewardNum = _currentRewardNum ;\r\n    }\r\n\r\n    event OnNewGame(uint _gameID, address _banker, bytes32 _gameEncryptedText, uint  _gameBeginTime,  uint  _gameEndTime, uint _eventId,uint _time);\r\n\r\n    function newGame(bytes32 _gameEncryptedText) public onlyBanker returns(bool _result)\r\n    {\r\n        _result = _newGame( _gameEncryptedText);\r\n    }\r\n\r\n    function _newGame(bytes32 _gameEncryptedText) private  returns(bool _result)\r\n    {\r\n        _result = false;\r\n        require(gameOver);\r\n        require(now > bankerBeginTime);\r\n        require(now + gameTime <= bankerEndTime);\r\n\r\n        gameID++;\r\n\r\n        gameEncryptedText = _gameEncryptedText;\r\n        gameRandon1 = '';\r\n        gameBeginTime = now;\r\n        gameEndTime = now + gameTime;\r\n        gameBeginPlayNo = playNo;\r\n        nextRewardPlayNo = playNo;\r\n        gameEndPlayNo = 0;\r\n        gameResult = 0;\r\n        gameOver = false;\r\n\r\n        emit OnNewGame(gameID, msg.sender, _gameEncryptedText,   now,  now + gameTime, getEventId(),now);\r\n        _result = true;\r\n    }\r\n\r\n    struct betInfo\r\n    {\r\n\r\n        address Player;\r\n        uint BetType;\r\n        uint256 BetAmount;\r\n        uint Odds;\r\n        uint SmallNum;\r\n        uint BigNum;\r\n        bool IsReturnAward;\r\n        bool IsWin ;\r\n        uint BetTime;\r\n    }\r\n\r\n    mapping (uint => betInfo) public playerBetInfoOf;\r\n\r\n    event OnPlay(address indexed _player,uint indexed _gameID, uint indexed _playNo, uint _eventId,uint _time, uint _smallNum,uint _bigNum, uint256 _betAmount, uint _betType);\r\n\r\n    function _play(uint _smallNum,uint _bigNum,  uint256 _betAmount, uint _odds,uint _betType) private  returns(bool _result){\r\n        _result = false;\r\n\r\n        uint bankerAmount = _betAmount.mul(_odds);\r\n        require(userTokenOf[currentBanker] >= bankerAmount);\r\n\r\n        if(userTokenOf[msg.sender] < _betAmount){\r\n            depositToken(_betAmount.sub(userTokenOf[msg.sender]));\r\n        }\r\n\r\n        betInfo memory bi = betInfo({\r\n            Player :  msg.sender,\r\n            SmallNum : _smallNum,\r\n            BigNum : _bigNum,\r\n            BetAmount : _betAmount,\r\n            BetType : _betType,\r\n            Odds : _odds,\r\n            IsReturnAward: false,\r\n            IsWin :  false ,\r\n            BetTime : now\r\n            });\r\n        playerBetInfoOf[playNo] = bi;\r\n        userTokenOf[msg.sender] = userTokenOf[msg.sender].sub(_betAmount);\r\n        userTokenOf[this] = userTokenOf[this].add(_betAmount);\r\n        userTokenOf[currentBanker] = userTokenOf[currentBanker].sub(bankerAmount);\r\n        userTokenOf[this] = userTokenOf[this].add(bankerAmount);\r\n\r\n        emit OnPlay(msg.sender, gameID, playNo ,getEventId(), now, _smallNum,_bigNum,  _betAmount, _betType);\r\n\r\n        lastBlockNumber = block.number;\r\n        playNo++;\r\n\r\n        if(now < donGameGiftLineTime){\r\n            DonQuixoteToken.logPlaying(msg.sender);\r\n        }\r\n        _result = true;\r\n    }\r\n\r\n    uint public donGameGiftLineTime =  now + 90 days;\r\n\r\n\r\n\r\n\r\n    modifier playable(uint betAmount) {\r\n        require(!gameOver);\r\n        require(!betInfoIsLocked);\r\n        require(now < gameEndTime);\r\n\r\n        require(msg.sender != currentBanker);\r\n        require(betAmount >= gameMinBetAmount);\r\n        _;\r\n    }\r\n\r\n    function playBatch(uint[] _betNums,uint256[] _betAmounts) public returns(bool _result){\r\n        _result = false;\r\n        require(_betNums.length == _betAmounts.length);\r\n        require (_betNums.length <= 10);\r\n        _result = true ;\r\n        for(uint i = 0; i < _betNums.length && _result; i++ ){\r\n            uint _betNum = _betNums[i];\r\n            uint256 _betAmount = _betAmounts[i];\r\n            if(_betAmount < gameMinBetAmount){\r\n                continue ;\r\n            }\r\n            if (_betAmount > gameMaxBetAmount){\r\n                _betAmount = gameMaxBetAmount;\r\n            }\r\n            if(_betNum > 0 && _betNum <= 2){\r\n                _result = playBigOrSmall(_betNum, _betAmount);\r\n            }else if(_betNum == 3){\r\n                _result = playAnyTriples(_betAmount);\r\n            }else if(_betNum <= 9){\r\n                _result = playSpecificTriples(_betNum.sub(3), _betAmount);\r\n            }else if(_betNum <= 15){\r\n                _result = playSpecificDoubles(_betNum.sub(9),_betAmount);\r\n            }else if(_betNum <= 29){\r\n                _result = playThreeDiceTotal(_betNum.sub(12), _betAmount);\r\n            }else if(_betNum <= 44){\r\n                if(_betNum <= 34){\r\n                    uint _betMinNum = 1;\r\n                    uint _betMaxNum = _betNum.sub(28);\r\n                }else if(_betNum <= 38){\r\n                    _betMinNum = 2;\r\n                    _betMaxNum = _betNum.sub(32);\r\n                }else if(_betNum <= 41){\r\n                    _betMinNum = 3;\r\n                    _betMaxNum = _betNum.sub(35);\r\n                }else if(_betNum <= 43){\r\n                    _betMinNum = 4;\r\n                    _betMaxNum = _betNum.sub(37);\r\n                }else{\r\n                    _betMinNum = 5;\r\n                    _betMaxNum = 6;\r\n                }\r\n                _result = playDiceCombinations(_betMinNum,_betMaxNum, _betAmount);\r\n            }else if(_betNum <= 50){\r\n                _result = playSingleDiceBet(_betNum.sub(44), _betAmount);\r\n            }\r\n        }\r\n        _result = true;\r\n    }\r\n\r\n    function playBigOrSmall(uint _betNum, uint256 _betAmount) public playable(_betAmount)  returns(bool _result){\r\n        require(_betNum ==1 || _betNum == 2);\r\n        if (_betAmount > gameMaxBetAmount){\r\n            _betAmount = gameMaxBetAmount;\r\n        }\r\n        _result = _play(_betNum,0, _betAmount,1,1);\r\n    }\r\n\r\n    function playAnyTriples(uint256 _betAmount) public playable(_betAmount)  returns(bool _result){\r\n        if (_betAmount > gameMaxBetAmount){\r\n            _betAmount = gameMaxBetAmount;\r\n        }\r\n        _result = _play(0,0, _betAmount,24,2);\r\n    }\r\n\r\n    function playSpecificTriples(uint _betNum, uint256 _betAmount) public playable(_betAmount)  returns(bool _result){\r\n        require(_betNum >= 1 && _betNum <=6);\r\n        if (_betAmount > gameMaxBetAmount){\r\n            _betAmount = gameMaxBetAmount;\r\n        }\r\n        _result = _play(_betNum,0, _betAmount,150,3);\r\n    }\r\n\r\n    function playSpecificDoubles(uint _betNum, uint256 _betAmount) public playable(_betAmount) returns(bool _result){\r\n        require(_betNum >= 1 && _betNum <=6);\r\n        if (_betAmount > gameMaxBetAmount){\r\n            _betAmount = gameMaxBetAmount;\r\n        }\r\n        _result = _play(_betNum,0, _betAmount,8,4);\r\n    }\r\n\r\n    function playThreeDiceTotal(uint _betNum,uint256 _betAmount) public playable(_betAmount) returns(bool _result){\r\n        require(_betNum >= 4 && _betNum <=17);\r\n        if (_betAmount > gameMaxBetAmount){\r\n            _betAmount = gameMaxBetAmount;\r\n        }\r\n        uint _odds = 0;\r\n        if(_betNum == 4 || _betNum == 17){\r\n            _odds = 50;\r\n        }else if(_betNum == 5 || _betNum == 16){\r\n            _odds = 18;\r\n        }else if(_betNum == 6 || _betNum == 15){\r\n            _odds = 14;\r\n        }else if(_betNum == 7 || _betNum == 14){\r\n            _odds = 12;\r\n        }else if(_betNum == 8 || _betNum == 13){\r\n            _odds = 8;\r\n        }else{\r\n            _odds = 6;\r\n        }\r\n        _result = _play(_betNum,0, _betAmount,_odds,5);\r\n    }\r\n\r\n    function playDiceCombinations(uint _smallNum,uint _bigNum,uint256 _betAmount) public playable(_betAmount) returns(bool _result){\r\n        require(_smallNum < _bigNum);\r\n        require(_smallNum >= 1 && _smallNum <=5);\r\n        require(_bigNum >= 2 && _bigNum <=6);\r\n        if (_betAmount > gameMaxBetAmount){\r\n            _betAmount = gameMaxBetAmount;\r\n        }\r\n        _result = _play(_smallNum,_bigNum, _betAmount,5,6);\r\n    }\r\n\r\n    function playSingleDiceBet(uint _betNum,uint256 _betAmount) public playable(_betAmount) returns(bool _result){\r\n        require(_betNum >= 1 && _betNum <=6);\r\n        if (_betAmount > gameMaxBetAmount){\r\n            _betAmount = gameMaxBetAmount;\r\n        }\r\n        _result = _play(_betNum,0, _betAmount,3,7);\r\n    }\r\n\r\n    function lockBetInfo() public onlyBanker returns (bool _result) {\r\n        require(!gameOver);\r\n        require(now < gameEndTime);\r\n        require(!betInfoIsLocked);\r\n        betInfoIsLocked = true;\r\n        _result = true;\r\n    }\r\n\r\n    function uintToString(uint v) private pure returns (string) {\r\n        uint maxlength = 3;\r\n        bytes memory reversed = new bytes(maxlength);\r\n        uint i = 0;\r\n        while (v != 0) {\r\n            uint remainder = v % 10;\r\n            v = v / 10;\r\n            reversed[i++] = byte(48 + remainder);\r\n        }\r\n        bytes memory s = new bytes(i);\r\n        for (uint j = 0; j < i; j++) {\r\n            s[j] = reversed[i - j - 1];\r\n        }\r\n        string memory str = string(s);\r\n        return str;\r\n    }\r\n\r\n\r\n    event OnOpenGameResult(uint indexed _gameID, bool indexed _result, string _remark, address _banker,uint _gameResult, string _r1,uint _eventId,uint _time);\r\n\r\n    function openGameResult(uint _minGameResult,uint _midGameResult,uint _maxGameResult, string _r1) public onlyBanker  returns(bool _result){\r\n        _result =  _openGameResult( _minGameResult,_midGameResult,_maxGameResult,_r1);\r\n    }\r\n\r\n    function _playRealOdds(uint _betType,uint _odds,uint _smallNuml,uint _bigNum,uint _minGameResult,uint _midGameResult,uint _maxGameResult) private  pure returns(uint _realOdds){\r\n\r\n\r\n        _realOdds = 0;\r\n        if(_betType == 1){\r\n            bool _isAnyTriple = (_minGameResult == _midGameResult && _midGameResult == _maxGameResult);\r\n\r\n            if(_isAnyTriple){\r\n                return 0;\r\n            }\r\n            uint _threeDiceTotal = _minGameResult.add(_midGameResult).add(_maxGameResult);\r\n            uint _bigOrSmall = _threeDiceTotal >= 11 ? 2 : 1 ;\r\n            if(_bigOrSmall == _smallNuml){\r\n                _realOdds = _odds;\r\n            }\r\n        }else if(_betType == 2){\r\n            _isAnyTriple = (_minGameResult == _midGameResult && _midGameResult == _maxGameResult);\r\n            if(_isAnyTriple){\r\n                _realOdds = _odds;\r\n            }\r\n        }else if(_betType == 3){\r\n            _isAnyTriple = (_minGameResult == _midGameResult && _midGameResult == _maxGameResult);\r\n            uint _specificTriple  = (_isAnyTriple) ? _minGameResult : 0 ;\r\n            if( _specificTriple == _smallNuml){\r\n                _realOdds = _odds;\r\n            }\r\n        }else if(_betType == 4){\r\n            uint _doubleTriple = (_minGameResult == _midGameResult) ? _minGameResult : ((_midGameResult == _maxGameResult)? _maxGameResult: 0);\r\n            if(_doubleTriple == _smallNuml){\r\n                _realOdds = _odds;\r\n            }\r\n        }else if(_betType == 5){\r\n            _threeDiceTotal = _minGameResult + _midGameResult + _maxGameResult ;\r\n            if(_threeDiceTotal == _smallNuml){\r\n                _realOdds = _odds;\r\n            }\r\n        }else  if(_betType == 6){\r\n\r\n            if(_smallNuml == _minGameResult || _smallNuml == _midGameResult){\r\n                if(_bigNum == _midGameResult || _bigNum == _maxGameResult){\r\n                    _realOdds = _odds;\r\n                }\r\n            }\r\n        }else if(_betType == 7){\r\n\r\n            if(_smallNuml == _minGameResult){\r\n                _realOdds++;\r\n            }\r\n            if(_smallNuml == _midGameResult){\r\n                _realOdds++;\r\n            }\r\n            if(_smallNuml == _maxGameResult){\r\n                _realOdds++;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    function _openGameResult(uint _minGameResult,uint _midGameResult, uint _maxGameResult, string _r1) private  returns(bool _result){\r\n        _result = false;\r\n        require(betInfoIsLocked);\r\n        require(!gameOver);\r\n        require(now <= gameEndTime);\r\n        require(_minGameResult <= _midGameResult);\r\n        require(_midGameResult <= _maxGameResult);\r\n        require (_minGameResult >= 1 && _maxGameResult <= 6);\r\n\r\n        uint _gameResult = _minGameResult*100 + _midGameResult*10 + _maxGameResult;\r\n        if(lastBlockNumber == block.number){\r\n            emit OnOpenGameResult(gameID,  false, 'block.number is equal', msg.sender, _gameResult, _r1,getEventId(),now);\r\n            return;\r\n        }\r\n        if(keccak256(uintToString(_gameResult) , gameRandon2 , _r1) ==  gameEncryptedText){\r\n            if(_minGameResult >= 1 && _minGameResult <= 6 && _midGameResult>=1 && _midGameResult<=6 && _maxGameResult>=0 && _maxGameResult<=6){\r\n                gameResult = _gameResult ;\r\n                gameRandon1 = _r1;\r\n                gameEndPlayNo = playNo - 1;\r\n\r\n                for(uint i = 0; nextRewardPlayNo < playNo && i < currentRewardNum; i++ ){\r\n                    betInfo  storage p = playerBetInfoOf[nextRewardPlayNo];\r\n                    if(!p.IsReturnAward){\r\n                        p.IsReturnAward = true;\r\n                        uint realOdd = _playRealOdds(p.BetType,p.Odds,p.SmallNum,p.BigNum,_minGameResult,_midGameResult,_maxGameResult);\r\n                        p.IsWin =_calResultReturnIsWin(nextRewardPlayNo,realOdd);\r\n                        if(p.IsWin){\r\n\r\n                            p.Odds = realOdd;\r\n                        }\r\n\r\n                    }\r\n                    nextRewardPlayNo++;\r\n                }\r\n                if(nextRewardPlayNo == playNo){\r\n                    gameOver = true;\r\n                    betInfoIsLocked = false;\r\n                }\r\n\r\n                emit OnOpenGameResult(gameID, true, 'Success', msg.sender,  _gameResult,  _r1,getEventId(),now);\r\n                _result = true;\r\n                return;\r\n            }else{\r\n                emit OnOpenGameResult(gameID,  false, 'The result is illegal', msg.sender, _gameResult, _r1,getEventId(),now);\r\n                return;\r\n            }\r\n        }else{\r\n            emit OnOpenGameResult(gameID,  false, 'Hash Value Not Match', msg.sender,  _gameResult,  _r1,getEventId(),now);\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    function _calResultReturnIsWin(uint  _playerBetInfoOfIndex,uint _realOdd) private returns(bool _isWin){\r\n        betInfo memory  p = playerBetInfoOf[_playerBetInfoOfIndex];\r\n        uint256 AllAmount = p.BetAmount.mul(1 + p.Odds);\r\n        if(_realOdd > 0){\r\n            if(_realOdd == p.Odds){\r\n                userTokenOf[p.Player] = userTokenOf[p.Player].add(AllAmount);\r\n                userTokenOf[this] = userTokenOf[this].sub(AllAmount);\r\n            }else {\r\n                uint256 winAmount = p.BetAmount.mul(1 + _realOdd);\r\n                userTokenOf[p.Player] = userTokenOf[p.Player].add(winAmount);\r\n                userTokenOf[this] = userTokenOf[this].sub(winAmount);\r\n                userTokenOf[currentBanker] = userTokenOf[currentBanker].add(AllAmount.sub(winAmount));\r\n                userTokenOf[this] = userTokenOf[this].sub(AllAmount.sub(winAmount));\r\n            }\r\n            return true ;\r\n        }else{\r\n            userTokenOf[currentBanker] = userTokenOf[currentBanker].add(AllAmount) ;\r\n            userTokenOf[this] = userTokenOf[this].sub(AllAmount);\r\n            if(now < donGameGiftLineTime){\r\n                DonQuixoteToken.sendGameGift(p.Player);\r\n            }\r\n            return false ;\r\n        }\r\n    }\r\n\r\n    function openGameResultAndNewGame(uint _minGameResult,uint _midGameResult,uint _maxGameResult, string _r1, bytes32 _gameEncryptedText) public onlyBanker returns(bool _result){\r\n\r\n        if(!gameOver){\r\n            _result =  _openGameResult( _minGameResult,_midGameResult,_maxGameResult,  _r1);\r\n        }\r\n        if (gameOver){\r\n            _result = _newGame( _gameEncryptedText);\r\n        }\r\n    }\r\n\r\n    function noOpenGameResult() public  returns(bool _result){\r\n        _result = false;\r\n        require(!gameOver);\r\n        require(gameEndTime < now);\r\n        if(lastBlockNumber == block.number){\r\n            emit OnOpenGameResult(gameID,false, 'block.number', msg.sender,0,'',getEventId(),now);\r\n            return;\r\n        }\r\n\r\n        gameEndPlayNo = playNo - 1;\r\n        for(uint i = 0; nextRewardPlayNo < playNo && i < currentRewardNum; i++){\r\n            betInfo  storage p = playerBetInfoOf[nextRewardPlayNo];\r\n            if(!p.IsReturnAward){\r\n                p.IsReturnAward = true;\r\n                p.IsWin = true ;\r\n                uint AllAmount = p.BetAmount.mul(1 + p.Odds);\r\n                userTokenOf[p.Player] =userTokenOf[p.Player].add(AllAmount);\r\n                userTokenOf[this] = userTokenOf[this].sub(AllAmount);\r\n            }\r\n            nextRewardPlayNo++;\r\n        }\r\n        if(nextRewardPlayNo == playNo){\r\n            gameOver = true;\r\n            if(betInfoIsLocked){\r\n                betInfoIsLocked = false;\r\n            }\r\n        }\r\n\r\n        emit OnOpenGameResult(gameID,  true, 'Banker Not Call', msg.sender,   0, '',getEventId(),now);\r\n        _result = true;\r\n    }\r\n\r\n\r\n\r\n    function  failUserRefund(uint _playNo) public returns (bool _result) {\r\n\r\n        _result = false;\r\n        require(!gameOver);\r\n        require(gameEndTime + 30 days < now);\r\n\r\n        betInfo storage p = playerBetInfoOf[_playNo];\r\n        require(p.Player == msg.sender);\r\n\r\n\r\n        if(!p.IsReturnAward && p.SmallNum > 0){\r\n            p.IsReturnAward = true;\r\n            uint256 ToUser = p.BetAmount;\r\n            uint256 ToBanker = p.BetAmount.mul(p.Odds);\r\n            userTokenOf[p.Player] =  userTokenOf[p.Player].add(ToUser);\r\n            userTokenOf[this] = userTokenOf[this].sub(ToUser);\r\n            userTokenOf[currentBanker] =  userTokenOf[currentBanker].add(ToBanker);\r\n            userTokenOf[this] = userTokenOf[this].sub(ToBanker);\r\n\r\n            p.Odds = 0;\r\n            _result = true;\r\n        }\r\n    }\r\n\r\n    function () public payable {\r\n\r\n    }\r\n\r\n    function transEther() public onlyOwner()\r\n    {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentEventId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betNums\",\"type\":\"uint256[]\"},{\"name\":\"_betAmounts\",\"type\":\"uint256[]\"}],\"name\":\"playBatch\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betNum\",\"type\":\"uint256\"},{\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"playThreeDiceTotal\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerBetInfoOf\",\"outputs\":[{\"name\":\"Player\",\"type\":\"address\"},{\"name\":\"BetType\",\"type\":\"uint256\"},{\"name\":\"BetAmount\",\"type\":\"uint256\"},{\"name\":\"Odds\",\"type\":\"uint256\"},{\"name\":\"SmallNum\",\"type\":\"uint256\"},{\"name\":\"BigNum\",\"type\":\"uint256\"},{\"name\":\"IsReturnAward\",\"type\":\"bool\"},{\"name\":\"IsWin\",\"type\":\"bool\"},{\"name\":\"BetTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"noOpenGameResult\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"officialGameUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currentRewardNum\",\"type\":\"uint256\"}],\"name\":\"setCurrentRewardNum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameRandon1\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOfficialGameUrl\",\"type\":\"string\"}],\"name\":\"setOfficialGameUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameBeginTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"tokenOf\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameBeginPlayNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donGameGiftLineTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minGameResult\",\"type\":\"uint256\"},{\"name\":\"_midGameResult\",\"type\":\"uint256\"},{\"name\":\"_maxGameResult\",\"type\":\"uint256\"},{\"name\":\"_r1\",\"type\":\"string\"}],\"name\":\"openGameResult\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameMaxBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betNum\",\"type\":\"uint256\"},{\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"playSingleDiceBet\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameEncryptedText\",\"type\":\"bytes32\"}],\"name\":\"newGame\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameRandon2\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canSetBanker\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextRewardPlayNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playNo\",\"type\":\"uint256\"}],\"name\":\"failUserRefund\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameEncryptedText\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBanker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betNum\",\"type\":\"uint256\"},{\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"playSpecificDoubles\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameEndPlayNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_banker\",\"type\":\"address\"},{\"name\":\"_beginTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setBanker\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAuction\",\"type\":\"address\"}],\"name\":\"setAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"playAnyTriples\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_smallNum\",\"type\":\"uint256\"},{\"name\":\"_bigNum\",\"type\":\"uint256\"},{\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"playDiceCombinations\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokenOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minGameResult\",\"type\":\"uint256\"},{\"name\":\"_midGameResult\",\"type\":\"uint256\"},{\"name\":\"_maxGameResult\",\"type\":\"uint256\"},{\"name\":\"_r1\",\"type\":\"string\"},{\"name\":\"_gameEncryptedText\",\"type\":\"bytes32\"}],\"name\":\"openGameResultAndNewGame\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betInfoIsLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameMinBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRewardNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betNum\",\"type\":\"uint256\"},{\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"playBigOrSmall\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankerBeginTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betNum\",\"type\":\"uint256\"},{\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"playSpecificTriples\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DonQuixoteToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockBetInfo\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankerEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_gameName\",\"type\":\"string\"},{\"name\":\"_gameTime\",\"type\":\"uint256\"},{\"name\":\"_gameMinBetAmount\",\"type\":\"uint256\"},{\"name\":\"_gameMaxBetAmount\",\"type\":\"uint256\"},{\"name\":\"_DonQuixoteToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_banker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_beginTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_code\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"OnSetNewBanker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_gameID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_banker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_gameEncryptedText\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_gameBeginTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_gameEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"OnNewGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_gameID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_playNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_smallNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_bigNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_betType\",\"type\":\"uint256\"}],\"name\":\"OnPlay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_remark\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_banker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_gameResult\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_r1\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"OnOpenGameResult\",\"type\":\"event\"}]","ContractName":"GameSicBo","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000e10000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000098c77a2a57fb08b1fd51120cbf95314a0f0deb82000000000000000000000000000000000000000000000000000000000000001147656f7267652057617368696e67746f6e000000000000000000000000000000","Library":"","SwarmSource":"bzzr://f3b78e6e49878b5b40d869de4a0ea8c6ad2f3eaab5ec809ee1603ab586fec368"}]}