{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// File: contracts\\zeppelin-solidity\\contracts\\ownership\\Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\zeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts\\zeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    Burn(burner, _value);\r\n    Transfer(burner, address(0), _value);\r\n  }\r\n}\r\n\r\n// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts\\RECORDToken.sol\r\n\r\n/**\r\n *   RECORD token contract\r\n */\r\ncontract RECORDToken is MintableToken, BurnableToken, Pausable {\r\n    using SafeMath for uint256;\r\n    string public name = \"RECORD\";\r\n    string public symbol = \"RCD\";\r\n    uint256 public decimals = 18;\r\n\r\n    mapping (address => bool) public lockedAddresses;\r\n\r\n    function isAddressLocked(address _adr) internal returns (bool) {\r\n        if (lockedAddresses[_adr] == true) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    function lockAddress(address _adr) onlyOwner public {\r\n        lockedAddresses[_adr] = true;\r\n    }\r\n    function unlockAddress(address _adr) onlyOwner public {\r\n        delete lockedAddresses[_adr];\r\n    }\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        lockAddress(_to);\r\n        return super.mint(_to, _amount);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(isAddressLocked(_to) == false);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(isAddressLocked(_from) == false);\r\n        require(isAddressLocked(_to) == false);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(isAddressLocked(_spender) == false);\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n        require(isAddressLocked(_spender) == false);\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n        require(isAddressLocked(_spender) == false);\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n}\r\n\r\n// File: contracts\\RECORDICO.sol\r\n\r\n/**\r\n*  takes funds from users and issues tokens\r\n*/\r\ncontract RECORDICO {\r\n    // RCD - RECORD token contract\r\n    RECORDToken public RCD = new RECORDToken();\r\n    using SafeMath for uint256;\r\n\r\n    // Token price parameters\r\n    // These parametes can be changed only by manager of contract\r\n    uint256 public Rate_Eth = 690; // Rate USD per ETH\r\n\r\n    // Crowdfunding parameters\r\n    uint256 public currentInitPart = 0;\r\n    uint256 public constant RECORDPart = 18; // 18% of TotalSupply for Record Team\r\n    uint256 public constant EcosystemPart = 15; // 15% of TotalSupply for Ecosystem\r\n    uint256 public constant InvestorPart = 5; // 5% of TotalSupply for Investors\r\n    uint256 public constant AdvisorPart = 8; // 8% of TotalSupply for Advisors & Ambassadors\r\n    uint256 public constant BountyPart = 4; // 4% of TotalSupply for Bounty\r\n    uint256 public constant icoPart = 50; // 50% of TotalSupply for PublicICO and PrivateOffer\r\n    uint256 public constant PreSaleHardCap = 15000000 * 1e18;\r\n    uint256 public constant RoundAHardCap = 45000000 * 1e18;\r\n    uint256 public constant RoundBHardCap = 45000000 * 1e18;\r\n    uint256 public constant RoundCHardCap = 45000000 * 1e18;\r\n    uint256 public constant totalAmountOnICO = 300000000 * 1e18;\r\n\r\n    uint256 public PreSaleSold = 0;\r\n    uint256 public RoundASold = 0;\r\n    uint256 public RoundBSold = 0;\r\n    uint256 public RoundCSold = 0;\r\n    uint256 public EthGet = 0;\r\n    uint256 public RcdGet = 0;\r\n\r\n    // Output ethereum addresses\r\n    address Company;\r\n    address Manager; // Manager controls contract\r\n\r\n    uint256 public PreSaleStartTime;\r\n    uint256 public PreSaleCloseTime;\r\n    uint256 public IcoStartTime;\r\n    uint256 public IcoCloseTime;\r\n\r\n    // Allows execution by the contract manager only\r\n    modifier managerOnly {\r\n        require(msg.sender == Manager);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *   @dev Contract constructor function\r\n     */\r\n    function RECORDICO(\r\n        address _Company,\r\n        address _Manager,\r\n        uint256 _PreSaleStartTime,\r\n        uint256 _PreSaleCloseTime,\r\n        uint256 _IcoStartTime,\r\n        uint256 _IcoCloseTime\r\n    )\r\n    public {\r\n        Company = _Company;\r\n        Manager = _Manager;\r\n        PreSaleStartTime = _PreSaleStartTime;\r\n        PreSaleCloseTime = _PreSaleCloseTime;\r\n        IcoStartTime = _IcoStartTime;\r\n        IcoCloseTime = _IcoCloseTime;\r\n        RCD.pause(); // ICO중에는 token transfer가 되어서는 안된다.\r\n    }\r\n\r\n    function getMinMaxInvest() public returns(uint256, uint256) {\r\n        uint256 _min = 0;\r\n        uint256 _max = 0;\r\n        uint256 stage = getStage();\r\n        if (stage == 1) {\r\n            _min = 5000 * 1e18;\r\n            _max = 10000000 * 1e18;\r\n        } else if (stage == 3 || stage == 4 || stage == 5) {\r\n            _min = 5000 * 1e18;\r\n            _max = 50000000 * 1e18;\r\n        }\r\n        return (_min, _max);\r\n    }\r\n    function getRcdExchange(uint256 _ethValue) public returns(uint256, bool) {\r\n        uint256 stage = getStage();\r\n        uint256 _rcdValue = 0;\r\n        uint256 _usdValue = _ethValue.mul(Rate_Eth);\r\n        uint256 _rcdValue_Numerator = _usdValue.mul(1000);\r\n        bool exchangeSuccess = false;\r\n        if (stage == 1 || stage == 3 || stage == 4 || stage == 5 || stage == 6) {\r\n            if (stage == 1) {\r\n                _rcdValue = _rcdValue_Numerator.div(80);\r\n            } else if (stage == 3) {\r\n                _rcdValue = _rcdValue_Numerator.div(90);\r\n            } else if (stage == 4) {\r\n                _rcdValue = _rcdValue_Numerator.div(95);\r\n            } else if (stage == 5) {\r\n                _rcdValue = _rcdValue_Numerator.div(100);\r\n            } else {\r\n                _rcdValue = 0;\r\n            }\r\n        }\r\n        if (_rcdValue > 0) {\r\n            exchangeSuccess = true;\r\n        }\r\n        return (_rcdValue, exchangeSuccess);\r\n    }\r\n    function getStage() public returns(uint256) {\r\n        // 0: 프리세일 전\r\n        // 1: 프리세일 중\r\n        // 2: 프리세일 끝 / ICO 전\r\n        // 3: RoundA\r\n        // 4: RoundB\r\n        // 5: RoundC\r\n        // 6: Finish\r\n        // 0. 프리세일 기간 전\r\n        if (now < PreSaleStartTime) {\r\n            return 0;\r\n        }\r\n        // 1. 프리세일 기간 중\r\n        if (PreSaleStartTime <= now && now <= PreSaleCloseTime) {\r\n            if (PreSaleSold < PreSaleHardCap) {\r\n                return 1;\r\n            } else {\r\n                return 2;\r\n            }\r\n        }\r\n        // 2. 프리세일 기간 끝\r\n        if (PreSaleCloseTime <= now && now <= IcoStartTime) {\r\n            return 2;\r\n        }\r\n        // ICO 기간 중\r\n        if (IcoStartTime <= now && now <= IcoCloseTime) {\r\n            // 3. RoundA\r\n            if (RoundASold < RoundAHardCap) {\r\n                return 3;\r\n            }\r\n            // 4. RoundB\r\n            else if (RoundAHardCap <= RoundASold && RoundBSold < RoundBHardCap) {\r\n                return 4;\r\n            }\r\n            // 5. RoundC\r\n            else if (RoundBHardCap <= RoundBSold && RoundCSold < RoundCHardCap) {\r\n                return 5;\r\n            }\r\n            // 6. Finish\r\n            else {\r\n                return 6;\r\n            }\r\n        }\r\n        // 6. ICO기간 끝\r\n        if (IcoCloseTime < now) {\r\n            return 6;\r\n        }\r\n        return 10;\r\n    }\r\n\r\n    /**\r\n     *   @dev Set rate of ETH and update token price\r\n     *   @param _RateEth       current ETH rate\r\n     */\r\n    function setRate(uint256 _RateEth) external managerOnly {\r\n        Rate_Eth = _RateEth;\r\n    }\r\n    function setIcoCloseTime(uint256 _IcoCloseTime) external managerOnly {\r\n        IcoCloseTime = _IcoCloseTime;\r\n    }\r\n\r\n    function lockAddress(address _adr) managerOnly external {\r\n        RCD.lockAddress(_adr);\r\n    }\r\n\r\n    function unlockAddress(address _adr) managerOnly external {\r\n        RCD.unlockAddress(_adr);\r\n    }\r\n\r\n    /**\r\n     *   @dev Enable token transfers\r\n     */\r\n    function unfreeze() external managerOnly {\r\n        RCD.unpause();\r\n    }\r\n\r\n    /**\r\n     *   @dev Disable token transfers\r\n     */\r\n    function freeze() external managerOnly {\r\n        RCD.pause();\r\n    }\r\n\r\n    /**\r\n     *   @dev Fallback function calls buyTokens() function to buy tokens\r\n     *        when investor sends ETH to address of ICO contract\r\n     */\r\n    function() external payable {\r\n        buyTokens(msg.sender, msg.value);\r\n    }\r\n    /**\r\n     *   @dev Issue tokens for investors who paid in ether\r\n     *   @param _investor     address which the tokens will be issued to\r\n     *   @param _ethValue     number of Ether\r\n     */\r\n    function buyTokens(address _investor, uint256 _ethValue) internal {\r\n        uint256 _rcdValue;\r\n        bool _rcdExchangeSuccess;\r\n        uint256 _min;\r\n        uint256 _max;\r\n\r\n        (_rcdValue, _rcdExchangeSuccess) = getRcdExchange(_ethValue);\r\n        (_min, _max) = getMinMaxInvest();\r\n        require (\r\n            _rcdExchangeSuccess == true &&\r\n            _min <= _rcdValue &&\r\n            _rcdValue <= _max\r\n        );\r\n        mintICOTokens(_investor, _rcdValue, _ethValue);\r\n    }\r\n    function mintICOTokens(address _investor, uint256 _rcdValue, uint256 _ethValue) internal{\r\n        uint256 stage = getStage();\r\n        require (\r\n            stage == 1 ||\r\n            stage == 3 ||\r\n            stage == 4 ||\r\n            stage == 5\r\n        );\r\n        if (stage == 1) {\r\n            require(PreSaleSold.add(_rcdValue) <= PreSaleHardCap);\r\n            PreSaleSold = PreSaleSold.add(_rcdValue);\r\n        }\r\n        if (stage == 3) {\r\n            if (RoundASold.add(_rcdValue) <= RoundAHardCap) {\r\n                RoundASold = RoundASold.add(_rcdValue);\r\n            } else {\r\n                RoundBSold = RoundASold.add(_rcdValue) - RoundAHardCap;\r\n                RoundASold = RoundAHardCap;\r\n            }\r\n        }\r\n        if (stage == 4) {\r\n            if (RoundBSold.add(_rcdValue) <= RoundBHardCap) {\r\n                RoundBSold = RoundBSold.add(_rcdValue);\r\n            } else {\r\n                RoundCSold = RoundBSold.add(_rcdValue) - RoundBHardCap;\r\n                RoundBSold = RoundBHardCap;\r\n            }\r\n        }\r\n        if (stage == 5) {\r\n            require(RoundCSold.add(_rcdValue) <= RoundCHardCap);\r\n            RoundCSold = RoundCSold.add(_rcdValue);\r\n        }\r\n        RCD.mint(_investor, _rcdValue);\r\n        RcdGet = RcdGet.add(_rcdValue);\r\n        EthGet = EthGet.add(_ethValue);\r\n    }\r\n\r\n    function mintICOTokensFromExternal(address _investor, uint256 _rcdValue) external managerOnly{\r\n        mintICOTokens(_investor, _rcdValue, 0);\r\n    }\r\n\r\n    /*\r\n     *   @dev Allows Company withdraw investments when round is over\r\n    */\r\n    function withdrawEther() external managerOnly{\r\n        Company.transfer(address(this).balance);\r\n    }\r\n\r\n    function mintInitialTokens(address _adr, uint256 rate) external managerOnly {\r\n        require (currentInitPart.add(rate) <= 50);\r\n        RCD.mint(_adr, rate.mul(totalAmountOnICO).div(100));\r\n        currentInitPart = currentInitPart.add(rate);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external managerOnly{\r\n        RCD.transferOwnership(newOwner);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"RoundASold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"lockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_RateEth\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RoundAHardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RoundCSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RCD\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreSaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreSaleCloseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RoundBHardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EcosystemPart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmountOnICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BountyPart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethValue\",\"type\":\"uint256\"}],\"name\":\"getRcdExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RoundBSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreSaleHardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"mintInitialTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentInitPart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IcoCloseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AdvisorPart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PreSaleSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RECORDPart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_IcoCloseTime\",\"type\":\"uint256\"}],\"name\":\"setIcoCloseTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_rcdValue\",\"type\":\"uint256\"}],\"name\":\"mintICOTokensFromExternal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"unlockAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMinMaxInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RcdGet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InvestorPart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RoundCHardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Rate_Eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IcoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EthGet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_Company\",\"type\":\"address\"},{\"name\":\"_Manager\",\"type\":\"address\"},{\"name\":\"_PreSaleStartTime\",\"type\":\"uint256\"},{\"name\":\"_PreSaleCloseTime\",\"type\":\"uint256\"},{\"name\":\"_IcoStartTime\",\"type\":\"uint256\"},{\"name\":\"_IcoCloseTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"RECORDICO","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000005b41ca530bfc4f3d00d3f6547c20d50382c70644000000000000000000000000228feea30c3aec1c0b492f6557f2a04e2b487ee8000000000000000000000000000000000000000000000000000000005ad29600000000000000000000000000000000000000000000000000000000005add2200000000000000000000000000000000000000000000000000000000005ae65c80000000000000000000000000000000000000000000000000000000005b381980","Library":"","SwarmSource":"bzzr://863c324c3d3b2330698822c28ec2b0d52a6eaee153751037b234e20214e24805"}]}