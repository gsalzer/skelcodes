{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Ether sheet music\r\n */\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * Ownable contract base\r\n */\r\n\r\ncontract OwnableContract {\r\n\r\n    address private owner;\r\n\r\n    function OwnableContract() public {\r\n\r\n        owner = msg.sender;\r\n\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n\r\n        require( msg.sender == owner );\r\n        _;\r\n\r\n    }\r\n\r\n    function getOwner() public view returns ( address ) {\r\n\r\n        return owner;\r\n\r\n    }\r\n\r\n    function changeOwner( address newOwner ) onlyOwner public {\r\n\r\n        owner = newOwner;\r\n\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Main sheet music contract\r\n */\r\n\r\ncontract SheetMusic is OwnableContract {\r\n\r\n    /**\r\n     * Note lengths\r\n     */\r\n\r\n    enum NoteLength {\r\n\r\n        WHOLE_NOTE,\r\n\r\n        DOTTED_HALF_NOTE,\r\n\r\n        HALF_NOTE,\r\n\r\n        DOTTED_QUARTER_NOTE,\r\n\r\n        QUARTER_NOTE,\r\n\r\n        DOTTED_EIGHTH_NOTE,\r\n\r\n        EIGHTH_NOTE,\r\n\r\n        DOTTED_SIXTEENTH_NOTE,\r\n\r\n        SIXTEENTH_NOTE\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Note struct\r\n     */\r\n\r\n    struct Beat {\r\n\r\n        address maker;\r\n\r\n        uint8[] midiNotes;\r\n\r\n        NoteLength length;\r\n\r\n        uint donation; //In weis\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Internal props\r\n     */\r\n\r\n    mapping( uint => Beat ) private notes;\r\n\r\n    uint private numNotes;\r\n\r\n    address private donatee;\r\n\r\n\r\n    //Values donated toward goal and milestone\r\n\r\n    uint private totalValue;\r\n\r\n    uint private milestoneValue;\r\n\r\n\r\n    //Goals\r\n\r\n    uint constant DONATION_GOAL = 100 ether;\r\n\r\n    uint private minDonation = 0.005 ether;\r\n\r\n\r\n    //Transfer after a certain amount\r\n\r\n    uint private milestoneGoal = 5 ether;\r\n\r\n\r\n    //Full donation goal met\r\n\r\n    bool private donationMet = false;\r\n\r\n\r\n    /**\r\n     * Midi requirements\r\n     */\r\n\r\n    uint8 constant MIDI_LOWEST_NOTE = 21;\r\n\r\n    uint8 constant MIDI_HIGHEST_NOTE = 108;\r\n\r\n\r\n    /**\r\n     * Events\r\n     */\r\n\r\n    event NoteCreated( address indexed maker, uint id, uint donation );\r\n\r\n    event DonationCreated( address indexed maker, uint donation );\r\n\r\n    event DonationTransfered( address donatee, uint value );\r\n\r\n    event DonationGoalReached( address MrCool );\r\n\r\n    event MilestoneMet( address donater );\r\n\r\n\r\n    /**\r\n     * Construct\r\n     */\r\n\r\n    function SheetMusic( address donateeArg ) public {\r\n\r\n        donatee = donateeArg;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Main create note\r\n     * There is no 0 note. First one is 1\r\n     */\r\n\r\n    function createBeat( uint8[] midiNotes, NoteLength length ) external payable {\r\n\r\n        totalValue += msg.value;\r\n        milestoneValue += msg.value;\r\n\r\n\r\n        //Check note min value\r\n\r\n        require( msg.value >= minDonation );\r\n\r\n\r\n        //Check valid notes\r\n\r\n        checkMidiNotesValue( midiNotes );\r\n\r\n\r\n        //Create note\r\n\r\n        Beat memory newBeat = Beat({\r\n            maker: msg.sender,\r\n            donation: msg.value,\r\n            midiNotes: midiNotes,\r\n            length: length\r\n        });\r\n\r\n        notes[ ++ numNotes ] = newBeat;\r\n\r\n        emit NoteCreated( msg.sender, numNotes, msg.value );\r\n\r\n        checkGoal( msg.sender );\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Create passage or number of beats\r\n     * Nested array unimplemented right now\r\n     */\r\n\r\n    function createPassage( uint8[] userNotes, uint[] userDivider, NoteLength[] lengths )\r\n        external\r\n        payable\r\n    {\r\n\r\n        //Add values regardless if valid\r\n\r\n        totalValue += msg.value;\r\n        milestoneValue += msg.value;\r\n\r\n        uint userNumberBeats = userDivider.length;\r\n        uint userNumberLength = lengths.length;\r\n\r\n\r\n        //Check note min value and lengths equal eachother\r\n        //Check valid midi notes\r\n\r\n        require( userNumberBeats == userNumberLength );\r\n\r\n        require( msg.value >= ( minDonation * userNumberBeats ) );\r\n\r\n        checkMidiNotesValue( userNotes );\r\n\r\n\r\n        //Create beats\r\n\r\n        uint noteDonation = msg.value / userNumberBeats;\r\n        uint lastDivider = 0;\r\n\r\n        for( uint i = 0; i < userNumberBeats; ++ i ) {\r\n\r\n            uint divide = userDivider[ i ];\r\n            NoteLength length = lengths[ i ];\r\n\r\n            uint8[] memory midiNotes = splice( userNotes, lastDivider, divide );\r\n\r\n            Beat memory newBeat = Beat({\r\n                maker: msg.sender,\r\n                donation: noteDonation,\r\n                midiNotes: midiNotes,\r\n                length: length\r\n            });\r\n\r\n            lastDivider = divide;\r\n\r\n            notes[ ++ numNotes ] = newBeat;\r\n\r\n            emit NoteCreated( msg.sender, numNotes, noteDonation );\r\n\r\n        }\r\n\r\n        checkGoal( msg.sender );\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Random value add to contract\r\n     */\r\n\r\n    function () external payable {\r\n\r\n        totalValue += msg.value;\r\n        milestoneValue += msg.value;\r\n\r\n        checkGoal( msg.sender );\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Donate with intent\r\n     */\r\n\r\n    function donate() external payable {\r\n\r\n        totalValue += msg.value;\r\n        milestoneValue += msg.value;\r\n\r\n        emit DonationCreated( msg.sender, msg.value );\r\n\r\n        checkGoal( msg.sender );\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Check if goal reached\r\n     */\r\n\r\n    function checkGoal( address maker ) internal {\r\n\r\n        if( totalValue >= DONATION_GOAL && ! donationMet ) {\r\n\r\n            donationMet = true;\r\n\r\n            emit DonationGoalReached( maker );\r\n\r\n        }\r\n\r\n        if( milestoneValue >= milestoneGoal ) {\r\n\r\n            transferMilestone();\r\n            milestoneValue = 0;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Getters for notes\r\n     */\r\n\r\n    function getNumberOfBeats() external view returns ( uint ) {\r\n\r\n        return numNotes;\r\n\r\n    }\r\n\r\n    function getBeat( uint id ) external view returns (\r\n        address,\r\n        uint8[],\r\n        NoteLength,\r\n        uint\r\n    ) {\r\n\r\n        Beat storage beat = notes[ id ];\r\n\r\n        return (\r\n            beat.maker,\r\n            beat.midiNotes,\r\n            beat.length,\r\n            beat.donation\r\n        );\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Stats getter\r\n     */\r\n\r\n    function getDonationStats() external view returns (\r\n        uint goal,\r\n        uint minimum,\r\n        uint currentValue,\r\n        uint milestoneAmount,\r\n        address donateeAddr\r\n    ) {\r\n\r\n        return (\r\n            DONATION_GOAL,\r\n            minDonation,\r\n            totalValue,\r\n            milestoneGoal,\r\n            donatee\r\n        );\r\n\r\n    }\r\n\r\n    function getTotalDonated() external view returns( uint ) {\r\n\r\n        return totalValue;\r\n\r\n    }\r\n\r\n    function getDonatee() external view returns( address ) {\r\n\r\n        return donatee;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Finishers\r\n     */\r\n\r\n    function transferMilestone() internal {\r\n\r\n        uint balance = address( this ).balance;\r\n\r\n        donatee.transfer( balance );\r\n\r\n        emit DonationTransfered( donatee, balance );\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Internal checks and requires for valid notes\r\n     */\r\n\r\n    function checkMidiNoteValue( uint8 midi ) pure internal {\r\n\r\n        require( midi >= MIDI_LOWEST_NOTE && midi <= MIDI_HIGHEST_NOTE );\r\n\r\n    }\r\n\r\n    function checkMidiNotesValue( uint8[] midis ) pure internal {\r\n\r\n        uint num = midis.length;\r\n\r\n        //require less or equal to all notes allowed\r\n\r\n        require( num <= ( MIDI_HIGHEST_NOTE - MIDI_LOWEST_NOTE ) );\r\n\r\n        for( uint i = 0; i < num; ++ i ) {\r\n\r\n            checkMidiNoteValue( midis[ i ] );\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Owner setters for future proofing\r\n     */\r\n\r\n    function setMinDonation( uint newMin ) onlyOwner external {\r\n\r\n        minDonation = newMin;\r\n\r\n    }\r\n\r\n    function setMilestone( uint newMile ) onlyOwner external {\r\n\r\n        milestoneGoal = newMile;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Array splice function\r\n     */\r\n\r\n    function splice( uint8[] arr, uint index, uint to )\r\n        pure\r\n        internal\r\n        returns( uint8[] )\r\n    {\r\n\r\n        uint8[] memory output = new uint8[]( to - index );\r\n        uint counter = 0;\r\n\r\n        for( uint i = index; i < to; ++ i ) {\r\n\r\n            output[ counter ] = arr[ i ];\r\n\r\n            ++ counter;\r\n\r\n        }\r\n\r\n        return output;\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBeat\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint8[]\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"midiNotes\",\"type\":\"uint8[]\"},{\"name\":\"length\",\"type\":\"uint8\"}],\"name\":\"createBeat\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userNotes\",\"type\":\"uint8[]\"},{\"name\":\"userDivider\",\"type\":\"uint256[]\"},{\"name\":\"lengths\",\"type\":\"uint8[]\"}],\"name\":\"createPassage\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDonatee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMin\",\"type\":\"uint256\"}],\"name\":\"setMinDonation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfBeats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDonationStats\",\"outputs\":[{\"name\":\"goal\",\"type\":\"uint256\"},{\"name\":\"minimum\",\"type\":\"uint256\"},{\"name\":\"currentValue\",\"type\":\"uint256\"},{\"name\":\"milestoneAmount\",\"type\":\"uint256\"},{\"name\":\"donateeAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMile\",\"type\":\"uint256\"}],\"name\":\"setMilestone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalDonated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"donateeArg\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"donation\",\"type\":\"uint256\"}],\"name\":\"NoteCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"donation\",\"type\":\"uint256\"}],\"name\":\"DonationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"donatee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DonationTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"MrCool\",\"type\":\"address\"}],\"name\":\"DonationGoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"donater\",\"type\":\"address\"}],\"name\":\"MilestoneMet\",\"type\":\"event\"}]","ContractName":"SheetMusic","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fb6916095ca1df60bb79ce92ce3ea74c37c5d359","Library":"","SwarmSource":"bzzr://8b74fa0d9e8d1b04171bf935fb58d41f998e0409ffbec25183d66c3cea7052b9"}]}