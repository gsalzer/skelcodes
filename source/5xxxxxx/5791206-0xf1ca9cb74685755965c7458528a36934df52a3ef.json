{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n// @title SafeMath\r\n// @dev Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n// @title Ownable\r\n// @dev The Ownable contract has an owner address, and provides basic authorization control\r\n// functions, this simplifies the implementation of \"user permissions\".\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    // @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // @dev Throws if called by any account other than the owner.\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    // @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// @title ERC20Basic\r\n// @dev Simpler version of ERC20 interface\r\n// @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\ncontract ERC20Basic {\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function totalSupply() public view returns (uint256 supply);\r\n\r\n    function balanceOf(address who) public view returns (uint256 balance);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool success);\r\n}\r\n\r\n\r\n// @title ERC20 interface\r\n// @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\ncontract ERC20 is ERC20Basic {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256 remaining);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool success);\r\n}\r\n\r\n\r\n// @title Basic token\r\n// @dev Basic version of StandardToken, with no allowances.\r\ncontract BasicToken is Ownable, ERC20Basic {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) public balances;\r\n\r\n    // @dev Fix for the ERC20 short address attack.\r\n    modifier onlyPayloadSize(uint256 size) {\r\n        require(!(msg.data.length < size + 4));\r\n        _;\r\n    }\r\n\r\n    // @dev transfer token for a specified address\r\n    // @param _to The address to transfer to.\r\n    // @param _value The amount to be transferred.\r\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool success) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // @dev Gets the balance of the specified address.\r\n    // @param _owner The address to query the the balance of.\r\n    // @return An uint256 representing the amount owned by the passed address.\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\n// @title Standard ERC20 token\r\n// @dev Implementation of the basic standard token.\r\n// @dev https://github.com/ethereum/EIPs/issues/20\r\n// @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\ncontract StandardToken is BasicToken, ERC20 {\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n    uint256 public constant MAX_UINT256 = 2 ** 256 - 1;\r\n\r\n    // @dev Transfer tokens from one address to another\r\n    // @param _from address The address which you want to send tokens from\r\n    // @param _to address The address which you want to transfer to\r\n    // @param _value uint256 the amount of tokens to be transferred\r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns (bool success) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n        require(_value <= _allowance);\r\n\r\n        // @dev Treat 2^256-1 means unlimited allowance\r\n        if (_allowance < MAX_UINT256)\r\n            allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    // Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    // and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    // race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    // @param _spender The address which will spend the funds.\r\n    // @param _value The amount of tokens to be spent.\r\n    function approve(address _spender, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // @dev approve should be called when allowed[_spender] == 0. To increment allowed value is better to use\r\n    // @dev this function to avoid 2 calls (and wait until the first transaction is mined)\r\n    // @param _spender The address which will spend the funds.\r\n    // @param _addedValue The amount of tokens to be added to the allowance.\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    // @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n    // @param _owner address The address which owns the funds.\r\n    // @param _spender address The address which will spend the funds.\r\n    // @return A uint256 specifying the amount of tokens still available for the spender.\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\n// @title Upgraded standard token\r\n// @dev Contract interface that the upgraded contract has to implement\r\n// @dev Methods to be called by the legacy contract\r\n// @dev They have to ensure msg.sender to be the contract address\r\ncontract UpgradedStandardToken is StandardToken {\r\n    function transferByLegacy(address from, address to, uint256 value) public returns (bool success);\r\n\r\n    function transferFromByLegacy(address sender, address from, address spender, uint256 value) public returns (bool success);\r\n\r\n    function approveByLegacy(address from, address spender, uint256 value) public returns (bool success);\r\n\r\n    function increaseApprovalByLegacy(address from, address spender, uint256 value) public returns (bool success);\r\n\r\n    function decreaseApprovalByLegacy(address from, address spender, uint256 value) public returns (bool success);\r\n}\r\n\r\n\r\n// @title Upgradeable standard token\r\n// @dev The upgradeable contract interface\r\n// @dev\r\n// @dev They have to ensure msg.sender to be the contract address\r\ncontract UpgradeableStandardToken is StandardToken {\r\n    address public upgradeAddress;\r\n    uint256 public upgradeTimestamp;\r\n\r\n    //  The contract is initialized with an upgrade timestamp close to the heat death of the universe.\r\n    constructor() public {\r\n        upgradeAddress = address(0);\r\n        //  Set the timestamp of the upgrade to some time close to the heat death of the universe.\r\n        upgradeTimestamp = MAX_UINT256;\r\n    }\r\n\r\n    // Forward ERC20 methods to upgraded contract after the upgrade timestamp has been reached\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        if (now > upgradeTimestamp) {\r\n            return UpgradedStandardToken(upgradeAddress).transferByLegacy(msg.sender, _to, _value);\r\n        } else {\r\n            return super.transfer(_to, _value);\r\n        }\r\n    }\r\n\r\n    // Forward ERC20 methods to upgraded contract after the upgrade timestamp has been reached\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (now > upgradeTimestamp) {\r\n            return UpgradedStandardToken(upgradeAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\r\n        } else {\r\n            return super.transferFrom(_from, _to, _value);\r\n        }\r\n    }\r\n\r\n    // Forward ERC20 methods to upgraded contract after the upgrade timestamp has been reached\r\n    function balanceOf(address who) public view returns (uint256 balance) {\r\n        if (now > upgradeTimestamp) {\r\n            return UpgradedStandardToken(upgradeAddress).balanceOf(who);\r\n        } else {\r\n            return super.balanceOf(who);\r\n        }\r\n    }\r\n\r\n    // Forward ERC20 methods to upgraded contract after the upgrade timestamp has been reached\r\n    function approve(address _spender, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool success) {\r\n        if (now > upgradeTimestamp) {\r\n            return UpgradedStandardToken(upgradeAddress).approveByLegacy(msg.sender, _spender, _value);\r\n        } else {\r\n            return super.approve(_spender, _value);\r\n        }\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        if (now > upgradeTimestamp) {\r\n            return UpgradedStandardToken(upgradeAddress).increaseApprovalByLegacy(msg.sender, _spender, _addedValue);\r\n        } else {\r\n            return super.increaseApproval(_spender, _addedValue);\r\n        }\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        if (now > upgradeTimestamp) {\r\n            return UpgradedStandardToken(upgradeAddress).decreaseApprovalByLegacy(msg.sender, _spender, _subtractedValue);\r\n        } else {\r\n            return super.decreaseApproval(_spender, _subtractedValue);\r\n        }\r\n    }\r\n\r\n    // Forward ERC20 methods to upgraded contract after the upgrade timestamp has been reached\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        if (now > upgradeTimestamp) {\r\n            return StandardToken(upgradeAddress).allowance(_owner, _spender);\r\n        } else {\r\n            return super.allowance(_owner, _spender);\r\n        }\r\n    }\r\n\r\n    // Upgrade this contract with a new one, it will auto-activate 12 weeks later\r\n    function upgrade(address _upgradeAddress) public onlyOwner {\r\n        require(now < upgradeTimestamp);\r\n        require(_upgradeAddress != address(0));\r\n\r\n        upgradeAddress = _upgradeAddress;\r\n        upgradeTimestamp = now.add(12 weeks);\r\n        emit Upgrading(_upgradeAddress, upgradeTimestamp);\r\n    }\r\n\r\n    // Called when contract is upgrading\r\n    event Upgrading(address newAddress, uint256 timestamp);\r\n}\r\n\r\n\r\n// @title The AVINOC Token contract\r\ncontract AVINOCToken is UpgradeableStandardToken {\r\n    string public constant name = \"AVINOC Token\";\r\n    string public constant symbol = \"AVINOC\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant decimalFactor = 10 ** uint256(decimals);\r\n    uint256 public constant TOTAL_SUPPLY = 1000000000 * decimalFactor;\r\n\r\n    constructor() public {\r\n        balances[owner] = TOTAL_SUPPLY;\r\n    }\r\n\r\n    // @dev Don't accept ETH\r\n    function() public payable {\r\n        revert();\r\n    }\r\n\r\n    // @dev return the fixed total supply\r\n    function totalSupply() public view returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradeAddress\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Upgrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"AVINOCToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://035f59e0b981f0f9e3ec408d8e3d65828ed6dcd1563e76a4cba52261982347a5"}]}