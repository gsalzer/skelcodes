{"status":"1","message":"OK","result":[{"SourceCode":"// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n// import 'ds-auth/auth.sol';\r\npragma solidity ^0.4.23;\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\n/// math.sol -- mixin for inline numerical wizardry\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.4.13;\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// import './IkuraStorage.sol';\r\n\r\n/**\r\n *\r\n * ロジックの更新に影響されない永続化データを保持するクラス\r\n *\r\n */\r\ncontract IkuraStorage is DSMath, DSAuth {\r\n  // オーナー（中央銀行）のアドレス\r\n  address[] ownerAddresses;\r\n\r\n  // 各アドレスのdJPYの口座残高\r\n  mapping(address => uint) coinBalances;\r\n\r\n  // 各アドレスのSHINJI tokenの口座残高\r\n  mapping(address => uint) tokenBalances;\r\n\r\n  // 各アドレスが指定したアドレスに対して許可する最大送金額\r\n  mapping(address => mapping (address => uint)) coinAllowances;\r\n\r\n  // dJPYの発行高\r\n  uint _totalSupply = 0;\r\n\r\n  // 手数料率\r\n  // 0.01pips = 1\r\n  // 例). 手数料を 0.05% とする場合は 500\r\n  uint _transferFeeRate = 500;\r\n\r\n  // 最低手数料額\r\n  // 1 = 1dJPY\r\n  // amount * 手数料率で算出した金額がここで設定した最低手数料を下回る場合は、最低手数料額を手数料とする\r\n  uint8 _transferMinimumFee = 5;\r\n\r\n  address tokenAddress;\r\n  address multiSigAddress;\r\n  address authorityAddress;\r\n\r\n  // @NOTE リリース時にcontractのdeploy -> watch contract -> setOwnerの流れを\r\n  //省略したい場合は、ここで直接controllerのアドレスを指定するとショートカットできます\r\n  // 勿論テストは通らなくなるので、テストが通ったら試してね\r\n  constructor() public DSAuth() {\r\n    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\r\n    owner = controllerAddress;\r\n    LogSetOwner(controllerAddress);*/\r\n  }\r\n\r\n  function changeToken(address tokenAddress_) public auth {\r\n    tokenAddress = tokenAddress_;\r\n  }\r\n\r\n  function changeAssociation(address multiSigAddress_) public auth {\r\n    multiSigAddress = multiSigAddress_;\r\n  }\r\n\r\n  function changeAuthority(address authorityAddress_) public auth {\r\n    authorityAddress = authorityAddress_;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for _totalSupply\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * 総発行額を返す\r\n   *\r\n   * @return 総発行額\r\n   */\r\n  function totalSupply() public view auth returns (uint) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * 総発行数を増やす（mintと並行して呼ばれることを想定）\r\n   *\r\n   * @param amount 鋳造数\r\n   */\r\n  function addTotalSupply(uint amount) public auth {\r\n    _totalSupply = add(_totalSupply, amount);\r\n  }\r\n\r\n  /**\r\n   * 総発行数を減らす（burnと並行して呼ばれることを想定）\r\n   *\r\n   * @param amount 鋳造数\r\n   */\r\n  function subTotalSupply(uint amount) public auth {\r\n    _totalSupply = sub(_totalSupply, amount);\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for _transferFeeRate\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * 手数料率を返す\r\n   *\r\n   * @return 現在の手数料率\r\n   */\r\n  function transferFeeRate() public view auth returns (uint) {\r\n    return _transferFeeRate;\r\n  }\r\n\r\n  /**\r\n   * 手数料率を変更する\r\n   *\r\n   * @param newTransferFeeRate 新しい手数料率\r\n   *\r\n   * @return 更新に成功したらtrue、失敗したらfalse（今のところ失敗するケースはない）\r\n   */\r\n  function setTransferFeeRate(uint newTransferFeeRate) public auth returns (bool) {\r\n    _transferFeeRate = newTransferFeeRate;\r\n\r\n    return true;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for _transferMinimumFee\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * 最低手数料返す\r\n   *\r\n   * @return 現在の最低手数料\r\n   */\r\n  function transferMinimumFee() public view auth returns (uint8) {\r\n    return _transferMinimumFee;\r\n  }\r\n\r\n  /**\r\n   * 最低手数料を変更する\r\n   *\r\n   * @param newTransferMinimumFee 新しい最低手数料\r\n   *\r\n   * @return 更新に成功したらtrue、失敗したらfalse（今のところ失敗するケースはない）\r\n   */\r\n  function setTransferMinimumFee(uint8 newTransferMinimumFee) public auth {\r\n    _transferMinimumFee = newTransferMinimumFee;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for ownerAddresses\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * 指定したユーザーアドレスをオーナーの一覧に追加する\r\n   *\r\n   * トークンの移動時に内部的にオーナーのアドレスを管理するための関数。\r\n   * トークンの所有者 = オーナーという扱いになったので、この配列に含まれるアドレスの一覧は\r\n   * 手数料からの収益の分配をする時に利用するだけで、オーナーかどうかの判定には利用しない\r\n   *\r\n   * @param addr ユーザーのアドレス\r\n   *\r\n   * @return 処理に成功したらtrue、失敗したらfalse\r\n   */\r\n  function addOwnerAddress(address addr) internal returns (bool) {\r\n    ownerAddresses.push(addr);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 指定したユーザーアドレスをオーナーの一覧から削除する\r\n   *\r\n   * トークンの移動時に内部的にオーナーのアドレスを管理するための関数。\r\n   *\r\n   * @param addr オーナーに属するユーザーのアドレス\r\n   *\r\n   * @return 処理に成功したらtrue、失敗したらfalse\r\n   */\r\n  function removeOwnerAddress(address addr) internal returns (bool) {\r\n    uint i = 0;\r\n\r\n    while (ownerAddresses[i] != addr) { i++; }\r\n\r\n    while (i < ownerAddresses.length - 1) {\r\n      ownerAddresses[i] = ownerAddresses[i + 1];\r\n      i++;\r\n    }\r\n\r\n    ownerAddresses.length--;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 最初のオーナー（contractをdeployしたユーザー）のアドレスを返す\r\n   *\r\n   * @return 最初のオーナーのアドレス\r\n   */\r\n  function primaryOwner() public view auth returns (address) {\r\n    return ownerAddresses[0];\r\n  }\r\n\r\n  /**\r\n   * 指定したアドレスがオーナーアドレスに登録されているか返す\r\n   *\r\n   * @param addr ユーザーのアドレス\r\n   *\r\n   * @return オーナーに含まれている場合はtrue、含まれていない場合はfalse\r\n   */\r\n  function isOwnerAddress(address addr) public view auth returns (bool) {\r\n    for (uint i = 0; i < ownerAddresses.length; i++) {\r\n      if (ownerAddresses[i] == addr) return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * オーナー数を返す\r\n   *\r\n   * @return オーナー数\r\n   */\r\n  function numOwnerAddress() public view auth returns (uint) {\r\n    return ownerAddresses.length;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for coinBalances\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * 指定したユーザーのdJPY残高を返す\r\n   *\r\n   * @param addr ユーザーのアドレス\r\n   *\r\n   * @return dJPY残高\r\n   */\r\n  function coinBalance(address addr) public view auth returns (uint) {\r\n    return coinBalances[addr];\r\n  }\r\n\r\n  /**\r\n   * 指定したユーザーのdJPYの残高を増やす\r\n   *\r\n   * @param addr ユーザーのアドレス\r\n   * @param amount 差分\r\n   *\r\n   * @return 処理に成功したらtrue、失敗したらfalse\r\n   */\r\n  function addCoinBalance(address addr, uint amount) public auth returns (bool) {\r\n    coinBalances[addr] = add(coinBalances[addr], amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 指定したユーザーのdJPYの残高を減らす\r\n   *\r\n   * @param addr ユーザーのアドレス\r\n   * @param amount 差分\r\n   *\r\n   * @return 処理に成功したらtrue、失敗したらfalse\r\n   */\r\n  function subCoinBalance(address addr, uint amount) public auth returns (bool) {\r\n    coinBalances[addr] = sub(coinBalances[addr], amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for tokenBalances\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * 指定したユーザーのSHINJIトークンの残高を返す\r\n   *\r\n   * @param addr ユーザーのアドレス\r\n   *\r\n   * @return SHINJIトークン残高\r\n   */\r\n  function tokenBalance(address addr) public view auth returns (uint) {\r\n    return tokenBalances[addr];\r\n  }\r\n\r\n  /**\r\n   * 指定したユーザーのSHINJIトークンの残高を増やす\r\n   *\r\n   * @param addr ユーザーのアドレス\r\n   * @param amount 差分\r\n   *\r\n   * @return 処理に成功したらtrue、失敗したらfalse\r\n   */\r\n  function addTokenBalance(address addr, uint amount) public auth returns (bool) {\r\n    tokenBalances[addr] = add(tokenBalances[addr], amount);\r\n\r\n    if (tokenBalances[addr] > 0 && !isOwnerAddress(addr)) {\r\n      addOwnerAddress(addr);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 指定したユーザーのSHINJIトークンの残高を減らす\r\n   *\r\n   * @param addr ユーザーのアドレス\r\n   * @param amount 差分\r\n   *\r\n   * @return 処理に成功したらtrue、失敗したらfalse\r\n   */\r\n  function subTokenBalance(address addr, uint amount) public auth returns (bool) {\r\n    tokenBalances[addr] = sub(tokenBalances[addr], amount);\r\n\r\n    if (tokenBalances[addr] <= 0) {\r\n      removeOwnerAddress(addr);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for coinAllowances\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * 送金許可金額を返す\r\n   *\r\n   * @param owner_ 送金者\r\n   * @param spender 送金代行者\r\n   *\r\n   * @return 送金許可金額\r\n   */\r\n  function coinAllowance(address owner_, address spender) public view auth returns (uint) {\r\n    return coinAllowances[owner_][spender];\r\n  }\r\n\r\n  /**\r\n   * 送金許可金額を指定した金額だけ増やす\r\n   *\r\n   * @param owner_ 送金者\r\n   * @param spender 送金代行者\r\n   * @param amount 金額\r\n   *\r\n   * @return 更新に成功したらtrue、失敗したらfalse\r\n   */\r\n  function addCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\r\n    coinAllowances[owner_][spender] = add(coinAllowances[owner_][spender], amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 送金許可金額を指定した金額だけ減らす\r\n   *\r\n   * @param owner_ 送金者\r\n   * @param spender 送金代行者\r\n   * @param amount 金額\r\n   *\r\n   * @return 更新に成功したらtrue、失敗したらfalse\r\n   */\r\n  function subCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\r\n    coinAllowances[owner_][spender] = sub(coinAllowances[owner_][spender], amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 送金許可金額を指定した値に更新する\r\n   *\r\n   * @param owner_ 送金者\r\n   * @param spender 送金代行者\r\n   * @param amount 送金許可金額\r\n   *\r\n   * @return 指定に成功したらtrue、失敗したらfalse\r\n   */\r\n  function setCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\r\n    coinAllowances[owner_][spender] = amount;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 権限チェック用関数のoverride\r\n   *\r\n   * @param src 実行者アドレス\r\n   * @param sig 実行関数の識別子\r\n   *\r\n   * @return 実行が許可されていればtrue、そうでなければfalse\r\n   */\r\n  function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n    sig; // #HACK\r\n\r\n    return  src == address(this) ||\r\n            src == owner ||\r\n            src == tokenAddress ||\r\n            src == authorityAddress ||\r\n            src == multiSigAddress;\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * アクセス権限を制御するクラス\r\n *\r\n */\r\ncontract IkuraAuthority is DSAuthority, DSAuth {\r\n  // データの永続化ストレージ\r\n  IkuraStorage tokenStorage;\r\n\r\n  // 対称アクションが投票を必要としている場かどうかのマッピング\r\n  // #TODO 後から投票アクションを増減させたいのであれば、これもstorageクラスに持っていったほうがよい？\r\n  mapping(bytes4 => bool) actionsWithToken;\r\n\r\n  // 誰からも呼び出すことができないアクション\r\n  mapping(bytes4 => bool) actionsForbidden;\r\n\r\n  // @NOTE リリース時にcontractのdeploy -> watch contract -> setOwnerの流れを\r\n  //省略したい場合は、ここで直接controllerのアドレスを指定するとショートカットできます\r\n  // 勿論テストは通らなくなるので、テストが通ったら試してね\r\n  constructor() public DSAuth() {\r\n    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\r\n    owner = controllerAddress;\r\n    LogSetOwner(controllerAddress);*/\r\n  }\r\n\r\n  /**\r\n   * ストレージを更新する\r\n   *\r\n   * @param storage_ 新しいストレージのアドレス\r\n   */\r\n  function changeStorage(address storage_) public auth {\r\n    tokenStorage = IkuraStorage(storage_);\r\n\r\n    // トークンの保有率による承認プロセスが必要なアクションを追加\r\n    actionsWithToken[stringToSig('mint(uint256)')] = true;\r\n    actionsWithToken[stringToSig('burn(uint256)')] = true;\r\n    actionsWithToken[stringToSig('confirmProposal(string, uint256)')] = true;\r\n    actionsWithToken[stringToSig('numberOfProposals(string)')] = true;\r\n\r\n    // 誰からも呼び出すことができないアクションを追加\r\n    actionsForbidden[stringToSig('forbiddenAction()')] = true;\r\n  }\r\n\r\n  /**\r\n   * 権限チェックのoverride\r\n   * オーナーのみ許可する\r\n   *\r\n   * @param src 実行者アドレス\r\n   * @param dst 実行contract\r\n   * @param sig 実行関数の識別子\r\n   *\r\n   * @return 呼び出し権限を持つ場合はtrue、そうでない場合はfalse\r\n   */\r\n  function canCall(address src, address dst, bytes4 sig) public constant returns (bool) {\r\n    // 投票が必要なアクションの場合には別ロジックでチェックを行う\r\n    if (actionsWithToken[sig]) return canCallWithAssociation(src, dst);\r\n\r\n    // 誰からも呼ぶことができないアクション\r\n    if (actionsForbidden[sig]) return canCallWithNoOne();\r\n\r\n    // デフォルトの権限チェック\r\n    return canCallDefault(src);\r\n  }\r\n\r\n  /**\r\n   * デフォルトではオーナーメンバー　かどうかをチェックする\r\n   *\r\n   * @return オーナーメンバーである場合はtrue、そうでない場合はfalse\r\n   */\r\n  function canCallDefault(address src) internal view returns (bool) {\r\n    return tokenStorage.isOwnerAddress(src);\r\n  }\r\n\r\n  /**\r\n   * トークン保有者による投票が必要なアクション\r\n   *\r\n   * @param src 実行者アドレス\r\n   * @param dst 実行contract\r\n   *\r\n   * @return アクションを許可する場合はtrue、却下された場合はfalse\r\n   */\r\n  function canCallWithAssociation(address src, address dst) internal view returns (bool) {\r\n    // warning抑制\r\n    dst;\r\n\r\n    return tokenStorage.isOwnerAddress(src) &&\r\n           (tokenStorage.numOwnerAddress() == 1 || tokenStorage.tokenBalance(src) > 0);\r\n  }\r\n\r\n  /**\r\n   * 誰からも呼ぶことのできないアクション\r\n   * テスト用の関数です\r\n   *\r\n   * @return 常にfalseを返す\r\n   */\r\n  function canCallWithNoOne() internal pure returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 関数定義からfunction identifierへ変換する\r\n   *\r\n   * #see http://solidity.readthedocs.io/en/develop/units-and-global-variables.html#block-and-transaction-properties\r\n   *\r\n   * @param str 関数定義\r\n   *\r\n   * @return ハッシュ化されたキーの4バイト\r\n   */\r\n  function stringToSig(string str) internal pure returns (bytes4) {\r\n    return bytes4(keccak256(str));\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"storage_\",\"type\":\"address\"}],\"name\":\"changeStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]","ContractName":"IkuraAuthority","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://90172c5b68957abb4cea55d69abf12e3b3f671052e773f666bcb0d07a0e11bf9"}]}