{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.19;\r\n\r\n\r\n/// @title Ethereum Claims Registry - A repository storing claims issued\r\n///        from any Ethereum account to any other Ethereum account.\r\ncontract EthereumClaimsRegistry {\r\n\r\n    mapping(address => mapping(address => mapping(bytes32 => bytes32))) public registry;\r\n\r\n    event ClaimSet(\r\n        address indexed issuer,\r\n        address indexed subject,\r\n        bytes32 indexed key,\r\n        bytes32 value,\r\n        uint updatedAt);\r\n\r\n    event ClaimRemoved(\r\n        address indexed issuer,\r\n        address indexed subject,\r\n        bytes32 indexed key,\r\n        uint removedAt);\r\n\r\n    /// @dev Create or update a claim\r\n    /// @param subject The address the claim is being issued to\r\n    /// @param key The key used to identify the claim\r\n    /// @param value The data associated with the claim\r\n    function setClaim(address subject, bytes32 key, bytes32 value) public {\r\n        registry[msg.sender][subject][key] = value;\r\n        ClaimSet(msg.sender, subject, key, value, now);\r\n    }\r\n\r\n    /// @dev Create or update a claim about yourself\r\n    /// @param key The key used to identify the claim\r\n    /// @param value The data associated with the claim\r\n    function setSelfClaim(bytes32 key, bytes32 value) public {\r\n        setClaim(msg.sender, key, value);\r\n    }\r\n\r\n    /// @dev Allows to retrieve claims from other contracts as well as other off-chain interfaces\r\n    /// @param issuer The address of the issuer of the claim\r\n    /// @param subject The address to which the claim was issued to\r\n    /// @param key The key used to identify the claim\r\n    function getClaim(address issuer, address subject, bytes32 key) public constant returns(bytes32) {\r\n        return registry[issuer][subject][key];\r\n    }\r\n\r\n    /// @dev Allows to remove a claims from the registry.\r\n    ///      This can only be done by the issuer or the subject of the claim.\r\n    /// @param issuer The address of the issuer of the claim\r\n    /// @param subject The address to which the claim was issued to\r\n    /// @param key The key used to identify the claim\r\n    function removeClaim(address issuer, address subject, bytes32 key) public {\r\n        require(msg.sender == issuer || msg.sender == subject);\r\n        require(registry[issuer][subject][key] != 0);\r\n        delete registry[issuer][subject][key];\r\n        ClaimRemoved(msg.sender, subject, key, now);\r\n    }\r\n}\r\n\r\n\r\n/// @title Revoke and Publish - an interface for publishing data and \r\n///        rotating access to publish new data\r\ncontract RevokeAndPublish {\r\n\r\n    event Revocation(\r\n        address indexed genesis,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint updatedAt);\r\n\r\n    mapping(address => address) public manager;\r\n    EthereumClaimsRegistry registry = EthereumClaimsRegistry(0xAcA1BCd8D0f5A9BFC95aFF331Da4c250CD9ac2Da);\r\n\r\n    function revokeAndPublish(address genesis, bytes32 key, bytes32 data, address newManager) public {\r\n        publish(genesis, key, data);\r\n        Revocation(genesis, manager[genesis], newManager, now);\r\n        manager[genesis] = newManager;\r\n    }\r\n\r\n    /// @dev Publish some data\r\n    /// @param genesis The address of the first publisher\r\n    /// @param key The key used to identify the claim\r\n    /// @param data The data associated with the claim\r\n    function publish(address genesis, bytes32 key, bytes32 data) public {\r\n        require((manager[genesis] == 0x0 && genesis == msg.sender) || manager[genesis] == msg.sender);\r\n        registry.setClaim(genesis, key, data);\r\n    }\r\n\r\n    /// @dev Lookup the currently published data for genesis\r\n    /// @param genesis The address of the first publisher\r\n    /// @param key The key used to identify the claim\r\n    function lookup(address genesis, bytes32 key) public constant returns(bytes32) {\r\n      return registry.getClaim(address(this), genesis, key);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"genesis\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"lookup\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"genesis\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"data\",\"type\":\"bytes32\"},{\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"revokeAndPublish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"genesis\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"bytes32\"},{\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"publish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"genesis\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"}]","ContractName":"RevokeAndPublish","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://080031745c3bac9a636032831a5ab09b74d421874ae71513dc90015d0623f551"}]}