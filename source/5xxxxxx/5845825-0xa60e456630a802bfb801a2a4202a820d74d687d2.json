{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract CCCP {\r\n    using SafeMath for uint256;\r\n    address[] users;\r\n    mapping(address => bool) usersExist;\r\n    mapping(address => address) users2users;\r\n    mapping(address => uint256) balances;\r\n    mapping(address => uint256) balancesTotal;\r\n    uint256 nextUserId = 0;\r\n    uint256 cyles = 100;\r\n    \r\n    event Register(address indexed user, address indexed parentUser);\r\n    event BalanceUp(address indexed user, uint256 amount);\r\n    event ReferalBonus(address indexed user, uint256 amount);\r\n    event GetMyMoney(address user, uint256 amount);\r\n    \r\n    function () payable public {\r\n        msg.sender.transfer(msg.value);\r\n    }\r\n\r\n    function register(address parentUser) payable public{\r\n        require(msg.value == 20 finney);\r\n        require(msg.sender != address(0));\r\n        require(parentUser != address(0));\r\n        require(!usersExist[msg.sender]);\r\n        _register(msg.sender, msg.value, parentUser);\r\n    }\r\n    \r\n    function _register(address user, uint256 amount, address parentUser) internal {\r\n        if (users.length > 0) {\r\n            require(parentUser!=user);\r\n            require(usersExist[parentUser]);\r\n        }\r\n        users.push(user);\r\n        usersExist[user]=true;\r\n        users2users[user]=parentUser;\r\n        emit Register(user, parentUser);\r\n        \r\n        uint256 referalBonus = amount.div(2);\r\n        \r\n        balances[parentUser] = balances[parentUser].add(referalBonus.div(2));\r\n        balancesTotal[parentUser] = balancesTotal[parentUser].add(referalBonus.div(2));\r\n        emit ReferalBonus(parentUser, referalBonus.div(2));\r\n        \r\n        balances[users2users[parentUser]] = balances[users2users[parentUser]].add(referalBonus.div(2));\r\n        balancesTotal[users2users[parentUser]] = balancesTotal[users2users[parentUser]].add(referalBonus.div(2));\r\n        emit ReferalBonus(users2users[parentUser], referalBonus.div(2));\r\n        \r\n        uint256 length = users.length;\r\n        uint256 existLastIndex = length.sub(1);\r\n        \r\n        for (uint i = 1; i <= cyles; i++) {\r\n            nextUserId = nextUserId.add(1);\r\n            if(nextUserId > existLastIndex){\r\n                nextUserId = 0;\r\n            }\r\n            balances[users[nextUserId]] = balances[users[nextUserId]].add(referalBonus.div(cyles));\r\n            balancesTotal[users[nextUserId]] = balancesTotal[users[nextUserId]].add(referalBonus.div(cyles));\r\n            emit BalanceUp(users[nextUserId], referalBonus.div(cyles));\r\n        }\r\n    }\r\n    \r\n    function getMyMoney() public {\r\n        require(balances[msg.sender]>0);\r\n        msg.sender.transfer(balances[msg.sender]);\r\n        emit GetMyMoney(msg.sender, balances[msg.sender]);\r\n        balances[msg.sender]=0;\r\n    }\r\n    \r\n    function balanceOf(address who) public constant returns (uint256 balance) {\r\n        return balances[who];\r\n    }\r\n    \r\n    function balanceTotalOf(address who) public constant returns (uint256 balanceTotal) {\r\n        return balancesTotal[who];\r\n    }\r\n    \r\n    function getNextUserId() public constant returns (uint256 nextUserId) {\r\n        return nextUserId;\r\n    }\r\n    \r\n    function getUserAddressById(uint256 id) public constant returns (address userAddress) {\r\n        return users[id];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getNextUserId\",\"outputs\":[{\"name\":\"nextUserId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"parentUser\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getUserAddressById\",\"outputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceTotalOf\",\"outputs\":[{\"name\":\"balanceTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"parentUser\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferalBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GetMyMoney\",\"type\":\"event\"}]","ContractName":"CCCP","CompilerVersion":"v0.4.25-nightly.2018.6.22+commit.9b67bdb3","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://64ebb08f84ff7a27de2b4d4a26eaaf9dd1c1cb37bda2fb2ffbead01bd7cefeb1"}]}