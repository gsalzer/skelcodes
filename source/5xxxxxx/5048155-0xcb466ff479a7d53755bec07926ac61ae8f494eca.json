{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract Freeze {\r\n    using SafeMath for uint256;\r\n    struct deposit_st{\r\n        uint256 amount;\r\n        uint256 term;\r\n    }\r\n    struct deposit_list{\r\n        uint256[] list_key;\r\n        mapping(uint256=>deposit_st) deposits;\r\n    }\r\n    address public service_founder;\r\n    mapping (address =>deposit_list) depositors;\r\n    event Deposit(address account,uint256 amount,uint256 term);\r\n    event Withdrawal(address account,uint index);\r\n    event Transfer(address account,address to,uint256 amount,uint256 term);\r\n    \r\n    function Freeze() public {\r\n        service_founder = msg.sender;\r\n    }\r\n    function () public  payable {\r\n        require(msg.sender != 0x0);\r\n        deposit(now);\r\n    }\r\n    function deposit_period (uint256 number_of_days) public payable {\r\n        uint256 term =now+number_of_days*86400;\r\n        deposit(term);\r\n    }\r\n    function deposit(uint256 term) public payable {\r\n        uint256 amount=msg.value;\r\n        require(msg.sender != 0x0);\r\n        require(amount>0);\r\n        uint256 fee=amount.div(200);\r\n        uint256 amount_of_deposit=amount.sub(fee);\r\n        service_founder.transfer(fee);\r\n        deposit_to_address(msg.sender,amount_of_deposit,term);\r\n        Deposit (msg.sender,amount_of_deposit,term);\r\n    }\r\n    function withdrawal(uint index) public {\r\n        //validate deposit available\r\n        require(index<depositors[msg.sender].list_key.length);\r\n        uint256 createtime=depositors[msg.sender].list_key[index];\r\n        require(depositors[msg.sender].deposits[createtime].amount>0);\r\n        require(depositors[msg.sender].deposits[createtime].term<now);\r\n        //return ethereum to depositors\r\n        msg.sender.transfer(depositors[msg.sender].deposits[createtime].amount);\r\n        //remove deposit\r\n        remove_deposit(msg.sender,index);\r\n        //event\r\n        Withdrawal(msg.sender,index);\r\n    }\r\n    function transfer(address to,uint index) public{\r\n        //validate deposit available\r\n        require(index<depositors[msg.sender].list_key.length);\r\n        uint256 createtime=depositors[msg.sender].list_key[index];\r\n        require(depositors[msg.sender].deposits[createtime].amount>0);\r\n        require(depositors[msg.sender].deposits[createtime].term<now);\r\n        //\r\n        uint256 _amount=depositors[msg.sender].deposits[createtime].amount;\r\n        uint256 _term=depositors[msg.sender].deposits[createtime].term;\r\n        //remove the deposit from the old account\r\n        remove_deposit(msg.sender,index);\r\n        //deposit to the new account\r\n        deposit_to_address(to,_amount,_term);\r\n        //event\r\n        Transfer(msg.sender,to,_amount,_term);\r\n    }\r\n     function deposit_to_address(address account,uint256 _amount,uint256 _term) private{\r\n        uint256 currenttime=now;\r\n        while(depositors[account].deposits[currenttime].amount>0){\r\n            currenttime++;\r\n        }\r\n        depositors[account].deposits[currenttime]=deposit_st({amount:_amount,term:_term});\r\n        depositors[account].list_key.push(currenttime);\r\n    }\r\n    function remove_deposit(address account,uint index) private{\r\n        uint256 createtime=depositors[account].list_key[index];\r\n        //remove deposit \r\n        delete depositors[account].deposits[createtime];\r\n        //remove from list key\r\n        uint count=depositors[account].list_key.length;\r\n        depositors[account].list_key[index]=depositors[account].list_key[count-1];\r\n        delete depositors[account].list_key[count-1];\r\n        depositors[account].list_key.length--;\r\n    }\r\n    function get_list_deposit_key(address account) public constant returns (uint256[]){\r\n        return depositors[account].list_key;\r\n    }\r\n    function get_deposit_balance(address account,uint256 key) public constant returns (uint256){\r\n        return depositors[account].deposits[key].amount;\r\n    }\r\n    function get_deposit_term(address account,uint256 key) public constant returns (uint256){\r\n        return depositors[account].deposits[key].term;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"get_deposit_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"get_deposit_term\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"get_list_deposit_key\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"service_founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number_of_days\",\"type\":\"uint256\"}],\"name\":\"deposit_period\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"term\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"term\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"term\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Freeze","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fa42f026e7e5eb20d74d0a4a8d92ac2d6fb2705d2ac8ba287ed162502137c251"}]}