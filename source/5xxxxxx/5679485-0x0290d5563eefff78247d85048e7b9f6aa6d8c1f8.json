{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract DogCoreInterface {\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    function getDog(uint256 _id)\r\n        external\r\n        view\r\n        returns (\r\n        //冷却期索引号\r\n        uint256 cooldownIndex,\r\n        //本次冷却期结束所在区块\r\n        uint256 nextActionAt,\r\n        //配种的公狗ID\r\n        uint256 siringWithId,\r\n        //出生时间\r\n        uint256 birthTime,\r\n        //母亲ID\r\n        uint256 matronId,\r\n        //父亲ID\r\n        uint256 sireId,\r\n        //代数\r\n        uint256 generation,\r\n        //基因\r\n        uint256 genes,\r\n        //变异，0表示未变异，1-7表示变异\r\n        uint8  variation,\r\n        //0代祖先的ID\r\n        uint256 gen0\r\n    );\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function sendMoney(address _to, uint256 _money) external;\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\n\r\n/*\r\n    LotteryBase 主要定义了开奖信息，奖金池转入函数以及判断是否开必中\r\n*/\r\ncontract LotteryBase {\r\n    \r\n    // 当前开奖基因位数\r\n    uint8 public currentGene;\r\n    // 当前开奖所在区块\r\n    uint256 public lastBlockNumber;\r\n    // 随机数种子\r\n    uint256 randomSeed = 1;\r\n    // 奖金池地址\r\n    address public bonusPool;\r\n    // 中奖信息\r\n    struct CLottery {\r\n        // 该期中奖基因\r\n        uint8[7]        luckyGenes;\r\n        // 该期奖金池总额\r\n        uint256         totalAmount;\r\n        // 该期第7个基因开奖所在区块\r\n        uint256         openBlock;\r\n        // 是否发奖完毕\r\n        bool            isReward;\r\n        // 未开一等奖标记\r\n        bool         noFirstReward;\r\n    }\r\n    // 历史开奖信息\r\n    CLottery[] public CLotteries;\r\n    // 发奖合约地址\r\n    address public finalLottery;\r\n    // 蓄奖池金额\r\n    uint256 public SpoolAmount = 0;\r\n    // 宠物信息接口\r\n    DogCoreInterface public dogCore;\r\n    // 随机开奖事件\r\n    event OpenLottery(uint8 currentGene, uint8 luckyGenes, uint256 currentTerm, uint256 blockNumber, uint256 totalAmount);\r\n    //必中开奖事件\r\n    event OpenCarousel(uint256 luckyGenes, uint256 currentTerm, uint256 blockNumber, uint256 totalAmount);\r\n    \r\n    \r\n    //\r\n    modifier onlyCEO() {\r\n        require(msg.sender == dogCore.ceoAddress());\r\n        _;  \r\n    }\r\n    //\r\n    modifier onlyCFO() {\r\n        require(msg.sender == dogCore.cfoAddress());\r\n        _;  \r\n    }\r\n    /*\r\n        蓄奖池转入奖金池函数\r\n    */\r\n    function toLotteryPool(uint amount) public onlyCFO {\r\n        require(SpoolAmount >= amount);\r\n        SpoolAmount -= amount;\r\n    }\r\n    /*\r\n    判断当期是否开必中\r\n    */\r\n    function _isCarousal(uint256 currentTerm) external view returns(bool) {\r\n       return (currentTerm > 1 && CLotteries[currentTerm - 2].noFirstReward && CLotteries[currentTerm - 1].noFirstReward); \r\n    }\r\n    \r\n    /*\r\n      返回当前期数\r\n    */ \r\n    function getCurrentTerm() external view returns (uint256) {\r\n\r\n        return (CLotteries.length - 1);\r\n    }\r\n}\r\n\r\n\r\n/*\r\n    LotteryGenes主要实现奖宠物原始基因转化为兑奖数组\r\n*/\r\ncontract LotteryGenes is LotteryBase {\r\n    /*\r\n     将基因数字格式转换为抽奖数组格式\r\n    */\r\n    function convertGeneArray(uint256 gene) public pure returns(uint8[7]) {\r\n        uint8[28] memory geneArray; \r\n        uint8[7] memory lotteryArray;\r\n        uint index = 0;\r\n        for (index = 0; index < 28; index++) {\r\n            uint256 geneItem = gene % (2 ** (5 * (index + 1)));\r\n            geneItem /= (2 ** (5 * index));\r\n            geneArray[index] = uint8(geneItem);\r\n        }\r\n        for (index = 0; index < 7; index++) {\r\n            uint size = 4 * index;\r\n            lotteryArray[index] = geneArray[size];\r\n            \r\n        }\r\n        return lotteryArray;\r\n    }\r\n\r\n    /**\r\n       将显性基因串拼凑成原始基因数字\r\n    */ \r\n    function convertGene(uint8[7] luckyGenes) public pure returns(uint256) {\r\n        uint8[28] memory geneArray;\r\n        for (uint8 i = 0; i < 28; i++) {\r\n            if (i%4 == 0) {\r\n                geneArray[i] = luckyGenes[i/4];\r\n            } else {\r\n                geneArray[i] = 6;\r\n            }\r\n        }\r\n        uint256 gene = uint256(geneArray[0]);\r\n        \r\n        for (uint8 index = 1; index < 28; index++) {\r\n            uint256 geneItem = uint256(geneArray[index]);\r\n            gene += geneItem << (index * 5);\r\n        }\r\n        return gene;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n    SetLottery主要实现了随机开奖和必中开奖\r\n*/\r\ncontract SetLottery is LotteryGenes {\r\n\r\n    function random(uint8 seed) internal returns(uint8) {\r\n        randomSeed = block.timestamp;\r\n        return uint8(uint256(keccak256(randomSeed, block.difficulty))%seed)+1;\r\n    }\r\n\r\n    /*\r\n     随机开奖函数，每一期开7次。\r\n     currentGene表示当期开奖的第N个基因\r\n     若当前currentGene指标为0，则表示在开奖期未开任何数字，或者开奖期已经开完了所有数字\r\n     当前开奖期最后一个基因开完后，记录当前所在区块号和当前奖金池金额\r\n     返回值分别为当前开奖基因(0代表不存在)、查询开奖基因(0代表不存在)、\r\n     开奖状态(0表示开奖成功，1表示当期开奖结束且在等待发奖，2表示当前基因开奖区块与上个基因开奖区块相同,3表示奖金池金额不足)\r\n     */\r\n    function openLottery(uint8 _viewId) public returns(uint8,uint8) {\r\n        uint8 viewId = _viewId;\r\n        require(viewId < 7);\r\n        // 获取当前中奖信息\r\n        uint256 currentTerm = CLotteries.length - 1;\r\n        CLottery storage clottery = CLotteries[currentTerm];\r\n\r\n        // 如果7个基因都完成开奖并且当期没有发奖，则说明当期所有基因已经开奖完毕在等待发奖，退出\r\n        if (currentGene == 0 && clottery.openBlock > 0 && clottery.isReward == false) {\r\n            // 触发事件，返回查询的基因\r\n            OpenLottery(viewId, clottery.luckyGenes[viewId], currentTerm, 0, 0);\r\n            //分别返回查询基因，状态1 (表示当期所有基因开奖完毕在等待发奖)\r\n            return (clottery.luckyGenes[viewId],1);\r\n        }\r\n        // 如果上个基因开奖和本次开奖在同一个区块，退出\r\n        if (lastBlockNumber == block.number) {\r\n            // 触发事件，返回查询的基因\r\n            OpenLottery(viewId, clottery.luckyGenes[viewId], currentTerm, 0, 0);\r\n            //分别返回查询基因，状态2 (当前基因开奖区块与上个基因开奖区块相同)\r\n            return (clottery.luckyGenes[viewId],2);\r\n        }\r\n        // 如果当前开奖基因位为0且当期已经发奖，则进入下一期开奖\r\n        if (currentGene == 0 && clottery.isReward == true) {\r\n            // 初始化当前lottery信息\r\n            CLottery memory _clottery;\r\n            _clottery.luckyGenes = [0,0,0,0,0,0,0];\r\n            _clottery.totalAmount = uint256(0);\r\n            _clottery.isReward = false;\r\n            _clottery.openBlock = uint256(0);\r\n            currentTerm = CLotteries.push(_clottery) - 1;\r\n        }\r\n\r\n        // 如果前两期都没有一等奖产生，则该期产生必中奖，退出随机开奖函数\r\n        if (this._isCarousal(currentTerm)) {\r\n            revert();\r\n        }\r\n\r\n        //开奖结果\r\n        uint8 luckyNum = 0;\r\n        \r\n        if (currentGene == 6) {\r\n            // 如果奖金池金额为零，则退出\r\n            if (bonusPool.balance <= SpoolAmount) {\r\n                // 触发事件，返回查询的基因\r\n                OpenLottery(viewId, clottery.luckyGenes[viewId], currentTerm, 0, 0);\r\n                //分别返回查询基因，状态3 (奖金池金额不足)\r\n                return (clottery.luckyGenes[viewId],3);\r\n            }\r\n            //将随机数赋值给当前基因\r\n            luckyNum = random(8);\r\n            CLotteries[currentTerm].luckyGenes[currentGene] = luckyNum;\r\n            //触发开奖事件\r\n            OpenLottery(currentGene, luckyNum, currentTerm, block.number, bonusPool.balance);\r\n            //如果当前为最后一个开奖基因，则下一个开奖基因位为0，同时记录下当前区块号并写入开奖信息，同时将奖金池金额写入开奖信息, 同时启动主合约\r\n            currentGene = 0;\r\n            CLotteries[currentTerm].openBlock = block.number;\r\n            CLotteries[currentTerm].totalAmount = bonusPool.balance;\r\n            //记录当前开奖所在区块\r\n            lastBlockNumber = block.number;\r\n        } else { \r\n            //将随机数赋值给当前基因\r\n        \r\n            luckyNum = random(12);\r\n            CLotteries[currentTerm].luckyGenes[currentGene] = luckyNum;\r\n\r\n            //触发开奖事件\r\n            OpenLottery(currentGene, luckyNum, currentTerm, 0, 0);\r\n            //其它情况下，下一个开奖基因位加1\r\n            currentGene ++;\r\n            //记录当前开奖所在区块\r\n            lastBlockNumber = block.number;\r\n        }\r\n        //分别返回开奖基因，查询基因和开奖成功状态\r\n        return (luckyNum,0);\r\n    } \r\n\r\n    function random2() internal view returns (uint256) {\r\n        return uint256(uint256(keccak256(block.timestamp, block.difficulty))%uint256(dogCore.totalSupply()) + 1);\r\n    }\r\n\r\n    /*\r\n     必中开奖函数,每期开一次\r\n    */\r\n    function openCarousel() public {\r\n        //获取当前开奖信息\r\n        uint256 currentTerm = CLotteries.length - 1;\r\n        CLottery storage clottery = CLotteries[currentTerm];\r\n\r\n        // 如果当前开奖基因指针为0且开奖基因存在，且未发奖，则说明当前基因开奖完毕，在等待发奖\r\n        if (currentGene == 0 && clottery.openBlock > 0 && clottery.isReward == false) {\r\n\r\n            //触发开奖事件,返回当期现有开奖数据\r\n            OpenCarousel(convertGene(clottery.luckyGenes), currentTerm, clottery.openBlock, clottery.totalAmount);\r\n        }\r\n\r\n        // 如果开奖基因指针为0且开奖基因存在，并且发奖完毕，则进入下一开奖周期\r\n        if (currentGene == 0 && clottery.openBlock > 0 && clottery.isReward == true) {\r\n            CLottery memory _clottery;\r\n            _clottery.luckyGenes = [0,0,0,0,0,0,0];\r\n            _clottery.totalAmount = uint256(0);\r\n            _clottery.isReward = false;\r\n            _clottery.openBlock = uint256(0);\r\n            currentTerm = CLotteries.push(_clottery) - 1;\r\n        }\r\n\r\n        //期数大于3 且前三期未产生特等奖\r\n        require (this._isCarousal(currentTerm));\r\n        // 随机获取必中基因\r\n        uint256 genes = _getValidRandomGenes();\r\n        require (genes > 0);\r\n        uint8[7] memory luckyGenes = convertGeneArray(genes);\r\n        //触发开奖事件\r\n        OpenCarousel(genes, currentTerm, block.number, bonusPool.balance);\r\n\r\n        //写入记录\r\n        CLotteries[currentTerm].luckyGenes = luckyGenes;\r\n        CLotteries[currentTerm].openBlock = block.number;\r\n        CLotteries[currentTerm].totalAmount = bonusPool.balance;\r\n        \r\n    }\r\n    \r\n    /*\r\n      随机获取合法的必中基因\r\n    */\r\n    function _getValidRandomGenes() internal view returns (uint256) {\r\n        uint256 luckyDog = random2();\r\n        uint256 genes = _validGenes(luckyDog);\r\n        uint256 totalSupply = dogCore.totalSupply();\r\n        if (genes > 0) {\r\n            return genes;\r\n        }  \r\n        // 如果dog不能兑奖，则渐进振荡判断其它dog是否满足条件\r\n        uint256 min = (luckyDog < totalSupply-luckyDog) ? (luckyDog - 1) : totalSupply-luckyDog;\r\n        for (uint256 i = 1; i < min + 1; i++) {\r\n            genes = _validGenes(luckyDog - i);\r\n            if (genes > 0) {\r\n                break;\r\n            }\r\n            genes = _validGenes(luckyDog + i);\r\n            if (genes > 0) {\r\n                    break;\r\n                }\r\n            }\r\n            // min次震荡仍然未找到可兑奖基因\r\n        if (genes == 0) {\r\n            //luckyDog右侧更长\r\n            if (min == luckyDog - 1) {\r\n                for (i = min + luckyDog; i < totalSupply + 1; i++) {\r\n                        genes = _validGenes(i);\r\n                        if (genes > 0) {\r\n                            break;\r\n                        }\r\n                    }   \r\n                }\r\n            //luckyDog左侧更长\r\n            if (min == totalSupply - luckyDog) {\r\n                for (i = min; i < luckyDog; i++) {\r\n                        genes = _validGenes(luckyDog - i - 1);\r\n                        if (genes > 0) {\r\n                            break;\r\n                        }\r\n                    }   \r\n                }\r\n            }\r\n        return genes;\r\n    }\r\n\r\n\r\n    /*\r\n      判断狗是否能兑奖，能则直接返回狗的基因，不能则返回0\r\n    */\r\n    function _validGenes(uint256 dogId) internal view returns (uint256) {\r\n\r\n        var(, , , , , ,generation, genes, variation,) = dogCore.getDog(dogId);\r\n        if (generation == 0 || dogCore.ownerOf(dogId) == finalLottery || variation > 0) {\r\n            return 0;\r\n        } else {\r\n            return genes;\r\n        }\r\n    }\r\n\r\n    \r\n}\r\n\r\n/*\r\n  LotteryCore是开奖函数的入口合约\r\n  开奖包括必中开奖和随机开奖\r\n  同时LotteryCore提供对外查询接口\r\n*/\r\n\r\ncontract LotteryCore is SetLottery {\r\n    \r\n    // 构造函数，传入奖金池地址,初始化中奖信息\r\n    function LotteryCore(address _ktAddress) public {\r\n\r\n        bonusPool = _ktAddress;\r\n        dogCore = DogCoreInterface(_ktAddress);\r\n\r\n        //初始化中奖信息\r\n        CLottery memory _clottery;\r\n        _clottery.luckyGenes = [0,0,0,0,0,0,0];\r\n        _clottery.totalAmount = uint256(0);\r\n        _clottery.isReward = false;\r\n        _clottery.openBlock = uint256(0);\r\n        CLotteries.push(_clottery);\r\n    }\r\n    /*\r\n    设置FinalLottery地址\r\n    */\r\n    function setFinalLotteryAddress(address _flAddress) public onlyCEO {\r\n        finalLottery = _flAddress;\r\n    }\r\n    /*\r\n    获取当前中奖记录\r\n    */\r\n    function getCLottery() \r\n        public \r\n        view \r\n        returns (\r\n            uint8[7]        luckyGenes,\r\n            uint256         totalAmount,\r\n            uint256         openBlock,\r\n            bool            isReward,\r\n            uint256         term\r\n        ) {\r\n            term = CLotteries.length - uint256(1);\r\n            luckyGenes = CLotteries[term].luckyGenes;\r\n            totalAmount = CLotteries[term].totalAmount;\r\n            openBlock = CLotteries[term].openBlock;\r\n            isReward = CLotteries[term].isReward;\r\n    }\r\n\r\n    /*\r\n    更改发奖状态\r\n    */\r\n    function rewardLottery(bool isMore) external {\r\n        // require contract address is final lottery\r\n        require(msg.sender == finalLottery);\r\n\r\n        uint256 term = CLotteries.length - 1;\r\n        CLotteries[term].isReward = true;\r\n        CLotteries[term].noFirstReward = isMore;\r\n    }\r\n\r\n    /*\r\n    转入蓄奖池\r\n    */\r\n    function toSPool(uint amount) external {\r\n        // require contract address is final lottery\r\n        require(msg.sender == finalLottery);\r\n\r\n        SpoolAmount += amount;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n    FinalLottery 包含兑奖函数和发奖函数\r\n    中奖信息flotteries存入开奖期数到[各等奖获奖者，各等奖中奖金额]的映射\r\n*/\r\ncontract FinalLottery {\r\n    bool public isLottery = true;\r\n    LotteryCore lotteryCore;\r\n    DogCoreInterface dogCore;\r\n    uint8[7] public luckyGenes;\r\n    uint256         totalAmount;\r\n    uint256         openBlock;\r\n    bool            isReward;\r\n    uint256         currentTerm;\r\n    uint256  public duration;\r\n    uint8   public  lotteryRatio;\r\n    uint8[7] public lotteryParam;\r\n    uint8   public  carousalRatio;\r\n    uint8[7] public carousalParam; \r\n    // 中奖信息\r\n    struct FLottery {\r\n        //  该期各等奖获奖者\r\n        //  一等奖\r\n        address[]        owners0;\r\n        uint256[]        dogs0;\r\n        //  二等奖\r\n        address[]        owners1;\r\n        uint256[]        dogs1;\r\n        //  三等奖\r\n        address[]        owners2;\r\n        uint256[]        dogs2;\r\n        //  四等奖\r\n        address[]        owners3;\r\n        uint256[]        dogs3;\r\n        //  五等奖\r\n        address[]        owners4;\r\n        uint256[]        dogs4;\r\n        //  六等奖\r\n        address[]        owners5;\r\n        uint256[]        dogs5;\r\n        //  七等奖\r\n        address[]        owners6;\r\n        uint256[]        dogs6;\r\n        // 中奖金额\r\n        uint256[]       reward;\r\n    }\r\n    // 兑奖发奖信息\r\n    mapping(uint256 => FLottery) flotteries;\r\n    // 构造函数\r\n    function FinalLottery(address _lcAddress) public {\r\n        lotteryCore = LotteryCore(_lcAddress);\r\n        dogCore = DogCoreInterface(lotteryCore.bonusPool());\r\n        duration = 11520;\r\n        lotteryRatio = 23;\r\n        lotteryParam = [46,16,10,9,8,6,5];\r\n        carousalRatio = 12;\r\n        carousalParam = [35,18,14,12,8,7,6];\r\n        \r\n    }\r\n    \r\n    // 发奖事件\r\n    event DistributeLottery(uint256[] rewardArray, uint256 currentTerm);\r\n    // 兑奖事件\r\n    event RegisterLottery(uint256 dogId, address owner, uint8 lotteryClass, string result);\r\n    // 设置兑奖周期\r\n    function setLotteryDuration(uint256 durationBlocks) public {\r\n        require(msg.sender == dogCore.ceoAddress());\r\n        require(durationBlocks > 140);\r\n        require(durationBlocks < block.number);\r\n        duration = durationBlocks;\r\n    }\r\n    /*\r\n     登记兑奖函数,发生在当期开奖结束之后7天内（即40，320个区块内）\r\n    */\r\n    function registerLottery(uint256 dogId) public returns (uint8) {\r\n        uint256 _dogId = dogId;\r\n        (luckyGenes, totalAmount, openBlock, isReward, currentTerm) = lotteryCore.getCLottery();\r\n        // 获取当前开奖信息\r\n        address owner = dogCore.ownerOf(_dogId);\r\n        // 回收的不能兑奖\r\n        require (owner != address(this));\r\n        // 调用者必须是主合约\r\n        require(address(dogCore) == msg.sender);\r\n        // 所有基因位开奖完毕（指针为0同时奖金池大于0）且未发奖且未兑奖结束\r\n        require(totalAmount > 0 && isReward == false && openBlock > (block.number-duration));\r\n        // 获取该宠物的基因，代数，出生时间\r\n        var(, , , birthTime, , ,generation,genes, variation,) = dogCore.getDog(_dogId);\r\n        // 出生日期小于开奖时间\r\n        require(birthTime < openBlock);\r\n        // 0代狗不能兑奖\r\n        require(generation > 0);\r\n        // 变异的不能兑奖\r\n        require(variation == 0);\r\n        // 判断该用户获几等奖，100表示未中奖\r\n        uint8 _lotteryClass = getLotteryClass(luckyGenes, genes);\r\n        // 若未获奖则退出\r\n        require(_lotteryClass < 7);\r\n        // 避免重复兑奖\r\n        address[] memory owners;\r\n        uint256[] memory dogs;\r\n         (dogs, owners) = _getLuckyList(currentTerm, _lotteryClass);\r\n            \r\n        for (uint i = 0; i < dogs.length; i++) {\r\n            if (_dogId == dogs[i]) {\r\n            //    revert();\r\n                RegisterLottery(_dogId, owner, _lotteryClass,\"dog already registered\");\r\n                 return 5;\r\n            }\r\n        }\r\n        // 将登记中奖者的账户存入奖金信息表\r\n        _pushLuckyInfo(currentTerm, _lotteryClass, owner, _dogId);\r\n        // 触发兑奖成功事件\r\n        RegisterLottery(_dogId, owner, _lotteryClass,\"successful\");\r\n        return 0;\r\n    }\r\n    /*\r\n    发奖函数，发生在当期开奖结束之后\r\n    */\r\n    \r\n    function distributeLottery() public returns (uint8) {\r\n        (luckyGenes, totalAmount, openBlock, isReward, currentTerm) = lotteryCore.getCLottery();\r\n        \r\n        // 必须在当期开奖结束一周之后发奖\r\n        require(openBlock > 0 && openBlock < (block.number-duration));\r\n\r\n        //奖金池可用金额必须大于或等于0\r\n        require(totalAmount >= lotteryCore.SpoolAmount());\r\n\r\n        // 如果已经发奖\r\n        if (isReward == true) {\r\n            DistributeLottery(flotteries[currentTerm].reward, currentTerm);\r\n            return 1;\r\n        }\r\n        uint256 legalAmount = totalAmount - lotteryCore.SpoolAmount();\r\n        uint256 totalDistribute = 0;\r\n        uint8[7] memory lR;\r\n        uint8 ratio;\r\n\r\n        // 必中和随机两种不同的奖金分配比率\r\n        if (lotteryCore._isCarousal(currentTerm) ) {\r\n            lR = carousalParam;\r\n            ratio = carousalRatio;\r\n        } else {\r\n            lR = lotteryParam;\r\n            ratio = lotteryRatio;\r\n        }\r\n        // 计算各奖项金额并分发给中奖者\r\n        for (uint8 i = 0; i < 7; i++) {\r\n            address[] memory owners;\r\n            uint256[] memory dogs;\r\n            (dogs, owners) = _getLuckyList(currentTerm, i);\r\n            if (owners.length > 0) {\r\n                    uint256 reward = (legalAmount * ratio * lR[i])/(10000 * owners.length);\r\n                    totalDistribute += reward * owners.length;\r\n                    // 转给CFO的手续费（10%）\r\n                    dogCore.sendMoney(dogCore.cfoAddress(),reward * owners.length/10);\r\n                    \r\n                    for (uint j = 0; j < owners.length; j++) {\r\n                        address gen0Add;\r\n                        if (i == 0) {\r\n                            // 转账\r\n                            dogCore.sendMoney(owners[j],reward*95*9/1000);\r\n                            // gen0 奖励\r\n                            gen0Add = _getGen0Address(dogs[j]);\r\n                            assert(gen0Add != address(0));\r\n                            dogCore.sendMoney(gen0Add,reward*5/100);\r\n                        } else if (i == 1) {\r\n                            // 转账\r\n                            dogCore.sendMoney(owners[j],reward*97*9/1000);\r\n                            // gen0 奖励\r\n                            gen0Add = _getGen0Address(dogs[j]);\r\n                            assert(gen0Add != address(0));\r\n                            dogCore.sendMoney(gen0Add,reward*3/100);\r\n                        } else if (i == 2) {\r\n                            // 转账\r\n                            dogCore.sendMoney(owners[j],reward*98*9/1000);\r\n                            // gen0 奖励\r\n                            gen0Add = _getGen0Address(dogs[j]);\r\n                            assert(gen0Add != address(0));\r\n                            dogCore.sendMoney(gen0Add,reward*2/100);\r\n                        } else {\r\n                            // 转账\r\n                            dogCore.sendMoney(owners[j],reward*9/10);\r\n                        }\r\n                    }\r\n                  // 记录各等奖发奖金额\r\n                    flotteries[currentTerm].reward.push(reward);  \r\n                } else {\r\n                    flotteries[currentTerm].reward.push(0); \r\n                } \r\n        }\r\n        //没有人登记一等奖中奖，将奖金池5%转入蓄奖池,并且更新无一等奖计数\r\n        if (flotteries[currentTerm].owners0.length == 0) {\r\n            lotteryCore.toSPool((lotteryCore.bonusPool().balance - lotteryCore.SpoolAmount())/20);\r\n            lotteryCore.rewardLottery(true);\r\n        } else {\r\n            //发奖完成之后，更新当前奖项状态、将当前奖项加入历史记录\r\n            lotteryCore.rewardLottery(false);\r\n        }\r\n        \r\n        DistributeLottery(flotteries[currentTerm].reward, currentTerm);\r\n        return 0;\r\n    }\r\n\r\n     /*\r\n    获取狗的gen0祖先的主人账户\r\n    */\r\n    function _getGen0Address(uint256 dogId) internal view returns(address) {\r\n        var(, , , , , , , , , gen0) = dogCore.getDog(dogId);\r\n        return dogCore.ownerOf(gen0);\r\n    }\r\n\r\n    /*\r\n      通过奖项等级获取中奖者列表和中奖狗列表\r\n    */\r\n    function _getLuckyList(uint256 currentTerm1, uint8 lotclass) public view returns (uint256[] kts, address[] ons) {\r\n        if (lotclass==0) {\r\n            ons = flotteries[currentTerm1].owners0;\r\n            kts = flotteries[currentTerm1].dogs0;\r\n        } else if (lotclass==1) {\r\n            ons = flotteries[currentTerm1].owners1;\r\n            kts = flotteries[currentTerm1].dogs1;\r\n        } else if (lotclass==2) {\r\n            ons = flotteries[currentTerm1].owners2;\r\n            kts = flotteries[currentTerm1].dogs2;\r\n        } else if (lotclass==3) {\r\n            ons = flotteries[currentTerm1].owners3;\r\n            kts = flotteries[currentTerm1].dogs3;\r\n        } else if (lotclass==4) {\r\n            ons = flotteries[currentTerm1].owners4;\r\n            kts = flotteries[currentTerm1].dogs4;\r\n        } else if (lotclass==5) {\r\n            ons = flotteries[currentTerm1].owners5;\r\n            kts = flotteries[currentTerm1].dogs5;\r\n        } else if (lotclass==6) {\r\n            ons = flotteries[currentTerm1].owners6;\r\n            kts = flotteries[currentTerm1].dogs6;\r\n        }\r\n    }\r\n\r\n    /*\r\n      将owner和dogId推入中奖信息存储\r\n    */\r\n    function _pushLuckyInfo(uint256 currentTerm1, uint8 _lotteryClass, address owner, uint256 _dogId) internal {\r\n        if (_lotteryClass == 0) {\r\n            flotteries[currentTerm1].owners0.push(owner);\r\n            flotteries[currentTerm1].dogs0.push(_dogId);\r\n        } else if (_lotteryClass == 1) {\r\n            flotteries[currentTerm1].owners1.push(owner);\r\n            flotteries[currentTerm1].dogs1.push(_dogId);\r\n        } else if (_lotteryClass == 2) {\r\n            flotteries[currentTerm1].owners2.push(owner);\r\n            flotteries[currentTerm1].dogs2.push(_dogId);\r\n        } else if (_lotteryClass == 3) {\r\n            flotteries[currentTerm1].owners3.push(owner);\r\n            flotteries[currentTerm1].dogs3.push(_dogId);\r\n        } else if (_lotteryClass == 4) {\r\n            flotteries[currentTerm1].owners4.push(owner);\r\n            flotteries[currentTerm1].dogs4.push(_dogId);\r\n        } else if (_lotteryClass == 5) {\r\n            flotteries[currentTerm1].owners5.push(owner);\r\n            flotteries[currentTerm1].dogs5.push(_dogId);\r\n        } else if (_lotteryClass == 6) {\r\n            flotteries[currentTerm1].owners6.push(owner);\r\n            flotteries[currentTerm1].dogs6.push(_dogId);\r\n        }\r\n    }\r\n\r\n    /*\r\n      检测该基因获奖等级\r\n    */\r\n    function getLotteryClass(uint8[7] luckyGenesArray, uint256 genes) internal view returns(uint8) {\r\n        // 不存在开奖信息,则直接返回未中奖\r\n        if (currentTerm < 0) {\r\n            return 100;\r\n        }\r\n        \r\n        uint8[7] memory dogArray = lotteryCore.convertGeneArray(genes);\r\n        uint8 cnt = 0;\r\n        uint8 lnt = 0;\r\n        for (uint i = 0; i < 6; i++) {\r\n\r\n            if (luckyGenesArray[i] > 0 && luckyGenesArray[i] == dogArray[i]) {\r\n                cnt++;\r\n            }\r\n        }\r\n        if (luckyGenesArray[6] > 0 && luckyGenesArray[6] == dogArray[6]) {\r\n            lnt = 1;\r\n        }\r\n        uint8 lotclass = 100;\r\n        if (cnt==6 && lnt==1) {\r\n            lotclass = 0;\r\n        } else if (cnt==6 && lnt==0) {\r\n            lotclass = 1;\r\n        } else if (cnt==5 && lnt==1) {\r\n            lotclass = 2;\r\n        } else if (cnt==5 && lnt==0) {\r\n            lotclass = 3;\r\n        } else if (cnt==4 && lnt==1) {\r\n            lotclass = 4;\r\n        } else if (cnt==3 && lnt==1) {\r\n            lotclass = 5;\r\n        } else if (cnt==3 && lnt==0) {\r\n            lotclass = 6;\r\n        } else {\r\n            lotclass = 100;\r\n        }\r\n        return lotclass;\r\n    }\r\n    /*\r\n       检测该基因获奖等级接口\r\n    */\r\n    function checkLottery(uint256 genes) public view returns(uint8) {\r\n        var(luckyGenesArray, , , isReward1, ) = lotteryCore.getCLottery();\r\n        if (isReward1) {\r\n            return 100;\r\n        }\r\n        return getLotteryClass(luckyGenesArray, genes);\r\n    }\r\n    /*\r\n       获取当前Lottery信息\r\n    */\r\n    function getCLottery() \r\n        public \r\n        view \r\n        returns (\r\n            uint8[7]        luckyGenes1,\r\n            uint256         totalAmount1,\r\n            uint256         openBlock1,\r\n            bool            isReward1,\r\n            uint256         term1,\r\n            uint8           currentGenes1,\r\n            uint256         tSupply,\r\n            uint256         sPoolAmount1,\r\n            uint256[]       reward1\r\n        ) {\r\n            (luckyGenes1, totalAmount1, openBlock1, isReward1, term1) = lotteryCore.getCLottery();\r\n            currentGenes1 = lotteryCore.currentGene();\r\n            tSupply = dogCore.totalSupply();\r\n            sPoolAmount1 = lotteryCore.SpoolAmount();\r\n            reward1 = flotteries[term1].reward;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"luckyGenes\",\"type\":\"uint8[7]\"}],\"name\":\"convertGene\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"toSPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCLottery\",\"outputs\":[{\"name\":\"luckyGenes\",\"type\":\"uint8[7]\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"openBlock\",\"type\":\"uint256\"},{\"name\":\"isReward\",\"type\":\"bool\"},{\"name\":\"term\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openCarousel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_viewId\",\"type\":\"uint8\"}],\"name\":\"openLottery\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SpoolAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentTerm\",\"type\":\"uint256\"}],\"name\":\"_isCarousal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gene\",\"type\":\"uint256\"}],\"name\":\"convertGeneArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[7]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_flAddress\",\"type\":\"address\"}],\"name\":\"setFinalLotteryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTerm\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalLottery\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"toLotteryPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentGene\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dogCore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isMore\",\"type\":\"bool\"}],\"name\":\"rewardLottery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CLotteries\",\"outputs\":[{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"openBlock\",\"type\":\"uint256\"},{\"name\":\"isReward\",\"type\":\"bool\"},{\"name\":\"noFirstReward\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ktAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currentGene\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"luckyGenes\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"currentTerm\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"OpenLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"luckyGenes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentTerm\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"OpenCarousel\",\"type\":\"event\"}]","ContractName":"LotteryCore","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000074cd98fbd837fe9200cf867f4b1ba9573c6d865e","Library":"","SwarmSource":"bzzr://cea7b8d1150b9df70aa9bdeaa2db99f61e075656d8d4cf9fcf8a4399aeaa680c"}]}