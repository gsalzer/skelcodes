{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) { return 0; }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  \r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Manageable {\r\n\r\n  address public owner;\r\n  address public manager;\r\n  bool public contractLock;\r\n  \r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  event ManagerTransferred(address indexed previousManager, address indexed newManager);\r\n  event ContractLockChanged(address admin, bool state);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    manager = msg.sender;\r\n    contractLock = false;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmin() {\r\n    require((msg.sender == manager) || (msg.sender == owner));\r\n    _;\r\n  }\r\n\r\n  modifier isUnlocked() {\r\n    require(!contractLock);\r\n    _;\r\n  }\r\n\r\n  function transferManager(address newManager) public onlyAdmin {\r\n    require(_addrNotNull(newManager));\r\n    emit ManagerTransferred(manager, newManager);\r\n    manager = newManager;\r\n  }\r\n\r\n  function transferOwner(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n  function setContractLock(bool setting) public onlyAdmin {\r\n    contractLock = setting;\r\n    emit ContractLockChanged(msg.sender, setting);\r\n  }\r\n\r\n  function _addrNotNull(address _to) internal pure returns (bool) {\r\n    return(_to != address(0));\r\n  }\r\n}\r\n\r\n\r\ncontract CryptoFlipCar2 is Manageable {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 private constant TYPE_CAR = 3;\r\n  uint256 private constant TYPE_MAKE = 2;\r\n  uint256 private constant TYPE_COMPANY = 1;\r\n  uint256 private constant TYPE_WHALE = 0;\r\n\r\n  uint256 private constant ADDR_M = (2**160)-1;\r\n  uint256 private constant PRICE_M = (2**96)-1;\r\n  uint256 private constant MAKE_PRICE_M = (2**91)-1;\r\n  uint256 private constant COMPANY_ID_M = (2**5)-1;\r\n  uint256 private constant RACE_ID_M = (2**96)-1;\r\n  uint256 private constant RACE_BET_M = (2**128) - 1;\r\n  uint256 private constant WINNER_M = (2**2)-1;\r\n  uint256 private constant PINKSLIP_M = (2**1)-1;\r\n  uint256 private constant STATE_M = (2**2)-1;\r\n\r\n  uint256 private constant ADDR_S = 2**160;\r\n  uint256 private constant MAKE_PRICE_S = 2**165;\r\n  uint256 private constant RACE_ID_S = 2**162;\r\n  uint256 private constant RACE_WINNER_S = 2**128;\r\n  uint256 private constant PINKSLIP_S = 2**130;\r\n  uint256 private constant STATE_S = 2**131;\r\n\r\n  uint256 private constant RACE_READY = 0;\r\n  uint256 private constant RACE_OPENED = 1;\r\n  uint256 private constant RACE_FINISHED = 3;\r\n\r\n  uint256 private constant AD_PRICE = 5000000000000000;\r\n  uint256 private constant COMPANY_START_PRICE = 0.1 ether;\r\n  uint256 private constant MAKE_START_PRICE = 0.01 ether;\r\n  uint256 private constant CAR_START_PRICE = 0.005 ether;\r\n\r\n/********************************************** EVENTS **********************************************/\r\n  event RaceCreated(uint256 raceId, address player1, uint256 cardId, uint256 betAmount);\r\n  event RaceFinished(uint256 raceId, address winner);\r\n\r\n  event CardPurchased(uint256 cardType, uint256 cardId, address buyer, address seller, uint256 price);\r\n  event CardTransferred(uint256 cardType, uint256 cardId, address buyer, address seller);\r\n  event AdPurchased(uint256 cardType, uint256 cardId, address buyer, address seller, uint256 price);\r\n\r\n  event CarAdded(uint256 id, uint256 makeId);\r\n  event MakeAdded(uint256 id, uint256 companyId);\r\n  event CompanyAdded(uint256 id);\r\n/****************************************************************************************************/\r\n\r\n/********************************************** STRUCTS *********************************************/\r\n  struct Advert {\r\n    uint256 data;\r\n    string link;\r\n    string text;\r\n  }\r\n  \r\n  struct Car {\r\n    address[4] owners;\r\n    uint256 price;\r\n    uint256 makeId;\r\n    bool locked;\r\n  }\r\n\r\n  struct Race {\r\n    uint256 player1Data;\r\n    uint256 player2Data;\r\n    uint256 metaData;\r\n  }\r\n/****************************************************************************************************/\r\n\r\n/*********************************************** VARS ***********************************************/\r\n  uint256 private whaleCard;\r\n\r\n  mapping(uint256 => Race) private racesMap;\r\n  mapping(uint256 => uint256) private companiesMap;\r\n  mapping(uint256 => uint256) private makesMap;\r\n  mapping(uint256 => Car) private carsMap;\r\n\r\n  mapping(uint256 => mapping(uint256 => Advert)) private adsMap;\r\n\r\n  uint256 public carCount;\r\n  uint256 public makeCount;\r\n  uint256 public companyCount;\r\n  uint256 public openRaceCount;\r\n  uint256 public finishedRaceCount;\r\n\r\n  uint256 private adCardOwnerCut = 5;\r\n  uint256 private ownerCut = 50;\r\n  uint256 private whaleCut = 5;\r\n  uint256 private devCut = 5;\r\n  uint256 private parentCut = 10;\r\n  uint256 private oldCarCut = 2;\r\n  \r\n  bool private initDone = false;\r\n/****************************************************************************************************/\r\n\r\n  function init() public onlyAdmin {\r\n    require(!initDone);\r\n    initDone = true;\r\n    whaleCard = 544244940971561611450182022165966101192029151941515963475380724124;\r\n    \r\n    companiesMap[0] = 865561039198320994090019029559199471223345461753643689577969591538;\r\n    companiesMap[1] = 865561039198320993054179444739682765137514550166591154999543755547;\r\n    companiesMap[2] = 554846819998923714678602910082262521292860787724376787491777411291;\r\n    companiesMap[3] = 355671038460848535541135615183955125321318851275538745891777411291;\r\n    companiesMap[4] = 146150163733090292102777780770905740002982644405466239152731821942;\r\n    companiesMap[5] = 355671038460848535508878910989526070534946658842850550567444902178;\r\n    companiesMap[6] = 146150163733090292102777780770905740002982644405466239152731821942;\r\n    companiesMap[7] = 146150163733090292102777780770905740002982644405466239152731821942;\r\n\r\n    companyCount = 8;\r\n\r\n    makesMap[0] = 4605053916465184876084057218227438981618782007393731932205532781978;\r\n    makesMap[1] = 2914591086370370174599913075554161534533507828594490006968556374688;\r\n    makesMap[2] = 1844677902766057073279966936236223278229324254247807717511561402428;\r\n    makesMap[3] = 1844677902766057073279966936236223278229324254247807717511561402428;\r\n    makesMap[4] = 4605053916465184876911990996766451400782681524689254663484418928006;\r\n    makesMap[5] = 4605053916465184878081670562508085129910431352928816695390378405668;\r\n    makesMap[6] = 1167517659978517137984061586248765661373868143008706876811221867930;\r\n    makesMap[7] = 738935227834504519292893252751116942230691621264798552983426488380;\r\n    makesMap[8] = 1167517659978517139445563223579668579577552975724989896467154410906;\r\n    makesMap[9] = 738935227834504520754394890082019860434376453981081572639359031356;\r\n    makesMap[10] = 738935227834504523289617387884832456129379376897516570443342499703;\r\n    makesMap[11] = 1167517659978517142247011557709217019077442283260142618443342499703;\r\n    makesMap[12] = 467680523945888942876598267953905513549396800157884357088327079798;\r\n\r\n    makeCount = 13;\r\n\r\n    carsMap[0] = Car({locked: false, owners:[0x3177Abbe93422c9525652b5d4e1101a248A99776, 0x5C035Bb4Cb7dacbfeE076A5e61AA39a10da2E956, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 13122000000000000, makeId: 0 });  // solhint-disable-line max-line-length\r\n    carsMap[1] = Car({locked: false, owners:[0x7396176Ac6C1ef05d57180e7733b9188B3571d9A, 0x71f35825a3B1528859dFa1A64b24242BC0d12990, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 13122000000000000, makeId: 0 });  // solhint-disable-line max-line-length\r\n    carsMap[2] = Car({locked: false, owners:[0x71f35825a3B1528859dFa1A64b24242BC0d12990, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 8100000000000000, makeId: 0 });   // solhint-disable-line max-line-length\r\n    carsMap[3] = Car({locked: false, owners:[0x65A05c896d9A6f428B3936ac5db8df28752Ccd44, 0x71f35825a3B1528859dFa1A64b24242BC0d12990, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 13122000000000000, makeId: 0 });  // solhint-disable-line max-line-length\r\n    carsMap[4] = Car({locked: false, owners:[0x3177Abbe93422c9525652b5d4e1101a248A99776, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 10000000000000000, makeId: 5 });  // solhint-disable-line max-line-length\r\n    carsMap[5] = Car({locked: false, owners:[0x3177Abbe93422c9525652b5d4e1101a248A99776, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 10000000000000000, makeId: 1 });  // solhint-disable-line max-line-length\r\n    carsMap[6] = Car({locked: false, owners:[0x3177Abbe93422c9525652b5d4e1101a248A99776, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 10000000000000000, makeId: 4 });  // solhint-disable-line max-line-length\r\n    carsMap[7] = Car({locked: false, owners:[0x62D5Be95C330b512b35922E347319afD708dA981, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 16200000000000000, makeId: 4 });  // solhint-disable-line max-line-length\r\n    carsMap[8] = Car({locked: false, owners:[0x3130259deEdb3052E24FAD9d5E1f490CB8CCcaa0, 0x3177Abbe93422c9525652b5d4e1101a248A99776, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 16200000000000000, makeId: 6 });  // solhint-disable-line max-line-length\r\n    carsMap[9] = Car({locked: false, owners:[0x19fC7935fd9D0BC335b4D0df3bE86eD51aD2E62A, 0x558F42Baf1A9352A955D301Fa644AD0F619B97d9, 0x5e4b61220039823aeF8a54EfBe47773194494f77, 0x7396176Ac6C1ef05d57180e7733b9188B3571d9A], price: 22051440000000000, makeId: 10});  // solhint-disable-line max-line-length\r\n    carsMap[10] = Car({locked: false, owners:[0x504Af27f1Cef15772370b7C04b5D9d593Ee729f5, 0x19fC7935fd9D0BC335b4D0df3bE86eD51aD2E62A, 0x558F42Baf1A9352A955D301Fa644AD0F619B97d9, 0x5e4b61220039823aeF8a54EfBe47773194494f77], price: 37046419200000000, makeId: 11}); // solhint-disable-line max-line-length\r\n    carsMap[11] = Car({locked: false, owners:[0x7396176Ac6C1ef05d57180e7733b9188B3571d9A, 0x5e4b61220039823aeF8a54EfBe47773194494f77, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 8100000000000000, makeId: 4 });  // solhint-disable-line max-line-length\r\n    carsMap[12] = Car({locked: false, owners:[0x5632CA98e5788edDB2397757Aa82d1Ed6171e5aD, 0x7396176Ac6C1ef05d57180e7733b9188B3571d9A, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 8100000000000000, makeId: 7 });  // solhint-disable-line max-line-length\r\n    carsMap[13] = Car({locked: false, owners:[0x5632CA98e5788edDB2397757Aa82d1Ed6171e5aD, 0x5e4b61220039823aeF8a54EfBe47773194494f77, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 8100000000000000, makeId: 10});  // solhint-disable-line max-line-length\r\n    carsMap[14] = Car({locked: false, owners:[0x504Af27f1Cef15772370b7C04b5D9d593Ee729f5, 0x5e4b61220039823aeF8a54EfBe47773194494f77, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 8100000000000000, makeId: 11});  // solhint-disable-line max-line-length\r\n    carsMap[15] = Car({locked: false, owners:[0x5632CA98e5788edDB2397757Aa82d1Ed6171e5aD, 0x5e4b61220039823aeF8a54EfBe47773194494f77, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 8100000000000000, makeId: 8 });  // solhint-disable-line max-line-length\r\n    carsMap[16] = Car({locked: false, owners:[0x3177Abbe93422c9525652b5d4e1101a248A99776, 0x558F42Baf1A9352A955D301Fa644AD0F619B97d9, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 8100000000000000, makeId: 9 });  // solhint-disable-line max-line-length\r\n    carsMap[17] = Car({locked: false, owners:[0x5632CA98e5788edDB2397757Aa82d1Ed6171e5aD, 0x558F42Baf1A9352A955D301Fa644AD0F619B97d9, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 8100000000000000, makeId: 2 });  // solhint-disable-line max-line-length\r\n    carsMap[18] = Car({locked: false, owners:[0x5632CA98e5788edDB2397757Aa82d1Ed6171e5aD, 0x19fC7935fd9D0BC335b4D0df3bE86eD51aD2E62A, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 8100000000000000, makeId: 3 });  // solhint-disable-line max-line-length\r\n    carsMap[19] = Car({locked: false, owners:[0x308e9C99Ac194101C971FFcAca897AC943843dE8, 0x19fC7935fd9D0BC335b4D0df3bE86eD51aD2E62A, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 8100000000000000, makeId: 6 });  // solhint-disable-line max-line-length\r\n    carsMap[20] = Car({locked: false, owners:[0x5632CA98e5788edDB2397757Aa82d1Ed6171e5aD, 0xE9cfDadEa5FA5475861B62aA7d5dAA493C377122, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 8100000000000000, makeId: 10});  // solhint-disable-line max-line-length\r\n    carsMap[21] = Car({locked: false, owners:[0x308e9C99Ac194101C971FFcAca897AC943843dE8, 0x3177Abbe93422c9525652b5d4e1101a248A99776, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 8100000000000000, makeId: 0 });  // solhint-disable-line max-line-length\r\n    carsMap[22] = Car({locked: false, owners:[0x5632CA98e5788edDB2397757Aa82d1Ed6171e5aD, 0x308e9C99Ac194101C971FFcAca897AC943843dE8, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 8100000000000000, makeId: 12});  // solhint-disable-line max-line-length\r\n    carsMap[23] = Car({locked: false, owners:[0xac2b4B94eCA37Cb7c9cF7062fEfB2792c5792731, 0x263b604509D6a825719859Ee458b2D91fb7d330D, 0x3177Abbe93422c9525652b5d4e1101a248A99776, 0x0000000000000000000000000000000000000000], price: 13284000000000000, makeId: 12});  //solhint-disable-line max-line-length\r\n    carsMap[24] = Car({locked: false, owners:[0x5632CA98e5788edDB2397757Aa82d1Ed6171e5aD, 0x308e9C99Ac194101C971FFcAca897AC943843dE8, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 8100000000000000, makeId: 2 });  // solhint-disable-line max-line-length\r\n    carsMap[25] = Car({locked: false, owners:[0x5632CA98e5788edDB2397757Aa82d1Ed6171e5aD, 0x504Af27f1Cef15772370b7C04b5D9d593Ee729f5, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 8100000000000000, makeId: 12});  // solhint-disable-line max-line-length\r\n    carsMap[26] = Car({locked: false, owners:[0x9bD750685bF5bfCe24d1B8DE03a1ff3D2631ef5a, 0x3177Abbe93422c9525652b5d4e1101a248A99776, 0x0000000000000000000000000000000000000000, 0x0000000000000000000000000000000000000000], price: 8100000000000000, makeId: 11});  // solhint-disable-line max-line-length\r\n     \r\n    carCount = 27;\r\n  }\r\n\r\n/********************************************** RACES ***********************************************/\r\n  function createRace(uint256 _cardId, uint256 _betAmount, uint256 pinkSlip) public payable isUnlocked {\r\n    uint256 excess = msg.value.sub(_betAmount);\r\n    require(_owns(msg.sender, TYPE_CAR, _cardId));\r\n    require(!carsMap[_cardId].locked);\r\n    carsMap[_cardId].locked = true;\r\n    \r\n    racesMap[openRaceCount+finishedRaceCount].player1Data = _packPlayerData(msg.sender, _cardId);\r\n    racesMap[openRaceCount+finishedRaceCount].metaData = _packRaceData(_betAmount, 0, pinkSlip, RACE_OPENED);\r\n    openRaceCount++;\r\n\r\n    emit RaceCreated(openRaceCount+finishedRaceCount, msg.sender, _cardId, _betAmount);\r\n    _pay(msg.sender, excess);\r\n  }\r\n  \r\n  function joinRaceAndFinish (uint256 _raceId, uint256 _cardId) public payable isUnlocked {\r\n    require(msg.sender == tx.origin);\r\n\r\n    require(_owns(msg.sender, TYPE_CAR, _cardId));\r\n    \r\n    require(!carsMap[_cardId].locked);\r\n    (uint256 bet, bool pinkslip) = _unpackRaceFinishData(racesMap[_raceId].metaData);\r\n    \r\n    require(_raceOpened(racesMap[_raceId].metaData));\r\n    \r\n    openRaceCount--;\r\n    finishedRaceCount++; \r\n    \r\n    racesMap[_raceId].player2Data = _packPlayerData(msg.sender, _cardId);\r\n    address player1 = address(racesMap[_raceId].player1Data & ADDR_M);\r\n\r\n    uint256 winner = _getRNGValue(_raceId);\r\n    address winnerAddr = (winner == 1) ? player1 : msg.sender;\r\n\r\n    _transferCar(winnerAddr, racesMap[_raceId].player1Data, pinkslip);\r\n    _transferCar(winnerAddr, racesMap[_raceId].player2Data, pinkslip);\r\n\r\n    uint256 devFee = bet.mul(2).mul(devCut) / 100;\r\n    uint256 winnings = bet.mul(2).sub(devFee);\r\n    \r\n    _updateRaceWinner(_raceId, winner);\r\n    emit RaceFinished(_raceId, winnerAddr);\r\n    \r\n    _pay(msg.sender, msg.value.sub(bet));\r\n    _pay(owner, devFee);\r\n    _pay(winnerAddr, winnings);\r\n  }\r\n/****************************************************************************************************/\r\n\r\n/******************************************** PURCHASE **********************************************/\r\n  function purchaseAd(uint256 _cardType, uint256 _cardId, string adText, string adLink) public payable isUnlocked {\r\n    \r\n    (address seller, uint256 price) = _unpackItemData(adsMap[_cardType][_cardId].data);\r\n    price = (price == 0) ? AD_PRICE : price;\r\n    seller = (seller == address(0)) ? owner : seller;\r\n    \r\n    uint256 excess = msg.value.sub(price);\r\n    require(_released(_cardType, _cardId));\r\n    require(_cardType != 0);\r\n  \r\n    uint256 totalPerc = 100 + adCardOwnerCut + ownerCut + devCut;\r\n    uint256 newPrice = price.mul(totalPerc) / 100;\r\n\r\n    uint256 cardsellerCommission = price.mul(adCardOwnerCut) / totalPerc;\r\n    uint256 devFee = price.mul(devCut) / totalPerc;\r\n    uint256 sellerCommission = price - (cardsellerCommission + devFee);\r\n    uint256 adData = _packItemData(msg.sender, newPrice);\r\n\r\n    adsMap[_cardType][_cardId] = Advert({text: adText, link: adLink, data: adData});\r\n    \r\n    emit AdPurchased(_cardType, _cardId, msg.sender, seller, price);\r\n\r\n    _pay(ownerOf(_cardType, _cardId), cardsellerCommission);\r\n    _pay(owner, devFee);\r\n    _pay(seller, sellerCommission);\r\n    _pay(msg.sender, excess);\r\n  }\r\n\r\n  function purchaseCard(uint256 _cardType, uint256 _cardId) public payable isUnlocked {\r\n    if ( _cardType == TYPE_WHALE) {\r\n      _purchaseWhaleCard();\r\n    } else if (_cardType == TYPE_COMPANY) {\r\n      _purchaseCompany(_cardId);\r\n    } else if (_cardType == TYPE_MAKE) {\r\n      _purchaseMake(_cardId);\r\n    } else if (_cardType == TYPE_CAR) {\r\n      _purchaseCar(_cardId);\r\n    }\r\n  }\r\n/****************************************************************************************************/\r\n\r\n/********************************************* GETTERS **********************************************/\r\n  function getWhaleCard() public view returns (address _owner, uint256 _price) {\r\n    (_owner, _price) = _unpackItemData(whaleCard);\r\n  }\r\n\r\n  function getCompany(uint256 _companyId) public view returns(address _owner, uint256 _price) {\r\n    (_owner, _price) = _unpackItemData(companiesMap[_companyId]);\r\n  }\r\n\r\n  function getMake(uint256 _makeId) public view returns(address _owner, uint256 _price, uint256 _companyId) {\r\n    (_owner, _companyId, _price) = _unpackMakeData(makesMap[_makeId]);\r\n  }\r\n  \r\n  function getCar(uint256 _carId) public view returns (address[4] owners, uint256 price, uint256 makeId) {\r\n    Car memory _car = carsMap[_carId];\r\n    owners = _car.owners;\r\n    price = _car.price;\r\n    makeId = _car.makeId;\r\n  }\r\n  \r\n  function getRace(uint256 _raceId) public view returns(uint256 _p1Data, uint256 _p2Data, uint256 _raceMetaData) {\r\n    Race memory _race = racesMap[_raceId];\r\n    _p1Data = _race.player1Data;\r\n    _p2Data = _race.player2Data;\r\n    _raceMetaData = _race.metaData;\r\n  }\r\n  \r\n  function getFullRace(uint256 _raceId) public view returns(\r\n    address p1, uint256 p1Id,\r\n    address p2, uint256 p2Id,\r\n    uint256 bet, uint256 winner, bool pinkslip, uint256 state) {\r\n    Race memory _race = racesMap[_raceId];\r\n    (p1, p1Id) = _unpackPlayerData(_race.player1Data);\r\n    (p2, p2Id) = _unpackPlayerData(_race.player2Data);\r\n    (bet, winner, pinkslip, state) = _unpackRaceData(_race.metaData);\r\n  }\r\n\r\n  function getAd(uint256 _cardType, uint256 _cardId) public view returns(string text, string link, address seller, uint256 price) {\r\n    Advert memory ad = adsMap[_cardType][_cardId];\r\n    (seller, price) = _unpackItemData(ad.data);\r\n    price = (price == 0) ? AD_PRICE : price;\r\n    seller = (seller == address(0)) ? owner : seller;\r\n    text = ad.text;\r\n    link = ad.link;\r\n  }\r\n  \r\n  function getCuts() public view returns(uint256[6] cuts) {\r\n    cuts = [adCardOwnerCut, ownerCut, whaleCut, devCut, parentCut, oldCarCut];\r\n  }\r\n\r\n  function ownerOf(uint256 cardType, uint256 cardId) public view returns(address cardOwner) {\r\n    if (cardType == TYPE_WHALE) {\r\n      cardOwner = address(whaleCard & ADDR_M);\r\n    } else if (cardType == TYPE_COMPANY) {\r\n      cardOwner = address(companiesMap[cardId] & ADDR_M);\r\n    } else if (cardType == TYPE_MAKE) {\r\n      cardOwner = address(makesMap[cardId] & ADDR_M);\r\n    } else if (cardType == TYPE_CAR) {\r\n      cardOwner = carsMap[cardId].owners[0];\r\n    }\r\n  }\r\n/****************************************************************************************************/\r\n\r\n/********************************************* RELEASE **********************************************/   \r\n  function transferCard(address _newOwner, uint256 _cardType, uint256 _cardId) public onlyAdmin {\r\n    _transferCard(_newOwner, _cardType, _cardId);\r\n  }\r\n/****************************************************************************************************/\r\n\r\n/******************************************** ADD CARDS *********************************************/\r\n  function addCompany() public onlyAdmin {\r\n    companiesMap[companyCount] = _packItemData(owner, COMPANY_START_PRICE);\r\n    emit CompanyAdded(companyCount++);\r\n  }\r\n\r\n  function addMake(uint256 _companyId) public onlyAdmin {\r\n    makesMap[makeCount] = _packMakeData(owner, MAKE_START_PRICE, _companyId);\r\n    emit MakeAdded(makeCount++, _companyId);\r\n  }\r\n  \r\n  function addCar(uint256 _makeId) public onlyAdmin {\r\n    carsMap[carCount] = Car({price: CAR_START_PRICE, owners: [owner, address(0), address(0), address(0)], makeId: _makeId, locked : false});\r\n    emit CarAdded(carCount++, _makeId);\r\n  }\r\n  \r\n  function addAd(address _ownerAddr, uint256 _price, uint256 _cardType, uint256 _cardId, string _text, string _link) public onlyAdmin {\r\n    require(_addrNotNull(_ownerAddr) && (_price != 0));\r\n    uint256 _data = _packItemData(_ownerAddr, _price);\r\n    adsMap[_cardType][_cardId] = Advert({text: _text, link: _link, data: _data});\r\n  }\r\n  \r\n  function editCuts(uint256[6] cuts) public onlyAdmin {\r\n    adCardOwnerCut = (cuts[0] == 0) ? adCardOwnerCut : cuts[0];\r\n    ownerCut = (cuts[1] == 0) ? ownerCut : cuts[1];\r\n    whaleCut = (cuts[2] == 0) ? whaleCut : cuts[2];\r\n    devCut = (cuts[3] == 0) ? devCut : cuts[3];\r\n    parentCut = (cuts[4] == 0) ? parentCut : cuts[4];\r\n    oldCarCut = (cuts[5] == 0) ? oldCarCut : cuts[5];\r\n  }\r\n/****************************************************************************************************/\r\n\r\n/********************************************* PRIVATE **********************************************/\r\n\r\n  function _editPriceOf(uint256 cardType, uint256 cardId, uint256 _newPrice) private {\r\n    if (cardType == TYPE_WHALE) {\r\n      whaleCard = (~(PRICE_M*ADDR_S) & whaleCard) | ((_newPrice & PRICE_M) * ADDR_S);\r\n    } else if (cardType == TYPE_COMPANY) {\r\n      companiesMap[cardId] = (~(PRICE_M*ADDR_S) & companiesMap[cardId]) | ((_newPrice & PRICE_M) * ADDR_S);\r\n    } else if (cardType == TYPE_MAKE) {\r\n      makesMap[cardId] = (~(MAKE_PRICE_M*MAKE_PRICE_S) & makesMap[cardId]) | ((_newPrice & MAKE_PRICE_M) * MAKE_PRICE_S);\r\n    } else if (cardType == TYPE_CAR) {\r\n      carsMap[cardId].price = _newPrice;\r\n    }\r\n  }\r\n\r\n  function _priceOf(uint256 cardType, uint256 cardId) private view returns(uint256 _price) {\r\n    if (cardType == TYPE_WHALE) {\r\n      _price = (PRICE_M & (whaleCard / ADDR_S));\r\n    } else if (cardType == TYPE_COMPANY) {\r\n      _price = (PRICE_M & (companiesMap[cardId] / ADDR_S));\r\n    } else if (cardType == TYPE_MAKE) {\r\n      _price = (MAKE_PRICE_M & (makesMap[cardId] / MAKE_PRICE_S));\r\n    } else if (cardType == TYPE_CAR) {\r\n      _price = carsMap[cardId].price;\r\n    }\r\n  }\r\n\r\n  function _owns(address _owner, uint256 cardType, uint256 cardId) private view returns(bool) {\r\n    address _toCheck = ownerOf(cardType, cardId);\r\n    return(_owner == _toCheck);\r\n  }\r\n\r\n  function _released(uint256 cardType, uint256 cardId) private view returns(bool) {\r\n    return(_addrNotNull(ownerOf(cardType, cardId)));\r\n  }\r\n  \r\n  function _transferCard(address newOwner, uint256 cardType, uint256 cardId) private returns (bool) {   \r\n    require(_released(cardType, cardId));\r\n    address seller = ownerOf(cardType, cardId);\r\n    if ( newOwner == seller) {\r\n    } else if (cardType == TYPE_WHALE) {\r\n      whaleCard = (~(ADDR_M) & whaleCard) | (uint256(newOwner) & ADDR_M);\r\n    } else if (cardType == TYPE_COMPANY) {\r\n      companiesMap[cardId] = (~(ADDR_M) & companiesMap[cardId]) | (uint256(newOwner) & ADDR_M);\r\n    } else if (cardType == TYPE_MAKE) {\r\n      makesMap[cardId] = (~(ADDR_M) & makesMap[cardId]) | (uint256(newOwner) & ADDR_M);\r\n    } else if (cardType == TYPE_CAR) {\r\n      carsMap[cardId].owners[3] = carsMap[cardId].owners[2];\r\n      carsMap[cardId].owners[2] = carsMap[cardId].owners[1];    \r\n      carsMap[cardId].owners[1] = carsMap[cardId].owners[0];\r\n      carsMap[cardId].owners[0] = newOwner;\r\n    }\r\n    emit CardTransferred(cardType, cardId, newOwner, seller);\r\n  }\r\n\r\n  function _pay(address _to, uint256 _value) private {\r\n    if ( _addrNotNull(_to) && _value != 0) {\r\n      _to.transfer(_value);\r\n    }\r\n  }\r\n\r\n  function _transferCar(address newOwner, uint256 _data, bool pinkslip) private returns (bool) {\r\n    uint256 id = _getRacerCar(_data);\r\n    carsMap[id].locked = false;\r\n    if ( pinkslip) {\r\n      _transferCard(newOwner, TYPE_CAR, id);\r\n    }\r\n  }    \r\n\r\n  function _oldOwnersOf(uint256 _carId) private view returns(uint256) {\r\n    Car memory _car = carsMap[_carId];\r\n    uint256 count = _addrNotNull(_car.owners[1]) ? 1 : 0;\r\n    count += (_addrNotNull(_car.owners[2]) ? 1 : 0);\r\n    count += (_addrNotNull(_car.owners[3]) ? 1 : 0);\r\n    return(count);\r\n  }\r\n\r\n  function _packItemData(address itemOwner, uint256 price) public pure returns(uint256) {\r\n    uint256 _data = (~(ADDR_M) & _data) | (uint256(itemOwner) & ADDR_M);\r\n    _data = (~(PRICE_M*ADDR_S) & _data) | ((price & PRICE_M) * ADDR_S);\r\n    return(_data);\r\n  }\r\n  \r\n  function _unpackItemData(uint256 _data) private pure returns(address itemOwner, uint256 price) {\r\n    itemOwner = address(_data & ADDR_M);\r\n    price = PRICE_M & (_data / ADDR_S);\r\n  }\r\n\r\n  function _packMakeData(address makeOwner, uint256 price, uint256 companyId) private pure returns(uint256 _data) {\r\n    _data = (~(ADDR_M) & _data) | (uint256(makeOwner) & ADDR_M);\r\n    _data = (~(COMPANY_ID_M*ADDR_S) & _data) | ((companyId & COMPANY_ID_M) * ADDR_S);\r\n    _data = (~(MAKE_PRICE_M*MAKE_PRICE_S) & _data) | ((price & MAKE_PRICE_M) * MAKE_PRICE_S);\r\n  }\r\n\r\n  function _unpackMakeData(uint256 _data) private pure returns(address makeOwner, uint256 companyId, uint256 price) {\r\n    makeOwner = address(_data & ADDR_M);\r\n    companyId = COMPANY_ID_M & (_data / ADDR_S);\r\n    price = (MAKE_PRICE_M & (_data / MAKE_PRICE_S));\r\n  }\r\n\r\n  function _purchaseCar(uint256 _cardId) private {\r\n    Car memory car = carsMap[_cardId];\r\n    require(!car.locked);\r\n\r\n    uint256 excess = msg.value.sub(car.price);\r\n\r\n    require(msg.sender != car.owners[0]);\r\n\r\n    uint256 totalPerc = 100 + ownerCut + devCut + whaleCut + (2 * parentCut) + (oldCarCut * _oldOwnersOf(_cardId));\r\n    \r\n    uint256 parentFee = car.price.mul(parentCut) / totalPerc;    \r\n    uint256 oldCarFee = car.price.mul(oldCarCut) / totalPerc;  \r\n    uint256 whaleFee = car.price.mul(whaleCut) / totalPerc;  \r\n    uint256 devFee = car.price.mul(devCut) / totalPerc;\r\n    \r\n    uint256 sellerCommission = car.price - ((oldCarFee * _oldOwnersOf(_cardId)) + (2 * parentFee) + devFee + whaleFee);\r\n\r\n    uint256 companyId = COMPANY_ID_M & (makesMap[car.makeId] / ADDR_S);\r\n\r\n    emit CardPurchased(TYPE_CAR, _cardId, msg.sender, car.owners[0], car.price);\r\n\r\n    _transferCard(msg.sender, TYPE_CAR, _cardId);\r\n    _editPriceOf(TYPE_CAR, _cardId, car.price.mul(totalPerc) / 100);\r\n     \r\n    _pay(ownerOf(TYPE_COMPANY, companyId), parentFee);\r\n    _pay(ownerOf(TYPE_MAKE, car.makeId), parentFee);\r\n\r\n    _pay(car.owners[0], sellerCommission);\r\n    _pay(car.owners[1], oldCarFee);\r\n    _pay(car.owners[2], oldCarFee);\r\n    _pay(car.owners[3], oldCarFee);\r\n    \r\n    _pay(ownerOf(0, 0), whaleFee);\r\n    _pay(owner, devFee);\r\n    _pay(msg.sender, excess);\r\n  }\r\n\r\n  function _purchaseMake(uint256 _cardId) private isUnlocked {\r\n    (address seller, uint256 price, uint256 companyId) = getMake(_cardId);\r\n    uint256 excess = msg.value.sub(price);\r\n\r\n    require(msg.sender != seller);\r\n    \r\n    uint256 totalPerc = 100 + ownerCut + devCut + parentCut + whaleCut;\r\n    \r\n    uint256 parentFee = price.mul(parentCut) / totalPerc;\r\n    uint256 whaleFee = price.mul(whaleCut) / totalPerc;\r\n    uint256 devFee = price.mul(devCut) / totalPerc;\r\n\r\n    uint256 newPrice = price.mul(totalPerc) / 100;\r\n  \r\n    uint256 sellerCommission = price - (parentFee+whaleFee+devFee);\r\n    \r\n    _transferCard(msg.sender, 2, _cardId);\r\n    _editPriceOf(2, _cardId, newPrice);\r\n    \r\n    emit CardPurchased(2, _cardId, msg.sender, seller, price);\r\n\r\n    _pay(ownerOf(TYPE_WHALE, 0), whaleFee);\r\n    _pay(ownerOf(TYPE_COMPANY, companyId), parentFee);     \r\n    _pay(owner, devFee);\r\n    _pay(seller, sellerCommission);\r\n    _pay(msg.sender, excess);\r\n  }\r\n\r\n  function _purchaseCompany(uint256 _cardId) private isUnlocked {\r\n    (address seller, uint256 price) = getCompany(_cardId);\r\n    uint256 excess = msg.value.sub(price);\r\n\r\n    require(msg.sender != seller);\r\n\r\n    uint256 totalPerc = 100+ownerCut+devCut+whaleCut;\r\n    uint256 newPrice = price.mul(totalPerc) / 100;\r\n    \r\n    _transferCard(msg.sender, 1, _cardId);\r\n    _editPriceOf(1, _cardId, newPrice);\r\n    \r\n    uint256 whaleFee = price.mul(whaleCut) / totalPerc;\r\n    uint256 devFee = price.mul(devCut) / totalPerc;\r\n    uint256 sellerCommission = price - (whaleFee + devFee);\r\n    \r\n    emit CardPurchased(1, _cardId, msg.sender, seller, price);\r\n    \r\n    _pay(ownerOf(0,0), whaleFee);\r\n    _pay(owner, devFee);\r\n    _pay(seller,sellerCommission);\r\n    _pay(msg.sender, excess);\r\n  }\r\n\r\n  function _purchaseWhaleCard() private isUnlocked {\r\n    (address seller, uint256 price) = getWhaleCard();\r\n    uint256 excess = msg.value.sub(price);\r\n    \r\n    require(msg.sender != seller);\r\n\r\n    uint256 totalPerc = 100 + ownerCut + devCut;\r\n    uint256 devFee = price.mul(devCut) / totalPerc;\r\n\r\n    uint256 sellerCommission = price - devFee;\r\n    uint256 newPrice = price.mul(totalPerc) / 100;\r\n\r\n    _transferCard(msg.sender, TYPE_WHALE, TYPE_WHALE);\r\n    _editPriceOf(TYPE_WHALE, TYPE_WHALE, newPrice);\r\n    \r\n    emit CardPurchased(TYPE_WHALE, TYPE_WHALE, msg.sender, seller, price);\r\n      \r\n    _pay(owner, devFee);\r\n    _pay(seller, sellerCommission);\r\n    _pay(msg.sender, excess);\r\n  }\r\n/****************************************************************************************************/\r\n\r\n/****************************************** PRIVATE RACE ********************************************/\r\n  function _packPlayerData(address player, uint256 id) private pure returns(uint256 playerData) {\r\n    playerData = (~(ADDR_M) & playerData) | (uint256(player) & ADDR_M);\r\n    playerData = (~(RACE_ID_M*ADDR_S) & playerData) | ((id & RACE_ID_M) * ADDR_S);\r\n  }\r\n\r\n  function _unpackPlayerData(uint256 playerData) private pure returns(address player, uint256 id) {\r\n    player = address(playerData & ADDR_M);\r\n    id = (RACE_ID_M & (playerData / ADDR_S));\r\n  }\r\n\r\n  function _packRaceData(uint256 _bet, uint256 _winner, uint256 _pinkslip, uint256 _state) private pure returns(uint256 _raceData) {\r\n    _raceData = (~(RACE_BET_M) & _raceData) | (_bet & RACE_BET_M);\r\n    _raceData = (~(WINNER_M*RACE_WINNER_S) & _raceData) | ((_winner & WINNER_M) * RACE_WINNER_S);\r\n    _raceData = (~(PINKSLIP_M*PINKSLIP_S) & _raceData) | ((_pinkslip & PINKSLIP_M) * PINKSLIP_S);\r\n    _raceData = (~(STATE_M*STATE_S) & _raceData) | ((_state & STATE_M) * STATE_S);\r\n  }\r\n\r\n  function _unpackRaceData(uint256 _raceData) private pure returns(uint256 bet, uint256 winner, bool pinkslip, uint256 state) {\r\n    bet = _raceData & RACE_BET_M;\r\n    winner = (WINNER_M & (_raceData / RACE_WINNER_S));\r\n    pinkslip = (PINKSLIP_M & (_raceData / PINKSLIP_S)) != 0;\r\n    state = (STATE_M & (_raceData / STATE_S));\r\n  }\r\n  \r\n  function _unpackRaceFinishData(uint256 _raceData) private pure returns(uint256 bet, bool pinkslip) {\r\n    bet = _raceData & RACE_BET_M;\r\n    pinkslip = (PINKSLIP_M & (_raceData / PINKSLIP_S)) != 0;\r\n  }\r\n  \r\n  function _updateRaceWinner(uint256 raceId, uint256 winner) private {\r\n    racesMap[raceId].metaData = (~(STATE_M*STATE_S) & racesMap[raceId].metaData) | ((RACE_FINISHED & STATE_M) * STATE_S);\r\n    racesMap[raceId].metaData = (~(WINNER_M*RACE_WINNER_S) & racesMap[raceId].metaData) | ((winner & WINNER_M) * RACE_WINNER_S);\r\n  }\r\n\r\n  function _raceOpened(uint256 raceData) private pure returns (bool opened) {\r\n    uint256 state = (STATE_M & (raceData / STATE_S));\r\n    opened = ((state == RACE_OPENED));\r\n  }\r\n\r\n  function _getRacerCar(uint256 playerData) private pure returns (uint256 id) {\r\n    id = (RACE_ID_M & (playerData / ADDR_S));\r\n  }\r\n\r\n  function _getRNGValue(uint256 id) private view returns(uint256 winner) {\r\n    Race memory race = racesMap[id];\r\n    uint256 p1Price = _priceOf(TYPE_CAR, _getRacerCar(race.player1Data));\r\n    uint256 p2Price = _priceOf(TYPE_CAR, _getRacerCar(race.player2Data));\r\n    uint256 _totalValue = p1Price.add(p2Price); \r\n    \r\n    uint256 blockToCheck = block.number - 1;\r\n    uint256 weight = (p1Price.mul(2) < _totalValue) ? _totalValue/2 : p1Price;\r\n    //uint256 ratio = ((2**256)-1)/_totalValue;\r\n    uint256 ratio = 115792089237316195423570985008687907853269984665640564039457584007913129639935/_totalValue;\r\n    bytes32 blockHash = blockhash(blockToCheck);\r\n    winner = (uint256(keccak256(abi.encodePacked(blockHash))) > weight*ratio) ? 2 : 1;\r\n  }\r\n/****************************************************************************************************/\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"finishedRaceCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"uint256\"}],\"name\":\"getRace\",\"outputs\":[{\"name\":\"_p1Data\",\"type\":\"uint256\"},{\"name\":\"_p2Data\",\"type\":\"uint256\"},{\"name\":\"_raceMetaData\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"},{\"name\":\"_cardType\",\"type\":\"uint256\"},{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"transferCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"carCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cardType\",\"type\":\"uint256\"},{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"getAd\",\"outputs\":[{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"link\",\"type\":\"string\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"itemOwner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"_packItemData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"uint256\"}],\"name\":\"getFullRace\",\"outputs\":[{\"name\":\"p1\",\"type\":\"address\"},{\"name\":\"p1Id\",\"type\":\"uint256\"},{\"name\":\"p2\",\"type\":\"address\"},{\"name\":\"p2Id\",\"type\":\"uint256\"},{\"name\":\"bet\",\"type\":\"uint256\"},{\"name\":\"winner\",\"type\":\"uint256\"},{\"name\":\"pinkslip\",\"type\":\"bool\"},{\"name\":\"state\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_makeId\",\"type\":\"uint256\"}],\"name\":\"addCar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"setting\",\"type\":\"bool\"}],\"name\":\"setContractLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_companyId\",\"type\":\"uint256\"}],\"name\":\"getCompany\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"makeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_carId\",\"type\":\"uint256\"}],\"name\":\"getCar\",\"outputs\":[{\"name\":\"owners\",\"type\":\"address[4]\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"makeId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openRaceCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardType\",\"type\":\"uint256\"},{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"purchaseCard\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cuts\",\"type\":\"uint256[6]\"}],\"name\":\"editCuts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhaleCard\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_makeId\",\"type\":\"uint256\"}],\"name\":\"getMake\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_companyId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerAddr\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_cardType\",\"type\":\"uint256\"},{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_text\",\"type\":\"string\"},{\"name\":\"_link\",\"type\":\"string\"}],\"name\":\"addAd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardType\",\"type\":\"uint256\"},{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"adText\",\"type\":\"string\"},{\"name\":\"adLink\",\"type\":\"string\"}],\"name\":\"purchaseAd\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCuts\",\"outputs\":[{\"name\":\"cuts\",\"type\":\"uint256[6]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_raceId\",\"type\":\"uint256\"},{\"name\":\"_cardId\",\"type\":\"uint256\"}],\"name\":\"joinRaceAndFinish\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_companyId\",\"type\":\"uint256\"}],\"name\":\"addMake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"transferManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cardType\",\"type\":\"uint256\"},{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"cardOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardId\",\"type\":\"uint256\"},{\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"name\":\"pinkSlip\",\"type\":\"uint256\"}],\"name\":\"createRace\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addCompany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"raceId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"RaceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"raceId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"RaceFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cardType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"CardPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cardType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"CardTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cardType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cardId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AdPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"makeId\",\"type\":\"uint256\"}],\"name\":\"CarAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"companyId\",\"type\":\"uint256\"}],\"name\":\"MakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CompanyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"ContractLockChanged\",\"type\":\"event\"}]","ContractName":"CryptoFlipCar2","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5b1724d0216572f3e229cda395e6e837ebd1244e0a8b0f9d2b7094e318bff6ed"}]}