{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface Token { \r\n    function distr(address _to, uint256 _value) external returns (bool);\r\n    function teamdistr(address _to, uint256 _value) external returns (bool);\r\n    function totalSupply() constant external returns (uint256 supply);\r\n    function balanceOf(address _owner) constant external returns (uint256 balance);\r\n}\r\n\r\ncontract ForeignToken {\r\n    function balanceOf(address _owner) constant public returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract TFFC is ERC20Basic {\r\n\r\n\tusing SafeMath for uint256;\r\n\taddress owner = msg.sender;\r\n\r\n\tmapping (address => uint256) balances;\r\n\tmapping (address => mapping (address => uint256)) allowed;\r\n\tmapping (address => bool) public blacklist;\r\n\r\n\tstring public constant name = \"TFFC\";\r\n\tstring public constant symbol = \"TF\";\r\n\tuint public constant decimals = 8;\r\n\r\n\tuint256 public totalSupply = 50000000e8;//50000000e8;//总量5000万个\r\n\tuint256 public totaTeamRemaining = (totalSupply.div(100).mul(20));\r\n\tuint256 private totaTeamRemainingBak = totaTeamRemaining;\r\n\tuint256 public totalRemaining = (totalSupply.sub(totaTeamRemaining));\r\n\tuint256 private totalRemainingBak = totalRemaining;\r\n\tuint256 public uservalue;\r\n\tuint256 public teamvalue;\r\n\tuint256 private TeamReleaseCount = 0;\r\n\tuint256 private UserSendCount = 0;\r\n\tuint256 private UserSendCountBak = 0; \r\n\tuint256 private totalPhaseValue = 1000e8;\r\n\tbool public distributionuserFinished = false; //用户分发是否结束的标志 false:未结束 true:结束\r\n\tbool public distributionteamFinished = false;//团队分发是否结束的标志 false：未结束  true： 结束\r\n\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event UserDistr(address indexed to, uint256 amount);\r\n    event TeamDistr(address indexed to, uint256 amount);\r\n    event DistrFinished();\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n        _;\r\n\t}\r\n\r\n\tmodifier canUserDistr() {\r\n        require(!distributionuserFinished);\r\n        _;\r\n    }\r\n\r\n    modifier canTeamDistr() {\r\n        require(!distributionteamFinished);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhitelist() {\r\n        require(blacklist[msg.sender] == false);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    function TFFC () public {\r\n    \towner = msg.sender;\r\n    \tuservalue = 1000e8;\r\n    \tteamvalue = (totaTeamRemaining.div(100).mul(20));\r\n    }\r\n\r\n    function teamdistr(address _to, uint256 _amount) canTeamDistr private returns (bool) {\r\n    \tTeamReleaseCount = TeamReleaseCount.add(_amount);\r\n    \ttotaTeamRemaining = totaTeamRemaining.sub(_amount);\r\n    \tbalances[_to] = balances[_to].add(_amount);\r\n    \temit TeamDistr(_to,_amount);\r\n    \temit Transfer(address(0), _to, _amount);\r\n    \t\r\n    \treturn true;\r\n\r\n    \tif (TeamReleaseCount >= totaTeamRemainingBak) {\r\n        \tdistributionteamFinished = true;\r\n        }\r\n    }\r\n\r\n    function teamRelease(address _to) payable canTeamDistr onlyOwner public {\r\n    \tif (teamvalue > totaTeamRemaining) {\r\n\t\t\tteamvalue = totaTeamRemaining;\r\n\t\t}\r\n\r\n\t\trequire(teamvalue <= totaTeamRemaining);\r\n\r\n        teamdistr(_to, teamvalue);\r\n\r\n        if (TeamReleaseCount >= totaTeamRemainingBak) {\r\n        \tdistributionteamFinished = true;\r\n        }\r\n    }\r\n\r\n    function () external payable {\r\n        getTokens();\r\n    }\r\n\r\n    function distr(address _to, uint256 _amount) canUserDistr private returns (bool) {\r\n\t\t\r\n\t\tUserSendCount = UserSendCount.add(_amount);\r\n\t\ttotalRemaining = totalRemaining.sub(_amount);\r\n\t\tbalances[_to] = balances[_to].add(_amount);\r\n\t\tif (UserSendCount < totalRemainingBak) {\r\n\t\t\tif (UserSendCount.sub(UserSendCountBak) >= totalPhaseValue) {\r\n        \t\tuservalue = uservalue.div(2);\r\n        \t\tUserSendCountBak = UserSendCount;\r\n        \t}\r\n\t\t}\r\n\r\n        emit UserDistr(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        \r\n        return true;\r\n        \r\n        if (UserSendCount >= totalRemainingBak) {\r\n        \tdistributionuserFinished = true;\r\n        }\r\n        \r\n    }\r\n\r\n\r\n\tfunction getTokens() payable canUserDistr onlyWhitelist public {\r\n\t\t\r\n\t\tif (uservalue > totalRemaining) {\r\n\t\t\tuservalue = totalRemaining;\r\n\t\t}\r\n\r\n\t\trequire(uservalue <= totalRemaining);\r\n\r\n\t\taddress investor = msg.sender;\r\n        uint256 toGive = uservalue;\r\n\r\n        distr(investor, toGive);\r\n\r\n        if (toGive > 0) {\r\n        \tblacklist[investor] = true;\r\n        }\r\n\r\n        if (UserSendCount >= totalRemainingBak) {\r\n        \tdistributionuserFinished = true;\r\n        }\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n    function enableWhitelist(address[] addresses) onlyOwner public {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            blacklist[addresses[i]] = false;\r\n        }\r\n    }\r\n\r\n    function disableWhitelist(address[] addresses) onlyOwner public {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            blacklist[addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function finishUserDistribution() onlyOwner canUserDistr public returns (bool) {\r\n        distributionuserFinished = true;\r\n        emit DistrFinished();\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n\t    return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n\r\n        require(_to != address(0));\r\n        require(_amount <= balances[msg.sender]);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\r\n\r\n        require(_to != address(0));\r\n        require(_amount <= balances[_from]);\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n        \r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        // mitigates the ERC20 spend/approval race condition\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function withdraw() onlyOwner public {\r\n        uint256 etherBalance = address(this).balance;\r\n        owner.transfer(etherBalance);\r\n    }\r\n\r\n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\r\n        ForeignToken t = ForeignToken(tokenAddress);\r\n        uint bal = t.balanceOf(who);\r\n        return bal;\r\n    }\r\n\r\n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\r\n        ForeignToken token = ForeignToken(_tokenContract);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        return token.transfer(owner, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"teamRelease\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totaTeamRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"disableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishUserDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"enableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionteamFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionuserFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamvalue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uservalue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserDistr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TeamDistr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrFinished\",\"type\":\"event\"}]","ContractName":"TFFC","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://59b977b4f19ba80258c99605370d572f5e77ef419accbcdf29503023bd0647e6"}]}