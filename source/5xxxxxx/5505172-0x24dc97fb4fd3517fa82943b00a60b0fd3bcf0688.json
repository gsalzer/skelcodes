{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract HasManager {\r\n  address public manager;\r\n\r\n  modifier onlyManager {\r\n    require(msg.sender == manager);\r\n    _;\r\n  }\r\n\r\n  function transferManager(address _newManager) public onlyManager() {\r\n    require(_newManager != address(0));\r\n    manager = _newManager;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Whitelist is Ownable {\r\n  mapping(address => bool) public whitelist;\r\n  address public whitelistManager;\r\n  function AddToWhiteList(address _addr) public {\r\n      require(msg.sender == whitelistManager || msg.sender == owner);\r\n      whitelist[_addr] = true;\r\n  }\r\n\r\n  function AssignWhitelistManager(address _addr) public onlyOwner {\r\n      whitelistManager = _addr;\r\n  }\r\n\r\n  modifier whitelistedOnly {\r\n    require(whitelist[msg.sender]);\r\n    _;\r\n  }\r\n}\r\n\r\ncontract WithBonusPeriods is Ownable {\r\n  uint256 constant INVALID_FROM_TIMESTAMP = 1000000000000;\r\n  uint256 constant INFINITY_TO_TIMESTAMP= 1000000000000;\r\n  struct BonusPeriod {\r\n    uint256 fromTimestamp;\r\n    uint256 toTimestamp;\r\n    uint256 bonusNumerator;\r\n    uint256 bonusDenominator;\r\n  }\r\n\r\n  BonusPeriod[] public bonusPeriods;\r\n  BonusPeriod currentBonusPeriod;\r\n\r\n  function WithBonusPeriods() public {\r\n      initBonuses();\r\n  }\r\n\r\n  function BonusPeriodsCount() public view returns (uint8) {\r\n    return uint8(bonusPeriods.length);\r\n  }\r\n\r\n  //find out bonus for specific timestamp\r\n  function BonusPeriodFor(uint256 timestamp) public view returns (bool ongoing, uint256 from, uint256 to, uint256 num, uint256 den) {\r\n    for(uint i = 0; i < bonusPeriods.length; i++)\r\n      if (bonusPeriods[i].fromTimestamp <= timestamp && bonusPeriods[i].toTimestamp >= timestamp)\r\n        return (true, bonusPeriods[i].fromTimestamp, bonusPeriods[i].toTimestamp, bonusPeriods[i].bonusNumerator,\r\n          bonusPeriods[i].bonusDenominator);\r\n    return (false, 0, 0, 0, 0);\r\n  }\r\n\r\n  function initBonusPeriod(uint256 from, uint256 to, uint256 num, uint256 den) internal  {\r\n    bonusPeriods.push(BonusPeriod(from, to, num, den));\r\n  }\r\n\r\n  function initBonuses() internal {\r\n      //1-7 May, 20%\r\n      initBonusPeriod(1525132800, 1525737599, 20, 100);\r\n      //8-14 May, 15%\r\n      initBonusPeriod(1525737600, 1526342399, 15, 100);\r\n      //15 -21 May, 10%\r\n      initBonusPeriod(1526342400, 1526947199, 10, 100);\r\n      //22 -28 May, 5%\r\n      initBonusPeriod(1526947200, 1527551999, 5, 100);\r\n  }\r\n\r\n  function updateCurrentBonusPeriod() internal  {\r\n    if (currentBonusPeriod.fromTimestamp <= block.timestamp\r\n      && currentBonusPeriod.toTimestamp >= block.timestamp)\r\n      return;\r\n\r\n    currentBonusPeriod.fromTimestamp = INVALID_FROM_TIMESTAMP;\r\n\r\n    for(uint i = 0; i < bonusPeriods.length; i++)\r\n      if (bonusPeriods[i].fromTimestamp <= block.timestamp && bonusPeriods[i].toTimestamp >= block.timestamp) {\r\n        currentBonusPeriod = bonusPeriods[i];\r\n        return;\r\n      }\r\n  }\r\n}\r\n\r\ncontract ICrowdsaleProcessor is Ownable, HasManager {\r\n  modifier whenCrowdsaleAlive() {\r\n    require(isActive());\r\n    _;\r\n  }\r\n\r\n  modifier whenCrowdsaleFailed() {\r\n    require(isFailed());\r\n    _;\r\n  }\r\n\r\n  modifier whenCrowdsaleSuccessful() {\r\n    require(isSuccessful());\r\n    _;\r\n  }\r\n\r\n  modifier hasntStopped() {\r\n    require(!stopped);\r\n    _;\r\n  }\r\n\r\n  modifier hasBeenStopped() {\r\n    require(stopped);\r\n    _;\r\n  }\r\n\r\n  modifier hasntStarted() {\r\n    require(!started);\r\n    _;\r\n  }\r\n\r\n  modifier hasBeenStarted() {\r\n    require(started);\r\n    _;\r\n  }\r\n\r\n  // Minimal acceptable hard cap\r\n  uint256 constant public MIN_HARD_CAP = 1 ether;\r\n\r\n  // Minimal acceptable duration of crowdsale\r\n  uint256 constant public MIN_CROWDSALE_TIME = 3 days;\r\n\r\n  // Maximal acceptable duration of crowdsale\r\n  uint256 constant public MAX_CROWDSALE_TIME = 50 days;\r\n\r\n  // Becomes true when timeframe is assigned\r\n  bool public started;\r\n\r\n  // Becomes true if cancelled by owner\r\n  bool public stopped;\r\n\r\n  // Total collected Ethereum: must be updated every time tokens has been sold\r\n  uint256 public totalCollected;\r\n\r\n  // Total amount of project's token sold: must be updated every time tokens has been sold\r\n  uint256 public totalSold;\r\n\r\n  // Crowdsale minimal goal, must be greater or equal to Forecasting min amount\r\n  uint256 public minimalGoal;\r\n\r\n  // Crowdsale hard cap, must be less or equal to Forecasting max amount\r\n  uint256 public hardCap;\r\n\r\n  // Crowdsale duration in seconds.\r\n  // Accepted range is MIN_CROWDSALE_TIME..MAX_CROWDSALE_TIME.\r\n  uint256 public duration;\r\n\r\n  // Start timestamp of crowdsale, absolute UTC time\r\n  uint256 public startTimestamp;\r\n\r\n  // End timestamp of crowdsale, absolute UTC time\r\n  uint256 public endTimestamp;\r\n\r\n  // Allows to transfer some ETH into the contract without selling tokens\r\n  function deposit() public payable {}\r\n\r\n  // Returns address of crowdsale token, must be ERC20 compilant\r\n  function getToken() public returns(address);\r\n\r\n  // Transfers ETH rewards amount (if ETH rewards is configured) to Forecasting contract\r\n  function mintETHRewards(address _contract, uint256 _amount) public onlyManager();\r\n\r\n  // Mints token Rewards to Forecasting contract\r\n  function mintTokenRewards(address _contract, uint256 _amount) public onlyManager();\r\n\r\n  // Releases tokens (transfers crowdsale token from mintable to transferrable state)\r\n  function releaseTokens() public onlyManager() hasntStopped() whenCrowdsaleSuccessful();\r\n\r\n  // Stops crowdsale. Called by CrowdsaleController, the latter is called by owner.\r\n  // Crowdsale may be stopped any time before it finishes.\r\n  function stop() public onlyManager() hasntStopped();\r\n\r\n  // Validates parameters and starts crowdsale\r\n  function start(uint256 _startTimestamp, uint256 _endTimestamp, address _fundingAddress)\r\n    public onlyManager() hasntStarted() hasntStopped();\r\n\r\n  // Is crowdsale failed (completed, but minimal goal wasn't reached)\r\n  function isFailed() public constant returns (bool);\r\n\r\n  // Is crowdsale active (i.e. the token can be sold)\r\n  function isActive() public constant returns (bool);\r\n\r\n  // Is crowdsale completed successfully\r\n  function isSuccessful() public constant returns (bool);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract Crowdsaled is Ownable {\r\n        address public crowdsaleContract = address(0);\r\n        function Crowdsaled() public {\r\n        }\r\n\r\n        modifier onlyCrowdsale{\r\n          require(msg.sender == crowdsaleContract);\r\n          _;\r\n        }\r\n\r\n        modifier onlyCrowdsaleOrOwner {\r\n          require((msg.sender == crowdsaleContract) || (msg.sender == owner));\r\n          _;\r\n        }\r\n\r\n        function setCrowdsale(address crowdsale) public onlyOwner() {\r\n                crowdsaleContract = crowdsale;\r\n        }\r\n}\r\n\r\ncontract LetItPlayToken is Crowdsaled, StandardToken {\r\n        uint256 public totalSupply;\r\n        string public name;\r\n        string public symbol;\r\n        uint8 public decimals;\r\n\r\n        address public forSale;\r\n        address public preSale;\r\n        address public ecoSystemFund;\r\n        address public founders;\r\n        address public team;\r\n        address public advisers;\r\n        address public bounty;\r\n        address public eosShareDrop;\r\n\r\n        bool releasedForTransfer;\r\n\r\n        uint256 private shift;\r\n\r\n        //initial coin distribution\r\n        function LetItPlayToken(\r\n            address _forSale,\r\n            address _ecoSystemFund,\r\n            address _founders,\r\n            address _team,\r\n            address _advisers,\r\n            address _bounty,\r\n            address _preSale,\r\n            address _eosShareDrop\r\n          ) public {\r\n          name = \"LetItPlay Token\";\r\n          symbol = \"PLAY\";\r\n          decimals = 8;\r\n          shift = uint256(10)**decimals;\r\n          totalSupply = 1000000000 * shift;\r\n          forSale = _forSale;\r\n          ecoSystemFund = _ecoSystemFund;\r\n          founders = _founders;\r\n          team = _team;\r\n          advisers = _advisers;\r\n          bounty = _bounty;\r\n          eosShareDrop = _eosShareDrop;\r\n          preSale = _preSale;\r\n\r\n          balances[forSale] = totalSupply * 59 / 100;\r\n          balances[ecoSystemFund] = totalSupply * 15 / 100;\r\n          balances[founders] = totalSupply * 15 / 100;\r\n          balances[team] = totalSupply * 5 / 100;\r\n          balances[advisers] = totalSupply * 3 / 100;\r\n          balances[bounty] = totalSupply * 1 / 100;\r\n          balances[preSale] = totalSupply * 1 / 100;\r\n          balances[eosShareDrop] = totalSupply * 1 / 100;\r\n        }\r\n\r\n        function transferByOwner(address from, address to, uint256 value) public onlyOwner {\r\n          require(balances[from] >= value);\r\n          balances[from] = balances[from].sub(value);\r\n          balances[to] = balances[to].add(value);\r\n          emit Transfer(from, to, value);\r\n        }\r\n\r\n        //can be called by crowdsale before token release, control over forSale portion of token supply\r\n        function transferByCrowdsale(address to, uint256 value) public onlyCrowdsale {\r\n          require(balances[forSale] >= value);\r\n          balances[forSale] = balances[forSale].sub(value);\r\n          balances[to] = balances[to].add(value);\r\n          emit Transfer(forSale, to, value);\r\n        }\r\n\r\n        //can be called by crowdsale before token release, allowences is respected here\r\n        function transferFromByCrowdsale(address _from, address _to, uint256 _value) public onlyCrowdsale returns (bool) {\r\n            return super.transferFrom(_from, _to, _value);\r\n        }\r\n\r\n        //after the call token is available for exchange\r\n        function releaseForTransfer() public onlyCrowdsaleOrOwner {\r\n          require(!releasedForTransfer);\r\n          releasedForTransfer = true;\r\n        }\r\n\r\n        //forbid transfer before release\r\n        function transfer(address _to, uint256 _value) public returns (bool) {\r\n          require(releasedForTransfer);\r\n          return super.transfer(_to, _value);\r\n        }\r\n\r\n        //forbid transfer before release\r\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n           require(releasedForTransfer);\r\n           return super.transferFrom(_from, _to, _value);\r\n        }\r\n\r\n        function burn(uint256 value) public  onlyOwner {\r\n            require(value <= balances[msg.sender]);\r\n            balances[msg.sender] = balances[msg.sender].sub(value);\r\n            balances[address(0)] = balances[address(0)].add(value);\r\n            emit Transfer(msg.sender, address(0), value);\r\n        }\r\n}\r\n\r\ncontract BasicCrowdsale is ICrowdsaleProcessor {\r\n  event CROWDSALE_START(uint256 startTimestamp, uint256 endTimestamp, address fundingAddress);\r\n\r\n  // Where to transfer collected ETH\r\n  address public fundingAddress;\r\n\r\n  // Ctor.\r\n  function BasicCrowdsale(\r\n    address _owner,\r\n    address _manager\r\n  )\r\n    public\r\n  {\r\n    owner = _owner;\r\n    manager = _manager;\r\n  }\r\n\r\n  // called by CrowdsaleController to transfer reward part of ETH\r\n  // collected by successful crowdsale to Forecasting contract.\r\n  // This call is made upon closing successful crowdfunding process\r\n  // iff agreed ETH reward part is not zero\r\n  function mintETHRewards(\r\n    address _contract,  // Forecasting contract\r\n    uint256 _amount     // agreed part of totalCollected which is intended for rewards\r\n  )\r\n    public\r\n    onlyManager() // manager is CrowdsaleController instance\r\n  {\r\n    require(_contract.call.value(_amount)());\r\n  }\r\n\r\n  // cancels crowdsale\r\n  function stop() public onlyManager() hasntStopped()  {\r\n    // we can stop only not started and not completed crowdsale\r\n    if (started) {\r\n      require(!isFailed());\r\n      require(!isSuccessful());\r\n    }\r\n    stopped = true;\r\n  }\r\n\r\n  // called by CrowdsaleController to setup start and end time of crowdfunding process\r\n  // as well as funding address (where to transfer ETH upon successful crowdsale)\r\n  function start(\r\n    uint256 _startTimestamp,\r\n    uint256 _endTimestamp,\r\n    address _fundingAddress\r\n  )\r\n    public\r\n    onlyManager()   // manager is CrowdsaleController instance\r\n    hasntStarted()  // not yet started\r\n    hasntStopped()  // crowdsale wasn't cancelled\r\n  {\r\n    require(_fundingAddress != address(0));\r\n\r\n    // start time must not be earlier than current time\r\n    require(_startTimestamp >= block.timestamp);\r\n\r\n    // range must be sane\r\n    require(_endTimestamp > _startTimestamp);\r\n    duration = _endTimestamp - _startTimestamp;\r\n\r\n    // duration must fit constraints\r\n    require(duration >= MIN_CROWDSALE_TIME && duration <= MAX_CROWDSALE_TIME);\r\n\r\n    startTimestamp = _startTimestamp;\r\n    endTimestamp = _endTimestamp;\r\n    fundingAddress = _fundingAddress;\r\n\r\n    // now crowdsale is considered started, even if the current time is before startTimestamp\r\n    started = true;\r\n\r\n    emit CROWDSALE_START(_startTimestamp, _endTimestamp, _fundingAddress);\r\n  }\r\n\r\n  // must return true if crowdsale is over, but it failed\r\n  function isFailed()\r\n    public\r\n    constant\r\n    returns(bool)\r\n  {\r\n    return (\r\n      // it was started\r\n      started &&\r\n\r\n      // crowdsale period has finished\r\n      block.timestamp >= endTimestamp &&\r\n\r\n      // but collected ETH is below the required minimum\r\n      totalCollected < minimalGoal\r\n    );\r\n  }\r\n\r\n  // must return true if crowdsale is active (i.e. the token can be bought)\r\n  function isActive()\r\n    public\r\n    constant\r\n    returns(bool)\r\n  {\r\n    return (\r\n      // it was started\r\n      started &&\r\n\r\n      // hard cap wasn't reached yet\r\n      totalCollected < hardCap &&\r\n\r\n      // and current time is within the crowdfunding period\r\n      block.timestamp >= startTimestamp &&\r\n      block.timestamp < endTimestamp\r\n    );\r\n  }\r\n\r\n  // must return true if crowdsale completed successfully\r\n  function isSuccessful()\r\n    public\r\n    constant\r\n    returns(bool)\r\n  {\r\n    return (\r\n      // either the hard cap is collected\r\n      totalCollected >= hardCap ||\r\n\r\n      // ...or the crowdfunding period is over, but the minimum has been reached\r\n      (block.timestamp >= endTimestamp && totalCollected >= minimalGoal)\r\n    );\r\n  }\r\n}\r\n\r\ncontract Crowdsale is BasicCrowdsale, Whitelist, WithBonusPeriods {\r\n\r\n  struct Investor {\r\n    uint256 weiDonated;\r\n    uint256 tokensGiven;\r\n  }\r\n\r\n  mapping(address => Investor) participants;\r\n\r\n  uint256 public tokenRateWei;\r\n  LetItPlayToken public token;\r\n\r\n  // Ctor. MinimalGoal, hardCap, and price are not changeable.\r\n  function Crowdsale(\r\n    uint256 _minimalGoal,\r\n    uint256 _hardCap,\r\n    uint256 _tokenRateWei,\r\n    address _token\r\n  )\r\n    public\r\n    // simplest case where manager==owner. See onlyOwner() and onlyManager() modifiers\r\n    // before functions to figure out the cases in which those addresses should differ\r\n    BasicCrowdsale(msg.sender, msg.sender)\r\n  {\r\n    // just setup them once...\r\n    minimalGoal = _minimalGoal;\r\n    hardCap = _hardCap;\r\n    tokenRateWei = _tokenRateWei;\r\n    token = LetItPlayToken(_token);\r\n  }\r\n\r\n  // Here goes ICrowdsaleProcessor implementation\r\n\r\n  // returns address of crowdsale token. The token must be ERC20-compliant\r\n  function getToken()\r\n    public\r\n    returns(address)\r\n  {\r\n    return address(token);\r\n  }\r\n\r\n  // called by CrowdsaleController to transfer reward part of\r\n  // tokens sold by successful crowdsale to Forecasting contract.\r\n  // This call is made upon closing successful crowdfunding process.\r\n  function mintTokenRewards(\r\n    address _contract,  // Forecasting contract\r\n    uint256 _amount     // agreed part of totalSold which is intended for rewards\r\n  )\r\n    public\r\n    onlyManager() // manager is CrowdsaleController instance\r\n  {\r\n    // crowdsale token is mintable in this example, tokens are created here\r\n    token.transferByCrowdsale(_contract, _amount);\r\n  }\r\n\r\n  // transfers crowdsale token from mintable to transferrable state\r\n  function releaseTokens()\r\n    public\r\n    onlyManager()             // manager is CrowdsaleController instance\r\n    hasntStopped()            // crowdsale wasn't cancelled\r\n    whenCrowdsaleSuccessful() // crowdsale was successful\r\n  {\r\n    // see token example\r\n    token.releaseForTransfer();\r\n  }\r\n\r\n  function () payable public {\r\n    require(msg.value > 0);\r\n    sellTokens(msg.sender, msg.value);\r\n  }\r\n\r\n  function sellTokens(address _recepient, uint256 _value)\r\n    internal\r\n    hasBeenStarted()\r\n    hasntStopped()\r\n    whenCrowdsaleAlive()\r\n    whitelistedOnly()\r\n  {\r\n    uint256 newTotalCollected = totalCollected + _value;\r\n\r\n    if (hardCap < newTotalCollected) {\r\n      uint256 refund = newTotalCollected - hardCap;\r\n      uint256 diff = _value - refund;\r\n      _recepient.transfer(refund);\r\n      _value = diff;\r\n    }\r\n\r\n    uint256 tokensSold = _value * uint256(10)**token.decimals() / tokenRateWei;\r\n\r\n    //apply bonus period\r\n    updateCurrentBonusPeriod();\r\n    if (currentBonusPeriod.fromTimestamp != INVALID_FROM_TIMESTAMP)\r\n      tokensSold += tokensSold * currentBonusPeriod.bonusNumerator / currentBonusPeriod.bonusDenominator;\r\n\r\n    token.transferByCrowdsale(_recepient, tokensSold);\r\n    participants[_recepient].weiDonated += _value;\r\n    participants[_recepient].tokensGiven += tokensSold;\r\n    totalCollected += _value;\r\n    totalSold += tokensSold;\r\n  }\r\n\r\n  // project's owner withdraws ETH funds to the funding address upon successful crowdsale\r\n  function withdraw(uint256 _amount) public // can be done partially\r\n    onlyOwner() // project's owner\r\n    hasntStopped()  // crowdsale wasn't cancelled\r\n    whenCrowdsaleSuccessful() // crowdsale completed successfully\r\n  {\r\n    require(_amount <= address(this).balance);\r\n    fundingAddress.transfer(_amount);\r\n  }\r\n\r\n  // backers refund their ETH if the crowdsale was cancelled or has failed\r\n  function refund() public\r\n  {\r\n    // either cancelled or failed\r\n    require(stopped || isFailed());\r\n\r\n    uint256 weiDonated = participants[msg.sender].weiDonated;\r\n    uint256 tokens = participants[msg.sender].tokensGiven;\r\n\r\n    // prevent from doing it twice\r\n    require(weiDonated > 0);\r\n    participants[msg.sender].weiDonated = 0;\r\n    participants[msg.sender].tokensGiven = 0;\r\n\r\n    msg.sender.transfer(weiDonated);\r\n\r\n    //this must be approved by investor\r\n    token.transferFromByCrowdsale(msg.sender, token.forSale(), tokens);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CROWDSALE_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddToWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintETHRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BonusPeriodsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_CROWDSALE_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BonusPeriodFor\",\"outputs\":[{\"name\":\"ongoing\",\"type\":\"bool\"},{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"},{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"den\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AssignWhitelistManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"name\":\"_endTimestamp\",\"type\":\"uint256\"},{\"name\":\"_fundingAddress\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokenRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"transferManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRateWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusPeriods\",\"outputs\":[{\"name\":\"fromTimestamp\",\"type\":\"uint256\"},{\"name\":\"toTimestamp\",\"type\":\"uint256\"},{\"name\":\"bonusNumerator\",\"type\":\"uint256\"},{\"name\":\"bonusDenominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSuccessful\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFailed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_minimalGoal\",\"type\":\"uint256\"},{\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"name\":\"_tokenRateWei\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"CROWDSALE_START\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000006c6b935b8bbd40000000000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000009584c15eec5f1833d66796e1cfebaab6a1e1adae","Library":"","SwarmSource":"bzzr://803ed6545e3deefc5f3964d00aa3de86bfd1649c8a2ce05819b681320174a965"}]}