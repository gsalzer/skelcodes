{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface IDonQuixoteToken{                          \r\n    function withhold(address _user,  uint256 _amount) external returns (bool _result);  \r\n    function transfer(address _to, uint256 _value) external;                             \r\n    function sendGameGift(address _player) external returns (bool _result);              \r\n    function logPlaying(address _player) external returns (bool _result);               \r\n    function balanceOf(address _user) constant  external returns (uint256 _balance);\r\n} \r\n\r\ncontract BaseGame {             \r\n    string public gameName=\"BigOrSmall\";         \r\n     uint public constant gameType = 2001;   \r\n    string public officialGameUrl;  \r\n    mapping (address => uint256) public userTokenOf;     \r\n    uint public bankerBeginTime;     \r\n    uint public bankerEndTime;       \r\n    address public currentBanker;      \r\n    \t\r\n    function depositToken(uint256 _amount) public;\r\n    function withdrawToken(uint256 _amount) public;\r\n\tfunction withdrawAllToken() public;\r\n    function setBanker(address _banker, uint256 _beginTime, uint256 _endTime) public returns(bool _result);     \r\n    function canSetBanker() view public returns (bool _result);         \r\n}\r\ncontract Base is BaseGame { \r\n    using SafeMath for uint256;     \r\n    uint public createTime = now;\r\n    address public owner;\r\n\t\r\n    IDonQuixoteToken public DonQuixoteToken;\r\n      function Base() public {\r\n    }\r\n\t\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\t\r\n    function setOwner(address _newOwner)  public  onlyOwner {\r\n         require(_newOwner!= 0x0);\r\n        owner = _newOwner;\r\n    }\r\n        \r\n    bool public globalLocked = false;     \r\n\r\n    function lock() internal {             \r\n        require(!globalLocked);\r\n        globalLocked = true;\r\n    }\r\n\r\n    function unLock() internal {\r\n        require(globalLocked);\r\n        globalLocked = false;\r\n    }    \r\n  \r\n    function setLock()  public onlyOwner{\r\n        globalLocked = false;     \r\n    }\r\n    function tokenOf(address _user) view public returns(uint256 _result){\r\n        _result = DonQuixoteToken.balanceOf(_user);\r\n    }\r\n\t\r\n    function depositToken(uint256 _amount) public {\r\n        lock();\r\n        _depositToken(msg.sender, _amount);\r\n        unLock();\r\n    }\r\n\r\n    function _depositToken(address _to, uint256 _amount) internal {         \r\n        require(_to != 0x0);\r\n        DonQuixoteToken.withhold(_to, _amount);\r\n        userTokenOf[_to] = userTokenOf[_to].add(_amount);\r\n    }\r\n\r\n    function withdrawAllToken() public{    \r\n        uint256 _amount = userTokenOf[msg.sender];\r\n        withdrawToken(_amount);\r\n    }\r\n\t\r\n\tfunction withdrawToken(uint256 _amount) public {    \r\n        lock();  \r\n        _withdrawToken(msg.sender, _amount);\r\n        unLock();\r\n    }\r\n\r\n    function _withdrawToken(address _to, uint256 _amount) internal {      \r\n        require(_to != 0x0);\r\n        userTokenOf[_to] = userTokenOf[_to].sub(_amount);\r\n        DonQuixoteToken.transfer(_to, _amount);\r\n    }\r\n\r\n    uint public currentEventId = 1;            \r\n\r\n    function getEventId() internal returns(uint _result) {  \r\n        _result = currentEventId;\r\n        currentEventId ++;\r\n    }\r\n\r\n    function setOfficialGameUrl(string _newOfficialGameUrl) public onlyOwner{\r\n        officialGameUrl = _newOfficialGameUrl;\r\n    }\r\n        \r\n}\r\n\r\ncontract SelectOne is Base\r\n{    \r\n    uint public constant minNum = 1;        \r\n    uint public maxNum = 22;               \r\n    uint  public winMultiplePer = 90;     \r\n    \r\n    uint  public constant maxPlayerNum = 100;      \r\n    uint public gameTime; \r\n    uint256 public gameMaxBetAmount;    \r\n    uint256 public gameMinBetAmount;    \r\n\t\r\n\tfunction SelectOne(uint _maxNum, uint  _gameTime, uint256 _gameMinBetAmount, uint256 _gameMaxBetAmount,uint _winMultiplePer, string _gameName,address _DonQuixoteToken)  public {\r\n        require(_gameMinBetAmount >= 0);\r\n        require(_gameMaxBetAmount > 0);\r\n        require(_gameMaxBetAmount >= _gameMinBetAmount);\r\n\t\trequire(_maxNum < 10000);              \r\n        require(1 < _maxNum);                   \r\n        require(_winMultiplePer < _maxNum.mul(100));      \r\n        \r\n\t\tgameMinBetAmount = _gameMinBetAmount;\r\n        gameMaxBetAmount = _gameMaxBetAmount;\r\n        gameTime = _gameTime;\r\n        maxNum = _maxNum;                      \r\n        winMultiplePer = _winMultiplePer;       \r\n        owner = msg.sender;             \r\n        gameName = _gameName;           \r\n\r\n        require(_DonQuixoteToken != 0x0);\r\n        DonQuixoteToken = IDonQuixoteToken(_DonQuixoteToken);\r\n    }\r\n\r\n    uint public lastBlockNumber = 0;            \r\n    bool public betInfoIsLocked = false;       \r\n    address public auction;             \r\n    \r\n\r\n    function setAuction(address _newAuction) public onlyOwner{\r\n        require(_newAuction != 0x0);\r\n        auction = _newAuction;\r\n    }\r\n    modifier onlyAuction {             \r\n        require(msg.sender == auction);\r\n        _;\r\n    }\r\n\r\n    function canSetBanker() public view returns (bool _result){\r\n        _result =  bankerEndTime <= now && gameOver;\r\n    }\r\n\t\r\n    modifier onlyBanker {               \r\n        require(msg.sender == currentBanker);\r\n        require(bankerBeginTime <= now);\r\n        require(now < bankerEndTime);     \r\n        _;\r\n    }\r\n\r\n    event OnSetNewBanker(address _caller, address _banker, uint _beginTime, uint _endTime, uint _code, uint _eventTime, uint eventId);\r\n\r\n    function setBanker(address _banker, uint _beginTime, uint _endTime) public onlyAuction returns(bool _result)\r\n\t{\r\n        _result = false;\r\n        require(_banker != 0x0);\r\n        if(now < bankerEndTime){        \r\n            emit OnSetNewBanker(msg.sender, _banker,  _beginTime,  _endTime, 1, now, getEventId());\r\n            return;\r\n        }\r\n        if(!gameOver){                  \r\n            emit OnSetNewBanker(msg.sender, _banker,  _beginTime,  _endTime, 2, now, getEventId());\r\n            return;\r\n        }\r\n        if(_beginTime > now){               \r\n            emit OnSetNewBanker(msg.sender, _banker,  _beginTime,  _endTime, 3, now, getEventId()); \r\n            return;\r\n        }\r\n        if(_endTime <= now){\r\n            emit OnSetNewBanker(msg.sender, _banker,  _beginTime,  _endTime, 4, now, getEventId());\r\n            return;\r\n        }\r\n\t    if(now < donGameGiftLineTime){\r\n            DonQuixoteToken.logPlaying(_banker);\r\n        }\r\n        currentBanker = _banker;\r\n        bankerBeginTime = _beginTime;\r\n        bankerEndTime = _endTime;\r\n        emit OnSetNewBanker(msg.sender, _banker,  _beginTime,  _endTime, 0 , now, getEventId());\r\n        _result = true;\r\n    }\r\n \r\n    uint public playNo = 1;             \r\n    uint public gameID = 0;             \r\n    uint public gameBeginPlayNo;        \r\n    uint public gameEndPlayNo;          \r\n    bytes32 public gameEncryptedText;  \r\n    uint public gameResult;            \r\n    string public gameRandon1;          \r\n    string public constant gameRandon2 = 'ChinasNewGovernmentBracesforTrump';   \r\n    uint  public gameBeginTime;        \r\n    uint  public gameEndTime;           \r\n    bool public gameOver = true;       \r\n    uint public donGameGiftLineTime = now.add(90 days);  \r\n    \r\n\t\r\n    event OnNewGame(uint _gameID, address _banker, bytes32 _gameEncryptedText, uint  _gameBeginTime,  uint  _gameEndTime, uint _eventTime, uint _eventId);\r\n\r\n    function newGame(bytes32 _gameEncryptedText) public onlyBanker returns(bool _result)               \r\n    {\r\n        _result = _newGame( _gameEncryptedText);\r\n    }\r\n\r\n    function _newGame(bytes32 _gameEncryptedText) private  returns(bool _result)       \r\n    {\r\n        _result = false;\r\n        require(gameOver); \r\n        require(bankerBeginTime < now);       \r\n        require(now.add(gameTime) <= bankerEndTime);    \r\n        gameID++;                           \r\n        currentBanker = msg.sender;\r\n        gameEncryptedText = _gameEncryptedText;\r\n        gameRandon1 = '';          \r\n        gameBeginTime = now;                \r\n        gameEndTime = now.add(gameTime);\r\n        gameBeginPlayNo = playNo;          \r\n        gameEndPlayNo = 0;                 \r\n        gameResult = 0;  \r\n        gameOver = false;\r\n        \r\n        emit OnNewGame(gameID, msg.sender, _gameEncryptedText, now, now.add(gameTime), now, getEventId());\r\n        _result = true;\r\n    }\r\n    \r\n    struct betInfo              \r\n    {\r\n        address Player;\r\n        uint BetNum;            \r\n        uint256 BetAmount;      \r\n        bool IsReturnAward;     \r\n    }\r\n\r\n    mapping (uint => betInfo) public playerBetInfoOf;              \r\n    event OnPlay(uint indexed _gameID, address indexed _player, uint _betNum, uint256 _betAmount, uint _playNo, uint _eventTime, uint _eventId);\r\n\r\n    function play(uint _betNum, uint256 _betAmount) public  returns(bool _result){      \r\n        _result = _play(_betNum, _betAmount);\r\n    }\r\n\r\n    function _play(uint _betNum, uint256 _betAmount) private  returns(bool _result){            \r\n        _result = false;\r\n        require(!gameOver);\r\n        require(!betInfoIsLocked);                         \r\n        require(now < gameEndTime);\r\n        require(playNo.sub(gameBeginPlayNo) <= maxPlayerNum); \r\n        require(minNum <= _betNum && _betNum <= maxNum);    \r\n        require(msg.sender != currentBanker);                \r\n                   \r\n        uint256 ba = _betAmount;\r\n        if (ba > gameMaxBetAmount){                       \r\n            ba = gameMaxBetAmount;\r\n        }\r\n        require(ba >= gameMinBetAmount);                   \r\n\r\n        if(userTokenOf[msg.sender] < ba){                                       \r\n            depositToken(ba.sub(userTokenOf[msg.sender]));                    \r\n        }\r\n        require(userTokenOf[msg.sender] >= ba);             \r\n       \r\n        uint256 BankerAmount = ba.mul(winMultiplePer).div(100);                  \r\n      \r\n        require(userTokenOf[currentBanker] >= BankerAmount);\r\n\r\n        betInfo memory bi = betInfo({\r\n                Player :  msg.sender,\r\n                BetNum : _betNum,\r\n                BetAmount : ba,\r\n                IsReturnAward: false                 \r\n        });\r\n\r\n        playerBetInfoOf[playNo] = bi;\r\n        userTokenOf[msg.sender] = userTokenOf[msg.sender].sub(ba);                     \r\n        userTokenOf[currentBanker] = userTokenOf[currentBanker].sub(BankerAmount);      \r\n        userTokenOf[this] = userTokenOf[this].add(ba.add(BankerAmount));                \r\n\r\n        emit OnPlay(gameID,  msg.sender,  _betNum,  ba, playNo, now, getEventId());\r\n\r\n        lastBlockNumber = block.number;    \r\n        playNo++;                          \r\n\r\n        if(now < donGameGiftLineTime){     \r\n            DonQuixoteToken.logPlaying(msg.sender);           \r\n        }\r\n        _result = true;\r\n    }\r\n\r\n   \r\n    \r\n    function lockBetInfo() public onlyBanker returns (bool _result) {                  \r\n        require(!gameOver);\r\n        require(now < gameEndTime);\r\n        require(!betInfoIsLocked);\r\n        betInfoIsLocked = true;\r\n        _result = true;\r\n    }\r\n\r\n    function uint8ToString(uint v) private pure returns (string)    \r\n    {\r\n        uint maxlength = 8;                    \r\n        bytes memory reversed = new bytes(maxlength);\r\n        uint i = 0;\r\n        while (v != 0) {\r\n            uint remainder = v % 10;\r\n            v = v.div(10);\r\n            reversed[i++] = byte(remainder.add(48));\r\n        }\r\n        bytes memory s = new bytes(i);         \r\n        for (uint j = 0; j < i; j++) {\r\n            s[j] = reversed[(i.sub(j)).sub(1)];         \r\n        }\r\n        string memory str = string(s);          \r\n        return str;                             \r\n    }\r\n\r\n    event OnOpenGameResult(uint indexed _gameID, address _banker, uint _gameResult, string _r1, bool  _result, uint  _code, uint _eventTime, uint eventId);\r\n\r\n    function openGameResult(uint _gameResult, string _r1) public onlyBanker  returns(bool _result){\r\n        _result =  _openGameResult( _gameResult,  _r1);\r\n    }\r\n    \r\n    function _openGameResult(uint _gameResult, string _r1) private  returns(bool _result){            \r\n       \r\n\t   _result = false;\r\n        require(betInfoIsLocked);          \r\n        require(!gameOver);\r\n        require(now <= gameEndTime);       \r\n\r\n        if(lastBlockNumber == block.number){                        \r\n            emit OnOpenGameResult(gameID, msg.sender, _gameResult, _r1,  false, 2, now, getEventId());         \r\n            return;\r\n        }\r\n\r\n        string memory gr = uint8ToString(_gameResult); \r\n        if(keccak256(gr, gameRandon2,  _r1) ==  gameEncryptedText){\r\n            if(_gameResult >= minNum && _gameResult <= maxNum){     \r\n                gameResult = _gameResult;\r\n                gameRandon1 = _r1;\r\n                gameEndPlayNo = playNo.sub(1); \r\n                for(uint i = gameBeginPlayNo; i < playNo; i++){     \r\n                    betInfo storage p = playerBetInfoOf[i];\r\n                    if(!p.IsReturnAward){   \r\n                        p.IsReturnAward = true;\r\n                        uint256 AllAmount = p.BetAmount.mul(winMultiplePer.add(100)).div(100);    \r\n                        if(p.BetNum == _gameResult){                                           \r\n                            userTokenOf[p.Player] = userTokenOf[p.Player].add(AllAmount);     \r\n                            userTokenOf[this] = userTokenOf[this].sub(AllAmount);               \r\n                        }else{                                                                  \r\n                            userTokenOf[currentBanker] = userTokenOf[currentBanker].add(AllAmount);\r\n                            userTokenOf[this] = userTokenOf[this].sub(AllAmount);               \r\n                            if(now < donGameGiftLineTime){  \r\n                                DonQuixoteToken.sendGameGift(p.Player);                                \r\n                            } \r\n                        }\r\n                    }\r\n                }\r\n                gameOver = true;\r\n                betInfoIsLocked = false;    \r\n                emit OnOpenGameResult(gameID, msg.sender,  _gameResult,  _r1, true, 0, now, getEventId());      \r\n                _result = true;\r\n                return;\r\n            }else{       \r\n                emit OnOpenGameResult(gameID, msg.sender,  _gameResult,  _r1,  false, 3, now, getEventId()); \r\n                return;                  \r\n            }\r\n        }else{           \r\n            emit OnOpenGameResult(gameID, msg.sender,  _gameResult,  _r1,  false,4, now, getEventId());\r\n            return;\r\n        }        \r\n    }\r\n\r\n    function openGameResultAndNewGame(uint _gameResult, string _r1, bytes32 _gameEncryptedText) public onlyBanker returns(bool _result){\r\n\t\tif(gameOver){\r\n            _result = true ;\r\n        }else{\r\n            _result = _openGameResult( _gameResult,  _r1);\r\n        }\r\n        if (_result){      \r\n            _result = _newGame( _gameEncryptedText);\r\n        }\r\n    }\r\n\r\n    function noOpenGameResult() public  returns(bool _result){         \r\n        _result = false;\r\n        require(!gameOver);       \r\n        require(gameEndTime < now); \r\n        if(lastBlockNumber == block.number){                           \r\n            emit OnOpenGameResult(gameID, msg.sender,0, '',false, 2, now, getEventId());\r\n            return;\r\n        }\r\n\r\n        lock(); \r\n\t\t\r\n        gameEndPlayNo = playNo - 1;         \r\n        for(uint i = gameBeginPlayNo; i < playNo; i++){                                \r\n            betInfo storage p = playerBetInfoOf[i];\r\n            if(!p.IsReturnAward){           \r\n                p.IsReturnAward = true;\r\n                uint256 AllAmount = p.BetAmount.mul(winMultiplePer.add(100)).div(100);     \r\n                userTokenOf[p.Player] = userTokenOf[p.Player].add(AllAmount);          \r\n                userTokenOf[this] = userTokenOf[this].sub(AllAmount);                  \r\n            }\r\n        }\r\n\r\n        gameOver = true;\r\n        if(betInfoIsLocked){\r\n            betInfoIsLocked = false;    \r\n        }\r\n        emit OnOpenGameResult(gameID, msg.sender,   0,  '',  true, 1, now, getEventId());\r\n        _result = true;\r\n\r\n        unLock();  \r\n    }\r\n\r\n    function  failUserRefund(uint _playNo) public returns (bool _result) {      \r\n        _result = false;\r\n        require(!gameOver);\r\n        require(gameEndTime.add(30 days) < now);          \r\n\r\n        betInfo storage p = playerBetInfoOf[_playNo];   \r\n        require(p.Player == msg.sender);               \r\n        \r\n        if(!p.IsReturnAward && p.BetNum > 0){            \r\n            p.IsReturnAward = true;\r\n            uint256 ToUser = p.BetAmount;   \r\n            uint256 ToBanker = p.BetAmount.mul(winMultiplePer).div(100);  \r\n            userTokenOf[this] = userTokenOf[this].sub(ToUser.add(ToBanker));              \r\n            userTokenOf[p.Player] = userTokenOf[p.Player].add(ToUser);         \r\n            userTokenOf[currentBanker] = userTokenOf[currentBanker].add(ToBanker);\r\n            _result = true;                                  \r\n        }\r\n    }\r\n\r\n    function transEther() public onlyOwner()    \r\n    {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n    \r\n    function () public payable {        \r\n      \r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_gameResult\",\"type\":\"uint256\"},{\"name\":\"_r1\",\"type\":\"string\"},{\"name\":\"_gameEncryptedText\",\"type\":\"bytes32\"}],\"name\":\"openGameResultAndNewGame\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentEventId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerBetInfoOf\",\"outputs\":[{\"name\":\"Player\",\"type\":\"address\"},{\"name\":\"BetNum\",\"type\":\"uint256\"},{\"name\":\"BetAmount\",\"type\":\"uint256\"},{\"name\":\"IsReturnAward\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPlayerNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"noOpenGameResult\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"officialGameUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameRandon1\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOfficialGameUrl\",\"type\":\"string\"}],\"name\":\"setOfficialGameUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameBeginTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"tokenOf\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameBeginPlayNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donGameGiftLineTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameMaxBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameEncryptedText\",\"type\":\"bytes32\"}],\"name\":\"newGame\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameRandon2\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canSetBanker\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playNo\",\"type\":\"uint256\"}],\"name\":\"failUserRefund\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betNum\",\"type\":\"uint256\"},{\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameEncryptedText\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBanker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winMultiplePer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameEndPlayNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_banker\",\"type\":\"address\"},{\"name\":\"_beginTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setBanker\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAuction\",\"type\":\"address\"}],\"name\":\"setAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameResult\",\"type\":\"uint256\"},{\"name\":\"_r1\",\"type\":\"string\"}],\"name\":\"openGameResult\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTokenOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betInfoIsLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameMinBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankerBeginTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DonQuixoteToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockBetInfo\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankerEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_maxNum\",\"type\":\"uint256\"},{\"name\":\"_gameTime\",\"type\":\"uint256\"},{\"name\":\"_gameMinBetAmount\",\"type\":\"uint256\"},{\"name\":\"_gameMaxBetAmount\",\"type\":\"uint256\"},{\"name\":\"_winMultiplePer\",\"type\":\"uint256\"},{\"name\":\"_gameName\",\"type\":\"string\"},{\"name\":\"_DonQuixoteToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_banker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_beginTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_code\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"OnSetNewBanker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_gameID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_banker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_gameEncryptedText\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_gameBeginTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_gameEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnNewGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_betNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_playNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnPlay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_banker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_gameResult\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_r1\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_code\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"OnOpenGameResult\",\"type\":\"event\"}]","ContractName":"SelectOne","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000098c77a2a57fb08b1fd51120cbf95314a0f0deb8200000000000000000000000000000000000000000000000000000000000000114f74746f20766f6e204269736d6172636b000000000000000000000000000000","Library":"","SwarmSource":"bzzr://6f24a6437dceee4781831b97b52dc848f0c6232463b2a1c9e8dbe2aafacbb0a3"}]}