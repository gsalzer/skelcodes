{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(burner, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/token/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   *\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/token/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n// File: contracts/BitexToken.sol\r\n\r\ncontract BitexToken is MintableToken, BurnableToken {\r\n    using SafeERC20 for ERC20;\r\n\r\n    string public constant name = \"Bitex Coin\";\r\n\r\n    string public constant symbol = \"XBX\";\r\n\r\n    uint8 public decimals = 18;\r\n\r\n    bool public tradingStarted = false;\r\n\r\n    // allow exceptional transfer fro sender address - this mapping  can be modified only before the starting rounds\r\n    mapping (address => bool) public transferable;\r\n\r\n    /**\r\n     * @dev modifier that throws if spender address is not allowed to transfer\r\n     * and the trading is not enabled\r\n     */\r\n    modifier allowTransfer(address _spender) {\r\n\r\n        require(tradingStarted || transferable[_spender]);\r\n        _;\r\n    }\r\n    /**\r\n    *\r\n    * Only the owner of the token smart contract can add allow token to be transfer before the trading has started\r\n    *\r\n    */\r\n\r\n    function modifyTransferableHash(address _spender, bool value) onlyOwner public {\r\n        transferable[_spender] = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to enable the trading.\r\n     */\r\n    function startTrading() onlyOwner public {\r\n        tradingStarted = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anyone to transfer the tokens once trading has started\r\n     * @param _to the recipient address of the tokens.\r\n     * @param _value number of tokens to be transfered.\r\n     */\r\n    function transfer(address _to, uint _value) allowTransfer(msg.sender) public returns (bool){\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anyone to transfer the  tokens once trading has started or if the spender is part of the mapping\r\n\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint the amout of tokens to be transfered\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) allowTransfer(_from) public returns (bool){\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender when not paused.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n    function approve(address _spender, uint256 _value) public allowTransfer(_spender) returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    /**\r\n     * Adding whenNotPaused\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public allowTransfer(_spender) returns (bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    /**\r\n     * Adding whenNotPaused\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public allowTransfer(_spender) returns (bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/KnowYourCustomer.sol\r\n\r\ncontract KnowYourCustomer is Ownable\r\n{\r\n    //\r\n    // with this structure\r\n    //\r\n    struct Contributor {\r\n        // kyc cleared or not\r\n        bool cleared;\r\n\r\n        // % more for the contributor bring on board in 1/100 of %\r\n        // 2.51 % --> 251\r\n        // 100% --> 10000\r\n        uint16 contributor_get;\r\n\r\n        // eth address of the referer if any - the contributor address is the key of the hash\r\n        address ref;\r\n\r\n        // % more for the referrer\r\n        uint16 affiliate_get;\r\n    }\r\n\r\n\r\n    mapping (address => Contributor) public whitelist;\r\n    //address[] public whitelistArray;\r\n\r\n    /**\r\n    *    @dev Populate the whitelist, only executed by whiteListingAdmin\r\n    *  whiteListingAdmin /\r\n    */\r\n\r\n    function setContributor(address _address, bool cleared, uint16 contributor_get, uint16 affiliate_get, address ref) onlyOwner public{\r\n\r\n        // not possible to give an exorbitant bonus to be more than 100% (100x100 = 10000)\r\n        require(contributor_get<10000);\r\n        require(affiliate_get<10000);\r\n\r\n        Contributor storage contributor = whitelist[_address];\r\n\r\n        contributor.cleared = cleared;\r\n        contributor.contributor_get = contributor_get;\r\n\r\n        contributor.ref = ref;\r\n        contributor.affiliate_get = affiliate_get;\r\n\r\n    }\r\n\r\n    function getContributor(address _address) view public returns (bool, uint16, address, uint16 ) {\r\n        return (whitelist[_address].cleared, whitelist[_address].contributor_get, whitelist[_address].ref, whitelist[_address].affiliate_get);\r\n    }\r\n\r\n    function getClearance(address _address) view public returns (bool) {\r\n        return whitelist[_address].cleared;\r\n    }\r\n}\r\n\r\n// File: contracts/crowdsale/Crowdsale.sol\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n\r\n    token = createTokenContract();\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  // overrided to create custom buy\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != address(0));\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // overrided to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime ;\r\n    bool nonZeroPurchase = msg.value != 0 ;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public view returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n\r\n}\r\n\r\n// File: contracts/crowdsale/FinalizableCrowdsale.sol\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    emit Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal{\r\n  }\r\n}\r\n\r\n// File: contracts/crowdsale/RefundVault.sol\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract RefundVault is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  enum State { Active, Refunding, Closed }\r\n\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  State public state;\r\n\r\n  event Closed();\r\n  event RefundsEnabled();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n  function RefundVault(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;\r\n    state = State.Active;\r\n  }\r\n\r\n  function deposit(address investor) onlyOwner public payable {\r\n    require(state == State.Active);\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n\r\n  function close() onlyOwner public {\r\n    // this is this part that shall be removed, that way if called later it run the wallet transfer in any case\r\n    // require(state == State.Active);\r\n    state = State.Closed;\r\n    emit Closed();\r\n    wallet.transfer(address(this).balance);\r\n  }\r\n\r\n  function enableRefunds() onlyOwner public {\r\n    require(state == State.Active);\r\n    state = State.Refunding;\r\n    emit RefundsEnabled();\r\n  }\r\n\r\n  function refund(address investor) public {\r\n    require(state == State.Refunding);\r\n    uint256 depositedValue = deposited[investor];\r\n    deposited[investor] = 0;\r\n    investor.transfer(depositedValue);\r\n    emit Refunded(investor, depositedValue);\r\n  }\r\n}\r\n\r\n// File: contracts/crowdsale/RefundableCrowdsale.sol\r\n\r\n/**\r\n * @title RefundableCrowdsale\r\n * @dev Extension of Crowdsale contract that adds a funding goal, and\r\n * the possibility of users getting a refund if goal is not met.\r\n * Uses a RefundVault as the crowdsale's vault.\r\n */\r\ncontract RefundableCrowdsale is FinalizableCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // minimum amount of funds to be raised in weis\r\n  uint256 public goal;\r\n\r\n  // refund vault used to hold funds while crowdsale is running\r\n  RefundVault public vault;\r\n\r\n  function RefundableCrowdsale(uint256 _goal) public {\r\n    require(_goal > 0);\r\n    vault = new RefundVault(wallet);\r\n    goal = _goal;\r\n  }\r\n\r\n  // We're overriding the fund forwarding from Crowdsale.\r\n  // In addition to sending the funds, we want to call\r\n  // the RefundVault deposit function\r\n  function forwardFunds() internal {\r\n    vault.deposit.value(msg.value)(msg.sender);\r\n  }\r\n\r\n  // if crowdsale is unsuccessful, investors can claim refunds here\r\n  function claimRefund() public {\r\n    require(isFinalized);\r\n    require(!goalReached());\r\n\r\n    vault.refund(msg.sender);\r\n  }\r\n\r\n  // vault finalization task, called when owner calls finalize()\r\n  function finalization() internal {\r\n    if (goalReached()) {\r\n      vault.close();\r\n    } else {\r\n      vault.enableRefunds();\r\n    }\r\n\r\n    super.finalization();\r\n  }\r\n\r\n  function goalReached() public view returns (bool) {\r\n    return weiRaised >= goal;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/BitexTokenCrowdSale.sol\r\n\r\ncontract BitexTokenCrowdSale is Crowdsale, RefundableCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // number of participants\r\n    uint256 public numberOfPurchasers = 0;\r\n\r\n    // maximum tokens that can be minted in this crowd sale - initialised later by the constructor\r\n    uint256 public maxTokenSupply = 0;\r\n\r\n    // amounts of tokens already minted at the begining of this crowd sale - initialised later by the constructor\r\n    uint256 public initialTokenAmount = 0;\r\n\r\n    // Minimum amount to been able to contribute - initialised later by the constructor\r\n    uint256 public minimumAmount = 0;\r\n\r\n    // to compute the bonus\r\n    bool public preICO;\r\n\r\n    // the token\r\n    BitexToken public token;\r\n\r\n    // the kyc and affiliation management\r\n    KnowYourCustomer public kyc;\r\n\r\n    // remaining token are sent to this address\r\n    address public walletRemaining;\r\n\r\n    // this is the owner of the token, when the finalize function is called\r\n    address public pendingOwner;\r\n\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint256 rate, address indexed referral, uint256 referredBonus );\r\n    event TokenPurchaseAffiliate(address indexed ref, uint256 amount );\r\n\r\n    function BitexTokenCrowdSale(\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _rate,\r\n        uint256 _goal,\r\n        uint256 _minimumAmount,\r\n        uint256 _maxTokenSupply,\r\n        address _wallet,\r\n        BitexToken _token,\r\n        KnowYourCustomer _kyc,\r\n        bool _preICO,\r\n        address _walletRemaining,\r\n        address _pendingOwner\r\n    )\r\n    FinalizableCrowdsale()\r\n    RefundableCrowdsale(_goal)\r\n    Crowdsale(_startTime, _endTime, _rate, _wallet) public\r\n    { \r\n        require(_minimumAmount >= 0);\r\n        require(_maxTokenSupply > 0);\r\n        require(_walletRemaining != address(0));\r\n\r\n        minimumAmount = _minimumAmount;\r\n        maxTokenSupply = _maxTokenSupply;\r\n\r\n        preICO = _preICO;\r\n\r\n        walletRemaining = _walletRemaining;\r\n        pendingOwner = _pendingOwner;\r\n\r\n        kyc = _kyc;\r\n        token = _token;\r\n\r\n        //\r\n        // record the amount of already minted token to been able to compute the delta with the tokens\r\n        // minted during the pre sale, this is useful only for the pre - ico\r\n        //\r\n        if (preICO)\r\n        {\r\n            initialTokenAmount = token.totalSupply();\r\n        }\r\n    }\r\n\r\n    /**\r\n    *\r\n    * Create the token on the fly, owner is the contract, not the contract owner yet\r\n    *\r\n    **/\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return token;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Calculates the amount of  coins the buyer gets\r\n    * @param weiAmount uint the amount of wei send to the contract\r\n    * @return uint the amount of tokens the buyer gets\r\n    */\r\n    function computeTokenWithBonus(uint256 weiAmount) public view returns(uint256) {\r\n        uint256 tokens_ = 0;\r\n        if (preICO)\r\n        {\r\n            if (weiAmount >= 50000 ether  ) {\r\n\r\n                tokens_ = weiAmount.mul(34).div(100);\r\n\r\n            }\r\n            else if (weiAmount<50000 ether && weiAmount >= 10000 ether) {\r\n\r\n                tokens_ = weiAmount.mul(26).div(100);\r\n\r\n            } else if (weiAmount<10000 ether && weiAmount >= 5000 ether) {\r\n\r\n                tokens_ = weiAmount.mul(20).div(100);\r\n\r\n            } else if (weiAmount<5000 ether && weiAmount >= 1000 ether) {\r\n\r\n                tokens_ = weiAmount.mul(16).div(100);\r\n            }\r\n\r\n        }else{\r\n            if (weiAmount >= 50000 ether  ) {\r\n\r\n                tokens_ = weiAmount.mul(17).div(100);\r\n\r\n            }\r\n            else if (weiAmount<50000 ether && weiAmount >= 10000 ether) {\r\n\r\n                tokens_ = weiAmount.mul(13).div(100);\r\n\r\n            } else if (weiAmount<10000 ether && weiAmount >= 5000 ether) {\r\n\r\n                tokens_ = weiAmount.mul(10).div(100);\r\n\r\n            } else if (weiAmount<5000 ether && weiAmount >= 1000 ether) {\r\n\r\n                tokens_ = weiAmount.mul(8).div(100);\r\n            }\r\n\r\n        }\r\n\r\n        return tokens_;\r\n    }\r\n    //\r\n    // override the claimRefund, so only user that have burn their token can claim for a refund\r\n    //\r\n    function claimRefund() public {\r\n\r\n        // get the number of token from this sender\r\n        uint256 tokenBalance = token.balanceOf(msg.sender);\r\n\r\n        // the refund can be run  only if the tokens has been burn\r\n        require(tokenBalance == 0);\r\n\r\n        // run the refund\r\n        super.claimRefund();\r\n\r\n    }\r\n\r\n     // transfer the token owner ship to the crowdsale contract\r\n    //        token.transferOwnership(currentIco);\r\n    function finalization() internal {\r\n\r\n        if (!preICO)\r\n        {\r\n            uint256 remainingTokens = maxTokenSupply.sub(token.totalSupply());\r\n\r\n            // mint the remaining amount and assign them to the beneficiary\r\n            // --> here we can manage the vesting of the remaining tokens\r\n            //\r\n            token.mint(walletRemaining, remainingTokens);\r\n\r\n        }\r\n\r\n         // finalize the refundable inherited contract\r\n        super.finalization();\r\n\r\n        if (!preICO)\r\n        {\r\n            // no more minting allowed - immutable\r\n            token.finishMinting();\r\n        }\r\n\r\n        // transfer the token owner ship from the contract address to the pendingOwner icoController\r\n        token.transferOwnership(pendingOwner);\r\n\r\n    }\r\n\r\n\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != address(0));\r\n        require(validPurchase());\r\n\r\n        // validate KYC here\r\n        // if not part of kyc then throw\r\n        bool cleared;\r\n        uint16 contributor_get;\r\n        address ref;\r\n        uint16 affiliate_get;\r\n\r\n        (cleared,contributor_get,ref,affiliate_get) = kyc.getContributor(beneficiary);\r\n\r\n        // Transaction do not happen if the contributor is not KYC cleared\r\n        require(cleared);\r\n\r\n        // how much the contributor sent in wei\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // Compute the number of tokens per wei using the rate\r\n        uint256 tokens = weiAmount.mul(rate);\r\n\r\n         // compute the amount of bonus, from the contribution amount\r\n        uint256 bonus = computeTokenWithBonus(tokens);\r\n\r\n        // compute the amount of token bonus for the contributor thank to his referral\r\n        uint256 contributorGet = tokens.mul(contributor_get).div(100*100);\r\n\r\n        // Sum it all\r\n        tokens = tokens.add(bonus);\r\n        tokens = tokens.add(contributorGet);\r\n\r\n        // capped to a maxTokenSupply\r\n        // make sure we can not mint more token than expected\r\n        // require(((token.totalSupply()-initialTokenAmount) + tokens) <= maxTokenSupply);\r\n        require((minted().add(tokens)) <= maxTokenSupply);\r\n\r\n\r\n        // Mint the token\r\n        token.mint(beneficiary, tokens);\r\n\r\n        // log the event\r\n        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens, rate, ref, contributorGet);\r\n\r\n        // update wei raised and number of purchasers\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        numberOfPurchasers = numberOfPurchasers + 1;\r\n\r\n        forwardFunds();\r\n\r\n        // ------------------------------------------------------------------\r\n        // compute the amount of token bonus that the referral get :\r\n        // only if KYC cleared, only if enough tokens still available\r\n        // ------------------------------------------------------------------\r\n        bool refCleared;\r\n        (refCleared) = kyc.getClearance(ref);\r\n        if (refCleared && ref != beneficiary)\r\n        {\r\n            // recompute the tokens amount using only the rate\r\n            tokens = weiAmount.mul(rate);\r\n\r\n            // compute the amount of token for the affiliate\r\n            uint256 affiliateGet = tokens.mul(affiliate_get).div(100*100);\r\n\r\n            // capped to a maxTokenSupply\r\n            // make sure we can not mint more token than expected\r\n            // we do not throw here as if this edge case happens it can be dealt with of chain\r\n            // if ( (token.totalSupply()-initialTokenAmount) + affiliateGet <= maxTokenSupply)\r\n            if ( minted().add(affiliateGet) <= maxTokenSupply)\r\n\r\n            {\r\n                // Mint the token\r\n                token.mint(ref, affiliateGet);\r\n                emit TokenPurchaseAffiliate(ref, tokens );\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // overriding Crowdsale#validPurchase to add extra cap logic\r\n    // @return true if investors can buy at the moment\r\n    function validPurchase() internal view returns (bool) {\r\n\r\n        // make sure we accept only the minimum contribution\r\n        bool minAmount = (msg.value >= minimumAmount);\r\n\r\n        // make sure that the purchase follow each rules to be valid\r\n        return super.validPurchase() && minAmount;\r\n    }\r\n\r\n    function minted() public view returns(uint256)\r\n    {\r\n        return token.totalSupply().sub(initialTokenAmount); \r\n    }\r\n\r\n    // overriding Crowdsale#hasEnded to add cap logic\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        // bool capReached = (token.totalSupply() - initialTokenAmount) >= maxTokenSupply;\r\n        // bool capReached = minted() >= maxTokenSupply;\r\n        return super.hasEnded() || (minted() >= maxTokenSupply);\r\n    }\r\n\r\n    /**\r\n      *\r\n      * Admin functions only executed by owner:\r\n      * Can change minimum amount\r\n      *\r\n      */\r\n    function changeMinimumAmount(uint256 _minimumAmount) onlyOwner public {\r\n        require(_minimumAmount > 0);\r\n\r\n        minimumAmount = _minimumAmount;\r\n    }\r\n\r\n     /**\r\n      *\r\n      * Admin functions only executed by owner:\r\n      * Can change rate\r\n      *\r\n      * We do not use an oracle here as oracle need to be paid each time, and if the oracle is not responding\r\n      * or hacked the rate could be detrimentally modified from an contributor perspective.\r\n      *\r\n      */\r\n    function changeRate(uint256 _rate) onlyOwner public {\r\n        require(_rate > 0);\r\n        \r\n        rate = _rate;\r\n    }\r\n\r\n    /**\r\n      *\r\n      * Admin functions only called by owner:\r\n      * Can change events dates\r\n      *\r\n      */\r\n    function changeDates(uint256 _startTime, uint256 _endTime) onlyOwner public {\r\n        require(_startTime >= now);\r\n        require(_endTime >= _startTime);\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n    }\r\n\r\n    function modifyTransferableHash(address _spender, bool value) onlyOwner public {\r\n        token.modifyTransferableHash(_spender,value);\r\n    }\r\n\r\n    /**\r\n      *\r\n      * Admin functions only called by owner:\r\n      * Can transfer the owner ship of the vault, so a close can be called\r\n      * only by the owner ....\r\n      *\r\n      */\r\n    function transferVault(address newOwner) onlyOwner public {\r\n        vault.transferOwnership(newOwner);\r\n\r\n    }\r\n   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"modifyTransferableHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"changeDates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfPurchasers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimumAmount\",\"type\":\"uint256\"}],\"name\":\"changeMinimumAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"computeTokenWithBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_goal\",\"type\":\"uint256\"},{\"name\":\"_minimumAmount\",\"type\":\"uint256\"},{\"name\":\"_maxTokenSupply\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_kyc\",\"type\":\"address\"},{\"name\":\"_preICO\",\"type\":\"bool\"},{\"name\":\"_walletRemaining\",\"type\":\"address\"},{\"name\":\"_pendingOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referredBonus\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ref\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchaseAffiliate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"BitexTokenCrowdSale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005af1bb70000000000000000000000000000000000000000000000000000000005b0d6af000000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000003635c9adc5dea00000000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000018d0bf423c03d8de0000000000000000000000000000001ef0cad0e9a12cf39494e7d40643985538e7e963000000000000000000000000527ce0569260f03637a6e1b6ca9280aa9c00b53900000000000000000000000015f5621129b74e8e8f9ed35d77c21a774b37c1630000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f3ef5b25a1d65f74b39f77655cd02953d1e6bb45000000000000000000000000fb1fb0eafdbaa51f8ba1332e43599e75b7cc8e2c","Library":"","SwarmSource":"bzzr://baff5c547d78d83d4a58e9748f9c4d6a66a1a851de72ca4c72af060ee2214da2"}]}