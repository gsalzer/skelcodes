{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Owned {\r\n\r\n    address public owner = msg.sender;\r\n    address public potentialOwner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPotentialOwner {\r\n        require(msg.sender == potentialOwner);\r\n        _;\r\n    }\r\n\r\n    event NewOwner(address old, address current);\r\n    event NewPotentialOwner(address old, address potential);\r\n\r\n    function setOwner(address _new)\r\n        public\r\n        onlyOwner\r\n    {\r\n        NewPotentialOwner(owner, _new);\r\n        potentialOwner = _new;\r\n    }\r\n\r\n    function confirmOwnership()\r\n        public\r\n        onlyPotentialOwner\r\n    {\r\n        NewOwner(owner, potentialOwner);\r\n        owner = potentialOwner;\r\n        potentialOwner = 0;\r\n    }\r\n}\r\n\r\n/// @title Abstract ERC20 token interface\r\ncontract AbstractToken {\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n    function transfer(address to, uint256 value) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n    function approve(address spender, uint256 value) public returns (bool success);\r\n    function allowance(address owner, address spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Issuance(address indexed to, uint256 value);\r\n}\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\ncontract StandardToken is AbstractToken, Owned {\r\n\r\n    /*\r\n     *  Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n    /*\r\n     *  Read and write storage functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n      //\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read storage functions\r\n     */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/// @title SafeMath contract - Math operations with safety checks.\r\n/// @author OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\ncontract SafeMath {\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a ** b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/// @title Token contract - Implements Standard ERC20 with additional features.\r\ncontract Token is StandardToken, SafeMath {\r\n\r\n    // Time of the contract creation\r\n    uint public creationTime;\r\n\r\n    function Token() public {\r\n        creationTime = now;\r\n    }\r\n\r\n\r\n    /// @dev Owner can transfer out any accidentally sent ERC20 tokens\r\n    function transferERC20Token(address tokenAddress)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uint balance = AbstractToken(tokenAddress).balanceOf(this);\r\n        return AbstractToken(tokenAddress).transfer(owner, balance);\r\n    }\r\n\r\n    /// @dev Multiplies the given number by 10^(decimals)\r\n    function withDecimals(uint number, uint decimals)\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        return mul(number, pow(10, decimals));\r\n    }\r\n}\r\n\r\ncontract SberToken is Token {\r\n    /*\r\n     * Token meta data\r\n     */\r\n    string constant public name = \"SberToken\";\r\n\r\n    string constant public symbol = \"SRUB\";\r\n    uint8 constant public decimals = 8;\r\n\r\n    // Address where Foundation tokens are allocated\r\n    address constant public foundationReserve = address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\r\n\r\n    // Address where tokens are minted (for Etherscan)\r\n    address constant public mintAddress = address(0x1111111111111111111111111111111111111111);\r\n\r\n    // Address where tokens are burned (for Etherscan)\r\n    address constant public burnAddress = address(0x0000000000000000000000000000000000000000);\r\n\r\n    /// @dev Contract constructor\r\n    function SberToken()\r\n        public\r\n    {\r\n        // Overall, 1,000,000,000 SRUB tokens are distributed\r\n        totalSupply = withDecimals(pow(10,9), decimals);\r\n\r\n        // Allocate foundation tokens\r\n        balances[foundationReserve] = totalSupply;\r\n        allowed[foundationReserve][owner] = balanceOf(foundationReserve);\r\n\r\n        //Add log for Etherscan\r\n        Transfer(mintAddress, foundationReserve, balanceOf(foundationReserve));\r\n        Issuance(foundationReserve, balanceOf(foundationReserve));\r\n    }\r\n\r\n    /// @dev Mint new tokens to foundationReserve\r\n    function mint(uint256 amount)\r\n      public\r\n      onlyOwner\r\n    {\r\n        // Calculate amount of tokens needed to be minted with decimals\r\n        uint256 mintedSupply = withDecimals(amount, decimals);\r\n\r\n        //Calculate new total supply\r\n        totalSupply = add(totalSupply, mintedSupply);\r\n\r\n        //Increase balance of foundationReserve\r\n        balances[foundationReserve] = add(balanceOf(foundationReserve), mintedSupply);\r\n        allowed[foundationReserve][owner] = balanceOf(foundationReserve);\r\n\r\n        //Add log for Etherscan\r\n        Transfer(mintAddress, foundationReserve, mintedSupply);\r\n        Issuance(foundationReserve, mintedSupply);\r\n    }\r\n\r\n    /// @dev Burn tokens from foundationReserve\r\n    function burn(uint256 amount)\r\n      public\r\n      onlyOwner\r\n    {\r\n      // Calculate amount of tokens needed to be minted with decimals\r\n      uint256 burnedSupply = withDecimals(amount, decimals);\r\n\r\n      // Check if foundationReserve has enough tokens\r\n      require(burnedSupply <= balanceOf(foundationReserve));\r\n\r\n      //Calculate new total supply\r\n      totalSupply = sub(totalSupply, burnedSupply);\r\n\r\n      //Decrease balance of foundationReserve\r\n      balances[foundationReserve] = sub(balanceOf(foundationReserve), burnedSupply);\r\n      allowed[foundationReserve][owner] = balanceOf(foundationReserve);\r\n\r\n      //Add log for Etherscan\r\n      Transfer(foundationReserve, burnAddress, burnedSupply);\r\n    }\r\n\r\n    function confirmOwnership()\r\n        public\r\n        onlyPotentialOwner\r\n    {\r\n        // Forbid old owner to withdraw tokens from the Foundation reserve allocation\r\n        allowed[foundationReserve][owner] = 0;\r\n\r\n        // Allow new owner to withdraw tokens from the Foundation reserve\r\n        allowed[foundationReserve][msg.sender] = balanceOf(foundationReserve);\r\n\r\n        super.confirmOwnership();\r\n    }\r\n\r\n\r\n    /// @dev Withdraws tokens from Foundation reserve\r\n    function withdrawFromReserve(address _to, uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(transferFrom(foundationReserve, _to, withDecimals(amount, decimals)));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"transferERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"potential\",\"type\":\"address\"}],\"name\":\"NewPotentialOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"}]","ContractName":"SberToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4d50a9a650c138779ceb0f979aa27e1dee12f8dec9e6142cf1c507477a0adbdf"}]}