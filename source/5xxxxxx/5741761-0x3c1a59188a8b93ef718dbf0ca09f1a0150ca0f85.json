{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ETHCOOLMain {\r\n\r\n    using SafeMath for uint;\r\n\r\n    struct Deposit {\r\n        address user;\r\n        uint amount;\r\n    }\r\n\r\n    address public owner;\r\n    uint public main_balance;\r\n    uint public next;\r\n\r\n    mapping (address => uint) public user_balances;\r\n    mapping (address => address) public user_referrals;\r\n    \r\n    Deposit[] public deposits;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        user_referrals[owner] = owner;\r\n        main_balance = 0;\r\n        next = 0;\r\n    }\r\n\r\n    function publicGetBalance(address user) view public returns (uint) {\r\n        return user_balances[user];\r\n    }\r\n\r\n    function publicGetStatus() view public returns (uint, uint, uint) {\r\n        return (main_balance, next, deposits.length);\r\n    }\r\n\r\n    function publicGetDeposit(uint index) view public returns (address, address, uint) {\r\n        return (deposits[index].user, user_referrals[deposits[index].user], deposits[index].amount);\r\n    }\r\n\r\n    function userWithdraw() public {\r\n        userPayout();\r\n        \r\n        if (user_balances[msg.sender] > 0) {\r\n            uint amount = user_balances[msg.sender];\r\n            user_balances[msg.sender] = 0;\r\n            msg.sender.transfer(amount);\r\n        }\r\n    }\r\n\r\n    function userDeposit(address referral) public payable {\r\n        if (msg.value > 0) {\r\n            if(user_referrals[msg.sender] == address(0)) {\r\n                user_referrals[msg.sender] = (referral != address(0) && referral != msg.sender) ? referral : owner;\r\n            }\r\n\r\n            Deposit memory deposit = Deposit(msg.sender, msg.value);\r\n            deposits.push(deposit);\r\n\r\n            uint referral_cut = msg.value.div(100);\r\n            uint owner_cut = msg.value.mul(4).div(100);\r\n            user_balances[user_referrals[msg.sender]] = user_balances[user_referrals[msg.sender]].add(referral_cut);\r\n            user_balances[owner] = user_balances[owner].add(owner_cut);\r\n            main_balance = main_balance.add(msg.value).sub(referral_cut).sub(owner_cut);\r\n        }\r\n\r\n        userPayout();\r\n    }\r\n\r\n    function userReinvest() public {\r\n        if (user_balances[msg.sender] > 0) {\r\n            Deposit memory deposit = Deposit(msg.sender, user_balances[msg.sender]);\r\n            deposits.push(deposit);\r\n\r\n            uint owner_cut = user_balances[msg.sender].mul(5).div(100);\r\n            user_balances[owner] = user_balances[owner].add(owner_cut);\r\n            main_balance = main_balance.add(user_balances[msg.sender]).sub(owner_cut);\r\n            user_balances[msg.sender] = 0;\r\n        }\r\n\r\n        userPayout();\r\n    }\r\n\r\n    function userPayout() public {\r\n        if (next < deposits.length) {\r\n            uint next_payout = deposits[next].amount.mul(120).div(100);\r\n            if (main_balance >= next_payout) {\r\n                user_balances[deposits[next].user] = user_balances[deposits[next].user].add(next_payout);\r\n                main_balance = main_balance.sub(next_payout);\r\n                next = next.add(1);\r\n            }\r\n        }\r\n    }\r\n\r\n    function contractBoost(uint share) public payable {\r\n        if (msg.value > 0) {\r\n            uint owner_cut = msg.value.mul(share).div(100);\r\n            user_balances[owner] = user_balances[owner].add(owner_cut);\r\n            main_balance = main_balance.add(msg.value).sub(owner_cut);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"publicGetDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"contractBoost\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"next\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicGetStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"main_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userReinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"userDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"publicGetBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"ETHCOOLMain","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://67cbf4349fc5a2cc4471d00d5acdf65763e68980aabd013d118bfda8165b9c36"}]}