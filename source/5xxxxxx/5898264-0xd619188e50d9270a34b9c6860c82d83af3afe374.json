{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract ARPLongTermHolding {\r\n    using SafeERC20 for ERC20;\r\n    using SafeMath for uint256;\r\n    using Math for uint256;\r\n\r\n    // During the first 31 days of deployment, this contract opens for deposit of ARP.\r\n    uint256 public constant DEPOSIT_PERIOD      = 31 days; // = 1 months\r\n\r\n    // 16 months after deposit, user can withdrawal all his/her ARP.\r\n    uint256 public constant WITHDRAWAL_DELAY    = 480 days; // = 16 months\r\n\r\n    // Ower can drain all remaining ARP after 3 years.\r\n    uint256 public constant DRAIN_DELAY         = 1080 days; // = 3 years.\r\n\r\n    // 50% bonus ARP return\r\n    uint256 public constant BONUS_SCALE         = 2;\r\n\r\n    // ERC20 basic token contract being held\r\n    ERC20 public arpToken;\r\n    address public owner;\r\n    uint256 public arpDeposited;\r\n    uint256 public depositStartTime;\r\n    uint256 public depositStopTime;\r\n\r\n    struct Record {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    mapping (address => Record) records;\r\n\r\n    /* \r\n     * EVENTS\r\n     */\r\n\r\n    /// Emitted when all ARP are drained.\r\n    event Drained(uint256 _amount);\r\n\r\n    /// Emitted for each sucuessful deposit.\r\n    uint256 public depositId = 0;\r\n    event Deposit(uint256 _depositId, address indexed _addr, uint256 _amount, uint256 _bonus);\r\n\r\n    /// Emitted for each sucuessful withdrawal.\r\n    uint256 public withdrawId = 0;\r\n    event Withdrawal(uint256 _withdrawId, address indexed _addr, uint256 _amount);\r\n\r\n    /// Initialize the contract\r\n    constructor(ERC20 _arpToken, uint256 _depositStartTime) public {\r\n        arpToken = _arpToken;\r\n        owner = msg.sender;\r\n        depositStartTime = _depositStartTime;\r\n        depositStopTime = _depositStartTime.add(DEPOSIT_PERIOD);\r\n    }\r\n\r\n    /*\r\n     * PUBLIC FUNCTIONS\r\n     */\r\n\r\n    /// Drains ARP.\r\n    function drain() public {\r\n        require(msg.sender == owner);\r\n        // solium-disable-next-line security/no-block-members\r\n        require(now >= depositStartTime.add(DRAIN_DELAY));\r\n\r\n        uint256 balance = arpToken.balanceOf(address(this));\r\n        require(balance > 0);\r\n\r\n        arpToken.safeTransfer(owner, balance);\r\n\r\n        emit Drained(balance);\r\n    }\r\n\r\n    function() public {\r\n        // solium-disable-next-line security/no-block-members\r\n        if (now >= depositStartTime && now < depositStopTime) {\r\n            deposit();\r\n        // solium-disable-next-line security/no-block-members\r\n        } else if (now > depositStopTime){\r\n            withdraw();\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /// Gets the balance of the specified address.\r\n    function balanceOf(address _owner) view public returns (uint256) {\r\n        return records[_owner].amount;\r\n    }\r\n\r\n    /// Gets the withdrawal timestamp of the specified address.\r\n    function withdrawalTimeOf(address _owner) view public returns (uint256) {\r\n        return records[_owner].timestamp.add(WITHDRAWAL_DELAY);\r\n    }\r\n\r\n    /// Deposits ARP.\r\n    function deposit() private {\r\n        uint256 amount = arpToken\r\n            .balanceOf(msg.sender)\r\n            .min256(arpToken.allowance(msg.sender, address(this)));\r\n        require(amount > 0);\r\n\r\n        uint256 bonus = amount.div(BONUS_SCALE);\r\n\r\n        Record storage record = records[msg.sender];\r\n        record.amount = record.amount.add(amount).add(bonus);\r\n        // solium-disable-next-line security/no-block-members\r\n        record.timestamp = now;\r\n        records[msg.sender] = record;\r\n\r\n        arpDeposited = arpDeposited.add(amount).add(bonus);\r\n\r\n        if (bonus > 0) {\r\n            arpToken.safeTransferFrom(owner, address(this), bonus);\r\n        }\r\n        arpToken.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        emit Deposit(depositId++, msg.sender, amount, bonus);\r\n    }\r\n\r\n    /// Withdraws ARP.\r\n    function withdraw() private {\r\n        require(arpDeposited > 0);\r\n\r\n        Record storage record = records[msg.sender];\r\n        require(record.amount > 0);\r\n        // solium-disable-next-line security/no-block-members\r\n        require(now >= record.timestamp.add(WITHDRAWAL_DELAY));\r\n        uint256 amount = record.amount;\r\n        delete records[msg.sender];\r\n\r\n        arpDeposited = arpDeposited.sub(amount);\r\n\r\n        arpToken.safeTransfer(msg.sender, amount);\r\n\r\n        emit Withdrawal(withdrawId++, msg.sender, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_SCALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WITHDRAWAL_DELAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arpDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arpToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositStopTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DRAIN_DELAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawalTimeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEPOSIT_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_arpToken\",\"type\":\"address\"},{\"name\":\"_depositStartTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Drained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_withdrawId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"}]","ContractName":"ARPLongTermHolding","CompilerVersion":"v0.4.25-nightly.2018.7.2+commit.a5608b31","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000beb6fdf4ef6ceb975157be43cbe0047b248a8922000000000000000000000000000000000000000000000000000000005b3d5f80","Library":"","SwarmSource":"bzzr://874808d6b3cfc3a64737b43d48811d94a5bde0a741ecea82ceaf2b62c95fde91"}]}