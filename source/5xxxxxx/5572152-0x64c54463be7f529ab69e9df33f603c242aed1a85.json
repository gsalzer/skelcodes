{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ninterface TokenInterface {\r\n     function totalSupply() external constant returns (uint);\r\n     function balanceOf(address tokenOwner) external constant returns (uint balance);\r\n     function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\r\n     function transfer(address to, uint tokens) external returns (bool success);\r\n     function approve(address spender, uint tokens) external returns (bool success);\r\n     function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n     function burn(uint256 _value) external; \r\n     event Transfer(address indexed from, address indexed to, uint tokens);\r\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n     event Burn(address indexed burner, uint256 value);\r\n}\r\n\r\n contract PVCCrowdsale is Ownable{\r\n  using SafeMath for uint256;\r\n \r\n  // The token being sold\r\n  TokenInterface public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public ratePerWei = 1000;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  uint256 public TOKENS_SOLD;\r\n  \r\n  uint256 maxTokensToSale;\r\n  uint256 TokensForTeamVesting;\r\n  uint256 TokensForAdvisorVesting;\r\n  uint256 bonusInPreSalePhase1;\r\n  uint256 bonusInPreSalePhase2;\r\n  uint256 bonusInPublicSalePhase1;\r\n  uint256 bonusInPublicSalePhase2;\r\n  uint256 bonusInPublicSalePhase3;\r\n  uint256 bonusInPublicSalePhase4;\r\n  uint256 bonusInPublicSalePhase5;\r\n  uint256 bonusInPublicSalePhase6;\r\n  \r\n  bool isCrowdsalePaused = false;\r\n  \r\n  uint256 totalDurationInDays = 145 days;\r\n  mapping(address=>bool) isAddressWhiteListed;\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  function PVCCrowdsale(uint256 _startTime, address _wallet, address _tokenAddress) public \r\n  {\r\n    \r\n    require(_wallet != 0x0);\r\n    startTime = _startTime;  \r\n    endTime = startTime + totalDurationInDays;\r\n    require(endTime >= startTime);\r\n   \r\n    owner = _wallet;\r\n    \r\n    maxTokensToSale = 32500000 * 10 ** 18;\r\n    TOKENS_SOLD = 346018452900000000000;    // the tokens that have been sold through the previous contract\r\n                   \r\n    weiRaised = 285373570000000000;     // the weis that have been raised through the previous contract\r\n\r\n    bonusInPreSalePhase1 = 30;\r\n    bonusInPreSalePhase2 = 25;\r\n    bonusInPublicSalePhase1 = 20;\r\n    bonusInPublicSalePhase2 = 25;\r\n    bonusInPublicSalePhase3 = 20;\r\n    bonusInPublicSalePhase4 = 15;\r\n    bonusInPublicSalePhase5 = 10;\r\n    bonusInPublicSalePhase6 = 5;\r\n    \r\n    TokensForTeamVesting = 7000000 * 10 ** 18;\r\n    TokensForAdvisorVesting = 3000000 * 10 ** 18;\r\n    token = TokenInterface(_tokenAddress);\r\n  }\r\n  \r\n  \r\n   // fallback function can be used to buy tokens\r\n   function () public  payable {\r\n     buyTokens(msg.sender);\r\n    }\r\n    \r\n  function determineBonus(uint tokens) internal view returns (uint256 bonus) \r\n  {\r\n        uint256 timeElapsed = now - startTime;\r\n        uint256 timeElapsedInDays = timeElapsed.div(1 days);\r\n        \r\n        //Closed pre-sale phase 1 (8 days starting apr 9)\r\n        if (timeElapsedInDays <8)\r\n        {\r\n            bonus = tokens.mul(bonusInPreSalePhase1); \r\n            bonus = bonus.div(100);\r\n            require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSale);\r\n        }\r\n        //Closed pre-sale phase 2 (8 days starting apr 17)\r\n        else if (timeElapsedInDays >=8 && timeElapsedInDays <16)\r\n        {\r\n            bonus = tokens.mul(bonusInPreSalePhase2); \r\n            bonus = bonus.div(100);\r\n            require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSale);\r\n        }\r\n        //Public sale phase 1 original (30 days starting on apr 25)\r\n        //Public sale phase 1 new (10 days ending may 4)\r\n        else if (timeElapsedInDays >=16 && timeElapsedInDays <26)\r\n        {\r\n            bonus = tokens.mul(bonusInPublicSalePhase1); \r\n            bonus = bonus.div(100);\r\n            require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSale);\r\n        }\r\n\r\n        //Public sale phase 2 (27 days)\r\n        else if (timeElapsedInDays >=26 && timeElapsedInDays <53)\r\n        {\r\n            bonus = tokens.mul(bonusInPublicSalePhase2); \r\n            bonus = bonus.div(100);\r\n            require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSale);\r\n        }\r\n\r\n         //Public sale phase 3 (30 days)\r\n        else if (timeElapsedInDays >=53 && timeElapsedInDays <83)\r\n        {\r\n            bonus = tokens.mul(bonusInPublicSalePhase3); \r\n            bonus = bonus.div(100);\r\n            require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSale);\r\n        }\r\n        //Public sale phase 4 (15 days)\r\n        else if (timeElapsedInDays >=83 && timeElapsedInDays <98)\r\n        {\r\n            bonus = tokens.mul(bonusInPublicSalePhase4); \r\n            bonus = bonus.div(100);\r\n            require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSale);\r\n        }\r\n        //Public sale phase 5 (16 days)\r\n        else if (timeElapsedInDays >=98 && timeElapsedInDays <114)\r\n        {\r\n            bonus = tokens.mul(bonusInPublicSalePhase5); \r\n            bonus = bonus.div(100);\r\n            require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSale);\r\n        }\r\n        //Public sale phase 6 (31 days)\r\n        else if (timeElapsedInDays >=114 && timeElapsedInDays <145)\r\n        {\r\n            bonus = tokens.mul(bonusInPublicSalePhase6); \r\n            bonus = bonus.div(100);\r\n            require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSale);\r\n        }\r\n        //\r\n        else \r\n        {\r\n            bonus = 0;\r\n        }\r\n\r\n\r\n    }\r\n  // low level token purchase function\r\n  \r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(isCrowdsalePaused == false);\r\n    require(validPurchase());\r\n    \r\n    require(TOKENS_SOLD<maxTokensToSale);\r\n   \r\n    uint256 weiAmount = msg.value;\r\n    \r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(ratePerWei);\r\n    uint256 bonus = determineBonus(tokens);\r\n    tokens = tokens.add(bonus);\r\n    \r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    \r\n    token.transfer(beneficiary,tokens);\r\n    emit TokenPurchase(owner, beneficiary, weiAmount, tokens);\r\n    TOKENS_SOLD = TOKENS_SOLD.add(tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  function forwardFunds() internal {\r\n    owner.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n  \r\n   /**\r\n    * function to change the end timestamp of the ico\r\n    * can only be called by owner wallet\r\n    **/\r\n    function changeEndDate(uint256 endTimeUnixTimestamp) public onlyOwner{\r\n        endTime = endTimeUnixTimestamp;\r\n    }\r\n    \r\n    /**\r\n    * function to change the start timestamp of the ico\r\n    * can only be called by owner wallet\r\n    **/\r\n    \r\n    function changeStartDate(uint256 startTimeUnixTimestamp) public onlyOwner{\r\n        startTime = startTimeUnixTimestamp;\r\n    }\r\n    \r\n    /**\r\n    * function to change the rate of tokens\r\n    * can only be called by owner wallet\r\n    **/\r\n    function setPriceRate(uint256 newPrice) public onlyOwner {\r\n        ratePerWei = newPrice;\r\n    }\r\n    \r\n     /**\r\n     * function to pause the crowdsale \r\n     * can only be called from owner wallet\r\n     **/\r\n     \r\n    function pauseCrowdsale() public onlyOwner {\r\n        isCrowdsalePaused = true;\r\n    }\r\n\r\n    /**\r\n     * function to resume the crowdsale if it is paused\r\n     * can only be called from owner wallet\r\n     **/ \r\n    function resumeCrowdsale() public onlyOwner {\r\n        isCrowdsalePaused = false;\r\n    }\r\n    \r\n     /**\r\n      * function through which owner can take back the tokens from the contract\r\n      **/ \r\n     function takeTokensBack() public onlyOwner\r\n     {\r\n         uint remainingTokensInTheContract = token.balanceOf(address(this));\r\n         token.transfer(owner,remainingTokensInTheContract);\r\n     }\r\n     \r\n     /**\r\n      * once the ICO has ended, owner can send all the unsold tokens to treasury address \r\n      **/ \r\n     function sendUnsoldTokensToTreasury(address treasury) public onlyOwner\r\n     {\r\n         require(hasEnded());\r\n         uint remainingTokensInTheContract = token.balanceOf(address(this));\r\n         token.transfer(treasury,remainingTokensInTheContract);\r\n     }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"startTimeUnixTimestamp\",\"type\":\"uint256\"}],\"name\":\"changeStartDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_SOLD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"sendUnsoldTokensToTreasury\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"endTimeUnixTimestamp\",\"type\":\"uint256\"}],\"name\":\"changeEndDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeTokensBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePerWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PVCCrowdsale","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005acaad0000000000000000000000000078f57d0ebf3139f870a728a0d190d032dcedf35c0000000000000000000000009ccc145c23fb49881714b31ab18b84dabda5ed40","Library":"","SwarmSource":"bzzr://0ac6b9bd4b409787aa7c543203859b2f65513e6ac5551c2f4f3dfe4f8e53b6fc"}]}