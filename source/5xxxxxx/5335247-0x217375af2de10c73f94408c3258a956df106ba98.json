{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Gives the possibility to delegate any call to a foreign implementation.\r\n */\r\ncontract Proxy {\r\n  function implementation() public view returns (address);\r\n\r\n  /**\r\n  * @dev Fallback function allowing to perform a delegatecall to the given implementation.\r\n  * This function will return whatever the implementation call returns\r\n  */\r\n  function () payable public {\r\n    address impl = implementation();\r\n    require(impl != address(0));\r\n    bytes memory data = msg.data;\r\n\r\n    assembly {\r\n      let result := delegatecall(gas, impl, add(data, 0x20), mload(data), 0, 0)\r\n      let size := returndatasize\r\n\r\n      let ptr := mload(0x40)\r\n      returndatacopy(ptr, 0, size)\r\n\r\n      switch result\r\n      case 0 { revert(ptr, size) }\r\n      default { return(ptr, size) }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address[] public owners;\r\n\r\n  event OwnerAdded(address indexed authorizer, address indexed newOwner, uint256 index);\r\n\r\n  event OwnerRemoved(address indexed authorizer, address indexed oldOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owners.push(msg.sender);\r\n    OwnerAdded(0x0, msg.sender, 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than one owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    bool isOwner = false;\r\n\r\n    for (uint256 i = 0; i < owners.length; i++) {\r\n      if (msg.sender == owners[i]) {\r\n        isOwner = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    require(isOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows one of the current owners to add a new owner\r\n   * @param newOwner The address give ownership to.\r\n   */\r\n  function addOwner(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    uint256 i = owners.push(newOwner) - 1;\r\n    OwnerAdded(msg.sender, newOwner, i);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows one of the owners to remove other owner\r\n   */\r\n  function removeOwner(uint256 index) onlyOwner public {\r\n    address owner = owners[index];\r\n    owners[index] = owners[owners.length - 1];\r\n    delete owners[owners.length - 1];\r\n    OwnerRemoved(msg.sender, owner);\r\n  }\r\n\r\n  function ownersCount() constant public returns (uint256) {\r\n    return owners.length;\r\n  }\r\n}\r\n\r\n\r\ncontract UpgradableStorage is Ownable {\r\n\r\n  // Address of the current implementation\r\n  address internal _implementation;\r\n\r\n  event NewImplementation(address implementation);\r\n\r\n  /**\r\n  * @dev Tells the address of the current implementation\r\n  * @return address of the current implementation\r\n  */\r\n  function implementation() public view returns (address) {\r\n    return _implementation;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Upgradable\r\n * @dev This contract represents an upgradable contract\r\n */\r\ncontract Upgradable is UpgradableStorage {\r\n  function initialize() public payable { }\r\n}\r\n\r\n\r\ncontract KnowledgeProxy is Proxy, UpgradableStorage {\r\n  /**\r\n  * @dev Upgrades the implementation to the requested version\r\n  */\r\n  function upgradeTo(address imp) onlyOwner public payable {\r\n    _implementation = imp;\r\n    Upgradable(this).initialize.value(msg.value)();\r\n\r\n    NewImplementation(imp);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"imp\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"}]","ContractName":"KnowledgeProxy","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://18603e2f1c250ed44766eefd909c23a5848624a914afb554396ed97c8970041f"}]}