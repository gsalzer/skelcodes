{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n-----------------------------------------------------------------\r\nFILE HEADER\r\n-----------------------------------------------------------------\r\n\r\nfile:       Proxy.sol\r\nversion:    1.0\r\nauthors:    Anton Jurisevic\r\n            Dominic Romanowski\r\n\r\ndate:       2018-2-28\r\nchecked:    Mike Spain\r\napproved:   Samuel Brooks\r\n\r\nrepo:       https://github.com/Havven/havven\r\ncommit:     34e66009b98aa18976226c139270970d105045e3\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nCONTRACT DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nAn Owned contract, to be inherited by other contracts.\r\nRequires its owner to be explicitly set in the constructor.\r\nProvides an onlyOwner access modifier.\r\n\r\nTo change owner, the current owner must nominate the next owner,\r\nwho then has to accept the nomination. The nomination can be\r\ncancelled before it is accepted by the new owner by having the\r\nprevious owner change the nomination (setting it to 0).\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    function Owned(address _owner)\r\n        public\r\n    {\r\n        owner = _owner;\r\n    }\r\n\r\n    function nominateOwner(address _owner)\r\n        external\r\n        onlyOwner\r\n    {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership()\r\n        external\r\n    {\r\n        require(msg.sender == nominatedOwner);\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner\r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nCONTRACT DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nA proxy contract that, if it does not recognise the function\r\nbeing called on it, passes all value and call data to an\r\nunderlying target contract.\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\ncontract Proxy is Owned {\r\n    Proxyable public target;\r\n\r\n    function Proxy(Proxyable _target, address _owner)\r\n        Owned(_owner)\r\n        public\r\n    {\r\n        target = _target;\r\n        emit TargetChanged(_target);\r\n    }\r\n\r\n    function _setTarget(address _target) \r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_target != address(0));\r\n        target = Proxyable(_target);\r\n        emit TargetChanged(_target);\r\n    }\r\n\r\n    function () \r\n        public\r\n        payable\r\n    {\r\n        target.setMessageSender(msg.sender);\r\n        assembly {\r\n            // Copy call data into free memory region.\r\n            let free_ptr := mload(0x40)\r\n            calldatacopy(free_ptr, 0, calldatasize)\r\n\r\n            // Forward all gas, ether, and data to the target contract.\r\n            let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\r\n            returndatacopy(free_ptr, 0, returndatasize)\r\n\r\n            // Revert if the call failed, otherwise return the result.\r\n            if iszero(result) { revert(free_ptr, calldatasize) }\r\n            return(free_ptr, returndatasize)\r\n        } \r\n    }\r\n\r\n    event TargetChanged(address targetAddress);\r\n}\r\n\r\n/*\r\n-----------------------------------------------------------------\r\nCONTRACT DESCRIPTION\r\n-----------------------------------------------------------------\r\n\r\nThis contract is the Proxyable interface. Any contract the proxy\r\nwraps must implement this, in order for the proxy to be able to\r\npass msg.sender into the underlying contract as the state\r\nparameter, messageSender.\r\n\r\n-----------------------------------------------------------------\r\n*/\r\n\r\ncontract Proxyable is Owned {\r\n    // the proxy this contract exists behind.\r\n    Proxy public proxy;\r\n\r\n    // The caller of the proxy, passed through to this contract.\r\n    // Note that every function using this member must apply the onlyProxy or\r\n    // optionalProxy modifiers, otherwise their invocations can use stale values.\r\n    address messageSender;\r\n\r\n    function Proxyable(address _owner)\r\n        Owned(_owner)\r\n        public { }\r\n\r\n    function setProxy(Proxy _proxy)\r\n        external\r\n        onlyOwner\r\n    {\r\n        proxy = _proxy;\r\n        emit ProxyChanged(_proxy);\r\n    }\r\n\r\n    function setMessageSender(address sender)\r\n        external\r\n        onlyProxy\r\n    {\r\n        messageSender = sender;\r\n    }\r\n\r\n    modifier onlyProxy\r\n    {\r\n        require(Proxy(msg.sender) == proxy);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner_Proxy\r\n    {\r\n        require(messageSender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier optionalProxy\r\n    {\r\n        if (Proxy(msg.sender) != proxy) {\r\n            messageSender = msg.sender;\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Combine the optionalProxy and onlyOwner_Proxy modifiers.\r\n    // This is slightly cheaper and safer, since there is an ordering requirement.\r\n    modifier optionalProxy_onlyOwner\r\n    {\r\n        if (Proxy(msg.sender) != proxy) {\r\n            messageSender = msg.sender;\r\n        }\r\n        require(messageSender == owner);\r\n        _;\r\n    }\r\n\r\n    event ProxyChanged(address proxyAddress);\r\n\r\n}\r\n\r\n/*\r\nMIT License\r\n\r\nCopyright (c) 2018 Havven\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"_setTarget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"targetAddress\",\"type\":\"address\"}],\"name\":\"TargetChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"Proxy","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f244176246168f24e3187f7288edbca29267739b000000000000000000000000b10c85274d2a58ddec72c1d826e75256ff93dead","Library":"","SwarmSource":"bzzr://94bbf43b27c8dce941cf6bf7c2d1a1860a795f569e39b4e56fa079abcaa6bb8c"}]}