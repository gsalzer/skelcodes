{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ForeignToken {\r\n    function balanceOf(address _owner) constant public returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract GIT {\r\n    \r\n    using SafeMath for uint256;\r\n    address public owner;\r\n    address public tokenAddress;\r\n    address public tokenSender;\r\n    uint256 public tokenApproves;\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    uint256 public totalExchange = 200000e18;\r\n    uint256 public totalDistributed = 0;\r\n    uint256 public totalRemaining = totalExchange.sub(totalDistributed);\r\n\r\n    uint256 constant public unitEthWei = 1e18;\r\n    uint256 public unitsOneEthCanBuy = 250e18;\r\n    uint256 public unitsUserCanBuyLimitEth = 4e18;\r\n    uint256 public unitsUserCanBuyLimit = (unitsUserCanBuyLimitEth.div(unitEthWei)).mul(unitsOneEthCanBuy);\r\n\r\n    event ExchangeFinished();\r\n    event ExchangeStarted();\r\n    \r\n    \r\n    event LOG_receiveApproval(address _sender,uint256 _tokenValue,address _tokenAddress,bytes _extraData);\r\n    event LOG_callTokenTransferFrom(address tokenSender,address _to,uint256 _value);\r\n    event LOG_exchange(address _to, uint256 amount);\r\n    \r\n    bool public exchangeFinished = false;\r\n    \r\n    modifier canExchange() {\r\n        require(!exchangeFinished);\r\n        _;\r\n    }\r\n    \r\n    modifier canNotExchange() {\r\n        require(exchangeFinished);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function GIT () public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    function changeTokenAddress(address newTokenAddress) onlyOwner public {\r\n        if (newTokenAddress != address(0)) {\r\n            tokenAddress = newTokenAddress;\r\n        }\r\n    }\r\n    \r\n    function changeTokenSender(address newTokenSender) onlyOwner public {\r\n        if (newTokenSender != address(0)) {\r\n            tokenSender = newTokenSender;\r\n        }\r\n    }\r\n    \r\n    function changeUnitsOneEthCanBuy(uint256 newUnitsOneEthCanBuy) onlyOwner public {\r\n        unitsOneEthCanBuy = newUnitsOneEthCanBuy;\r\n    }\r\n    \r\n    function changeUnitsUserCanBuyLimitEth(uint256 newUnitsUserCanBuyLimitEth) onlyOwner public {\r\n        unitsUserCanBuyLimitEth = newUnitsUserCanBuyLimitEth;\r\n    }\r\n    \r\n    function changeTotalExchange(uint256 newTotalExchange) onlyOwner public {\r\n        totalExchange = newTotalExchange;\r\n    }\r\n    \r\n    function changeTokenApproves(uint256 newTokenApproves) onlyOwner public {\r\n        tokenApproves = newTokenApproves;\r\n    }\r\n    \r\n    function changeTotalDistributed(uint256 newTotalDistributed) onlyOwner public {\r\n        totalDistributed = newTotalDistributed;\r\n    }\r\n    \r\n    function changeTotalRemaining(uint256 newTotalRemaining) onlyOwner public {\r\n        totalRemaining = newTotalRemaining;\r\n    }\r\n    \r\n    function changeUnitsUserCanBuyLimit(uint256 newUnitsUserCanBuyLimit) onlyOwner public {\r\n        unitsUserCanBuyLimit = newUnitsUserCanBuyLimit;\r\n    }\r\n    \r\n    function finishExchange() onlyOwner canExchange public returns (bool) {\r\n        exchangeFinished = true;\r\n        ExchangeFinished();\r\n        return true;\r\n    }\r\n    \r\n    function startExchange() onlyOwner canNotExchange public returns (bool) {\r\n        exchangeFinished = false;\r\n        ExchangeStarted();\r\n        return true;\r\n    }\r\n    \r\n    function () external payable {\r\n            exchangeTokens();\r\n     }\r\n    \r\n    function exchangeTokens() payable canExchange public {\r\n        \r\n        require(exchange());\r\n\r\n        if (totalDistributed >= totalExchange) {\r\n            exchangeFinished = true;\r\n        }\r\n        \r\n    }\r\n    \r\n    function getTokenBalance(address _tokenAddress, address _who) constant public returns (uint256){\r\n        ForeignToken t = ForeignToken(_tokenAddress);\r\n        uint bal = t.balanceOf(_who);\r\n        return bal;\r\n    }\r\n    \r\n    function withdraw() onlyOwner public {\r\n        uint256 etherBalance = this.balance;\r\n        owner.transfer(etherBalance);\r\n    }\r\n    \r\n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\r\n        ForeignToken token = ForeignToken(_tokenContract);\r\n        uint256 amount = token.balanceOf(address(this));\r\n        return token.transfer(owner, amount);\r\n    }\r\n    \r\n    function receiveApproval(address _sender,uint256 _tokenValue,address _tokenAddress,bytes _extraData) public returns (bool){\r\n        require(tokenAddress == _tokenAddress);\r\n        require(tokenSender == _sender);\r\n        require(totalExchange <= _tokenValue);\r\n        \r\n        tokenApproves = _tokenValue;\r\n        LOG_receiveApproval(_sender, _tokenValue ,_tokenAddress ,_extraData);\r\n        return true;\r\n    }\r\n    \r\n    function callTokenTransferFrom(address _to,uint256 _value) private returns (bool){\r\n        \r\n        require(tokenSender != address(0));\r\n        require(tokenAddress.call(bytes4(bytes32(keccak256(\"transferFrom(address,address,uint256)\"))), tokenSender, _to, _value));\r\n        \r\n        LOG_callTokenTransferFrom(tokenSender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function exchange() payable canExchange public returns (bool) {\r\n        \r\n        uint256 amount = 0;\r\n        if(msg.value == 0){\r\n            return false;\r\n        }\r\n        \r\n        address _to = msg.sender;\r\n        \r\n        amount = msg.value.mul(unitsOneEthCanBuy.div(unitEthWei));\r\n        require(amount.add(balances[msg.sender]) <= unitsUserCanBuyLimit);\r\n        \r\n        totalDistributed = totalDistributed.add(amount);\r\n        totalRemaining = totalRemaining.sub(amount);\r\n        \r\n        require(callTokenTransferFrom(_to, amount));\r\n        \r\n        balances[msg.sender] = amount.add(balances[msg.sender]);\r\n        \r\n        if (totalDistributed >= totalExchange) {\r\n            exchangeFinished = true;\r\n        }\r\n        \r\n        LOG_exchange(_to, amount);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newTokenSender\",\"type\":\"address\"}],\"name\":\"changeTokenSender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitEthWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitsOneEthCanBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newUnitsOneEthCanBuy\",\"type\":\"uint256\"}],\"name\":\"changeUnitsOneEthCanBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTotalExchange\",\"type\":\"uint256\"}],\"name\":\"changeTotalExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_tokenValue\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTotalRemaining\",\"type\":\"uint256\"}],\"name\":\"changeTotalRemaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenApproves\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSender\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitsUserCanBuyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newUnitsUserCanBuyLimitEth\",\"type\":\"uint256\"}],\"name\":\"changeUnitsUserCanBuyLimitEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTotalDistributed\",\"type\":\"uint256\"}],\"name\":\"changeTotalDistributed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newUnitsUserCanBuyLimit\",\"type\":\"uint256\"}],\"name\":\"changeUnitsUserCanBuyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitsUserCanBuyLimitEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenApproves\",\"type\":\"uint256\"}],\"name\":\"changeTokenApproves\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exchangeTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ExchangeFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ExchangeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"LOG_receiveApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LOG_callTokenTransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LOG_exchange\",\"type\":\"event\"}]","ContractName":"GIT","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b9778f39aa13fa6018368010604d1cf78404ddb128873736a6768360939af396"}]}