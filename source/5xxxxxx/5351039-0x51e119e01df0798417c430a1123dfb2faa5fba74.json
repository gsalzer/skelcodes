{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// SafeMath is a part of Zeppelin Solidity library\r\n// licensed under MIT License\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/LICENSE\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /// @dev Contract constructor\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n}\r\n\r\n\r\ncontract ETCrossPotatoPresale is Owned {\r\n    using SafeMath for uint;\r\n\r\n    uint256 public auctionEnd;\r\n    uint256 public itemType;\r\n\r\n    address public highestBidder;\r\n    uint256 public highestBid = 0.001 ether;\r\n    bool public ended;\r\n\r\n    event Bid(address from, uint256 amount);\r\n    event AuctionEnded(address winner, uint256 amount);\r\n\r\n    ETCrossPotatoPresale public sibling;\r\n    address public potatoOwner = 0xf3a2727a3447653a58D57e4be63d5D5cdc55421B;\r\n\r\n    function ETCrossPotatoPresale(uint256 _auctionEnd, uint256 _itemType) public {\r\n        auctionEnd = _auctionEnd;\r\n        itemType = _itemType;\r\n    }\r\n\r\n    function _isContract(address _user) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(_user) }\r\n        return size > 0;\r\n    }\r\n\r\n    function auctionExpired() public view returns (bool) {\r\n        return now > auctionEnd;\r\n    }\r\n\r\n    function nextBid() public view returns (uint256) {\r\n        if (highestBid < 0.1 ether) {\r\n            return highestBid.add(highestBid / 2);\r\n        } else if (highestBid < 1 ether) {\r\n            return highestBid.add(highestBid.mul(15).div(100));\r\n        } else {\r\n            return highestBid.add(highestBid.mul(4).div(100));\r\n        }\r\n    }\r\n\r\n    function() public payable {\r\n        require(!_isContract(msg.sender));\r\n        require(!auctionExpired());\r\n\r\n        uint256 requiredBid = nextBid();\r\n\r\n        require(msg.value >= requiredBid);\r\n\r\n        uint256 change = msg.value.sub(requiredBid);\r\n\r\n        uint256 difference = requiredBid.sub(highestBid);\r\n        uint256 reward = difference / 4;\r\n\r\n        if (highestBidder != 0x0) {\r\n            highestBidder.transfer(highestBid.add(reward));\r\n        }\r\n\r\n        if (address(sibling) != 0x0) {\r\n            address siblingHighestBidder = sibling.highestBidder();\r\n            if (siblingHighestBidder != 0x0) {\r\n                siblingHighestBidder.transfer(reward / 2);\r\n            }\r\n        }\r\n\r\n        if (potatoOwner != 0x0) {\r\n            potatoOwner.transfer(reward / 10);\r\n        }\r\n\r\n        if (change > 0) {\r\n            msg.sender.transfer(change);\r\n        }\r\n\r\n        highestBidder = msg.sender;\r\n        highestBid = requiredBid;\r\n\r\n        emit Bid(msg.sender, requiredBid);\r\n    }\r\n\r\n    function endAuction() public onlyOwner {\r\n        require(auctionExpired());\r\n        require(!ended);\r\n\r\n        ended = true;\r\n        emit AuctionEnded(highestBidder, highestBid);\r\n\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function setSibling(address _sibling) public onlyOwner {\r\n        sibling = ETCrossPotatoPresale(_sibling);\r\n    }\r\n\r\n    function setPotatoOwner(address _potatoOwner) public onlyOwner {\r\n        potatoOwner = _potatoOwner;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sibling\",\"type\":\"address\"}],\"name\":\"setSibling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sibling\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potatoOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highestBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_potatoOwner\",\"type\":\"address\"}],\"name\":\"setPotatoOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"itemType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_auctionEnd\",\"type\":\"uint256\"},{\"name\":\"_itemType\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"}]","ContractName":"ETCrossPotatoPresale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005ac4da600000000000000000000000000000000000000000000000000000000000000008","Library":"","SwarmSource":"bzzr://c0bc946f4def53c48c9dfe2beee016ed3339eb2d28eac774ddf4e1019b21bc24"}]}