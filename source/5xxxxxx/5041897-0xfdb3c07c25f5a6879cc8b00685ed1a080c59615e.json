{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n// Migration Agent interface\r\ncontract MigrationAgent {\r\n  function migrateFrom(address _from, uint _value) public;\r\n}\r\n\r\n/**\r\n * @title Spade Token\r\n */\r\ncontract SPXToken is StandardToken {\r\n\r\n  string public constant name = \"SP8DE Token\";\r\n  string public constant symbol = \"SPX\";\r\n  uint8 public constant decimals = 18;\r\n  address public ico;\r\n  \r\n  bool public isFrozen = true;  \r\n  uint public constant TOKEN_LIMIT = 8888888888 * (1e18);\r\n\r\n  // Token migration variables\r\n  address public migrationMaster;\r\n  address public migrationAgent;\r\n  uint public totalMigrated;\r\n\r\n  event Migrate(address indexed _from, address indexed _to, uint _value);\r\n  \r\n  // Constructor\r\n  function SPXToken(address _ico, address _migrationMaster) public {\r\n    require(_ico != 0);\r\n    ico = _ico;\r\n    migrationMaster = _migrationMaster;\r\n  }\r\n\r\n  // Create tokens\r\n  function mint(address holder, uint value) public {\r\n    require(msg.sender == ico);\r\n    require(value > 0);\r\n    require(totalSupply + value <= TOKEN_LIMIT);\r\n\r\n    balances[holder] += value;\r\n    totalSupply += value;\r\n    Transfer(0x0, holder, value);\r\n  }\r\n\r\n  // Allow token transfer.\r\n  function unfreeze() public {\r\n      require(msg.sender == ico);\r\n      isFrozen = false;\r\n  }\r\n\r\n  // ERC20 functions\r\n  // =========================\r\n  function transfer(address _to, uint _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(!isFrozen);\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n    require(!isFrozen);\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint _value) public returns (bool) {\r\n    require(!isFrozen);\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  // Token migration\r\n  function migrate(uint value) external {\r\n    require(migrationAgent != 0);\r\n    require(value > 0);\r\n    require(value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] -= value;\r\n    totalSupply -= value;\r\n    totalMigrated += value;\r\n    MigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\r\n    Migrate(msg.sender, migrationAgent, value);\r\n  }\r\n\r\n  // Set address of migration contract\r\n  function setMigrationAgent(address _agent) external {\r\n    require(migrationAgent == 0);\r\n    require(msg.sender == migrationMaster);\r\n    migrationAgent = _agent;\r\n  }\r\n\r\n  function setMigrationMaster(address _master) external {\r\n    require(msg.sender == migrationMaster);\r\n    require(_master != 0);\r\n    migrationMaster = _master;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Spade SpadeIco\r\n */\r\ncontract SpadeIco {\r\n  \r\n  uint public constant TOKENS_FOR_SALE = 3655555558 * 1e18;\r\n  uint public constant TOKENS_FOUNDATION = 1777777778 * 1e18;\r\n  \r\n  uint tokensSold = 0;\r\n  \r\n  // Ico token\r\n  SPXToken public token;\r\n  address public team;\r\n  address public icoAgent;\r\n  address public migrationMaster;\r\n  // Modifiers\r\n  modifier teamOnly {require(msg.sender == team); _;}\r\n  modifier icoAgentOnly {require(msg.sender == icoAgent); _;}\r\n  \r\n  bool public isPaused = false;\r\n  enum IcoState { Created, IcoStarted, IcoFinished }\r\n  IcoState public icoState = IcoState.Created;\r\n\r\n  event IcoStarted();\r\n  event IcoFinished();\r\n  event IcoPaused();\r\n  event IcoResumed();\r\n  event TokenBuy(address indexed buyer, uint256 tokens, uint256 factor, string tx);\r\n  event TokenBuyPresale(address indexed buyer, uint256 tokens, uint256 factor, string tx);\r\n  event TokenWin(address indexed buyer, uint256 tokens, uint256 jackpot);\r\n\r\n  function SpadeIco(address _team, address _icoAgent, address _migrationMaster) public {\r\n    require(_team != address(0) && _icoAgent != address(0) && _migrationMaster != address(0));  \r\n    migrationMaster = _migrationMaster;\r\n    team = _team;\r\n    icoAgent = _icoAgent;\r\n    token = new SPXToken(this, migrationMaster);\r\n  }\r\n\r\n  function startIco() external teamOnly {\r\n    require(icoState == IcoState.Created);\r\n    icoState = IcoState.IcoStarted;\r\n    IcoStarted();\r\n  }\r\n\r\n  function finishIco(address foundation, address other) external teamOnly {\r\n    require(foundation != address(0));\r\n    require(other != address(0));\r\n\r\n    require(icoState == IcoState.IcoStarted);\r\n    icoState = IcoState.IcoFinished;\r\n    \r\n    uint256 amountWithFoundation = SafeMath.add(token.totalSupply(), TOKENS_FOUNDATION);\r\n    if (amountWithFoundation > token.TOKEN_LIMIT()) {\r\n      uint256 foundationToMint = token.TOKEN_LIMIT() - token.totalSupply();\r\n      if (foundationToMint > 0) {\r\n        token.mint(foundation, foundationToMint);\r\n      }\r\n    } else {\r\n        token.mint(foundation, TOKENS_FOUNDATION);\r\n\r\n        uint mintedTokens = token.totalSupply();\r\n    \r\n        uint remaining = token.TOKEN_LIMIT() - mintedTokens;\r\n        if (remaining > 0) {\r\n          token.mint(other, remaining);\r\n        }\r\n    }\r\n\r\n    token.unfreeze();\r\n    IcoFinished();\r\n  }\r\n\r\n  function pauseIco() external teamOnly {\r\n    require(!isPaused);\r\n    require(icoState == IcoState.IcoStarted);\r\n    isPaused = true;\r\n    IcoPaused();\r\n  }\r\n\r\n  function resumeIco() external teamOnly {\r\n    require(isPaused);\r\n    require(icoState == IcoState.IcoStarted);\r\n    isPaused = false;\r\n    IcoResumed();\r\n  }\r\n\r\n  function convertPresaleTokens(address buyer, uint256 tokens, uint256 factor, string txHash) external icoAgentOnly returns (uint) {\r\n    require(buyer != address(0));\r\n    require(tokens > 0);\r\n    require(validState());\r\n\r\n    uint256 tokensToSell = SafeMath.add(tokensSold, tokens);\r\n    require(tokensToSell <= TOKENS_FOR_SALE);\r\n    tokensSold = tokensToSell;            \r\n\r\n    token.mint(buyer, tokens);\r\n    TokenBuyPresale(buyer, tokens, factor, txHash);\r\n  }\r\n\r\n  function creditJackpotTokens(address buyer, uint256 tokens, uint256 jackpot) external icoAgentOnly returns (uint) {\r\n    require(buyer != address(0));\r\n    require(tokens > 0);\r\n    require(validState());\r\n\r\n    token.mint(buyer, tokens);\r\n    TokenWin(buyer, tokens, jackpot);\r\n  }\r\n\r\n  function buyTokens(address buyer, uint256 tokens, uint256 factor, string txHash) external icoAgentOnly returns (uint) {\r\n    require(buyer != address(0));\r\n    require(tokens > 0);\r\n    require(validState());\r\n\r\n    uint256 tokensToSell = SafeMath.add(tokensSold, tokens);\r\n    require(tokensToSell <= TOKENS_FOR_SALE);\r\n    tokensSold = tokensToSell;            \r\n\r\n    token.mint(buyer, tokens);\r\n    TokenBuy(buyer, tokens, factor, txHash);\r\n  }\r\n\r\n  function validState() internal view returns (bool) {\r\n    return icoState == IcoState.IcoStarted && !isPaused;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"foundation\",\"type\":\"address\"},{\"name\":\"other\",\"type\":\"address\"}],\"name\":\"finishIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"jackpot\",\"type\":\"uint256\"}],\"name\":\"creditJackpotTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_FOUNDATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_FOR_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"factor\",\"type\":\"uint256\"},{\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"factor\",\"type\":\"uint256\"},{\"name\":\"txHash\",\"type\":\"string\"}],\"name\":\"convertPresaleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_team\",\"type\":\"address\"},{\"name\":\"_icoAgent\",\"type\":\"address\"},{\"name\":\"_migrationMaster\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IcoStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IcoFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IcoPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IcoResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"factor\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tx\",\"type\":\"string\"}],\"name\":\"TokenBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"factor\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tx\",\"type\":\"string\"}],\"name\":\"TokenBuyPresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpot\",\"type\":\"uint256\"}],\"name\":\"TokenWin\",\"type\":\"event\"}]","ContractName":"SpadeIco","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b4C512558B951001F7fB636b966768FB0Cd8Ab4100000000000000000000000030647acC7cE2a1b20DacD05C5a27FD67FF4f469d000000000000000000000000b4C512558B951001F7fB636b966768FB0Cd8Ab41","Library":"","SwarmSource":"bzzr://bcab5807b194002f04c419000c8c60b4b0cd3c77c8f9978314b38570603ca2b1"}]}