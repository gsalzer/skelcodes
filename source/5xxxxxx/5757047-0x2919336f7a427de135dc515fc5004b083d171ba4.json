{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\ncontract CryptoPokerBase is Ownable\r\n{\r\n    using SafeMath for uint256;\r\n    enum CardStatus\r\n    {\r\n        Frozen,\r\n        Tradable\r\n    }\r\n    \r\n    struct Card\r\n    {\r\n        uint256 id;\r\n        uint256 sellPrice;\r\n        //card status \r\n        CardStatus status;\r\n        //card update\r\n        uint256 upTime;\r\n    }\r\n    \r\n    mapping(uint256=>address) cardToOwer;\r\n    mapping(address=>uint256) ownerCardCount;\r\n    mapping(uint256=>uint256) idToCardIndex;\r\n    mapping(address=>bool) workers;\r\n    \r\n    Card[] allCards;\r\n    address[] workerArr;\r\n    \r\n    uint256 upIndex = 0;\r\n   \r\n    bool saleStatus = true;\r\n    uint256 salePrice = 90000000000000000;\r\n    \r\n    \r\n    modifier isWorker()\r\n    {\r\n        require(msg.sender == owner || workers[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    modifier canSale()\r\n    {\r\n        require(saleStatus);\r\n        _;\r\n    }\r\n    \r\n    \r\n    function setWorkerAdress(address _adress) external onlyOwner\r\n    {\r\n        require(_adress!=address(0));\r\n        workers[_adress] = true;\r\n        workerArr.push(_adress);\r\n    }\r\n    \r\n    function deleteWorkerAdress(address _adress) external onlyOwner\r\n    {\r\n        require(_adress!=address(0));\r\n        workers[_adress] = false;\r\n    }\r\n    \r\n    function getAllWorkers() external view isWorker returns(address[],bool[])\r\n    {\r\n        address[] memory addressArr = new address[](workerArr.length);\r\n        bool[] memory statusArr = new bool[](workerArr.length);\r\n        for(uint256 i=0;i<workerArr.length;i++)\r\n        {\r\n            addressArr[i] = workerArr[i];\r\n            statusArr[i] = workers[workerArr[i]];\r\n        }\r\n        return (addressArr,statusArr);\r\n    }\r\n    \r\n\r\n    function setSaleStatus(bool value) external isWorker\r\n    {\r\n        saleStatus = value;\r\n    }\r\n    \r\n    function getSaleStatus() external view returns(bool)\r\n    {\r\n        return saleStatus;\r\n    }\r\n    \r\n    function setSalePrice(uint256 value) external isWorker\r\n    {\r\n        salePrice = value;\r\n    }\r\n    \r\n    function getSalePrice() external view returns(uint256)\r\n    {\r\n        return salePrice;\r\n    }\r\n    \r\n   \r\n    function withdraw() external isWorker\r\n    {\r\n        owner.transfer(this.balance);\r\n    }\r\n    \r\n    function getBalance() external view returns(uint256)\r\n    {\r\n        return this.balance;\r\n    }\r\n\r\n    \r\n}\r\ncontract CryptoPokerMarket is CryptoPokerBase\r\n{\r\n    \r\n    event fallbackTrigged(bytes data);\r\n    event saleCardEvent(address _address,uint256 price);\r\n    event createSaleCardEvent(address _address);\r\n\r\n    function() public payable\r\n    {\r\n        emit fallbackTrigged(msg.data);\r\n    }\r\n    \r\n    function buySaleCardFromSys() external canSale payable\r\n    {\r\n        require(msg.value>=salePrice);\r\n        emit saleCardEvent(msg.sender,msg.value);\r\n    }\r\n    \r\n    function createSaleCardToPlayer(uint256[] ids,address _address) external isWorker\r\n    {\r\n        require(_address != address(0));\r\n        for(uint256 i=0;i<ids.length;i++)\r\n        {\r\n            if(cardToOwer[ids[i]] == address(0))\r\n            {\r\n                allCards.push(Card(ids[i],0,CardStatus.Tradable,upIndex));\r\n                idToCardIndex[ids[i]] = allCards.length - 1;\r\n                cardToOwer[ids[i]] = _address;\r\n                ownerCardCount[_address] = ownerCardCount[_address].add(1);    \r\n            }\r\n            \r\n        }\r\n        emit createSaleCardEvent(_address);\r\n    }\r\n\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 _balance)\r\n    {\r\n        return ownerCardCount[_owner];\r\n    }\r\n      \r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner)\r\n    {\r\n        return cardToOwer[_tokenId];    \r\n    }\r\n}\r\ncontract CryptoPokerHelper is CryptoPokerMarket\r\n{\r\n    \r\n    function getAllCardByAddress(address _address) external isWorker view returns(uint256[],uint256[])\r\n    {\r\n        require(_address!=address(0));\r\n        uint256[] memory result = new uint256[](ownerCardCount[_address]);\r\n        uint256[] memory cardStatus = new uint256[](ownerCardCount[_address]);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < allCards.length; i++)\r\n        {\r\n            uint256 cardId = allCards[i].id;\r\n            if (cardToOwer[cardId] == _address) {\r\n                result[counter] = cardId;\r\n                cardStatus[counter] = allCards[i].sellPrice;\r\n                counter++;\r\n            }\r\n         }\r\n         return (result,cardStatus);\r\n    }\r\n    \r\n    function getSelfCardDatas() external view returns(uint256[],uint256[])\r\n    {\r\n        uint256 count = ownerCardCount[msg.sender];\r\n        uint256[] memory result = new uint256[](count);\r\n        uint256[] memory resultPrice = new uint256[](count);\r\n        if(count > 0)\r\n        {\r\n            uint256 counter = 0;\r\n            for (uint256 i = 0; i < allCards.length; i++)\r\n            {\r\n                uint256 cardId = allCards[i].id;\r\n                if (cardToOwer[cardId] == msg.sender) {\r\n                    result[counter] = cardId;\r\n                    resultPrice[counter] = allCards[i].sellPrice;\r\n                    counter++;\r\n                }\r\n            }\r\n        }\r\n        return (result,resultPrice);\r\n    }\r\n    \r\n    \r\n    function getSelfBalance() external view returns(uint256)\r\n    {\r\n        return(address(msg.sender).balance);\r\n    }\r\n    \r\n    \r\n    function getAllCardDatas() external view isWorker returns(uint256[],uint256[],address[])\r\n    {\r\n        uint256 len = allCards.length;\r\n        uint256[] memory resultIdArr = new uint256[](len);\r\n        uint256[] memory resultPriceArr = new uint256[](len);\r\n        address[] memory addressArr = new address[](len);\r\n        \r\n        for(uint256 i=0;i<len;i++)\r\n        {\r\n            resultIdArr[i] = allCards[i].id;\r\n            resultPriceArr[i] = allCards[i].sellPrice;\r\n            addressArr[i] = cardToOwer[allCards[i].id];\r\n        }\r\n        return(resultIdArr,resultPriceArr,addressArr);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getSelfBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adress\",\"type\":\"address\"}],\"name\":\"setWorkerAdress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSalePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSelfCardDatas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buySaleCardFromSys\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaleStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adress\",\"type\":\"address\"}],\"name\":\"deleteWorkerAdress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllCardDatas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ids\",\"type\":\"uint256[]\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"createSaleCardToPlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllWorkers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAllCardByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setSaleStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fallbackTrigged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"saleCardEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"createSaleCardEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryptoPokerHelper","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://379275b9a727c68568c4bcd0e4ad57f51a3bf436c9cce9a17ecd694f071daf14"}]}