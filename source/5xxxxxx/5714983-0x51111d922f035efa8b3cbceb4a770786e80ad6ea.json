{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n// File: contracts/ExchangeHandler.sol\r\n\r\n/// @title Interface for all exchange handler contracts\r\ninterface ExchangeHandler {\r\n\r\n    /// @dev Get the available amount left to fill for an order\r\n    /// @param orderAddresses Array of address values needed for this DEX order\r\n    /// @param orderValues Array of uint values needed for this DEX order\r\n    /// @param exchangeFee Value indicating the fee for this DEX order\r\n    /// @param v ECDSA signature parameter v\r\n    /// @param r ECDSA signature parameter r\r\n    /// @param s ECDSA signature parameter s\r\n    /// @return Available amount left to fill for this order\r\n    function getAvailableAmount(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256 exchangeFee,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256);\r\n\r\n    /// @dev Perform a buy order at the exchange\r\n    /// @param orderAddresses Array of address values needed for each DEX order\r\n    /// @param orderValues Array of uint values needed for each DEX order\r\n    /// @param exchangeFee Value indicating the fee for this DEX order\r\n    /// @param amountToFill Amount to fill in this order\r\n    /// @param v ECDSA signature parameter v\r\n    /// @param r ECDSA signature parameter r\r\n    /// @param s ECDSA signature parameter s\r\n    /// @return Amount filled in this order\r\n    function performBuy(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256 exchangeFee,\r\n        uint256 amountToFill,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable returns (uint256);\r\n\r\n    /// @dev Perform a sell order at the exchange\r\n    /// @param orderAddresses Array of address values needed for each DEX order\r\n    /// @param orderValues Array of uint values needed for each DEX order\r\n    /// @param exchangeFee Value indicating the fee for this DEX order\r\n    /// @param amountToFill Amount to fill in this order\r\n    /// @param v ECDSA signature parameter v\r\n    /// @param r ECDSA signature parameter r\r\n    /// @param s ECDSA signature parameter s\r\n    /// @return Amount filled in this order\r\n    function performSell(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256 exchangeFee,\r\n        uint256 amountToFill,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract Token is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/EtherDelta.sol\r\n\r\ninterface EtherDelta {\r\n\r\n    function deposit() public payable;\r\n\r\n    function withdraw(uint amount) public;\r\n\r\n    function depositToken(address token, uint amount) public;\r\n\r\n    function withdrawToken(address token, uint amount) public;\r\n\r\n    function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public;\r\n\r\n    function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) constant returns(uint);\r\n}\r\n\r\ncontract EtherDeltaHandler is ExchangeHandler {\r\n    // State variables\r\n    EtherDelta public exchange;\r\n\r\n    // Constructor\r\n    function EtherDeltaHandler(address _exchange) public {\r\n        exchange = EtherDelta(_exchange);\r\n    }\r\n\r\n    // Public functions\r\n    function getAvailableAmount(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256 exchangeFee,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256) {\r\n\r\n        if(block.number > orderValues[2]) {\r\n            // Order has expired\r\n            return 0;\r\n        }\r\n\r\n        uint256 availableVolume = exchange.availableVolume(\r\n            orderAddresses[2],\r\n            orderValues[1],\r\n            orderAddresses[1],\r\n            orderValues[0],\r\n            orderValues[2],\r\n            orderValues[3],\r\n            orderAddresses[0],\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n\r\n        // Adds the exchange fee onto the available amount\r\n        return getPartialAmount(availableVolume, SafeMath.sub(1 ether, exchangeFee), 1 ether);\r\n    }\r\n\r\n    function performBuy(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256 exchangeFee,\r\n        uint256 amountToFill,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable returns (uint256) {\r\n        require(msg.value == amountToFill);\r\n\r\n        deposit(amountToFill);\r\n\r\n        uint256 amountToTrade;\r\n        uint256 fee;\r\n\r\n        (amountToTrade, fee) = substractFee(exchangeFee, amountToFill);\r\n\r\n        trade(\r\n            orderAddresses,\r\n            orderValues,\r\n            amountToTrade,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n\r\n        uint256 tokenAmountObtained = getPartialAmount(orderValues[0], orderValues[1], amountToTrade);\r\n\r\n        withdrawToken(orderAddresses[1], tokenAmountObtained);\r\n        transferTokenToSender(orderAddresses[1], tokenAmountObtained);\r\n\r\n        return tokenAmountObtained;\r\n    }\r\n\r\n    function performSell(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256 exchangeFee,\r\n        uint256 amountToFill,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256) {\r\n        depositToken(orderAddresses[2], amountToFill);\r\n\r\n        uint256 amountToTrade;\r\n        uint256 fee;\r\n\r\n        (amountToTrade, fee) = substractFee(exchangeFee, amountToFill);\r\n\r\n        trade(\r\n            orderAddresses,\r\n            orderValues,\r\n            amountToTrade,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n\r\n        uint256 etherAmountObtained = getPartialAmount(orderValues[0], orderValues[1], amountToTrade);\r\n\r\n        withdraw(etherAmountObtained);\r\n        transferEtherToSender(etherAmountObtained);\r\n\r\n        return etherAmountObtained;\r\n    }\r\n\r\n    // Internal functions\r\n    function trade(\r\n        address[8] orderAddresses,\r\n        uint256[6] orderValues,\r\n        uint256 amountToTrade,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        exchange.trade(\r\n            orderAddresses[2],\r\n            orderValues[1],\r\n            orderAddresses[1],\r\n            orderValues[0],\r\n            orderValues[2],\r\n            orderValues[3],\r\n            orderAddresses[0],\r\n            v,\r\n            r,\r\n            s,\r\n            amountToTrade\r\n        );\r\n    }\r\n\r\n    function substractFee(uint256 feePercentage, uint256 amount) internal pure returns (uint256, uint256) {\r\n        uint256 fee = getPartialAmount(amount, 1 ether, feePercentage);\r\n        return (SafeMath.sub(amount, fee), fee);\r\n    }\r\n\r\n    function deposit(uint256 amount) internal {\r\n        exchange.deposit.value(amount)();\r\n    }\r\n\r\n    function depositToken(address token, uint256 amount) internal {\r\n        require(Token(token).approve(address(exchange), amount));\r\n        exchange.depositToken(token, amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) internal {\r\n        exchange.withdraw(amount);\r\n    }\r\n\r\n    function withdrawToken(address token, uint256 amount) internal {\r\n        exchange.withdrawToken(token, amount);\r\n    }\r\n\r\n    function transferTokenToSender(address token, uint256 amount) internal {\r\n        require(Token(token).transfer(msg.sender, amount));\r\n    }\r\n\r\n    function transferEtherToSender(uint256 amount) internal {\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function getPartialAmount(uint256 numerator, uint256 denominator, uint256 target) internal pure returns (uint256) {\r\n        return SafeMath.div(SafeMath.mul(numerator, target), denominator);\r\n    }\r\n\r\n    function() public payable {\r\n        require(msg.sender == address(exchange));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[8]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6]\"},{\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"getAvailableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[8]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6]\"},{\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"name\":\"amountToFill\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"performSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderAddresses\",\"type\":\"address[8]\"},{\"name\":\"orderValues\",\"type\":\"uint256[6]\"},{\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"name\":\"amountToFill\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"performBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_exchange\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EtherDeltaHandler","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008d12a197cb00d4747a1fe03395095ce2a5cc6819","Library":"","SwarmSource":"bzzr://c67afc0b1717d086f4146375e2941cc51a7762da84b864200aac05552323907d"}]}