{"status":"1","message":"OK","result":[{"SourceCode":"// KpopArena lets users play with their Kpop cards against other\r\n// players on Kpop.io\r\n\r\npragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC721 {\r\n  function approve(address _to, uint _itemId) public;\r\n  function balanceOf(address _owner) public view returns (uint balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint _itemId) public view returns (address addr);\r\n  function takeOwnership(uint _itemId) public;\r\n  function totalSupply() public view returns (uint total);\r\n  function transferFrom(address _from, address _to, uint _itemId) public;\r\n  function transfer(address _to, uint _itemId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint itemId);\r\n  event Approval(address indexed owner, address indexed approved, uint itemId);\r\n}\r\n\r\ncontract KpopCeleb is ERC721 {\r\n  function ownerOf(uint _celebId) public view returns (address addr);\r\n  function getCeleb(uint _celebId) public view returns (\r\n    string name,\r\n    uint price,\r\n    address owner,\r\n    uint[6] traitValues,\r\n    uint[6] traitBoosters\r\n  );\r\n  function updateTraits(uint _celebId) public;\r\n}\r\n\r\ncontract KpopItem is ERC721 {\r\n  function ownerOf(uint _itemId) public view returns (address addr);\r\n  function getItem(uint _itemId) public view returns (\r\n    string name,\r\n    uint price,\r\n    address owner,\r\n    uint[6] traitValues,\r\n    uint celebId\r\n  );\r\n  function transferToWinner(address _winner, address _loser, uint _itemId) public;\r\n}\r\n\r\ncontract KpopArena {\r\n  using SafeMath for uint;\r\n\r\n  address public author;\r\n  address public coauthor;\r\n\r\n  string public constant NAME = \"KpopArena\";\r\n  string public constant SYMBOL = \"KpopArena\";\r\n\r\n  address public KPOP_CELEB_CONTRACT_ADDRESS = 0x0;\r\n  address public KPOP_ITEM_CONTRACT_ADDRESS = 0x0;\r\n\r\n  mapping(address => bool) public userToIsAcceptingChallenge;\r\n  mapping(address => uint) private userToActiveCelebId;\r\n  mapping(address => uint) private userToActiveItemId;\r\n  mapping(address => uint) public userToScore;\r\n\r\n  event Enroll(address indexed user, uint celebId, uint itemId);\r\n  event Expel(address indexed user);\r\n  event Rescind(address indexed user);\r\n  event FightOver(\r\n    address indexed host,\r\n    address indexed challenger,\r\n    address indexed winner,\r\n    uint challengerCelebId,\r\n    uint challengerItemId,\r\n    string selectedTrait\r\n  );\r\n\r\n  function KpopArena() public {\r\n    author = msg.sender;\r\n    coauthor = msg.sender;\r\n  }\r\n\r\n  function enroll(uint _celebId, uint _itemId) public {\r\n    // User can only enroll once at a time\r\n    require(!userToIsAcceptingChallenge[msg.sender]);\r\n\r\n    // Use must own the celeb and items\r\n    require(doesUserOwnItem(msg.sender, _itemId));\r\n    require(doesUserOwnCeleb(msg.sender, _celebId));\r\n\r\n    userToIsAcceptingChallenge[msg.sender] = true;\r\n    userToActiveCelebId[msg.sender] = _celebId;\r\n    userToActiveItemId[msg.sender] = _itemId;\r\n\r\n    Enroll(msg.sender, _celebId, _itemId);\r\n  }\r\n\r\n  function rescind(address _user) public {\r\n    require(_user == msg.sender || _user == author || _user == coauthor);\r\n\r\n    userToIsAcceptingChallenge[_user] = false;\r\n    Rescind(_user);\r\n  }\r\n\r\n  function challenge(address _host, uint _celebId, uint _itemId) public {\r\n    address _challenger = msg.sender;\r\n\r\n    require(!isNullAddress(_host) && !isNullAddress(_challenger));\r\n    require(_host != _challenger);\r\n    require(userToIsAcceptingChallenge[_host]);\r\n    require(doesUserOwnCeleb(_challenger, _celebId));\r\n    require(doesUserOwnItem(_challenger, _itemId));\r\n\r\n    uint _hostCelebId = userToActiveCelebId[_host];\r\n    uint _hostItemId = userToActiveItemId[_host];\r\n\r\n    // Expel user who doesn't own their celeb or items anymore\r\n    if (!(doesUserOwnCeleb(_host, _hostCelebId) && doesUserOwnItem(_host, _hostItemId))) {\r\n      userToIsAcceptingChallenge[_host] = false;\r\n      Expel(_host);\r\n      return;\r\n    }\r\n\r\n    // Get winner\r\n    uint selectedTraitIdx = selectRandomTrait();\r\n    address winner = computeWinner(\r\n      _host, _hostCelebId, _hostItemId,\r\n      _challenger, _celebId, _itemId,\r\n      selectedTraitIdx\r\n    );\r\n\r\n    // Assign scores\r\n    if (winner != 0x0) {\r\n      userToScore[winner] = userToScore[winner].add(3);\r\n\r\n      // Level up celeb and give winner the item card\r\n      KpopCeleb KPOP_CELEB = KpopCeleb(KPOP_CELEB_CONTRACT_ADDRESS);\r\n      KpopItem KPOP_ITEM = KpopItem(KPOP_ITEM_CONTRACT_ADDRESS);\r\n\r\n      if (winner == _host) {\r\n        KPOP_CELEB.updateTraits(_hostCelebId);\r\n        KPOP_ITEM.transferToWinner(_host, _challenger, _itemId);\r\n      } else {\r\n        KPOP_CELEB.updateTraits(_celebId);\r\n        KPOP_ITEM.transferToWinner(_challenger, _host, _hostItemId);\r\n      }\r\n    } else {\r\n      userToScore[_host] = userToScore[_host].add(1);\r\n      userToScore[_challenger] = userToScore[_challenger].add(1);\r\n    }\r\n\r\n    // Duel is over. Host must opt into the arena again if they wish to get more challenges\r\n    userToIsAcceptingChallenge[_host] = false;\r\n    delete userToActiveCelebId[_host];\r\n    delete userToActiveItemId[_host];\r\n\r\n    FightOver(\r\n      _host,\r\n      _challenger,\r\n      winner,\r\n      _celebId,\r\n      _itemId,\r\n      traitIdxToName(selectedTraitIdx)\r\n    );\r\n  }\r\n\r\n  // _a wins if score > 0 and _b wins if score < 0. Otherwise, draw.\r\n  function computeWinner(\r\n    address _host, uint _hostCelebId, uint _hostItemId,\r\n    address _challenger, uint _challengerCelebId, uint _challengerItemId,\r\n    uint _selectedTraitIdx\r\n  ) private view returns(address winner)\r\n  {\r\n    uint hostTraitScore = computeTraitScore(_hostCelebId, _hostItemId, _selectedTraitIdx);\r\n    uint challengerTraitScore = computeTraitScore(_challengerCelebId, _challengerItemId, _selectedTraitIdx);\r\n\r\n    if (hostTraitScore > challengerTraitScore) {\r\n      return _host;\r\n    }\r\n\r\n    if (hostTraitScore < challengerTraitScore) {\r\n      return _challenger;\r\n    }\r\n\r\n    return 0x0;\r\n  }\r\n\r\n  function computeTraitScore(uint _celebId, uint _itemId, uint _selectedTraitIdx) private view returns (uint) {\r\n    KpopCeleb KPOP_CELEB = KpopCeleb(KPOP_CELEB_CONTRACT_ADDRESS);\r\n    KpopItem KPOP_ITEM = KpopItem(KPOP_ITEM_CONTRACT_ADDRESS);\r\n\r\n    var ( , , ,celebTraits, ) = KPOP_CELEB.getCeleb(_celebId);\r\n    var ( , , ,itemTraits, ) = KPOP_ITEM.getItem(_itemId);\r\n\r\n    return celebTraits[_selectedTraitIdx] + itemTraits[_selectedTraitIdx];\r\n  }\r\n\r\n  function selectRandomTrait() private view returns (uint) {\r\n    return uint(block.blockhash(block.number - 1)) % 6;\r\n  }\r\n\r\n  function withdraw(uint _amount, address _to) public onlyAuthors {\r\n    require(!isNullAddress(_to));\r\n    require(_amount <= this.balance);\r\n\r\n    _to.transfer(_amount);\r\n  }\r\n\r\n  function withdrawAll() public onlyAuthors {\r\n    require(author != 0x0);\r\n    require(coauthor != 0x0);\r\n\r\n    uint halfBalance = uint(SafeMath.div(this.balance, 2));\r\n\r\n    author.transfer(halfBalance);\r\n    coauthor.transfer(halfBalance);\r\n  }\r\n\r\n  function doesUserOwnCeleb(address _user, uint _celebId) private view returns (bool) {\r\n    KpopCeleb KPOP_CELEB = KpopCeleb(KPOP_CELEB_CONTRACT_ADDRESS);\r\n\r\n    return KPOP_CELEB.ownerOf(_celebId) == _user;\r\n  }\r\n\r\n  function doesUserOwnItem(address _user, uint _itemId) private view returns (bool) {\r\n    KpopItem KPOP_ITEM = KpopItem(KPOP_ITEM_CONTRACT_ADDRESS);\r\n\r\n    return KPOP_ITEM.ownerOf(_itemId) == _user;\r\n  }\r\n\r\n  function setCoAuthor(address _coauthor) public onlyAuthor {\r\n    require(!isNullAddress(_coauthor));\r\n\r\n    coauthor = _coauthor;\r\n  }\r\n\r\n  function setKpopItemContractAddress(address _address) public onlyAuthors {\r\n    KPOP_ITEM_CONTRACT_ADDRESS = _address;\r\n  }\r\n\r\n  function setKpopCelebContractAddress(address _address) public onlyAuthors {\r\n    KPOP_CELEB_CONTRACT_ADDRESS = _address;\r\n  }\r\n\r\n  function traitIdxToName(uint _idx) public pure returns (string) {\r\n    if (_idx == 0) {\r\n      return \"rap\";\r\n    }\r\n    if (_idx == 1) {\r\n      return \"vocal\";\r\n    }\r\n    if (_idx == 2) {\r\n      return \"dance\";\r\n    }\r\n    if (_idx == 3) {\r\n      return \"charm\";\r\n    }\r\n    if (_idx == 4) {\r\n      return \"acting\";\r\n    }\r\n    if (_idx == 5) {\r\n      return \"producing\";\r\n    }\r\n  }\r\n\r\n  /** MODIFIERS **/\r\n\r\n  modifier onlyAuthor() {\r\n    require(msg.sender == author);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAuthors() {\r\n    require(msg.sender == author || msg.sender == coauthor);\r\n    _;\r\n  }\r\n\r\n  function isNullAddress(address _addr) private pure returns (bool) {\r\n    return _addr == 0x0;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coauthor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KPOP_ITEM_CONTRACT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToIsAcceptingChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coauthor\",\"type\":\"address\"}],\"name\":\"setCoAuthor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"rescind\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToScore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setKpopCelebContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KPOP_CELEB_CONTRACT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_celebId\",\"type\":\"uint256\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"enroll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_host\",\"type\":\"address\"},{\"name\":\"_celebId\",\"type\":\"uint256\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"challenge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setKpopItemContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"traitIdxToName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"celebId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"Enroll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Expel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Rescind\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"host\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"challengerCelebId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"challengerItemId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"selectedTrait\",\"type\":\"string\"}],\"name\":\"FightOver\",\"type\":\"event\"}]","ContractName":"KpopArena","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f6bc3a2e5626618755e49bc48adeb1ca0e0436098a8059dedb27ed30859589b3"}]}