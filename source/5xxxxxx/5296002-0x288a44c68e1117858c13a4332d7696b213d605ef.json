{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\ncontract Crowdsale{\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    enum TokenSaleType {round1, round2}\r\n    enum Roles {beneficiary, accountant, manager, observer, bounty, team, company, fees}\r\n    \r\n    address public token;\r\n    address public feesStrategy;\r\n    \r\n    address public creator;\r\n    address public vault;\r\n    address public lockedAllocation;\r\n    \r\n    bool public isFinalized;\r\n    bool public isInitialized;\r\n    bool public isPausedCrowdsale;\r\n    bool public isFirstInit;\r\n    \r\n    bool public team;\r\n    \r\n    address[8] public wallets = [\r\n        0x70DAB28d0dbdaD9d4035289AB2e0AEDB31711E00,\r\n        0x2708b92867eD0369cED09096c8453eeDD17EA7Eb,\r\n        msg.sender,\r\n        0x492e0A8aEb2Ed621D27F512FDda7c808902080CD,\r\n        0xffefdbdd6AB5E157eC20241d77cA2fe0F18E907B,\r\n        0xa9E7a001148E6135D8EAE0415211682546b6Eb4f,\r\n        0xFc2193697D5b3D0121A65Ca202d60371719e3adF\r\n    ];\r\n    \r\n    struct Profit{\r\n\t    uint256 min;    // percent from 0 to 50\r\n\t    uint256 max;    // percent from 0 to 50\r\n\t    uint256 step;   // percent step, from 1 to 50 (please, read doc!)\r\n\t    uint256 maxAllProfit; \r\n    }\r\n    struct Bonus {\r\n\t    uint256 value;\r\n\t    uint256 procent;\r\n\t    uint256 freezeTime;\r\n    }\r\n    \r\n    Bonus[] public bonuses;\r\n\r\n    Profit public profit = Profit(0, 25, 5, 50);\r\n    \r\n    uint256 public startTime \t\t= 1521104400; // 15 Apr\r\n    uint256 public endDiscountTime \t= 1522486800; // 31 May\r\n    uint256 public endTime \t\t\t= 1522486800; // 31 May\r\n    \r\n    uint256 public exchange = 1000 ether;\r\n    \r\n    uint256 public rate = 100000 ether;\r\n    uint256 public softCap = 0 ether;\r\n    uint256 public hardCap = 12000 ether;\r\n    uint256 public overLimit = 20 ether;\r\n    uint256 public minPay = 100 finney; \r\n    uint256 public ethWeiRaised;\r\n    uint256 public nonEthWeiRaised;\r\n    uint256 public weiRound1;\r\n    uint256 public tokenReserved;\r\n    \r\n    uint256 public allToken;\r\n    TokenSaleType TokenSale = TokenSaleType.round1;\r\n    \r\n    event ExchangeChanged(uint256 indexed newExchange, uint256 indexed oldExchange, uint256 rate, uint256 softCap, uint256 hardCap);\r\n    \r\n    function changeValues1(bool _isFinalized, bool _isInitialized, bool _isPausedCrowdsale, bool _isFirstInit, bool _team,\r\n    uint256 _minProfit, uint256 _maxProfit, uint256 _stepProfit, uint256 _maxAllProfit, uint256 _startTime,\r\n    uint256 _endDiscountTime, uint256 _endTime, uint256 _exchange, uint256 _rate) public {\r\n        isFinalized = _isFinalized;\r\n        isInitialized = _isInitialized;\r\n        isPausedCrowdsale = _isPausedCrowdsale;\r\n        isFirstInit = _isFirstInit;\r\n        team = _team;\r\n        profit = Profit(_minProfit, _maxProfit, _stepProfit, _maxAllProfit);\r\n        startTime = _startTime;\r\n        endDiscountTime = _endDiscountTime;\r\n        endTime = _endTime;\r\n        exchange = _exchange;\r\n        rate = _rate;\r\n    }\r\n    \r\n    function changeValues2(\r\n    uint256 _softCap, uint256 _hardcap, uint256 _overLimit, uint256 _minPay, uint256 _ethWeiRaised, \r\n    uint256 _nonEthWeiRaised, uint256 _weiRound1, uint256 _tokenReserved, uint256 _allToken, TokenSaleType _TokenSale, \r\n    uint256[] _value, uint256[] _procent, uint256[] _freezeTime) public {\r\n        _softCap = _softCap;\r\n        _hardcap = _hardcap;\r\n        _overLimit = _overLimit;\r\n        _minPay = _minPay;\r\n        _ethWeiRaised = _ethWeiRaised;\r\n        _nonEthWeiRaised = _nonEthWeiRaised;\r\n        _weiRound1 = _weiRound1; \r\n        _tokenReserved = _tokenReserved;\r\n        _allToken = _allToken;\r\n        _TokenSale = _TokenSale;\r\n        bonuses.length = 0;\r\n        for (uint8 i = 0; i < _value.length; i++){\r\n            bonuses.push(Bonus(_value[i],_procent[i],_freezeTime[i]));\r\n        }\r\n    }\r\n    \r\n    \r\n    function changeExchange(uint256 _ETHUSD) public {\r\n\t\trequire(_ETHUSD >= 1 ether); \r\n\r\n\t\tsoftCap=softCap.mul(exchange).div(_ETHUSD);  \t\t\t// QUINTILLIONS\r\n\t\thardCap=hardCap.mul(exchange).div(_ETHUSD);  \t\t\t// QUINTILLIONS\r\n\t\tminPay=minPay.mul(exchange).div(_ETHUSD);    \t\t   \t// QUINTILLIONS\r\n\t\t//TODO TaxValues[0]=TaxValues[0].mul(exchange).div(_ETHUSD);  \t// QUINTILLIONS\r\n\t\t//TODO TaxValues[1]=TaxValues[1].mul(exchange).div(_ETHUSD);  \t// QUINTILLIONS\r\n\r\n\t\trate=rate.mul(_ETHUSD).div(exchange);        \t\t\t// QUINTILLIONS\r\n\t\t\r\n\t\temit ExchangeChanged(_ETHUSD, exchange, rate, softCap, hardCap);\r\n\r\n\t    for (uint16 i = 0; i < bonuses.length; i++) {\r\n\t        bonuses[i].value=bonuses[i].value.mul(exchange).div(_ETHUSD);   // QUINTILLIONS\r\n\t    }\r\n\t    \r\n\t    exchange=_ETHUSD;\r\n\t    \r\n\t    \r\n\r\n    }\r\n    \r\n    function getTokenSaleType()  external constant returns(string){\r\n        return (TokenSale == TokenSaleType.round1)?'round1':'round2';\r\n    }\r\n    \r\n    \r\n    function hasEnded() public constant returns (bool) {\r\n\r\n        bool timeReached = now > endTime;\r\n\r\n        bool capReached = weiRaised() >= hardCap;\r\n\r\n        return (timeReached || capReached) && isInitialized;\r\n    }\r\n    \r\n    function goalReached() public constant returns (bool) {\r\n        return weiRaised() >= softCap;\r\n    }\r\n    \r\n    // Collected funds for the current round. Constant.\r\n    function weiRaised() public constant returns(uint256){\r\n        return ethWeiRaised.add(nonEthWeiRaised);\r\n    }\r\n\r\n    // Returns the amount of fees for both phases. Constant.\r\n    function weiTotalRaised() external constant returns(uint256){\r\n        return weiRound1.add(weiRaised());\r\n    }\r\n\r\n    // Returns the percentage of the bonus on the current date. Constant.\r\n    function getProfitPercent() public constant returns (uint256){\r\n        return getProfitPercentForData(now);\r\n    }\r\n\r\n\r\n    // Returns the percentage of the bonus on the given date. Constant.\r\n    function getProfitPercentForData(uint256 timeNow) public constant returns (uint256){\r\n        // if the discount is 0 or zero steps, or the round does not start, we return the minimum discount\r\n        if (profit.max == 0 || profit.step == 0 || timeNow > endDiscountTime){\r\n            return profit.min;\r\n        }\r\n\r\n        // if the round is over - the maximum\r\n        if (timeNow<=startTime){\r\n            return profit.max;\r\n        }\r\n\r\n        // bonus period\r\n        uint256 range = endDiscountTime.sub(startTime);\r\n\r\n        // delta bonus percentage\r\n        uint256 profitRange = profit.max.sub(profit.min);\r\n\r\n        // Time left\r\n        uint256 timeRest = endDiscountTime.sub(timeNow);\r\n\r\n        // Divide the delta of time into\r\n        uint256 profitProcent = profitRange.div(profit.step).mul(timeRest.mul(profit.step.add(1)).div(range));\r\n        return profitProcent.add(profit.min);\r\n    }\r\n\r\n    function getBonuses(uint256 _value) public constant returns(uint256 procent, uint256 _dateUnfreeze){\r\n        if(bonuses.length == 0 || bonuses[0].value > _value){\r\n            return (0,0);\r\n        }\r\n        uint16 i = 1;\r\n        for(i; i < bonuses.length; i++){\r\n            if(bonuses[i].value > _value){\r\n                break;\r\n            }\r\n        }\r\n        return (bonuses[i-1].procent,bonuses[i-1].freezeTime);\r\n    }\r\n    \r\n    \r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this does not hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRound1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiTotalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isFinalized\",\"type\":\"bool\"},{\"name\":\"_isInitialized\",\"type\":\"bool\"},{\"name\":\"_isPausedCrowdsale\",\"type\":\"bool\"},{\"name\":\"_isFirstInit\",\"type\":\"bool\"},{\"name\":\"_team\",\"type\":\"bool\"},{\"name\":\"_minProfit\",\"type\":\"uint256\"},{\"name\":\"_maxProfit\",\"type\":\"uint256\"},{\"name\":\"_stepProfit\",\"type\":\"uint256\"},{\"name\":\"_maxAllProfit\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endDiscountTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_exchange\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeValues1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFirstInit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProfitPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profit\",\"outputs\":[{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"},{\"name\":\"step\",\"type\":\"uint256\"},{\"name\":\"maxAllProfit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ETHUSD\",\"type\":\"uint256\"}],\"name\":\"changeExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"getProfitPercentForData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonuses\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"procent\",\"type\":\"uint256\"},{\"name\":\"freezeTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonEthWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDiscountTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_softCap\",\"type\":\"uint256\"},{\"name\":\"_hardcap\",\"type\":\"uint256\"},{\"name\":\"_overLimit\",\"type\":\"uint256\"},{\"name\":\"_minPay\",\"type\":\"uint256\"},{\"name\":\"_ethWeiRaised\",\"type\":\"uint256\"},{\"name\":\"_nonEthWeiRaised\",\"type\":\"uint256\"},{\"name\":\"_weiRound1\",\"type\":\"uint256\"},{\"name\":\"_tokenReserved\",\"type\":\"uint256\"},{\"name\":\"_allToken\",\"type\":\"uint256\"},{\"name\":\"_TokenSale\",\"type\":\"uint8\"},{\"name\":\"_value\",\"type\":\"uint256[]\"},{\"name\":\"_procent\",\"type\":\"uint256[]\"},{\"name\":\"_freezeTime\",\"type\":\"uint256[]\"}],\"name\":\"changeValues2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPausedCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenSaleType\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"overLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReserved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getBonuses\",\"outputs\":[{\"name\":\"procent\",\"type\":\"uint256\"},{\"name\":\"_dateUnfreeze\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesStrategy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newExchange\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"oldExchange\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"softCap\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hardCap\",\"type\":\"uint256\"}],\"name\":\"ExchangeChanged\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://12b3bf94345d3fbf9bb9796c79746982780cea815e95c66f283fde28ebc9ff02"}]}