{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n// Random lottery\r\n// Smart contracts can't bet\r\n\r\n// Pay 0.001eth or higher to get a random number\r\n// You probably shouldn't pay higher than 0.001eth, there's no reason.\r\n// If your random number is the highest so far you're in the lead\r\n// If no one beats you in 1 day you can claim your winnnings - the entire balance.\r\n\r\n// 1% dev fee on winnings\r\ncontract RandoLotto {\r\n    using SafeMath for uint256;\r\n    \r\n    event NewLeader(address newLeader, uint256 highScore);\r\n    event BidAttempt(uint256 randomNumber, uint256 highScore);\r\n    event NewRound(uint256 payout, uint256 highScore);\r\n    \r\n    address public currentWinner;\r\n    \r\n    uint256 public highScore;\r\n    uint256 public lastTimestamp;\r\n    \r\n    address internal dev;\r\n    \r\n    Random randomContract;\r\n    \r\n    modifier GTFOSmartContractHackerz {\r\n        require(msg.sender == tx.origin);\r\n        _;    \r\n    }\r\n    \r\n    constructor () public payable {\r\n        dev = msg.sender;\r\n        highScore = 0;\r\n        currentWinner = msg.sender;\r\n        lastTimestamp = now;\r\n        randomContract = new Random();\r\n    }\r\n    \r\n    function () public payable GTFOSmartContractHackerz {\r\n        require(msg.value >= 0.001 ether);\r\n        \r\n        if (now > lastTimestamp + 1 days) { sendWinnings(); }\r\n    \r\n        // We include msg.sender in the randomNumber so that it's not the same for different blocks\r\n        uint256 randomNumber = randomContract.random(10000000000000000000);\r\n        \r\n        if (randomNumber > highScore) {\r\n            highScore = randomNumber;\r\n            currentWinner = msg.sender;\r\n            lastTimestamp = now;\r\n            \r\n            emit NewLeader(msg.sender, highScore);\r\n        }\r\n        \r\n        emit BidAttempt(randomNumber, highScore);\r\n    }\r\n    \r\n    function sendWinnings() public {\r\n        require(now > lastTimestamp + 1 days);\r\n        \r\n        uint256 toWinner;\r\n        uint256 toDev;\r\n        \r\n        if (address(this).balance > 0) {\r\n            uint256 totalPot = address(this).balance;\r\n            \r\n            toDev = totalPot.div(100);\r\n            toWinner = totalPot.sub(toDev);\r\n         \r\n            dev.transfer(toDev);\r\n            currentWinner.transfer(toWinner);\r\n        }\r\n        \r\n        highScore = 0;\r\n        currentWinner = msg.sender;\r\n        lastTimestamp = now;\r\n        \r\n        emit NewRound(toWinner, highScore);\r\n    }\r\n}\r\n\r\ncontract Random {\r\n  uint256 _seed;\r\n\r\n  // The upper bound of the number returns is 2^bits - 1\r\n  function bitSlice(uint256 n, uint256 bits, uint256 slot) public pure returns(uint256) {\r\n      uint256 offset = slot * bits;\r\n      // mask is made by shifting left an offset number of times\r\n      uint256 mask = uint256((2**bits) - 1) << offset;\r\n      // AND n with mask, and trim to max of 5 bits\r\n      return uint256((n & mask) >> offset);\r\n  }\r\n\r\n  function maxRandom() public returns (uint256 randomNumber) {\r\n    _seed = uint256(keccak256(\r\n        _seed,\r\n        blockhash(block.number - 1),\r\n        block.coinbase,\r\n        block.difficulty\r\n    ));\r\n    return _seed;\r\n  }\r\n\r\n  // return a pseudo random number with an upper bound\r\n  function random(uint256 upper) public returns (uint256 randomNumber) {\r\n    return maxRandom() % upper;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lastTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highScore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendWinnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLeader\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"highScore\",\"type\":\"uint256\"}],\"name\":\"NewLeader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"highScore\",\"type\":\"uint256\"}],\"name\":\"BidAttempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"highScore\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"}]","ContractName":"RandoLotto","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0f14c932f9255c256ad2a39cb4a0ccb65b90b0464265083feac1c8ed8e7fb9e1"}]}