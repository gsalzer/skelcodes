{"status":"1","message":"OK","result":[{"SourceCode":"contract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract Owned \r\n{\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() \r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner \r\n    {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrTokenTraderWithSameOwner \r\n    {\r\n        require (msg.sender == owner && TokenTrader(msg.sender).owner() == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner \r\n    {\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract x888 is StandardToken, Owned\r\n{\r\n    using SafeMath for uint256;\r\n    string public name = \"Meta Exchange x888\";\r\n    string public symbol = \"X888\";\r\n    uint8 public constant decimals = 6;\r\n    \r\n    uint256 public totalSupply = 5125387888 * (uint256(10) ** decimals);\r\n\r\n    uint256 public exchFee = uint256(1 * (uint256(10) ** (decimals - 2)));\r\n\r\n    uint256 public startTimestamp;\r\n    \r\n    uint256 public avgRate = uint256(uint256(10)**(18-decimals)).div(888);\r\n\r\n    address public stuff = 0x0CcCb9bAAdD61F9e0ab25bD782765013817821bD;\r\n    address public teama = 0x20f349917d2521c41f8ec9c0a1f7e0c36af0b46f;\r\n    address public baseowner;\r\n\r\n    mapping(address => bool) _verify;\r\n    mapping(uint256 => address) _mks;\r\n    uint256 public makersCount;\r\n\r\n    event LogTransfer(address sender, address to, uint amount);\r\n    event Clearing(address to, uint256 amount);\r\n\r\n    event TradeListing(address indexed ownerAddress, address indexed tokenTraderAddress,\r\n        address indexed asset, uint256 buyPrice, uint256 sellPrice, uint256 units,\r\n        bool buysTokens, bool sellsTokens);\r\n    event OwnerWithdrewERC20Token(address indexed tokenAddress, uint256 tokens);\r\n\r\n    function x888() \r\n    {\r\n        makersCount = 0;\r\n        startTimestamp = now;\r\n        baseowner = msg.sender;\r\n        balances[baseowner] = totalSupply;\r\n        Transfer(0x0, baseowner, totalSupply);\r\n    }\r\n\r\n    function bva(address partner, uint256 value, address adviser) payable public \r\n    {\r\n      uint256 tokenAmount = calcTotal(value);\r\n      if(msg.value != 0)\r\n      {\r\n        tokenAmount = calcCount(msg.value);\r\n      }else\r\n      {\r\n        require(msg.sender == stuff);\r\n      }\r\n      if(msg.value != 0)\r\n      {\r\n        Clearing(stuff, msg.value.mul(40).div(100));\r\n        stuff.transfer(msg.value.mul(40).div(100));\r\n        Clearing(teama, msg.value.mul(40).div(100));\r\n        teama.transfer(msg.value.mul(40).div(100));\r\n        if(partner != adviser)\r\n        {\r\n          Clearing(adviser, msg.value.mul(20).div(100));\r\n          adviser.transfer(msg.value.mul(20).div(100));\r\n        }else\r\n        {\r\n          Clearing(stuff, msg.value.mul(10).div(100));\r\n          stuff.transfer(msg.value.mul(10).div(100));\r\n          Clearing(teama, msg.value.mul(10).div(100));\r\n          teama.transfer(msg.value.mul(10).div(100));\r\n        } \r\n      }\r\n      if(partner != stuff)\r\n      {\r\n        balances[baseowner] = balances[baseowner].sub(tokenAmount);\r\n        balances[partner] = balances[partner].add(tokenAmount);\r\n        Transfer(baseowner, partner, tokenAmount);\r\n      }\r\n    }\r\n    \r\n    function() payable public\r\n    {\r\n      if(msg.value != 0)\r\n      {\r\n        uint256 tokenAmount = msg.value.div(avgRate);\r\n        Clearing(stuff, msg.value.mul(50).div(100));\r\n        stuff.transfer(msg.value.mul(50).div(100));\r\n        Clearing(teama, msg.value.mul(50).div(100));\r\n        teama.transfer(msg.value.mul(50).div(100));\r\n        if(msg.sender!=stuff)\r\n        {\r\n          balances[baseowner] = balances[baseowner].sub(tokenAmount);\r\n          balances[msg.sender] = balances[msg.sender].add(tokenAmount);\r\n          Transfer(baseowner, msg.sender, tokenAmount);\r\n        }\r\n      }\r\n    }\r\n\r\n    function calcTotal(uint256 count) constant returns(uint256) \r\n    {\r\n        return count.mul(getDeflator()).div(100);\r\n    }\r\n\r\n    function calcCount(uint256 weiAmount) constant returns(uint256) \r\n    {\r\n        return weiAmount.div(avgRate).mul(getDeflator()).div(100);\r\n    }\r\n\r\n    function getDeflator() constant returns (uint256)\r\n    {\r\n        if (now <= startTimestamp + 14 days)//38% \r\n        {\r\n            return 138;\r\n        }else if (now <= startTimestamp + 28 days)//23% \r\n        {\r\n            return 123;\r\n        }else if (now <= startTimestamp + 42 days)//15% \r\n        {\r\n            return 115;\r\n        }else if (now <= startTimestamp + 56 days)//9%\r\n        {\r\n            return 109;\r\n        }else if (now <= startTimestamp + 70 days)//5%\r\n        {\r\n            return 105;\r\n        }else\r\n        {\r\n            return 100;\r\n        }\r\n    }\r\n\r\n    function verify(address tradeContract) constant returns (\r\n        bool    valid,\r\n        address owner,\r\n        address asset,\r\n        uint256 buyPrice,\r\n        uint256 sellPrice,\r\n        uint256 units,\r\n        bool    buysTokens,\r\n        bool    sellsTokens\r\n    ) \r\n    {\r\n        valid = _verify[tradeContract];\r\n        if (valid) \r\n        {\r\n            TokenTrader t = TokenTrader(tradeContract);\r\n            owner         = t.owner();\r\n            asset         = t.asset();\r\n            buyPrice      = t.buyPrice();\r\n            sellPrice     = t.sellPrice();\r\n            units         = t.units();\r\n            buysTokens    = t.buysTokens();\r\n            sellsTokens   = t.sellsTokens();\r\n        }\r\n    }\r\n\r\n    function getTrader(uint256 id) public constant returns (\r\n        bool    valid,\r\n        address owner,\r\n        address asset,\r\n        uint256 buyPrice,\r\n        uint256 sellPrice,\r\n        uint256 units,\r\n        bool    buysTokens,\r\n        bool    sellsTokens\r\n    ) \r\n    {\r\n      if(id < makersCount)\r\n      {\r\n        valid = _verify[_mks[id]];\r\n        if (valid) \r\n        {\r\n            TokenTrader t = TokenTrader(_mks[id]);\r\n            owner         = t.owner();\r\n            asset         = t.asset();\r\n            buyPrice      = t.buyPrice();\r\n            sellPrice     = t.sellPrice();\r\n            units         = t.units();\r\n            buysTokens    = t.buysTokens();\r\n            sellsTokens   = t.sellsTokens();\r\n        }\r\n      }\r\n    }\r\n    \r\n    function createTradeContract(\r\n        address asset,\r\n        uint256 buyPrice,\r\n        uint256 sellPrice,\r\n        uint256 units,\r\n        bool    buysTokens,\r\n        bool    sellsTokens\r\n    ) public returns (address trader) \r\n    {\r\n        require (balances[msg.sender] > 1000 * (uint256(10) ** decimals));\r\n        require (asset != 0x0);\r\n        require(buyPrice > 0 && sellPrice > 0);\r\n        require(buyPrice < sellPrice);\r\n        require (units > 0);\r\n\r\n        trader = new TokenTrader(\r\n            asset,\r\n            exchFee,\r\n            address(this),\r\n            buyPrice,\r\n            sellPrice,\r\n            units,\r\n            buysTokens,\r\n            sellsTokens);\r\n        _verify[trader] = true;\r\n        _mks[makersCount] = trader;\r\n        makersCount = makersCount.add(1);\r\n        balances[baseowner] += 1000 * (uint256(10) ** decimals);\r\n        balances[msg.sender] -= 1000 * (uint256(10) ** decimals);\r\n        TokenTrader(trader).transferOwnership(msg.sender);\r\n        TradeListing(msg.sender, trader, asset, buyPrice, sellPrice, units, buysTokens, sellsTokens);\r\n    }\r\n\r\n    function cleanup() \r\n    {\r\n      revert();\r\n    }\r\n\r\n    function transfer(address _to, uint _value) returns (bool) \r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool) \r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining)\r\n    {\r\n        if(balances[_owner] >= exchFee)\r\n        {\r\n            if(_verify[_spender])\r\n            {\r\n                return exchFee;\r\n            }else\r\n            {\r\n                return super.allowance(_owner, _spender);\r\n            }\r\n        }else\r\n        {\r\n            return super.allowance(_owner, _spender);\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract ERCTW \r\n{\r\n    function totalSupply() constant returns (uint256);\r\n    function balanceOf(address _owner) constant returns (uint256);\r\n    function transfer(address _to, uint _value) returns (bool);\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool);\r\n    function approve(address _spender, uint _value) returns (bool);\r\n    function allowance(address _owner, address _spender) constant returns (uint256);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\ncontract TokenTrader is Owned \r\n{\r\n    address public exchange;    // address of exchange\r\n    address public asset;       // address of token\r\n    uint256 public buyPrice;    // contract buys lots of token at this price\r\n    uint256 public sellPrice;   // contract sells lots at this price\r\n    uint256 public units;       // lot size (token-wei)\r\n    uint256 public exchFee;     // fee size (0,01 x8888)\r\n\r\n    bool public buysTokens;     // is contract buying\r\n    bool public sellsTokens;    // is contract selling\r\n\r\n    event ActivatedEvent(bool buys, bool sells);\r\n    event MakerDepositedEther(uint256 amount);\r\n    event MakerWithdrewAsset(uint256 tokens);\r\n    event MakerTransferredAsset(address toTokenTrader, uint256 tokens);\r\n    event MakerWithdrewERC20Token(address tokenAddress, uint256 tokens);\r\n    event MakerWithdrewEther(uint256 ethers);\r\n    event MakerTransferredEther(address toTokenTrader, uint256 ethers);\r\n    event TakerBoughtAsset(address indexed buyer, uint256 ethersSent,\r\n        uint256 ethersReturned, uint256 tokensBought);\r\n    event TakerSoldAsset(address indexed seller, uint256 amountOfTokensToSell,\r\n        uint256 tokensSold, uint256 etherValueOfTokensSold);\r\n\r\n    // Constructor - only to be called by the TokenTraderFactory contract\r\n    function TokenTrader (\r\n        address _asset,\r\n        uint256 _exchFee,\r\n        address _exchange,\r\n        uint256 _buyPrice,\r\n        uint256 _sellPrice,\r\n        uint256 _units,\r\n        bool    _buysTokens,\r\n        bool    _sellsTokens\r\n    ) \r\n    {\r\n        asset       = _asset;\r\n        exchFee     = _exchFee;\r\n        exchange    = _exchange;\r\n        buyPrice    = _buyPrice;\r\n        sellPrice   = _sellPrice;\r\n        units       = _units;\r\n        buysTokens  = _buysTokens;\r\n        sellsTokens = _sellsTokens;\r\n        ActivatedEvent(buysTokens, sellsTokens);\r\n    }\r\n\r\n    function activate (\r\n        address _asset,\r\n        uint256 _exchFee,\r\n        address _exchange,\r\n        uint256 _buyPrice,\r\n        uint256 _sellPrice,\r\n        uint256 _units,\r\n        bool    _buysTokens,\r\n        bool    _sellsTokens\r\n    ) onlyOwner \r\n    {\r\n        require(ERCTW(exchange).transferFrom(owner, exchange, exchFee));\r\n        asset       = _asset;\r\n        exchFee     = _exchFee;\r\n        exchange    = _exchange;\r\n        buyPrice    = _buyPrice;\r\n        sellPrice   = _sellPrice;\r\n        units       = _units;\r\n        buysTokens  = _buysTokens;\r\n        sellsTokens = _sellsTokens;\r\n        ActivatedEvent(buysTokens, sellsTokens);\r\n    }\r\n\r\n    function makerDepositEther() payable onlyOwnerOrTokenTraderWithSameOwner \r\n    {\r\n        require(ERCTW(exchange).transferFrom(owner, exchange, exchFee));\r\n        MakerDepositedEther(msg.value);\r\n    }\r\n\r\n    function makerWithdrawAsset(uint256 tokens) onlyOwner returns (bool ok) \r\n    {\r\n        require(ERCTW(exchange).transferFrom(owner, exchange, exchFee));\r\n        MakerWithdrewAsset(tokens);\r\n        return ERCTW(asset).transfer(owner, tokens);\r\n    }\r\n\r\n    function makerTransferAsset(\r\n        TokenTrader toTokenTrader,\r\n        uint256 tokens\r\n    ) onlyOwner returns (bool ok) \r\n    {\r\n        require(ERCTW(exchange).transferFrom(owner, exchange, exchFee));\r\n        require (owner == toTokenTrader.owner() && asset == toTokenTrader.asset()); \r\n        MakerTransferredAsset(toTokenTrader, tokens);\r\n        return ERCTW(asset).transfer(toTokenTrader, tokens);\r\n    }\r\n\r\n    function makerWithdrawERC20Token(\r\n        address tokenAddress,\r\n        uint256 tokens\r\n    ) onlyOwner returns (bool ok) \r\n    {\r\n        require(ERCTW(exchange).transferFrom(owner, exchange, exchFee));\r\n        MakerWithdrewERC20Token(tokenAddress, tokens);\r\n        return ERCTW(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    function makerWithdrawEther(uint256 ethers) onlyOwner returns (bool ok) \r\n    {\r\n        require(ERCTW(exchange).transferFrom(owner, exchange, exchFee));\r\n        if (this.balance >= ethers) \r\n        {\r\n            MakerWithdrewEther(ethers);\r\n            return owner.send(ethers);\r\n        }\r\n    }\r\n\r\n    function makerTransferEther(\r\n        TokenTrader toTokenTrader,\r\n        uint256 ethers\r\n    ) onlyOwner returns (bool) \r\n    {\r\n        require(ERCTW(exchange).transferFrom(owner, exchange, exchFee));\r\n        require (owner == toTokenTrader.owner() && asset == toTokenTrader.asset()); \r\n        if (this.balance >= ethers) \r\n        {\r\n            MakerTransferredEther(toTokenTrader, ethers);\r\n            toTokenTrader.makerDepositEther.value(ethers)();\r\n        }\r\n    }\r\n\r\n    function takerBuyAsset() payable \r\n    {\r\n        require(ERCTW(exchange).transferFrom(owner, exchange, exchFee));\r\n        if (sellsTokens || msg.sender == owner) \r\n        {\r\n            uint order    = msg.value / sellPrice;\r\n            uint can_sell = ERCTW(asset).balanceOf(address(this)) / units;\r\n            uint256 change = 0;\r\n            if (msg.value > (can_sell * sellPrice)) \r\n            {\r\n                change  = msg.value - (can_sell * sellPrice);\r\n                order = can_sell;\r\n            }\r\n            if (change > 0) \r\n            {\r\n                require(msg.sender.send(change));\r\n            }\r\n            if (order > 0) \r\n            {\r\n                require (ERCTW(asset).transfer(msg.sender, order * units));\r\n            }\r\n            TakerBoughtAsset(msg.sender, msg.value, change, order * units);\r\n        }\r\n        else require (msg.sender.send(msg.value));\r\n    }\r\n\r\n    function takerSellAsset(uint256 amountOfTokensToSell) \r\n    {\r\n        require(ERCTW(exchange).transferFrom(owner, exchange, exchFee));\r\n        if (buysTokens || msg.sender == owner) \r\n        {\r\n            uint256 can_buy = this.balance / buyPrice;\r\n            uint256 order = amountOfTokensToSell / units;\r\n            if (order > can_buy) order = can_buy;\r\n            if (order > 0) \r\n            {\r\n                require(ERCTW(asset).transferFrom(msg.sender, address(this), order * units));\r\n                require(msg.sender.send(order * buyPrice));\r\n            }\r\n            TakerSoldAsset(msg.sender, amountOfTokensToSell, order * units, order * buyPrice);\r\n        }\r\n    }\r\n    function () payable \r\n    {\r\n        takerBuyAsset();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"calcCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeflator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanup\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"units\",\"type\":\"uint256\"},{\"name\":\"buysTokens\",\"type\":\"bool\"},{\"name\":\"sellsTokens\",\"type\":\"bool\"}],\"name\":\"createTradeContract\",\"outputs\":[{\"name\":\"trader\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tradeContract\",\"type\":\"address\"}],\"name\":\"verify\",\"outputs\":[{\"name\":\"valid\",\"type\":\"bool\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"units\",\"type\":\"uint256\"},{\"name\":\"buysTokens\",\"type\":\"bool\"},{\"name\":\"sellsTokens\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"partner\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"adviser\",\"type\":\"address\"}],\"name\":\"bva\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"makersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"avgRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stuff\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teama\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"calcTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTrader\",\"outputs\":[{\"name\":\"valid\",\"type\":\"bool\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"units\",\"type\":\"uint256\"},{\"name\":\"buysTokens\",\"type\":\"bool\"},{\"name\":\"sellsTokens\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseowner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Clearing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenTraderAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"units\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buysTokens\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"sellsTokens\",\"type\":\"bool\"}],\"name\":\"TradeListing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"OwnerWithdrewERC20Token\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"x888","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://009da476f589c003e1f1f1b53f5d6b1b0c6d64e03f6d7a7eeee131903a652e93"}]}