{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    function Ownable() {\r\n    owner = msg.sender;\r\n    }\r\n\r\n  modifier onlyOwner() {\r\n    if (msg.sender == owner)\r\n      _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// @title Interface for contracts conforming to ERC-721 Non-Fungible Tokens\r\n// @author Dieter Shirley dete@axiomzen.co (httpsgithub.comdete)\r\ncontract ERC721 {\r\n    //Required methods\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function implementsERC721() public pure returns (bool);\r\n    function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n    function takeOwnership(uint256 _tokenId) public;\r\n    function totalSupply() public view returns (uint256 total);\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function transfer(address _to, uint256 _tokenId) public;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n    //Optional\r\n    //function name() public view returns (string name);\r\n    //function symbol() public view returns (string symbol);\r\n    //function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n    //function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n\r\ncontract Avatarium is Ownable, ERC721 {\r\n\r\n\r\n    // --- Events --- //\r\n\r\n\r\n    // @dev The Birth event is fired, whenever a new Avatar has been created.\r\n    event Birth(\r\n        uint256 tokenId, \r\n        string name, \r\n        address owner);\r\n\r\n    // @dev The TokenSold event is fired, whenever a token is sold.\r\n    event TokenSold(\r\n        uint256 tokenId, \r\n        uint256 oldPrice, \r\n        uint256 newPrice, \r\n        address prevOwner, \r\n        address winner, \r\n        string name);\r\n    \r\n    \r\n    // --- Constants --- //\r\n\r\n\r\n    // The name and the symbol of the NFT, as defined in ERC-721.\r\n    string public constant NAME = \"Avatarium\";\r\n    string public constant SYMBOL = \"Î›V\";\r\n\r\n    // Prices and iteration steps\r\n    uint256 private startingPrice = 0.02 ether;\r\n    uint256 private firstIterationLimit = 0.05 ether;\r\n    uint256 private secondIterationLimit = 0.5 ether;\r\n\r\n    // Addresses that can execute important functions.\r\n    address public addressCEO;\r\n    address public addressCOO;\r\n\r\n\r\n    // --- Storage --- //\r\n\r\n\r\n    // @dev A mapping from Avatar ID to the owner's address.\r\n    mapping (uint => address) public avatarIndexToOwner;\r\n\r\n    // @dev A mapping from the owner's address to the tokens it owns.\r\n    mapping (address => uint256) public ownershipTokenCount;\r\n\r\n    // @dev A mapping from Avatar's ID to an address that has been approved\r\n    // to call transferFrom().\r\n    mapping (uint256 => address) public avatarIndexToApproved;\r\n\r\n    // @dev A private mapping from Avatar's ID to its price.\r\n    mapping (uint256 => uint256) private avatarIndexToPrice;\r\n\r\n\r\n    // --- Datatypes --- //\r\n\r\n\r\n    // The main struct\r\n    struct Avatar {\r\n        string name;\r\n    }\r\n\r\n    Avatar[] public avatars;\r\n\r\n\r\n    // --- Access Modifiers --- //\r\n\r\n\r\n    // @dev Access only to the CEO-functionality.\r\n    modifier onlyCEO() {\r\n        require(msg.sender == addressCEO);\r\n        _;\r\n    }\r\n\r\n    // @dev Access only to the COO-functionality.\r\n    modifier onlyCOO() {\r\n        require(msg.sender == addressCOO);\r\n        _;\r\n    }\r\n\r\n    // @dev Access to the C-level in general.\r\n    modifier onlyCLevel() {\r\n        require(msg.sender == addressCEO || msg.sender == addressCOO);\r\n        _;\r\n    }\r\n\r\n\r\n    // --- Constructor --- //\r\n\r\n\r\n    function Avatarium() public {\r\n        addressCEO = msg.sender;\r\n        addressCOO = msg.sender;\r\n    }\r\n\r\n\r\n    // --- Public functions --- //\r\n\r\n\r\n    //@dev Assigns a new address as the CEO. Only available to the current CEO.\r\n    function setCEO(address _newCEO) public onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        addressCEO = _newCEO;\r\n    }\r\n\r\n    // @dev Assigns a new address as the COO. Only available to the current COO.\r\n    function setCOO(address _newCOO) public onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        addressCOO = _newCOO;\r\n    }\r\n\r\n    // @dev Grants another address the right to transfer a token via \r\n    // takeOwnership() and transferFrom()\r\n    function approve(address _to, uint256 _tokenId) public {\r\n        // Check the ownership\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        avatarIndexToApproved[_tokenId] = _to;\r\n\r\n        // Fire the event\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    // @dev Checks the balanse of the address, ERC-721 compliance\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    // @dev Creates a new Avatar\r\n    function createAvatar(string _name, uint256 _rank) public onlyCLevel {\r\n        _createAvatar(_name, address(this), _rank);\r\n    }\r\n\r\n    // @dev Returns the information on a certain Avatar\r\n    function getAvatar(uint256 _tokenId) public view returns (\r\n        string avatarName,\r\n        uint256 sellingPrice,\r\n        address owner\r\n    ) {\r\n        Avatar storage avatar = avatars[_tokenId];\r\n        avatarName = avatar.name;\r\n        sellingPrice = avatarIndexToPrice[_tokenId];\r\n        owner = avatarIndexToOwner[_tokenId];\r\n    }\r\n\r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // @dev Queries the owner of the token.\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\r\n        owner = avatarIndexToOwner[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n\r\n    function payout(address _to) public onlyCLevel {\r\n        _payout(_to);\r\n    }\r\n\r\n    // @dev Allows to purchase an Avatar for Ether.\r\n    function purchase(uint256 _tokenId) public payable {\r\n        address oldOwner = avatarIndexToOwner[_tokenId];\r\n        address newOwner = msg.sender;\r\n\r\n        uint256 sellingPrice = avatarIndexToPrice[_tokenId];\r\n\r\n        require(oldOwner != newOwner);\r\n        require(_addressNotNull(newOwner));\r\n        require(msg.value == sellingPrice);\r\n\r\n        uint256 payment = uint256(SafeMath.div(\r\n                                  SafeMath.mul(sellingPrice, 94), 100));\r\n        uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n\r\n        // Updating prices\r\n        if (sellingPrice < firstIterationLimit) {\r\n        // first stage\r\n            avatarIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 200), 94);\r\n        } else if (sellingPrice < secondIterationLimit) {\r\n        // second stage\r\n            avatarIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 120), 94);\r\n        } else {\r\n        // third stage\r\n            avatarIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 115), 94);\r\n        }\r\n\r\n        _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n        // Pay previous token Owner, if it's not the contract\r\n        if (oldOwner != address(this)) {\r\n            oldOwner.transfer(payment);\r\n        }\r\n\r\n        // Fire event\r\n        \r\n        TokenSold(\r\n            _tokenId,\r\n            sellingPrice,\r\n            avatarIndexToPrice[_tokenId],\r\n            oldOwner,\r\n            newOwner,\r\n            avatars[_tokenId].name);\r\n\r\n        // Transferring excessess back to the sender\r\n        msg.sender.transfer(purchaseExcess);\r\n    }\r\n\r\n    // @dev Queries the price of a token.\r\n    function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n        return avatarIndexToPrice[_tokenId];\r\n    }\r\n    \r\n    //@dev Allows pre-approved user to take ownership of a token.\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        address newOwner = msg.sender;\r\n        address oldOwner = avatarIndexToOwner[_tokenId];\r\n\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_addressNotNull(newOwner));\r\n\r\n        //Making sure transfer is approved\r\n        require(_approved(newOwner, _tokenId));\r\n\r\n        _transfer(oldOwner, newOwner, _tokenId);\r\n    }\r\n\r\n    // @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint256 total) {\r\n        return avatars.length;\r\n    }\r\n\r\n    // @dev Owner initates the transfer of the token to another account.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public {\r\n        require(_owns(msg.sender, _tokenId));\r\n        require(_addressNotNull(_to));\r\n\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    // @dev Third-party initiates transfer of token from address _from to\r\n    // address _to.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public {\r\n        require(_owns(_from, _tokenId));\r\n        require(_approved(_to, _tokenId));\r\n        require(_addressNotNull(_to));\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n\r\n    // --- Private Functions --- // \r\n\r\n\r\n    // Safety check on _to address to prevent against an unexpected 0x0 default.\r\n    function _addressNotNull(address _to) private pure returns (bool) {\r\n        return _to != address(0);\r\n    }\r\n\r\n    // For checking approval of transfer for address _to\r\n    function _approved(address _to, uint256 _tokenId)\r\n    private \r\n    view \r\n    returns (bool) {\r\n        return avatarIndexToApproved[_tokenId] == _to;\r\n    }\r\n\r\n    // For creating Avatars.\r\n    function _createAvatar(\r\n        string _name,\r\n        address _owner, \r\n        uint256 _rank) \r\n        private {\r\n    \r\n    // Getting the startingPrice\r\n    uint256 _price;\r\n    if (_rank == 1) {\r\n        _price = startingPrice;\r\n    } else if (_rank == 2) {\r\n        _price = 2 * startingPrice;\r\n    } else if (_rank == 3) {\r\n        _price = SafeMath.mul(4, startingPrice);\r\n    } else if (_rank == 4) {\r\n        _price = SafeMath.mul(8, startingPrice);\r\n    } else if (_rank == 5) {\r\n        _price = SafeMath.mul(16, startingPrice);\r\n    } else if (_rank == 6) {\r\n        _price = SafeMath.mul(32, startingPrice);\r\n    } else if (_rank == 7) {\r\n        _price = SafeMath.mul(64, startingPrice);\r\n    } else if (_rank == 8) {\r\n        _price = SafeMath.mul(128, startingPrice);\r\n    } else if (_rank == 9) {\r\n        _price = SafeMath.mul(256, startingPrice);\r\n    } \r\n\r\n    Avatar memory _avatar = Avatar({name: _name});\r\n\r\n    uint256 newAvatarId = avatars.push(_avatar) - 1;\r\n\r\n    avatarIndexToPrice[newAvatarId] = _price;\r\n\r\n    // Fire event\r\n    Birth(newAvatarId, _name, _owner);\r\n\r\n    // Transfer token to the contract\r\n    _transfer(address(0), _owner, newAvatarId);\r\n    }\r\n\r\n    // @dev Checks for token ownership.\r\n    function _owns(address claimant, uint256 _tokenId) \r\n    private \r\n    view \r\n    returns (bool) {\r\n        return claimant == avatarIndexToOwner[_tokenId];\r\n    }\r\n\r\n    // @dev Pays out balance on contract\r\n    function _payout(address _to) private {\r\n        if (_to == address(0)) {\r\n            addressCEO.transfer(this.balance);\r\n        } else {\r\n            _to.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    // @dev Assigns ownership of a specific Avatar to an address.\r\n    function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n        ownershipTokenCount[_to]++;\r\n        avatarIndexToOwner[_tokenId] = _to;\r\n\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            delete avatarIndexToApproved[_tokenId];\r\n        }\r\n\r\n        // Fire event\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAvatar\",\"outputs\":[{\"name\":\"avatarName\",\"type\":\"string\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"avatarIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressCOO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressCEO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"avatars\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"avatarIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownershipTokenCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_rank\",\"type\":\"uint256\"}],\"name\":\"createAvatar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Avatarium","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://132bb6ef03c66b8468d0e98e27a0e1655f6472a9363549db4b0149094b5de620"}]}