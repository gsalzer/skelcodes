{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Job {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n\r\n    event MilestoneCreated(uint16 id, uint16 parent, string title);\r\n    event ProposalCreated(uint16 id, uint16 milestone, address contractor, uint256 amount);\r\n\r\n    ERC20 public token;\r\n    string public title; \r\n    string public description; \r\n    address public escrowAdmin;\r\n    address public customer;\r\n    \r\n    struct Proposal {\r\n        address contractor;             //Address of contractor\r\n        uint256 amount;                 //Proposed price\r\n        string description;             //Description of proposal\r\n    }\r\n    struct Milestone {\r\n        uint16 parent;                  //id of parent milestone\r\n        string title;                   //Milestone title\r\n        string description;             //Milestone description\r\n        uint64 deadline;                //Timestamp When work should be done\r\n        Proposal[] proposals;           //Proposals from contractors\r\n        int16 acceptedProposal;         //id of accepted proposal or -1 if no accepted\r\n        bool done;                      //Contractor marked milestone as done\r\n        bool approved;                  //Is approved by manager: general contractor or customer - for general milestones\r\n        bool customerApproved;          //Is approved by customer\r\n        bool requiresCustomerApproval;  //Is customer approval requireds\r\n        uint256 paid;                   //Amount which was already paid to contractor\r\n        uint256 allowance;              //Amount contractor allowed to spend to pay sub-contractors of this milestone\r\n    }\r\n    Milestone[] public milestones;      //Array of all milestones\r\n\r\n    modifier onlyCustomer(){\r\n        require(msg.sender == customer);\r\n        _;\r\n    }\r\n\r\n    constructor(ERC20 _token, string _title, string _description, address _escrowAdmin) public {\r\n        token = _token;\r\n        customer = msg.sender;\r\n        title = _title;\r\n        description = _description;\r\n        escrowAdmin = _escrowAdmin;\r\n\r\n        pushMilestone(0, \"\", \"\", 0, false);\r\n    }\r\n\r\n    function addGeneralMilestone(string _title, string _description, uint64 _deadline) onlyCustomer external{\r\n        require(_deadline > now);\r\n        pushMilestone(0, _title, _description, _deadline, false);\r\n    }\r\n    function addSubMilestone(uint16 _parent, string _title, string _description, uint64 _deadline, bool _requiresCustomerApproval) external {\r\n        require(_parent > 0 && _parent < milestones.length);\r\n        Milestone storage parent = milestones[_parent];\r\n        require(parent.acceptedProposal >= 0);\r\n        address generalContractor = parent.proposals[uint16(parent.acceptedProposal)].contractor;\r\n        assert(generalContractor!= address(0));\r\n        require(msg.sender == generalContractor);\r\n        pushMilestone(_parent, _title, _description, _deadline, _requiresCustomerApproval);\r\n    }\r\n\r\n    function addProposal(uint16 milestone, uint256 _amount, string _description) external {\r\n        require(milestone < milestones.length);\r\n        require(_amount > 0);\r\n        milestones[milestone].proposals.push(Proposal({\r\n            contractor: msg.sender,\r\n            amount: _amount,\r\n            description: _description\r\n        }));\r\n        emit ProposalCreated( uint16(milestones[milestone].proposals.length-1), milestone, msg.sender, _amount);\r\n    }\r\n\r\n    function getProposal(uint16 milestone, uint16 proposal) view public returns(address contractor, uint256 amount, string description){\r\n        require(milestone < milestones.length);\r\n        Milestone storage m = milestones[milestone];\r\n        require(proposal < m.proposals.length);\r\n        Proposal storage p = m.proposals[proposal];\r\n        return (p.contractor, p.amount, p.description);\r\n    }\r\n    function getProposalAmount(uint16 milestone, uint16 proposal) view public returns(uint256){\r\n        require(milestone < milestones.length);\r\n        Milestone storage m = milestones[milestone];\r\n        require(proposal < m.proposals.length);\r\n        Proposal storage p = m.proposals[proposal];\r\n        return p.amount;\r\n    }\r\n    function getProposalContractor(uint16 milestone, uint16 proposal) view public returns(address){\r\n        require(milestone < milestones.length);\r\n        Milestone storage m = milestones[milestone];\r\n        require(proposal < m.proposals.length);\r\n        Proposal storage p = m.proposals[proposal];\r\n        return p.contractor;\r\n    }\r\n\r\n\r\n    function confirmProposalAndTransferFunds(uint16 milestone, uint16 proposal) onlyCustomer external returns(bool){\r\n        require(milestone < milestones.length);\r\n        Milestone storage m = milestones[milestone];\r\n        require(m.deadline > now);\r\n\r\n        require(proposal < m.proposals.length);\r\n        Proposal storage p = m.proposals[proposal];\r\n        m.acceptedProposal = int16(proposal);\r\n\r\n        require(token.transferFrom(customer, address(this), p.amount));\r\n        return true;\r\n    }\r\n    function markDone(uint16 _milestone) external {\r\n        require(_milestone < milestones.length);\r\n        Milestone storage m = milestones[_milestone];\r\n        assert(m.acceptedProposal >= 0);\r\n        Proposal storage p = m.proposals[uint16(m.acceptedProposal)];        \r\n        require(msg.sender == p.contractor);\r\n        require(m.done == false);\r\n        m.done = true;\r\n    }\r\n    function approveAndPayout(uint16 _milestone) onlyCustomer external{\r\n        require(_milestone < milestones.length);\r\n        Milestone storage m = milestones[_milestone];\r\n        require(m.acceptedProposal >= 0);\r\n        //require(m.done);  //We do not require this right now\r\n        m.customerApproved = true;\r\n        Proposal storage p = m.proposals[uint16(m.acceptedProposal)];\r\n\r\n        m.paid = p.amount;\r\n        require(token.transfer(p.contractor, p.amount));\r\n    }   \r\n\r\n    function balance() view public returns(uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function pushMilestone(uint16 _parent, string _title, string _description, uint64 _deadline, bool _requiresCustomerApproval) private returns(uint16) {\r\n        uint16 id = uint16(milestones.length++);\r\n        milestones[id].parent = _parent;\r\n        milestones[id].title = _title;\r\n        milestones[id].description = _description;\r\n        milestones[id].deadline = _deadline;\r\n        milestones[id].acceptedProposal = -1;\r\n        milestones[id].requiresCustomerApproval = _requiresCustomerApproval;\r\n        emit MilestoneCreated(id, _parent, _title);\r\n        return id;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"customer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"title\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_milestone\",\"type\":\"uint16\"}],\"name\":\"approveAndPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"milestone\",\"type\":\"uint16\"},{\"name\":\"proposal\",\"type\":\"uint16\"}],\"name\":\"getProposal\",\"outputs\":[{\"name\":\"contractor\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"milestone\",\"type\":\"uint16\"},{\"name\":\"proposal\",\"type\":\"uint16\"}],\"name\":\"getProposalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrowAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_deadline\",\"type\":\"uint64\"}],\"name\":\"addGeneralMilestone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"milestone\",\"type\":\"uint16\"},{\"name\":\"proposal\",\"type\":\"uint16\"}],\"name\":\"confirmProposalAndTransferFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"milestone\",\"type\":\"uint16\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"addProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"milestone\",\"type\":\"uint16\"},{\"name\":\"proposal\",\"type\":\"uint16\"}],\"name\":\"getProposalContractor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_milestone\",\"type\":\"uint16\"}],\"name\":\"markDone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_parent\",\"type\":\"uint16\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_deadline\",\"type\":\"uint64\"},{\"name\":\"_requiresCustomerApproval\",\"type\":\"bool\"}],\"name\":\"addSubMilestone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"milestones\",\"outputs\":[{\"name\":\"parent\",\"type\":\"uint16\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"deadline\",\"type\":\"uint64\"},{\"name\":\"acceptedProposal\",\"type\":\"int16\"},{\"name\":\"done\",\"type\":\"bool\"},{\"name\":\"approved\",\"type\":\"bool\"},{\"name\":\"customerApproved\",\"type\":\"bool\"},{\"name\":\"requiresCustomerApproval\",\"type\":\"bool\"},{\"name\":\"paid\",\"type\":\"uint256\"},{\"name\":\"allowance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_escrowAdmin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"parent\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"title\",\"type\":\"string\"}],\"name\":\"MilestoneCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"milestone\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"contractor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"}]","ContractName":"Job","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000df347911910b6c9a4286ba8e2ee5ea4a39eb2134000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000d5c63f784a9d515d24d10cd4510b609b81f7a87400000000000000000000000000000000000000000000000000000000000000225465736c61204d6f64656c2033204368617267657220496e7374616c6c6174696f6e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://f04d96049f83d0021b7fa4db16e29d76bacd05d368375c151bc61b09598dd75e"}]}