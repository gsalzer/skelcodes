{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/*\r\n* ====================================*\r\n*  _____   ____    ____   _______     *\r\n* |  ___| / __ \\  |    \\ |__   __|    * \r\n* | |___ | |__| | |    /    | |       *\r\n* |  ___||  __  | | |\\ \\    | |       *\r\n* | |    | |  | | | | \\ \\   | |       *\r\n* |_|    |_|  |_| |_|  \\_\\  |_|       *\r\n* ====================================*\r\n* \r\n* Freedom Around Revolutionary Technology\r\n*\r\n* Changing the humanitarian world while having fun!\r\n*\r\n* This source code is THE contract the crypto-community \r\n* deserves. It was cloned from POOH and perfected by the genius mind of \r\n* Kenneth Pacheco using ideas from the proof crypto-community.\r\n*\r\n*  \r\n*    Auditors:\r\n*   \r\n*   Etherguy -------- 5/4/18\r\n*   Sensei Kevlar --- 5/4/18\r\n*   Sixophrenia ----- 5/4/18\r\n*   ccashwell ------- 5/4/18\r\n*   \r\n*   \r\n*   \r\n* \r\n*/\r\n\r\ncontract FART {\r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n    // only people with tokens\r\n    modifier onlyTokenHolders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n    \r\n    // only non-founders\r\n    modifier onlyNonFounders() {\r\n        require(!foundingFARTers_[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    // only people with profits\r\n    modifier onlyStronghands() {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n    \r\n    // ensures that the contract is only open to the public when the founders are ready for it to be\r\n    modifier areWeLive(uint256 _amountOfEthereum){\r\n        address _customerAddress = msg.sender;\r\n        \r\n        // are we open to the public?\r\n        if( onlyFounders && ((totalEthereumBalance() - _amountOfEthereum) <= preLiveTeamFoundersMaxPurchase_ )){\r\n            require(\r\n                // is the customer in the ambassador list?\r\n                foundingFARTers_[_customerAddress] == true &&\r\n                \r\n                // does the customer purchase exceed the max quota needed to send contract live?\r\n                (contractQuotaToGoLive_[_customerAddress] + _amountOfEthereum) <= preLiveIndividualFoundersMaxPurchase_\r\n                \r\n            );\r\n            \r\n            // update the accumulated quota    \r\n            contractQuotaToGoLive_[_customerAddress] = SafeMath.add(contractQuotaToGoLive_[_customerAddress], _amountOfEthereum);\r\n        \r\n            // execute\r\n            _;\r\n        } else {\r\n            // in case the ether count drops low, the ambassador phase won't reinitiate\r\n            onlyFounders = false;\r\n            _;    \r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy\r\n    );\r\n    \r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 ethereumEarned\r\n    );\r\n    \r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n    \r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n    \r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n    \r\n    \r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"FART\";\r\n    string public symbol = \"FART\";\r\n    uint8 constant public decimals = 18;\r\n    uint8 constant internal dividendFee_ = 7; // roughly 15% = (5% to charity + 10% divs)\r\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\r\n    uint256 constant internal magnitude = 2**64;\r\n    \r\n    // Referral link requirement (20 tokens instead of 5 bacause this game is mainly for charity)\r\n    uint256 public referralLinkMinimum = 20e18; \r\n    \r\n    // founders program (Founders initially put in 1 ETH and can add more later when contract is live)\r\n    mapping(address => bool) internal foundingFARTers_;\r\n    uint256 constant internal preLiveIndividualFoundersMaxPurchase_ = 2 ether; // 2 ETH max for me so I can make sure to break the 1 ETH threshold.\r\n    uint256 constant internal preLiveTeamFoundersMaxPurchase_ = 1 ether; // 1 ETH threshold to go live\r\n    \r\n    \r\n    \r\n   /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n    // amount of shares for each address (scaled number)\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal referralBalance_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    mapping(address => uint256) internal contractQuotaToGoLive_;\r\n    uint256 internal tokenSupply_ = 0;\r\n    uint256 internal profitPerShare_;\r\n    \r\n    // administrator list (see above on what they can do)\r\n    mapping(bytes32 => bool) public administrators;\r\n    \r\n    // when this is set to true, only founders can purchase tokens (this prevents an errored contract from being live to the public)\r\n    bool public onlyFounders = true;\r\n    \r\n\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n    /*\r\n    * -- APPLICATION ENTRY POINTS --  \r\n    */\r\n    function FART()\r\n        public\r\n    {\r\n        \r\n        //No admin! True trust-less contracts don't have the ability to be alteredd! ('This is HUUUUUUUUUUGE!' - Donald Trump)\r\n        \r\n        \r\n        // add the founders here. Founders cannot sell or transfer FART tokens, \r\n        // thereby making the token increase in value over time\r\n        foundingFARTers_[0x7e474fe5Cfb720804860215f407111183cbc2f85] = true; //Kenneth Pacheco    - https://www.linkedin.com/in/kennethpacheco/\r\n    }\r\n    \r\n     \r\n    /**\r\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\r\n     */\r\n    function buy(address _referredBy, address _charity)\r\n        public\r\n        payable\r\n        returns(uint256)\r\n    {\r\n        purchaseTokens(msg.value, _referredBy, _charity);\r\n    }\r\n    \r\n    /**\r\n     * Fallback function to handle ethereum that was sent straight to the contract\r\n     */\r\n    function()\r\n        payable\r\n        public\r\n    {\r\n        purchaseTokens(msg.value, 0x0, 0x0);\r\n    }\r\n    \r\n    /**\r\n     * Converts all of caller's dividends to tokens.\r\n     */\r\n    function reinvest()\r\n        onlyStronghands()//  <------Hey! We know this term!\r\n        public\r\n    {\r\n        // fetch dividends\r\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\r\n        \r\n        // pay out the dividends virtually\r\n        address _customerAddress = msg.sender;\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        \r\n        // retrieve ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        \r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n        uint256 _tokens = purchaseTokens(_dividends, 0x0, 0x0);\r\n        \r\n        // fire event\r\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n    \r\n    /**\r\n     * Alias of sell() and withdraw().\r\n     */\r\n    function eject()\r\n        public\r\n    {\r\n        // get token count for caller & sell them all\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if(_tokens > 0) sell(_tokens, 0x0);\r\n        \r\n        // get out now\r\n        withdraw();\r\n    }\r\n\r\n    /**\r\n     * Withdraws all of the callers earnings.\r\n     */\r\n    function withdraw()\r\n        onlyStronghands()\r\n        public\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\r\n        \r\n        // update dividend tracker\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        \r\n        // add ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        \r\n        // lambo delivery service\r\n        _customerAddress.transfer(_dividends);\r\n        \r\n        // fire event\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n    \r\n \r\n    \r\n    /**\r\n     * Liquifies tokens to ethereum.\r\n     */\r\n    function sell(uint256 _amountOfTokens, address _charity)\r\n        onlyTokenHolders() //Can't sell what you don't have\r\n        onlyNonFounders() //Founders can't sell tokens\r\n        public {\r\n            // setup data\r\n            address _customerAddress = msg.sender;\r\n            require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n            uint256 _tokens = _amountOfTokens;\r\n            uint256 _ethereum = tokensToEthereum_(_tokens);\r\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n            uint256 _charityDividends = 0;\r\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n            \r\n            if(_charity != 0x0000000000000000000000000000000000000000 && _charity != _customerAddress)//if not, it's an eject-call with no charity address\r\n            {     _charityDividends = SafeMath.div(_dividends, 3); // 1/3 of divs go to charity (5%)\r\n                 _dividends = SafeMath.sub(_dividends, _charityDividends); // 2/3 of divs go to everyone (10%)\r\n            }\r\n           \r\n            // burn the sold tokens\r\n            tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n            tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n            \r\n            // update dividends tracker\r\n            int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\r\n            payoutsTo_[_customerAddress] -= _updatedPayouts;       \r\n            \r\n            // dividing by zero is a bad idea\r\n            if (tokenSupply_ > 0) {\r\n                // update the amount of dividends per token\r\n                profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n            }\r\n            \r\n            // fire event\r\n            emit onTokenSell(_customerAddress, _tokens, _taxedEthereum);\r\n            if(_charityDividends > 0) {\r\n                //fire event to send to charity\r\n                _charity.transfer(_charityDividends);\r\n            }\r\n        }\r\n    \r\n    \r\n    /**\r\n     * Transfer tokens from the caller to a new holder.\r\n     * No fee to transfer because I hate doing math.\r\n     */\r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        onlyTokenHolders() // Can't tranfer what you don't have\r\n        onlyNonFounders() // Founders cannot transfer their tokens to be able to sell them\r\n        public\r\n        returns(bool) {\r\n        \r\n            // setup\r\n            address _customerAddress = msg.sender;\r\n            \r\n            // make sure we have the requested tokens\r\n            // also disables transfers until ambassador phase is over\r\n            // ( we dont want whale premines )\r\n            require(!onlyFounders && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n            \r\n            // withdraw all outstanding dividends first\r\n            if(myDividends(true) > 0) withdraw();\r\n    \r\n            // exchange tokens\r\n            tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n            tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\r\n            \r\n            // fire event\r\n            emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\r\n            \r\n            // ERC20\r\n            return true;\r\n           \r\n        }\r\n    \r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    /**\r\n     * Method to view the current Ethereum stored in the contract\r\n     * Example: totalEthereumBalance()\r\n     */\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint) {\r\n        return address (this).balance;\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the total token supply.\r\n     */\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns(uint256) {\r\n        return tokenSupply_;\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens()\r\n        public\r\n        view\r\n        returns(uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the dividends owned by the caller.\r\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\r\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\r\n     * But in the internal calculations, we want them separate. \r\n     */ \r\n    function myDividends(bool _includeReferralBonus) \r\n        public \r\n        view \r\n        returns(uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256) {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the dividend balance of any single address.\r\n     */\r\n    function dividendsOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256) {\r\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n    \r\n    /**\r\n     * Return the buy price of 1 individual token.\r\n     */\r\n    function sellPrice() \r\n        public \r\n        view \r\n        returns(uint256) {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\r\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function buyPrice() \r\n        public \r\n        view \r\n        returns(uint256) {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\r\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n     */\r\n    function calculateTokensReceived(uint256 _ethereumToSpend) \r\n        public \r\n        view \r\n        returns(uint256) {\r\n        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        \r\n        return _amountOfTokens;\r\n    }\r\n    \r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n     */\r\n    function calculateEthereumReceived(uint256 _tokensToSell) \r\n        public \r\n        view \r\n        returns(uint256) {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\r\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        return _taxedEthereum;\r\n    }\r\n    \r\n    \r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n     function purchaseTokens(uint256 _incomingEthereum, address _referredBy, address _charity)\r\n        areWeLive(_incomingEthereum)\r\n        internal\r\n        returns(uint256) {\r\n        // data setup\r\n       \r\n        uint256 _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\r\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\r\n        uint256 _dividends = SafeMath.sub(SafeMath.sub(_undividedDividends, _referralBonus), _referralBonus);  //subrtacting referral bonus and charity divs\r\n        uint256 _amountOfTokens = ethereumToTokens_(SafeMath.sub(_incomingEthereum, _undividedDividends));\r\n        uint256 _fee = _dividends * magnitude;\r\n        bool charity = false;\r\n \r\n        // no point in continuing execution if OP is a poorfag russian hacker\r\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\r\n        // (or hackers)\r\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n        \r\n        // is the user referred by a masternode?\r\n        if(\r\n            // is this a referred purchase?\r\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\r\n\r\n            // no cheating!\r\n            _referredBy != msg.sender &&\r\n            \r\n            // does the referrer have at least X whole tokens?\r\n            // i.e is the referrer a godly chad masternode\r\n            tokenBalanceLedger_[_referredBy] >= referralLinkMinimum\r\n        ){\r\n            // wealth redistribution\r\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\r\n        } else {\r\n            // no ref purchase\r\n            // add the referral bonus back to the global dividends cake\r\n            _dividends = SafeMath.add(_dividends, SafeMath.div(_undividedDividends, 3));\r\n            _fee = _dividends * magnitude;\r\n        }\r\n        \r\n        //Let's check for foul play with the charity address\r\n        if(\r\n            // is this a referred purchase?\r\n            _charity != 0x0000000000000000000000000000000000000000 &&\r\n\r\n            // no cheating!\r\n            _charity != msg.sender \r\n        ){\r\n            // charity redistribution\r\n            charity = true;\r\n          \r\n            \r\n            \r\n        } else {\r\n            // no ref purchase\r\n            // add the referral bonus back to the global dividends\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n        \r\n        // we can't give people infinite ethereum\r\n        if(tokenSupply_ > 0){\r\n            \r\n            // add tokens to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n \r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n            \r\n            // calculate the amount of tokens the customer receives over his purchase \r\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\r\n        \r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n        \r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], _amountOfTokens);\r\n        \r\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\r\n        //really i know you think you do but you don't\r\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\r\n        payoutsTo_[msg.sender] += _updatedPayouts;\r\n        \r\n        \r\n        // fire event\r\n        emit onTokenPurchase(msg.sender, _incomingEthereum, _amountOfTokens, _referredBy);\r\n        if(charity) {\r\n         // fire event to send charity proceeds\r\n        _charity.transfer(_referralBonus);\r\n        }\r\n        \r\n        return _amountOfTokens;\r\n    }\r\n    \r\n\r\n    /**\r\n     * Calculate Token price based on an amount of incoming ethereum\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function ethereumToTokens_(uint256 _ethereum)\r\n        internal\r\n        view\r\n        returns(uint256) {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived = \r\n         (\r\n            (\r\n                // underflow attempts BTFO\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            (_tokenPriceInitial**2)\r\n                            +\r\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\r\n                            +\r\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\r\n                            +\r\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\r\n                        )\r\n                    ), _tokenPriceInitial\r\n                )\r\n            )/(tokenPriceIncremental_)\r\n        )-(tokenSupply_)\r\n        ;\r\n  \r\n        return _tokensReceived;\r\n    }\r\n    \r\n    /**\r\n     * Calculate token sell value.\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n     function tokensToEthereum_(uint256 _tokens)\r\n        internal\r\n        view\r\n        returns(uint256) {\r\n\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\r\n        uint256 _etherReceived =\r\n        (\r\n            // underflow attempts BTFO\r\n            SafeMath.sub(\r\n                (\r\n                    (\r\n                        (\r\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\r\n                        )-tokenPriceIncremental_\r\n                    )*(tokens_ - 1e18)\r\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\r\n            )\r\n        /1e18);\r\n        return _etherReceived;\r\n    }\r\n    \r\n    \r\n    //This is where all your gas goes, sorry\r\n    //Not sorry, you probably only paid 1 gwei\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n        \r\n        // If you have read all the way to here, thank you.  You are one of the good players that does their OWN resarch! Way to go!\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"},{\"name\":\"_charity\",\"type\":\"address\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"eject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlyFounders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"},{\"name\":\"_charity\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralLinkMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"FART","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://68fb94518f9fce8e374fa33e057b42c7f033797f6b13f2375400b2ccbe984cbc"}]}