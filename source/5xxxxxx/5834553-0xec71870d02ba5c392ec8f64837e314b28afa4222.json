{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\ncontract owned {\r\n    address public owner;\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\ncontract BillionRewardsToken is owned {\r\n    string public constant name = \"BillionRewardsToken\";\r\n    string public constant symbol = \"BILREW\";\r\n    uint public constant decimals = 8;\r\n    uint constant ONETOKEN = 10 ** uint(decimals);\r\n    uint constant MILLION = 1000000; \r\n    uint public totalSupply;\r\n    uint public Devs_Supply;\r\n    uint public Bounty_Supply;\r\n    bool public Dev_TokenReleased = false;                     \r\n    uint public Token_ExchangeValue;                             \r\n    bool public Accept_Payment;\r\n    bool public Token_Unlocked;\r\n    uint public Eth_Collected;\r\n    uint public Sold_Token;\r\n    uint public Burnt_Token;\r\n    address public etherWallet = 0xacEF4B8808a78BF70dbC39B8A2274d8BbfF2dB28;\r\n    constructor() public {\r\n        Accept_Payment = true;\r\n        Token_Unlocked = true;\r\n        Token_ExchangeValue = 1999995 * ONETOKEN;\r\n        totalSupply = 550000 * MILLION * ONETOKEN;                        \r\n        Devs_Supply = 10000 * MILLION * ONETOKEN;                       \r\n        Bounty_Supply = 40000 * MILLION * ONETOKEN;               \r\n        totalSupply -= Devs_Supply + Bounty_Supply; \r\n        balanceOf[msg.sender] = totalSupply;                            \r\n    }\r\n    \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => uint256) public selfdrop_cap;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    \r\n    modifier notLocked{\r\n        require(Token_Unlocked == true || msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier buyingToken{\r\n        require(Accept_Payment == true);\r\n        require(msg.sender != owner);\r\n        require(selfdrop_cap[msg.sender] + msg.value <= .1 ether);\r\n        _;\r\n    }\r\n    function unlockDevSupply() onlyOwner public {\r\n        require(now > 1640995200);                              \r\n        require(Dev_TokenReleased == false);       \r\n        balanceOf[owner] += Devs_Supply;\r\n        totalSupply += Devs_Supply;          \r\n        emit Transfer(0, this, Devs_Supply);\r\n        emit Transfer(this, owner, Devs_Supply);\r\n        Devs_Supply = 0;                                         \r\n        Dev_TokenReleased = true; \r\n    }\r\n    function send_bounty_token(address target, uint256 reward) onlyOwner public {\r\n        require(Bounty_Supply >= reward);\r\n        balanceOf[target] += reward;\r\n        totalSupply += reward;\r\n        emit Transfer(0, this, reward);\r\n        emit Transfer(this, target, reward);\r\n        Bounty_Supply -= reward;\r\n    }\r\n    function mint(address target, uint256 token) onlyOwner public {\r\n        balanceOf[target] += token;\r\n        totalSupply += token;\r\n        emit Transfer(0, this, token);\r\n        emit Transfer(this, target, token);\r\n    }\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   \r\n        balanceOf[msg.sender] -= _value;            \r\n        totalSupply -= _value;\r\n        Burnt_Token += _value;\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n    function _transferBilrew(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n    function transfer(address _to, uint256 _value) notLocked public {\r\n        _transferBilrew(msg.sender, _to, _value);\r\n    }\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != 0x0);                               \r\n        require (balanceOf[_from] >= _value); \r\n        require (balanceOf[_to] + _value >= balanceOf[_to]);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n    function() payable buyingToken public {\r\n        require(msg.value > 0 ether);\r\n        require(msg.value <= .1 ether);\r\n        uint sendToken = (msg.value / .01 ether) * Token_ExchangeValue;\r\n        selfdrop_cap[msg.sender] += msg.value;\r\n        _transfer(owner, msg.sender, sendToken);\r\n        uint returnBonus = computeReturnBonus(msg.value);\r\n        if(returnBonus != 0)\r\n        {\r\n            msg.sender.transfer(returnBonus);\r\n        }\r\n        etherWallet.transfer(this.balance);\r\n        Eth_Collected += msg.value - returnBonus;\r\n        Sold_Token += sendToken;          \r\n    }\r\n    function computeReturnBonus(uint256 amount) internal constant returns (uint256) {\r\n        uint256 bonus = 0;\r\n        if(amount >= .01 ether && amount < .025 ether)\r\n        {\r\n            bonus = (amount * 10) / 100;\r\n        }\r\n        else if(amount >= .025 ether && amount < .05 ether)\r\n        {\r\n            bonus = (amount * 25) / 100;\r\n        }\r\n        else  if(amount >= .05 ether && amount < .1 ether)\r\n        {\r\n            bonus = (amount * 50) / 100;\r\n        }\r\n        else if (amount >= .1 ether)\r\n        {\r\n            bonus = (amount * 70) / 100;\r\n        }\r\n        return bonus;\r\n    }\r\n    function withdrawEther() onlyOwner public{\r\n        owner.transfer(this.balance);\r\n    }\r\n    \r\n    function setAcceptPayment(bool status) onlyOwner public {\r\n        Accept_Payment = status;\r\n    }\r\n    function setTokenTransfer(bool status) onlyOwner public {\r\n        Token_Unlocked = status;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"selfdrop_cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"send_bounty_token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_Unlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_ExchangeValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Dev_TokenReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Bounty_Supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockDevSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAcceptPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Sold_Token\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Eth_Collected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Devs_Supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Burnt_Token\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Accept_Payment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"BillionRewardsToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2b79e616afdb222e4a250463ee5ce5940358fe5f5633e0c1aea370e1fb5ba5d3"}]}