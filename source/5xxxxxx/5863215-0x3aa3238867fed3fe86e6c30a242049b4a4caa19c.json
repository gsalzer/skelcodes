{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n// The contract for the locaToken instance\r\ncontract locaToken {\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool);\r\n    function allowance(address _owner, address _spender) public view returns (uint);\r\n}\r\n\r\n// Safemath library  \r\nlibrary SafeMath {\r\n    function sub(uint _base, uint _value)\r\n    internal\r\n    pure\r\n    returns (uint) {\r\n        assert(_value <= _base);\r\n        return _base - _value;\r\n    }\r\n\r\n    function add(uint _base, uint _value)\r\n    internal\r\n    pure\r\n    returns (uint _ret) {\r\n        _ret = _base + _value;\r\n        assert(_ret >= _base);\r\n    }\r\n\r\n    function div(uint _base, uint _value)\r\n    internal\r\n    pure\r\n    returns (uint) {\r\n        assert(_value > 0 && (_base % _value) == 0);\r\n        return _base / _value;\r\n    }\r\n\r\n    function mul(uint _base, uint _value)\r\n    internal\r\n    pure\r\n    returns (uint _ret) {\r\n        _ret = _base * _value;\r\n        assert(0 == _base || _ret / _base == _value);\r\n    }\r\n}\r\n\r\n\r\n\r\n// The donation contract\r\n\r\ncontract Donation  {\r\n    using SafeMath for uint;\r\n    // instance the locatoken\r\n    locaToken private token = locaToken(0xcDf9bAff52117711B33210AdE38f1180CFC003ed);\r\n    address  private owner;\r\n\r\n    uint private _tokenGift;\r\n    // every donation is logged in the Blockchain\r\n    event Donated(address indexed buyer, uint tokens);\r\n     // Available tokens for donation\r\n    uint private _tokenDonation;\r\n  \r\n\r\n    // constructor to set the contract owner\r\n    constructor() public {\r\n\r\n        owner = msg.sender; \r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    // Allow the donation to start\r\n    modifier allowStart() {\r\n        require(_tokenDonation == 0);\r\n        _;\r\n    }\r\n    // There have at least to be 25000000000 Loca tokens in balance to allow a valid donation\r\n    modifier allowDonation(){\r\n        require(_tokenDonation >= 25000000000);\r\n        _;\r\n    }\r\n    // Donation amount has to be between 0.02 and 0.03 ETH\r\n    // regardless the donation amount,  250 LOCAs will be send \r\n    modifier validDonation {\r\n        require (msg.value >= 20000000000000000 && msg.value <= 30000000000000000);                                                                                        \r\n        _;\r\n    }\r\n\r\n\r\n    function startDonation() public onlyOwner allowStart returns (uint) {\r\n\r\n        _tokenDonation = token.allowance(owner, address(this));\r\n    }\r\n\r\n\r\n    function DonateEther() public allowDonation validDonation payable {\r\n\r\n       //  _tokensold = msg.value.mul(_convrate).div(Devider);\r\n        _tokenGift = 25000000000;\r\n        _tokenDonation = _tokenDonation.sub(_tokenGift);\r\n        \r\n        emit Donated(msg.sender, _tokenGift);\r\n\r\n        token.transferFrom(owner, msg.sender, _tokenGift);\r\n\r\n        \r\n\r\n    }\r\n\r\n    // Falsely send Ether will be reverted\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n\r\n    function TokenBalance () public view returns(uint){\r\n\r\n        return _tokenDonation;\r\n\r\n    }\r\n\r\n    // Withdraw Ether from the contract\r\n    function getDonation(address _to) public onlyOwner {\r\n       \r\n        _to.transfer(address(this).balance);\r\n    \r\n    } \r\n\r\n    function CloseDonation() public onlyOwner {\r\n\r\n        selfdestruct(owner);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getDonation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CloseDonation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startDonation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"DonateEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Donated\",\"type\":\"event\"}]","ContractName":"Donation","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://29a0c2cf1ea5d99ef262dfd9a1e41e6c9536074c0e4cb70237c93eafe44951da"}]}