{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n* Send 0.00025 to guess a random number from 0-9. Winner gets 90% of the pot.\r\n* 10% goes to the house. Note: house is supplying the initial pot so cry me a \r\n* river.\r\n*/\r\n\r\ncontract LuckyNumber {\r\n\r\n    address owner;\r\n    bool contractIsAlive = true;\r\n    \r\n    //modifier requiring contract to be live. Set bool to false to kill contract\r\n    modifier live() {\r\n        require(contractIsAlive);\r\n        _;\r\n    }\r\n\r\n    // The constructor. \r\n    function LuckyNumber() public { \r\n        owner = msg.sender;\r\n    }\r\n\r\n    //Used for the owner to add money to the pot. \r\n    function addBalance() public payable live {\r\n    }\r\n    \r\n\r\n    //explicit getter for \"balance\"\r\n    function getBalance() view external live returns (uint) {\r\n        return this.balance;\r\n    }\r\n\r\n    //allows the owner to abort the contract and retrieve all funds\r\n    function kill() external live { \r\n        if (msg.sender == owner) {        \r\n            owner.transfer(this.balance);\r\n            contractIsAlive = false;\r\n            }\r\n    }\r\n\r\n    /**\r\n     *Take a guess. Transfer 0.00025 ETH to take a guess. 1/10 chance you are \r\n     * correct. If you win, the function will transfer you 90% of the balance. \r\n     * It will then kill the contract and return the remainder to the owner.\r\n     */\r\n    function takeAGuess(uint8 _myGuess) public payable live {\r\n        require(msg.value == 0.00025 ether);\r\n         uint8 winningNumber = uint8(keccak256(now, owner)) % 10;\r\n        if (_myGuess == winningNumber) {\r\n            msg.sender.transfer((this.balance*9)/10);\r\n            owner.transfer(this.balance);\r\n            contractIsAlive = false;   \r\n        }\r\n    }\r\n\r\n\r\n}//end of contract","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_myGuess\",\"type\":\"uint8\"}],\"name\":\"takeAGuess\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"LuckyNumber","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://63296f20af655d01e416dd3de9c8bf7760787e6e8d34daad6c40e428e74053e2"}]}