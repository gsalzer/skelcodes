{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ninterface LandManagementInterface {\r\n    function ownerAddress() external view returns (address);\r\n    function managerAddress() external view returns (address);\r\n    function communityAddress() external view returns (address);\r\n    function dividendManagerAddress() external view returns (address);\r\n    function walletAddress() external view returns (address);\r\n    //    function unicornTokenAddress() external view returns (address);\r\n    function candyToken() external view returns (address);\r\n    function megaCandyToken() external view returns (address);\r\n    function userRankAddress() external view returns (address);\r\n    function candyLandAddress() external view returns (address);\r\n    function candyLandSaleAddress() external view returns (address);\r\n\r\n    function isUnicornContract(address _unicornContractAddress) external view returns (bool);\r\n\r\n    function paused() external view returns (bool);\r\n    function presaleOpen() external view returns (bool);\r\n    function firstRankForFree() external view returns (bool);\r\n\r\n    function ethLandSaleOpen() external view returns (bool);\r\n\r\n    function landPriceWei() external view returns (uint);\r\n    function landPriceCandy() external view returns (uint);\r\n\r\n    function registerInit(address _contract) external;\r\n}\r\n\r\n\r\n\r\ncontract LandAccessControl {\r\n\r\n    LandManagementInterface public landManagement;\r\n\r\n    function LandAccessControl(address _landManagementAddress) public {\r\n        landManagement = LandManagementInterface(_landManagementAddress);\r\n        landManagement.registerInit(this);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == landManagement.ownerAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == landManagement.managerAddress());\r\n        _;\r\n    }\r\n\r\n    modifier onlyCommunity() {\r\n        require(msg.sender == landManagement.communityAddress());\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!landManagement.paused());\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(landManagement.paused());\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhileEthSaleOpen {\r\n        require(landManagement.ethLandSaleOpen());\r\n        _;\r\n    }\r\n\r\n    modifier onlyLandManagement() {\r\n        require(msg.sender == address(landManagement));\r\n        _;\r\n    }\r\n\r\n    modifier onlyUnicornContract() {\r\n        require(landManagement.isUnicornContract(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyCandyLand() {\r\n        require(msg.sender == address(landManagement.candyLandAddress()));\r\n        _;\r\n    }\r\n\r\n\r\n    modifier whilePresaleOpen() {\r\n        require(landManagement.presaleOpen());\r\n        _;\r\n    }\r\n\r\n    function isGamePaused() external view returns (bool) {\r\n        return landManagement.paused();\r\n    }\r\n}\r\n\r\n\r\ncontract CanReceiveApproval {\r\n    event ReceiveApproval(address from, uint256 value, address token);\r\n\r\n    mapping (bytes4 => bool) allowedFuncs;\r\n\r\n    modifier onlyPayloadSize(uint numwords) {\r\n        assert(msg.data.length >= numwords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n    modifier onlySelf(){\r\n        require(msg.sender == address(this));\r\n        _;\r\n    }\r\n\r\n\r\n    function bytesToBytes4(bytes b) internal pure returns (bytes4 out) {\r\n        for (uint i = 0; i < 4; i++) {\r\n            out |= bytes4(b[i] & 0xFF) >> (i << 3);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract UserRank is LandAccessControl, CanReceiveApproval {\r\n    using SafeMath for uint256;\r\n\r\n    ERC20 public candyToken;\r\n\r\n    struct Rank{\r\n        uint landLimit;\r\n        uint priceCandy;\r\n        uint priceEth;\r\n        string title;\r\n    }\r\n\r\n    mapping (uint => Rank) public ranks;\r\n    uint public ranksCount = 0;\r\n\r\n    mapping (address => uint) public userRanks;\r\n\r\n    event TokensTransferred(address wallet, uint value);\r\n    event NewRankAdded(uint index, uint _landLimit, string _title, uint _priceCandy, uint _priceEth);\r\n    event RankChange(uint index, uint priceCandy, uint priceEth);\r\n    event BuyNextRank(address indexed owner, uint index);\r\n    event BuyRank(address indexed owner, uint index);\r\n\r\n\r\n\r\n    function UserRank(address _landManagementAddress) LandAccessControl(_landManagementAddress) public {\r\n\r\n        allowedFuncs[bytes4(keccak256(\"_receiveBuyNextRank(address)\"))] = true;\r\n        allowedFuncs[bytes4(keccak256(\"_receiveBuyRank(address,uint256)\"))] = true;\r\n        //3350000000000000 for candy\r\n\r\n        addRank(1,   36000000000000000000,   120600000000000000,\"Cryptolord\");\r\n        addRank(5,   144000000000000000000,  482400000000000000,\"Forklord\");\r\n        addRank(10,  180000000000000000000,  603000000000000000,\"Decentralord\");\r\n        addRank(20,  360000000000000000000,  1206000000000000000,\"Technomaster\");\r\n        addRank(50,  1080000000000000000000, 3618000000000000000,\"Bitmaster\");\r\n        addRank(100, 1800000000000000000000, 6030000000000000000,\"Megamaster\");\r\n        addRank(200, 3600000000000000000000, 12060000000000000000,\"Cyberduke\");\r\n        addRank(400, 7200000000000000000000, 24120000000000000000,\"Nanoprince\");\r\n        addRank(650, 9000000000000000000000, 30150000000000000000,\"Hyperprince\");\r\n        addRank(1000,12600000000000000000000,42210000000000000000,\"Ethercaesar\");\r\n\r\n\r\n    }\r\n\r\n    function init() onlyLandManagement whenPaused external {\r\n        candyToken = ERC20(landManagement.candyToken());\r\n    }\r\n\r\n\r\n\r\n    function addRank(uint _landLimit, uint _priceCandy, uint _priceEth, string _title) onlyOwner public  {\r\n        //стоимость добавляемого должна быть не ниже предыдущего\r\n        require(ranks[ranksCount].priceCandy <= _priceCandy && ranks[ranksCount].priceEth <= _priceEth);\r\n        ranksCount++;\r\n        Rank storage r = ranks[ranksCount];\r\n\r\n        r.landLimit = _landLimit;\r\n        r.priceCandy = _priceCandy;\r\n        r.priceEth = _priceEth;\r\n        r.title = _title;\r\n        emit NewRankAdded(ranksCount, _landLimit,_title,_priceCandy,_priceEth);\r\n    }\r\n\r\n\r\n    function editRank(uint _index, uint _priceCandy, uint _priceEth) onlyManager public  {\r\n        require(_index > 0 && _index <= ranksCount);\r\n        if (_index > 1) {\r\n            require(ranks[_index - 1].priceCandy <= _priceCandy && ranks[_index - 1].priceEth <= _priceEth);\r\n        }\r\n        if (_index < ranksCount) {\r\n            require(ranks[_index + 1].priceCandy >= _priceCandy && ranks[_index + 1].priceEth >= _priceEth);\r\n        }\r\n\r\n        Rank storage r = ranks[_index];\r\n        r.priceCandy = _priceCandy;\r\n        r.priceEth = _priceEth;\r\n        emit RankChange(_index, _priceCandy, _priceEth);\r\n    }\r\n\r\n    function buyNextRank() public {\r\n        _buyNextRank(msg.sender);\r\n    }\r\n\r\n    function _receiveBuyNextRank(address _beneficiary) onlySelf onlyPayloadSize(1) public {\r\n        _buyNextRank(_beneficiary);\r\n    }\r\n\r\n    function buyRank(uint _index) public {\r\n        _buyRank(msg.sender, _index);\r\n    }\r\n\r\n    function _receiveBuyRank(address _beneficiary, uint _index) onlySelf onlyPayloadSize(2) public {\r\n        _buyRank(_beneficiary, _index);\r\n    }\r\n\r\n\r\n    function _buyNextRank(address _beneficiary) internal {\r\n        uint _index = userRanks[_beneficiary] + 1;\r\n        require(_index <= ranksCount);\r\n\r\n        require(candyToken.transferFrom(_beneficiary, this, ranks[_index].priceCandy));\r\n        userRanks[_beneficiary] = _index;\r\n        emit BuyNextRank(_beneficiary, _index);\r\n    }\r\n\r\n\r\n    function _buyRank(address _beneficiary, uint _index) internal {\r\n        require(_index <= ranksCount);\r\n        require(userRanks[_beneficiary] < _index);\r\n\r\n        uint fullPrice = _getPrice(userRanks[_beneficiary], _index);\r\n\r\n        require(candyToken.transferFrom(_beneficiary, this, fullPrice));\r\n        userRanks[_beneficiary] = _index;\r\n        emit BuyRank(_beneficiary, _index);\r\n    }\r\n\r\n\r\n    function getPreSaleRank(address _user, uint _index) onlyManager whilePresaleOpen public {\r\n        require(_index <= ranksCount);\r\n        require(userRanks[_user] < _index);\r\n        userRanks[_user] = _index;\r\n        emit BuyRank(_user, _index);\r\n    }\r\n\r\n\r\n\r\n    function getNextRank(address _user) onlyUnicornContract public returns (uint) {\r\n        uint _index = userRanks[_user] + 1;\r\n        require(_index <= ranksCount);\r\n        userRanks[_user] = _index;\r\n        return _index;\r\n        emit BuyNextRank(msg.sender, _index);\r\n    }\r\n\r\n\r\n    function getRank(address _user, uint _index) onlyUnicornContract public {\r\n        require(_index <= ranksCount);\r\n        require(userRanks[_user] <= _index);\r\n        userRanks[_user] = _index;\r\n        emit BuyRank(_user, _index);\r\n    }\r\n\r\n\r\n    function _getPrice(uint _userRank, uint _index) private view returns (uint) {\r\n        uint fullPrice = 0;\r\n\r\n        for(uint i = _userRank+1; i <= _index; i++)\r\n        {\r\n            fullPrice = fullPrice.add(ranks[i].priceCandy);\r\n        }\r\n\r\n        return fullPrice;\r\n    }\r\n\r\n\r\n    function getIndividualPrice(address _user, uint _index) public view returns (uint) {\r\n        require(_index <= ranksCount);\r\n        require(userRanks[_user] < _index);\r\n\r\n        return _getPrice(userRanks[_user], _index);\r\n    }\r\n\r\n\r\n    function getRankPriceCandy(uint _index) public view returns (uint) {\r\n        return ranks[_index].priceCandy;\r\n    }\r\n\r\n\r\n    function getRankPriceEth(uint _index) public view returns (uint) {\r\n        return ranks[_index].priceEth;\r\n    }\r\n\r\n    function getRankLandLimit(uint _index) public view returns (uint) {\r\n        return ranks[_index].landLimit;\r\n    }\r\n\r\n\r\n    function getRankTitle(uint _index) public view returns (string) {\r\n        return ranks[_index].title;\r\n    }\r\n\r\n    function getUserRank(address _user) public view returns (uint) {\r\n        return userRanks[_user];\r\n    }\r\n\r\n    function getUserLandLimit(address _user) public view returns (uint) {\r\n        return ranks[userRanks[_user]].landLimit;\r\n    }\r\n\r\n\r\n    function withdrawTokens() public onlyManager  {\r\n        require(candyToken.balanceOf(this) > 0);\r\n        candyToken.transfer(landManagement.walletAddress(), candyToken.balanceOf(this));\r\n        emit TokensTransferred(landManagement.walletAddress(), candyToken.balanceOf(this));\r\n    }\r\n\r\n\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public {\r\n        //require(_token == landManagement.candyToken());\r\n        require(msg.sender == address(candyToken));\r\n        require(allowedFuncs[bytesToBytes4(_extraData)]);\r\n        require(address(this).call(_extraData));\r\n        emit ReceiveApproval(_from, _value, _token);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"_receiveBuyNextRank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGamePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"buyRank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_landLimit\",\"type\":\"uint256\"},{\"name\":\"_priceCandy\",\"type\":\"uint256\"},{\"name\":\"_priceEth\",\"type\":\"uint256\"},{\"name\":\"_title\",\"type\":\"string\"}],\"name\":\"addRank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRanks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserLandLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPreSaleRank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"landManagement\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRankPriceEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRankPriceCandy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_priceCandy\",\"type\":\"uint256\"},{\"name\":\"_priceEth\",\"type\":\"uint256\"}],\"name\":\"editRank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"candyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserRank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRankTitle\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNextRank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getIndividualPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyNextRank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ranks\",\"outputs\":[{\"name\":\"landLimit\",\"type\":\"uint256\"},{\"name\":\"priceCandy\",\"type\":\"uint256\"},{\"name\":\"priceEth\",\"type\":\"uint256\"},{\"name\":\"title\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ranksCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"_receiveBuyRank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRankLandLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_landManagementAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_landLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_title\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_priceCandy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_priceEth\",\"type\":\"uint256\"}],\"name\":\"NewRankAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceCandy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceEth\",\"type\":\"uint256\"}],\"name\":\"RankChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"BuyNextRank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"BuyRank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ReceiveApproval\",\"type\":\"event\"}]","ContractName":"UserRank","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000004db129c33d1a56333deeafbae6ae5c8a1598b926","Library":"","SwarmSource":"bzzr://f8cb70e391e5ae8fa144ad3b3bb2ca3a87d3d58e965e9978036fc9ea75437ab5"}]}