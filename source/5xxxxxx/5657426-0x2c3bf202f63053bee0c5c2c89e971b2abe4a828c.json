{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.16;\r\n\r\n\r\nlibrary CommonLibrary {\r\n\tstruct Data {\r\n\t\tmapping (uint => Node) nodes; \r\n\t\tmapping (string => uint) nodesID;\r\n\t\tmapping (string => uint16) nodeGroups;\r\n\t\tuint16 nodeGroupID;\r\n\t\tuint nodeID;\r\n\t\tuint ownerNotationId;\r\n\t\tuint addNodeAddressId;\r\n\t}\r\n\t\r\n\tstruct Node {\r\n\t\tstring nodeName;\r\n\t\taddress producer;\r\n\t\taddress node;\r\n\t\tuint256 date;\r\n\t\tbool starmidConfirmed;\r\n\t\taddress[] outsourceConfirmed;\r\n\t\tuint16[] nodeGroup;\r\n\t\tuint8 producersPercent;\r\n\t\tuint16 nodeSocialMedia;\r\n\t}\r\n\t\r\n\tfunction addNodeGroup(Data storage self, string _newNodeGroup) returns(bool _result, uint16 _id) {\r\n\t\tif (self.nodeGroups[_newNodeGroup] == 0) {\r\n\t\t\t_id = self.nodeGroupID += 1;\r\n\t\t\tself.nodeGroups[_newNodeGroup] = self.nodeGroupID;\r\n\t\t\t_result = true;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction addNode(\r\n\t\tData storage self, \r\n\t\tstring _newNode, \r\n\t\tuint8 _producersPercent\r\n\t\t) returns (bool _result, uint _id) {\r\n\t\tif (self.nodesID[_newNode] < 1 && _producersPercent < 100) {\r\n\t\t\t_id = self.nodeID += 1;\r\n\t\t\trequire(self.nodeID < 1000000000000);\r\n\t\t\tself.nodes[self.nodeID].nodeName = _newNode;\r\n\t\t\tself.nodes[self.nodeID].producer = msg.sender;\r\n\t\t\tself.nodes[self.nodeID].date = block.timestamp;\r\n\t\t\tself.nodes[self.nodeID].starmidConfirmed = false;\r\n\t\t\tself.nodes[self.nodeID].producersPercent = _producersPercent;\r\n\t\t\tself.nodesID[_newNode] = self.nodeID;\r\n\t\t\t_result = true;\r\n\t\t}\r\n\t\telse _result = false;\r\n\t}\r\n\t\r\n\tfunction editNode(\r\n\t    Data storage self, \r\n\t\tuint _nodeID, \r\n\t\taddress _nodeAddress, \r\n\t\tbool _isNewProducer, \r\n\t\taddress _newProducer, \r\n\t\tuint8 _newProducersPercent,\r\n\t\tbool _starmidConfirmed\r\n\t\t) returns (bool) {\r\n\t\tif (_isNewProducer == true) {\r\n\t\t\tself.nodes[_nodeID].node = _nodeAddress;\r\n\t\t\tself.nodes[_nodeID].producer = _newProducer;\r\n\t\t\tself.nodes[_nodeID].producersPercent = _newProducersPercent;\r\n\t\t\tself.nodes[_nodeID].starmidConfirmed = _starmidConfirmed;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tself.nodes[_nodeID].node = _nodeAddress;\r\n\t\t\tself.nodes[_nodeID].starmidConfirmed = _starmidConfirmed;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction addNodeAddress(Data storage self, uint _nodeID, address _nodeAddress) returns(bool _result, uint _id) {\r\n\t\tif (msg.sender == self.nodes[_nodeID].producer) {\r\n\t\t\tif (self.nodes[_nodeID].node == 0) {\r\n\t\t\t\tself.nodes[_nodeID].node = _nodeAddress;\r\n\t\t\t\t_id = self.addNodeAddressId += 1;//for event count\r\n\t\t\t\t_result = true;\r\n\t\t\t}\r\n\t\t\telse _result = false;\r\n\t\t}\r\n\t\telse _result = false;\r\n\t}\r\n\t\r\n\t//-----------------------------------------Starmid Exchange functions\r\n\tfunction stockMinSellPrice(StarCoinLibrary.Data storage self, uint _buyPrice, uint _node) constant returns (uint _minSellPrice) {\r\n\t\t_minSellPrice = _buyPrice + 1;\r\n\t\tfor (uint i = 0; i < self.stockSellOrderPrices[_node].length; i++) {\r\n\t\t\tif(self.stockSellOrderPrices[_node][i] < _minSellPrice) _minSellPrice = self.stockSellOrderPrices[_node][i];\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction stockMaxBuyPrice (StarCoinLibrary.Data storage self, uint _sellPrice, uint _node) constant returns (uint _maxBuyPrice) {\r\n\t\t_maxBuyPrice = _sellPrice - 1;\r\n\t\tfor (uint i = 0; i < self.stockBuyOrderPrices[_node].length; i++) {\r\n\t\t\tif(self.stockBuyOrderPrices[_node][i] > _maxBuyPrice) _maxBuyPrice = self.stockBuyOrderPrices[_node][i];\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction stockDeleteFirstOrder(StarCoinLibrary.Data storage self, uint _node, uint _price, bool _isStockSellOrders) {\r\n\t\tif (_isStockSellOrders == true) uint _length = self.stockSellOrders[_node][_price].length;\r\n\t\telse _length = self.stockBuyOrders[_node][_price].length;\r\n\t\tfor (uint ii = 0; ii < _length - 1; ii++) {\r\n\t\t\tif (_isStockSellOrders == true) self.stockSellOrders[_node][_price][ii] = self.stockSellOrders[_node][_price][ii + 1];\r\n\t\t\telse self.stockBuyOrders[_node][_price][ii] = self.stockBuyOrders[_node][_price][ii + 1];\r\n\t\t}\r\n\t\tif (_isStockSellOrders == true) {\r\n\t\t\tdelete self.stockSellOrders[_node][_price][self.stockSellOrders[_node][_price].length - 1];\r\n\t\t\tself.stockSellOrders[_node][_price].length--;\r\n\t\t\t//Delete _price from stockSellOrderPrices[_node][] if it's the last order\r\n\t\t\tif (self.stockSellOrders[_node][_price].length == 0) {\r\n\t\t\t\tuint fromArg = 99999;\r\n\t\t\t\tfor (uint8 iii = 0; iii < self.stockSellOrderPrices[_node].length - 1; iii++) {\r\n\t\t\t\t\tif (self.stockSellOrderPrices[_node][iii] == _price) {\r\n\t\t\t\t\t\tfromArg = iii;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (fromArg != 99999 && iii >= fromArg) self.stockSellOrderPrices[_node][iii] = self.stockSellOrderPrices[_node][iii + 1];\r\n\t\t\t\t}\r\n\t\t\t\tdelete self.stockSellOrderPrices[_node][self.stockSellOrderPrices[_node].length-1];\r\n\t\t\t\tself.stockSellOrderPrices[_node].length--;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelete self.stockBuyOrders[_node][_price][self.stockBuyOrders[_node][_price].length - 1];\r\n\t\t\tself.stockBuyOrders[_node][_price].length--;\r\n\t\t\t//Delete _price from stockBuyOrderPrices[_node][] if it's the last order\r\n\t\t\tif (self.stockBuyOrders[_node][_price].length == 0) {\r\n\t\t\t\tfromArg = 99999;\r\n\t\t\t\tfor (iii = 0; iii < self.stockBuyOrderPrices[_node].length - 1; iii++) {\r\n\t\t\t\t\tif (self.stockBuyOrderPrices[_node][iii] == _price) {\r\n\t\t\t\t\t\tfromArg = iii;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (fromArg != 99999 && iii >= fromArg) self.stockBuyOrderPrices[_node][iii] = self.stockBuyOrderPrices[_node][iii + 1];\r\n\t\t\t\t}\r\n\t\t\t\tdelete self.stockBuyOrderPrices[_node][self.stockBuyOrderPrices[_node].length-1];\r\n\t\t\t\tself.stockBuyOrderPrices[_node].length--;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction stockSaveOwnerInfo(StarCoinLibrary.Data storage self, uint _node, uint _amount, address _buyer, address _seller, uint _price) {\r\n\t\t//--------------------------------------_buyer\r\n\t\tself.StockOwnersBuyPrice[_buyer][_node].sumPriceAmount += _amount*_price;\r\n\t\tself.StockOwnersBuyPrice[_buyer][_node].sumDateAmount += _amount*block.timestamp;\r\n\t\tself.StockOwnersBuyPrice[_buyer][_node].sumAmount += _amount;\r\n\t\tuint16 _thisNode = 0;\r\n\t\t\tfor (uint16 i6 = 0; i6 < self.stockOwnerInfo[_buyer].nodes.length; i6++) {\r\n\t\t\t\tif (self.stockOwnerInfo[_buyer].nodes[i6] == _node) _thisNode = 1;\r\n\t\t\t}\r\n\t\t\tif (_thisNode == 0) self.stockOwnerInfo[_buyer].nodes.push(_node);\r\n\t\t//--------------------------------------_seller\r\n\t\tif(self.StockOwnersBuyPrice[_seller][_node].sumPriceAmount > 0) {\r\n\t\t\tself.StockOwnersBuyPrice[_seller][_node].sumPriceAmount -= _amount*_price;\r\n\t\t\tself.StockOwnersBuyPrice[_buyer][_node].sumDateAmount -= _amount*block.timestamp;\r\n\t\t\tself.StockOwnersBuyPrice[_buyer][_node].sumAmount -= _amount;\r\n\t\t}\r\n\t\t_thisNode = 0;\r\n\t\tfor (i6 = 0; i6 < self.stockOwnerInfo[_seller].nodes.length; i6++) {\r\n\t\t\tif (self.stockOwnerInfo[_seller].nodes[i6] == _node) _thisNode = i6;\r\n\t\t}\r\n\t\tif (_thisNode > 0) {\r\n\t\t\tfor (uint ii = _thisNode; ii < self.stockOwnerInfo[msg.sender].nodes.length - 1; ii++) {\r\n\t\t\t\tself.stockOwnerInfo[msg.sender].nodes[ii] = self.stockOwnerInfo[msg.sender].nodes[ii + 1];\r\n\t\t\t}\r\n\t\t\tdelete self.stockOwnerInfo[msg.sender].nodes[self.stockOwnerInfo[msg.sender].nodes.length - 1];\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction deleteStockBuyOrder(StarCoinLibrary.Data storage self, uint _iii, uint _node, uint _price) {\r\n\t\tfor (uint ii = _iii; ii < self.stockBuyOrders[_node][_price].length - 1; ii++) {\r\n\t\t\tself.stockBuyOrders[_node][_price][ii] = self.stockBuyOrders[_node][_price][ii + 1];\r\n\t\t}\r\n\t\tdelete self.stockBuyOrders[_node][_price][self.stockBuyOrders[_node][_price].length - 1];\r\n\t\tself.stockBuyOrders[_node][_price].length--;\r\n\t\t//Delete _price from stockBuyOrderPrices[_node][] if it's the last order\r\n\t\tif (self.stockBuyOrders[_node][_price].length == 0) {\r\n\t\t\tuint _fromArg = 99999;\r\n\t\t\tfor (_iii = 0; _iii < self.stockBuyOrderPrices[_node].length - 1; _iii++) {\r\n\t\t\t\tif (self.stockBuyOrderPrices[_node][_iii] == _price) {\r\n\t\t\t\t\t_fromArg = _iii;\r\n\t\t\t\t}\r\n\t\t\t\tif (_fromArg != 99999 && _iii >= _fromArg) self.stockBuyOrderPrices[_node][_iii] = self.stockBuyOrderPrices[_node][_iii + 1];\r\n\t\t\t}\r\n\t\t\tdelete self.stockBuyOrderPrices[_node][self.stockBuyOrderPrices[_node].length-1];\r\n\t\t\tself.stockBuyOrderPrices[_node].length--;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction deleteStockSellOrder(StarCoinLibrary.Data storage self, uint _iii, uint _node, uint _price) {\r\n\t\tfor (uint ii = _iii; ii < self.stockSellOrders[_node][_price].length - 1; ii++) {\r\n\t\t\tself.stockSellOrders[_node][_price][ii] = self.stockSellOrders[_node][_price][ii + 1];\r\n\t\t}\r\n\t\tdelete self.stockSellOrders[_node][_price][self.stockSellOrders[_node][_price].length - 1];\r\n\t\tself.stockSellOrders[_node][_price].length--;\r\n\t\t//Delete _price from stockSellOrderPrices[_node][] if it's the last order\r\n\t\tif (self.stockSellOrders[_node][_price].length == 0) {\r\n\t\t\tuint _fromArg = 99999;\r\n\t\t\tfor (_iii = 0; _iii < self.stockSellOrderPrices[_node].length - 1; _iii++) {\r\n\t\t\t\tif (self.stockSellOrderPrices[_node][_iii] == _price) {\r\n\t\t\t\t\t_fromArg = _iii;\r\n\t\t\t\t}\r\n\t\t\t\tif (_fromArg != 99999 && _iii >= _fromArg) self.stockSellOrderPrices[_node][_iii] = self.stockSellOrderPrices[_node][_iii + 1];\r\n\t\t\t}\r\n\t\t\tdelete self.stockSellOrderPrices[_node][self.stockSellOrderPrices[_node].length-1];\r\n\t\t\tself.stockSellOrderPrices[_node].length--;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nlibrary StarCoinLibrary {\r\n\tstruct Data {\r\n\t\tuint256 lastMint;\r\n\t\tmapping (address => uint256) balanceOf;\r\n\t\tmapping (address => uint256) frozen;\r\n\t\tuint32 ordersId;\r\n\t\tmapping (uint256 => orderInfo[]) buyOrders;\r\n\t\tmapping (uint256 => orderInfo[]) sellOrders;\r\n\t\tmapping (address => mapping (uint => uint)) stockBalanceOf;\r\n\t\tmapping (address => mapping (uint => uint)) stockFrozen;\r\n\t\tmapping (uint => uint)  emissionLimits;\r\n\t\tuint32 stockOrdersId;\r\n\t\tmapping (uint => emissionNodeInfo) emissions;\r\n\t\tmapping (uint => mapping (uint256 => stockOrderInfo[])) stockBuyOrders;\r\n\t\tmapping (uint => mapping (uint256 => stockOrderInfo[])) stockSellOrders;\r\n\t\tmapping (address => mapping (uint => uint)) lastDividends;\r\n\t\tmapping (address => mapping (uint => averageBuyPrice)) StockOwnersBuyPrice;\r\n\t\tmapping (address => ownerInfo) stockOwnerInfo;\r\n\t\tuint[] buyOrderPrices;\r\n\t\tuint[] sellOrderPrices;\r\n\t\tmapping (uint => uint[]) stockBuyOrderPrices;\r\n\t\tmapping (uint => uint[]) stockSellOrderPrices;\r\n\t\tmapping (address => uint) pendingWithdrawals;\r\n\t}\r\n\tstruct orderInfo {\r\n\t\tuint date;\r\n\t\taddress client;\r\n\t\tuint256 amount;\r\n\t\tuint256 price;\r\n\t\tbool isBuyer;\r\n\t\tuint orderId;\r\n    }\r\n\tstruct emissionNodeInfo {\r\n\t\tuint emissionNumber;\r\n\t\tuint date;\r\n\t}\r\n\tstruct stockOrderInfo {\r\n\t\tuint date;\r\n\t\taddress client;\r\n\t\tuint256 amount;\r\n\t\tuint256 price;\r\n\t\tbool isBuyer;\r\n\t\tuint orderId;\r\n\t\tuint node;\r\n    }\r\n\tstruct averageBuyPrice {\r\n        uint sumPriceAmount;\r\n\t\tuint sumDateAmount;\r\n\t\tuint sumAmount;\r\n    }\r\n\tstruct ownerInfo {\r\n\t\tuint index;\r\n\t\tuint[] nodes;\r\n    }\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent TradeHistory(uint date, address buyer, address seller, uint price, uint amount, uint orderId);\r\n    \r\n    function buyOrder(Data storage self, uint256 _buyPrice) returns (uint[4] _results) {\r\n\t\tuint _remainingValue = msg.value;\r\n\t\tuint256[4] memory it;\r\n\t\tif (minSellPrice(self, _buyPrice) != _buyPrice + 1) {\r\n\t\t\tit[3] = self.sellOrderPrices.length;\r\n\t\t\tfor (it[1] = 0; it[1] < it[3]; it[1]++) {\r\n\t\t\t\tuint _minPrice = minSellPrice(self, _buyPrice);\r\n\t\t\t\tit[2] = self.sellOrders[_minPrice].length;\r\n\t\t\t\tfor (it[0] = 0; it[0] < it[2]; it[0]++) {\r\n\t\t\t\t\tuint _amount = _remainingValue/_minPrice;\r\n\t\t\t\t\tif (_amount >= self.sellOrders[_minPrice][0].amount) {\r\n\t\t\t\t\t\t//buy starcoins for ether\r\n\t\t\t\t\t\tself.balanceOf[msg.sender] += self.sellOrders[_minPrice][0].amount;// adds the amount to buyer's balance\r\n\t\t\t\t\t\tself.frozen[self.sellOrders[_minPrice][0].client] -= self.sellOrders[_minPrice][0].amount;// subtracts the amount from seller's frozen balance\r\n\t\t\t\t\t\tTransfer(self.sellOrders[_minPrice][0].client, msg.sender, self.sellOrders[_minPrice][0].amount);\r\n\t\t\t\t\t\t//transfer ether to seller\r\n\t\t\t\t\t\tuint256 amountTransfer = _minPrice*self.sellOrders[_minPrice][0].amount;\r\n\t\t\t\t\t\tself.pendingWithdrawals[self.sellOrders[_minPrice][0].client] += amountTransfer;\r\n\t\t\t\t\t\t//save the transaction\r\n\t\t\t\t\t\tTradeHistory(block.timestamp, msg.sender, self.sellOrders[_minPrice][0].client, _minPrice, self.sellOrders[_minPrice][0].amount, \r\n\t\t\t\t\t\tself.sellOrders[_minPrice][0].orderId);\r\n\t\t\t\t\t\t_remainingValue -= amountTransfer;\r\n\t\t\t\t\t\t_results[0] += self.sellOrders[_minPrice][0].amount;\r\n\t\t\t\t\t\t//delete sellOrders[_minPrice][0] and move each element\r\n\t\t\t\t\t\tdeleteFirstOrder(self, _minPrice, true);\r\n\t\t\t\t\t\tif (_remainingValue/_minPrice < 1) break;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t//edit sellOrders[_minPrice][0]\r\n\t\t\t\t\t\tself.sellOrders[_minPrice][0].amount = self.sellOrders[_minPrice][0].amount - _amount;\r\n\t\t\t\t\t\t//buy starcoins for ether\r\n\t\t\t\t\t\tself.balanceOf[msg.sender] += _amount;// adds the _amount to buyer's balance\r\n\t\t\t\t\t\tself.frozen[self.sellOrders[_minPrice][0].client] -= _amount;// subtracts the _amount from seller's frozen balance\r\n\t\t\t\t\t\tTransfer(self.sellOrders[_minPrice][0].client, msg.sender, _amount);\r\n\t\t\t\t\t\t//save the transaction\r\n\t\t\t\t\t\tTradeHistory(block.timestamp, msg.sender, self.sellOrders[_minPrice][0].client, _minPrice, _amount, self.sellOrders[_minPrice][0].orderId);\r\n\t\t\t\t\t\t//transfer ether to seller\r\n\t\t\t\t\t\tuint256 amountTransfer1 = _amount*_minPrice;\r\n\t\t\t\t\t\tself.pendingWithdrawals[self.sellOrders[_minPrice][0].client] += amountTransfer1;\r\n\t\t\t\t\t\t_remainingValue -= amountTransfer1;\r\n\t\t\t\t\t\t_results[0] += _amount;\r\n\t\t\t\t\t\tif(_remainingValue/_minPrice < 1) {\r\n\t\t\t\t\t\t\t_results[3] = 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (_remainingValue/_minPrice < 1) {\r\n\t\t\t\t\t_results[3] = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(_remainingValue/_buyPrice < 1) \r\n\t\t\t\tself.pendingWithdrawals[msg.sender] += _remainingValue;//returns change to buyer\r\n\t\t}\r\n\t\tif (minSellPrice(self, _buyPrice) == _buyPrice + 1 && _remainingValue/_buyPrice >= 1) {\r\n\t\t\t//save new order\r\n\t\t\t_results[1] =  _remainingValue/_buyPrice;\r\n\t\t\tif (_remainingValue - _results[1]*_buyPrice > 0) \r\n\t\t\t\tself.pendingWithdrawals[msg.sender] += _remainingValue - _results[1]*_buyPrice;//returns change to buyer\r\n\t\t\tself.ordersId += 1;\r\n\t\t\t_results[2] = self.ordersId;\r\n\t\t\tself.buyOrders[_buyPrice].push(orderInfo( block.timestamp, msg.sender, _results[1], _buyPrice, true, self.ordersId));\r\n\t\t    _results[3] = 1;\r\n\t\t\t//Add _buyPrice to buyOrderPrices[]\r\n\t\t\tit[0] = 99999;\r\n\t\t\tfor (it[1] = 0; it[1] < self.buyOrderPrices.length; it[1]++) {\r\n\t\t\t\tif (self.buyOrderPrices[it[1]] == _buyPrice) \r\n\t\t\t\t\tit[0] = it[1];\r\n\t\t\t}\r\n\t\t\tif (it[0] == 99999) \r\n\t\t\t\tself.buyOrderPrices.push(_buyPrice);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction minSellPrice(Data storage self, uint _buyPrice) constant returns (uint _minSellPrice) {\r\n\t\t_minSellPrice = _buyPrice + 1;\r\n\t\tfor (uint i = 0; i < self.sellOrderPrices.length; i++) {\r\n\t\t\tif(self.sellOrderPrices[i] < _minSellPrice) _minSellPrice = self.sellOrderPrices[i];\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction sellOrder(Data storage self, uint256 _sellPrice, uint _amount) returns (uint[4] _results) {\r\n\t\tuint _remainingAmount = _amount;\r\n\t\trequire(self.balanceOf[msg.sender] >= _amount);\r\n\t\tuint256[4] memory it;\r\n\t\tif (maxBuyPrice(self, _sellPrice) != _sellPrice - 1) {\r\n\t\t\tit[3] = self.buyOrderPrices.length;\r\n\t\t\tfor (it[1] = 0; it[1] < it[3]; it[1]++) {\r\n\t\t\t\tuint _maxPrice = maxBuyPrice(self, _sellPrice);\r\n\t\t\t\tit[2] = self.buyOrders[_maxPrice].length;\r\n\t\t\t\tfor (it[0] = 0; it[0] < it[2]; it[0]++) {\r\n\t\t\t\t\tif (_remainingAmount >= self.buyOrders[_maxPrice][0].amount) {\r\n\t\t\t\t\t\t//sell starcoins for ether\r\n\t\t\t\t\t\tself.balanceOf[msg.sender] -= self.buyOrders[_maxPrice][0].amount;// subtracts amount from seller's balance\r\n\t\t\t\t\t\tself.balanceOf[self.buyOrders[_maxPrice][0].client] += self.buyOrders[_maxPrice][0].amount;// adds the amount to buyer's balance\r\n\t\t\t\t\t\tTransfer(msg.sender, self.buyOrders[_maxPrice][0].client, self.buyOrders[_maxPrice][0].amount);\r\n\t\t\t\t\t\t//transfer ether to seller\r\n\t\t\t\t\t\tuint _amountTransfer = _maxPrice*self.buyOrders[_maxPrice][0].amount;\r\n\t\t\t\t\t\tself.pendingWithdrawals[msg.sender] += _amountTransfer;\r\n\t\t\t\t\t\t//save the transaction\r\n\t\t\t\t\t\tTradeHistory(block.timestamp, self.buyOrders[_maxPrice][0].client, msg.sender, _maxPrice, self.buyOrders[_maxPrice][0].amount, \r\n\t\t\t\t\t\tself.buyOrders[_maxPrice][0].orderId);\r\n\t\t\t\t\t\t_remainingAmount -= self.buyOrders[_maxPrice][0].amount;\r\n\t\t\t\t\t\t_results[0] += self.buyOrders[_maxPrice][0].amount;\r\n\t\t\t\t\t\t//delete buyOrders[_maxPrice][0] and move each element\r\n\t\t\t\t\t\tdeleteFirstOrder(self, _maxPrice, false);\r\n\t\t\t\t\t\tif(_remainingAmount < 1) break;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t//edit buyOrders[_maxPrice][0]\r\n\t\t\t\t\t\tself.buyOrders[_maxPrice][0].amount = self.buyOrders[_maxPrice][0].amount-_remainingAmount;\r\n\t\t\t\t\t\t//buy starcoins for ether\r\n\t\t\t\t\t\tself.balanceOf[msg.sender] -= _remainingAmount;// subtracts amount from seller's balance\r\n\t\t\t\t\t\tself.balanceOf[self.buyOrders[_maxPrice][0].client] += _remainingAmount;// adds the amount to buyer's balance \r\n\t\t\t\t\t\tTransfer(msg.sender, self.buyOrders[_maxPrice][0].client, _remainingAmount);\r\n\t\t\t\t\t\t//save the transaction\r\n\t\t\t\t\t\tTradeHistory(block.timestamp, self.buyOrders[_maxPrice][0].client, msg.sender, _maxPrice, _remainingAmount, self.buyOrders[_maxPrice][0].orderId);\r\n\t\t\t\t\t\t//transfer ether to seller\r\n\t\t\t\t\t\tuint256 amountTransfer1 = _maxPrice*_remainingAmount;\r\n\t\t\t\t\t\tself.pendingWithdrawals[msg.sender] += amountTransfer1;\r\n\t\t\t\t\t\t_results[0] += _remainingAmount;\r\n\t\t\t\t\t\t_remainingAmount = 0;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (_remainingAmount<1) {\r\n\t\t\t\t\t_results[3] = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (maxBuyPrice(self, _sellPrice) == _sellPrice - 1 && _remainingAmount >= 1) {\r\n\t\t\t//save new order\r\n\t\t\t_results[1] =  _remainingAmount;\r\n\t\t\tself.ordersId += 1;\r\n\t\t\t_results[2] = self.ordersId;\r\n\t\t\tself.sellOrders[_sellPrice].push(orderInfo( block.timestamp, msg.sender, _results[1], _sellPrice, false, _results[2]));\r\n\t\t    _results[3] = 1;\r\n\t\t\t//transfer starcoins to the frozen balance\r\n\t\t\tself.frozen[msg.sender] += _remainingAmount;\r\n\t\t\tself.balanceOf[msg.sender] -= _remainingAmount;\r\n\t\t\t//Add _sellPrice to sellOrderPrices[]\r\n\t\t\tit[0] = 99999;\r\n\t\t\tfor (it[1] = 0; it[1] < self.sellOrderPrices.length; it[1]++) {\r\n\t\t\t\tif (self.sellOrderPrices[it[1]] == _sellPrice) \r\n\t\t\t\t\tit[0] = it[1];\r\n\t\t\t}\r\n\t\t\tif (it[0] == 99999) \r\n\t\t\t\tself.sellOrderPrices.push(_sellPrice);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction maxBuyPrice (Data storage self, uint _sellPrice) constant returns (uint _maxBuyPrice) {\r\n\t\t_maxBuyPrice = _sellPrice - 1;\r\n\t\tfor (uint i = 0; i < self.buyOrderPrices.length; i++) {\r\n\t\t\tif(self.buyOrderPrices[i] > _maxBuyPrice) _maxBuyPrice = self.buyOrderPrices[i];\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction deleteFirstOrder(Data storage self, uint _price, bool _isSellOrders) {\r\n\t\tif (_isSellOrders == true) uint _length = self.sellOrders[_price].length;\r\n\t\telse _length = self.buyOrders[_price].length;\r\n\t\tfor (uint ii = 0; ii < _length - 1; ii++) {\r\n\t\t\tif (_isSellOrders == true) self.sellOrders[_price][ii] = self.sellOrders[_price][ii + 1];\r\n\t\t\telse self.buyOrders[_price][ii] = self.buyOrders[_price][ii+1];\r\n\t\t}\r\n\t\tif (_isSellOrders == true) {\r\n\t\t\tdelete self.sellOrders[_price][self.sellOrders[_price].length - 1];\r\n\t\t\tself.sellOrders[_price].length--;\r\n\t\t\t//Delete _price from sellOrderPrices[] if it's the last order\r\n\t\t\tif (_length == 1) {\r\n\t\t\t\tuint _fromArg = 99999;\r\n\t\t\t\tfor (uint8 iii = 0; iii < self.sellOrderPrices.length - 1; iii++) {\r\n\t\t\t\t\tif (self.sellOrderPrices[iii] == _price) {\r\n\t\t\t\t\t\t_fromArg = iii;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (_fromArg != 99999 && iii >= _fromArg) self.sellOrderPrices[iii] = self.sellOrderPrices[iii + 1];\r\n\t\t\t\t}\r\n\t\t\t\tdelete self.sellOrderPrices[self.sellOrderPrices.length-1];\r\n\t\t\t\tself.sellOrderPrices.length--;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdelete self.buyOrders[_price][self.buyOrders[_price].length - 1];\r\n\t\t\tself.buyOrders[_price].length--;\r\n\t\t\t//Delete _price from buyOrderPrices[] if it's the last order\r\n\t\t\tif (_length == 1) {\r\n\t\t\t\t_fromArg = 99999;\r\n\t\t\t\tfor (iii = 0; iii < self.buyOrderPrices.length - 1; iii++) {\r\n\t\t\t\t\tif (self.buyOrderPrices[iii] == _price) {\r\n\t\t\t\t\t\t_fromArg = iii;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (_fromArg != 99999 && iii >= _fromArg) self.buyOrderPrices[iii] = self.buyOrderPrices[iii + 1];\r\n\t\t\t\t}\r\n\t\t\t\tdelete self.buyOrderPrices[self.buyOrderPrices.length-1];\r\n\t\t\t\tself.buyOrderPrices.length--;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction cancelBuyOrder(Data storage self, uint _thisOrderID, uint _price) public returns(bool) {\r\n\t\tfor (uint8 iii = 0; iii < self.buyOrders[_price].length; iii++) {\r\n\t\t\tif (self.buyOrders[_price][iii].orderId == _thisOrderID) {\r\n\t\t\t\t//delete buyOrders[_price][iii] and move each element\r\n\t\t\t\trequire(msg.sender == self.buyOrders[_price][iii].client);\r\n\t\t\t\tuint _remainingValue = self.buyOrders[_price][iii].price*self.buyOrders[_price][iii].amount;\r\n\t\t\t\tfor (uint ii = iii; ii < self.buyOrders[_price].length - 1; ii++) {\r\n\t\t\t\t\tself.buyOrders[_price][ii] = self.buyOrders[_price][ii + 1];\r\n\t\t\t\t}\r\n\t\t\t\tdelete self.buyOrders[_price][self.buyOrders[_price].length - 1];\r\n\t\t\t\tself.buyOrders[_price].length--;\r\n\t\t\t\tself.pendingWithdrawals[msg.sender] += _remainingValue;//returns ether to buyer\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//Delete _price from buyOrderPrices[] if it's the last order\r\n\t\tif (self.buyOrders[_price].length == 0) {\r\n\t\t\t\tuint _fromArg = 99999;\r\n\t\t\t\tfor (uint8 iiii = 0; iiii < self.buyOrderPrices.length - 1; iiii++) {\r\n\t\t\t\t\tif (self.buyOrderPrices[iiii] == _price) {\r\n\t\t\t\t\t\t_fromArg = iiii;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (_fromArg != 99999 && iiii >= _fromArg) self.buyOrderPrices[iiii] = self.buyOrderPrices[iiii + 1];\r\n\t\t\t\t}\r\n\t\t\t\tdelete self.buyOrderPrices[self.buyOrderPrices.length-1];\r\n\t\t\t\tself.buyOrderPrices.length--;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction cancelSellOrder(Data storage self, uint _thisOrderID, uint _price) public returns(bool) {\r\n\t\tfor (uint8 iii = 0; iii < self.sellOrders[_price].length; iii++) {\r\n\t\t\tif (self.sellOrders[_price][iii].orderId == _thisOrderID) {\r\n\t\t\t\trequire(msg.sender == self.sellOrders[_price][iii].client);\r\n\t\t\t\t//return starcoins from the frozen balance to seller\r\n\t\t\t\tself.frozen[msg.sender] -= self.sellOrders[_price][iii].amount;\r\n\t\t\t\tself.balanceOf[msg.sender] += self.sellOrders[_price][iii].amount;\r\n\t\t\t\t//delete sellOrders[_price][iii] and move each element\r\n\t\t\t\tfor (uint ii = iii; ii < self.sellOrders[_price].length - 1; ii++) {\r\n\t\t\t\t\tself.sellOrders[_price][ii] = self.sellOrders[_price][ii + 1];\r\n\t\t\t\t}\r\n\t\t\t\tdelete self.sellOrders[_price][self.sellOrders[_price].length - 1];\r\n\t\t\t\tself.sellOrders[_price].length--;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//Delete _price from sellOrderPrices[] if it's the last order\r\n\t\tif (self.sellOrders[_price].length == 0) {\r\n\t\t\t\tuint _fromArg = 99999;\r\n\t\t\t\tfor (uint8 iiii = 0; iiii < self.sellOrderPrices.length - 1; iiii++) {\r\n\t\t\t\t\tif (self.sellOrderPrices[iiii] == _price) {\r\n\t\t\t\t\t\t_fromArg = iiii;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (_fromArg != 99999 && iiii >= _fromArg) \r\n\t\t\t\t\t\tself.sellOrderPrices[iiii] = self.sellOrderPrices[iiii + 1];\r\n\t\t\t\t}\r\n\t\t\t\tdelete self.sellOrderPrices[self.sellOrderPrices.length-1];\r\n\t\t\t\tself.sellOrderPrices.length--;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\nlibrary StarmidLibrary {\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent StockTransfer(address indexed from, address indexed to, uint indexed node, uint256 value);\r\n\tevent StockTradeHistory(uint node, uint date, address buyer, address seller, uint price, uint amount, uint orderId);\r\n    \r\n\tfunction stockBuyOrder(StarCoinLibrary.Data storage self, uint _node, uint256 _buyPrice, uint _amount) public returns (uint[4] _results) {\r\n\t\trequire(self.balanceOf[msg.sender] >= _buyPrice*_amount);\r\n\t\tuint256[4] memory it;\r\n\t\tif (CommonLibrary.stockMinSellPrice(self, _buyPrice, _node) != _buyPrice + 1) {\r\n\t\t\tit[3] = self.stockSellOrderPrices[_node].length;\r\n\t\t\tfor (it[1] = 0; it[1] < it[3]; it[1]++) {\r\n\t\t\t\tuint minPrice = CommonLibrary.stockMinSellPrice(self, _buyPrice, _node);\r\n\t\t\t\tit[2] = self.stockSellOrders[_node][minPrice].length;\r\n\t\t\t\tfor (it[0] = 0; it[0] < it[2]; it[0]++) {\r\n\t\t\t\t\tif (_amount >= self.stockSellOrders[_node][minPrice][0].amount) {\r\n\t\t\t\t\t\t//buy stocks for starcoins\r\n\t\t\t\t\t\tself.stockBalanceOf[msg.sender][_node] += self.stockSellOrders[_node][minPrice][0].amount;// add the amount to buyer's balance\r\n\t\t\t\t\t\tself.stockFrozen[self.stockSellOrders[_node][minPrice][0].client][_node] -= self.stockSellOrders[_node][minPrice][0].amount;// subtracts amount from seller's frozen stock balance\r\n\t\t\t\t\t\t//write stockOwnerInfo and stockOwners for dividends\r\n\t\t\t\t\t\tCommonLibrary.stockSaveOwnerInfo(self, _node, self.stockSellOrders[_node][minPrice][0].amount, msg.sender, self.stockSellOrders[_node][minPrice][0].client, minPrice);\r\n\t\t\t\t\t\t//transfer starcoins to seller\r\n\t\t\t\t\t\tself.balanceOf[msg.sender] -= self.stockSellOrders[_node][minPrice][0].amount*minPrice;// subtracts amount from buyer's balance\r\n\t\t\t\t\t\tself.balanceOf[self.stockSellOrders[_node][minPrice][0].client] += self.stockSellOrders[_node][minPrice][0].amount*minPrice;// adds the amount to seller's balance\r\n\t\t\t\t\t\tTransfer(self.stockSellOrders[_node][minPrice][0].client, msg.sender, self.stockSellOrders[_node][minPrice][0].amount*minPrice);\r\n\t\t\t\t\t\t//save the transaction into event StocksTradeHistory;\r\n\t\t\t\t\t\tStockTradeHistory(_node, block.timestamp, msg.sender, self.stockSellOrders[_node][minPrice][0].client, minPrice, \r\n\t\t\t\t\t\tself.stockSellOrders[_node][minPrice][0].amount, self.stockSellOrders[_node][minPrice][0].orderId);\r\n\t\t\t\t\t\t_amount -= self.stockSellOrders[_node][minPrice][0].amount;\r\n\t\t\t\t\t\t_results[0] += self.stockSellOrders[_node][minPrice][0].amount;\r\n\t\t\t\t\t\t//delete stockSellOrders[_node][minPrice][0] and move each element\r\n\t\t\t\t\t\tCommonLibrary.stockDeleteFirstOrder(self, _node, minPrice, true);\r\n\t\t\t\t\t\tif (_amount<1) break;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t//edit stockSellOrders[_node][minPrice][0]\r\n\t\t\t\t\t\tself.stockSellOrders[_node][minPrice][0].amount -= _amount;\r\n\t\t\t\t\t\t//buy stocks for starcoins\r\n\t\t\t\t\t\tself.stockBalanceOf[msg.sender][_node] += _amount;// adds the _amount to buyer's balance\r\n\t\t\t\t\t\tself.stockFrozen[self.stockSellOrders[_node][minPrice][0].client][_node] -= _amount;// subtracts _amount from seller's frozen stock balance\r\n\t\t\t\t\t\t//write stockOwnerInfo and stockOwners for dividends\r\n\t\t\t\t\t    CommonLibrary.stockSaveOwnerInfo(self, _node, _amount, msg.sender, self.stockSellOrders[_node][minPrice][0].client, minPrice);\r\n\t\t\t\t\t\t//transfer starcoins to seller\r\n\t\t\t\t\t\tself.balanceOf[msg.sender] -= _amount*minPrice;// subtracts _amount from buyer's balance\r\n\t\t\t\t\t\tself.balanceOf[self.stockSellOrders[_node][minPrice][0].client] += _amount*minPrice;// adds the amount to seller's balance\r\n\t\t\t\t\t\tTransfer(self.stockSellOrders[_node][minPrice][0].client, msg.sender, _amount*minPrice);\r\n\t\t\t\t\t\t//save the transaction  into event StocksTradeHistory;\r\n\t\t\t\t\t\tStockTradeHistory(_node, block.timestamp, msg.sender, self.stockSellOrders[_node][minPrice][0].client, minPrice, \r\n\t\t\t\t\t\t_amount, self.stockSellOrders[_node][minPrice][0].orderId);\r\n\t\t\t\t\t\t_results[0] += _amount;\r\n\t\t\t\t\t\t_amount = 0;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(_amount < 1) {\r\n\t\t\t\t\t_results[3] = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t   \t}\r\n\t\t}\r\n\t\tif (CommonLibrary.stockMinSellPrice(self, _buyPrice, _node) == _buyPrice + 1 && _amount >= 1) {\r\n\t\t\t//save new order\r\n\t\t\t_results[1] =  _amount;\r\n\t\t\tself.stockOrdersId += 1;\r\n\t\t\t_results[2] = self.stockOrdersId;\r\n\t\t\tself.stockBuyOrders[_node][_buyPrice].push(StarCoinLibrary.stockOrderInfo(block.timestamp, msg.sender, _results[1], _buyPrice, true, self.stockOrdersId, _node));\r\n\t\t    _results[3] = 1;\r\n\t\t\t//transfer starcoins to the frozen balance\r\n\t\t\tself.frozen[msg.sender] += _amount*_buyPrice;\r\n\t\t\tself.balanceOf[msg.sender] -= _amount*_buyPrice;\r\n\t\t\t//Add _buyPrice to stockBuyOrderPrices[_node][]\r\n\t\t\tit[0] = 99999;\r\n\t\t\tfor (it[1] = 0; it[1] < self.stockBuyOrderPrices[_node].length; it[1]++) {\r\n\t\t\t\tif (self.stockBuyOrderPrices[_node][it[1]] == _buyPrice) \r\n\t\t\t\t\tit[0] = it[1];\r\n\t\t\t}\r\n\t\t\tif (it[0] == 99999) self.stockBuyOrderPrices[_node].push(_buyPrice);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction stockSellOrder(StarCoinLibrary.Data storage self, uint _node, uint _sellPrice, uint _amount) returns (uint[4] _results) {\r\n\t\trequire(self.stockBalanceOf[msg.sender][_node] >= _amount);\r\n\t\tuint[4] memory it;\r\n\t\tif (CommonLibrary.stockMaxBuyPrice(self, _sellPrice, _node) != _sellPrice - 1) {\r\n\t\t\tit[3] = self.stockBuyOrderPrices[_node].length;\r\n\t\t\tfor (it[1] = 0; it[1] < it[3]; it[1]++) {\r\n\t\t\t\tuint _maxPrice = CommonLibrary.stockMaxBuyPrice(self, _sellPrice, _node);\r\n\t\t\t\tit[2] = self.stockBuyOrders[_node][_maxPrice].length;\r\n\t\t\t\tfor (it[0] = 0; it[0] < it[2]; it[0]++) {\r\n\t\t\t\t\tif (_amount >= self.stockBuyOrders[_node][_maxPrice][0].amount) {\r\n\t\t\t\t\t\t//sell stocks for starcoins\r\n\t\t\t\t\t\tself.stockBalanceOf[msg.sender][_node] -= self.stockBuyOrders[_node][_maxPrice][0].amount;// subtracts the _amount from seller's balance \r\n\t\t\t\t\t\tself.stockBalanceOf[self.stockBuyOrders[_node][_maxPrice][0].client][_node] += self.stockBuyOrders[_node][_maxPrice][0].amount;// adds the _amount to buyer's balance\r\n\t\t\t\t\t\t//write stockOwnerInfo and stockOwners for dividends\r\n\t\t\t\t\t\tCommonLibrary.stockSaveOwnerInfo(self, _node, self.stockBuyOrders[_node][_maxPrice][0].amount, self.stockBuyOrders[_node][_maxPrice][0].client, msg.sender, _maxPrice);\r\n\t\t\t\t\t\t//transfer starcoins to seller\r\n\t\t\t\t\t\tself.balanceOf[msg.sender] += self.stockBuyOrders[_node][_maxPrice][0].amount*_maxPrice;// adds the amount to buyer's balance \r\n\t\t\t\t\t\tself.frozen[self.stockBuyOrders[_node][_maxPrice][0].client] -= self.stockBuyOrders[_node][_maxPrice][0].amount*_maxPrice;// subtracts amount from seller's frozen balance\r\n\t\t\t\t\t\tTransfer(self.stockBuyOrders[_node][_maxPrice][0].client, msg.sender, self.stockBuyOrders[_node][_maxPrice][0].amount*_maxPrice);\r\n\t\t\t\t\t\t//save the transaction\r\n\t\t\t\t\t\tStockTradeHistory(_node, block.timestamp, self.stockBuyOrders[_node][_maxPrice][0].client, msg.sender, \r\n\t\t\t\t\t\t_maxPrice, self.stockBuyOrders[_node][_maxPrice][0].amount, self.stockBuyOrders[_node][_maxPrice][0].orderId);\r\n\t\t\t\t\t\t_amount -= self.stockBuyOrders[_node][_maxPrice][0].amount;\r\n\t\t\t\t\t\t_results[0] += self.stockBuyOrders[_node][_maxPrice][0].amount;\r\n\t\t\t\t\t\t//delete stockBuyOrders[_node][_maxPrice][0] and move each element\r\n\t\t\t\t\t\tCommonLibrary.stockDeleteFirstOrder(self, _node, _maxPrice, false);\r\n\t\t\t\t\t\tif(_amount < 1) break;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t//edit stockBuyOrders[_node][_maxPrice][0]\r\n\t\t\t\t\t\tself.stockBuyOrders[_node][_maxPrice][0].amount -= _amount;\r\n\t\t\t\t\t\t//sell stocks for starcoins\r\n\t\t\t\t\t\tself.stockBalanceOf[msg.sender][_node] -= _amount;// subtracts _amount from seller's balance \r\n\t\t\t\t\t\tself.stockBalanceOf[self.stockBuyOrders[_node][_maxPrice][0].client][_node] += _amount;// adds the _amount to buyer's balance\r\n\t\t\t\t\t\t//write stockOwnerInfo and stockOwners for dividends\r\n\t\t\t\t\t\tCommonLibrary.stockSaveOwnerInfo(self, _node, _amount, self.stockBuyOrders[_node][_maxPrice][0].client, msg.sender, _maxPrice);\r\n\t\t\t\t\t\t//transfer starcoins to seller\r\n\t\t\t\t\t\tself.balanceOf[msg.sender] += _amount*_maxPrice;// adds the _amount to buyer's balance \r\n\t\t\t\t\t\tself.frozen[self.stockBuyOrders[_node][_maxPrice][0].client] -= _amount*_maxPrice;// subtracts _amount from seller's frozen balance\r\n\t\t\t\t\t\tTransfer(self.stockBuyOrders[_node][_maxPrice][0].client, msg.sender, _amount*_maxPrice);\r\n\t\t\t\t\t\t//save the transaction\r\n\t\t\t\t\t\tStockTradeHistory(_node, block.timestamp, self.stockBuyOrders[_node][_maxPrice][0].client, msg.sender, \r\n\t\t\t\t\t\t_maxPrice, _amount, self.stockBuyOrders[_node][_maxPrice][0].orderId);\r\n\t\t\t\t\t\t_results[0] += _amount;\r\n\t\t\t\t\t\t_amount = 0;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (_amount < 1) {\r\n\t\t\t\t\t_results[3] = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (CommonLibrary.stockMaxBuyPrice(self, _sellPrice, _node) == _sellPrice - 1 && _amount >= 1) {\r\n\t\t\t//save new order\r\n\t\t\t_results[1] =  _amount;\r\n\t\t\tself.stockOrdersId += 1;\r\n\t\t\t_results[2] = self.stockOrdersId;\r\n\t\t\tself.stockSellOrders[_node][_sellPrice].push(StarCoinLibrary.stockOrderInfo(block.timestamp, msg.sender, _results[1], _sellPrice, false, self.stockOrdersId, _node));\r\n\t\t    _results[3] = 1;\r\n\t\t\t//transfer stocks to the frozen stock balance\r\n\t\t\tself.stockFrozen[msg.sender][_node] += _amount;\r\n\t\t\tself.stockBalanceOf[msg.sender][_node] -= _amount;\r\n\t\t\t//Add _sellPrice to stockSellOrderPrices[_node][]\r\n\t\t\tit[0] = 99999;\r\n\t\t\tfor (it[1] = 0; it[1] < self.stockSellOrderPrices[_node].length; it[1]++) {\r\n\t\t\t\tif (self.stockSellOrderPrices[_node][it[1]] == _sellPrice) \r\n\t\t\t\t\tit[0] = it[1];\r\n\t\t\t}\r\n\t\t\tif (it[0] == 99999) \r\n\t\t\t\tself.stockSellOrderPrices[_node].push(_sellPrice);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction stockCancelBuyOrder(StarCoinLibrary.Data storage self, uint _node, uint _thisOrderID, uint _price) public returns(bool) {\r\n\t\tfor (uint iii = 0; iii < self.stockBuyOrders[_node][_price].length; iii++) {\r\n\t\t\tif (self.stockBuyOrders[_node][_price][iii].orderId == _thisOrderID) {\r\n\t\t\t\trequire(msg.sender == self.stockBuyOrders[_node][_price][iii].client);\r\n\t\t\t\t//return starcoins from the buyer`s frozen balance\r\n\t\t\t\tself.frozen[msg.sender] -= self.stockBuyOrders[_node][_price][iii].amount*_price;\r\n\t\t\t\tself.balanceOf[msg.sender] += self.stockBuyOrders[_node][_price][iii].amount*_price;\r\n\t\t\t\t//delete stockBuyOrders[_node][_price][iii] and move each element\r\n\t\t\t\tfor (uint ii = iii; ii < self.stockBuyOrders[_node][_price].length - 1; ii++) {\r\n\t\t\t\t\tself.stockBuyOrders[_node][_price][ii] = self.stockBuyOrders[_node][_price][ii + 1];\r\n\t\t\t\t}\r\n\t\t\t\tdelete self.stockBuyOrders[_node][_price][self.stockBuyOrders[_node][_price].length - 1];\r\n\t\t\t\tself.stockBuyOrders[_node][_price].length--;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//Delete _price from stockBuyOrderPrices[_node][] if it's the last order\r\n\t\tif (self.stockBuyOrders[_node][_price].length == 0) {\r\n\t\t\tuint _fromArg = 99999;\r\n\t\t\tfor (iii = 0; iii < self.stockBuyOrderPrices[_node].length - 1; iii++) {\r\n\t\t\t\tif (self.stockBuyOrderPrices[_node][iii] == _price) {\r\n\t\t\t\t\t_fromArg = iii;\r\n\t\t\t\t}\r\n\t\t\t\tif (_fromArg != 99999 && iii >= _fromArg) self.stockBuyOrderPrices[_node][iii] = self.stockBuyOrderPrices[_node][iii + 1];\r\n\t\t\t}\r\n\t\t\tdelete self.stockBuyOrderPrices[_node][self.stockBuyOrderPrices[_node].length-1];\r\n\t\t\tself.stockBuyOrderPrices[_node].length--;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction stockCancelSellOrder(StarCoinLibrary.Data storage self, uint _node, uint _thisOrderID, uint _price) public returns(bool) {\r\n\t\tfor (uint iii = 0; iii < self.stockSellOrders[_node][_price].length; iii++) {\r\n\t\t\tif (self.stockSellOrders[_node][_price][iii].orderId == _thisOrderID) {\r\n\t\t\t\trequire(msg.sender == self.stockSellOrders[_node][_price][iii].client);\r\n\t\t\t\t//return stocks from the seller`s frozen stock balance\r\n\t\t\t\tself.stockFrozen[msg.sender][_node] -= self.stockSellOrders[_node][_price][iii].amount;\r\n\t\t\t\tself.stockBalanceOf[msg.sender][_node] += self.stockSellOrders[_node][_price][iii].amount;\r\n\t\t\t\t//delete stockSellOrders[_node][_price][iii] and move each element\r\n\t\t\t\tfor (uint ii = iii; ii < self.stockSellOrders[_node][_price].length - 1; ii++) {\r\n\t\t\t\t\tself.stockSellOrders[_node][_price][ii] = self.stockSellOrders[_node][_price][ii + 1];\r\n\t\t\t\t}\r\n\t\t\t\tdelete self.stockSellOrders[_node][_price][self.stockSellOrders[_node][_price].length - 1];\r\n\t\t\t\tself.stockSellOrders[_node][_price].length--;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//Delete _price from stockSellOrderPrices[_node][] if it's the last order\r\n\t\tif (self.stockSellOrders[_node][_price].length == 0) {\r\n\t\t\tuint _fromArg = 99999;\r\n\t\t\tfor (iii = 0; iii < self.stockSellOrderPrices[_node].length - 1; iii++) {\r\n\t\t\t\tif (self.stockSellOrderPrices[_node][iii] == _price) {\r\n\t\t\t\t\t_fromArg = iii;\r\n\t\t\t\t}\r\n\t\t\t\tif (_fromArg != 99999 && iii >= _fromArg) self.stockSellOrderPrices[_node][iii] = self.stockSellOrderPrices[_node][iii + 1];\r\n\t\t\t}\r\n\t\t\tdelete self.stockSellOrderPrices[_node][self.stockSellOrderPrices[_node].length-1];\r\n\t\t\tself.stockSellOrderPrices[_node].length--;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\nlibrary StarmidLibraryExtra {\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent StockTransfer(address indexed from, address indexed to, uint indexed node, uint256 value);\r\n\tevent StockTradeHistory(uint node, uint date, address buyer, address seller, uint price, uint amount, uint orderId);\r\n\tevent TradeHistory(uint date, address buyer, address seller, uint price, uint amount, uint orderId);\r\n\t\r\n\tfunction buyCertainOrder(StarCoinLibrary.Data storage self, uint _price, uint _thisOrderID) returns (bool) {\r\n\t\tuint _remainingValue = msg.value;\r\n\t\tfor (uint8 iii = 0; iii < self.sellOrders[_price].length; iii++) {\r\n\t\t\tif (self.sellOrders[_price][iii].orderId == _thisOrderID) {\r\n\t\t\t\tuint _amount = _remainingValue/_price;\r\n\t\t\t\trequire(_amount <= self.sellOrders[_price][iii].amount);\r\n\t\t\t\tif (_amount == self.sellOrders[_price][iii].amount) {\r\n\t\t\t\t\t//buy starcoins for ether\r\n\t\t\t\t\tself.balanceOf[msg.sender] += self.sellOrders[_price][iii].amount;// adds the amount to buyer's balance\r\n\t\t\t\t\tself.frozen[self.sellOrders[_price][iii].client] -= self.sellOrders[_price][iii].amount;// subtracts the amount from seller's frozen balance\r\n\t\t\t\t\tTransfer(self.sellOrders[_price][iii].client, msg.sender, self.sellOrders[_price][iii].amount);\r\n\t\t\t\t\t//transfer ether to seller\r\n\t\t\t\t\tself.pendingWithdrawals[self.sellOrders[_price][iii].client] += _price*self.sellOrders[_price][iii].amount;\r\n\t\t\t\t\t//save the transaction\r\n\t\t\t\t\tTradeHistory(block.timestamp, msg.sender, self.sellOrders[_price][iii].client, _price, self.sellOrders[_price][iii].amount, \r\n\t\t\t\t\tself.sellOrders[_price][iii].orderId);\r\n\t\t\t\t\t_remainingValue -= _price*self.sellOrders[_price][iii].amount;\r\n\t\t\t\t\t//delete sellOrders[_price][iii] and move each element\r\n\t\t\t\t\tfor (uint ii = iii; ii < self.sellOrders[_price].length - 1; ii++) {\r\n\t\t\t\t\t\tself.sellOrders[_price][ii] = self.sellOrders[_price][ii + 1];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete self.sellOrders[_price][self.sellOrders[_price].length - 1];\r\n\t\t\t\t\tself.sellOrders[_price].length--;\r\n\t\t\t\t\t//Delete _price from sellOrderPrices[] if it's the last order\r\n\t\t\t\t\tif (self.sellOrders[_price].length == 0) {\r\n\t\t\t\t\t\tuint fromArg = 99999;\r\n\t\t\t\t\t\tfor (ii = 0; ii < self.sellOrderPrices.length - 1; ii++) {\r\n\t\t\t\t\t\t\tif (self.sellOrderPrices[ii] == _price) {\r\n\t\t\t\t\t\t\t\tfromArg = ii;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (fromArg != 99999 && ii >= fromArg) \r\n\t\t\t\t\t\t\t\tself.sellOrderPrices[ii] = self.sellOrderPrices[ii + 1];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdelete self.sellOrderPrices[self.sellOrderPrices.length-1];\r\n\t\t\t\t\t\tself.sellOrderPrices.length--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//edit sellOrders[_price][iii]\r\n\t\t\t\t\tself.sellOrders[_price][iii].amount = self.sellOrders[_price][iii].amount - _amount;\r\n\t\t\t\t\t//buy starcoins for ether\r\n\t\t\t\t\tself.balanceOf[msg.sender] += _amount;// adds the _amount to buyer's balance\r\n\t\t\t\t\tself.frozen[self.sellOrders[_price][iii].client] -= _amount;// subtracts the _amount from seller's frozen balance\r\n\t\t\t\t\tTransfer(self.sellOrders[_price][iii].client, msg.sender, _amount);\r\n\t\t\t\t\t//save the transaction\r\n\t\t\t\t\tTradeHistory(block.timestamp, msg.sender, self.sellOrders[_price][iii].client, _price, _amount, self.sellOrders[_price][iii].orderId);\r\n\t\t\t\t\t//transfer ether to seller\r\n\t\t\t\t\tself.pendingWithdrawals[self.sellOrders[_price][iii].client] += _amount*_price;\r\n\t\t\t\t\t_remainingValue -= _amount*_price;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tself.pendingWithdrawals[msg.sender] += _remainingValue;//returns change to buyer\t\t\t\t\r\n\t}\r\n\t\r\n\tfunction sellCertainOrder(StarCoinLibrary.Data storage self, uint _amount, uint _price, uint _thisOrderID) returns (bool) {\r\n\t\tfor (uint8 iii = 0; iii < self.buyOrders[_price].length; iii++) {\r\n\t\t\tif (self.buyOrders[_price][iii].orderId == _thisOrderID) {\r\n\t\t\t\trequire(_amount <= self.buyOrders[_price][iii].amount && self.balanceOf[msg.sender] >= _amount);\r\n\t\t\t\tif (_amount == self.buyOrders[_price][iii].amount) {\r\n\t\t\t\t\t//sell starcoins for ether\r\n\t\t\t\t\tself.balanceOf[msg.sender] -= self.buyOrders[_price][iii].amount;// subtracts amount from seller's balance\r\n\t\t\t\t\tself.balanceOf[self.buyOrders[_price][iii].client] += self.buyOrders[_price][iii].amount;// adds the amount to buyer's balance\r\n\t\t\t\t\tTransfer(msg.sender, self.buyOrders[_price][iii].client, self.buyOrders[_price][iii].amount);\r\n\t\t\t\t\t//transfer ether to seller\r\n\t\t\t\t\tuint _amountTransfer = _price*self.buyOrders[_price][iii].amount;\r\n\t\t\t\t\tself.pendingWithdrawals[msg.sender] += _amountTransfer;\r\n\t\t\t\t\t//save the transaction\r\n\t\t\t\t\tTradeHistory(block.timestamp, self.buyOrders[_price][iii].client, msg.sender, _price, self.buyOrders[_price][iii].amount, \r\n\t\t\t\t\tself.buyOrders[_price][iii].orderId);\r\n\t\t\t\t\t_amount -= self.buyOrders[_price][iii].amount;\r\n\t\t\t\t\t//delete buyOrders[_price][iii] and move each element\r\n\t\t\t\t\tfor (uint ii = iii; ii < self.buyOrders[_price].length - 1; ii++) {\r\n\t\t\t\t\t\tself.buyOrders[_price][ii] = self.buyOrders[_price][ii + 1];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete self.buyOrders[_price][self.buyOrders[_price].length - 1];\r\n\t\t\t\t\tself.buyOrders[_price].length--;\r\n\t\t\t\t\t//Delete _price from buyOrderPrices[] if it's the last order\r\n\t\t\t\t\tif (self.buyOrders[_price].length == 0) {\r\n\t\t\t\t\t\tuint _fromArg = 99999;\r\n\t\t\t\t\t\tfor (uint8 iiii = 0; iiii < self.buyOrderPrices.length - 1; iiii++) {\r\n\t\t\t\t\t\t\tif (self.buyOrderPrices[iiii] == _price) {\r\n\t\t\t\t\t\t\t\t_fromArg = iiii;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (_fromArg != 99999 && iiii >= _fromArg) self.buyOrderPrices[iiii] = self.buyOrderPrices[iiii + 1];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdelete self.buyOrderPrices[self.buyOrderPrices.length-1];\r\n\t\t\t\t\t\tself.buyOrderPrices.length--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//edit buyOrders[_price][iii]\r\n\t\t\t\t\tself.buyOrders[_price][iii].amount = self.buyOrders[_price][iii].amount - _amount;\r\n\t\t\t\t\t//buy starcoins for ether\r\n\t\t\t\t\tself.balanceOf[msg.sender] -= _amount;// subtracts amount from seller's balance\r\n\t\t\t\t\tself.balanceOf[self.buyOrders[_price][iii].client] += _amount;// adds the amount to buyer's balance \r\n\t\t\t\t\tTransfer(msg.sender, self.buyOrders[_price][iii].client, _amount);\r\n\t\t\t\t\t//save the transaction\r\n\t\t\t\t\tTradeHistory(block.timestamp, self.buyOrders[_price][iii].client, msg.sender, _price, _amount, self.buyOrders[_price][iii].orderId);\r\n\t\t\t\t\t//transfer ether to seller\r\n\t\t\t\t\tself.pendingWithdrawals[msg.sender] += _price*_amount;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction stockBuyCertainOrder(StarCoinLibrary.Data storage self, uint _node, uint _price, uint _amount, uint _thisOrderID) returns (bool) {\r\n\t\trequire(self.balanceOf[msg.sender] >= _price*_amount);\r\n\t\tfor (uint8 iii = 0; iii < self.stockSellOrders[_node][_price].length; iii++) {\r\n\t\t\tif (self.stockSellOrders[_node][_price][iii].orderId == _thisOrderID) {\r\n\t\t\t\trequire(_amount <= self.stockSellOrders[_node][_price][iii].amount);\r\n\t\t\t\tif (_amount == self.stockSellOrders[_node][_price][iii].amount) {\r\n\t\t\t\t\t//buy stocks for starcoins\r\n\t\t\t\t\tself.stockBalanceOf[msg.sender][_node] += self.stockSellOrders[_node][_price][iii].amount;// add the amount to buyer's balance\r\n\t\t\t\t\tself.stockFrozen[self.stockSellOrders[_node][_price][iii].client][_node] -= self.stockSellOrders[_node][_price][iii].amount;// subtracts amount from seller's frozen stock balance\r\n\t\t\t\t\t//write stockOwnerInfo and stockOwners for dividends\r\n\t\t\t\t\tCommonLibrary.stockSaveOwnerInfo(self, _node, self.stockSellOrders[_node][_price][iii].amount, msg.sender, self.stockSellOrders[_node][_price][iii].client, _price);\r\n\t\t\t\t\t//transfer starcoins to seller\r\n\t\t\t\t\tself.balanceOf[msg.sender] -= self.stockSellOrders[_node][_price][iii].amount*_price;// subtracts amount from buyer's balance\r\n\t\t\t\t\tself.balanceOf[self.stockSellOrders[_node][_price][iii].client] += self.stockSellOrders[_node][_price][iii].amount*_price;// adds the amount to seller's balance\r\n\t\t\t\t\tTransfer(self.stockSellOrders[_node][_price][iii].client, msg.sender, self.stockSellOrders[_node][_price][iii].amount*_price);\r\n\t\t\t\t\t//save the transaction into event StocksTradeHistory;\r\n\t\t\t\t\tStockTradeHistory(_node, block.timestamp, msg.sender, self.stockSellOrders[_node][_price][iii].client, _price, \r\n\t\t\t\t\tself.stockSellOrders[_node][_price][iii].amount, self.stockSellOrders[_node][_price][iii].orderId);\r\n\t\t\t\t\t_amount -= self.stockSellOrders[_node][_price][iii].amount;\r\n\t\t\t\t\t//delete stockSellOrders[_node][_price][iii] and move each element\r\n\t\t\t\t\tCommonLibrary.deleteStockSellOrder(self, iii, _node, _price);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//edit stockSellOrders[_node][_price][iii]\r\n\t\t\t\t\tself.stockSellOrders[_node][_price][iii].amount -= _amount;\r\n\t\t\t\t\t//buy stocks for starcoins\r\n\t\t\t\t\tself.stockBalanceOf[msg.sender][_node] += _amount;// adds the amount to buyer's balance\r\n\t\t\t\t\tself.stockFrozen[self.stockSellOrders[_node][_price][iii].client][_node] -= _amount;// subtracts amount from seller's frozen stock balance\r\n\t\t\t\t\t//write stockOwnerInfo and stockOwners for dividends\r\n\t\t\t\t\tCommonLibrary.stockSaveOwnerInfo(self, _node, _amount, msg.sender, self.stockSellOrders[_node][_price][iii].client, _price);\r\n\t\t\t\t\t//transfer starcoins to seller\r\n\t\t\t\t\tself.balanceOf[msg.sender] -= _amount*_price;// subtracts amount from buyer's balance\r\n\t\t\t\t\tself.balanceOf[self.stockSellOrders[_node][_price][iii].client] += _amount*_price;// adds the amount to seller's balance\r\n\t\t\t\t\tTransfer(self.stockSellOrders[_node][_price][iii].client, msg.sender, _amount*_price);\r\n\t\t\t\t\t//save the transaction  into event StocksTradeHistory;\r\n\t\t\t\t\tStockTradeHistory(_node, block.timestamp, msg.sender, self.stockSellOrders[_node][_price][iii].client, _price, \r\n\t\t\t\t\t_amount, self.stockSellOrders[_node][_price][iii].orderId);\r\n\t\t\t\t\t_amount = 0;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction stockSellCertainOrder(StarCoinLibrary.Data storage self, uint _node, uint _price, uint _amount, uint _thisOrderID) returns (bool results) {\r\n\t\tuint _remainingAmount = _amount;\r\n\t\tfor (uint8 iii = 0; iii < self.stockBuyOrders[_node][_price].length; iii++) {\r\n\t\t\tif (self.stockBuyOrders[_node][_price][iii].orderId == _thisOrderID) {\r\n\t\t\t\trequire(_amount <= self.stockBuyOrders[_node][_price][iii].amount && self.stockBalanceOf[msg.sender][_node] >= _amount);\r\n\t\t\t\tif (_remainingAmount == self.stockBuyOrders[_node][_price][iii].amount) {\r\n\t\t\t\t\t//sell stocks for starcoins\r\n\t\t\t\t\tself.stockBalanceOf[msg.sender][_node] -= self.stockBuyOrders[_node][_price][iii].amount;// subtracts amount from seller's balance \r\n\t\t\t\t\tself.stockBalanceOf[self.stockBuyOrders[_node][_price][iii].client][_node] += self.stockBuyOrders[_node][_price][iii].amount;// adds the amount to buyer's balance\r\n\t\t\t\t\t//write stockOwnerInfo and stockOwners for dividends\r\n\t\t\t\t\tCommonLibrary.stockSaveOwnerInfo(self, _node, self.stockBuyOrders[_node][_price][iii].amount, self.stockBuyOrders[_node][_price][iii].client, msg.sender, _price);\r\n\t\t\t\t\t//transfer starcoins to seller\r\n\t\t\t\t\tself.balanceOf[msg.sender] += self.stockBuyOrders[_node][_price][iii].amount*_price;// adds the amount to buyer's balance \r\n\t\t\t\t\tself.frozen[self.stockBuyOrders[_node][_price][iii].client] -= self.stockBuyOrders[_node][_price][iii].amount*_price;// subtracts amount from seller's frozen balance\r\n\t\t\t\t\tTransfer(self.stockBuyOrders[_node][_price][iii].client, msg.sender, self.stockBuyOrders[_node][_price][iii].amount*_price);\r\n\t\t\t\t\t//save the transaction\r\n\t\t\t\t\tStockTradeHistory(_node, block.timestamp, self.stockBuyOrders[_node][_price][iii].client, msg.sender, \r\n\t\t\t\t\t_price, self.stockBuyOrders[_node][_price][iii].amount, self.stockBuyOrders[_node][_price][iii].orderId);\r\n\t\t\t\t\t_amount -= self.stockBuyOrders[_node][_price][iii].amount;\r\n\t\t\t\t\t//delete stockBuyOrders[_node][_price][iii] and move each element\r\n\t\t\t\t\tCommonLibrary.deleteStockBuyOrder(self, iii, _node, _price);\r\n\t\t\t\t\tresults = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//edit stockBuyOrders[_node][_price][0]\r\n\t\t\t\t\tself.stockBuyOrders[_node][_price][iii].amount -= _amount;\r\n\t\t\t\t\t//sell stocks for starcoins\r\n\t\t\t\t\tself.stockBalanceOf[msg.sender][_node] -= _amount;// subtracts amount from seller's balance \r\n\t\t\t\t\tself.stockBalanceOf[self.stockBuyOrders[_node][_price][iii].client][_node] += _amount;// adds the amount to buyer's balance\r\n\t\t\t\t\t//write stockOwnerInfo and stockOwners for dividends\r\n\t\t\t\t\tCommonLibrary.stockSaveOwnerInfo(self, _node, _amount, self.stockBuyOrders[_node][_price][iii].client, msg.sender, _price);\r\n\t\t\t\t\t//transfer starcoins to seller\r\n\t\t\t\t\tself.balanceOf[msg.sender] += _amount*_price;// adds the amount to buyer's balance \r\n\t\t\t\t\tself.frozen[self.stockBuyOrders[_node][_price][iii].client] -= _amount*_price;// subtracts amount from seller's frozen balance\r\n\t\t\t\t\tTransfer(self.stockBuyOrders[_node][_price][iii].client, msg.sender, _amount*_price);\r\n\t\t\t\t\t//save the transaction\r\n\t\t\t\t\tStockTradeHistory(_node, block.timestamp, self.stockBuyOrders[_node][_price][iii].client, msg.sender, \r\n\t\t\t\t\t_price, _amount, self.stockBuyOrders[_node][_price][iii].orderId);\r\n\t\t\t\t\t_amount = 0;\r\n\t\t\t\t\tresults = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\t\t}\r\n\t}\t\r\n}\r\n\r\n\r\ncontract Nodes {\r\n\taddress public owner;\r\n\tCommonLibrary.Data public vars;\r\n\tmapping (address => string) public confirmationNodes;\r\n\tuint confirmNodeId;\r\n\tuint40 changePercentId;\r\n\tuint40 pushNodeGroupId;\r\n\tuint40 deleteNodeGroupId;\r\n\tevent NewNode(\r\n\t\tuint256 id, \r\n\t\tstring nodeName, \r\n\t\tuint8 producersPercent, \r\n\t\taddress producer, \r\n\t\tuint date\r\n\t\t);\r\n\tevent OwnerNotation(uint256 id, uint date, string newNotation);\r\n\tevent NewNodeGroup(uint16 id, string newNodeGroup);\r\n\tevent AddNodeAddress(uint id, uint nodeID, address nodeAdress);\r\n\tevent EditNode(\r\n\t\tuint nodeID,\r\n\t\taddress nodeAdress, \r\n\t\taddress newProducer, \r\n\t\tuint8 newProducersPercent,\r\n\t\tbool starmidConfirmed\r\n\t\t);\r\n\tevent ConfirmNode(uint id, uint nodeID);\r\n\tevent OutsourceConfirmNode(uint nodeID, address confirmationNode);\r\n\tevent ChangePercent(uint id, uint nodeId, uint producersPercent);\r\n\tevent PushNodeGroup(uint id, uint nodeId, uint newNodeGroup);\r\n\tevent DeleteNodeGroup(uint id, uint nodeId, uint deleteNodeGroup);\r\n\t\r\n\tfunction Nodes() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\t\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\t\r\n\t//-----------------------------------------------------Nodes---------------------------------------------------------------\r\n\tfunction changeOwner(string _changeOwnerPassword, address _newOwnerAddress) onlyOwner returns(bool) {\r\n\t\t//One-time tool for emergency owner change\r\n\t\tif (keccak256(_changeOwnerPassword) == 0xe17a112b6fc12fc80c9b241de72da0d27ce7e244100f3c4e9358162a11bed629) {\r\n\t\t\towner = _newOwnerAddress;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse \r\n\t\t\treturn false;\r\n\t}\r\n\t\r\n\tfunction addOwnerNotations(string _newNotation) onlyOwner {\r\n\t\tuint date = block.timestamp;\r\n\t\tvars.ownerNotationId += 1;\r\n\t\tOwnerNotation(vars.ownerNotationId, date, _newNotation);\r\n\t}\r\n\t\r\n\tfunction addConfirmationNode(string _newConfirmationNode) public returns(bool) {\r\n\t\tconfirmationNodes[msg.sender] = _newConfirmationNode;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction addNodeGroup(string _newNodeGroup) onlyOwner returns(uint16 _id) {\r\n\t\tbool result;\r\n\t\t(result, _id) = CommonLibrary.addNodeGroup(vars, _newNodeGroup);\r\n\t\trequire(result);\r\n\t\tNewNodeGroup(_id, _newNodeGroup);\r\n\t}\r\n\t\r\n\tfunction addNode(string _newNode, uint8 _producersPercent) returns(bool) {\r\n\t\tbool result;\r\n\t\tuint _id;\r\n\t\t(result, _id) = CommonLibrary.addNode(vars, _newNode, _producersPercent);\r\n\t\trequire(result);\r\n\t\tNewNode(_id, _newNode, _producersPercent, msg.sender, block.timestamp);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction editNode(\r\n\t\tuint _nodeID, \r\n\t\taddress _nodeAddress, \r\n\t\tbool _isNewProducer, \r\n\t\taddress _newProducer, \r\n\t\tuint8 _newProducersPercent,\r\n\t\tbool _starmidConfirmed\r\n\t\t) onlyOwner returns(bool) {\r\n\t\tbool x = CommonLibrary.editNode(vars, _nodeID, _nodeAddress,_isNewProducer, _newProducer, _newProducersPercent, _starmidConfirmed);\r\n\t\trequire(x);\r\n\t\tEditNode(_nodeID, _nodeAddress, _newProducer, _newProducersPercent, _starmidConfirmed);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t\r\n\tfunction addNodeAddress(uint _nodeID, address _nodeAddress) public returns(bool) {\r\n\t\tbool _result;\r\n\t\tuint _id;\r\n\t\t(_result, _id) = CommonLibrary.addNodeAddress(vars, _nodeID, _nodeAddress);\r\n\t\trequire(_result);\r\n\t\tAddNodeAddress(_id, _nodeID, _nodeAddress);\r\n\t\treturn true; \r\n\t}\r\n\t\r\n\tfunction pushNodeGroup(uint _nodeID, uint16 _newNodeGroup) public returns(bool) {\r\n\t\trequire(msg.sender == vars.nodes[_nodeID].node);\r\n\t\tvars.nodes[_nodeID].nodeGroup.push(_newNodeGroup);\r\n\t\tpushNodeGroupId += 1;\r\n\t\tPushNodeGroup(pushNodeGroupId, _nodeID, _newNodeGroup);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction deleteNodeGroup(uint _nodeID, uint16 _deleteNodeGroup) public returns(bool) {\r\n\t\trequire(msg.sender == vars.nodes[_nodeID].node);\r\n\t\tfor(uint16 i = 0; i < vars.nodes[_nodeID].nodeGroup.length; i++) {\r\n\t\t\tif(_deleteNodeGroup == vars.nodes[_nodeID].nodeGroup[i]) {\r\n\t\t\t\tfor(uint16 ii = i; ii < vars.nodes[_nodeID].nodeGroup.length - 1; ii++) \r\n\t\t\t\t\tvars.nodes[_nodeID].nodeGroup[ii] = vars.nodes[_nodeID].nodeGroup[ii + 1];\r\n\t\t    \tdelete vars.nodes[_nodeID].nodeGroup[vars.nodes[_nodeID].nodeGroup.length - 1];\r\n\t\t\t\tvars.nodes[_nodeID].nodeGroup.length--;\r\n\t\t\t\tbreak;\r\n\t\t    }\r\n\t    }\r\n\t\tdeleteNodeGroupId += 1;\r\n\t\tDeleteNodeGroup(deleteNodeGroupId, _nodeID, _deleteNodeGroup);\r\n\t\treturn true;\r\n    }\r\n\t\r\n\tfunction confirmNode(uint _nodeID) onlyOwner returns(bool) {\r\n\t\tvars.nodes[_nodeID].starmidConfirmed = true;\r\n\t\tconfirmNodeId += 1;\r\n\t\tConfirmNode(confirmNodeId, _nodeID);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction outsourceConfirmNode(uint _nodeID) public returns(bool) {\r\n\t\tvars.nodes[_nodeID].outsourceConfirmed.push(msg.sender);\r\n\t\tOutsourceConfirmNode(_nodeID, msg.sender);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction changePercent(uint _nodeId, uint8 _producersPercent) public returns(bool){\r\n\t\tif(msg.sender == vars.nodes[_nodeId].producer && vars.nodes[_nodeId].node == 0x0000000000000000000000000000000000000000) {\r\n\t\t\tvars.nodes[_nodeId].producersPercent = _producersPercent;\r\n\t\t\tchangePercentId += 1;\r\n\t\t\tChangePercent(changePercentId, _nodeId, _producersPercent);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction getNodeInfo(uint _nodeID) constant public returns(\r\n\t\taddress _producer, \r\n\t\taddress _node, \r\n\t\tuint _date, \r\n\t\tbool _starmidConfirmed, \r\n\t\tstring _nodeName, \r\n\t\taddress[] _outsourceConfirmed, \r\n\t\tuint16[] _nodeGroup, \r\n\t\tuint _producersPercent\r\n\t\t) {\r\n\t\t_producer = vars.nodes[_nodeID].producer;\r\n\t\t_node = vars.nodes[_nodeID].node;\r\n\t\t_date = vars.nodes[_nodeID].date;\r\n\t\t_starmidConfirmed = vars.nodes[_nodeID].starmidConfirmed;\r\n\t\t_nodeName = vars.nodes[_nodeID].nodeName;\r\n\t\t_outsourceConfirmed = vars.nodes[_nodeID].outsourceConfirmed;\r\n\t\t_nodeGroup = vars.nodes[_nodeID].nodeGroup;\r\n\t\t_producersPercent = vars.nodes[_nodeID].producersPercent;\r\n\t}\r\n}\t\r\n\r\n\r\ncontract Starmid {\r\n\taddress public owner;\r\n\tNodes public nodesVars;\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals;\r\n\tuint256 public totalSupply;\r\n\tStarCoinLibrary.Data public sCVars;\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent BuyOrder(address indexed from, uint orderId, uint buyPrice);\r\n\tevent SellOrder(address indexed from, uint orderId, uint sellPrice);\r\n\tevent CancelBuyOrder(address indexed from, uint indexed orderId, uint price);\r\n\tevent CancelSellOrder(address indexed from, uint indexed orderId, uint price);\r\n\tevent TradeHistory(uint date, address buyer, address seller, uint price, uint amount, uint orderId);\r\n    //----------------------------------------------------Starmid exchange\r\n\tevent StockTransfer(address indexed from, address indexed to, uint indexed node, uint256 value);\r\n\tevent StockBuyOrder(uint node, uint buyPrice);\r\n\tevent StockSellOrder(uint node, uint sellPrice);\r\n\tevent StockCancelBuyOrder(uint node, uint price);\r\n\tevent StockCancelSellOrder(uint node, uint price);\r\n\tevent StockTradeHistory(uint node, uint date, address buyer, address seller, uint price, uint amount, uint orderId);\r\n\t\r\n\tfunction Starmid(uint256 initialSupply, string tokenName, string tokenSymbol, uint8 decimalUnits) public {\r\n\t\towner = 0x378B9eea7ab9C15d9818EAdDe1156A079Cd02ba8;\r\n\t\ttotalSupply = initialSupply;  \r\n\t\tsCVars.balanceOf[msg.sender] = 5000000000;\r\n\t\tsCVars.balanceOf[0x378B9eea7ab9C15d9818EAdDe1156A079Cd02ba8] = initialSupply - 5000000000;                \r\n\t\tname = tokenName;                                   \r\n\t\tsymbol = tokenSymbol;                               \r\n\t\tdecimals = decimalUnits; \r\n\t\tsCVars.lastMint = block.timestamp;\r\n\t\tsCVars.emissionLimits[1] = 500000; sCVars.emissionLimits[2] = 500000; sCVars.emissionLimits[3] = 500000;\r\n\t\tsCVars.emissionLimits[4] = 500000; sCVars.emissionLimits[5] = 500000; sCVars.emissionLimits[6] = 500000;\r\n\t}\r\n\t\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\t//-----------------------------------------------------StarCoin Exchange------------------------------------------------------\r\n\tfunction getWithdrawal() constant public returns(uint _amount) {\r\n        _amount = sCVars.pendingWithdrawals[msg.sender];\r\n    }\r\n\t\r\n\tfunction withdraw() public returns(bool _result, uint _amount) {\r\n        _amount = sCVars.pendingWithdrawals[msg.sender];\r\n        sCVars.pendingWithdrawals[msg.sender] = 0;\r\n        msg.sender.transfer(_amount);\r\n\t\t_result = true;\r\n    }\r\n\t\r\n\tfunction changeOwner(string _changeOwnerPassword, address _newOwnerAddress) onlyOwner returns(bool) {\r\n\t\t//One-time tool for emergency owner change\r\n\t\tif (keccak256(_changeOwnerPassword) == 0xe17a112b6fc12fc80c9b241de72da0d27ce7e244100f3c4e9358162a11bed629) {\r\n\t\t\towner = _newOwnerAddress;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse \r\n\t\t\treturn false;\r\n\t}\r\n\t\r\n\tfunction setNodesVars(address _addr) public {\r\n\t    require(msg.sender == 0xfCbA69eF1D63b0A4CcD9ceCeA429157bA48d6a9c);\r\n\t\tnodesVars = Nodes(_addr);\r\n\t}\r\n\t\r\n\tfunction getBalance(address _address) constant public returns(uint _balance) {\r\n\t\t_balance = sCVars.balanceOf[_address];\r\n\t}\r\n\t\r\n\tfunction getBuyOrderPrices() constant public returns(uint[] _prices) {\r\n\t\t_prices = sCVars.buyOrderPrices;\r\n\t}\r\n\t\r\n\tfunction getSellOrderPrices() constant public returns(uint[] _prices) {\r\n\t\t_prices = sCVars.sellOrderPrices;\r\n\t}\r\n\t\r\n\tfunction getOrderInfo(bool _isBuyOrder, uint _price, uint _number) constant public returns(address _address, uint _amount, uint _orderId) {\r\n\t\tif(_isBuyOrder == true) {\r\n\t\t\t_address = sCVars.buyOrders[_price][_number].client;\r\n\t\t\t_amount = sCVars.buyOrders[_price][_number].amount;\r\n\t\t\t_orderId = sCVars.buyOrders[_price][_number].orderId;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t_address = sCVars.sellOrders[_price][_number].client;\r\n\t\t\t_amount = sCVars.sellOrders[_price][_number].amount;\r\n\t\t\t_orderId = sCVars.sellOrders[_price][_number].orderId;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction transfer(address _to, uint256 _value) public {\r\n\t\t_transfer(msg.sender, _to, _value);\r\n\t}\r\n\t\r\n\tfunction mint() public onlyOwner returns(uint _mintedAmount) {\r\n\t\t//Minted amount does not exceed 8,5% per annum. Thus, minting does not greatly increase the total supply \r\n\t\t//and does not cause significant inflation and depreciation of the starcoin.\r\n\t\t_mintedAmount = (block.timestamp - sCVars.lastMint)*totalSupply/(12*31536000);//31536000 seconds in year\r\n\t\tsCVars.balanceOf[msg.sender] += _mintedAmount;\r\n\t\ttotalSupply += _mintedAmount;\r\n\t\tsCVars.lastMint = block.timestamp;\r\n\t\tTransfer(0, this, _mintedAmount);\r\n\t\tTransfer(this, msg.sender, _mintedAmount);\r\n\t}\r\n\t\r\n\tfunction buyOrder(uint256 _buyPrice) payable public returns (uint[4] _results) {\r\n\t\trequire(_buyPrice > 0 && msg.value > 0);\r\n\t\t_results = StarCoinLibrary.buyOrder(sCVars, _buyPrice);\r\n\t\trequire(_results[3] == 1);\r\n\t\tBuyOrder(msg.sender, _results[2], _buyPrice);\r\n\t}\r\n\t\r\n\tfunction sellOrder(uint256 _sellPrice, uint _amount) public returns (uint[4] _results) {\r\n\t\trequire(_sellPrice > 0 && _amount > 0);\r\n\t\t_results = StarCoinLibrary.sellOrder(sCVars, _sellPrice, _amount);\r\n\t\trequire(_results[3] == 1);\r\n\t\tSellOrder(msg.sender, _results[2], _sellPrice);\r\n\t}\r\n\t\r\n\tfunction cancelBuyOrder(uint _thisOrderID, uint _price) public {\r\n\t\trequire(StarCoinLibrary.cancelBuyOrder(sCVars, _thisOrderID, _price));\r\n\t\tCancelBuyOrder(msg.sender, _thisOrderID, _price);\r\n\t}\r\n\t\r\n\tfunction cancelSellOrder(uint _thisOrderID, uint _price) public {\r\n\t\trequire(StarCoinLibrary.cancelSellOrder(sCVars, _thisOrderID, _price));\r\n\t\tCancelSellOrder(msg.sender, _thisOrderID, _price);\r\n\t}\r\n\t\r\n\tfunction _transfer(address _from, address _to, uint _value) internal {\r\n\t\trequire(_to != 0x0);\r\n        require(sCVars.balanceOf[_from] >= _value && sCVars.balanceOf[_to] + _value > sCVars.balanceOf[_to]);\r\n        sCVars.balanceOf[_from] -= _value;\r\n        sCVars.balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n\t}\r\n\t\r\n\tfunction buyCertainOrder(uint _price, uint _thisOrderID) payable public returns (bool _results) {\r\n\t\t_results = StarmidLibraryExtra.buyCertainOrder(sCVars, _price, _thisOrderID);\r\n\t\trequire(_results && msg.value > 0);\r\n\t\tBuyOrder(msg.sender, _thisOrderID, _price);\r\n\t}\r\n\t\r\n\tfunction sellCertainOrder(uint _amount, uint _price, uint _thisOrderID) public returns (bool _results) {\r\n\t\t_results = StarmidLibraryExtra.sellCertainOrder(sCVars, _amount, _price, _thisOrderID);\r\n\t\trequire(_results && _amount > 0);\r\n\t\tSellOrder(msg.sender, _thisOrderID, _price);\r\n\t}\r\n\t//------------------------------------------------------Starmid exchange----------------------------------------------------------\r\n\tfunction stockTransfer(address _to, uint _node, uint _value) public {\r\n\t\trequire(_to != 0x0);\r\n        require(sCVars.stockBalanceOf[msg.sender][_node] >= _value && sCVars.stockBalanceOf[_to][_node] + _value > sCVars.stockBalanceOf[_to][_node]);\r\n\t\tvar (x,y,) = nodesVars.getNodeInfo(_node);\r\n\t\trequire(msg.sender != y);//nodeOwner cannot transfer his stocks, only sell\r\n\t\tsCVars.stockBalanceOf[msg.sender][_node] -= _value;\r\n        sCVars.stockBalanceOf[_to][_node] += _value;\r\n        StockTransfer(msg.sender, _to, _node, _value);\r\n\t}\r\n\t\r\n\tfunction getEmission(uint _node) constant public returns(uint _emissionNumber, uint _emissionDate, uint _emissionAmount) {\r\n\t\t_emissionNumber = sCVars.emissions[_node].emissionNumber;\r\n\t\t_emissionDate = sCVars.emissions[_node].date;\r\n\t\t_emissionAmount = sCVars.emissionLimits[_emissionNumber];\r\n\t}\r\n\t\r\n\tfunction emission(uint _node) public returns(bool _result, uint _emissionNumber, uint _emissionAmount, uint _producersPercent) {\r\n\t\tvar (x,y,,,,,,z,) = nodesVars.getNodeInfo(_node);\r\n\t\taddress _nodeOwner = y;\r\n\t\taddress _nodeProducer = x;\r\n\t\t_producersPercent = z;\r\n\t\trequire(msg.sender == _nodeOwner || msg.sender == _nodeProducer);\r\n\t\tuint allStocks;\r\n\t\tfor (uint i = 1; i <= sCVars.emissions[_node].emissionNumber; i++) {\r\n\t\t\tallStocks += sCVars.emissionLimits[i];\r\n\t\t}\r\n\t\tif (_nodeOwner !=0x0000000000000000000000000000000000000000 && block.timestamp > sCVars.emissions[_node].date + 5184000 && \r\n\t\tsCVars.stockBalanceOf[_nodeOwner][_node] <= allStocks/2 ) {\r\n\t\t\t_emissionNumber = sCVars.emissions[_node].emissionNumber + 1;\r\n\t\t\tsCVars.stockBalanceOf[_nodeOwner][_node] += sCVars.emissionLimits[_emissionNumber]*(100 - _producersPercent)/100;\r\n\t\t\t//save stockOwnerInfo for _nodeOwner\r\n\t\t\tuint thisNode = 0;\r\n\t\t\tfor (i = 0; i < sCVars.stockOwnerInfo[_nodeOwner].nodes.length; i++) {\r\n\t\t\t\tif (sCVars.stockOwnerInfo[_nodeOwner].nodes[i] == _node) thisNode = 1;\r\n\t\t\t}\r\n\t\t\tif (thisNode == 0) sCVars.stockOwnerInfo[_nodeOwner].nodes.push(_node);\r\n\t\t\tsCVars.stockBalanceOf[_nodeProducer][_node] += sCVars.emissionLimits[_emissionNumber]*_producersPercent/100;\r\n\t\t\t//save stockOwnerInfo for _nodeProducer\r\n\t\t\tthisNode = 0;\r\n\t\t\tfor (i = 0; i < sCVars.stockOwnerInfo[_nodeProducer].nodes.length; i++) {\r\n\t\t\t\tif (sCVars.stockOwnerInfo[_nodeProducer].nodes[i] == _node) thisNode = 1;\r\n\t\t\t}\r\n\t\t\tif (thisNode == 0) sCVars.stockOwnerInfo[_nodeProducer].nodes.push(_node);\r\n\t\t\tsCVars.emissions[_node].date = block.timestamp;\r\n\t\t\tsCVars.emissions[_node].emissionNumber = _emissionNumber;\r\n\t\t\t_emissionAmount = sCVars.emissionLimits[_emissionNumber];\r\n\t\t\t_result = true;\r\n\t\t}\r\n\t\telse _result = false;\r\n\t}\r\n\t\r\n\tfunction getStockOwnerInfo(address _address) constant public returns(uint[] _nodes) {\r\n\t\t_nodes = sCVars.stockOwnerInfo[_address].nodes;\r\n\t}\r\n\t\r\n\tfunction getStockBalance(address _address, uint _node) constant public returns(uint _balance) {\r\n\t\t_balance = sCVars.stockBalanceOf[_address][_node];\r\n\t}\r\n\t\r\n\tfunction getWithFrozenStockBalance(address _address, uint _node) constant public returns(uint _balance) {\r\n\t\t_balance = sCVars.stockBalanceOf[_address][_node] + sCVars.stockFrozen[_address][_node];\r\n\t}\r\n\t\r\n\tfunction getStockOrderInfo(bool _isBuyOrder, uint _node, uint _price, uint _number) constant public returns(address _address, uint _amount, uint _orderId) {\r\n\t\tif(_isBuyOrder == true) {\r\n\t\t\t_address = sCVars.stockBuyOrders[_node][_price][_number].client;\r\n\t\t\t_amount = sCVars.stockBuyOrders[_node][_price][_number].amount;\r\n\t\t\t_orderId = sCVars.stockBuyOrders[_node][_price][_number].orderId;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t_address = sCVars.stockSellOrders[_node][_price][_number].client;\r\n\t\t\t_amount = sCVars.stockSellOrders[_node][_price][_number].amount;\r\n\t\t\t_orderId = sCVars.stockSellOrders[_node][_price][_number].orderId;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction getStockBuyOrderPrices(uint _node) constant public returns(uint[] _prices) {\r\n\t\t_prices = sCVars.stockBuyOrderPrices[_node];\r\n\t}\r\n\t\r\n\tfunction getStockSellOrderPrices(uint _node) constant public returns(uint[] _prices) {\r\n\t\t_prices = sCVars.stockSellOrderPrices[_node];\r\n\t}\r\n\t\r\n\tfunction stockBuyOrder(uint _node, uint256 _buyPrice, uint _amount) public returns (uint[4] _results) {\r\n\t\trequire(_node > 0 && _buyPrice > 0 && _amount > 0);\r\n\t\t_results = StarmidLibrary.stockBuyOrder(sCVars, _node, _buyPrice, _amount);\r\n\t\trequire(_results[3] == 1);\r\n\t\tStockBuyOrder(_node, _buyPrice);\r\n\t}\r\n\t\r\n\tfunction stockSellOrder(uint _node, uint256 _sellPrice, uint _amount) public returns (uint[4] _results) {\r\n\t\trequire(_node > 0 && _sellPrice > 0 && _amount > 0);\r\n\t\t_results = StarmidLibrary.stockSellOrder(sCVars, _node, _sellPrice, _amount);\r\n\t\trequire(_results[3] == 1);\r\n\t\tStockSellOrder(_node, _sellPrice);\r\n\t}\r\n\t\r\n\tfunction stockCancelBuyOrder(uint _node, uint _thisOrderID, uint _price) public {\r\n\t\trequire(StarmidLibrary.stockCancelBuyOrder(sCVars, _node, _thisOrderID, _price));\r\n\t\tStockCancelBuyOrder(_node, _price);\r\n\t}\r\n\t\r\n\tfunction stockCancelSellOrder(uint _node, uint _thisOrderID, uint _price) public {\r\n\t\trequire(StarmidLibrary.stockCancelSellOrder(sCVars, _node, _thisOrderID, _price));\r\n\t\tStockCancelSellOrder(_node, _price);\r\n\t}\r\n\t\r\n\tfunction getLastDividends(uint _node) public constant returns (uint _lastDividents, uint _dividends) {\r\n\t\tuint stockAmount = sCVars.StockOwnersBuyPrice[msg.sender][_node].sumAmount;\r\n\t\tuint sumAmount = sCVars.StockOwnersBuyPrice[msg.sender][_node].sumAmount;\r\n\t\tif(sumAmount > 0) {\r\n\t\t\tuint stockAverageBuyPrice = sCVars.StockOwnersBuyPrice[msg.sender][_node].sumPriceAmount/sumAmount;\r\n\t\t\tuint dividendsBase = stockAmount*stockAverageBuyPrice;\r\n\t\t\t_lastDividents = sCVars.StockOwnersBuyPrice[msg.sender][_node].sumDateAmount/sumAmount;\r\n\t\t\tif(_lastDividents > 0)_dividends = (block.timestamp - _lastDividents)*dividendsBase/(10*31536000);\r\n\t\t\telse _dividends = 0;\r\n\t\t}\r\n\t}\r\n\t\r\n\t//--------------------------------Dividends (10% to stock owner, 2,5% to node owner per annum)------------------------------------\r\n\tfunction dividends(uint _node) public returns (bool _result, uint _dividends) {\r\n\t\tvar (x,y,) = nodesVars.getNodeInfo(_node);\r\n\t\tuint _stockAmount = sCVars.StockOwnersBuyPrice[msg.sender][_node].sumAmount;\r\n\t\tuint _sumAmount = sCVars.StockOwnersBuyPrice[msg.sender][_node].sumAmount;\r\n\t\tif(_sumAmount > 0) {\r\n\t\t\tuint _stockAverageBuyPrice = sCVars.StockOwnersBuyPrice[msg.sender][_node].sumPriceAmount/_sumAmount;\r\n\t\t\tuint _dividendsBase = _stockAmount*_stockAverageBuyPrice;\r\n\t\t\tuint _averageDate = sCVars.StockOwnersBuyPrice[msg.sender][_node].sumDateAmount/_sumAmount;\r\n\t\t\t//Stock owner`s dividends\r\n\t\t\tuint _div = (block.timestamp - _averageDate)*_dividendsBase/(10*31536000);//31536000 seconds in year\r\n\t\t\tsCVars.balanceOf[msg.sender] += _div;\r\n\t\t\t//Node owner`s dividends\r\n\t\t\tuint _nodeDividends = (block.timestamp - _averageDate)*_dividendsBase/(40*31536000);//31536000 seconds in year\r\n\t\t\tsCVars.balanceOf[y] += _nodeDividends;\r\n\t\t\tsCVars.StockOwnersBuyPrice[msg.sender][_node].sumDateAmount = block.timestamp*_stockAmount;//set new average dividends date\r\n\t\t\ttotalSupply += _div + _div/4;\r\n\t\t\t_dividends =  _div + _div/4;\r\n\t\t\tTransfer(this, msg.sender, _div);\t\r\n\t\t\tTransfer(this, y, _div/4);\t\r\n\t\t\t_result = true;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction stockBuyCertainOrder(uint _node, uint _price, uint _amount, uint _thisOrderID) payable public returns (bool _results) {\r\n\t\t_results = StarmidLibraryExtra.stockBuyCertainOrder(sCVars, _node, _price, _amount, _thisOrderID);\r\n\t\trequire(_results && _node > 0 && _amount > 0);\r\n\t\tStockBuyOrder(_node, _price);\r\n\t}\r\n\t\r\n\tfunction stockSellCertainOrder(uint _node, uint _price, uint _amount, uint _thisOrderID) public returns (bool _results) {\r\n\t\t_results = StarmidLibraryExtra.stockSellCertainOrder(sCVars, _node, _price, _amount, _thisOrderID);\r\n\t\trequire(_results && _node > 0 && _amount > 0);\r\n\t\tStockSellOrder(_node, _price);\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"StarCoinLibrary.Data storage\"},{\"name\":\"_iii\",\"type\":\"uint256\"},{\"name\":\"_node\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"deleteStockSellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"StarCoinLibrary.Data storage\"},{\"name\":\"_iii\",\"type\":\"uint256\"},{\"name\":\"_node\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"deleteStockBuyOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"CommonLibrary.Data storage\"},{\"name\":\"_newNode\",\"type\":\"string\"},{\"name\":\"_producersPercent\",\"type\":\"uint8\"}],\"name\":\"addNode\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"CommonLibrary.Data storage\"},{\"name\":\"_nodeID\",\"type\":\"uint256\"},{\"name\":\"_nodeAddress\",\"type\":\"address\"}],\"name\":\"addNodeAddress\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"CommonLibrary.Data storage\"},{\"name\":\"_newNodeGroup\",\"type\":\"string\"}],\"name\":\"addNodeGroup\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"},{\"name\":\"_id\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"StarCoinLibrary.Data storage\"},{\"name\":\"_node\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"stockSaveOwnerInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"StarCoinLibrary.Data storage\"},{\"name\":\"_sellPrice\",\"type\":\"uint256\"},{\"name\":\"_node\",\"type\":\"uint256\"}],\"name\":\"stockMaxBuyPrice\",\"outputs\":[{\"name\":\"_maxBuyPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"CommonLibrary.Data storage\"},{\"name\":\"_nodeID\",\"type\":\"uint256\"},{\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"name\":\"_isNewProducer\",\"type\":\"bool\"},{\"name\":\"_newProducer\",\"type\":\"address\"},{\"name\":\"_newProducersPercent\",\"type\":\"uint8\"},{\"name\":\"_starmidConfirmed\",\"type\":\"bool\"}],\"name\":\"editNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"StarCoinLibrary.Data storage\"},{\"name\":\"_node\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_isStockSellOrders\",\"type\":\"bool\"}],\"name\":\"stockDeleteFirstOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"StarCoinLibrary.Data storage\"},{\"name\":\"_buyPrice\",\"type\":\"uint256\"},{\"name\":\"_node\",\"type\":\"uint256\"}],\"name\":\"stockMinSellPrice\",\"outputs\":[{\"name\":\"_minSellPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CommonLibrary","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://95d8f33dc3ff6f0daf7f5b58b4a409522f5fe126ea89bde6b45127c9eadce9e9"}]}