{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// SafeMath is a part of Zeppelin Solidity library\r\n// licensed under MIT License\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/LICENSE\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// https://github.com/OpenZeppelin/zeppelin-solidity\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev Protection from short address attack\r\n    */\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length == size + 4);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        _postTransferHook(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Hook for custom actions to be executed after transfer has completed\r\n    * @param _from Transferred from\r\n    * @param _to Transferred to\r\n    * @param _value Value transferred\r\n    */\r\n    function _postTransferHook(address _from, address _to, uint256 _value) internal;\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        _postTransferHook(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract Owned {\r\n    address owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /// @dev Contract constructor\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n}\r\n\r\n\r\ncontract AcceptsTokens {\r\n    ETToken public tokenContract;\r\n\r\n    function AcceptsTokens(address _tokenContract) public {\r\n        tokenContract = ETToken(_tokenContract);\r\n    }\r\n\r\n    modifier onlyTokenContract {\r\n        require(msg.sender == address(tokenContract));\r\n        _;\r\n    }\r\n\r\n    function acceptTokens(address _from, uint256 _value, uint256 param1, uint256 param2, uint256 param3) external;\r\n}\r\n\r\ncontract ETToken is Owned, StandardToken {\r\n    using SafeMath for uint;\r\n\r\n    string public name = \"ETH.TOWN Token\";\r\n    string public symbol = \"ETIT\";\r\n    uint8 public decimals = 18;\r\n\r\n    address public beneficiary;\r\n    address public oracle;\r\n    address public heroContract;\r\n    modifier onlyOracle {\r\n        require(msg.sender == oracle);\r\n        _;\r\n    }\r\n\r\n    mapping (uint32 => address) public floorContracts;\r\n    mapping (address => bool) public canAcceptTokens;\r\n\r\n    mapping (address => bool) public isMinter;\r\n\r\n    modifier onlyMinters {\r\n        require(msg.sender == owner || isMinter[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    event Dividend(uint256 value);\r\n    event Withdrawal(address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    function ETToken() public {\r\n        oracle = owner;\r\n        beneficiary = owner;\r\n\r\n        totalSupply_ = 0;\r\n    }\r\n\r\n    function setOracle(address _oracle) external onlyOwner {\r\n        oracle = _oracle;\r\n    }\r\n    function setBeneficiary(address _beneficiary) external onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n    function setHeroContract(address _heroContract) external onlyOwner {\r\n        heroContract = _heroContract;\r\n    }\r\n\r\n    function _mintTokens(address _user, uint256 _amount) private {\r\n        require(_user != 0x0);\r\n\r\n        balances[_user] = balances[_user].add(_amount);\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n\r\n        emit Transfer(address(this), _user, _amount);\r\n    }\r\n\r\n    function authorizeFloor(uint32 _index, address _floorContract) external onlyOwner {\r\n        floorContracts[_index] = _floorContract;\r\n    }\r\n\r\n    function _acceptDividends(uint256 _value) internal {\r\n        uint256 beneficiaryShare = _value / 5;\r\n        uint256 poolShare = _value.sub(beneficiaryShare);\r\n\r\n        beneficiary.transfer(beneficiaryShare);\r\n\r\n        emit Dividend(poolShare);\r\n    }\r\n\r\n    function acceptDividends(uint256 _value, uint32 _floorIndex) external {\r\n        require(floorContracts[_floorIndex] == msg.sender);\r\n\r\n        _acceptDividends(_value);\r\n    }\r\n\r\n    function rewardTokensFloor(address _user, uint256 _tokens, uint32 _floorIndex) external {\r\n        require(floorContracts[_floorIndex] == msg.sender);\r\n\r\n        _mintTokens(_user, _tokens);\r\n    }\r\n\r\n    function rewardTokens(address _user, uint256 _tokens) external onlyMinters {\r\n        _mintTokens(_user, _tokens);\r\n    }\r\n\r\n    function() payable public {\r\n        // Intentionally left empty, for use by floors\r\n    }\r\n\r\n    function payoutDividends(address _user, uint256 _value) external onlyOracle {\r\n        _user.transfer(_value);\r\n\r\n        emit Withdrawal(_user, _value);\r\n    }\r\n\r\n    function accountAuth(uint256 /*_challenge*/) external {\r\n        // Does nothing by design\r\n    }\r\n\r\n    function burn(uint256 _amount) external {\r\n        require(balances[msg.sender] >= _amount);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        totalSupply_ = totalSupply_.sub(_amount);\r\n\r\n        emit Burn(msg.sender, _amount);\r\n    }\r\n\r\n    function setCanAcceptTokens(address _address, bool _value) external onlyOwner {\r\n        canAcceptTokens[_address] = _value;\r\n    }\r\n\r\n    function setIsMinter(address _address, bool _value) external onlyOwner {\r\n        isMinter[_address] = _value;\r\n    }\r\n\r\n    function _invokeTokenRecipient(address _from, address _to, uint256 _value, uint256 _param1, uint256 _param2, uint256 _param3) internal {\r\n        if (!canAcceptTokens[_to]) {\r\n            return;\r\n        }\r\n\r\n        AcceptsTokens recipient = AcceptsTokens(_to);\r\n\r\n        recipient.acceptTokens(_from, _value, _param1, _param2, _param3);\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address and forward the parameters to token recipient if any\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    * @param _param1 Parameter 1 for the token recipient\r\n    * @param _param2 Parameter 2 for the token recipient\r\n    * @param _param3 Parameter 3 for the token recipient\r\n    */\r\n    function transferWithParams(address _to, uint256 _value, uint256 _param1, uint256 _param2, uint256 _param3) onlyPayloadSize(5 * 32) external returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        _invokeTokenRecipient(msg.sender, _to, _value, _param1, _param2, _param3);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Hook for custom actions to be executed after transfer has completed\r\n    * @param _from Transferred from\r\n    * @param _to Transferred to\r\n    * @param _value Value transferred\r\n    */\r\n    function _postTransferHook(address _from, address _to, uint256 _value) internal {\r\n        _invokeTokenRecipient(_from, _to, _value, 0, 0, 0);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\ncontract Floor is Owned {\r\n    using SafeMath for uint;\r\n\r\n    enum FloorStatus {\r\n        NotYet,         // 0\r\n        Auctioning,     // 1\r\n        Sold            // 2\r\n    }\r\n\r\n    ETToken baseContract;\r\n    uint32 public floorId;\r\n    FloorStatus public status = FloorStatus.NotYet;\r\n    address public winner;\r\n\r\n    event Bid(address indexed from, uint256 value);\r\n    event FloorWon(address indexed from, uint256 value);\r\n    event Payout(address indexed to, uint256 value);\r\n\r\n    modifier onlyOracle {\r\n        require(msg.sender == baseContract.oracle());\r\n        _;\r\n    }\r\n    modifier onlyOwnerOrOracle {\r\n        require(msg.sender == owner || msg.sender == baseContract.oracle());\r\n        _;\r\n    }\r\n\r\n    function Floor(uint32 _floorId, address _baseContract) public {\r\n        baseContract = ETToken(_baseContract);\r\n        floorId = _floorId;\r\n    }\r\n\r\n\r\n    function _isContract(address _user) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(_user) }\r\n        return size > 0;\r\n    }\r\n\r\n    function _processDividends(uint256 _value) internal {\r\n        if (_value > 0) {\r\n            address(baseContract).transfer(_value);\r\n            baseContract.acceptDividends(_value, floorId);\r\n        }\r\n    }\r\n\r\n    function _processCredit(address _user, uint256 _value) internal {\r\n        if (_value > 0) {\r\n            _user.transfer(_value);\r\n        }\r\n    }\r\n\r\n    function _rewardTokens(address _user, uint256 _tokens) internal {\r\n        if (_tokens > 0) {\r\n            baseContract.rewardTokensFloor(_user, _tokens, floorId);\r\n        }\r\n    }\r\n}\r\n\r\ncontract StarAuction {\r\n    address public highestBidder;\r\n    bool public ended;\r\n}\r\n\r\ncontract CharacterSale {\r\n    mapping (address => uint32[]) public characters;\r\n}\r\n\r\ncontract CauldronsMinigamePresale is Floor, AcceptsTokens {\r\n    using SafeMath for uint;\r\n\r\n    bool public enabled;\r\n\r\n    enum CauldronType {\r\n        NoCauldron,\r\n        EtherCauldron,\r\n        EtitCauldron\r\n    }\r\n\r\n    struct Cauldron {\r\n        uint256 timerDuration;\r\n        CauldronType cauldronType;\r\n\r\n        uint32 currentRound;\r\n        uint256 expirationTimer;\r\n\r\n        mapping(uint32 => address[]) contributors;\r\n        uint32 contributorsCount;\r\n        mapping(uint32 => mapping(address => uint256)) contributions;\r\n        uint256 totalContribution;\r\n        address topContributor;\r\n    }\r\n\r\n    mapping(uint8 => Cauldron) public cauldrons;\r\n\r\n    uint constant numStarAuctions = 12;\r\n    mapping(uint8 => StarAuction) public starAuctions; // auction 7 = horse\r\n\r\n    event Contribution(address indexed from, uint256 value, uint8 cauldronId, uint32 round);\r\n    event Winner(address user, uint256 value, uint8 cauldronId, uint32 round);\r\n\r\n    function CauldronsMinigamePresale(uint32 _floorId, address _baseContract)\r\n        Floor(_floorId, _baseContract)\r\n        AcceptsTokens(_baseContract)\r\n        public\r\n    {\r\n        enabled = true;\r\n\r\n        cauldrons[1] = Cauldron({\r\n            timerDuration: 5 minutes,\r\n            cauldronType: CauldronType.EtherCauldron,\r\n\r\n            currentRound: 1,\r\n            expirationTimer: 0,\r\n\r\n            contributorsCount: 0,\r\n            totalContribution: 0,\r\n            topContributor: 0\r\n        });\r\n        cauldrons[2] = Cauldron({\r\n            timerDuration: 20 minutes,\r\n            cauldronType: CauldronType.EtitCauldron,\r\n\r\n            currentRound: 1,\r\n            expirationTimer: 0,\r\n\r\n            contributorsCount: 0,\r\n            totalContribution: 0,\r\n            topContributor: 0\r\n        });\r\n        cauldrons[3] = Cauldron({\r\n            timerDuration: 60 minutes,\r\n            cauldronType: CauldronType.EtherCauldron,\r\n\r\n            currentRound: 1,\r\n            expirationTimer: 0,\r\n\r\n            contributorsCount: 0,\r\n            totalContribution: 0,\r\n            topContributor: 0\r\n        });\r\n        cauldrons[4] = Cauldron({\r\n            timerDuration: 120 minutes,\r\n            cauldronType: CauldronType.EtitCauldron,\r\n\r\n            currentRound: 1,\r\n            expirationTimer: 0,\r\n\r\n            contributorsCount: 0,\r\n            totalContribution: 0,\r\n            topContributor: 0\r\n        });\r\n        cauldrons[5] = Cauldron({\r\n            timerDuration: 12 hours,\r\n            cauldronType: CauldronType.EtherCauldron,\r\n\r\n            currentRound: 1,\r\n            expirationTimer: 0,\r\n\r\n            contributorsCount: 0,\r\n            totalContribution: 0,\r\n            topContributor: 0\r\n        });\r\n    }\r\n\r\n    function isCauldronExpired(uint8 _cauldronId) public view returns (bool) {\r\n        return cauldrons[_cauldronId].expirationTimer != 0 && cauldrons[_cauldronId].expirationTimer < now;\r\n    }\r\n\r\n    function horseMaster() public view returns (address) {\r\n        if (address(starAuctions[7]) == 0x0) {\r\n            return 0x0;\r\n        } else {\r\n            return starAuctions[7].highestBidder();\r\n        }\r\n    }\r\n\r\n    function() public payable {\r\n        // Not accepting Ether directly\r\n        revert();\r\n    }\r\n\r\n    function setEnabled(bool _enabled) public onlyOwner {\r\n        enabled = _enabled;\r\n    }\r\n\r\n    function setStarAuction(uint8 _id, address _address) public onlyOwner {\r\n        starAuctions[_id] = StarAuction(_address);\r\n    }\r\n\r\n    function _acceptContribution(address _from, uint256 _value, uint8 _cauldronId) internal {\r\n        require(!isCauldronExpired(_cauldronId));\r\n\r\n        Cauldron storage cauldron = cauldrons[_cauldronId];\r\n\r\n        uint256 existingContribution = cauldron.contributions[cauldron.currentRound][_from];\r\n\r\n        if (existingContribution == 0) {\r\n            cauldron.contributors[cauldron.currentRound].push(_from);\r\n            cauldron.contributorsCount ++;\r\n        }\r\n\r\n        uint256 userNewContribution = existingContribution.add(_value);\r\n\r\n        cauldron.contributions[cauldron.currentRound][_from] = userNewContribution;\r\n        cauldron.totalContribution = cauldron.totalContribution.add(_value);\r\n\r\n        if (userNewContribution > cauldron.contributions[cauldron.currentRound][cauldron.topContributor]) {\r\n            cauldron.topContributor = _from;\r\n        }\r\n\r\n        uint8 peopleToStart = _cauldronId == 1 ? 10 : 3;\r\n        if (cauldron.expirationTimer == 0 && cauldron.contributorsCount >= peopleToStart) {\r\n            cauldron.expirationTimer = now + cauldron.timerDuration;\r\n        }\r\n\r\n        emit Contribution(_from, _value, _cauldronId, cauldron.currentRound);\r\n    }\r\n\r\n    function acceptTokens(address _from, uint256 _value, uint256 _cauldronId, uint256 /*param2*/, uint256 /*param3*/) external onlyTokenContract {\r\n        require(!_isContract(_from));\r\n        require(enabled);\r\n        require(cauldrons[uint8(_cauldronId)].cauldronType == CauldronType.EtitCauldron);\r\n        require(_value >= 1 finney);\r\n\r\n        _acceptContribution(_from, _value, uint8(_cauldronId));\r\n    }\r\n\r\n    function acceptEther(uint8 _cauldronId) external payable {\r\n        require(!_isContract(msg.sender));\r\n        require(enabled);\r\n        require(cauldrons[_cauldronId].cauldronType == CauldronType.EtherCauldron);\r\n        require(msg.value >= 1 finney);\r\n\r\n        _acceptContribution(msg.sender, msg.value, _cauldronId);\r\n    }\r\n\r\n    function _rotateCauldron(uint8 _cauldronId) internal {\r\n        require(isCauldronExpired(_cauldronId));\r\n\r\n        Cauldron storage cauldron = cauldrons[_cauldronId];\r\n\r\n        cauldron.currentRound ++;\r\n        cauldron.expirationTimer = 0;\r\n\r\n        cauldron.contributorsCount = 0;\r\n        cauldron.totalContribution = 0;\r\n        cauldron.topContributor = 0;\r\n    }\r\n\r\n    function calculateReward(uint256 totalValue, uint256 basePercent, uint8 level) public pure returns (uint256) {\r\n        // Reward = totalValue * rewardPercent%\r\n        // rewardPercent = basePercent*(91.5..99%)\r\n        uint256 levelAddition = uint256(level).mul(5); // 0..15 -> 0..75\r\n        uint256 modificationPercent = levelAddition.add(915);\r\n\r\n        uint256 finalPercent1000 = basePercent.mul(modificationPercent); // 0..100000\r\n\r\n        assert(finalPercent1000 / 1000 <= basePercent);\r\n        assert(finalPercent1000 <= 100000);\r\n\r\n        return totalValue.mul(finalPercent1000).div(100000);\r\n    }\r\n\r\n    function pickWinners(\r\n        uint8 _cauldronId,\r\n        address winner1,\r\n        address winner2,\r\n        address winner3,\r\n        uint8 winner1Level,\r\n        uint8 winner2Level,\r\n        uint8 winner3Level\r\n    ) external onlyOracle {\r\n        require(isCauldronExpired(_cauldronId) || !enabled);\r\n\r\n        Cauldron storage cauldron = cauldrons[_cauldronId];\r\n\r\n        require(cauldron.contributions[cauldron.currentRound][winner1] > 0);\r\n        require(cauldron.contributions[cauldron.currentRound][winner2] > 0);\r\n        require(cauldron.contributions[cauldron.currentRound][winner3] > 0);\r\n\r\n        require(winner1Level <= 15);\r\n        require(winner2Level <= 15);\r\n        require(winner3Level <= 15);\r\n\r\n        uint256 winner1Reward = calculateReward(cauldron.totalContribution, 50, winner1Level);\r\n        uint256 winner2Reward = calculateReward(cauldron.totalContribution, 35, winner2Level);\r\n        uint256 winner3Reward = calculateReward(cauldron.totalContribution, 15, winner3Level);\r\n\r\n        uint256 remainingReward =\r\n            cauldron.totalContribution\r\n                .sub(winner1Reward)\r\n                .sub(winner2Reward)\r\n                .sub(winner3Reward);\r\n\r\n        if (cauldron.cauldronType == CauldronType.EtherCauldron) {\r\n            winner1.transfer(winner1Reward);\r\n            winner2.transfer(winner2Reward);\r\n            winner3.transfer(winner3Reward);\r\n\r\n            // Infernal Horse owner gets 5% of the remainder\r\n            if (horseMaster() != 0x0) {\r\n                remainingReward = remainingReward.sub(remainingReward.mul(5).div(100));\r\n                horseMaster().transfer(remainingReward.mul(5).div(100));\r\n            }\r\n\r\n            // The rest of the remainder goes to the ETIT Dividend pool\r\n            _processDividends(remainingReward);\r\n\r\n        } else if (cauldron.cauldronType == CauldronType.EtitCauldron) {\r\n            baseContract.transfer(winner1, winner1Reward);\r\n            baseContract.transfer(winner2, winner2Reward);\r\n            baseContract.transfer(winner3, winner3Reward);\r\n\r\n            // Excess ETIT tokens are burned\r\n            baseContract.burn(remainingReward);\r\n        }\r\n\r\n        emit Winner(winner1, winner1Reward, _cauldronId, cauldron.currentRound);\r\n        emit Winner(winner2, winner2Reward, _cauldronId, cauldron.currentRound);\r\n        emit Winner(winner3, winner3Reward, _cauldronId, cauldron.currentRound);\r\n\r\n        _rotateCauldron(_cauldronId);\r\n    }\r\n\r\n\r\n    function contributorsOfCauldron(uint8 _cauldronId) public view returns (address[]) {\r\n        Cauldron storage cauldron = cauldrons[_cauldronId];\r\n\r\n        return cauldron.contributors[cauldron.currentRound];\r\n    }\r\n\r\n    function contributionInCauldron(uint8 _cauldronId, address _user) public view returns (uint256) {\r\n        Cauldron storage cauldron = cauldrons[_cauldronId];\r\n\r\n        return cauldron.contributions[cauldron.currentRound][_user];\r\n    }\r\n\r\n    function contributorsOfCauldronRound(uint8 _cauldronId, uint32 _round) public view returns (address[]) {\r\n        Cauldron storage cauldron = cauldrons[_cauldronId];\r\n\r\n        return cauldron.contributors[_round];\r\n    }\r\n\r\n    function contributionInCauldronRound(uint8 _cauldronId, address _user, uint32 _round) public view returns (uint256) {\r\n        Cauldron storage cauldron = cauldrons[_cauldronId];\r\n\r\n        return cauldron.contributions[_round][_user];\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint8\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStarAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cauldronId\",\"type\":\"uint8\"},{\"name\":\"winner1\",\"type\":\"address\"},{\"name\":\"winner2\",\"type\":\"address\"},{\"name\":\"winner3\",\"type\":\"address\"},{\"name\":\"winner1Level\",\"type\":\"uint8\"},{\"name\":\"winner2Level\",\"type\":\"uint8\"},{\"name\":\"winner3Level\",\"type\":\"uint8\"}],\"name\":\"pickWinners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"horseMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"totalValue\",\"type\":\"uint256\"},{\"name\":\"basePercent\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"calculateReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cauldronId\",\"type\":\"uint8\"}],\"name\":\"contributorsOfCauldron\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cauldronId\",\"type\":\"uint8\"},{\"name\":\"_round\",\"type\":\"uint32\"}],\"name\":\"contributorsOfCauldronRound\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cauldronId\",\"type\":\"uint8\"}],\"name\":\"isCauldronExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cauldronId\",\"type\":\"uint8\"}],\"name\":\"acceptEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_cauldronId\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"acceptTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cauldronId\",\"type\":\"uint8\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_round\",\"type\":\"uint32\"}],\"name\":\"contributionInCauldronRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"floorId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"cauldrons\",\"outputs\":[{\"name\":\"timerDuration\",\"type\":\"uint256\"},{\"name\":\"cauldronType\",\"type\":\"uint8\"},{\"name\":\"currentRound\",\"type\":\"uint32\"},{\"name\":\"expirationTimer\",\"type\":\"uint256\"},{\"name\":\"contributorsCount\",\"type\":\"uint32\"},{\"name\":\"totalContribution\",\"type\":\"uint256\"},{\"name\":\"topContributor\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"starAuctions\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cauldronId\",\"type\":\"uint8\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"contributionInCauldron\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_floorId\",\"type\":\"uint32\"},{\"name\":\"_baseContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cauldronId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint32\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cauldronId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint32\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FloorWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"}]","ContractName":"CauldronsMinigamePresale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000003e80000000000000000000000008fe19c447821b4cdcdd5012bca1b5469ca96d80d","Library":"","SwarmSource":"bzzr://1c8e12c36f6f488cc10ffa6782d7b822ff556a775dfb1ccad178bffbbb521266"}]}