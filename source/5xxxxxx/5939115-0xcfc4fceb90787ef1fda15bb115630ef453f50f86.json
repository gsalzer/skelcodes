{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: contracts/JSECoinCrowdsaleConfig.sol\r\n\r\ncontract JSECoinCrowdsaleConfig {\r\n    \r\n    uint8 public constant   TOKEN_DECIMALS = 18;\r\n    uint256 public constant DECIMALSFACTOR = 10**uint256(TOKEN_DECIMALS);\r\n\r\n    uint256 public constant DURATION                                = 12 weeks; \r\n    uint256 public constant CONTRIBUTION_MIN                        = 0.1 ether; // Around $64\r\n    uint256 public constant CONTRIBUTION_MAX_NO_WHITELIST           = 20 ether; // $9,000\r\n    uint256 public constant CONTRIBUTION_MAX                        = 10000.0 ether; //After Whitelisting\r\n    \r\n    uint256 public constant TOKENS_MAX                              = 10000000000 * (10 ** uint256(TOKEN_DECIMALS)); //10,000,000,000 aka 10 billion\r\n    uint256 public constant TOKENS_SALE                             = 5000000000 * DECIMALSFACTOR; //50%\r\n    uint256 public constant TOKENS_DISTRIBUTED                      = 5000000000 * DECIMALSFACTOR; //50%\r\n\r\n\r\n    // For the public sale, tokens are priced at 0.006 USD/token.\r\n    // So if we have 450 USD/ETH -> 450,000 USD/KETH / 0.006 USD/token = ~75000000\r\n                                                                    //    3600000\r\n    uint256 public constant TOKENS_PER_KETHER                       = 75000000;\r\n\r\n    // Constant used by buyTokens as part of the cost <-> tokens conversion.\r\n    // 18 for ETH -> WEI, TOKEN_DECIMALS (18 for JSE Coin Token), 3 for the K in tokensPerKEther.\r\n    uint256 public constant PURCHASE_DIVIDER                        = 10**(uint256(18) - TOKEN_DECIMALS + 3);\r\n\r\n}\r\n\r\n// File: contracts/ERC223.sol\r\n\r\n/**\r\n * @title Interface for an ERC223 Contract\r\n * @author Amr Gawish <amr@gawi.sh>\r\n * @dev Only one method is unique to contracts `transfer(address _to, uint _value, bytes _data)`\r\n * @notice The interface has been stripped to its unique methods to prevent duplicating methods with ERC20 interface\r\n*/\r\ninterface ERC223 {\r\n    function transfer(address _to, uint _value, bytes _data) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\n// File: contracts/ERC223ReceivingContract.sol\r\n\r\n/**\r\n * @title Contract that will work with ERC223 tokens.\r\n */\r\n \r\ncontract ERC223ReceivingContract { \r\n\r\n    /**\r\n    * @dev Standard ERC223 function that will handle incoming token transfers.\r\n    *\r\n    * @param _from  Token sender address.\r\n    * @param _value Amount of tokens.\r\n    * @param _data  Transaction metadata.\r\n    */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/OperatorManaged.sol\r\n\r\n// Simple JSE Operator management contract\r\ncontract OperatorManaged is Ownable {\r\n\r\n    address public operatorAddress;\r\n    address public adminAddress;\r\n\r\n    event AdminAddressChanged(address indexed _newAddress);\r\n    event OperatorAddressChanged(address indexed _newAddress);\r\n\r\n\r\n    constructor() public\r\n        Ownable()\r\n    {\r\n        adminAddress = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlyAdminOrOperator() {\r\n        require(isAdmin(msg.sender) || isOperator(msg.sender));\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlyOwnerOrAdmin() {\r\n        require(isOwner(msg.sender) || isAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlyOperator() {\r\n        require(isOperator(msg.sender));\r\n        _;\r\n    }\r\n\r\n\r\n    function isAdmin(address _address) internal view returns (bool) {\r\n        return (adminAddress != address(0) && _address == adminAddress);\r\n    }\r\n\r\n\r\n    function isOperator(address _address) internal view returns (bool) {\r\n        return (operatorAddress != address(0) && _address == operatorAddress);\r\n    }\r\n\r\n    function isOwner(address _address) internal view returns (bool) {\r\n        return (owner != address(0) && _address == owner);\r\n    }\r\n\r\n\r\n    function isOwnerOrOperator(address _address) internal view returns (bool) {\r\n        return (isOwner(_address) || isOperator(_address));\r\n    }\r\n\r\n\r\n    // Owner and Admin can change the admin address. Address can also be set to 0 to 'disable' it.\r\n    function setAdminAddress(address _adminAddress) external onlyOwnerOrAdmin returns (bool) {\r\n        require(_adminAddress != owner);\r\n        require(_adminAddress != address(this));\r\n        require(!isOperator(_adminAddress));\r\n\r\n        adminAddress = _adminAddress;\r\n\r\n        emit AdminAddressChanged(_adminAddress);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    // Owner and Admin can change the operations address. Address can also be set to 0 to 'disable' it.\r\n    function setOperatorAddress(address _operatorAddress) external onlyOwnerOrAdmin returns (bool) {\r\n        require(_operatorAddress != owner);\r\n        require(_operatorAddress != address(this));\r\n        require(!isAdmin(_operatorAddress));\r\n\r\n        operatorAddress = _operatorAddress;\r\n\r\n        emit OperatorAddressChanged(_operatorAddress);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20//MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    hasMintPermission\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n// File: contracts/JSEToken.sol\r\n\r\n/**\r\n * @title Main Token Contract for JSE Coin\r\n * @author Amr Gawish <amr@gawi.sh>\r\n * @dev This Token is the Mintable and Burnable to allow variety of actions to be done by users.\r\n * @dev It also complies with both ERC20 and ERC223.\r\n * @notice Trying to use JSE Token to Contracts that doesn't accept tokens and doesn't have tokenFallback function will fail, and all contracts\r\n * must comply to ERC223 compliance. \r\n*/\r\ncontract JSEToken is ERC223, BurnableToken, Ownable, MintableToken, OperatorManaged {\r\n    \r\n    event Finalized();\r\n\r\n    string public name = \"JSE Token\";\r\n    string public symbol = \"JSE\";\r\n    uint public decimals = 18;\r\n    uint public initialSupply = 10000000000 * (10 ** decimals); //10,000,000,000 aka 10 billion\r\n\r\n    bool public finalized;\r\n\r\n    constructor() OperatorManaged() public {\r\n        totalSupply_ = initialSupply;\r\n        balances[msg.sender] = initialSupply; \r\n\r\n        emit Transfer(0x0, msg.sender, initialSupply);\r\n    }\r\n\r\n\r\n    // Implementation of the standard transferFrom method that takes into account the finalize flag.\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        checkTransferAllowed(msg.sender, _to);\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function checkTransferAllowed(address _sender, address _to) private view {\r\n        if (finalized) {\r\n            // Everybody should be ok to transfer once the token is finalized.\r\n            return;\r\n        }\r\n\r\n        // Owner and Ops are allowed to transfer tokens before the sale is finalized.\r\n        // This allows the tokens to move from the TokenSale contract to a beneficiary.\r\n        // We also allow someone to send tokens back to the owner. This is useful among other\r\n        // cases, for the Trustee to transfer unlocked tokens back to the owner (reclaimTokens).\r\n        require(isOwnerOrOperator(_sender) || _to == owner);\r\n    }\r\n\r\n    // Implementation of the standard transfer method that takes into account the finalize flag.\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        checkTransferAllowed(msg.sender, _to);\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified contract address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    * @param _data Additional Data sent to the contract.\r\n    */\r\n    function transfer(address _to, uint _value, bytes _data) external returns (bool) {\r\n        checkTransferAllowed(msg.sender, _to);\r\n\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        require(isContract(_to));\r\n\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        ERC223ReceivingContract erc223Contract = ERC223ReceivingContract(_to);\r\n        erc223Contract.tokenFallback(msg.sender, _value, _data);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /** \r\n    * @dev Owner can transfer out any accidentally sent ERC20 tokens\r\n    */\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool) {\r\n        uint codeSize;\r\n        /* solium-disable-next-line */\r\n        assembly {\r\n            codeSize := extcodesize(_addr)\r\n        }\r\n        return codeSize > 0;\r\n    }\r\n\r\n    // Finalize method marks the point where token transfers are finally allowed for everybody.\r\n    function finalize() external onlyAdmin returns (bool success) {\r\n        require(!finalized);\r\n\r\n        finalized = true;\r\n\r\n        emit Finalized();\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/JSETokenSale.sol\r\n\r\n//\r\n// Implementation of the token sale of JSE Token\r\n//\r\n// * Lifecycle *\r\n// Initialization sequence should be as follow:\r\n//    1. Deploy JSEToken contract\r\n//    2. Deploy JSETokenSale contract\r\n//    3. Set operationsAddress of JSEToken contract to JSETokenSale contract\r\n//    4. Transfer tokens from owner to JSETokenSale contract\r\n//    5. Transfer tokens from owner to Distributer Account\r\n//    6. Initialize JSETokenSale contract\r\n//\r\n// Pre-sale sequence:\r\n//    - Set tokensPerKEther\r\n//    - Update whitelist\r\n//    - Start public sale\r\n//\r\n// After-sale sequence:\r\n//    1. Finalize the JSETokenSale contract\r\n//    2. Finalize the JSEToken contract\r\n//    3. Set operationsAddress of JSETokenSale contract to 0\r\n//    4. Set operationsAddress of JSEToken contract to 0\r\n\r\n\r\ncontract JSETokenSale is OperatorManaged, Pausable, JSECoinCrowdsaleConfig { // Pausable is also Owned\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n    // We keep track of whether the sale has been finalized, at which point\r\n    // no additional contributions will be permitted.\r\n    bool public finalized;\r\n\r\n    // Public Sales start trigger\r\n    bool public publicSaleStarted;\r\n\r\n    // Number of tokens per 1000 ETH. See JSETokenSaleConfig for details.\r\n    uint256 public tokensPerKEther;\r\n\r\n    // Increase Percentage Bonus of buying tokens\r\n    uint256 public bonusIncreasePercentage = 10; //percentage\r\n\r\n    // Address where the funds collected during the sale will be forwarded.\r\n    address public wallet;\r\n\r\n    // Token contract that the sale contract will interact with.\r\n    JSEToken public tokenContract;\r\n\r\n    // // JSETrustee contract to hold on token balances. The following token pools will be held by trustee:\r\n    // //    - Founders\r\n    // //    - Advisors\r\n    // //    - Early investors\r\n    // //    - Presales\r\n    // address private distributerAccount;\r\n\r\n    // Total amount of tokens sold during presale + public sale. Excludes pre-sale bonuses.\r\n    uint256 public totalTokensSold;\r\n\r\n    // Total amount of tokens given as bonus during presale. Will influence accelerator token balance.\r\n    uint256 public totalPresaleBase;\r\n    uint256 public totalPresaleBonus;\r\n\r\n    // Map of addresses that have been whitelisted in advance (and passed KYC).\r\n    mapping(address => bool) public whitelist;\r\n\r\n    // Amount of wei raised\r\n    uint256 public weiRaised;\r\n\r\n    //\r\n    // EVENTS\r\n    //\r\n    event Initialized();\r\n    event PresaleAdded(address indexed _account, uint256 _baseTokens, uint256 _bonusTokens);\r\n    event WhitelistUpdated(address indexed _account);\r\n    event TokensPurchased(address indexed _beneficiary, uint256 _cost, uint256 _tokens, uint256 _totalSold);\r\n    event TokensPerKEtherUpdated(uint256 _amount);\r\n    event WalletChanged(address _newWallet);\r\n    event TokensReclaimed(uint256 _amount);\r\n    event UnsoldTokensBurnt(uint256 _amount);\r\n    event BonusIncreasePercentageChanged(uint256 _oldPercentage, uint256 _newPercentage);\r\n    event Finalized();\r\n\r\n\r\n    constructor(JSEToken _tokenContract, address _wallet) public\r\n        OperatorManaged()\r\n    {\r\n        require(address(_tokenContract) != address(0));\r\n        //  require(address(_distributerAccount) != address(0));\r\n        require(_wallet != address(0));\r\n\r\n        require(TOKENS_PER_KETHER > 0);\r\n\r\n\r\n        wallet                  = _wallet;\r\n        finalized               = false;\r\n        publicSaleStarted       = false;\r\n        tokensPerKEther         = TOKENS_PER_KETHER;\r\n        tokenContract           = _tokenContract;\r\n        //distributerAccount      = _distributerAccount;\r\n    }\r\n\r\n\r\n    // Initialize is called to check some configuration parameters.\r\n    // It expects that a certain amount of tokens have already been assigned to the sale contract address.\r\n    function initialize() external onlyOwner returns (bool) {\r\n        require(totalTokensSold == 0);\r\n        require(totalPresaleBase == 0);\r\n        require(totalPresaleBonus == 0);\r\n\r\n        uint256 ownBalance = tokenContract.balanceOf(address(this));\r\n        require(ownBalance == TOKENS_SALE);\r\n\r\n        emit Initialized();\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    // Allows the admin to change the wallet where ETH contributions are sent.\r\n    function changeWallet(address _wallet) external onlyAdmin returns (bool) {\r\n        require(_wallet != address(0));\r\n        require(_wallet != address(this));\r\n        // require(_wallet != address(distributerAccount));\r\n        require(_wallet != address(tokenContract));\r\n\r\n        wallet = _wallet;\r\n\r\n        emit WalletChanged(wallet);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    //\r\n    // TIME\r\n    //\r\n\r\n    function currentTime() public view returns (uint256 _currentTime) {\r\n        return now;\r\n    }\r\n\r\n\r\n    modifier onlyBeforeSale() {\r\n        require(hasSaleEnded() == false && publicSaleStarted == false);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlyDuringSale() {\r\n        require(hasSaleEnded() == false && publicSaleStarted == true);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAfterSale() {\r\n        // require finalized is stronger than hasSaleEnded\r\n        require(finalized);\r\n        _;\r\n    }\r\n\r\n\r\n    function hasSaleEnded() private view returns (bool) {\r\n        // if sold out or finalized, sale has ended\r\n        if (finalized) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //\r\n    // WHITELIST\r\n    //\r\n\r\n    // Allows operator to add accounts to the whitelist.\r\n    // Only those accounts will be allowed to contribute above the threshold\r\n    function updateWhitelist(address _account) external onlyAdminOrOperator returns (bool) {\r\n        require(_account != address(0));\r\n        require(!hasSaleEnded());\r\n\r\n        whitelist[_account] = true;\r\n\r\n        emit WhitelistUpdated(_account);\r\n\r\n        return true;\r\n    }\r\n\r\n    //\r\n    // PURCHASES / CONTRIBUTIONS\r\n    //\r\n\r\n    // Allows the admin to set the price for tokens sold during phases 1 and 2 of the sale.\r\n    function setTokensPerKEther(uint256 _tokensPerKEther) external onlyAdmin onlyBeforeSale returns (bool) {\r\n        require(_tokensPerKEther > 0);\r\n\r\n        tokensPerKEther = _tokensPerKEther;\r\n\r\n        emit TokensPerKEtherUpdated(_tokensPerKEther);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function () external payable whenNotPaused onlyDuringSale {\r\n        buyTokens();\r\n    }\r\n\r\n\r\n    // This is the main function to process incoming ETH contributions.\r\n    function buyTokens() public payable whenNotPaused onlyDuringSale returns (bool) {\r\n        require(msg.value >= CONTRIBUTION_MIN);\r\n        require(msg.value <= CONTRIBUTION_MAX);\r\n        require(totalTokensSold < TOKENS_SALE);\r\n\r\n        // All accounts need to be whitelisted to purchase if the value above the CONTRIBUTION_MAX_NO_WHITELIST\r\n        bool whitelisted = whitelist[msg.sender];\r\n        if(msg.value >= CONTRIBUTION_MAX_NO_WHITELIST){\r\n            require(whitelisted);\r\n        }\r\n\r\n        uint256 tokensMax = TOKENS_SALE.sub(totalTokensSold);\r\n\r\n        require(tokensMax > 0);\r\n        \r\n        uint256 actualAmount = msg.value.mul(tokensPerKEther).div(PURCHASE_DIVIDER);\r\n\r\n        uint256 bonusAmount = actualAmount.mul(bonusIncreasePercentage).div(100);\r\n\r\n        uint256 tokensBought = actualAmount.add(bonusAmount);\r\n\r\n        require(tokensBought > 0);\r\n\r\n        uint256 cost = msg.value;\r\n        uint256 refund = 0;\r\n\r\n        if (tokensBought > tokensMax) {\r\n            // Not enough tokens available for full contribution, we will do partial.\r\n            tokensBought = tokensMax;\r\n\r\n            // Calculate actual cost for partial amount of tokens.\r\n            cost = tokensBought.mul(PURCHASE_DIVIDER).div(tokensPerKEther);\r\n\r\n            // Calculate refund for contributor.\r\n            refund = msg.value.sub(cost);\r\n        }\r\n\r\n        totalTokensSold = totalTokensSold.add(tokensBought);\r\n\r\n        // Transfer tokens to the account\r\n        require(tokenContract.transfer(msg.sender, tokensBought));\r\n\r\n        // Issue a ETH refund for any unused portion of the funds.\r\n        if (refund > 0) {\r\n            msg.sender.transfer(refund);\r\n        }\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(msg.value.sub(refund));\r\n\r\n        // Transfer the contribution to the wallet\r\n        wallet.transfer(msg.value.sub(refund));\r\n\r\n        emit TokensPurchased(msg.sender, cost, tokensBought, totalTokensSold);\r\n\r\n        // If all tokens available for sale have been sold out, finalize the sale automatically.\r\n        if (totalTokensSold == TOKENS_SALE) {\r\n            finalizeInternal();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    // Allows the admin to move bonus tokens still available in the sale contract\r\n    // out before burning all remaining unsold tokens in burnUnsoldTokens().\r\n    // Used to distribute bonuses to token sale participants when the sale has ended\r\n    // and all bonuses are known.\r\n    function reclaimTokens(uint256 _amount) external onlyAfterSale onlyAdmin returns (bool) {\r\n        uint256 ownBalance = tokenContract.balanceOf(address(this));\r\n        require(_amount <= ownBalance);\r\n        \r\n        address tokenOwner = tokenContract.owner();\r\n        require(tokenOwner != address(0));\r\n\r\n        require(tokenContract.transfer(tokenOwner, _amount));\r\n\r\n        emit TokensReclaimed(_amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function changeBonusIncreasePercentage(uint256 _newPercentage) external onlyDuringSale onlyAdmin returns (bool) {\r\n        uint oldPercentage = bonusIncreasePercentage;\r\n        bonusIncreasePercentage = _newPercentage;\r\n        emit BonusIncreasePercentageChanged(oldPercentage, _newPercentage);\r\n        return true;\r\n    }\r\n\r\n    // Allows the admin to finalize the sale and complete allocations.\r\n    // The JSEToken.admin also needs to finalize the token contract\r\n    // so that token transfers are enabled.\r\n    function finalize() external onlyAdmin returns (bool) {\r\n        return finalizeInternal();\r\n    }\r\n\r\n    function startPublicSale() external onlyAdmin onlyBeforeSale returns (bool) {\r\n        publicSaleStarted = true;\r\n        return true;\r\n    }\r\n\r\n\r\n    // The internal one will be called if tokens are sold out or\r\n    // the end time for the sale is reached, in addition to being called\r\n    // from the public version of finalize().\r\n    function finalizeInternal() private returns (bool) {\r\n        require(!finalized);\r\n\r\n        finalized = true;\r\n\r\n        emit Finalized();\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"startPublicSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerKEther\",\"type\":\"uint256\"}],\"name\":\"setTokensPerKEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PURCHASE_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIBUTION_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPresaleBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"setAdminAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPercentage\",\"type\":\"uint256\"}],\"name\":\"changeBonusIncreasePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"setOperatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_SALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"updateWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIBUTION_MAX_NO_WHITELIST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reclaimTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALSFACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPresaleBase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_DISTRIBUTED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicSaleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerKEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusIncreasePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIBUTION_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"name\":\"_currentTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENS_PER_KETHER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_baseTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_bonusTokens\",\"type\":\"uint256\"}],\"name\":\"PresaleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_cost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalSold\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensPerKEtherUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"WalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensReclaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"UnsoldTokensBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newPercentage\",\"type\":\"uint256\"}],\"name\":\"BonusIncreasePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"AdminAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"OperatorAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"JSETokenSale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002d184014b5658c453443aa87c8e9c4d57285620b000000000000000000000000c880f4143950bfb27ed021793991f35466b99201","Library":"","SwarmSource":"bzzr://b907223942eefe361989e19437a13c1f014af0e42e105e86185f905c744cfc83"}]}