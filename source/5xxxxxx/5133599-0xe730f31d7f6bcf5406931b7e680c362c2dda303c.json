{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract SuperOwners {\r\n\r\n    address public owner1;\r\n    address public pendingOwner1;\r\n    \r\n    address public owner2;\r\n    address public pendingOwner2;\r\n\r\n    function SuperOwners(address _owner1, address _owner2) internal {\r\n        require(_owner1 != address(0));\r\n        owner1 = _owner1;\r\n        \r\n        require(_owner2 != address(0));\r\n        owner2 = _owner2;\r\n    }\r\n\r\n    modifier onlySuperOwner1() {\r\n        require(msg.sender == owner1);\r\n        _;\r\n    }\r\n    \r\n    modifier onlySuperOwner2() {\r\n        require(msg.sender == owner2);\r\n        _;\r\n    }\r\n    \r\n    /** Any of the owners can execute this. */\r\n    modifier onlySuperOwner() {\r\n        require(isSuperOwner(msg.sender));\r\n        _;\r\n    }\r\n    \r\n    /** Is msg.sender any of the owners. */\r\n    function isSuperOwner(address _addr) public view returns (bool) {\r\n        return _addr == owner1 || _addr == owner2;\r\n    }\r\n\r\n    /** \r\n     * Safe transfer of ownership in 2 steps. Once called, a newOwner needs \r\n     * to call claimOwnership() to prove ownership.\r\n     */\r\n    function transferOwnership1(address _newOwner1) onlySuperOwner1 public {\r\n        pendingOwner1 = _newOwner1;\r\n    }\r\n    \r\n    function transferOwnership2(address _newOwner2) onlySuperOwner2 public {\r\n        pendingOwner2 = _newOwner2;\r\n    }\r\n\r\n    function claimOwnership1() public {\r\n        require(msg.sender == pendingOwner1);\r\n        owner1 = pendingOwner1;\r\n        pendingOwner1 = address(0);\r\n    }\r\n    \r\n    function claimOwnership2() public {\r\n        require(msg.sender == pendingOwner2);\r\n        owner2 = pendingOwner2;\r\n        pendingOwner2 = address(0);\r\n    }\r\n}\r\n\r\ncontract MultiOwnable is SuperOwners {\r\n\r\n    mapping (address => bool) public ownerMap;\r\n    address[] public ownerHistory;\r\n\r\n    event OwnerAddedEvent(address indexed _newOwner);\r\n    event OwnerRemovedEvent(address indexed _oldOwner);\r\n\r\n    function MultiOwnable(address _owner1, address _owner2) \r\n        SuperOwners(_owner1, _owner2) internal {}\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isOwner(address owner) public view returns (bool) {\r\n        return isSuperOwner(owner) || ownerMap[owner];\r\n    }\r\n    \r\n    function ownerHistoryCount() public view returns (uint) {\r\n        return ownerHistory.length;\r\n    }\r\n\r\n    // Add extra owner\r\n    function addOwner(address owner) onlySuperOwner public {\r\n        require(owner != address(0));\r\n        require(!ownerMap[owner]);\r\n        ownerMap[owner] = true;\r\n        ownerHistory.push(owner);\r\n        OwnerAddedEvent(owner);\r\n    }\r\n\r\n    // Remove extra owner\r\n    function removeOwner(address owner) onlySuperOwner public {\r\n        require(ownerMap[owner]);\r\n        ownerMap[owner] = false;\r\n        OwnerRemovedEvent(owner);\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n    \r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint256) balances;\r\n    \r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        \r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract CommonToken is StandardToken, MultiOwnable {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public totalSupply;\r\n    uint8 public decimals = 18;\r\n    string public version = 'v0.1';\r\n\r\n    address public seller;     // The main account that holds all tokens at the beginning and during tokensale.\r\n\r\n    uint256 public saleLimit;  // (e18) How many tokens can be sold in total through all tiers or tokensales.\r\n    uint256 public tokensSold; // (e18) Number of tokens sold through all tiers or tokensales.\r\n    uint256 public totalSales; // Total number of sales (including external sales) made through all tiers or tokensales.\r\n\r\n    // Lock the transfer functions during tokensales to prevent price speculations.\r\n    bool public locked = true;\r\n    \r\n    event SellEvent(address indexed _seller, address indexed _buyer, uint256 _value);\r\n    event ChangeSellerEvent(address indexed _oldSeller, address indexed _newSeller);\r\n    event Burn(address indexed _burner, uint256 _value);\r\n    event Unlock();\r\n\r\n    function CommonToken(\r\n        address _owner1,\r\n        address _owner2,\r\n        address _seller,\r\n        string _name,\r\n        string _symbol,\r\n        uint256 _totalSupplyNoDecimals,\r\n        uint256 _saleLimitNoDecimals\r\n    ) MultiOwnable(_owner1, _owner2) public {\r\n\r\n        require(_seller != address(0));\r\n        require(_totalSupplyNoDecimals > 0);\r\n        require(_saleLimitNoDecimals > 0);\r\n\r\n        seller = _seller;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        totalSupply = _totalSupplyNoDecimals * 1e18;\r\n        saleLimit = _saleLimitNoDecimals * 1e18;\r\n        balances[seller] = totalSupply;\r\n\r\n        Transfer(0x0, seller, totalSupply);\r\n    }\r\n    \r\n    modifier ifUnlocked(address _from, address _to) {\r\n        require(!locked || isOwner(_from) || isOwner(_to));\r\n        _;\r\n    }\r\n    \r\n    /** Can be called once by super owner. */\r\n    function unlock() onlySuperOwner public {\r\n        require(locked);\r\n        locked = false;\r\n        Unlock();\r\n    }\r\n\r\n    function changeSeller(address newSeller) onlySuperOwner public returns (bool) {\r\n        require(newSeller != address(0));\r\n        require(seller != newSeller);\r\n\r\n        address oldSeller = seller;\r\n        uint256 unsoldTokens = balances[oldSeller];\r\n        balances[oldSeller] = 0;\r\n        balances[newSeller] = balances[newSeller].add(unsoldTokens);\r\n        Transfer(oldSeller, newSeller, unsoldTokens);\r\n\r\n        seller = newSeller;\r\n        ChangeSellerEvent(oldSeller, newSeller);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function sellNoDecimals(address _to, uint256 _value) public returns (bool) {\r\n        return sell(_to, _value * 1e18);\r\n    }\r\n\r\n    function sell(address _to, uint256 _value) onlyOwner public returns (bool) {\r\n\r\n        // Check that we are not out of limit and still can sell tokens:\r\n        require(tokensSold.add(_value) <= saleLimit);\r\n\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n        require(_value <= balances[seller]);\r\n\r\n        balances[seller] = balances[seller].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(seller, _to, _value);\r\n\r\n        totalSales++;\r\n        tokensSold = tokensSold.add(_value);\r\n        SellEvent(seller, _to, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Until all tokens are sold, tokens can be transfered to/from owner's accounts.\r\n     */\r\n    function transfer(address _to, uint256 _value) ifUnlocked(msg.sender, _to) public returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * Until all tokens are sold, tokens can be transfered to/from owner's accounts.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) ifUnlocked(_from, _to) public returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool) {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value) ;\r\n        totalSupply = totalSupply.sub(_value);\r\n        Transfer(msg.sender, 0x0, _value);\r\n        Burn(msg.sender, _value);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract RaceToken is CommonToken {\r\n    \r\n    function RaceToken() CommonToken(\r\n        0x229B9Ef80D25A7e7648b17e2c598805d042f9e56, // __OWNER1__\r\n        0xcd7cF1D613D5974876AfBfd612ED6AFd94093ce7, // __OWNER2__\r\n        0x2821e1486D604566842FF27F626aF133FddD5f89, // __SELLER__\r\n        'Coin Race',\r\n        'RACE',\r\n        100 * 1e6, // 100m tokens in total.\r\n        70 * 1e6   // 70m tokens for sale.\r\n    ) public {}\r\n}\r\n\r\n/** \r\n * Here we implement all token methods that require msg.sender to be albe \r\n * to perform operations on behalf of GameWallet from other CoinRace contracts \r\n * like a particular contract of RaceGame.\r\n */\r\ncontract CommonWallet is MultiOwnable {\r\n    \r\n    RaceToken public token;\r\n    \r\n    event ChangeTokenEvent(address indexed _oldAddress, address indexed _newAddress);\r\n    \r\n    function CommonWallet(address _owner1, address _owner2) \r\n        MultiOwnable(_owner1, _owner2) public {}\r\n    \r\n    function setToken(address _token) public onlySuperOwner {\r\n        require(_token != 0);\r\n        require(_token != address(token));\r\n        \r\n        ChangeTokenEvent(token, _token);\r\n        token = RaceToken(_token);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) onlyOwner public returns (bool) {\r\n        return token.transfer(_to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) onlyOwner public returns (bool) {\r\n        return token.transferFrom(_from, _to, _value);\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) onlyOwner public returns (bool) {\r\n        return token.approve(_spender, _value);\r\n    }\r\n    \r\n    function burn(uint256 _value) onlySuperOwner public returns (bool) {\r\n        return token.burn(_value);\r\n    }\r\n    \r\n    /** Amount of tokens that players of CoinRace bet during the games and haven't claimed yet. */\r\n    function balance() public view returns (uint256) {\r\n        return token.balanceOf(this);\r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return token.balanceOf(_owner);\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return token.allowance(_owner, _spender);\r\n    }\r\n}\r\n\r\ncontract GameWallet is CommonWallet {\r\n    \r\n    function GameWallet() CommonWallet(\r\n        0x229B9Ef80D25A7e7648b17e2c598805d042f9e56, // __OWNER1__\r\n        0xcd7cF1D613D5974876AfBfd612ED6AFd94093ce7  // __OWNER2__\r\n    ) public {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isSuperOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerHistoryCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner2\",\"type\":\"address\"}],\"name\":\"transferOwnership2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner1\",\"type\":\"address\"}],\"name\":\"transferOwnership1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"ChangeTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAddedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldOwner\",\"type\":\"address\"}],\"name\":\"OwnerRemovedEvent\",\"type\":\"event\"}]","ContractName":"GameWallet","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b27b6946c7232127a555ee11db49b48a954d05aca3b3c5d7df3b534b937695cd"}]}