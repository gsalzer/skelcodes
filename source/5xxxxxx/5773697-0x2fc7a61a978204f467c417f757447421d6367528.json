{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n  \trequire(msg.sender != address(0));\r\n\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\tif (a == 0) {\r\n\t  return 0;\r\n\t}\r\n\tuint256 c = a * b;\r\n\tassert(c / a == b);\r\n\treturn c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\tuint256 c = a / b;\r\n\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\treturn c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\tassert(b <= a);\r\n\treturn a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\tuint256 c = a + b;\r\n\tassert(c >= a);\r\n\treturn c;\r\n  }\r\n}\r\n\r\ncontract EthernalCup is Ownable {\r\n\tusing SafeMath for uint256;\r\n\r\n\r\n\t/// Buy is emitted when a national team is bought\r\n\tevent Buy(\r\n\t\taddress owner,\r\n\t\tuint country,\r\n\t\tuint price\r\n\t);\r\n\r\n\tevent BuyCup(\r\n\t\taddress owner,\r\n\t\tuint price\r\n\t);\r\n\r\n\tuint public constant LOCK_START = 1531663200; // 2018/07/15 2:00pm (UTC)\r\n\tuint public constant LOCK_END = 1500145200; // 2018/07/15 19:00pm (UTC)\r\n\tuint public constant TOURNAMENT_ENDS = 1531677600; // 2018/07/15 18:00pm (UTC)\r\n\r\n\tint public constant BUY_INCREASE = 20;\r\n\r\n\tuint startPrice = 0.1 ether;\r\n\r\n\t// The way the purchase occurs, the purchase will pay 20% more of the current price\r\n\t// so the actual price is 30 ether\r\n\tuint cupStartPrice = 25 ether;\r\n\r\n\tuint public constant DEV_FEE = 3;\r\n\tuint public constant POOL_FEE = 5;\r\n\r\n\tbool public paused = false;\r\n\r\n\t// 0 \"Russia\"\r\n\t// 1 \"Saudi Arabia\r\n\t// 2 \"Egypt\"\r\n\t// 3 \"Uruguay\"\r\n\t// 4 \"Morocco\"\r\n\t// 5 \"Iran\"\r\n\t// 6 \"Portugal\"\r\n\t// 7 \"Spain\"\r\n\t// 8 \"France\"\r\n\t// 9 \"Australia\"\r\n\t// 10 \"Peru\"\r\n\t// 11 \"Denmark\"\r\n\t// 12 \"Argentina\"\r\n\t// 13 \"Iceland\"\r\n\t// 14 \"Croatia\"\r\n\t// 15 \"Nigeria\"\r\n\t// 16 \"Costa Rica\r\n\t// 17 \"Serbia\"\r\n\t// 18 \"Brazil\"\r\n\t// 19 \"Switzerland\"\r\n\t// 20 \"Germany\"\r\n\t// 21 \"Mexico\"\r\n\t// 22 \"Sweden\"\r\n\t// 23 \"Korea Republic\r\n\t// 24 \"Belgium\"\r\n\t// 25 \"Panama\"\r\n\t// 26 \"Tunisia\"\r\n\t// 27 \"England\"\r\n\t// 28 \"Poland\"\r\n\t// 29 \"Senegal\"\r\n\t// 30 \"Colombia\"\r\n\t// 31 \"Japan\"\r\n\r\n\tstruct Country {\r\n\t\taddress owner;\r\n\t\tuint8 id;\r\n\t\tuint price;\r\n\t}\r\n\r\n\tstruct EthCup {\r\n\t\taddress owner;\r\n\t\tuint price;\r\n\t}\r\n\r\n\tEthCup public cup;\r\n\r\n\tmapping (address => uint) public balances;\r\n\tmapping (uint8 => Country) public countries;\r\n\r\n\t/// withdrawWallet is the fixed destination of funds to withdraw. It might\r\n\t/// differ from owner address to allow for a cold storage address.\r\n\taddress public withdrawWallet;\r\n\r\n\tfunction () public payable {\r\n\r\n\t\tbalances[withdrawWallet] += msg.value;\r\n\t}\r\n\r\n\tconstructor() public {\r\n\t\trequire(msg.sender != address(0));\r\n\r\n\t\twithdrawWallet = msg.sender;\r\n\t}\r\n\r\n\tmodifier unlocked() {\r\n\t\trequire(getTime() < LOCK_START || getTime() > LOCK_END);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n   \t* @dev Throws if game is not paused\r\n   \t*/\r\n\tmodifier isPaused() {\r\n\t\trequire(paused == true);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n   \t* @dev Throws if game is paused\r\n   \t*/\r\n\tmodifier buyAvailable() {\r\n\t\trequire(paused == false);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n   \t* @dev Throws if game is paused\r\n   \t*/\r\n\tmodifier cupAvailable() {\r\n\t\trequire(cup.owner != address(0));\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction addCountries() external onlyOwner {\r\n\r\n\t\tfor(uint8 i = 0; i < 32; i++) {\r\n\t\t\tcountries[i] = Country(withdrawWallet, i, startPrice);\r\n\t\t}\t\t\t\r\n\t}\r\n\r\n\t/// @dev Set address withdaw wallet\r\n\t/// @param _address The address where the balance will be withdrawn\r\n\tfunction setWithdrawWallet(address _address) external onlyOwner {\r\n\r\n\t\tuint balance = balances[withdrawWallet];\r\n\r\n\t\tbalances[withdrawWallet] = 0; // Set to zero previous address balance\r\n\r\n\t\twithdrawWallet = _address;\r\n\r\n\t\t// Add the previous balance to the new address\r\n\t\tbalances[withdrawWallet] = balance;\r\n\t}\r\n\r\n\r\n\t///\tBuy a country\r\n\t///\t@param id - The country id\r\n\tfunction buy(uint8 id) external payable buyAvailable unlocked {\r\n\r\n\t\trequire(id < 32);\r\n\t\t\r\n\t\tuint price = getPrice(countries[id].price);\r\n\r\n\t\trequire(msg.value > startPrice);\r\n\t\trequire(msg.value >= price);\r\n\r\n\t\tuint fee = msg.value.mul(DEV_FEE).div(100);\r\n\r\n\t\t// Add sell price minus fees to previous country owner\r\n\t\tbalances[countries[id].owner] += msg.value.sub(fee);\r\n\t\r\n\r\n\t\t// Add fee to developers balance\r\n\t\tbalances[withdrawWallet] += fee;\r\n\r\n\t\t// Set new owner, with new message\r\n\t\tcountries[id].owner = msg.sender;\r\n\t\tcountries[id].price = msg.value;\r\n\r\n\t\t// Trigger buy event\r\n\t\temit Buy(msg.sender, id, msg.value);\r\n\r\n\t}\r\n\r\n\t///\tBuy the cup from previous owner\r\n\tfunction buyCup() external payable buyAvailable cupAvailable {\r\n\r\n\t\tuint price = getPrice(cup.price);\r\n\r\n\t\trequire(msg.value >= price);\r\n\r\n\t\tuint fee = msg.value.mul(DEV_FEE).div(100);\r\n\r\n\t\t// Add sell price minus fees to previous cup owner\r\n\t\tbalances[cup.owner] += msg.value.sub(fee);\r\n\t\r\n\t\t// Add fee to developers balance\r\n\t\tbalances[withdrawWallet] += fee;\r\n\r\n\t\t// Set new owner, with new message\r\n\t\tcup.owner = msg.sender;\r\n\t\tcup.price = msg.value;\r\n\r\n\t\t// Trigger buy event\r\n\t\temit BuyCup(msg.sender, msg.value);\r\n\r\n\t}\r\n\r\n\t/// Get new price\r\n\tfunction getPrice(uint price) public pure returns (uint) {\r\n\r\n\t\treturn uint(int(price) + ((int(price) * BUY_INCREASE) / 100));\r\n\t}\r\n\r\n\r\n\t/// Withdraw the user balance in the contract to the user address.\r\n\tfunction withdraw() external returns (bool) {\r\n\r\n\t\tuint amount = balances[msg.sender];\r\n\r\n\t\trequire(amount > 0);\r\n\r\n\t\tbalances[msg.sender] = 0;\r\n\r\n\t\tif(!msg.sender.send(amount)) {\r\n\t\t\tbalances[msg.sender] = amount;\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// Get user balance\r\n\tfunction getBalance() external view returns(uint) {\r\n\t\treturn balances[msg.sender];\r\n\t}\r\n\r\n\t/// Get user balance by address\r\n\tfunction getBalanceByAddress(address user) external view onlyOwner returns(uint) {\r\n\t\treturn balances[user];\r\n\t}\r\n\r\n\t/// @notice Get a country by its id\r\n\t/// @param id The country id\r\n\tfunction getCountryById(uint8 id) external view returns (address, uint, uint) {\r\n\t\treturn (\r\n\t\t\tcountries[id].owner,\r\n\t\t\tcountries[id].id,\r\n\t\t\tcountries[id].price\r\n\t\t);\r\n\t}\r\n\r\n\t/// Pause the game preventing any buys\r\n\t/// This will only be done to award the cup\r\n\t/// The game will automatically stops purchases during\r\n\t/// the tournament final\r\n\tfunction pause() external onlyOwner {\r\n\r\n\t\trequire(paused == false);\r\n\r\n\t\tpaused = true;\r\n\t}\r\n\r\n\t/// Resume all trading\r\n\tfunction resume() external onlyOwner {\r\n\r\n\t\trequire(paused == true);\r\n\r\n\t\tpaused = false;\r\n\t}\r\n\r\n\t/// Award cup to the tournament champion\r\n\t/// Can only be awarded once, and only if the tournament has finished\r\n\tfunction awardCup(uint8 id) external onlyOwner isPaused {\r\n\r\n\t\taddress owner = countries[id].owner;\r\n\r\n\t\trequire(getTime() > TOURNAMENT_ENDS);\r\n\t\trequire(cup.owner == address(0));\r\n\t\trequire(cup.price == 0);\r\n\t\trequire(owner != address(0));\r\n\r\n\t\tcup = EthCup(owner, cupStartPrice);\r\n\r\n\t}\r\n\r\n\tfunction getTime() public view returns (uint) {\r\n\t\treturn now;\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalanceByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cup\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOURNAMENT_ENDS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEV_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"countries\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint8\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getCountryById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyCup\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"awardCup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BUY_INCREASE\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setWithdrawWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCK_END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addCountries\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCK_START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POOL_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"country\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BuyCup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EthernalCup","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://60521474f2f70c10fdf9372585cbcbd0ecfbde0285a96c532acfd008f238136e"}]}