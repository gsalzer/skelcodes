{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Base contract for Libre oracles.\r\n *\r\n * @dev Base contract for Libre oracles. Not abstract.\r\n */\r\ncontract OwnOracle is Ownable {\r\n    event NewOraclizeQuery();\r\n    event PriceTicker(uint256 rateAmount);\r\n    event BankSet(address bank);\r\n    event UpdaterSet(address updater);\r\n\r\n    bytes32 public oracleName = \"LibreOracle Alpha\";\r\n    bytes16 public oracleType = \"Libre ETHUSD\";\r\n    uint256 public updateTime;\r\n    uint256 public callbackTime;\r\n    address public bankAddress;\r\n    uint256 public rate;\r\n    uint256 public requestPrice = 0;\r\n    bool public waitQuery = false;\r\n    address public updaterAddress;\r\n\r\n    modifier onlyBank() {\r\n        require(msg.sender == bankAddress);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets bank address.\r\n     * @param bank Address of the bank contract.\r\n     */\r\n    function setBank(address bank) public onlyOwner {\r\n        bankAddress = bank;\r\n        BankSet(bankAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets updateAddress address.\r\n     * @param updater Address of the updateAddress.\r\n     */\r\n    function setUpdaterAddress(address updater) public onlyOwner {\r\n        updaterAddress = updater;\r\n        UpdaterSet(updaterAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Return price of LibreOracle request.\r\n     */\r\n    function getPrice() view public returns (uint256) {\r\n        return updaterAddress.balance < requestPrice ? requestPrice : 0;\r\n    }\r\n\r\n    /**\r\n     * @dev oraclize setPrice.\r\n     * @param _requestPriceWei request price in Wei.\r\n     */\r\n    function setPrice(uint256 _requestPriceWei) public onlyOwner {\r\n        requestPrice = _requestPriceWei;\r\n    }\r\n\r\n    /**\r\n     * @dev Requests updating rate from LibreOracle node.\r\n     */\r\n    function updateRate() external onlyBank returns (bool) {\r\n        NewOraclizeQuery();\r\n        updateTime = now;\r\n        waitQuery = true;\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev LibreOracle callback.\r\n    * @param result The callback data as-is (1000$ = 1000).\r\n    */\r\n    function __callback(uint256 result) public {\r\n        require(msg.sender == updaterAddress && waitQuery);\r\n        rate = result;\r\n        callbackTime = now;\r\n        waitQuery = false;\r\n        PriceTicker(result);\r\n    }\r\n\r\n    /**\r\n    * @dev Method used for funding LibreOracle updater wallet. \r\n    */    \r\n    function () public payable {\r\n        updaterAddress.transfer(msg.value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"setBank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracleType\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracleName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"updater\",\"type\":\"address\"}],\"name\":\"setUpdaterAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestPriceWei\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"waitQuery\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"updateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"callbackTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"updaterAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NewOraclizeQuery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rateAmount\",\"type\":\"uint256\"}],\"name\":\"PriceTicker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"BankSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"updater\",\"type\":\"address\"}],\"name\":\"UpdaterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"OwnOracle","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://96d1be592d7d356eb5063afaeec51f3884e9b4ec7d39ad371dca29495222e30a"}]}