{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/// @title ERC20 interface\r\ncontract ERC20 {\r\n    function balanceOf(address guy) public view returns (uint);\r\n    function transfer(address dst, uint wad) public returns (bool);\r\n}\r\n\r\n/// @title Manages access privileges.\r\ncontract AccessControl {\r\n    \r\n    event accessGranted(address user, uint8 access);\r\n    \r\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n    mapping(address => mapping(uint8 => bool)) accessRights;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    /// @dev Grants admin (1) access to deployer of the contract\r\n    function AccessControl() public {\r\n        accessRights[msg.sender][1] = true;\r\n        accessGranted(msg.sender, 1);\r\n    }\r\n\r\n    /// @dev Provides access to a determined transaction\r\n    /// @param _user - user that will be granted the access right\r\n    /// @param _transaction - transaction that will be granted to user\r\n    function grantAccess(address _user, uint8 _transaction) public canAccess(1) {\r\n        require(_user != address(0));\r\n        accessRights[_user][_transaction] = true;\r\n        accessGranted(_user, _transaction);\r\n    }\r\n\r\n    /// @dev Revokes access to a determined transaction\r\n    /// @param _user - user that will have the access revoked\r\n    /// @param _transaction - transaction that will be revoked\r\n    function revokeAccess(address _user, uint8 _transaction) public canAccess(1) {\r\n        require(_user != address(0));\r\n        accessRights[_user][_transaction] = false;\r\n    }\r\n\r\n    /// @dev Check if user has access to a determined transaction\r\n    /// @param _user - user\r\n    /// @param _transaction - transaction\r\n    function hasAccess(address _user, uint8 _transaction) public view returns (bool) {\r\n        require(_user != address(0));\r\n        return accessRights[_user][_transaction];\r\n    }\r\n\r\n    /// @dev Access modifier\r\n    /// @param _transaction - transaction\r\n    modifier canAccess(uint8 _transaction) {\r\n        require(accessRights[msg.sender][_transaction]);\r\n        _;\r\n    }\r\n\r\n    /// @dev Drains all Eth\r\n    function withdrawBalance() external canAccess(2) {\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n\r\n    /// @dev Drains any ERC20 token accidentally sent to contract\r\n    function withdrawTokens(address tokenContract) external canAccess(2) {\r\n        ERC20 tc = ERC20(tokenContract);\r\n        tc.transfer(msg.sender, tc.balanceOf(this));\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() public canAccess(1) whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract.\r\n    function unpause() public canAccess(1) whenPaused {\r\n        paused = false;\r\n    }\r\n}\r\n\r\n\r\n/// @title Contract Echos, prints the certificates\r\ncontract Echos is AccessControl {\r\n\r\n    struct Certificate {\r\n        string name;\r\n        string email;\r\n        string course;\r\n        string dates;\r\n        uint16 courseHours;\r\n        bool valid;\r\n    }\r\n    \r\n    mapping (bytes32 => Certificate) public certificates;\r\n    event logPrintedCertificate(bytes32 contractAddress, string _name, string email, string _course, string _dates, uint16 _hours);\r\n\r\n    function printCertificate (string _name, string _email, string _course, uint16 _hours, string _dates) public canAccess(3) whenNotPaused returns (bytes32 _certificateAddress) {\r\n\r\n        // creates certificate smart contract\r\n        bytes32 certificateAddress = keccak256(block.number, now, msg.data);\r\n\r\n        // create certificate data\r\n        certificates[certificateAddress] = Certificate(_name, _email, _course, _dates, _hours, true);\r\n        \r\n        // creates the event, to be used to query all the certificates\r\n        logPrintedCertificate(certificateAddress, _name, _email, _course, _dates, _hours);\r\n\r\n        return certificateAddress;\r\n    }\r\n    \r\n    // @dev Invalidates a deployed certificate\r\n    function invalidateCertificate(bytes32 _certificateAddress) external canAccess(3) {\r\n        certificates[_certificateAddress].valid = false;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_transaction\",\"type\":\"uint8\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"certificates\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"course\",\"type\":\"string\"},{\"name\":\"dates\",\"type\":\"string\"},{\"name\":\"courseHours\",\"type\":\"uint16\"},{\"name\":\"valid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_email\",\"type\":\"string\"},{\"name\":\"_course\",\"type\":\"string\"},{\"name\":\"_hours\",\"type\":\"uint16\"},{\"name\":\"_dates\",\"type\":\"string\"}],\"name\":\"printCertificate\",\"outputs\":[{\"name\":\"_certificateAddress\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_certificateAddress\",\"type\":\"bytes32\"}],\"name\":\"invalidateCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_transaction\",\"type\":\"uint8\"}],\"name\":\"grantAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_transaction\",\"type\":\"uint8\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractAddress\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"email\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_course\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_dates\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_hours\",\"type\":\"uint16\"}],\"name\":\"logPrintedCertificate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"accessGranted\",\"type\":\"event\"}]","ContractName":"Echos","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0aea0b66eb3966ac1cfcc2b9886e7cc573c04352e8e88ff62a71884eb4e0e48c"}]}