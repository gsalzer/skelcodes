{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Token.sol\r\n\r\ncontract Token is StandardToken, Pausable {\r\n    string constant public name = \"Bace Token\";\r\n    string constant public symbol = \"BACE\";\r\n    uint8 constant public decimals =  18;\r\n\r\n    uint256 constant public INITIAL_TOTAL_SUPPLY = 100 * 1E6 * (uint256(10) ** (decimals));\r\n\r\n    address private addressIco;\r\n\r\n    modifier onlyIco() {\r\n        require(msg.sender == addressIco);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Create BACE Token contract and set pause\r\n    * @param _ico The address of ICO contract.\r\n    */\r\n    function Token(address _ico) public {\r\n        require(_ico != address(0));\r\n        addressIco = _ico;\r\n\r\n        totalSupply = totalSupply.add(INITIAL_TOTAL_SUPPLY);\r\n        balances[_ico] = balances[_ico].add(INITIAL_TOTAL_SUPPLY);\r\n        Transfer(address(0), _ico, INITIAL_TOTAL_SUPPLY);\r\n\r\n        pause();\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address with pause feature for owner.\r\n    * @dev Only applies when the transfer is allowed by the owner.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {\r\n        super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another with pause feature for owner.\r\n    * @dev Only applies when the transfer is allowed by the owner.\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool) {\r\n        super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from ICO address to another address.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transferFromIco(address _to, uint256 _value) onlyIco public returns (bool) {\r\n        super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Burn remaining tokens from the ICO balance.\r\n    */\r\n    function burnFromIco() onlyIco public {\r\n        uint256 remainingTokens = balanceOf(addressIco);\r\n        balances[addressIco] = balances[addressIco].sub(remainingTokens);\r\n        totalSupply = totalSupply.sub(remainingTokens);\r\n        Transfer(addressIco, address(0), remainingTokens);\r\n    }\r\n\r\n    /**\r\n    * @dev Refund tokens from the investor balance.\r\n    * @dev Function is needed for Refund investors ETH, if pre-ICO has failed.\r\n    */\r\n    function refund(address _to, uint256 _value) onlyIco public {\r\n        require(_value <= balances[_to]);\r\n\r\n        address addr = _to;\r\n        balances[addr] = balances[addr].sub(_value);\r\n        balances[addressIco] = balances[addressIco].add(_value);\r\n        Transfer(_to, addressIco, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/Whitelist.sol\r\n\r\n/**\r\n * @title Whitelist contract\r\n * @dev Whitelist for wallets.\r\n*/\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) whitelist;\r\n\r\n    uint256 public whitelistLength = 0;\r\n\t\r\n\taddress private addressApi;\r\n\t\r\n\tmodifier onlyPrivilegeAddresses {\r\n        require(msg.sender == addressApi || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Set backend Api address.\r\n    * @dev Accept request from owner only.\r\n    * @param _api The address of backend API.\r\n    */\r\n    function setApiAddress(address _api) onlyOwner public {\r\n        require(_api != address(0));\r\n\r\n        addressApi = _api;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Add wallet to whitelist.\r\n    * @dev Accept request from the owner only.\r\n    * @param _wallet The address of wallet to add.\r\n    */  \r\n    function addWallet(address _wallet) onlyPrivilegeAddresses public {\r\n        require(_wallet != address(0));\r\n        require(!isWhitelisted(_wallet));\r\n        whitelist[_wallet] = true;\r\n        whitelistLength++;\r\n    }\r\n\r\n    /**\r\n    * @dev Remove wallet from whitelist.\r\n    * @dev Accept request from the owner only.\r\n    * @param _wallet The address of whitelisted wallet to remove.\r\n    */  \r\n    function removeWallet(address _wallet) onlyOwner public {\r\n        require(_wallet != address(0));\r\n        require(isWhitelisted(_wallet));\r\n        whitelist[_wallet] = false;\r\n        whitelistLength--;\r\n    }\r\n\r\n    /**\r\n    * @dev Check the specified wallet whether it is in the whitelist.\r\n    * @param _wallet The address of wallet to check.\r\n    */ \r\n    function isWhitelisted(address _wallet) view public returns (bool) {\r\n        return whitelist[_wallet];\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/Whitelistable.sol\r\n\r\n/**\r\n * @title Whitelistable contract.\r\n * @dev Contract that can be embedded in another contract, to add functionality \"whitelist\".\r\n */\r\n\r\n\r\ncontract Whitelistable {\r\n    Whitelist public whitelist;\r\n\r\n    modifier whenWhitelisted(address _wallet) {\r\n        require(whitelist.isWhitelisted(_wallet));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Constructor for Whitelistable contract.\r\n    */\r\n    function Whitelistable() public {\r\n        whitelist = new Whitelist();\r\n    }\r\n}\r\n\r\n// File: contracts/Crowdsale.sol\r\n\r\ncontract Crowdsale is Pausable, Whitelistable {\r\n    using SafeMath for uint256;\r\n\r\n    /////////////////////////////\r\n    //Constant block\r\n    //\r\n    // DECIMALS = 18\r\n    uint256 constant private DECIMALS = 18;\r\n    // rate 1 ETH = 180 BACE tokens\r\n    uint256 constant public BACE_ETH = 1800;\r\n    // Bonus: 20%\r\n    uint256 constant public PREICO_BONUS = 20;\r\n    // 20 000 000 * 10^18\r\n    uint256 constant public RESERVED_TOKENS_BACE_TEAM = 20 * 1E6 * (10 ** DECIMALS);\r\n    // 10 000 000 * 10^18\r\n    uint256 constant public RESERVED_TOKENS_ANGLE = 10 * 1E6 * (10 ** DECIMALS);\r\n    // 10 000 000 * 10^18\r\n    uint256 constant public HARDCAP_TOKENS_PRE_ICO = 10 * 1E6 * (10 ** DECIMALS);\r\n    // 70 000 000 * 10^18\r\n    uint256 constant public HARDCAP_TOKENS_ICO = 70 * 1E6 * (10 ** DECIMALS);\r\n    // 5 000 000 * 10^18\r\n    uint256 constant public MINCAP_TOKENS = 5 * 1E6 * (10 ** DECIMALS);\r\n    /////////////////////////////\r\n\r\n    /////////////////////////////\r\n    //Live cycle block\r\n    //\r\n    uint256 public maxInvestments;\r\n\r\n    uint256 public minInvestments;\r\n\r\n    /**\r\n     * @dev test mode.\r\n     * @dev if test mode is \"true\" allows to change caps in an deployed contract\r\n     */\r\n    bool private testMode;\r\n\r\n    /**\r\n     * @dev contract BACE token object.\r\n     */\r\n    Token public token;\r\n\r\n    /**\r\n     * @dev start time of PreIco stage.\r\n     */\r\n    uint256 public preIcoStartTime;\r\n\r\n    /**\r\n     * @dev finish time of PreIco stage.\r\n     */\r\n    uint256 public preIcoFinishTime;\r\n\r\n    /**\r\n     * @dev start time of Ico stage.\r\n     */\r\n    uint256 public icoStartTime;\r\n\r\n    /**\r\n     * @dev finish time of Ico stage.\r\n     */\r\n    uint256 public icoFinishTime;\r\n\r\n    /**\r\n     * @dev were the Ico dates set?\r\n     */\r\n    bool public icoInstalled;\r\n\r\n    /**\r\n     * @dev The address to backend program.\r\n     */\r\n    address private backendWallet;\r\n\r\n    /**\r\n     * @dev The address to which raised funds will be withdrawn.\r\n     */\r\n    address private withdrawalWallet;\r\n\r\n    /**\r\n     * @dev The guard interval.\r\n     */\r\n    uint256 public guardInterval;\r\n    ////////////////////////////\r\n\r\n    /////////////////////////////\r\n    //ETH block\r\n    //\r\n    /**\r\n     * @dev Map of investors. Key = address, Value = Total ETH at PreIco.\r\n     */\r\n    mapping(address => uint256) public preIcoInvestors;\r\n\r\n    /**\r\n     * @dev Array of addresses of investors at PreIco.\r\n     */\r\n    address[] public preIcoInvestorsAddresses;\r\n\r\n    /**\r\n     * @dev Map of investors. Key = address, Value = Total ETH at Ico.\r\n     */\r\n    mapping(address => uint256) public icoInvestors;\r\n\r\n    /**\r\n     * @dev Array of addresses of investors at Ico.\r\n     */\r\n    address[] public icoInvestorsAddresses;\r\n\r\n    /**\r\n     * @dev Amount of investment collected in PreIco stage. (without BTC investment)\r\n     */\r\n    uint256 public preIcoTotalCollected;\r\n\r\n    /**\r\n     * @dev Amount of investment collected in Ico stage. (without BTC investment)\r\n     */\r\n    uint256 public icoTotalCollected;\r\n    ////////////////////////////\r\n\r\n    ////////////////////////////\r\n    //Tokens block\r\n    //\r\n\r\n    /**\r\n     * @dev Map of investors. Key = address, Value = Total tokens at PreIco.\r\n     */\r\n    mapping(address => uint256) public preIcoTokenHolders;\r\n\r\n    /**\r\n     * @dev Array of addresses of investors.\r\n     */\r\n    address[] public preIcoTokenHoldersAddresses;\r\n\r\n    /**\r\n     * @dev Map of investors. Key = address, Value = Total tokens at PreIco.\r\n     */\r\n    mapping(address => uint256) public icoTokenHolders;\r\n\r\n    /**\r\n     * @dev Array of addresses of investors.\r\n     */\r\n    address[] public icoTokenHoldersAddresses;\r\n\r\n    /**\r\n     * @dev the minimum amount in tokens for the investment.\r\n     */\r\n    uint256 public minCap;\r\n\r\n    /**\r\n     * @dev the maximum amount in tokens for the investment in the PreIco stage.\r\n     */\r\n    uint256 public hardCapPreIco;\r\n\r\n    /**\r\n     * @dev the maximum amount in tokens for the investment in the Ico stage.\r\n     */\r\n    uint256 public hardCapIco;\r\n\r\n    /**\r\n     * @dev number of sold tokens issued in  PreIco stage.\r\n     */\r\n    uint256 public preIcoSoldTokens;\r\n\r\n    /**\r\n     * @dev number of sold tokens issued in Ico stage.\r\n     */\r\n    uint256 public icoSoldTokens;\r\n\r\n    /**\r\n     * @dev The BACE token exchange rate for PreIco stage.\r\n     */\r\n    uint256 public exchangeRatePreIco;\r\n\r\n    /**\r\n     * @dev The BACE token exchange rate for Ico stage.\r\n     */\r\n    uint256 public exchangeRateIco;\r\n\r\n    /**\r\n     * @dev unsold BACE tokens burned?.\r\n     */\r\n    bool burnt;\r\n    ////////////////////////////\r\n\r\n    /**\r\n     * @dev Constructor for Crowdsale contract.\r\n     * @dev Set the owner who can manage whitelist and token.\r\n     * @param _startTimePreIco The PreIco start time.\r\n     * @param _endTimePreIco The PreIco end time.\r\n     * @param _angelInvestorsWallet The address to which reserved tokens angel investors will be transferred.\r\n     * @param _foundersWallet The address to which reserved tokens for founders will be transferred.\r\n     * @param _backendWallet The address to backend program.\r\n     * @param _withdrawalWallet The address to which raised funds will be withdrawn.\r\n     * @param _testMode test mode is on?\r\n     */\r\n    function Crowdsale (\r\n        uint256 _startTimePreIco,\r\n        uint256 _endTimePreIco,\r\n        address _angelInvestorsWallet,\r\n        address _foundersWallet,\r\n        address _backendWallet,\r\n        address _withdrawalWallet,\r\n        uint256 _maxInvestments,\r\n        uint256 _minInvestments,\r\n        bool _testMode\r\n    ) public Whitelistable()\r\n    {\r\n        require(_angelInvestorsWallet != address(0) && _foundersWallet != address(0) && _backendWallet != address(0) && _withdrawalWallet != address(0));\r\n        require(_startTimePreIco >= now && _endTimePreIco > _startTimePreIco);\r\n        require(_maxInvestments != 0 && _minInvestments != 0 && _maxInvestments > _minInvestments);\r\n\r\n        ////////////////////////////\r\n        //Live cycle block init\r\n        //\r\n        testMode = _testMode;\r\n        token = new Token(this);\r\n        maxInvestments = _maxInvestments;\r\n        minInvestments = _minInvestments;\r\n        preIcoStartTime = _startTimePreIco;\r\n        preIcoFinishTime = _endTimePreIco;\r\n        icoStartTime = 0;\r\n        icoFinishTime = 0;\r\n        icoInstalled = false;\r\n        guardInterval = uint256(86400).mul(7); //guard interval - 1 week\r\n        /////////////////////////////\r\n\r\n        ////////////////////////////\r\n        //ETH block init\r\n        preIcoTotalCollected = 0;\r\n        icoTotalCollected = 0;\r\n        /////////////////////////////\r\n\r\n        ////////////////////////////\r\n        //Tokens block init\r\n        //\r\n        minCap = MINCAP_TOKENS;\r\n        hardCapPreIco = HARDCAP_TOKENS_PRE_ICO;\r\n        hardCapIco = HARDCAP_TOKENS_ICO;\r\n        preIcoSoldTokens = 0;\r\n        icoSoldTokens = 0;\r\n        exchangeRateIco = BACE_ETH;\r\n        exchangeRatePreIco = exchangeRateIco.mul(uint256(100).add(PREICO_BONUS)).div(100);\r\n        burnt = false;\r\n        ////////////////////////////\r\n\r\n        backendWallet = _backendWallet;\r\n        withdrawalWallet = _withdrawalWallet;\r\n\r\n        whitelist.transferOwnership(msg.sender);\r\n\r\n        token.transferFromIco(_angelInvestorsWallet, RESERVED_TOKENS_ANGLE);\r\n        token.transferFromIco(_foundersWallet, RESERVED_TOKENS_BACE_TEAM);\r\n        token.transferOwnership(msg.sender);\r\n    }\r\n\r\n    modifier isTestMode() {\r\n        require(testMode);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev check Ico Failed.\r\n     * @return bool true if Ico Failed.\r\n     */\r\n    function isIcoFailed() public view returns (bool) {\r\n        return isIcoFinish() && icoSoldTokens.add(preIcoSoldTokens) < minCap;\r\n    }\r\n\r\n    /**\r\n     * @dev check Ico Success.\r\n     * @return bool true if Ico Success.\r\n     */\r\n    function isIcoSuccess() public view returns (bool) {\r\n        return isIcoFinish() && icoSoldTokens.add(preIcoSoldTokens) >= minCap;\r\n    }\r\n\r\n    /**\r\n     * @dev check PreIco Stage.\r\n     * @return bool true if PreIco Stage now.\r\n     */\r\n    function isPreIcoStage() public view returns (bool) {\r\n        return now > preIcoStartTime && now < preIcoFinishTime;\r\n    }\r\n\r\n    /**\r\n     * @dev check Ico Stage.\r\n     * @return bool true if Ico Stage now.\r\n     */\r\n    function isIcoStage() public view returns (bool) {\r\n        return icoInstalled && now > icoStartTime && now < icoFinishTime;\r\n    }\r\n\r\n    /**\r\n     * @dev check PreIco Finish.\r\n     * @return bool true if PreIco Finished.\r\n     */\r\n    function isPreIcoFinish() public view returns (bool) {\r\n        return now > preIcoFinishTime;\r\n    }\r\n\r\n    /**\r\n     * @dev check Ico Finish.\r\n     * @return bool true if Ico Finished.\r\n     */\r\n    function isIcoFinish() public view returns (bool) {\r\n        return icoInstalled && now > icoFinishTime;\r\n    }\r\n\r\n    /**\r\n     * @dev guard interval finished?\r\n     * @return bool true if guard Interval finished.\r\n     */\r\n    function guardIntervalFinished() public view returns (bool) {\r\n        return now > icoFinishTime.add(guardInterval);\r\n    }\r\n\r\n    /**\r\n     * @dev Set start time and end time for Ico.\r\n     * @param _startTimeIco The Ico start time.\r\n     * @param _endTimeIco The Ico end time.\r\n     */\r\n    function setStartTimeIco(uint256 _startTimeIco, uint256 _endTimeIco) onlyOwner public {\r\n        require(_startTimeIco >= now && _endTimeIco > _startTimeIco && _startTimeIco > preIcoFinishTime);\r\n\r\n        icoStartTime = _startTimeIco;\r\n        icoFinishTime = _endTimeIco;\r\n        icoInstalled = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remaining amount of tokens for PreIco stage.\r\n     */\r\n    function tokensRemainingPreIco() public view returns(uint256) {\r\n        if (isPreIcoFinish()) {\r\n            return 0;\r\n        }\r\n        return hardCapPreIco.sub(preIcoSoldTokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Remaining amount of tokens for Ico stage.\r\n     */\r\n    function tokensRemainingIco() public view returns(uint256) {\r\n        if (burnt) {\r\n            return 0;\r\n        }\r\n        if (isPreIcoFinish()) {\r\n            return hardCapIco.sub(icoSoldTokens).sub(preIcoSoldTokens);\r\n        }\r\n        return hardCapIco.sub(hardCapPreIco).sub(icoSoldTokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Add information about the investment at the PreIco stage.\r\n     * @param _addr Investor's address.\r\n     * @param _weis Amount of wei(1 ETH = 1 * 10 ** 18 wei) received.\r\n     * @param _tokens Amount of Token for investor.\r\n     */\r\n    function addInvestInfoPreIco(address _addr,  uint256 _weis, uint256 _tokens) private {\r\n        if (preIcoTokenHolders[_addr] == 0) {\r\n            preIcoTokenHoldersAddresses.push(_addr);\r\n        }\r\n        preIcoTokenHolders[_addr] = preIcoTokenHolders[_addr].add(_tokens);\r\n        preIcoSoldTokens = preIcoSoldTokens.add(_tokens);\r\n        if (_weis > 0) {\r\n            if (preIcoInvestors[_addr] == 0) {\r\n                preIcoInvestorsAddresses.push(_addr);\r\n            }\r\n            preIcoInvestors[_addr] = preIcoInvestors[_addr].add(_weis);\r\n            preIcoTotalCollected = preIcoTotalCollected.add(_weis);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Add information about the investment at the Ico stage.\r\n     * @param _addr Investor's address.\r\n     * @param _weis Amount of wei(1 ETH = 1 * 10 ** 18 wei) received.\r\n     * @param _tokens Amount of Token for investor.\r\n     */\r\n    function addInvestInfoIco(address _addr,  uint256 _weis, uint256 _tokens) private {\r\n        if (icoTokenHolders[_addr] == 0) {\r\n            icoTokenHoldersAddresses.push(_addr);\r\n        }\r\n        icoTokenHolders[_addr] = icoTokenHolders[_addr].add(_tokens);\r\n        icoSoldTokens = icoSoldTokens.add(_tokens);\r\n        if (_weis > 0) {\r\n            if (icoInvestors[_addr] == 0) {\r\n                icoInvestorsAddresses.push(_addr);\r\n            }\r\n            icoInvestors[_addr] = icoInvestors[_addr].add(_weis);\r\n            icoTotalCollected = icoTotalCollected.add(_weis);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function can be used to buy tokens.\r\n     */\r\n    function() public payable {\r\n        acceptInvestments(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev function can be used to buy tokens by ETH investors.\r\n     */\r\n    function sellTokens() public payable {\r\n        acceptInvestments(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Function processing new investments.\r\n     * @param _addr Investor's address.\r\n     * @param _amount The amount of wei(1 ETH = 1 * 10 ** 18 wei) received.\r\n     */\r\n    function acceptInvestments(address _addr, uint256 _amount) private whenWhitelisted(msg.sender) whenNotPaused {\r\n        require(_addr != address(0) && _amount >= minInvestments);\r\n\r\n        bool preIco = isPreIcoStage();\r\n        bool ico = isIcoStage();\r\n\r\n        require(preIco || ico);\r\n        require((preIco && tokensRemainingPreIco() > 0) || (ico && tokensRemainingIco() > 0));\r\n\r\n        uint256 intermediateEthInvestment;\r\n        uint256 ethSurrender = 0;\r\n        uint256 currentEth = preIco ? preIcoInvestors[_addr] : icoInvestors[_addr];\r\n\r\n        if (currentEth.add(_amount) > maxInvestments) {\r\n            intermediateEthInvestment = maxInvestments.sub(currentEth);\r\n            ethSurrender = ethSurrender.add(_amount.sub(intermediateEthInvestment));\r\n        } else {\r\n            intermediateEthInvestment = _amount;\r\n        }\r\n\r\n        uint256 currentRate = preIco ? exchangeRatePreIco : exchangeRateIco;\r\n        uint256 intermediateTokenInvestment = intermediateEthInvestment.mul(currentRate);\r\n        uint256 tokensRemaining = preIco ? tokensRemainingPreIco() : tokensRemainingIco();\r\n        uint256 currentTokens = preIco ? preIcoTokenHolders[_addr] : icoTokenHolders[_addr];\r\n        uint256 weiToAccept;\r\n        uint256 tokensToSell;\r\n\r\n        if (currentTokens.add(intermediateTokenInvestment) > tokensRemaining) {\r\n            tokensToSell = tokensRemaining;\r\n            weiToAccept = tokensToSell.div(currentRate);\r\n            ethSurrender = ethSurrender.add(intermediateEthInvestment.sub(weiToAccept));\r\n        } else {\r\n            tokensToSell = intermediateTokenInvestment;\r\n            weiToAccept = intermediateEthInvestment;\r\n        }\r\n\r\n        if (preIco) {\r\n            addInvestInfoPreIco(_addr, weiToAccept, tokensToSell);\r\n        } else {\r\n            addInvestInfoIco(_addr, weiToAccept, tokensToSell);\r\n        }\r\n\r\n        token.transferFromIco(_addr, tokensToSell);\r\n\r\n        if (ethSurrender > 0) {\r\n            msg.sender.transfer(ethSurrender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Function can be used to buy tokens by third-party investors.\r\n     * @dev Only the owner or the backend can call this function.\r\n     * @param _addr Investor's address.\r\n     * @param _value Amount of Token for investor.\r\n     */\r\n    function thirdPartyInvestments(address _addr, uint256 _value) public  whenWhitelisted(_addr) whenNotPaused {\r\n        require(msg.sender == backendWallet || msg.sender == owner);\r\n        require(_addr != address(0) && _value > 0);\r\n\r\n        bool preIco = isPreIcoStage();\r\n        bool ico = isIcoStage();\r\n\r\n        require(preIco || ico);\r\n        require((preIco && tokensRemainingPreIco() > 0) || (ico && tokensRemainingIco() > 0));\r\n\r\n        uint256 currentRate = preIco ? exchangeRatePreIco : exchangeRateIco;\r\n        uint256 currentTokens = preIco ? preIcoTokenHolders[_addr] : icoTokenHolders[_addr];\r\n\r\n        require(maxInvestments.mul(currentRate) >= currentTokens.add(_value));\r\n        require(minInvestments.mul(currentRate) <= _value);\r\n\r\n        uint256 tokensRemaining = preIco ? tokensRemainingPreIco() : tokensRemainingIco();\r\n\r\n        require(tokensRemaining >= _value);\r\n\r\n        if (preIco) {\r\n            addInvestInfoPreIco(_addr, 0, _value);\r\n        } else {\r\n            addInvestInfoIco(_addr, 0, _value);\r\n        }\r\n\r\n        token.transferFromIco(_addr, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Send raised funds to the withdrawal wallet.\r\n     * @param _weiAmount The amount of raised funds to withdraw.\r\n     */\r\n    function forwardFunds(uint256 _weiAmount) public onlyOwner {\r\n        require(isIcoSuccess() || (isIcoFailed() && guardIntervalFinished()));\r\n        withdrawalWallet.transfer(_weiAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Function for refund eth if Ico failed and guard interval has not expired.\r\n     * @dev Any wallet can call the function.\r\n     * @dev Function returns ETH for sender if it is a member of Ico or(and) PreIco.\r\n     */\r\n    function refund() public {\r\n        require(isIcoFailed() && !guardIntervalFinished());\r\n\r\n        uint256 ethAmountPreIco = preIcoInvestors[msg.sender];\r\n        uint256 ethAmountIco = icoInvestors[msg.sender];\r\n        uint256 ethAmount = ethAmountIco.add(ethAmountPreIco);\r\n\r\n        uint256 tokensAmountPreIco = preIcoTokenHolders[msg.sender];\r\n        uint256 tokensAmountIco = icoTokenHolders[msg.sender];\r\n        uint256 tokensAmount = tokensAmountPreIco.add(tokensAmountIco);\r\n\r\n        require(ethAmount > 0 && tokensAmount > 0);\r\n\r\n        preIcoInvestors[msg.sender] = 0;\r\n        icoInvestors[msg.sender] = 0;\r\n        preIcoTokenHolders[msg.sender] = 0;\r\n        icoTokenHolders[msg.sender] = 0;\r\n\r\n        msg.sender.transfer(ethAmount);\r\n        token.refund(msg.sender, tokensAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Set new withdrawal wallet address.\r\n     * @param _addr new withdrawal Wallet address.\r\n     */\r\n    function setWithdrawalWallet(address _addr) public onlyOwner {\r\n        require(_addr != address(0));\r\n\r\n        withdrawalWallet = _addr;\r\n    }\r\n\r\n    /**\r\n        * @dev Set new backend wallet address.\r\n        * @param _addr new backend Wallet address.\r\n        */\r\n    function setBackendWallet(address _addr) public onlyOwner {\r\n        require(_addr != address(0));\r\n\r\n        backendWallet = _addr;\r\n    }\r\n\r\n    /**\r\n    * @dev Burn unsold tokens from the Ico balance.\r\n    * @dev Only applies when the Ico was ended.\r\n    */\r\n    function burnUnsoldTokens() onlyOwner public {\r\n        require(isIcoFinish());\r\n        token.burnFromIco();\r\n        burnt = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Set new MinCap.\r\n     * @param _newMinCap new MinCap,\r\n     */\r\n    function setMinCap(uint256 _newMinCap) public onlyOwner isTestMode {\r\n        require(now < preIcoFinishTime);\r\n        minCap = _newMinCap;\r\n    }\r\n\r\n    /**\r\n     * @dev Set new PreIco HardCap.\r\n     * @param _newPreIcoHardCap new PreIco HardCap,\r\n     */\r\n    function setPreIcoHardCap(uint256 _newPreIcoHardCap) public onlyOwner isTestMode {\r\n        require(now < preIcoFinishTime);\r\n        require(_newPreIcoHardCap <= hardCapIco);\r\n        hardCapPreIco = _newPreIcoHardCap;\r\n    }\r\n\r\n    /**\r\n     * @dev Set new Ico HardCap.\r\n     * @param _newIcoHardCap new Ico HardCap,\r\n     */\r\n    function setIcoHardCap(uint256 _newIcoHardCap) public onlyOwner isTestMode {\r\n        require(now < preIcoFinishTime);\r\n        require(_newIcoHardCap > hardCapPreIco);\r\n        hardCapIco = _newIcoHardCap;\r\n    }\r\n\r\n    /**\r\n     * @dev Count the Ico investors total.\r\n     */\r\n    function getIcoTokenHoldersAddressesCount() public view returns(uint256) {\r\n        return icoTokenHoldersAddresses.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Count the PreIco investors total.\r\n     */\r\n    function getPreIcoTokenHoldersAddressesCount() public view returns(uint256) {\r\n        return preIcoTokenHoldersAddresses.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Count the Ico investors total (not including third-party investors).\r\n     */\r\n    function getIcoInvestorsAddressesCount() public view returns(uint256) {\r\n        return icoInvestorsAddresses.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Count the PreIco investors total (not including third-party investors).\r\n     */\r\n    function getPreIcoInvestorsAddressesCount() public view returns(uint256) {\r\n        return preIcoInvestorsAddresses.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Get backend wallet address.\r\n     */\r\n    function getBackendWallet() public view returns(address) {\r\n        return backendWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Get Withdrawal wallet address.\r\n     */\r\n    function getWithdrawalWallet() public view returns(address) {\r\n        return withdrawalWallet;\r\n    }\r\n}\r\n\r\n// File: contracts/CrowdsaleFactory.sol\r\n\r\ncontract Factory {\r\n    Crowdsale public crowdsale;\r\n\r\n    function createCrowdsale (\r\n        uint256 _startTimePreIco,\r\n        uint256 _endTimePreIco,\r\n        address _angelInvestorsWallet,\r\n        address _foundersWallet,\r\n        address _backendWallet,\r\n        address _withdrawalWallet,\r\n        uint256 _maxInvestments,\r\n        uint256 _minInvestments,\r\n        bool _testMode\r\n    ) public\r\n    {\r\n        crowdsale = new Crowdsale(\r\n            _startTimePreIco,\r\n            _endTimePreIco,\r\n            _angelInvestorsWallet,\r\n            _foundersWallet,\r\n            _backendWallet,\r\n            _withdrawalWallet,\r\n            _maxInvestments,\r\n            _minInvestments,\r\n            _testMode\r\n        );\r\n\r\n        Whitelist whitelist = crowdsale.whitelist();\r\n        whitelist.transferOwnership(msg.sender);\r\n\r\n        Token token = crowdsale.token();\r\n        token.transferOwnership(msg.sender);\r\n\r\n        crowdsale.transferOwnership(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBackendWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"icoInvestorsAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRateIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVED_TOKENS_ANGLE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBackendWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIcoTokenHoldersAddressesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIcoStage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"thirdPartyInvestments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preIcoInvestorsAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preIcoTokenHoldersAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARDCAP_TOKENS_ICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoFinishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"preIcoTokenHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARDCAP_TOKENS_PRE_ICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRatePreIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVED_TOKENS_BACE_TEAM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPreIcoTokenHoldersAddressesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPreIcoHardCap\",\"type\":\"uint256\"}],\"name\":\"setPreIcoHardCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardIntervalFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapPreIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setWithdrawalWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PREICO_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRemainingIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"icoTokenHoldersAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPreIcoInvestorsAddressesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BACE_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIcoInvestorsAddressesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoTotalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icoInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTotalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreIcoFinish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newIcoHardCap\",\"type\":\"uint256\"}],\"name\":\"setIcoHardCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinCap\",\"type\":\"uint256\"}],\"name\":\"setMinCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithdrawalWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoInstalled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRemainingPreIco\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINCAP_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTimeIco\",\"type\":\"uint256\"},{\"name\":\"_endTimeIco\",\"type\":\"uint256\"}],\"name\":\"setStartTimeIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"forwardFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icoTokenHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIcoFinish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoFinishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIcoSuccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPreIcoStage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIcoFailed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"preIcoInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTimePreIco\",\"type\":\"uint256\"},{\"name\":\"_endTimePreIco\",\"type\":\"uint256\"},{\"name\":\"_angelInvestorsWallet\",\"type\":\"address\"},{\"name\":\"_foundersWallet\",\"type\":\"address\"},{\"name\":\"_backendWallet\",\"type\":\"address\"},{\"name\":\"_withdrawalWallet\",\"type\":\"address\"},{\"name\":\"_maxInvestments\",\"type\":\"uint256\"},{\"name\":\"_minInvestments\",\"type\":\"uint256\"},{\"name\":\"_testMode\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005ac25380000000000000000000000000000000000000000000000000000000005ad4c8800000000000000000000000003aaee16d531378f3e4633083955fbbe7b9afca830000000000000000000000003104312a82f6c59e1dfbc821756be6ed2cef672a00000000000000000000000004ff23d3a851f6c56707be958a216acdc295d56a000000000000000000000000a521de135b265c9f6e65ab467eaff96113faa62d000000000000000000000000000000000000000000000011e3ab8395c6e80000000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://9c83b066ec53b70c1c7b3788e15104ce97ac0e890966165e426e3d3cc3a2ad53"}]}