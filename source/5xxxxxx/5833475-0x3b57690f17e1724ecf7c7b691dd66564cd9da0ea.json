{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    \r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) external view returns (uint256 amount);\r\n    function transfer(address _to, uint256 _value) external returns(bool success);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\ncontract Burnable {\r\n    \r\n    function burn(uint256 _value) external returns(bool success);\r\n    function burnFrom(address _from, uint256 _value) external returns(bool success);\r\n    \r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed _from, uint256 _value);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    \r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"only Owner can do this\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) \r\n    external onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() \r\n    external {\r\n        require(msg.sender == newOwner, \"only new Owner can do this\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n    \r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n}\r\n\r\ncontract Permissioned {\r\n    \r\n    function approve(address _spender, uint256 _value) public returns(bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns(bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 amount);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"mul overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"div by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"sub overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a, \"add overflow\");\r\n        return c;\r\n    }\r\n}\r\n\r\n//interface for approveAndCall\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\n/** @title NelCoin token. */\r\ncontract NelCoin is ERC20Interface, Burnable, Owned, Permissioned {\r\n    // be aware of overflows\r\n    using SafeMath for uint256;\r\n\r\n    // This creates an array with all balances\r\n    mapping(address => uint256) internal _balanceOf;\r\n    \r\n    // This creates an array with all allowance\r\n    mapping(address => mapping(address => uint256)) internal _allowance;\r\n\t\r\n\tuint public forSale;\r\n\r\n    /**\r\n    * Constructor function\r\n    *\r\n    * Initializes contract with initial supply tokens to the creator of the contract\r\n    */\r\n    constructor()\r\n    public {\r\n        owner = msg.sender;\r\n        symbol = \"NEL\";\r\n        name = \"NelCoin\";\r\n        decimals = 2;\r\n        forSale = 12000000 * (10 ** uint(decimals));\r\n        totalSupply = 21000000 * (10 ** uint256(decimals));\r\n        _balanceOf[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n\r\n    /**\r\n    * Get the token balance for account\r\n    *\r\n    * Get token balance of `_owner` account\r\n    *\r\n    * @param _owner The address of the owner\r\n    */\r\n    function balanceOf(address _owner)\r\n    external view\r\n    returns(uint256 balance) {\r\n        return _balanceOf[_owner];\r\n    }\r\n\r\n    /**\r\n    * Internal transfer, only can be called by this contract\r\n    */\r\n    function _transfer(address _from, address _to, uint256 _value)\r\n    internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != address(0), \"use burn() instead\");\r\n        // Check if the sender has enough\r\n        require(_balanceOf[_from] >= _value, \"not enough balance\");\r\n        // Subtract from the sender\r\n        _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n        // Add the same to the recipient\r\n        _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * Transfer tokens\r\n    *\r\n    * Send `_value` tokens to `_to` from your account\r\n    *\r\n    * @param _to The address of the recipient\r\n    * @param _value the amount to send\r\n    */\r\n    function transfer(address _to, uint256 _value)\r\n    external\r\n    returns(bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Transfer tokens from other address\r\n    *\r\n    * Send `_value` tokens to `_to` on behalf of `_from`\r\n    *\r\n    * @param _from The address of the sender\r\n    * @param _to The address of the recipient\r\n    * @param _value the amount to send\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    external\r\n    returns(bool success) {\r\n        require(_value <= _allowance[_from][msg.sender], \"allowance too loow\");     // Check allowance\r\n        _allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        emit Approval(_from, _to, _allowance[_from][_to]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Set allowance for other address\r\n    *\r\n    * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n    *\r\n    * @param _spender The address authorized to spend\r\n    * @param _value the max amount they can spend\r\n    */\r\n    function approve(address _spender, uint256 _value)\r\n    public\r\n    returns(bool success) {\r\n        _allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Set allowance for other address and notify\r\n    *\r\n    * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n    *\r\n    * @param _spender The address authorized to spend\r\n    * @param _value the max amount they can spend\r\n    * @param _extraData some extra information to send to the approved contract\r\n    */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n    external\r\n    returns(bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address _owner, address _spender)\r\n    external view\r\n    returns(uint256 amount) {\r\n        return _allowance[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    *\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseApproval(address _spender, uint _addedValue)\r\n    external\r\n    returns(bool success) {\r\n        _allowance[msg.sender][_spender] = _allowance[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, _allowance[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    *\r\n    * approve should be called when allowed[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseApproval(address _spender, uint _subtractedValue)\r\n    external\r\n    returns(bool success) {\r\n        uint256 oldValue = _allowance[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            _allowance[msg.sender][_spender] = 0;\r\n        } else {\r\n            _allowance[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, _allowance[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Destroy tokens\r\n    *\r\n    * Remove `_value` tokens from the system irreversibly\r\n    *\r\n    * @param _value the amount of money to burn\r\n    */\r\n    function burn(uint256 _value)\r\n    external\r\n    returns(bool success) {\r\n        _burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Destroy tokens from other account\r\n    *\r\n    * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n    *\r\n    * @param _from the address of the sender\r\n    * @param _value the amount of money to burn\r\n    */\r\n    function burnFrom(address _from, uint256 _value)\r\n    external\r\n    returns(bool success) {\r\n        require(_value <= _allowance[_from][msg.sender], \"allowance too low\");                           // Check allowance\r\n        require(_value <= _balanceOf[_from], \"balance too low\");                                       // Is tehere enough coins on account\r\n        _allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value);  // Subtract from the sender's allowance\r\n        _burn(_from, _value);\r\n        emit Approval(_from, msg.sender, _allowance[_from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    //internal burn function\r\n    function _burn(address _from, uint256 _value)\r\n    internal {\r\n        require(_balanceOf[_from] >= _value, \"balance too low\");               // Check if the targeted balance is enough\r\n        _balanceOf[_from] = _balanceOf[_from].sub(_value);  // Subtract from the sender\r\n        totalSupply = totalSupply.sub(_value);              // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        emit Transfer(_from, address(0), _value);\r\n    }\r\n\r\n\t//We accept intentional donations in ETH\r\n    event Donated(address indexed _from, uint256 _value);\r\n\r\n\t/**\r\n    * Donate ETH tokens to contract (Owner)\r\n    */\r\n\tfunction donation() \r\n    external payable \r\n    returns (bool success){\r\n        emit Donated(msg.sender, msg.value);\r\n        return(true);\r\n    }\r\n    \r\n    //Don`t accept accidental ETH\r\n    function()\r\n    external payable\r\n    {\r\n        require(false, \"Use fund() or donation()\");\r\n    }\r\n    \r\n\t/**\r\n\t * Buy NelCoin using ETH\r\n\t * Contract is selling tokens at price 20000NEL/1ETH, \r\n\t * total 12000000NEL for sale\r\n\t */\r\n\tfunction fund()\r\n\texternal payable\r\n\treturns (uint amount){\r\n\t\trequire(forSale > 0, \"Sold out!\");\r\n\t\tuint tokenCount = ((msg.value).mul(20000 * (10 ** uint(decimals)))).div(10**18);\r\n\t\trequire(tokenCount >= 1, \"Send more ETH to buy at least one token!\");\r\n\t\trequire(tokenCount <= forSale, \"You want too much! Check forSale()\");\r\n\t\tforSale -= tokenCount;\r\n\t\t_transfer(owner, msg.sender, tokenCount);\r\n\t\treturn tokenCount;\r\n\t}\r\n\t\r\n\t/**\r\n    * Tranfer all ETH from contract to Owner addres.\r\n    */\r\n    function withdraw()\r\n    onlyOwner external\r\n    returns (bool success){\r\n        require(address(this).balance > 0, \"Nothing to withdraw\");\r\n        owner.transfer(address(this).balance);\r\n        return true;\r\n    }\r\n\t\r\n\t/**\r\n    * Transfer some ETH tokens from contract\r\n    *\r\n    * Transfer _value of ETH from contract to Owner addres.\r\n    * @param _value number of wei to trasfer\r\n    */\r\n\tfunction withdraw(uint _value)\r\n    onlyOwner external\r\n    returns (bool success){\r\n\t\trequire(_value > 0, \"provide amount pls\");\r\n\t\trequire(_value < address(this).balance, \"Too much! Check balance()\");\r\n\t\towner.transfer(_value);\r\n        return true;\r\n\t}\r\n\t\r\n    /**\r\n    * Check ETH balance of contract\r\n    */\r\n\tfunction balance()\r\n\texternal view\r\n\treturns (uint amount){\r\n\t\treturn (address(this).balance);\r\n\t}\r\n    \r\n\t/**\r\n    * Transfer ERC20 tokens from contract\r\n    *\r\n    * Tranfer _amount of ERC20 from contract _tokenAddress to Owner addres.\r\n    *\r\n    * @param _amount amount of ERC20 tokens to be transferred \r\n\t* @param _tokenAddress address of ERC20 token contract\r\n    */\r\n\tfunction transferAnyERC20Token(address _tokenAddress, uint256 _amount)\r\n    onlyOwner external\r\n    returns(bool success) {\r\n        return ERC20Interface(_tokenAddress).transfer(owner, _amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donation\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Donated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"NelCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://15cde1f97ce94c2236cc371dc1e06eb9dc41d8fad8ac84e13f78330e82ef1391"}]}