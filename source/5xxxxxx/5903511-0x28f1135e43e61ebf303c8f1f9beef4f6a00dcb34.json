{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * XC Contract Interface.\r\n */\r\ninterface XCInterface {\r\n\r\n    /**\r\n     * Set contract service status.\r\n     * @param status contract service status (0:closed;1:only-closed-lock;2:only-closed-unlock;3:opened;).\r\n     */\r\n    function setStatus(uint8 status) external;\r\n\r\n    /**\r\n     * Get contract service status.\r\n     * @return contract service status.\r\n     */\r\n    function getStatus() external view returns (uint8);\r\n\r\n    /**\r\n     * Get the current contract platform name.\r\n     * @return contract platform name.\r\n     */\r\n    function getPlatformName() external view returns (bytes32);\r\n\r\n    /**\r\n     * Set the current contract administrator.\r\n     * @param account account of contract administrator.\r\n     */\r\n    function setAdmin(address account) external;\r\n\r\n    /**\r\n     * Get the current contract administrator.\r\n     * @return contract administrator.\r\n     */\r\n    function getAdmin() external view returns (address);\r\n\r\n    /**\r\n     * Set the Token contract address.\r\n     * @param account contract address.\r\n     */\r\n    function setToken(address account) external;\r\n\r\n    /**\r\n     * Get the Token contract address.\r\n     * @return contract address.\r\n     */\r\n    function getToken() external view returns (address);\r\n\r\n    /**\r\n     * Set the XCPlugin contract address.\r\n     * @param account contract address.\r\n     */\r\n    function setXCPlugin(address account) external;\r\n\r\n    /**\r\n     * Get the XCPlugin contract address.\r\n     * @return contract address.\r\n     */\r\n    function getXCPlugin() external view returns (address);\r\n\r\n    /**\r\n     * Transfer out of cross chain.\r\n     * @param toAccount account of to platform.\r\n     * @param value transfer amount.\r\n     */\r\n    function lock(address toAccount, uint value) external;\r\n\r\n    /**\r\n     * Transfer in of cross chain.\r\n     * @param txid transaction id.\r\n     * @param fromAccount ame of to platform.\r\n     * @param toAccount account of to platform.\r\n     * @param value transfer amount.\r\n     */\r\n    function unlock(string txid, address fromAccount, address toAccount, uint value) external;\r\n\r\n    /**\r\n     * Transfer the misoperation to the amount of the contract account to the specified account.\r\n     * @param account the specified account.\r\n     * @param value transfer amount.\r\n     */\r\n    function withdraw(address account, uint value) external;\r\n}\r\n\r\n/**\r\n * XC Plugin Contract Interface.\r\n */\r\ninterface XCPluginInterface {\r\n\r\n    /**\r\n     * Open the contract service status.\r\n     */\r\n    function start() external;\r\n\r\n    /**\r\n     * Close the contract service status.\r\n     */\r\n    function stop() external;\r\n\r\n    /**\r\n     * Get contract service status.\r\n     * @return contract service status.\r\n     */\r\n    function getStatus() external view returns (bool);\r\n\r\n    /**\r\n     * Get the current contract platform name.\r\n     * @return contract platform name.\r\n     */\r\n    function getPlatformName() external view returns (bytes32);\r\n\r\n    /**\r\n     * Set the current contract administrator.\r\n     * @param account account of contract administrator.\r\n     */\r\n    function setAdmin(address account) external;\r\n\r\n    /**\r\n     * Get the current contract administrator.\r\n     * @return contract administrator.\r\n     */\r\n    function getAdmin() external view returns (address);\r\n\r\n    /**\r\n     * Get the current token symbol.\r\n     * @return token symbol.\r\n     */\r\n    function getTokenSymbol() external view returns (bytes32);\r\n\r\n    /**\r\n     * Add a contract trust caller.\r\n     * @param caller account of caller.\r\n     */\r\n    function addCaller(address caller) external;\r\n\r\n    /**\r\n     * Delete a contract trust caller.\r\n     * @param caller account of caller.\r\n     */\r\n    function deleteCaller(address caller) external;\r\n\r\n    /**\r\n     * Whether the trust caller exists.\r\n     * @param caller account of caller.\r\n     * @return whether exists.\r\n     */\r\n    function existCaller(address caller) external view returns (bool);\r\n\r\n    /**\r\n     * Get all contract trusted callers.\r\n     * @return al lcallers.\r\n     */\r\n    function getCallers() external view returns (address[]);\r\n\r\n    /**\r\n     * Get the trusted platform name.\r\n     * @return name a platform name.\r\n     */\r\n    function getTrustPlatform() external view returns (bytes32 name);\r\n\r\n    /**\r\n     * Add the trusted platform public key information.\r\n     * @param publicKey a public key.\r\n     */\r\n    function addPublicKey(address publicKey) external;\r\n\r\n    /**\r\n     * Delete the trusted platform public key information.\r\n     * @param publicKey a public key.\r\n     */\r\n    function deletePublicKey(address publicKey) external;\r\n\r\n    /**\r\n     * Whether the trusted platform public key information exists.\r\n     * @param publicKey a public key.\r\n     */\r\n    function existPublicKey(address publicKey) external view returns (bool);\r\n\r\n    /**\r\n     * Get the count of public key for the trusted platform.\r\n     * @return count of public key.\r\n     */\r\n    function countOfPublicKey() external view returns (uint);\r\n\r\n    /**\r\n     * Get the list of public key for the trusted platform.\r\n     * @return list of public key.\r\n     */\r\n    function publicKeys() external view returns (address[]);\r\n\r\n    /**\r\n     * Set the weight of a trusted platform.\r\n     * @param weight weight of platform.\r\n     */\r\n    function setWeight(uint weight) external;\r\n\r\n    /**\r\n     * Get the weight of a trusted platform.\r\n     * @return weight of platform.\r\n     */\r\n    function getWeight() external view returns (uint);\r\n\r\n    /**\r\n     * Initiate and vote on the transaction proposal.\r\n     * @param fromAccount name of to platform.\r\n     * @param toAccount account of to platform.\r\n     * @param value transfer amount.\r\n     * @param txid transaction id.\r\n     * @param sig transaction signature.\r\n     */\r\n    function voteProposal(address fromAccount, address toAccount, uint value, string txid, bytes sig) external;\r\n\r\n    /**\r\n     * Verify that the transaction proposal is valid.\r\n     * @param fromAccount name of to platform.\r\n     * @param toAccount account of to platform.\r\n     * @param value transfer amount.\r\n     * @param txid transaction id.\r\n     */\r\n    function verifyProposal(address fromAccount, address toAccount, uint value, string txid) external view returns (bool, bool);\r\n\r\n    /**\r\n     * Commit the transaction proposal.\r\n     * @param txid transaction id.\r\n     */\r\n    function commitProposal(string txid) external returns (bool);\r\n\r\n    /**\r\n     * Get the transaction proposal information.\r\n     * @param txid transaction id.\r\n     * @return status completion status of proposal.\r\n     * @return fromAccount account of to platform.\r\n     * @return toAccount account of to platform.\r\n     * @return value transfer amount.\r\n     * @return voters notarial voters.\r\n     * @return weight The weight value of the completed time.\r\n     */\r\n    function getProposal(string txid) external view returns (bool status, address fromAccount, address toAccount, uint value, address[] voters, uint weight);\r\n\r\n    /**\r\n     * Delete the transaction proposal information.\r\n     * @param txid transaction id.\r\n     */\r\n    function deleteProposal(string txid) external;\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Token {\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n}\r\n\r\ncontract XCPlugin is XCPluginInterface {\r\n\r\n    /**\r\n     * Contract Administrator\r\n     * @field status Contract external service status.\r\n     * @field platformName Current contract platform name.\r\n     * @field tokenSymbol token Symbol.\r\n     * @field account Current contract administrator.\r\n     */\r\n    struct Admin {\r\n        bool status;\r\n        bytes32 platformName;\r\n        bytes32 tokenSymbol;\r\n        address account;\r\n        string version;\r\n    }\r\n\r\n    /**\r\n     * Transaction Proposal\r\n     * @field status Transaction proposal status(false:pending,true:complete).\r\n     * @field fromAccount Account of form platform.\r\n     * @field toAccount Account of to platform.\r\n     * @field value Transfer amount.\r\n     * @field tokenSymbol token Symbol.\r\n     * @field voters Proposers.\r\n     * @field weight The weight value of the completed time.\r\n     */\r\n    struct Proposal {\r\n        bool status;\r\n        address fromAccount;\r\n        address toAccount;\r\n        uint value;\r\n        address[] voters;\r\n        uint weight;\r\n    }\r\n\r\n    /**\r\n     * Trusted Platform\r\n     * @field status Trusted platform state(false:no trusted,true:trusted).\r\n     * @field weight weight of platform.\r\n     * @field publicKeys list of public key.\r\n     * @field proposals list of proposal.\r\n     */\r\n    struct Platform {\r\n        bool status;\r\n        bytes32 name;\r\n        uint weight;\r\n        address[] publicKeys;\r\n        mapping(string => Proposal) proposals;\r\n    }\r\n\r\n    Admin private admin;\r\n\r\n    address[] private callers;\r\n\r\n    Platform private platform;\r\n\r\n\r\n    constructor() public {\r\n        init();\r\n    }\r\n\r\n    /**\r\n     * TODO Parameters that must be set before compilation\r\n     * $Init admin.status\r\n     * $Init admin.platformName\r\n     * $Init admin.tokenSymbol\r\n     * $Init admin.account\r\n     * $Init admin.version\r\n     * $Init platform.status\r\n     * $Init platform.name\r\n     * $Init platform.weight\r\n     * $Init platform.publicKeys\r\n     */\r\n    function init() internal {\r\n        // Admin { status | platformName | tokenSymbol | account}\r\n        admin.status = true;\r\n        admin.platformName = \"ETH\";\r\n        admin.tokenSymbol = \"INK\";\r\n        admin.account = msg.sender;\r\n        admin.version = \"1.0\";\r\n        platform.status = true;\r\n        platform.name = \"INK\";\r\n        platform.weight = 3;\r\n        platform.publicKeys.push(0x80aa17b21c16620a4d7dd06ec1dcc44190b02ca0);\r\n        platform.publicKeys.push(0xd2e40bb4967b355da8d70be40c277ebcf108063c);\r\n        platform.publicKeys.push(0x1501e0f09498aa95cb0c2f1e3ee51223e5074720);\r\n    }\r\n\r\n    function start() onlyAdmin external {\r\n        if (!admin.status) {\r\n            admin.status = true;\r\n        }\r\n    }\r\n\r\n    function stop() onlyAdmin external {\r\n        if (admin.status) {\r\n            admin.status = false;\r\n        }\r\n    }\r\n\r\n    function getStatus() external view returns (bool) {\r\n        return admin.status;\r\n    }\r\n\r\n    function getPlatformName() external view returns (bytes32) {\r\n        return admin.platformName;\r\n    }\r\n\r\n    function setAdmin(address account) onlyAdmin nonzeroAddress(account) external {\r\n        if (admin.account != account) {\r\n            admin.account = account;\r\n        }\r\n    }\r\n\r\n    function getAdmin() external view returns (address) {\r\n        return admin.account;\r\n    }\r\n\r\n    function getTokenSymbol() external view returns (bytes32) {\r\n        return admin.tokenSymbol;\r\n    }\r\n\r\n    function addCaller(address caller) onlyAdmin nonzeroAddress(caller) external {\r\n        if (!_existCaller(caller)) {\r\n            callers.push(caller);\r\n        }\r\n    }\r\n\r\n    function deleteCaller(address caller) onlyAdmin nonzeroAddress(caller) external {\r\n        for (uint i = 0; i < callers.length; i++) {\r\n            if (callers[i] == caller) {\r\n                if (i != callers.length - 1 ) {\r\n                    callers[i] = callers[callers.length - 1];\r\n                }\r\n                callers.length--;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function existCaller(address caller) external view returns (bool) {\r\n        return _existCaller(caller);\r\n    }\r\n\r\n    function getCallers() external view returns (address[]) {\r\n        return callers;\r\n    }\r\n\r\n    function getTrustPlatform() external view returns (bytes32 name){\r\n        return platform.name;\r\n    }\r\n\r\n    function setWeight(uint weight) onlyAdmin external {\r\n        require(weight > 0);\r\n        if (platform.weight != weight) {\r\n            platform.weight = weight;\r\n        }\r\n    }\r\n\r\n    function getWeight() external view returns (uint) {\r\n        return platform.weight;\r\n    }\r\n\r\n    function addPublicKey(address publicKey) onlyAdmin nonzeroAddress(publicKey) external {\r\n        address[] storage publicKeys = platform.publicKeys;\r\n        for (uint i; i < publicKeys.length; i++) {\r\n            if (publicKey == publicKeys[i]) {\r\n                return;\r\n            }\r\n        }\r\n        publicKeys.push(publicKey);\r\n    }\r\n\r\n    function deletePublicKey(address publicKey) onlyAdmin nonzeroAddress(publicKey) external {\r\n        address[] storage publicKeys = platform.publicKeys;\r\n        for (uint i = 0; i < publicKeys.length; i++) {\r\n            if (publicKeys[i] == publicKey) {\r\n                if (i != publicKeys.length - 1 ) {\r\n                    publicKeys[i] = publicKeys[publicKeys.length - 1];\r\n                }\r\n                publicKeys.length--;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function existPublicKey(address publicKey) external view returns (bool) {\r\n        return _existPublicKey(publicKey);\r\n    }\r\n\r\n    function countOfPublicKey() external view returns (uint){\r\n        return platform.publicKeys.length;\r\n    }\r\n\r\n    function publicKeys() external view returns (address[]){\r\n        return platform.publicKeys;\r\n    }\r\n\r\n    function voteProposal(address fromAccount, address toAccount, uint value, string txid, bytes sig) opened external {\r\n        bytes32 msgHash = hashMsg(platform.name, fromAccount, admin.platformName, toAccount, value, admin.tokenSymbol, txid,admin.version);\r\n        address publicKey = recover(msgHash, sig);\r\n        require(_existPublicKey(publicKey));\r\n        Proposal storage proposal = platform.proposals[txid];\r\n        if (proposal.value == 0) {\r\n            proposal.fromAccount = fromAccount;\r\n            proposal.toAccount = toAccount;\r\n            proposal.value = value;\r\n        } else {\r\n            require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value);\r\n        }\r\n        changeVoters(publicKey, txid);\r\n    }\r\n\r\n    function verifyProposal(address fromAccount, address toAccount, uint value, string txid) external view returns (bool, bool) {\r\n        Proposal storage proposal = platform.proposals[txid];\r\n        if (proposal.status) {\r\n            return (true, (proposal.voters.length >= proposal.weight));\r\n        }\r\n        if (proposal.value == 0) {\r\n            return (false, false);\r\n        }\r\n        require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value);\r\n        return (false, (proposal.voters.length >= platform.weight));\r\n    }\r\n\r\n    function commitProposal(string txid) external returns (bool) {\r\n        require((admin.status &&_existCaller(msg.sender)) || msg.sender == admin.account);\r\n        require(!platform.proposals[txid].status);\r\n        platform.proposals[txid].status = true;\r\n        platform.proposals[txid].weight = platform.proposals[txid].voters.length;\r\n        return true;\r\n    }\r\n\r\n    function getProposal(string txid) external view returns (bool status, address fromAccount, address toAccount, uint value, address[] voters, uint weight){\r\n        fromAccount = platform.proposals[txid].fromAccount;\r\n        toAccount = platform.proposals[txid].toAccount;\r\n        value = platform.proposals[txid].value;\r\n        voters = platform.proposals[txid].voters;\r\n        status = platform.proposals[txid].status;\r\n        weight = platform.proposals[txid].weight;\r\n        return;\r\n    }\r\n\r\n    function deleteProposal(string txid) onlyAdmin external {\r\n        delete platform.proposals[txid];\r\n    }\r\n\r\n    /**\r\n     *   ######################\r\n     *  #  private function  #\r\n     * ######################\r\n     */\r\n\r\n    function hashMsg(bytes32 fromPlatform, address fromAccount, bytes32 toPlatform, address toAccount, uint value, bytes32 tokenSymbol, string txid,string version) internal pure returns (bytes32) {\r\n        return sha256(bytes32ToStr(fromPlatform), \":0x\", uintToStr(uint160(fromAccount), 16), \":\", bytes32ToStr(toPlatform), \":0x\", uintToStr(uint160(toAccount), 16), \":\", uintToStr(value, 10), \":\", bytes32ToStr(tokenSymbol), \":\", txid, \":\", version);\r\n    }\r\n\r\n    function changeVoters(address publicKey, string txid) internal {\r\n        address[] storage voters = platform.proposals[txid].voters;\r\n        for (uint i = 0; i < voters.length; i++) {\r\n            if (voters[i] == publicKey) {\r\n                return;\r\n            }\r\n        }\r\n        voters.push(publicKey);\r\n    }\r\n\r\n    function bytes32ToStr(bytes32 b) internal pure returns (string) {\r\n        uint length = b.length;\r\n        for (uint i = 0; i < b.length; i++) {\r\n            if (b[b.length - 1 - i] != \"\") {\r\n                length -= i;\r\n                break;\r\n            }\r\n        }\r\n        bytes memory bs = new bytes(length);\r\n        for (uint j = 0; j < length; j++) {\r\n            bs[j] = b[j];\r\n        }\r\n        return string(bs);\r\n    }\r\n\r\n    function uintToStr(uint value, uint base) internal pure returns (string) {\r\n        uint _value = value;\r\n        uint length = 0;\r\n        bytes16 tenStr = \"0123456789abcdef\";\r\n        while (true) {\r\n            if (_value > 0) {\r\n                length ++;\r\n                _value = _value / base;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (base == 16) {\r\n            length = 40;\r\n        }\r\n        bytes memory bs = new bytes(length);\r\n        for (uint i = 0; i < length; i++) {\r\n            bs[length - 1 - i] = tenStr[value % base];\r\n            value = value / base;\r\n        }\r\n        return string(bs);\r\n    }\r\n\r\n    function _existCaller(address caller) internal view returns (bool) {\r\n        for (uint i = 0; i < callers.length; i++) {\r\n            if (callers[i] == caller) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _existPublicKey(address publicKey) internal view returns (bool) {\r\n        address[] memory publicKeys = platform.publicKeys;\r\n        for (uint i = 0; i < publicKeys.length; i++) {\r\n            if (publicKeys[i] == publicKey) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function recover(bytes32 hash, bytes sig) internal pure returns (address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(admin.account == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier nonzeroAddress(address account) {\r\n        require(account != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier opened() {\r\n        require(admin.status);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract XC is XCInterface {\r\n\r\n    /**\r\n     * Contract Administrator\r\n     * @field status Contract external service status.\r\n     * @field platformName Current contract platform name.\r\n     * @field account Current contract administrator.\r\n     */\r\n    struct Admin {\r\n        uint8 status;\r\n        bytes32 platformName;\r\n        address account;\r\n    }\r\n\r\n    Admin private admin;\r\n\r\n    uint public lockBalance;\r\n\r\n    Token private token;\r\n\r\n    XCPlugin private xcPlugin;\r\n\r\n    event Lock(bytes32 toPlatform, address toAccount, bytes32 value, bytes32 tokenSymbol);\r\n\r\n    event Unlock(string txid, bytes32 fromPlatform, address fromAccount, bytes32 value, bytes32 tokenSymbol);\r\n\r\n    constructor() public {\r\n        init();\r\n    }\r\n\r\n    /**\r\n     * TODO Parameters that must be set before compilation\r\n     * $Init admin.status\r\n     * $Init admin.platformName\r\n     * $Init admin.account\r\n     * $Init lockBalance\r\n     * $Init token\r\n     * $Init xcPlugin\r\n     */\r\n    function init() internal {\r\n        // Admin {status | platformName | account}\r\n        admin.status = 3;\r\n        admin.platformName = \"ETH\";\r\n        admin.account = msg.sender;\r\n        lockBalance = 344737963881081236;\r\n        token = Token(0xf4c90e18727c5c76499ea6369c856a6d61d3e92e);\r\n        xcPlugin = XCPlugin(0x15782cc68d841416f73e8f352f27cc1bc5e76e11);\r\n    }\r\n\r\n    function setStatus(uint8 status) onlyAdmin external {\r\n        require(status <= 3);\r\n        if (admin.status != status) {\r\n            admin.status = status;\r\n        }\r\n    }\r\n\r\n    function getStatus() external view returns (uint8) {\r\n        return admin.status;\r\n    }\r\n\r\n    function getPlatformName() external view returns (bytes32) {\r\n        return admin.platformName;\r\n    }\r\n\r\n    function setAdmin(address account) onlyAdmin nonzeroAddress(account) external {\r\n        if (admin.account != account) {\r\n            admin.account = account;\r\n        }\r\n    }\r\n\r\n    function getAdmin() external view returns (address) {\r\n        return admin.account;\r\n    }\r\n\r\n    function setToken(address account) onlyAdmin nonzeroAddress(account) external {\r\n        if (token != account) {\r\n            token = Token(account);\r\n        }\r\n    }\r\n\r\n    function getToken() external view returns (address) {\r\n        return token;\r\n    }\r\n\r\n    function setXCPlugin(address account) onlyAdmin nonzeroAddress(account) external {\r\n        if (xcPlugin != account) {\r\n            xcPlugin = XCPlugin(account);\r\n        }\r\n    }\r\n\r\n    function getXCPlugin() external view returns (address) {\r\n        return xcPlugin;\r\n    }\r\n\r\n    function lock(address toAccount, uint value) nonzeroAddress(toAccount) external {\r\n        require(admin.status == 2 || admin.status == 3);\r\n        require(xcPlugin.getStatus());\r\n        require(value > 0);\r\n        uint allowance = token.allowance(msg.sender, this);\r\n        require(allowance >= value);\r\n        bool success = token.transferFrom(msg.sender, this, value);\r\n        require(success);\r\n        lockBalance = SafeMath.add(lockBalance, value);\r\n        emit Lock(xcPlugin.getTrustPlatform(), toAccount, bytes32(value), xcPlugin.getTokenSymbol());\r\n    }\r\n\r\n    function unlock(string txid, address fromAccount, address toAccount, uint value) nonzeroAddress(toAccount) external {\r\n        require(admin.status == 1 || admin.status == 3);\r\n        require(xcPlugin.getStatus());\r\n        require(value > 0);\r\n        bool complete;\r\n        bool verify;\r\n        (complete, verify) = xcPlugin.verifyProposal(fromAccount, toAccount, value, txid);\r\n        require(verify && !complete);\r\n        uint balance = token.balanceOf(this);\r\n        require(balance >= value);\r\n        require(token.transfer(toAccount, value));\r\n        require(xcPlugin.commitProposal(txid));\r\n        lockBalance = SafeMath.sub(lockBalance, value);\r\n        emit Unlock(txid, xcPlugin.getTrustPlatform(), fromAccount, bytes32(value), xcPlugin.getTokenSymbol());\r\n    }\r\n\r\n    function withdraw(address account, uint value) onlyAdmin nonzeroAddress(account) external {\r\n        require(value > 0);\r\n        uint balance = token.balanceOf(this);\r\n        require(SafeMath.sub(balance, lockBalance) >= value);\r\n        bool success = token.transfer(account, value);\r\n        require(success);\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(admin.account == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier nonzeroAddress(address account) {\r\n        require(account != address(0));\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toAccount\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"setStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getXCPlugin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setXCPlugin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"txid\",\"type\":\"string\"},{\"name\":\"fromAccount\",\"type\":\"address\"},{\"name\":\"toAccount\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlatformName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"toPlatform\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"toAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"bytes32\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"txid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"fromPlatform\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"fromAccount\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"bytes32\"}],\"name\":\"Unlock\",\"type\":\"event\"}]","ContractName":"XC","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://48338a4ac904e73af90b00de25fad6f10ca8189743af5e7bf2075315aecae08a"}]}