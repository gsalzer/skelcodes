{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external; // Some ERC20 doesn't have return\r\n    function transferFrom(address _from, address _to, uint _value) external; // Some ERC20 doesn't have return\r\n    function approve(address _spender, uint _value) external; // Some ERC20 doesn't have return\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ninterface BancorContract {\r\n    /**\r\n        @dev converts the token to any other token in the bancor network by following a predefined conversion path\r\n        note that when converting from an ERC20 token (as opposed to a smart token), allowance must be set beforehand\r\n\r\n        @param _path        conversion path, see conversion path format in the BancorQuickConverter contract\r\n        @param _amount      amount to convert from (in the initial source token)\r\n        @param _minReturn   if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\r\n\r\n        @return tokens issued in return\r\n    */\r\n    function quickConvert(address[] _path, uint256 _amount, uint256 _minReturn)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n}\r\n\r\n\r\ncontract TestBancorTradeBNBETH {\r\n    event Trade(uint256 srcAmount, uint256 destAmount);\r\n    \r\n    BancorContract public bancorTradingContract = BancorContract(0x8FFF721412503C85CFfef6982F2b39339481Bca9);\r\n    \r\n    function trade(address[] _path, uint256 _amount, uint256 _minReturn) {\r\n        ERC20 src = ERC20(0xB8c77482e45F1F44dE1745F52C74426C631bDD52);\r\n        src.approve(bancorTradingContract, _amount);\r\n        \r\n        uint256 destAmount = bancorTradingContract.quickConvert(_path, _amount, _minReturn);\r\n        \r\n        Trade(_amount, destAmount);\r\n    }\r\n    \r\n    function getBack() {\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n    \r\n    function getBack2() {\r\n        ERC20 src = ERC20(0xB8c77482e45F1F44dE1745F52C74426C631bDD52);\r\n        src.transfer(msg.sender, src.balanceOf(this));\r\n    }\r\n    \r\n    // Receive ETH in case of trade Token -> ETH, will get ETH back from trading proxy\r\n    function () public payable {\r\n\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"getBack2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_path\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minReturn\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bancorTradingContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"destAmount\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"}]","ContractName":"TestBancorTradeBNBETH","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4eb45c9a602b1243a757732b74d906f9c41a748592524fb5f9b9c63b185010e4"}]}