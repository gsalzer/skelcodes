{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/*\r\n*   DapCar Token (DAPX)\r\n*   Created by Starlag Labs (www.starlag.com)\r\n*   Copyright Â© DapCar.io 2018. All rights reserved.\r\n*   https://www.dapcar.io\r\n*/\r\n\r\nlibrary Math {\r\n    function mul(uint256 a, uint256 b) \r\n    internal \r\n    pure \r\n    returns (uint256) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) \r\n    internal \r\n    pure \r\n    returns (uint256) \r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) \r\n    internal \r\n    pure \r\n    returns (uint256) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) \r\n    internal \r\n    pure \r\n    returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Utils {\r\n    function Utils() public {}\r\n\r\n    modifier greaterThanZero(uint256 _value) \r\n    {\r\n        require(_value > 0);\r\n        _;\r\n    }\r\n\r\n    modifier validUint(uint256 _value) \r\n    {\r\n        require(_value >= 0);\r\n        _;\r\n    }\r\n\r\n    modifier validAddress(address _address) \r\n    {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier notThis(address _address) \r\n    {\r\n        require(_address != address(this));\r\n        _;\r\n    }\r\n\r\n    modifier validAddressAndNotThis(address _address) \r\n    {\r\n        require(_address != address(0) && _address != address(this));\r\n        _;\r\n    }\r\n\r\n    modifier notEmpty(string _data)\r\n    {\r\n        require(bytes(_data).length > 0);\r\n        _;\r\n    }\r\n\r\n    modifier stringLength(string _data, uint256 _length)\r\n    {\r\n        require(bytes(_data).length == _length);\r\n        _;\r\n    }\r\n    \r\n    modifier validBytes32(bytes32 _bytes)\r\n    {\r\n        require(_bytes != 0);\r\n        _;\r\n    }\r\n\r\n    modifier validUint64(uint64 _value) \r\n    {\r\n        require(_value >= 0 && _value < 4294967296);\r\n        _;\r\n    }\r\n\r\n    modifier validUint8(uint8 _value) \r\n    {\r\n        require(_value >= 0 && _value < 256);\r\n        _;\r\n    }\r\n\r\n    modifier validBalanceThis(uint256 _value)\r\n    {\r\n        require(_value <= address(this).balance);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Authorizable is Utils {\r\n    using Math for uint256;\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n    mapping (address => Level) authorizeds;\r\n    uint256 public authorizedCount;\r\n\r\n    /*  \r\n    *   ZERO 0 - bug for null object\r\n    *   OWNER 1\r\n    *   ADMIN 2\r\n    *   DAPP 3\r\n    */  \r\n    enum Level {ZERO,OWNER,ADMIN,DAPP}\r\n\r\n    event OwnerTransferred(address indexed _prevOwner, address indexed _newOwner);\r\n    event Authorized(address indexed _address, Level _level);\r\n    event UnAuthorized(address indexed _address);\r\n\r\n    function Authorizable() \r\n    public \r\n    {\r\n        owner = msg.sender;\r\n        authorizeds[msg.sender] = Level.OWNER;\r\n        authorizedCount = authorizedCount.add(1);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(authorizeds[msg.sender] == Level.OWNER);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrThis {\r\n        require(authorizeds[msg.sender] == Level.OWNER || msg.sender == address(this));\r\n        _;\r\n    }\r\n\r\n    modifier notOwner(address _address) {\r\n        require(authorizeds[_address] != Level.OWNER);\r\n        _;\r\n    }\r\n\r\n    modifier authLevel(Level _level) {\r\n        require((authorizeds[msg.sender] > Level.ZERO) && (authorizeds[msg.sender] <= _level));\r\n        _;\r\n    }\r\n\r\n    modifier authLevelOnly(Level _level) {\r\n        require(authorizeds[msg.sender] == _level);\r\n        _;\r\n    }\r\n    \r\n    modifier notSender(address _address) {\r\n        require(msg.sender != _address);\r\n        _;\r\n    }\r\n\r\n    modifier isSender(address _address) {\r\n        require(msg.sender == _address);\r\n        _;\r\n    }\r\n\r\n    modifier checkLevel(Level _level) {\r\n        require((_level > Level.ZERO) && (Level.DAPP >= _level));\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) \r\n    public \r\n    {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address _newOwner) \r\n    onlyOwner \r\n    validAddress(_newOwner)\r\n    notThis(_newOwner)\r\n    internal \r\n    {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() \r\n    validAddress(newOwner)\r\n    isSender(newOwner)\r\n    public \r\n    {\r\n        OwnerTransferred(owner, newOwner);\r\n        if (authorizeds[owner] == Level.OWNER) {\r\n            delete authorizeds[owner];\r\n        }\r\n        if (authorizeds[newOwner] > Level.ZERO) {\r\n            authorizedCount = authorizedCount.sub(1);\r\n        }\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n        authorizeds[owner] = Level.OWNER;\r\n    }\r\n\r\n    function cancelOwnership() \r\n    onlyOwner\r\n    public \r\n    {\r\n        newOwner = address(0);\r\n    }\r\n\r\n    function authorized(address _address, Level _level) \r\n    public  \r\n    {\r\n        _authorized(_address, _level);\r\n    }\r\n\r\n    function _authorized(address _address, Level _level) \r\n    onlyOwner\r\n    validAddress(_address)\r\n    notOwner(_address)\r\n    notThis(_address)\r\n    checkLevel(_level)\r\n    internal  \r\n    {\r\n        if (authorizeds[_address] == Level.ZERO) {\r\n            authorizedCount = authorizedCount.add(1);\r\n        }\r\n        authorizeds[_address] = _level;\r\n        Authorized(_address, _level);\r\n    }\r\n\r\n    function unAuthorized(address _address) \r\n    onlyOwner\r\n    validAddress(_address)\r\n    notOwner(_address)\r\n    notThis(_address)\r\n    public  \r\n    {\r\n        if (authorizeds[_address] > Level.ZERO) {\r\n            authorizedCount = authorizedCount.sub(1);\r\n        }\r\n        delete authorizeds[_address];\r\n        UnAuthorized(_address);\r\n    }\r\n\r\n    function isAuthorized(address _address) \r\n    validAddress(_address)\r\n    notThis(_address)\r\n    public \r\n    constant \r\n    returns (Level) \r\n    {\r\n        return authorizeds[_address];\r\n    }\r\n}\r\n\r\ncontract ITokenRecipient { function receiveApproval(address _spender, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract IERC20 {\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20Token is Authorizable, IERC20 {\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    modifier validBalance(uint256 _value)\r\n    {\r\n        require(_value <= balances[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier validBalanceFrom(address _from, uint256 _value)\r\n    {\r\n        require(_value <= balances[_from]);\r\n        _;\r\n    }\r\n\r\n    modifier validBalanceOverflows(address _to, uint256 _value)\r\n    {\r\n        require(balances[_to] <= balances[_to].add(_value));\r\n        _;\r\n    }\r\n\r\n    function ERC20Token() public {}\r\n\r\n    function totalSupply()\r\n    public \r\n    constant \r\n    returns (uint256) \r\n    {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n    public\r\n    returns (bool success) \r\n    {\r\n        return _transfer(_to, _value);\r\n    }\r\n\r\n    function _transfer(address _to, uint256 _value)\r\n    validAddress(_to)\r\n    greaterThanZero(_value)\r\n    validBalance(_value)\r\n    validBalanceOverflows(_to, _value)\r\n    internal\r\n    returns (bool success) \r\n    {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public \r\n    returns (bool success) \r\n    {\r\n        return _transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function _transferFrom(address _from, address _to, uint256 _value)\r\n    validAddress(_to)\r\n    validAddress(_from)\r\n    greaterThanZero(_value)\r\n    validBalanceFrom(_from, _value)\r\n    validBalanceOverflows(_to, _value)\r\n    internal \r\n    returns (bool success) \r\n    {\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner)\r\n    validAddress(_owner)\r\n    public \r\n    constant \r\n    returns (uint256 balance) \r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) \r\n    public \r\n    returns (bool success) \r\n    {\r\n        return _approve(_spender, _value);\r\n    }\r\n\r\n    function _approve(address _spender, uint256 _value) \r\n    validAddress(_spender)\r\n    internal \r\n    returns (bool success) \r\n    {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)\r\n    validAddress(_owner)\r\n    validAddress(_spender)\r\n    public \r\n    constant \r\n    returns (uint256 remaining) \r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue)\r\n    validAddress(_spender)\r\n    greaterThanZero(_addedValue)\r\n    public \r\n    returns (bool success) \r\n    {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) \r\n    validAddress(_spender)\r\n    greaterThanZero(_subtractedValue)\r\n    public\r\n    returns (bool success) \r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            delete allowed[msg.sender][_spender];\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract FrozenToken is ERC20Token, ITokenRecipient {\r\n    mapping (address => bool) frozeds;\r\n    uint256 public frozedCount;\r\n    bool public freezeEnabled = true;\r\n    bool public autoFreeze = true;\r\n    bool public mintFinished = false;\r\n\r\n    event Freeze(address indexed wallet);\r\n    event UnFreeze(address indexed wallet);\r\n    event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue);\r\n    event Mint(address indexed sender, address indexed wallet, uint256 amount);\r\n    event ReceiveTokens(address indexed spender, address indexed token, uint256 value, bytes extraData);\r\n    event ApproveAndCall(address indexed spender, uint256 value, bytes extraData); \r\n    event Burn(address indexed sender, uint256 amount);\r\n    event MintFinished(address indexed spender);\r\n\r\n    modifier notFreeze\r\n    {\r\n        require(frozeds[msg.sender] == false || freezeEnabled == false);\r\n        _;\r\n    }\r\n\r\n    modifier notFreezeFrom(address _from) \r\n    {\r\n        require((_from != address(0) && frozeds[_from] == false) || freezeEnabled == false);\r\n        _;\r\n    }\r\n\r\n    modifier canMint\r\n    {\r\n        require(!mintFinished);\r\n        _;\r\n    }\r\n\r\n    function FrozenToken() public {}\r\n\r\n    function freeze(address _address) \r\n    authLevel(Level.DAPP)\r\n    validAddress(_address)\r\n    notThis(_address)\r\n    notOwner(_address)\r\n    public \r\n    {\r\n        if (!frozeds[_address]) {\r\n            frozeds[_address] = true;\r\n            frozedCount = frozedCount.add(1);\r\n            Freeze(_address);\r\n        }\r\n    }\r\n\r\n    function unFreeze(address _address) \r\n    authLevel(Level.DAPP)\r\n    validAddress(_address)\r\n    public \r\n    {\r\n        if (frozeds[_address]) {\r\n            delete frozeds[_address];\r\n            frozedCount = frozedCount.sub(1);\r\n            UnFreeze(_address);\r\n        }\r\n    }\r\n\r\n    function updFreezeEnabled(bool _freezeEnabled) \r\n    authLevel(Level.ADMIN)\r\n    public \r\n    {\r\n        PropsChanged(msg.sender, \"freezeEnabled\", freezeEnabled, _freezeEnabled);\r\n        freezeEnabled = _freezeEnabled;\r\n    }\r\n\r\n    function updAutoFreeze(bool _autoFreeze) \r\n    authLevel(Level.ADMIN)\r\n    public \r\n    {\r\n        PropsChanged(msg.sender, \"autoFreeze\", autoFreeze, _autoFreeze);\r\n        autoFreeze = _autoFreeze;\r\n    }\r\n\r\n    function isFreeze(address _address) \r\n    validAddress(_address)\r\n    public \r\n    constant \r\n    returns(bool) \r\n    {\r\n        return bool(frozeds[_address]);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) \r\n    notFreeze\r\n    public \r\n    returns (bool) \r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) \r\n    notFreezeFrom(_from)\r\n    public \r\n    returns (bool) \r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) \r\n    notFreezeFrom(_spender)\r\n    public \r\n    returns (bool) \r\n    {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue)\r\n    notFreezeFrom(_spender)\r\n    public \r\n    returns (bool) \r\n    {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) \r\n    notFreezeFrom(_spender)\r\n    public \r\n    returns (bool) \r\n    {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) \r\n    validAddress(_spender)\r\n    greaterThanZero(_value)\r\n    public \r\n    returns (bool success) \r\n    {\r\n        ITokenRecipient spender = ITokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            ApproveAndCall(_spender, _value, _extraData); \r\n            return true;\r\n        }\r\n    }\r\n\r\n    function receiveApproval(address _spender, uint256 _value, address _token, bytes _extraData)\r\n    validAddress(_spender)\r\n    validAddress(_token)\r\n    greaterThanZero(_value)\r\n    public \r\n    {\r\n        IERC20 token = IERC20(_token);\r\n        require(token.transferFrom(_spender, address(this), _value));\r\n        ReceiveTokens(_spender, _token, _value, _extraData);\r\n    }\r\n\r\n    function mintFinish() \r\n    onlyOwner\r\n    public \r\n    returns (bool success)\r\n    {\r\n        mintFinished = true;\r\n        MintFinished(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function mint(address _address, uint256 _value)\r\n    canMint\r\n    authLevel(Level.DAPP)\r\n    validAddress(_address)\r\n    greaterThanZero(_value)\r\n    public\r\n    returns (bool success) \r\n    {\r\n        balances[_address] = balances[_address].add(_value);\r\n        totalSupply_ = totalSupply_.add(_value);\r\n        Transfer(0, _address, _value);\r\n\r\n        if (freezeEnabled && autoFreeze && _address != address(this) && isAuthorized(_address) == Level.ZERO) {\r\n            if (!isFreeze(_address)) {\r\n                frozeds[_address] = true;\r\n                frozedCount = frozedCount.add(1);\r\n                Freeze(_address);\r\n            }\r\n        }\r\n\r\n        Mint(0, _address, _value);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value)\r\n    greaterThanZero(_value)\r\n    validBalance(_value)\r\n    public\r\n    returns (bool) \r\n    {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        Transfer(msg.sender, address(0), _value);\r\n\r\n        if (isFreeze(msg.sender)) {\r\n            delete frozeds[msg.sender];\r\n            frozedCount = frozedCount.sub(1);\r\n            UnFreeze(msg.sender);\r\n        }\r\n\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract DapCarToken is FrozenToken {\r\n    string public name = \"DapCar Token\";\r\n    string public symbol = \"DAPX\";\r\n    uint8 public decimals = 0;\r\n\r\n    string public version = \"0.1\";\r\n    string public publisher = \"https://www.dapcar.io\";\r\n    string public description = \"This is an official DapCar Token (DAPX)\";\r\n\r\n    bool public acceptAdminWithdraw = false;\r\n    bool public acceptDonate = true;\r\n\r\n    event InfoChanged(address indexed sender, string version, string publisher, string description);\r\n    event Withdraw(address indexed sender, address indexed wallet, uint256 amount);\r\n    event WithdrawTokens(address indexed sender, address indexed wallet, address indexed token, uint256 amount);\r\n    event Donate(address indexed sender, uint256 value);\r\n    event PropsChanged(address indexed sender, string props, bool oldValue, bool newValue);\r\n\r\n    function DapCarToken() public {}\r\n\r\n    function setupInfo(string _version, string _publisher, string _description)\r\n    authLevel(Level.ADMIN)\r\n    notEmpty(_version)\r\n    notEmpty(_publisher)\r\n    notEmpty(_description)\r\n    public\r\n    {\r\n        version = _version;\r\n        publisher = _publisher;\r\n        description = _description;\r\n        InfoChanged(msg.sender, _version, _publisher, _description);\r\n    }\r\n\r\n    function withdraw() \r\n    public \r\n    returns (bool success)\r\n    {\r\n        return withdrawAmount(address(this).balance);\r\n    }\r\n\r\n    function withdrawAmount(uint256 _amount) \r\n    authLevel(Level.ADMIN) \r\n    greaterThanZero(address(this).balance)\r\n    greaterThanZero(_amount)\r\n    validBalanceThis(_amount)\r\n    public \r\n    returns (bool success)\r\n    {\r\n        address wallet = owner;\r\n        if (acceptAdminWithdraw) {\r\n            wallet = msg.sender;\r\n        }\r\n\r\n        Withdraw(msg.sender, wallet, address(this).balance);\r\n        wallet.transfer(address(this).balance);\r\n        return true;\r\n    }\r\n\r\n    function withdrawTokens(address _token, uint256 _amount)\r\n    authLevel(Level.ADMIN)\r\n    validAddress(_token)\r\n    greaterThanZero(_amount)\r\n    public \r\n    returns (bool success) \r\n    {\r\n        address wallet = owner;\r\n        if (acceptAdminWithdraw) {\r\n            wallet = msg.sender;\r\n        }\r\n\r\n        bool result = IERC20(_token).transfer(wallet, _amount);\r\n        if (result) {\r\n            WithdrawTokens(msg.sender, wallet, _token, _amount);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function balanceToken(address _token)\r\n    validAddress(_token)\r\n    public \r\n    constant\r\n    returns (uint256 amount) \r\n    {\r\n        return IERC20(_token).balanceOf(address(this));\r\n    }\r\n\r\n    function updAcceptAdminWithdraw(bool _accept)\r\n    onlyOwner\r\n    public\r\n    returns (bool success)\r\n    {\r\n        PropsChanged(msg.sender, \"acceptAdminWithdraw\", acceptAdminWithdraw, _accept);\r\n        acceptAdminWithdraw = _accept;\r\n        return true;\r\n    }\r\n    \r\n    function () \r\n    external \r\n    payable \r\n    {\r\n        if (acceptDonate) {\r\n            donate();\r\n        }\r\n\t}\r\n\r\n    function donate() \r\n    greaterThanZero(msg.value)\r\n    internal \r\n    {\r\n        Donate(msg.sender, msg.value);\r\n    }\r\n\r\n    function updAcceptDonate(bool _accept)\r\n    authLevel(Level.ADMIN)\r\n    public\r\n    returns (bool success)\r\n    {\r\n        PropsChanged(msg.sender, \"acceptDonate\", acceptDonate, _accept);\r\n        acceptDonate = _accept;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"balanceToken\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorizedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_autoFreeze\",\"type\":\"bool\"}],\"name\":\"updAutoFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezeEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintFinish\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_freezeEnabled\",\"type\":\"bool\"}],\"name\":\"updFreezeEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publisher\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"acceptAdminWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_version\",\"type\":\"string\"},{\"name\":\"_publisher\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"setupInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accept\",\"type\":\"bool\"}],\"name\":\"updAcceptAdminWithdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accept\",\"type\":\"bool\"}],\"name\":\"updAcceptDonate\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unAuthorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"acceptDonate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"authorized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"version\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"publisher\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"InfoChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"props\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"PropsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"UnFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ReceiveTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ApproveAndCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"UnAuthorized\",\"type\":\"event\"}]","ContractName":"DapCarToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5a2d03883354f55e2c210184aafab43893e6b1bf703dedfcfd766fb8a6f07c47"}]}