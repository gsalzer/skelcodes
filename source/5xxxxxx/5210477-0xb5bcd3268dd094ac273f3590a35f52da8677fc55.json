{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract ERC20Basic \r\n{\r\n\tuint256 public totalSupply;\r\n\tfunction balanceOf(address who) constant public returns (uint256);\r\n\tfunction transfer(address to, uint256 value) public returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic\r\n{\r\n\tfunction allowance(address owner, address spender) constant  public returns (uint256);\r\n\tfunction transferFrom(address from, address to, uint256 value)  public returns (bool);\r\n\tfunction approve(address spender, uint256 value)  public returns (bool);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath \r\n{\r\n    \r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n  \r\n}\r\n\r\ncontract BasicToken is ERC20Basic \r\n{\r\n    \r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) balances;\r\n\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n\t\trequire(msg.data.length >= (2*32) + 4);     // доп. проверка на атаку с коротких адресов\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) constant public returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken \r\n{\r\n\r\n\tmapping (address => mapping (address => uint256)) allowed;\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) \r\n\t{\r\n\t\trequire(msg.data.length >= (3*32) + 4);     // Fix for the ERC20 short address attack\r\n\t\tvar _allowance = allowed[_from][msg.sender];\r\n\t\t\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\r\n\t\tTransfer(_from, _to, _value);\r\n    return true;\r\n\t}\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool)\r\n\t{\r\n\t\trequire((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address _owner, address _spender) constant public returns (uint256 remaining) \r\n\t{\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n}\r\n\r\ncontract Ownable \r\n{\r\n    address public owner;\r\n\r\n\tfunction Ownable()  public\r\n\t{\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner() \r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner)  public onlyOwner\r\n\t{\r\n\t\trequire(newOwner != address(0));      \r\n\t\towner = newOwner;\r\n\t}\r\n}\r\n\r\ncontract BurnableToken is StandardToken, Ownable \r\n{\r\n    uint256 endIco = 1527854400; // 1 июня\r\n\r\n    modifier BurnAll() \r\n    { \r\n\t\trequire(now > endIco && balances[owner] > 0);  \r\n\t\t_;\r\n\t}\r\n    \r\n\tfunction burn()  public BurnAll \r\n\t{\r\n\t\tuint256 surplus = balances[owner];\r\n\t\ttotalSupply = totalSupply.sub(1000);\r\n\t\tbalances[owner] = 0;\r\n\t\tBurn(owner, surplus);\r\n\t}\r\n\tevent Burn(address indexed burner, uint indexed value);\r\n}\r\n\r\ncontract OSCoinToken is BurnableToken \r\n{\r\n\tstring public constant name = \"OSCoin\";   \r\n\tstring public constant symbol = \"OSC\";    \r\n\tuint32 public constant decimals = 18;\r\n\r\n\tuint256 public INITIAL_SUPPLY = 2000000 * 1 ether;\r\n\r\n\tfunction OSCoinToken()  public\r\n\t{\r\n\t\ttotalSupply = INITIAL_SUPPLY;\r\n\t\tbalances[msg.sender] = INITIAL_SUPPLY;\r\n\t\t\r\n\t\tallowed[owner][0x740F7A070C283edc1cAd9351A67aD3b513f3136a] = (totalSupply).div(100).mul(11);     // запись о передаче права забрать 11% from to надо установить нужный адрес для пересылки OSCoin\r\n\t\tApproval(owner,0x740F7A070C283edc1cAd9351A67aD3b513f3136a, (totalSupply).div(100).mul(11));     // передаче права забрать 11% from to          надо установить нужный адрес для пересылки OSCoin\r\n\t}\r\n}\r\n\r\ncontract Crowdsale is Ownable\r\n{   \r\n    // текущее время http://i-leon.ru/tools/time   \r\n        \r\n    uint256 startPreIco = 1522065600; // 26 марта\r\n    uint256 startIco = 1525089600; // 30 апреля\r\n    uint256 endIco = 1527854400; // 1 июня\r\n    \r\n\tusing SafeMath for uint;    \r\n\taddress multisig;\r\n\tuint restrictedPercent;\r\n\taddress restricted;\r\n\tOSCoinToken public token = new OSCoinToken();\r\n\t\r\n\tuint period;\r\n\tuint rate;\r\n\t\r\n\tfunction Crowdsale() public {\r\n\t\tmultisig = 0x83dd3A421C98ea8fd59798bC57B4e2C75Caf9935;      // адрес куда будут перечисляться вырученные Ethereum\r\n\t\trestricted = 0x83dd3A421C98ea8fd59798bC57B4e2C75Caf9935;    // адрес куда будут перечисляться 23% с продаж надо установить нужный адрес для пересылки OSCoin\r\n\t\trestrictedPercent = 23;\r\n\t\trate = 1000000000000000000000;\r\n\t}\r\n\r\n\tmodifier saleIsOn() \r\n\t{\r\n\t\trequire(now < endIco);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction createTokens() saleIsOn  public payable {\r\n\t\tmultisig.transfer(msg.value);\r\n\t\tuint tokens = rate.mul(msg.value).div(1 ether);\r\n\t\tuint bonusTokens = 0;\r\n\t\t\r\n\t\tif((now < startPreIco)) \r\n\t\t{ \r\n\t\t\tbonusTokens = tokens.div(2);\r\n\t\t} else if(now >= startPreIco && now < startIco) {\r\n\t\t\tbonusTokens = tokens.div(4);\r\n\t\t}\r\n\t\t\r\n\t\tuint tokensWithBonus = tokens.add(bonusTokens);\r\n\t\ttoken.transfer(msg.sender, tokensWithBonus);\r\n\t\tuint restrictedTokens = tokens.mul(restrictedPercent).div(100 - restrictedPercent);\r\n\t\ttoken.transfer(restricted, restrictedTokens);\r\n\t}\r\n\r\n\tfunction() external payable \r\n\t{\r\n\t\tcreateTokens();\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5a42d7979254ae92740c7788c38c96551da89a42c8284216f8f14a4e2e914d5f"}]}