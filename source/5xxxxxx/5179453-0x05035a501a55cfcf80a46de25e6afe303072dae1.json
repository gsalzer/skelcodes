{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n// import from contract/src/lib/math/_.sol ======\r\n// -- import from contract/src/lib/math/u256.sol ====== \r\n\r\nlibrary U256 {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {// assert(b > 0); // Solidity automatically throws when dividing by 0 \r\n        uint256 c = a / b; // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n} \r\n// import from contract/src/Solar/_.sol ======\r\n// -- import from contract/src/Solar/iNewPrice.sol ====== \r\n\r\ninterface INewPrice { \r\n    function getNewPrice(uint initial, uint origin) view public returns(uint);\r\n    function isNewPrice() view public returns(bool);\r\n}\r\ncontract NewPricePlanet is INewPrice { \r\n    using U256 for uint256; \r\n\r\n    function getNewPrice(uint origin, uint current) view public returns(uint) {\r\n        if (current < 0.02 ether) {\r\n            return current.mul(150).div(100);\r\n        } else if (current < 0.5 ether) {\r\n            return current.mul(135).div(100);\r\n        } else if (current < 2 ether) {\r\n            return current.mul(125).div(100);\r\n        } else if (current < 50 ether) {\r\n            return current.mul(117).div(100);\r\n        } else if (current < 200 ether) {\r\n            return current.mul(113).div(100);\r\n        } else {\r\n            return current.mul(110).div(100);\r\n        } \r\n    }\r\n\r\n    function isNewPrice() view public returns(bool) {\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isNewPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"origin\",\"type\":\"uint256\"},{\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"getNewPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"NewPricePlanet","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d0e4f247c2932779f2deb9cbef4f27d6334386a2d61baf48e8068eb70b664cb2"}]}