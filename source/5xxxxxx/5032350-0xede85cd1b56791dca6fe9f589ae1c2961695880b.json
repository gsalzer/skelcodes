{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nBinks Bucks Solidity Code:\r\nCreated for Doug Polk\r\nAuthored by Chris Digirolamo\r\n**/\r\npragma solidity ^0.4.18;\r\n\r\ncontract BinksBucksToken {\r\n    /*\r\n    This class implements the ERC20 Functionality for Binks Bucks\r\n    along with other standard token helpers (e.g. Name, symbol, etc.).\r\n    **/\r\n    string public constant name = \"Binks Bucks\";\r\n    string public constant symbol = \"BINX\";\r\n    uint8 public constant decimals = 18;\r\n    uint internal _totalSupply = 0;\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping (address => uint256)) _allowed;\r\n\r\n    function totalSupply() public constant returns (uint) {\r\n        /*\r\n        Gets the total supply of Binks Bucks.\r\n        **/\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address owner) public constant returns (uint) {\r\n        /*\r\n        Get the balance of an account.\r\n        **/\r\n        return _balances[owner];\r\n    }\r\n\r\n    // Helper Functions\r\n    function hasAtLeast(address adr, uint amount) constant internal returns (bool) {\r\n        if (amount <= 0) {return false;}\r\n        return _balances[adr] >= amount;\r\n    }\r\n\r\n    function canRecieve(address adr, uint amount) constant internal returns (bool) {\r\n        if (amount <= 0) {return false;}\r\n        uint balance = _balances[adr];\r\n        return (balance + amount > balance);\r\n    }\r\n\r\n    function hasAllowance(address proxy, address spender, uint amount) constant internal returns (bool) {\r\n        if (amount <= 0) {return false;}\r\n        return _allowed[spender][proxy] >= amount;\r\n    }\r\n\r\n    function canAdd(uint x, uint y) pure internal returns (bool) {\r\n        uint total = x + y;\r\n        if (total > x && total > y) {return true;}\r\n        return false;\r\n    }\r\n\r\n    // End Helper Functions\r\n\r\n    function transfer(address to, uint amount) public returns (bool) {\r\n        /*\r\n        Sends tokens to an address if you have the balance\r\n        **/\r\n        require(canRecieve(to, amount));\r\n        require(hasAtLeast(msg.sender, amount));\r\n        _balances[msg.sender] -= amount;\r\n        _balances[to] += amount;\r\n        Transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n   function allowance(address proxy, address spender) public constant returns (uint) {\r\n       /*\r\n       Returns the amount which spender is still allowed to withdraw from\r\n       proxy allowance.\r\n       **/\r\n        return _allowed[proxy][spender];\r\n    }\r\n\r\n    function approve(address spender, uint amount) public returns (bool) {\r\n        /*\r\n        Allows spender to withdraw from your account, multiple times,\r\n        up to the _value amount. If this function is called again it\r\n        overwrites the current allowance with _value\r\n        **/\r\n        _allowed[msg.sender][spender] = amount;\r\n        Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint amount) public returns (bool) {\r\n        /*\r\n        Sends an amount of tokens from address an address if proxy allowance exists.\r\n        **/\r\n        require(hasAllowance(msg.sender, from, amount));\r\n        require(canRecieve(to, amount));\r\n        require(hasAtLeast(from, amount));\r\n        _allowed[from][msg.sender] -= amount;\r\n        _balances[from] -= amount;\r\n        _balances[to] += amount;\r\n        Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    event Transfer(address indexed, address indexed, uint);\r\n    event Approval(address indexed proxy, address indexed spender, uint amount);\r\n}\r\n\r\ncontract Giveaway is BinksBucksToken {\r\n    /*\r\n    This class implements giveaway code functionality.\r\n    The tokens actually stored in the contracts address are able\r\n    to be given away.\r\n    **/\r\n    address internal giveaway_master;\r\n    address internal imperator;\r\n    uint32 internal _code = 0;\r\n    uint internal _distribution_size = 1000000000000000000000;\r\n    uint internal _max_distributions = 100;\r\n    uint internal _distributions_left = 100;\r\n    uint internal _distribution_number = 0;\r\n    mapping(address => uint256) internal _last_distribution;\r\n\r\n    function transferAdmin(address newImperator) public {\r\n            require(msg.sender == imperator);\r\n            imperator = newImperator;\r\n        }\r\n\r\n    function transferGiveaway(address newaddress) public {\r\n        require(msg.sender == imperator || msg.sender == giveaway_master);\r\n        giveaway_master = newaddress;\r\n    }\r\n\r\n    function startGiveaway(uint32 code, uint max_distributions) public {\r\n        /*\r\n        Starts a giveaway using a code. Only max_distributions will be given\r\n        out.\r\n        **/\r\n        require(msg.sender == imperator || msg.sender == giveaway_master);\r\n        _code = code;\r\n        _max_distributions = max_distributions;\r\n        _distributions_left = max_distributions;\r\n        _distribution_number += 1;\r\n    }\r\n\r\n    function setDistributionSize(uint num) public {\r\n        /*\r\n        Sets the size, remember, the amount is in the smallest decimal increment.\r\n        num=1000000000000000000000 is 1000 BINX.\r\n        Disables the current giveaway when changed.\r\n        **/\r\n        require(msg.sender == imperator || msg.sender == giveaway_master);\r\n        _code = 0;\r\n        _distribution_size = num;\r\n    }\r\n\r\n    function CodeEligible() public view returns (bool) {\r\n        /*\r\n        Checks if you can enter a code yet.\r\n        **/\r\n        return (_code != 0 && _distributions_left > 0 && _distribution_number > _last_distribution[msg.sender]);\r\n    }\r\n\r\n    function EnterCode(uint32 code) public {\r\n        /*\r\n        Enters a code in a giveaway.\r\n        **/\r\n        require(CodeEligible());\r\n        if (code == _code) {\r\n            _last_distribution[msg.sender] = _distribution_number;\r\n            _distributions_left -= 1;\r\n            require(canRecieve(msg.sender, _distribution_size));\r\n            require(hasAtLeast(this, _distribution_size));\r\n            _balances[this] -= _distribution_size;\r\n            _balances[msg.sender] += _distribution_size;\r\n            Transfer(this, msg.sender, _distribution_size);\r\n        }\r\n    }\r\n}\r\n\r\ncontract BinksBucks is BinksBucksToken, Giveaway {\r\n    /*\r\n    The Binks Bucks contract.\r\n    **/\r\n    function BinksBucks(address bossman) public {\r\n        imperator = msg.sender;\r\n        giveaway_master = bossman;\r\n        // The contract itself is given a balance for giveaways\r\n        _balances[this] += 240000000000000000000000000;\r\n        _totalSupply += 240000000000000000000000000;\r\n        // Bossman gets the rest\r\n        _balances[bossman] += 750000000000000000000000000;\r\n        _totalSupply += 750000000000000000000000000;\r\n        // For first transfer back into contract\r\n        _balances[msg.sender] += 10000000000000000000000000;\r\n        _totalSupply += 10000000000000000000000000;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"code\",\"type\":\"uint32\"}],\"name\":\"EnterCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"code\",\"type\":\"uint32\"},{\"name\":\"max_distributions\",\"type\":\"uint256\"}],\"name\":\"startGiveaway\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newImperator\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newaddress\",\"type\":\"address\"}],\"name\":\"transferGiveaway\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setDistributionSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CodeEligible\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proxy\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"bossman\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BinksBucks","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005e6242ebcdbb68915959770665c3603d5b01a190","Library":"","SwarmSource":"bzzr://68d9c6b31ffe07bd4effb3ab13aacce5ca0195f6076515a0cff00720aec62921"}]}