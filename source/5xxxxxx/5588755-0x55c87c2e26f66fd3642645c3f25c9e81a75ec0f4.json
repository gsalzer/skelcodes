{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ninterface XCPluginInterface {\r\n\r\n    /**\r\n     * Open the contract service status.\r\n     */\r\n    function start() external;\r\n\r\n    /**\r\n     * Close the contract service status.\r\n     */\r\n    function stop() external;\r\n\r\n    /**\r\n     * Get contract service status.\r\n     * @return contract service status.\r\n     */\r\n    function getStatus() external view returns (bool);\r\n\r\n    /**\r\n     * Get the current contract platform name.\r\n     * @return contract platform name.\r\n     */\r\n    function getPlatformName() external view returns (bytes32);\r\n\r\n    /**\r\n     * Set the current contract administrator.\r\n     * @param account account of contract administrator.\r\n     */\r\n    function setAdmin(address account) external;\r\n\r\n    /**\r\n     * Get the current contract administrator.\r\n     * @return contract administrator.\r\n     */\r\n    function getAdmin() external view returns (address);\r\n\r\n    /**\r\n     * Add a contract trust caller.\r\n     * @param caller account of caller.\r\n     */\r\n    function addCaller(address caller) external;\r\n\r\n    /**\r\n     * Delete a contract trust caller.\r\n     * @param caller account of caller.\r\n     */\r\n    function deleteCaller(address caller) external;\r\n\r\n    /**\r\n     * Whether the trust caller exists.\r\n     * @param caller account of caller.\r\n     * @return whether exists.\r\n     */\r\n    function existCaller(address caller) external view returns (bool);\r\n\r\n    /**\r\n     * Get all contract trusted callers.\r\n     * @return al lcallers.\r\n     */\r\n    function getCallers() external view returns (address[]);\r\n\r\n    /**\r\n     * Add a trusted platform name.\r\n     * @param name a platform name.\r\n     */\r\n    function addPlatform(bytes32 name) external;\r\n\r\n    /**\r\n     * Delete a trusted platform name.\r\n     * @param name a platform name.\r\n     */\r\n    function deletePlatform(bytes32 name) external;\r\n\r\n    /**\r\n     * Whether the trusted platform information exists.\r\n     * @param name a platform name.\r\n     * @return whether exists.\r\n     */\r\n    function existPlatform(bytes32 name) external view returns (bool);\r\n\r\n    /**\r\n     * Add the trusted platform public key information.\r\n     * @param platformName a platform name.\r\n     * @param publicKey a public key.\r\n     */\r\n    function addPublicKey(bytes32 platformName, address publicKey) external;\r\n\r\n    /**\r\n     * Delete the trusted platform public key information.\r\n     * @param platformName a platform name.\r\n     * @param publicKey a public key.\r\n     */\r\n    function deletePublicKey(bytes32 platformName, address publicKey) external;\r\n\r\n    /**\r\n     * Whether the trusted platform public key information exists.\r\n     * @param platformName a platform name.\r\n     * @param publicKey a public key.\r\n     */\r\n    function existPublicKey(bytes32 platformName, address publicKey) external view returns (bool);\r\n\r\n    /**\r\n     * Get the count of public key for the trusted platform.\r\n     * @param platformName a platform name.\r\n     * @return count of public key.\r\n     */\r\n    function countOfPublicKey(bytes32 platformName) external view returns (uint);\r\n\r\n    /**\r\n     * Get the list of public key for the trusted platform.\r\n     * @param platformName a platform name.\r\n     * @return list of public key.\r\n     */\r\n    function publicKeys(bytes32 platformName) external view returns (address[]);\r\n\r\n    /**\r\n     * Set the weight of a trusted platform.\r\n     * @param platformName a platform name.\r\n     * @param weight weight of platform.\r\n     */\r\n    function setWeight(bytes32 platformName, uint weight) external;\r\n\r\n    /**\r\n     * Get the weight of a trusted platform.\r\n     * @param platformName a platform name.\r\n     * @return weight of platform.\r\n     */\r\n    function getWeight(bytes32 platformName) external view returns (uint);\r\n\r\n    /**\r\n     * Initiate and vote on the transaction proposal.\r\n     * @param fromPlatform name of form platform.\r\n     * @param fromAccount name of to platform.\r\n     * @param toAccount account of to platform.\r\n     * @param value transfer amount.\r\n     * @param tokenSymbol token Symbol.\r\n     * @param txid transaction id.\r\n     * @param sig transaction signature.\r\n     */\r\n    function voteProposal(bytes32 fromPlatform, address fromAccount, address toAccount, uint value, bytes32 tokenSymbol, string txid, bytes sig) external;\r\n\r\n    /**\r\n     * Verify that the transaction proposal is valid.\r\n     * @param fromPlatform name of form platform.\r\n     * @param fromAccount name of to platform.\r\n     * @param toAccount account of to platform.\r\n     * @param value transfer amount.\r\n     * @param tokenSymbol token Symbol.\r\n     * @param txid transaction id.\r\n     */\r\n    function verifyProposal(bytes32 fromPlatform, address fromAccount, address toAccount, uint value, bytes32 tokenSymbol, string txid) external view returns (bool, bool);\r\n\r\n    /**\r\n     * Commit the transaction proposal.\r\n     * @param platformName a platform name.\r\n     * @param txid transaction id.\r\n     */\r\n    function commitProposal(bytes32 platformName, string txid) external returns (bool);\r\n\r\n    /**\r\n     * Get the transaction proposal information.\r\n     * @param platformName a platform name.\r\n     * @param txid transaction id.\r\n     * @return status completion status of proposal.\r\n     * @return fromAccount account of to platform.\r\n     * @return toAccount account of to platform.\r\n     * @return value transfer amount.\r\n     * @return voters notarial voters.\r\n     * @return weight The weight value of the completed time.\r\n     */\r\n    function getProposal(bytes32 platformName, string txid) external view returns (bool status, address fromAccount, address toAccount, uint value, address[] voters, uint weight);\r\n\r\n    /**\r\n     * Delete the transaction proposal information.\r\n     * @param platformName a platform name.\r\n     * @param txid transaction id.\r\n     */\r\n    function deleteProposal(bytes32 platformName, string txid) external;\r\n\r\n    /**\r\n     * Transfer the money(qtum/eth) from the contract account.\r\n     * @param account the specified account.\r\n     * @param value transfer amount.\r\n     */\r\n    function transfer(address account, uint value) external payable;\r\n}\r\n\r\ncontract XCPlugin is XCPluginInterface {\r\n\r\n    /**\r\n     * Contract Administrator\r\n     * @field status Contract external service status.\r\n     * @field platformName Current contract platform name.\r\n     * @field tokenSymbol token Symbol.\r\n     * @field account Current contract administrator.\r\n     */\r\n    struct Admin {\r\n\r\n        bool status;\r\n\r\n        bytes32 platformName;\r\n\r\n        bytes32 tokenSymbol;\r\n\r\n        address account;\r\n    }\r\n\r\n    /**\r\n     * Transaction Proposal\r\n     * @field status Transaction proposal status(false:pending,true:complete).\r\n     * @field fromAccount Account of form platform.\r\n     * @field toAccount Account of to platform.\r\n     * @field value Transfer amount.\r\n     * @field tokenSymbol token Symbol.\r\n     * @field voters Proposers.\r\n     * @field weight The weight value of the completed time.\r\n     */\r\n    struct Proposal {\r\n\r\n        bool status;\r\n\r\n        address fromAccount;\r\n\r\n        address toAccount;\r\n\r\n        uint value;\r\n\r\n        bytes32 tokenSymbol;\r\n\r\n        address[] voters;\r\n\r\n        uint weight;\r\n    }\r\n\r\n    /**\r\n     * Trusted Platform\r\n     * @field status Trusted platform state(false:no trusted,true:trusted).\r\n     * @field weight weight of platform.\r\n     * @field publicKeys list of public key.\r\n     * @field proposals list of proposal.\r\n     */\r\n    struct Platform {\r\n\r\n        bool status;\r\n\r\n        uint weight;\r\n\r\n        address[] publicKeys;\r\n\r\n        mapping(string => Proposal) proposals;\r\n    }\r\n\r\n    Admin private admin;\r\n\r\n    address[] private callers;\r\n\r\n    mapping(bytes32 => Platform) private platforms;\r\n\r\n    function XCPlugin() public {\r\n\r\n        init();\r\n    }\r\n\r\n    function init() internal {\r\n        // Admin { status | platformName | tokenSymbol | account}\r\n        admin.status = true;\r\n\r\n        admin.platformName = \"ETH\";\r\n\r\n        admin.tokenSymbol = \"INK\";\r\n\r\n        admin.account = msg.sender;\r\n\r\n        bytes32 platformName = \"INK\";\r\n\r\n        platforms[platformName].status = true;\r\n\r\n        platforms[platformName].weight = 1;\r\n\r\n        platforms[platformName].publicKeys.push(0x4230a12f5b0693dd88bb35c79d7e56a68614b199);\r\n\r\n        platforms[platformName].publicKeys.push(0x07caf88941eafcaaa3370657fccc261acb75dfba);\r\n    }\r\n\r\n    function start() external {\r\n\r\n        require(admin.account == msg.sender);\r\n\r\n        if (!admin.status) {\r\n\r\n            admin.status = true;\r\n        }\r\n    }\r\n\r\n    function stop() external {\r\n\r\n        require(admin.account == msg.sender);\r\n\r\n        if (admin.status) {\r\n\r\n            admin.status = false;\r\n        }\r\n    }\r\n\r\n    function getStatus() external view returns (bool) {\r\n\r\n        return admin.status;\r\n    }\r\n\r\n    function getPlatformName() external view returns (bytes32) {\r\n\r\n        return admin.platformName;\r\n    }\r\n\r\n    function setAdmin(address account) external {\r\n\r\n        require(account != address(0));\r\n\r\n        require(admin.account == msg.sender);\r\n\r\n        if (admin.account != account) {\r\n\r\n            admin.account = account;\r\n        }\r\n    }\r\n\r\n    function getAdmin() external view returns (address) {\r\n\r\n        return admin.account;\r\n    }\r\n\r\n    function addCaller(address caller) external {\r\n\r\n        require(admin.account == msg.sender);\r\n\r\n        if (!_existCaller(caller)) {\r\n\r\n            callers.push(caller);\r\n        }\r\n    }\r\n\r\n    function deleteCaller(address caller) external {\r\n\r\n        require(admin.account == msg.sender);\r\n\r\n        if (_existCaller(caller)) {\r\n\r\n            bool exist;\r\n\r\n            for (uint i = 0; i <= callers.length; i++) {\r\n\r\n                if (exist) {\r\n\r\n                    if (i == callers.length) {\r\n\r\n                        delete callers[i - 1];\r\n\r\n                        callers.length--;\r\n                    } else {\r\n\r\n                        callers[i - 1] = callers[i];\r\n                    }\r\n                } else if (callers[i] == caller) {\r\n\r\n                    exist = true;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function existCaller(address caller) external view returns (bool) {\r\n\r\n        return _existCaller(caller);\r\n    }\r\n\r\n    function getCallers() external view returns (address[]) {\r\n\r\n        require(admin.account == msg.sender);\r\n\r\n        return callers;\r\n    }\r\n\r\n    function addPlatform(bytes32 name) external {\r\n\r\n        require(admin.account == msg.sender);\r\n\r\n        require(name != \"\");\r\n\r\n        require(name != admin.platformName);\r\n\r\n        if (!_existPlatform(name)) {\r\n\r\n            platforms[name].status = true;\r\n\r\n            if (platforms[name].weight == 0) {\r\n\r\n                platforms[name].weight = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    function deletePlatform(bytes32 name) external {\r\n\r\n        require(admin.account == msg.sender);\r\n\r\n        require(name != admin.platformName);\r\n\r\n        if (_existPlatform(name)) {\r\n\r\n            platforms[name].status = false;\r\n        }\r\n    }\r\n\r\n    function existPlatform(bytes32 name) external view returns (bool){\r\n\r\n        return _existPlatform(name);\r\n    }\r\n\r\n    function setWeight(bytes32 platformName, uint weight) external {\r\n\r\n        require(admin.account == msg.sender);\r\n\r\n        require(_existPlatform(platformName));\r\n\r\n        require(weight > 0);\r\n\r\n        if (platforms[platformName].weight != weight) {\r\n\r\n            platforms[platformName].weight = weight;\r\n        }\r\n    }\r\n\r\n    function getWeight(bytes32 platformName) external view returns (uint) {\r\n\r\n        require(admin.account == msg.sender);\r\n\r\n        require(_existPlatform(platformName));\r\n\r\n        return platforms[platformName].weight;\r\n    }\r\n\r\n    function addPublicKey(bytes32 platformName, address publicKey) external {\r\n\r\n        require(admin.account == msg.sender);\r\n\r\n        require(_existPlatform(platformName));\r\n\r\n        require(publicKey != address(0));\r\n\r\n        address[] storage listOfPublicKey = platforms[platformName].publicKeys;\r\n\r\n        for (uint i; i < listOfPublicKey.length; i++) {\r\n\r\n            if (publicKey == listOfPublicKey[i]) {\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        listOfPublicKey.push(publicKey);\r\n    }\r\n\r\n    function deletePublicKey(bytes32 platformName, address publickey) external {\r\n\r\n        require(admin.account == msg.sender);\r\n\r\n        require(_existPlatform(platformName));\r\n\r\n        address[] storage listOfPublicKey = platforms[platformName].publicKeys;\r\n\r\n        bool exist;\r\n\r\n        for (uint i = 0; i <= listOfPublicKey.length; i++) {\r\n\r\n            if (exist) {\r\n                if (i == listOfPublicKey.length) {\r\n\r\n                    delete listOfPublicKey[i - 1];\r\n\r\n                    listOfPublicKey.length--;\r\n                } else {\r\n\r\n                    listOfPublicKey[i - 1] = listOfPublicKey[i];\r\n                }\r\n            } else if (listOfPublicKey[i] == publickey) {\r\n\r\n                exist = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function existPublicKey(bytes32 platformName, address publicKey) external view returns (bool) {\r\n\r\n        require(admin.account == msg.sender);\r\n\r\n        return _existPublicKey(platformName, publicKey);\r\n    }\r\n\r\n    function countOfPublicKey(bytes32 platformName) external view returns (uint){\r\n\r\n        require(admin.account == msg.sender);\r\n\r\n        require(_existPlatform(platformName));\r\n\r\n        return platforms[platformName].publicKeys.length;\r\n    }\r\n\r\n    function publicKeys(bytes32 platformName) external view returns (address[]){\r\n\r\n        require(admin.account == msg.sender);\r\n\r\n        require(_existPlatform(platformName));\r\n\r\n        return platforms[platformName].publicKeys;\r\n    }\r\n\r\n    function voteProposal(bytes32 fromPlatform, address fromAccount, address toAccount, uint value, bytes32 tokenSymbol, string txid, bytes sig) external {\r\n\r\n        require(admin.status);\r\n\r\n        require(_existPlatform(fromPlatform));\r\n\r\n        bytes32 msgHash = hashMsg(fromPlatform, fromAccount, admin.platformName, toAccount, value, tokenSymbol, txid);\r\n\r\n        // address publicKey = ecrecover(msgHash, v, r, s);\r\n        address publicKey = recover(msgHash, sig);\r\n\r\n        require(_existPublicKey(fromPlatform, publicKey));\r\n\r\n        Proposal storage proposal = platforms[fromPlatform].proposals[txid];\r\n\r\n        if (proposal.value == 0) {\r\n\r\n            proposal.fromAccount = fromAccount;\r\n\r\n            proposal.toAccount = toAccount;\r\n\r\n            proposal.value = value;\r\n\r\n            proposal.tokenSymbol = tokenSymbol;\r\n        } else {\r\n\r\n            require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value && proposal.tokenSymbol == tokenSymbol);\r\n        }\r\n\r\n        changeVoters(fromPlatform, publicKey, txid);\r\n    }\r\n\r\n    function verifyProposal(bytes32 fromPlatform, address fromAccount, address toAccount, uint value, bytes32 tokenSymbol, string txid) external view returns (bool, bool) {\r\n\r\n        require(admin.status);\r\n\r\n        require(_existPlatform(fromPlatform));\r\n\r\n        Proposal storage proposal = platforms[fromPlatform].proposals[txid];\r\n\r\n        if (proposal.status) {\r\n\r\n            return (true, (proposal.voters.length >= proposal.weight));\r\n        }\r\n\r\n        if (proposal.value == 0) {\r\n\r\n            return (false, false);\r\n        }\r\n\r\n        require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value && proposal.tokenSymbol == tokenSymbol);\r\n\r\n        return (false, (proposal.voters.length >= platforms[fromPlatform].weight));\r\n    }\r\n\r\n    function commitProposal(bytes32 platformName, string txid) external returns (bool) {\r\n\r\n        require(admin.status);\r\n\r\n        require(_existCaller(msg.sender) || msg.sender == admin.account);\r\n\r\n        require(_existPlatform(platformName));\r\n\r\n        require(!platforms[platformName].proposals[txid].status);\r\n\r\n        platforms[platformName].proposals[txid].status = true;\r\n\r\n        platforms[platformName].proposals[txid].weight = platforms[platformName].proposals[txid].voters.length;\r\n\r\n        return true;\r\n    }\r\n\r\n    function getProposal(bytes32 platformName, string txid) external view returns (bool status, address fromAccount, address toAccount, uint value, address[] voters, uint weight){\r\n\r\n        require(admin.status);\r\n\r\n        require(_existPlatform(platformName));\r\n\r\n        fromAccount = platforms[platformName].proposals[txid].fromAccount;\r\n\r\n        toAccount = platforms[platformName].proposals[txid].toAccount;\r\n\r\n        value = platforms[platformName].proposals[txid].value;\r\n\r\n        voters = platforms[platformName].proposals[txid].voters;\r\n\r\n        status = platforms[platformName].proposals[txid].status;\r\n\r\n        weight = platforms[platformName].proposals[txid].weight;\r\n\r\n        return;\r\n    }\r\n\r\n    function deleteProposal(bytes32 platformName, string txid) external {\r\n\r\n        require(msg.sender == admin.account);\r\n\r\n        require(_existPlatform(platformName));\r\n\r\n        delete platforms[platformName].proposals[txid];\r\n    }\r\n\r\n    function transfer(address account, uint value) external payable {\r\n\r\n        require(admin.account == msg.sender);\r\n\r\n        require(account != address(0));\r\n\r\n        require(value > 0 && value >= address(this).balance);\r\n\r\n        this.transfer(account, value);\r\n    }\r\n\r\n    /**\r\n     *   ######################\r\n     *  #  private function  #\r\n     * ######################\r\n     */\r\n\r\n    function hashMsg(bytes32 fromPlatform, address fromAccount, bytes32 toPlatform, address toAccount, uint value, bytes32 tokenSymbol, string txid) internal pure returns (bytes32) {\r\n\r\n        return sha256(bytes32ToStr(fromPlatform), \":0x\", uintToStr(uint160(fromAccount), 16), \":\", bytes32ToStr(toPlatform), \":0x\", uintToStr(uint160(toAccount), 16), \":\", uintToStr(value, 10), \":\", bytes32ToStr(tokenSymbol), \":\", txid);\r\n    }\r\n\r\n    function changeVoters(bytes32 platformName, address publicKey, string txid) internal {\r\n\r\n        address[] storage voters = platforms[platformName].proposals[txid].voters;\r\n\r\n        bool change = true;\r\n\r\n        for (uint i = 0; i < voters.length; i++) {\r\n\r\n            if (voters[i] == publicKey) {\r\n\r\n                change = false;\r\n            }\r\n        }\r\n\r\n        if (change) {\r\n\r\n            voters.push(publicKey);\r\n        }\r\n    }\r\n\r\n    function bytes32ToStr(bytes32 b) internal pure returns (string) {\r\n\r\n        uint length = b.length;\r\n\r\n        for (uint i = 0; i < b.length; i++) {\r\n\r\n            if (b[b.length - 1 - i] == \"\") {\r\n\r\n                length -= 1;\r\n            } else {\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        bytes memory bs = new bytes(length);\r\n\r\n        for (uint j = 0; j < length; j++) {\r\n\r\n            bs[j] = b[j];\r\n        }\r\n\r\n        return string(bs);\r\n    }\r\n\r\n    function uintToStr(uint value, uint base) internal pure returns (string) {\r\n\r\n        uint _value = value;\r\n\r\n        uint length = 0;\r\n\r\n        bytes16 tenStr = \"0123456789abcdef\";\r\n\r\n        while (true) {\r\n\r\n            if (_value > 0) {\r\n\r\n                length ++;\r\n\r\n                _value = _value / base;\r\n            } else {\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (base == 16) {\r\n            length = 40;\r\n        }\r\n\r\n        bytes memory bs = new bytes(length);\r\n\r\n        for (uint i = 0; i < length; i++) {\r\n\r\n            bs[length - 1 - i] = tenStr[value % base];\r\n\r\n            value = value / base;\r\n        }\r\n\r\n        return string(bs);\r\n    }\r\n\r\n    function _existCaller(address caller) internal view returns (bool) {\r\n\r\n        for (uint i = 0; i < callers.length; i++) {\r\n\r\n            if (callers[i] == caller) {\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function _existPlatform(bytes32 name) internal view returns (bool){\r\n\r\n        return platforms[name].status;\r\n    }\r\n\r\n    function _existPublicKey(bytes32 platformName, address publicKey) internal view returns (bool) {\r\n\r\n\r\n        address[] memory listOfPublicKey = platforms[platformName].publicKeys;\r\n\r\n        for (uint i = 0; i < listOfPublicKey.length; i++) {\r\n\r\n            if (listOfPublicKey[i] == publicKey) {\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function recover(bytes32 hash, bytes sig) internal pure returns (address) {\r\n\r\n        bytes32 r;\r\n\r\n        bytes32 s;\r\n\r\n        uint8 v;\r\n\r\n        assembly {\r\n\r\n            r := mload(add(sig, 32))\r\n\r\n            s := mload(add(sig, 64))\r\n\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        if (v < 27) {\r\n\r\n            v += 27;\r\n        }\r\n\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fromPlatform\",\"type\":\"bytes32\"},{\"name\":\"fromAccount\",\"type\":\"address\"},{\"name\":\"toAccount\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"tokenSymbol\",\"type\":\"bytes32\"},{\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"verifyProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"platformName\",\"type\":\"bytes32\"},{\"name\":\"publicKey\",\"type\":\"address\"}],\"name\":\"addPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"deleteCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"platformName\",\"type\":\"bytes32\"},{\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"deleteProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"existPlatform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"platformName\",\"type\":\"bytes32\"}],\"name\":\"getWeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"platformName\",\"type\":\"bytes32\"},{\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"setWeight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"addCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"existCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"deletePlatform\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromPlatform\",\"type\":\"bytes32\"},{\"name\":\"fromAccount\",\"type\":\"address\"},{\"name\":\"toAccount\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"tokenSymbol\",\"type\":\"bytes32\"},{\"name\":\"txid\",\"type\":\"string\"},{\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"voteProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"platformName\",\"type\":\"bytes32\"}],\"name\":\"countOfPublicKey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"platformName\",\"type\":\"bytes32\"},{\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"getProposal\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"},{\"name\":\"fromAccount\",\"type\":\"address\"},{\"name\":\"toAccount\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"voters\",\"type\":\"address[]\"},{\"name\":\"weight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"platformName\",\"type\":\"bytes32\"},{\"name\":\"publicKey\",\"type\":\"address\"}],\"name\":\"existPublicKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlatformName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCallers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"platformName\",\"type\":\"bytes32\"},{\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"commitProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"addPlatform\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"platformName\",\"type\":\"bytes32\"}],\"name\":\"publicKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"platformName\",\"type\":\"bytes32\"},{\"name\":\"publickey\",\"type\":\"address\"}],\"name\":\"deletePublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"XCPlugin","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4d157974d8b3a34d7d426297d67a905a372566174c9c25e90316632d403fc2ae"}]}