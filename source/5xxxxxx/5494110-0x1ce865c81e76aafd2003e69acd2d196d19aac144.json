{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value)\r\n    internal\r\n  {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/// @dev Right now, the Biddable application is responsible for being the arbitrator to all escrows.\r\n///  This means, the Biddable application has to enforce boundaries such that auction houses can\r\n///  only release escrows for users on their platform. This is done via the shared secret that is\r\n///  provisioned for each platform that onboards with the service.\r\ncontract BiddableEscrow is CanReclaimToken {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  // Mapping of escrows. Key is a UUID generated by Biddable\r\n  mapping (string => EscrowDeposit) private escrows;\r\n\r\n  // The arbitrator that is responsible for releasing escrow.\r\n  // At this time this is the Biddable service.\r\n  // This should be separate key than the one used for the creation of the contract.\r\n  address public arbitrator;\r\n\r\n  // Gas fees that have accumulated in this contract to reimburse the arbitrator\r\n  // for paying fees for releasing escrow. These are stored locally to avoid having to\r\n  // pay additional gas costs for transfer during each release.\r\n  uint256 public accumulatedGasFees;\r\n\r\n  struct EscrowDeposit {\r\n    // Used to avoid collisions\r\n    bool exists;\r\n\r\n    // Address of the bidder\r\n    address bidder;\r\n\r\n    // Encrypted data of the escrow\r\n    // This is the ownership data of the escrow in the context of the auction house platform\r\n    // It holds the platformId, auctionId, and the userId on the platform\r\n    bytes data;\r\n\r\n    // The amount in the escrow\r\n    uint256 amount;\r\n  }\r\n\r\n  modifier onlyArbitrator() {\r\n    require(msg.sender == arbitrator);\r\n    _;\r\n  }\r\n\r\n  /// @dev Constructor for the smart contract\r\n  /// @param _arbitrator Address for an arbitrator that is responsible for signing the transaction data\r\n  function BiddableEscrow(address _arbitrator) public {\r\n    arbitrator = _arbitrator;\r\n    accumulatedGasFees = 0;\r\n  }\r\n\r\n  /// @notice Sets a new arbitrator. Only callable by the owner\r\n  /// @param _newArbitrator Address for the new arbitrator\r\n  function setArbitrator(address _newArbitrator) external onlyOwner {\r\n    arbitrator = _newArbitrator;\r\n  }\r\n\r\n  /// @dev This event is emitted when funds have been deposited into a new escrow.\r\n  ///  The data is an encrypted blob that contains the user's userId so that the\r\n  ///  Biddable service can tell the calling platform which user to approve for bidding.\r\n  event Created(address indexed sender, string id, bytes data);\r\n\r\n  /// @notice Deposit ether into escrow. The data must be signed by the Biddable service.\r\n  /// @dev We don't use an 'onlyArbitrator' modifier because the transaction itself is sent by the bidder,\r\n  ///  but the data must be signed by the Biddable service. Thus, the function must be available to call\r\n  ///  by anyone.\r\n  /// @param _id Is the unique identifier of the escrow\r\n  /// @param _depositAmount The deposit required to be in escrow for approval\r\n  /// @param _data The encrypted deposit data\r\n  /// @param _v Recovery number\r\n  /// @param _r First part of the signature\r\n  /// @param _s Second part of the signature\r\n  function deposit(\r\n    string _id,\r\n    uint256 _depositAmount,\r\n    bytes _data,\r\n    uint8 _v,\r\n    bytes32 _r,\r\n    bytes32 _s)\r\n    external payable\r\n  {\r\n    // Throw if the amount sent doesn't mean the deposit amount\r\n    require(msg.value == _depositAmount);\r\n\r\n    // Throw if a deposit with this id already exists\r\n    require(!escrows[_id].exists);\r\n\r\n    bytes32 hash = keccak256(_id, _depositAmount, _data);\r\n    bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n\r\n    address recoveredAddress = ecrecover(\r\n      keccak256(prefix, hash),\r\n      _v,\r\n      _r,\r\n      _s\r\n    );\r\n\r\n    // Throw if the signature wasn't created by the arbitrator\r\n    require(recoveredAddress == arbitrator);\r\n\r\n    escrows[_id] = EscrowDeposit(\r\n      true,\r\n      msg.sender,\r\n      _data,\r\n      msg.value);\r\n\r\n    emit Created(msg.sender, _id, _data);\r\n  }\r\n\r\n  uint256 public constant RELEASE_GAS_FEES = 45989;\r\n\r\n  /// @dev This event is emitted when funds have been released from escrow at which time\r\n  ///  the escrow will be removed from storage (i.e., destroyed).\r\n  event Released(address indexed sender, address indexed bidder, uint256 value, string id);\r\n\r\n  /// @notice Release ether from escrow. Only the arbitrator is able to perform this action.\r\n  /// @param _id Is the unique identifier of the escrow\r\n  function release(string _id) external onlyArbitrator {\r\n    // Throw if this deposit doesn't exist\r\n    require(escrows[_id].exists);\r\n\r\n    EscrowDeposit storage escrowDeposit = escrows[_id];\r\n\r\n    // Shouldn't need to use SafeMath here because this should never cause an overflow\r\n    uint256 gasFees = RELEASE_GAS_FEES.mul(tx.gasprice);\r\n    uint256 amount = escrowDeposit.amount.sub(gasFees);\r\n    address bidder = escrowDeposit.bidder;\r\n\r\n    // Remove the deposit from storage\r\n    delete escrows[_id];\r\n\r\n    accumulatedGasFees = accumulatedGasFees.add(gasFees);\r\n    bidder.transfer(amount);\r\n\r\n    emit Released(\r\n      msg.sender,\r\n      bidder,\r\n      amount,\r\n      _id);\r\n  }\r\n\r\n  /// @notice Withdraw accumulated gas fees from the arbitratror releasing escrow.\r\n  ///  Only callable by the owner\r\n  function withdrawAccumulatedFees(address _to) external onlyOwner {\r\n    uint256 transferAmount = accumulatedGasFees;\r\n    accumulatedGasFees = 0;\r\n\r\n    _to.transfer(transferAmount);\r\n  }\r\n\r\n  /// @dev This accessor method is needed because the compiler is not able to create one with a string mapping\r\n  /// @notice Gets the EscrowDeposit based on the input id. Throws if the deposit doesn't exist.\r\n  /// @param _id The unique identifier of the escrow\r\n  function getEscrowDeposit(string _id) external view returns (address bidder, bytes data, uint256 amount) {\r\n    // Throw if this deposit doesn't exist\r\n    require(escrows[_id].exists);\r\n\r\n    EscrowDeposit storage escrowDeposit = escrows[_id];\r\n\r\n    bidder = escrowDeposit.bidder;\r\n    data = escrowDeposit.data;\r\n    amount = escrowDeposit.amount;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accumulatedGasFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newArbitrator\",\"type\":\"address\"}],\"name\":\"setArbitrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAccumulatedFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"getEscrowDeposit\",\"outputs\":[{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RELEASE_GAS_FEES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_arbitrator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BiddableEscrow","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000879afcccdace4495b01bab6390979bba2f1c080","Library":"","SwarmSource":"bzzr://dc9dd92b07e20e987f730a627dff871b8a6bb140b93b24043c0ffb1081c28cf0"}]}