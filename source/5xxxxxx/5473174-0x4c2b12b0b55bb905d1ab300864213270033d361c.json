{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/commons/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/flavours/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/flavours/Lockable.sol\r\n\r\n/**\r\n * @title Lockable\r\n * @dev Base contract which allows children to\r\n *      implement main operations locking mechanism.\r\n */\r\ncontract Lockable is Ownable {\r\n    event Lock();\r\n    event Unlock();\r\n\r\n    bool public locked = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable\r\n    *       only when the contract is not locked.\r\n     */\r\n    modifier whenNotLocked() {\r\n        require(!locked);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable\r\n     *      only when the contract is locked.\r\n     */\r\n    modifier whenLocked() {\r\n        require(locked);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to locke, triggers locked state\r\n     */\r\n    function lock() public onlyOwner whenNotLocked {\r\n        locked = true;\r\n        Lock();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner\r\n     *      to unlock, returns to unlocked state\r\n     */\r\n    function unlock() public onlyOwner whenLocked {\r\n        locked = false;\r\n        Unlock();\r\n    }\r\n}\r\n\r\n// File: contracts/base/BaseFixedERC20Token.sol\r\n\r\ncontract BaseFixedERC20Token is Lockable {\r\n    using SafeMath for uint;\r\n\r\n    /// @dev ERC20 Total supply\r\n    uint public totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n\r\n    mapping(address => mapping(address => uint)) private allowed;\r\n\r\n    /// @dev Fired if token is transferred according to ERC20 spec\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    /// @dev Fired if token withdrawal is approved according to ERC20 spec\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address\r\n     * @param owner_ The address to query the the balance of\r\n     * @return An uint representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address owner_) public view returns (uint balance) {\r\n        return balances[owner_];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified address\r\n     * @param to_ The address to transfer to.\r\n     * @param value_ The amount to be transferred.\r\n     */\r\n    function transfer(address to_, uint value_) public whenNotLocked returns (bool) {\r\n        require(to_ != address(0) && value_ <= balances[msg.sender]);\r\n        // SafeMath.sub will throw an exception if there is not enough balance\r\n        balances[msg.sender] = balances[msg.sender].sub(value_);\r\n        balances[to_] = balances[to_].add(value_);\r\n        Transfer(msg.sender, to_, value_);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param from_ address The address which you want to send tokens from\r\n     * @param to_ address The address which you want to transfer to\r\n     * @param value_ uint the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from_, address to_, uint value_) public whenNotLocked returns (bool) {\r\n        require(to_ != address(0) && value_ <= balances[from_] && value_ <= allowed[from_][msg.sender]);\r\n        balances[from_] = balances[from_].sub(value_);\r\n        balances[to_] = balances[to_].add(value_);\r\n        allowed[from_][msg.sender] = allowed[from_][msg.sender].sub(value_);\r\n        Transfer(from_, to_, value_);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering\r\n     *\r\n     * To change the approve amount you first have to reduce the addresses\r\n     * allowance to zero by calling `approve(spender_, 0)` if it is not\r\n     * already 0 to mitigate the race condition described in:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * @param spender_ The address which will spend the funds.\r\n     * @param value_ The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender_, uint value_) public whenNotLocked returns (bool) {\r\n        if (value_ != 0 && allowed[msg.sender][spender_] != 0) {\r\n            revert();\r\n        }\r\n        allowed[msg.sender][spender_] = value_;\r\n        Approval(msg.sender, spender_, value_);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender\r\n     * @param owner_ address The address which owns the funds\r\n     * @param spender_ address The address which will spend the funds\r\n     * @return A uint specifying the amount of tokens still available for the spender\r\n     */\r\n    function allowance(address owner_, address spender_) public view returns (uint) {\r\n        return allowed[owner_][spender_];\r\n    }\r\n}\r\n\r\n// File: contracts/base/BaseICOTokenWithBonus.sol\r\n\r\n/**\r\n * @dev Not mintable, ERC20 compliant token, distributed by ICO/Pre-ICO.\r\n */\r\ncontract BaseICOTokenWithBonus is BaseFixedERC20Token {\r\n\r\n    /// @dev Available supply of tokens\r\n    uint public availableSupply;\r\n\r\n    /// @dev ICO/Pre-ICO smart contract allowed to distribute public funds for this\r\n    address public ico;\r\n\r\n    /// @dev bonus tokens unlock date\r\n    uint public bonusUnlockAt;\r\n\r\n    /// @dev bonus balances\r\n    mapping(address => uint) public bonusBalances;\r\n\r\n    /// @dev Fired if investment for `amount` of tokens performed by `to` address\r\n    event ICOTokensInvested(address indexed to, uint amount);\r\n\r\n    /// @dev ICO contract changed for this token\r\n    event ICOChanged(address indexed icoContract);\r\n\r\n    modifier onlyICO() {\r\n        require(msg.sender == ico);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Not mintable, ERC20 compliant token, distributed by ICO/Pre-ICO.\r\n     * @param totalSupply_ Total tokens supply.\r\n     */\r\n    function BaseICOTokenWithBonus(uint totalSupply_) public {\r\n        locked = true;\r\n        totalSupply = totalSupply_;\r\n        availableSupply = totalSupply_;\r\n    }\r\n\r\n    /**\r\n     * @dev Set address of ICO smart-contract which controls token\r\n     * initial token distribution.\r\n     * @param ico_ ICO contract address.\r\n     */\r\n    function changeICO(address ico_) public onlyOwner {\r\n        ico = ico_;\r\n        ICOChanged(ico);\r\n    }\r\n\r\n    /**\r\n     * @dev Set date for unlock bonus tokens\r\n     * @param bonusUnlockAt_ seconds since epoch\r\n     */\r\n    function setBonusUnlockAt(uint bonusUnlockAt_) public onlyOwner {\r\n        require(bonusUnlockAt_ > block.timestamp);\r\n        bonusUnlockAt = bonusUnlockAt_;\r\n    }\r\n\r\n    function getBonusUnlockAt() public view returns (uint) {\r\n        return bonusUnlockAt;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of bonus tokens the specified address.\r\n     * @param owner_ The address to query the the balance of.\r\n     * @return An uint representing the amount owned by the passed address.\r\n     */\r\n    function bonusBalanceOf(address owner_) public view returns (uint) {\r\n        return bonusBalances[owner_];\r\n    }\r\n\r\n    /**\r\n     * @dev Assign `amount_` of tokens to investor identified by `to_` address.\r\n     * @param to_ Investor address.\r\n     * @param amount_ Number of tokens distributed.\r\n     */\r\n    function icoInvestment(address to_, uint amount_, uint bonusAmount_) public onlyICO returns (uint) {\r\n        require(isValidICOInvestment(to_, amount_));\r\n        availableSupply = availableSupply.sub(amount_);\r\n        balances[to_] = balances[to_].add(amount_);\r\n        bonusBalances[to_] = bonusBalances[to_].add(bonusAmount_);\r\n        ICOTokensInvested(to_, amount_);\r\n        return amount_;\r\n    }\r\n\r\n    function isValidICOInvestment(address to_, uint amount_) internal view returns (bool) {\r\n        return to_ != address(0) && amount_ <= availableSupply;\r\n    }\r\n\r\n    function getAllowedForTransferTokens(address from_) public view returns (uint) {\r\n        return (bonusUnlockAt >= block.timestamp) ? balances[from_].sub(bonusBalances[from_]) : balances[from_];\r\n    }\r\n\r\n    function transfer(address to_, uint value_) public whenNotLocked returns (bool) {\r\n        require(value_ <= getAllowedForTransferTokens(msg.sender));\r\n        return super.transfer(to_, value_);\r\n    }\r\n\r\n    function transferFrom(address from_, address to_, uint value_) public whenNotLocked returns (bool) {\r\n        require(value_ <= getAllowedForTransferTokens(from_));\r\n        return super.transferFrom(from_, to_, value_);\r\n    }\r\n}\r\n\r\n// File: contracts/BENEFITToken.sol\r\n\r\n/**\r\n * @title BENEFIT token contract.\r\n */\r\ncontract BENEFITToken is BaseICOTokenWithBonus {\r\n    using SafeMath for uint;\r\n\r\n    string public constant name = \"Dating with Benefits\";\r\n\r\n    string public constant symbol = \"BENEFIT\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint internal constant ONE_TOKEN = 1e18;\r\n\r\n    uint public constant RESERVED_RESERVE_UNLOCK_AT = 1546300800; // 1 January 2019 00:00:00 UTC\r\n    uint public constant RESERVED_COMPANY_UNLOCK_AT = 1561939200; // 1 July 2019 00:00:00 UTC\r\n\r\n    /// @dev Fired some tokens distributed to someone from staff,business\r\n    event ReservedTokensDistributed(address indexed to, uint8 group, uint amount);\r\n\r\n    event TokensBurned(uint amount);\r\n\r\n    function BENEFITToken(uint totalSupplyTokens_,\r\n                      uint companyTokens_,\r\n                      uint bountyTokens_,\r\n                      uint reserveTokens_,\r\n                      uint marketingTokens_) public BaseICOTokenWithBonus(totalSupplyTokens_ * ONE_TOKEN) {\r\n        require(availableSupply == totalSupply);\r\n        availableSupply = availableSupply\r\n            .sub(companyTokens_ * ONE_TOKEN)\r\n            .sub(bountyTokens_ * ONE_TOKEN)\r\n            .sub(reserveTokens_ * ONE_TOKEN)\r\n            .sub(marketingTokens_ * ONE_TOKEN);\r\n        reserved[RESERVED_COMPANY_GROUP] = companyTokens_ * ONE_TOKEN;\r\n        reserved[RESERVED_BOUNTY_GROUP] = bountyTokens_ * ONE_TOKEN;\r\n        reserved[RESERVED_RESERVE_GROUP] = reserveTokens_ * ONE_TOKEN;\r\n        reserved[RESERVED_MARKETING_GROUP] = marketingTokens_ * ONE_TOKEN;\r\n    }\r\n\r\n    // Disable direct payments\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n    function burnRemain() public onlyOwner {\r\n        require(availableSupply > 0);\r\n        uint burned = availableSupply;\r\n        totalSupply = totalSupply.sub(burned);\r\n        availableSupply = 0;\r\n\r\n        TokensBurned(burned);\r\n    }\r\n\r\n    // --------------- Reserve specific\r\n    uint8 public constant RESERVED_COMPANY_GROUP = 0x1;\r\n\r\n    uint8 public constant RESERVED_BOUNTY_GROUP = 0x2;\r\n\r\n    uint8 public constant RESERVED_RESERVE_GROUP = 0x4;\r\n\r\n    uint8 public constant RESERVED_MARKETING_GROUP = 0x8;\r\n\r\n    /// @dev Token reservation mapping: key(RESERVED_X) => value(number of tokens)\r\n    mapping(uint8 => uint) public reserved;\r\n\r\n    /**\r\n     * @dev Get reserved tokens for specific group\r\n     */\r\n    function getReservedTokens(uint8 group_) public view returns (uint) {\r\n        return reserved[group_];\r\n    }\r\n\r\n    /**\r\n     * @dev Assign `amount_` of privately distributed tokens\r\n     *      to someone identified with `to_` address.\r\n     * @param to_   Tokens owner\r\n     * @param group_ Group identifier of privately distributed tokens\r\n     * @param amount_ Number of tokens distributed with decimals part\r\n     */\r\n    function assignReserved(address to_, uint8 group_, uint amount_) public onlyOwner {\r\n        require(to_ != address(0) && (group_ & 0xF) != 0);\r\n        require(group_ != RESERVED_RESERVE_GROUP\r\n            || (group_ == RESERVED_RESERVE_GROUP && block.timestamp >= RESERVED_RESERVE_UNLOCK_AT));\r\n        require(group_ != RESERVED_COMPANY_GROUP\r\n            || (group_ == RESERVED_COMPANY_GROUP && block.timestamp >= RESERVED_COMPANY_UNLOCK_AT));\r\n        // SafeMath will check reserved[group_] >= amount\r\n        reserved[group_] = reserved[group_].sub(amount_);\r\n        balances[to_] = balances[to_].add(amount_);\r\n        ReservedTokensDistributed(to_, group_, amount_);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group_\",\"type\":\"uint8\"}],\"name\":\"getReservedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonusBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"group_\",\"type\":\"uint8\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"assignReserved\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"},{\"name\":\"bonusAmount_\",\"type\":\"uint256\"}],\"name\":\"icoInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"}],\"name\":\"getAllowedForTransferTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusUnlockAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVED_MARKETING_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVED_COMPANY_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVED_BOUNTY_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonusUnlockAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVED_COMPANY_UNLOCK_AT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"bonusBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ico_\",\"type\":\"address\"}],\"name\":\"changeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"reserved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVED_RESERVE_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnRemain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESERVED_RESERVE_UNLOCK_AT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bonusUnlockAt_\",\"type\":\"uint256\"}],\"name\":\"setBonusUnlockAt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"},{\"name\":\"spender_\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"totalSupplyTokens_\",\"type\":\"uint256\"},{\"name\":\"companyTokens_\",\"type\":\"uint256\"},{\"name\":\"bountyTokens_\",\"type\":\"uint256\"},{\"name\":\"reserveTokens_\",\"type\":\"uint256\"},{\"name\":\"marketingTokens_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReservedTokensDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ICOTokensInvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"icoContract\",\"type\":\"address\"}],\"name\":\"ICOChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BENEFITToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000023c346000000000000000000000000000000000000000000000000000000000007270e000000000000000000000000000000000000000000000000000000000001c9c3800000000000000000000000000000000000000000000000000000000001c9c3800000000000000000000000000000000000000000000000000000000003938700","Library":"","SwarmSource":"bzzr://5b54740bf3ab10ba1bfce035a8fd67ad9ed6244a0d5273257763b2486b7a6ba4"}]}