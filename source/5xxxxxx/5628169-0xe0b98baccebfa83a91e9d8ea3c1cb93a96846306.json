{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/* ==================================================================== */\r\n/* Copyright (c) 2018 The MagicAcademy Project.  All rights reserved.\r\n/* \r\n/* https://www.magicacademy.io One of the world's first idle strategy games of blockchain \r\n/* https://staging.bitguild.com/game/magicacademy \r\n/* authors rainy@livestar.com/fanny.zheng@livestar.com\r\n/*         rainy@gmail.com           \r\n/* ==================================================================== */\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /*\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract OperAccess is Ownable {\r\n  address tradeAddress;\r\n  address platAddress;\r\n  address attackAddress;\r\n  address raffleAddress;\r\n  address drawAddress;\r\n\r\n  function setTradeAddress(address _address) external onlyOwner {\r\n    require(_address != address(0));\r\n    tradeAddress = _address;\r\n  }\r\n\r\n  function setPLATAddress(address _address) external onlyOwner {\r\n    require(_address != address(0));\r\n    platAddress = _address;\r\n  }\r\n\r\n  function setAttackAddress(address _address) external onlyOwner {\r\n    require(_address != address(0));\r\n    attackAddress = _address;\r\n  }\r\n\r\n  function setRaffleAddress(address _address) external onlyOwner {\r\n    require(_address != address(0));\r\n    raffleAddress = _address;\r\n  }\r\n\r\n  function setDrawAddress(address _address) external onlyOwner {\r\n    require(_address != address(0));\r\n    drawAddress = _address;\r\n  }\r\n\r\n  modifier onlyAccess() {\r\n    require(msg.sender == tradeAddress || msg.sender == platAddress || msg.sender == attackAddress || msg.sender == raffleAddress || msg.sender == drawAddress);\r\n    _;\r\n  }\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n// Jade - Crypto MagicAcacedy Game\r\n// https://www.magicAcademy.io\r\n\r\ncontract JadeCoin is ERC20, OperAccess {\r\n  using SafeMath for SafeMath;\r\n  string public constant name  = \"MAGICACADEMY JADE\";\r\n  string public constant symbol = \"Jade\";\r\n  uint8 public constant decimals = 0;\r\n  uint256 public roughSupply;\r\n  uint256 public totalJadeProduction;\r\n\r\n  uint256[] public totalJadeProductionSnapshots; // The total goo production for each prior day past\r\n  uint256[] public allocatedJadeResearchSnapshots; // The research eth allocated to each prior day past\r\n\r\n  // Balances for each player\r\n  mapping(address => uint256) public jadeBalance;\r\n  mapping(address => mapping(uint8 => uint256)) public coinBalance;\r\n  mapping(uint256 => uint256) totalEtherPool; //Total Pool\r\n  \r\n  mapping(address => mapping(uint256 => uint256)) private jadeProductionSnapshots; // Store player's jade production for given day (snapshot)\r\n  mapping(address => mapping(uint256 => bool)) private jadeProductionZeroedSnapshots; // This isn't great but we need know difference between 0 production and an unused/inactive day.\r\n    \r\n  mapping(address => uint256) public lastJadeSaveTime; // Seconds (last time player claimed their produced jade)\r\n  mapping(address => uint256) public lastJadeProductionUpdate; // Days (last snapshot player updated their production)\r\n  mapping(address => uint256) private lastJadeResearchFundClaim; // Days (snapshot number)\r\n   \r\n  // Mapping of approved ERC20 transfers (by player)\r\n  mapping(address => mapping(address => uint256)) private allowed;\r\n     \r\n  // Constructor\r\n  function JadeCoin() public {\r\n  }\r\n\r\n  function totalSupply() public constant returns(uint256) {\r\n    return roughSupply; // Stored jade (rough supply as it ignores earned/unclaimed jade)\r\n  }\r\n  /// balance of jade in-game\r\n  function balanceOf(address player) public constant returns(uint256) {\r\n    return SafeMath.add(jadeBalance[player],balanceOfUnclaimed(player));\r\n  }\r\n  /// unclaimed jade\r\n  function balanceOfUnclaimed(address player) public constant returns (uint256) {\r\n    uint256 lSave = lastJadeSaveTime[player];\r\n    if (lSave > 0 && lSave < block.timestamp) { \r\n      return SafeMath.mul(getJadeProduction(player),SafeMath.div(SafeMath.sub(block.timestamp,lSave),60));\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /// production/s\r\n  function getJadeProduction(address player) public constant returns (uint256){\r\n    return jadeProductionSnapshots[player][lastJadeProductionUpdate[player]];\r\n  }\r\n\r\n  function getlastJadeProductionUpdate(address player) public view returns (uint256) {\r\n    return lastJadeProductionUpdate[player];\r\n  }\r\n    /// increase prodution \r\n  function increasePlayersJadeProduction(address player, uint256 increase) external onlyAccess {\r\n    jadeProductionSnapshots[player][allocatedJadeResearchSnapshots.length] = SafeMath.add(getJadeProduction(player),increase);\r\n    lastJadeProductionUpdate[player] = allocatedJadeResearchSnapshots.length;\r\n    totalJadeProduction = SafeMath.add(totalJadeProduction,increase);\r\n  }\r\n\r\n  /// reduce production\r\n  function reducePlayersJadeProduction(address player, uint256 decrease) external onlyAccess {\r\n    uint256 previousProduction = getJadeProduction(player);\r\n    uint256 newProduction = SafeMath.sub(previousProduction, decrease);\r\n\r\n    if (newProduction == 0) { \r\n      jadeProductionZeroedSnapshots[player][allocatedJadeResearchSnapshots.length] = true;\r\n      delete jadeProductionSnapshots[player][allocatedJadeResearchSnapshots.length]; // 0\r\n    } else {\r\n      jadeProductionSnapshots[player][allocatedJadeResearchSnapshots.length] = newProduction;\r\n    }   \r\n    lastJadeProductionUpdate[player] = allocatedJadeResearchSnapshots.length;\r\n    totalJadeProduction = SafeMath.sub(totalJadeProduction,decrease);\r\n  }\r\n\r\n  /// update player's jade balance\r\n  function updatePlayersCoin(address player) internal {\r\n    uint256 coinGain = balanceOfUnclaimed(player);\r\n    lastJadeSaveTime[player] = block.timestamp;\r\n    roughSupply = SafeMath.add(roughSupply,coinGain);  \r\n    jadeBalance[player] = SafeMath.add(jadeBalance[player],coinGain);  \r\n  }\r\n\r\n  /// update player's jade balance\r\n  function updatePlayersCoinByOut(address player) external onlyAccess {\r\n    uint256 coinGain = balanceOfUnclaimed(player);\r\n    lastJadeSaveTime[player] = block.timestamp;\r\n    roughSupply = SafeMath.add(roughSupply,coinGain);  \r\n    jadeBalance[player] = SafeMath.add(jadeBalance[player],coinGain);  \r\n  }\r\n  /// transfer\r\n  function transfer(address recipient, uint256 amount) public returns (bool) {\r\n    updatePlayersCoin(msg.sender);\r\n    require(amount <= jadeBalance[msg.sender]);\r\n    jadeBalance[msg.sender] = SafeMath.sub(jadeBalance[msg.sender],amount);\r\n    jadeBalance[recipient] = SafeMath.add(jadeBalance[recipient],amount);\r\n    Transfer(msg.sender, recipient, amount);\r\n    return true;\r\n  }\r\n  /// transferfrom\r\n  function transferFrom(address player, address recipient, uint256 amount) public returns (bool) {\r\n    updatePlayersCoin(player);\r\n    require(amount <= allowed[player][msg.sender] && amount <= jadeBalance[player]);\r\n        \r\n    jadeBalance[player] = SafeMath.sub(jadeBalance[player],amount); \r\n    jadeBalance[recipient] = SafeMath.add(jadeBalance[recipient],amount); \r\n    allowed[player][msg.sender] = SafeMath.sub(allowed[player][msg.sender],amount); \r\n        \r\n    Transfer(player, recipient, amount);  \r\n    return true;\r\n  }\r\n  \r\n  function approve(address approvee, uint256 amount) public returns (bool) {\r\n    allowed[msg.sender][approvee] = amount;  \r\n    Approval(msg.sender, approvee, amount);\r\n    return true;\r\n  }\r\n  \r\n  function allowance(address player, address approvee) public constant returns(uint256) {\r\n    return allowed[player][approvee];  \r\n  }\r\n  \r\n  /// update Jade via purchase\r\n  function updatePlayersCoinByPurchase(address player, uint256 purchaseCost) external onlyAccess {\r\n    uint256 unclaimedJade = balanceOfUnclaimed(player);\r\n        \r\n    if (purchaseCost > unclaimedJade) {\r\n      uint256 jadeDecrease = SafeMath.sub(purchaseCost, unclaimedJade);\r\n      require(jadeBalance[player] >= jadeDecrease);\r\n      roughSupply = SafeMath.sub(roughSupply,jadeDecrease);\r\n      jadeBalance[player] = SafeMath.sub(jadeBalance[player],jadeDecrease);\r\n    } else {\r\n      uint256 jadeGain = SafeMath.sub(unclaimedJade,purchaseCost);\r\n      roughSupply = SafeMath.add(roughSupply,jadeGain);\r\n      jadeBalance[player] = SafeMath.add(jadeBalance[player],jadeGain);\r\n    }\r\n        \r\n    lastJadeSaveTime[player] = block.timestamp;\r\n  }\r\n\r\n  function JadeCoinMining(address _addr, uint256 _amount) external onlyOwner {\r\n    roughSupply = SafeMath.add(roughSupply,_amount);\r\n    jadeBalance[_addr] = SafeMath.add(jadeBalance[_addr],_amount);\r\n  }\r\n\r\n  function setRoughSupply(uint256 iroughSupply) external onlyAccess {\r\n    roughSupply = SafeMath.add(roughSupply,iroughSupply);\r\n  }\r\n  /// balance of coin/eth  in-game\r\n  function coinBalanceOf(address player,uint8 itype) external constant returns(uint256) {\r\n    return coinBalance[player][itype];\r\n  }\r\n\r\n  function setJadeCoin(address player, uint256 coin, bool iflag) external onlyAccess {\r\n    if (iflag) {\r\n      jadeBalance[player] = SafeMath.add(jadeBalance[player],coin);\r\n    } else if (!iflag) {\r\n      jadeBalance[player] = SafeMath.sub(jadeBalance[player],coin);\r\n    }\r\n  }\r\n  \r\n  function setCoinBalance(address player, uint256 eth, uint8 itype, bool iflag) external onlyAccess {\r\n    if (iflag) {\r\n      coinBalance[player][itype] = SafeMath.add(coinBalance[player][itype],eth);\r\n    } else if (!iflag) {\r\n      coinBalance[player][itype] = SafeMath.sub(coinBalance[player][itype],eth);\r\n    }\r\n  }\r\n\r\n  function setLastJadeSaveTime(address player) external onlyAccess {\r\n    lastJadeSaveTime[player] = block.timestamp;\r\n  }\r\n\r\n  function setTotalEtherPool(uint256 inEth, uint8 itype, bool iflag) external onlyAccess {\r\n    if (iflag) {\r\n      totalEtherPool[itype] = SafeMath.add(totalEtherPool[itype],inEth);\r\n     } else if (!iflag) {\r\n      totalEtherPool[itype] = SafeMath.sub(totalEtherPool[itype],inEth);\r\n    }\r\n  }\r\n\r\n  function getTotalEtherPool(uint8 itype) external view returns (uint256) {\r\n    return totalEtherPool[itype];\r\n  }\r\n\r\n  function setJadeCoinZero(address player) external onlyAccess {\r\n    jadeBalance[player]=0;\r\n  }\r\n}\r\n\r\ninterface GameConfigInterface {\r\n  function productionCardIdRange() external constant returns (uint256, uint256);\r\n  function battleCardIdRange() external constant returns (uint256, uint256);\r\n  function upgradeIdRange() external constant returns (uint256, uint256);\r\n  function unitCoinProduction(uint256 cardId) external constant returns (uint256);\r\n  function unitAttack(uint256 cardId) external constant returns (uint256);\r\n  function unitDefense(uint256 cardId) external constant returns (uint256);\r\n  function unitStealingCapacity(uint256 cardId) external constant returns (uint256);\r\n}\r\n\r\n/// @notice define the players,cards,jadecoin\r\n/// @author rainysiu rainy@livestar.com\r\n/// @dev MagicAcademy Games \r\n\r\ncontract CardsBase is JadeCoin {\r\n\r\n  // player  \r\n  struct Player {\r\n    address owneraddress;\r\n  }\r\n\r\n  Player[] players;\r\n  bool gameStarted;\r\n  \r\n  GameConfigInterface public schema;\r\n\r\n  // Stuff owned by each player\r\n  mapping(address => mapping(uint256 => uint256)) public unitsOwned;  //number of normal card\r\n  mapping(address => mapping(uint256 => uint256)) public upgradesOwned;  //Lv of upgrade card\r\n\r\n  mapping(address => uint256) public uintsOwnerCount; // total number of cards\r\n  mapping(address=> mapping(uint256 => uint256)) public uintProduction;  //card's production\r\n\r\n  // Rares & Upgrades (Increase unit's production / attack etc.)\r\n  mapping(address => mapping(uint256 => uint256)) public unitCoinProductionIncreases; // Adds to the coin per second\r\n  mapping(address => mapping(uint256 => uint256)) public unitCoinProductionMultiplier; // Multiplies the coin per second\r\n  mapping(address => mapping(uint256 => uint256)) public unitAttackIncreases;\r\n  mapping(address => mapping(uint256 => uint256)) public unitAttackMultiplier;\r\n  mapping(address => mapping(uint256 => uint256)) public unitDefenseIncreases;\r\n  mapping(address => mapping(uint256 => uint256)) public unitDefenseMultiplier;\r\n  mapping(address => mapping(uint256 => uint256)) public unitJadeStealingIncreases;\r\n  mapping(address => mapping(uint256 => uint256)) public unitJadeStealingMultiplier;\r\n\r\n  //setting configuration\r\n  function setConfigAddress(address _address) external onlyOwner {\r\n    schema = GameConfigInterface(_address);\r\n  }\r\n\r\n  /// start game\r\n  function beginGame() external onlyOwner {\r\n    require(!gameStarted);\r\n    gameStarted = true; \r\n  }\r\n  function getGameStarted() external constant returns (bool) {\r\n    return gameStarted;\r\n  }\r\n  function AddPlayers(address _address) external onlyAccess { \r\n    Player memory _player= Player({\r\n      owneraddress: _address\r\n    });\r\n    players.push(_player);\r\n  }\r\n\r\n  /// @notice ranking of production\r\n  function getRanking() external view returns (address[], uint256[]) {\r\n    uint256 len = players.length;\r\n    uint256[] memory arr = new uint256[](len);\r\n    address[] memory arr_addr = new address[](len);\r\n\r\n    uint counter =0;\r\n    for (uint k=0;k<len; k++){\r\n      arr[counter] =  getJadeProduction(players[k].owneraddress);\r\n      arr_addr[counter] = players[k].owneraddress;\r\n      counter++;\r\n    }\r\n\r\n    for(uint i=0;i<len-1;i++) {\r\n      for(uint j=0;j<len-i-1;j++) {\r\n        if(arr[j]<arr[j+1]) {\r\n          uint256 temp = arr[j];\r\n          address temp_addr = arr_addr[j];\r\n          arr[j] = arr[j+1];\r\n          arr[j+1] = temp;\r\n          arr_addr[j] = arr_addr[j+1];\r\n          arr_addr[j+1] = temp_addr;\r\n        }\r\n      }\r\n    }\r\n    return (arr_addr,arr);\r\n  }\r\n\r\n  /// @notice battle power ranking\r\n  function getAttackRanking() external view returns (address[], uint256[]) {\r\n    uint256 len = players.length;\r\n    uint256[] memory arr = new uint256[](len);\r\n    address[] memory arr_addr = new address[](len);\r\n\r\n    uint counter =0;\r\n    for (uint k=0;k<len; k++){\r\n      (,,,arr[counter]) = getPlayersBattleStats(players[k].owneraddress);\r\n      arr_addr[counter] = players[k].owneraddress;\r\n      counter++;\r\n    }\r\n\r\n    for(uint i=0;i<len-1;i++) {\r\n      for(uint j=0;j<len-i-1;j++) {\r\n        if(arr[j]<arr[j+1]) {\r\n          uint256 temp = arr[j];\r\n          address temp_addr = arr_addr[j];\r\n          arr[j] = arr[j+1];\r\n          arr[j+1] = temp;\r\n          arr_addr[j] = arr_addr[j+1];\r\n          arr_addr[j+1] = temp_addr;\r\n        }\r\n      }\r\n    }\r\n    return(arr_addr,arr);\r\n  } \r\n\r\n  //total users\r\n  function getTotalUsers()  external view returns (uint256) {\r\n    return players.length;\r\n  }\r\n \r\n  /// UnitsProuction\r\n  function getUnitsProduction(address player, uint256 unitId, uint256 amount) external constant returns (uint256) {\r\n    return (amount * (schema.unitCoinProduction(unitId) + unitCoinProductionIncreases[player][unitId]) * (10 + unitCoinProductionMultiplier[player][unitId])) / 10; \r\n  } \r\n\r\n  /// one card's production\r\n  function getUnitsInProduction(address player, uint256 unitId, uint256 amount) external constant returns (uint256) {\r\n    return SafeMath.div(SafeMath.mul(amount,uintProduction[player][unitId]),unitsOwned[player][unitId]);\r\n  } \r\n\r\n  /// UnitsAttack\r\n  function getUnitsAttack(address player, uint256 unitId, uint256 amount) internal constant returns (uint256) {\r\n    return (amount * (schema.unitAttack(unitId) + unitAttackIncreases[player][unitId]) * (10 + unitAttackMultiplier[player][unitId])) / 10;\r\n  }\r\n  /// UnitsDefense\r\n  function getUnitsDefense(address player, uint256 unitId, uint256 amount) internal constant returns (uint256) {\r\n    return (amount * (schema.unitDefense(unitId) + unitDefenseIncreases[player][unitId]) * (10 + unitDefenseMultiplier[player][unitId])) / 10;\r\n  }\r\n  /// UnitsStealingCapacity\r\n  function getUnitsStealingCapacity(address player, uint256 unitId, uint256 amount) internal constant returns (uint256) {\r\n    return (amount * (schema.unitStealingCapacity(unitId) + unitJadeStealingIncreases[player][unitId]) * (10 + unitJadeStealingMultiplier[player][unitId])) / 10;\r\n  }\r\n \r\n  // player's attacking & defending & stealing & battle power\r\n  function getPlayersBattleStats(address player) public constant returns (\r\n    uint256 attackingPower, \r\n    uint256 defendingPower, \r\n    uint256 stealingPower,\r\n    uint256 battlePower) {\r\n\r\n    uint256 startId;\r\n    uint256 endId;\r\n    (startId, endId) = schema.battleCardIdRange();\r\n\r\n    // Not ideal but will only be a small number of units (and saves gas when buying units)\r\n    while (startId <= endId) {\r\n      attackingPower = SafeMath.add(attackingPower,getUnitsAttack(player, startId, unitsOwned[player][startId]));\r\n      stealingPower = SafeMath.add(stealingPower,getUnitsStealingCapacity(player, startId, unitsOwned[player][startId]));\r\n      defendingPower = SafeMath.add(defendingPower,getUnitsDefense(player, startId, unitsOwned[player][startId]));\r\n      battlePower = SafeMath.add(attackingPower,defendingPower); \r\n      startId++;\r\n    }\r\n  }\r\n\r\n  // @nitice number of normal card\r\n  function getOwnedCount(address player, uint256 cardId) external view returns (uint256) {\r\n    return unitsOwned[player][cardId];\r\n  }\r\n  function setOwnedCount(address player, uint256 cardId, uint256 amount, bool iflag) external onlyAccess {\r\n    if (iflag) {\r\n      unitsOwned[player][cardId] = SafeMath.add(unitsOwned[player][cardId],amount);\r\n     } else if (!iflag) {\r\n      unitsOwned[player][cardId] = SafeMath.sub(unitsOwned[player][cardId],amount);\r\n    }\r\n  }\r\n\r\n  // @notice Lv of upgrade card\r\n  function getUpgradesOwned(address player, uint256 upgradeId) external view returns (uint256) {\r\n    return upgradesOwned[player][upgradeId];\r\n  }\r\n  //set upgrade\r\n  function setUpgradesOwned(address player, uint256 upgradeId) external onlyAccess {\r\n    upgradesOwned[player][upgradeId] = SafeMath.add(upgradesOwned[player][upgradeId],1);\r\n  }\r\n\r\n  function getUintsOwnerCount(address _address) external view returns (uint256) {\r\n    return uintsOwnerCount[_address];\r\n  }\r\n  function setUintsOwnerCount(address _address, uint256 amount, bool iflag) external onlyAccess {\r\n    if (iflag) {\r\n      uintsOwnerCount[_address] = SafeMath.add(uintsOwnerCount[_address],amount);\r\n    } else if (!iflag) {\r\n      uintsOwnerCount[_address] = SafeMath.sub(uintsOwnerCount[_address],amount);\r\n    }\r\n  }\r\n\r\n  function getUnitCoinProductionIncreases(address _address, uint256 cardId) external view returns (uint256) {\r\n    return unitCoinProductionIncreases[_address][cardId];\r\n  }\r\n\r\n  function setUnitCoinProductionIncreases(address _address, uint256 cardId, uint256 iValue,bool iflag) external onlyAccess {\r\n    if (iflag) {\r\n      unitCoinProductionIncreases[_address][cardId] = SafeMath.add(unitCoinProductionIncreases[_address][cardId],iValue);\r\n    } else if (!iflag) {\r\n      unitCoinProductionIncreases[_address][cardId] = SafeMath.sub(unitCoinProductionIncreases[_address][cardId],iValue);\r\n    }\r\n  }\r\n\r\n  function getUnitCoinProductionMultiplier(address _address, uint256 cardId) external view returns (uint256) {\r\n    return unitCoinProductionMultiplier[_address][cardId];\r\n  }\r\n\r\n  function setUnitCoinProductionMultiplier(address _address, uint256 cardId, uint256 iValue, bool iflag) external onlyAccess {\r\n    if (iflag) {\r\n      unitCoinProductionMultiplier[_address][cardId] = SafeMath.add(unitCoinProductionMultiplier[_address][cardId],iValue);\r\n    } else if (!iflag) {\r\n      unitCoinProductionMultiplier[_address][cardId] = SafeMath.sub(unitCoinProductionMultiplier[_address][cardId],iValue);\r\n    }\r\n  }\r\n\r\n  function setUnitAttackIncreases(address _address, uint256 cardId, uint256 iValue,bool iflag) external onlyAccess {\r\n    if (iflag) {\r\n      unitAttackIncreases[_address][cardId] = SafeMath.add(unitAttackIncreases[_address][cardId],iValue);\r\n    } else if (!iflag) {\r\n      unitAttackIncreases[_address][cardId] = SafeMath.sub(unitAttackIncreases[_address][cardId],iValue);\r\n    }\r\n  }\r\n\r\n  function getUnitAttackIncreases(address _address, uint256 cardId) external view returns (uint256) {\r\n    return unitAttackIncreases[_address][cardId];\r\n  } \r\n  function setUnitAttackMultiplier(address _address, uint256 cardId, uint256 iValue,bool iflag) external onlyAccess {\r\n    if (iflag) {\r\n      unitAttackMultiplier[_address][cardId] = SafeMath.add(unitAttackMultiplier[_address][cardId],iValue);\r\n    } else if (!iflag) {\r\n      unitAttackMultiplier[_address][cardId] = SafeMath.sub(unitAttackMultiplier[_address][cardId],iValue);\r\n    }\r\n  }\r\n  function getUnitAttackMultiplier(address _address, uint256 cardId) external view returns (uint256) {\r\n    return unitAttackMultiplier[_address][cardId];\r\n  } \r\n\r\n  function setUnitDefenseIncreases(address _address, uint256 cardId, uint256 iValue,bool iflag) external onlyAccess {\r\n    if (iflag) {\r\n      unitDefenseIncreases[_address][cardId] = SafeMath.add(unitDefenseIncreases[_address][cardId],iValue);\r\n    } else if (!iflag) {\r\n      unitDefenseIncreases[_address][cardId] = SafeMath.sub(unitDefenseIncreases[_address][cardId],iValue);\r\n    }\r\n  }\r\n  function getUnitDefenseIncreases(address _address, uint256 cardId) external view returns (uint256) {\r\n    return unitDefenseIncreases[_address][cardId];\r\n  }\r\n  function setunitDefenseMultiplier(address _address, uint256 cardId, uint256 iValue,bool iflag) external onlyAccess {\r\n    if (iflag) {\r\n      unitDefenseMultiplier[_address][cardId] = SafeMath.add(unitDefenseMultiplier[_address][cardId],iValue);\r\n    } else if (!iflag) {\r\n      unitDefenseMultiplier[_address][cardId] = SafeMath.sub(unitDefenseMultiplier[_address][cardId],iValue);\r\n    }\r\n  }\r\n  function getUnitDefenseMultiplier(address _address, uint256 cardId) external view returns (uint256) {\r\n    return unitDefenseMultiplier[_address][cardId];\r\n  }\r\n  function setUnitJadeStealingIncreases(address _address, uint256 cardId, uint256 iValue,bool iflag) external onlyAccess {\r\n    if (iflag) {\r\n      unitJadeStealingIncreases[_address][cardId] = SafeMath.add(unitJadeStealingIncreases[_address][cardId],iValue);\r\n    } else if (!iflag) {\r\n      unitJadeStealingIncreases[_address][cardId] = SafeMath.sub(unitJadeStealingIncreases[_address][cardId],iValue);\r\n    }\r\n  }\r\n  function getUnitJadeStealingIncreases(address _address, uint256 cardId) external view returns (uint256) {\r\n    return unitJadeStealingIncreases[_address][cardId];\r\n  } \r\n\r\n  function setUnitJadeStealingMultiplier(address _address, uint256 cardId, uint256 iValue,bool iflag) external onlyAccess {\r\n    if (iflag) {\r\n      unitJadeStealingMultiplier[_address][cardId] = SafeMath.add(unitJadeStealingMultiplier[_address][cardId],iValue);\r\n    } else if (!iflag) {\r\n      unitJadeStealingMultiplier[_address][cardId] = SafeMath.sub(unitJadeStealingMultiplier[_address][cardId],iValue);\r\n    }\r\n  }\r\n  function getUnitJadeStealingMultiplier(address _address, uint256 cardId) external view returns (uint256) {\r\n    return unitJadeStealingMultiplier[_address][cardId];\r\n  } \r\n\r\n  function setUintCoinProduction(address _address, uint256 cardId, uint256 iValue, bool iflag) external onlyAccess {\r\n    if (iflag) {\r\n      uintProduction[_address][cardId] = SafeMath.add(uintProduction[_address][cardId],iValue);\r\n     } else if (!iflag) {\r\n      uintProduction[_address][cardId] = SafeMath.sub(uintProduction[_address][cardId],iValue);\r\n    }\r\n  }\r\n\r\n  function getUintCoinProduction(address _address, uint256 cardId) external view returns (uint256) {\r\n    return uintProduction[_address][cardId];\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unitCoinProductionIncreases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"upgradesOwned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"approvee\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"iValue\",\"type\":\"uint256\"},{\"name\":\"iflag\",\"type\":\"bool\"}],\"name\":\"setUnitJadeStealingIncreases\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unitAttackMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRanking\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getlastJadeProductionUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"setLastJadeSaveTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"getOwnedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTradeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAttackAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"getUnitJadeStealingMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unitCoinProductionMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"upgradeId\",\"type\":\"uint256\"}],\"name\":\"setUpgradesOwned\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"unitId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getUnitsProduction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inEth\",\"type\":\"uint256\"},{\"name\":\"itype\",\"type\":\"uint8\"},{\"name\":\"iflag\",\"type\":\"bool\"}],\"name\":\"setTotalEtherPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"getUnitAttackIncreases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"decrease\",\"type\":\"uint256\"}],\"name\":\"reducePlayersJadeProduction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getJadeProduction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"iroughSupply\",\"type\":\"uint256\"}],\"name\":\"setRoughSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"balanceOfUnclaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"iValue\",\"type\":\"uint256\"},{\"name\":\"iflag\",\"type\":\"bool\"}],\"name\":\"setUnitJadeStealingMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"iValue\",\"type\":\"uint256\"},{\"name\":\"iflag\",\"type\":\"bool\"}],\"name\":\"setUnitCoinProductionIncreases\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastJadeProductionUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"getUnitDefenseIncreases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"itype\",\"type\":\"uint8\"},{\"name\":\"iflag\",\"type\":\"bool\"}],\"name\":\"setCoinBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAttackRanking\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"uintsOwnerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"jadeBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unitDefenseMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unitJadeStealingIncreases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unitAttackIncreases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"getUnitDefenseMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastJadeSaveTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"increase\",\"type\":\"uint256\"}],\"name\":\"increasePlayersJadeProduction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"iValue\",\"type\":\"uint256\"},{\"name\":\"iflag\",\"type\":\"bool\"}],\"name\":\"setUnitAttackIncreases\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayersBattleStats\",\"outputs\":[{\"name\":\"attackingPower\",\"type\":\"uint256\"},{\"name\":\"defendingPower\",\"type\":\"uint256\"},{\"name\":\"stealingPower\",\"type\":\"uint256\"},{\"name\":\"battlePower\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalJadeProduction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setConfigAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"iValue\",\"type\":\"uint256\"},{\"name\":\"iflag\",\"type\":\"bool\"}],\"name\":\"setUnitAttackMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"getUnitJadeStealingIncreases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalJadeProductionSnapshots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"itype\",\"type\":\"uint8\"}],\"name\":\"getTotalEtherPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roughSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"iValue\",\"type\":\"uint256\"},{\"name\":\"iflag\",\"type\":\"bool\"}],\"name\":\"setUnitCoinProductionMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRaffleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"unitId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getUnitsInProduction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"coinBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"purchaseCost\",\"type\":\"uint256\"}],\"name\":\"updatePlayersCoinByPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUintsOwnerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"coin\",\"type\":\"uint256\"},{\"name\":\"iflag\",\"type\":\"bool\"}],\"name\":\"setJadeCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDrawAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"getUnitAttackMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unitJadeStealingMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"JadeCoinMining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"getUnitCoinProductionMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"setJadeCoinZero\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uintProduction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unitsOwned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"iValue\",\"type\":\"uint256\"},{\"name\":\"iflag\",\"type\":\"bool\"}],\"name\":\"setUintCoinProduction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"getUnitCoinProductionIncreases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"beginGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPLATAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"approvee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"iValue\",\"type\":\"uint256\"},{\"name\":\"iflag\",\"type\":\"bool\"}],\"name\":\"setunitDefenseMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unitDefenseIncreases\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allocatedJadeResearchSnapshots\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"}],\"name\":\"getUintCoinProduction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"updatePlayersCoinByOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"iflag\",\"type\":\"bool\"}],\"name\":\"setOwnedCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"itype\",\"type\":\"uint8\"}],\"name\":\"coinBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"upgradeId\",\"type\":\"uint256\"}],\"name\":\"getUpgradesOwned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"cardId\",\"type\":\"uint256\"},{\"name\":\"iValue\",\"type\":\"uint256\"},{\"name\":\"iflag\",\"type\":\"bool\"}],\"name\":\"setUnitDefenseIncreases\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddPlayers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"schema\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"iflag\",\"type\":\"bool\"}],\"name\":\"setUintsOwnerCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CardsBase","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d7ede13b3223720a545976600bf76931bd62e79bb352ec3abfef8b2c7dbd81a3"}]}