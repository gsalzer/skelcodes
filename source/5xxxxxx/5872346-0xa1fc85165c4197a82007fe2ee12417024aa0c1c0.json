{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract LavaWalletInterface {\r\n\r\n  function depositTokens(address from, address token, uint256 tokens ) public returns (bool success);\r\n  function withdrawTokens(address token, uint256 tokens) public returns (bool success);\r\n  function withdrawTokensFrom( address from, address to,address token,  uint tokens) public returns (bool success);\r\n  function balanceOf(address token,address user) public constant returns (uint);\r\n  function approveTokens(address spender, address token, uint tokens) public returns (bool success);\r\n  function transferTokens(address to, address token, uint tokens) public returns (bool success);\r\n  function transferTokensFrom( address from, address to,address token,  uint tokens) public returns (bool success);\r\n  function getLavaTypedDataHash(bytes methodname, address from, address to, address token, uint256 tokens, uint256 relayerReward,\r\n                                    uint256 expires, uint256 nonce) public constant returns (bytes32);\r\n  function approveTokensWithSignature(address from, address to, address token, uint256 tokens, uint256 relayerReward,\r\n                                    uint256 expires, uint256 nonce, bytes signature) public returns (bool success);\r\n  function transferTokensFromWithSignature(address from, address to,  address token, uint256 tokens,  uint256 relayerReward,\r\n                                    uint256 expires, uint256 nonce, bytes signature) public returns (bool success);\r\n  function withdrawTokensFromWithSignature(address from, address to,  address token, uint256 tokens,  uint256 relayerReward,\r\n                                    uint256 expires, uint256 nonce, bytes signature) public returns (bool success);\r\n  function tokenAllowance(address token, address tokenOwner, address spender) public constant returns (uint remaining);\r\n  function burnSignature(bytes methodname, address from, address to, address token, uint256 tokens, uint256 relayerReward,\r\n                                    uint256 expires, uint256 nonce,  bytes signature) public returns (bool success);\r\n  function signatureBurnStatus(bytes32 digest) public view returns (uint);\r\n  function approveAndCall(bytes methodname, address from, address to, address token, uint256 tokens, uint256 relayerReward,\r\n                                    uint256 expires, uint256 nonce, bytes signature ) public returns (bool success);\r\n\r\n  event Deposit(address token, address user, uint amount, uint balance);\r\n  event Withdraw(address token, address user, uint amount, uint balance);\r\n  event Transfer(address indexed from, address indexed to,address token, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender,address token, uint tokens);\r\n\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n\r\n}\r\n\r\n\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n\r\n    address public newOwner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n\r\n    function Owned() public {\r\n\r\n        owner = msg.sender;\r\n\r\n    }\r\n\r\n\r\n    modifier onlyOwner {\r\n\r\n        require(msg.sender == owner);\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n\r\n        newOwner = _newOwner;\r\n\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n\r\n        require(msg.sender == newOwner);\r\n\r\n        OwnershipTransferred(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n\r\n        newOwner = address(0);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract LavaDeposit is Owned {\r\n\r\n\r\n  using SafeMath for uint;\r\n\r\n  // balances[tokenContractAddress][EthereumAccountAddress] = 0\r\n   mapping(address => mapping (address => uint256)) balances;\r\n\r\n\r\n   address public walletContract;\r\n\r\n  event Deposit(address token, address from, address to, uint amount);\r\n\r\n  function LavaDeposit(address wContract) public  {\r\n    walletContract = wContract;\r\n  }\r\n\r\n\r\n  //do not allow ether to enter\r\n  function() public payable {\r\n      revert();\r\n  }\r\n\r\n\r\n   //Remember you need pre-approval for this - nice with ApproveAndCall\r\n  function depositTokensForAccount(address from, address to, address token, uint256 tokens ) public returns (bool success)\r\n  {\r\n      //we already have approval so lets do a transferFrom - transfer the tokens into this contract\r\n\r\n       if(!ERC20Interface(token).transferFrom(from, this, tokens)) revert();\r\n\r\n      //now deposit the tokens into lavawallet and they are still assigned to this contract\r\n       if(!ERC20Interface(token).approve(walletContract, tokens)) revert();\r\n\r\n       if(!LavaWalletInterface(walletContract).depositTokens(this, token, tokens)) revert();\r\n\r\n      //transfer the tokens into the lava balance of the 'to' account\r\n       if(!LavaWalletInterface(walletContract).transferTokens(to, token, tokens)) revert();\r\n\r\n       Deposit(token, from, to, tokens);\r\n\r\n      return true;\r\n  }\r\n\r\n       /*\r\n         Receive approval to spend tokens and perform any action all in one transaction\r\n       */\r\n     function receiveApproval(address from, uint256 tokens, address token, bytes data) public returns (bool success) {\r\n\r\n       require(data.length == 20);\r\n\r\n       //find the address from the data\r\n       address to = bytesToAddr(data);\r\n\r\n       return depositTokensForAccount(from, to, token, tokens );\r\n\r\n     }\r\n\r\n     function bytesToAddr (bytes b) constant returns (address) {\r\n      uint result = 0;\r\n      for (uint i = b.length-1; i+1 > 0; i--) {\r\n        uint c = uint(b[i]);\r\n        uint to_inc = c * ( 16 ** ((b.length - i-1) * 2));\r\n        result += to_inc;\r\n      }\r\n      return address(result);\r\n    }\r\n\r\n\r\n // ------------------------------------------------------------------------\r\n\r\n // Owner can transfer out any accidentally sent ERC20 tokens \r\n\r\n // ------------------------------------------------------------------------\r\n\r\n function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n\r\n    //find actual balance of the contract\r\n     uint tokenBalance = ERC20Interface(tokenAddress).balanceOf(this);\r\n\r\n\r\n     if(!ERC20Interface(tokenAddress).transfer(owner, tokens)) revert();\r\n\r\n\r\n     return true;\r\n\r\n }\r\n\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"b\",\"type\":\"bytes\"}],\"name\":\"bytesToAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"depositTokensForAccount\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LavaDeposit","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f226b12c03514571c5a473b2627f5528da46d263","Library":"","SwarmSource":"bzzr://00f08b8e7ae9c19fbeaf44208bf06e55fe00fc74dd648fd5cb41c837f72542aa"}]}