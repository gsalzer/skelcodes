{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n \r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n \r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n \r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n \r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address internal owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n  \r\n}\r\n \r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n \r\ncontract MintableToken is StandardToken, Ownable {\r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  event MintStarted();\r\n \r\n  bool public mintingFinished = false;\r\n \r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n \r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n \r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * @dev Function to start minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function startMinting() public onlyOwner returns (bool) {\r\n    mintingFinished = false;\r\n    emit MintStarted();\r\n    return true;\r\n  }\r\n  \r\n}\r\n\r\ncontract KassotBasicToken is MintableToken {\r\n    \r\n  string public constant name = \"Kassot Token\";  \r\n  string public constant symbol = \"KATOK\";  \r\n  uint8 public constant decimals = 18;\r\n  \r\n  uint public constant decimalMultiply = 1000000000000000000;  \r\n  \r\n}\r\n \r\n/*\r\n * @title KassotToken\r\n * @dev Kassot token crowdsale contract\r\n * @dev Author: Alexander Kazorin <akazorin@gmail.com>\r\n */ \r\ncontract KassotToken is ERC20, Ownable {\r\n  \r\n  using SafeMath for uint;\r\n  \r\n  bool public saleFinished = false;\r\n  address internal multisig;\r\n  address internal restricted;\r\n  uint public restrictedPercent;\r\n  uint public hardcap;\r\n  uint public softcap;\r\n  uint public firstBonusPercent;\r\n  uint public secondBonusPercent;\r\n  uint public thirdBonusPercent;\r\n  uint public rate;                       // Price (%rate% KST = 1 ETH)\r\n  uint public currentRound;\r\n  bool public allowRefund = false;        // Set to true if under softcap\r\n  KassotBasicToken internal token = new KassotBasicToken();\r\n  mapping (uint => mapping (address => uint)) public balances;\r\n  mapping(uint => uint) internal bonuses;\r\n  mapping(uint => uint) internal amounts;\r\n\r\n  constructor(address _multisig, address _restricted) public {\r\n    multisig = _multisig;\r\n    restricted = _restricted;\r\n    \r\n    // Settings for first round\r\n    restrictedPercent = 10;\r\n    hardcap = 900 * 1 ether;\r\n    softcap = 30 * 1 ether;\r\n    rate = 112600 * token.decimalMultiply();\r\n    currentRound = 1;\r\n    firstBonusPercent = 50;\r\n    secondBonusPercent = 25;\r\n    thirdBonusPercent = 10;\r\n  }\r\n\r\n  modifier saleIsOn() {\r\n    require(!saleFinished);\r\n    _;\r\n  }\r\n\r\n  modifier isUnderHardCap() {\r\n    require(address(this).balance <= hardcap);\r\n    _;\r\n  }\r\n  \r\n  // ERC20 Inteface methods\r\n  function name() public view returns (string) {\r\n    return token.name();\r\n  }\r\n  \r\n  function symbol() public view returns (string) {\r\n    return token.symbol();\r\n  }\r\n  \r\n  function decimals() public view returns (uint8) {\r\n    return token.decimals();\r\n  }\r\n  \r\n  function totalSupply() public view returns (uint256) {\r\n    return token.totalSupply();\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    return token.transfer(_to, _value);\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return token.balanceOf(_owner);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    return token.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    return token.approve(_spender, _value);\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return token.allowance(_owner, _spender);\r\n  }\r\n  // End of ERC20 Inteface methods\r\n\r\n  function setMultisig(address _multisig) public onlyOwner returns (bool) {\r\n    multisig = _multisig;\r\n    return true;\r\n  }\r\n  \r\n  function setRestricted(address _restricted) public onlyOwner returns (bool) {\r\n    restricted = _restricted;\r\n    return true;\r\n  }\r\n  \r\n  function setRestrictedPercent(uint _restrictedPercent) public onlyOwner returns (bool) {\r\n    restrictedPercent = _restrictedPercent;\r\n    return true;\r\n  }\r\n  \r\n  function setHardcap(uint _hardcap) public onlyOwner returns (bool) {\r\n    hardcap = _hardcap;\r\n    return true;\r\n  }\r\n  \r\n  function setSoftcap(uint _softcap) public onlyOwner returns (bool) {\r\n    softcap = _softcap;\r\n    return true;\r\n  }\r\n  \r\n  function setRate(uint _rate) public onlyOwner returns (bool) {\r\n    rate = _rate;\r\n    return true;\r\n  }\r\n  \r\n  function setCurrentRound(uint _currentRound) public onlyOwner returns (bool) {\r\n    currentRound = _currentRound;\r\n    return true;\r\n  }\r\n  \r\n  function setFirstBonusPercent(uint _firstBonusPercent) public onlyOwner returns (bool) {\r\n    firstBonusPercent = _firstBonusPercent;\r\n    return true;\r\n  }\r\n  \r\n  function setSecondBonusPercent(uint _secondBonusPercent) public onlyOwner returns (bool) {\r\n    secondBonusPercent = _secondBonusPercent;\r\n    return true;\r\n  }\r\n  \r\n  function setThirdBonusPercent(uint _thirdBonusPercent) public onlyOwner returns (bool) {\r\n    thirdBonusPercent = _thirdBonusPercent;\r\n    return true;\r\n  }\r\n  \r\n  function getMultisig() public view onlyOwner returns (address) {\r\n    // only owner can show address for safety reasons\r\n    return multisig;\r\n  }\r\n  \r\n  function getRestricted() public view onlyOwner returns (address) {\r\n    // only owner can show address for safety reasons\r\n    return restricted;\r\n  }\r\n\r\n  function refund() public {\r\n    require(allowRefund);\r\n    uint value = balances[currentRound][msg.sender]; \r\n    balances[currentRound][msg.sender] = 0; \r\n    msg.sender.transfer(value); \r\n  }\r\n\r\n  function finishSale() public onlyOwner {\r\n    if (address(this).balance > softcap) {\r\n      multisig.transfer(address(this).balance);\r\n      uint issuedTokenSupply = token.totalSupply();\r\n      uint restrictedTokens = issuedTokenSupply.mul(restrictedPercent).div(100);\r\n      token.mint(restricted, restrictedTokens);\r\n    } else {\r\n      allowRefund = true;\r\n    }\r\n    token.finishMinting();\r\n    saleFinished = true;\r\n  }\r\n  \r\n  function startSale() public onlyOwner {\r\n    token.startMinting();\r\n    allowRefund = false;\r\n    saleFinished = false;\r\n  }\r\n\r\n  function calculateTokens(uint _amount, uint _stage, uint _stageAmount) public returns (uint) {\r\n    bonuses[1] = firstBonusPercent;\r\n    bonuses[2] = secondBonusPercent;\r\n    bonuses[3] = thirdBonusPercent;\r\n    bonuses[4] = 0;\r\n    \r\n    amounts[1] = 0;\r\n    amounts[2] = 0;\r\n    amounts[3] = 0;\r\n    amounts[4] = 0;\r\n    \r\n    int amount = int(_amount);\r\n    \r\n    uint i = _stage;\r\n    while (amount > 0) {\r\n      if (i > 3) {\r\n        amounts[i] = uint(amount);\r\n        break;\r\n      }\r\n      if (amount - int(_stageAmount) > 0) {\r\n        amounts[i] = _stageAmount;\r\n        amount -= int(_stageAmount);\r\n        i++;\r\n      } else {\r\n        amounts[i] = uint(amount);\r\n        break;\r\n      }\r\n    }\r\n    \r\n    uint tokens = 0;\r\n    uint bonusTokens = 0;\r\n    uint _tokens = 0;\r\n    for (i = _stage; i <= 4; i++) {\r\n      if (amounts[i] == 0) {\r\n        break;\r\n      }\r\n      _tokens = rate.mul(amounts[i]).div(1 ether);\r\n      bonusTokens = _tokens * bonuses[i] / 100;\r\n      tokens += _tokens + bonusTokens;\r\n    }\r\n    \r\n    return tokens;\r\n  }\r\n  \r\n  function createTokens() public isUnderHardCap saleIsOn payable {\r\n    uint amount = msg.value;\r\n    uint tokens = 0;    \r\n    uint stageAmount = hardcap.div(4);\r\n    \r\n    if (address(this).balance <= stageAmount) {\r\n      tokens = calculateTokens(amount, 1, stageAmount);\r\n    } else if (address(this).balance <= stageAmount * 2) {\r\n      tokens = calculateTokens(amount, 2, stageAmount);\r\n    } else if (address(this).balance <= stageAmount * 3) {\r\n      tokens = calculateTokens(amount, 3, stageAmount);\r\n    } else {\r\n      tokens = calculateTokens(amount, 4, stageAmount);\r\n    }\r\n    \r\n    token.mint(msg.sender, tokens);\r\n    balances[currentRound][msg.sender] = balances[currentRound][msg.sender].add(amount);\r\n  }\r\n\r\n  function() external payable {\r\n    createTokens();\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_softcap\",\"type\":\"uint256\"}],\"name\":\"setSoftcap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_thirdBonusPercent\",\"type\":\"uint256\"}],\"name\":\"setThirdBonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"restrictedPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currentRound\",\"type\":\"uint256\"}],\"name\":\"setCurrentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRestricted\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_firstBonusPercent\",\"type\":\"uint256\"}],\"name\":\"setFirstBonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_restrictedPercent\",\"type\":\"uint256\"}],\"name\":\"setRestrictedPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_restricted\",\"type\":\"address\"}],\"name\":\"setRestricted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstBonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secondBonusPercent\",\"type\":\"uint256\"}],\"name\":\"setSecondBonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_stageAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondBonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdBonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hardcap\",\"type\":\"uint256\"}],\"name\":\"setHardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"}],\"name\":\"setMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"},{\"name\":\"_restricted\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"KassotToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fabfa993613a721a5733fef53db0810d2570a1d8000000000000000000000000cdb3c12b8c7b844704966733a4bfff7e5cb4f1b5","Library":"","SwarmSource":"bzzr://93b6fb53d5ee68123f250f763dc31edbda5568477dd70def7b93e3dc021bd745"}]}