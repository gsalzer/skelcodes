{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    // The one who sent the contract to the blockchain, will automatically become the owner of the contract\r\n    function owned() internal {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // The function containing this modifier can only call the owner of the contract\r\n    modifier onlyOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    // Change the owner of the contract\r\n    function changeOwner(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// Functions for safe operation with input values (subtraction and addition)\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// ERC20 interface https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256 balance);\r\n    function allowance(address owner, address spender) public constant returns (uint256 remaining);\r\n    function transfer(address to, uint256 value) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n    function approve(address spender, uint256 value) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract AdvancedToken is ERC20, owned {\r\n    using SafeMath for uint256;\r\n\r\n    // Stores the balances of all holders of the tokens, including the owner of the contract\r\n    mapping (address => uint256) internal balances;\r\n\r\n    // The event informs that N tokens have been destroyed\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    // Creates the required number of tokens on the specified account\r\n    function mintTokens(address _who, uint256 amount) internal returns(bool) {\r\n        require(_who != address(0));\r\n        totalSupply = totalSupply.add(amount);\r\n        balances[_who] = balances[_who].add(amount);\r\n        Transfer(this, _who, amount);\r\n        return true;\r\n    }\r\n\r\n    // Burns tokens on the contract, without affecting the token holders and the owner of the contract\r\n    function burnTokens(uint256 _value) public onlyOwner {\r\n        require(balances[this] > 0);\r\n        balances[this] = balances[this].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(this, _value);\r\n    }\r\n\r\n    // Withdraws tokens from the contract if they accidentally or on purpose was it placed there\r\n    function withdrawTokens(uint256 _value) public onlyOwner {\r\n        require(balances[this] > 0 && balances[this] >= _value);\r\n        balances[this] = balances[this].sub(_value);\r\n        balances[msg.sender] = balances[msg.sender].add(_value);\r\n        Transfer(this, msg.sender, _value);\r\n    }\r\n\r\n    // Withdraws all the ether from the contract to the owner account\r\n    function withdrawEther(uint256 _value) public onlyOwner {\r\n        require(this.balance >= _value);\r\n        owner.transfer(_value);\r\n    }\r\n}\r\n\r\ncontract ICO is AdvancedToken {\r\n    using SafeMath for uint256;\r\n\r\n    enum State { Presale, waitingForICO, ICO, Active }\r\n    State public contract_state = State.Presale;\r\n\r\n    uint256 private startTime;\r\n    uint256 private presaleMaxSupply;\r\n    uint256 private marketMaxSupply;\r\n\r\n    event NewState(State state);\r\n\r\n    // Purchasing tokens is only allowed for Presale and ICO contract states\r\n    modifier crowdsaleState {\r\n        require(contract_state == State.Presale || contract_state == State.ICO);\r\n        _;\r\n    }\r\n\r\n    // Call functions transfer transferFrom and approve, is only allowed with Active state of the contract\r\n    modifier activeState {\r\n        require(contract_state == State.Active);\r\n        _;\r\n    }\r\n\r\n    // The initialization values when the contract has been mined to the blockchain\r\n    function ICO() internal {\r\n        startTime = 1529496000; // 20 june 2018 12:00 AM UTC GMT\r\n        presaleMaxSupply = 0 * 1 ether;\r\n        marketMaxSupply = 450000000 * 1 ether;\r\n    }\r\n\r\n    // The function of purchasing tokens\r\n    function () private payable crowdsaleState {\r\n        require(msg.value >= 0.1 ether);\r\n        require(now >= startTime);\r\n        uint256 currentMaxSupply;\r\n        uint256 tokensPerEther = 5000;\r\n        uint256 _tokens = tokensPerEther * msg.value;\r\n        uint256 bonus = 0;\r\n\r\n        // PRE-SALE calculation of bonuses\r\n        // NOTE: PRE-SALE will be not used for SUPERIUM\r\n        if (contract_state == State.Presale) {\r\n            // PRE-SALE supply limit\r\n            currentMaxSupply = presaleMaxSupply;\r\n            // For the tests replace days to minutes\r\n            if (now <= startTime + 1 days) {\r\n                bonus = 25;\r\n            } else if (now <= startTime + 2 days) {\r\n                bonus = 20;\r\n            }\r\n        // ICO supply limit\r\n        } else {\r\n            currentMaxSupply = marketMaxSupply;\r\n        }\r\n\r\n        _tokens += _tokens * bonus / 100;\r\n        uint256 restTokens = currentMaxSupply - totalSupply;\r\n        // If supplied tokens more that the rest of the tokens, will refund the excess ether\r\n        if (_tokens > restTokens) {\r\n            uint256 bonusTokens = restTokens - restTokens / (100 + bonus) * 100;\r\n            // The wei that the investor will spend for this purchase\r\n            uint256 spentWei = (restTokens - bonusTokens) / tokensPerEther;\r\n            // Verify that not return more than the incoming ether\r\n            assert(spentWei < msg.value);\r\n            // Will refund extra ether\r\n            msg.sender.transfer(msg.value - spentWei);\r\n            _tokens = restTokens;\r\n        }\r\n        mintTokens(msg.sender, _tokens);\r\n    }\r\n\r\n    // Finish the PRE-SALE period, is required the Presale state of the contract\r\n    function finishPresale() public onlyOwner returns (bool success) {\r\n        require(contract_state == State.Presale);\r\n        contract_state = State.waitingForICO;\r\n        NewState(contract_state);\r\n        return true;\r\n    }\r\n\r\n    // Start the ICO period, is required the waitingForICO state of the contract\r\n    function startICO() public onlyOwner returns (bool success) {\r\n        require(contract_state == State.waitingForICO);\r\n        contract_state = State.ICO;\r\n        NewState(contract_state);\r\n        return true;\r\n    }\r\n\r\n    // 5% (25 million tokens) will remain in the SUPERIUM Foundation and will be used to further development over next four years.\r\n    // 2,5% (12,5 million tokens) will remain in property of SUPERIUM Foundation\r\n    // 2,5% (12,5 million tokens) will be distributed to project partners\r\n    // Total: 50 million tokens\r\n    function finishICO() public onlyOwner returns (bool success) {\r\n        require(contract_state == State.ICO);\r\n        mintTokens(owner, 50000000000000000000000000);\r\n        contract_state = State.Active;\r\n        NewState(contract_state);\r\n        return true;\r\n    }\r\n}\r\n\r\n// See ERC20 interface above\r\ncontract SUPERIUM is ICO {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name     = \"SUPERIUM\";\r\n    string public constant symbol   = \"SUM\";\r\n    uint8  public constant decimals = 18;\r\n\r\n    mapping (address => mapping (address => uint256)) private allowed;\r\n\r\n    function balanceOf(address _who) public constant returns (uint256 available) {\r\n        return balances[_who];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public activeState returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public activeState returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public activeState returns (bool success) {\r\n        require(_spender != address(0));\r\n        require(balances[msg.sender] >= _value);\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"available\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishPresale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishICO\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"NewState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SUPERIUM","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9a23cbbacb0df7079774f63144a4922275eb45a45a1b4e47ffbc268ac7a9c1cc"}]}