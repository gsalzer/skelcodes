{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/TokenRegistry.sol\r\n\r\n/**\r\n * The TokenRegistry is a basic registry mapping token symbols\r\n * to their known, deployed addresses on the current blockchain.\r\n *\r\n * Note that the TokenRegistry does *not* mediate any of the\r\n * core protocol's business logic, but, rather, is a helpful\r\n * utility for Terms Contracts to use in encoding, decoding, and\r\n * resolving the addresses of currently deployed tokens.\r\n *\r\n * At this point in time, administration of the Token Registry is\r\n * under Dharma Labs' control.  With more sophisticated decentralized\r\n * governance mechanisms, we intend to shift ownership of this utility\r\n * contract to the Dharma community.\r\n */\r\ncontract TokenRegistry is Ownable {\r\n    mapping (bytes32 => TokenAttributes) public symbolHashToTokenAttributes;\r\n    string[256] public tokenSymbolList;\r\n    uint8 public tokenSymbolListLength;\r\n\r\n    struct TokenAttributes {\r\n        // The ERC20 contract address.\r\n        address tokenAddress;\r\n        // The index in `tokenSymbolList` where the token's symbol can be found.\r\n        uint tokenIndex;\r\n        // The name of the given token, e.g. \"Canonical Wrapped Ether\"\r\n        string name;\r\n        // The number of digits that come after the decimal place when displaying token value.\r\n        uint8 numDecimals;\r\n    }\r\n\r\n    /**\r\n     * Maps the given symbol to the given token attributes.\r\n     */\r\n    function setTokenAttributes(\r\n        string _symbol,\r\n        address _tokenAddress,\r\n        string _tokenName,\r\n        uint8 _numDecimals\r\n    )\r\n        public onlyOwner\r\n    {\r\n        bytes32 symbolHash = keccak256(_symbol);\r\n\r\n        // Attempt to retrieve the token's attributes from the registry.\r\n        TokenAttributes memory attributes = symbolHashToTokenAttributes[symbolHash];\r\n\r\n        if (attributes.tokenAddress == address(0)) {\r\n            // The token has not yet been added to the registry.\r\n            attributes.tokenAddress = _tokenAddress;\r\n            attributes.numDecimals = _numDecimals;\r\n            attributes.name = _tokenName;\r\n            attributes.tokenIndex = tokenSymbolListLength;\r\n\r\n            tokenSymbolList[tokenSymbolListLength] = _symbol;\r\n            tokenSymbolListLength++;\r\n        } else {\r\n            // The token has already been added to the registry; update attributes.\r\n            attributes.tokenAddress = _tokenAddress;\r\n            attributes.numDecimals = _numDecimals;\r\n            attributes.name = _tokenName;\r\n        }\r\n\r\n        // Update this contract's storage.\r\n        symbolHashToTokenAttributes[symbolHash] = attributes;\r\n    }\r\n\r\n    /**\r\n     * Given a symbol, resolves the current address of the token the symbol is mapped to.\r\n     */\r\n    function getTokenAddressBySymbol(string _symbol) public view returns (address) {\r\n        bytes32 symbolHash = keccak256(_symbol);\r\n\r\n        TokenAttributes storage attributes = symbolHashToTokenAttributes[symbolHash];\r\n\r\n        return attributes.tokenAddress;\r\n    }\r\n\r\n    /**\r\n     * Given the known index of a token within the registry's symbol list,\r\n     * returns the address of the token mapped to the symbol at that index.\r\n     *\r\n     * This is a useful utility for compactly encoding the address of a token into a\r\n     * TermsContractParameters string -- by encoding a token by its index in a\r\n     * a 256 slot array, we can represent a token by a 1 byte uint instead of a 20 byte address.\r\n     */\r\n    function getTokenAddressByIndex(uint _index) public view returns (address) {\r\n        string storage symbol = tokenSymbolList[_index];\r\n\r\n        return getTokenAddressBySymbol(symbol);\r\n    }\r\n\r\n    /**\r\n     * Given a symbol, resolves the index of the token the symbol is mapped to within the registry's\r\n     * symbol list.\r\n     */\r\n    function getTokenIndexBySymbol(string _symbol) public view returns (uint) {\r\n        bytes32 symbolHash = keccak256(_symbol);\r\n\r\n        TokenAttributes storage attributes = symbolHashToTokenAttributes[symbolHash];\r\n\r\n        return attributes.tokenIndex;\r\n    }\r\n\r\n    /**\r\n     * Given an index, resolves the symbol of the token at that index in the registry's\r\n     * token symbol list.\r\n     */\r\n    function getTokenSymbolByIndex(uint _index) public view returns (string) {\r\n        return tokenSymbolList[_index];\r\n    }\r\n\r\n    /**\r\n     * Given a symbol, returns the name of the token the symbol is mapped to within the registry's\r\n     * symbol list.\r\n     */\r\n    function getTokenNameBySymbol(string _symbol) public view returns (string) {\r\n        bytes32 symbolHash = keccak256(_symbol);\r\n\r\n        TokenAttributes storage attributes = symbolHashToTokenAttributes[symbolHash];\r\n\r\n        return attributes.name;\r\n    }\r\n\r\n    /**\r\n     * Given the symbol for a token, returns the number of decimals as provided in\r\n     * the associated TokensAttribute struct.\r\n     *\r\n     * Example:\r\n     *   getNumDecimalsFromSymbol(\"REP\");\r\n     *   => 18\r\n     */\r\n    function getNumDecimalsFromSymbol(string _symbol) public view returns (uint8) {\r\n        bytes32 symbolHash = keccak256(_symbol);\r\n\r\n        TokenAttributes storage attributes = symbolHashToTokenAttributes[symbolHash];\r\n\r\n        return attributes.numDecimals;\r\n    }\r\n\r\n    /**\r\n     * Given the index for a token in the registry, returns the number of decimals as provided in\r\n     * the associated TokensAttribute struct.\r\n     *\r\n     * Example:\r\n     *   getNumDecimalsByIndex(1);\r\n     *   => 18\r\n     */\r\n    function getNumDecimalsByIndex(uint _index) public view returns (uint8) {\r\n        string memory symbol = getTokenSymbolByIndex(_index);\r\n\r\n        return getNumDecimalsFromSymbol(symbol);\r\n    }\r\n\r\n    /**\r\n     * Given the index for a token in the registry, returns the name of the token as provided in\r\n     * the associated TokensAttribute struct.\r\n     *\r\n     * Example:\r\n     *   getTokenNameByIndex(1);\r\n     *   => \"Canonical Wrapped Ether\"\r\n     */\r\n    function getTokenNameByIndex(uint _index) public view returns (string) {\r\n        string memory symbol = getTokenSymbolByIndex(_index);\r\n\r\n        string memory tokenName = getTokenNameBySymbol(symbol);\r\n\r\n        return tokenName;\r\n    }\r\n\r\n    /**\r\n     * Given the symbol for a token in the registry, returns a tuple containing the token's address,\r\n     * the token's index in the registry, the token's name, and the number of decimals.\r\n     *\r\n     * Example:\r\n     *   getTokenAttributesBySymbol(\"WETH\");\r\n     *   => [\"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\", 1, \"Canonical Wrapped Ether\", 18]\r\n     */\r\n    function getTokenAttributesBySymbol(string _symbol)\r\n        public\r\n        view\r\n        returns (\r\n            address,\r\n            uint,\r\n            string,\r\n            uint\r\n        )\r\n    {\r\n        bytes32 symbolHash = keccak256(_symbol);\r\n\r\n        TokenAttributes storage attributes = symbolHashToTokenAttributes[symbolHash];\r\n\r\n        return (\r\n            attributes.tokenAddress,\r\n            attributes.tokenIndex,\r\n            attributes.name,\r\n            attributes.numDecimals\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Given the index for a token in the registry, returns a tuple containing the token's address,\r\n     * the token's symbol, the token's name, and the number of decimals.\r\n     *\r\n     * Example:\r\n     *   getTokenAttributesByIndex(1);\r\n     *   => [\"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\", \"WETH\", \"Canonical Wrapped Ether\", 18]\r\n     */\r\n    function getTokenAttributesByIndex(uint _index)\r\n        public\r\n        view\r\n        returns (\r\n            address,\r\n            string,\r\n            string,\r\n            uint8\r\n        )\r\n    {\r\n        string memory symbol = getTokenSymbolByIndex(_index);\r\n\r\n        bytes32 symbolHash = keccak256(symbol);\r\n\r\n        TokenAttributes storage attributes = symbolHashToTokenAttributes[symbolHash];\r\n\r\n        return (\r\n            attributes.tokenAddress,\r\n            symbol,\r\n            attributes.name,\r\n            attributes.numDecimals\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTokenAttributesByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getTokenIndexBySymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getTokenAddressBySymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"symbolHashToTokenAttributes\",\"outputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"numDecimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_numDecimals\",\"type\":\"uint8\"}],\"name\":\"setTokenAttributes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTokenAddressByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTokenSymbolByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getTokenAttributesBySymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getNumDecimalsFromSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getNumDecimalsByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSymbolList\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getTokenNameBySymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSymbolListLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTokenNameByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenRegistry","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9b941d0de0d510f499d51005e8694ec912b4d67e9024bb0e60459a4c44c3c351"}]}