{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.21;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract AMBToken {\r\n    using SafeMath for uint256;\r\n\r\n    string  public constant name     = \"Ambit token\";\r\n    string  public constant symbol   = \"AMBT\";\r\n    uint8   public constant decimals = 18;\r\n    uint256 public totalSupply;\r\n\r\n    bool internal contractIsWorking = true;\r\n\r\n    struct Investor {\r\n        uint256 tokenBalance;\r\n        uint256 icoInvest;\r\n        bool    activated;\r\n    }\r\n    mapping(address => Investor) internal investors;\r\n    mapping(address => mapping (address => uint256)) internal allowed;\r\n\r\n    /*\r\n            Dividend's Structures\r\n    */\r\n    uint256   internal dividendCandidate = 0;\r\n    uint256[] internal dividends;\r\n\r\n    enum ProfitStatus {Initial, StartFixed, EndFixed, Claimed}\r\n    struct InvestorProfitData {\r\n        uint256      start_balance;\r\n        uint256      end_balance;\r\n        ProfitStatus status;\r\n    }\r\n\r\n    mapping(address => mapping(uint32 => InvestorProfitData)) internal profits;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return investors[_owner].tokenBalance;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function _approve(address _spender, uint256 _value) internal returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(investors[msg.sender].activated && contractIsWorking);\r\n        return _approve(_spender, _value);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= investors[_from].tokenBalance);\r\n\r\n        fixDividendBalances(_to, false);\r\n\r\n        investors[_from].tokenBalance = investors[_from].tokenBalance.sub(_value);\r\n        investors[_to].tokenBalance = investors[_to].tokenBalance.add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(investors[msg.sender].activated && contractIsWorking);\r\n        fixDividendBalances(msg.sender, false);\r\n        return _transfer( msg.sender, _to,  _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(investors[msg.sender].activated && investors[_from].activated && contractIsWorking);\r\n        require(_to != address(0));\r\n        require(_value <= investors[_from].tokenBalance);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        fixDividendBalances(_from, false);\r\n        fixDividendBalances(_to, false);\r\n\r\n        investors[_from].tokenBalance = investors[_from].tokenBalance.sub(_value);\r\n        investors[_to].tokenBalance   = investors[_to].tokenBalance.add(_value);\r\n        allowed[_from][msg.sender]    = allowed[_from][msg.sender].sub(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        Eligible token and balance helper function\r\n     */\r\n    function fixDividendBalances(address investor, bool revertIfClaimed) internal\r\n        returns (InvestorProfitData storage current_profit, uint256 profit_per_token){\r\n\r\n        uint32 next_id      = uint32(dividends.length);\r\n        uint32 current_id   = next_id - 1;\r\n        current_profit      = profits[investor][current_id];\r\n\r\n        if (revertIfClaimed) require(current_profit.status != ProfitStatus.Claimed);\r\n        InvestorProfitData storage next_profit      = profits[investor][next_id];\r\n\r\n        if (current_profit.status == ProfitStatus.Initial) {\r\n\r\n            current_profit.start_balance = investors[investor].tokenBalance;\r\n            current_profit.end_balance   = investors[investor].tokenBalance;\r\n            current_profit.status        = ProfitStatus.EndFixed;\r\n            next_profit.start_balance = investors[investor].tokenBalance;\r\n            next_profit.status        = ProfitStatus.StartFixed;\r\n\r\n        } else if (current_profit.status == ProfitStatus.StartFixed) {\r\n\r\n            current_profit.end_balance = investors[investor].tokenBalance;\r\n            current_profit.status      = ProfitStatus.EndFixed;\r\n            next_profit.start_balance = investors[investor].tokenBalance;\r\n            next_profit.status        = ProfitStatus.StartFixed;\r\n        }\r\n        profit_per_token = dividends[current_id];\r\n    }\r\n}\r\n\r\ncontract AMBTICO is AMBToken {\r\n    uint256 internal constant ONE_TOKEN           = 10 ** uint256(decimals);//just for convenience\r\n    uint256 internal constant MILLION             = 1000000;                //just for convenience\r\n\r\n    uint256 internal constant BOUNTY_QUANTITY     = 3120000;\r\n    uint256 internal constant RESERV_QUANTITY     = 12480000;\r\n\r\n    uint256 internal constant TOKEN_MAX_SUPPLY    = 104 * MILLION   * ONE_TOKEN;\r\n    uint256 internal constant BOUNTY_TOKENS       = BOUNTY_QUANTITY * ONE_TOKEN;\r\n    uint256 internal constant RESERV_TOKENS       = RESERV_QUANTITY * ONE_TOKEN;\r\n    uint256 internal constant MIN_SOLD_TOKENS     = 200             * ONE_TOKEN;\r\n    uint256 internal constant SOFTCAP             = BOUNTY_TOKENS + RESERV_TOKENS + 6 * MILLION * ONE_TOKEN;\r\n\r\n    uint256 internal constant REFUND_PERIOD       = 60 days;\r\n    uint256 internal constant KYC_REVIEW_PERIOD   = 60 days;\r\n\r\n    address internal owner;\r\n    address internal bountyManager;\r\n    address internal dividendManager;\r\n    address internal dApp;\r\n\r\n    enum ContractMode {Initial, TokenSale, UnderSoftCap, DividendDistribution, Destroyed}\r\n    ContractMode public mode = ContractMode.Initial;\r\n\r\n    uint256 public icoFinishTime = 0;\r\n    uint256 public tokenSold = 0;\r\n    uint256 public etherCollected = 0;\r\n\r\n    uint8   public currentSection = 0;\r\n    uint[4] public saleSectionDiscounts = [ uint8(20), 10, 5];\r\n    uint[4] public saleSectionPrice     = [ uint256(1000000000000000), 1125000000000000, 1187500000000000, 1250000000000000];//price: 0.40 0.45 0.475 0.50 cent | ETH/USD initial rate: 400\r\n    uint[4] public saleSectionCount     = [ uint256(17 * MILLION), 20 * MILLION, 20 * MILLION, 47 * MILLION - (BOUNTY_QUANTITY+RESERV_QUANTITY)];\r\n    uint[4] public saleSectionInvest    = [ uint256(saleSectionCount[0] * saleSectionPrice[0]),\r\n                                                    saleSectionCount[1] * saleSectionPrice[1],\r\n                                                    saleSectionCount[2] * saleSectionPrice[2],\r\n                                                    saleSectionCount[3] * saleSectionPrice[3]];\r\n    uint256 public buyBackPriceWei = 0 ether;\r\n\r\n    event OwnershipTransferred          (address previousOwner, address newOwner);\r\n    event BountyManagerAssigned         (address previousBountyManager, address newBountyManager);\r\n    event DividendManagerAssigned       (address previousDividendManager, address newDividendManager);\r\n    event DAppAssigned                  (address previousDApp, address newDApp);\r\n    event ModeChanged                   (ContractMode  newMode, uint256 tokenBalance);\r\n    event DividendDeclared              (uint32 indexed dividendID, uint256 profitPerToken);\r\n    event DividendClaimed               (address indexed investor, uint256 amount);\r\n    event BuyBack                       (address indexed requestor);\r\n    event Refund                        (address indexed investor, uint256 amount);\r\n    event Handbrake                     (ContractMode current_mode, bool functioning);\r\n    event FundsAdded                    (address owner, uint256 amount);\r\n    event FundsWithdrawal               (address owner, uint256 amount);\r\n    event BountyTransfered              (address recipient, uint256 amount);\r\n    event PriceChanged                  (uint256 newPrice);\r\n    event BurnToken                     (uint256 amount);\r\n\r\n    modifier grantOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier grantBountyManager() {\r\n        require(msg.sender == bountyManager);\r\n        _;\r\n    }\r\n\r\n    modifier grantDividendManager() {\r\n        require(msg.sender == dividendManager);\r\n        _;\r\n    }\r\n\r\n    modifier grantDApp() {\r\n        require(msg.sender == dApp);\r\n        _;\r\n    }\r\n    function AMBTICO() public {\r\n        owner = msg.sender;\r\n        dividends.push(0);\r\n    }\r\n\r\n    function setTokenPrice(uint256 new_wei_price) public grantDApp {\r\n        require(new_wei_price > 0);\r\n        uint8 len = uint8(saleSectionPrice.length)-1;\r\n        for (uint8 i=0; i<=len; i++) {\r\n            uint256 prdsc = 100 - saleSectionDiscounts[i];\r\n            saleSectionPrice[i]  = prdsc.mul(new_wei_price ).div(100);\r\n            saleSectionInvest[i] = saleSectionPrice[i] * saleSectionCount[i];\r\n        }\r\n        emit PriceChanged(new_wei_price);\r\n    }\r\n\r\n    function startICO() public grantOwner {\r\n        require(contractIsWorking);\r\n        require(mode == ContractMode.Initial);\r\n        require(bountyManager != 0x0);\r\n\r\n        totalSupply = TOKEN_MAX_SUPPLY;\r\n\r\n        investors[this].tokenBalance            = TOKEN_MAX_SUPPLY-(BOUNTY_TOKENS+RESERV_TOKENS);\r\n        investors[bountyManager].tokenBalance   = BOUNTY_TOKENS;\r\n        investors[owner].tokenBalance           = RESERV_TOKENS;\r\n\r\n        tokenSold = investors[bountyManager].tokenBalance + investors[owner].tokenBalance;\r\n\r\n        mode = ContractMode.TokenSale;\r\n        emit ModeChanged(mode, investors[this].tokenBalance);\r\n    }\r\n\r\n    function getCurrentTokenPrice() public view returns(uint256) {\r\n        require(currentSection < saleSectionCount.length);\r\n        return saleSectionPrice[currentSection];\r\n    }\r\n\r\n    function () public payable {\r\n        invest();\r\n    }\r\n    function invest() public payable {\r\n       _invest(msg.sender,msg.value);\r\n    }\r\n    /* Used by ĐApp to accept Bitcoin transfers.*/\r\n    function investWithBitcoin(address ethAddress, uint256 ethWEI) public grantDApp {\r\n        _invest(ethAddress,ethWEI);\r\n    }\r\n\r\n\r\n    function _invest(address msg_sender, uint256 msg_value) internal {\r\n        require(contractIsWorking);\r\n        require(currentSection < saleSectionCount.length);\r\n        require(mode == ContractMode.TokenSale);\r\n        require(msg_sender != bountyManager);\r\n\r\n        uint wei_value = msg_value;\r\n        uint _tokens = 0;\r\n\r\n        while (wei_value > 0 && (currentSection < saleSectionCount.length)) {\r\n            if (saleSectionInvest[currentSection] >= wei_value) {\r\n                _tokens += ONE_TOKEN.mul(wei_value).div(saleSectionPrice[currentSection]);\r\n                saleSectionInvest[currentSection] -= wei_value;\r\n                wei_value =0;\r\n            } else {\r\n                _tokens += ONE_TOKEN.mul(saleSectionInvest[currentSection]).div(saleSectionPrice[currentSection]);\r\n                wei_value -= saleSectionInvest[currentSection];\r\n                saleSectionInvest[currentSection] = 0;\r\n            }\r\n            if (saleSectionInvest[currentSection] <= 0) currentSection++;\r\n        }\r\n\r\n        require(_tokens >= MIN_SOLD_TOKENS);\r\n\r\n        require(_transfer(this, msg_sender, _tokens));\r\n\r\n        profits[msg_sender][1] = InvestorProfitData({\r\n            start_balance:  investors[msg_sender].tokenBalance,\r\n            end_balance:    investors[msg_sender].tokenBalance,\r\n            status:         ProfitStatus.StartFixed\r\n            });\r\n\r\n        investors[msg_sender].icoInvest += (msg_value - wei_value);\r\n\r\n        tokenSold      += _tokens;\r\n        etherCollected += (msg_value - wei_value);\r\n\r\n        if (saleSectionInvest[saleSectionInvest.length-1] == 0 ) {\r\n            _finishICO();\r\n        }\r\n\r\n        if (wei_value > 0) {\r\n            msg_sender.transfer(wei_value);\r\n        }\r\n    }\r\n\r\n    function _finishICO() internal {\r\n        require(contractIsWorking);\r\n        require(mode == ContractMode.TokenSale);\r\n\r\n        if (tokenSold >= SOFTCAP) {\r\n            mode = ContractMode.DividendDistribution;\r\n        } else {\r\n            mode = ContractMode.UnderSoftCap;\r\n        }\r\n\r\n        investors[this].tokenBalance = 0;\r\n        icoFinishTime                = now;\r\n        totalSupply                  = tokenSold;\r\n\r\n        emit ModeChanged(mode, investors[this].tokenBalance);\r\n    }\r\n\r\n    function finishICO() public grantOwner  {\r\n        _finishICO();\r\n    }\r\n\r\n    function getInvestedAmount(address investor) public view returns(uint256) {\r\n        return investors[investor].icoInvest;\r\n    }\r\n\r\n    function activateAddress(address investor, bool status) public grantDApp {\r\n        require(contractIsWorking);\r\n        require(mode == ContractMode.DividendDistribution);\r\n        require((now - icoFinishTime) < KYC_REVIEW_PERIOD);\r\n        investors[investor].activated = status;\r\n    }\r\n\r\n    function isAddressActivated(address investor) public view returns (bool) {\r\n        return investors[investor].activated;\r\n    }\r\n\r\n    /*******\r\n            Dividend Declaration Section\r\n    *********/\r\n    function declareDividend(uint256 profit_per_token) public grantDividendManager {\r\n        dividendCandidate = profit_per_token;\r\n    }\r\n\r\n    function confirmDividend(uint256 profit_per_token) public grantOwner {\r\n        require(contractIsWorking);\r\n        require(dividendCandidate == profit_per_token);\r\n        require(mode == ContractMode.DividendDistribution);\r\n\r\n        dividends.push(dividendCandidate);\r\n        emit DividendDeclared(uint32(dividends.length), dividendCandidate);\r\n        dividendCandidate = 0;\r\n    }\r\n\r\n    function claimDividend() public {\r\n        require(contractIsWorking);\r\n        require(mode == ContractMode.DividendDistribution);\r\n        require(investors[msg.sender].activated);\r\n\r\n        InvestorProfitData storage current_profit;\r\n        uint256 price_per_token;\r\n        (current_profit, price_per_token) = fixDividendBalances(msg.sender, true);\r\n\r\n        uint256 investorProfitWei =\r\n                    (current_profit.start_balance < current_profit.end_balance ?\r\n                     current_profit.start_balance : current_profit.end_balance ).div(ONE_TOKEN).mul(price_per_token);\r\n\r\n        current_profit.status = ProfitStatus.Claimed;\r\n        emit DividendClaimed(msg.sender, investorProfitWei);\r\n\r\n        msg.sender.transfer(investorProfitWei);\r\n    }\r\n\r\n    function getDividendInfo() public view returns(uint256) {\r\n        return dividends[dividends.length - 1];\r\n    }\r\n\r\n    /*******\r\n                emit BuyBack\r\n    ********/\r\n    function setBuyBackPrice(uint256 token_buyback_price) public grantOwner {\r\n        require(mode == ContractMode.DividendDistribution);\r\n        buyBackPriceWei = token_buyback_price;\r\n    }\r\n\r\n    function buyback() public {\r\n        require(contractIsWorking);\r\n        require(mode == ContractMode.DividendDistribution);\r\n        require(buyBackPriceWei > 0);\r\n\r\n        uint256 token_amount = investors[msg.sender].tokenBalance;\r\n        uint256 ether_amount = calcTokenToWei(token_amount);\r\n\r\n        require(address(this).balance > ether_amount);\r\n\r\n        if (transfer(this, token_amount)){\r\n            emit BuyBack(msg.sender);\r\n            msg.sender.transfer(ether_amount);\r\n        }\r\n    }\r\n\r\n    /********\r\n                Under SoftCap Section\r\n    *********/\r\n    function refund() public {\r\n        require(contractIsWorking);\r\n        require(mode == ContractMode.UnderSoftCap);\r\n        require(investors[msg.sender].tokenBalance >0);\r\n        require(investors[msg.sender].icoInvest>0);\r\n\r\n        require (address(this).balance > investors[msg.sender].icoInvest);\r\n\r\n        if (_transfer(msg.sender, this, investors[msg.sender].tokenBalance)){\r\n            emit Refund(msg.sender, investors[msg.sender].icoInvest);\r\n            msg.sender.transfer(investors[msg.sender].icoInvest);\r\n        }\r\n    }\r\n\r\n    function destroyContract() public grantOwner {\r\n        require(mode == ContractMode.UnderSoftCap);\r\n        require((now - icoFinishTime) > REFUND_PERIOD);\r\n        selfdestruct(owner);\r\n    }\r\n    /********\r\n                Permission related\r\n    ********/\r\n\r\n    function transferOwnership(address new_owner) public grantOwner {\r\n        require(contractIsWorking);\r\n        require(new_owner != address(0));\r\n        emit OwnershipTransferred(owner, new_owner);\r\n        owner = new_owner;\r\n    }\r\n\r\n    function setBountyManager(address new_bounty_manager) public grantOwner {\r\n        require(investors[new_bounty_manager].tokenBalance ==0);\r\n        if (mode == ContractMode.Initial) {\r\n            emit BountyManagerAssigned(bountyManager, new_bounty_manager);\r\n            bountyManager = new_bounty_manager;\r\n        } else if (mode == ContractMode.TokenSale) {\r\n            emit BountyManagerAssigned(bountyManager, new_bounty_manager);\r\n            address old_bounty_manager = bountyManager;\r\n            bountyManager              = new_bounty_manager;\r\n            require(_transfer(old_bounty_manager, new_bounty_manager, investors[old_bounty_manager].tokenBalance));\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function setDividendManager(address new_dividend_manager) public grantOwner {\r\n        emit DividendManagerAssigned(dividendManager, new_dividend_manager);\r\n        dividendManager = new_dividend_manager;\r\n    }\r\n\r\n    function setDApp(address new_dapp) public grantOwner {\r\n        emit DAppAssigned(dApp, new_dapp);\r\n        dApp = new_dapp;\r\n    }\r\n\r\n\r\n\r\n    /********\r\n                Security and funds section\r\n    ********/\r\n\r\n    function transferBounty(address _to, uint256 _amount) public grantBountyManager {\r\n        require(contractIsWorking);\r\n        require(mode == ContractMode.DividendDistribution);\r\n        if (_transfer(bountyManager, _to, _amount)) {\r\n            emit BountyTransfered(_to, _amount);\r\n        }\r\n    }\r\n\r\n    function burnTokens(uint256 tokenAmount) public grantOwner {\r\n        require(contractIsWorking);\r\n        require(mode == ContractMode.DividendDistribution);\r\n        require(investors[msg.sender].tokenBalance > tokenAmount);\r\n\r\n        investors[msg.sender].tokenBalance -= tokenAmount;\r\n        totalSupply = totalSupply.sub(tokenAmount);\r\n        emit BurnToken(tokenAmount);\r\n    }\r\n\r\n    function withdrawFunds(uint wei_value) grantOwner external {\r\n        require(mode != ContractMode.UnderSoftCap);\r\n        require(address(this).balance >= wei_value);\r\n\r\n        emit FundsWithdrawal(msg.sender, wei_value);\r\n        msg.sender.transfer(wei_value);\r\n    }\r\n\r\n    function addFunds() public payable grantOwner {\r\n        require(contractIsWorking);\r\n        emit FundsAdded(msg.sender, msg.value);\r\n    }\r\n\r\n    function pauseContract() public grantOwner {\r\n        require(contractIsWorking);\r\n        contractIsWorking = false;\r\n        emit Handbrake(mode, contractIsWorking);\r\n    }\r\n\r\n    function restoreContract() public grantOwner {\r\n        require(!contractIsWorking);\r\n        contractIsWorking = true;\r\n        emit Handbrake(mode, contractIsWorking);\r\n    }\r\n\r\n    /********\r\n                Helper functions\r\n    ********/\r\n    function calcTokenToWei(uint256 token_amount) internal view returns (uint256) {\r\n        return buyBackPriceWei.mul(token_amount).div(ONE_TOKEN);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"profit_per_token\",\"type\":\"uint256\"}],\"name\":\"confirmDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"isAddressActivated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDividendInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wei_value\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"activateAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getInvestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyBackPriceWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"saleSectionDiscounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSection\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"saleSectionPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_wei_price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_dapp\",\"type\":\"address\"}],\"name\":\"setDApp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"profit_per_token\",\"type\":\"uint256\"}],\"name\":\"declareDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_buyback_price\",\"type\":\"uint256\"}],\"name\":\"setBuyBackPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_dividend_manager\",\"type\":\"address\"}],\"name\":\"setDividendManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restoreContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"saleSectionInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethAddress\",\"type\":\"address\"},{\"name\":\"ethWEI\",\"type\":\"uint256\"}],\"name\":\"investWithBitcoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoFinishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"saleSectionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_bounty_manager\",\"type\":\"address\"}],\"name\":\"setBountyManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousBountyManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newBountyManager\",\"type\":\"address\"}],\"name\":\"BountyManagerAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousDividendManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newDividendManager\",\"type\":\"address\"}],\"name\":\"DividendManagerAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousDApp\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newDApp\",\"type\":\"address\"}],\"name\":\"DAppAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newMode\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"name\":\"ModeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dividendID\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"profitPerToken\",\"type\":\"uint256\"}],\"name\":\"DividendDeclared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"requestor\",\"type\":\"address\"}],\"name\":\"BuyBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"current_mode\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"functioning\",\"type\":\"bool\"}],\"name\":\"Handbrake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BountyTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AMBTICO","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6796df0ee0073e0391f737dda3c2a4cb1e0bf833dc51df295323d83188212405"}]}