{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\n/*\r\n*   Basic PHX-Ethereum PHX Sales Contract\r\n*\r\n*   This contract keeps a list of offers to sell PHX coins\r\n*   and acts as a market-maker matching sellers to buyers.\r\n*   \r\n* //*** Developed By:\r\n*   _____       _         _         _ ___ _         \r\n*  |_   _|__ __| |_  _ _ (_)__ __ _| | _ (_)___ ___ \r\n*    | |/ -_) _| ' \\| ' \\| / _/ _` | |   / (_-</ -_)\r\n*    |_|\\___\\__|_||_|_||_|_\\__\\__,_|_|_|_\\_/__/\\___|\r\n*   \r\n*   Â© 2018 TechnicalRise.  Written in March 2018.  \r\n*   All rights reserved.  Do not copy, adapt, or otherwise use without permission.\r\n*   https://www.reddit.com/user/TechnicalRise/\r\n*  \r\n*/\r\n\r\ncontract ERC20Token {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n}\r\n\r\ncontract SimplePHXSalesContract {\r\n    \r\n    // ScaleFactor\r\n    // It needs to be possible to make PHX cost less than 1 Wei / Rise\r\n    uint public ScaleFactor = 10 ** 18;  \r\n    \r\n    // Array of offerors\r\n    mapping(uint256 => address) public offerors;\r\n\tmapping(address => uint256) public AddrNdx;\r\n    uint public nxtAddr;\r\n    \r\n\t// Array between each address and their tokens offered and buy prices.\r\n\tmapping(address => uint256) public tokensOffered;\r\n\tmapping(address => uint256) public pricePerToken; // In qWeiPerRise (need to multiply by 10 ** 36 to get it to ETH / PHX)\r\n\r\n    ERC20Token public phxCoin;\r\n\r\n    address public owner;\r\n\r\n    function SimplePHXSalesContract() public {\r\n        phxCoin = ERC20Token(0x14b759A158879B133710f4059d32565b4a66140C); // Initiates a PHX Coin !important -- Make sure this is the existing contract!\r\n        owner = msg.sender;\r\n        nxtAddr = 1; // This is because all IDs in AddrNdx will initialize to zero\r\n    }\r\n\r\n    function offer(uint _tokensOffered, uint _tokenPrice) public {\r\n        require(_humanSender(msg.sender));\r\n        require(AddrNdx[msg.sender] == 0); // Make sure that this offeror has cancelled all previous offers\r\n        require(phxCoin.transferFrom(msg.sender, this, _tokensOffered));\r\n        tokensOffered[msg.sender] = _tokensOffered;\r\n        pricePerToken[msg.sender] = _tokenPrice; // in qWeiPerRise\r\n        offerors[nxtAddr] = msg.sender;\r\n        AddrNdx[msg.sender] = nxtAddr;\r\n        nxtAddr++;\r\n    }\r\n\r\n    function _canceloffer(address _offeror) internal {\r\n        delete tokensOffered[_offeror];\r\n        delete pricePerToken[_offeror];\r\n        \r\n        uint Ndx = AddrNdx[_offeror];\r\n        nxtAddr--;\r\n\r\n        // If this isn't the only offer, reshuffle the array\r\n        // Moving the last entry to the middle of the list\r\n        if (nxtAddr > 1) {\r\n            offerors[Ndx] = offerors[nxtAddr];\r\n            AddrNdx[offerors[nxtAddr]] = Ndx;\r\n            delete offerors[nxtAddr];\r\n        } else {\r\n            delete offerors[Ndx];\r\n        }\r\n        \r\n        delete AddrNdx[_offeror]; // !important\r\n    }\r\n\r\n    function canceloffer() public {\r\n        if(AddrNdx[msg.sender] == 0) return; // No need to cancel non-existent offer\r\n        phxCoin.transfer(msg.sender, tokensOffered[msg.sender]); // Return the Tokens\r\n        _canceloffer(msg.sender);\r\n    }\r\n    \r\n    function buy(uint _ndx) payable public {\r\n        require(_humanSender(msg.sender));\r\n        address _offeror = offerors[_ndx];\r\n        uint _purchasePrice = tokensOffered[_offeror] * pricePerToken[_offeror] * ScaleFactor;\r\n        require(msg.value >= _purchasePrice);\r\n        phxCoin.transfer(msg.sender, tokensOffered[_offeror]);\r\n        _offeror.transfer(_purchasePrice);\r\n        _canceloffer(_offeror);\r\n    }\r\n    \r\n    function updatePrice(uint _newPrice) public {\r\n        // Make sure that this offeror has an offer out there\r\n        require(tokensOffered[msg.sender] != 0); \r\n        pricePerToken[msg.sender] = _newPrice;\r\n    }\r\n    \r\n    function getOfferor(uint _ndx) public constant returns (address _offeror) {\r\n        return offerors[_ndx];\r\n    }\r\n    \r\n    function getOfferPrice(uint _ndx) public constant returns (uint _tokenPrice) {\r\n        return pricePerToken[offerors[_ndx]];\r\n    }\r\n    \r\n    function getOfferAmount(uint _ndx) public constant returns (uint _tokensOffered) {\r\n        return tokensOffered[offerors[_ndx]];\r\n    }\r\n    \r\n    function withdrawEth() public {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function () payable public {\r\n    }\r\n    \r\n    // Determine if the \"_from\" address is a contract\r\n    function _humanSender(address _from) private view returns (bool) {\r\n      uint codeLength;\r\n      assembly {\r\n          codeLength := extcodesize(_from)\r\n      }\r\n      return (codeLength == 0); // If this is \"true\" sender is most likely a Wallet\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_ndx\",\"type\":\"uint256\"}],\"name\":\"getOfferPrice\",\"outputs\":[{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"canceloffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pricePerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"AddrNdx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phxCoin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensOffered\",\"type\":\"uint256\"},{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"offer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offerors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ndx\",\"type\":\"uint256\"}],\"name\":\"getOfferor\",\"outputs\":[{\"name\":\"_offeror\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ndx\",\"type\":\"uint256\"}],\"name\":\"getOfferAmount\",\"outputs\":[{\"name\":\"_tokensOffered\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ndx\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nxtAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensOffered\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ScaleFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"SimplePHXSalesContract","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://52802f2f364e9ac46a1a66680fe74283b6a5e04e72b70fd2035df60bc8dedcc1"}]}