{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract OwnedInterface {\r\n    function getOwner() public view returns(address);\r\n    function changeOwner(address) public returns (bool);\r\n}\r\n\r\ncontract Owned is OwnedInterface {\r\n    \r\n    address private contractOwner;\r\n  \r\n    event LogOwnerChanged(\r\n        address oldOwner, \r\n        address newOwner);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == contractOwner);\r\n        _;\r\n    } \r\n   \r\n    function Owned() public {\r\n        contractOwner = msg.sender;\r\n    }\r\n    \r\n    function getOwner() public view returns(address owner) {\r\n        return contractOwner;\r\n    }\r\n  \r\n    function changeOwner(address newOwner) \r\n        public \r\n        onlyOwner \r\n        returns(bool success) \r\n    {\r\n        require(newOwner != 0);\r\n        LogOwnerChanged(contractOwner, newOwner);\r\n        contractOwner = newOwner;\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract TimeLimitedStoppableInterface is OwnedInterface \r\n{\r\n  function isRunning() public view returns(bool contractRunning);\r\n  function setRunSwitch(bool) public returns(bool onOff);\r\n}\r\n\r\ncontract TimeLimitedStoppable is TimeLimitedStoppableInterface, Owned \r\n{\r\n  bool private running;\r\n  uint private finalBlock;\r\n\r\n  modifier onlyIfRunning\r\n  {\r\n    require(running);\r\n    _;\r\n  }\r\n  \r\n  event LogSetRunSwitch(address sender, bool isRunning);\r\n  event LogSetFinalBlock(address sender, uint lastBlock);\r\n\r\n  function TimeLimitedStoppable() public {\r\n    running = true;\r\n    finalBlock = now + 390 days;\r\n    LogSetRunSwitch(msg.sender, true);\r\n    LogSetFinalBlock(msg.sender, finalBlock);\r\n  }\r\n\r\n  function isRunning() \r\n    public\r\n    view \r\n    returns(bool contractRunning) \r\n  {\r\n    return running && now <= finalBlock;\r\n  }\r\n\r\n  function getLastBlock() public view returns(uint lastBlock) {\r\n    return finalBlock;\r\n  }\r\n\r\n  function setRunSwitch(bool onOff) \r\n    public\r\n    onlyOwner\r\n    returns(bool success)\r\n  {\r\n    LogSetRunSwitch(msg.sender, onOff);\r\n    running = onOff;\r\n    return true;\r\n  }\r\n\r\n  function SetFinalBlock(uint lastBlock) \r\n    public \r\n    onlyOwner \r\n    returns(bool success) \r\n  {\r\n    finalBlock = lastBlock;\r\n    LogSetFinalBlock(msg.sender, finalBlock);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\ncontract CMCTInterface is ERC20 {\r\n  function isCMCT() public pure returns(bool isIndeed);\r\n}\r\n\r\ncontract CMCT is CMCTInterface, StandardToken, CanReclaimToken {\r\n  string public name = \"Crowd Machine Compute Token\";\r\n  string public symbol = \"CMCT\";\r\n  uint8  public decimals = 8;\r\n  uint256 public INITIAL_SUPPLY = uint(2000000000) * (10 ** uint256(decimals));\r\n\r\n  function CMCT() public {\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n  }\r\n   \r\n  function isCMCT() public pure returns(bool isIndeed) {\r\n      return true;\r\n  }\r\n}\r\n\r\ncontract CmctSaleInterface is TimeLimitedStoppableInterface, CanReclaimToken {\r\n  \r\n  struct FunderStruct {\r\n    bool registered;\r\n    bool approved;\r\n  }\r\n  \r\n  mapping(address => FunderStruct) public funderStructs;\r\n  \r\n  function isUser(address user) public view returns(bool isIndeed);\r\n  function isApproved(address user) public view returns(bool isIndeed);\r\n  function registerSelf(bytes32 uid) public returns(bool success);\r\n  function registerUser(address user, bytes32 uid) public returns(bool success);\r\n  function approveUser(address user, bytes32 uid) public returns(bool success);\r\n  function disapproveUser(address user, bytes32 uid) public returns(bool success);\r\n  function withdrawEth(uint amount, address to, bytes32 uid) public returns(bool success);\r\n  function relayCMCT(address receiver, uint amount, bytes32 uid) public returns(bool success);\r\n  function bulkRelayCMCT(address[] receivers, uint[] amounts, bytes32 uid) public returns(bool success);\r\n  function () public payable;\r\n}\r\n\r\ncontract CmctSale is CmctSaleInterface, TimeLimitedStoppable {\r\n  \r\n  CMCTInterface cmctToken;\r\n  \r\n  event LogSetTokenAddress(address sender, address cmctContract);\r\n  event LogUserRegistered(address indexed sender, address indexed user, bytes32 indexed uid);\r\n  event LogUserApproved(address indexed sender, address user, bytes32 indexed uid);\r\n  event LogUserDisapproved(address indexed sender, address user, bytes32 indexed uid);\r\n  event LogEthWithdrawn(address indexed sender, address indexed to, uint amount, bytes32 indexed uid);\r\n  event LogCMCTRelayFailed(address indexed sender, address indexed receiver, uint amount, bytes32 indexed uid);\r\n  event LogCMCTRelayed(address indexed sender, address indexed receiver, uint amount, bytes32 indexed uid);\r\n  event LogEthReceived(address indexed sender, uint amount);\r\n  \r\n  modifier onlyifInitialized {\r\n      require(cmctToken.isCMCT());\r\n      _;\r\n  }\r\n\r\n  function \r\n    CmctSale(address cmctContract) \r\n    public \r\n  {\r\n    require(cmctContract != 0);\r\n    cmctToken = CMCTInterface(cmctContract);\r\n    LogSetTokenAddress(msg.sender, cmctContract);\r\n   }\r\n\r\n  function setTokenAddress(address cmctContract) public onlyOwner returns(bool success) {\r\n      require(cmctContract != 0);\r\n      cmctToken = CMCTInterface(cmctContract);\r\n      LogSetTokenAddress(msg.sender, cmctContract);\r\n      return true;\r\n  }\r\n\r\n  function getTokenAddress() public view returns(address cmctContract) {\r\n    return cmctToken;\r\n  }\r\n\r\n  function isUser(address user) public view returns(bool isIndeed) {\r\n      return funderStructs[user].registered;\r\n  }\r\n\r\n  function isApproved(address user) public view returns(bool isIndeed) {\r\n      if(!isUser(user)) return false;\r\n      return(funderStructs[user].approved);\r\n  }\r\n\r\n  function registerSelf(bytes32 uid) public onlyIfRunning returns(bool success) {\r\n      require(!isUser(msg.sender));\r\n      funderStructs[msg.sender].registered = true;\r\n      LogUserRegistered(msg.sender, msg.sender, uid);\r\n      return true;\r\n  }\r\n\r\n  function registerUser(address user, bytes32 uid) public onlyOwner onlyIfRunning returns(bool success) {\r\n      require(!isUser(user));\r\n      funderStructs[user].registered = true;\r\n      LogUserRegistered(msg.sender, user, uid);\r\n      return true;      \r\n  }\r\n\r\n  function approveUser(address user, bytes32 uid) public onlyOwner onlyIfRunning returns(bool success) {\r\n      require(isUser(user));\r\n      require(!isApproved(user));\r\n      funderStructs[user].approved = true;\r\n      LogUserApproved(msg.sender, user, uid);\r\n      return true;\r\n  }\r\n\r\n  function disapproveUser(address user, bytes32 uid) public onlyOwner onlyIfRunning returns(bool success) {\r\n      require(isUser(user));\r\n      require(isApproved(user));\r\n      funderStructs[user].approved = false;\r\n      LogUserDisapproved(msg.sender, user, uid);\r\n      return true;      \r\n  }\r\n\r\n  function withdrawEth(uint amount, address to, bytes32 uid) public onlyOwner returns(bool success) {\r\n      LogEthWithdrawn(msg.sender, to, amount, uid);\r\n      to.transfer(amount);\r\n      return true;\r\n  }\r\n\r\n  function relayCMCT(address receiver, uint amount, bytes32 uid) public onlyOwner onlyIfRunning onlyifInitialized returns(bool success) {\r\n    if(!isApproved(receiver)) {\r\n      LogCMCTRelayFailed(msg.sender, receiver, amount, uid);\r\n      return false;\r\n    } else {\r\n      LogCMCTRelayed(msg.sender, receiver, amount, uid);\r\n      require(cmctToken.transfer(receiver, amount));\r\n      return true;\r\n    }\r\n  }\r\n \r\n  function bulkRelayCMCT(address[] receivers, uint[] amounts, bytes32 uid) public onlyOwner onlyIfRunning onlyifInitialized returns(bool success) {\r\n    for(uint i=0; i<receivers.length; i++) {\r\n      if(!isApproved(receivers[i])) {\r\n        LogCMCTRelayFailed(msg.sender, receivers[i], amounts[i], uid);\r\n      } else {\r\n        LogCMCTRelayed(msg.sender, receivers[i], amounts[i], uid);\r\n        require(cmctToken.transfer(receivers[i], amounts[i]));\r\n      } \r\n    }\r\n    return true;\r\n  }\r\n\r\n  function () public onlyIfRunning payable {\r\n    require(isApproved(msg.sender));\r\n    LogEthReceived(msg.sender, msg.value);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"approveUser\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"name\":\"cmctContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"withdrawEth\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRunning\",\"outputs\":[{\"name\":\"contractRunning\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cmctContract\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"disapproveUser\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"bulkRelayCMCT\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUser\",\"outputs\":[{\"name\":\"isIndeed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"name\":\"isIndeed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lastBlock\",\"type\":\"uint256\"}],\"name\":\"SetFinalBlock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastBlock\",\"outputs\":[{\"name\":\"lastBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"registerSelf\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"funderStructs\",\"outputs\":[{\"name\":\"registered\",\"type\":\"bool\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"registerUser\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"relayCMCT\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"onOff\",\"type\":\"bool\"}],\"name\":\"setRunSwitch\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"cmctContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cmctContract\",\"type\":\"address\"}],\"name\":\"LogSetTokenAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"LogUserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"LogUserApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"LogUserDisapproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"LogEthWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"LogCMCTRelayFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"LogCMCTRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogEthReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isRunning\",\"type\":\"bool\"}],\"name\":\"LogSetRunSwitch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lastBlock\",\"type\":\"uint256\"}],\"name\":\"LogSetFinalBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CmctSale","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000047bc01597798dcd7506dcca36ac4302fc93a8cfb","Library":"","SwarmSource":"bzzr://ecba113b4b4fc9a5ef7e32e79b34d331b60145dd1545725d974180f2858118ba"}]}