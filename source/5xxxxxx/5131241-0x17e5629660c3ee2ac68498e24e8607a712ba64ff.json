{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /** \r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() internal {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner. \r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to. \r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Interface for the standard token.\r\n * Based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ninterface EIP20Token {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n  function approve(address spender, uint256 value) public returns (bool success);\r\n  function allowance(address owner, address spender) public view returns (uint256 remaining);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// The owner of this contract should be an externally owned account\r\ncontract PinProtocolInvestment is Ownable {\r\n\r\n  // Address of the target contract\r\n  address public investment_address = 0x77D0f9017304e53181d9519792887E78161ABD25;\r\n  // Major partner address\r\n  address public major_partner_address = 0x8f0592bDCeE38774d93bC1fd2c97ee6540385356;\r\n  // Minor partner address\r\n  address public minor_partner_address = 0xC787C3f6F75D7195361b64318CE019f90507f806;\r\n  // Gas used for transfers.\r\n  uint public gas = 1000;\r\n\r\n  // Payments to this contract require a bit of gas. 100k should be enough.\r\n  function() payable public {\r\n    execute_transfer(msg.value);\r\n  }\r\n\r\n  // Transfer some funds to the target investment address.\r\n  function execute_transfer(uint transfer_amount) internal {\r\n    // Major fee is 60% * (1/11) * value = 6 * value / (10 * 11)\r\n    uint major_fee = transfer_amount * 6 / (10 * 11);\r\n    // Minor fee is 40% * (1/11) * value = 4 * value / (10 * 11)\r\n    uint minor_fee = transfer_amount * 4 / (10 * 11);\r\n\r\n    require(major_partner_address.call.gas(gas).value(major_fee)());\r\n    require(minor_partner_address.call.gas(gas).value(minor_fee)());\r\n\r\n    // Send the rest\r\n    require(investment_address.call.gas(gas).value(transfer_amount - major_fee - minor_fee)());\r\n  }\r\n\r\n  // Sets the amount of gas allowed to investors\r\n  function set_transfer_gas(uint transfer_gas) public onlyOwner {\r\n    gas = transfer_gas;\r\n  }\r\n\r\n  // We can use this function to move unwanted tokens in the contract\r\n  function approve_unwanted_tokens(EIP20Token token, address dest, uint value) public onlyOwner {\r\n    token.approve(dest, value);\r\n  }\r\n\r\n  // This contract is designed to have no balance.\r\n  // However, we include this function to avoid stuck value by some unknown mishap.\r\n  function emergency_withdraw() public onlyOwner {\r\n    require(msg.sender.call.gas(gas).value(this.balance)());\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"investment_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transfer_gas\",\"type\":\"uint256\"}],\"name\":\"set_transfer_gas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minor_partner_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve_unwanted_tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergency_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"major_partner_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"PinProtocolInvestment","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://80489594520b19229203fce80793dcbf6ea2116b812fad9a644df25818d3c679"}]}